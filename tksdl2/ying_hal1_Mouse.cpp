// ---- ying_hal1_Mouse.cpp: auto generated by YInG - the YAC interface generator (Mon, 15/Sep/2025 17:45:49)

#ifndef YAC_NO_HOST
void  YAC_CALL Mouse___grab         (void *                        );
void  YAC_CALL Mouse___ungrab       (void *                        );
void  YAC_CALL Mouse___toggleGrab   (void *                        );
sSI   YAC_CALL Mouse___getX         (void *                        );
sSI   YAC_CALL Mouse___getY         (void *                        );
sSI   YAC_CALL Mouse___getButtons   (void *                        );
sSI   YAC_CALL Mouse___isGrabbed    (void *                        );
sSI   YAC_CALL Mouse___getDx        (void *                        );
sSI   YAC_CALL Mouse___getDy        (void *                        );
void  YAC_CALL Mouse___unproject    (void *, yacmemptr             );
sSI   YAC_CALL Mouse___getChangedButtons(void *                    );
void  YAC_CALL Mouse___showPointer  (void *, yacmemptr             );
void  YAC_CALL Mouse___setPointerMode(void *, yacmemptr            );
sSI   YAC_CALL Mouse___getPointerMode(void *                       );
void  YAC_CALL Mouse__warpTo        (void *, yacmemptr             );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Mouse" reflection map (implementation) ------------------
sUI          YAC_VCALL _Mouse::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Mouse::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Mouse::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Mouse::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Mouse::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Mouse::yacMethodGetNum                  (void) {return 16;}
const char **YAC_VCALL _Mouse::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "grab", "ungrab", "toggleGrab", "getX", "getY", "getButtons", "isGrabbed", "getDx", "getDy", "unproject", "getChangedButtons", "showPointer", "setPointerMode", "getPointerMode", "warpTo"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Mouse::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Mouse::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={3, 3,};static const sUI rt11[]={0,};static const sUI rt12[]={1,};static const sUI rt13[]={1,};static const sUI rt14[]={0,};static const sUI rt15[]={1, 1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Mouse::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0, (const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Mouse::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Mouse::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Mouse::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Mouse___grab, (void*)Mouse___ungrab, (void*)Mouse___toggleGrab, (void*)Mouse___getX, (void*)Mouse___getY, (void*)Mouse___getButtons, (void*)Mouse___isGrabbed, (void*)Mouse___getDx, (void*)Mouse___getDy, (void*)Mouse___unproject, (void*)Mouse___getChangedButtons, (void*)Mouse___showPointer, (void*)Mouse___setPointerMode, (void*)Mouse___getPointerMode, (void*)Mouse__warpTo}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Mouse::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Mouse::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Mouse::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Mouse::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(_Mouse, "Mouse");

#ifndef YAC_NO_HOST
void  YAC_CALL Mouse___grab         (void *_o                                ) {((_Mouse*)_o)->_grab();}
void  YAC_CALL Mouse___ungrab       (void *_o                                ) {((_Mouse*)_o)->_ungrab();}
void  YAC_CALL Mouse___toggleGrab   (void *_o                                ) {((_Mouse*)_o)->_toggleGrab();}
sSI   YAC_CALL Mouse___getX         (void *_o                                ) {return (sSI)((_Mouse*)_o)->_getX();}
sSI   YAC_CALL Mouse___getY         (void *_o                                ) {return (sSI)((_Mouse*)_o)->_getY();}
sSI   YAC_CALL Mouse___getButtons   (void *_o                                ) {return (sSI)((_Mouse*)_o)->_getButtons();}
sSI   YAC_CALL Mouse___isGrabbed    (void *_o                                ) {return (sSI)((_Mouse*)_o)->_isGrabbed();}
sSI   YAC_CALL Mouse___getDx        (void *_o                                ) {return (sSI)((_Mouse*)_o)->_getDx();}
sSI   YAC_CALL Mouse___getDy        (void *_o                                ) {return (sSI)((_Mouse*)_o)->_getDy();}
void  YAC_CALL Mouse___unproject    (void *_o, yacmemptr _args               ) {((_Mouse*)_o)->_unproject(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL Mouse___getChangedButtons(void *_o                            ) {return (sSI)((_Mouse*)_o)->_getChangedButtons();}
void  YAC_CALL Mouse___showPointer  (void *_o, yacmemptr _args               ) {((_Mouse*)_o)->_showPointer(_args.mem[0].si);}
void  YAC_CALL Mouse___setPointerMode(void *_o, yacmemptr _args              ) {((_Mouse*)_o)->_setPointerMode(_args.mem[0].si);}
sSI   YAC_CALL Mouse___getPointerMode(void *_o                               ) {return (sSI)((_Mouse*)_o)->_getPointerMode();}
void  YAC_CALL Mouse__warpTo        (void *_o, yacmemptr _args               ) {((_Mouse*)_o)->warpTo(_args.mem[0].si, _args.mem[1].si);}
#endif // YAC_NO_HOST
