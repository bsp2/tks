// ---- ying_audio_SamplePlayer.cpp: auto generated by YInG - the YAC interface generator (Mon, 15/Sep/2025 17:45:49)

#ifndef YAC_NO_HOST
void  YAC_CALL SamplePlayer___setPolyphony(void *, yacmemptr       );
sSI   YAC_CALL SamplePlayer___getPolyphony(void *                  );
void  YAC_CALL SamplePlayer___setVolume(void *, yacmemptr          );
sF32  YAC_CALL SamplePlayer___getVolume(void *                     );
void  YAC_CALL SamplePlayer___noteOn(void *, yacmemptr             );
void  YAC_CALL SamplePlayer___noteOff(void *, yacmemptr            );
void* YAC_CALL SamplePlayer___getSample(void *                     );
void  YAC_CALL SamplePlayer___setSample(void *, yacmemptr          );
void  YAC_CALL SamplePlayer___processSamples(void *, yacmemptr     );
void  YAC_CALL SamplePlayer___setPan(void *, yacmemptr             );
sF32  YAC_CALL SamplePlayer___getPan(void *                        );
#endif // YAC_NO_HOST

// ------------------ YAC class "_SamplePlayer" reflection map (implementation) ------------------
sUI          YAC_VCALL _SamplePlayer::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _SamplePlayer::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _SamplePlayer::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _SamplePlayer::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _SamplePlayer::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _SamplePlayer::yacMethodGetNum                  (void) {return 12;}
const char **YAC_VCALL _SamplePlayer::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "setPolyphony", "getPolyphony", "setVolume", "getVolume", "noteOn", "noteOff", "getSample", "setSample", "processSamples", "setPan", "getPan"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _SamplePlayer::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 0, 1, 0, 2, 1, 0, 1, 1, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _SamplePlayer::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={0,};static const sUI rt3[]={2,};static const sUI rt4[]={0,};static const sUI rt5[]={1, 2,};static const sUI rt6[]={1,};static const sUI rt7[]={0,};static const sUI rt8[]={3,};static const sUI rt9[]={3,};static const sUI rt10[]={2,};static const sUI rt11[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _SamplePlayer::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0, (const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _SamplePlayer::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 1, 0, 2, 0, 0, 3, 0, 0, 0, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _SamplePlayer::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _SamplePlayer::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)SamplePlayer___setPolyphony, (void*)SamplePlayer___getPolyphony, (void*)SamplePlayer___setVolume, (void*)SamplePlayer___getVolume, (void*)SamplePlayer___noteOn, (void*)SamplePlayer___noteOff, (void*)SamplePlayer___getSample, (void*)SamplePlayer___setSample, (void*)SamplePlayer___processSamples, (void*)SamplePlayer___setPan, (void*)SamplePlayer___getPan}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _SamplePlayer::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _SamplePlayer::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _SamplePlayer::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _SamplePlayer::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(_SamplePlayer, "SamplePlayer");

#ifndef YAC_NO_HOST
void  YAC_CALL SamplePlayer___setPolyphony(void *_o, yacmemptr _args         ) {((_SamplePlayer*)_o)->_setPolyphony(_args.mem[0].si);}
sSI   YAC_CALL SamplePlayer___getPolyphony(void *_o                          ) {return (sSI)((_SamplePlayer*)_o)->_getPolyphony();}
void  YAC_CALL SamplePlayer___setVolume(void *_o, yacmemptr _args            ) {((_SamplePlayer*)_o)->_setVolume(_args.mem[0].f32);}
sF32  YAC_CALL SamplePlayer___getVolume(void *_o                             ) {return (sF32)((_SamplePlayer*)_o)->_getVolume();}
void  YAC_CALL SamplePlayer___noteOn(void *_o, yacmemptr _args               ) {((_SamplePlayer*)_o)->_noteOn(_args.mem[0].si, _args.mem[1].f32);}
void  YAC_CALL SamplePlayer___noteOff(void *_o, yacmemptr _args              ) {((_SamplePlayer*)_o)->_noteOff(_args.mem[0].si);}
void* YAC_CALL SamplePlayer___getSample(void *_o                             ) {return (void*)((_SamplePlayer*)_o)->_getSample();}
void  YAC_CALL SamplePlayer___setSample(void *_o, yacmemptr _args            ) {((_SamplePlayer*)_o)->_setSample(_args.mem[0].o);}
void  YAC_CALL SamplePlayer___processSamples(void *_o, yacmemptr _args       ) {((_SamplePlayer*)_o)->_processSamples(_args.mem[0].o);}
void  YAC_CALL SamplePlayer___setPan(void *_o, yacmemptr _args               ) {((_SamplePlayer*)_o)->_setPan(_args.mem[0].f32);}
sF32  YAC_CALL SamplePlayer___getPan(void *_o                                ) {return (sF32)((_SamplePlayer*)_o)->_getPan();}
#endif // YAC_NO_HOST
