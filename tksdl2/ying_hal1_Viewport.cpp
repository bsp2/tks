// ---- ying_hal1_Viewport.cpp: auto generated by YInG - the YAC interface generator (Mon, 15/Sep/2025 17:45:49)

#ifndef YAC_NO_HOST
sSI   YAC_CALL Viewport___openWindow(void *, yacmemptr             );
sSI   YAC_CALL Viewport___openScreen(void *, yacmemptr             );
void  YAC_CALL Viewport___toggleFullScreen(void *                  );
sSI   YAC_CALL Viewport___isFullScreen(void *                      );
void  YAC_CALL Viewport___close     (void *                        );
void  YAC_CALL Viewport___beginPaint(void *                        );
void  YAC_CALL Viewport___endPaint  (void *                        );
sSI   YAC_CALL Viewport___getWidth  (void *                        );
sSI   YAC_CALL Viewport___getHeight (void *                        );
sSI   YAC_CALL Viewport___getDepth  (void *                        );
void  YAC_CALL Viewport___setCaption(void *, yacmemptr             );
void  YAC_CALL Viewport___waitVBlank(void *                        );
sSI   YAC_CALL Viewport___getFrequency(void *                      );
void  YAC_CALL Viewport___setFlags  (void *, yacmemptr             );
sSI   YAC_CALL Viewport___getFlags  (void *                        );
sSI   YAC_CALL Viewport___resizeWindow(void *, yacmemptr           );
void  YAC_CALL Viewport___needRedraw(void *                        );
void  YAC_CALL Viewport___setScreenResolution(void *, yacmemptr    );
sSI   YAC_CALL Viewport___getDoubleBuffer(void *                   );
void  YAC_CALL Viewport___setDoubleBuffer(void *, yacmemptr        );
sSI   YAC_CALL Viewport___swapInterval(void *, yacmemptr           );
sSI   YAC_CALL Viewport___getMultisampleBuffers(void *             );
void  YAC_CALL Viewport___setMultisampleBuffers(void *, yacmemptr  );
sSI   YAC_CALL Viewport___getMultisampleSamples(void *             );
void  YAC_CALL Viewport___setMultisampleSamples(void *, yacmemptr  );
void  YAC_CALL Viewport___setStencilBits(void *, yacmemptr         );
void  YAC_CALL Viewport___interruptScreenSaver(void *              );
void  YAC_CALL Viewport___setEnableRedraw(void *, yacmemptr        );
sSI   YAC_CALL Viewport___getDesktopWidth(void *                   );
sSI   YAC_CALL Viewport___getDesktopHeight(void *                  );
void  YAC_CALL Viewport___setEnableGLError(void *, yacmemptr       );
sSI   YAC_CALL Viewport___getEnableGLError(void *                  );
void  YAC_CALL Viewport___pushGLContext(void *                     );
void  YAC_CALL Viewport___popGLContext(void *                      );
sSI   YAC_CALL Viewport___getDpi    (void *                        );
void  YAC_CALL Viewport___setGeometry(void *, yacmemptr            );
sSI   YAC_CALL Viewport___getPositionX(void *                      );
sSI   YAC_CALL Viewport___getPositionY(void *                      );
sSI   YAC_CALL Viewport___getSizeX  (void *                        );
sSI   YAC_CALL Viewport___getSizeY  (void *                        );
void  YAC_CALL Viewport___setMinimumSize(void *, yacmemptr         );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Viewport" reflection map (implementation) ------------------
sUI          YAC_VCALL _Viewport::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Viewport::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Viewport::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Viewport::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Viewport::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Viewport::yacMethodGetNum                  (void) {return 42;}
const char **YAC_VCALL _Viewport::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "openWindow", "openScreen", "toggleFullScreen", "isFullScreen", "close", "beginPaint", "endPaint", "getWidth", "getHeight", "getDepth", "setCaption", "waitVBlank", "getFrequency", "setFlags", "getFlags", "resizeWindow", "needRedraw", "setScreenResolution", "getDoubleBuffer", "setDoubleBuffer", "swapInterval", "getMultisampleBuffers", "setMultisampleBuffers", "getMultisampleSamples", "setMultisampleSamples", "setStencilBits", "interruptScreenSaver", "setEnableRedraw", "getDesktopWidth", "getDesktopHeight", "setEnableGLError", "getEnableGLError", "pushGLContext", "popGLContext", "getDpi", "setGeometry", "getPositionX", "getPositionY", "getSizeX", "getSizeY", "setMinimumSize"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Viewport::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Viewport::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1, 1,};static const sUI rt2[]={1, 1, 1,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={0,};static const sUI rt11[]={3,};static const sUI rt12[]={0,};static const sUI rt13[]={0,};static const sUI rt14[]={1,};static const sUI rt15[]={0,};static const sUI rt16[]={1, 1,};static const sUI rt17[]={0,};static const sUI rt18[]={1, 1, 1,};static const sUI rt19[]={0,};static const sUI rt20[]={1,};static const sUI rt21[]={1,};static const sUI rt22[]={0,};static const sUI rt23[]={1,};static const sUI rt24[]={0,};static const sUI rt25[]={1,};static const sUI rt26[]={1,};static const sUI rt27[]={0,};static const sUI rt28[]={1,};static const sUI rt29[]={0,};static const sUI rt30[]={0,};static const sUI rt31[]={1,};static const sUI rt32[]={0,};static const sUI rt33[]={0,};static const sUI rt34[]={0,};static const sUI rt35[]={0,};static const sUI rt36[]={1, 1, 1, 1,};static const sUI rt37[]={0,};static const sUI rt38[]={0,};static const sUI rt39[]={0,};static const sUI rt40[]={0,};static const sUI rt41[]={1, 1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39, rt40, rt41}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Viewport::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0, (const char*)0,};static const char *rs2[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={"String",};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0, (const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char *rs34[]={(const char*)0,};static const char *rs35[]={(const char*)0,};static const char *rs36[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs37[]={(const char*)0,};static const char *rs38[]={(const char*)0,};static const char *rs39[]={(const char*)0,};static const char *rs40[]={(const char*)0,};static const char *rs41[]={(const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39, rs40, rs41}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Viewport::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Viewport::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Viewport::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Viewport___openWindow, (void*)Viewport___openScreen, (void*)Viewport___toggleFullScreen, (void*)Viewport___isFullScreen, (void*)Viewport___close, (void*)Viewport___beginPaint, (void*)Viewport___endPaint, (void*)Viewport___getWidth, (void*)Viewport___getHeight, (void*)Viewport___getDepth, (void*)Viewport___setCaption, (void*)Viewport___waitVBlank, (void*)Viewport___getFrequency, (void*)Viewport___setFlags, (void*)Viewport___getFlags, (void*)Viewport___resizeWindow, (void*)Viewport___needRedraw, (void*)Viewport___setScreenResolution, (void*)Viewport___getDoubleBuffer, (void*)Viewport___setDoubleBuffer, (void*)Viewport___swapInterval, (void*)Viewport___getMultisampleBuffers, (void*)Viewport___setMultisampleBuffers, (void*)Viewport___getMultisampleSamples, (void*)Viewport___setMultisampleSamples, (void*)Viewport___setStencilBits, (void*)Viewport___interruptScreenSaver, (void*)Viewport___setEnableRedraw, (void*)Viewport___getDesktopWidth, (void*)Viewport___getDesktopHeight, (void*)Viewport___setEnableGLError, (void*)Viewport___getEnableGLError, (void*)Viewport___pushGLContext, (void*)Viewport___popGLContext, (void*)Viewport___getDpi, (void*)Viewport___setGeometry, (void*)Viewport___getPositionX, (void*)Viewport___getPositionY, (void*)Viewport___getSizeX, (void*)Viewport___getSizeY, (void*)Viewport___setMinimumSize}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Viewport::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Viewport::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Viewport::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Viewport::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(_Viewport, "Viewport");

#ifndef YAC_NO_HOST
sSI   YAC_CALL Viewport___openWindow(void *_o, yacmemptr _args               ) {return (sSI)((_Viewport*)_o)->_openWindow(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL Viewport___openScreen(void *_o, yacmemptr _args               ) {return (sSI)((_Viewport*)_o)->_openScreen(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL Viewport___toggleFullScreen(void *_o                          ) {((_Viewport*)_o)->_toggleFullScreen();}
sSI   YAC_CALL Viewport___isFullScreen(void *_o                              ) {return (sSI)((_Viewport*)_o)->_isFullScreen();}
void  YAC_CALL Viewport___close     (void *_o                                ) {((_Viewport*)_o)->_close();}
void  YAC_CALL Viewport___beginPaint(void *_o                                ) {((_Viewport*)_o)->_beginPaint();}
void  YAC_CALL Viewport___endPaint  (void *_o                                ) {((_Viewport*)_o)->_endPaint();}
sSI   YAC_CALL Viewport___getWidth  (void *_o                                ) {return (sSI)((_Viewport*)_o)->_getWidth();}
sSI   YAC_CALL Viewport___getHeight (void *_o                                ) {return (sSI)((_Viewport*)_o)->_getHeight();}
sSI   YAC_CALL Viewport___getDepth  (void *_o                                ) {return (sSI)((_Viewport*)_o)->_getDepth();}
void  YAC_CALL Viewport___setCaption(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_Viewport*)_o)->_setCaption((YAC_String*)_args.mem[0].o);}}
void  YAC_CALL Viewport___waitVBlank(void *_o                                ) {((_Viewport*)_o)->_waitVBlank();}
sSI   YAC_CALL Viewport___getFrequency(void *_o                              ) {return (sSI)((_Viewport*)_o)->_getFrequency();}
void  YAC_CALL Viewport___setFlags  (void *_o, yacmemptr _args               ) {((_Viewport*)_o)->_setFlags(_args.mem[0].si);}
sSI   YAC_CALL Viewport___getFlags  (void *_o                                ) {return (sSI)((_Viewport*)_o)->_getFlags();}
sSI   YAC_CALL Viewport___resizeWindow(void *_o, yacmemptr _args             ) {return (sSI)((_Viewport*)_o)->_resizeWindow(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL Viewport___needRedraw(void *_o                                ) {((_Viewport*)_o)->_needRedraw();}
void  YAC_CALL Viewport___setScreenResolution(void *_o, yacmemptr _args      ) {((_Viewport*)_o)->_setScreenResolution(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL Viewport___getDoubleBuffer(void *_o                           ) {return (sSI)((_Viewport*)_o)->_getDoubleBuffer();}
void  YAC_CALL Viewport___setDoubleBuffer(void *_o, yacmemptr _args          ) {((_Viewport*)_o)->_setDoubleBuffer(_args.mem[0].si);}
sSI   YAC_CALL Viewport___swapInterval(void *_o, yacmemptr _args             ) {return (sSI)((_Viewport*)_o)->_swapInterval(_args.mem[0].si);}
sSI   YAC_CALL Viewport___getMultisampleBuffers(void *_o                     ) {return (sSI)((_Viewport*)_o)->_getMultisampleBuffers();}
void  YAC_CALL Viewport___setMultisampleBuffers(void *_o, yacmemptr _args    ) {((_Viewport*)_o)->_setMultisampleBuffers(_args.mem[0].si);}
sSI   YAC_CALL Viewport___getMultisampleSamples(void *_o                     ) {return (sSI)((_Viewport*)_o)->_getMultisampleSamples();}
void  YAC_CALL Viewport___setMultisampleSamples(void *_o, yacmemptr _args    ) {((_Viewport*)_o)->_setMultisampleSamples(_args.mem[0].si);}
void  YAC_CALL Viewport___setStencilBits(void *_o, yacmemptr _args           ) {((_Viewport*)_o)->_setStencilBits(_args.mem[0].si);}
void  YAC_CALL Viewport___interruptScreenSaver(void *_o                      ) {((_Viewport*)_o)->_interruptScreenSaver();}
void  YAC_CALL Viewport___setEnableRedraw(void *_o, yacmemptr _args          ) {((_Viewport*)_o)->_setEnableRedraw(_args.mem[0].si);}
sSI   YAC_CALL Viewport___getDesktopWidth(void *_o                           ) {return (sSI)((_Viewport*)_o)->_getDesktopWidth();}
sSI   YAC_CALL Viewport___getDesktopHeight(void *_o                          ) {return (sSI)((_Viewport*)_o)->_getDesktopHeight();}
void  YAC_CALL Viewport___setEnableGLError(void *_o, yacmemptr _args         ) {((_Viewport*)_o)->_setEnableGLError(_args.mem[0].si);}
sSI   YAC_CALL Viewport___getEnableGLError(void *_o                          ) {return (sSI)((_Viewport*)_o)->_getEnableGLError();}
void  YAC_CALL Viewport___pushGLContext(void *_o                             ) {((_Viewport*)_o)->_pushGLContext();}
void  YAC_CALL Viewport___popGLContext(void *_o                              ) {((_Viewport*)_o)->_popGLContext();}
sSI   YAC_CALL Viewport___getDpi    (void *_o                                ) {return (sSI)((_Viewport*)_o)->_getDpi();}
void  YAC_CALL Viewport___setGeometry(void *_o, yacmemptr _args              ) {((_Viewport*)_o)->_setGeometry(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
sSI   YAC_CALL Viewport___getPositionX(void *_o                              ) {return (sSI)((_Viewport*)_o)->_getPositionX();}
sSI   YAC_CALL Viewport___getPositionY(void *_o                              ) {return (sSI)((_Viewport*)_o)->_getPositionY();}
sSI   YAC_CALL Viewport___getSizeX  (void *_o                                ) {return (sSI)((_Viewport*)_o)->_getSizeX();}
sSI   YAC_CALL Viewport___getSizeY  (void *_o                                ) {return (sSI)((_Viewport*)_o)->_getSizeY();}
void  YAC_CALL Viewport___setMinimumSize(void *_o, yacmemptr _args           ) {((_Viewport*)_o)->_setMinimumSize(_args.mem[0].si, _args.mem[1].si);}
#endif // YAC_NO_HOST
