// ---- ying_audio_AudioSample.cpp: auto generated by YInG - the YAC interface generator (Mon, 15/Sep/2025 17:45:49)

#ifndef YAC_NO_HOST
sSI   YAC_CALL AudioSample___allocBuffer(void *, yacmemptr         );
void  YAC_CALL AudioSample___freeBuffer(void *                     );
void  YAC_CALL AudioSample___visitBuffer(void *, yacmemptr         );
void  YAC_CALL AudioSample___normalize(void *                      );
sSI   YAC_CALL AudioSample___loadAIFF(void *, yacmemptr            );
sSI   YAC_CALL AudioSample___loadLocalAIFF(void *, yacmemptr       );
sSI   YAC_CALL AudioSample___getChannels(void *                    );
sF32  YAC_CALL AudioSample___getFrequency(void *                   );
sSI   YAC_CALL AudioSample___getOffset(void *                      );
void  YAC_CALL AudioSample___setOffset(void *, yacmemptr           );
sSI   YAC_CALL AudioSample___getLength(void *                      );
void  YAC_CALL AudioSample___setLength(void *, yacmemptr           );
sSI   YAC_CALL AudioSample___getRepeatOffset(void *                );
void  YAC_CALL AudioSample___setRepeatOffset(void *, yacmemptr     );
sSI   YAC_CALL AudioSample___getRepeatLength(void *                );
void  YAC_CALL AudioSample___setRepeatLength(void *, yacmemptr     );
sSI   YAC_CALL AudioSample___copyBufferFrom(void *, yacmemptr      );
sF32  YAC_CALL AudioSample___getBaseFrequency(void *               );
void  YAC_CALL AudioSample___setBaseFrequency(void *, yacmemptr    );
void  YAC_CALL AudioSample___setFrequency(void *, yacmemptr        );
sSI   YAC_CALL AudioSample___convertChannels(void *, yacmemptr     );
#endif // YAC_NO_HOST

// ------------------ YAC class "_AudioSample" reflection map (implementation) ------------------
sUI          YAC_VCALL _AudioSample::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _AudioSample::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _AudioSample::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _AudioSample::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _AudioSample::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _AudioSample::yacMethodGetNum                  (void) {return 22;}
const char **YAC_VCALL _AudioSample::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "allocBuffer", "freeBuffer", "visitBuffer", "normalize", "loadAIFF", "loadLocalAIFF", "getChannels", "getFrequency", "getOffset", "setOffset", "getLength", "setLength", "getRepeatOffset", "setRepeatOffset", "getRepeatLength", "setRepeatLength", "copyBufferFrom", "getBaseFrequency", "setBaseFrequency", "setFrequency", "convertChannels"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _AudioSample::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 4, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _AudioSample::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1, 2, 1, 1,};static const sUI rt2[]={0,};static const sUI rt3[]={3,};static const sUI rt4[]={0,};static const sUI rt5[]={3,};static const sUI rt6[]={3,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={1,};static const sUI rt11[]={0,};static const sUI rt12[]={1,};static const sUI rt13[]={0,};static const sUI rt14[]={1,};static const sUI rt15[]={0,};static const sUI rt16[]={1,};static const sUI rt17[]={3,};static const sUI rt18[]={0,};static const sUI rt19[]={2,};static const sUI rt20[]={2,};static const sUI rt21[]={1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _AudioSample::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={"String",};static const char *rs6[]={"String",};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _AudioSample::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 0, 0, 0, 1, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 0, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _AudioSample::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _AudioSample::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)AudioSample___allocBuffer, (void*)AudioSample___freeBuffer, (void*)AudioSample___visitBuffer, (void*)AudioSample___normalize, (void*)AudioSample___loadAIFF, (void*)AudioSample___loadLocalAIFF, (void*)AudioSample___getChannels, (void*)AudioSample___getFrequency, (void*)AudioSample___getOffset, (void*)AudioSample___setOffset, (void*)AudioSample___getLength, (void*)AudioSample___setLength, (void*)AudioSample___getRepeatOffset, (void*)AudioSample___setRepeatOffset, (void*)AudioSample___getRepeatLength, (void*)AudioSample___setRepeatLength, (void*)AudioSample___copyBufferFrom, (void*)AudioSample___getBaseFrequency, (void*)AudioSample___setBaseFrequency, (void*)AudioSample___setFrequency, (void*)AudioSample___convertChannels}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _AudioSample::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _AudioSample::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _AudioSample::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _AudioSample::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(_AudioSample, "AudioSample");

#ifndef YAC_NO_HOST
sSI   YAC_CALL AudioSample___allocBuffer(void *_o, yacmemptr _args           ) {return (sSI)((_AudioSample*)_o)->_allocBuffer(_args.mem[0].si, _args.mem[1].f32, _args.mem[2].si, _args.mem[3].si);}
void  YAC_CALL AudioSample___freeBuffer(void *_o                             ) {((_AudioSample*)_o)->_freeBuffer();}
void  YAC_CALL AudioSample___visitBuffer(void *_o, yacmemptr _args           ) {((_AudioSample*)_o)->_visitBuffer(_args.mem[0].o);}
void  YAC_CALL AudioSample___normalize(void *_o                              ) {((_AudioSample*)_o)->_normalize();}
sSI   YAC_CALL AudioSample___loadAIFF(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_AudioSample*)_o)->_loadAIFF((YAC_String*)_args.mem[0].o);}return 0;}
sSI   YAC_CALL AudioSample___loadLocalAIFF(void *_o, yacmemptr _args         ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_AudioSample*)_o)->_loadLocalAIFF((YAC_String*)_args.mem[0].o);}return 0;}
sSI   YAC_CALL AudioSample___getChannels(void *_o                            ) {return (sSI)((_AudioSample*)_o)->_getChannels();}
sF32  YAC_CALL AudioSample___getFrequency(void *_o                           ) {return (sF32)((_AudioSample*)_o)->_getFrequency();}
sSI   YAC_CALL AudioSample___getOffset(void *_o                              ) {return (sSI)((_AudioSample*)_o)->_getOffset();}
void  YAC_CALL AudioSample___setOffset(void *_o, yacmemptr _args             ) {((_AudioSample*)_o)->_setOffset(_args.mem[0].si);}
sSI   YAC_CALL AudioSample___getLength(void *_o                              ) {return (sSI)((_AudioSample*)_o)->_getLength();}
void  YAC_CALL AudioSample___setLength(void *_o, yacmemptr _args             ) {((_AudioSample*)_o)->_setLength(_args.mem[0].si);}
sSI   YAC_CALL AudioSample___getRepeatOffset(void *_o                        ) {return (sSI)((_AudioSample*)_o)->_getRepeatOffset();}
void  YAC_CALL AudioSample___setRepeatOffset(void *_o, yacmemptr _args       ) {((_AudioSample*)_o)->_setRepeatOffset(_args.mem[0].si);}
sSI   YAC_CALL AudioSample___getRepeatLength(void *_o                        ) {return (sSI)((_AudioSample*)_o)->_getRepeatLength();}
void  YAC_CALL AudioSample___setRepeatLength(void *_o, yacmemptr _args       ) {((_AudioSample*)_o)->_setRepeatLength(_args.mem[0].si);}
sSI   YAC_CALL AudioSample___copyBufferFrom(void *_o, yacmemptr _args        ) {return (sSI)((_AudioSample*)_o)->_copyBufferFrom(_args.mem[0].o);}
sF32  YAC_CALL AudioSample___getBaseFrequency(void *_o                       ) {return (sF32)((_AudioSample*)_o)->_getBaseFrequency();}
void  YAC_CALL AudioSample___setBaseFrequency(void *_o, yacmemptr _args      ) {((_AudioSample*)_o)->_setBaseFrequency(_args.mem[0].f32);}
void  YAC_CALL AudioSample___setFrequency(void *_o, yacmemptr _args          ) {((_AudioSample*)_o)->_setFrequency(_args.mem[0].f32);}
sSI   YAC_CALL AudioSample___convertChannels(void *_o, yacmemptr _args       ) {return (sSI)((_AudioSample*)_o)->_convertChannels(_args.mem[0].si);}
#endif // YAC_NO_HOST
