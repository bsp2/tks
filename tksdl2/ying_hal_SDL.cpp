// ---- ying_hal_SDL.cpp: auto generated by YInG - the YAC interface generator (Mon, 15/Sep/2025 17:45:49)

#ifndef YAC_NO_HOST
void  YAC_CALL SDL___eventLoop      (void *                        );
void  YAC_CALL SDL___exitEventLoop  (void *                        );
sSI   YAC_CALL SDL__processSDLEvent (void *, yacmemptr             );
void  YAC_CALL SDL__drainEventQueue (void *                        );
sSI   YAC_CALL SDL___getTicks       (void *                        );
void  YAC_CALL SDL___triggerEvent   (void *, yacmemptr             );
void  YAC_CALL SDL___setRedrawFlag  (void *, yacmemptr             );
sSI   YAC_CALL SDL___getRedrawFlag  (void *                        );
void  YAC_CALL SDL___delay          (void *, yacmemptr             );
void  YAC_CALL SDL___sendEvent      (void *, yacmemptr             );
void  YAC_CALL SDL___enableKeyRepeat(void *, yacmemptr             );
sSI   YAC_CALL SDL___getNumJoysticks(void *                        );
void  YAC_CALL SDL___getJoystick    (void *, yacmemptr, YAC_Value *);
void  YAC_CALL SDL___updateJoysticks(void *                        );
void  YAC_CALL SDL___reportJoystickEvents(void *, yacmemptr        );
void  YAC_CALL SDL___setEventPolling(void *, yacmemptr             );
sSI   YAC_CALL SDL___getEventPolling(void *                        );
sSI   YAC_CALL SDL___enableUNICODE  (void *, yacmemptr             );
sSI   YAC_CALL SDL___isApplicationActive(void *                    );
sSI   YAC_CALL SDL___pollEvent      (void *                        );
void  YAC_CALL SDL___setTimerInterval(void *, yacmemptr            );
sSI   YAC_CALL SDL___getTimerInterval(void *                       );
void  YAC_CALL SDL___getNativeWindowHandle(void *, YAC_Value *     );
void  YAC_CALL SDL__showWindow      (void *                        );
void  YAC_CALL SDL__hideWindow      (void *                        );
sSI   YAC_CALL SDL___getNativeProcessId(void *                     );
void  YAC_CALL SDL___allowShowNativeWindow(void *, yacmemptr       );
void  YAC_CALL SDL___showNativeWindow(void *, yacmemptr            );
void  YAC_CALL SDL___installWindowCreateAndDestroyHook(void *      );
void  YAC_CALL SDL___uninstallWindowCreateAndDestroyHook(void *    );
void  YAC_CALL SDL___showOtherWindow(void *, yacmemptr             );
void  YAC_CALL SDL___hideOtherWindow(void *, yacmemptr             );
void  YAC_CALL SDL___bringWindowToTop(void *, yacmemptr            );
void  YAC_CALL SDL__setDpiAwareness (void *, yacmemptr             );
void  YAC_CALL SDL__setTouchInput   (void *, yacmemptr             );
void  YAC_CALL SDL__setEnableWindowTitleAndBorder(void *, yacmemptr);
sSI   YAC_CALL SDL__setIconFromBMP  (void *, yacmemptr             );
void  YAC_CALL SDL__setCursorZoom   (void *, yacmemptr             );
sSI   YAC_CALL SDL__getCursorZoom   (void *                        );
#endif // YAC_NO_HOST

// ------------------ YAC class "_SDL" reflection map (implementation) ------------------
sUI          YAC_VCALL _SDL::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _SDL::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _SDL::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _SDL::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _SDL::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _SDL::yacMethodGetNum                  (void) {return 40;}
const char **YAC_VCALL _SDL::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "eventLoop", "exitEventLoop", "processSDLEvent", "drainEventQueue", "getTicks", "triggerEvent", "setRedrawFlag", "getRedrawFlag", "delay", "sendEvent", "enableKeyRepeat", "getNumJoysticks", "getJoystick", "updateJoysticks", "reportJoystickEvents", "setEventPolling", "getEventPolling", "enableUNICODE", "isApplicationActive", "pollEvent", "setTimerInterval", "getTimerInterval", "getNativeWindowHandle", "showWindow", "hideWindow", "getNativeProcessId", "allowShowNativeWindow", "showNativeWindow", "installWindowCreateAndDestroyHook", "uninstallWindowCreateAndDestroyHook", "showOtherWindow", "hideOtherWindow", "bringWindowToTop", "setDpiAwareness", "setTouchInput", "setEnableWindowTitleAndBorder", "setIconFromBMP", "setCursorZoom", "getCursorZoom"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _SDL::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 2, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _SDL::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={1,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={3,};static const sUI rt7[]={1,};static const sUI rt8[]={0,};static const sUI rt9[]={1,};static const sUI rt10[]={3,};static const sUI rt11[]={1, 1,};static const sUI rt12[]={0,};static const sUI rt13[]={1,};static const sUI rt14[]={0,};static const sUI rt15[]={1,};static const sUI rt16[]={1,};static const sUI rt17[]={0,};static const sUI rt18[]={1,};static const sUI rt19[]={0,};static const sUI rt20[]={0,};static const sUI rt21[]={1,};static const sUI rt22[]={0,};static const sUI rt23[]={0,};static const sUI rt24[]={0,};static const sUI rt25[]={0,};static const sUI rt26[]={0,};static const sUI rt27[]={1,};static const sUI rt28[]={3, 1,};static const sUI rt29[]={0,};static const sUI rt30[]={0,};static const sUI rt31[]={1,};static const sUI rt32[]={1,};static const sUI rt33[]={1,};static const sUI rt34[]={1,};static const sUI rt35[]={1,};static const sUI rt36[]={1, 1,};static const sUI rt37[]={3,};static const sUI rt38[]={1,};static const sUI rt39[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _SDL::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0, (const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={"String", (const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char *rs34[]={(const char*)0,};static const char *rs35[]={(const char*)0,};static const char *rs36[]={(const char*)0, (const char*)0,};static const char *rs37[]={(const char*)0,};static const char *rs38[]={(const char*)0,};static const char *rs39[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _SDL::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 4, 0, 0, 0, 1, 1, 1, 1, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _SDL::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _SDL::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)SDL___eventLoop, (void*)SDL___exitEventLoop, (void*)SDL__processSDLEvent, (void*)SDL__drainEventQueue, (void*)SDL___getTicks, (void*)SDL___triggerEvent, (void*)SDL___setRedrawFlag, (void*)SDL___getRedrawFlag, (void*)SDL___delay, (void*)SDL___sendEvent, (void*)SDL___enableKeyRepeat, (void*)SDL___getNumJoysticks, (void*)SDL___getJoystick, (void*)SDL___updateJoysticks, (void*)SDL___reportJoystickEvents, (void*)SDL___setEventPolling, (void*)SDL___getEventPolling, (void*)SDL___enableUNICODE, (void*)SDL___isApplicationActive, (void*)SDL___pollEvent, (void*)SDL___setTimerInterval, (void*)SDL___getTimerInterval, (void*)SDL___getNativeWindowHandle, (void*)SDL__showWindow, (void*)SDL__hideWindow, (void*)SDL___getNativeProcessId, (void*)SDL___allowShowNativeWindow, (void*)SDL___showNativeWindow, (void*)SDL___installWindowCreateAndDestroyHook, (void*)SDL___uninstallWindowCreateAndDestroyHook, (void*)SDL___showOtherWindow, (void*)SDL___hideOtherWindow, (void*)SDL___bringWindowToTop, (void*)SDL__setDpiAwareness, (void*)SDL__setTouchInput, (void*)SDL__setEnableWindowTitleAndBorder, (void*)SDL__setIconFromBMP, (void*)SDL__setCursorZoom, (void*)SDL__getCursorZoom}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _SDL::yacConstantGetNum                (void) {return 14;}
const char **YAC_VCALL _SDL::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"MOUSE_LBUTTON", "MOUSE_RBUTTON", "MOUSE_MBUTTON", "MOUSE_WHEELUP", "MOUSE_WHEELDOWN", "MOUSE_POINTER_ENTER", "MOUSE_POINTER_MOVE", "MOUSE_POINTER_MANUAL", "REDRAW_ALL", "REDRAW_DIRTY", "DEFAULT_KEYBOARD_REPEAT_DELAY", "DEFAULT_KEYBOARD_REPEAT_INTERVAL", "SDL_RESIZABLE", "SDL_NOFRAME"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _SDL::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL _SDL::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[14]; m.ui=r; m.si[0]=(sSI)1;m.si[1]=(sSI)2;m.si[2]=(sSI)4;m.si[3]=(sSI)8;m.si[4]=(sSI)16;m.si[5]=(sSI)0;m.si[6]=(sSI)1;m.si[7]=(sSI)2;m.si[8]=(sSI)0;m.si[9]=(sSI)1;m.si[10]=(sSI)500;m.si[11]=(sSI)30;m.si[12]=(sSI)0x10;m.si[13]=(sSI)0x20;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(_SDL, "SDL");

#ifndef YAC_NO_HOST
void  YAC_CALL SDL___eventLoop      (void *_o                                ) {((_SDL*)_o)->_eventLoop();}
void  YAC_CALL SDL___exitEventLoop  (void *_o                                ) {((_SDL*)_o)->_exitEventLoop();}
sSI   YAC_CALL SDL__processSDLEvent (void *_o, yacmemptr _args               ) {return (sSI)((_SDL*)_o)->processSDLEvent(_args.mem[0].si);}
void  YAC_CALL SDL__drainEventQueue (void *_o                                ) {((_SDL*)_o)->drainEventQueue();}
sSI   YAC_CALL SDL___getTicks       (void *_o                                ) {return (sSI)((_SDL*)_o)->_getTicks();}
void  YAC_CALL SDL___triggerEvent   (void *_o, yacmemptr _args               ) {((_SDL*)_o)->_triggerEvent(_args.mem[0].o);}
void  YAC_CALL SDL___setRedrawFlag  (void *_o, yacmemptr _args               ) {((_SDL*)_o)->_setRedrawFlag(_args.mem[0].si);}
sSI   YAC_CALL SDL___getRedrawFlag  (void *_o                                ) {return (sSI)((_SDL*)_o)->_getRedrawFlag();}
void  YAC_CALL SDL___delay          (void *_o, yacmemptr _args               ) {((_SDL*)_o)->_delay(_args.mem[0].si);}
void  YAC_CALL SDL___sendEvent      (void *_o, yacmemptr _args               ) {((_SDL*)_o)->_sendEvent(_args.mem[0].o);}
void  YAC_CALL SDL___enableKeyRepeat(void *_o, yacmemptr _args               ) {((_SDL*)_o)->_enableKeyRepeat(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL SDL___getNumJoysticks(void *_o                                ) {return (sSI)((_SDL*)_o)->_getNumJoysticks();}
void  YAC_CALL SDL___getJoystick    (void *_o, yacmemptr _args, YAC_Value *_r) {((_SDL*)_o)->_getJoystick(_args.mem[0].si, _r);}
void  YAC_CALL SDL___updateJoysticks(void *_o                                ) {((_SDL*)_o)->_updateJoysticks();}
void  YAC_CALL SDL___reportJoystickEvents(void *_o, yacmemptr _args          ) {((_SDL*)_o)->_reportJoystickEvents(_args.mem[0].si);}
void  YAC_CALL SDL___setEventPolling(void *_o, yacmemptr _args               ) {((_SDL*)_o)->_setEventPolling(_args.mem[0].si);}
sSI   YAC_CALL SDL___getEventPolling(void *_o                                ) {return (sSI)((_SDL*)_o)->_getEventPolling();}
sSI   YAC_CALL SDL___enableUNICODE  (void *_o, yacmemptr _args               ) {return (sSI)((_SDL*)_o)->_enableUNICODE(_args.mem[0].si);}
sSI   YAC_CALL SDL___isApplicationActive(void *_o                            ) {return (sSI)((_SDL*)_o)->_isApplicationActive();}
sSI   YAC_CALL SDL___pollEvent      (void *_o                                ) {return (sSI)((_SDL*)_o)->_pollEvent();}
void  YAC_CALL SDL___setTimerInterval(void *_o, yacmemptr _args              ) {((_SDL*)_o)->_setTimerInterval(_args.mem[0].si);}
sSI   YAC_CALL SDL___getTimerInterval(void *_o                               ) {return (sSI)((_SDL*)_o)->_getTimerInterval();}
void  YAC_CALL SDL___getNativeWindowHandle(void *_o, YAC_Value *_r           ) {((_SDL*)_o)->_getNativeWindowHandle(_r);}
void  YAC_CALL SDL__showWindow      (void *_o                                ) {((_SDL*)_o)->showWindow();}
void  YAC_CALL SDL__hideWindow      (void *_o                                ) {((_SDL*)_o)->hideWindow();}
sSI   YAC_CALL SDL___getNativeProcessId(void *_o                             ) {return (sSI)((_SDL*)_o)->_getNativeProcessId();}
void  YAC_CALL SDL___allowShowNativeWindow(void *_o, yacmemptr _args         ) {((_SDL*)_o)->_allowShowNativeWindow(_args.mem[0].si);}
void  YAC_CALL SDL___showNativeWindow(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_SDL*)_o)->_showNativeWindow((YAC_String*)_args.mem[0].o, _args.mem[1].si);}}
void  YAC_CALL SDL___installWindowCreateAndDestroyHook(void *_o              ) {((_SDL*)_o)->_installWindowCreateAndDestroyHook();}
void  YAC_CALL SDL___uninstallWindowCreateAndDestroyHook(void *_o            ) {((_SDL*)_o)->_uninstallWindowCreateAndDestroyHook();}
void  YAC_CALL SDL___showOtherWindow(void *_o, yacmemptr _args               ) {((_SDL*)_o)->_showOtherWindow(_args.mem[0].si);}
void  YAC_CALL SDL___hideOtherWindow(void *_o, yacmemptr _args               ) {((_SDL*)_o)->_hideOtherWindow(_args.mem[0].si);}
void  YAC_CALL SDL___bringWindowToTop(void *_o, yacmemptr _args              ) {((_SDL*)_o)->_bringWindowToTop(_args.mem[0].si);}
void  YAC_CALL SDL__setDpiAwareness (void *_o, yacmemptr _args               ) {((_SDL*)_o)->setDpiAwareness(_args.mem[0].si);}
void  YAC_CALL SDL__setTouchInput   (void *_o, yacmemptr _args               ) {((_SDL*)_o)->setTouchInput(_args.mem[0].si);}
void  YAC_CALL SDL__setEnableWindowTitleAndBorder(void *_o, yacmemptr _args  ) {((_SDL*)_o)->setEnableWindowTitleAndBorder(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL SDL__setIconFromBMP  (void *_o, yacmemptr _args               ) {return (sSI)((_SDL*)_o)->setIconFromBMP(_args.mem[0].o);}
void  YAC_CALL SDL__setCursorZoom   (void *_o, yacmemptr _args               ) {((_SDL*)_o)->setCursorZoom(_args.mem[0].si);}
sSI   YAC_CALL SDL__getCursorZoom   (void *_o                                ) {return (sSI)((_SDL*)_o)->getCursorZoom();}
#endif // YAC_NO_HOST
