// ---- ying_hal1_FPS.cpp: auto generated by YInG - the YAC interface generator (Mon, 15/Sep/2025 17:45:49)

#ifndef YAC_NO_HOST
sF32  YAC_CALL FPS___getCurrent     (void *                        );
sF32  YAC_CALL FPS___getAverage     (void *                        );
void  YAC_CALL FPS___reset          (void *                        );
void  YAC_CALL FPS___setMax         (void *, yacmemptr             );
sF32  YAC_CALL FPS___getMax         (void *                        );
sF32  YAC_CALL FPS___getReal        (void *                        );
sF32  YAC_CALL FPS___getPrecision   (void *                        );
sSI   YAC_CALL FPS___getTotalTime   (void *                        );
sSI   YAC_CALL FPS___getNumFramesRendered(void *                   );
void  YAC_CALL FPS___setTickInterval(void *, yacmemptr             );
sF32  YAC_CALL FPS___getTickInterval(void *                        );
void  YAC_CALL FPS___setTickBuffer  (void *, yacmemptr             );
sSI   YAC_CALL FPS___getTickBuffer  (void *                        );
void  YAC_CALL FPS___setLimit       (void *, yacmemptr             );
sSI   YAC_CALL FPS___getLimit       (void *                        );
#endif // YAC_NO_HOST

// ------------------ YAC class "_FPS" reflection map (implementation) ------------------
sUI          YAC_VCALL _FPS::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _FPS::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _FPS::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _FPS::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _FPS::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _FPS::yacMethodGetNum                  (void) {return 16;}
const char **YAC_VCALL _FPS::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "getCurrent", "getAverage", "reset", "setMax", "getMax", "getReal", "getPrecision", "getTotalTime", "getNumFramesRendered", "setTickInterval", "getTickInterval", "setTickBuffer", "getTickBuffer", "setLimit", "getLimit"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _FPS::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _FPS::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={2,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={2,};static const sUI rt11[]={0,};static const sUI rt12[]={1,};static const sUI rt13[]={0,};static const sUI rt14[]={1,};static const sUI rt15[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _FPS::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _FPS::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 2, 2, 0, 0, 2, 2, 2, 1, 1, 0, 2, 0, 1, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _FPS::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _FPS::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)FPS___getCurrent, (void*)FPS___getAverage, (void*)FPS___reset, (void*)FPS___setMax, (void*)FPS___getMax, (void*)FPS___getReal, (void*)FPS___getPrecision, (void*)FPS___getTotalTime, (void*)FPS___getNumFramesRendered, (void*)FPS___setTickInterval, (void*)FPS___getTickInterval, (void*)FPS___setTickBuffer, (void*)FPS___getTickBuffer, (void*)FPS___setLimit, (void*)FPS___getLimit}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _FPS::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _FPS::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _FPS::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _FPS::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(_FPS, "FPS");

#ifndef YAC_NO_HOST
sF32  YAC_CALL FPS___getCurrent     (void *_o                                ) {return (sF32)((_FPS*)_o)->_getCurrent();}
sF32  YAC_CALL FPS___getAverage     (void *_o                                ) {return (sF32)((_FPS*)_o)->_getAverage();}
void  YAC_CALL FPS___reset          (void *_o                                ) {((_FPS*)_o)->_reset();}
void  YAC_CALL FPS___setMax         (void *_o, yacmemptr _args               ) {((_FPS*)_o)->_setMax(_args.mem[0].f32);}
sF32  YAC_CALL FPS___getMax         (void *_o                                ) {return (sF32)((_FPS*)_o)->_getMax();}
sF32  YAC_CALL FPS___getReal        (void *_o                                ) {return (sF32)((_FPS*)_o)->_getReal();}
sF32  YAC_CALL FPS___getPrecision   (void *_o                                ) {return (sF32)((_FPS*)_o)->_getPrecision();}
sSI   YAC_CALL FPS___getTotalTime   (void *_o                                ) {return (sSI)((_FPS*)_o)->_getTotalTime();}
sSI   YAC_CALL FPS___getNumFramesRendered(void *_o                           ) {return (sSI)((_FPS*)_o)->_getNumFramesRendered();}
void  YAC_CALL FPS___setTickInterval(void *_o, yacmemptr _args               ) {((_FPS*)_o)->_setTickInterval(_args.mem[0].f32);}
sF32  YAC_CALL FPS___getTickInterval(void *_o                                ) {return (sF32)((_FPS*)_o)->_getTickInterval();}
void  YAC_CALL FPS___setTickBuffer  (void *_o, yacmemptr _args               ) {((_FPS*)_o)->_setTickBuffer(_args.mem[0].si);}
sSI   YAC_CALL FPS___getTickBuffer  (void *_o                                ) {return (sSI)((_FPS*)_o)->_getTickBuffer();}
void  YAC_CALL FPS___setLimit       (void *_o, yacmemptr _args               ) {((_FPS*)_o)->_setLimit(_args.mem[0].si);}
sSI   YAC_CALL FPS___getLimit       (void *_o                                ) {return (sSI)((_FPS*)_o)->_getLimit();}
#endif // YAC_NO_HOST
