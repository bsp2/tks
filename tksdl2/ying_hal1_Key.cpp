// ---- ying_hal1_Key.cpp: auto generated by YInG - the YAC interface generator (Mon, 15/Sep/2025 17:45:49)

#ifndef YAC_NO_HOST
sSI   YAC_CALL Key___getCode        (void *                        );
sSI   YAC_CALL Key___getMod         (void *                        );
sSI   YAC_CALL Key___getPressed     (void *                        );
sSI   YAC_CALL Key___getReleased    (void *                        );
sSI   YAC_CALL Key___getAlpha       (void *                        );
sSI   YAC_CALL Key___getUnicode     (void *                        );
void  YAC_CALL Key___getCodeName    (void *, YAC_Value *           );
void  YAC_CALL Key___getModName     (void *, YAC_Value *           );
void  YAC_CALL Key___getName        (void *, YAC_Value *           );
void  YAC_CALL Key___getNameFor     (void *, yacmemptr, YAC_Value *);
void  YAC_CALL Key___setCode        (void *, yacmemptr             );
void  YAC_CALL Key___setMod         (void *, yacmemptr             );
void  YAC_CALL Key___setPressed     (void *, yacmemptr             );
void  YAC_CALL Key___setReleased    (void *, yacmemptr             );
void  YAC_CALL Key___setUnicode     (void *, yacmemptr             );
void  YAC_CALL Key___setAlpha       (void *, yacmemptr             );
void  YAC_CALL Key___setCodeName    (void *, yacmemptr             );
void  YAC_CALL Key___setModName     (void *, yacmemptr             );
void  YAC_CALL Key___setName        (void *, yacmemptr             );
sSI   YAC_CALL Key___modNone        (void *                        );
sSI   YAC_CALL Key___modAlt         (void *                        );
sSI   YAC_CALL Key___modAltOnly     (void *                        );
sSI   YAC_CALL Key___modCmd         (void *                        );
sSI   YAC_CALL Key___modCmdOnly     (void *                        );
sSI   YAC_CALL Key___modShift       (void *                        );
sSI   YAC_CALL Key___modShiftOnly   (void *                        );
sSI   YAC_CALL Key___modCtrl        (void *                        );
sSI   YAC_CALL Key___modCtrlOnly    (void *                        );
sSI   YAC_CALL Key___modCaps        (void *                        );
sSI   YAC_CALL Key___modShiftOrCaps (void *                        );
sSI   YAC_CALL Key__SetLocalToRawKeyTableByName(void *, yacmemptr  );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Key" reflection map (implementation) ------------------
sUI          YAC_VCALL _Key::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Key::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Key::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Key::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Key::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Key::yacMethodGetNum                  (void) {return 32;}
const char **YAC_VCALL _Key::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "getCode", "getMod", "getPressed", "getReleased", "getAlpha", "getUnicode", "getCodeName", "getModName", "getName", "getNameFor", "setCode", "setMod", "setPressed", "setReleased", "setUnicode", "setAlpha", "setCodeName", "setModName", "setName", "modNone", "modAlt", "modAltOnly", "modCmd", "modCmdOnly", "modShift", "modShiftOnly", "modCtrl", "modCtrlOnly", "modCaps", "modShiftOrCaps", "SetLocalToRawKeyTableByName"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Key::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Key::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={1, 1,};static const sUI rt11[]={1,};static const sUI rt12[]={1,};static const sUI rt13[]={1,};static const sUI rt14[]={1,};static const sUI rt15[]={1,};static const sUI rt16[]={1,};static const sUI rt17[]={3,};static const sUI rt18[]={3,};static const sUI rt19[]={3,};static const sUI rt20[]={0,};static const sUI rt21[]={0,};static const sUI rt22[]={0,};static const sUI rt23[]={0,};static const sUI rt24[]={0,};static const sUI rt25[]={0,};static const sUI rt26[]={0,};static const sUI rt27[]={0,};static const sUI rt28[]={0,};static const sUI rt29[]={0,};static const sUI rt30[]={0,};static const sUI rt31[]={3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Key::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0, (const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={"String",};static const char *rs18[]={"String",};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={"String",};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Key::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Key::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Key::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Key___getCode, (void*)Key___getMod, (void*)Key___getPressed, (void*)Key___getReleased, (void*)Key___getAlpha, (void*)Key___getUnicode, (void*)Key___getCodeName, (void*)Key___getModName, (void*)Key___getName, (void*)Key___getNameFor, (void*)Key___setCode, (void*)Key___setMod, (void*)Key___setPressed, (void*)Key___setReleased, (void*)Key___setUnicode, (void*)Key___setAlpha, (void*)Key___setCodeName, (void*)Key___setModName, (void*)Key___setName, (void*)Key___modNone, (void*)Key___modAlt, (void*)Key___modAltOnly, (void*)Key___modCmd, (void*)Key___modCmdOnly, (void*)Key___modShift, (void*)Key___modShiftOnly, (void*)Key___modCtrl, (void*)Key___modCtrlOnly, (void*)Key___modCaps, (void*)Key___modShiftOrCaps, (void*)Key__SetLocalToRawKeyTableByName}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Key::yacConstantGetNum                (void) {return 216;}
const char **YAC_VCALL _Key::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"VKEY_BACKSPACE", "VKEY_TAB", "VKEY_CLEAR", "VKEY_RETURN", "VKEY_PAUSE", "VKEY_ESCAPE", "VKEY_SPACE", "VKEY_EXCLAIM", "VKEY_QUOTEDBL", "VKEY_HASH", "VKEY_DOLLAR", "VKEY_AMPERSAND", "VKEY_QUOTE", "VKEY_LEFTPAREN", "VKEY_RIGHTPAREN", "VKEY_ASTERISK", "VKEY_PLUS", "VKEY_COMMA", "VKEY_MINUS", "VKEY_PERIOD", "VKEY_SLASH", "VKEY_0", "VKEY_1", "VKEY_2", "VKEY_3", "VKEY_4", "VKEY_5", "VKEY_6", "VKEY_7", "VKEY_8", "VKEY_9", "VKEY_COLON", "VKEY_SEMICOLON", "VKEY_LESS", "VKEY_EQUALS", "VKEY_GREATER", "VKEY_QUESTION", "VKEY_AT", "VKEY_LEFTBRACKET", "VKEY_BACKSLASH", "VKEY_RIGHTBRACKET", "VKEY_CARET", "VKEY_UNDERSCORE", "VKEY_BACKQUOTE", "VKEY_DELETE", "VKEY_KP0", "VKEY_KP_0", "VKEY_KP1", "VKEY_KP_1", "VKEY_KP2", "VKEY_KP_2", "VKEY_KP3", "VKEY_KP_3", "VKEY_KP4", "VKEY_KP_4", "VKEY_KP5", "VKEY_KP_5", "VKEY_KP6", "VKEY_KP_6", "VKEY_KP7", "VKEY_KP_7", "VKEY_KP8", "VKEY_KP_8", "VKEY_KP9", "VKEY_KP_9", "VKEY_KP_PERIOD", "VKEY_KP_DIVIDE", "VKEY_KP_MULTIPLY", "VKEY_KP_MINUS", "VKEY_KP_PLUS", "VKEY_KP_ENTER", "VKEY_KP_EQUALS", "VKEY_UP", "VKEY_DOWN", "VKEY_RIGHT", "VKEY_LEFT", "VKEY_INSERT", "VKEY_HOME", "VKEY_END", "VKEY_PAGEUP", "VKEY_PAGEDOWN", "VKEY_F1", "VKEY_F2", "VKEY_F3", "VKEY_F4", "VKEY_F5", "VKEY_F6", "VKEY_F7", "VKEY_F8", "VKEY_F9", "VKEY_F10", "VKEY_F11", "VKEY_F12", "VKEY_F13", "VKEY_F14", "VKEY_F15", "VKEY_NUMLOCK", "VKEY_CAPSLOCK", "VKEY_SCROLLOCK", "VKEY_RSHIFT", "VKEY_LSHIFT", "VKEY_RCTRL", "VKEY_LCTRL", "VKEY_RALT", "VKEY_LALT", "VKEY_RMETA", "VKEY_LMETA", "VKEY_LSUPER", "VKEY_RSUPER", "VKEY_MODE", "VKEY_COMPOSE", "VKEY_HELP", "VKEY_PRINT", "VKEY_SYSREQ", "VKEY_BREAK", "VKEY_MENU", "VKEY_POWER", "VKEY_EURO", "VKEY_MOUSEBUTTON0", "VKEY_MOUSEBUTTON1", "VKEY_MOUSEBUTTON2", "VKEY_MOUSEBUTTON3", "VKEY_MOUSEBUTTON4", "VKEY_JOY0AXIS0NEG", "VKEY_JOY0AXIS0POS", "VKEY_JOY0AXIS1NEG", "VKEY_JOY0AXIS1POS", "VKEY_JOY0BUTTON0", "VKEY_JOY0BUTTON1", "VKEY_JOY0BUTTON2", "VKEY_JOY0BUTTON3", "VKEY_JOY0BUTTON4", "VKEY_JOY0BUTTON5", "VKEY_JOY0BUTTON6", "VKEY_JOY0BUTTON7", "VKEY_JOY0BUTTON8", "VKEY_JOY1AXIS0NEG", "VKEY_JOY1AXIS0POS", "VKEY_JOY1AXIS1NEG", "VKEY_JOY1AXIS1POS", "VKEY_JOY1BUTTON0", "VKEY_JOY1BUTTON1", "VKEY_JOY1BUTTON2", "VKEY_JOY1BUTTON3", "VKEY_JOY1BUTTON4", "VKEY_JOY1BUTTON5", "VKEY_JOY1BUTTON6", "VKEY_JOY1BUTTON7", "VKEY_JOY1BUTTON8", "VKEY_JOY2AXIS0NEG", "VKEY_JOY2AXIS0POS", "VKEY_JOY2AXIS1NEG", "VKEY_JOY2AXIS1POS", "VKEY_JOY2BUTTON0", "VKEY_JOY2BUTTON1", "VKEY_JOY2BUTTON2", "VKEY_JOY2BUTTON3", "VKEY_JOY2BUTTON4", "VKEY_JOY2BUTTON5", "VKEY_JOY2BUTTON6", "VKEY_JOY2BUTTON7", "VKEY_JOY2BUTTON8", "VKEY_JOY3AXIS0NEG", "VKEY_JOY3AXIS0POS", "VKEY_JOY3AXIS1NEG", "VKEY_JOY3AXIS1POS", "VKEY_JOY3BUTTON0", "VKEY_JOY3BUTTON1", "VKEY_JOY3BUTTON2", "VKEY_JOY3BUTTON3", "VKEY_JOY3BUTTON4", "VKEY_JOY3BUTTON5", "VKEY_JOY3BUTTON6", "VKEY_JOY3BUTTON7", "VKEY_JOY3BUTTON8", "VKEY_PRESSED", "VMOD_LSHIFT", "VMOD_RSHIFT", "VMOD_LCTRL", "VMOD_RCTRL", "VMOD_LALT", "VMOD_RALT", "VMOD_LMETA", "VMOD_RMETA", "VMOD_NUM", "VMOD_CAPS", "VMOD_MODE", "DCON", "UC_CTRL_A", "UC_CTRL_B", "UC_CTRL_C", "UC_CTRL_D", "UC_CTRL_E", "UC_CTRL_F", "UC_CTRL_G", "UC_CTRL_H", "UC_CTRL_I", "UC_CTRL_J", "UC_CTRL_K", "UC_CTRL_L", "UC_CTRL_M", "UC_CTRL_N", "UC_CTRL_O", "UC_CTRL_P", "UC_CTRL_Q", "UC_CTRL_R", "UC_CTRL_S", "UC_CTRL_T", "UC_CTRL_U", "UC_CTRL_V", "UC_CTRL_W", "UC_CTRL_X", "UC_CTRL_Y", "UC_CTRL_Z", "STDOUT", "STDERR"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Key::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL _Key::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[216]; m.ui=r; m.si[0]=(sSI)8;m.si[1]=(sSI)9;m.si[2]=(sSI)12;m.si[3]=(sSI)13;m.si[4]=(sSI)19;m.si[5]=(sSI)27;m.si[6]=(sSI)32;m.si[7]=(sSI)33;m.si[8]=(sSI)34;m.si[9]=(sSI)35;m.si[10]=(sSI)36;m.si[11]=(sSI)38;m.si[12]=(sSI)39;m.si[13]=(sSI)40;m.si[14]=(sSI)41;m.si[15]=(sSI)42;m.si[16]=(sSI)43;m.si[17]=(sSI)44;m.si[18]=(sSI)45;m.si[19]=(sSI)46;m.si[20]=(sSI)47;m.si[21]=(sSI)48;m.si[22]=(sSI)49;m.si[23]=(sSI)50;m.si[24]=(sSI)51;m.si[25]=(sSI)52;m.si[26]=(sSI)53;m.si[27]=(sSI)54;m.si[28]=(sSI)55;m.si[29]=(sSI)56;m.si[30]=(sSI)57;m.si[31]=(sSI)58;m.si[32]=(sSI)59;m.si[33]=(sSI)60;m.si[34]=(sSI)61;m.si[35]=(sSI)62;m.si[36]=(sSI)63;m.si[37]=(sSI)64;m.si[38]=(sSI)91;m.si[39]=(sSI)92;m.si[40]=(sSI)93;m.si[41]=(sSI)94;m.si[42]=(sSI)95;m.si[43]=(sSI)96;m.si[44]=(sSI)127;m.si[45]=(sSI)256;m.si[46]=(sSI)256;m.si[47]=(sSI)257;m.si[48]=(sSI)257;m.si[49]=(sSI)258;m.si[50]=(sSI)258;m.si[51]=(sSI)259;m.si[52]=(sSI)259;m.si[53]=(sSI)260;m.si[54]=(sSI)260;m.si[55]=(sSI)261;m.si[56]=(sSI)261;m.si[57]=(sSI)262;m.si[58]=(sSI)262;m.si[59]=(sSI)263;m.si[60]=(sSI)263;m.si[61]=(sSI)264;m.si[62]=(sSI)264;m.si[63]=(sSI)265;m.si[64]=(sSI)265;m.si[65]=(sSI)266;m.si[66]=(sSI)267;m.si[67]=(sSI)268;m.si[68]=(sSI)269;m.si[69]=(sSI)270;m.si[70]=(sSI)271;m.si[71]=(sSI)272;m.si[72]=(sSI)273;m.si[73]=(sSI)274;m.si[74]=(sSI)275;m.si[75]=(sSI)276;m.si[76]=(sSI)277;m.si[77]=(sSI)278;m.si[78]=(sSI)279;m.si[79]=(sSI)280;m.si[80]=(sSI)281;m.si[81]=(sSI)282;m.si[82]=(sSI)283;m.si[83]=(sSI)284;m.si[84]=(sSI)285;m.si[85]=(sSI)286;m.si[86]=(sSI)287;m.si[87]=(sSI)288;m.si[88]=(sSI)289;m.si[89]=(sSI)290;m.si[90]=(sSI)291;m.si[91]=(sSI)292;m.si[92]=(sSI)293;m.si[93]=(sSI)294;m.si[94]=(sSI)295;m.si[95]=(sSI)296;m.si[96]=(sSI)300;m.si[97]=(sSI)301;m.si[98]=(sSI)302;m.si[99]=(sSI)303;m.si[100]=(sSI)304;m.si[101]=(sSI)305;m.si[102]=(sSI)306;m.si[103]=(sSI)307;m.si[104]=(sSI)308;m.si[105]=(sSI)309;m.si[106]=(sSI)310;m.si[107]=(sSI)311;m.si[108]=(sSI)312;m.si[109]=(sSI)313;m.si[110]=(sSI)314;m.si[111]=(sSI)315;m.si[112]=(sSI)316;m.si[113]=(sSI)317;m.si[114]=(sSI)318;m.si[115]=(sSI)319;m.si[116]=(sSI)320;m.si[117]=(sSI)321;m.si[118]=(sSI)65537;m.si[119]=(sSI)65538;m.si[120]=(sSI)65539;m.si[121]=(sSI)65540;m.si[122]=(sSI)65541;m.si[123]=(sSI)65542;m.si[124]=(sSI)65543;m.si[125]=(sSI)65544;m.si[126]=(sSI)65545;m.si[127]=(sSI)65546;m.si[128]=(sSI)65547;m.si[129]=(sSI)65548;m.si[130]=(sSI)65549;m.si[131]=(sSI)65550;m.si[132]=(sSI)65551;m.si[133]=(sSI)65552;m.si[134]=(sSI)65553;m.si[135]=(sSI)65554;m.si[136]=(sSI)65555;m.si[137]=(sSI)65556;m.si[138]=(sSI)65557;m.si[139]=(sSI)65558;m.si[140]=(sSI)65559;m.si[141]=(sSI)65560;m.si[142]=(sSI)65561;m.si[143]=(sSI)65562;m.si[144]=(sSI)65563;m.si[145]=(sSI)65564;m.si[146]=(sSI)65565;m.si[147]=(sSI)65566;m.si[148]=(sSI)65567;m.si[149]=(sSI)65568;m.si[150]=(sSI)65569;m.si[151]=(sSI)65570;m.si[152]=(sSI)65571;m.si[153]=(sSI)65572;m.si[154]=(sSI)65573;m.si[155]=(sSI)65574;m.si[156]=(sSI)65575;m.si[157]=(sSI)65576;m.si[158]=(sSI)65577;m.si[159]=(sSI)65578;m.si[160]=(sSI)65579;m.si[161]=(sSI)65580;m.si[162]=(sSI)65581;m.si[163]=(sSI)65582;m.si[164]=(sSI)65583;m.si[165]=(sSI)65584;m.si[166]=(sSI)65585;m.si[167]=(sSI)65586;m.si[168]=(sSI)65587;m.si[169]=(sSI)65588;m.si[170]=(sSI)65589;m.si[171]=(sSI)65590;m.si[172]=(sSI)65591;m.si[173]=(sSI)65592;m.si[174]=(sSI)65593;m.si[175]=(sSI)0x40000000;m.si[176]=(sSI)1;m.si[177]=(sSI)2;m.si[178]=(sSI)64;m.si[179]=(sSI)128;m.si[180]=(sSI)256;m.si[181]=(sSI)512;m.si[182]=(sSI)1024;m.si[183]=(sSI)2048;m.si[184]=(sSI)4096;m.si[185]=(sSI)8192;m.si[186]=(sSI)16384;m.si[187]=(sSI)0;m.si[188]=(sSI)1;m.si[189]=(sSI)2;m.si[190]=(sSI)3;m.si[191]=(sSI)4;m.si[192]=(sSI)5;m.si[193]=(sSI)6;m.si[194]=(sSI)7;m.si[195]=(sSI)8;m.si[196]=(sSI)9;m.si[197]=(sSI)10;m.si[198]=(sSI)11;m.si[199]=(sSI)12;m.si[200]=(sSI)13;m.si[201]=(sSI)14;m.si[202]=(sSI)15;m.si[203]=(sSI)16;m.si[204]=(sSI)17;m.si[205]=(sSI)18;m.si[206]=(sSI)19;m.si[207]=(sSI)20;m.si[208]=(sSI)21;m.si[209]=(sSI)22;m.si[210]=(sSI)23;m.si[211]=(sSI)24;m.si[212]=(sSI)25;m.si[213]=(sSI)26;m.si[214]=(sSI)1;m.si[215]=(sSI)2;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(_Key, "Key");

#ifndef YAC_NO_HOST
sSI   YAC_CALL Key___getCode        (void *_o                                ) {return (sSI)((_Key*)_o)->_getCode();}
sSI   YAC_CALL Key___getMod         (void *_o                                ) {return (sSI)((_Key*)_o)->_getMod();}
sSI   YAC_CALL Key___getPressed     (void *_o                                ) {return (sSI)((_Key*)_o)->_getPressed();}
sSI   YAC_CALL Key___getReleased    (void *_o                                ) {return (sSI)((_Key*)_o)->_getReleased();}
sSI   YAC_CALL Key___getAlpha       (void *_o                                ) {return (sSI)((_Key*)_o)->_getAlpha();}
sSI   YAC_CALL Key___getUnicode     (void *_o                                ) {return (sSI)((_Key*)_o)->_getUnicode();}
void  YAC_CALL Key___getCodeName    (void *_o, YAC_Value *_r                 ) {((_Key*)_o)->_getCodeName(_r);}
void  YAC_CALL Key___getModName     (void *_o, YAC_Value *_r                 ) {((_Key*)_o)->_getModName(_r);}
void  YAC_CALL Key___getName        (void *_o, YAC_Value *_r                 ) {((_Key*)_o)->_getName(_r);}
void  YAC_CALL Key___getNameFor     (void *_o, yacmemptr _args, YAC_Value *_r) {((_Key*)_o)->_getNameFor(_args.mem[0].si, _args.mem[1].si, _r);}
void  YAC_CALL Key___setCode        (void *_o, yacmemptr _args               ) {((_Key*)_o)->_setCode(_args.mem[0].si);}
void  YAC_CALL Key___setMod         (void *_o, yacmemptr _args               ) {((_Key*)_o)->_setMod(_args.mem[0].si);}
void  YAC_CALL Key___setPressed     (void *_o, yacmemptr _args               ) {((_Key*)_o)->_setPressed(_args.mem[0].si);}
void  YAC_CALL Key___setReleased    (void *_o, yacmemptr _args               ) {((_Key*)_o)->_setReleased(_args.mem[0].si);}
void  YAC_CALL Key___setUnicode     (void *_o, yacmemptr _args               ) {((_Key*)_o)->_setUnicode(_args.mem[0].si);}
void  YAC_CALL Key___setAlpha       (void *_o, yacmemptr _args               ) {((_Key*)_o)->_setAlpha(_args.mem[0].si);}
void  YAC_CALL Key___setCodeName    (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_Key*)_o)->_setCodeName((YAC_String*)_args.mem[0].o);}}
void  YAC_CALL Key___setModName     (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_Key*)_o)->_setModName((YAC_String*)_args.mem[0].o);}}
void  YAC_CALL Key___setName        (void *_o, yacmemptr _args               ) {((_Key*)_o)->_setName(_args.mem[0].o);}
sSI   YAC_CALL Key___modNone        (void *_o                                ) {return (sSI)((_Key*)_o)->_modNone();}
sSI   YAC_CALL Key___modAlt         (void *_o                                ) {return (sSI)((_Key*)_o)->_modAlt();}
sSI   YAC_CALL Key___modAltOnly     (void *_o                                ) {return (sSI)((_Key*)_o)->_modAltOnly();}
sSI   YAC_CALL Key___modCmd         (void *_o                                ) {return (sSI)((_Key*)_o)->_modCmd();}
sSI   YAC_CALL Key___modCmdOnly     (void *_o                                ) {return (sSI)((_Key*)_o)->_modCmdOnly();}
sSI   YAC_CALL Key___modShift       (void *_o                                ) {return (sSI)((_Key*)_o)->_modShift();}
sSI   YAC_CALL Key___modShiftOnly   (void *_o                                ) {return (sSI)((_Key*)_o)->_modShiftOnly();}
sSI   YAC_CALL Key___modCtrl        (void *_o                                ) {return (sSI)((_Key*)_o)->_modCtrl();}
sSI   YAC_CALL Key___modCtrlOnly    (void *_o                                ) {return (sSI)((_Key*)_o)->_modCtrlOnly();}
sSI   YAC_CALL Key___modCaps        (void *_o                                ) {return (sSI)((_Key*)_o)->_modCaps();}
sSI   YAC_CALL Key___modShiftOrCaps (void *_o                                ) {return (sSI)((_Key*)_o)->_modShiftOrCaps();}
sSI   YAC_CALL Key__SetLocalToRawKeyTableByName(void *_o, yacmemptr _args    ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_Key*)_o)->SetLocalToRawKeyTableByName((YAC_String*)_args.mem[0].o);}return 0;}
#endif // YAC_NO_HOST
