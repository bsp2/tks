// ---- ying_vst2_VST2Plugin.cpp: auto generated by YInG - the YAC interface generator (Mon, 1/Jul/2024 21:19:08)

void  YAC_CALL VST2Plugin__StaticInit(void *                       );
sSI   YAC_CALL VST2Plugin__WaitForDatabridgeHostEvent(void *, yacmemptr);
void  YAC_CALL VST2Plugin__StaticExit(void *                       );
void  YAC_CALL VST2Plugin__setEnableDebug(void *, yacmemptr        );
sSI   YAC_CALL VST2Plugin__loadPlugin(void *, yacmemptr            );
void  YAC_CALL VST2Plugin__open     (void *                        );
void  YAC_CALL VST2Plugin__close    (void *                        );
void  YAC_CALL VST2Plugin__suspend  (void *                        );
void  YAC_CALL VST2Plugin__resume   (void *                        );
sSI   YAC_CALL VST2Plugin__getCategory(void *                      );
sSI   YAC_CALL VST2Plugin__isEffect (void *                        );
sSI   YAC_CALL VST2Plugin__isInstrument(void *                     );
void  YAC_CALL VST2Plugin__startProcess(void *                     );
void  YAC_CALL VST2Plugin__stopProcess(void *                      );
void  YAC_CALL VST2Plugin__setSampleRate(void *, yacmemptr         );
void  YAC_CALL VST2Plugin__setBlockSize(void *, yacmemptr          );
void  YAC_CALL VST2Plugin__setBlockSizeCollect(void *, yacmemptr   );
void  YAC_CALL VST2Plugin__getEffectName(void *, YAC_Value *       );
void  YAC_CALL VST2Plugin__getVendorString(void *, YAC_Value *     );
void  YAC_CALL VST2Plugin__getProductString(void *, YAC_Value *    );
sSI   YAC_CALL VST2Plugin__getVendorVersion(void *                 );
sSI   YAC_CALL VST2Plugin__getUniqueID(void *                      );
sSI   YAC_CALL VST2Plugin__getVersion(void *                       );
sSI   YAC_CALL VST2Plugin__canDo    (void *, yacmemptr             );
sSI   YAC_CALL VST2Plugin__getFlags (void *                        );
sSI   YAC_CALL VST2Plugin__isSynth  (void *                        );
sSI   YAC_CALL VST2Plugin__hasEditor(void *                        );
sSI   YAC_CALL VST2Plugin__canReplacing(void *                     );
sSI   YAC_CALL VST2Plugin__programsAreChunks(void *                );
sSI   YAC_CALL VST2Plugin__noSoundInStop(void *                    );
sSI   YAC_CALL VST2Plugin__getNumMidiInputChannels(void *          );
sSI   YAC_CALL VST2Plugin__getNumMidiOutputChannels(void *         );
sSI   YAC_CALL VST2Plugin__getInitialDelay(void *                  );
void  YAC_CALL VST2Plugin__idle     (void *                        );
void  YAC_CALL VST2Plugin__queueNoteOn(void *, yacmemptr           );
void  YAC_CALL VST2Plugin__queueNoteOff(void *, yacmemptr          );
void  YAC_CALL VST2Plugin__queueChannelPressure(void *, yacmemptr  );
void  YAC_CALL VST2Plugin__queueCtlChange(void *, yacmemptr        );
void  YAC_CALL VST2Plugin__queueBankSelect(void *, yacmemptr       );
void  YAC_CALL VST2Plugin__queueProgramChange(void *, yacmemptr    );
void  YAC_CALL VST2Plugin__queueChannelVolumef(void *, yacmemptr   );
void  YAC_CALL VST2Plugin__queueChannelPanf(void *, yacmemptr      );
void  YAC_CALL VST2Plugin__queuePitchbend(void *, yacmemptr        );
void  YAC_CALL VST2Plugin__queuePitchbendf(void *, yacmemptr       );
sSI   YAC_CALL VST2Plugin__queueHostMIDIEventsByFlt(void *, yacmemptr);
sSI   YAC_CALL VST2Plugin__getNumInputs(void *                     );
void  YAC_CALL VST2Plugin__getInputProperties(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL VST2Plugin__getNumOutputs(void *                    );
void  YAC_CALL VST2Plugin__getOutputProperties(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL VST2Plugin__getNumPrograms(void *                   );
void  YAC_CALL VST2Plugin__getProgramName(void *, YAC_Value *      );
void  YAC_CALL VST2Plugin__getProgramNameIndexed(void *, yacmemptr, YAC_Value *);
void  YAC_CALL VST2Plugin__setProgramName(void *, yacmemptr        );
sSI   YAC_CALL VST2Plugin__getProgram(void *                       );
void  YAC_CALL VST2Plugin__setProgram(void *, yacmemptr            );
sSI   YAC_CALL VST2Plugin__getNumParameters(void *                 );
void  YAC_CALL VST2Plugin__setParameter(void *, yacmemptr          );
sF32  YAC_CALL VST2Plugin__getParameter(void *, yacmemptr          );
void  YAC_CALL VST2Plugin__getParameterName(void *, yacmemptr, YAC_Value *);
void  YAC_CALL VST2Plugin__getParameterLabel(void *, yacmemptr, YAC_Value *);
void  YAC_CALL VST2Plugin__getParameterProperties(void *, yacmemptr, YAC_Value *);
void  YAC_CALL VST2Plugin__processEvents(void *                    );
void  YAC_CALL VST2Plugin__processReplacing(void *, yacmemptr      );
void  YAC_CALL VST2Plugin__processReplacingSilence(void *, yacmemptr);
sSI   YAC_CALL VST2Plugin__getChunk (void *, yacmemptr             );
void  YAC_CALL VST2Plugin__setChunk (void *, yacmemptr             );
void  YAC_CALL VST2Plugin__setParentNativeWindowHandle(void *, yacmemptr);
void  YAC_CALL VST2Plugin__showEditor(void *                       );
void  YAC_CALL VST2Plugin__hideEditor(void *                       );
sSI   YAC_CALL VST2Plugin__isEditorVisible(void *                  );
sSI   YAC_CALL VST2Plugin__isEditorOpen(void *                     );
void  YAC_CALL VST2Plugin__closeEditor(void *                      );
sSI   YAC_CALL VST2Plugin__GetNumOpenWindows(void *                );
void  YAC_CALL VST2Plugin__PumpEvents(void *                       );
void  YAC_CALL VST2Plugin__HandleQueuedWindowResize(void *         );
sSI   YAC_CALL VST2Plugin__setExtInputBuffer(void *, yacmemptr     );
sSI   YAC_CALL VST2Plugin__setExtOutputBuffer(void *, yacmemptr    );
sSI   YAC_CALL VST2Plugin__getNumShellPlugins(void *               );
void  YAC_CALL VST2Plugin__getShellPluginNameByIndex(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL VST2Plugin__getShellPluginUIDByIndex(void *, yacmemptr);
sSI   YAC_CALL VST2Plugin__selectShellPluginByUID(void *, yacmemptr);
sSI   YAC_CALL VST2Plugin__getCurrentShellPluginUID(void *         );
void  YAC_CALL VST2Plugin__getCurrentShellPluginEffectName(void *, YAC_Value *);
sSI   YAC_CALL VST2Plugin__dataBridgeGetNumChunksAvail(void *      );
void  YAC_CALL VST2Plugin__SetEnableHideVSTEditorWhenClosed(void *, yacmemptr);
sSI   YAC_CALL VST2Plugin__getNativeWindowHandle(void *            );
void  YAC_CALL VST2Plugin__setEnableReportTransportPlaying(void *, yacmemptr);
sSI   YAC_CALL VST2Plugin__getEnableReportTransportPlaying(void *  );
void  YAC_CALL VST2Plugin__windowToFront(void *                    );
void  YAC_CALL VST2Plugin__callEffEditIdle(void *                  );

// ------------------ YAC class "VST2Plugin" reflection map (implementation) ------------------
sUI          YAC_VCALL VST2Plugin::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL VST2Plugin::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL VST2Plugin::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL VST2Plugin::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL VST2Plugin::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL VST2Plugin::yacMethodGetNum                  (void) {return 91;}
const char **YAC_VCALL VST2Plugin::yacMethodGetNames                (void) {static const char *r[]={"operator", "StaticInit", "WaitForDatabridgeHostEvent", "StaticExit", "setEnableDebug", "loadPlugin", "open", "close", "suspend", "resume", "getCategory", "isEffect", "isInstrument", "startProcess", "stopProcess", "setSampleRate", "setBlockSize", "setBlockSizeCollect", "getEffectName", "getVendorString", "getProductString", "getVendorVersion", "getUniqueID", "getVersion", "canDo", "getFlags", "isSynth", "hasEditor", "canReplacing", "programsAreChunks", "noSoundInStop", "getNumMidiInputChannels", "getNumMidiOutputChannels", "getInitialDelay", "idle", "queueNoteOn", "queueNoteOff", "queueChannelPressure", "queueCtlChange", "queueBankSelect", "queueProgramChange", "queueChannelVolumef", "queueChannelPanf", "queuePitchbend", "queuePitchbendf", "queueHostMIDIEventsByFlt", "getNumInputs", "getInputProperties", "getNumOutputs", "getOutputProperties", "getNumPrograms", "getProgramName", "getProgramNameIndexed", "setProgramName", "getProgram", "setProgram", "getNumParameters", "setParameter", "getParameter", "getParameterName", "getParameterLabel", "getParameterProperties", "processEvents", "processReplacing", "processReplacingSilence", "getChunk", "setChunk", "setParentNativeWindowHandle", "showEditor", "hideEditor", "isEditorVisible", "isEditorOpen", "closeEditor", "GetNumOpenWindows", "PumpEvents", "HandleQueuedWindowResize", "setExtInputBuffer", "setExtOutputBuffer", "getNumShellPlugins", "getShellPluginNameByIndex", "getShellPluginUIDByIndex", "selectShellPluginByUID", "getCurrentShellPluginUID", "getCurrentShellPluginEffectName", "dataBridgeGetNumChunksAvail", "SetEnableHideVSTEditorWhenClosed", "getNativeWindowHandle", "setEnableReportTransportPlaying", "getEnableReportTransportPlaying", "windowToFront", "callEffEditIdle"}; return r;}
const sUI   *YAC_VCALL VST2Plugin::yacMethodGetNumParameters        (void) {static const sUI r[]={2, 0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 3, 3, 2, 2, 2, 3, 2, 8, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1, 1, 0, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 1, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0}; return r;}
const sUI  **YAC_VCALL VST2Plugin::yacMethodGetParameterTypes       (void) {static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={1,};static const sUI rt3[]={0,};static const sUI rt4[]={1,};static const sUI rt5[]={3, 1,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={0,};static const sUI rt13[]={0,};static const sUI rt14[]={0,};static const sUI rt15[]={2,};static const sUI rt16[]={1,};static const sUI rt17[]={1, 1,};static const sUI rt18[]={0,};static const sUI rt19[]={0,};static const sUI rt20[]={0,};static const sUI rt21[]={0,};static const sUI rt22[]={0,};static const sUI rt23[]={0,};static const sUI rt24[]={3,};static const sUI rt25[]={0,};static const sUI rt26[]={0,};static const sUI rt27[]={0,};static const sUI rt28[]={0,};static const sUI rt29[]={0,};static const sUI rt30[]={0,};static const sUI rt31[]={0,};static const sUI rt32[]={0,};static const sUI rt33[]={0,};static const sUI rt34[]={0,};static const sUI rt35[]={1, 1, 1,};static const sUI rt36[]={1, 1, 1,};static const sUI rt37[]={1, 1,};static const sUI rt38[]={1, 1, 1,};static const sUI rt39[]={1, 1, 1,};static const sUI rt40[]={1, 1,};static const sUI rt41[]={1, 2,};static const sUI rt42[]={1, 2,};static const sUI rt43[]={1, 1, 1,};static const sUI rt44[]={1, 2,};static const sUI rt45[]={3, 1, 1, 1, 1, 3, 1, 1,};static const sUI rt46[]={0,};static const sUI rt47[]={1,};static const sUI rt48[]={0,};static const sUI rt49[]={1,};static const sUI rt50[]={0,};static const sUI rt51[]={0,};static const sUI rt52[]={1,};static const sUI rt53[]={3,};static const sUI rt54[]={0,};static const sUI rt55[]={1,};static const sUI rt56[]={0,};static const sUI rt57[]={1, 2,};static const sUI rt58[]={1,};static const sUI rt59[]={1,};static const sUI rt60[]={1,};static const sUI rt61[]={1,};static const sUI rt62[]={0,};static const sUI rt63[]={1, 1,};static const sUI rt64[]={1, 1,};static const sUI rt65[]={3, 1,};static const sUI rt66[]={3, 1,};static const sUI rt67[]={1,};static const sUI rt68[]={0,};static const sUI rt69[]={0,};static const sUI rt70[]={0,};static const sUI rt71[]={0,};static const sUI rt72[]={0,};static const sUI rt73[]={0,};static const sUI rt74[]={0,};static const sUI rt75[]={0,};static const sUI rt76[]={1, 3,};static const sUI rt77[]={1, 3,};static const sUI rt78[]={0,};static const sUI rt79[]={1,};static const sUI rt80[]={1,};static const sUI rt81[]={3, 1,};static const sUI rt82[]={0,};static const sUI rt83[]={0,};static const sUI rt84[]={0,};static const sUI rt85[]={1,};static const sUI rt86[]={0,};static const sUI rt87[]={1,};static const sUI rt88[]={0,};static const sUI rt89[]={0,};static const sUI rt90[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39, rt40, rt41, rt42, rt43, rt44, rt45, rt46, rt47, rt48, rt49, rt50, rt51, rt52, rt53, rt54, rt55, rt56, rt57, rt58, rt59, rt60, rt61, rt62, rt63, rt64, rt65, rt66, rt67, rt68, rt69, rt70, rt71, rt72, rt73, rt74, rt75, rt76, rt77, rt78, rt79, rt80, rt81, rt82, rt83, rt84, rt85, rt86, rt87, rt88, rt89, rt90}; return r;}
const char***YAC_VCALL VST2Plugin::yacMethodGetParameterObjectTypes (void) {static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={"String", (const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0, (const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={"String",};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char *rs34[]={(const char*)0,};static const char *rs35[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs36[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs37[]={(const char*)0, (const char*)0,};static const char *rs38[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs39[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs40[]={(const char*)0, (const char*)0,};static const char *rs41[]={(const char*)0, (const char*)0,};static const char *rs42[]={(const char*)0, (const char*)0,};static const char *rs43[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs44[]={(const char*)0, (const char*)0,};static const char *rs45[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs46[]={(const char*)0,};static const char *rs47[]={(const char*)0,};static const char *rs48[]={(const char*)0,};static const char *rs49[]={(const char*)0,};static const char *rs50[]={(const char*)0,};static const char *rs51[]={(const char*)0,};static const char *rs52[]={(const char*)0,};static const char *rs53[]={"String",};static const char *rs54[]={(const char*)0,};static const char *rs55[]={(const char*)0,};static const char *rs56[]={(const char*)0,};static const char *rs57[]={(const char*)0, (const char*)0,};static const char *rs58[]={(const char*)0,};static const char *rs59[]={(const char*)0,};static const char *rs60[]={(const char*)0,};static const char *rs61[]={(const char*)0,};static const char *rs62[]={(const char*)0,};static const char *rs63[]={(const char*)0, (const char*)0,};static const char *rs64[]={(const char*)0, (const char*)0,};static const char *rs65[]={(const char*)0, (const char*)0,};static const char *rs66[]={(const char*)0, (const char*)0,};static const char *rs67[]={(const char*)0,};static const char *rs68[]={(const char*)0,};static const char *rs69[]={(const char*)0,};static const char *rs70[]={(const char*)0,};static const char *rs71[]={(const char*)0,};static const char *rs72[]={(const char*)0,};static const char *rs73[]={(const char*)0,};static const char *rs74[]={(const char*)0,};static const char *rs75[]={(const char*)0,};static const char *rs76[]={(const char*)0, (const char*)0,};static const char *rs77[]={(const char*)0, (const char*)0,};static const char *rs78[]={(const char*)0,};static const char *rs79[]={(const char*)0,};static const char *rs80[]={(const char*)0,};static const char *rs81[]={"String", (const char*)0,};static const char *rs82[]={(const char*)0,};static const char *rs83[]={(const char*)0,};static const char *rs84[]={(const char*)0,};static const char *rs85[]={(const char*)0,};static const char *rs86[]={(const char*)0,};static const char *rs87[]={(const char*)0,};static const char *rs88[]={(const char*)0,};static const char *rs89[]={(const char*)0,};static const char *rs90[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39, rs40, rs41, rs42, rs43, rs44, rs45, rs46, rs47, rs48, rs49, rs50, rs51, rs52, rs53, rs54, rs55, rs56, rs57, rs58, rs59, rs60, rs61, rs62, rs63, rs64, rs65, rs66, rs67, rs68, rs69, rs70, rs71, rs72, rs73, rs74, rs75, rs76, rs77, rs78, rs79, rs80, rs81, rs82, rs83, rs84, rs85, rs86, rs87, rs88, rs89, rs90}; return r;}
const sUI   *YAC_VCALL VST2Plugin::yacMethodGetReturnTypes          (void) {static const sUI r[]={4, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 4, 1, 4, 4, 0, 1, 0, 1, 0, 2, 4, 4, 4, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 4, 1, 1, 1, 4, 1, 0, 1, 0, 1, 0, 0}; return r;}
const char **YAC_VCALL VST2Plugin::yacMethodGetReturnObjectTypes    (void) {static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;}
const void **YAC_VCALL VST2Plugin::yacMethodGetAdr                  (void) {static const void *r[]={(void*)Object__operator, (void*)VST2Plugin__StaticInit, (void*)VST2Plugin__WaitForDatabridgeHostEvent, (void*)VST2Plugin__StaticExit, (void*)VST2Plugin__setEnableDebug, (void*)VST2Plugin__loadPlugin, (void*)VST2Plugin__open, (void*)VST2Plugin__close, (void*)VST2Plugin__suspend, (void*)VST2Plugin__resume, (void*)VST2Plugin__getCategory, (void*)VST2Plugin__isEffect, (void*)VST2Plugin__isInstrument, (void*)VST2Plugin__startProcess, (void*)VST2Plugin__stopProcess, (void*)VST2Plugin__setSampleRate, (void*)VST2Plugin__setBlockSize, (void*)VST2Plugin__setBlockSizeCollect, (void*)VST2Plugin__getEffectName, (void*)VST2Plugin__getVendorString, (void*)VST2Plugin__getProductString, (void*)VST2Plugin__getVendorVersion, (void*)VST2Plugin__getUniqueID, (void*)VST2Plugin__getVersion, (void*)VST2Plugin__canDo, (void*)VST2Plugin__getFlags, (void*)VST2Plugin__isSynth, (void*)VST2Plugin__hasEditor, (void*)VST2Plugin__canReplacing, (void*)VST2Plugin__programsAreChunks, (void*)VST2Plugin__noSoundInStop, (void*)VST2Plugin__getNumMidiInputChannels, (void*)VST2Plugin__getNumMidiOutputChannels, (void*)VST2Plugin__getInitialDelay, (void*)VST2Plugin__idle, (void*)VST2Plugin__queueNoteOn, (void*)VST2Plugin__queueNoteOff, (void*)VST2Plugin__queueChannelPressure, (void*)VST2Plugin__queueCtlChange, (void*)VST2Plugin__queueBankSelect, (void*)VST2Plugin__queueProgramChange, (void*)VST2Plugin__queueChannelVolumef, (void*)VST2Plugin__queueChannelPanf, (void*)VST2Plugin__queuePitchbend, (void*)VST2Plugin__queuePitchbendf, (void*)VST2Plugin__queueHostMIDIEventsByFlt, (void*)VST2Plugin__getNumInputs, (void*)VST2Plugin__getInputProperties, (void*)VST2Plugin__getNumOutputs, (void*)VST2Plugin__getOutputProperties, (void*)VST2Plugin__getNumPrograms, (void*)VST2Plugin__getProgramName, (void*)VST2Plugin__getProgramNameIndexed, (void*)VST2Plugin__setProgramName, (void*)VST2Plugin__getProgram, (void*)VST2Plugin__setProgram, (void*)VST2Plugin__getNumParameters, (void*)VST2Plugin__setParameter, (void*)VST2Plugin__getParameter, (void*)VST2Plugin__getParameterName, (void*)VST2Plugin__getParameterLabel, (void*)VST2Plugin__getParameterProperties, (void*)VST2Plugin__processEvents, (void*)VST2Plugin__processReplacing, (void*)VST2Plugin__processReplacingSilence, (void*)VST2Plugin__getChunk, (void*)VST2Plugin__setChunk, (void*)VST2Plugin__setParentNativeWindowHandle, (void*)VST2Plugin__showEditor, (void*)VST2Plugin__hideEditor, (void*)VST2Plugin__isEditorVisible, (void*)VST2Plugin__isEditorOpen, (void*)VST2Plugin__closeEditor, (void*)VST2Plugin__GetNumOpenWindows, (void*)VST2Plugin__PumpEvents, (void*)VST2Plugin__HandleQueuedWindowResize, (void*)VST2Plugin__setExtInputBuffer, (void*)VST2Plugin__setExtOutputBuffer, (void*)VST2Plugin__getNumShellPlugins, (void*)VST2Plugin__getShellPluginNameByIndex, (void*)VST2Plugin__getShellPluginUIDByIndex, (void*)VST2Plugin__selectShellPluginByUID, (void*)VST2Plugin__getCurrentShellPluginUID, (void*)VST2Plugin__getCurrentShellPluginEffectName, (void*)VST2Plugin__dataBridgeGetNumChunksAvail, (void*)VST2Plugin__SetEnableHideVSTEditorWhenClosed, (void*)VST2Plugin__getNativeWindowHandle, (void*)VST2Plugin__setEnableReportTransportPlaying, (void*)VST2Plugin__getEnableReportTransportPlaying, (void*)VST2Plugin__windowToFront, (void*)VST2Plugin__callEffEditIdle}; return r;}
sUI          YAC_VCALL VST2Plugin::yacConstantGetNum                (void) {return 14;}
const char **YAC_VCALL VST2Plugin::yacConstantGetNames              (void) {static const char*r[]={"VST2PLUGIN_MAX_IO_BUFFERS", "VST2PLUGIN_MAX_SHELL_PLUGINS", "VST2PLUGIN_CATEGORY_UNKNOWN", "VST2PLUGIN_CATEGORY_EFFECT", "VST2PLUGIN_CATEGORY_SYNTH", "VST2PLUGIN_CATEGORY_ANALYSIS", "VST2PLUGIN_CATEGORY_MASTERING", "VST2PLUGIN_CATEGORY_SPACIALIZERS", "VST2PLUGIN_CATEGORY_ROOMFX", "VST2PLUGIN_CATEGORY_SURROUNDFX", "VST2PLUGIN_CATEGORY_RESTORATION", "VST2PLUGIN_CATEGORY_OFFLINE", "VST2PLUGIN_CATEGORY_SHELL", "VST2PLUGIN_CATEGORY_GENERATOR"}; return r;}
const sUI   *YAC_VCALL VST2Plugin::yacConstantGetTypes              (void) {static const sUI r[]={1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;}
yacmemptr    YAC_VCALL VST2Plugin::yacConstantGetValues             (void) {static sUI r[14]; yacmemptr m; m.ui=r; m.si[0]=(sSI)(48u);m.si[1]=(sSI)(1024u);m.si[2]=(sSI)(0u);m.si[3]=(sSI)(1u);m.si[4]=(sSI)(2u);m.si[5]=(sSI)(3u);m.si[6]=(sSI)(4u);m.si[7]=(sSI)(5u);m.si[8]=(sSI)(6u);m.si[9]=(sSI)(7u);m.si[10]=(sSI)(8u);m.si[11]=(sSI)(9u);m.si[12]=(sSI)(10u);m.si[13]=(sSI)(11u);; return m;}

YAC_C(VST2Plugin, "VST2Plugin");

void  YAC_CALL VST2Plugin__StaticInit(void *_o                               ) {((VST2Plugin*)_o)->StaticInit();}
sSI   YAC_CALL VST2Plugin__WaitForDatabridgeHostEvent(void *_o, yacmemptr _args) {return (sSI)((VST2Plugin*)_o)->WaitForDatabridgeHostEvent(_args.mem[0].si);}
void  YAC_CALL VST2Plugin__StaticExit(void *_o                               ) {((VST2Plugin*)_o)->StaticExit();}
void  YAC_CALL VST2Plugin__setEnableDebug(void *_o, yacmemptr _args          ) {((VST2Plugin*)_o)->setEnableDebug(_args.mem[0].si);}
sSI   YAC_CALL VST2Plugin__loadPlugin(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((VST2Plugin*)_o)->loadPlugin((YAC_String*)_args.mem[0].o, _args.mem[1].si);}return 0;}
void  YAC_CALL VST2Plugin__open     (void *_o                                ) {((VST2Plugin*)_o)->open();}
void  YAC_CALL VST2Plugin__close    (void *_o                                ) {((VST2Plugin*)_o)->close();}
void  YAC_CALL VST2Plugin__suspend  (void *_o                                ) {((VST2Plugin*)_o)->suspend();}
void  YAC_CALL VST2Plugin__resume   (void *_o                                ) {((VST2Plugin*)_o)->resume();}
sSI   YAC_CALL VST2Plugin__getCategory(void *_o                              ) {return (sSI)((VST2Plugin*)_o)->getCategory();}
sSI   YAC_CALL VST2Plugin__isEffect (void *_o                                ) {return (sSI)((VST2Plugin*)_o)->isEffect();}
sSI   YAC_CALL VST2Plugin__isInstrument(void *_o                             ) {return (sSI)((VST2Plugin*)_o)->isInstrument();}
void  YAC_CALL VST2Plugin__startProcess(void *_o                             ) {((VST2Plugin*)_o)->startProcess();}
void  YAC_CALL VST2Plugin__stopProcess(void *_o                              ) {((VST2Plugin*)_o)->stopProcess();}
void  YAC_CALL VST2Plugin__setSampleRate(void *_o, yacmemptr _args           ) {((VST2Plugin*)_o)->setSampleRate(_args.mem[0].f32);}
void  YAC_CALL VST2Plugin__setBlockSize(void *_o, yacmemptr _args            ) {((VST2Plugin*)_o)->setBlockSize(_args.mem[0].si);}
void  YAC_CALL VST2Plugin__setBlockSizeCollect(void *_o, yacmemptr _args     ) {((VST2Plugin*)_o)->setBlockSizeCollect(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL VST2Plugin__getEffectName(void *_o, YAC_Value *_r             ) {((VST2Plugin*)_o)->getEffectName(_r);}
void  YAC_CALL VST2Plugin__getVendorString(void *_o, YAC_Value *_r           ) {((VST2Plugin*)_o)->getVendorString(_r);}
void  YAC_CALL VST2Plugin__getProductString(void *_o, YAC_Value *_r          ) {((VST2Plugin*)_o)->getProductString(_r);}
sSI   YAC_CALL VST2Plugin__getVendorVersion(void *_o                         ) {return (sSI)((VST2Plugin*)_o)->getVendorVersion();}
sSI   YAC_CALL VST2Plugin__getUniqueID(void *_o                              ) {return (sSI)((VST2Plugin*)_o)->getUniqueID();}
sSI   YAC_CALL VST2Plugin__getVersion(void *_o                               ) {return (sSI)((VST2Plugin*)_o)->getVersion();}
sSI   YAC_CALL VST2Plugin__canDo    (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((VST2Plugin*)_o)->canDo((YAC_String*)_args.mem[0].o);}return 0;}
sSI   YAC_CALL VST2Plugin__getFlags (void *_o                                ) {return (sSI)((VST2Plugin*)_o)->getFlags();}
sSI   YAC_CALL VST2Plugin__isSynth  (void *_o                                ) {return (sSI)((VST2Plugin*)_o)->isSynth();}
sSI   YAC_CALL VST2Plugin__hasEditor(void *_o                                ) {return (sSI)((VST2Plugin*)_o)->hasEditor();}
sSI   YAC_CALL VST2Plugin__canReplacing(void *_o                             ) {return (sSI)((VST2Plugin*)_o)->canReplacing();}
sSI   YAC_CALL VST2Plugin__programsAreChunks(void *_o                        ) {return (sSI)((VST2Plugin*)_o)->programsAreChunks();}
sSI   YAC_CALL VST2Plugin__noSoundInStop(void *_o                            ) {return (sSI)((VST2Plugin*)_o)->noSoundInStop();}
sSI   YAC_CALL VST2Plugin__getNumMidiInputChannels(void *_o                  ) {return (sSI)((VST2Plugin*)_o)->getNumMidiInputChannels();}
sSI   YAC_CALL VST2Plugin__getNumMidiOutputChannels(void *_o                 ) {return (sSI)((VST2Plugin*)_o)->getNumMidiOutputChannels();}
sSI   YAC_CALL VST2Plugin__getInitialDelay(void *_o                          ) {return (sSI)((VST2Plugin*)_o)->getInitialDelay();}
void  YAC_CALL VST2Plugin__idle     (void *_o                                ) {((VST2Plugin*)_o)->idle();}
void  YAC_CALL VST2Plugin__queueNoteOn(void *_o, yacmemptr _args             ) {((VST2Plugin*)_o)->queueNoteOn(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL VST2Plugin__queueNoteOff(void *_o, yacmemptr _args            ) {((VST2Plugin*)_o)->queueNoteOff(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL VST2Plugin__queueChannelPressure(void *_o, yacmemptr _args    ) {((VST2Plugin*)_o)->queueChannelPressure(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL VST2Plugin__queueCtlChange(void *_o, yacmemptr _args          ) {((VST2Plugin*)_o)->queueCtlChange(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL VST2Plugin__queueBankSelect(void *_o, yacmemptr _args         ) {((VST2Plugin*)_o)->queueBankSelect(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL VST2Plugin__queueProgramChange(void *_o, yacmemptr _args      ) {((VST2Plugin*)_o)->queueProgramChange(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL VST2Plugin__queueChannelVolumef(void *_o, yacmemptr _args     ) {((VST2Plugin*)_o)->queueChannelVolumef(_args.mem[0].si, _args.mem[1].f32);}
void  YAC_CALL VST2Plugin__queueChannelPanf(void *_o, yacmemptr _args        ) {((VST2Plugin*)_o)->queueChannelPanf(_args.mem[0].si, _args.mem[1].f32);}
void  YAC_CALL VST2Plugin__queuePitchbend(void *_o, yacmemptr _args          ) {((VST2Plugin*)_o)->queuePitchbend(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL VST2Plugin__queuePitchbendf(void *_o, yacmemptr _args         ) {((VST2Plugin*)_o)->queuePitchbendf(_args.mem[0].si, _args.mem[1].f32);}
sSI   YAC_CALL VST2Plugin__queueHostMIDIEventsByFlt(void *_o, yacmemptr _args) {return (sSI)((VST2Plugin*)_o)->queueHostMIDIEventsByFlt(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].o, _args.mem[6].si, _args.mem[7].si);}
sSI   YAC_CALL VST2Plugin__getNumInputs(void *_o                             ) {return (sSI)((VST2Plugin*)_o)->getNumInputs();}
void  YAC_CALL VST2Plugin__getInputProperties(void *_o, yacmemptr _args, YAC_Value *_r) {((VST2Plugin*)_o)->getInputProperties(_args.mem[0].si, _r);}
sSI   YAC_CALL VST2Plugin__getNumOutputs(void *_o                            ) {return (sSI)((VST2Plugin*)_o)->getNumOutputs();}
void  YAC_CALL VST2Plugin__getOutputProperties(void *_o, yacmemptr _args, YAC_Value *_r) {((VST2Plugin*)_o)->getOutputProperties(_args.mem[0].si, _r);}
sSI   YAC_CALL VST2Plugin__getNumPrograms(void *_o                           ) {return (sSI)((VST2Plugin*)_o)->getNumPrograms();}
void  YAC_CALL VST2Plugin__getProgramName(void *_o, YAC_Value *_r            ) {((VST2Plugin*)_o)->getProgramName(_r);}
void  YAC_CALL VST2Plugin__getProgramNameIndexed(void *_o, yacmemptr _args, YAC_Value *_r) {((VST2Plugin*)_o)->getProgramNameIndexed(_args.mem[0].si, _r);}
void  YAC_CALL VST2Plugin__setProgramName(void *_o, yacmemptr _args          ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((VST2Plugin*)_o)->setProgramName((YAC_String*)_args.mem[0].o);}}
sSI   YAC_CALL VST2Plugin__getProgram(void *_o                               ) {return (sSI)((VST2Plugin*)_o)->getProgram();}
void  YAC_CALL VST2Plugin__setProgram(void *_o, yacmemptr _args              ) {((VST2Plugin*)_o)->setProgram(_args.mem[0].si);}
sSI   YAC_CALL VST2Plugin__getNumParameters(void *_o                         ) {return (sSI)((VST2Plugin*)_o)->getNumParameters();}
void  YAC_CALL VST2Plugin__setParameter(void *_o, yacmemptr _args            ) {((VST2Plugin*)_o)->setParameter(_args.mem[0].si, _args.mem[1].f32);}
sF32  YAC_CALL VST2Plugin__getParameter(void *_o, yacmemptr _args            ) {return (sF32)((VST2Plugin*)_o)->getParameter(_args.mem[0].si);}
void  YAC_CALL VST2Plugin__getParameterName(void *_o, yacmemptr _args, YAC_Value *_r) {((VST2Plugin*)_o)->getParameterName(_args.mem[0].si, _r);}
void  YAC_CALL VST2Plugin__getParameterLabel(void *_o, yacmemptr _args, YAC_Value *_r) {((VST2Plugin*)_o)->getParameterLabel(_args.mem[0].si, _r);}
void  YAC_CALL VST2Plugin__getParameterProperties(void *_o, yacmemptr _args, YAC_Value *_r) {((VST2Plugin*)_o)->getParameterProperties(_args.mem[0].si, _r);}
void  YAC_CALL VST2Plugin__processEvents(void *_o                            ) {((VST2Plugin*)_o)->processEvents();}
void  YAC_CALL VST2Plugin__processReplacing(void *_o, yacmemptr _args        ) {((VST2Plugin*)_o)->processReplacing(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL VST2Plugin__processReplacingSilence(void *_o, yacmemptr _args ) {((VST2Plugin*)_o)->processReplacingSilence(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL VST2Plugin__getChunk (void *_o, yacmemptr _args               ) {return (sSI)((VST2Plugin*)_o)->getChunk(_args.mem[0].o, _args.mem[1].si);}
void  YAC_CALL VST2Plugin__setChunk (void *_o, yacmemptr _args               ) {((VST2Plugin*)_o)->setChunk(_args.mem[0].o, _args.mem[1].si);}
void  YAC_CALL VST2Plugin__setParentNativeWindowHandle(void *_o, yacmemptr _args) {((VST2Plugin*)_o)->setParentNativeWindowHandle(_args.mem[0].si);}
void  YAC_CALL VST2Plugin__showEditor(void *_o                               ) {((VST2Plugin*)_o)->showEditor();}
void  YAC_CALL VST2Plugin__hideEditor(void *_o                               ) {((VST2Plugin*)_o)->hideEditor();}
sSI   YAC_CALL VST2Plugin__isEditorVisible(void *_o                          ) {return (sSI)((VST2Plugin*)_o)->isEditorVisible();}
sSI   YAC_CALL VST2Plugin__isEditorOpen(void *_o                             ) {return (sSI)((VST2Plugin*)_o)->isEditorOpen();}
void  YAC_CALL VST2Plugin__closeEditor(void *_o                              ) {((VST2Plugin*)_o)->closeEditor();}
sSI   YAC_CALL VST2Plugin__GetNumOpenWindows(void *_o                        ) {return (sSI)((VST2Plugin*)_o)->GetNumOpenWindows();}
void  YAC_CALL VST2Plugin__PumpEvents(void *_o                               ) {((VST2Plugin*)_o)->PumpEvents();}
void  YAC_CALL VST2Plugin__HandleQueuedWindowResize(void *_o                 ) {((VST2Plugin*)_o)->HandleQueuedWindowResize();}
sSI   YAC_CALL VST2Plugin__setExtInputBuffer(void *_o, yacmemptr _args       ) {return (sSI)((VST2Plugin*)_o)->setExtInputBuffer(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL VST2Plugin__setExtOutputBuffer(void *_o, yacmemptr _args      ) {return (sSI)((VST2Plugin*)_o)->setExtOutputBuffer(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL VST2Plugin__getNumShellPlugins(void *_o                       ) {return (sSI)((VST2Plugin*)_o)->getNumShellPlugins();}
void  YAC_CALL VST2Plugin__getShellPluginNameByIndex(void *_o, yacmemptr _args, YAC_Value *_r) {((VST2Plugin*)_o)->getShellPluginNameByIndex(_args.mem[0].si, _r);}
sSI   YAC_CALL VST2Plugin__getShellPluginUIDByIndex(void *_o, yacmemptr _args) {return (sSI)((VST2Plugin*)_o)->getShellPluginUIDByIndex(_args.mem[0].si);}
sSI   YAC_CALL VST2Plugin__selectShellPluginByUID(void *_o, yacmemptr _args  ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((VST2Plugin*)_o)->selectShellPluginByUID((YAC_String*)_args.mem[0].o, _args.mem[1].si);}return 0;}
sSI   YAC_CALL VST2Plugin__getCurrentShellPluginUID(void *_o                 ) {return (sSI)((VST2Plugin*)_o)->getCurrentShellPluginUID();}
void  YAC_CALL VST2Plugin__getCurrentShellPluginEffectName(void *_o, YAC_Value *_r) {((VST2Plugin*)_o)->getCurrentShellPluginEffectName(_r);}
sSI   YAC_CALL VST2Plugin__dataBridgeGetNumChunksAvail(void *_o              ) {return (sSI)((VST2Plugin*)_o)->dataBridgeGetNumChunksAvail();}
void  YAC_CALL VST2Plugin__SetEnableHideVSTEditorWhenClosed(void *_o, yacmemptr _args) {((VST2Plugin*)_o)->SetEnableHideVSTEditorWhenClosed(_args.mem[0].si);}
sSI   YAC_CALL VST2Plugin__getNativeWindowHandle(void *_o                    ) {return (sSI)((VST2Plugin*)_o)->getNativeWindowHandle();}
void  YAC_CALL VST2Plugin__setEnableReportTransportPlaying(void *_o, yacmemptr _args) {((VST2Plugin*)_o)->setEnableReportTransportPlaying(_args.mem[0].si);}
sSI   YAC_CALL VST2Plugin__getEnableReportTransportPlaying(void *_o          ) {return (sSI)((VST2Plugin*)_o)->getEnableReportTransportPlaying();}
void  YAC_CALL VST2Plugin__windowToFront(void *_o                            ) {((VST2Plugin*)_o)->windowToFront();}
void  YAC_CALL VST2Plugin__callEffEditIdle(void *_o                          ) {((VST2Plugin*)_o)->callEffEditIdle();}
