
use tkvst2;

int BLK_SIZE = 128;

int PROCESS_ITERATIONS = 3;


tkvst2_set_bpm(125.0f);


StringArray plugin_list = [
   // ---- free plugins (2010..2013) ----
   /* 000 */ "h:/vst/v2/vsti/Farbrausch V2.dll",                          // (note) does not support pitchbend
   /* 001 */ "h:/vst__synthedit/Kronos.dll",
   /* 002 */ "h:/vst/Reverbering/Reverbering.dll",
   /* 003 */ "h:/vst/Daedalus/Daedalus.dll",
   /* 004 */ "h:/vst__synthedit/Osiris6/Osiris6.dll",
   /* 005 */ "h:/vst/Pulsation/Pulsation.dll",
   /* 006 */ "h:/vst/Microtrance/Microtrance.dll",
   /* 007 */ "h:/vst/KiTR/KiTR.dll",
   /* 008 */ "h:/vst__synthedit/Invader/Invader_11.dll",
   /* 009 */ "h:/vst/HERCs Abakos/Abakos.dll", 
   /* 010 */ "h:/vst__synthedit/basic_64/basic_64.dll",
   /* 011 */ "h:/vst__synthedit/basscruncher/basscruncher.dll",
   /* 012 */ "h:/vst__synthedit/INTRO/INTRO.dll",                         // only 0s ? (audioMasterGetTime)
   /* 013 */ "h:/vst__synthedit/KARNAGE/KARNAGE.dll",                     // only 0s ? (audioMasterGetTime)
   /* 014 */ "h:/vst__synthedit/s3k/s3k.dll",
   /* 015 */ "h:/vst/superubbish/superubbish.dll",
   /* 016 */ "h:/vst__synthedit/unk64111/Unknown64big.dll",
   /* 007 */ "h:/vst__synthedit/unk64111/Unknown64small.dll",
   /* 018 */ "h:/vst__synthedit/101Drm/101Drm.dll",                       // only 0s ?
   /* 019 */ "h:/vst/dmiHammer/dmiHammer.dll",
   /* 020 */ "h:/vst__synthedit/Drumatic/Drumatic 3.dll",
   /* 021 */ "h:/vst__synthedit/drumatic_ve/Drumatic_VE.dll",             // ERROR: can't find its wavetable file (looks in CWD)
   /* 022 */ "h:/vst__synthedit/dynamite cowbell/dynamite cowbell.dll",   // only 0s ? (drum)
   /* 023 */ "h:/vst__synthedit/easy-drum-X8-Free/easy-drum X8-SE.dll",
   /* 024 */ "h:/vst__synthedit/easy#kick o1/easy#kick o1.dll",           
   /* 025 */ "h:/vst/ersdrums/ersdrums.dll",                              // only 0s ? (drum)
   /* 026 */ "h:/vst__synthedit/expodrum1/expodrum.dll",
   /* 027 */ "h:/vst__synthedit/Flex_Snare/FlexSnare.dll",                // only 0s ? (drum)
   /* 028 */ "h:/vst__synthedit/Gregjazz_Clap/Clap.dll",
   /* 029 */ "h:/vst/KickMaker-v1.5-win/KickMaker.dll",
   /* 030 */ "h:/vst__synthedit/kmt/kmt.dll",
   /* 031 */ "h:/vst__synthedit/minimal_v1.5/Minimal.dll",                // only 0s ? (drum)
   /* 032 */ "h:/vst__synthedit/Percu-p2/Percu-p2.dll",                   // only 0s ? (drum)
   /* 033 */ "h:/vst/pots/pots.dll",
   /* 034 */ "h:/vst__synthedit/rhythms SA PAck/Rhythms BD 2.dll",
   /* 035 */ "h:/vst__synthedit/rhythms SA PAck/Rhythms HI 1.dll",        // only 0s ? (drum)
   /* 036 */ "h:/vst__synthedit/rhythms SA PAck/Rhythms SN 1.dll",
   /* 037 */ "h:/vst__synthedit/rhythms SA PAck/Rhythms TM 1.dll",
   /* 038 */ "h:/vst__synthedit/Rhythmsv3.6/Rhythmsv3.6.dll",
   /* 039 */ "h:/vst__synthedit/RoboDrum/RoboDrum.dll",                   // only -0s ? (drum)
   /* 040 */ "h:/vst/saros1/saros.dll",                        // 
   /* 041 */ "h:/vst__synthedit/musicrow_shaker_maker/Shaker Maker.dll",  // only -0s and 0s ? (drum)
   /* 042 */ "h:/vst/shekrs/shekrs.dll",                                  // only 0s ? (drum)
   /* 043 */ "h:/vst__synthedit/snare/snare.dll",
   /* 044 */ "h:/vst__synthedit/subatomic/subatomic.dll",
   /* 045 */ "h:/vst__synthedit/surface/surface.dll",
   /* 046 */ "h:/vst__synthedit/Takim/Takim.dll",
   /* 047 */ "h:/vst__synthedit/tb_carillon_1_1/tb_carillon_1_1.dll",
   /* 048 */ "h:/vst__synthedit/tb_papaya_1_1/tb_papaya_1_1.dll",
   /* 049 */ "h:/vst/TN-909/TN-909parts/Tn-909.dll",                      // only 0s ? (drum)
   /* 050 */ "h:/vst__synthedit/Tromine_Z/Tromine_Z_v01410.dll",          // only 0s ? (drum)
   /* 051 */ "h:/vst__synthedit/TS-808/TS-808 Mono.dll",
   /* 052 */ "h:/vst__synthedit/TS-808/TS-808 Stereo.dll",
   /* 053 */ "h:/vst__synthedit/utopia/utopia 2.dll",
   /* 054 */ "h:/vst__synthedit/XXDrummodules/xxbdrum-v2.dll",
   /* 055 */ "h:/vst__synthedit/XXDrummodules/xxhihats n cymb-v2.dll",
   /* 056 */ "h:/vst__synthedit/XXDrummodules/xxpercussion-v2.dll",
   /* 057 */ "h:/vst__synthedit/XXDrummodules/xxsnares-v2.dll",
   /* 058 */ "h:/vst/Roland TB303 Screamer/Borderliner.dll",
   /* 059 */ "h:/vst/Roland TB303 Screamer/Borderliner FX.dll",
   /* 060 */ "h:/vst/Roland TB303 Screamer/FourSeasons.dll",
   /* 061 */ "h:/vst/Roland TB303 Screamer/Helios FX.dll",
   /* 062 */ "h:/vst/Roland TB303 Screamer/Screamer.dll",
   /* 063 */ "h:/vst__synthedit/Pulsar/Pulsar 4.dll",
   /* 064 */ "h:/vst/RubyTube/RubyTube.dll",
   /* 065 */ "h:/vst/4 Front Piano Module/4Front Piano Module.dll",       // ERROR: did not produce any output
   /* 066 */ "h:/vst/4 Front Rhode/4Front Rhode.dll",
   /* 067 */ "h:/vst/BV 29 Stingray/bv29.dll",
   /* 068 */ "h:/vst__synthedit/Cosmos 2/Cosmos-2.dll",
   /* 069 */ "h:/vst__synthedit/Dropout Granulator/tb_dropout_2_2.dll",
   /* 070 */ "h:/vst/Mdsp Compressor/MdspCompressor.dll",
   /* 071 */ "h:/vst__synthedit/Padawan_Pad_Synthesizer/tb_padawan_1_1.dll",


// ---- Fruity Loops (2010..2013) ----
   /* 072 */ "h:/vst/Fruity/Fruity 7 band EQ.dll",
   /* 073 */ "h:/vst/Fruity/Fruity balance.dll",
   /* 074 */ "h:/vst/Fruity/Fruity bass boost.dll",
   /* 075 */ "h:/vst/Fruity/Fruity blood overdrive.dll",
   /* 076 */ "h:/vst/Fruity/Fruity center.dll",
   /* 077 */ "h:/vst/Fruity/Fruity delay.dll",
   /* 078 */ "h:/vst/Fruity/Fruity filter.dll",
   /* 079 */ "h:/vst/Fruity/Fruity free filter.dll",
   /* 080 */ "h:/vst/Fruity/Fruity mute.dll",                             // ERROR: did not produce any output
   /* 081 */ "h:/vst/Fruity/Fruity mute 2.dll",                           // 
   /* 082 */ "h:/vst/Fruity/Fruity reeverb.dll",                          // ERROR: did not produce any output


// ---- Steinberg Cubase VST commercial plugins (tested w/ SE version) (2010..2013)

   /* 083 */ "c:/Program Files/Steinberg/VstPlugins/autopan.dll",
   /* 084 */ "c:/Program Files/Steinberg/VstPlugins/choirus2.dll",
   /* 085 */ "c:/Program Files/Steinberg/VstPlugins/cleancomp.dll",
   /* 086 */ "c:/Program Files/Steinberg/VstPlugins/externalizer.dll",
   /* 087 */ "c:/Program Files/Steinberg/VstPlugins/leveler.dll",
   /* 088 */ "c:/Program Files/Steinberg/VstPlugins/NaturalVerb.dll",     // ERROR: failed to create effect instance
   /* 089 */ "c:/Program Files/Steinberg/VstPlugins/noise gate.dll",
   /* 090 */ "c:/Program Files/Steinberg/VstPlugins/peak master.dll",
   /* 091 */ "c:/Program Files/Steinberg/VstPlugins/puncher.dll",
   /* 092 */ "c:/Program Files/Steinberg/VstPlugins/stereoecho.dll",
   /* 093 */ "c:/Program Files/Steinberg/VstPlugins/stereoexpander.dll",
   /* 094 */ "c:/Program Files/Steinberg/VstPlugins/toolsone.dll",

// ---- Native Instruments commercial plugins (tested w/ demo version) (2010..2013) ----

   /* 095 */ "c:/Program Files/Native Instruments/Kore Player/VSTPlugins 32 bit/Kore Player.dll", // UI repaints and about dialog works but controls are not responding --> now works after UpdateWindow() fix
   /* 096 */ "c:/Program Files/Native Instruments/Kore Player/VSTPlugins 32 bit/Kore Player FX.dll", // UI repaints and about dialog works but controls are not responding --> now works after UpdateWindow() fix
   /* 097 */ "c:/Program Files/Steinberg/VstPlugins/Pro-53 Demo.dll",


// ---- other commercial plugins (tested w/ free/demo versions) (2010..2013) ----
   /* 098 */ "c:/Program Files/Steinberg/VstPlugins/SampleTank2.x.dll",
   /* 099 */ "",//"c:/Program Files/Steinberg/VstPlugins/Nucleus 2 XT.dll",  // WARNING: dialog "Can't load module. 'EVM LFO'"


// ---- free plugins from from vstplanet.com (2010..2013) ----
   /* 100 */ "h:/vst/Modcat/Modcat.dll",
   /* 101 */ "h:/vst__synthedit/scorpius/scorpius.dll",
   /* 102 */ "h:/vst/TranceDrive/TranceDrive.dll",
   /* 103 */ "h:/vst__synthedit/iloSynth1_v1.6/iloSynth1.dll",
   /* 104 */ "h:/vst__synthedit/Phadiz/Phadiz(P).dll",
   /* 105 */ "h:/vst__synthedit/Silkworm/Silkworm.dll",
   /* 106 */ "h:/vst__synthedit/dc09_ENTRYID_Prdigious Synthesiser/Prodigious Synthesizer.dll",
   /* 107 */ "h:/vst__synthedit/GTG Unit 1/Unit 1 Synth.dll",
   /* 108 */ "h:/vst__synthedit/orion/orion1.dll",
   /* 109 */ "h:/vst__synthedit/String Thing/String Thing.dll",
   /* 110 */ "h:/vst/Pterosaur/Pterosaur.dll",
   /* 111 */ "h:/vst/Acrobatics Alieno 1.0.9/Alieno.dll",
   /* 112 */ "h:/vst__synthedit/GTG FM 4/GTG FM4.dll",
   /* 113 */ "h:/vst/NoteGraphica/NoteGraphica.dll",
   /* 114 */ "h:/vst/MonoFury/MonoFury.dll",
   /* 115 */ "h:/vst__synthedit/Zodiac6/Zodiac6.dll",
   /* 116 */ "h:/vst__synthedit/Artemis/Artemis.dll",
   /* 117 */ "h:/vst__synthedit/superwave-p8/SUPERWAVEP8.dll",
   /* 118 */ "h:/vst/Anawave/Anawave.dll",
   /* 119 */ "h:/vst__synthedit/Omaha/Omaha.dll",
   /* 120 */ "h:/vst__synthedit/Font! 1.2/Font!12.dll",
   /* 121 */ "h:/vst__synthedit/Chimera/Majken's Chimera.dll",
   /* 122 */ "h:/vst__synthedit/Wave! 1.3/Wave!13.dll",
   /* 123 */ "h:/vst__synthedit/Sinthecyza!1.5/Sinthecyza!15.dll",
   /* 124 */ "h:/vst__synthedit/Sinthecyza!3.2/Sinthecyza!3.2.dll",
   /* 125 */ "h:/vst__synthedit/Sinthecyza!2.6/Sinthecyza!26.dll",
   /* 126 */ "h:/vst__synthedit/Sinthecyza!4.2/Sinthecyza!4.2.dll",
   /* 127 */ "h:/vst__synthedit/Arpecyza! 1.4/Arpecyza!14.dll",
   /* 128 */ "",//"h:/vst__synthedit/Kassiopeia!2.0/Kassiopeia!2.0.dll", // generated file 'CK_POLYPHONY_CONTROL.SEP' is identified as 'TR/Gendal.62464.BJ' virus by AntiVir
   /* 129 */ "h:/vst__synthedit/ppa1/ppa1.dll",
   /* 130 */ "h:/vst__synthedit/gemini/gemini1.dll",
   /* 131 */ "h:/vst__synthedit/SQ8L/SQ8L.dll",
   /* 132 */ "h:/vst/TAL-U-No-60/TAL-U-No-60.dll",
   /* 133 */ "h:/vst__synthedit/ProtoPlasm/ProtoPlasmFree.dll",
   /* 134 */ "h:/vst__synthedit/Strings/Strings.dll",
   /* 135 */ "h:/vst/ASynth101/ASynth.dll",
   /* 136 */ "h:/vst/transcender/TranscenderSE.dll",
   /* 137 */ "h:/vst/Lusus/Lusus.dll",
   /* 138 */ "h:/vst/Umbra/Umbra-free.dll",
   /* 139 */ "h:/vst__synthedit/acquitxx14/acquitxx14.dll",
   /* 140 */ "h:/vst/LPLL_v201/LPLL2.dll",
   /* 141 */ "h:/vst/SoHaSonata/SoHaSonata.dll",
   /* 142 */ "h:/vst__synthedit/Adonis-2-FE/Adonis-2 FE.dll",
   /* 143 */ "h:/vst__synthedit/Spook Keys/Spook Keys.dll",
   /* 144 */ "h:/vst__synthedit/GTG_44_S/GTG 44 S.dll",
   /* 145 */ "h:/vst__synthedit/Panzer_Tank_4_v10/PM4.dll",
   /* 146 */ "h:/vst/PQN Mopar 8/PQN Mopar.dll",
   /* 147 */ "h:/vst__synthedit/Matnitron/Matnitron.dll",
   /* 148 */ "h:/vst/VL1_V1010/VL1.dll",
   /* 149 */ "h:/vst/Invector_8v/Invector_8v.dll",
   /* 150 */ "h:/vst__synthedit/Hahaha CS33/HahahaCS33.dll",
   /* 151 */ "h:/vst__synthedit/The Box/The Box.dll",
   /* 152 */ "h:/vst/IMP-OSC-TOR VSTi/Plugin/IMP-OSC-TOR VSTi.dll",
   /* 153 */ "h:/vst/Rock Hardbuns' bundle_synths/PadPal.dll",
   /* 154 */ "h:/vst/Rock Hardbuns' bundle_synths/Perkele2.dll",
   /* 155 */ "h:/vst/Rock Hardbuns' bundle_synths/PhaseBass.dll",
   /* 156 */ "h:/vst/Rock Hardbuns' bundle_synths/PhasePno.dll",
   /* 157 */ "h:/vst/Rock Hardbuns' bundle_synths/Piper.dll",
   /* 158 */ "h:/vst__synthedit/CY Freemoog/CY_Freemoog.dll",
   /* 159 */ "h:/vst/Triangle I/Triangle I.dll",
   /* 160 */ "h:/vst__synthedit/DigiReactor/DigiReactor.dll",
   /* 161 */ "h:/vst__synthedit/Istvan Kaldor ChristmasDrone X-Mas 2005 Special/ChristmasDrone.dll",
   /* 162 */ "h:/vst__synthedit/Istvan Kaldor DirtBag 1.89/DirtBag.dll",
   /* 163 */ "h:/vst__synthedit/Istvan Kaldor Dirt-E 1.86/Dirt-E.dll",
   /* 164 */ "h:/vst__synthedit/Istvan Kaldor Earth-Synth 1.2/Earth-Synth.dll",
   /* 165 */ "h:/vst__synthedit/Istvan Kaldor FoolPlug 1.11/FoolPlug.dll",
   /* 166 */ "h:/vst__synthedit/Istvan Kaldor LightBag II 2.09/LightBag II.dll",
   /* 167 */ "h:/vst__synthedit/Istvan Kaldor LightBag+ 1.035/LightBag+.dll",
   /* 168 */ "h:/vst__synthedit/Istvan Kaldor Maestro 1.27/Maestro.dll",
   /* 169 */ "h:/vst__synthedit/Istvan Kaldor PanFlute 1.55/PanFlute.dll",
   /* 170 */ "h:/vst__synthedit/Istvan Kaldor RotoPuker 2.0/RotoPuker2.dll",
   /* 171 */ "h:/vst__synthedit/Istvan Kaldor SideChain 1.00/SideChain.dll",
   /* 172 */ "h:/vst__synthedit/Istvan Kaldor smallPressor 1.00/Smallpressor.dll",
   /* 173 */ "h:/vst__synthedit/Istvan Kaldor SpinBag 1.0/SpinBag.dll",
   /* 174 */ "h:/vst__synthedit/Istvan Kaldor Supressor 1.0/Supressor.dll",
   /* 175 */ "h:/vst__synthedit/Istvan Kaldor Sympho 1.02x/Sympho.dll",
   /* 176 */ "",//"h:/vst__synthedit/Istvan Kaldor ToySynth 0.4/ToySynth.dll", // ERROR: effEditOpen failed, then crashes in effClose
   /* 177 */ "",//"h:/vst__synthedit/Istvan Kaldor ToyOrgan 0.1/ToyOrgan.dll", // ERROR: effEditOpen failed, then crashes in effClose
   /* 178 */ "h:/vst__synthedit/Scandalous/Scandalous.dll",
   /* 179 */ "h:/vst/fem/fem.dll",
   /* 180 */ "h:/vst/VOPM/VOPM.dll",
   /* 181 */ "h:/vst__synthedit/voc-one/voc-one.dll",
   /* 182 */ "h:/vst__synthedit/Syntar/Syntar.dll",
   /* 183 */ "h:/vst/TruthSynth/Truth Synth v1.03.dll",
   /* 184 */ "h:/vst__synthedit/Azeta66/AZ66.dll",
   /* 185 */ "h:/vst/ganymed/ganymed.dll",
   /* 186 */ "h:/vst__synthedit/NK 1001/NK 1001.dll",
   /* 187 */ "h:/vst__synthedit/GTG K1/GTG K 1.dll",
   /* 188 */ "h:/vst__synthedit/GTG K1/GTG K 1R.dll",
   /* 189 */ "h:/vst__synthedit/TS-Substance/TS-Substance.dll",
   /* 190 */ "h:/vst__synthedit/STS-11b/STS-11b-7v.dll",

   // ---- Native Instruments Absynth 5 (demo) (2010..2013) ----
   /* 191 */ "c:/Program Files/Steinberg/VstPlugins/Absynth 5.dll",
   /* 192 */ "c:/Program Files/Steinberg/VstPlugins/Absynth 5 FX.dll",
   /* 193 */ "c:/Program Files/Steinberg/VstPlugins/Absynth 5 FX Surround.dll",
   /* 194 */ "c:/Program Files/Steinberg/VstPlugins/Absynth 5 Stereo.dll",

   // ---- more free FX plugins (2010..2013) ----
   /* 195 */ "h:/vst__synthedit/Dasample GlaceVerb/GlaceVerb.dll",
   /* 196 */ "h:/vst/Sir_1011/SIR_1011.dll",
   /* 197 */ "h:/vst/FreeverbToo/FreeverbToo.dll",
   /* 198 */ "h:/vst/VoxengoOldSkoolVerb/VoxengoOldSkoolVerb.dll",
   /* 199 */ "h:/vst/ariesverb/AriesVerb.dll", // no editor
   /* 200 */ "h:/vst/ModernSpacer/ModernSpacer.dll",
   /* 201 */ "h:/vst/Classic Reverb/Classic Reverb.dll",
   /* 202 */ "h:/vst/jb omniverb/jb_omniverb.dll",
   /* 203 */ "h:/vst/TimeVerb/TimeVerb.dll",
   /* 204 */ "h:/vst__synthedit/EM82-C Warm Reverb/EM82-C_WSE.dll",
   /* 205 */ "h:/vst__synthedit/outdoorverb/outdoorverb.dll",
   /* 206 */ "h:/vst__/KR-Micro-Reverb/KR-Micro-Reverb.dll",              // crashes in effClose
   /* 207 */ "h:/vst/Freeverb3_VST/lib/Freeverb3VST_StereoEnhancer.dll",  // no editor
   /* 208 */ "h:/vst/Freeverb3_VST/lib/Freeverb3VST_WindCompressor.dll",
   /* 209 */ "h:/vst/Freeverb3_VST/lib/Freeverb3VST_Freeverb.dll",        // no editor
   /* 210 */ "h:/vst/Freeverb3_VST/lib/Freeverb3VST_NVerb.dll",           // no editor
   /* 211 */ "h:/vst/Freeverb3_VST/lib/Freeverb3VST_Impulser2.dll", 
   /* 212 */ "h:/vst__/KR-ReverbFSR120/KR-ReverbFSR120.dll",
   /* 213 */ "h:/vst/AnechoicRoomSimulator/AnechoicRoomSimulator.dll",
   /* 214 */ "h:/vst/UniRoomLE/UniRoomLE.dll",
   /* 215 */ "h:/vst__synthedit/MutantReverb/MutantReverb.dll",
   /* 216 */ "h:/vst/MVerb/MVerb.dll",
   /* 217 */ "h:/vst__synthedit/Chrysalis-Son of a pitch/Son of a pitch.dll",
   /* 218 */ "h:/vst/vocovee/vocovee.dll",
   /* 219 */ "h:/vst__synthedit/ACF5B11/Sonix.dll",
   /* 220 */ "h:/vst__synthedit/mini voctopus/mini voctopus.dll",
   /* 221 */ "h:/vst/KeroVee/KeroVee.dll",
   /* 222 */ "h:/vst/GTune/GTune.dll",
   /* 223 */ "h:/vst/autotalent/autotalent.dll",                          // no editor
   /* 224 */ "h:/vst/Stardust/Stardust.dll",
   /* 225 */ "h:/vst/LUXONIX/LFX-1310.dll", // "c:/Program Files/Steinberg/VstPlugins/LUXONIX/LFX-1310.dll",
   /* 226 */ "h:/vst/fx/misc/Effectizer.dll",  // (note) nag-screen does not go away (-> not a bug, a feature..)
   /* 227 */ "h:/vst/Acrobatics Vento 1.0.6/Vento.dll",
   /* 228 */ "h:/vst__synthedit/X-Flanger/X-Flanger.dll",
   /* 229 */ "h:/vst/TAL-Phaser/TAL-Phaser.dll",
   /* 230 */ "h:/vst/VariableTrem/VariableTrem.dll",
   /* 231 */ "h:/vst/TheModulator/themodulator2.dll",
   /* 232 */ "h:/vst/TAL-Flanger/TAL-Flanger.dll",
   /* 233 */ "h:/vst__synthedit/ringer/ringer.dll",
   /* 234 */ "h:/vst/PulseModulator/PulseModulator.dll",
   /* 235 */ "h:/vst__synthedit/Phaz-Zoar/Phaz-Zoar.dll",
   /* 236 */ "h:/vst__synthedit/Phaz-Zoar/Phaz-ZoarMono.dll",
   /* 237 */ "h:/vst__synthedit/PCH-1 Chorus/PCH-1 Chorus.dll",
   /* 238 */ "h:/vst__synthedit/MB MooRiMo/MB MooRiMo.dll",
   /* 239 */ "h:/vst__synthedit/MB MooRiMo/MB MooRiMo Mono.dll",
   /* 240 */ "h:/vst/ndcTrem_plus/ndcTrem_plus.dll",
   /* 241 */ "h:/vst/MonstaChorus/MonstaChorus.dll",
   /* 242 */ "h:/vst__synthedit/MB MooPhaz/MB MooPhaz.dll",
   /* 243 */ "h:/vst__synthedit/MB MooPhaz/MB MooPhaz Mono.dll",
   /* 244 */ "h:/vst/mabento/mabento.dll",
   /* 245 */ "h:/vst__synthedit/Lfo chopper/Lfo chopper.dll",
   /* 246 */ "h:/vst__synthedit/grANALiser_1.0/grANALiser.dll",
   /* 247 */ "h:/vst__synthedit/magnetwall/magnetwall.dll", // plugin indicates wrong height (~40 pixels too tall)
   /* 248 */ "h:/vst__synthedit/kitchen_sync/kitchen_sync_2.dll",
   /* 249 */ "h:/vst/Big Tick Hexaline/Big Tick Hexaline.dll",
   /* 250 */ "h:/vst/Flang-3R/Flang-3R.dll",
   /* 251 */ "h:/vst/GChorus/GChorus.dll",
   /* 252 */ "h:/vst/Classic Phaser/Classic Phaser.dll",
   /* 253 */ "h:/vst/Classic Flanger/Classic Flanger.dll",
   /* 254 */ "h:/vst/Classic Chorus/Classic Chorus.dll",
   /* 255 */ "h:/vst/Chorus CH-2/Chorus CH-2.dll",
   /* 256 */ "h:/vst/TAL-Chorus-60/TAL-Chorus-60.dll",
   /* 257 */ "h:/vst/UpStereo/UpStereo.dll",
   /* 258 */ "h:/vst__synthedit/Width/Width.dll",
   /* 259 */ "h:/vst__synthedit/MB Stereoizer/MB Stereoizer.dll",
   /* 260 */ "h:/vst/PanBundle/OnePanLite.dll",
   /* 261 */ "h:/vst/PanBundle/Pan+.dll",
   /* 262 */ "h:/vst__synthedit/satellite/satellite.dll",
   /* 263 */ "h:/vst/JB Omnisone/jb_omnisone.dll",
   /* 264 */ "h:/vst__synthedit/Binaural Simulator/Binaural Simulator.dll",
   /* 265 */ "h:/vst/otiumFX BassLane/otiumFX BassLane.dll",
   /* 266 */ "h:/vst__synthedit/airwall/airwall.dll", // plugin indicates wrong height (~40 pixels too tall)
   /* 267 */ "h:/vst__synthedit/truc/truc.dll",
   /* 268 */ "h:/vst__synthedit/WolloSpacer/WOLLO SPACER 2.dll",
   /* 269 */ "h:/vst/Big Tick Dual Delay/Big Tick Dual Delay.dll",
   /* 270 */ "h:/vst__synthedit/whirlpool/whirlpool.dll",
   /* 271 */ "h:/vst/W1Limiter/George Yohng's W1 Limiter (Betabugs GUI).dll",
   /* 272 */ "h:/vst/steadyprobundle-13/STEADY_Pro.dll",
   /* 273 */ "h:/vst/steadyprobundle-13/STEADY_Pro_SMS.dll",
   /* 274 */ "h:/vst/steadyprobundle-13/STEADY_Pro_ST.dll",
   /* 275 */ "h:/vst/Sonnix/Sonnix Soft Knee Compressor.dll",
   /* 276 */ "h:/vst/RoughRider/RoughRider.dll",
   /* 277 */ "h:/vst/dc09_29_FerricTDS/FerricTDS.dll",
   /* 278 */ "h:/vst/Acrobatics Rombo 1.0.6/Rombo.dll",
   /* 279 */ "h:/vst/ReaXcomp/reaxcomp-standalone.dll",
   /* 280 */ "h:/vst/EezySqueeze2/EezySqueeze2.dll",
   /* 281 */ "h:/vst/GranComp3/GranComp3.dll",
   /* 282 */ "h:/vst/GranComp3/GranComp3_mono.dll",
   /* 283 */ "h:/vst/reacomp/reacomp.dll",
   /* 284 */ "h:/vst/GranComp/GranComp.dll",
   /* 285 */ "h:/vst/GranComp/GranComp_mono.dll",
   /* 286 */ "h:/vst/GMulti/GMulti.dll",
   /* 287 */ "h:/vst/DensitymkII_2.0.2/DensitymkII.dll",
   /* 288 */ "h:/vst/GMax/GMax.dll",
   /* 289 */ "h:/vst/GeneComp/GeneComp.dll",
   /* 290 */ "h:/vst/GComp2/GComp2.dll",
   /* 291 */ "h:/vst/GClip/GClip.dll",
   /* 292 */ "h:/vst/Easyvox17/Easyvox.dll",
   /* 293 */ "h:/vst/EasyNYLite/EasyNYLite.dll",
   /* 294 */ "h:/vst/CompEq-V/CompEq-V.dll",
   /* 295 */ "h:/vst__synthedit/morfiki_compmessy/compmessy.dll",
   /* 296 */ "h:/vst/weldroid-courvoisier-revA/courvoisier.dll",
   /* 297 */ "h:/vst__synthedit/D2/D2.dll",
   /* 298 */ "h:/vst/CompEq/CompEQ.dll",
   /* 299 */ "h:/vst/CompEq/CompEQ-ST.dll",
   /* 300 */ "h:/vst/BuzComp CP5/Normal/BuzComp_CP5_v11_beta3_nonSSE.dll",
   /* 301 */ "h:/vst/BuzComp CP5/SSE/BuzComp_CP5_v11_beta3.dll",
   /* 302 */ "h:/vst/BuzComp_LT1/BuzComp_LT1.dll",
   /* 303 */ "h:/vst/BuzComp_LT1/BuzComp_LT1mono.dll",
   /* 304 */ "h:/vst/GeneComp3/GeneComp3.dll",
   /* 305 */ "h:/vst/GeneComp3/GeneComp3_mono.dll",
   /* 306 */ "h:/vst/Compressive/CompressivePro.dll",
   /* 307 */ "h:/vst/Compressive/CompressiveLite.dll",
   /* 308 */ "h:/vst/CamelCrusher/CamelPhatFree.dll",
   /* 309 */ "h:/vst/whamdrive_v21/AuraPlug/32bit/Whamdrive.dll",
   /* 310 */ "h:/vst/FreeAmp3/FA3_Full.dll",
   /* 311 */ "h:/vst__synthedit/efm-muff/muff.dll",
   /* 312 */ "h:/vst/eddievsheaven_v10/AuraPlug/32bit/EddieVsHeaven.dll",
   /* 313 */ "h:/vst/Extremist/Extremist.dll",
   /* 314 */ "h:/vst__synthedit/BrackenburyTubeAmplifier/Tubeamp.dll",
   /* 315 */ "h:/vst__synthedit/CrunchDude/",
   /* 316 */ "h:/vst/californiasun_v11/AuraPlug/32bit/CaliforniaSun.dll",
   /* 317 */ "h:/vst/Nick_Crow_7170_Lead_Req/Nick_Crow_7170_Lead_Req.dll",
   /* 318 */ "h:/vst/Nick_Crow_8505_Lead/Nick_Crow_8505_Lead.dll",
   /* 319 */ "h:/vst/Nick_Crow_8505_Lead/Nick_Crow_8505_Lead_no_SSE2.dll",
   /* 320 */ "h:/vst/TAL-Tube/TAL-Tube.dll",
   /* 321 */ "h:/vst/piano/Pianoteq 4 STAGE.dll", // (note) VST window MUST be created in main thread

   // ---- 64 bit instrument plugins (2018) ----
   /* 322 */ "f:/vst_64bit/SynthMaster One/SynthMasterOne.dll",
   /* 323 */ "f:/vst_64bit/SynthMaster One/SynthMasterOneFX.dll",
   /* 324 */ "f:/vst_64bit/SynthMaster/SynthMaster2.dll",  // presets can be clicked but don't seem to load ?! (no hostcallback)
   /* 325 */ "f:/vst_64bit/SynthMaster/SynthMaster2FX.dll",
   /* 326 */ "f:/vst_64bit/synth/ZebraHZ(x64).dll",
   /* 327 */ "f:/vst_64bit/synth/Zebra2(x64).dll",
   /* 328 */ "f:/vst_64bit/synth/Zebralette(x64).dll",
   /* 329 */ "f:/vst_64bit/synth/Zebrify(x64).dll",
   /* 330 */ "f:/vst_64bit/synth/ZRev(x64).dll",  // (note) u-he artifical reverb designer
   /* 331 */ "f:/vst_64bit/synth/Diva(x64).dll",  // keys in "save" dlg not working when SDL is used
   /* 332 */ "f:/vst_64bit/synth/Bazille(x64).dll",
   /* 333 */ "f:/vst_64bit/synth/ACE(x64).dll",
   /* 334 */ "f:/vst_64bit/synth/Repro-1(x64).dll",  // mw+piano widgets not working?
   /* 335 */ "f:/vst_64bit/synth/Repro-5(x64).dll",  // mw+piano widgets not working?
   /* 336 */ "f:/vst_64bit/synth/Chromaphone 2.dll",
   /* 337 */ "f:/vst_64bit/synth/Dexed.dll",  // open source
   /* 338 */ "f:/vst_64bit/synth/TAL-U-No-62.dll",
   /* 339 */ "f:/vst_64bit/synth/PG-8X.dll",  // SEGV when clicking on preset name
   /* 340 */ "f:/vst_64bit/synth/Oddity2_vstwin_x64.dll",
   /* 341 */ "f:/vst_64bit/synth/Pianoteq 6/Pianoteq 6 (64-bit).dll ",
   /* 342 */ "f:/vst_64bit/synth/Waldorf/Nave.dll",  // (note) requires effEditOpen to be called after CreateWindow()/ShowWindow(), otherwise it crashes with a SEGV while opening the UI window (read from 0). uses OpenGL.
   /* 343 */ "f:/vst_64bit/synth/Waldorf/PPG Wave 3.V.dll",  // debug-prints 3120 parameters
   /* 344 */ "f:/vst_64bit/synth/TAL-BassLine-101-64.dll",
   /* 345 */ "f:/vst_64bit/sampler/Renoise_Redux.dll",  // must use plugin UI right/bottom handle when resizing the window
   /* 346 */ "f:/vst_64bit/sampler/TAL-Sampler-64.dll",
   /* 347 */ "f:/vst_64bit/sampler/uvi_falcon/FalconVSTx64.dll", // UI resize often does not work (audioMasterCanDo:sizeWindow often not recvd ) UPDATE: fixed by creating a non-resizable window (oh the irony..)
   /* 348 */ "f:/vst_64bit/synth/discoDSP_obxd/Obxd64.dll",  // open source

   // ---- 64 bit FX plugins (2018) ----
   /* 349 */ "f:/vst_64bit/chorus/Multiply.dll",
   /* 350 */ "f:/vst_64bit/chorus/OSL-Chorus-x64.dll",
   /* 351 */ "f:/vst_64bit/chorus/TAL-Chorus-LX-64.dll",
   /* 352 */ "f:/vst_64bit/delay/Bitspeek.dll",  // synth
   /* 353 */ "f:/vst_64bit/delay/Echobode.dll",
   /* 354 */ "f:/vst_64bit/delay/Microtonic.dll", // synth
   /* 355 */ "f:/vst_64bit/delay/Microtonic Multi.dll", // synth
   /* 356 */ "f:/vst_64bit/delay/OuterSpace_x64.dll",
   /* 357 */ "f:/vst_64bit/delay/Permut8.dll",
   /* 358 */ "f:/vst_64bit/delay/Satin(x64).dll",
   /* 359 */ "f:/vst_64bit/delay/Synplant.dll",
   /* 360 */ "f:/vst_64bit/delay/Tal-Dub.dll",
   /* 361 */ "f:/vst_64bit/delay/ValhallaFreqEcho_x64.dll",
   /* 362 */ "f:/vst_64bit/eq/soothe64.dll",
   /* 363 */ "f:/vst_64bit/other/FabFilter Saturn.dll",
   /* 364 */ "f:/vst_64bit/other/FabFilter Saturn (Mono).dll",
   /* 365 */ "f:/vst_64bit/other/midiMonitor.dll",
   /* 366 */ "f:/vst_64bit/other/Softube/Heartbeat.dll",
   /* 367 */ "f:/vst_64bit/other/Softube/Tape.dll",
   /* 368 */ "f:/vst_64bit/reverb/ADAPTIVERB VST.dll",
   /* 369 */ "f:/vst_64bit/reverb/LittlePlate.dll",
   /* 370 */ "f:/vst_64bit/reverb/Protoverb(x64).dll",
   /* 371 */ "f:/vst_64bit/reverb/SparkVerbx64.dll",
   /* 372 */ "f:/vst_64bit/reverb/TAL-Reverb-2-64.dll",
   /* 373 */ "f:/vst_64bit/reverb/TAL-Reverb-4-64.dll",
   /* 374 */ "f:/vst_64bit/reverb/Toraverb2.dll",
   /* 375 */ "f:/vst_64bit/reverb/ValhallaPlate_x64.dll",
   /* 376 */ "f:/vst_64bit/reverb/ValhallaRoom_x64.dll",
   /* 377 */ "f:/vst_64bit/reverb/ValhallaShimmer_x64.dll",
   /* 378 */ "f:/vst_64bit/reverb/ValhallaUberMod_x64.dll",
   /* 379 */ "f:/vst_64bit/reverb/ValhallaVintageVerb_x64.dll",
   /* 380 */ "f:/vst_64bit/reverb/Freeverb3_VST_x64/lib/Freeverb3VST_Freeverb.dll",
   /* 381 */ "f:/vst_64bit/reverb/Freeverb3_VST_x64/lib/Freeverb3VST_Hibiki_Reverb.dll",
   /* 382 */ "f:/vst_64bit/reverb/Freeverb3_VST_x64/lib/Freeverb3VST_Impulser2.dll", // read from 0xffffffff (while processing frames)
   /* 383 */ "f:/vst_64bit/reverb/Freeverb3_VST_x64/lib/Freeverb3VST_NVerb.dll",
   /* 384 */ "f:/vst_64bit/reverb/Freeverb3_VST_x64/lib/Freeverb3VST_ProG_Reverb.dll",
   /* 385 */ "f:/vst_64bit/reverb/Freeverb3_VST_x64/lib/Freeverb3VST_StereoEnhancer.dll",
   /* 386 */ "f:/vst_64bit/reverb/Freeverb3_VST_x64/lib/Freeverb3VST_STRev.dll",
   /* 387 */ "f:/vst_64bit/reverb/Freeverb3_VST_x64/lib/Freeverb3VST_WindCompressor.dll",
   /* 388 */ "f:/vst_64bit/reverb/Freeverb3_VST_x64/lib/Freeverb3VST_X1_Limiter.dll",

   // ---- 64 bit Soundtoys FX plugins (2018) ----
   /* 389 */ "f:/vst_64bit/Soundtoys/Crystallizer.dll",
   /* 390 */ "f:/vst_64bit/Soundtoys/Decapitator.dll",
   /* 391 */ "f:/vst_64bit/Soundtoys/DevilLoc.dll",
   /* 392 */ "f:/vst_64bit/Soundtoys/DevilLocDeluxe.dll",
   /* 393 */ "f:/vst_64bit/Soundtoys/EchoBoy.dll",
   /* 394 */ "f:/vst_64bit/Soundtoys/EchoBoyJr.dll",
   /* 395 */ "f:/vst_64bit/Soundtoys/EffectRack.dll",
   /* 396 */ "f:/vst_64bit/Soundtoys/FilterFreak1.dll",
   /* 397 */ "f:/vst_64bit/Soundtoys/FilterFreak2.dll",
   /* 398 */ "f:/vst_64bit/Soundtoys/LittleAlterBoy.dll",
   /* 399 */ "f:/vst_64bit/Soundtoys/LittleMicroShift.dll",
   /* 400 */ "f:/vst_64bit/Soundtoys/LittlePrimalTap.dll",
   /* 401 */ "f:/vst_64bit/Soundtoys/LittleRadiator.dll",
   /* 402 */ "f:/vst_64bit/Soundtoys/MicroShift.dll",
   /* 403 */ "f:/vst_64bit/Soundtoys/PanMan.dll",
   /* 404 */ "f:/vst_64bit/Soundtoys/PhaseMistress.dll",
   /* 405 */ "f:/vst_64bit/Soundtoys/PrimalTap.dll",
   /* 406 */ "f:/vst_64bit/Soundtoys/Radiator.dll",
   /* 407 */ "f:/vst_64bit/Soundtoys/SieQ.dll",
   /* 408 */ "f:/vst_64bit/Soundtoys/Tremolator.dll",

   /* 409 */ "../research/pongasoft_vst24-hello-world-master/M3dB/vs2017/m3db/x64/Release/m3db.dll",

   /* 410 */ "c:/Program Files/VSTPlugins/WaveShell1-VST 9.92_x64.dll",  // kPlugCategShell

   /* 411 */ "f:/vst_64bit/eureka/vst_eureka_x64.dll",  // my meta host

   /* 412 */ "f:/vst_64bit/synth/plogue chipsynth OPS7/VST/chipsynth OPS7.dll"  // effSetChunk issue (first call after instantation)

""
                           ];


// <class.png>
class Global {
   // <debug.png>
   static Debug(local String _text) {
      trace "[dbg] "+_text;
   }

   // <log.png>
   static Error(String _text) {
      trace "[---] Global.Error: \""+_text+"\".";
   }

   // <log.png>
   static Warning(String _text) {
      trace "[~~~] Global.Warning: \""+_text+"\".";
   }
}


// <class.png>
class ModVST2 {
   // simplified "Eureka" host VST2Plugin script wrapper/utility class for VST2Plugin

   VST2Plugin *plugin;

   define int PATCH_DATATYPE_NONE         = 0;
   define int PATCH_DATATYPE_BANKCHUNK    = 1;
   define int PATCH_DATATYPE_PROGRAMCHUNK = 2;
   define int PATCH_DATATYPE_PARAMETERS   = 3;

   Buffer patch_data;
   int patch_datatype;


   // <method.png>
   public method loadPlugin(String _pathName) : boolean {
      boolean ret = false;

      plugin <= new VST2Plugin;

      if(plugin.loadPlugin(_pathName, 0/*shellPlugin=scan*/))
      {

         plugin.open();
         // plugin.enableUIThread = true;

         plugin.setSampleRate(44100.0f);
         // plugin.setSampleRate(48000.0f);
         plugin.setBlockSize(BLK_SIZE);

         trace "[...]          vendorString=\"" +plugin.vendorString+"\".";
         trace "[...]         vendorVersion="   +plugin.vendorVersion;
         trace "[...]         productString=\"" +plugin.productString+"\".";
         trace "[...]            effectName=\"" +plugin.effectName+"\".";
         trace "[...]               version="   +plugin.version;
         Integer io; io=plugin.uniqueID;
         trace "[...]              uniqueID="   +io.printf("0x%08x");
         trace "[...]                 flags="   +plugin.flags;
         trace "[...]               isSynth="   +plugin.isSynth();
         trace "[...]             hasEditor="   +plugin.hasEditor();
         trace "[...]          canReplacing="   +plugin.canReplacing();
         trace "[...]     programsAreChunks="   +plugin.programsAreChunks();
         trace "[...]         noSoundInStop="   +plugin.noSoundInStop();
         trace "[...]  numMidiInputChannels="   +plugin.numMidiInputChannels;
         trace "[...] numMidiOutputChannels="   +plugin.numMidiOutputChannels;

         // Show input properties
         trace "[...]           numInputs="+plugin.numInputs;
         int inIdx = 0;
         loop(plugin.numInputs)
         {
            VST2PinProperties inProps <= plugin.getInputProperties(inIdx);

            if(null != inProps)
            {
               trace "[...]             ["+inIdx+"]:           label=\""+inProps.label+"\".";
               trace "[...]             ["+inIdx+"]:      shortLabel=\""+inProps.shortLabel+"\".";
               trace "[...]             ["+inIdx+"]: arrangementType="  +inProps.arrangementType;
               trace "[...]             ["+inIdx+"]:           flags="  +inProps.flags;
               trace "[...]             ["+inIdx+"]:        isActive="  +inProps.isActive();
               trace "[...]             ["+inIdx+"]:        isStereo="  +inProps.isStereo();
               trace "[...]             ["+inIdx+"]:      useSpeaker="  +inProps.useSpeaker();
               trace " ";
            }
            else
            {
               trace "[...]             ["+inIdx+"]: <plugin error>";
            }

            // plugin.setExtInputBuffer(ioIdx, input_bufs.get(inIdx));

            // Next input
            inIdx++;
         }

         // Show output properties
         trace "[...]          numOutputs="+plugin.numOutputs;
         int outIdx = 0;
         loop(plugin.numOutputs)
         {
            VST2PinProperties outProps <= plugin.getOutputProperties(outIdx);

            if(null != outProps)
            {
               trace "[...]             ["+outIdx+"]:           label=\""+outProps.label+"\".";
               trace "[...]             ["+outIdx+"]:      shortLabel=\""+outProps.shortLabel+"\".";
               trace "[...]             ["+outIdx+"]: arrangementType="  +outProps.arrangementType;
               trace "[...]             ["+outIdx+"]:           flags="  +outProps.flags;
               trace "[...]             ["+outIdx+"]:        isActive="  +outProps.isActive();
               trace "[...]             ["+outIdx+"]:        isStereo="  +outProps.isStereo();
               trace "[...]             ["+outIdx+"]:      useSpeaker="  +outProps.useSpeaker();
               trace " ";
            }
            else
            {
               trace "[...]             ["+outIdx+"]: <plugin error>";
            }

            // plugin.setExtOutputBuffer(ioIdx, output_bufs.get(outIdx));

            // Next output
            outIdx++;
         }

         // Programs
         trace "[...]         numPrograms="+plugin.numPrograms;
         plugin.setProgram(0);
         trace "[...]     program[0].name="+plugin.getProgramName();

         // Show parameter names and values
         trace "[...]       numParameters="+plugin.numParameters;
         local PointerArray pa;
         int paramIdx = 0;
         loop(plugin.numParameters)
         {
            local String paramName <= plugin.getParameterName(paramIdx);
            float paramVal = plugin.getParameter(paramIdx);
            pa.add(#((deref paramName) + " ("+paramVal+")"));

            local VST2ParameterProperties paramProps <= plugin.getParameterProperties(paramIdx);
            if(null != paramProps)
            {
               trace "[...]             ["+paramIdx+"]:                   label=\""+paramProps.label+"\".";
               trace "[...]             ["+paramIdx+"]:              shortLabel=\""+paramProps.shortLabel+"\".";
               trace "[...]             ["+paramIdx+"]:                   flags="  +paramProps.flags;
               trace "[...]             ["+paramIdx+"]:                 canRamp="  +paramProps.canRamp();
               trace "[...]             ["+paramIdx+"]:                isSwitch="  +paramProps.isSwitch();
               if(!paramProps.isSwitch())
               {
                  trace "[...]             ["+paramIdx+"]:       usesIntegerMinMax="  +paramProps.usesIntegerMinMax();
                  if(paramProps.usesIntegerMinMax())
                  {
                     trace "[...]             ["+paramIdx+"]:              minInteger="  +paramProps.getMinInteger();
                     trace "[...]             ["+paramIdx+"]:              maxInteger="  +paramProps.getMaxInteger();
                  }
                  trace "[...]             ["+paramIdx+"]:           usesFloatStep="  +paramProps.usesFloatStep();
                  if(paramProps.usesFloatStep())
                  {
                     trace "[...]             ["+paramIdx+"]:               stepFloat="  +paramProps.getStepFloat();
                     trace "[...]             ["+paramIdx+"]:          smallStepFloat="  +paramProps.getSmallStepFloat();
                     trace "[...]             ["+paramIdx+"]:          largeStepFloat="  +paramProps.getLargeStepFloat();
                  }
                  trace "[...]             ["+paramIdx+"]:             usesIntStep="  +paramProps.usesIntStep();
                  if(paramProps.usesIntStep())
                  {
                     trace "[...]             ["+paramIdx+"]:             stepInteger="  +paramProps.getStepInteger();
                     trace "[...]             ["+paramIdx+"]:        largeStepInteger="  +paramProps.getLargeStepInteger();
                  }
               }
               trace "[...]             ["+paramIdx+"]:    supportsDisplayIndex="  +paramProps.supportsDisplayIndex();
               if(paramProps.supportsDisplayIndex())
               {
                  trace "[...]             ["+paramIdx+"]:            displayIndex="  +paramProps.getDisplayIndex();
               }
               trace "[...]             ["+paramIdx+"]: supportsDisplayCategory="  +paramProps.supportsDisplayCategory();
               if(paramProps.supportsDisplayCategory())
               {
                  trace "[...]             ["+paramIdx+"]:                category="  +paramProps.getCategory();
                  trace "[...]             ["+paramIdx+"]: numParametersIncategory="  +paramProps.getNumParametersInCategory();
                  trace "[...]             ["+paramIdx+"]:           categoryLabel="  +paramProps.getCategoryLabel();
               }
               trace " ";
            }
      
            // Next param
            paramIdx++;
         }

         trace "[...]          paramNames="+pa;

         // Show can-dos
         trace "[...]               canDo="+
            ("\n\t\t         acceptIOChanges:"+plugin.canDo("acceptIOChanges"))     +
            ("\n\t\t         asyncProcessing:"+plugin.canDo("asyncProcessing"))     +
            ("\n\t\t                  bypass:"+plugin.canDo("bypass"))              +
            ("\n\t\t       closeFileSelector:"+plugin.canDo("closeFileSelector"))   +
            ("\n\t\t                editFile:"+plugin.canDo("editFile"))            +
            ("\n\t\t            getChunkFile:"+plugin.canDo("getChunkFile"))        +
            ("\n\t\t        midiProgramNames:"+plugin.canDo("midiProgramNames"))    +
            ("\n\t\t                 offline:"+plugin.canDo("offline"))             +
            ("\n\t\t        openFileSelector:"+plugin.canDo("openFileSelector"))    +
            ("\n\t\t        receiveVstEvents:"+plugin.canDo("receiveVstEvents"))    +
            ("\n\t\t     receiveVstMidiEvent:"+plugin.canDo("receiveVstMidiEvent")) + 
            ("\n\t\t      receiveVstTimeInfo:"+plugin.canDo("receiveVstTimeInfo"))  +
            ("\n\t\t reportConnectionChanges:"+plugin.canDo("reportConnectionChanges")) +
            ("\n\t\t           sendVstEvents:"+plugin.canDo("sendVstEvents"))       +
            ("\n\t\t        sendVstMidiEvent:"+plugin.canDo("sendVstMidiEvent"))    +
            ("\n\t\t              sizeWindow:"+plugin.canDo("sizeWindow"))          +
            ("\n\t\t              supplyIdle:"+plugin.canDo("supplyIdle"))          +
            ("\n\t\t            supportShell:"+plugin.canDo("supportShell"))        +
            "\n"
            ;
   

         // Activate
         plugin.resume();

         // Start processing
         plugin.startProcess();

         // Succeeded
         ret = true;
      }

      return ret;
   }

   // <method.png>
   public method unload() {

      // TKS.sleep(2000);
      plugin.closeEditor();
      //TKS.sleep(2000);
      
      // Stop processing
      plugin.stopProcess();

      // Suspend
      plugin.suspend();

      // Close
      plugin.close();

      plugin <= null;
   }

   // <method.png>
   public method echoProgram() {
      local Buffer buf;

      // Dump program
      buf.size = 0;
      plugin.getChunk(buf, true/*program*/);
      trace "[...]       program chunk: size="+buf.size;
   
      // Send program
      plugin.setChunk(buf, true/*program*/);
   }

   // <method.png>
   public method echoBank() {
      local Buffer buf;

      // Dump bank
      buf.size = 0;
      plugin.getChunk(buf, false/*bank*/);
      trace "[...]          bank chunk: size="+buf.size;

      // Send bank
      plugin.setChunk(buf, false/*bank*/);
   }

   // <method.png>
   public method processTest() {

      // Change program
      plugin.queueProgramChange(0, 0);

      // Trigger note
      plugin.queueNoteOn(0, 48, 127);

      // Pitchbend
      plugin.queuePitchbendf(0, 0.7f);

      ////plugin.eventTest();

      // Process queued events
      plugin.processEvents();

      // Process some samples
      trace "[...] processing "+BLK_SIZE+" frames..";
      loop(PROCESS_ITERATIONS)
      {
         plugin.processReplacing(BLK_SIZE, 0/*off*/);
      }
      trace "[...] ..done.";
   }

   // <method.png>
   public method showEditor() {
      plugin.showEditor();
   }

   // <method.png>
   public static EditorLoop() {

      VST2Plugin.SetEnableHideVSTEditorWhenClosed(false);  // actually close window instead of hiding it

      while(VST2Plugin.GetNumOpenWindows())
      {
         VST2Plugin.PumpEvents();
         VST2Plugin.HandleQueuedWindowResize();
         TKS.sleep(30);
      }
   }

   // <method.png>
   public method restorePatchDataEx(local VST2Plugin _plugin, 
                                    local Buffer     _patchData, 
                                    local int        _patchDatatype) : boolean {
      // (note) caller must call VST2.PushIgnoreAutomation() prior to this method
      local boolean r = false;

      // local boolean bIgnoreAutoOrig = VST2.PushIgnoreAutomation();

      // trace "xxx ENTER restorePatchDataEx: mod="+#(this);

      if(null != _plugin)
      {
         if(null != _patchData)
         {
            // // _plugin.suspend();
            // // _plugin.stopProcess();
            // // TKS.sleep(3000);
            switch(_patchDatatype)
            {
               default:
               {
                  Global.Error("ModVST2::restorePatchDataEx: unknown patchDatatype("+_patchDatatype+"). unable to restore patch data. uid="+_plugin.getUniqueID());
               }
               break;

               case PATCH_DATATYPE_NONE:
                  Global.Debug("ModVST2:restorePatchDataEx: type=NONE");
                  break;
            
               case PATCH_DATATYPE_BANKCHUNK:
                  Global.Debug("ModVST2::restorePatchDataEx: type=BANKCHUNK, size="+_patchData.size);
                  _plugin.setChunk(_patchData, false/*bank*/);
                  r = true;
                  break;
               
               case PATCH_DATATYPE_PROGRAMCHUNK:
                  Global.Debug("ModVST2::restorePatchData: type=PROGRAMCHUNK, size="+_patchData.size);
                  _plugin.setChunk(_patchData, true/*program*/);
                  r = true;
                  break;
               
               case PATCH_DATATYPE_PARAMETERS:
               {
                  Global.Debug("ModVST2::restorePatchData: type=PARAMETERS, size="+_patchData.size);

                  local int numParams = _plugin.getNumParameters();
                  local int numRestoreParams = _patchData.size / 4/*sizeof(sF32)*/;
                  if(numParams != numRestoreParams)
                  {
                     Global.Warning("ModVST2::restorePatchDataEx: numParams != numRestoreParams ("+numParams+" != "+numRestoreParams+")");
                  }
                  local int i;
                  for(i=0; i < numRestoreParams; i++)
                  {
                     local float paramVal = _patchData.peekF32(i*4);
                     // trace "xxx ModVST2::restorePatchDataEx: param["+i+"]="+paramVal;
                     _plugin.setParameter(i, paramVal);
                  }
                  r = true;
               }
               break;
            }
            // // _plugin.startProcess();
            // // _plugin.resume();
         }
         else
         {
            Global.Error("ModVST2::restorePatchDataEx: patchData is null.");
         }
      }
      else
      {
         Global.Error("ModVST2::restorePatchData: plugin is null.");
      }

      // VST2.PopIgnoreAutomation(bIgnoreAutoOrig);

      trace "[trc] LEAVE restorePatchDataEx: mod="+#(this);

      return r;
   }

   // <method.png>
   protected method restorePatchData() : boolean {
      // trace "xxx restorePatchData";
      return restorePatchDataEx(plugin, patch_data, patch_datatype);
   }

   // <load.png>
   public =replay= method loadFXStorePatch(String _pathName) : boolean {
      local File f;
      boolean r = false;

      if(null == plugin)
      {
         return false;
      }

      if(f.openLocal(_pathName, IOS_IN))
      {
         f.byteOrder = BIG_ENDIAN;

         int fsize = f.size;

         Integer chunkMagic = f.i32;
         if(0x43636e4b == chunkMagic) // 'CcnK'
         {
            int byteSize = f.i32;
            Global.Debug("ModVST2::loadFXStorePatch: byteSize="+byteSize);

            if(fsize != (byteSize + 8))
               trace "[~~~] ModVST2::loadFXStorePatch: fsize("+fsize+") != byteSize+8("+(byteSize+8)+")";

            Integer fxMagic = f.i32;
            Buffer b <= new Buffer;

            int patchDataType = PATCH_DATATYPE_NONE;

            if(0x4678436B == fxMagic) // 'FxCk'
            {
               patchDataType = PATCH_DATATYPE_PARAMETERS;
            }
            else if(0x46504368 == fxMagic) // 'FPCh'
            {
               patchDataType = PATCH_DATATYPE_PROGRAMCHUNK;
            }
            else if(0x46424368 == fxMagic) // 'FBCh'
            {
               patchDataType = PATCH_DATATYPE_BANKCHUNK;
            }

            if(PATCH_DATATYPE_NONE != patchDataType)
            {
               int version = f.i32;
               Integer fxID = f.i32;
               Global.Debug("ModVST2::loadFXStorePatch: type="+patchDataType+" version="+version+" fxID="+fxID.printf("0x%08x"));
               int fxVersion = f.i32;
               Global.Debug("ModVST2::loadFXStorePatch: fxVersion="+fxVersion);

               int numParams = 0;

               if(PATCH_DATATYPE_BANKCHUNK == patchDataType)
               {
                  int numPrograms = f.i32;
                  Global.Debug("ModVST2::loadFXStorePatch: numPrograms="+numPrograms);

                  f.seek(128, SEEK_CUR);  // skip currentProgram and future[124]
               }
               else
               {
                  numParams  = f.i32;
                  Global.Debug("ModVST2::loadFXStorePatch: numParams="+numParams);
                  String prgName;
                  prgName.alloc(28+1);
                  int prgNameIdx = 0;
                  loop(28)
                  {
                     prgName[prgNameIdx++] = f.i8;
                  }
                  prgName.fixLength();
                  Global.Debug("ModVST2::loadFXStorePatch: prgName=\""+prgName+"\"");
               }

               if(fxID == plugin.uniqueID)
               {
                  if(PATCH_DATATYPE_PARAMETERS == patchDataType)
                  {
                     // Float parameter array
                     if(numParams < 1000000)
                     {
                        b.size = 4 * numParams;
                        int paramIdx = 0;

                        loop(numParams)
                        {
                           b.pokeF32(paramIdx++*4, f.f32);
                        }

                        r = true;
                     }
                     else
                     {
                        trace "[---] ModVST2::loadFXStorePatch: suspicious numParams="+numParams+", aborting.";
                     }
                  }
                  else
                  {
                     // Opaque chunk
                     int opaqueSize = f.i32;

                     if(0 == opaqueSize)
                     {
                        // (note) Reason sets this to 0 => calculate it
                        if(PATCH_DATATYPE_BANKCHUNK == patchDataType)
                        {
                           opaqueSize = f.size - 160;
                        }
                        else
                        {
                           opaqueSize = f.size - 60;
                        }
                        Global.Debug("ModVST2::loadFXStorePatch: calc opaqueSize="+opaqueSize+" ("+(opaqueSize/1024.0f)+"k)");
                     }
                     else
                     {
                        Global.Debug("ModVST2::loadFXStorePatch: opaqueSize="+opaqueSize+" ("+(opaqueSize/1024.0f)+"k)");
                     }

                     if(opaqueSize < 100*1024*1024)
                     {
                        f.readBuffer(b, 0, opaqueSize, true/*bResize*/);
                        r = true;
                     }
                     else
                     {
                        trace "[---] ModVST2::loadFXStorePatch: suspicious opaqueSize="+opaqueSize+", aborting.";
                     }
                  }

                  if(r)
                  {
                     trace "[...] ModVST2::loadFXStorePatch: patch loaded from \""+_pathName+"\"";

                     patch_data <= deref b;
                     patch_datatype = patchDataType;

                     plugin.setProgramName(prgName);

                     restorePatchData();

                     // current_project.markAsModified();
                  }
               }
               else
               {
                  Integer pluginUID = plugin.uniqueID;
                  trace "[---] ModVST2::loadFXStorePatch: plugin id mismatch (have="+fxID.printf("0x%08x")+" expect="+pluginUID.printf("0x%08x")+")";
               }
            }
            else
            {
               trace "[---] ModVST2::loadFXStorePatch: fxMagic ("+fxMagic.printf("0x%08x")+") is neither FxCk, FPCh nor FBCh.";
            }
         }
         else
         {
            trace "[---] ModVST2::loadFXStorePatch: wrong chunkMagic (have="+chunkMagic.printf("0x%08x")+", expect=0x434b6e63)";
         }

         f.close();
      }
      else
      {
         trace "[---] ModVST2::loadFXStorePatch: failed to open \""+_pathName+"\" for reading.";
      }
      return r;
   }
}


function TestPlugin(String _pathName) {

   local ModVST2 mod;

   // Load+initialize plugin
   int msInit = milliSeconds();
   if(mod.loadPlugin(_pathName))
   {
      msInit = milliSeconds() - msInit;

      if(0x50435337 == mod.plugin.getUniqueID()) // OPS7 ?
      {
         mod.loadFXStorePatch("ops7_effsetchunk_test.fxb");  // first effSetChunk has no effect (plugin calls audioMasterAutomate (with a wrong/outdated parameter value??) during patch restore and host echos the parameter back to the plugin)
         // mod.loadFXStorePatch("ops7_effsetchunk_test.fxb");  // second one works (=> workaround)
      }

      // mod.echoProgram();
      // mod.echoBank();

      // Process some audio
      int msProcess = milliSeconds();
      mod.processTest();
      msProcess = milliSeconds() - msProcess;

      // Show editor window
      int msEditor = milliSeconds();
      mod.showEditor();
      msEditor = milliSeconds() - msEditor;

      // Editor loop (until window is closed)
      ModVST2.EditorLoop();

      // Close plugin
      int msExit = milliSeconds();
      mod.unload();
      msExit = milliSeconds() - msExit;

      trace "[dbg]    msInit: "+msInit;
      trace "[dbg] msProcess: "+msProcess;
      trace "[dbg]  msEditor: "+msEditor;
      trace "[dbg]    msExit: "+msExit;
   }
   else
   {
      trace "[---] failed to open plugin";
   }
}


// Test all plugins
//int i = 0;
//int i = plugin_list.numElements-2;
//int i = 95; //NI Kore, UI repaints and about dialog works but controls are not responding
//int i = 206; // KR-Micro_Reverb, crashes in effClose
//int i = 225; // LFX-1310. Shows dialog "LFX-130.con\nfile can't be accessed" when effect is closed (note: file really does not exist. permission problem?)

int i = 412; // OPS7. first effSetChunk has no effect (v1.006)

if(Arguments.numElements >= 1)
   i = Arguments[0];


//loop(plugin_list.numElements)
{
   TestPlugin(plugin_list[i]);

   // next plugin
   i++;
}

trace "exiting.";
