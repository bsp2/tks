// ----
// ---- file   : ShaderVG_LineStripFlat14_2.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : Distributed under terms of the MIT license (https://opensource.org/licenses/MIT)
// ----          Copyright 2025 by bsp
// ----
// ----          Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// ----          associated documentation files (the "Software"), to deal in the Software without restriction, including
// ----          without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// ----          copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to
// ----          the following conditions:
// ----
// ----          The above copyright notice and this permission notice shall be included in all copies or substantial
// ----          portions of the Software.
// ----
// ----          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// ----          NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// ----          IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// ----          WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// ----          SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ----
// ---- info   : ShaderVG render utilities
// ----
// ----
// ----

module MShaderVG_LineStripFlat14_2;

namespace shadervg;


class LineStripFlat14_2 : Shape {

   public method init() {
      Shape::init();
   }

   // ------------ vertex shader --------------
   static String vs_src =
      "uniform mat4  u_transform; \n"
      "uniform float u_stroke_w; \n"
      " \n"
      "ATTRIBUTE vec2  a_vertex; \n"
      "ATTRIBUTE vec2  a_vertex_n; \n"
      "ATTRIBUTE float a_index; \n"
      " \n"
      "void main(void) { \n"
      "  vec2 v1 = a_vertex * 0.25; \n"
      "  vec2 v2 = a_vertex_n * 0.25; \n"
      "  vec2 vD = normalize(v2 - v1) * u_stroke_w; \n"
      "  vec2 v1L = vec2(v1.x + vD.y, v1.y - vD.x); \n"
      "  vec2 v2L = vec2(v2.x + vD.y, v2.y - vD.x); \n"
      "  vec2 v1R = vec2(v1.x - vD.y, v1.y + vD.x); \n"
      "  vec2 v2R = vec2(v2.x - vD.y, v2.y + vD.x); \n"
      "  vec2 v; \n"
      " \n"
      "  if(a_index > 4.9) { \n"
      "    v = v1R; \n"
      "  } \n"
      "  else if(a_index > 3.9) { \n"
      "    v = v2R; \n"
      "  } \n"
      "  else if(a_index > 2.9) { \n"
      "    v = v1L; \n"
      "  } \n"
      "  else if(a_index > 1.9) { \n"
      "    v = v2R; \n"
      "  } \n"
      "  else if(a_index > 0.9) { \n"
      "    v = v2L; \n"
      "  } \n"
      "  else { \n"
      "    v = v1L; \n"
      "  } \n"
      " \n"
      "  gl_Position = u_transform * vec4(v,0,1); \n"
      "} \n"
      ;

   // ------------ fragment shader ------------
   static String fs_src =
      "uniform vec4 u_color_stroke; \n"
      " \n"
      "void main(void) { \n"
      "  FRAGCOLOR = u_color_stroke; \n"
      "} \n"
      ;

   protected virtual validateShapeShader() : boolean {
      return
            (-1 != shape_a_vertex)
         && (-1 != shape_a_vertex_n)
         && (-1 != shape_a_index)
         && (-1 != shape_u_transform)
         && (-1 != shape_u_color_stroke)
         && (-1 != shape_u_stroke_w)
         ;
   }

   public virtual onOpen() : boolean {
      if(createShapeShader(vs_src, fs_src))
      {
         return true;
      }
      return false;
   }

   public method drawLineStripFlatVBO14_2(int      _vboId,
                                          int      _byteOffset,
                                          int      _numPoints,
                                          Matrix4f _projMatrix,
                                          float    _strokeR, float _strokeG, float _strokeB, float _strokeA,
                                          float    _strokeW
                                          ) {
      // VBO vertex format (6 bytes per vertex):
      //   +0 s14.2 x
      //   +2 s14.2 y
      //   +4 i16   index
      //
      // (note) numVerts         = (numPoints * 6)
      // (note) numSeg           = (numPoints - 1)
      // (note) numTri           = (numPoints - 1) * 6
      // (note) numBytesPerPoint = 6*6 = 36
      //

      ShaderVG.BindVBO(_vboId);

      shape_shader.bind();

      glUniformMatrix4fv(shape_u_transform, 1/*count*/, GL_TRUE/*transpose*/, _projMatrix);
      glUniform4f(shape_u_color_stroke, _strokeR, _strokeG, _strokeB, _strokeA);
      glUniform1f(shape_u_stroke_w, _strokeW);

      zglVertexAttribOffset(shape_a_vertex,   2/*size*/, GL_SHORT,          GL_FALSE/*normalize*/, 6/*stride*/, _byteOffset +  0);
      zglVertexAttribOffset(shape_a_vertex_n, 2/*size*/, GL_SHORT,          GL_FALSE/*normalize*/, 6/*stride*/, _byteOffset + 36);
      zglVertexAttribOffset(shape_a_index,    1/*size*/, GL_UNSIGNED_SHORT, GL_FALSE/*normalize*/, 6/*stride*/, _byteOffset +  4);

      glEnableVertexAttribArray(shape_a_vertex);
      glEnableVertexAttribArray(shape_a_vertex_n);
      glEnableVertexAttribArray(shape_a_index);

      glDrawArrays(GL_TRIANGLES, 0, (_numPoints - 1) * 6);

      glDisableVertexAttribArray(shape_a_vertex_n);
      glDisableVertexAttribArray(shape_a_vertex);
      glDisableVertexAttribArray(shape_a_index);
   }

}
