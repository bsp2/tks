// ----
// ---- file   : ShaderVG_TrianglesFillGouraud14_2.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : Distributed under terms of the MIT license (https://opensource.org/licenses/MIT)
// ----          Copyright 2025 by bsp
// ----
// ----          Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// ----          associated documentation files (the "Software"), to deal in the Software without restriction, including
// ----          without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// ----          copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to
// ----          the following conditions:
// ----
// ----          The above copyright notice and this permission notice shall be included in all copies or substantial
// ----          portions of the Software.
// ----
// ----          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// ----          NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// ----          IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// ----          WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// ----          SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ----
// ---- info   : ShaderVG render utilities
// ----
// ----
// ----

module MShaderVG_TrianglesFillGouraud14_2;

namespace shadervg;


class TrianglesFillGouraud14_2 : Shape {

   public method init() {
      Shape::init();
   }

   // ------------ vertex shader --------------
   static String vs_src =
      "uniform mat4 u_transform; \n"
      " \n"
      "ATTRIBUTE vec2 a_vertex; \n"
      "ATTRIBUTE vec4 a_color; \n"
      " \n"
      "VARYING_OUT vec4 v_color; \n"
      " \n"
      "void main(void) { \n"
      "  v_color = a_color; \n"
      "  gl_Position = u_transform * vec4(a_vertex*0.25,0,1); \n"
      "} \n"
      ;

   // ------------ fragment shader ------------
   static String fs_src =
      "uniform float u_global_alpha; \n"
      " \n"
      "VARYING_IN vec4 v_color; \n"
      " \n"
      "void main(void) { \n"
      "  FRAGCOLOR = vec4(v_color.rgb, v_color.a * u_global_alpha); \n"
      "} \n"
      ;

   protected virtual validateShapeShader() : boolean {
      return
         (-1 != shape_a_vertex)       &&
         (-1 != shape_a_color)        &&
         (-1 != shape_u_transform)    &&
         (-1 != shape_u_global_alpha)
         ;
   }

   public virtual onOpen() : boolean {
      if(createShapeShader(vs_src, fs_src))
      {
         return true;
      }
      return false;
   }

   public method drawTrianglesFillGouraudVBO14_2(int      _vboId,
                                                 int      _byteOffset,
                                                 int      _numTris,
                                                 Matrix4f _projMatrix,
                                                 float    _alpha
                                                 ) {
      // VBO vertex format (8 bytes per vertex):
      //   +0 s14.2 x
      //   +2 s14.2 y
      //   +4 u8    r
      //   +5 u8    g
      //   +6 u8    b
      //   +7 u8    a

      ShaderVG.BindVBO(_vboId);

      shape_shader.bind();

      glUniformMatrix4fv(shape_u_transform, 1/*count*/, GL_TRUE/*transpose*/, _projMatrix);
      glUniform1f(shape_u_global_alpha, _alpha);

      zglVertexAttribOffset(shape_a_vertex, 2/*size*/, GL_SHORT,         GL_FALSE/*normalize*/, 8/*stride*/, _byteOffset + 0);
      zglVertexAttribOffset(shape_a_color,  4/*size*/, GL_UNSIGNED_BYTE, GL_TRUE/*normalize*/,  8/*stride*/, _byteOffset + 4);

      glEnableVertexAttribArray(shape_a_vertex);
      glEnableVertexAttribArray(shape_a_color);

      glDrawArrays(GL_TRIANGLES, 0, _numTris * 3);

      glDisableVertexAttribArray(shape_a_color);
      glDisableVertexAttribArray(shape_a_vertex);
   }

}
