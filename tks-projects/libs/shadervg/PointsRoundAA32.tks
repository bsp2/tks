// ----
// ---- file   : ShaderVG_PointsRoundAA.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : Distributed under terms of the MIT license (https://opensource.org/licenses/MIT)
// ----          Copyright 2025 by bsp
// ----
// ----          Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// ----          associated documentation files (the "Software"), to deal in the Software without restriction, including
// ----          without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// ----          copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to
// ----          the following conditions:
// ----
// ----          The above copyright notice and this permission notice shall be included in all copies or substantial
// ----          portions of the Software.
// ----
// ----          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// ----          NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// ----          IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// ----          WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// ----          SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ----
// ---- info   : ShaderVG render utilities
// ----
// ----
// ----

module MShaderVG_PointsRoundAA32;

namespace shadervg;


class PointsRoundAA32 : Shape {

   public method init() {
      Shape::init();
   }

   // ------------ vertex shader --------------
   static String vs_src =
      "uniform mat4  u_transform; \n"
      "uniform float u_point_radius; \n"
      " \n"
      "ATTRIBUTE vec2  a_vertex; \n"
      "ATTRIBUTE float a_index; \n"
      " \n"
      "VARYING_OUT vec2 v_vertex_mp; \n"
      " \n"
      "void main(void) { \n"
      "  vec2 vCtr = a_vertex; \n"
      "  vec2 v; \n"
      " \n"
      "  if(a_index > 5.9) { \n"
      "    v = vec2(0,0); \n"
      "  } \n"
      "  else if(a_index > 4.9) { \n"
      "    v = vec2(vCtr.x - u_point_radius, vCtr.y + u_point_radius); \n"  // LB
      "  } \n"
      "  else if(a_index > 3.9) { \n"
      "    v = vCtr + vec2(u_point_radius, u_point_radius); \n"  // RB
      "  } \n"
      "  else if(a_index > 2.9) { \n"
      "    v = vCtr - vec2(u_point_radius, u_point_radius); \n"  // LT
      "  } \n"
      "  else if(a_index > 1.9) { \n"
      "    v = vCtr + vec2(u_point_radius, u_point_radius); \n"  // RB
      "  } \n"
      "  else if(a_index > 0.9) { \n"
      "    v = vec2(vCtr.x + u_point_radius, vCtr.y - u_point_radius); \n"  // RT
      "  } \n"
      "  else { \n"
      "    v = vCtr - vec2(u_point_radius, u_point_radius); \n"  // LT
      "  } \n"
      " \n"
      "  gl_Position = u_transform * vec4(v,0,1); \n"
      "  v_vertex_mp = v - vCtr; \n"
      "} \n"
      ;

   // ------------ fragment shader ------------
   static String fs_src =
      "uniform vec4  u_color_stroke; \n"
      "uniform float u_point_radius; \n"
      "uniform float u_aa_range; \n"
      "uniform float u_debug; \n"
      " \n"
      "VARYING_IN vec2 v_vertex_mp; \n"
      " \n"
      "void main(void) { \n"
      "  vec2 vd = abs(v_vertex_mp); \n"
      "  float d = length(vd); \n"
      // aa
      "  float a = 1.0 - smoothstep(u_point_radius - u_aa_range, u_point_radius, d); \n"
      "  FRAGCOLOR = vec4(u_color_stroke.rgb, u_color_stroke.a * a); \n"
      "  if(u_debug > 0.0) { \n"
      "    FRAGCOLOR = vec4(1.0, a, a, 1.0); \n"
      "  } \n"
      "} \n"
      ;

   protected virtual validateShapeShader() : boolean {
      return
            (-1 != shape_a_vertex)
         && (-1 != shape_a_index)
         && (-1 != shape_u_transform)
         && (-1 != shape_u_color_stroke)
         && (-1 != shape_u_point_radius)
         && (-1 != shape_u_aa_range)
         ;
   }

   public virtual onOpen() : boolean {
      if(createShapeShader(vs_src, fs_src))
      {
         return true;
      }
      return false;
   }

   public method drawPointsRoundAAVBO32(int      _vboId,
                                        int      _byteOffset,
                                        int      _numPoints,
                                        Matrix4f _projMatrix,
                                        float    _strokeR, float _strokeG, float _strokeB, float _strokeA,
                                        float    _pointRadius,
                                        float    _aaRange
                                        ) {
      //
      // VBO vertex format (10 bytes per vertex):
      //   +0 f32 x
      //   +4 f32 y
      //   +8 i16   index (0..5)
      //
      // (note) numVerts          = (numPoints * 6)
      // (note) numTri            = numPoints * 4
      // (note) numBytesPerPoint  = 6*10 = 60
      //

      // trace "xxx drawPointsRoundAAVBO32: pointRadius="+_pointRadius+" b_debug="+b_debug+" aa_range="+_aaRange;

      ShaderVG.BindVBO(_vboId);

      shape_shader.bind();

      glUniformMatrix4fv(shape_u_transform, 1/*count*/, GL_TRUE/*transpose*/, _projMatrix);
      glUniform4f(shape_u_color_stroke, _strokeR, _strokeG, _strokeB, _strokeA);
      glUniform1f(shape_u_point_radius, _pointRadius);
      glUniform1f(shape_u_aa_range, _aaRange);

      if(-1 != shape_u_debug)
         glUniform1f(shape_u_debug, b_debug ? 1.0f : 0.0f);

      zglVertexAttribOffset(shape_a_vertex,   2/*size*/, GL_FLOAT,          GL_FALSE/*normalize*/, 10/*stride*/, _byteOffset +  0);
      zglVertexAttribOffset(shape_a_index,    1/*size*/, GL_UNSIGNED_SHORT, GL_FALSE/*normalize*/, 10/*stride*/, _byteOffset +  8);

      glEnableVertexAttribArray(shape_a_vertex);
      glEnableVertexAttribArray(shape_a_index);

      glDrawArrays(GL_TRIANGLES, 0, _numPoints * 6);

      glDisableVertexAttribArray(shape_a_vertex);
      glDisableVertexAttribArray(shape_a_index);
   }

}
