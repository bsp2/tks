
# RIO - A simple remote procedure call/return protocol (MIME: rio/call, rio/return, rio/error)

Backus-Naur Notation for the RIO protocol:

message       ::= <call> | <return> | <error>
call          ::= <namespace> <procedure> <numargs> <args>
return        ::= return <arg> | <return> <procarray_ret>
error         ::= error <numargs> <args>
namespace     ::= <identifier>
procedure     ::= <identifier>
args          ::= <arg> | <arg> <args>
arg           ::= <std_arg> | <ext_arg>
argdecls      ::= <argdecl> | <argdecl> <argdecls>
argdecl       ::= <argname> <argtype> [notnull]
argname       ::= <identifier>
argtype       ::= <std> | <ext>
aval          ::= <std_aval> | <ext_aval>
std           ::= <boolean> | <integer> | <long> | <float> | <double> | <time> | <string> | <array>
std_arg       ::= <boolean_arg> | <integer_arg> | <long_arg> | <float_arg> | <double_arg> | <time_arg> | <string_arg> | <array_arg> 
std_aval      ::= <boolean_aval> | <integer_aval> | <long_aval> | <float_aval> | <double_aval> | <time_aval> | <string_aval> | <array_aval>
boolean       ::= b
boolean_arg   ::= <identifier> <boolean> <boolean_val>
boolean_val   ::= 0 | 1
boolean_aval  ::= <boolean_val> | <boolean_val> <boolean_aval>
integer       ::= i
integer_arg   ::= <identifier> <integer> <integer_val>
integer_val   ::= -0..2147483647..2147483647 
integer_aval  ::= <integer_val> | <integer_val> <integer_aval>
long          ::= l
long_arg      ::= <identifier> <long> <long_val>
long_val      ::= -9223372036854775807..9223372036854775807
long_aval     ::= <long_val> | <long_val> <long_aval>
float         ::= f
float_arg     ::= <identifier> <float> <float_val>
float_val     ::= FLOAT_MIN..FLOAT_MAX
float_aval    ::= <float_val> | <float_val> <float_aval>
double        ::= d
double_arg    ::= <identifier> <double> <double_val>
double_val    ::= DOUBLE_MIN..DOUBLE_MAX
double_aval   ::= <double_val> | <double_val> <double_aval>
time          ::= t
time_arg      ::= <identifier> <time> <time_val>
time_val      ::= <monthday>-<monthname>-<year>-<hour>-<min>-<sec>-<nanoseconds>
time_aval     ::= <time_val> | <time_val> <time_aval>
string        ::= s
string_arg    ::= <identifier> <string_val> | <identifier> <string> <string_val>
string_val    ::= <identifier> | " <anychars> " | ' <anychars> '
string_aval   ::= <string_val> | <string_val> <string_aval>
array         ::= a<std> | <ext_array>
array_arg     ::= <identifier> <array> <array_val>
array_val     ::= <num> <aval>
array_aval    ::= <array_val> | <array_aval>
procarray_ret ::= <procarray> <num> <procs>
procarray     ::= ap
proc          ::= <procname> <numargs> <argdecls> : <argtype>
procs         ::= <proc> | <proc> <procs>
procname      ::= <identifier>
monthday      ::= Sun | Mon | Tue | Wed | Thu | Fri | Sat
year          ::= -9999..9999
hour          ::= 0..23
min           ::= 0..59
sec           ::= 0..59
nanoseconds   ::= 0000000..9999999
identifier    ::= <idchars>
numargs       ::= <num>
num           ::= 0..256
return        ::= return
idchars       ::= <idchar> | <idchar> <idchars>
anychars      ::= <anychar> | <anychar> <anychars>
anychar       ::= chr(1)..chr(255)
idchar        ::= A..Z | a..z | 0..9 | _ 

# the following extensions can be left out by more simple servers (they still need to be detected
# but the query parser may abort with an error as soon as it finds an unsupported argument token.
ext                ::= <ext_hash> | <ext_classtoken>
ext_array          ::= a<ext_hash> | a<ext_classidentifier>
ext_hash           ::= h
ext_classtoken     ::= <ext_classkeyword><ext_classidentifier>
ext_arg            ::= <ext_hash_arg> | <ext_class_arg>
ext_aval           ::= <ext_hash_aval> | <ext_class_aval>
ext_hash_arg       ::= <ext_hash> <ext_hash_val>
ext_hash_aval      ::= <ext_hash_val> | <ext_hash_val> <ext_hash_aval>
ext_hash_val       ::= <numentries> <args>
ext_class_arg      ::= <identifier> <ext_classidentifier> <ext_hash_val>
ext_classidentifier::= <ext_idchar_uc>[<identifier>]
ext_classkeyword   ::= (
ext_numentries     ::= <num>
ext_idchar_uc      ::= A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z 
