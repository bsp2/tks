// ----
// ---- file   : modcv_vca.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2021-2024 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : 
// ----
// ---- created: 26Mar2021
// ---- changed: 27Mar2021, 30Mar2021, 31Mar2021, 01Apr2021, 03Apr2021, 16Apr2021, 07May2021
// ----          28Dec2021, 21Feb2022, 12Oct2024
// ----
// ----
// ----

module MModularCVMod_VCA;

namespace modularcv;


class ModCV_VCA : Module {

   float scale_curve;  // -1..1 => log..lin..exp
   float scale_amt;    // -2..2
   float scale_off;    // -2..2
   float offset_amt;   // -2..2
   float offset_off;   // -1..1

   public virtual init() {
      Module::init();

      initModule("VCA"/*id*/,
                 "vca"/*header_id*/,
                 "VCA / Attenuator / Inverter"/*tooltip*/
                 );
      setModuleSize(4, 3);

      scale_curve = 0.0f;
      scale_amt   = 1.0;
      scale_off   = 0.0;

      offset_amt = 1.0;
      offset_off = 0.0;

      addInput("in",     "Input",  1.0, IO_ANY);
      addInput("scale",  "Scale",  1.0, IO_SCALE);
      addInput("offset", "Offset", 0.0, IO_OFF);

      addOutput("out", "y = in*(curve(inScale)*scale_const+scale_off) + inOffset*offset_amt+offset_off", IO_ANY);
   }

   public virtual copyFrom(ModCV_VCA _o) {
      scale_curve = _o.scale_curve;
      scale_amt   = _o.scale_amt;
      scale_off   = _o.scale_off;
      offset_amt  = _o.offset_amt;
      offset_off  = _o.offset_off;
   }

   public virtual initUI() {

      Module::initUI();

      ui::Dial *dl;

      // Input
      createPortWidget(0, false/*bOutput*/,
                       15, 32,
                       null/*captionOrNull*/
                       );

      // Scale
      createTinyDial(9, 54,
                     "scale_curve",
                     -1.0, 1.0, 0.0, scale_curve,
                     "c"
                     );

      createPortWidget(1, false/*bOutput*/,
                       9, 82,
                       "S"/*captionOrNull*/
                       );

      dl <= createTinyDial(22, 70,
                           "scale_amt",
                           -2.0, 2.0, 1.0, scale_amt,
                           "s"
                           );
      dl.setPrecision(4);
      dl.setResetValues([0.0f, 1.0f]);
      dl.setPresetOptions([-2,   -1.5,   -1,   -0.75,  -0.5,   -0.25,  -0.125, 0.0f, 0.125, 0.25,  0.5,   0.75,  1.0, 1.5,   2  ],
                          ["-2", "-1.5", "-1", "-3/4", "-1/2", "-1/4", "-1/8", "0",  "1/8", "1/4", "1/2", "3/4", "1", "1.5", "2"]
                          );
      dl.setResetValues([0.0f, 1.0]);
      dl.setStep(1.0f / 64);


      dl <= createTinyDial(22, 98,
                           "scale_off",
                           -1.0, 1.0, 0.0, scale_off,
                           "o"
                           );
      dl.setPrecision(4);
      dl.setResetValues([0.0f, 1.0f]);
      dl.setPresetOptions([-1,   -0.75,  -0.5,   -0.25,  -0.125, 0.0f, 0.125, 0.25,  0.5,   0.75,  1.0],
                          ["-1", "-3/4", "-1/2", "-1/4", "-1/8", "0",  "1/8", "1/4", "1/2", "3/4", "1"]
                          );
      dl.setResetValues([0.0f, 1.0]);
      dl.setStep(1.0f / 32);


      // Offset
      createPortWidget(2, false/*bOutput*/,
                       9, 142,
                       "O"/*captionOrNull*/
                       );

      dl <= createTinyDial(22, 130,
                           "offset_amt",
                           -2.0, 2.0, 1.0, offset_amt,
                           "s"
                           );
      dl.setPrecision(4);
      dl.setResetValues([0.0f, 1.0f]);
      dl.setPresetOptions([-2,   -1.5,   -1,   -0.75,  -0.5,   -0.25,  -0.125, 0.0f, 0.125, 0.25,  0.5,   0.75,  1.0, 1.5,   2  ],
                          ["-2", "-1.5", "-1", "-3/4", "-1/2", "-1/4", "-1/8", "0",  "1/8", "1/4", "1/2", "3/4", "1", "1.5", "2"]
                          );
      dl.setResetValues([0.0f, 1.0]);
      dl.setStep(1.0f / 64);

      dl <= createTinyDial(22, 158,
                           "offset_off",
                           -1.0, 1.0, 0.0, offset_off,
                           "o"
                           );
      dl.setPrecision(4);
      dl.setResetValues([0.0f, 1.0f]);
      dl.setPresetOptions([-1,   -0.75,  -0.5,   -0.25,  -0.125, 0.0f, 0.125, 0.25,  0.5,   0.75,  1.0],
                          ["-1", "-3/4", "-1/2", "-1/4", "-1/8", "0",  "1/8", "1/4", "1/2", "3/4", "1"]
                          );
      dl.setResetValues([0.0f, 1.0]);
      dl.setStep(1.0f / 32);

      // Output
      createPortWidget(0, true/*bOutput*/,
                       15, (RACK_MODULE_HEIGHT - 20),
                       null/*captionOrNull*/
                       );
   }

   public virtual setParamByName(String _name, float _value) {
      switch(_name)
      {
         case "scale_curve":
            scale_curve = _value;
            break;

         case "scale_amt":
            scale_amt = _value;
            break;

         case "scale_off":
            scale_off = _value;
            break;

         case "offset_amt":
            offset_amt = _value;
            break;

         case "offset_off":
            offset_off = _value;
            break;
      }
   }

   public virtual getParamByName(String _name) : float {
      switch(_name)
      {
         case "scale_curve":
            return scale_curve;

         case "scale_amt":
            return scale_amt;

         case "scale_off":
            return scale_off;

         case "offset_amt":
            return offset_amt;

         case "offset_off":
            return offset_off;
      }
   }

   public virtual getNormalizedParamNames() : Object {
      return ["scale curve", "scale amt", "scale off", "offset amt", "offset off"
              ];
   }

   public virtual setNormalizedParamByIndexUI(int _paramIdx, float _value) {
      switch(_paramIdx)
      {
         case 0:
            scale_curve = FromNormalized(_value, -1, 1);
            updateParamWidget("scale_curve", scale_curve);
            break;

         case 1:
            scale_amt = FromNormalized(_value, -2, 2);
            updateParamWidget("scale_amt", scale_amt);
            break;

         case 2:
            scale_off = FromNormalized(_value, -1, 1);
            updateParamWidget("scale_off", scale_off);
            break;

         case 3:
            offset_amt = FromNormalized(_value, -2, 2);
            updateParamWidget("offset_amt", offset_amt);
            break;

         case 4:
            offset_off = FromNormalized(_value, -1, 1);
            updateParamWidget("offset_off", offset_off);
            break;
      }
   }

   public virtual getNormalizedParamByIndex(int _paramIdx) : float {
      switch(_paramIdx)
      {
         case 0:
            return ToNormalized(scale_curve, -1, 1);

         case 1:
            return ToNormalized(scale_amt, -2, 2);

         case 2:
            return ToNormalized(scale_off, -1, 1);

         case 3:
            return ToNormalized(offset_amt, -2, 2);

         case 4:
            return ToNormalized(offset_off, -1, 1);
      }
      return 0.0f;
   }

   public virtual saveState(Stream ofs) {
      Module::saveState(ofs);

      // ver
      ofs.i16 = 1;

      // params
      ofs.f32 = scale_curve;
      ofs.f32 = scale_amt;
      ofs.f32 = scale_off;
      ofs.f32 = offset_amt;
      ofs.f32 = offset_off;
   }

   public virtual loadState(Stream ifs) : boolean {
      if(Module::loadState(ifs))
      {
         short ver = ifs.u16;
         if(ver >= 1)
         {
            // params
            scale_curve = ifs.f32;
            scale_amt   = ifs.f32;
            scale_off   = ifs.f32;
            offset_amt  = ifs.f32;
            offset_off  = ifs.f32;

            return true;
         }
         else
         {
            trace "[---] ModCV_VCA::loadState: invalid ver="+ver;
         }
      }
      return false;
   }

   public virtual tick() {
      local float fIn  = inputs[0].getValue();
      local float fScl = inputs[1].getValue();
      local float fOff = inputs[2].getValue();

      // (note) fIn is normalled to 1.0
      out[0] = fIn * (mathLogLinExpf(fScl, scale_curve) * scale_amt + scale_off) + fOff * offset_amt + offset_off;
   }
}
