// ----
// ---- file   : modcv_mix4.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2021-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 03Dec2021
// ---- changed: 28Dec2021, 21Feb2022, 11Nov2023
// ----
// ----
// ----

module MModularCVMod_Mix4;

namespace modularcv;


class ModCV_Mix4 : Module {

   define float ATTENUATION_FACTOR = (1.0 / 10);

   float level1;
   float level2;
   float level3;
   float level4;

   boolean b_bipolar_1;
   boolean b_bipolar_2;
   boolean b_bipolar_3;
   boolean b_bipolar_4;

   boolean b_attenuate_1;
   boolean b_attenuate_2;
   boolean b_attenuate_3;
   boolean b_attenuate_4;

   IntArray output_connected;


   public virtual init() {
      Module::init();

      initModule("Mix4"/*id*/,
                 "mix4"/*header_id*/,
                 "Mix4\n\n (note) connecting a channel output removes the normalized connection to the \'mix\' output"/*tooltip*/
                 );
      setModuleSize(6, 3);

      level1 =  0.0;
      level2 =  0.0;
      level3 =  0.0;
      level4 =  0.0;

      b_bipolar_1 = true;
      b_bipolar_2 = true;
      b_bipolar_3 = true;
      b_bipolar_4 = true;

      addInput("in1", "Input 1", 1.0f, IO_ANY);
      addInput("in2", "Input 2", 1.0f, IO_ANY);
      addInput("in3", "Input 3", 1.0f, IO_ANY);
      addInput("in4", "Input 4", 1.0f, IO_ANY);
      addInput("amp1", "Input Level 1", 1.0f, IO_ANY);
      addInput("amp2", "Input Level 2", 1.0f, IO_ANY);
      addInput("amp3", "Input Level 3", 1.0f, IO_ANY);
      addInput("amp4", "Input Level 4", 1.0f, IO_ANY);

      addOutput("level1", "Level 1", IO_ANY);
      addOutput("level2", "Level 2", IO_ANY);
      addOutput("level3", "Level 3", IO_ANY);
      addOutput("level4", "Level 4", IO_ANY);
      addOutput("mix", "Mix", IO_ANY);

      output_connected.allocAndFill(5, false);
   }

   public virtual copyFrom(ModCV_Mix4 _o) {
      level1 = _o.level1;
      level2 = _o.level2;
      level3 = _o.level3;
      level4 = _o.level4;

      b_bipolar_1 = _o.b_bipolar_1;
      b_bipolar_2 = _o.b_bipolar_2;
      b_bipolar_3 = _o.b_bipolar_3;
      b_bipolar_4 = _o.b_bipolar_4;

      b_attenuate_1 = _o.b_attenuate_1;
      b_attenuate_2 = _o.b_attenuate_2;
      b_attenuate_3 = _o.b_attenuate_3;
      b_attenuate_4 = _o.b_attenuate_4;
   }

   public virtual initUI() {

      Module::initUI();

      float cx = 16;
      float cy = 32;
      float stepY = 42;
      float portOffX = 21;
      float portOffY = 8;
      float portAmpOffX = 2;
      float portAmpOffY = 18;
      float cbOff1X = 16;
      float cbOff1Y = -8;
      float cbOff2X = 25;
      float cbOff2Y = -8;
      float inOffX = -9;
      float inOffY = -8;
      float dialOffX = 2;
      float dialOffY = 4;
      RoundButton *rb;
      ui::Dial *dl;

      // Channel 1
      createPortWidget(0, false/*bOutput*/,
                       cx + inOffX,
                       cy + inOffY,
                       null/*captionOrNull*/
                       );
      dl <= createSmallDial(cx + dialOffX, cy + dialOffY,
                            "level1",
                            -1.0, 1.0, 0.0, level1,
                            null//"1"
                            );
      dl.setPrecision(4);
      dl.setResetValues([0.0f, 1.0f]);
      dl.setPresetOptions([-1,   -0.75,  -0.5,   -0.25,  -0.125, 0.0f, 0.125, 0.25,  0.5,   0.75,  1.0],
                          ["-1", "-3/4", "-1/2", "-1/4", "-1/8", "0",  "1/8", "1/4", "1/2", "3/4", "1"]
                          );
      dl.setResetValues([0.0f, 1.0]);
      dl.setStep(1.0f / 32);


      createPortWidget(4, false/*bOutput*/,
                       cx + portAmpOffX,
                       cy + portAmpOffY,
                       null/*captionOrNull*/
                       );
      rb <= createTinyCheckButton(cx + cbOff1X, cy + cbOff1Y,
                                  "bipolar_1",
                                  b_bipolar_1/*bChecked*/
                                  );
      rb.setToolTipCaption("Bipolar Switch\n\n (note) Unipolar level (0..1 instead of -1..1) when unchecked");
      rb <= createTinyCheckButton(cx + cbOff2X, cy + cbOff2Y,
                                  "attenuate_1",
                                  b_attenuate_1/*bChecked*/
                                  );
      rb.setToolTipCaption("1/10 Attenuation Switch");
      createPortWidget(0, true/*bOutput*/,
                       cx + portOffX,
                       cy + portOffY,
                       null/*captionOrNull*/
                       );

      // Channel 2
      cy += stepY;
      createPortWidget(1, false/*bOutput*/,
                       cx + inOffX,
                       cy + inOffY,
                       null/*captionOrNull*/
                       );
      dl <= createSmallDial(cx + dialOffX, cy + dialOffY,
                            "level2",
                            -1.0, 1.0, 0.0, level2,
                            null//"2"
                            );
      dl.setPrecision(4);
      dl.setResetValues([0.0f, 1.0f]);
      dl.setPresetOptions([-1,   -0.75,  -0.5,   -0.25,  -0.125, 0.0f, 0.125, 0.25,  0.5,   0.75,  1.0],
                          ["-1", "-3/4", "-1/2", "-1/4", "-1/8", "0",  "1/8", "1/4", "1/2", "3/4", "1"]
                          );
      dl.setResetValues([0.0f, 1.0]);
      dl.setStep(1.0f / 32);

      createPortWidget(5, false/*bOutput*/,
                       cx + portAmpOffX,
                       cy + portAmpOffY,
                       null/*captionOrNull*/
                       );
      rb <= createTinyCheckButton(cx + cbOff1X, cy + cbOff1Y,
                                  "bipolar_2",
                                  b_bipolar_2/*bChecked*/
                                  );
      rb.setToolTipCaption("Bipolar Switch\n\n (note) Unipolar level (0..1 instead of -1..1) when unchecked");
      rb <= createTinyCheckButton(cx + cbOff2X, cy + cbOff2Y,
                                  "attenuate_2",
                                  b_attenuate_2/*bChecked*/
                                  );
      rb.setToolTipCaption("1/10 Attenuation Switch");
      createPortWidget(1, true/*bOutput*/,
                       cx + portOffX,
                       cy + portOffY,
                       null/*captionOrNull*/
                       );

      // Channel 3
      cy += stepY;
      createPortWidget(2, false/*bOutput*/,
                       cx + inOffX,
                       cy + inOffY,
                       null/*captionOrNull*/
                       );
      dl <= createSmallDial(cx + dialOffX, cy + dialOffY,
                            "level3",
                            -1.0, 1.0, 0.0, level3,
                            null//"3"
                            );
      dl.setPrecision(4);
      dl.setResetValues([0.0f, 1.0f]);
      dl.setPresetOptions([-1,   -0.75,  -0.5,   -0.25,  -0.125, 0.0f, 0.125, 0.25,  0.5,   0.75,  1.0],
                          ["-1", "-3/4", "-1/2", "-1/4", "-1/8", "0",  "1/8", "1/4", "1/2", "3/4", "1"]
                          );
      dl.setResetValues([0.0f, 1.0]);
      dl.setStep(1.0f / 32);

      createPortWidget(6, false/*bOutput*/,
                       cx + portAmpOffX,
                       cy + portAmpOffY,
                       null/*captionOrNull*/
                       );
      rb <= createTinyCheckButton(cx + cbOff1X, cy + cbOff1Y,
                                  "bipolar_3",
                                  b_bipolar_3/*bChecked*/
                                  );
      rb.setToolTipCaption("Bipolar Switch\n\n (note) Unipolar level (0..1 instead of -1..1) when unchecked");
      rb <= createTinyCheckButton(cx + cbOff2X, cy + cbOff2Y,
                                  "attenuate_3",
                                  b_attenuate_3/*bChecked*/
                                  );
      rb.setToolTipCaption("1/10 Attenuation Switch");
      createPortWidget(2, true/*bOutput*/,
                       cx + portOffX,
                       cy + portOffY,
                       null/*captionOrNull*/
                       );

      // Channel 4
      cy += stepY;
      createPortWidget(3, false/*bOutput*/,
                       cx + inOffX,
                       cy + inOffY,
                       null/*captionOrNull*/
                       );
      dl <= createSmallDial(cx + dialOffX, cy + dialOffY,
                            "level4",
                            -1.0, 1.0, 0.0, level4,
                            null//"4"
                            );
      dl.setPrecision(4);
      dl.setResetValues([0.0f, 1.0f]);
      dl.setPresetOptions([-1,   -0.75,  -0.5,   -0.25,  -0.125, 0.0f, 0.125, 0.25,  0.5,   0.75,  1.0],
                          ["-1", "-3/4", "-1/2", "-1/4", "-1/8", "0",  "1/8", "1/4", "1/2", "3/4", "1"]
                          );
      dl.setResetValues([0.0f, 1.0]);
      dl.setStep(1.0f / 32);

      createPortWidget(7, false/*bOutput*/,
                       cx + portAmpOffX,
                       cy + portAmpOffY,
                       null/*captionOrNull*/
                       );
      rb <= createTinyCheckButton(cx + cbOff1X, cy + cbOff1Y,
                                  "bipolar_4",
                                  b_bipolar_4/*bChecked*/
                                  );
      rb.setToolTipCaption("Bipolar Switch\n\n (note) Unipolar level (0..1 instead of -1..1) when unchecked");
      rb <= createTinyCheckButton(cx + cbOff2X, cy + cbOff2Y,
                                  "attenuate_4",
                                  b_attenuate_4/*bChecked*/
                                  );
      rb.setToolTipCaption("1/10 Attenuation Switch");
      createPortWidget(3, true/*bOutput*/,
                       cx + portOffX,
                       cy + portOffY,
                       null/*captionOrNull*/
                       );

      createPortWidget(4, true/*bOutput*/,
                       24, (RACK_MODULE_HEIGHT - 20),
                       null/*captionOrNull*/
                       );
   }

   public virtual wantDefaultParamMessage(String _name) : boolean {
      return (_name <= "bipolar_");
   }

   public virtual setParamByName(String _name, float _value) {
      switch(_name)
      {
         case "level1":
            level1 = _value;
            Global.Print("Level #1 is "+((b_attenuate_1 ? ATTENUATION_FACTOR : 1.0f) * (b_bipolar_1 ? level1 : (level1 * 0.5f + 0.5f))));
            break;

         case "level2":
            level2 = _value;
            Global.Print("Level #2 is "+((b_attenuate_2 ? ATTENUATION_FACTOR : 1.0f) * (b_bipolar_2 ? level2 : (level2 * 0.5f + 0.5f))));
            break;

         case "level3":
            level3 = _value;
            Global.Print("Level #3 is "+((b_attenuate_3 ? ATTENUATION_FACTOR : 1.0f) * (b_bipolar_3 ? level3 : (level3 * 0.5f + 0.5f))));
            break;

         case "level4":
            level4 = _value;
            Global.Print("Level #4 is "+((b_attenuate_4 ? ATTENUATION_FACTOR : 1.0f) * (b_bipolar_4 ? level4 : (level4 * 0.5f + 0.5f))));
            break;

         case "bipolar_1":
            b_bipolar_1 = _value;
            break;

         case "bipolar_2":
            b_bipolar_2 = _value;
            break;

         case "bipolar_3":
            b_bipolar_3 = _value;
            break;

         case "bipolar_4":
            b_bipolar_4 = _value;
            break;

         case "attenuate_1":
            b_attenuate_1 = _value;
            break;

         case "attenuate_2":
            b_attenuate_2 = _value;
            break;

         case "attenuate_3":
            b_attenuate_3 = _value;
            break;

         case "attenuate_4":
            b_attenuate_4 = _value;
            break;
      }
   }

   public virtual getParamByName(String _name) : float {
      switch(_name)
      {
         case "level1":
            return level1;

         case "level2":
            return level2;

         case "level3":
            return level3;

         case "level4":
            return level4;

         case "bipolar_1":
            return b_bipolar_1;

         case "bipolar_2":
            return b_bipolar_2;

         case "bipolar_3":
            return b_bipolar_3;

         case "bipolar_4":
            return b_bipolar_4;

         case "attenuate_1":
            return b_attenuate_1;

         case "attenuate_2":
            return b_attenuate_2;

         case "attenuate_3":
            return b_attenuate_3;

         case "attenuate_4":
            return b_attenuate_4;
      }
   }

   public virtual getNormalizedParamNames() : Object {
      return ["level 1", "level 2", "level 3", "level 4"
              ];
   }

   public virtual setNormalizedParamByIndexUI(int _paramIdx, float _value) {
      switch(_paramIdx)
      {
         case 0:
            level1 = FromNormalized(_value, -1, 1);
            updateParamWidget("level1", level1);
            Global.Print("Level #1 is "+((b_attenuate_1 ? ATTENUATION_FACTOR : 1.0f) * (b_bipolar_1 ? level1 : (level1 * 0.5f + 0.5f))));
            break;

         case 1:
            level2 = FromNormalized(_value, -1, 1);
            updateParamWidget("level2", level2);
            Global.Print("Level #2 is "+((b_attenuate_2 ? ATTENUATION_FACTOR : 1.0f) * (b_bipolar_2 ? level2 : (level2 * 0.5f + 0.5f))));
            break;

         case 2:
            level3 = FromNormalized(_value, -1, 1);
            updateParamWidget("level3", level3);
            Global.Print("Level #3 is "+((b_attenuate_3 ? ATTENUATION_FACTOR : 1.0f) * (b_bipolar_3 ? level3 : (level3 * 0.5f + 0.5f))));
            break;

         case 3:
            level4 = FromNormalized(_value, -1, 1);
            updateParamWidget("level4", level4);
            Global.Print("Level #4 is "+((b_attenuate_4 ? ATTENUATION_FACTOR : 1.0f) * (b_bipolar_4 ? level4 : (level4 * 0.5f + 0.5f))));
            break;
      }
   }

   public virtual getNormalizedParamByIndex(int _paramIdx) : float {
      switch(_paramIdx)
      {
         case 0:
            return ToNormalized(level1, -1, 1);

         case 1:
            return ToNormalized(level2, -1, 1);

         case 2:
            return ToNormalized(level3, -1, 1);

         case 3:
            return ToNormalized(level4, -1, 1);
      }
      return 0.0f;
   }

   public virtual saveState(Stream ofs) {
      Module::saveState(ofs);

      // ver
      ofs.i16 = 1;

      // params
      ofs.f32 = level1;
      ofs.f32 = level2;
      ofs.f32 = level3;
      ofs.f32 = level4;

      // bipolar states
      ofs.i8 = b_bipolar_1;
      ofs.i8 = b_bipolar_2;
      ofs.i8 = b_bipolar_3;
      ofs.i8 = b_bipolar_4;

      // 1/10 attenuation
      ofs.i8 = b_attenuate_1;
      ofs.i8 = b_attenuate_2;
      ofs.i8 = b_attenuate_3;
      ofs.i8 = b_attenuate_4;
   }

   public virtual loadState(Stream ifs) : boolean {
      if(Module::loadState(ifs))
      {
         short ver = ifs.u16;
         if(ver >= 1)
         {
            // params
            level1 = ifs.f32;
            level2 = ifs.f32;
            level3 = ifs.f32;
            level4 = ifs.f32;

            // bipolar states
            b_bipolar_1 = ifs.b8;
            b_bipolar_2 = ifs.b8;
            b_bipolar_3 = ifs.b8;
            b_bipolar_4 = ifs.b8;

            // 1/10 attenuation
            b_attenuate_1 = ifs.b8;
            b_attenuate_2 = ifs.b8;
            b_attenuate_3 = ifs.b8;
            b_attenuate_4 = ifs.b8;

            return true;
         }
         else
         {
            trace "[---] ModCV_Mix4::loadState: invalid ver="+ver;
         }
      }
      return false;
   }

   public virtual handleOutputConnect(int _outputIdx) {
      // can be used by derived modules to break normalized connections (e.g. ModCV_Mix4)
      output_connected[_outputIdx] = true;
   }

   public virtual handleOutputDisconnect(int _outputIdx) {
      output_connected[_outputIdx] = false;
   }

   public virtual tick() {
      local float fIn1 = inputs[0].getValue();
      local float fIn2 = inputs[1].getValue();
      local float fIn3 = inputs[2].getValue();
      local float fIn4 = inputs[3].getValue();

      local float fAmp1 = inputs[4].getValue();
      local float fAmp2 = inputs[5].getValue();
      local float fAmp3 = inputs[6].getValue();
      local float fAmp4 = inputs[7].getValue();

      // trace "xxx output_connected="+#(output_connected);
      out[0] = (b_attenuate_1 ? ATTENUATION_FACTOR : 1.0) * (b_bipolar_1 ? level1 : (level1 * 0.5f + 0.5f)) * fIn1 * fAmp1;
      out[1] = (b_attenuate_2 ? ATTENUATION_FACTOR : 1.0) * (b_bipolar_2 ? level2 : (level2 * 0.5f + 0.5f)) * fIn2 * fAmp2;
      out[2] = (b_attenuate_3 ? ATTENUATION_FACTOR : 1.0) * (b_bipolar_3 ? level3 : (level3 * 0.5f + 0.5f)) * fIn3 * fAmp3;
      out[3] = (b_attenuate_4 ? ATTENUATION_FACTOR : 1.0) * (b_bipolar_4 ? level4 : (level4 * 0.5f + 0.5f)) * fIn4 * fAmp4;
      out[4] =
         (!output_connected[0] ? out[0] : 0.0f) +
         (!output_connected[1] ? out[1] : 0.0f) +
         (!output_connected[2] ? out[2] : 0.0f) +
         (!output_connected[3] ? out[3] : 0.0f) ;
   }
}
