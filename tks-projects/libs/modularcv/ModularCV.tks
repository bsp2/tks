// ----
// ---- file   : ModularCV.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2021-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 26Mar2021
// ---- changed: 27Mar2021, 29Mar2021, 30Mar2021, 01Apr2021, 12Apr2021, 16Apr2021, 19Apr2021
// ----          07May2021, 13Nov2021, 27Dec2021, 28Dec2021, 21Feb2022, 08Oct2023, 11Nov2023
// ----          29Mar2024, 18Sep2024, 08Oct2024, 09Oct2024
// ----
// ----
// ----

module MModularCV;

use namespace ui;
use namespace st2;
namespace modularcv;


// <class.png>
class ModularCV {
   // (note) Eurorack: 1HP=5.08mm, 3U=133.35mm, ratio=(133.35/5.08) = 26.25
   //         => 8px (w) * 26.25 = 210px (h)
   define int RACK_UNIT_WIDTH  = 8;   // num pixels (== 1 TE). see GetRackUnitWidth()
   define int RACK_UNIT_HEIGHT = 70;  // num pixels (== 8.75 TE) see GetRackUnitHeight()
   define int RACK_MODULE_HEIGHT = (RACK_UNIT_HEIGHT * 3);  // total module height in pixels (== 3U == 26.25 TE).  see GetRackModuleHeight()

   define int RACK_MODULE_HEADER_HEIGHT = 20;  // label + drag area. see GetRackModulerHeaderHeight()

   define float INVALID_VALUE = -999999.0f;

   define float TRIG_ON  = 0.8f;
   define float TRIG_OFF = 0.2f;

   // io port classes (used for auto-colorization)
   define int IO_ANY   = 0;
   define int IO_CV    = 1;  // note / freq
   define int IO_GATE  = 2;  // trigs and gates
   define int IO_CLOCK = 3;  //
   define int IO_SCALE = 4;  // e.g. VCA scale/amp input
   define int IO_OFF   = 5;  // e.g. VCA bias/offset input
   define int IO_LEVEL = 6;  // e.g. ADSR level
   define int IO_RATE  = 7;  // e.g. ADSR attack rate
   define int IO_DUR   = 8;  // gate duration

   static StringArray io_class_names = [
      "<any>",
      "CV",
      "GATE",
      "CLOCK",
      "SCALE",
      "OFF",
      "LEVEL",
      "RATE",
      "DUR"
                                        ];

   public static GetRackUnitWidth() : int {
      return RACK_UNIT_WIDTH * UI.font_scaling;
   }

   public static GetRackUnitHeight() : int {
      return RACK_UNIT_HEIGHT * UI.font_scaling;
   }

   public static GetRackModuleHeight() : int {
      return RACK_MODULE_HEIGHT * UI.font_scaling;
   }

   public static GetRackModuleHeaderHeight() : int {
      if(2.0 == UI.font_scaling)
         return RACK_MODULE_HEADER_HEIGHT * 1.8;
      return RACK_MODULE_HEADER_HEIGHT * UI.font_scaling;
   }
}
