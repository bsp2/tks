// ----
// ---- file   : modcv_spring.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2021-2022 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : 
// ----
// ---- created: 31Mar2021
// ---- changed: 03Apr2021, 16Apr2021, 07May2021, 28Dec2021, 21Feb2022
// ----
// ----
// ----

module MModularCVMod_Spring;

namespace modularcv;


class ModCV_Spring : Module {

   float speed_scl_offset;  // 0..1
   float speed_dcy_offset;  // 0..1
   float out_amp;           // -1..1

   float cur_val;
   float cur_speed;


   public virtual init() {
      Module::init();

      initModule("Spring"/*id*/,
                 "sprng"/*header_id*/,
                 "Spring"/*tooltip*/
                 );
      setModuleSize(4, 3);

      speed_scl_offset = 1.0;
      speed_dcy_offset = 0.0;
      out_amp          = 1.0f;

      cur_val = 0.0f;
      cur_speed = 0.0f;

      addInput("in",   "Input",       0.0, IO_ANY);
      addInput("scl",  "Speed Scale", 0.0, IO_SCALE);
      addInput("dcy",  "Speed Decay", 0.0, IO_ANY);

      addOutput("out", "Output", IO_ANY);
   }

   public virtual copyFrom(ModCV_Spring _o) {
      speed_scl_offset = _o.speed_scl_offset;
      speed_dcy_offset = _o.speed_dcy_offset;
      out_amp          = _o.out_amp;
   }

   public virtual initUI() {

      Module::initUI();

      // Input
      createPortWidget(0, false/*bOutput*/,
                       15, 32,
                       null/*captionOrNull*/
                       );

      float cy = 56;

      // Speed Scale
      createSmallDial(15, cy,
                      "speed_scl_offset",
                      -1.0, 1.0, 1.0, speed_scl_offset,
                      "spd"
                      );

      cy += 28;
      createPortWidget(1, false/*bOutput*/,
                       15, cy,
                       null/*captionOrNull*/
                       );


      // Speed Decay
      cy += 24;
      createSmallDial(15, cy,
                      "speed_dcy_offset",
                      -1.0, 1.0, 0.0, speed_dcy_offset,
                      "dcy"
                      );

      cy += 28;
      createPortWidget(2, false/*bOutput*/,
                       15, cy,
                       null/*captionOrNull*/
                       );

      // Output
      createSmallDial(15, (RACK_MODULE_HEIGHT - 50),
                      "out_amp",
                      -1.0, 1.0, 1.0, out_amp,
                      "out"
                      );

      createPortWidget(0, true/*bOutput*/,
                       15, (RACK_MODULE_HEIGHT - 20),
                       null/*captionOrNull*/
                       );
   }

   public virtual setParamByName(String _name, float _value) {
      switch(_name)
      {
         case "speed_scl_offset":
            speed_scl_offset = _value;
            break;

         case "speed_dcy_offset":
            speed_dcy_offset = _value;
            break;

         case "out_amp":
            out_amp = _value;
            break;
      }
   }

   public virtual getParamByName(String _name) : float {
      switch(_name)
      {
         case "speed_scl_offset":
            return speed_scl_offset;

         case "speed_dcy_offset":
            return speed_dcy_offset;

         case "out_amp":
            return out_amp;
      }
   }

   public virtual getNormalizedParamNames() : Object {
      return ["speed scl off", "speed dcy off", "out amp"
              ];
   }

   public virtual setNormalizedParamByIndexUI(int _paramIdx, float _value) {
      switch(_paramIdx)
      {
         case 0:
            speed_scl_offset = FromNormalized(_value, -1, 1);
            updateParamWidget("speed_scl_offset", speed_scl_offset);
            break;

         case 1:
            speed_dcy_offset = FromNormalized(_value, -1, 1);
            updateParamWidget("speed_dcy_offset", speed_dcy_offset);
            break;

         case 2:
            out_amp = FromNormalized(_value, -1, 1);
            updateParamWidget("out_amp", out_amp);
            break;
      }
   }

   public virtual getNormalizedParamByIndex(int _paramIdx) : float {
      switch(_paramIdx)
      {
         case 0:
            return ToNormalized(speed_scl_offset, -1, 1);

         case 1:
            return ToNormalized(speed_dcy_offset, -1, 1);

         case 2:
            return ToNormalized(out_amp, -1, 1);
      }
      return 0.0f;
   }

   public virtual saveState(Stream ofs) {
      Module::saveState(ofs);

      // ver
      ofs.i16 = 2;

      // params
      ofs.f32 = speed_scl_offset;
      ofs.f32 = speed_dcy_offset;
      ofs.f32 = out_amp; // v2+
   }

   public virtual loadState(Stream ifs) : boolean {
      if(Module::loadState(ifs))
      {
         short ver = ifs.u16;
         if(ver >= 1)
         {
            // params
            speed_scl_offset = ifs.f32;
            speed_dcy_offset = ifs.f32;

            if(ver >= 2)
            {
               out_amp = ifs.f32;
            }

            return true;
         }
         else
         {
            trace "[---] ModCV_Spring::loadState: invalid ver="+ver;
         }
      }
      return false;
   }

   public virtual tick() {
      local float fIn  = inputs[0].getValue();
      local float fScl = mathClampf(inputs[1].getValue() + speed_scl_offset, 0.0f, 1.0f);
      local float fDcy = mathClampf(inputs[2].getValue() + speed_dcy_offset, 0.0f, 1.0f);

      fScl *= fScl * fScl;
      fDcy = 1.0f - fDcy;
      fDcy *= fDcy * fDcy;
      fDcy = 1.0f - fDcy;

      float delta = fIn - cur_val;
      cur_speed += delta * fScl;
      cur_val += cur_speed;
      cur_speed *= fDcy;

      out[0] = cur_val * out_amp * out_amp * out_amp;
   }
}
