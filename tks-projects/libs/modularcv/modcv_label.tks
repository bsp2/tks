// ----
// ---- file   : modcv_label.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2021-2022 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : 
// ----
// ---- created: 14May2021
// ---- changed: 21Feb2022
// ----
// ----
// ----

module MModularCVMod_Label;

use namespace ui;
use namespace st2;
namespace modularcv;


class ModCV_Label : Module {

   String caption;

   protected Font *font;

   protected static StringDialog *dlg_caption;


   public virtual init() {
      Module::init();

      initModule("Label"/*id*/,
                 "nfo"/*header_id*/,
                 "Info Label"/*tooltip*/
                 );
      setModuleSize(3, 3);

   }

   public virtual copyFrom(ModCV_Label _o) {
      caption = _o.caption;
   }

   public virtual initUI() {
      Module::initUI();
   }

   public virtual saveState(Stream ofs) {
      Module::saveState(ofs);

      // ver
      ofs.i16 = 1;

      // params
      Utils.WriteString(ofs, caption);
   }

   public virtual loadState(Stream ifs) : boolean {
      if(Module::loadState(ifs))
      {
         short ver = ifs.u16;
         if(ver >= 1)
         {
            Utils.ReadString(ifs, caption);

            return true;
         }
         else
         {
            trace "[---] ModCV_Label::loadState: invalid ver="+ver;
         }
      }
      return false;
   }

   public virtual onMouseClick(MouseEvent _ev) : boolean {
      if(_ev.isLeftButton())
      {
         if(null == dlg_caption)
         {
            dlg_caption <= new StringDialog;
            dlg_caption.init(null/*fontName*/);
            dlg_caption.b_provide_edit = true;
         }
         dlg_caption.configure(caption, 50, 24, this);
         dlg_caption.showNearMouse(10, 10);
         return true;
      }
      return Module::onMouseClick(_ev);
   }

   public virtual onDraw() {
      Module::onDraw();

      glPushAttrib(GL_ALL_ATTRIBS_BITS);

      local Point2f abspos;
      calcAbsolutePositionFBO(abspos);
      float w = getSizeX();
      float h = getSizeY();

      UIRenderer.SetViewport(abspos.x, abspos.y, w, h);

      glMatrixMode(GL_PROJECTION);
      glPushMatrix();
      glLoadIdentity();
      zglInitOrtho(w*0.5, -h*0.5);

      glMatrixMode(GL_MODELVIEW);
      glPushMatrix();
      glLoadIdentity();
      glRotatef(-90.0f, 0,0,1);
      glTranslatef(-h*0.5, -w*0.5, 0);

      if(null == font)
      {
         font <= UI.GetFontByName("big7");//UIConstants.DEFAULT_FONT_NAME_LABEL_BOLD);
      }

      // trace "xxx draw caption=\""+caption+"\" font="+#(font);

      UIRenderer.DrawTextClipped(caption, font,
                                 #ff000000,
                                 #ff000000,
                                 13.0f, -2.0f,
                                 0.0f, 0.0f, h-20, w
                                 );

      glMatrixMode(GL_PROJECTION);
      glPopMatrix();
      
      glMatrixMode(GL_MODELVIEW);
      glPopMatrix();

      glPopAttrib();
      
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();
      StringAction *sac;

      switch(@(ap))
      {
         case @(dlg_caption):
            if(_ac instanceof StringAction)
            {
               sac <= _ac;
               caption = sac.getStringValue();
               redraw();
            }
            return true;
      }

      return Module::consumeAction(_ac);
   }

}
