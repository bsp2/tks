// ----
// ---- file   : modcv_ledmonitor.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2021 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 05Apr2021
// ---- changed: 16Apr2021, 07May2021, 21Feb2022
// ----
// ----
// ----

module MModularCVMod_LEDMonitor;

use namespace st2;
namespace modularcv;


class ModCV_LEDMonitor : ModCV_Output {


   public virtual init() {
      Module::init();

      initModule("LEDMonitor"/*id*/,
                 "mon"/*header_id*/,
                 "LED Monitor"/*tooltip*/
                 );
      setModuleSize(3, 3);

      int ledIdx = 0;
      loop(6)
      {
         addInput("i"+(ledIdx+1), "Input "+(ledIdx+1), 0.0, IO_ANY);
         ledIdx++;
      }
   }

   public virtual initUI() {

      Module::initUI();

      float cx = 11;
      float cy = 2;
      float stepY = 30;
      float portOffY = 10;

      int ledIdx = 0;
      loop(6)
      {
         cy += stepY;
         createPortWidget(ledIdx, false/*bOutput*/,
                          cx,
                          cy,
                          null/*captionOrNull*/
                          );
         createLED(cx, cy + portOffY);
         ledIdx++;
      }

   }

   public virtual saveState(Stream ofs) {
      Module::saveState(ofs);

      // ver
      ofs.i16 = 1;
   }

   public virtual loadState(Stream ifs) : boolean {
      if(Module::loadState(ifs))
      {
         short ver = ifs.u16;
         if(ver >= 1)
         {
            return true;
         }
         else
         {
            trace "[---] ModCV_LEDMonitor::loadState: invalid ver="+ver;
         }
      }
      return false;
   }

   public virtual tickOutput(MIDIPipeFrame _frOut) {
      local int ledIdx = 0;
      loop(6)
      {
         if(inputs[ledIdx].isConnected())
         {
            local float f = inputs[ledIdx].getValue();
            // if(0.0f != f)
            //    trace "xxx mon["+ledIdx+"] f="+f;
            incLEDDecay(ledIdx, mathClampf(f, -1.0f, 1.0f), 0.9f/*decay*/);
         }
         ledIdx++;
      }
   }

}
