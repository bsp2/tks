// ----
// ---- file   : LED.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2021-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 26Mar2021
// ---- changed: 27Mar2021, 29Mar2021, 30Mar2021, 01Apr2021, 12Apr2021, 16Apr2021, 19Apr2021
// ----          07May2021, 13Nov2021, 27Dec2021, 28Dec2021, 21Feb2022, 08Oct2023, 11Nov2023
// ----          29Mar2024, 18Sep2024, 08Oct2024, 09Oct2024
// ----
// ----
// ----

module MModularCVLED;

use namespace ui;
use namespace st2;
namespace modularcv;


// <class.png>
class LED : ui::Layer {
   int countdown;  // 0=inf
   float value;    // >0..1: green, <0..-1: red, 0=off
   float decay;

   public method initLED() {
      initLayer();
      countdown = 0;
      value = 0.0f;
      decay = 1.0f;
   }

   public method setConstValue(float _value) {
      value     = _value;
      countdown = 0;
      decay     = 1.0f;
   }

   public method setTimeoutValue(float _value, int _ticks) {
      value     = _value;
      countdown = _ticks;
      decay     = 1.0f;
   }

   public method incDecayValue(float _value, float _decay) {
      countdown = 0;
      if(_value < 0.0f)
      {
         value = mathClampf(abs(value) - _value, 0.0f, 1.0f);
         value = -value;
      }
      else
      {
         value = mathClampf(abs(value) + _value, 0.0f, 1.0f);
      }
      // if(_value != 0.0f)
      //    trace "xxx incDecayValue: cur="+value+" inc="+_value+" decay="+_decay;
      decay = _decay;
   }

   public method drawLED(float _px, float _py) {
      // called from ModularRack::onDrawOverlays()
      int c32;
      int c32Bg = #4f000000;
      if(value > 0.0)
         c32 = UI.MixColor32(c32Bg, #ff00ff00, value);
      else if(value < 0.0)
         c32 = UI.MixColor32(c32Bg, #ffff0000, -value);
      else
         c32 = c32Bg;

      // (note) translate by (parent) module position
      // Integer ioXXX = c32;
      // trace "xxx draw led p=("+(position_x+_px)+";"+(position_y+_py)+") c32="+ioXXX.printf("%08x");
      UIRenderer.DrawFilledRectangle(position_x + _px,
                                     position_y + _py,
                                     size_x, size_y,
                                     c32
                                     );

      value *= decay;

      if(countdown > 0)
      {
         if(0 == --countdown)
         {
            value = 0.0f;
         }
      }
   }
}
