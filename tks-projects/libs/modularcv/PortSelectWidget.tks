// ----
// ---- file   : PortSelectWidget.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 16Nov2024
// ---- changed:
// ----
// ----
// ----

module MModularCVPortSelectWidget;

use namespace ui;
use namespace st2;
namespace modularcv;


// <class.png>
class PortSelectWidget : ui::ComboBox {

   public method initPortSelectWidget(int _cur) {
      initComboBox();
      setArrowWidth(0);
      setRequiredSize2fScaled(19, 17);
      if(!app_lnf.b_dark_modular)
         setLookAndFeelLight();
      updatePortOptions(null/*node*/);
      setSelectedOption(_cur);
      setTextPlacement(Layout.CENTERX);
      setEnableCursorKeyTabCycling(false);
      // // setEnableCursorLeftRight(true);  // send ACTION_CURSOR* instead of propagating to parent (=> really disable tab cycling)
   }

   public method updatePortOptions(NodeModular _parentNodeOrNull) {
      local StringArray aOpt;
      local StringArray aOptLong;
      int nr = 1;
      loop(NodeModular.NUM_PORTS)
      {
         aOpt.add(String(nr));
         local String sLong <= "Port "+nr;
         if(null != _parentNodeOrNull)
         {
            sLong.append(": "+_parentNodeOrNull.getPortIdByIndex(nr - 1));

            CtlIOPort ioPort <= _parentNodeOrNull.getPortByIndex(nr - 1);
            if(null != ioPort)
            {
               STX_MIDIOutDevice outDev <= MIDI.GetMIDIOutDeviceByIndex(ioPort.dev_idx);
               if(null != outDev)
               {
                  sLong.append("\t"+outDev.getAliasOrDeviceName()+":"+(ioPort.dev_ch+1));
               }
            }
         }
         aOptLong.add(sLong);
         nr++;
      }
      setOptions(deref aOpt);
      setOptionsLong(deref aOptLong);
   }

   public method getSelectedPortIndex() : int {
      return getSelectedOption();
   }

}
