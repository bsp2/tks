// ----
// ---- file   : modcv_const.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2021-2022 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : 
// ----
// ---- created: 26Mar2021
// ---- changed: 27Mar2021, 29Mar2021, 03Apr2021, 12Apr2021, 16Apr2021, 07May2021, 13Nov2021
// ----          28Dec2021, 21Feb2022
// ----
// ----
// ----

module MModularCVMod_Const;

namespace modularcv;


class ModCV_Const : Module {
   float c1;
   float c2;
   float c3;
   float c4;

   boolean b_bipolar_1;
   boolean b_bipolar_2;
   boolean b_bipolar_3;
   boolean b_bipolar_4;

   public virtual init() {
      Module::init();

      initModule("Const"/*id*/,
                 "const"/*header_id*/,
                 "Const"/*tooltip*/
                 );
      setModuleSize(6, 3);

      c1 = -1.0;
      c2 = -0.5;
      c3 =  0.5;
      c4 =  1.0;

      b_bipolar_1 = true;
      b_bipolar_2 = true;
      b_bipolar_3 = true;
      b_bipolar_4 = true;

      addOutput("c1", "Constant 1", IO_ANY);
      addOutput("c2", "Constant 2", IO_ANY);
      addOutput("c3", "Constant 3", IO_ANY);
      addOutput("c4", "Constant 4", IO_ANY);
   }

   public virtual copyFrom(ModCV_Const _o) {
      c1 = _o.c1;
      c2 = _o.c2;
      c3 = _o.c3;
      c4 = _o.c4;

      b_bipolar_1 = _o.b_bipolar_1;
      b_bipolar_2 = _o.b_bipolar_2;
      b_bipolar_3 = _o.b_bipolar_3;
      b_bipolar_4 = _o.b_bipolar_4;
   }

   public virtual initUI() {

      Module::initUI();

      float cx = 16;
      float cy = 32;
      float stepY = 48;
      float portOffX = 21;
      float portOffY = 8;
      float cbOffX = 21;
      float cbOffY = -8;
      RoundButton *rb;
      ui::Dial *dl;

      dl <= createDial(cx, cy,
                       "c1",
                       -1.0, 1.0, 0.0, c1,
                       "a"
                       );
      dl.setPresetOptions([-1.0f, -2.0/3, -0.5f,  -1.0/3, -0.25,  0.0f, 0.25,  1.0/3, 0.5,   1.0f],
                          ["-1",  "-2/3", "-0.5", "-1/3", "-1/4", "0",  "1/4", "1/3", "1/2", "1",]
                          );
      
      rb <= createTinyCheckButton(cx + cbOffX, cy + cbOffY,
                                  "bipolar_1",
                                  b_bipolar_1/*bChecked*/
                                  );
      rb.setToolTipCaption("Bipolar Switch\n\n (note) Unipolar output (0..1 instead of -1..1) when unchecked");
      createPortWidget(0, true/*bOutput*/,
                       cx + portOffX,
                       cy + portOffY,
                       null/*captionOrNull*/
                       );
                       

      cy += stepY;
      dl <= createDial(cx, cy,
                       "c2",
                       -1.0, 1.0, 0.0, c2,
                       "b"
                       );
      dl.setPresetOptions([-1.0f, -2.0/3, -0.5f,  -1.0/3, -0.25,  0.0f, 0.25,  1.0/3, 0.5,   1.0f],
                          ["-1",  "-2/3", "-0.5", "-1/3", "-1/4", "0",  "1/4", "1/3", "1/2", "1",]
                          );

      rb <= createTinyCheckButton(cx + cbOffX, cy + cbOffY,
                                  "bipolar_2",
                                  b_bipolar_2/*bChecked*/
                                  );
      rb.setToolTipCaption("Bipolar Switch\n\n (note) Unipolar output (0..1 instead of -1..1) when unchecked");
      createPortWidget(1, true/*bOutput*/,
                       cx + portOffX,
                       cy + portOffY,
                       null/*captionOrNull*/
                       );

      cy += stepY;
      dl <= createDial(cx, cy,
                       "c3",
                       -1.0, 1.0, 0.0, c3,
                       "c"
                       );
      dl.setPresetOptions([-1.0f, -2.0/3, -0.5f,  -1.0/3, -0.25,  0.0f, 0.25,  1.0/3, 0.5,   1.0f],
                          ["-1",  "-2/3", "-0.5", "-1/3", "-1/4", "0",  "1/4", "1/3", "1/2", "1",]
                          );

      rb <= createTinyCheckButton(cx + cbOffX, cy + cbOffY,
                                  "bipolar_3",
                                  b_bipolar_3/*bChecked*/
                                  );
      rb.setToolTipCaption("Bipolar Switch\n\n (note) Unipolar output (0..1 instead of -1..1) when unchecked");
      createPortWidget(2, true/*bOutput*/,
                       cx + portOffX,
                       cy + portOffY,
                       null/*captionOrNull*/
                       );

      cy += stepY;
      dl <= createDial(cx, cy,
                       "c4",
                       -1.0, 1.0, 0.0, c4,
                       "d"
                       );
      dl.setPresetOptions([-1.0f, -2.0/3, -0.5f,  -1.0/3, -0.25,  0.0f, 0.25,  1.0/3, 0.5,   1.0f],
                          ["-1",  "-2/3", "-0.5", "-1/3", "-1/4", "0",  "1/4", "1/3", "1/2", "1",]
                          );

      rb <= createTinyCheckButton(cx + cbOffX, cy + cbOffY,
                                  "bipolar_4",
                                  b_bipolar_4/*bChecked*/
                                  );
      rb.setToolTipCaption("Bipolar Switch\n\n (note) Unipolar output (0..1 instead of -1..1) when unchecked");
      createPortWidget(3, true/*bOutput*/,
                       cx + portOffX,
                       cy + portOffY,
                       null/*captionOrNull*/
                       );
   }

   public virtual wantDefaultParamMessage(String _name) : boolean {
      return (_name <= "bipolar_");
   }

   public virtual setParamByName(String _name, float _value) {
      switch(_name)
      {
         case "c1":
            c1 = _value;
            Global.Print("Constant value #1 is "+c1+" => "+(b_bipolar_1 ? c1 : (c1 * 0.5f + 0.5f)));
            break;

         case "c2":
            c2 = _value;
            Global.Print("Constant value #2 is "+c2+" => "+(b_bipolar_2 ? c2 : (c2 * 0.5f + 0.5f)));
            break;

         case "c3":
            c3 = _value;
            Global.Print("Constant value #3 is "+c3+" => "+(b_bipolar_3 ? c3 : (c3 * 0.5f + 0.5f)));
            break;

         case "c4":
            c4 = _value;
            Global.Print("Constant value #4 is "+c4+" => "+(b_bipolar_4 ? c4 : (c4 * 0.5f + 0.5f)));
            break;

         case "bipolar_1":
            b_bipolar_1 = _value;
            break;

         case "bipolar_2":
            b_bipolar_2 = _value;
            break;

         case "bipolar_3":
            b_bipolar_3 = _value;
            break;

         case "bipolar_4":
            b_bipolar_4 = _value;
            break;
      }
   }

   public virtual getParamByName(String _name) : float {
      switch(_name)
      {
         case "c1":
            return c1;

         case "c2":
            return c2;

         case "c3":
            return c3;

         case "c4":
            return c4;

         case "bipolar_1":
            return b_bipolar_1;

         case "bipolar_2":
            return b_bipolar_2;

         case "bipolar_3":
            return b_bipolar_3;

         case "bipolar_4":
            return b_bipolar_4;
      }
   }

   public virtual getNormalizedParamNames() : Object {
      return ["const 1", "const 2", "const 3", "const 4"
              ];
   }

   public virtual setNormalizedParamByIndexUI(int _paramIdx, float _value) {
      switch(_paramIdx)
      {
         case 0:
            c1 = FromNormalized(_value, -1, 1);
            updateParamWidget("c1", c1);
            Global.Print("Constant value #1 is "+c1+" => "+(b_bipolar_1 ? c1 : (c1 * 0.5f + 0.5f)));
            break;

         case 1:
            c2 = FromNormalized(_value, -1, 1);
            updateParamWidget("c2", c2);
            Global.Print("Constant value #2 is "+c2+" => "+(b_bipolar_2 ? c2 : (c2 * 0.5f + 0.5f)));
            break;

         case 2:
            c3 = FromNormalized(_value, -1, 1);
            updateParamWidget("c3", c3);
            Global.Print("Constant value #3 is "+c3+" => "+(b_bipolar_3 ? c3 : (c3 * 0.5f + 0.5f)));
            break;

         case 3:
            c4 = FromNormalized(_value, -1, 1);
            updateParamWidget("c4", c4);
            Global.Print("Constant value #4 is "+c4+" => "+(b_bipolar_4 ? c4 : (c4 * 0.5f + 0.5f)));
            break;
      }
   }

   public virtual getNormalizedParamByIndex(int _paramIdx) : float {
      switch(_paramIdx)
      {
         case 0:
            return ToNormalized(c1, -1, 1);

         case 1:
            return ToNormalized(c2, -1, 1);

         case 2:
            return ToNormalized(c3, -1, 1);

         case 3:
            return ToNormalized(c4, -1, 1);
      }
      return 0.0f;
   }

   public virtual saveState(Stream ofs) {
      Module::saveState(ofs);

      // ver
      ofs.i16 = 2;

      // params
      ofs.f32 = c1;
      ofs.f32 = c2;
      ofs.f32 = c3;
      ofs.f32 = c4;

      // bipolar states (v2+)
      ofs.i8 = b_bipolar_1;
      ofs.i8 = b_bipolar_2;
      ofs.i8 = b_bipolar_3;
      ofs.i8 = b_bipolar_4;
   }

   public virtual loadState(Stream ifs) : boolean {
      if(Module::loadState(ifs))
      {
         short ver = ifs.u16;
         if(ver >= 1)
         {
            // params
            c1 = ifs.f32;
            c2 = ifs.f32;
            c3 = ifs.f32;
            c4 = ifs.f32;

            // bipolar states (v2+)
            if(ver >= 2)
            {
               b_bipolar_1 = ifs.b8;
               b_bipolar_2 = ifs.b8;
               b_bipolar_3 = ifs.b8;
               b_bipolar_4 = ifs.b8;
            }

            return true;
         }
         else
         {
            trace "[---] ModCV_Const::loadState: invalid ver="+ver;
         }
      }
      return false;
   }

   public virtual tick() {
      out[0] = b_bipolar_1 ? c1 : (c1 * 0.5f + 0.5f);
      out[1] = b_bipolar_2 ? c2 : (c2 * 0.5f + 0.5f);
      out[2] = b_bipolar_3 ? c3 : (c3 * 0.5f + 0.5f);
      out[3] = b_bipolar_4 ? c4 : (c4 * 0.5f + 0.5f);
   }
}
