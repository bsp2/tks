
module MScrTitle;

namespace racer;

use tkopengl;


class ScrTitle : OSDScreen {

   OptionList opt;

   float frot;

   protected method resetBackground() {
      player.setPositionAndDirection(vector3f(0,0,0), vector3f(0,0,1));
      player.cam_up.init(0,1,0,1);
      float zsh = -0.06;
      player.clz += zsh;
      player.cfz += zsh;
      player.crz += zsh;
      player.ship_rot = 0;
      frot = 0;
   }

   protected method drawBackground(float dt) {
      zglInitPerspective(float(Viewport.width)/Viewport.height, 60.0, 0.001, 60.0);
      glLoadIdentity();
      glTranslatef(0,-0.016325,-0.212);
      glRotatef(15, 1,0,0);
      glRotatef(frot, 0,1,0);

      glFrontFace(GL_CW);
      glCullFace(GL_BACK);
      glDisable(GL_CULL_FACE);
      glEnable(GL_DEPTH_TEST);
      glDisable(GL_TEXTURE_2D);

      player.drawShip();

      frot += 0.621 * 0.8 * dt;

      if(RacerConfiguration.b_motion_blur)
      {
         player.speed = 6;
         MotionBlur.OnDraw();
      }

      zglInitOrtho(1, -1);
      glLoadIdentity();
      glEnable(GL_BLEND);
      glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
      zglColorARGB(#3f000000);
      glBegin(GL_QUADS);
      glVertex2f(-1,-1);
      glVertex2f( 1,-1);
      glVertex2f( 1, 1);
      glVertex2f(-1, 1);
      glEnd();
      glDisable(GL_BLEND);
   }

   public method onDraw(float dt) {

      glClearColor(0.025,0.075,0.025,1);
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

      drawBackground(dt);

      // Draw race time
      zglInit2D(Viewport.width, Viewport.height);
      glLoadIdentity();

      glEnable(GL_TEXTURE_2D);
      tex_font.bind();
      glDisable(GL_BLEND);
      glDisable(GL_DEPTH_TEST);
      glDisable(GL_CULL_FACE);
      glEnable(GL_BLEND);
      glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

      float vw = Viewport.width;
      float vh = Viewport.height;

      String txt = "Welcome to -= raCer =-";
      float txtW = (txt.length-1) * 8;
      zglColorARGB(#ffffffaf);
      RenderUtils.DrawFixedText((vw - txtW)*0.5, (vh-8)*0.5, tex_font.sx, tex_font.sy, txt);

      zglColorARGB(#ff004f00);
      RenderUtils.DrawFixedText(vw - 6*8, vh-12, tex_font.sx, tex_font.sy, RacerConfiguration.VERSION_STRING);

      opt.draw(dt);

      glDisable(GL_TEXTURE_2D);
      glDisable(GL_BLEND);
   }

   protected method handleOptSelection(int _id) {
      switch(_id)
      {
         case 0:
            OSD.ShowScreen(scr_map_select);
            break;

         case 2:
            Editor.LoadTrack(Editor.TRACK_FILENAME);
            OSD.ShowScreen(scr_editor);
            break;

         case 3:
            OSD.ShowScreen(scr_quit_game);
            break;
      }
   }

   public method onKey(Key _k) : boolean {
      switch(_k.pressed)
      {
         case VKEY_UP:
            opt.selectPrev();
            return true;

         case VKEY_DOWN:
            opt.selectNext();
            return true;

         case VKEY_RETURN:
         case VKEY_PAGEDOWN: // 'X' button on Pandora
            handleOptSelection(opt.sel_index);
            return true;
      }
      return false;
   }

   public method onActivate() { 
      opt.setOptions([
                        "Race",       // 0
                        "Options",    // 1
                        "Editor",     // 2
                        "Quit"        // 3
                        ]);
      onOpen();
      resetBackground();
      RacerConfiguration.hiscore_mode = RacerConfiguration.HIMODE_NORMAL;
   }

   public method onOpen() {
      opt.setGeometry((Viewport.width-20*8)*0.5 + 6*8, (Viewport.height-8)*0.5+6*8, 20*8, 10*OptionList.OPTION_SY);
   }

   public method onDeactivate() { 
   }

}

ScrTitle scr_title;
