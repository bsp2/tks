
module MBezierSegment;


class BezierSegment {
   float ctl1x;
   float ctl1y;
   float ctl2x;
   float ctl2y;
   float px;
   float py;
   float dx;
   float dy;

   float cached_path_offset;

   public method init(float _x, _y) {
      ctl1x = _x;
      ctl1y = _y;
      ctl2x = _x;
      ctl2y = _y;
      px = _x;
      py = _y;
      dx = _x;
      dy = _y;
   }

   public method copyFrom(BezierSegment seg) {
      ctl1x = seg.ctl1x;
      ctl1y = seg.ctl1y;
      ctl2x = seg.ctl2x;
      ctl2y = seg.ctl2y;
      px    = seg.px;
      py    = seg.py;
      dx    = seg.dx;
      dy    = seg.dy;
   }

   public method scaleXY(float _sx, _sy) {
      px *= _sx;
      py *= _sy;
      dx *= _sx;
      dy *= _sy;
      ctl1x *= _sx;
      ctl1y *= _sy;
      ctl2x *= _sx;
      ctl2y *= _sy;
   }

   public method join(BezierSegment seg2, boolean _bCtl2) {      
      dx = seg2.px;
      dy = seg2.py;

      if(_bCtl2)
      {
         ctl2x = -(seg2.ctl1x - dx) + dx;
         ctl2y = -(seg2.ctl1y - dy) + dy;
      }
   }

   public method joinCtl1(BezierSegment prev) {
      ctl1x = -(prev.ctl2x - px) + px;
      ctl1y = -(prev.ctl2y - py) + py;
   }

   public method joinCtl2(BezierSegment next) {
      ctl2x = -(next.ctl1x - dx) + dx;
      ctl2y = -(next.ctl1y - dy) + dy;
   }

   public method saveToStream(Stream os) {
      os.f32 = ctl1x;
      os.f32 = ctl1y;
      os.f32 = ctl2x;
      os.f32 = ctl2y;
      os.f32 = px;
      os.f32 = py;
      os.f32 = dx;
      os.f32 = dy;
   }

   public method loadFromStream(Stream is, int ver) {
      ctl1x = is.f32;
      ctl1y = is.f32;
      ctl2x = is.f32;
      ctl2y = is.f32;
      px    = is.f32;
      py    = is.f32;
      dx    = is.f32;
      dy    = is.f32;

      //trace "xxx ctl1=("+ctl1x+";"+ctl1y+") p=("+px+";"+py+")";
   }

   public method scaleAfterLoad(float _scale) {
      ctl1x *= _scale;
      ctl1y *= _scale;
      ctl2x *= _scale;
      ctl2y *= _scale;
      px    *= _scale;
      py    *= _scale;
      dx    *= _scale;
      dy    *= _scale;
   }

}
