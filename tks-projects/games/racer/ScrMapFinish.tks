
module MScrMapFinish;

namespace racer;

use tkopengl;


class ScrMapFinish : OSDScreen {

   OptionList opt;

   public method onDraw(float dt) {

      scr_ingame.onDraw(dt);

      zglInit2D(Viewport.width, Viewport.height);
//       glClearColor(0,0,0.2,1);
//       glClear(GL_COLOR_BUFFER_BIT);
      glLoadIdentity();

      glEnable(GL_TEXTURE_2D);
      tex_font.bind();
      glDisable(GL_BLEND);
      glDisable(GL_DEPTH_TEST);
      glDisable(GL_CULL_FACE);
      glEnable(GL_BLEND);
      glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

      float vw = Viewport.width;
      float vh = Viewport.height;

      float cy = (Viewport.height-130)*0.5;
      String txt;
      switch(track.medal_himode)
      {
         default: 
            txt = "- GOAL ! -"; 
            break;
         case RacerConfiguration.HIMODE_AUTHOR:
            zglColorARGB(#ff44ff44);
            txt = "- You've beaten the Author's hiscore ! -";
            break;
         case RacerConfiguration.HIMODE_GOLD:
            zglColorARGB(#ffDDDD44);
            txt = "- You won the GOLD medal ! -";
            break;
         case RacerConfiguration.HIMODE_SILVER:
            zglColorARGB(#ffDDDDDD);
            txt = "- You won the SILVER medal ! -";
            break;
         case RacerConfiguration.HIMODE_BRONZE:
            zglColorARGB(#ffCC9c9c);
            txt = "- You won the BRONZE medal ! -";
            break;
      }
      float txtW = (txt.length-1) * 8;
      RenderUtils.DrawFixedText((vw - txtW)*0.5, cy, tex_font.sx, tex_font.sy, txt);

      cy += 60;
      txt = "Your time : ";
      RacerConfiguration.AppendTimeString(txt, RacerConfiguration.race_millisec);
      txtW = (txt.length-1) * 8;
      if(RacerConfiguration.race_millisec < RacerConfiguration.race_millisec_old_hiscore)
      {
         zglColorARGB(#ffffff1f);
      }
      else
      {
         zglColorARGB(#ffcfcfcf);
      }
      RenderUtils.DrawFixedText((Viewport.width - txtW)*0.5, cy, tex_font.sx, tex_font.sy, txt);

      cy += 30;
      txt = "Old Hiscore: ";
      RacerConfiguration.AppendTimeString(txt, RacerConfiguration.race_millisec_old_hiscore);
      //txtW = (txt.length-1) * 8;
      if(RacerConfiguration.race_millisec < RacerConfiguration.race_millisec_old_hiscore)
      {
         zglColorARGB(#ffcfcfcf);
      }
      else
      {
         zglColorARGB(#ffdfdf10);
      }
      RenderUtils.DrawFixedText((Viewport.width - txtW)*0.5, cy, tex_font.sx, tex_font.sy, txt);

      opt.draw(dt);

      glDisable(GL_TEXTURE_2D);
      glDisable(GL_BLEND);
   }

   protected method handleOptSelection(int _id) {
      switch(_id)
      {
         case 0:
            scr_ingame.restartRace();
            OSD.ShowScreenCont(scr_ingame);
            break;

         case 1:
            OSD.ShowScreenCont(scr_ingame);
            replay.startReplay();
            break;

         case 2:
            Editor.LoadNextTrackCycle();
            OSD.ShowScreen(scr_ingame);
            break;

         case 3:
            OSD.ShowScreen(scr_editor);
            break;

         case 4:
            OSD.ShowScreen(scr_quit_to_title);
            break;
      }
   }

   public method onKey(Key _k) : boolean {
      switch(_k.pressed)
      {
         case VKEY_UP:
            opt.selectPrev();
            return true;

         case VKEY_DOWN:
            opt.selectNext();
            return true;

         case VKEY_RETURN:
         case VKEY_PAGEDOWN: // 'X' button on Pandora
            handleOptSelection(opt.sel_index);
            return true;
      }
      return false;
   }

   public method onActivate() { 
      opt.setOptions([
                        "Retry",         // 0
                        "View replay",   // 1
                        "Next map",      // 2
                        "Edit map",      // 3
                        "Quit to title"  // 4
                        ]);
      onOpen();


      // Scoring..
      RacerConfiguration.b_ingame = false;
      
      String mapTime; mapTime = "[...] map time = ";
      RacerConfiguration.AppendTimeString(mapTime, RacerConfiguration.race_millisec);
      trace mapTime;

      RacerConfiguration.race_millisec_old_hiscore = RacerConfiguration.race_millisec_hiscore;

      if(RacerConfiguration.race_millisec < RacerConfiguration.race_millisec_hiscore)
      {
         RacerConfiguration.race_millisec_hiscore = RacerConfiguration.race_millisec;
         trace "[...]    --->  new MAP record  <--- ";
      }
      
      track.checkMedalScore();

      if(RacerConfiguration.b_record)
      {
         RacerConfiguration.b_replay_fail = false;
         replay.stopRecord();
      }

      replay.startReplay();
   }


   public method onDeactivate() { 
      //
      RacerConfiguration.race_millisec_hiscore = 1000 * (9*60 + 59);
   }

   public method onOpen() {
      opt.setGeometry((Viewport.width-20*8)*0.5 + 3*8, (Viewport.height)*0.5+10*8, 20*8, 8*8);
   }

}

ScrMapFinish  scr_map_finish;
