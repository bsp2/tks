
module MPathEdit;

namespace racer;

class PathEdit {

   static BezierEdit bezier_edit;


   static method Init() {
      bezier_edit.init(false, 
                       Track.SIZE*(2/Track.SCALE), Track.SIZE*(2/Track.SCALE), // scale
                       0.0, 0.0, // center
                       0.05, 200);
   }

   static SetEnvelope(FloatArray _env, BezierPolyLine _bpl) {
      bezier_edit.setEnvelope(deref _env, deref _bpl);
   }

   static method SetEnabled(boolean bEnabled) {
      bezier_edit.setSize(Viewport.width, Viewport.height);
      if(!bEnabled)
      {
         track.updateTrack();
      }
      else
      {
         bezier_edit.queueBezierUpdate();
      }
   }

   static public method OnDraw(float _dt) {

      glViewport(0, 0, Viewport.width, Viewport.height);
      glScissor(0, 0, Viewport.width, Viewport.height);
      glEnable(GL_SCISSOR_TEST);
      zglInit2D(Viewport.width, Viewport.height);

      glDisable(GL_DEPTH_TEST);
      glDisable(GL_BLEND);

      glLoadIdentity();
    
      glClearColor(0.48*1.1, 0.47*1.1, 0.45*1.1, 1.0);
      glClear(GL_COLOR_BUFFER_BIT);

      // Draw x/z axis
      glLineWidth(1);
      glColor3f(0.48, 0.47, 0.45);
      glBegin(GL_LINES);
      glVertex2f(Viewport.width*0.5, Viewport.height);
      glVertex2f(Viewport.width*0.5, 0);

      glVertex2f(0, Viewport.height*0.5);
      glVertex2f(Viewport.width, Viewport.height*0.5);
      glEnd();

      // Draw track boundaries
      float scalex = bezier_edit.size_x / (2*bezier_edit.scale_x);
      float centerx = bezier_edit.size_x*0.5 - bezier_edit.size_x * bezier_edit.center_x;
      float scaley = bezier_edit.size_y / (2*bezier_edit.scale_y);
      float centery = bezier_edit.size_y*0.5 - bezier_edit.size_y * bezier_edit.center_y;
      float minx = -Track.SIZE*0.5 * scalex + centerx;
      float maxx =  Track.SIZE*0.5 * scalex + centerx;
      float miny = -Track.SIZE*0.5 * scaley + centery;
      float maxy =  Track.SIZE*0.5 * scaley + centery;
      ////trace "scalex="+scalex+" centerx="+centerx+" lx="+(-mx * scalex + centerx);
      glColor3f(0.48, 0.47, 0.0);
      glBegin(GL_LINE_LOOP);
      glVertex2f(minx, miny);
      glVertex2f(maxx, miny);
      glVertex2f(maxx, maxy);
      glVertex2f(minx, maxy);
      glEnd();


      //glTranslatef(0,Viewport.height-bezier_edit.size_y,0);
      bezier_edit.onDraw(_dt);
      //glTranslatef(0,-Viewport.height-bezier_edit.size_y,0);

      glScissor(0, 0, Viewport.width, Viewport.height);
      glDisable(GL_SCISSOR_TEST);
   }

   static public OnMouse(int _x, int _y, int _cbs, int _nbs) : boolean {
      return bezier_edit.onMouse(_x, _y, _cbs, _nbs);
   }

   static public method OnKey(Key _k) {
      return bezier_edit.onKey(_k);
   }

}
