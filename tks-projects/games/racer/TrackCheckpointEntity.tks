module MTrackCheckpointEntity;

namespace racer;

class TrackCheckpointEntity : TrackEntity {

   define float RADIUS = 1.28;

   boolean b_goal; // if this is the last checkpoint: true=complete level if reached, false=restart with first checkpoint
   int checkpoint_id; // used to order the checkpoints before race is started

   public method initCheckpoint(float _x, _y, _z, boolean _bGoal) {
      moveTo3f(_x, _y, _z);
      b_goal = _bGoal;
   }

   public method moveTo3f(float _x, _y, _z) {
      TrackEntity::moveTo3f(_x, _y, _z);

      bb_min.init(_x - RADIUS, _y - RADIUS, _z - RADIUS);
      bb_max.init(_x + RADIUS, _y + RADIUS, _z + RADIUS);
      bb_center.init(_x, _y, _z);
   }

   public method drawDynamic(float dt) {
      zglColorARGB(#ff0077FF);
      RenderUtils.DrawDebugSphere(center_pos.x, center_pos.y, center_pos.z, RADIUS);
   }

   public method saveToStream(Stream os) {
      // Save entity type
      os.i32 = TrackEntity.TYPE_CHECKPOINT;

      // Save "b_goal"
      os.i32 = b_goal;

      // Save "checkpoint_id";
      os.i32 = checkpoint_id;

      // Save "center_pos" and "scale"
      os << center_pos;
      os << scale;
   }

   public method loadFromStream(Stream is, int ver) {
      
      // Load "b_goal";
      b_goal = is.i32;

      // Load "checkpoint_id"
      checkpoint_id = is.i32;

      // Load "center_pos" and "scale"
      center_pos << is;
      scale      << is;

      if(ver < 5)
      {
         center_pos.mulf(1.0 / RacerConfiguration.PREV5_SCALE);
      }
   }

}
