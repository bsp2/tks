
module MOptionList;

namespace racer;


class OptionList {

   define float OPTION_SY = 14;
   
   float off_index;
   float px, py, sx, sy;

   int sel_index;

   StringArray options;

   float cursor_anim = 0;

   public method setOptions(StringArray _options) {
      options = _options;
      sel_index = 0;
      off_index = 0;
   }

   public method setGeometry(float _x, _y, _sx, _sy) {
      px = _x;
      py = _y;
      sx = _sx;
      sy = _sy;
      adjustOffIndex();
   }

   protected method adjustOffIndex() {
      int numVis = sy / OPTION_SY;
      if( sel_index >= (numVis + off_index))
      {
         off_index = sel_index - numVis;
      }
      else if(sel_index < off_index)
      {
         off_index = sel_index - numVis;
         if(off_index < 0) off_index = 0;
      }
      ////trace "xxx sel_index="+sel_index+" off_index="+off_index+" numVis="+numVis;
   }

   public method selectNext() {
      sel_index = (sel_index + 1 ) % options.numElements;
      adjustOffIndex();
   }

   public method selectPrev() {
      if(sel_index > 0)
      {
         sel_index--;
      }
      else
      {
         sel_index = options.numElements - 1;
      }
      adjustOffIndex();
   }

   public method onClick() {
   }

   public method draw(float dt) {
      String opt;
      int optIdx = off_index;
      float cy = py;
      if(options.numElements >= optIdx)
      {
         loop(options.numElements - optIdx) 
         {
            if(cy >= (py+sy))
            {
               RenderUtils.DrawFixedText(px, cy, tex_font.sx, tex_font.sy, "..");
               break;
            }
            opt <= options[optIdx];
            float offx, offy;
            if(sel_index == optIdx)
            {
               offx = -2;
               offy = -1;
               int c8 = (sin(2PI*cursor_anim)*0.5+0.5) * 255;
               zglColorARGB(argb(255, c8, c8, c8));
               RenderUtils.DrawFixedText(px - 1, cy - 0, tex_font.sx, tex_font.sy, opt);
               zglColorARGB(#ffffffaf);
            }
            else
            {
               zglColorARGB(#ff5fff6f);
               offx = 0;
               offy = 0;
            }
            RenderUtils.DrawFixedText(px + offx, cy + offy, tex_font.sx, tex_font.sy, opt);
            cy += OPTION_SY;
            optIdx++;
         }
      }
      cursor_anim += dt * 0.028;
      if(cursor_anim >= 1) cursor_anim -= 1;
   }

}

