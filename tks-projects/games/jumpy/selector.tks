
// 31Mar2010

module MSelector;

namespace jumpy;

class Selector {

   int select_action;
   int cancel_action;
   int selected_index;
   StringArray *strings;
   boolean b_centerlines;
   float max_sx;
   float frame_count;

   public method init(StringArray _strings, int _selectAction, int _cancelAction, boolean _bCenterLines) {
      strings       <= _strings;
      select_action  = _selectAction;
      cancel_action  = _cancelAction;
      selected_index = 0;
      b_centerlines  = _bCenterLines;

      if(!b_centerlines)
      {
         String *s;
         max_sx = 0;
         foreach s in strings 
         {
            int sx= (s.length - 1) * 8;
            if(sx > max_sx)
            {
               max_sx = sx;
            }
         }
      }
   }

   protected method selectPrevious() {
      selected_index--;
      if(selected_index < 0)
      {
         selected_index = strings.numElements - 1;
      }
   }

   protected method selectNext() {
      selected_index++;
      if(selected_index >= strings.numElements)
      {
         selected_index = 0;
      }
   }

   public method selectIndex(int _idx) {
      selected_index = mathClampf(_idx, 0, strings.numElements-1);
   }

   public method onKeyboard(Key _k) {
      switch(_k.pressed)
      {
         case VKEY_UP:
            do 
            {
               selectPrevious();
            } 
            while(strings[selected_index].isBlank());

            frame_count = 0;
            break;
            
         case VKEY_DOWN:
            do 
            {
               selectNext();
            } 
            while(strings[selected_index].isBlank());

            frame_count = 0;
            break;
            
         case VKEY_RETURN:
         case VKEY_SPACE:
         case VKEY_PAGEDOWN: // 'X' button on Pandora
            g_ingame.queueAction(select_action);
            break;

         case VKEY_ESCAPE:
         case 'q':
            g_ingame.queueAction(cancel_action);
            break;
      }
   }

   public method getSelectedIndex() {
      return selected_index;
   }

   public method draw(float dt) compile {

      int c32fgSel = #ffffff66;
      if(frame_count >= 32)
      {
         frame_count -= 32;
      }
      if(frame_count >= 16)
      {
         float rel = sin (PI * (frame_count-16)/16);
         c32fgSel = argb(255, 255 - 192 * rel, 255 - 32 * rel, 0x66 + (127-0x66) * rel);
      }
      frame_count += dt;
      int c32fgNor = #ff999944;
      int c32fg;
      int c32bg = #ff444444;

      int cy = 200;

      int idx = 0;
      String *s;
      loop(strings.numElements)
      {
         s <= strings.get(idx);
         if(selected_index == idx)
         {
            c32fg = c32fgSel;
         }
         else
         {
            c32fg = c32fgNor;
         }
         int sx;
         if(b_centerlines)
         {
            sx = (s.length-1)*8;
         }
         else
         {
            sx = max_sx;
         }
         DebugText.Draw((Viewport.width-sx)/2, cy, s, c32fg, c32bg);
         idx++;
         cy += 14;
      }
   }

}
