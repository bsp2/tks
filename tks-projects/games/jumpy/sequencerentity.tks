
// 18Mar2010

module MSequencerEntity;

namespace jumpy;


class SequencerEntity extends BoxEntity {

   protected float speed;
   protected float countdown;

   public PointerArray steps; // array<Script>
   public int current_step;

   public static NewSequencerEntity(float _speed) : SequencerEntity {
      SequencerEntity s <= new SequencerEntity;
      s.initSequencerEntity(_speed);
      return deref s;
   }

   public method initSequencerEntity(float _speed) {
      initEntity();
      speed = _speed;
      current_step = 0;
   }

   public method resetEntity() {
      Entity::resetEntity();
      current_step = 0;
      countdown = 0; // first step starts immediately
   }

   public method addStepScriptFromString(String _cmds) {
      local Script s;
      s.addActionsFromString(_cmds);
      steps.add(#(deref s));
   }

   public virtual calc(float dt) {
      if(b_active)
      {
         if(countdown >= 0)
         {
            countdown -= dt;
            if(countdown <= 0)
            {
               countdown += speed;
               Script s <= steps.get(current_step);
               if(null != s)
               {
                  s.run();
               }
               current_step++;
               if(current_step >= steps.numElements)
               {
                  current_step = 0;
               }
            }
         }
      }
   }

   public virtual draw(float dt) {
      return;
   }

   public virtual hitBy(Entity _o) : int {
      return 0;
   }

   public virtual actionSet(String key, value) : boolean {
      StringArray *a;
      switch(key)
      {
         case "speed":
            speed = value;
            return true;
      }
      return BoxEntity::actionSet(key, value);
   }

   public virtual markScriptTargets() {
      local Script *sc;
      foreach sc in steps {
         sc.markScriptTargets();
      }
   }


}
