
module MParticle;

namespace jumpy;


class Particle {
   float x, y;
   float dx, dy;
   float ttl;
   float tttl;
   float cr,cg,cb;
   float len; // for line particles

   public method init() {
      ttl = 0.0f;
   }
}

class ParticleSystem {
   Particle particles[];
   float gravity;

   public method init(int _numParticles) {
      particles.alloc(_numParticles);
      particles.useAll();
      Particle *p;
      foreach p in particles
      {
         p.init();
      }
      gravity = -0.05;
   }

   public method draw(float dt) {
      Particle *p;
      glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
      glEnable(GL_BLEND);
      glBegin(GL_POINTS);
      foreach p in particles compile {
         if(p.ttl > 0)
         {
            p.ttl -= dt;
            glColor4f(p.cr,p.cg,p.cb, mathSmoothStepf(0,1,p.ttl / p.tttl));
            glVertex2f(p.x, p.y);
            p.x += p.dx * dt;
            p.y += p.dy * dt;
            p.dy += gravity*dt;
         }
      }
      glEnd();
      glDisable(GL_BLEND);
   }

   public method spawn(float px, py, dx, dy, ttl) : Particle {
      Particle *p;
      Particle *maxp <= null;
      float maxttl = 0;
      foreach p in particles {
         if(p.ttl <= 0)
         {
            maxp <= p;
            break;
         }
         else
         {
            if(p.ttl > maxttl)
            {
               maxttl = p.ttl;
               maxp <= p;
            }
         }
      }
      p <= maxp;
      p.x = px;
      p.y = py;
      p.dx = dx;
      p.dy = dy;
      p.ttl = ttl;
      p.tttl = ttl;
      p.cr = 1;
      p.cg = 1;
      p.cb = 1;
      return p;
   }
}


class ParticleSystemLines : ParticleSystem {
   public method draw(float dt) {
      Particle *p;
      glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
      glEnable(GL_BLEND);
      glLineWidth(1.0f);
      glBegin(GL_LINES);
      foreach p in particles compile {
         if(p.ttl > 0)
         {
            p.ttl -= dt;
            glColor4f(p.cr,p.cg,p.cb, mathSmoothStepf(0,1,p.ttl / p.tttl));
            glVertex2f(p.x, p.y);
            glVertex2f(p.x+p.dx*p.len, p.y+p.dy*p.len);
            p.x += p.dx * dt;
            p.y += p.dy * dt;
            p.dy += -0.01*dt;
         }
      }
      glEnd();
      glDisable(GL_BLEND);
   }
}
