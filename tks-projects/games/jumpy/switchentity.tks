
// 14Mar2010

module MSwitchEntity;

namespace jumpy;


class SwitchEntity extends BoxEntity {

   protected boolean b_on;
   protected boolean b_toggle;
   protected boolean b_onlyrunners;

   define float TOGGLE_TIMEOUT = 30;
   protected float toggle_countdown;

   public Script on_script;
   public Script off_script;


   public static NewSwitchEntity(float x, y, w, h, int c32, boolean _bOn, boolean _bToggle, boolean _bVisible, boolean _bOnlyRunners) : SwitchEntity {
      SwitchEntity s <= new SwitchEntity;

      s.initBoxEntity(x, y, w, h, c32);

      s.b_on             = _bOn;
      s.b_toggle         = _bToggle;
      s.reset_b_visible  = _bVisible;
      s.b_onlyrunners    = _bOnlyRunners;
      s.toggle_countdown = 0;

      return deref s;
   }

   public virtual calc(float dt) {
      ////trace "xxx SwitchEntity::calc: dt="+dt;
      if(toggle_countdown > 0)
      {
         toggle_countdown -= dt;
         if(toggle_countdown < 0)
         {
            toggle_countdown = 0;
         }
      }
   }

   public virtual draw(float dt) {

      if(!b_visible)
      {
         if(b_edit_mode)
         {
            Render.drawFilledBox(position_x, position_y, size_x, size_y, #ff222222); // debug info
            if(b_onlyrunners)
            {
               Render.drawRectangle(position_x, position_y, size_x, size_y, #ff666666); // debug info
            }
            else
            {
               Render.drawRectangle(position_x, position_y, size_x, size_y, #ff999999); // debug info
            }
         }
         return;
      }
      if(b_onlyrunners)
      {
         Render.drawFilledBox(position_x, position_y, size_x, size_y, 0xff666666);
      }
      else
      {
         Render.drawFilledBox(position_x, position_y, size_x, size_y, b_active ? color32 : 0xff444444);
      }

      glLineWidth(3.0);
      zglColorARGB(#ff000000);
      if(b_on)
      {
         // Draw \/
         glBegin(GL_LINES);
         glVertex2f(position_x + size_x * 0.25, position_y+size_y*0.5);
         glVertex2f(position_x + size_x *0.5, position_y +1);

         glVertex2f(position_x + size_x *0.5, position_y +1);
         glVertex2f(position_x + size_x -1, position_y + size_y -1);
         glEnd();
      }
      else
      {
         // Draw X
         glBegin(GL_LINES);
         glVertex2f(position_x+1, position_y+1);
         glVertex2f(position_x + size_x -1, position_y + size_y -1);
         
         glVertex2f(position_x +1, position_y + size_y -1);
         glVertex2f(position_x + size_x -1, position_y +1);
         glEnd();
      }

//       glLineWidth(4.0);
//       Render.drawRectangle(position_x, position_y, size_x, size_y, #ffffffff);
//       glLineWidth(1.0);
   }

   public virtual hitBy(Entity _o) : int {
      if(!b_active)
      {
         return 0;
      }

      if(b_onlyrunners)
      {
         if(@(_o) == @(g_player))
         {
            return;
         }
      }

      if(0 == toggle_countdown) // Can be (re-)triggered ?
      {
         if(b_toggle)
         {
            // Switch is a toggle
            if(b_on)
            {
               b_on = false;
               off_script.run();
            }
            else
            {
               b_on = true;
               on_script.run();
            }

            // Do not allow switch to be toggled again for TOGGLE_TIMEOUT frames
            toggle_countdown = TOGGLE_TIMEOUT;

            trace "[dbg] switch toggled at t+"+g_ingame.level_timer;
         }
         else if(!b_on)
         {
            // Switch can only be activated once
            b_on = true;
            on_script.run();
            trace "[dbg] switch activated at t+"+g_ingame.level_timer;
         }
      }

      return 0;
   }

   public virtual actionSet(String key, value) : boolean {
      StringArray *a;
      switch(key)
      {
         case "on":
            b_on = value;
            return true;

         case "toggle":
            b_toggle = value;
            return true;
      }
      return BoxEntity::actionSet(key, value);
   }

   public virtual markScriptTargets() {
      on_script.markScriptTargets();
      off_script.markScriptTargets();
   }

}
