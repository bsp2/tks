
module MBirdItem;

namespace jumpy;

class BirdItem : Item   {

   float respawn_interval;
   float respawn_timeout;
   float orig_x;
   float orig_y;
   float dx;
   float dy;

   public static NewBirdItem(float x, y) : BirdItem {
      BirdItem b <= new BirdItem;
      b.initBirdEntity(x,y);
      return deref b;
   }

   public method initBirdEntity(float x, y) {
      initItem();

      orig_x = x;
      orig_y = y;
      setEntityPosition(x, y);
      setEntitySize(6-1, 6-1);
      gravity = 0;
      color32 = #ffcc5500;
      b_collectable = true;
      respawn_timeout = 0;
      respawn_interval = 87;
      b_semipermeable = true;
      b_nocollision = true;
   }

   public method resetEntity() {
      Item::resetEntity();
      b_nocollision = true;
   }

   public virtual rotatecw() {
      Entity::rotatecw();
      float t;

      t = orig_x;
      orig_x = orig_y;
      orig_y = (g_level.t_size_x*6 - t - size_x);
   }

   public virtual handleCollect(Entity _carryEntity) : boolean {
      if(null == _carryEntity)
      {
         if(b_visible)
         {
            if(b_collectable)
            {
               b_collectable = false;
               b_nocollision = true;
               dx = 0;
               dy = 0;
               return true;
            }
         }
      }
      return false;
   }

   public virtual handleDrop() {
      respawn_timeout = respawn_interval;
      dx = g_player.speed_x * 0.4;
      dy = g_player.speed_y + 0.8;
      gravity = 1;
   }

   public virtual calc(float dt) {
      if(respawn_timeout > 0)
      {
         respawn_timeout -= dt;
         position_x += dx * dt;
         position_y += gravity * dy * dt;
         dy += -0.06 * dt;
         if(respawn_timeout <= 0)
         {
            respawn_timeout = 0;
            b_collectable = true;
            position_x = orig_x;
            position_y = orig_y;
            gravity = 0;
         }
      }
   }
   
   public virtual draw(float dt) {
      ////trace "xxx jump item p=("+position_x+";"+position_y+")";

      if(!b_visible)
      {
         BoxEntity::draw(dt);
         return;
      }

      if(!b_collectable)
      {
         Render.drawFilledBox(position_x, position_y, size_x, size_y, color32);
      }

      if(b_collectable)
      {
         if(true)
         {
            tex_up.bind();
            tex_up.enable();
            glBegin(GL_TRIANGLE_FAN);
            glTexCoord2f(0, 1);
            glVertex2f(position_x, position_y);

            glTexCoord2f(1, 1);
            glVertex2f(position_x + size_x, position_y);

            glTexCoord2f(1, 0);
            glVertex2f(position_x + size_x, position_y + size_y);

            glTexCoord2f(0, 0);
            glVertex2f(position_x, position_y + size_y);
            glEnd();
            tex_up.disable();
         }
         else
         {
            // original render code (slow on PVR):
            glLineWidth(4.0);
            Render.drawRectangle(position_x, position_y, size_x, size_y, #ffffffff);
            glBegin(GL_LINES);
            glVertex2f(position_x, position_y);
            glVertex2f(position_x+size_x*0.5, position_y+size_y);
            glVertex2f(position_x+size_x*0.5, position_y+size_y);
            glVertex2f(position_x+size_x, position_y);
            glEnd();
            glLineWidth(1.0);
         }
      }
   }

}
