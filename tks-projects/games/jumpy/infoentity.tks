
// 06Apr2010

module MInfoEntity;

namespace jumpy;


class InfoEntity extends BoxEntity {

   define float HIDE_TIMEOUT = 60;
   protected float hide_countdown;

   protected String message;
   protected float message_sx;
   protected float message_sy;

   protected float anim_counter;

   public static NewInfoEntity(float x, y, w, h, String _message) : InfoEntity {
      InfoEntity i <= new InfoEntity;

      i.initBoxEntity(x, y, w, h, 0);

      i.message = _message.replaceChar(';', '\n');

      String *line;
      float maxx = 0;
      float maxy = 14;
      foreach line in i.message.splitChar('\n')
      {
         float cx = (line.length-1)*8;
         if(cx > maxx)
            maxx = cx;
         maxy += 14;
      }
      i.message_sx = maxx;
      i.message_sy = maxy;

      return deref i;
   }

   public virtual calc(float dt) {

      if(hide_countdown > 0)
      {
         hide_countdown -= dt;
         if(hide_countdown < 0)
         {
            hide_countdown = 0;
         }
      }
   }

   public virtual resetEntity() {
      BoxEntity::resetEntity();

      anim_counter   = 0;
      hide_countdown = 0;
   }

   public virtual draw(float dt) {

      Render.drawFilledBox(position_x, position_y, size_x, size_y, 0xff666666);
      float w = 1.5;
      float h = size_x*0.75;
      float px = position_x + (size_x-w)*0.5;
      float py = position_y + (size_y-h)*0.5 + sin(anim_counter)*(size_y-h)*0.25;
      Render.drawFilledBox(position_x, position_y, size_x, size_y, 0xff666666);
      Render.drawFilledBox(px, py, w, h*0.125, 0xffffffff);
      Render.drawFilledBox(px, py+h*0.25, w, h*0.75, 0xffffffff);
      Render.drawRectangle(position_x, position_y, size_x, size_y, 0xffffffff);

      anim_counter += 0.1234 * dt;
      if(anim_counter >= PI)
         anim_counter -= PI;
   }

   public virtual drawOverlays(float dt) {

      zglInit2D(Viewport.width, Viewport.height);

      float px = (Viewport.width - message_sx) * 0.5;
      float py = (Viewport.height - message_sy) * 0.5;

      float rel = hide_countdown / HIDE_TIMEOUT;

      glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
      glEnable(GL_BLEND);
      int c32clear;
      if(rel > 0.8)
      {
         c32clear = argb(0x70*mathSmoothStepf(1,0, (rel-0.8)*(1.0/0.2)), 0, 0, 0);
      }
      else if(rel < 0.4)
      {
         c32clear = argb(0x70*mathSmoothStepf(0,1, (rel)*(1.0/0.4)), 0, 0, 0);
      }
      else
      {
         c32clear = 0x70000000;
      }
      zglColorARGB(c32clear);
      glBegin(GL_QUADS);
      glVertex2f(0, 0);
      glVertex2f(Viewport.width, 0);
      glVertex2f(Viewport.width, Viewport.height);
      glVertex2f(0, Viewport.height);
      glEnd();

      int c32fg = argb(rel*255, 255, 255, 32);
      int c32bg = argb(rel*255, 0x33, 0x33, 0x33);
      DebugText.Draw(px, py, message, c32fg, c32bg);

      glDisable(GL_BLEND);
   }

   public virtual hitBy(Entity _o) : int {

      if(_o instanceof Player)
      {
         if(hide_countdown  < (0.4*HIDE_TIMEOUT))
         {
            hide_countdown = HIDE_TIMEOUT;
         }
         else if(hide_countdown < (0.8*HIDE_TIMEOUT))
         {
            hide_countdown = 0.8 * HIDE_TIMEOUT;
         }
         g_ingame.showOverlay(this);
      }

      return 0;
   }

}
