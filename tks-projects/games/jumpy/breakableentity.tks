
module MBreakableEntity;

namespace jumpy;

class BreakableEntity : BoxEntity  {

   float respawn_interval;
   float respawn_timeout;
   boolean b_respawnable;
   boolean b_megastomp; // true=only breakable at high fall speed
   boolean b_broken;

   public static NewBreakableEntity(float x, y, boolean _bMegastomp) : BreakableEntity {
      BreakableEntity b <= new BreakableEntity;
      b.initBreakableEntity(x,y, _bMegastomp);
      return deref b;
   }

   public method initBreakableEntity(float x, y, boolean _bMegastomp) {
      b_megastomp = _bMegastomp;
      setEntityPosition(x, y);
      setEntitySize(6-1, 6-1);
      if(b_megastomp)
      {
         color32 = #ff994444;
      }
      else
      {
         color32 = #ff4444aa;
      }
      b_respawnable = false;
      b_broken = false;
      respawn_timeout = 0;
      respawn_interval = 87;
      reset_b_visible = true;
   }

   public virtual hitBy(Entity _o) : int {
      if(b_broken)
      {
         return 0;
      }
      else
      {
         if(_o instanceof Player)
         {
            Player *p <= _o;
            if(p.b_stomping)
            {
               if(p.stomp_timeout > (b_megastomp ? Player.STOMP_BIG : Player.STOMP_SMALL))
               {
                  // fast enough to smash this block
                  ///trace "xxx crashthru: stomp_timeout="+p.stomp_timeout;
                  b_broken = true;
                  return 0;
               }
            }
         }
         return BoxEntity::hitBy(_o);
      }
   }

   public method calc(float dt) {
      //BoxEntity::calc(dt);
      if(b_respawnable)
      {
         if(respawn_timeout > 0)
         {
            respawn_timeout -= dt;
            if(respawn_timeout <= 0)
            {
               respawn_timeout = 0;
            }
         }
      }
   }
   
   public virtual draw(float dt) {
      
      Render.drawFilledBox(position_x, position_y, size_x, size_y, color32);

      if(!b_broken)
      {
         glLineWidth(4.0);
         Render.drawRectangle(position_x, position_y, size_x, size_y, #ffffffff);
         glLineWidth(2.0);
         glBegin(GL_LINES);
         glVertex2f(position_x, position_y);
         glVertex2f(position_x+size_x, position_y+size_y);
         glVertex2f(position_x+size_x, position_y);
         glVertex2f(position_x, position_y+size_y);
         glEnd();
         glLineWidth(1.0);
      }
   }

}
