// table layout test

style default {
  fgcolor = #000000
  bgcolor = #eeeeee
}

style tbl_hdr {
  fgcolor = #998
  bgcolor = #000000
}

style tbl_inv {
  fgcolor = #ffffff
  bgcolor = #000000
}

style tbl_small {
  fgcolor = #555555
  bgcolor = #eeeeee
}

style tbl_big {
  fgcolor = #557777
  bgcolor = #eeffff
}

grid = 24,4

a->b

// (note) table sub graphs look like a single cell to other graphs
// (note) layouting merely affects the _inner_ node placement of the sub graph cell
graph T {
   layout=table;  // enable table mode

   // table layout:
/*
   row="a b c";
   row="defgh";
   row="i  j ";
   row="k    ";
   // => a/b/j span two columns. c/d/e/f/g/h span 1 column. i spans 3 columns. k spans 5 columns.
   */
   row="a b c";
   row="defgh";
   row="i j  ";
   row="k    ";

   // table cell details:
   style=tbl_hdr;
   a "Header Cell A" [bgcolor=#eef2ee];
   b "Header Cell B" [bgcolor=#def2f2];
   c "Header Cell C" [bgcolor=#f2f2de];

   style=tbl_small;
   d "Small Cell D" [bgcolor=#e0f0e0];
   e "Small Cell E" [bgcolor=#d0f0f0];
   f "Cell F"       [class=tbl_inv];
   g "Small Cell G" [bgcolor=#f0e0e0];
   h "Small Cell H" [bgcolor=#e0e0d0];

   style=tbl_big;
   i "Big Cell I" [bgcolor=#d0d0d0];
   j "Big Cell J" [bgcolor=#c0d8d8];
}

b->T

/*
x create size group for each x-span
   - sgx_<x>_<w>
x when adding layers, 

- add helper nodes when row starts with whitespace
   ! e.g. "def"
          "  i"
       => "def"
          "__i"

- after adding layers, call pTable.relayout() to determine initial layer sizes

- iterate spans from largest to smallest
   - iterate other rows and find nodes/layers within x-span
      - when node starts span, span end must not exceed x-span end
      - calc max px width (all rows)
   - iterate other rows and find nodes/layers within x-span
      - when node starts span, span end must not exceed x-span end
      - if px width is < max px width
         - evenly distribute delta-x to layers (and setRequiredSizeX())


x iterate spans from smallest to largest
   - find next span that starts at same x and has same span_w
   - resize smaller(px) span to larger span
      - evenly distribute added px to span nodes
         ! e.g. "a "
                "de"
   - loop: find next larger span that starts at same x
      ! e.g. "def"
             "i  .
   -  
   - set required sizex of 


- !!! distinguish extra_w after node and span_w

*/
