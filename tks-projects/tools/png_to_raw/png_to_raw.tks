// 22Jun2022, 03Oct2025

use tkopengl;


function Usage() {
   trace "png_to_raw [-a,--alpha] <input.png> <argb32_output.bin>";
   exit(10);
}

if(Arguments.numElements < 2)
   Usage();

boolean bAlpha = false;

int argIdx = 0;

switch(Arguments[0])
{
   case "-a":
   case "--alpha":
      bAlpha = true;
      argIdx++;
      break;
}

if(Arguments.numElements < (argIdx+2))
   Usage();

Texture tex;
if(tex.loadLocalImage(Arguments[argIdx+0], 0, 0, 4))
{
   File f;
   f.byteOrder = YAC_LITTLE_ENDIAN;
   if(f.openLocal(Arguments[argIdx+1], IOS_OUT))
   {
      int y = 0;
      loop(tex.sy)
      {
         int x = 0;
         loop(tex.sx)
         {
            int c32 = tex.getXY32(x++, y);
            if(bAlpha)
            {
               // // l = (r*0.2 + g*0.7 + b*0.1)
               byte l = ( ((c32 >> 16)&255) + ((c32 >> 8)&255) + (c32&255) ) / 3;
               f.i8 = l;
            }
            else
            {
               f.i32 = c32;
            }
         }
         y++;
      }

      f.close();

      trace "[...] wrote \""+Arguments[argIdx+1]+"\" (raw "+(bAlpha?"A8":"ARGB32 little endian")+")";
   }
   else
   {
      trace "[---] failed to open output file \""+Arguments[argIdx+1]+"\" for writing";
      exit(10);
   }
}
else
{
   trace "[---] failed to load input image \""+Arguments[argIdx+0]+"\"";
   exit(10);
}
