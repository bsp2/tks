!%dog The DOG manual

!:TitlePage(DOG, The TkScript DOcument Generator, - (c!\) 2005-2008 by Bastian Spiegel)

Last modified: !:CurrentDate()

%%toc%%



!.intro Introduction

Welcome to DOG, the TkScript document generator !

!.goals Goals
DOG was created with the following design aspects in mind:
!$list
- Full cross-referencability: Make it possible to e.g. cross reference API documentation from supplementary documents
- Automatically generate a table of contents for each supplementary document
- Be as output format independent as possible
- Be extensible by user defined functions
!$$
!;List($list)
!/goals

!.license License
DOG is distributed under terms of the !:Code(GNU General Public License). Please see !:Code(COPYING) for details.
!/license

!.status Status
DOG is !:B(WORK IN PROGRESS). A lot of things are still unfinished and in general the output files look very unpolished!
!/status

!/intro


!***************************** usage
!.usage Usage

!.api Extracting API documentation
Before any HTML documents can be generated, the API documentation first has to be extracted from
a TkScript respectively C++ project. 


When the API documentation is extracted, raw documentation data will be dumped to the stdout stream.


This documentation data is then usually piped into the !:Code(dog.tkx) application in order to generate
a set of HTML output files.


In the following examples, the documentation data is captured into !:Code(.ee) files. These files will
later be linked together so that they can cross reference each other resp. be referenced in the supplementary
documentation files.


!.tks Extracting documentation data from a TkScript project
To extract documentation from a TkScript project, use the following command:
!$text
$ tks -ee myproject >myscriptproject.ee
!$$
!:Pre($text)
!/tks

!.cpp Extracting documentation data from a C++ project
To extract documentation from a C++ project, use the following command:
!$text
$ tks app:dog++ *.h >mynativeproject.ee
!$$
!:Pre($text)
!/cpp

!/api

!.user Generating supplementary documents
DOG supports an output-format independent document description language that is used
to write hierarchical text documents like e.g. user guides or tutorials.


To transform these text documents into HTML files use the following command:
!$text
$ tks app:dog myuserguide.dog
!$$
!:Pre($text)

This will generate a file !:Code(myuserguide.html) in the current directory.


!/user

!.link Linking API documentation and supplementary documents
!:WIP(Not implemented!\, yet)

It will probably look like this:
!$text
$ tks app:dog myscriptproject.ee mynativeproject.ee myuserguide.dog
!$$
!:Pre($text)
!/link

!/usage



!***************************** API documentation

!.api API documentation

!.tks Inline TkScript API documentation
The !:Code(explain) keyword is used to embed inline documentation in TkScript source files.

Example:

!$text 
module Main;

explain "The first line contains the short description (synopsis) for the current context.";

function Test() {
  explain "Synopsis for function @this.";
}

class CTest {
  explain "Synopsis for class @this.";

  test() {
    explain "Synopsis for method @this";
  }

  static Test() {
    explain "Synopsis for function @this";
  }
} 
!$$
!:Example($text)

Please notice that the !:Code(explain) statement documents the !:B(last) module, class, define, function or method.

!/tks



!.cpp Inline C++ API documentation
C++ API documentation has to be embedded in !:Code(/* .. */) comments. Example:

!$text
/* @class StdErrStream,Stream

Represents the stderr output stream.

@see StdInStream
@see StdOutStream

*/
YC class _StdErrStream : public YAC_StdErrStream { 
public: 
   YAC_POOLED(_StdErrStream, YAC_POOL_PRIORITY_LOW); 
   
/* @method isOpen:boolean

Check whether the stream is open (always true).

@return 1(true)
*/
   YM //sSI  isOpen    (void); 

/* @method flush

Write pending/cached output buffers into the stream.
*/
      YM //void flush     (void); 
}; 
!$$
!:Example($text)

Please notice that the documentation parser does !:B(not) parse the actual C resp. C++ code,
it basically looks only at the comments !

!/cpp


!.keywords Keywords
The following keywords (or "tags") can be used in TkScript or C++ inline documentation. 

!.arg @arg
Syntax:
!$text @arg argName desc !$$
!:Pre($text) - Used to describe an argument if the current context object is a function or method. The tag may occur at most one time for each argument.
!/arg

!.author @author
Syntax:
!$text @author string !$$
!:Pre($text) - Used to specify the author of the given object. The tag may occur 0..1 times.
!/author

!.date @date
!$text @date string !$$
!:Pre($text) - Used to describe the history of the given object. The tag may occur 0..n times.
!/date

!.deprecated @deprecated
!$text @deprecated reason !$$
!:Pre($text) - Used to mark the current context object as outdated (i.e. not to be used anylonger in new code). Currently only allowed for functions and methods. The tag may occur 0..1 times.
!/deprecated

!.return @return
!$text @return desc !$$
!:Pre($text) - Used to describe the return type if the current context object is a function or method. The tag may occur 0..1 times.
!/return

!.since @since
!$text @since version !$$
!:Pre($text) - Used to specify since when the current context object has been available. Currently only allowed for functions and methods. The tag may occur 0..1 times.
!/since

!.this @this
The special string !:Code(@this) will be replaced by the name of the current context object.
!/this


!/keywords

!.include Including files
External files can be included by using backticks. 


Example:
!$text
`some_file.txt
!$$
!:Example($text)

!/include

!/api


!.doc Document generator

!***************************** pages
!.page Pages
Each supplementary document should be put in a separate file.
The first line of that file must look like this:
!$text !%<page_name> <page_title> !$$
!:Pre($text)


Example:

!$text !%dog The DOG manual !$$
!:Example($text)

!/page

!***************************** comments
!.comment Comments
The !:Print(!*) keyword is used to prevent the DOG page parser from parsing anything until the end of the current line.


Example:
!$text
!.mynode
!* this is a comment that will not appear in the output file
!/mynode
!$$
!:Example($text)

!/comment

!***************************** nodes
!.node Nodes

!.open Opening a new node
The !:Print(!.) keyword is used to begin a new (sub-) node.


The syntax is:
!$text
!.mynode Title of my node
!$$
!:Pre($text)
!/open

!.close Closing a node (unchecked)
To close a node without validating the hierarchy level, the following syntax is used:
!$text
!/
!$$
!:Pre($text)


Example:
!$text
!.mynode Title of my node    !* open a new node
!/                           !* close the node 
!$$
!:Example($text)

!/close


!.close Closing a node (checked)
Once a document has reached a certain size, it becomes not so obvious which node will actually be closed by the !:Print(!/) keyword.

DOG therefore provides a simple mechanism to verify that the correct node is closed. 


Example:

!$text
!.mynode Title of my node              !* open a new node
!.myothernode Title of my other node   !* open another node
!/myothernode                          !* close node and make sure that the current node is "myothernode"
!/mynode                               !* close node and make sure that the current node is "mynode"
!$$
!:Example($text)

!/close

!/node


!***************************** links
!.link Links

Links to nodes within supplementary documents or to API entries (classes, functions, methods) can be inserted
by using the !:Code(!\§) keyword.

!.fqlink Fully qualified links
A fully qualified link includes the complete path to the given documentation element.


Example:
!$text !\§dog.doc.link.fqlink !$$
!:Example($text)
Will create the following link: §dog.doc.link.fqlink.
!/fqlink

!.bestmatch Best match links
When the name of a node is unique, a shortpath can be used. 


Example:
!$text !\§bestmatch !$$
!:Example($text)
Will create the following link: §bestmatch.


It is possible to restrict the best-match search to a specific document. 


Example:
!$text !\§dog.bestmatch !$$
!:Example($text)
Will create the following link: §dog.bestmatch.

!/bestmatch

!/link

!***************************** macro
!.macro Macros
Macros are used to abbreviate and even parametrize recurring text blocks.

!.named Defining a named macro
The !:Print(!$) keyword is used to start a macro definition. 


Example:
!$x
!$macroname    !* start definition of "macroname"
macrotext      !* ..
!\!$$            !* end macro definition
!$$
!:Example($x)

!/named

!.call Calling a named macro
The !:Print(!$?) keyword is used to call a macro and add its output as regular text.

The !:Print(!?!) keyword is used to call a macro and add its output as pre-formatted output text (e.g. HTML).


!.callvoid Without arguments
Example:
!$x 
!$x Hippopotomonstrosesquippedaliophobie !\!$$  !* Define macro "x"
!$?x                                          !* call macro "x"
!$$
!:Example($x)
!/callvoid

!.callargs With arguments
Example:
!$x 
!$html_blue <font color="#0000ff">$(1)</font> !\!$$  !* Define macro "html_blue"
!$!html_blue(Some text)                            !* call macro "html_blue"
!$$
!:Example($x)

Will have the following output:
!$html_blue <font color="#0000ff">$(1)</font> !$$
!$!html_blue(Some text)

!/callargs

!/call

!.anon Anonymous macros
In order to just insert some raw HTML code, it is possible to insert anonymous macros. 


Example:
!$x
!$! <p style="color: red">Some paragraph!</p> !\!$$
!$$
!:Example($x)

Will have the following output:
!$! <p style="color: red">Some paragraph</p> !$$
!/anon


!/macro


!***************************** functions
!.fun Functions
It is possible to embed TkScript function calls in documentation pages.
These functions can generate either regular text or pre-formatted (HTML) text
when they are called.


A number of functions is already included in the !:Code(dog.tkx) executable.
More (document-specific) functions can easily be added on-the-fly.

!.call Calling a function
The !:Code(!:) and !:Code(!;) keywords are used to call script functions.

!.s1 Text functions
The !:Code(!:) function call inserts regular document text. This text will
be converted to the output format, quicklinks will be replaced et cetera.


Example:
!$x
!:CurrentDate()  !* Insert the current date
!$$
!:Example($x)

!/s1

!.s2 Raw functions
The !:Code(!;) function call inserts text that needs to be pre-formatted for the
current output format (e.g. HTML). 


Example:
!$x
!$mylist         !* define a variable that holds an ASCII list/enumeration
  - item 1
  - item 2
!\!$$              !* end of variable declaration
!;List($mylist)  !* convert ASCII list to HTML
!$$
!:Example($x)

Will have the following output:
!$mylist
  - item 1
  - item 2
!$$
!;List($mylist)
!/s2

!.args Function arguments
Functions can take an arbitrary and variable number of arguments.

!.simplearg Simple arguments
Simple arguments are - simply - strings. 


Example:
!$x
!:B(Some bold text)
!$$
!:Example($x)

Will have the following output:
!:B(some bold text)

!/simplearg

!.macroarg Macro arguments
Example:
!$x
!$mytext Some italic text.. !\!$$
!:I($mytext)
!$$
!:Example($x)
!$mytext Some italic text.. !$$ 
Will have the following output: !:I($mytext)
!/macroarg

!/args

!/call

!.builtin Builtin functions
The following functions are already built into the !:Code(dog.tkx) executable.

Please be aware that this list is just a first draft and may change without notice.

!.Print Print
Simply print the arguments. Sometimes useful to escape the keywords without using the designated escape sequence ( !\ )
!/Print

!.Code Code
!:Code(Preformatted text without linebreaks)
!/Code

!.Pre Pre
!:Pre(
Preformatted text including linebreaks
)
!/Pre

!.B B
!:B(Bold text)
!/B

!.I I
!:I(Italic text)
!/I

!.U U
!:U(Underlined text)
!/U

!.WIP WIP
Used to mark text sections that are !:WIP(WORK IN PROGRESS). This is mainly for the people editing a document.
!/WIP

!.TitlePage TitlePage
Generate a title page for the document. 

The first argument is the document title, the second and third (optional) arguments are the sub-titles.
!/TitlePage

!.List List
Convert an ASCII list to the current output format (HTML).
If a line starts with one of the *+-o characters, a new list item is created.
The whitespace indent level determines the nesting depth of the item.


Example:
!$x
!$t
  * Level0, Item0
    - Level1, Item0
    - Level1, Item1
    - Level1, Item2
  * Level0, Item1
    - Level1, Item0
      - Level2, Item0
        - Level3, Item0
  * Level0, Item2
    - Level1, Item0
      - Level2, Item0
        - Level3, Item0
      - Level2, Item1
    - Level1, Item1
  * Level0, Item3
  * Level0, Item4
!\!$$
!:List($t)
!$$
!:Example($x)

Will have the following output:

!$t
  * Level0, Item0
    - Level1, Item0
    - Level1, Item1
    - Level1, Item2
  * Level0, Item1
    - Level1, Item0
      - Level2, Item0
        - Level3, Item0
  * Level0, Item2
    - Level1, Item0
      - Level2, Item0
        - Level3, Item0
      - Level2, Item1
    - Level1, Item1
  * Level0, Item3
  * Level0, Item4
!$$
!:List($t)

!/List

!.CurrentDate CurrentDate
Inserts the current date (Weekday, DayOfMonth/Month/Year format).


Example:
!:CurrentDate()
!/CurrentDate

!.CurrentTime CurrentTime
Inserts the current time (HourOfDay:Minute:Second format)


Example:
!:CurrentTime()
!/CurrentTime


!/builtin

!.user User defined functions
Any function that shall be callable from within a documentation page needs to
be registered first.


Example:
!$x
function DSA_Test(StringArray _args, String r) {
   r.append("hello, DSA :-)");
}
DSA.RegisterFunction("Test", DSA_Test);
!$$
!:Example($x)


!.add Adding extra script files
Since DOG itself is a TkScript application, users would normally need to extend the !:Code(dog.tkx) executable
to include additional script files.

Since TKS v0.9.10.18, a new commandline option !:Code(-ef!\, --extrafile) has been added that can be used to load extra script sources
in addition to a TkScript executable.


Example:
!$x
$ tks -ef myscript.tks app:dog mydocument.dog
!$$
!:Example($x)
!/add

!/user

!/fun

!************************************** escape
!.escape Escaping the DOG keywords
In order to prevent DOG from falsely intepreting a char sequence as one of its keywords, the following escape sequences
can be used:

!$list
  - "!!\\," escapes the ',' character (e.g. in function or macro argument lists)
  - "!!\\)" escapes the ')' character (also useful in argument lists)
  - "!!\\!\§" escapes the '!\§' character
  - "!!\\!" escapes the '!' character
  - "!!\\\" escapes the '\' character
!$$
!;List($list)

!/escape


!/doc


