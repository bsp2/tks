//
//   file: dog_dsa.tks
//
// author: (c) 2008 Bastian Spiegel <bs@tkscript.de>
//             - distributed under terms of the GNU general public license (GPL).
//   date: 13-Jun-2008, 14-Jun-2008, 15-Jun-2008, 16-Jun-2008, 18-Jun-2008, 01-Oct-2008
//   info: DSA is the DOG Scripting API
//

module MDOGDSA;


class DSA {

   static HashTable fxns;
   static DOG_Page current_page;

   public static SetCurrentPage(DOG_Page _page) {
      current_page <= _page;
   }

   public static GetCurrentPage() : DOG_Page {
      return current_page;
   }

   public static TextToHTML(String _text, String _out) {
      _out.append( DOG_HTML.TextToHtml(_text, null, null, current_page, null, false, false) );
   }
   
   public static RegisterFunction(String _name, Function f) {
      //trace "xxx DSA.RegisterFunction: name=\""+f.name+"\".";
      fxns[_name] = f;
   }

   public static CallFunction(String _name, StringArray _args, String ret) : String {
      Function f <= fxns.get(_name);
      if(f instanceof Function)
      {
         f.eval({_args, ret});
      }
      else
      {
         trace "[---] DSA::CallFunction: function \""+_name+"\" has not been registered.";
      }
   }
}

function DSA_Test(StringArray _args, String r) {
   r.append("hello, DSA :-)");
}

function DSA_Print(StringArray _args, String r) {
   String t;
   foreach t in _args {
      r.append(t);
   }
}

function DSA_Code(StringArray _args, String r) {
   r.append("<code class=\"dsa\">");
   DSA.TextToHTML(_args[0], r);
   r.append("</code>");
}

function DSA_Pre(StringArray _args, String r) {
   r.append("<table width=\"100%\" border=0><tr><td>");
   r.append("<div class=\"pre\"><pre>");
   DSA.TextToHTML(_args[0], r);
   r.append("</pre></div></td><td width=\"70%\"></tr></table>\n");
}

function DSA_Example(StringArray _args, String r) {
//    r.append("<div class=\"ExampleTitle\">");
//    DSA.TextToHTML(_args[0], r);
//   r.append("</div>\n");
   r.append("<table width=\"100%\" border=0><tr><td>");
   r.append("<div class=\"Example\"><pre>");
   DSA.TextToHTML(_args[0].trim(), r);
   r.append("</pre></div></td><td width=\"100%\"></tr></table>\n");
}

function DSA_A(StringArray _args, String r) {
   String href = _args[0];
   r.append("<a href=\'");
   if(-1 == href.indexOf("://", 0))
   {
      if(href.startsWith("www"))
      {
         href.insert(0, "http://");
      }
      else if(href.startsWith("ftp"))
      {
         href.insert(0, "ftp://");
      }
   }
   r.append(href);
   r.append("\'>");
   if(1 == _args.numElements)
   {
      // Link name=link target
      DSA.TextToHTML(_args[0], r);
   }
   else
   {
      // Have link name
      DSA.TextToHTML(_args[1], r);
   }
   r.append("</a>");
}

function DSA_B(StringArray _args, String r) {
   r.append("<b>");
   DSA.TextToHTML(_args[0], r);
   r.append("</b>");
}

function DSA_I(StringArray _args, String r) {
   r.append("<i>");
   DSA.TextToHTML(_args[0], r);
   r.append("</i>");
}

function DSA_U(StringArray _args, String r) {
   r.append("<u>");
   DSA.TextToHTML(_args[0], r);
   r.append("</u>");
}

function DSA_WIP(StringArray _args, String r) {
   r.append("<font color=\"#aa0000\">");
   if(_args.numElements > 0)
   {
      DSA.TextToHTML(_args[0], r);
   }
   else
   {
      r.append("&lt;documentation incomplete, work in progress&gt;");
   }
   r.append("</font>");
}

function DSA_TitlePage(StringArray args, String r) {
   r.append("\n<div class=\"TitlePage\"><table width=\"100%\" height=\"100%\" border=\"0\">
<tr><td align=center><h1>");
   DSA.TextToHTML(args[0], r);
   r.append("</h1></td></tr>\n");
   if(args.numElements > 1)
   {
      r.append("<tr><td align=center><h2>");
      DSA.TextToHTML(args[1], r);
      r.append("</h2></td></tr>\n");
   }
   if(args.numElements > 2)
   {
      r.append("<tr><td align=center><h4>");
      DSA.TextToHTML(args[2], r);
      r.append("</h4></td></tr>\n");
   }
   r.append("</table></div>\n");
}

function DSA_SmallTitlePage(StringArray args, String r) {
   r.append("\n<div class=\"TitlePage\"><center><table border=\"0\">
<tr><td align=center><div class=\"smalltitle\">");
   DSA.TextToHTML(args[0], r);
   r.append("</div></td></tr>\n");
   if(args.numElements > 1)
   {
      r.append("<tr><td align=center><h2 class=\"smalltitle_2\">");
      DSA.TextToHTML(args[1], r);
      r.append("</h2></td></tr>\n");
   }
   if(args.numElements > 2)
   {
      r.append("<tr><td align=center><h4 class=\"smalltitle_3\">");
      DSA.TextToHTML(args[2], r);
      r.append("</h4></td></tr>\n");
   }
   r.append("</table></center></div>\n");
}

function DSA_List(StringArray _args, String r) {
   //
   // Build HTML list from ASCII
   //
   //   - whitespace count determines nesting level
   //   - bullet chars are *,o,-,+
   //
   StringArray lines <= _args[0].splitChar('\n');
   IntArray indentLevels;
   indentLevels.alloc(16);
   indentLevels.numElements = indentLevels.maxElements;
   indentLevels.fill(-1);
   int numOpen = 0;
   int cLevel = -1; // Current nesting level
   int lastIndent = -1;
   String line;
   foreach line in lines {
      String t;
      String text;
      line.trim() => t;
      if(t.length > 1)
      if("*+-o".indexOfChar(t.getc(0), 0) != -1) // Does the line start with a bullet character ?
      {
         // Count blanks to determine indent level
         int indent = line.charsetIndexOf("*+-o", 0);

         //trace "xxx indent="+indent+" lastIndent="+lastIndent;

         // Extract raw text
         if(t.length > 2)
         {
            t.substring(1, t.length-1) => text;
         }
         else
         {
            text.empty();
         }

         if(indent > lastIndent)
         {
            // Begin new sub-list
            cLevel++;
            indentLevels[cLevel] = indent;
            lastIndent = indent;
            r.append("\n<ul>");
            numOpen++;
            r.append("\n<li>");
            DSA.TextToHTML(text, r);
         }
         else if(indent < lastIndent)
         {
            // Close sub-list(s)
            do {
               numOpen--;
               r.append("</ul>\n");
               if(0 == numOpen)
               {
                  // Whoopsi ?? 
                  return;
               }
               cLevel--;
               if(-1 == cLevel)
               {
                  // Whoopsi ?? 
                  return;
               }
            }
            while(indentLevels[cLevel] > indent);
            
            lastIndent = indent;
            r.append("\n<li>");
            DSA.TextToHTML(text, r);
         }
         else
         {
            // Same level, simple item
            r.append("\n<li>");
            DSA.TextToHTML(text, r);
         }
      }
      else
      {
         // Simply text, add to last item

         DSA.TextToHTML(t, r);
      }
   }
   loop(numOpen)
   {
      r.append("</ul>\n");      
   }
}

function CurrentDate(StringArray args, String r) {
   Time t; t.now();
   r = 
      ((["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"])[t.weekday])+", "+t.monthday+"/"+
      ((["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])[t.month])+"/"+t.year
      ;
}

function CurrentTime(StringArray args, String r) {
   Time t;
   Integer io_h;
   Integer io_m;
   Integer io_s;
   t.now();
   io_h.value=t.hour;
   io_m.value=t.min;
   io_s.value=t.sec;
   r = io_h.printf("%02i")+":"+io_m.printf("%02i")+":"+io_s.printf("%02i");
}

// ---------------------------------------------------------------------------- tks doc tool functions
function TKS_Download(StringArray args, String r) {
   r = "<table border=0><tr><td>";
   r.append("<img src=\"images/download_icon.png\" alt=\"download_icon\"/></td><td>&nbsp;");
   r.append("<a href=\'");
   r.append(args[0]);
   r.append("\'>");
   r.append(args[1]);
   r.append("</a>&nbsp;-&nbsp;<i><small>");
   DSA.TextToHTML(args[2], r);
   r.append("</small></i></td></tr></table>");
}

function TKS_ScreenHack(StringArray args, String r) {
   // arg0: image prefix
   // arg1: short name
   // arg2: tkx link
   // arg3: description
   r = "<table border=0><tr><td>";
   String thumbImage = "images/scr/"+args[0]+"_tmb.png";
   String origImage = "images/scr/"+args[0]+".png";
   r.append("<a target=\"originalsize\" href=\""+origImage+"\"><img border=1 alt=\"\" src=\""+thumbImage+"\"></a></td><td><b>");
   DSA.TextToHTML(args[1], r);
   r.append("</b>");
   //r.append("<br>");
   //r.append("&raquo;");
   r.append("<table border=0><tr><td><img src=\"images/download_tks_icon.png\"></td><td align=center>");
   r.append("<a href=\""+args[2]+"\">Run</a>");
   r.append("</td></tr></table>");
   r.append("</td></tr>\n");
   r.append("<tr><td>&nbsp;</td><td>-&nbsp;");
   DSA.TextToHTML(args[3], r);
   r.append("</td></tr></table>");
  
}



// ---------------------------------------------------------------------------- function registration
DSA.RegisterFunction("Test", DSA_Test);
DSA.RegisterFunction("Print", DSA_Print);
DSA.RegisterFunction("Code", DSA_Code);
DSA.RegisterFunction("Pre", DSA_Pre);
DSA.RegisterFunction("Example", DSA_Example);
DSA.RegisterFunction("A", DSA_A);
DSA.RegisterFunction("B", DSA_B);
DSA.RegisterFunction("I", DSA_I);
DSA.RegisterFunction("U", DSA_U);
DSA.RegisterFunction("WIP", DSA_WIP);
DSA.RegisterFunction("TitlePage", DSA_TitlePage);
DSA.RegisterFunction("SmallTitlePage", DSA_SmallTitlePage);
DSA.RegisterFunction("List", DSA_List);
DSA.RegisterFunction("CurrentDate", CurrentDate);
DSA.RegisterFunction("CurrentTime", CurrentTime);

DSA.RegisterFunction("TKS_Download", TKS_Download);
DSA.RegisterFunction("TKS_ScreenHack", TKS_ScreenHack);
