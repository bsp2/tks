!%evru_userguide eVRU Jacinto Evaluation Kit/SDK - v2.3

!****************************************************************************** title page
!$title
<table width="100%" height="100%" border=0">
<tr><td align=center><h1>eVRU Jacinto Evaluation Kit/SDK - v2.3</h1></td></tr>
</table>
!$$
!$!title

Last modified: !:CurrentDate()

%%toc%%


!****************************************************************************** preface
!.preface Preface

Welcome to the eVRU/Jacinto evaluation kit / SDK !


eVRU, the embedded vector rendering unit, is a rendering component that was especially designed for high quality 2.5d graphics rendering. 

This makes it very suitable for applications like map rendering or graphical user interfaces.


The main features of eVRU are:

!$list
    * High quality, anti-aliased points, lines, triangles and polygons
    * Depth attenuated dots
    * Variable width 3d lines
    * Line patterns
    * Bevel, round and Miter line connections
    * Gouraud shaded, textured and zbuffered triangles
    * Alpha and color blending
    * Normal, stretched and rotated bitmap blits. Rotated blits support subpixel precision.
    * RGB565, (A)RGB32, RGB24, Alpha/Lum 8 bitmap formats; supports separate alpha channel bitmaps
    * High quality dithering (postprocessing)
    * OpenGL-ES alike rendering/transformation pipeline
    * Commandlist based rendering interface
    * Accelerated by the C64+ DSP; fill rate up to ~400 megapixel/second
    * Delivered as an XDAIS compliant algorithm 
!$$
!:List($list)

In order to support application programming with eVRU, a number of additional components is provided with this SDK:

!$list
    * eCLIB - ARM/DSP shared memory handling; command list management (ARM side)
          o Supports multiple processes by using a client/server architecture
          o For more info, see §eclib
             
    * CAFE - C API to create render commandlists and allocate bitmaps (ARM side)
          o Also includes sub-components to help with display/screen/timer handling, 
            virtual file systems and PNG image loading
          o Includes an API for the VPSS display driver
             
    * OpenGL|ES / EGL - Implementation of the OpenGLES1.1 rendering API. (ARM side)
          o Includes some eVRU specific extensions to support blits, 3d lines, line joints and polygons.
          o Built on top of CAFE
          o EGL supports rendering to hardware and virtual layers
          o Automatic conversion of RGB565A8 alpha channel to the hardware alpha3 layer (attribute mode)
             
    * VPSS driver - Display driver for the Jacinto VPSS hardware (DSP side)
          o Up to 4 hardware layers (RGB565, Alpha3, RGB24, YCbCr422)
          o Video and layer mode configuration
          o Layer positions / sizes are configurable
          o Support for global transparency, colorkey transparency and per-pixel transparency
          o Background color configurable
          o OSD layer zoom (x2, x4)
             
    * loaddspimage - ARM side utility to load/start the DSP image and configure the shared memory pool configuration. 
!$$
!:List($list)

Last but no least, a Microsoft Windows port of most of the above components is available to shorten development/debug turn-around times. The Windows port is included with this release. 


!.overview Component overview
Some text in the "overview" node...

!.eclib The eCLIB component
Some text in the "eclib" node....
!/eclib

!.libscreen The libscreen component
Some text in the "libscreen" node....
!/libscreen

!.cafe The CAFE component
Some text in the "cafe" node....

!.cafe_x_hal cafe_x_hal
Some text in the "cafe_x_hal" node....
!/

!.cafe_x_vfs cafe_x_vfs
Some text in the "cafe_x_vfs" node....
!/

!.cafe_x_img cafe_x_img
Some text in the "cafe_x_img" node....
!/

More text in the "cafe" node....
!/cafe

!.ogles The EGL/OpenGL|ES components
Some text in the "ogles" node....
!/

!.evru The eVRU component
Some text in the "evru" node....
!/

More text in the "overview" node....
!/overview

!.arch Architectural overview
Some text in the "arch" node....
!/arch

!.links Link test

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.


Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.


Here's a link to the page itself: §evru_userguide.

Fully qualified link to OpenGL|ES sub-node: §preface.overview.ogles

Fully qualified link to cafe_x_hal sub-node: §preface.overview.cafe.cafe_x_hal

Best match link to evru sub-node: §evru

Best match link to cafe sub-node: §evru_userguide.cafe
!/links

!.list_test List test
This is a test for the "List" DSA function:
!$t
  * Level0, Item0
    - Level1, Item0
    - Level1, Item1
    - Level1, Item2
  * Level0, Item1
    - Level1, Item0
      - Level2, Item0
        - Level3, Item0
  * Level0, Item2
    - Level1, Item0
      - Level2, Item0
        - Level3, Item0
      - Level2, Item1
    - Level1, Item1
  * Level0, Item3
  * Level0, Item4
!$$
!:List($t)

!/list_test


!.macro_test Macro test

!$code <code>$(1)</code> !$$
Output of code macro: !$!code(test)

!$a a_macro !$$
!$b b_macro !$$
!$c c_macro !$$

Output of a_macro: !$!a
Output of b_macro: !$!b
Output of c_macro: !$!c

!$mymacro First macro test !$$
Output of !$!code(mymacro): !$?mymacro


!$bold <b>$(1)</b> !$$
Output of !$!code(bold) macro: !$!bold(Hello,, bold world.)

!$color <font color="$(1)">$(2)</font> !$$
Output of !$!code(color) macro: !$!color(#ff0000, Hello,, red world.)

!$! <center><pre>anonymous macro text</pre></center> !$$


!/macro_test


!.final Final word
bla
!/final

!/preface



