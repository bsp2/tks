// ----
// ---- file   : dog_main.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2005-2025 by Bastian Spiegel.
// ----
// ----           This program is free software; you can redistribute it and/or modify
// ----           it under the terms of the GNU General Public License as published by
// ----           the Free Software Foundation; either version 2 of the License, or
// ----           (at your option) any later version.
// ----
// ----           This program is distributed in the hope that it will be useful,
// ----           but WITHOUT ANY WARRANTY; without even the implied warranty of
// ----           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// ----           GNU General Public License for more details.
// ----
// ----           You should have received a copy of the GNU General Public License
// ----           along with this program; if not, write to the Free Software
// ----           Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// ----
// ----
// ---- info   : 'DOG' is the tkScript _do_cumentation _g_enerator.
// ----
// ----             Usage: tks -ee <script> | tks dog
// ----
// ---- created: 15Dec2005
// ---- changed: 22Dec2005, 24Dec2005, 04Jan2006, 06Jan2006, 07Jan2006, 17Jan2006, 18Jan2006
// ----          01Mar2008, 02Mar2008, 13Jun2008, 14Jun2008, 22Jun2008, 15Sep2008
// ----
// ----
// ----

module Main;


// Page input files
StringArray page_files;


function ParseArguments() {
   //
   // Parse option/value pairs
   //
   page_files.empty();

   int argi;
   for(argi = 0; argi < Arguments.numElements; argi++)
   {
      String argName = Arguments[argi], argVal;

      switch(argName)
      {
         case "-fp":
         case "--fileprefix":
            if(argi < Arguments.numElements)
            {
               argVal = Arguments[++argi];
               if(-1 != argVal.charsetIndexOf("/:\\*\"\'", 0))
               {
                  die "[---] dog: invalid character found in file prefix.";
               }
               else
               {
                  DOG.file_prefix = argVal;
               }
            }
            else
            {
               die "[---] dog: failed to parse argVal.";
            }
            break;

         default:
            if(argName.startsWith("-"))
            {
               die "[---] dog: unrecognized cmdline option \""+argName+"\".";
            }
            else
            {
               page_files.add(argName);
            }
            break;
      }
   }

}

function main() {

   int t = milliSeconds();

   DOG.Init();

   ParseArguments();

   if(0 == page_files.numElements)
   {
      String eeBuf;
      // Read documentation data from stdin if no arguments are given
      StdInStream.readString(eeBuf, 1024*1024);
      eeBuf.replaceChar(13,0);
      if(DOG.ParseEE(eeBuf, null))
      {
         DOG_HTML.Output();

         trace "[...] API HTML output generated.";
      }
   }
   else
   {
      DOG.ParseFiles(page_files);

      t = milliSeconds() - t;
      trace t + "ms to parse input files";

      DOG.ResolvePageXRef();
      DOG.WriteHTMLPages(); // Generate/write page files
      DOG_HTML.Output(); // Generate/write API pages

      t = milliSeconds() - t;
      trace "[...] output file generation took "+t+"ms ("+DOG.GetNumPages()+" page(s), "+DOG.GetNumClasses()+" class(es), "+DOG.GetNumProjects()+" project(s), "+DOG.GetNumNamespaces()+" namespace(s)";

      DOG.WriteChecksumCache();
   }

}
