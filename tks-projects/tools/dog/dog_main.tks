//
//   file: dog_main.tks
//
// author: (c) 2005-2008 Bastian Spiegel <bs@tkscript.de>
//             - distributed under terms of the GNU general public license (GPL).
//   date: 15-Dec-2005, 22-Dec-2005, 24-Dec-2005, 4-Jan-2006, 6-Jan-2006, 7-Jan-2006, 17-Jan-2006, 18-Jan-2006, 01-Mar-2008
//         02-Mar-2008, 13-Jun-2008, 14-Jun-2008, 22-Jun-2008, 15-Sep-2008
//   info: DOG is the tkScript _do_cumentation _g_enerator.
//  usage: tks -ee <script> | tks dog
//

module Main;

// Page input files
StringArray page_files;



function ParseArguments() {
   //
   // Parse option/value pairs
   //
//    trace "xxx Arguments.numElements="+Arguments.numElements;
//    if(Arguments.numElements & 1)
//    {
//       die "[---] dog: wrong argument count, must be an even number.";
//    }

   page_files.empty();

   int argi;
   for(argi=0; argi<Arguments.numElements; argi++)
   {
      String argName = Arguments[argi], argVal;

      switch(argName)
      {
         case "-fp":
         case "--fileprefix":
            if(argi < Arguments.numElements)
            {
               argVal = Arguments[++argi];
               if(argVal.charsetIndexOf("/:\\*\"\'", 0) != -1)
               {
                  die "[---] dog: invalid character found in file prefix.";
               }
               else
               {
                  DOG.file_prefix = argVal;
               }
            }
            else
            {
               die "[---] dog: failed to parse argVal.";
            }
            break;

         default:
            if(argName.startsWith("-"))
            {
               die "[---] dog: unrecognized cmdline option \""+argName+"\".";
            }
            else
            {
               page_files.add(argName);
            }
            break;
      }
   }

}

function main() {

   int t = milliSeconds();

   DOG.Init();

   ParseArguments();

   if(page_files.numElements == 0)
   {
      String eeBuf;
      // Read documentation data from stdin if no arguments are given
      StdInStream.readString(eeBuf, 1024*1024);
      eeBuf.replaceChar(13,0);
      if(DOG.ParseEE(eeBuf, null))
      {
         DOG_HTML.Output();

         trace "[...] API HTML output generated.";
      }
   }
   else
   {
      DOG.ParseFiles(page_files);

      t = milliSeconds() - t;
      trace t + "ms to parse input files";

      DOG.ResolvePageXRef();
      DOG.WriteHTMLPages(); // Generate/write page files
      DOG_HTML.Output(); // Generate/write API pages

      t = milliSeconds() - t;
      trace t + "ms to write output files";

      DOG.WriteChecksumCache();

   }

}
