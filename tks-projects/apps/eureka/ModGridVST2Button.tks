// ----
// ---- file   : ModGridVST2Button.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 12Feb2018
// ---- changed: 13Feb2018, 15Feb2018, 17Feb2018, 21Feb2018, 22Feb2018, 23Feb2018, 24Feb2018
// ----          28Feb2018, 01Mar2018, 06Mar2018, 26Mar2018, 21May2018, 30May2018, 21Jul2018
// ----          30Jul2019, 26Aug2019, 17Nov2019, 31Oct2020, 01Nov2020, 06Feb2021, 12Dec2021
// ----          31Dec2021, 13Feb2022, 04Mar2023, 08Mar2023, 18Mar2023, 21Apr2023, 08Jul2023
// ----          21Sep2023, 05Nov2023, 22Mar2024, 06Jul2024
// ----
// ----
// ----

module MModGridVST2Button;

use namespace ui;
use namespace st2;


// <class.png>
class ModGridVST2Button : ModGridButton {

   // <method.png>
   public method initVST2Button() {
      initModGridButton();
   }

   // <method.png>
   protected virtual contextMenuAddExtraPatchItems(PopupMenu spm) {
      PopupMenuButton *pmb;

      spm.addSeparator();
      pmb <= spm.addDefaultButton("VST2 param editor..", "patch_generic");
      pmb.setAccelerators("lshift-LMB click", "");

      spm.addSeparator();
      pmb <= spm.addDefaultButton("VST2 patch browser..", "patch_browser");
      pmb.setAccelerators("LMB hold click", "");

      spm.addSeparator();
      pmb <= spm.addDefaultButton("Load FXB / FXP..", "fxstore_load");
      pmb <= spm.addDefaultButton("Save FXB / FXP..", "fxstore_save");
   }

   // <method.png>
   protected virtual contextMenuAddExperimentalSubMenu(PopupMenu pm) {
      PopupMenu *spm;
      PopupMenu *spm2;
      PopupMenuButton *pmb;
      ModVST2 modVST2 <= getUserData();

      pm.addSeparator();
      spm <= PopupMenu.New(pm);
      pmb <= pm.addMenu("Experimental", deref spm);

      pmb <= spm.addCheckButton("Relative param support", modVST2.getEnableRelativeParams(), "relative_params");

      pm.addSeparator();
      spm2 <= PopupMenu.New(spm);
      pmb <= spm.addMenu("Resample", deref spm2);
      pmb.setToolTipCaption("WARNING: may cause crashes. Requires experimental key activation (lctrl-lshift-t)\n\n (note) many plugins do not support dynamic sample-rate changes (some even crash)\n\n (note) many good ones do, though\n (note) can cause (interesting) effects with plugins that do not really support this\n\n (note) try cloning the mod instance if the VST does not recognize the samplerate change immediately");
      pmb <= spm2.addRadioButton("Resample *0.125 (/8)", (0.125 == modVST2.resample_factor), "resample_1");
      pmb.setAccelerators("", "lshift-1");
      pmb <= spm2.addRadioButton("Resample *0.25 (/4)", (0.25 == modVST2.resample_factor), "resample_2");
      pmb.setAccelerators("", "lshift-2");
      pmb <= spm2.addRadioButton("Resample *0.5 (/2)", (0.5 == modVST2.resample_factor), "resample_3");
      pmb.setAccelerators("", "lshift-3");
      pmb <= spm2.addRadioButton("Resample *0.75", (0.75 == modVST2.resample_factor), "resample_4");
      pmb.setAccelerators("", "lshift-4");
      pmb <= spm2.addRadioButton("Resample *1.25", (1.25 == modVST2.resample_factor), "resample_5");
      pmb.setAccelerators("", "lshift-5");
      pmb <= spm2.addRadioButton("Resample *1.5", (1.5 == modVST2.resample_factor), "resample_6");
      pmb.setAccelerators("", "lshift-6");
      pmb <= spm2.addRadioButton("Resample *2.0", (2.0 == modVST2.resample_factor), "resample_7");
      pmb.setAccelerators("", "lshift-7");
      pmb <= spm2.addRadioButton("Resample *2.5", (2.5 == modVST2.resample_factor), "resample_8");
      pmb.setAccelerators("", "lshift-8");
      pmb <= spm2.addRadioButton("Resample *3.0", (3.0 == modVST2.resample_factor), "resample_9");
      pmb.setAccelerators("", "lshift-9");
      pmb <= spm2.addRadioButton("Resample *4.0", (4.0 == modVST2.resample_factor), "resample_0");
      pmb.setAccelerators("", "lshift-0");
      pm.addSeparator();
      pmb <= spm2.addCheckButton("Restore Resampler on init0", modVST2.b_resample_init, "resample_init");
      pmb.setToolTipCaption(" (note) Runtime vs Init resampler initialization may lead to different sounds (depends on plugin)");
      pmb.setToolTipCaption(" (note) if you like the \"wrong\" sound after sample-rate change, do not enable this option");
   }

   // <ui_handle.png>
   public virtual handleEditMod() : boolean {
      provideAction(Action.New(getProvidedActionAlias(ACTION_TOGGLE_EDITOR), this));
      return true;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {

      String acName <= _action.getActionName();
      ActionProvider ap <= _action.getActionProvider();

      // trace "xxx ModGridVST2Button: acName="+acName;

      Mod mod <= getUserData();
      ModVST2 modVST2 <= mod;

      switch(@(ap))
      {
         case @(pm_context):
            Global.Debug2("ModGridVST2Button: pm_context acName="+acName);
            if(PopupMenu.IsFocusAction(_action))
               return true;
            if(ModGridButton::consumeAction(_action))
               return true;
            switch(acName)
            {
               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "relative_params":
                  mod.setEnableRelativeParams(!mod.getEnableRelativeParams());
                  Global.Print("Mod "+mod.getName()+" relative param support is "+Utils.GetEnableString(mod.getEnableRelativeParams()));
                  return true;

               case "patch_generic":
                  modVST2.showGenericParamDialog();
                  return true;

               case "patch_browser":
                  parent_modgrid.showPatchBrowserDialogVST2(mod);
                  return true;

               case "fxstore_load":
                  parent_modgrid.handleFXStoreLoad(mod);
                  return true;

               case "fxstore_save":
                  parent_modgrid.handleFXStoreSave(mod);
                  return true;

               case "resample_1":
                  if(PageTrack.b_experimental_keys)
                     mod.toggleResample(0.125);
                  return true;

               case "resample_2":
                  if(PageTrack.b_experimental_keys)
                     mod.toggleResample(0.25);
                  return true;

               case "resample_3":
                  if(PageTrack.b_experimental_keys)
                     mod.toggleResample(0.5);
                  return true;

               case "resample_4":
                  if(PageTrack.b_experimental_keys)
                     mod.toggleResample(0.75);
                  return true;

               case "resample_5":
                  if(PageTrack.b_experimental_keys)
                     mod.toggleResample(1.25);
                  return true;

               case "resample_6":
                  if(PageTrack.b_experimental_keys)
                     mod.toggleResample(1.5);
                  return true;

               case "resample_7":
                  if(PageTrack.b_experimental_keys)
                     mod.toggleResample(2.0);
                  return true;

               case "resample_8":
                  if(PageTrack.b_experimental_keys)
                     mod.toggleResample(2.5);
                  return true;

               case "resample_9":
                  if(PageTrack.b_experimental_keys)
                     mod.toggleResample(3.0);
                  return true;

               case "resample_0":
                  if(PageTrack.b_experimental_keys)
                     mod.toggleResample(4.0);
                  return true;

               case "resample_init":
                  mod.toggleResampleInit();
                  return true;
            }
            return true;
      }
      return ModGridButton::consumeAction(_action);
   }

}
