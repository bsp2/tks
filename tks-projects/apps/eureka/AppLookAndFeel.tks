// ----
// ---- file   : AppLookAndFeel.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2022 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- changed: 28Nov2018, 29Nov2018, 30Nov2018, 01Dec2018, 02Dec2018, 05Dec2018, 28Dec2018
// ----          30Jan2021, 11Jan2022
// ----
// ----
// ----

module MAppLookAndFeel;

use namespace ui;
use namespace st2;


// <class.png>
abstract class AppLookAndFeelDefs {

   // -------- Miscellaneous --------

   // -------- Level Indicator --------
   define int COLOR_LEVELINDICATOR_RED             = 100;
   define int COLOR_LEVELINDICATOR_YELLOW          = 101;
   define int COLOR_LEVELINDICATOR_GREEN           = 102;
   define int COLOR_LEVELINDICATOR_GREEN_CLIP      = 103;
   define int COLOR_LEVELINDICATOR_DB_TEXT_FG      = 104;
   define int COLOR_LEVELINDICATOR_NOT_CUR_BG      = 105;
   define int COLOR_LEVELINDICATOR_PEAK_FG         = 106;

   // -------- Cycle Machine Editor --------
   define int COLOR_CYCLE_ERR_HL                   = 200;

   define int TOTAL_NUM_COLORS = 5000;
}


// <class.png>
abstract class AppLookAndFeel : AppLookAndFeelDefs {

   IntArray colors;

   boolean b_bezieredit_draw_tabfocus_border;


   public method initAppLookAndFeel() {
      initColors();
   }

   protected method initColors() {
      colors.alloc(TOTAL_NUM_COLORS);
      colors.useAll();
      colors.fill(#ffff00ff);
   }

   public method getColor(int _colorIndex) : int {
      return colors.get(_colorIndex);
   }

   public method getColorAlpha(int _colorIndex, byte _alpha) : int {
      int c32 = colors.get(_colorIndex);
      return (c32&0x00ffffff) | ((_alpha&255)<<24);
   }

   public method getTintedColor(int _lnfIdx, int _tint32) : int {
      int c32 = colors.get(_lnfIdx);
      if(_tint32) // Colorize ?
      {
         c32 = UI.MixColor32(c32, 0xff000000 | (_tint32&0x00FFFFFF), ((_tint32>>24)&255)/255.0);
      }
      return c32;
   }

   public method lnfGetTintedColor(int _lnfIdx, int _tint32) : int {
      int c32 = UI.lnf_colors.get(_lnfIdx);
      if(_tint32) // Colorize ?
      {
         c32 = UI.MixColor32(c32, 0xff000000 | (_tint32&0x00FFFFFF), ((_tint32>>24)&255)/255.0);
      }
      return c32;
   }

   public method setColor(int _colorIndex, int _c32) {
      // for user defined color tweaks (e.g. when color grading is enabled)
      colors[_colorIndex] = _c32;
   }
}


// <class.png>
class AppLookAndFeel_Dark : AppLookAndFeel {

   public method initAppLookAndFeel() {
      AppLookAndFeel::initAppLookAndFeel();

      b_bezieredit_draw_tabfocus_border = false;
   }

   protected virtual initColors() {
      AppLookAndFeel::initColors();

      // -------- Miscellaneous --------

   // -------- Level Indicator --------
      colors[COLOR_LEVELINDICATOR_RED]        = #ffff0000;
      colors[COLOR_LEVELINDICATOR_YELLOW]     = #ffffC000;
      colors[COLOR_LEVELINDICATOR_GREEN]      = #ff00ff00;
      colors[COLOR_LEVELINDICATOR_GREEN_CLIP] = #ffFF3f3f;
      colors[COLOR_LEVELINDICATOR_DB_TEXT_FG] = #ff9f9f9f;
      colors[COLOR_LEVELINDICATOR_NOT_CUR_BG] = #c0000000;
      colors[COLOR_LEVELINDICATOR_PEAK_FG]    = #c0ffffff;

      colors[COLOR_CYCLE_ERR_HL]              = #20dd4444;
   }

}
