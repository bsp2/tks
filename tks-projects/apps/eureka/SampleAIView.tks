// ----
// ---- file   : SampleAIView.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2023-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 11Mar2023
// ---- changed: 04Oct2023, 13Sep2025
// ----
// ----
// ----

module MSampleAIView;

use namespace ui;
use namespace st2;


// <class.png>
class SampleAIView : Panel {
   StSample *sample;
   float sample_rate;

   public method showSample(StSample _sample) {
      sample <= _sample;
   }

   public virtual getDefaultPreferredSizeY() : float {
      return 17;
   }

   protected method octToFc(float r) : float {
      r = mathPowerf(2.0f, r);
      float fc;
      if(r > 1.0f)
      {
         float invRate = (1.0f / r);
         fc = mathPowerf(invRate, sample.aiExpUp);
         float cRateOct = log(r) / log(2.0);
         float fcLin;
         if(cRateOct > sample.aiLinOct)
            fcLin = sample.aiLinMax;
         else
            fcLin = (sample.aiLinOct > 0.0f) ? ((cRateOct * sample.aiLinMax) / sample.aiLinOct) : 0.0f;
         fc += fcLin;
      }
      else if(r < 1.0)
      {
         fc = mathPowerf(r, sample.aiExpDown);
      }
      else
         fc = 1.0;
      return fc;
   }

   public virtual onMouse(MouseEvent _ev) : boolean {
      float oct = (_ev.mouse_rel_x / getSizeX()) * 8.0 - 4.0;
      int semi = (oct * 12.0 + 0.5);
      int fc = octToFc(oct) * 0.5 * sample_rate;
      oct = int(oct*100)/100.0;
      Global.PrintFast("oct="+((oct>=0.0)?"+":"")+oct+" semi="+semi+" fc="+fc);
   }

   public virtual onDraw() {
      float w = getSizeX();
      float h = getSizeY();
      UIRenderer.DrawFilledRectangle(0, 0, w, h, #ff2d2d2d);
      if(null != sample)
      {
         float cx = 1;
         float cy;
         float lx = -1;
         float ly = (h-1);
         float oct = -4.0;
         float octStep = 8.0 / (w-2);
         UIRenderer.EnableBlending();

         // center
         UIRenderer.SetColorARGB(#20dddddd);
         // // glLineStipple(2.0f, 0xaaaa);
         // // glEnable(GL_LINE_STIPPLE);
         if(UIRenderer.BeginLineStripAA(2))
         {
            UIRenderer.Vertex2f(w*0.5, 1);
            UIRenderer.Vertex2f(w*0.5, h-1);
            UIRenderer.End();
         }
         // // glDisable(GL_LINE_STIPPLE);

         UIRenderer.SetColorARGB(#40dddddd);
         if(UIRenderer.BeginLineStripAA(w))
         {
            loop(w)
            {
               float fc = octToFc(oct);
               cy = (h - 1) - mathClampf(fc, 0, 1) * (h - 1);
               UIRenderer.Vertex2f(cx, cy);
               cx += 1.0;
               oct += octStep;
            }
            UIRenderer.End();
         }
         UIRenderer.DisableBlending();
      }
   }
}
