// ----
// ---- file   : ConfigIO.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2023-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- created: 12May2023
// ---- changed: 16Jul2023, 10Sep2023, 27Sep2023, 30Sep2023, 02Oct2023, 04Oct2023, 27Oct2023
// ----          02Nov2023, 07Jan2024, 17Jan2024, 14Feb2024, 25Apr2024, 22Sep2024, 17Dec2024
// ----          29Dec2024, 31Dec2024, 04Jan2025, 11Jun2025
// ----
// ----
// ----
module MConfigIO;

use namespace ui;
use namespace st2;


// <class.png>
class ConfigIO {

   define String START_TAG = "//----BEGIN_AUTOGENERATED_CONFIG----";
   define String END_TAG   = "//----END_AUTOGENERATED_CONFIG----";

   protected static String buf;

   // <method.png>
   static protected AddSection(String _name) {
      local String line;
      line.append("      // --------------------------- ");
      line.append(_name);
      line.append(" ");
      buf.append(Utils.AlignStringC(line, '-', 90));
      buf.append("\n");
   }

   // <method.png>
   static protected AddInt(String _name, int _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append(_val);
      buf.append(";\n");
   }

   // <method.png>
   static protected AddIntExpr(String _name, int _val, String _expr) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append(_val);
      buf.append(_expr);
      buf.append(";\n");
   }

   // <method.png>
   static protected AddIntHex(String _name, int _val) {
      Integer io = _val;
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append(io.printf("#%08x"));
      buf.append(";\n");
   }

   // <method.png>
   static protected AddBoolean(String _name, boolean _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append( (true==_val)?"true":(false==_val)?"false":"maybe" );
      buf.append(";\n");
   }

   // <method.png>
   static protected AddFloat(String _name, float _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append(_val);
      buf.append(";\n");
   }

   // <method.png>
   static protected AddPosition2f(String _name, Point2f _p) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = [");
      buf.append(_p.x);
      buf.append(", ");
      buf.append(_p.y);
      buf.append("];\n");
   }

   // <method.png>
   static protected AddGeometry4f(String _name, Geometry4f _geo) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append(_geo); // yacToString() will convert to "[1,2,3,4]" like string
      buf.append(";\n");
   }

   // <method.png>
   static protected AddString(String _name, String _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = \"");
      buf.append(_val);
      buf.append("\";\n");
   }

   // <method.png>
   static protected AddRawString(String _name, String _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append(_val);
      buf.append(";\n");
   }

   // <method.png>
   static protected AddNull(String _name) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" <= null;\n");
   }

   // <method.png>
   static protected AddFunCall1(String _name, String _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append("(");
      buf.append(_val);
      buf.append(");\n");
   }

   // <method.png>
   static protected AddPaths() {
      AddSection("RootPath");

      // Paths
      buf.append("      ");
      buf.append("SetRootPath(\""+(STConfig.rootpath.replace("\\", "/"))+"\");\n");

      // Sample Rootpath
      AddString("sample_rootpath", STConfig.sample_rootpath.replace("\\", "/"));

      // Sample Userpath (user name)
      AddString("sample_userpath", STConfig.sample_userpath.replace("\\", "/"));

      // Target path for sample import (transfer)
      AddString("sample_import_target_path", STConfig.sample_import_target_path);
   }

   // <method.png>
   static protected AddGeneral() {
      AddSection("General setup");

      AddBoolean("b_autoload_project", STConfig.b_autoload_project);

      AddBoolean("b_remote_save", STConfig.b_remote_save);
   }

   // <method.png>
   static protected AddAudio() {
      AddSection("Audio");

      // PortAudio preferred device name
      if(STConfig.audio_device_index < 0)
         AddInt("audio_device_index", -1);
      else
         AddString("audio_pref_device_name", STConfig.audio_pref_device_name);

      // Portaudio/SDL audio mixrate
      AddInt("audio_mixrate", STConfig.audio_mixrate);

      AddBoolean("b_midi_spread_events", STConfig.b_midi_spread_events);
      AddInt("standalone_ring_size", STConfig.standalone_ring_size);
      AddBoolean("b_force_single_thread", STConfig.b_force_single_thread);
      AddBoolean("b_poll", STConfig.b_poll);
      AddBoolean("b_replay_thread_poll", STConfig.b_replay_thread_poll);
      AddBoolean("b_track_thread_poll", STConfig.b_track_thread_poll);
      AddBoolean("b_ignore_thread_affinity", STConfig.b_ignore_thread_affinity);
   }

   // <method.png>
   static protected AddAudioInAliases() {
      AddSection("Audio Input Channel Aliases");

      // format:
      //    static StringArray audio_in_aliases = [
      //       // Mono(short)  Mono(long)         Stereo(short)  Stereo(long)
      //       "Mix2L",        "Mix2 L",          "Mix2",        "Mix2",          //  1, 1+2
      //       .. (32 ch)
      //    ];

      local String s;
      local Integer chNr;
      StringArray aliases <= STConfig.audio_in_aliases;
      s.append("      audio_in_aliases = [\n");
      s.append("         // Mono(short)  Mono(long)         Stereo(short)  Stereo(long)\n");
      int chIdx = 0;
      loop(32)
      {
         s.append("         ");
         s.append(Utils.AlignString("\""+aliases.get(4*chIdx+0)+"\",", 16));  // Mono(short)
         s.append(Utils.AlignString("\""+aliases.get(4*chIdx+1)+"\",", 19));  // Mono(long)
         s.append(Utils.AlignString("\""+aliases.get(4*chIdx+2)+"\",", 15));  // Stereo(short)
         s.append(Utils.AlignString("\""+aliases.get(4*chIdx+3)+"\",", 19));  // Stereo(long)
         chNr = chIdx + 1;
         s.append("// "+chNr.printf("%2d"));
         if(chIdx < 31)
            s.append(", "+(chIdx+1)+"+"+(chIdx+2));
         s.append("\n");

         // Next channel
         chIdx++;
      }
      s.append("      ];\n");
      buf.append(deref s);
   }

   // <method.png>
   static protected AddAudioOutAliases() {
      AddSection("Audio Output Channel Aliases");

      // format:
      //    static StringArray audio_out_aliases = [
      //       "MainL",        "Main L",       "Main",        "Main",          //  1, 1+2
      //       .. (32 ch)
      //    ];

      local String s;
      local Integer chNr;
      StringArray aliases <= STConfig.audio_out_aliases;
      s.append("      audio_out_aliases = [\n");
      s.append("         // Mono(short)  Mono(long)          Stereo(short)  Stereo(long)\n");
      int chIdx = 0;
      loop(32)
      {
         s.append("         ");
         s.append(Utils.AlignString("\""+aliases.get(4*chIdx+0)+"\",", 16));  // Mono(short)
         s.append(Utils.AlignString("\""+aliases.get(4*chIdx+1)+"\",", 19));  // Mono(long)
         s.append(Utils.AlignString("\""+aliases.get(4*chIdx+2)+"\",", 15));  // Stereo(short)
         s.append(Utils.AlignString("\""+aliases.get(4*chIdx+3)+"\",", 19));  // Stereo(long)
         chNr = chIdx + 1;
         s.append("// "+chNr.printf("%2d"));
         if(chIdx < 31)
            s.append(", "+(chIdx+1)+"+"+(chIdx+2));
         s.append("\n");

         // Next channel
         chIdx++;
      }
      s.append("      ];\n");
      buf.append(deref s);
   }

   // <method.png>
   static protected AddKbd() {
      AddSection("Kbd");

      // VSync key repeat
      AddFunCall1("UI.SetEnableVSyncKeyRepeat", UI.b_vsync_keyrepeat ? "true" : "false");

      // Command Copy/Paste (macOS)
      AddFunCall1("UI.SetEnableKeyCmdCopyPaste", UI.b_key_cmd_copy_paste ? "true" : "false");

      // Map SLASH to LESS
      AddFunCall1("UI.SetEnableKeyMapSlashToLess", UI.b_key_map_slash_to_less ? "true" : "false");

      // // Swap home / end keys
      // AddBoolean("b_key_swap_pattern_home_end", STConfig.b_key_swap_pattern_home_end);
   }

   // <method.png>
   static protected AddUI() {
      AddSection("UI");

      // UI Size Preset
      AddInt("ui_size_preset", STConfig.ui_size_preset);

      // Window size
      AddInt("window_sx", int(Viewport.width  / STConfig.zoom_x));
      AddInt("window_sy", int(Viewport.height / STConfig.zoom_y));

      // Window position
      AddInt("window_x", Viewport.positionX);
      AddInt("window_y", Viewport.positionY);

      // Window zoom
      AddFloat("zoom_x", STConfig.zoom_x);
      AddFloat("zoom_y", STConfig.zoom_y);

      // Mouse cursor zoom
      AddInt("cursor_zoom", STConfig.cursor_zoom);

      // Transparent layers
      AddBoolean("b_transparent_layers", UI.b_transparent_layers);

      // VSync
      AddBoolean("b_vsync", STConfig.b_vsync);

      // Force highframte (!fpslimit)
      AddBoolean("b_force_high_framerate", STConfig.b_force_high_framerate);

      // Fullscreen
      AddBoolean("b_fullscreen", STConfig.b_fullscreen);

      // Fullscreen width
      AddInt("fullscreen_sx", STConfig.fullscreen_sx);

      // Fullscreen height
      AddInt("fullscreen_sy", STConfig.fullscreen_sy);

      // Fullscreen bits
      AddInt("fullscreen_bits", STConfig.fullscreen_bits);

      // Fullscreen size = display size
      AddBoolean("b_fullscreen_displaysize", STConfig.b_fullscreen_displaysize);
   }

   // <method.png>
   static protected AddPgSample() {
      PageSample pgSample <= root_form.pg_sample;

      AddSection("PgSample");

      // Sample <> SampleView vertical split
      AddFloat("pgsample_sample_verticalsplit", pgSample.getSampleSplit());

      // Sample List <> Zones List vertical split
      AddFloat("pgsample_smpzones_verticalsplit", pgSample.getSmpZonesSplit());

      // Initial ADSR curve dialog geometry
      AddGeometry4f("pgsample_env_curve_geo_hidpi", STConfig.pgsample_env_curve_geo_hidpi);
      AddGeometry4f("pgsample_env_curve_geo_lodpi", STConfig.pgsample_env_curve_geo_lodpi);

      // Initial voice plugin array param dialog geometry
      AddGeometry4f("pgsample_voiceplugin_array_geo_hidpi", STConfig.pgsample_voiceplugin_array_geo_hidpi);
      AddGeometry4f("pgsample_voiceplugin_array_geo_lodpi", STConfig.pgsample_voiceplugin_array_geo_lodpi);

      // Initial Info dialog geometry
      AddGeometry4f("sample_info_textedit_geo_hidpi", STConfig.sample_info_textedit_geo_hidpi);
      AddGeometry4f("sample_info_textedit_geo_lodpi", STConfig.sample_info_textedit_geo_lodpi);

      // Auto show/hide scope
      AddBoolean("b_scope_pgsample_autoshowhide", STConfig.b_scope_pgsample_autoshowhide);

      // Keep original sample names when consolidating sample pads
      AddBoolean("b_sample_pad_consolidate_keep_names", STConfig.b_sample_pad_consolidate_keep_names);

      // Auto-duplicate samples
      AddBoolean("b_sample_pad_consolidate_autoduplicate_all_refs", STConfig.b_sample_pad_consolidate_autoduplicate_all_refs);
   }

   // <method.png>
   static protected AddDialogGeometries() {
      AddSection("Dialog Geometries");

      AddGeometry4f("cycle_geo_hidpi", STConfig.cycle_geo_hidpi);
      AddGeometry4f("cycle_geo_lodpi", STConfig.cycle_geo_lodpi);
      AddGeometry4f("cycle_machine_geo_hidpi", STConfig.cycle_machine_geo_hidpi);
      AddGeometry4f("cycle_machine_geo_lodpi", STConfig.cycle_machine_geo_lodpi);
      AddGeometry4f("cycle_machine_split", STConfig.cycle_machine_split);
      AddGeometry4f("cycle_curve_geo_hidpi", STConfig.cycle_curve_geo_hidpi);
      AddGeometry4f("cycle_curve_geo_lodpi", STConfig.cycle_curve_geo_lodpi);
      AddGeometry4f("cycle_curve_zoomed_geo_hidpi", STConfig.cycle_curve_zoomed_geo_hidpi);
      AddGeometry4f("cycle_curve_zoomed_geo_lodpi", STConfig.cycle_curve_zoomed_geo_lodpi);
      AddGeometry4f("cycle_templateselection_geo_hidpi", STConfig.cycle_templateselection_geo_hidpi);
      AddGeometry4f("cycle_templateselection_geo_lodpi", STConfig.cycle_templateselection_geo_lodpi);
      AddGeometry4f("scope_geo_hidpi", STConfig.scope_geo_hidpi);
      AddGeometry4f("scope_geo_lodpi", STConfig.scope_geo_lodpi);
      AddGeometry4f("sample_browser_geo_hidpi", STConfig.sample_browser_geo_hidpi);
      AddGeometry4f("sample_browser_geo_lodpi", STConfig.sample_browser_geo_lodpi);
      AddGeometry4f("sample_import_geo_hidpi", STConfig.sample_import_geo_hidpi);
      AddGeometry4f("sample_import_geo_lodpi", STConfig.sample_import_geo_lodpi);
      AddPosition2f("pgsample_samplemixer_pos_hidpi", STConfig.pgsample_samplemixer_pos_hidpi);
      AddPosition2f("pgsample_samplemixer_pos_lodpi", STConfig.pgsample_samplemixer_pos_lodpi);
      AddGeometry4f("pgsample_sampleselection_geo_hidpi", STConfig.pgsample_sampleselection_geo_hidpi);
      AddGeometry4f("pgsample_sampleselection_geo_lodpi", STConfig.pgsample_sampleselection_geo_lodpi);
      AddGeometry4f("pgsample_modimport_geo_hidpi", STConfig.pgsample_modimport_geo_hidpi);
      AddGeometry4f("pgsample_modimport_geo_lodpi", STConfig.pgsample_modimport_geo_lodpi);
   }

   // <method.png>
   static protected AddExport() {
      AddSection("Export");

      // Export Assimil8or YAML files (per sample)
      AddBoolean("b_write_yml_project", STConfig.b_write_yml_project);
   }

   // <method.png>
   static protected AddTuning() {
      AddSection("Sample Tuning");

      // Tuning table name
      AddString("audio_default_freq_table_name", STConfig.audio_default_freq_table_name);

      // Tuning table frequencies
      if(Audio.default_freq_table == Audio.eqtemp_freq_table)
         AddRawString("audio_default_freq_table", "[]");
      else
         AddRawString("audio_default_freq_table", Audio.default_freq_table.getString());
   }

   // <method.png>
   static protected AddFMStack() {
      AddSection("FMStack");

      /// Morph preset filters
      AddRawString("fmstack_morph_preset_filters", (STConfig.fmstack_morph_preset_filters.getString()));
   }

   // <method_get.png>
   static public GetLocalConfigPathName() : String {

      local String s <= TKS.homeDir + "/eureka_config_local.tks";
      if(Utils.CanFileBeRead(s))
         return deref s;

      // Fall back to program directory
      return program_directory + "/eureka_config_local.tks";
   }

   // <save.png>
   static Save() : boolean {
      if(!Save2())
      {
         Global.Error("Failed to save configuration");
      }
   }

   static private Save2() : boolean {

      local String fileBuf;

      buf.empty();
      buf.append(START_TAG+"\n");

      local String cfgPathname <= GetLocalConfigPathName();
      trace "[...] ConfigIO::save: cfgPathname=\""+cfgPathname+"\"";

      if(!fileBuf.loadLocal(cfgPathname, true))
      {
         trace "[---] ConfigIO::Save: failed to open \""+cfgPathname+"\". please check installation.";
         return false;
      }

      int idxStart = fileBuf.indexOf(START_TAG, 0);
      if(-1 == idxStart)
      {
         trace "[---] ConfigIO::Save: config start tag not found. please check installation.";
         return false;
      }

      int idxEnd = fileBuf.indexOf(END_TAG, idxStart+((START_TAG).length));
      if(-1 == idxEnd)
      {
         trace "[---] ConfigIO::Save: config end tag not found. please check installation.";
         return false;
      }

      // Build autogenerated configuration statements
      AddPaths();
      AddGeneral();
      AddAudio();
      AddAudioInAliases();
      AddAudioOutAliases();
      AddKbd();
      AddUI();
      AddPgSample();
      AddDialogGeometries();
      AddExport();
      AddTuning();
      AddFMStack();

      // Replace configuration
      buf.append("      ");
      fileBuf.replaceRegion(idxStart, idxEnd, buf);

      // Save configuration file
      fileBuf.saveLocal(cfgPathname);
      Global.Success("Local Configuration saved to \""+cfgPathname+"\"");

      return true;
   }

}
