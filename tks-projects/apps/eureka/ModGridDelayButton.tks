// ----
// ---- file   : ModGridDelayButton.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2021-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 03Feb2021
// ---- changed: 15Feb2021, 09Jan2022, 04Oct2023, 01Nov2023
// ----
// ----
// ----

module MModGridDelayButton;

use namespace ui;
use namespace st2;


// <class.png>
class ModGridDelayButton : ModGridButton, ActionConsumer {
   protected ModDelay *mod;

   protected FloatParam *fp_delay;
   protected Dial       *dl_pan;


   // <ui_init.png>
   public method initDelayButton(ModDelay _mod) {

      initModGridButton();

      setLayout(SuperBorderLayout);
      setEnableKbdFocusOnMouse(false);
      setLookAndFeel(LookAndFeel.LIGHT);

      mod <= _mod;

      Label lb <= Label.New();
      lb.setCaption("Delay");
      lb.setEnableFillBackground(false);
      lb.setLookAndFeel(LookAndFeel.LIGHT);
      // lb.setTextPlacement(Layout.LEFT);
      lb.setAlignment(Layout.CENTERY);
      lb.setPadLeft(2);
      addLayer(deref lb, Layout.LEFT);

      fp_delay <= FloatParam.New();
      fp_delay.setVisibleTextLength(5);
      fp_delay.setStep(0.02);
      fp_delay.setMinMaxValues(0.0, 16.0f);
      fp_delay.setEnableMaxEditable(true);
      fp_delay.setMinMaxLimits(0.0, ModDelay.MAX_DELAY_MS);
      fp_delay.setNominalMax(16.0f);
      fp_delay.setResetValues([0.0f, (64.0*1000)/Audio.mix_rate]);
      fp_delay.setValue(mod.delay * ModDelay.MAX_DELAY_MS);
      fp_delay.setPrecision(3);
      fp_delay.setMousePrecision(1);
      fp_delay.setAlignment(Layout.CENTERY);
      fp_delay.setToolTipCaption("Delay");
      if(UI.IsLoDPI())
         fp_delay.setPadBottom(1);
      addLayer(deref fp_delay, Layout.CENTER);

      dl_pan <= Dial.New(-1.0f, 1.0f, mod.pan);
      dl_pan.setResetValue(0.0f);
      dl_pan.setStep(0.0002);
      dl_pan.setRequiredSize2f(20*UI.GetFontScaling(), ModGrid.GetDialSizeY());
      dl_pan.setEnableKbdFocusOnMouse(false);
      dl_pan.setPadLeft(1);
      dl_pan.setPadRight(10);
      dl_pan.setAlignment(Layout.CENTERY);
      dl_pan.setLookAndFeel(LookAndFeel.LIGHT);
      dl_pan.setToolTipCaption("Delay");
      addLayer(deref dl_pan, Layout.RIGHT);
   }

   // <method_set.png>
   public virtual setEnableHold(boolean _bHold) {
      // prevent Button HOLD_CLICK action (=> edit modmatrix)
   }

   // <ui_render.png>
   public virtual onDraw() {
      UIRenderer.DrawDefaultControlBackground(0, 0, getSizeX(), getSizeY());
      drawGridBorder();
      UIRenderer.DrawDefaultRaisedBorderRight(0, 0, getSizeX(), getSizeY());
   }

   // <ui_timer.png>
   public virtual handleIdleTimer() {
      if(mod.checkResetQueuedUIUpdate())
      {
         fp_delay.setValue(mod.delay * ModDelay.MAX_DELAY_MS);
         dl_pan  .setValue(mod.pan);
         redraw();
      }
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      switch(@(ap))
      {
         case @(fp_delay):
            mod.setDelay(fp_delay.getFloatValue() / ModDelay.MAX_DELAY_MS);
            mod.addToUIParamHistory(ModDelay.PARAM_DELAY);
            Global.Print(mod.getInfoString());
            return true;

         case @(dl_pan):
            mod.setPan(dl_pan.getValue());
            mod.addToUIParamHistory(ModDelay.PARAM_SMOOTH);
            Global.Print("Pan is "+Utils.GetSnapToZeroFloatString(mod.pan)+": "+mod.getInfoString());
            return true;
      }

      return ModGridButton::consumeAction(_ac);
   }
}
