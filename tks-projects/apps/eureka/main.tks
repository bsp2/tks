// ----
// ---- file   : main.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- changed: 22Jan2018, 05Feb2018, 10Feb2018, 11Feb2018, 16Mar2018, 24Mar2018, 01Sep2018
// ----          14May2020, 12Sep2020, 21Feb2023, 01Apr2023, 16Jul2023, 29Jul2023, 04Oct2023
// ----          03Jul2024, 23Jul2024, 03Aug2024, 07Mar2025, 11Sep2025
// ----
// ----
// ----
module Main;

use tksdl;
use tkmidi;

use namespace ui;
use namespace st2;

// Post processing modes
#define POST_NONE      0
#define POST_SOLID     1
#define POST_SCANLINES 2


// SysEx.TestEncodeDecode();
// exit(10);

// NodeTracker:
function NewNoteIcon(String _name, String _path) {
   PNGIcon r <= PNGIcon.New(_name, _path);
   // r.setView(20, 0, 46, 50);
   return deref r;
}

// <ui_init.png>
function InitUI() {
   // Initialize UI library
   UI.Initialize(Arguments);
   UI.SetLogger(Global.logger);
   UI.SetLookAndFeel(LookAndFeel.DARK);

   UI.SetKbdFocusSelectionModeBehaviour(STConfig.b_kbdfocusselectionmode_behaviour);

   // UI.SetEnableTouchMode(true);  // mainly affects tooltip positions for now (WIP)

   UI.SetOnDrawPostProcessHook(OnDrawPostProcess);

   UI.b_allow_layout_cache = !STConfig.b_ui_resizable;

   UI.AddIcon(PNGIcon.New("st2", "st2.png"));
   UI.AddIcon(PNGIcon.NewMono("mgrctl_link", "mgrctl_link.png"));
   UI.AddIcon(PNGIcon.NewMono("mgrctl_link_2x", "mgrctl_link_2x.png"));
   UI.AddIcon(PNGIcon.NewMono("mgrctl_celvis", "mgrctl_celvis.png"));  // checked
   UI.AddIcon(PNGIcon.NewMono("mgrctl_celvis_2x", "mgrctl_celvis_2x.png"));
   UI.AddIcon(PNGIcon.New("up", "up.png"));
   UI.AddIcon(PNGIcon.New("down", "down.png"));

   UI.AddIcon(PNGIcon.New("back_xl", "back_xl.png"));
   UI.AddIcon(PNGIcon.New("back_s", "back_s.png"));

   UI.AddIcon(PNGIcon.New("back_xl_mono", "back_xl_mono.png"));
   UI.AddIcon(PNGIcon.New("back_s_mono",  "back_s_mono.png"));

   UI.AddIcon(PNGIcon.New("prj_new",  "prj_new.png"));
   UI.AddIcon(PNGIcon.New("prj_load", "prj_load.png"));
   UI.AddIcon(PNGIcon.New("prj_save", "prj_save.png"));

   UI.AddIcon(PNGIcon.New("cfg_save", "cfg_save.png"));

   UI.AddIcon(PNGIcon.New("add",         "add.png"));
   UI.AddIcon(PNGIcon.New("add_mono",    "add_mono.png"));

   UI.AddIcon(PNGIcon.New("addh",        "addh.png"));
   UI.AddIcon(PNGIcon.New("addh_mono",   "addh_mono.png"));

   UI.AddIcon(PNGIcon.New("adds",        "adds.png"));
   UI.AddIcon(PNGIcon.New("adds_mono",   "adds_mono.png"));

   UI.AddIcon(PNGIcon.New("addquick",      "addquick.png"));
   UI.AddIcon(PNGIcon.New("addquick_mono", "addquick_mono.png"));

   UI.AddIcon(PNGIcon.New("remove",      "remove.png"));
   UI.AddIcon(PNGIcon.New("remove_mono", "remove_mono.png"));

   UI.AddIcon(PNGIcon.New("removeh",      "removeh.png"));
   UI.AddIcon(PNGIcon.New("removeh_mono", "removeh_mono.png"));

   UI.AddIcon(PNGIcon.New("removes",      "removes.png"));
   UI.AddIcon(PNGIcon.New("removes_mono", "removes_mono.png"));

   UI.AddIcon(PNGIcon.New("clear",    "clear.png"));
   UI.AddIcon(PNGIcon.New("clone",    "clone.png"));
   UI.AddIcon(PNGIcon.New("tools",    "tools.png"));

   UI.AddIcon(PNGIcon.New("stop_sm",  "stop_sm.png"));
   UI.AddIcon(PNGIcon.New("stop_sm_gray", "stop_sm_gray.png"));

   UI.AddIcon(PNGIcon.New("exit",     "exit.png"));
   UI.AddIcon(PNGIcon.New("cancel",   "cancel.png"));

   UI.AddIcon(PNGIcon.New("chbarr_0",   "chbarr_0.png"));
   UI.AddIcon(PNGIcon.New("chbarr_0_1", "chbarr_0_1.png"));
   UI.AddIcon(PNGIcon.New("chbarr_1",   "chbarr_1.png"));
   UI.AddIcon(PNGIcon.New("chbarr_1_0", "chbarr_1_0.png"));

   UI.AddIcon(PNGIcon.New("project",  "project.png"));
   UI.AddIcon(PNGIcon.New("config",   "config.png"));
   UI.AddIcon(PNGIcon.New("mapper",   "mapper.png"));
   UI.AddIcon(PNGIcon.New("monitor",  "monitor.png"));
   UI.AddIcon(PNGIcon.New("sysex",    "sysex.png"));
   UI.AddIcon(PNGIcon.New("audio",    "audio.png"));
   UI.AddIcon(PNGIcon.New("presets",  "presets.png"));

   UI.AddIcon(PNGIcon.New("recorder",    "recorder.png"));
   UI.AddIcon(PNGIcon.New("metronome",   "metronome.png"));
   UI.AddIcon(PNGIcon.New("global",      "global.png"));
   UI.AddIcon(PNGIcon.New("prefs",       "prefs.png"));
   UI.AddIcon(PNGIcon.New("audio_setup", "audio_setup.png"));
   UI.AddIcon(PNGIcon.New("waveforms",   "waveforms.png"));

   UI.AddIcon(PNGIcon.New("moveup",   "moveup.png"));
   UI.AddIcon(PNGIcon.New("movedown", "movedown.png"));

   UI.AddIcon(PNGIcon.New("moveuph",   "moveuph.png"));
   UI.AddIcon(PNGIcon.New("movedownh", "movedownh.png"));

   UI.AddIcon(PNGIcon.New("moveup_mono",   "moveup_mono.png"));
   UI.AddIcon(PNGIcon.New("movedown_mono", "movedown_mono.png"));

   UI.AddIcon(PNGIcon.New("moveuph_mono",   "moveuph_mono.png"));
   UI.AddIcon(PNGIcon.New("movedownh_mono", "movedownh_mono.png"));

   UI.AddIcon(PNGIcon.New("file_browse", "file_browse.png"));

   // Transport:
   UI.AddIcon(PNGIcon.New("transport_start", "transport_start.png"));
   UI.AddIcon(PNGIcon.New("transport_end",   "transport_end.png"));
   UI.AddIcon(PNGIcon.New("transport_play",  "transport_play.png"));
   UI.AddIcon(PNGIcon.New("transport_cycle_inactive",  "transport_cycle_inactive.png"));
   UI.AddIcon(PNGIcon.New("transport_cycle_active",    "transport_cycle_active.png"));

   UI.AddIcon(NewNoteIcon("nt_note_8", "nt_note_8.png"));
   UI.AddIcon(NewNoteIcon("nt_note_4", "nt_note_4.png"));
   UI.AddIcon(NewNoteIcon("nt_note_2", "nt_note_2.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1", "nt_note_1.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_2", "nt_note_1_2.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_4", "nt_note_1_4.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_8", "nt_note_1_8.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_16", "nt_note_1_16.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_32", "nt_note_1_32.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_64", "nt_note_1_64.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_128", "nt_note_1_128.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_256", "nt_note_1_256.png"));

   UI.AddIcon(PNGIcon.New("record_0",   "record_0.png"));
   UI.AddIcon(PNGIcon.New("record_0_1", "record_0_1.png"));
   UI.AddIcon(PNGIcon.New("record_1",   "record_1.png"));
   UI.AddIcon(PNGIcon.New("record_1_0", "record_1_0.png"));

   UI.AddIcon(PNGIcon.New("record_0_dark",   "record_0.png"));
   UI.AddIcon(PNGIcon.New("record_0_1_dark", "record_0_1.png"));
   UI.AddIcon(PNGIcon.New("record_1_dark",   "record_1.png"));
   UI.AddIcon(PNGIcon.New("record_1_0_dark", "record_1_0.png"));

   UI.AddIcon(PNGIcon.NewMono("mute_0",   "mute_0.png"));
   UI.AddIcon(PNGIcon.NewMono("mute_0_1", "mute_0_1.png"));
   UI.AddIcon(PNGIcon.NewMono("mute_1",   "mute_1.png"));
   UI.AddIcon(PNGIcon.NewMono("mute_1_0", "mute_1_0.png"));

   UI.AddIcon(PNGIcon.NewMono("mute_0_dark",   "mute_0.png"));
   UI.AddIcon(PNGIcon.NewMono("mute_0_1_dark", "mute_0_1.png"));
   UI.AddIcon(PNGIcon.NewMono("mute_1_dark",   "mute_1.png"));
   UI.AddIcon(PNGIcon.NewMono("mute_1_0_dark", "mute_1_0.png"));

   UI.AddIcon(PNGIcon.New("trashcan_sm", "trashcan_sm.png"));

   UI.AddIcon(PNGIcon.New("lock_0",   "lock_0.png"));
   UI.AddIcon(PNGIcon.New("lock_0_1", "lock_0_1.png"));
   UI.AddIcon(PNGIcon.New("lock_1",   "lock_1.png"));
   UI.AddIcon(PNGIcon.New("lock_1_0", "lock_1_0.png"));

   UI.AddIcon(PNGIcon.New("lock_0_dark",   "lock_0.png"));
   UI.AddIcon(PNGIcon.New("lock_0_1_dark", "lock_0_1.png"));
   UI.AddIcon(PNGIcon.New("lock_1_dark",   "lock_1.png"));
   UI.AddIcon(PNGIcon.New("lock_1_0_dark", "lock_1_0.png"));

   UI.AddIcon(PNGIcon.New("env_pencil",   "env_pencil.png"));
   UI.AddIcon(PNGIcon.New("env_smoothen", "env_smoothen.png"));
   UI.AddIcon(PNGIcon.New("env_nudge",    "env_nudge.png"));

   UI.AddIcon(PNGIcon.New("ok_sm", "ok_sm.png"));
   UI.AddIcon(PNGIcon.New("cancel_sm", "cancel_sm.png"));

   UI.AddIcon(PNGIcon.New("upload", "upload.png"));
   UI.AddIcon(PNGIcon.New("download", "download.png"));

   UI.AddIcon(PNGIcon.New("pipemap_info", "pipemap_info.png"));

   UI.AddIcon(PNGIcon.New("locator_l", "locator_l.png"));
   UI.AddIcon(PNGIcon.New("locator_r", "locator_r.png"));

   UI.AddIcon(PNGIcon.NewMono("curve", "curve.png"));

   UI.AddIcon(PNGIcon.NewMono("star_rating_lvl_0",  "star_rating_lvl_0.png"));
   UI.AddIcon(PNGIcon.NewMono("star_rating_lvl_1",  "star_rating_lvl_1.png"));
   UI.AddIcon(PNGIcon.NewMono("star_rating_lvl_2",  "star_rating_lvl_2.png"));
   UI.AddIcon(PNGIcon.NewMono("star_rating_lvl_3",  "star_rating_lvl_3.png"));
   UI.AddIcon(PNGIcon.NewMono("star_rating_lvl_4",  "star_rating_lvl_4.png"));
   UI.AddIcon(PNGIcon.NewMono("star_rating_lvl_5",  "star_rating_lvl_5.png"));



   // <ui_init.png>
   FontResource *fr;

   int fsz;

   fsz = 5.5;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "lbsmall");

   fsz = 7.5;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_BOLD, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default bold "+fsz, "lbsmall_bold");

   fsz = 7;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big12");

   fsz = 8;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big11");

   fsz = 9;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big10");

   fsz = 14;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big9");

   fsz = 16;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big8");

   fsz = 20;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big7");

   fsz = 24;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big6");

   fsz = 32;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big5");

   fsz = 48;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big4");

   fsz = 64;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big3");

   fsz = 74;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big2");

   fsz = 84;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big1");

   fsz = 15;
// fr <= FT2PakFileFontResource.New("tkui:fonts/fixed.ttf", "fixed", Font.STYLE_NORMAL, 13);
   fr <= FT2PakFileFontResource.New("fonts/courier.ttf", "courier", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("courier "+fsz, "nav7");
}



// (note) call SetEnableForceHighFramerate(true) and set PatternView::b_smoothscroll=true to really burn cycles!
//
// (note) disable pattern autoscroll + equalizers, call SetEnableForceHighFramerate(false) and set PatternView::b_smoothscroll=false
//         to save CPU time (roughly 50% saved)



// <event_handler.png>
// -----------------------------------------------------------------------------
//
// onSignal - Handles POSIX-style process signals
//
// -----------------------------------------------------------------------------
function onSignal(int sig) {
   Global.Debug("onSignal("+sig+")");
   if(2 == sig)
   {
      trace "[~~~] stop on signal "+sig;
      UI.Stop();
      Global.Exit();
   }
}

// <event_handler.png>
// -----------------------------------------------------------------------------
//
// onSegV - Called when a segmentation violation has occured (d'oh!)
//
// -----------------------------------------------------------------------------
function onSegV() {
   trace "[---] onSegV called";
   // // Global.CrashAutosave(true/*bHard*/);

   // Run SegVContinue
   // // return true;
}

use onSegV for TKS.onSegV;


// <event_handler.png>
// -----------------------------------------------------------------------------
//
// onClose - Called when the user tries to close the desktop window
//
// -----------------------------------------------------------------------------
function SDL_onClose() {
   Global.Debug2("eureka:main::SDL_onClose() called");

   if(1)
   {
      if(!b_metahost)
      {
         Global.HandleOnClose();
      }
   }

   return false;
}


// <event_handler.png>
function onDraw() {
   trace "xxx onDraw";
   float dt=FPS.precision;
   glClearColor(0,0,0.2,1);
   glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

   zglInitOrtho(1, 1);
   glColor3f(0.9,0.9,0.9);

   if(1)
   {
      glBegin(GL_QUADS);  // onDraw rendertest
      glVertex2f(-1,-1);
      glVertex2f( 1,-1);
      glVertex2f( 1, 1);
      glVertex2f(-1, 1);
      glEnd();  // onDraw rendertest
   }
}

// <event_handler.png>
function SDL_onCreateOtherWindow(int _hwnd) {
   // trace "[dbg] eureka:SDL_onCreateOtherWindow: hwnd="+_hwnd;
   if(_hwnd != SDL.nativeWindowHandle)
   {
      other_windows_create.add(_hwnd);
   }
}

// <event_handler.png>
function SDL_onFocusOtherWindow(int _hwnd) {
   // trace "[dbg] eureka:SDL_onFocusOtherWindow: hwnd="+_hwnd;
   if(_hwnd != SDL.nativeWindowHandle)
   {
      other_windows_focus.add(_hwnd);
   }
}

// <debug.png>
function RenderTest() {
   use onDraw for SDL.onDraw;
   SDL.eventPolling = true;
   //Viewport.openWindow(320, 240);
   SDL.eventLoop();
   return;
}


// <function.png>
function OnDrawPostProcess() {

   int postMode;
   int postColor;

   if(Viewport.isFullScreen())
   {
      postMode  = STConfig.postfx_fs_mode;
      postColor = STConfig.postfx_fs_color;
   }
   else
   {
      postMode  = STConfig.postfx_win_mode;
      postColor = STConfig.postfx_win_color;
   }

   if(POST_SCANLINES == postMode)/// && (UI.zoom_y > 1))
   {
      // trace "xxx OnDrawPostProcess Viewport=("+Viewport.width+";"+Viewport.height+")";

      Texture tex <= root_form.tex_scanline_pattern;

      UIRenderer.SetViewport(0, 0, Viewport.width, Viewport.height);
      UIRenderer.ProjInit2D(Viewport.width, Viewport.height);
      UIRenderer.ModelInitIdentity();
      UIRenderer.EnableBlending();
      tex.bind();
      tex.enable();

      UIRenderer.SetColorARGB(postColor);

      float umax = float(Viewport.width) / tex.sx;
      float vmax = float(Viewport.height) / tex.sy;

      if(UIRenderer.BeginTexturedTriangleFan(4))
      {
         UIRenderer.TexCoord2f(0, 0);
         UIRenderer.Vertex2f(0, 0);

         UIRenderer.TexCoord2f(umax, 0);
         UIRenderer.Vertex2f(Viewport.width, 0);

         UIRenderer.TexCoord2f(umax, vmax);
         UIRenderer.Vertex2f(Viewport.width, Viewport.height);

         UIRenderer.TexCoord2f(0, vmax);
         UIRenderer.Vertex2f(0, Viewport.height);

         UIRenderer.End();
      }

      tex.disable();
      UIRenderer.DisableBlending();
   }
   else if(POST_SOLID == postMode)
   {
      UIRenderer.SetViewport(0, 0, Viewport.width, Viewport.height);
      UIRenderer.ProjInit2D(Viewport.width, Viewport.height);
      UIRenderer.ModelInitIdentity();

      UIRenderer.EnableBlending();

      byte ca = (postColor >> 24)&255;
      if(ca > 200)
      {
         ca = 200;
         postColor = (postColor&0x00FFFFFF) | (ca << 24);
      }

      UIRenderer.SetColorARGB(postColor);

      if(UIRenderer.BeginFilledTriangleFan(4))
      {
         UIRenderer.Vertex2f(0, 0);
         UIRenderer.Vertex2f(Viewport.width, 0);
         UIRenderer.Vertex2f(Viewport.width, Viewport.height);
         UIRenderer.Vertex2f(0, Viewport.height);
         UIRenderer.End();
      }

      UIRenderer.DisableBlending();
   }
}


// <ui_show.png>
function ShowUIWindow() {
   Global.Debug2("eureka: ShowUIWindow()");

   UI.SetMinimumSize(952, 504);
   UI.OpenWindow(STConfig.window_sx * STConfig.zoom_x,
                 STConfig.window_sy * STConfig.zoom_y
                 );

   //Viewport.setEnableRedraw(false);

   // Enable/disable vsync
   Global.ConfigureVSync();

   // Fullscreen
   Global.ConfigureFullscreenDisplaySize();
   if(STConfig.b_fullscreen)
      Viewport.toggleFullScreen();

   Global.UpdateWindowTitle("unknown");

   SDL.installWindowCreateAndDestroyHook();
   use SDL_onCreateOtherWindow for SDL.onCreateOtherWindow;
   use SDL_onFocusOtherWindow for SDL.onFocusOtherWindow;

}

// <function.png>
function EnumerateTrackCPUCores() {
   int numCores = Thread.GetNumCPUCores();
   trace "[trc] Main.EnumerateTrackCPUCores: numLogicalCPUCores="+numCores;

   g_track_cpu_core_map.free();
   g_track_cpu_core_names.free();

   int cpuIdx = 0;
   loop(numCores)
   {
      if(Thread.IsAffinityMaskStringBitSet(STConfig.track_thread_affinity_mask, cpuIdx))
      {
         String s =
            (cpuIdx+1)
            + (Thread.IsPerformanceCPUCore(cpuIdx)?"p":"")
            + (Thread.IsCPUCoreShared(cpuIdx)?"HT":"")
            + (Thread.IsEfficiencyCPUCore(cpuIdx)?"e":"")
            ;

         g_track_cpu_core_map.add(cpuIdx);
         g_track_cpu_core_names.add(s);

         trace "[trc]   cpu["+cpuIdx.printf("%2d")+"]: HT:"+(Thread.IsCPUCoreShared(cpuIdx)?"y":"n")+" P:"+(Thread.IsPerformanceCPUCore(cpuIdx)?"y":"n")+" E:"+(Thread.IsEfficiencyCPUCore(cpuIdx)?"y":"n");
      }

      cpuIdx++;
   }

   trace "[dbg] EnumerateTrackCPUCores: map="+g_track_cpu_core_map+" names="+g_track_cpu_core_names;

}

// <function.png>
// -----------------------------------------------------------------------------
//
// main - Here be dragons!
//
// -----------------------------------------------------------------------------
function main_init(boolean _bShowUI) {

   STConfigBase.InitPre();

   InitUI();

   // Test_MIDIFile();
   // exit(0);

   Global.Debug("program_directory=\""+st2::program_directory+"\".");

   // (note) shader init on ATI (nb) fails (glLinkProgram()) when window is not opened before first thread is created
   // (note) the workaround is to simply open and close a window before doing anything else
   if(STConfig.b_open_prerun_window)
   {
      Viewport.openWindow(320, 240);
      Viewport.close();
   }

   UI.SetEnableTransparentLayers(STConfig.b_transparent_layers);

   if(0 == Configuration.debugLevel)
   {
      Configuration.debugLevel = STConfig.b_debug_lofreq ? 1 : 0;
   }

   EnumerateTrackCPUCores();

   // (note) won't when called with regular user privileges
   // (note) workaround: use taskmanager to manually set realtime priority
   // (note) OR: run process as administrator
   Thread.SetProcessPriorityClass(PROCESS_PRIORITY_CLASS_REALTIME);

   // Thread thread <= GetCurrentThread();
   // // thread.priority = THREAD_PRIORITY_NORMAL;
   // // thread.priority = THREAD_PRIORITY_HIGHEST;
   // thread.priority = THREAD_PRIORITY_TIME_CRITICAL;

   if(Global.Init())
   {
      STConfigBase.InitPost();

      UI.SetRootForm(root_form);
      Global.Debug("Opening window, size=("+STConfig.window_sx+"; "+STConfig.window_sy+")");
      UI.SetZoom(STConfig.zoom_x, STConfig.zoom_y);
      UI.SetCursorZoom(STConfig.cursor_zoom);

      if(STConfig.b_window_docked && STConfig.b_window_noframe_when_docked)
      {
         UI.b_noframe  = true;
         UI.b_noresize = true;
      }
      else
      {
         UI.b_noframe  = false;
         UI.b_noresize = false;
      }

      if(_bShowUI)
      {
         ShowUIWindow();
      }

      {
         replay.b_playing = false;

         use onSignal for TKS.onSignal;

         try
         {
            Global.PreRun();

            if(_bShowUI)
            {
               use SDL_onClose for SDL.onClose;  // (note) overrides UI.onClose

               root_form.moveToDefaultPosition();

               if(STConfig.b_window_docked)
                  SDL.setEnableWindowTitleAndBorder(false/*bTitle*/, false/*bBorder*/);

               // TKS.sleep(500);
               UI.Run();
            }
         }
         catch(Error e)
         {
            trace "[...] main: caught exception e="+#(e)+"\n"+e.stackTrace;
            // // Global.CrashAutosave(false);
         }

         replay.b_playing = false;
      }

      if(_bShowUI)
      {
         Global.Exit();
         UI.Exit();
      }
   }
   else
   {
      trace "[---] Global::init() failed.";
   }
}

function main() {
   // Called when running as standalone application
   int numValid;

   if("scan_clap" == Arguments.get(0))
   {
      // Scan CLAP plugins (incrementally)
      CLAP.Init();
      numValid = CLAP.GetNumValidPlugins();
      trace "[...] CLAP scan: found "+numValid+" valid plugin"+Utils.GetPluralString(numValid);
      exit(CLAP.b_scan_complete ? 0 : 10);
   }
   else if("rescan_clap" == Arguments.get(0))
   {
      // Rescan all CLAP plugins
      CLAP.Init();
      CLAP.RescanAllPlugins();  // prints numValid plugins
      exit(CLAP.b_scan_complete ? 0 : 10);  // (note) scan should be complete now (when b_clap_deepscan_process=1)
   }
   else if("scan_vst2" == Arguments.get(0))
   {
      // Scan VST2 plugins (incrementally)
      // // UI.OpenWindow(400,300);
      STConfig.b_vst_auto_deepscan = true;
      VST2.Init();
      // // UI.Stop();
      numValid = VST2.GetNumValidPlugins();
      trace "[...] VST2 scan: found "+numValid+" valid plugin"+Utils.GetPluralString(numValid);
      exit(VST2.b_scan_complete ? 0 : 10);
   }
   else if("rescan_vst2" == Arguments.get(0))
   {
      // Rescan all VST2 plugins
      // // UI.OpenWindow(400,300);
      STConfig.b_vst_auto_deepscan = true;
      VST2.Init();
      VST2.RescanAllPlugins();  // prints numValid plugins
      // // UI.Stop();
      exit(VST2.b_scan_complete ? 0 : 10);  // (note) scan should be complete now (when b_vst_deepscan_process=1)
   }

   main_init(true/*bShowUI*/);
   Global.Debug("leaving main()");
}




//
//
//
//
// meta host handling (when running as a VST plugin)
//  (note) main() is not called in this case
//
//
//
Thread main_thread;
boolean b_running = true;
boolean b_queued_open_editor;
boolean b_editor_open;
boolean b_queued_hide_editor;
boolean b_queued_destroy_editor;
boolean b_window_created = false;

// <callback.png>
function metahost_onTimer() {
   // trace "[dbg] eureka::metahost_onTimer: b_queued_destroy_editor="+b_queued_destroy_editor+" b_editor_open="+b_editor_open;
   if(b_queued_destroy_editor)
   {
      b_queued_destroy_editor = false;

      if(b_window_created)
      {
         Global.Debug2("eureka: call SDL.exitEventLoop");
         if(!b_editor_open)
         {
            SDL.showWindow();
         }
         SDL.exitEventLoop();

         b_window_created = false;
      }
   }
   else if(b_queued_hide_editor)
   {
      b_queued_hide_editor = false;

      if(b_editor_open)
      {
         b_editor_open = false;
         SDL.hideWindow();
      }
   }
   else
   {
      UI.OnTimer();
   }
}

// <callback.png>
function main_thread_entry(local Thread _th) {

   use callbacks;

   FPS.tickInterval = 1000.0/60;
   FPS.limit = 60;

   while(b_running || b_queued_destroy_editor)
   {
      if(b_queued_open_editor && !b_editor_open)
      {
         b_queued_open_editor = false;

         if(!b_window_created)
         {
            ShowUIWindow();
            use metahost_onTimer for SDL.onTimer;
            b_window_created = true;

            Global.Debug2("eureka: entering eventloop 2");
            b_editor_open = true;
            UI.Run();
         }

      }
      TKS.sleep(100);
   }
}

// <callback.png>
function tks_lib_init() {
   Global.Debug("eureka: tks_lib_init() called");

   b_metahost = true;
   STConfig.b_enable_audio = false;
   Audio.buffer_size = STConfig.audio_chunk_size;  // chunk size (should be 64, same as Reason)

   main_init(false/*bShowUI*/);

   use metahost_onTimer for SDL.onTimer;

   main_thread.create(main_thread_entry);
}

// <callback.png>
function tks_lib_exit() {
   Global.Debug2("[dbg] eureka:tks_lib_exit: ENTER");
   vst_destroy_editor();
   Global.Debug3("eureka:tks_lib_exit: editor destroyed");
   b_running = false;
   main_thread.wait();
   Global.Debug3("eureka:tks_lib_exit: main thread terminated");
   Global.Exit();
   Global.Debug2("eureka:tks_lib_exit: LEAVE");
}

// <callback.png>
function tks_lib_vst_open_editor() {
   Global.Debug("eureka: tks_lib_vst_open_editor called");
   if(!b_window_created)
   {
      b_queued_open_editor = true;
   }
   else
   {
      SDL.showWindow();
   }
}

// <callback.png>
function tks_lib_vst_close_editor() {
   Global.Debug("eureka: tks_lib_vst_close_editor called: b_editor_open="+b_editor_open);
   if(b_window_created)
   {
      SDL.hideWindow();
   }
}

// <function.png>
function vst_destroy_editor() {

   if(b_window_created)
   {
      b_queued_destroy_editor = true;

      while(b_queued_destroy_editor)
      {
         Global.Debug("eureka: wait until editor's been closed");
         TKS.sleep(100);
      }
   }
}

// <callback.png>
function tks_lib_vst_set_sample_rate(float _rate) {
   Audio.SetMixRate(_rate);
}

// <callback.png>
function tks_lib_vst_set_bpm(float _bpm) {
   current_project.setTempo(_bpm, current_project.ppq);
}

// <callback.png>
function tks_lib_vst_process_replacing(FloatArray _inputs, FloatArray _outputs, int _numSampleFrames) {

   // if(64 != _numSampleFrames)
   //    trace "xxx vst_process_replacing: num="+_numSampleFrames;

   Audio.MetaHostProcess(_inputs, _outputs, _numSampleFrames);
}

// <callback.png>
function tks_lib_vst_get_bank_chunk(Buffer _buffer) {
   Global.Debug2("eureka: get_bank_chunk 1");
   Global.SaveToBuffer(_buffer);
   Global.Debug2("eureka: get_bank_chunk 2 size="+_buffer.offset);
}

// <callback.png>
function tks_lib_vst_get_program_chunk(Buffer _buffer) {
   Global.Debug2("eureka: get_program_chunk 1");
   Global.SaveToBuffer(_buffer);
   Global.Debug2("eureka: get_program_chunk 2 size="+_buffer.offset);
}

// <callback.png>
function tks_lib_vst_set_bank_chunk(Buffer _buffer) {
   Global.Debug2("eureka: set_bank_chunk 1 size="+_buffer.size+" offset="+_buffer.offset);
   Global.LoadFromBuffer(_buffer);
   Global.Debug2("eureka: set_bank_chunk 2 size="+_buffer.size+" offset="+_buffer.offset);
}

// <callback.png>
function tks_lib_vst_set_program_chunk(Buffer _buffer) {
   Global.Debug2("eureka: set_program_chunk 1 size="+_buffer.size+" offset="+_buffer.offset);
   Global.LoadFromBuffer(_buffer);
   Global.Debug2("eureka: set_program_chunk 2 size="+_buffer.size+" offset="+_buffer.offset);
}
