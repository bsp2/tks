// ----
// ---- file   : PluginListSTFX.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2023-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 21Apr2023
// ---- changed: 06Jan2024, 06Jul2024, 20Sep2024
// ----
// ----
// ----

module MPluginListSTFX;

use namespace ui;
use namespace st2;


// <class.png>
class PluginListSTFX : XMLForm {

   public    TableView        *tv_plugins;
   protected PluginListSTFXTM *tm_plugins;
   public    TextField        *tf_filter;
   protected ComboBox         *cm_filter_preset;

   protected STFXAuthor *[] *authors;  // STFXAuthor instances (see samples.tks)

   static StringArray filter_presets;
   static StringArray filter_mapping;  // synthname,filter pairs
   static String default_filter_str;


   // <ui_init.png>
   public method init() : boolean {

      if(!initPakFile("PluginListSTFX.xfm"))
         return false;

      autoResolveIds(this);

      recursiveSetEnableCursorKeyTabCycling(false);

      configureAsControlPanel();

      tm_plugins <= new PluginListSTFXTM;
      tm_plugins.setAuthors(VoicePlugins.sorted_voice_plugin_infos);
      tm_plugins.initTableModel();
      tv_plugins.setTableModel(tm_plugins);
      tv_plugins.tableModelChanged();

      IntArray colors <= tm_plugins.cloneLookAndFeelColors();
      colors[LookAndFeel.COLOR_TABLEVIEW_CELL_FG_NORMAL] = #ffece8e4;
      colors[LookAndFeel.COLOR_TABLEVIEW_CELL_FG_CURSOR_NOFOCUS] = #ffece8e4;

      loadFilters();

      return true;
   }

   // <method.png>
   public method loadFilters() {
      local String buf;
      filter_presets.free();
      filter_mapping.free();

      if(buf.loadLocal(Utils.ToNativePathName("$(ROOT)/plugin_filters_stfx.ini"), false/*bRemoveCR*/))
      {
         buf.replace("\r","");  // bRemoveCR replaces it with ' '
         boolean bCatList = true;
         String curCat = "Other";
         local StringArray lines <= buf.splitChar('\n');

         filter_presets.add("");

         if(null != lines)
         {
            String *line;
            foreach line in lines
            {
               if(!line.isBlank())
               {
                  if!(line.trim() <= "#")
                  {
                     if(line <= "[")
                     {
                        bCatList = false;
                        line.trim();
                        if(line.endsWith("]"))
                        {
                           line.replace("[", "");
                           line.replace("]", "");

                           if(-1 == filter_presets.indexOfObject(line, 0))
                           {
                              // Lazy-add filter category
                              filter_presets.add(line);
                           }

                           curCat = line;
                        }
                     }
                     else if(line & "default=")
                     {
                        default_filter_str = line.replace("default=", "").trim();
                     }
                     else if(bCatList)
                     {
                        filter_presets.add(line);
                     }
                     else
                     {
                        // trace "xxx add filter_mapping \""+line+"\" => \""+curCat+"\"";
                        filter_mapping.add(line);
                        filter_mapping.add(curCat);
                     }
                  }
               }
            } // loop lines
            filter_presets.add("");
         }
      }

      String *fltPreset;
      local StringArray fltPresetsDpy;
      foreach fltPreset in filter_presets
      {
         String fltPresetDpy = fltPreset.replace("f:","");
         fltPresetDpy.replace("i:", "");
         fltPresetsDpy.add(fltPresetDpy);
      }
      cm_filter_preset.setOptions(fltPresetsDpy);
   }

   // <method_set.png>
   public method setAuthors(PointerArray _authors) {
      authors <= _authors;
   }

   // <ui_handle.png>
   public method handleTypeChanged(boolean _bQuiet) {
      int oldCursorRow;

      if(!_bQuiet)
      {
         oldCursorRow = tv_plugins.getCursorRow();
         if(-1 == oldCursorRow)
            oldCursorRow = 0;
      }

      updateTable();

      if(!_bQuiet)
         tv_plugins.moveCursorToRow(oldCursorRow);
   }

   // <ui_handle.png>
   protected method handleFilterPresetChanged() {
      // // int optIdx = cm_filter_preset.getSelectedOption();
      // // String opt = filter_presets.get(optIdx);
      tf_filter.setText(cm_filter_preset.getSelectedOptionName());
      tf_filter.redraw();
      handleTypeChanged(false/*bQuiet*/);
      String flt = tf_filter.getText();
      if(!flt.isBlank())
         Global.Print("Filter preset is \""+flt+"\"");
   }

   // <method.png>
   public method resetFilter(boolean _bAllowDefault) {
      tf_filter.setText(_bAllowDefault ? default_filter_str : "");
      cm_filter_preset.setSelectedOption(-1);
   }

   // <method.png>
   public method autoFocusFilterWidget(Key _k) {
      if(@(UI.GetKeyboardFocus()) != @(tf_filter))
      {
         UI.SetKeyboardFocus(tf_filter);
         tf_filter.selectAll();
      }
      tf_filter.onKey(_k);
   }

   // <ui_update.png>
   public method updateTable() {
      String filter = tf_filter.getText().trim().toLower();

      STFXAuthor*[] *allAuthors;

      if(!filter.isBlank())
      {
         allAuthors <= VoicePlugins.sorted_voice_plugin_infos;
         PointerArray fltAuthors <= new PointerArray;
         STFXAuthor *author;

         String *mapName;
         String *mapFlt;
         local StringArray mapNameMatchLC;
         local StringArray mapFltMatchLC;
         int mapIdx = 0;
         loop(filter_mapping.numElements / 2)
         {
            mapName <= filter_mapping.get(mapIdx + 0);
            mapFlt  <= filter_mapping.get(mapIdx + 1);

            if(mapFlt.toLower() & filter)
            {
               mapNameMatchLC.add(mapName.toLower());
               mapFltMatchLC.add(mapFlt.toLower());
            }
            mapIdx += 2;
         }

         // int ms = milliSeconds();

         foreach author in allAuthors
         {
            STFXAuthor addAuthor <= null;
            StPluginInfo *en;

            if((author.name.toLower()) & filter)
            {
               addAuthor <= new STFXAuthor;
               addAuthor.name = author.name;
            }

            foreach en in author.entries
            {
               String effectNameLC <= en.getName().toLower();

               boolean bAdd =
                  ((en.author.toLower())   & filter) ||
                  (effectNameLC & filter) ;

               if(!bAdd)
               {
                  mapIdx = 0;
                  loop(mapNameMatchLC.numElements)
                  {
                     mapName <= mapNameMatchLC[mapIdx];
                     mapFlt  <= mapFltMatchLC [mapIdx];

                     if(effectNameLC & mapName)
                     {
                        bAdd = true;
                        break;
                     }

                     mapIdx++;
                  }
               }

               if(bAdd)
               {
                  if(null == addAuthor)
                  {
                     addAuthor <= new STFXAuthor;
                     addAuthor.name = author.name;
                  }
                  addAuthor.entries.add(en);
               }
            }

            if(null != addAuthor)
               fltAuthors.add(#(deref addAuthor));
         }

         // ms = milliSeconds() - ms;
         // trace "xxx autofilter key processing took "+ms+" ms";

         tm_plugins.setAuthors(deref fltAuthors);
      }
      else
      {
         allAuthors <= VoicePlugins.sorted_voice_plugin_infos;

         tm_plugins.setAuthors(allAuthors);
      }

      tm_plugins.tableModelChanged();
      tv_plugins.tableModelChanged();
   }

   // <ui_show.png>
   protected method showSelectedPluginInfo() {
      int rowIdx = tm_plugins.getCursorIndex();
      if(-1 != rowIdx)
      {
         StPluginInfo en <= tm_plugins.getDragObject(rowIdx);
         if(null != en)
            Global.Print("UID:"+en.getId()+" name=\""+en.getName()+"\"");
      }
   }

   // <method_get.png>
   public method getFilterPreset() : String {
      return tf_filter.getText();
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      // trace "xxx PluginList::onKey: name="+_k.name+" pressed="+_k.pressed+" released="+_k.released;

      if(0 == _k.mod)
      {
         switch(_k.pressed)
         {
            case 'f':
               UI.SetKeyboardFocus(tf_filter);
               return true;

            case 'g':
               UI.SetKeyboardFocus(cm_filter_preset);
               return true;
         }
      }

      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      switch(@(ap))
      {
         case @(tv_plugins):
            if(TableView.ACTION_ROWCLICKED == acName)
            {
            }
            else if(TableView.ACTION_ROWSELECTED == acName)
            {
               showSelectedPluginInfo();
            }
            return true;

         case @(tf_filter):
            if(TextField.ACTION_TEXTENTERED == acName) // return
            {
               UI.SetKeyboardFocus(tv_plugins);
            }

            cm_filter_preset.setSelectedOption(-1);
            handleTypeChanged(false/*bQuiet*/);
            Global.Print("Filter is \""+tf_filter.getText()+"\"");
            return true;

         case @(cm_filter_preset):
            handleFilterPresetChanged();
            return true;
      }

      return Panel::consumeAction(_ac);
   }

}
