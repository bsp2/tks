// ----
// ---- file   : SamplePluginModImportTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 04Jan2025
// ---- changed:
// ----
// ----
// ----

module MSamplePluginModImportTM;

use namespace ui;
use namespace st2;


// <class.png>
class SamplePluginModImportEntry {
   int    plugin_idx;
   String plugin_name;
   int    mod_idx;
   String mod_name;
}


// <class.png>
class SamplePluginModImportTM : TableModel {

   define int COL_NR          = 0;
   define int COL_PLUGIN_NR   = 1;
   define int COL_PLUGIN_NAME = 2;
   define int COL_MOD_NR      = 3;
   define int COL_MOD_NAME    = 4;

   SamplePluginModImportEntry *[] *entries;


   // <method_get.png>
   public virtual getNumColumns() : int {
      return 5;
   }

   // <method_get.png>
   public virtual getColumnCaption(int _col) : String {
      return ["Nr", "P#", "Plugin", "M#", "Mod"].get(_col);
   }

   // <method_get.png>
   public virtual getNumRows() : int {
      return (null != entries) ? entries.numElements : 0;
   }

   // <method_get.png>
   public virtual getCellCaption(int _col, int _row) : String {
      SamplePluginModImportEntry en <= entries.get(_row);
      if(null != en)
      {
         switch(_col)
         {
            case COL_NR:
               return String(_row + 1);

            case COL_PLUGIN_NR:
               return en.plugin_idx + 1;

            case COL_PLUGIN_NAME:
               return en.plugin_name;

            case COL_MOD_NR:
               return en.mod_idx + 1;

            case COL_MOD_NAME:
               return en.mod_name;
         }
      }
   }

   // <method_get.png>
   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_NR:
            return 40;

         case COL_PLUGIN_NR:
            return 30;

         case COL_PLUGIN_NAME:
            return 160;

         case COL_MOD_NR:
            return 30;

         case COL_MOD_NAME:
            return 200;
      }
   }

   // <method_get.png>
   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_NR:
            return 40;

         case COL_PLUGIN_NR:
            return 30;

         case COL_PLUGIN_NAME:
            return 160;

         case COL_MOD_NR:
            return 30;

         case COL_MOD_NAME:
            return 200;
      }
   }

}
