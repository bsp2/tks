// ----
// ---- file   : SamplePluginFMStackWaves.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2023-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer. see "fm_stack_v2/curves.cpp"
// ----
// ---- created: 21Aug2023
// ---- changed: 22Aug2023, 23Aug2023, 24Aug2023, 25Aug2023, 26Aug2023, 01Sep2023, 03Sep2023
// ----          06Sep2023, 07Sep2023, 08Sep2023, 09Sep2023, 10Sep2023, 11Sep2023, 12Sep2023
// ----          13Sep2023, 16Sep2023, 19Sep2023, 20Sep2023, 21Sep2023, 11Nov2023, 30Nov2023
// ----          15Dec2023, 11Jan2024, 21Jan2024, 07Feb2024, 27Apr2024, 28Apr2024
// ----
// ----
// ----

module MSamplePluginFMStackWaves;

use namespace ui;
use namespace st2;

FloatArray fmstack_lut_dat;  // 263 waves, 2048 floats per wave

function CalcInterpolatedWave(int waveIdxA, int waveIdxB, float amtB, FloatArray ret) {
   // (note) 'ret' must be allocated by caller

   if(fmstack_lut_dat.isEmpty())
   {
      local PakFile fh;
      if(fh.open("fmstack_lut.dat"))
      {
         fmstack_lut_dat.alloc(263 * 2048);
         loop(fmstack_lut_dat.maxElements)
            fmstack_lut_dat.add(fh.f32);
         fh.close();
      }
   }

   int waveOffA = waveIdxA * 2048;
   int waveOffB = waveIdxB * 2048;

   float a = 0.0f;
   float w = (2048.0f / ret.numElements);

   int i = 0;
   loop(ret.numElements)
   {
      ret[i++] = mathLerpf(fmstack_lut_dat.get(waveOffA + a), fmstack_lut_dat.get(waveOffB + a), amtB);
      a += w;
   }

}
