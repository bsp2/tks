// ----
// ---- file   : ModGridCLAPButton.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 03Jul2024
// ---- changed: 06Jul2024
// ----
// ----
// ----

module MModGridCLAPButton;

use namespace ui;
use namespace st2;


// <class.png>
class ModGridCLAPButton : ModGridButton {

   // <method.png>
   public method initCLAPButton() {
      initButton();
   }

   // <method.png>
   protected virtual contextMenuAddExtraPatchItems(PopupMenu spm) {
      PopupMenuButton *pmb;

      spm.addSeparator();
      pmb <= spm.addDefaultButton("CLAP param editor..", "patch_generic");
      pmb.setAccelerators("lshift-LMB click", "");

      spm.addSeparator();
      pmb <= spm.addDefaultButton("CLAP patch browser..", "patch_browser");
      pmb.setAccelerators("LMB hold click", "");

      spm.addSeparator();
      pmb <= spm.addDefaultButton("Load CLAP Patch..", "clap_patch_load");
      pmb <= spm.addDefaultButton("Save CLAP Patch..", "clap_patch_save");
   }

   // <ui_handle.png>
   public virtual handleEditMod() : boolean {
      provideAction(Action.New(getProvidedActionAlias(ACTION_TOGGLE_EDITOR), this));
      return true;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {

      String acName <= _action.getActionName();
      ActionProvider ap <= _action.getActionProvider();

      // trace "xxx ModGridButton: acName="+acName;

      Mod mod <= getUserData();
      ModCLAP modCLAP <= mod;

      switch(@(ap))
      {
         case @(pm_context):
            Global.Debug2("ModGridCLAPButton: pm_context acName="+acName);
            if(PopupMenu.IsFocusAction(_action))
               return true;
            if(ModGridButton::consumeAction(_action))
               return true;
            switch(acName)
            {
               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "patch_generic":
                  modCLAP.showGenericParamDialog();
                  return true;

               case "patch_browser":
                  parent_modgrid.showPatchBrowserDialogCLAP(mod);
                  return true;

               case "clap_patch_load":
                  parent_modgrid.handleCLAPPatchLoad(mod);
                  return true;

               case "clap_patch_save":
                  parent_modgrid.handleCLAPPatchSave(mod);
                  return true;
            }
            return true;
      }
      return Button::consumeAction(_action);
   }

}
