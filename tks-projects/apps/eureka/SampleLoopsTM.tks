// ----
// ---- file   : SampleLoopsTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 30Dec2018
// ---- changed: 04Jan2019, 04Oct2023, 26Apr2024, 07Jul2024
// ----
// ----
// ----

module MSampleLoopsTM;

use namespace ui;
use namespace st2;


// <class.png>
class SampleLoopsTM : TableModel {

   define int COL_ID  = 0;
   define int COL_OFF = 1;
   define int COL_LEN = 2;
   define int COL_REP = 3;

   Sample *smp;
   StSample *s;

   static int last_edited_col = COL_LEN;


   // <method_get.png>
   public virtual getNumColumns() : int {
      return 4;
   }

   // <method_get.png>
   public virtual getColumnCaption(int _col) : String {
      if(null != s)
      {
         return ["Id", "Off", "Len", (s.enableTimedLoop ? "MS" : "Rep")][_col];
      }
      else
      {
         return ["Id", "Off", "Len", "Rep"][_col];
      }
   }

   // <method_get.png>
   public virtual getNumRows() : int {
      if(null != s)
      {
         IntArray loops <= s.sampleLoops;
         if(null != loops)
         {
            return loops.numElements / 3;
         }
      }
      return 0;
   }

   // <method_get.png>
   public virtual getCellCaption(int _col, _row) : String {
      if(null != s)
      {
         IntArray loops <= s.sampleLoops;
         Integer io;
         if(null != loops)
         {
            switch(_col)
            {
               case COL_ID:
                  io = _row + 1;
                  return io.printf("%2d");////String(_row + 1);

               case COL_OFF:
                  return loops.get(_row * 3 + 0);

               case COL_LEN:
                  return loops.get(_row * 3 + 1);

               case COL_REP:
                  return loops.get(_row * 3 + 2) & 65535;
            }
         }
      }
      return "";
   }

   // <method_get.png>
   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 32;

         case COL_OFF:
            return 80;

         case COL_LEN:
            return 80;

         case COL_REP:
            return 32;
      }
   }

   // <method_get.png>
   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 32;

         case COL_OFF:
            return 80;

         case COL_LEN:
            return 80;

         case COL_REP:
            return 32;
      }
   }

   // <ui_handle.png>
   public virtual handleCellEditing(TableCellEditor _tce) {
      IntArray loops <= s.sampleLoops;
      if(null != loops)
      {
         TableCellEditorFloatParam *tcefp;
         PageSample pgSample <= root_form.pg_sample;

         switch(_tce.table_col)
         {
            case COL_OFF:
               tcefp <= _tce;
               pgSample.handleZoneOffsetChangedFromLoopsTM(tcefp.getValue());
               break;

            case COL_LEN:
               tcefp <= _tce;
               pgSample.handleZoneLenChangedFromLoopsTM(tcefp.getValue());
               break;

            case COL_REP:
               tcefp <= _tce;
               pgSample.handleZoneRepChangedFromLoopsTM(tcefp.getValue());
               break;
         }
      }
   }

   // <ui_handle.png>
   public virtual handleCellEdited(TableCellEditor _tce) {

      IntArray loops <= s.sampleLoops;
      if(null != loops)
      {
         TableCellEditorFloatParam *tcefp;
         PageSample pgSample <= root_form.pg_sample;

         switch(_tce.table_col)
         {
            case COL_OFF:
               tcefp <= _tce;
               pgSample.handleZoneOffsetChangedFromLoopsTM(tcefp.getValue());
               break;

            case COL_LEN:
               tcefp <= _tce;
               pgSample.handleZoneLenChangedFromLoopsTM(tcefp.getValue());
               break;

            case COL_REP:
               tcefp <= _tce;
               pgSample.handleZoneRepChangedFromLoopsTM(tcefp.getValue());
               break;
         }
      }
   }

   // <ui.png>
   public virtual getCellEditor(int _col, int _row) : TableCellEditor {

      IntArray loops <= s.sampleLoops;
      if(null != loops)
      {
         TableCellEditorFloatParam *tcefp;
         int idx = _row * 3;

         switch(_col)
         {
            case COL_OFF:
               tcefp <= new TableCellEditorFloatParam;
               tcefp.initFloatParamEditor(0, smp.waveform.getNumFrames(), loops.get(idx+0), 1, 1, 0, false, false);
               last_edited_col = _col;
               return deref tcefp;

            case COL_LEN:
               tcefp <= new TableCellEditorFloatParam;
               tcefp.initFloatParamEditor(0, smp.waveform.getNumFrames(), loops.get(idx+1), 1, 1, 0, false, false);
               last_edited_col = _col;
               return deref tcefp;

            case COL_REP:
               tcefp <= new TableCellEditorFloatParam;
               tcefp.initFloatParamEditor(0, 9999, loops.get(idx+2), 1, 1, 0, false, false);
               last_edited_col = _col;
               return deref tcefp;
         }
      }
   }

}
