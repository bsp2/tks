// ----
// ---- file   : SampleGlideForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2019-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 30Mar2019
// ---- changed: 31Mar2019, 17May2019, 17Feb2020, 19May2020, 06Sep2020, 10Dec2022, 08Sep2023
// ----
// ----
// ----

module MSampleGlideForm;

use namespace ui;
use namespace st2;


// <class.png>
class SampleGlideForm : XMLForm, ActionProvider {

   define String ACTION_ENTRY_EDITED;

   StSample *sample;
   Sample *sample_sci;

   protected ComboBox    *cm_type;

   protected FloatParam  *fp_time_up;
   protected FloatParam  *fp_time_down;
   protected FloatParam  *fp_freq_up;
   protected FloatParam  *fp_freq_down;

   protected CheckBox    *cb_release;
   protected FloatParam  *fp_maxnotedist;
   protected CheckBox    *cb_glissando;
   protected FloatParam  *fp_mintime;
   protected FloatParam  *fp_maxtime;

   protected CheckBox *cb_retrig_sample;
   protected CheckBox *cb_retrig_envfreq;
   protected CheckBox *cb_retrig_envvol;
   protected CheckBox *cb_retrig_envpan;
   protected CheckBox *cb_retrig_envaux;
   protected CheckBox *cb_retrig_lfofreq;
   protected CheckBox *cb_retrig_lfovol;
   protected CheckBox *cb_retrig_lfopan;
   protected CheckBox *cb_retrig_lfoaux;
   protected CheckBox *cb_retrig_modseq1;
   protected CheckBox *cb_retrig_modseq2;
   protected CheckBox *cb_retrig_modseq3;
   protected CheckBox *cb_retrig_modseq4;


   // <ui_init.png>
   public method init() : boolean {

      if(!initPakFile("SampleGlideForm.xfm"))
      {
         return false;
      }

      autoResolveIds(this);

      recursiveSetEnableCursorKeyTabCycling(false);

      return true;
   }

   // <ui.png>
   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_ENTRY_EDITED];
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      _retLayers.joinRR(_retLayers,
                        [
                           cm_type,

                           fp_time_up,
                           fp_time_down,
                           fp_freq_up,
                           fp_freq_down,

                           cb_release,
                           fp_maxnotedist,
                           cb_glissando,
                           fp_mintime,
                           fp_maxtime,

                           cb_retrig_sample,
                           cb_retrig_envfreq,
                           cb_retrig_envvol,
                           cb_retrig_envpan,
                           cb_retrig_envaux,
                           cb_retrig_lfofreq,
                           cb_retrig_lfovol,
                           cb_retrig_lfopan,
                           cb_retrig_lfoaux,
                           cb_retrig_modseq1,
                           cb_retrig_modseq2,
                           cb_retrig_modseq3,
                           cb_retrig_modseq4,

                         ]
                        );
   }

   // <method.png>
   protected method provideEdited() {
      sample_sci.markParamsAsModified();
      provideAction(Action.New(getProvidedActionAlias(ACTION_ENTRY_EDITED), this));
   }

   // <ui_show.png>
   public method showSample(StSample _sample, Sample _sampleSCI) {
      sample <= _sample;
      sample_sci <= _sampleSCI;

      boolean bEditable = (null != sample);

      cm_type.setEditable(bEditable);

      fp_time_up  .setEditable(bEditable);
      fp_time_down.setEditable(bEditable);
      fp_freq_up  .setEditable(bEditable);
      fp_freq_down.setEditable(bEditable);

      cb_release    .setEditable(bEditable);
      fp_maxnotedist.setEditable(bEditable);
      cb_glissando  .setEditable(bEditable);
      fp_mintime    .setEditable(bEditable);
      fp_maxtime    .setEditable(bEditable);

      cb_retrig_sample .setEditable(bEditable);
      cb_retrig_envfreq.setEditable(bEditable);
      cb_retrig_envvol .setEditable(bEditable);
      cb_retrig_envpan .setEditable(bEditable);
      cb_retrig_envaux .setEditable(bEditable);
      cb_retrig_lfofreq.setEditable(bEditable);
      cb_retrig_lfovol .setEditable(bEditable);
      cb_retrig_lfopan .setEditable(bEditable);
      cb_retrig_lfoaux .setEditable(bEditable);
      cb_retrig_modseq1.setEditable(bEditable);
      cb_retrig_modseq2.setEditable(bEditable);
      cb_retrig_modseq3.setEditable(bEditable);
      cb_retrig_modseq4.setEditable(bEditable);

      if(bEditable)
      {
         cm_type.setSelectedOption(sample.glideType);

         fp_time_up  .setValue(sample.glideSpeedTimeUp);
         fp_time_down.setValue(sample.glideSpeedTimeDown);
         fp_freq_up  .setValue(sample.glideSpeedFreqUp);
         fp_freq_down.setValue(sample.glideSpeedFreqDown);

         cb_release.setSelected(sample.enableGlideRelease);
         fp_maxnotedist.setValue(sample.glideMaxNoteDist);
         cb_glissando.setSelected(sample.enableGlideGlissando);
         fp_mintime.setValue(sample.glideMinTime);
         fp_maxtime.setValue(sample.glideMaxTime);

         cb_retrig_sample .setSelected(sample.enableGlideRetrigSample);
         cb_retrig_envfreq.setSelected(sample.enableGlideRetrigEnvFreq);
         cb_retrig_envvol .setSelected(sample.enableGlideRetrigEnvVol);
         cb_retrig_envpan .setSelected(sample.enableGlideRetrigEnvPan);
         cb_retrig_envaux .setSelected(sample.enableGlideRetrigEnvAux);
         cb_retrig_lfofreq.setSelected(sample.enableGlideRetrigLFOFreq);
         cb_retrig_lfovol .setSelected(sample.enableGlideRetrigLFOVol);
         cb_retrig_lfopan .setSelected(sample.enableGlideRetrigLFOPan);
         cb_retrig_lfoaux .setSelected(sample.enableGlideRetrigLFOAux);
         cb_retrig_modseq1.setSelected(sample.getEnableGlideRetrigModSeq(0));
         cb_retrig_modseq2.setSelected(sample.getEnableGlideRetrigModSeq(1));
         cb_retrig_modseq3.setSelected(sample.getEnableGlideRetrigModSeq(2));
         cb_retrig_modseq4.setSelected(sample.getEnableGlideRetrigModSeq(3));
      }
      else
      {
         cm_type.setSelectedOption(-1);

         fp_time_up  .setValue(0);
         fp_time_down.setValue(0);
         fp_freq_up  .setValue(0);
         fp_freq_down.setValue(0);

         cb_release.setSelected(false);
         fp_maxnotedist.setValue(5);
         cb_glissando.setSelected(false);
         fp_mintime.setValue(0);
         fp_maxtime.setValue(0);

         cb_retrig_sample .setSelected(false);
         cb_retrig_envfreq.setSelected(false);
         cb_retrig_envvol .setSelected(false);
         cb_retrig_envpan .setSelected(false);
         cb_retrig_envaux .setSelected(false);
         cb_retrig_lfofreq.setSelected(false);
         cb_retrig_lfovol .setSelected(false);
         cb_retrig_lfopan .setSelected(false);
         cb_retrig_lfoaux .setSelected(false);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleTypeChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      int type = cm_type.getSelectedOption();
      foreach s in zones
      {
         s.glideType = type;
      }

      provideEdited();
      Global.Print("Glide Type is "+cm_type.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected =replay= method handleTimeUpChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      Float speed = fp_time_up.getFloatValue();
      foreach s in zones
      {
         s.glideSpeedTimeUp = speed;
      }
      provideEdited();
      Global.Print("Glide Speed (Time) Up is "+speed+" milliseconds");
   }

   // <ui_handle.png>
   protected =replay= method handleTimeDownChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      Float speed = fp_time_down.getFloatValue();
      foreach s in zones
      {
         s.glideSpeedTimeDown = speed;
      }
      provideEdited();
      Global.Print("Glide Speed (Time) Down is "+speed+" milliseconds");
   }

   // <ui_handle.png>
   protected =replay= method handleFreqUpChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      Float speed = fp_freq_up.getFloatValue();
      foreach s in zones
      {
         s.glideSpeedFreqUp = speed;
      }
      provideEdited();
      Global.Print("Glide Speed (Freq) Up is "+speed+" semitones / second");
   }

   // <ui_handle.png>
   protected =replay= method handleFreqDownChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      Float speed = fp_freq_down.getFloatValue();
      foreach s in zones
      {
         s.glideSpeedFreqDown = speed;
      }
      provideEdited();
      Global.Print("Glide Speed (Freq) Down is "+speed+" semitones / second");
   }

   // <ui_handle.png>
   protected =replay= method handleReleaseChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      boolean bEnable = cb_release.isSelected();
      foreach s in zones
      {
         s.enableGlideRelease = bEnable;
      }
      provideEdited();
      Global.Print("Release-Phase Glides are "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected =replay= method handleMaxNoteDistChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      Float maxNoteDist = fp_maxnotedist.getFloatValue();
      foreach s in zones
      {
         s.glideMaxNoteDist = maxNoteDist;
      }
      provideEdited();
      Global.Print("Glide Max Note Distance is "+maxNoteDist+" semitones");
   }

   // <ui_handle.png>
   protected =replay= method handleGlissandoChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      boolean bEnable = cb_glissando.isSelected();
      foreach s in zones
      {
         s.enableGlideGlissando = bEnable;
      }
      provideEdited();
      Global.Print("Glissando is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected =replay= method handleMinTimeChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      Float ms = fp_mintime.getFloatValue();
      foreach s in zones
      {
         s.glideMinTime = ms;
      }
      provideEdited();
      Global.Print("Glide Min Time Threshold is "+ms+" milliseconds");
   }

   // <ui_handle.png>
   protected =replay= method handleMaxTimeChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      Float ms = fp_maxtime.getFloatValue();
      foreach s in zones
      {
         s.glideMaxTime = ms;
      }
      provideEdited();
      Global.Print("Glide Max Time Threshold is "+ms+" milliseconds");
   }

   // <ui_handle.png>
   protected =replay= method handleRetrigSampleChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      boolean bEnable = cb_retrig_sample.isSelected();
      foreach s in zones
      {
         s.enableGlideRetrigSample = bEnable;
      }
      provideEdited();
      Global.Print("Retrig Sample is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected =replay= method handleRetrigEnvFreqChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      boolean bEnable = cb_retrig_envfreq.isSelected();
      foreach s in zones
      {
         s.enableGlideRetrigEnvFreq = bEnable;
      }
      provideEdited();
      Global.Print("Retrig Frequency Envelope is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected =replay= method handleRetrigEnvVolChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      boolean bEnable = cb_retrig_envvol.isSelected();
      foreach s in zones
      {
         s.enableGlideRetrigEnvVol = bEnable;
      }
      provideEdited();
      Global.Print("Retrig Volume Envelope is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected =replay= method handleRetrigEnvPanChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      boolean bEnable = cb_retrig_envpan.isSelected();
      foreach s in zones
      {
         s.enableGlideRetrigEnvPan = bEnable;
      }
      provideEdited();
      Global.Print("Retrig Panning Envelope is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected =replay= method handleRetrigEnvAuxChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      boolean bEnable = cb_retrig_envaux.isSelected();
      foreach s in zones
      {
         s.enableGlideRetrigEnvAux = bEnable;
      }
      provideEdited();
      Global.Print("Retrig Auxiliary Envelope is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected =replay= method handleRetrigLFOFreqChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      boolean bEnable = cb_retrig_lfofreq.isSelected();
      foreach s in zones
      {
         s.enableGlideRetrigLFOFreq = bEnable;
      }
      provideEdited();
      Global.Print("Retrig Frequency LFO is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected =replay= method handleRetrigLFOVolChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      boolean bEnable = cb_retrig_lfovol.isSelected();
      foreach s in zones
      {
         s.enableGlideRetrigLFOVol = bEnable;
      }
      provideEdited();
      Global.Print("Retrig Volume LFO is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected =replay= method handleRetrigLFOPanChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      boolean bEnable = cb_retrig_lfopan.isSelected();
      foreach s in zones
      {
         s.enableGlideRetrigLFOPan = bEnable;
      }
      provideEdited();
      Global.Print("Retrig Panning LFO is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected =replay= method handleRetrigLFOAuxChanged() {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      boolean bEnable = cb_retrig_lfoaux.isSelected();
      foreach s in zones
      {
         s.enableGlideRetrigLFOAux = bEnable;
      }
      provideEdited();
      Global.Print("Retrig Auxiliary LFO is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected =replay= method handleRetrigModSeqChanged(int _idx, boolean _bEnable) {
      local PointerArray zones <= root_form.pg_sample.getSelectedZones();
      StSample *s;
      foreach s in zones
      {
         s.setEnableGlideRetrigModSeq(_idx, _bEnable);
      }
      provideEdited();
      Global.Print("Retrig ModSeq M"+(_idx+1)+" is "+Utils.GetEnableString(_bEnable));
   }

   // <ui_handle.png>
   protected method handleRetrigToggleAll() {
      local CheckBox*[] cbAll <= [
         cb_retrig_sample,
         cb_retrig_envfreq,
         cb_retrig_envvol,
         cb_retrig_envpan,
         cb_retrig_envaux,
         cb_retrig_lfofreq,
         cb_retrig_lfovol,
         cb_retrig_lfopan,
         cb_retrig_lfoaux,
         cb_retrig_modseq1,
         cb_retrig_modseq2,
         cb_retrig_modseq3,
         cb_retrig_modseq4,
                                  ];
      boolean bAllSel = true;
      CheckBox *cb;
      foreach cb in cbAll
      {
         bAllSel = bAllSel && cb.isSelected();
      }

      bAllSel = !bAllSel;
      foreach cb in cbAll
      {
         cb.setSelected(bAllSel);
      }

      handleRetrigSampleChanged();

      handleRetrigEnvFreqChanged();
      handleRetrigEnvVolChanged();
      handleRetrigEnvPanChanged();
      handleRetrigEnvAuxChanged();

      handleRetrigLFOFreqChanged();
      handleRetrigLFOVolChanged();
      handleRetrigLFOPanChanged();
      handleRetrigLFOAuxChanged();

      handleRetrigModSeqChanged(0, bAllSel);
      handleRetrigModSeqChanged(1, bAllSel);
      handleRetrigModSeqChanged(2, bAllSel);
      handleRetrigModSeqChanged(3, bAllSel);

      Global.Print( (bAllSel?"Set":"Clear")+" all retrig flags" );
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {

      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      //trace "xxx SampleGlideForm::consumeAction: acName=\""+acName+"\".";

      switch(@(ap))
      {
         case @(cm_type):
            handleTypeChanged();
            return true;

         case @(fp_time_up):
            handleTimeUpChanged();
            return true;

         case @(fp_time_down):
            handleTimeDownChanged();
            return true;

         case @(fp_freq_up):
            handleFreqUpChanged();
            return true;

         case @(fp_freq_down):
            handleFreqDownChanged();
            return true;

         case @(cb_release):
            handleReleaseChanged();
            return true;

         case @(fp_maxnotedist):
            handleMaxNoteDistChanged();
            return true;

         case @(cb_glissando):
            handleGlissandoChanged();
            return true;

         case @(fp_mintime):
            handleMinTimeChanged();
            return true;

         case @(fp_maxtime):
            handleMaxTimeChanged();
            return true;

         case @(cb_retrig_sample):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigSampleChanged();
            return true;

         case @(cb_retrig_envfreq):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigEnvFreqChanged();
            return true;

         case @(cb_retrig_envvol):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigEnvVolChanged();
            return true;

         case @(cb_retrig_envpan):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigEnvPanChanged();
            return true;

         case @(cb_retrig_envaux):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigEnvAuxChanged();
            return true;

         case @(cb_retrig_lfofreq):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigLFOFreqChanged();
            return true;

         case @(cb_retrig_lfovol):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigLFOVolChanged();
            return true;

         case @(cb_retrig_lfopan):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigLFOPanChanged();
            return true;

         case @(cb_retrig_lfoaux):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigLFOAuxChanged();
            return true;

         case @(cb_retrig_modseq1):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigModSeqChanged(0, cb_retrig_modseq1.isSelected());
            return true;

         case @(cb_retrig_modseq2):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigModSeqChanged(1, cb_retrig_modseq2.isSelected());
            return true;

         case @(cb_retrig_modseq3):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigModSeqChanged(2, cb_retrig_modseq3.isSelected());
            return true;

         case @(cb_retrig_modseq4):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleRetrigToggleAll();
            else
               handleRetrigModSeqChanged(3, cb_retrig_modseq4.isSelected());
            return true;
      }

      return XMLForm::consumeAction(_ac);
   }

}
