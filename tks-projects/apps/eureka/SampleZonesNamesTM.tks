// ----
// ---- file   : SampleZonesNamesTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 15May2020
// ---- changed: 08Jun2020, 04Oct2023
// ----
// ----
// ----

module MSampleZonesNamesTM;

use namespace ui;
use namespace st2;


// <class.png>
class SampleZonesNamesTM : TableModel {

   define int COL_ID        =  0;
   define int COL_GRP       =  1;
   define int COL_TRP       =  2;
   define int COL_VOL       =  3;
   define int COL_PAN       =  4;
   define int COL_LOKEY     =  5;
   define int COL_HIKEY     =  6;
   define int COL_NAME      =  7;
   define int COL_VOICEBUS  =  8;
   define int COL_ALT       =  9;

   StSampleBank *sample_bank;


   // <method_init.png>
   public virtual initTableModel() {

      TableModel::initTableModel();
   }

   // <method_get.png>
   public virtual getNumColumns() : int {
      return 10;
   }

   // <method_get.png>
   public virtual getColumnCaption(int _col) : String {
      return ["Id", "Grp", "Trp", "Vol", "Pan", "LK", "HK", "Name", "Bus", "Alt"][_col];
   }

   // <method_get.png>
   public virtual getNumRows() : int {
      if(null != sample_bank)
      {
         return sample_bank.numSamples;
      }
      return 0;
   }

   // <method_get.png>
   virtual getCellIcon(int _col, _row) : Icon {
      if(null != sample_bank)
      {
         StSample smp <= sample_bank.getSampleByIdx(_row);
         Icon checkIcon <= UI.GetIcon("mgrctl_celvis");

         switch(_col)
         {
            case COL_ALT:
               return smp.enableAlt ? checkIcon : null;
         }
      }
      return null;
   }

   // <method_get.png>
   public virtual getCellCaption(int _col, _row) : String {
      if(null != sample_bank)
      {
         StSample smp <= sample_bank.getSampleByIdx(_row);
         Float fo;
         StRange *range;
         IntArray *loops;
         Integer io;

         switch(_col)
         {
            case COL_ID:
               io = _row + 1;
               return io.printf("%2d");////String(_row + 1);

            case COL_GRP:
               return (null != smp.mutexGroup) ? (smp.mutexGroup.name) : "-";

            case COL_TRP:
               fo = smp.transpose;
               return fo.printf("%2.2f");

            case COL_VOL:
               fo = smp.volume;
               return fo.printf("%3.1f");

            case COL_PAN:
               fo = smp.pan;
               return fo.printf("%3.1f");

            case COL_LOKEY:
               range <= smp.keyRange;
               if(null != range)
                  return MIDI.midi_notes.get(range.lo);
               return "C-0";

            case COL_HIKEY:
               range <= smp.keyRange;
               if(null != range)
                  return MIDI.midi_notes.get(range.hi);
               return "G-A";

            case COL_NAME:
               return smp.name;

            case COL_VOICEBUS:
               return (smp.voiceBus < 0) ? "-" : (0 == smp.voiceBus) ? "<c>" : smp.voiceBus;

            case COL_ALT:
               return "";
         }
      }
      return "-";
   }

   // <method_get.png>
   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 28;

         case COL_GRP:
            return 24;

         case COL_TRP:
            return 36;

         case COL_VOL:
            return 28;

         case COL_PAN:
            return 28;

         case COL_LOKEY:
            return 28;

         case COL_HIKEY:
            return 28;

         case COL_NAME:
            return 119;  // sum of lv/hv/lm/hm in other table model

         case COL_VOICEBUS:
            return 28;

         case COL_ALT:
            return 24;
      }
   }

   // <method_get.png>
   public virtual getPreferredColumnWidth(int _col) : int {
      return getMinimumColumnWidth(_col);
   }

   // <method_get.png>
   public virtual canDropObject(Object _dragObject, int _row) : boolean {
      return (_dragObject instanceof StringArray); // pathname array, see PageSample.handleDropFiles()
   }

   // <ui_handle.png>
   public virtual handleCellEditing(TableCellEditor _tce) {
      switch(_tce.table_col)
      {
         case COL_NAME:
            handleCellEdited(_tce);
            break;
      }
   }

   // <ui_handle.png>
   public virtual handleCellEdited(TableCellEditor _tce) {

      if(null != sample_bank)
      {
         StSample smp <= sample_bank.getSampleByIdx(_tce.table_row);

         if(null != smp)
         {
            TableCellEditorString *tcestr;

            switch(_tce.table_col)
            {
               case COL_NAME:
                  tcestr <= _tce;
                  smp.name = tcestr.getText();
                  Sample sample <= root_form.pg_sample.getSelectedSample();
                  sample.markParamsAsModified();
                  tableModelChanged();
                  break;
            }
         }
      }
   }

   // <ui.png>
   public virtual getCellEditor(int _col, int _row) : TableCellEditor {

      if(null != sample_bank)
      {
         StSample smp <= sample_bank.getSampleByIdx(_row);

         if(null != smp)
         {
            TableCellEditorString *tcestr;

            switch(_col)
            {
               case COL_NAME:
                  tcestr <= new TableCellEditorString;
                  tcestr.initStringEditor(smp.name);
                  tcestr.setMaxCols(32);
                  return deref tcestr;
            }
         }
      }
   }

}
