// ----
// ---- file   : ModGridGateAudioButton.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 05Jan2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 05Jan2025
// ---- changed: 
// ----
// ----
// ----

module MModGridGate2AudioButton;

use namespace ui;
use namespace st2;


// <class.png>
class ModGridGate2AudioButton : ModGridButton, ActionConsumer {
   protected ModGate2Audio *mod;

   protected ComboBox *cm_mask;


   // <ui_init.png>
   public method initGate2AudioButton(ModGate2Audio _mod) {

      initModGridButton();

      setLayout(SuperBorderLayout);
      setEnableKbdFocusOnMouse(false);
      setLookAndFeel(LookAndFeel.LIGHT);

      mod <= _mod;

      cm_mask <= ComboBox.New();
      cm_mask.setAlignment(Layout.BASELINE);
      cm_mask.setEnableBaselineContentShift(true);
      cm_mask.setRequiredSizeY(ModGrid.GetModButtonSizeY());
      cm_mask.setLookAndFeel(LookAndFeel.LIGHT);
      cm_mask.setPadLeft(4);
      cm_mask.setOptions(["-", "Left", "Right", "Stereo"]);
      cm_mask.setSelectedOption(mod.channel_mask);
      addLayer(deref cm_mask, Layout.RIGHT);

      Label lb <= Label.New();
      lb.setCaption("Gate2Audio");
      lb.setLookAndFeel(LookAndFeel.LIGHT);
      lb.setAlignment(Layout.BASELINE);
      lb.setPadLeft(2);
      addLayer(deref lb, Layout.LEFT);
   }

   // <method_set.png>
   public virtual setEnableHold(boolean _bHold) {
      // prevent Button HOLD_CLICK action (=> edit modmatrix)
   }

   // <ui_render.png>
   public virtual onDraw() {
      UIRenderer.DrawDefaultControlBackground(0, 0, getSizeX(), getSizeY());
      drawGridBorder();
      UIRenderer.DrawDefaultRaisedBorderRight(0, 0, getSizeX(), getSizeY());
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      switch(@(ap))
      {
         case @(cm_mask):
            mod.setChannelMask(cm_mask.getSelectedOption());
            return true;
      }

      return ModGridButton::consumeAction(_ac);
   }

}
