// ----
// ---- file   : SampleZonesTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 22Dec2018
// ---- changed: 23Dec2018, 27Dec2018, 31Dec2018, 04Jan2019, 05Jan2019, 06Jan2019, 20Jul2019
// ----          04Oct2023, 13Apr2024
// ----
// ----
// ----

module MSampleZonesTM;

use namespace ui;
use namespace st2;


// <class.png>
class SampleZonesTM : TableModel {

   define int COL_ID        =  0;
   define int COL_GRP       =  1;
   define int COL_TRP       =  2;
   define int COL_VOL       =  3;
   define int COL_PAN       =  4;
   define int COL_LOKEY     =  5;
   define int COL_HIKEY     =  6;
   define int COL_LOVEL     =  7;
   define int COL_HIVEL     =  8;
   define int COL_LOMOD     =  9;
   define int COL_HIMOD     = 10;
   define int COL_NUMLOOPS  = 11;
   define int COL_ALT       = 12;

   StSampleBank *sample_bank;

   // protected CheckBox cb_alt_edit;


   // <method_init.png>
   public virtual initTableModel() {

      // initCheckBox(cb_alt_edit);
      // cb_alt_edit.setIconNamePrefix("chb");

      TableModel::initTableModel();
   }

   // <method_get.png>
   public virtual getNumColumns() : int {
      return 13;
   }

   // <method_get.png>
   public virtual getColumnCaption(int _col) : String {
      return ["Id", "Grp", "Trp", "Vol", "Pan", "LK", "HK", "LV", "HV", "LM", "HM", "#Lp", "Alt"][_col];
   }

   // <method_get.png>
   public virtual getNumRows() : int {
      if(null != sample_bank)
      {
         return sample_bank.numSamples;
      }
      return 0;
   }

   // <method_get.png>
   virtual getCellIcon(int _col, _row) : Icon {
      if(null != sample_bank)
      {
         StSample smp <= sample_bank.getSampleByIdx(_row);
         Icon checkIcon <= UI.GetIcon("mgrctl_celvis");

         switch(_col)
         {
            case COL_ALT:
               return smp.enableAlt ? checkIcon : null;
         }
      }
      return null;
   }

   // // <method_get.png>
   // public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
   //    Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);
   //    Layer ret <= lb;

   //    if(null != sample_bank)
   //    {
   //       StSample smp <= sample_bank.getSampleByIdx(_row);

   //       CheckBox *cb;

   //       if(COL_ALT == _col)
   //       {
   //          if(_row == cursor_index)
   //          {
   //             // Row is possibly being edited (at least it is selected..)
   //             cb <= cb_alt_edit;

   //             cb.setSelected(smp.enableAlt);
   //             cb.setInnerPadTop(1.0f);
   //             cb.setPositionX(4.0f);
   //             ret <= cb;
   //          }
   //       }

   //    } // if sample_bank

   //    ret.setRequiredSizeY(15);

   //    return ret;
   // }

   // <method_get.png>
   public virtual getCellCaption(int _col, _row) : String {
      if(null != sample_bank)
      {
         StSample smp <= sample_bank.getSampleByIdx(_row);
         Float fo;
         StRange *range;
         IntArray *loops;
         Integer io;

         switch(_col)
         {
            case COL_ID:
               io = _row + 1;
               return io.printf("%2d");///String(_row + 1);

            case COL_GRP:
               return (null != smp.mutexGroup) ? (smp.mutexGroup.name) : "-";

            case COL_TRP:
               fo = smp.transpose;
               return fo.printf("%2.2f");

            case COL_VOL:
               fo = smp.volume;
               return fo.printf("%3.1f");

            case COL_PAN:
               fo = smp.pan;
               return fo.printf("%3.1f");

            case COL_LOKEY:
               range <= smp.keyRange;
               if(null != range)
                  return MIDI.midi_notes.get(range.lo);
               return "C-0";

            case COL_HIKEY:
               range <= smp.keyRange;
               if(null != range)
                  return MIDI.midi_notes.get(range.hi);
               return "G-A";

            case COL_LOVEL:
               range <= smp.velRange;
               if(null != range)
                  return int(127*range.lo);
               return "0";

            case COL_HIVEL:
               range <= smp.velRange;
               if(null != range)
                  return int(127*range.hi);
               return "128";

            case COL_LOMOD:
               range <= smp.modRange;
               if(null != range)
               {
                  return ((!range.enableNoteOnFilter && (range.fadeIn > 0)) ? "<":"") + String(int(127*range.lo));
               }
               return "0";

            case COL_HIMOD:
               range <= smp.modRange;
               if(null != range)
               {
                  return String(int(127*range.hi)) + ((!range.enableNoteOnFilter && (range.fadeOut > 0)) ? ">":"");
               }
               return "128";

            case COL_NUMLOOPS:
               loops <= smp.sampleLoops;
               if(null != loops)
                  return loops.numElements / 3;
               return "-";

            case COL_ALT:
               return "";
         }
      }
      return "-";
   }

   // public =replay= virtual handleCellOnMouse(int _col, int _row, MouseEvent _ev) : boolean {
   //    boolean bChanged;
   //    boolean bOldState;

   //    if(null != sample_bank)
   //    {
   //       StSample smp <= sample_bank.getSampleByIdx(_row);

   //       if(COL_ALT == _col)
   //       {
   //          // trace "xxx handleCellOnMouse: 1"+" _ev.current_state="+_ev.current_state+" _ev.changed_state="+_ev.changed_state;
   //          bOldState = cb_alt_edit.isSelected();

   //          if(cb_alt_edit.onMouse(_ev))
   //          {
   //             // trace "xxx handleCellOnMouse: 2";
   //             bChanged = cb_alt_edit.isSelected();

   //             if(bOldState ^ bChanged)
   //             {
   //                smp.enableAlt = cb_alt_edit.isSelected();
   //                sample_bank.updateAltGroups();

   //                Global.Print("Alt is "+Utils.GetEnableString(smp.enableAlt));

   //                return true;
   //             }
   //             // ...
   //          }

   //       }
   //    }

   //    return false;
   // }

   // <method_get.png>
   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 22;

         case COL_GRP:
            return 24;

         case COL_TRP:
            return 36;

         case COL_VOL:
            return 24;

         case COL_PAN:
            return 28;

         case COL_LOKEY:
            return 28;

         case COL_HIKEY:
            return 24;

         case COL_LOVEL:
            return 24;

         case COL_HIVEL:
            return 24;

         case COL_LOMOD:
            return 24;

         case COL_HIMOD:
            return 24;

         case COL_NUMLOOPS:
            return 28;

         case COL_ALT:
            return 14;
      }
   }

   // <method_get.png>
   public virtual getPreferredColumnWidth(int _col) : int {
      return getMinimumColumnWidth(_col);
   }

   // <method_get.png>
   public virtual canDropObject(Object _dragObject, int _row) : boolean {
      return (_dragObject instanceof StringArray); // pathname array, see PageSample.handleDropFiles()
   }

}
