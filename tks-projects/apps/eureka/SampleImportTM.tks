// ----
// ---- file   : SampleImportTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 25Mar2023
// ---- changed:
// ----
// ----
// ----

module MSampleImportTM;

use namespace ui;
use namespace st2;


// <class.png>
class SampleImportEntry {
   String loc;   // 1: location display name, e.g. "Tascam DR-05X"
   String name;  // 2: wav filename
   String name_orig;  // restore to original name when name is set to ""
   String dur;   // 3: duration, hh:mm:ss:mmm
   String rate;  // 4: e.g. 96000
   String bits;  // 5: e.g. 24bit
   String ch;    // 6: e.g. 2
   String date;  // 7: e.g. 2023-03-25 09:31:05
   String info;  // 8: BWF description

   String path_name;  // source path name
}


// <class.png>
class SampleImportTM : TableModel {

   define int COL_ID   = 0;
   define int COL_LOC  = 1;
   define int COL_NAME = 2;
   define int COL_DUR  = 3;
   define int COL_RATE = 4;
   define int COL_BITS = 5;
   define int COL_CH   = 6;
   define int COL_DATE = 7;  // BWF date+time
   define int COL_INFO = 8;  // BWF description

   SampleImportEntry *[] entries;

   protected Label *lb_def;


   // <ui_init.png>
   public virtual initTableModel() {
      TableModel::initTableModel();

      lb_def <= new Label;
      lb_def.initLabel();
      lb_def.setAlpha(255);
      lb_def.setFontByName(UIConstants.DEFAULT_FONT_NAME_LABEL);
      lb_def.setTextPlacement(Layout.LEFT);
      lb_def.setInnerPadding4f(1,2,1,1);
      lb_def.setEnableFillBackground(true);
      lb_def.setEnableBackgroundKeepAlpha(true);
      // // lb_def.setEnableAbbreviation(true);
   }

   // <method_get.png>
   public virtual getNumColumns() : int {
      return 9;
   }

   // <method_get.png>
   public virtual getColumnCaption(int _col) : String {
      return ["Id", "Dev", "Name", "Dur", "Rate", "Bits", "Ch", "Date", "Info"][_col];
   }

   // <method_get.png>
   public virtual getNumRows() : int {
      if(null != entries)
         return entries.numElements;
      return 0;
   }

   // <method_get.png>
   public virtual getCellCaption(int _col, _row) : String {
      SampleImportEntry en <= entries.get(_row);
      if(null != en)
      {
         switch(_col)
         {
            case COL_ID:
               return String(_row + 1);

            case COL_LOC:
               return en.loc;

            case COL_NAME:
               return en.name;

            case COL_DUR:
               return en.dur;

            case COL_RATE:
               return en.rate;

            case COL_BITS:
               return en.bits;

            case COL_CH:
               return en.ch;

            case COL_DATE:
               return en.date;

            case COL_INFO:
               return en.info;
         }
      }
   }

   // <method_get.png>
   public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
      String cap <= getCellCaption(_col, _row);
      if(COL_NAME == _col)
      {
         lb_def.setToolTipCaption(cap);
      }
      lb_def.setCaption(cap);
      return lb_def;
   }

   // <method_get.png>
   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 36;

         case COL_LOC:
            return 80;

         case COL_NAME:
            return 350;

         case COL_DUR:
            return 70;

         case COL_RATE:
            return 40;

         case COL_BITS:
            return 16;

         case COL_CH:
            return 14;

         case COL_DATE:
            return 100;

         case COL_INFO:
            return 140;
      }
   }

   // <method_get.png>
   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 36;

         case COL_LOC:
            return 100;

         case COL_NAME:
            return 600;

         case COL_DUR:
            return 70;

         case COL_RATE:
            return 40;

         case COL_BITS:
            return 16;

         case COL_CH:
            return 14;

         case COL_DATE:
            return 100;

         case COL_INFO:
            return 400;
      }
   }

   // // // <method_get.png>
   // // public virtual getDragObject(int _row) : Object {
   // //    SampleCacheEntry en;
   // //    local StringArray ret;
   // //    if(selected_rows.numElements >= 1)
   // //    {
   // //       int selRowIdx;
   // //       foreach selRowIdx in selected_rows
   // //       {
   // //          en <= entries.get(selRowIdx);
   // //          ret.add(STConfig.sample_rootpath+"/"+en.rel_path+"/"+en.unique_name);
   // //       }
   // //    }
   // //    else
   // //    {
   // //       en <= entries.get(_row);
   // //       ret.add(STConfig.sample_rootpath+"/"+en.rel_path+"/"+en.unique_name);
   // //    }
   // //    return deref ret;
   // // }

   // <ui_handle.png>
   public virtual handleCellEdited(TableCellEditor _tce) {

      SampleImportEntry en <= entries.get(_tce.table_row);
      if(null != en)
      {
         TableCellEditorString *tcestr;

         switch(_tce.table_col)
         {
            case COL_NAME:
               tcestr <= _tce;
               local String name = Utils.ConvertToFileName(tcestr.getText());
               if(name.isBlank())
                  name = en.name_orig;
               if!(name.toLower() >= ".wav")
                  name.append(".wav");
               en.name = name;
               tableModelChanged();
               break;
         }
      }
   }

   // <ui.png>
   public virtual getCellEditor(int _col, int _row) : TableCellEditor {

      SampleImportEntry en <= entries.get(_row);
      if(null != en)
      {
         TableCellEditorString *tcestr;

         switch(_col)
         {
            case COL_NAME:
               tcestr <= new TableCellEditorString;
               tcestr.initStringEditor(en.name);
               tcestr.setMaxCols(512);
               tcestr.setVisibleTextLength(56);
               return deref tcestr;
         }
      }
   }

}
