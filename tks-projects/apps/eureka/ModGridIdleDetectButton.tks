// ----
// ---- file   : ModGridIdleDetectButton.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2019-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 31Jul2019
// ---- changed: 04Oct2023, 01Nov2023
// ----
// ----
// ----

module MModGridIdleDetectButton;

use namespace ui;
use namespace st2;


// <class.png>
class ModGridIdleDetectButton : ModGridButton, ActionConsumer {
   protected ModIdleDetect *mod;

   protected Dial *dl_threshold;
   protected Dial *dl_holdtime;


   // <ui_init.png>
   public method initIdleDetectButton(ModIdleDetect _mod) {

      initModGridButton();

      setLayout(SuperBorderLayout);
      setEnableKbdFocusOnMouse(false);
      setLookAndFeel(LookAndFeel.LIGHT);

      mod <= _mod;

      Label *lb;

      Panel pAll <= new Panel;
      pAll.initPanel();
      pAll.setAlignment(Layout.EXPANDY);
      addLayer(deref pAll, Layout.CENTER);

      dl_threshold <= new Dial;
      dl_threshold.initDial(-100.0f, 0.0f, mod.threshold_db);
      dl_threshold.setRequiredSize2f(ModGrid.GetDialSizeX(), ModGrid.GetModButtonSizeY());
      dl_threshold.setEnableKbdFocusOnMouse(false);
      dl_threshold.setResetValue(-70.0f);
      dl_threshold.setPadLeft(1);
      dl_threshold.setPadRight(1);
      dl_threshold.setAlignment(Layout.CENTERY);
      dl_threshold.setLookAndFeel(LookAndFeel.LIGHT);
      pAll.addLayer(deref dl_threshold, Layout.LEFT);

      lb <= Label.New();
      lb.setAlignment(Layout.EXPANDX | Layout.CENTERY);
      lb.setEnableAbbreviation(false);
      lb.setCaption("Level:");
      lb.setTextPlacement(Layout.LEFT);
      lb.setEnableFillBackground(true);
      lb.setLookAndFeel(LookAndFeel.LIGHT);
      pAll.addLayer(deref lb, Layout.LEFT);

      lb <= Label.New();
      lb.setAlignment(Layout.EXPANDX | Layout.CENTERY);
      lb.setEnableAbbreviation(false);
      lb.setCaption("Time:");
      lb.setTextPlacement(Layout.LEFT);
      lb.setEnableFillBackground(true);
      lb.setLookAndFeel(LookAndFeel.LIGHT);
      lb.setPadLeft(8);
      pAll.addLayer(deref lb, Layout.RIGHT);

      dl_holdtime <= new Dial;
      dl_holdtime.initDial(1.0f, 5000.0f, mod.hold_num_millisec);
      dl_holdtime.setRequiredSize2f(ModGrid.GetDialSizeX(), ModGrid.GetModButtonSizeY());
      dl_holdtime.setEnableKbdFocusOnMouse(false);
      dl_holdtime.setResetValue(1000.0f);
      dl_holdtime.setPadLeft(1);
      dl_holdtime.setPadRight(1);
      dl_holdtime.setAlignment(Layout.CENTERY);
      dl_holdtime.setLookAndFeel(LookAndFeel.LIGHT);
      pAll.addLayer(deref dl_holdtime, Layout.RIGHT);
   }

   // <method_set.png>
   public virtual setEnableHold(boolean _bHold) {
      // prevent Button HOLD_CLICK action (=> edit modmatrix)
   }

   // <ui_timer.png>
   public virtual handleIdleTimer() {
      // overwrites ModGridButtonBase::handleIdleTimer()
   }

   // <ui_render.png>
   public virtual onDraw() {
      UIRenderer.DrawDefaultControlBackground(0, 0, getSizeX(), getSizeY());
      drawGridBorder();

      UIRenderer.DrawDefaultRaisedBorderRight(0, 0, getSizeX(), getSizeY());
   }

   // <ui_mouse.png>
   public virtual onMouse(MouseEvent _ev) : boolean {
      return ModGridButton::onMouse(_ev);
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      switch(@(ap))
      {
         case @(dl_threshold):
            mod.setThreshold(dl_threshold.getValue());
            Global.Print("Threshold is "+mod.threshold_db+"dB ("+mod.threshold_level+")");
            current_project.markAsModified();
            return true;

         case @(dl_holdtime):
            mod.setHoldTime(dl_holdtime.getValue());
            Global.Print("Hold Time is "+mod.hold_num_millisec+" milliseconds");
            current_project.markAsModified();
            return true;
      }

      return ModGridButton::consumeAction(_ac);
   }
}
