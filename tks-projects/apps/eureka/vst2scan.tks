// ----
// ---- file   : vst2scan.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : utility script started by vst2.tks VSTDeepScanJob class.
// ----
// ---- created: 13Jan2024
// ----
// ----
// ----

use tkvst2;

// usage:  tks vst2scan <vst2_pathname>
//
//  e.g. $ tks vst2scan.tks /Library/Audio/Plug-Ins/VST/ABL3x.vst
//

// <class.png>
class VSTScanEntry {
   // see vst2.tks
   String path_name;        // absolute path name

   boolean b_bad;           // 1=deep scan failed for this VST2 plugin

   String effect_name;
   String vendor_string;
   String product_string;  // usually the same as the effect name, sometimes contains version info

   int     category;
   int     unique_id;
   int     version;
   boolean b_synth;

   // String shell_effect_name;  // sub-plugin name (Waves shell)
   // int    shell_effect_uid;   // 0=no sub-plugin

   emit(int _numShellPlugins) {
      trace "[begin plugin]";
      trace effect_name;
      trace vendor_string;
      trace product_string;
      trace category;
      trace unique_id;
      trace version;
      trace b_synth;
      trace _numShellPlugins;
      // trace shell_effect_name;
      // trace shell_effect_uid;
   }
}

Configuration.lockGlobalContext = false;

if(Arguments.numElements > 0)
{
   String pathName <= Arguments[0];
   VST2Plugin plugin;
   // plugin.enableDebug = true;

   VSTScanEntry entry;

   // trace "xxx vst2scan: loadPlugin("+pathName+")";

   if(plugin.loadPlugin(pathName, 0/*shellPlugin=scan*/))
   {
      entry.effect_name    = plugin.effectName;
      entry.vendor_string  = plugin.vendorString;
      entry.product_string = plugin.productString;
      entry.category       = plugin.category;

      if(entry.effect_name & "Heartbeat")
      {
         // Fix Softube Heartbeat category (effect => synth)
         entry.category = VST2PLUGIN_CATEGORY_SYNTH;
      }

      entry.unique_id      = plugin.uniqueID;
      entry.version        = plugin.version;
      entry.b_synth        = plugin.isSynth();

      // Report Waves shell plugins
      int numShellPlugins = plugin.numShellPlugins;
      entry.emit(numShellPlugins);

      if(numShellPlugins > 0)
      {
         int shellIdx = 0;
         loop(numShellPlugins)
         {
            trace plugin.getShellPluginNameByIndex(shellIdx);
            trace plugin.getShellPluginUIDByIndex(shellIdx);

            // Next shell plugin
            shellIdx++;
         }

         // (note) don't emit 'entry'
      }

      StdOutStream.flush();

      plugin <= null;
   }
}
