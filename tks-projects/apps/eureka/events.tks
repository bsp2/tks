// ----
// ---- file   : events.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- created: 22Jan2018
// ---- changed: 30May2018, 11Dec2018, 26Aug2019, 22Jul2021, 09Nov2023, 03Jul2024, 12Aug2024
// ----          17Sep2024
// ----
// ----
// ----

module MEvents;

use namespace ui;
use namespace st2;


// (note) this is for asynchronous thread notifications


function onEvent(String _ev) {
   ////trace "xxx onEvent: ev="+_ev;
   switch(_ev)
   {
      case Events.EV_REDRAWALL:
         Events.HandleRedrawAll();
         break;

      case RootForm.EV_SYN_KEY:
         Events.HandleSynKey();
         break;

      case CLAP.EV_KEY:
         CLAP.ProcessKeyEventQueue();
         break;

      case VST2.EV_KEY:
         VST2.ProcessKeyEventQueue();
         break;

      case Events.EV_INVALIDATESAMPLEVIEW:
         Events.HandleInvalidateSampleView();
         break;

      case Events.EV_UPDATESAMPLEINFO:
         Events.HandleUpdateSampleInfo();
         break;
   }
}


class Events {

   define String EV_REDRAWALL;  // used by e.g. Arranger timeline (in marker play mode)
   define String EV_INVALIDATESAMPLEVIEW; // used to invalidate SampleView before reallocating track clip(s)
   define String EV_UPDATESAMPLEINFO;

   protected static boolean b_redraw_all_pending;
   protected static boolean b_synkey_pending;

   static ResetQueuedEvents() {
      // after UI.DrainEventQueue()
      b_redraw_all_pending = false;
      b_synkey_pending     = false;
   }

   static SendRedrawAll() {
      if(!b_redraw_all_pending)
      {
         b_redraw_all_pending = true;
         SDL.sendEvent(EV_REDRAWALL);
      }
   }

   static HandleRedrawAll() {
      b_redraw_all_pending = false;
      UI.RedrawAll();
   }

   static SendSynKey() {
      // (todo) pending flag issue when opening file dialog via synkey (->investigate)
      // if(!b_synkey_pending)
      // {
      //    b_synkey_pending = true;
         SDL.sendEvent(RootForm.EV_SYN_KEY);
      // }
   }

   static HandleSynKey() {
      b_synkey_pending = false;
      root_form.processSynKeyQueue();
   }

   static SendInvalidateSampleView() {
      SDL.sendEvent(EV_INVALIDATESAMPLEVIEW);
   }

   static HandleInvalidateSampleView() {
      root_form.pg_audio.invalidateSampleView();
   }

   static SendUpdateSampleInfo() {
      SDL.sendEvent(EV_UPDATESAMPLEINFO);
   }

   static HandleUpdateSampleInfo() {
      root_form.pg_sample.updateSampleInfoWhenVisible();
   }

}


use onEvent for SDL.onEvent;
