// ----
// ---- file   : StatusBarLogger.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : statusbar logger
// ----
// ---- created: 30May2024
// ---- changed: 03Jun2024, 23Jul2024, 03Aug2024
// ----
// ----
// ----

module MStatusBarLogger;

use namespace ui;
namespace st2;


// <class.png>
class StatusBarLogger : ui::Logger {

   public virtual logInfo(local String _msg) {
      // regular info message (disappears after a medium time out)
      Global.PrintMS(_msg, 10);
      trace "[...] \""+_msg+"\"";
   }

   public virtual logInfoFast(local String _msg) {
      // short (high frequency) info message (disappears after a short time out)
      Global.PrintMS(_msg, 1);
      trace "[...] \""+_msg+"\"";
   }

   public virtual logInfoSlow(local String _msg) {
      // regular info message (disappears after a medium time out)
      Global.PrintMS(_msg, 500);
      trace "[...] \""+_msg+"\"";
   }

   public virtual logSuccess(local String _msg) {
      // print success message (disappears after a long time out)
      int fg = UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_FG);
      int bg = UI.MixColor32(#ff00aa00, UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), 0.90);

      if(!Global.b_initializing)
         root_form.pushStatusMessage("OK: "+_msg, 500, fg, bg, false/*bHead*/);

      trace "[+++] \""+_msg+"\"";
   }

   public virtual logSuccessShort(local String _msg) {
      // print success message (disappears after a short time out)
      int fg = UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_FG);
      int bg = UI.MixColor32(#ff00ff00, UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), 0.95);

      if(!Global.b_initializing)
         root_form.pushStatusMessage("OK: "+_msg, 10, fg, bg, false/*bHead*/);

      trace "[+++] \""+_msg+"\".";
   }

   public virtual logDebug(local String _msg) {
      // print low frequency debug message
      trace "[dbg] "+_msg;
   }

   public virtual logTrace(local String _msg) {
      // print medium frequency debug message
      trace "[trc] "+_msg;
   }

   public virtual logVerbose(local String _msg) {
      // print high frequency debug message
      trace "[>>>] "+_msg;
   }

   public virtual logProfile(local String _msg) {
      // print profiling message
      trace "[pro] "+_msg;
   }

   public virtual logWarning(local String _msg) {
      // print warning message (disappears after a medium time out)
      if(null != root_form)
      {
         int fg = UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_FG);
         int bg = UI.MixColor32(UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), #ffeeee00, 0.2);

         root_form.pushStatusMessage("Warning: "+_msg, 300, fg, bg, false/*bHead*/);
      }

      trace "[~~~] "+_msg;
   }

   public virtual logWarningLong(local String _msg) {
      // print warning message (disappears after a long time out)
      if(null != root_form)
      {
         int fg = UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_FG);
         int bg = UI.MixColor32(UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), #ffeeee00, 0.2);

         root_form.pushStatusMessage("Warning: "+_msg, 2000, fg, bg, false/*bHead*/);
      }
      trace "[~~~] "+_msg;
   }

   public virtual logError(local String _msg) {
      // print error message (disappears after a long time out)
      int fg = #ffffffff;
      int bg = UI.MixColor32(#ffff0000, UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), 0.4);

      root_form.pushStatusMessage("Error: "+_msg, 1500, fg, bg, false/*bHead*/);

      trace "[---] "+_msg;
   }

   public virtual logCritical(local String _msg) {
      // print fatal error message
      int fg = #ffffffff;
      int bg = UI.MixColor32(#ffff0000, UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), 0.2);

      root_form.pushStatusMessage("CriticalError: "+_msg, 1000*60*60*24, fg, bg, true/*bHead*/); // show for 24 hours

      trace "[!!!] "+_msg;
   }

   public virtual logFatal(local String _msg) {
      // print fatal error message
      int fg = #ffffffff;
      int bg = UI.MixColor32(#ffff0000, UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), 0.2);

      root_form.pushStatusMessage("FatalError: "+_msg, 1000*60*60*24, fg, bg, true/*bHead*/); // show for 24 hours

      trace "[!!!] "+_msg;
   }

}
