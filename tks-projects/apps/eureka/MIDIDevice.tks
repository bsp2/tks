// ----
// ---- file   : MIDIDevice.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2014-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- changed: 13Aug2014, 14Aug2014, 19Aug2014, 31Aug2014, 04Sep2014, 14Feb2015, 17Feb2015
// ----          18Feb2015, 21Feb2015, 23Feb2015, 14Apr2015, 29Apr2015, 17May2015, 25Jan2016
// ----          29Mar2016, 10Apr2016, 16Feb2017, 10Mar2017, 11Mar2017, 12Jun2017, 29Jan2018
// ----          01Feb2018, 06Feb2018, 29Jul2023, 02Oct2024
// ----
// ----
// ----

module MMIDIDevice;

use tkmidi;


// <class.png>
class MIDIDevice {
   public int dev_idx;          // enumerated during startup (A,B,C,D => 0..3)

   // one StringArray for each midi channel:
   protected StringArray *[] cc_names_single;  // Single line name arrays, overlayed by CtlTags and MSP (if any)


   // <method_get.png>
   public abstract isOpen() : boolean {
   }

   // <method_get.png>
   public abstract getDeviceName() : String {
   }

   // <method_get.png>
   public method getName() : String {
      return getDeviceName();/////tcchar('A' + dev_idx);  // ==> "A", "B", "C", or "D"
   }

   // <method_get.png>
   public method getPrgShortNameByNr(byte _midiCh, int _prg) : String {
      // (todo) add program name map
      return String(_prg);
   }

   // <method_get.png>
   public method getCCLongNameByCtl(byte _midiCh, int _ctlNr) : String {
      return MIDI.cc_names.get(_ctlNr);
   }

   // <method_get.png>
   public method getCCShortNameByCtl(byte _midiCh, int _ctlNr) : String {
      return MIDI.cc_names.get(_ctlNr);
   }

   // <method_get.png>
   public method getRPNLongNameByNr(byte _midiCh, int _rpn) : String {

      Integer io = _rpn;
      local String s;
      s.append(io.printf("(RPN#%3d)"));

      return deref s;
   }

   // <method_get.png>
   public method getRPNShortNameByNr(byte _midiCh, int _rpn) : String {

      Integer io = _rpn;
      local String s;
      s.append(io.printf("(RPN#%3d)"));

      return deref s;
   }

   // <method_get.png>
   public method getNRPNLongNameByNr(byte _midiCh, int _nrpn) : String {

      Integer io = _nrpn;
      local String s;
      s.append(io.printf("(NRPN#%3d)"));

      return deref s;
   }

   // <method_get.png>
   public method getNRPNShortNameByNr(byte _midiCh, int _nrpn) : String {

      Integer io = _nrpn;
      local String s;
      s.append(io.printf("(NRPN#%3d)"));

      return deref s;
   }

   // <method_get.png>
   public method getNoteShortNameByNr(byte _midiCh, int _noteNr) : String {
      return MIDI.midi_notes[_noteNr];
   }

   // <method_build.png>
   protected method buildCCNames() {
      cc_names_single.free();

      byte ch = 0;
      loop(16)
      {
         StringArray as <= new StringArray;
         StringArray am <= new StringArray;

         int ccId = 0;

         loop(128)
         {
            String t = getCCLongNameByCtl(ch, ccId);

            as.add(t);

            // Next controller
            ccId++;
         }

         cc_names_single.add(#(deref as));

         // Next midi channel
         ch++;
      }
   }

   // <method_build.png>
   public method buildCtlNames() {
      buildCCNames();
   }

   // <method_get.png>
   public method getCCNamesSingle(byte _midiCh) : StringArray {
      return cc_names_single.get(_midiCh);
   }

}
