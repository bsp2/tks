// ----
// ---- file   : LoadIndicator.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 23Feb2018
// ---- changed: 04Aug2022, 19Sep2024
// ----
// ----
// ----

module MLoadIndicator;

use namespace ui;
use namespace st2;


// <class.png>
class LoadIndicator : Panel {

   // suggested sizeY=23 (=> stepY=3)

   protected float load_pct;  // 0..1


   // <ui_init.png>
   public method initLoadIndicator() {
      initPanel();
      setEnableCollapse(true);
   }

   // <method_set.png>
   public method setLoadPercentage(float _load) {
      int oldLoad = int(load_pct*100);

      load_pct = _load / 100.0f;

      if(int(load_pct*100) != oldLoad)
         redraw();
   }

   // <method_get.png>
   protected method getLoadAvgString() {
      Float fo = load_pct * 100;
      return "Load avg is "+fo.printf("%3.2f")+"%";
   }

   // <ui_render.png>
   public virtual onDraw() {
      float w = getSizeX();
      float h = getSizeY();

      UIRenderer.DrawDefaultBackground(0, 0, w, h);

      int numBars = (mathClampf(load_pct, 0.0f, 1.0f) * 6) + 0.5;
      if(numBars > 6)
         numBars = 6;

      float cy = h - 5.0;
      int barIdx = 0;
      int c32   = #ff00b700;
      int c32dk = #ff006f00;
      float stepY = (h - 8.0f) / 5;

      boolean bHiDPI = UI.IsHiDPI();

      while(barIdx < numBars)
      {
         if(bHiDPI)
            UIRenderer.DrawLine(3, cy+2, w-3, cy+2, c32dk);
         UIRenderer.DrawLine(3, cy+1, w-3, cy+1, c32dk);
         UIRenderer.DrawLine(3, cy, w-3, cy, c32);

         cy -= stepY;
         barIdx++;

         if(2 == barIdx)
         {
            c32 = #ffb7b700;
            c32dk = #ff6f6f00;
         }
         else if(3 == barIdx)
         {
            c32 = #fffdb700;
            c32dk = #ffaf6f00;
         }
         else if(4 == barIdx)
         {
            c32 = #ffff0000;
            c32dk = #ffaf0000;
         }
         else if(barIdx >= 5)
         {
            c32 = #ffffdfdf;
            c32dk = #ffaf9f9f;
         }
      }

      setToolTipCaption(getLoadAvgString());

      UIRenderer.DrawDefaultSunkenBorder(0, 0, w, h);
   }

   // <ui_mouse.png>
   public virtual onMouseClick(MouseEvent _ev) : boolean {
      if(_ev.isLeftButton())
      {
         Global.Print(getLoadAvgString());
         return true;
      }
      return false;
   }

   // <ui_mouse.png>
   public virtual onMouseDoubleClick(MouseEvent _ev) : boolean {
      // don't let parent process this event
      return maybe;
   }
}
