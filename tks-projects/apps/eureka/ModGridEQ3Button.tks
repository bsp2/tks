// ----
// ---- file   : ModGridEQ3Button.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2022-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 18Dec2022
// ---- changed: 29Jul2023, 01Nov2023, 11Nov2023
// ----
// ----
// ----

module MModGridEQ3Button;

use namespace ui;
use namespace st2;


// <class.png>
class ModGridEQ3Button : ModGridButton, ActionConsumer {
   protected ModEQ3 *mod;

   protected Dial *dl_gain;
   protected Dial *dl_freq_lo;
   protected Dial *dl_gain_lo;
   protected Dial *dl_gain_mid;
   protected Dial *dl_freq_hi;
   protected Dial *dl_gain_hi;

   protected method newDial(Panel _parent, float _min, float _max, float _reset, float _val, String _toolTipCaption) : Dial {
      local Dial d;
      d.initDial(_min, _max, _val);
      d.setResetValue(_reset);
      d.setRequiredSize2f(ModGrid.GetDialSizeX(), ModGrid.GetDialSizeY());
      d.setEnableKbdFocusOnMouse(false);
      d.setPadLeftUnscaled(1);
      d.setPadRightUnscaled(1);
      d.setPadTop(0);
      d.setPadBottom(0);
      d.setAlignment(Layout.CENTERY);
      d.setLookAndFeel(LookAndFeel.LIGHT);
      d.setToolTipCaption(_toolTipCaption);
      d.setLayerName(_toolTipCaption);
      _parent.addLayer(deref d, Layout.RIGHT);
      return d;
   }

   // <ui_init.png>
   public method initEQ3Button(ModEQ3 _mod) {

      initModGridButton();

      setLayout(SuperBorderLayout);
      setEnableKbdFocusOnMouse(false);
      setLookAndFeel(LookAndFeel.LIGHT);

      mod <= _mod;

      Panel pAll <= new Panel;
      pAll.initPanel();
      pAll.setAlignment(Layout.EXPANDY);
      pAll.setPanelAlpha(0);
      pAll.setLookAndFeel(LookAndFeel.LIGHT);
      addLayer(deref pAll, Layout.CENTER);

      dl_gain     <= newDial(pAll, -1.0f, 1.0f, 0.0f, mod.p_gain,     "Gain");
      dl_freq_lo  <= newDial(pAll,  0.0f, 1.0f, 0.5f, mod.p_freq_lo,  "Freq Low");
      dl_freq_lo.setResetValue(0.4);
      dl_gain_lo  <= newDial(pAll, -1.0f, 1.0f, 0.0f, mod.p_gain_lo,  "Gain Low");
      dl_gain_mid <= newDial(pAll, -1.0f, 1.0f, 0.0f, mod.p_gain_mid, "Gain Mid");
      dl_freq_hi  <= newDial(pAll,  0.0f, 1.0f, 0.5f, mod.p_freq_hi,  "Freq High");
      dl_freq_hi.setResetValue(0.75);
      dl_gain_hi  <= newDial(pAll, -1.0f, 1.0f, 0.0f, mod.p_gain_hi,  "Gain High");
      dl_gain_hi.setPadRight(0);
   }

   // <method_set.png>
   public virtual setEnableHold(boolean _bHold) {
      // prevent Button HOLD_CLICK action (=> edit modmatrix)
   }

   // <ui_render.png>
   public virtual onDraw() {
      UIRenderer.DrawDefaultControlBackground(0, 0, getSizeX(), getSizeY());
      drawGridBorder();
      UIRenderer.DrawDefaultRaisedBorderRight(0, 0, getSizeX(), getSizeY());
   }

   // <ui_timer.png>
   public virtual handleIdleTimer() {
      if(mod.checkResetQueuedUIUpdate())
      {
         dl_gain    .setValue(mod.p_gain);
         dl_freq_lo .setValue(mod.p_freq_lo);
         dl_gain_lo .setValue(mod.p_gain_lo);
         dl_gain_mid.setValue(mod.p_gain_mid);
         dl_freq_hi .setValue(mod.p_freq_hi);
         dl_gain_hi .setValue(mod.p_gain_hi);
         redraw();
      }
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      switch(@(ap))
      {
         case @(dl_gain):
            mod.setGain(dl_gain.getValue());
            mod.addToUIParamHistory(ModEQ3.PARAM_GAIN);
            Global.Print(mod.getInfoString());
            return true;

         case @(dl_freq_lo):
            mod.setFreqLo(dl_freq_lo.getValue());
            mod.addToUIParamHistory(ModEQ3.PARAM_FREQ_LO);
            Global.Print(mod.getInfoString());
            return true;

         case @(dl_gain_lo):
            mod.setGainLo(dl_gain_lo.getValue());
            mod.addToUIParamHistory(ModEQ3.PARAM_GAIN_LO);
            Global.Print(mod.getInfoString());
            return true;

         case @(dl_gain_mid):
            mod.setGainMid(dl_gain_mid.getValue());
            mod.addToUIParamHistory(ModEQ3.PARAM_GAIN_MID);
            Global.Print(mod.getInfoString());
            return true;

         case @(dl_freq_hi):
            mod.setFreqHi(dl_freq_hi.getValue());
            mod.addToUIParamHistory(ModEQ3.PARAM_FREQ_HI);
            Global.Print(mod.getInfoString());
            return true;

         case @(dl_gain_hi):
            mod.setGainHi(dl_gain_hi.getValue());
            mod.addToUIParamHistory(ModEQ3.PARAM_GAIN_HI);
            Global.Print(mod.getInfoString());
            return true;
      }

      return ModGridButton::consumeAction(_ac);
   }
}
