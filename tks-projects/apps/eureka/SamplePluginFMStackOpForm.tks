// ----
// ---- file   : SamplePluginFMStackOpForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2023-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 24Aug2023
// ---- changed: 25Aug2023, 26Aug2023, 27Aug2023, 01Sep2023, 07Sep2023, 09Sep2023, 10Sep2023
// ----          11Sep2023, 12Sep2023, 13Sep2023, 16Sep2023, 18Sep2023, 20Sep2023, 21Sep2023
// ----          22Sep2023, 27Oct2023, 11Jan2024, 07Feb2024
// ----
// ----
// ----

module MSamplePluginFMStackOpForm;

use namespace ui;
use namespace st2;


// <class.png>
class SamplePluginFMStackOpForm : XMLForm, ActionProvider {
   define int NUM_PARAMS_PER_VAR = 256;

   define int PARAM_MODFM_MASK = 12;

   define int PARAM_OP_BASE      = 96;
   define int NUM_PARAMS_PER_OP  = 16;

   define int PARAM_AMP_ENV_BASE   = 176;
   define int PARAM_PITCH_ENV_BASE = 216;

   define int NUM_ENV_PARAMS_PER_OP = 8;

   define int PARAM_AENV_ATK        = PARAM_AMP_ENV_BASE + 0;
   define int PARAM_AENV_HLD        = PARAM_AMP_ENV_BASE + 1;
   define int PARAM_AENV_DCY        = PARAM_AMP_ENV_BASE + 2;
   define int PARAM_AENV_SUS        = PARAM_AMP_ENV_BASE + 3;
   define int PARAM_AENV_RLS        = PARAM_AMP_ENV_BASE + 4;
   define int PARAM_AENV_ATK_SHAPE  = PARAM_AMP_ENV_BASE + 5;
   define int PARAM_AENV_DCY_SHAPE  = PARAM_AMP_ENV_BASE + 6;
   define int PARAM_AENV_RLS_SHAPE  = PARAM_AMP_ENV_BASE + 7;

   define int PARAM_PENV_ATK        = PARAM_PITCH_ENV_BASE + 0;
   define int PARAM_PENV_HLD        = PARAM_PITCH_ENV_BASE + 1;
   define int PARAM_PENV_DCY        = PARAM_PITCH_ENV_BASE + 2;
   define int PARAM_PENV_SUS        = PARAM_PITCH_ENV_BASE + 3;
   define int PARAM_PENV_RLS        = PARAM_PITCH_ENV_BASE + 4;
   define int PARAM_PENV_ATK_SHAPE  = PARAM_PITCH_ENV_BASE + 5;
   define int PARAM_PENV_DCY_SHAPE  = PARAM_PITCH_ENV_BASE + 6;
   define int PARAM_PENV_RLS_SHAPE  = PARAM_PITCH_ENV_BASE + 7;

   define int PARAM_OP_PHASE             = PARAM_OP_BASE +  0;
   define int PARAM_OP_COARSE            = PARAM_OP_BASE +  1;  // v1: octaves(-16..16)   v2: ratio (-65536..65536)
   define int PARAM_OP_FINE              = PARAM_OP_BASE +  2;
   define int PARAM_OP_PITCH_KBD_CTR     = PARAM_OP_BASE +  3;
   define int PARAM_OP_PITCH_KBD_AMT     = PARAM_OP_BASE +  4;
   define int PARAM_OP_PITCH_ENV_AMT     = PARAM_OP_BASE +  5;
   define int PARAM_OP_PITCH_ENV_VEL_AMT = PARAM_OP_BASE +  6;
   define int PARAM_OP_LEVEL             = PARAM_OP_BASE +  7;
   define int PARAM_OP_LEVEL_VEL_AMT     = PARAM_OP_BASE +  8;
   define int PARAM_OP_LEVEL_ENV_AMT     = PARAM_OP_BASE +  9;
   define int PARAM_OP_LEVEL_ENV_VEL_AMT = PARAM_OP_BASE + 10;
   define int PARAM_OP_VEL_CURVE         = PARAM_OP_BASE + 11;
   define int PARAM_OP_WS_A              = PARAM_OP_BASE + 12;
   define int PARAM_OP_WS_B              = PARAM_OP_BASE + 13;
   define int PARAM_OP_WS_MIX            = PARAM_OP_BASE + 14;
   define int PARAM_OP_VOICEBUS          = PARAM_OP_BASE + 15;

   protected SamplePluginFMStackDialog *parent_dialog;
   protected PageSample                *pg_sample;
   protected Sample                    *sample;
   protected short                      plugin_ver;

   public    int                 op_idx;
   protected StPluginShared *[] *plugins_shared;
   protected int                 edit_var_idx;

   protected Button     *bt_op;

   protected LayerSwitch *ls_param;

   protected Button     *bt_phase;
   protected FloatParam *fp_phase;
   protected FloatParam *fp_coarse;
   protected Button     *bt_coarse;
   protected Button     *bt_fine;
   protected FloatParam *fp_fine;
   protected Button     *bt_vel_curve;
   protected FloatParam *fp_vel_curve;

   protected Button     *bt_level;
   protected FloatParam *fp_level;
   protected Button     *bt_level_vel;
   protected FloatParam *fp_level_vel;
   protected Button     *bt_level_env;
   protected FloatParam *fp_level_env;
   protected Button     *bt_level_env_vel;
   protected FloatParam *fp_level_env_vel;

   protected Button     *bt_pitch_kbd_ctr;
   protected FloatParam *fp_pitch_kbd_ctr;
   protected Button     *bt_pitch_kbd;
   protected FloatParam *fp_pitch_kbd;
   protected Button     *bt_pitch_env;
   protected FloatParam *fp_pitch_env;
   protected Button     *bt_pitch_env_vel;
   protected FloatParam *fp_pitch_env_vel;

   protected Button     *bt_ws_a;
   protected ComboBox   *cm_ws_a;
   protected Button     *bt_ws_b;
   protected ComboBox   *cm_ws_b;
   protected Button     *bt_ws_mix;
   protected FloatParam *fp_ws_mix;
   protected Button     *bt_voicebus;
   protected FloatParam *fp_voicebus;

   protected Button     *bt_aenv_atk;
   protected FloatParam *fp_aenv_atk;
   protected Button     *bt_aenv_hld;
   protected FloatParam *fp_aenv_hld;
   protected Button     *bt_aenv_dcy;
   protected FloatParam *fp_aenv_dcy;
   protected Button     *bt_aenv_sus;
   protected FloatParam *fp_aenv_sus;
   protected Button     *bt_aenv_rls;
   protected FloatParam *fp_aenv_rls;
   protected MMCurveFloatParam *fp_aenv_atk_shp;
   protected MMCurveFloatParam *fp_aenv_dcy_shp;
   protected MMCurveFloatParam *fp_aenv_rls_shp;

   protected Button     *bt_penv_atk;
   protected FloatParam *fp_penv_atk;
   protected Button     *bt_penv_hld;
   protected FloatParam *fp_penv_hld;
   protected Button     *bt_penv_dcy;
   protected FloatParam *fp_penv_dcy;
   protected Button     *bt_penv_sus;
   protected FloatParam *fp_penv_sus;
   protected Button     *bt_penv_rls;
   protected FloatParam *fp_penv_rls;
   protected MMCurveFloatParam *fp_penv_atk_shp;
   protected MMCurveFloatParam *fp_penv_dcy_shp;
   protected MMCurveFloatParam *fp_penv_rls_shp;

   protected PopupMenu *pm_context;

   static FloatArray op_clipboard;
   static FloatArray env_clipboard;

   define int NUM_WAVES = 263;

   protected static StringArray wave_options = [
      "  0: zero",      //   0
      "  1: sin",       //   1
      "  2: tx2",       //   2
      "  3: tx3",       //   3
      "  4: tx4",       //   4
      "  5: tx5",       //   5
      "  6: tx6",       //   6
      "  7: tx7",       //   7
      "  8: tx8",       //   8
      "  9: tri",       //   9
      " 10: tri90",     //  10
      " 11: tri180",    //  11
      " 12: tri270",    //  12
      " 13: p1",        //  13
      " 14: p2",        //  14
      " 15: p3",        //  15
      " 16: p4",        //  16
      " 17: p5",        //  17
      " 18: p6",        //  18
      " 19: p7",        //  19
      " 20: p8",        //  20
      " 21: p9",        //  21
      " 22: p10",       //  22
      " 23: p11",       //  23
      " 24: p12",       //  24
      " 25: p13",       //  25
      " 26: p14",       //  26
      " 27: p15",       //  27
      " 28: p16",       //  28
      " 29: p17",       //  29
      " 30: p18",       //  30
      " 31: p19",       //  31
      " 32: p20",       //  32
      " 33: ep1",       //  33
      " 34: ep2",       //  34
      " 35: ep3",       //  35
      " 36: ep4",       //  36
      " 37: ep5",       //  37
      " 38: ep6",       //  38
      " 39: ep7",       //  39
      " 40: ep8",       //  40
      " 41: ep9",       //  41
      " 42: ep10",      //  42
      " 43: ep11",      //  43
      " 44: ep12",      //  44
      " 45: ep13",      //  45
      " 46: ep14",      //  46
      " 47: ep15",      //  47
      " 48: ep16",      //  48
      " 49: ep17",      //  49
      " 50: ep18",      //  50
      " 51: ep19",      //  51
      " 52: ep20",      //  52
      " 53: sq1",       //  53
      " 54: sq2",       //  54
      " 55: sq3",       //  55
      " 56: sq4",       //  56
      " 57: sq5",       //  57
      " 58: sq6",       //  58
      " 59: sq7",       //  59
      " 60: sq8",       //  60
      " 61: sq9",       //  61
      " 62: sq10",      //  62 
      " 63: gap1",      //  63
      " 64: gap2",      //  64
      " 65: gap3",      //  65
      " 66: gap4",      //  66
      " 67: gap5",      //  67
      " 68: gap6",      //  68
      " 69: gap7",      //  69
      " 70: gap8",      //  70
      " 71: gap9",      //  71
      " 72: gap10",     //  72 
      " 73: dbl1",      //  73
      " 74: dbl2",      //  74
      " 75: dbl3",      //  75
      " 76: dbl4",      //  76
      " 77: dbl5",      //  77
      " 78: dbl6",      //  78
      " 79: dbl7",      //  79
      " 80: dbl8",      //  80
      " 81: dbl9",      //  81
      " 82: dbl10",     //  82 
      " 83: sync1",     //  83
      " 84: sync2",     //  84
      " 85: sync3",     //  85
      " 86: sync4",     //  86
      " 87: sync5",     //  87
      " 88: sync6",     //  88
      " 89: sync7",     //  89
      " 90: sync8",     //  90
      " 91: sync9",     //  91
      " 92: sync10",    //  92 
      " 93: sync11",    //  93
      " 94: sync12",    //  94
      " 95: sync13",    //  95
      " 96: sync14",    //  96
      " 97: sync15",    //  97
      " 98: sync16",    //  98
      " 99: sync17",    //  99
      "100: sync18",    // 100
      "101: sync19",    // 101
      "102: sync20",    // 102 
      "103: drive1",    // 103
      "104: drive2",    // 104
      "105: drive3",    // 105
      "106: drive4",    // 106
      "107: drive5",    // 107
      "108: drive6",    // 108
      "109: drive7",    // 109
      "110: drive8",    // 110
      "111: drive9",    // 111
      "112: drive10",   // 112 
      "113: drive11",   // 113
      "114: drive12",   // 114
      "115: drive13",   // 115
      "116: drive14",   // 116
      "117: drive15",   // 117
      "118: drive16",   // 118
      "119: drive17",   // 119
      "120: drive18",   // 120
      "121: drive19",   // 121
      "122: drive20",   // 122 
      "123: sawup1",    // 123
      "124: sawup2",    // 124
      "125: sawup3",    // 125
      "126: sawup4",    // 126
      "127: sawup5",    // 127
      "128: sawup6",    // 128
      "129: sawup7",    // 129
      "130: sawup8",    // 130
      "131: sawup9",    // 131
      "132: sawup10",   // 132 
      "133: sawdn1",    // 133
      "134: sawdn2",    // 134
      "135: sawdn3",    // 135
      "136: sawdn4",    // 136
      "137: sawdn5",    // 137
      "138: sawdn6",    // 138
      "139: sawdn7",    // 139
      "140: sawdn8",    // 140
      "141: sawdn9",    // 141
      "142: sawdn10",   // 142
      "143: br1",       // 143
      "144: br2",       // 144
      "145: br3",       // 145
      "146: br4",       // 146
      "147: br5",       // 147
      "148: br6",       // 148
      "149: br7",       // 149
      "150: br8",       // 150
      "151: br9",       // 151
      "152: br10",      // 152
      "153: br11",      // 153
      "154: br12",      // 154
      "155: br13",      // 155
      "156: br14",      // 156
      "157: br15",      // 157
      "158: br16",      // 158
      "159: br17",      // 159
      "160: br18",      // 160
      "161: br19",      // 161
      "162: br20",      // 162
      "163: sr1",       // 163
      "164: sr2",       // 164
      "165: sr3",       // 165
      "166: sr4",       // 166
      "167: sr5",       // 167
      "168: sr6",       // 168
      "169: sr7",       // 169
      "170: sr8",       // 170
      "171: sr9",       // 171
      "172: sr10",      // 172
      "173: sr11",      // 173
      "174: sr12",      // 174
      "175: sr13",      // 175
      "176: sr14",      // 176
      "177: sr15",      // 177
      "178: sr16",      // 178
      "179: sr17",      // 179
      "180: sr18",      // 180
      "181: sr19",      // 181
      "182: sr20",      // 182
      "183: sawsq1",    // 183
      "184: sawsq2",    // 184
      "185: sawsq3",    // 185
      "186: sawsq4",    // 186
      "187: sawsq5",    // 187
      "188: sawsq6",    // 188
      "189: sawsq7",    // 189
      "190: sawsq8",    // 190
      "191: sawsq9",    // 191
      "192: sawsq10",   // 192
      "193: sawsq11",   // 193
      "194: sawsq12",   // 194
      "195: sawsq13",   // 195
      "196: sawsq14",   // 196
      "197: sawsq15",   // 197
      "198: sawsq16",   // 198
      "199: sawsq17",   // 199
      "200: sawsq18",   // 200
      "201: sawsq19",   // 201
      "202: sawsq20",   // 202
      "203: bend1",     // 203
      "204: bend2",     // 204
      "205: bend3",     // 205
      "206: bend4",     // 206
      "207: bend5",     // 207
      "208: bend6",     // 208
      "209: bend7",     // 209
      "210: bend8",     // 210
      "211: bend9",     // 211
      "212: bend10",    // 212
      "213: bend11",    // 213
      "214: bend12",    // 214
      "215: bend13",    // 215
      "216: bend14",    // 216
      "217: bend15",    // 217
      "218: bend16",    // 218
      "219: bend17",    // 219
      "220: bend18",    // 220
      "221: bend19",    // 221
      "222: bend20",    // 222
      "223: warp1",     // 223
      "224: warp2",     // 224
      "225: warp3",     // 225
      "226: warp4",     // 226
      "227: warp5",     // 227
      "228: warp6",     // 228
      "229: warp7",     // 229
      "230: warp8",     // 230
      "231: warp9",     // 231
      "232: warp10",    // 232
      "233: warp11",    // 233
      "234: warp12",    // 234
      "235: warp13",    // 235
      "236: warp14",    // 236
      "237: warp15",    // 237
      "238: warp16",    // 238
      "239: warp17",    // 239
      "240: warp18",    // 240
      "241: warp19",    // 241
      "242: warp20",    // 242
      "243: phase1",    // 243
      "244: phase2",    // 244
      "245: phase3",    // 245
      "246: phase4",    // 246
      "247: phase5",    // 247
      "248: phase6",    // 248
      "249: phase7",    // 249
      "250: phase8",    // 250
      "251: phase9",    // 251
      "252: phase10",   // 252
      "253: phase11",   // 253
      "254: phase12",   // 254
      "255: phase13",   // 255
      "256: phase14",   // 256
      "257: phase15",   // 257
      "258: phase16",   // 258
      "259: phase17",   // 259
      "260: phase18",   // 260
      "261: phase19",   // 261
      "262: phase20",   // 262
                                              ];

   protected Button *[] hl_buttons;  // last touched op highlight labelbuttons

   protected boolean b_var_drag;        // when "gang editing" ratios/levels/envs via LALT/LSHIFT modifier(s)
   protected boolean b_var_drag_shift;  // true=add deltas, false=multiply by ratio
   protected float   var_drag_start;


   // <ui_init.png>
   public method init() : boolean {

      if(!initPakFile("SamplePluginFMStackOpForm.xfm"))
      {
         return false;
      }

      autoResolveIds(this);

      fp_phase.setUserStringToValueFxn(SamplePluginFMStackOpForm.StringToValue_Phase);
      fp_phase.setUserValueToStringFxn(SamplePluginFMStackOpForm.ValueToString_Phase);

      fp_aenv_dcy_shp.setEnableFlipX(true);
      fp_aenv_dcy_shp.setEnableFlipMouseX(false);

      fp_aenv_rls_shp.setEnableFlipX(true);
      fp_aenv_rls_shp.setEnableFlipMouseX(false);

      fp_penv_dcy_shp.setEnableFlipX(true);
      fp_penv_dcy_shp.setEnableFlipMouseX(false);

      fp_penv_rls_shp.setEnableFlipX(true);
      fp_penv_rls_shp.setEnableFlipMouseX(false);

      cm_ws_a.setOptions(wave_options);
      cm_ws_b.setOptions(wave_options);

      recursiveSetEnableCursorKeyTabCycling(false);

      hl_buttons = new [
         bt_phase,
         bt_coarse,
         bt_fine,
         bt_vel_curve,
  
         bt_level,
         bt_level_vel,
         bt_level_env,
         bt_level_env_vel,
  
         bt_pitch_kbd_ctr,
         bt_pitch_kbd,
         bt_pitch_env,
         bt_pitch_env_vel,
  
         bt_ws_a,
         bt_ws_b,
         bt_ws_mix,
         bt_voicebus,
  
         bt_aenv_atk,
         bt_aenv_dcy,
         bt_aenv_sus,
         bt_aenv_rls,
  
         bt_penv_atk,
         bt_penv_hld,
         bt_penv_dcy,
         bt_penv_sus,
         bt_penv_rls,
                     ];

      return true;
   }

   // // <ui.png>
   // public virtual getProvidedActionNames() : StringArray {
   //    return [ACTION_ENTRY_EDITED];
   // }

   // <method.png>
   protected static StringToValue_Phase(String _s) : float {
      if("<rand>" == _s)
         return -0.02;
      else if("<free>" == _s)
         return -0.01;
      float f = _s.replace("%","");
      return f * 0.01;
   }

   // <method.png>
   protected static ValueToString_Phase(float _f, String _r) {
      if(_f < -0.01)
         _r = "<rand>";  // -0.02
      else if(_f < 0.0)
         _r = "<free>";  // -0.01
      else
         _r = (_f * 100)+"%";
   }

   // <ui_show.png>
   public method showWidgets(int _idx) {
      ls_param.switchToLayerNr(_idx);
      resizeToMinimum();
   }

   // <ui_update.png>
   public method updateHLButtons(boolean _bHighlight) {
      Button *bt;
      foreach bt in hl_buttons
      {
         bt.setForegroundColorLabelMix(_bHighlight ? 0.7 : 1.0);
         bt.redraw();
      }
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      switch(ls_param.getCurrentChildNr())
      {
         case 0:
            _retLayers.joinRR(_retLayers,
                              [
                                 fp_phase,
                                 bt_coarse,
                                 fp_coarse,
                                 fp_fine,
                                 fp_vel_curve,

                                 fp_level,
                                 fp_level_vel,
                                 fp_level_env,
                                 fp_level_env_vel,
                               ]
                              );
            break;

         case 1:
            _retLayers.joinRR(_retLayers,
                              [
                                 fp_pitch_kbd_ctr,
                                 fp_pitch_kbd,
                                 fp_pitch_env,
                                 fp_pitch_env_vel,

                                 cm_ws_a,
                                 cm_ws_b,
                                 fp_ws_mix,
                                 fp_voicebus,

                               ]);
            break;

         case 2:
            _retLayers.joinRR(_retLayers,
                              [
                                 fp_aenv_atk,
                                 fp_aenv_hld,
                                 fp_aenv_dcy,
                                 fp_aenv_sus,
                                 fp_aenv_rls,
                                 fp_aenv_atk_shp,
                                 fp_aenv_dcy_shp,
                                 fp_aenv_rls_shp,

                                 fp_penv_atk,
                                 fp_penv_hld,
                                 fp_penv_dcy,
                                 fp_penv_sus,
                                 fp_penv_rls,
                                 fp_penv_atk_shp,
                                 fp_penv_dcy_shp,
                                 fp_penv_rls_shp,
                               ]);
            break;
      }

   }

   // // <method.png>
   // protected method provideEdited() {
   //    sample_sci.markParamsAsModified();
   //    provideAction(Action.New(getProvidedActionAlias(ACTION_ENTRY_EDITED), this));
   // }

   // <method_set.png>
   protected method setOpParam(StPluginShared _shared, int _paramIdx, float _f) {
      if(_paramIdx >= PARAM_OP_BASE)
      {
         // trace "xxx setOpParam: paramIdx="+_paramIdx+" f="+_f;
         _shared.setParamValue( (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_PARAMS_PER_OP) + _paramIdx, _f );
      }
   }

   // <method_get.png>
   public method getOpParam(StPluginShared _shared, int _paramIdx) : float {
      if(_paramIdx >= PARAM_OP_BASE)
      {
         float r = _shared.getParamValue( (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_PARAMS_PER_OP) + _paramIdx );
         // trace "xxx getOpParam: paramIdx="+_paramIdx+" => r="+r;
         return r;
      }
      return 0.0f;
   }

   // <method_get.png>
   protected method setEnvParam(StPluginShared _shared, int _paramIdx, float _f) {
      if(_paramIdx >= PARAM_OP_BASE)
      {
         _shared.setParamValue( (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_ENV_PARAMS_PER_OP) + _paramIdx, _f );
      }
   }

   // <method_get.png>
   public method getEnvParam(StPluginShared _shared, int _paramIdx) : float {
      if(_paramIdx >= PARAM_OP_BASE)
      {
         float r = _shared.getParamValue( (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_ENV_PARAMS_PER_OP) + _paramIdx );
         // trace "xxx getOpParam: paramIdx="+_paramIdx+" => r="+r;
         return r;
      }
      return 0.0f;
   }

   // <ui_show.png>
   public method showOp(SamplePluginFMStackDialog _parentDialog,
                        Sample       _sample,
                        int          _opIdx,
                        PointerArray _pluginsShared,
                        int          _editVarIdx,
                        short        _ver
                        ) {
      parent_dialog  <= _parentDialog;
      sample         <= _sample;
      op_idx          = _opIdx;
      plugins_shared <= _pluginsShared;
      edit_var_idx    = _editVarIdx;
      plugin_ver      = _ver;

      bt_op.setCaption("Op "+((4 == _opIdx)?"X":(_opIdx+1))+":");

      StPluginShared shared <= plugins_shared.first;

      fp_vel_curve.setValue( getOpParam(shared, PARAM_OP_VEL_CURVE) * 2 - 1 );

      // trace "xxx op_idx="+op_idx+" shared="+#(shared)+" level="+(getOpParam(shared, PARAM_OP_LEVEL) * 16.0f);
      fp_level        .setValue( getOpParam(shared, PARAM_OP_LEVEL) * 16.0f );
      fp_level_vel    .setValue( getOpParam(shared, PARAM_OP_LEVEL_VEL_AMT) * 2.0f - 1 );
      fp_level_env    .setValue( getOpParam(shared, PARAM_OP_LEVEL_ENV_AMT) * 2.0f - 1 );
      fp_level_env_vel.setValue( getOpParam(shared, PARAM_OP_LEVEL_ENV_VEL_AMT) * 2.0f - 1 );

      fp_aenv_atk    .setValue( getEnvParam(shared, PARAM_AENV_ATK) * 10000 );
      fp_aenv_hld    .setValue( getEnvParam(shared, PARAM_AENV_HLD) * 10000 );
      fp_aenv_dcy    .setValue( getEnvParam(shared, PARAM_AENV_DCY) * 10000 );
      float sus = getEnvParam(shared, PARAM_AENV_SUS);
      sus = sqrt(sus);
      fp_aenv_sus    .setValue( sus );
      fp_aenv_rls    .setValue( getEnvParam(shared, PARAM_AENV_RLS) * 10000 );
      fp_aenv_atk_shp.setValue( getEnvParam(shared, PARAM_AENV_ATK_SHAPE) * 2 - 1 );
      fp_aenv_dcy_shp.setValue( getEnvParam(shared, PARAM_AENV_DCY_SHAPE) * 2 - 1 );
      fp_aenv_rls_shp.setValue( getEnvParam(shared, PARAM_AENV_RLS_SHAPE) * 2 - 1 );

      StringArray vbOpt = [ "Audio In", "Bus 1", "Bus 2", "Bus 3", "Bus 4", "Bus 5", "Bus 6", "Bus 7", "Bus 8", "Bus 9", "Bus 10", "Bus 11", "Bus 12", "Bus 13", "Bus 14", "Bus 15", "Bus 16", "Bus 17", "Bus 18", "Bus 19", "Bus 20", "Bus 21", "Bus 22", "Bus 23", "Bus 24", "Bus 25", "Bus 26", "Bus 27", "Bus 28", "Bus 29", "Bus 30", "Bus 31", "Bus 32" ]; 
        
      if(4 == op_idx)
      {
         // External input (Op 5)
         bt_phase .setEditable(false);
         fp_phase .setEditable(false);
         bt_coarse.setEditable(false);
         fp_coarse.setEditable(false);
         bt_fine  .setEditable(false);
         fp_fine  .setEditable(false);

         fp_pitch_kbd_ctr.setEditable(false);
         fp_pitch_kbd    .setEditable(false);
         fp_pitch_env    .setEditable(false);
         fp_pitch_env_vel.setEditable(false);

         cm_ws_a    .setSelectedOption(0);
         cm_ws_b    .setSelectedOption(0);
         fp_ws_mix  .setValue(0);
         cm_ws_a    .setEditable(false);
         cm_ws_b    .setEditable(false);
         fp_ws_mix  .setEditable(false);

         vbOpt[0] = "Audio In";
         fp_voicebus.setUserTable(Object(vbOpt));
         fp_voicebus.setValue(int(getOpParam(shared, PARAM_OP_VOICEBUS) * 100));
         fp_voicebus.setEditable(true);

         fp_penv_atk    .setValue(0);
         fp_penv_hld    .setValue(0);
         fp_penv_dcy    .setValue(0);
         fp_penv_sus    .setValue(0);
         fp_penv_rls    .setValue(0);
         fp_penv_atk_shp.setValue(0);
         fp_penv_dcy_shp.setValue(0);
         fp_penv_rls_shp.setValue(0);

         fp_penv_atk    .setEditable(false);
         fp_penv_hld    .setEditable(false);
         fp_penv_dcy    .setEditable(false);
         fp_penv_sus    .setEditable(false);
         fp_penv_rls    .setEditable(false);
         fp_penv_atk_shp.setEditable(false);
         fp_penv_dcy_shp.setEditable(false);
         fp_penv_rls_shp.setEditable(false);
      }
      else
      {
         // Op 1..4
         float ph = getOpParam(shared, PARAM_OP_PHASE);
         if(ph > 0.99f)
         {
            if(ph > 0.999)
               ph = -0.02f;  // <rand>
            else
               ph = -0.01f;  // <free>
         }
         else
            ph = (ph / 0.99f);
         fp_phase.setValue(ph);

         // old v1: (octaves)
         if(1 == plugin_ver)
         {
            float oct = getOpParam(shared, PARAM_OP_COARSE) * 32 - 16;
            if(oct > 0.0f)
               oct = pow(2.0f, oct);
            else if(oct < 0)
               oct = pow(2.0f, oct);
            else
               oct = 1;
            fp_coarse.setValue(oct);
         }
         else
         {
            // v2: ratio
            fp_coarse.setValue( getOpParam(shared, PARAM_OP_COARSE) * 65536 );
         }
         fp_fine.setValue( getOpParam(shared, PARAM_OP_FINE) * 2 - 1 );

         fp_pitch_kbd_ctr.setValue( getOpParam(shared, PARAM_OP_PITCH_KBD_CTR) * 96.0f - 48 );
         fp_pitch_kbd    .setValue( getOpParam(shared, PARAM_OP_PITCH_KBD_AMT) * 4.0f - 2 );
         fp_pitch_env    .setValue( getOpParam(shared, PARAM_OP_PITCH_ENV_AMT) * 8.0f - 4 );
         fp_pitch_env_vel.setValue( getOpParam(shared, PARAM_OP_PITCH_ENV_VEL_AMT) * 2.0f - 1 );

         cm_ws_a    .setSelectedOption(int(getOpParam(shared, PARAM_OP_WS_A) * 100 + 0.5));
         cm_ws_b    .setSelectedOption(int(getOpParam(shared, PARAM_OP_WS_B) * 100 + 0.5));
         fp_ws_mix  .setValue(getOpParam(shared, PARAM_OP_WS_MIX));
         vbOpt[0] = "-";
         fp_voicebus.setUserTable(Object(vbOpt));
         fp_voicebus.setValue(0);
         fp_voicebus.setEditable(false);

         fp_penv_atk    .setValue( getEnvParam(shared, PARAM_PENV_ATK) * 10000 );
         fp_penv_hld    .setValue( getEnvParam(shared, PARAM_PENV_HLD) * 10000 );
         fp_penv_dcy    .setValue( getEnvParam(shared, PARAM_PENV_DCY) * 10000 );
         sus = getEnvParam(shared, PARAM_PENV_SUS);
         sus = sqrt(sus);
         fp_penv_sus    .setValue( sus );
         fp_penv_rls    .setValue( getEnvParam(shared, PARAM_PENV_RLS) * 10000 );
         fp_penv_atk_shp.setValue( getEnvParam(shared, PARAM_PENV_ATK_SHAPE) * 2 - 1 );
         fp_penv_dcy_shp.setValue( getEnvParam(shared, PARAM_PENV_DCY_SHAPE) * 2 - 1 );
         fp_penv_rls_shp.setValue( getEnvParam(shared, PARAM_PENV_RLS_SHAPE) * 2 - 1 );
      }
   }

   // <method.png>
   protected method reshowOp() {
      showOp(parent_dialog,
             sample,
             op_idx,
             plugins_shared,
             edit_var_idx,
             plugin_ver
             );
   }

   // <ui_handle.png>
   protected =replay= method handleLevelChanged() {
      float f = fp_level.getFloatValue();
      local Float fo = f * 100;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_LEVEL, f / 16.0f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Level is "+fo.printf("%3.3f")+"% (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handleLevelVelChanged() {
      float f = fp_level_vel.getFloatValue();
      local Float fo = f;
      f = (f + 1) / 2.0f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_LEVEL_VEL_AMT, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Level Velocity Amount is "+fo.printf("%3.3f")+"% (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handleLevelEnvChanged() {
      float f = fp_level_env.getFloatValue();
      local Float fo = f;
      f = (f + 1) / 2.0f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_LEVEL_ENV_AMT, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Level Envelope Amount is "+fo.printf("%3.3f")+"% (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handleLevelEnvVelChanged() {
      float f = fp_level_env_vel.getFloatValue();
      local Float fo = f;
      f = (f + 1) / 2.0f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_LEVEL_ENV_VEL_AMT, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Level Envelope Velocity Amount is "+fo.printf("%3.3f")+"% (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handlePhaseChanged() {
      float f = fp_phase.getFloatValue();

      if(f < -0.01)
      {
         // <rand> -0.02 => 1.0
         f = 1.0;
      }
      else if(f < 0.0)
      {
         // <free> -0.01 => 0.999
         f = 0.999f;
      }
      else
      {
         // 0.0..1.0 => 0..0.99
         f *= 0.99f;
      }

      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_PHASE, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Phase is "+fp_phase.getDisplayedText()+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handleCoarseStepChanged() {
      float stepCoarse = fp_coarse.getStepCoarse();
      if(stepCoarse >= 1.0)
      {
         fp_coarse.setStepCoarse(0.0001);
         fp_coarse.setMousePrecision(5);
         fp_coarse.setMousePrecisionMulDiv(0);
      }
      else if(stepCoarse >= 0.5)
      {
         fp_coarse.setStepCoarse(1.0);
         fp_coarse.setMousePrecision(0);
         fp_coarse.setMousePrecisionMulDiv(0);
      }
      else if(stepCoarse >= 0.25)
      {
         fp_coarse.setStepCoarse(0.5);
         fp_coarse.setMousePrecision(1);
         fp_coarse.setMousePrecisionMulDiv(2);
      }
      else
      {
         fp_coarse.setStepCoarse(0.25);
         fp_coarse.setMousePrecision(2);
         fp_coarse.setMousePrecisionMulDiv(4);
      }
      Global.Print("Coarse step is "+fp_coarse.getStepCoarse());
   }

   // <method.png>
   public method updateCoarseStep(float _stepCoarse,
                                  int   _mousePrecision,
                                  int   _mousePrecisionMulDiv
                                  ) {
      fp_coarse.setStepCoarse(_stepCoarse);
      fp_coarse.setMousePrecision(_mousePrecision);
      fp_coarse.setMousePrecisionMulDiv(_mousePrecisionMulDiv);
   }

   // <method_get.png>
   protected method getHzNoteString() : String {
      StPluginShared shared <= plugins_shared.first;
      float hz = Sample.BASE_FREQ_MIDDLE_C * (getOpParam(shared, PARAM_OP_COARSE) * 65536.0f);
      float fine = getOpParam(shared, PARAM_OP_FINE) * 2.0 - 1.0;
      fine = SamplePluginFMStackDialog.BipolarToScale(fine, 2.0, 2.0);
      hz *= fine;
      return hz+" Hz => "+Audio.HzToNoteString(hz);
   }

   // <ui_handle.png>
   protected =replay= method handleCoarseChanged() {
      float f = fp_coarse.getFloatValue();
      local Float fo = f;
      if(1 == plugin_ver)
      {
         // old v1 (octaves):  f = (f + 16) / 32.0f;
         if(f > 0.0)
         {
            // ratio to octaves
            f = log(f) / log(2.0);
         }
         else if(f < 0.0)
         {
            // ratio to octaves
            f = -( log(-f) / log(2.0) );
         }
      }
      else
      {
         // v2 (ratio)
         f = f / 65536.0f;
      }
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_COARSE, f);
      }
      sample.markParamsAsModified();

      Global.Print("Op "+(op_idx+1)+" Coarse is "+fo+" => "+getHzNoteString()+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handleFineChanged() {
      float f = fp_fine.getFloatValue();
      local Float fo = f * 100;
      f = (f + 1) / 2.0f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_FINE, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Fine is "+fo.printf("%3.3f")+" => "+getHzNoteString()+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handleVelCurveChanged() {
      float f = fp_vel_curve.getFloatValue();
      local Float fo = f;
      f = (f + 1) / 2.0f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_VEL_CURVE, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Velocity Curve is "+fo.printf("%3.3f")+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handlePitchKbdCtrChanged() {
      float f = fp_pitch_kbd_ctr.getFloatValue();
      local Float fo = f;
      f = (f + 48) / 96.0f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_PITCH_KBD_CTR, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Pitch Kbd Center is "+fo.printf("%3.3f")+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handlePitchKbdChanged() {
      float f = fp_pitch_kbd.getFloatValue();
      local Float fo = f;
      f = (f + 2) / 4.0f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_PITCH_KBD_AMT, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Pitch Kbd Amount is "+fo.printf("%3.3f")+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handlePitchEnvChanged() {
      float f = fp_pitch_env.getFloatValue();
      local Float fo = f;
      f = (f + 4) / 8.0f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_PITCH_ENV_AMT, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Pitch Env Amount is "+fo.printf("%3.3f")+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handlePitchEnvVelChanged() {
      float f = fp_pitch_env_vel.getFloatValue();
      local Float fo = f;
      f = (f + 1) / 2.0f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_PITCH_ENV_VEL_AMT, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Pitch Env Velocity Amount is "+fo.printf("%3.3f")+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handleWSAChanged() {
      int i = cm_ws_a.getSelectedOption();
      float f = (i / 100.0f);  // (todo) change to /1000.0f in v3
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_WS_A, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Waveshape A is \""+cm_ws_a.getSelectedOptionName()+"\" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <method.png>
   public =replay= method updateWSA(int _opt) {
      StPluginShared *shared;
      float f = (_opt / 100.0f);  // (todo) change to /1000.0f in v3
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_WS_A, f);
      }
      cm_ws_a.setSelectedOption(_opt);
   }

   // <ui_handle.png>
   protected =replay= method handleWSBChanged() {
      int i = cm_ws_b.getSelectedOption();
      float f = (i / 100.0f);
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_WS_B, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Waveshape B is \""+cm_ws_b.getSelectedOptionName()+"\" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <method.png>
   public =replay= method updateWSB(int _opt) {
      StPluginShared *shared;
      float f = (_opt / 100.0f);  // (todo) change to /1000.0f in v3
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_WS_B, f);
      }
      cm_ws_b.setSelectedOption(_opt);
   }

   // <ui_handle.png>
   protected =replay= method handleWSMixChanged() {
      float f = fp_ws_mix.getFloatValue();
      local Float fo = f * 100;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_WS_MIX, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Waveshape A/B Mix is "+fo.printf("%3.3f")+"% (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <method.png>
   public =replay= method updateWSMix(float _f) {
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_WS_MIX, _f);
      }
      fp_ws_mix.setValue(_f);
   }

   // <ui_handle.png>
   protected =replay= method handleVoiceBusChanged() {
      float f = fp_voicebus.getFloatValue();
      local Float fo = f;
      f = f / 100.0f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setOpParam(shared, PARAM_OP_VOICEBUS, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" Voice Bus is "+((f > 0.0f)?fo.printf("%3.3f"):"- (use Audio In)")+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handleEnvTimeChanged(String _name, int _paramIdx, float f) {
      local Float fo = f;
      f = f / 10000.0;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setEnvParam(shared, _paramIdx, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" "+_name+" is "+fo.printf("%5.3f")+"ms (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handleEnvSusChanged(String _name, int _paramIdx, float f) {
      local Float fo = f * 100;
      f = f * f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setEnvParam(shared, _paramIdx, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" "+_name+" is "+fo.printf("%3.3f")+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handleEnvShapeChanged(String _name, int _paramIdx, float f) {
      local Float fo = f;
      f = (f + 1) / 2.0f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         setEnvParam(shared, _paramIdx, f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" "+_name+" Shape is "+fo.printf("%3.3f")+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method toggleModFMMode() {
      StPluginShared shared <= plugins_shared.first;
      int modFMMask = int(shared.getParamValue(PARAM_MODFM_MASK) * 100 + 0.5f);
      int modFMSetMask = (1 << op_idx);
      int newModFMMask = (modFMMask ^ (1 << op_idx)) & modFMSetMask;
      foreach shared in plugins_shared
      {
         int curModFMMask = int(shared.getParamValue(PARAM_MODFM_MASK) * 100 + 0.5f);
         curModFMMask = (curModFMMask & ~modFMSetMask) | newModFMMask;
         shared.setParamValue(PARAM_MODFM_MASK, curModFMMask * 0.01f);
      }
      sample.markParamsAsModified();
      Global.Print("Op "+(op_idx+1)+" ModFM mode is "+Utils.GetEnableString(0 != newModFMMask)+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   public method handleOpCopy() {
      StPluginShared shared <= plugins_shared.first;

      int paramOff;

      op_clipboard.empty();

      // Op base params
      paramOff = (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_PARAMS_PER_OP) + PARAM_OP_BASE;
      loop(NUM_PARAMS_PER_OP)
         op_clipboard.add( shared.getParamValue(paramOff++) );

      // Op AEnv
      paramOff = (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_ENV_PARAMS_PER_OP) + PARAM_AMP_ENV_BASE;
      loop(NUM_ENV_PARAMS_PER_OP)
         op_clipboard.add( shared.getParamValue(paramOff++) );

      // Op PEnv
      paramOff = (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_ENV_PARAMS_PER_OP) + PARAM_PITCH_ENV_BASE;
      loop(NUM_ENV_PARAMS_PER_OP)
         op_clipboard.add( shared.getParamValue(paramOff++) );

      Global.Print("Copy Op "+(op_idx+1)+" to clipboard");
   }

   // <ui_handle.png>
   public method handleOpPaste() {
      if(op_clipboard.numElements > 0)
      {
         StPluginShared *shared;
         foreach shared in plugins_shared
         {
            int i = 0;
            int paramOff;

            // Op base params
            paramOff = (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_PARAMS_PER_OP) + PARAM_OP_BASE;
            loop(NUM_PARAMS_PER_OP)
               shared.setParamValue(paramOff++, op_clipboard.get(i++));

            // Op AEnv
            paramOff = (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_ENV_PARAMS_PER_OP) + PARAM_AMP_ENV_BASE;
            loop(NUM_ENV_PARAMS_PER_OP)
               shared.setParamValue(paramOff++, op_clipboard.get(i++));

            // Op PEnv
            paramOff = (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_ENV_PARAMS_PER_OP) + PARAM_PITCH_ENV_BASE;
            loop(NUM_ENV_PARAMS_PER_OP)
               shared.setParamValue(paramOff++, op_clipboard.get(i++));
         }

         Global.Print("Paste Op "+(op_idx+1)+" from clipboard (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");

         reshowOp();
      }
      else
      {
         Global.Warning("Op clipboard is empty");
      }
   }

   // <ui_handle.png>
   public method handleEnvCopy(boolean _bPEnv) {
      StPluginShared shared <= plugins_shared.first;

      env_clipboard.empty();

      int paramOff = _bPEnv ? PARAM_PITCH_ENV_BASE : PARAM_AMP_ENV_BASE;
      paramOff += (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_ENV_PARAMS_PER_OP);
      loop(NUM_ENV_PARAMS_PER_OP)
         env_clipboard.add( shared.getParamValue(paramOff++) );

      Global.Print("Copy Op "+(op_idx+1)+" "+(_bPEnv ? "Pitch":"Amp")+" envelope to env clipboard");
   }

   // <ui_handle.png>
   public method handleEnvPaste(boolean _bPEnv) {
      if(env_clipboard.numElements > 0)
      {
         int paramOff = _bPEnv ? PARAM_PITCH_ENV_BASE : PARAM_AMP_ENV_BASE;
         paramOff += (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_ENV_PARAMS_PER_OP);
         StPluginShared *shared;
         foreach shared in plugins_shared
         {
            int i = 0;
            loop(NUM_ENV_PARAMS_PER_OP)
               shared.setParamValue(paramOff++, env_clipboard.get(i++));
         }

         Global.Print("Paste Op "+(op_idx+1)+" "+(_bPEnv ? "Pitch":"Amp")+" envelope from env clipboard (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");

         reshowOp();
      }
      else
      {
         Global.Warning("Envelope clipboard is empty");
      }
   }

   // <ui_handle.png>
   public method handleOpInit() {
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         int paramOff;
         StPluginInfo info <= shared.info;

         // Op base params
         paramOff = (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_PARAMS_PER_OP) + PARAM_OP_BASE;
         loop(NUM_PARAMS_PER_OP)
         {
            shared.setParamValue(paramOff, info.getParamReset(paramOff));
            paramOff++;
         }

         // Op AEnv
         paramOff = (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_ENV_PARAMS_PER_OP) + PARAM_AMP_ENV_BASE;
         loop(NUM_ENV_PARAMS_PER_OP)
         {
            shared.setParamValue(paramOff, info.getParamReset(paramOff));
            paramOff++;
         }

         // Op PEnv
         paramOff = (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_ENV_PARAMS_PER_OP) + PARAM_PITCH_ENV_BASE;
         loop(NUM_ENV_PARAMS_PER_OP)
         {
            shared.setParamValue(paramOff, info.getParamReset(paramOff));
            paramOff++;
         }
      }

      Global.Print("Initialize Op "+(op_idx+1)+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");

      reshowOp();
   }

   // <ui_handle.png>
   public method handleRandWave() {
      int paramOff = (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_PARAMS_PER_OP);
      StPluginShared *shared;
      float wsA   = rand(NUM_WAVES) / 100.0f;
      float wsB   = rand(NUM_WAVES) / 100.0f;
      float wsMix = rand(1.0f);
      foreach shared in plugins_shared
      {
         shared.setParamValue(paramOff + PARAM_OP_WS_A,   wsA);
         shared.setParamValue(paramOff + PARAM_OP_WS_B,   wsB);
         shared.setParamValue(paramOff + PARAM_OP_WS_MIX, wsMix);
      }

      Global.Print("Randomize Op "+(op_idx+1)+" waveform (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");

      reshowOp();
   }

   // <ui_handle.png>
   public method handleRandRatio(boolean _bCoarse, boolean _bFine) {
      int paramOff = (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_PARAMS_PER_OP);
      StPluginShared *shared;

      float rCoarse;
      shared <= plugins_shared.first;
      float rCoarseCur = shared.getParamValue(paramOff + PARAM_OP_COARSE) * 65536.0f;
      do
      {
         rCoarse= rand(1.0f);
         if(rCoarse < 0.85)
            rCoarse = mathPowerf( (rCoarse/0.85) * 0.25, 1.5f);
         else
            rCoarse = mathPowerf(rCoarse, 5.0f);
         rCoarse = int(rCoarse * (4 * 128)) / 4.0f;
      } while((0.0f == rCoarse) || (rCoarse == rCoarseCur));

      float rFine   = rand(2.0) - 1.0;
      rCoarse /= 65536.0f;
      rFine = (rFine * 0.5) + 0.5;
      foreach shared in plugins_shared
      {
         if(_bCoarse)
            shared.setParamValue(paramOff + PARAM_OP_COARSE, rCoarse);
         if(_bFine)
            shared.setParamValue(paramOff + PARAM_OP_FINE,   rFine);
      }

      Global.Print("Randomize Op "+(op_idx+1)+" "+(_bFine?"fine":"coarse")+" ratio (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");

      reshowOp();
   }

   // <method.png>
   public =replay= method handleScaleRatio(float _s) {
      // called by SamplePluginFMStackDialog.handleOpRatioScaleAll()

      int paramOff = (edit_var_idx * NUM_PARAMS_PER_VAR) + (op_idx * NUM_PARAMS_PER_OP);
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         float coarse = shared.getParamValue(paramOff + PARAM_OP_COARSE/*1*/) * 65536.0f;
         float fine   = shared.getParamValue(paramOff + PARAM_OP_FINE/*2*/) * 2.0 - 1.0;
         float ratio = coarse;
         if(fine > 0.0f)
            ratio *= (1.0f + fine);
         else if(fine < 0.0f)
            ratio /= (-fine + 1.0f);
         ratio *= _s;
         shared.setParamValue(paramOff + PARAM_OP_COARSE/*1*/, ratio / 65536.0f);
         shared.setParamValue(paramOff + PARAM_OP_FINE/*2*/, 0.5f/*0*/);
      }

      reshowOp();
   }

   // <ui_show.png>
   protected method showContextMenu(boolean _bAEnv, boolean _bPEnv) {

      pm_context <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_context;
      PopupMenu *spm;

      boolean bHaveOpClipboard  = (op_clipboard.numElements  > 0);
      boolean bHaveEnvClipboard = (env_clipboard.numElements > 0);

      pmb <= pm.addDefaultButton("Copy Op to clipboard", "copy");
      pmb.setAccelerators("", "lalt-c");

      pmb <= pm.addDefaultButton("Paste Op from clipboard", "paste");
      pmb.setAccelerators("", "lalt-v");
      pmb.setActive(bHaveOpClipboard);

      if(_bAEnv)
      {
         pm.addSeparator();
         pmb <= pm.addDefaultButton("Copy Amp Envelope to envelope clipboard", "copy_aenv");
         pmb.setAccelerators("", "lalt-e");
         
         pmb <= pm.addDefaultButton("Paste Amp Envelope from envelope clipboard", "paste_aenv");
         pmb.setAccelerators("", "lalt-lshift-e");
         pmb.setActive(bHaveEnvClipboard);
      }

      if(_bPEnv)
      {
         pm.addSeparator();
         pmb <= pm.addDefaultButton("Copy Pitch Envelope to envelope clipboard", "copy_penv");
         pmb.setAccelerators("", "lalt-p");
         
         pmb <= pm.addDefaultButton("Paste Pitch Envelope from envelope clipboard", "paste_penv");
         pmb.setAccelerators("", "lalt-lshift-p");
         pmb.setActive(bHaveEnvClipboard);
      }

      pm.addSeparator();
      StPluginShared shared <= plugins_shared.first;
      if(null != shared)
      {
         boolean bModFM = (0 != (int(shared.getParamValue(PARAM_MODFM_MASK) * 100 + 0.5) & (1 << op_idx)));
         pmb <= pm.addCheckButton("ModFM mode", bModFM, "modfm");
         pmb.setAccelerators("", "m");
      }

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Tune ratios to Op", "tune");
      pmb.setAccelerators("", "lalt-t");

      pm.addSeparator();
      spm <= PopupMenu.New(pm);
      pmb <= pm.addMenu("Scale all Op ratios", deref spm);
      pmb <= spm.addDefaultButton("/ 4.00", "scale_ratios_d4");
      pmb <= spm.addDefaultButton("/ 3.00", "scale_ratios_d3");
      pmb <= spm.addDefaultButton("/ 2.00", "scale_ratios_d2");
      pmb <= spm.addDefaultButton("/ 1.75", "scale_ratios_d175");
      pmb <= spm.addDefaultButton("/ 1.50", "scale_ratios_d15");
      pmb <= spm.addDefaultButton("/ 1.33", "scale_ratios_d133");
      pmb <= spm.addDefaultButton("/ 1.25", "scale_ratios_d125");
      spm.addSeparator();
      pmb <= spm.addDefaultButton("* 1.00", "scale_ratios_m1");
      spm.addSeparator();
      pmb <= spm.addDefaultButton("* 1.25", "scale_ratios_m125");
      pmb <= spm.addDefaultButton("* 1.33", "scale_ratios_m133");
      pmb <= spm.addDefaultButton("* 1.50", "scale_ratios_m15");
      pmb <= spm.addDefaultButton("* 1.75", "scale_ratios_m175");
      pmb <= spm.addDefaultButton("* 2.00", "scale_ratios_m2");
      pmb <= spm.addDefaultButton("* 3.00", "scale_ratios_m3");
      pmb <= spm.addDefaultButton("* 4.00", "scale_ratios_m4");

      pm.addSeparator();
      spm <= PopupMenu.New(pm);
      pmb <= pm.addMenu("Randomize Op", deref spm);
      pmb <= spm.addDefaultButton("Randomize Op waveform", "rand_wave");
      pmb.setAccelerators("", "lctrl-w");

      pmb <= spm.addDefaultButton("Randomize Op ratio (coarse + fine)", "rand_ratio");
      pmb.setAccelerators("", "lctrl-t");

      pmb <= spm.addDefaultButton("Randomize Op ratio (coarse)", "rand_ratio_coarse");
      pmb.setAccelerators("", "lctrl-r");

      pmb <= spm.addDefaultButton("Randomize Op ratio (fine)", "rand_ratio_fine");
      pmb.setAccelerators("", "lctrl-e");

      pm.addSeparator();
      spm <= PopupMenu.New(pm);
      pmb <= pm.addMenu("Randomize all Ops", deref spm);
      pmb <= spm.addDefaultButton("Randomize all Op waveforms", "rand_wave_all");
      pmb.setAccelerators("", "lctrl-lshift-w");

      pmb <= spm.addDefaultButton("Randomize all Op ratios (coarse + fine)", "rand_ratio_all");
      pmb.setAccelerators("", "lctrl-lshift-t");

      pmb <= spm.addDefaultButton("Randomize all Op ratios (coarse)", "rand_ratio_coarse_all");
      pmb.setAccelerators("", "lctrl-lshift-r");

      pmb <= spm.addDefaultButton("Randomize all Op ratios (fine)", "rand_ratio_fine_all");
      pmb.setAccelerators("", "lctrl-lshift-e");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Initialize Op", "init");
      pmb.setAccelerators("", "lctrl-i");
      pmb <= pm.addDefaultButton("Initialize all Ops", "init_all");
      pmb.setAccelerators("", "lctrl-lshift-i");

      pm.resizeToMinimum();
      pm.showNearMouse(-30, 0);

      Global.Print("Show Op context menu.");
   }

   // // <ui_mouse.png>
   // public virtual onMouseClick(MouseEvent _ev) : boolean {
   //    if(_ev.isRightButton())
   //    {
   //       showContextMenu();
   //       return true;
   //    }
   //    return false;
   // }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      // trace "[>>>] SamplePluginFMStackOpForm: key="+_k.name+" pressed="+_k.pressed+" mod="+_k.mod;

      switch(_k.pressed)
      {
         case 'm':
            toggleModFMMode();
            return true;
      }
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();
      float dragRatio;
      float dragDelta;

      parent_dialog.setHLOpIdx(op_idx);

      switch(@(ap))
      {
         case @(pm_context):
            Global.Debug2("SamplePluginFMStackOpForm: pm_context acName="+acName);
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close Op context menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "init":
                  handleOpInit();
                  return true;

               case "init_all":
                  parent_dialog.handleOpInitAll();
                  return true;

               case "copy":
                  handleOpCopy();
                  return true;

               case "paste":
                  handleOpPaste();
                  return true;

               case "copy_aenv":
                  handleEnvCopy(false/*bPEnv*/);
                  return true;

               case "copy_penv":
                  handleEnvCopy(true/*bPEnv*/);
                  return true;

               case "paste_aenv":
                  handleEnvPaste(false/*bPEnv*/);
                  return true;

               case "paste_penv":
                  handleEnvPaste(true/*bPEnv*/);
                  return true;

               case "modfm":
                  toggleModFMMode();
                  return true;

               case "rand_wave":
                  handleRandWave();
                  return true;

               case "rand_wave_all":
                  parent_dialog.handleOpRandWaveAll();
                  return true;

               case "rand_ratio":
                  handleRandRatio(true/*bCoarse*/, true/*bFine*/);
                  return true;

               case "rand_ratio_all":
                  parent_dialog.handleOpRandRatioAll(true/*bCoarse*/, true/*bFine*/);
                  return true;

               case "rand_ratio_coarse":
                  handleRandRatio(true/*bCoarse*/, false/*bFine*/);
                  return true;

               case "rand_ratio_coarse_all":
                  parent_dialog.handleOpRandRatioAll(true/*bCoarse*/, false/*bFine*/);
                  return true;

               case "rand_ratio_fine":
                  handleRandRatio(false/*bCoarse*/, true/*bFine*/);
                  return true;

               case "rand_ratio_fine_all":
                  parent_dialog.handleOpRandRatioAll(false/*bCoarse*/, true/*bFine*/);
                  return true;

               case "scale_ratios_d4":
                  parent_dialog.handleOpRatioScaleAll(1.0 / 4.0);
                  break;

               case "scale_ratios_d3":
                  parent_dialog.handleOpRatioScaleAll(1.0 / 3.0);
                  break;

               case "scale_ratios_d2":
                  parent_dialog.handleOpRatioScaleAll(1.0 / 2.0);
                  break;

               case "scale_ratios_d175":
                  parent_dialog.handleOpRatioScaleAll(1.0 / 1.75);
                  break;

               case "scale_ratios_d15":
                  parent_dialog.handleOpRatioScaleAll(1.0 / 1.5);
                  break;

               case "scale_ratios_d133":
                  parent_dialog.handleOpRatioScaleAll(1.0 / 1.333333);
                  break;

               case "scale_ratios_d125":
                  parent_dialog.handleOpRatioScaleAll(1.0 / 1.25);
                  break;

               case "scale_ratios_m1":
                  // just convert fine to coarse (and set fine to 0)
                  parent_dialog.handleOpRatioScaleAll(1.0);
                  break;

               case "scale_ratios_m125":
                  parent_dialog.handleOpRatioScaleAll(1.25);
                  break;

               case "scale_ratios_m133":
                  parent_dialog.handleOpRatioScaleAll(1.333333);
                  break;

               case "scale_ratios_m15":
                  parent_dialog.handleOpRatioScaleAll(1.5);
                  break;

               case "scale_ratios_m175":
                  parent_dialog.handleOpRatioScaleAll(1.75);
                  break;

               case "scale_ratios_m2":
                  parent_dialog.handleOpRatioScaleAll(2.0);
                  break;

               case "scale_ratios_m3":
                  parent_dialog.handleOpRatioScaleAll(3.0);
                  break;

               case "scale_ratios_m4":
                  parent_dialog.handleOpRatioScaleAll(4.0);
                  break;

               case "tune":
                  parent_dialog.tuneOpRatios(op_idx);
                  return true;
            }
            return true;

         case @(bt_op):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(bt_level):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_level):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  // trace "xxx fp_level start shift="+b_var_drag_shift;
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_level.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
               // trace "xxx fp_level stop";
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               // trace "xxx fp_level cancel";
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_level.getFloatValue() - var_drag_start;
                     // trace "xxx b_var_drag: dragDelta="+dragDelta;
                     parent_dialog.varDragLevel(1.0f/*ratio*/, dragDelta);
                  }
                  else
                  {
                     dragRatio = fp_level.getFloatValue() / var_drag_start;
                     // trace "xxx b_var_drag: dragRatio="+dragRatio;
                     parent_dialog.varDragLevel(dragRatio, 0.0f/*delta*/);
                  }
               }
               else
               {
                  handleLevelChanged();
               }
            }
            return true;

         case @(bt_level_vel):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_level_vel):
            handleLevelVelChanged();
            return true;

         case @(bt_level_env):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_level_env):
            handleLevelEnvChanged();
            return true;

         case @(bt_level_env_vel):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_level_env_vel):
            handleLevelEnvVelChanged();
            return true;

         case @(bt_phase):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_phase):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_phase.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_phase.getFloatValue() - var_drag_start;
                     parent_dialog.varDragPhase(1.0f/*ratio*/, dragDelta);
                  }
                  else
                  {
                     dragRatio = fp_phase.getFloatValue() / var_drag_start;
                     parent_dialog.varDragPhase(dragRatio, 0.0f/*delta*/);
                  }
               }
               else
               {
                  handlePhaseChanged();
               }
            }
            return true;

         case @(bt_coarse):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               parent_dialog.tuneOpRatios(op_idx);
            }
            else if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            else
            {
               handleCoarseStepChanged();
               if(UI.KeyModAlt())
               {
                  parent_dialog.multiEditCoarseStep(fp_coarse.getStepCoarse(),
                                                    fp_coarse.getMousePrecision(),
                                                    fp_coarse.getMousePrecisionMulDiv()
                                                    );
                  Global.Print("Multi-Edit Coarse Step "+fp_coarse.getStepCoarse());
               }
            }
            return true;

         case @(fp_coarse):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_coarse.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_coarse.getFloatValue() - var_drag_start;
                     parent_dialog.varDragCoarse(1.0f/*ratio*/, dragDelta);
                  }
                  else
                  {
                     dragRatio = fp_coarse.getFloatValue() / var_drag_start;
                     parent_dialog.varDragCoarse(dragRatio, 0.0f/*delta*/);
                  }
               }
               else
               {
                  handleCoarseChanged();
               }
            }
            return true;

         case @(bt_fine):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_fine):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_fine.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_fine.getFloatValue() - var_drag_start;
                     parent_dialog.varDragFine(1.0f/*ratio*/, dragDelta);
                  }
                  else
                  {
                     dragRatio = fp_fine.getFloatValue() / var_drag_start;
                     parent_dialog.varDragFine(dragRatio, 0.0f/*delta*/);
                  }
               }
               else
               {
                  handleFineChanged();
               }
            }
            return true;

         case @(bt_vel_curve):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_vel_curve):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_vel_curve.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  // (note) swap shift / mul
                  if(b_var_drag_shift)
                  {
                     dragRatio = fp_vel_curve.getFloatValue() / var_drag_start;
                     parent_dialog.varDragVelCurve(dragRatio, 0.0f/*delta*/);
                  }
                  else
                  {
                     dragDelta = fp_vel_curve.getFloatValue() - var_drag_start;
                     parent_dialog.varDragVelCurve(1.0f/*ratio*/, dragDelta);
                  }
               }
               else
               {
                  handleVelCurveChanged();
               }
            }
            return true;

         case @(bt_pitch_kbd_ctr):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_pitch_kbd_ctr):
            handlePitchKbdCtrChanged();
            return true;

         case @(bt_pitch_kbd):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_pitch_kbd):
            handlePitchKbdChanged();
            return true;

         case @(bt_pitch_env):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_pitch_env):
            handlePitchEnvChanged();
            return true;

         case @(bt_pitch_env_vel):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_pitch_env_vel):
            handlePitchEnvVelChanged();
            return true;

         case @(bt_ws_a):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(cm_ws_a):
            if(UI.KeyModAlt())
               parent_dialog.multiEditWSA(cm_ws_a.getSelectedOption(), cm_ws_a.getSelectedOptionName());
            else
               handleWSAChanged();
            return true;

         case @(bt_ws_b):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(cm_ws_b):
            if(UI.KeyModAlt())
               parent_dialog.multiEditWSB(cm_ws_b.getSelectedOption(), cm_ws_b.getSelectedOptionName());
            else
               handleWSBChanged();
            return true;

         case @(bt_ws_mix):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_ws_mix):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_ws_mix.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  // (note) swap shift / mul
                  if(b_var_drag_shift)
                  {
                     dragRatio = fp_ws_mix.getFloatValue() / var_drag_start;
                     parent_dialog.varDragWSMix(dragRatio, 0.0f/*delta*/);
                  }
                  else
                  {
                     dragDelta = fp_ws_mix.getFloatValue() - var_drag_start;
                     parent_dialog.varDragWSMix(1.0f/*ratio*/, dragDelta);
                  }
               }
               else
               {
                  handleWSMixChanged();
               }
            }
            return true;

         case @(bt_voicebus):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_voicebus):
            handleVoiceBusChanged();
            return true;

         case @(bt_aenv_atk):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(true/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_aenv_atk):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_aenv_atk.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_aenv_atk.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvTime(1.0f/*ratio*/, dragDelta, PARAM_AENV_ATK, "AEnv Attack");
                  }
                  else
                  {
                     dragRatio = fp_aenv_atk.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvTime(dragRatio, 0.0f/*delta*/, PARAM_AENV_ATK, "AEnv Attack");
                  }
               }
               else
               {
                  handleEnvTimeChanged("AEnv Attack", PARAM_AENV_ATK, fp_aenv_atk.getFloatValue());
               }
            }
            return true;

         case @(bt_aenv_hld):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(true/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_aenv_hld):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_aenv_hld.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_aenv_hld.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvTime(1.0f/*ratio*/, dragDelta, PARAM_AENV_HLD, "AEnv Hold");
                  }
                  else
                  {
                     dragRatio = fp_aenv_hld.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvTime(dragRatio, 0.0f/*delta*/, PARAM_AENV_HLD, "AEnv Hold");
                  }
               }
               else
               {
                  handleEnvTimeChanged("AEnv Hold", PARAM_AENV_HLD, fp_aenv_hld.getFloatValue());
               }
            }
            return true;

         case @(bt_aenv_dcy):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(true/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_aenv_dcy):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_aenv_dcy.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_aenv_dcy.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvTime(1.0f/*ratio*/, dragDelta, PARAM_AENV_DCY, "AEnv Decay");
                  }
                  else
                  {
                     dragRatio = fp_aenv_dcy.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvTime(dragRatio, 0.0f/*delta*/, PARAM_AENV_DCY, "AEnv Decay");
                  }
               }
               else
               {
                  handleEnvTimeChanged("AEnv Decay", PARAM_AENV_DCY, fp_aenv_dcy.getFloatValue());
               }
            }
            return true;

         case @(bt_aenv_sus):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(true/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_aenv_sus):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_aenv_sus.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_aenv_sus.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvSustain(1.0f/*ratio*/, dragDelta, PARAM_AENV_SUS, "AEnv Sustain");
                  }
                  else
                  {
                     dragRatio = fp_aenv_sus.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvSustain(dragRatio, 0.0f/*delta*/, PARAM_AENV_SUS, "AEnv Sustain");
                  }
               }
               else
               {
                  handleEnvSusChanged("AEnv Sustain", PARAM_AENV_SUS, fp_aenv_sus.getFloatValue());
               }
            }
            return true;

         case @(bt_aenv_rls):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(true/*bAEnv*/, false/*bPEnv*/);
            }
            return true;

         case @(fp_aenv_rls):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_aenv_rls.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_aenv_rls.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvTime(1.0f/*ratio*/, dragDelta, PARAM_AENV_RLS, "AEnv Release");
                  }
                  else
                  {
                     dragRatio = fp_aenv_rls.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvTime(dragRatio, 0.0f/*delta*/, PARAM_AENV_RLS, "AEnv Release");
                  }
               }
               else
               {
                  handleEnvTimeChanged("AEnv Release", PARAM_AENV_RLS, fp_aenv_rls.getFloatValue());
               }
            }
            return true;

         case @(fp_aenv_atk_shp):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  // trace "xxx fp_level start shift="+b_var_drag_shift;
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_aenv_atk_shp.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  // (note) swap shift / mul
                  if(b_var_drag_shift)
                  {
                     dragRatio = fp_aenv_atk_shp.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvShape(dragRatio, 0.0f/*delta*/, PARAM_AENV_ATK_SHAPE, "AEnv Attack");
                  }
                  else
                  {
                     dragDelta = fp_aenv_atk_shp.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvShape(1.0f/*ratio*/, dragDelta, PARAM_AENV_ATK_SHAPE, "AEnv Attack");
                  }
               }
               else
               {
                  handleEnvShapeChanged("AEnv Attack", PARAM_AENV_ATK_SHAPE, fp_aenv_atk_shp.getFloatValue());
               }
            }
            return true;

         case @(fp_aenv_dcy_shp):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_aenv_dcy_shp.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  // (note) swap shift/mul
                  if(b_var_drag_shift)
                  {
                     dragRatio = fp_aenv_dcy_shp.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvShape(dragRatio, 0.0f/*delta*/, PARAM_AENV_DCY_SHAPE, "AEnv Decay");
                  }
                  else
                  {
                     dragDelta = fp_aenv_dcy_shp.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvShape(1.0f/*ratio*/, dragDelta, PARAM_AENV_DCY_SHAPE, "AEnv Decay");
                  }
               }
               else
               {
                  handleEnvShapeChanged("AEnv Decay", PARAM_AENV_DCY_SHAPE, fp_aenv_dcy_shp.getFloatValue());
               }
            }
            return true;

         case @(fp_aenv_rls_shp):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_aenv_rls_shp.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  // (note) swap shift / mul
                  if(b_var_drag_shift)
                  {
                     dragRatio = fp_aenv_rls_shp.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvShape(dragRatio, 0.0f/*delta*/, PARAM_AENV_RLS_SHAPE, "AEnv Release");
                  }
                  else
                  {
                     dragDelta = fp_aenv_rls_shp.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvShape(1.0f/*ratio*/, dragDelta, PARAM_AENV_RLS_SHAPE, "AEnv Release");
                  }
               }
               else
               {
                  handleEnvShapeChanged("AEnv Release", PARAM_AENV_RLS_SHAPE, fp_aenv_rls_shp.getFloatValue());
               }
            }
            return true;

         case @(bt_penv_atk):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, true/*bPEnv*/);
            }
            return true;

         case @(fp_penv_atk):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_penv_atk.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_penv_atk.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvTime(1.0f/*ratio*/, dragDelta, PARAM_PENV_ATK, "PEnv Attack");
                  }
                  else
                  {
                     dragRatio = fp_penv_atk.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvTime(dragRatio, 0.0f/*delta*/, PARAM_PENV_ATK, "PEnv Attack");
                  }
               }
               else
               {
                  handleEnvTimeChanged("PEnv Attack", PARAM_PENV_ATK, fp_penv_atk.getFloatValue());
               }
            }
            return true;

         case @(bt_penv_hld):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, true/*bPEnv*/);
            }
            return true;

         case @(fp_penv_hld):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_penv_hld.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_penv_hld.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvTime(1.0f/*ratio*/, dragDelta, PARAM_PENV_HLD, "PEnv Hold");
                  }
                  else
                  {
                     dragRatio = fp_penv_hld.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvTime(dragRatio, 0.0f/*delta*/, PARAM_PENV_HLD, "PEnv Hold");
                  }
               }
               else
               {
                  handleEnvTimeChanged("PEnv Hold", PARAM_PENV_HLD, fp_penv_hld.getFloatValue());
               }
            }
            return true;

         case @(bt_penv_dcy):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, true/*bPEnv*/);
            }
            return true;

         case @(fp_penv_dcy):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_penv_dcy.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_penv_dcy.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvTime(1.0f/*ratio*/, dragDelta, PARAM_PENV_DCY, "PEnv Decay");
                  }
                  else
                  {
                     dragRatio = fp_penv_dcy.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvTime(dragRatio, 0.0f/*delta*/, PARAM_PENV_DCY, "PEnv Decay");
                  }
               }
               else
               {
                  handleEnvTimeChanged("PEnv Decay", PARAM_PENV_DCY, fp_penv_dcy.getFloatValue());
               }
            }
            return true;

         case @(bt_penv_sus):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, true/*bPEnv*/);
            }
            return true;

         case @(fp_penv_sus):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_penv_sus.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_penv_sus.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvSustain(1.0f/*ratio*/, dragDelta, PARAM_PENV_SUS, "PEnv Sustain");
                  }
                  else
                  {
                     dragRatio = fp_penv_sus.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvSustain(dragRatio, 0.0f/*delta*/, PARAM_PENV_SUS, "PEnv Sustain");
                  }
               }
               else
               {
                  handleEnvSusChanged("PEnv Sustain", PARAM_PENV_SUS, fp_penv_sus.getFloatValue());
               }
            }
            return true;

         case @(bt_penv_rls):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showContextMenu(false/*bAEnv*/, true/*bPEnv*/);
            }
            return true;

         case @(fp_penv_rls):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_penv_rls.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  if(b_var_drag_shift)
                  {
                     dragDelta = fp_penv_rls.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvTime(1.0f/*ratio*/, dragDelta, PARAM_PENV_RLS, "PEnv Release");
                  }
                  else
                  {
                     dragRatio = fp_penv_rls.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvTime(dragRatio, 0.0f/*delta*/, PARAM_PENV_RLS, "PEnv Release");
                  }
               }
               else
               {
                  handleEnvTimeChanged("PEnv Release", PARAM_PENV_RLS, fp_penv_rls.getFloatValue());
               }
            }
            return true;

         case @(fp_penv_atk_shp):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_penv_atk_shp.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  // (note) swap shift / mul
                  if(b_var_drag_shift)
                  {
                     dragRatio = fp_penv_atk_shp.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvShape(dragRatio, 0.0f/*delta*/, PARAM_PENV_ATK_SHAPE, "PEnv Attack");
                  }
                  else
                  {
                     dragDelta = fp_penv_atk_shp.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvShape(1.0f/*ratio*/, dragDelta, PARAM_PENV_ATK_SHAPE, "PEnv Attack");
                  }
               }
               else
               {
                  handleEnvShapeChanged("PEnv Attack", PARAM_PENV_ATK_SHAPE, fp_penv_atk_shp.getFloatValue());
               }
            }
            return true;

         case @(fp_penv_dcy_shp):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_penv_dcy_shp.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  // (note) swap shift / mul
                  if(b_var_drag_shift)
                  {
                     dragRatio = fp_penv_dcy_shp.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvShape(dragRatio, 0.0f/*delta*/, PARAM_PENV_DCY_SHAPE, "PEnv Decay");
                  }
                  else
                  {
                     dragDelta = fp_penv_dcy_shp.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvShape(1.0f/*ratio*/, dragDelta, PARAM_PENV_DCY_SHAPE, "PEnv Decay");
                  }
               }
               else
               {
                  handleEnvShapeChanged("PEnv Decay", PARAM_PENV_DCY_SHAPE, fp_penv_dcy_shp.getFloatValue());
               }
            }
            return true;

         case @(fp_penv_rls_shp):
            if(FloatParam.ACTION_STARTEDITING == acName)
            {
               b_var_drag = UI.KeyModAlt();
               if(b_var_drag)
               {
                  b_var_drag_shift = UI.KeyModShift();
                  parent_dialog.copyVarToDragBase();
                  var_drag_start = fp_penv_rls_shp.getFloatValue();
               }
            }
            else if(FloatParam.ACTION_STOPEDITING == acName)
            {
               b_var_drag = false;
            }
            else if(FloatParam.ACTION_CANCELEDITING == acName)
            {
               if(b_var_drag)
               {
                  b_var_drag = false;
                  parent_dialog.restoreDragBase();
               }
            }
            else
            {
               if(b_var_drag)
               {
                  // (note) swap shift / mul
                  if(b_var_drag_shift)
                  {
                     dragRatio = fp_penv_rls_shp.getFloatValue() / var_drag_start;
                     parent_dialog.varDragEnvShape(dragRatio, 0.0f/*delta*/, PARAM_PENV_RLS_SHAPE, "PEnv Release");
                  }
                  else
                  {
                     dragDelta = fp_penv_rls_shp.getFloatValue() - var_drag_start;
                     parent_dialog.varDragEnvShape(1.0f/*ratio*/, dragDelta, PARAM_PENV_RLS_SHAPE, "PEnv Release");
                  }
               }
               else
               {
                  handleEnvShapeChanged("PEnv Release", PARAM_PENV_RLS_SHAPE, fp_penv_rls_shp.getFloatValue());
               }
            }
            return true;
      }

      return XMLForm::consumeAction(_ac);
   }

}
