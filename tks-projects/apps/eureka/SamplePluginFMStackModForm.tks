// ----
// ---- file   : SamplePluginFMStackModForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 24Aug2023
// ---- changed: 25Aug2023, 26Aug2023, 27Aug2023, 01Sep2023, 09Sep2023, 14Sep2023
// ----
// ----
// ----

module MSamplePluginFMStackModForm;

use namespace ui;
use namespace st2;


// <class.png>
class SamplePluginFMStackModForm : XMLForm, ActionProvider {

   define int PARAM_MGRP1_OP_MASK = 16;
   define int PARAM_MGRP1_DEST    = 24;

   static StringArray dst_options_0 = [
      "Variation"
                                       ];

   static StringArray dst_options = [
      "-",            //  0: MGRP_DST_NONE
      "Level",        //  1: MGRP_DST_OP_LEVEL
      "AEnv Amt",     //  2: MGRP_DST_OP_LEVEL_ENV_AMT
      "Pitch",        //  3: MGRP_DST_OP_PITCH
      "PEnv Amt",     //  4: MGRP_DST_OP_PITCH_ENV_AMT
      "Phase",        //  5: MGRP_DST_OP_PHASE
      "Mat Dst Amt",  //  6: MGRP_DST_MATRIX_OP_DST_AMT
      "AEnv Atk",     //  7: MGRP_DST_AENV_ATK
      "AEnv Hld",     //  8: MGRP_DST_AENV_HLD
      "AEnv Dcy",     //  9: MGRP_DST_AENV_DCY
      "AEnv Sus",     // 10: MGRP_DST_AENV_SUS
      "AEnv Rls",     // 11: MGRP_DST_AENV_RLS
      "AEnv Dcy+Rls", // 12: MGRP_DST_AENV_RLS
      "PEnv Atk",     // 13: MGRP_DST_PENV_ATK
      "PEnv Hld",     // 14: MGRP_DST_PENV_HLD
      "PEnv Dcy",     // 15: MGRP_DST_PENV_DCY
      "PEnv Sus",     // 16: MGRP_DST_PENV_SUS
      "PEnv Rls",     // 17: MGRP_DST_PENV_RLS
      "PEnv Dcy+Rls", // 18: MGRP_DST_PENV_RLS
      "All Atk",      // 19: MGRP_DST_ALL_ATK
      "All Hld",      // 20: MGRP_DST_ALL_HLD
      "All Dcy",      // 21: MGRP_DST_ALL_DCY
      "All Sus",      // 22: MGRP_DST_ALL_SUS
      "All Rls",      // 23: MGRP_DST_ALL_RLS
      "All Dcy+Rls",  // 24: MGRP_DST_ALL_RLS
      "WS A",         // 25: MGRP_DST_WS_A
      "WS B",         // 26: MGRP_DST_WS_B
      "WS AB Mix",    // 27: MGRP_DST_WS_AB_MIX
      "Out Level",    // 28: MGRP_DST_OUT
                                     ];

   protected PageSample   *pg_sample;
   protected Sample       *sample;

   protected int                 mgrp_idx;
   protected StPluginShared *[] *plugins_shared;

   protected ComboBox *cm_dst;
   protected CheckBox *cb_op1;
   protected CheckBox *cb_op2;
   protected CheckBox *cb_op3;
   protected CheckBox *cb_op4;
   protected CheckBox *cb_op5;


   // <ui_init.png>
   public method init() : boolean {

      if(!initPakFile("SamplePluginFMStackModForm.xfm"))
      {
         return false;
      }

      autoResolveIds(this);

      recursiveSetEnableCursorKeyTabCycling(false);

      return true;
   }

   // // <ui.png>
   // public virtual getProvidedActionNames() : StringArray {
   //    return [ACTION_ENTRY_EDITED];
   // }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      _retLayers.joinRR(_retLayers,
                        [
                           cm_dst,
                           
                           cb_op1,
                           cb_op2,
                           cb_op3,
                           cb_op4,
                           cb_op5,
                         ]
                        );
   }

   // <ui_show.png>
   public method showModGroup(Sample _sample, int _mgrpIdx, PointerArray _pluginsShared) {
      sample         <= _sample;
      mgrp_idx        = _mgrpIdx;
      plugins_shared <= _pluginsShared;

      StPluginShared shared <= plugins_shared.first;

      boolean bEditable = (_mgrpIdx > 0);

      cm_dst.setOptions( (_mgrpIdx > 0) ? dst_options : dst_options_0 );

      cm_dst.setSelectedOption( int(shared.getParamValue(PARAM_MGRP1_DEST + mgrp_idx) * 100.0f) );
      cm_dst.setEditable(bEditable);

      int opMask = (_mgrpIdx > 0) ? int(shared.getParamValue(PARAM_MGRP1_OP_MASK + mgrp_idx) * 100.0f) : 31;
      // trace "xxx showModGroup: mgrpIdx="+_mgrpIdx+" opMask="+opMask;
      cb_op1.setSelected(opMask & (1 << 0));
      cb_op1.setEditable(bEditable);
      cb_op2.setSelected(opMask & (1 << 1));
      cb_op2.setEditable(bEditable);
      cb_op3.setSelected(opMask & (1 << 2));
      cb_op3.setEditable(bEditable);
      cb_op4.setSelected(opMask & (1 << 3));
      cb_op4.setEditable(bEditable);
      cb_op5.setSelected(opMask & (1 << 4));
      cb_op5.setEditable(bEditable);
   }

   // <ui_handle.png>
   protected =replay= method handleDstChanged() {
      int dstIdx = cm_dst.getSelectedOption();
      float f = dstIdx / 100.0f;
      StPluginShared *shared;
      foreach shared in plugins_shared
      {
         shared.setParamValue(PARAM_MGRP1_DEST + mgrp_idx, f);
      }
      sample.markParamsAsModified();
      Global.Print("Modulation Group "+(mgrp_idx+1)+" Destination is "+cm_dst.getSelectedOptionName()+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected =replay= method handleOpChanged(int _opIdx, boolean _bEnable) {
      StPluginShared shared <= plugins_shared.first;
      int oldOpMask = int(shared.getParamValue(PARAM_MGRP1_OP_MASK + mgrp_idx) * 100.0f);
      int mask = (1 << _opIdx);
      local Integer newOpMask = (oldOpMask &~mask) | (_bEnable ? mask : 0);
      float f = newOpMask / 100.0f;
      foreach shared in plugins_shared
      {
         shared.setParamValue(PARAM_MGRP1_OP_MASK + mgrp_idx, f);
      }
      sample.markParamsAsModified();
      Global.Print("Modulation Group "+(mgrp_idx+1)+" Op Mask is "+newOpMask.printf("$%02x")+" (update "+plugins_shared.numElements+" plugin"+Utils.GetPluralString(plugins_shared.numElements)+")");
   }

   // <ui_handle.png>
   protected method handleToggleAll() {
      local CheckBox*[] cbAll <= [
         cb_op1,
         cb_op2,
         cb_op3,
         cb_op4,
         cb_op5
                                  ];
      boolean bAllSel = true;
      CheckBox *cb;
      foreach cb in cbAll
      {
         bAllSel = bAllSel && cb.isSelected();
      }

      bAllSel = !bAllSel;
      foreach cb in cbAll
      {
         cb.setSelected(bAllSel);
      }

      handleOpChanged(0, bAllSel);
      handleOpChanged(1, bAllSel);
      handleOpChanged(2, bAllSel);
      handleOpChanged(3, bAllSel);
      handleOpChanged(4, bAllSel);

      Global.Print( (bAllSel?"Enable":"Exclude")+" all ops" );
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      // trace "[>>>] SamplePluginFMStackModForm: key="+_k.name+" pressed="+_k.pressed+" mod="+_k.mod;

      switch(_k.pressed)
      {
      }
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      switch(@(ap))
      {
         case @(cm_dst):
            handleDstChanged();
            return true;

         case @(cb_op1):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleToggleAll();
            else
               handleOpChanged(0, cb_op1.isSelected());
            return true;

         case @(cb_op2):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleToggleAll();
            else
               handleOpChanged(1, cb_op2.isSelected());
            return true;

         case @(cb_op3):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleToggleAll();
            else
               handleOpChanged(2, cb_op3.isSelected());
            return true;

         case @(cb_op4):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleToggleAll();
            else
               handleOpChanged(3, cb_op4.isSelected());
            return true;

         case @(cb_op5):
            if(CheckBox.ACTION_HOLD_CLICK == acName)
               handleToggleAll();
            else
               handleOpChanged(4, cb_op5.isSelected());
            return true;
      }

      return XMLForm::consumeAction(_ac);
   }

}
