// ----
// ---- file   : Page.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2012-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 13Nov2012, 04Jan2013, 06Jan2013, 25Mar2013, 19Apr2013, 11Aug2014, 12Aug2014
// ----          15Aug2014, 18Aug2014, 20Aug2014, 09Sep2014, 14Sep2014, 19Sep2014, 21Sep2014
// ----          27Sep2014, 29Sep2014, 21Feb2015, 23Feb2015, 06Mar2015, 29Sep2015, 12Oct2015
// ----          12Nov2015, 09Feb2017, 30Jul2017, 22Jan2018, 23Feb2018, 22Dec2018, 04May2021
// ----          11Dec2021, 12Aug2022, 18Nov2023
// ----
// ----
// ----

module MPage;

use namespace ui;
use namespace st2;


// <class.png>
abstract class Page : XMLForm, ActionProvider, CmdProvider {


   // <ui_page.png>
   public method pageGetName() : String {
      String n <= (this).yacMetaClassName();
      return n.replace("Page", "");
   }

   // <ui_page.png>
   public method pageIsSub() : boolean {
      // Return true if current page should only be left temporarily.
      //  When this page is left, editing continues on the current page.
      return false;
   }

   // <ui_page.png>
   public method pageEnter() {
   }

   // <ui_page.png>
   public method pageUpdate() {
      // called when page is already visible but context has changed. rarely used. see Project::tryEditModSampleBySmpUID()
   }

   // <ui_page.png>
   public method isPageLocked() : boolean {
      return false;
   }

   // <ui_page.png>
   public method pageLeave() {
   }

   // <ui_page.png>
   public method pageLeaveSub() {
      // Leave temporarily (e.g. to edit MMC), editing continues when sub page returns
      pageLeave();
   }

   // <ui_page.png>
   public method pageGetParent() : int {
      return -1;
   }

   // <ui_page.png>
   public method pageIsModal() : boolean {
      return false;
   }

   // <ui_page.png>
   public method pageFocusDefault() {
   }

   // <ui_page.png>
   public method pageForceKbdFocusSelMode() : boolean {
      return false;
   }

   // <ui_page.png>
   public method pageHandleAutoFocusKey(Key _k) : boolean {
      return false;
   }

   // <ui_page.png>
   public method pageSceneChanged(int _groupIdx) : boolean {
      return false;
   }

   // <ui_page.png>
   public method pageHandleReplayTimer() {
   }

   // <ui_page.png>
   public method pageHandleMuteSoloChanged() {
   }

   // <ui_page.png>
   public method pageIsCurrent() {
      return (@(root_form.getCurrentPage()) == @(this));
   }

   // <ui_page.png>
   public method pageShowPrev() : boolean {
      // when statusbar back button is clicked.
      //  may be overwritten by derived classes
      //  return false to fallback to page history (see RootForm::showPagePrev())
      return false;
   }

   // <ui_kbd.png>
   public virtual getTabCycleOverrides() : PointerArray {
      return getTabCycleOverridesDef();
   }

   // <ui_page.png>
   public method pageHandleIdleTimer() {
      // called ~30 times per second from UI thread
   }

   // <ui_page.png>
   public method pageGetActiveSampleView() : SampleView {
      return null;
   }

   // <ui_kbd.png>
   public virtual wantKeyRepeat(Key _k) : boolean {
      switch(_k.code)
      {
         // // case 'b':
         // // case 'n':
         // // case 'q':
         // // case 'm':
         // // case 'p':
         // // case 'g':
         case VKEY_ESCAPE:
            return false;
      }
      return XMLForm::wantKeyRepeat(_k);
   }

}
