// ----
// ---- file   : clapscan.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : utility script started by clap.tks CLAPDeepScanJob class.
// ----          scans a single CLAP bundle/DSO and emits the plugin infos to stdout.
// ----
// ---- created: 13Jan2024
// ---- changed: 03Jul2024
// ----
// ----
// ----

use tkclap;

// usage:  tks clapscan <clap_pathname>
//
//  e.g. $ tks clapscan.tks "/Library/Audio/Plug-Ins/CLAP/FabFilter Saturn 2.clap"
//

// <class.png>
class CLAPPluginEntry {
   String  s_id;
   String  s_name;
   String  s_vendor;
   boolean b_instr;

   emit() {
      trace "[clap plugin]";
      trace s_id;
      trace s_name;
      trace s_vendor;
      trace b_instr;
   }
}

Configuration.lockGlobalContext = false;

if(Arguments.numElements > 0)
{
   String pathName <= Arguments[0];
   CLAPPluginBundle bundle;
   if(bundle.openPluginBundle(pathName))
   {
      int numPlugins = bundle.numPlugins;

      trace "[clap bundle]";
      StdOutStream.flush();

      int pluginIdx = 0;
      loop(numPlugins)
      {
         CLAPPlugin plugin <= bundle.createPluginByIndex(pluginIdx);
         if(null != plugin)
         {
            CLAPPluginEntry entry;
            entry.s_id      = plugin.id;
            entry.s_name    = plugin.name;
            entry.s_vendor  = plugin.vendor;
            entry.b_instr   = plugin.isInstrument();
            entry.emit();
            StdOutStream.flush();
            plugin <= null;
         }

         // Next plugin
         pluginIdx++;
      }

      bundle.closePluginBundle();
   }
}
