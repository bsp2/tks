// ----
// ---- file   : ModGridSTFXButton.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2023-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 21Apr2023
// ---- changed: 12May2023, 01Nov2023, 06Jan2024, 22Mar2024, 06Jul2024, 10Aug2024, 27Sep2024
// ----          08Jan2025
// ----
// ----
// ----

module MModGridSTFXButton;

use namespace ui;
use namespace st2;


// <class.png>
class ModGridSTFXButton : ModGridButton, ActionConsumer {

   define String ACTION_TOGGLE_EDITOR;  // left mouse click
   define String ACTION_EDIT_PARAMSET;  // middle mouse click


   // <ui_init.png>
   public method initSTFXButton() {
      initModGridButton();
   }

   // <method.png>
   protected virtual contextMenuAddExtraPatchItems(PopupMenu spm) {
      PopupMenuButton *pmb;

      spm.addSeparator();
      pmb <= spm.addDefaultButton("STFX param editor..", "patch_generic");
      pmb.setAccelerators("lshift-LMB click", "");

      spm.addSeparator();

      pmb <= spm.addDefaultButton("STFX patch browser..", "patch_browser");
      pmb.setAccelerators("LMB hold click", "");

      spm.addSeparator();

      pmb <= spm.addDefaultButton("Load STFX patch..", "stfx_load");
      pmb <= spm.addDefaultButton("Save STFX patch..", "stfx_save");
   }

   // <ui_mouse.png>
   public virtual onMouseBeginDrag(MouseEvent _dragStart, MouseEvent _ev) : boolean {
      UI.ShowCursor(UIConstants.CURSOR_DENIED);
      return true;
   }

   // <ui_handle.png>
   public virtual handleEditMod() : boolean {
      if(user_data instanceof ModSTFX)
      {
         provideAction(Action.New(getProvidedActionAlias(ACTION_TOGGLE_EDITOR), this));
         return true;
      }
      return false;
   }

   // <ui_mouse.png>
   public method onMouseLeave(MouseEvent _ev) : boolean {
      return Button::onMouseLeave(_ev);
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      // // trace "xxx ModGridSTFXButton: acName="+acName;

      Mod mod <= getUserData();
      ModSTFX modSTFX <= mod;

      switch(@(ap))
      {
         case @(pm_context):
            Global.Debug2("ModGridSTFXButton: pm_context acName="+acName);
            if(PopupMenu.IsFocusAction(_ac))
               return true;
            if(ModGridButton::consumeAction(_ac))
               return true;
            switch(acName)
            {
               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "patch_generic":
                  modSTFX.showGenericParamDialog();
                  return true;

               case "patch_browser":
                  parent_modgrid.showPatchBrowserDialogSTFX(mod, false/*bVoicePlugin*/);
                  return true;

               case "stfx_load":
                  parent_modgrid.handleSTFXPatchLoad(mod);
                  return true;

               case "stfx_save":
                  parent_modgrid.handleSTFXPatchSave(mod);
                  return true;
            }
            return true;
      }
      return Button::consumeAction(_ac);
   }

}
