//  sample_rate: 48000
//    note_freq: 261.63
//      #frames: 24000


float var_x = 0;
float var_wt_x = 0;
float var_wt_y = 0;
float var_wt_freq = 0;
float var_v_env_rmp = 0;
float var_v_o3 = 0;
float var_v_o2 = 0;
float var_v_o1 = 0;

float tmp_f;
float tmp2_f;
Short tmp_i;
Short tmp2_i;

function ffrac_s(float _f) { return (_f >= 0.0f) ? frac(_f) : (1.0f + frac(_f)); }

function loc_bipolar_to_scale(float _t, float _div, float _mul) {
   // t (-1..1) => /_div .. *_mul
   
   float s;

   if(_t < 0.0f)
   {
      s = (1.0f / _div);
      s = 1.0f + (s - 1.0f) * -_t;
      if(s < 0.0f)
         s = 0.0f;
   }
   else
   {
      s = _mul;
      s = 1.0f + (s - 1.0f) * _t;
   }
   
   return s;
}

IntArray *curve_0;
IntArray *curve_1;
IntArray *curve_2;
IntArray *curve_3;
IntArray *curve_4;
IntArray *curve_5;
IntArray *curve_6;
IntArray *curve_7;
IntArray *curve_8;
float tmp2_rmp_step;



function Calc(FloatArray _d) {
   float tmp1_rmp_cur = 0.0f;
   float tmp3_pha_phase = 0.0f;
   Short tmp8;
   Short tmp9;
   float tmp13_pha_phase = 0.0f;
   float tmp14_pha_phase = 0.0f;
   float tmp15_hbx_last = 0.0f;
   // start=0 end=0.996094 #frames=24000:
   float tmp4;
   
   tmp2_rmp_step = 4.15039e-05f;
   int smpIdx = 0;
   int outIdx = 0;
   loop(24000)
   {
      float out = 0.0f;
      
      // ========
      // ======== lane "out" modIdx=0 modString=rmp
      // ========
      
      // -- mod="rmp" dstVar=out
      out = tmp1_rmp_cur;
      tmp1_rmp_cur = mathMinf(tmp1_rmp_cur+tmp2_rmp_step, 0.996094);
      
      // -- mod="sto v_env_rmp" dstVar=out
      var_v_env_rmp = out;
      
      // -- mod="pha" dstVar=out
      float tmp5;
      
      // ---- mod="pha" input "freq" seq 1/1
      
      // -- mod="$P_O3_RATIO" dstVar=tmp5/*pha_freq*/
      tmp5/*pha_freq*/ = 1.005f;
      
      // -- mod="$v_env_rmp" dstVar=tmp5/*pha_freq*/
      float tmp6;
      tmp6/*seq*/ = tmp5/*pha_freq*/;
      tmp6/*seq*/ = var_v_env_rmp;
      
      // -- mod="lut" dstVar=tmp6/*seq*/
      float tmp7;
      float tmp10;
      float tmp11;
      float tmp12;
      tmp7/*lut_f*/ = (tmp6/*seq*/ * 256);
      tmp8/*lut_idx_a*/ = (int)tmp7/*lut_f*/;
      tmp10/*lut_frac*/ = tmp7/*lut_f*/ - (float)tmp8/*lut_idx_a*/;
      tmp11/*lut_a*/ = curve_1[( (int)tmp8/*lut_idx_a*/      ) & 255] * (1.0f / 2048);
      tmp12/*lut_b*/ = curve_1[(((int)tmp8/*lut_idx_a*/) + 1) & 255] * (1.0f / 2048);
      tmp6/*seq*/ = tmp11/*lut_a*/ + (tmp12/*lut_b*/ - tmp11/*lut_a*/) * tmp10/*lut_frac*/;
      tmp5/*pha_freq*/ *= tmp6/*seq*/;
      tmp4/*pha_speed*/ = 0.00545062f * tmp5/*pha_freq*/;
      tmp5/*pha_tmp*/ = (tmp3_pha_phase);
      
      // ---- mod="pha" input "phasemod" seq 1/1
      
      // -- mod="0" dstVar=tmp6/*phasemod*/
      tmp6/*phasemod*/ = 0.0f;
      tmp5/*pha_tmp*/ += tmp6/*phasemod*/;
      out = ffrac_s(tmp5/*pha_tmp*/);
      tmp3_pha_phase = ffrac_s(tmp3_pha_phase + tmp4/*pha_speed*/);
      
      // -- mod="lut" dstVar=out
      tmp4/*lut_f*/ = (out * 256);
      tmp8/*lut_idx_a*/ = (int)tmp4/*lut_f*/;
      tmp5/*lut_frac*/ = tmp4/*lut_f*/ - (float)tmp8/*lut_idx_a*/;
      tmp6/*lut_a*/ = curve_0[( (int)tmp8/*lut_idx_a*/      ) & 255] * (1.0f / 2048);
      tmp7/*lut_b*/ = curve_0[(((int)tmp8/*lut_idx_a*/) + 1) & 255] * (1.0f / 2048);
      out = tmp6/*lut_a*/ + (tmp7/*lut_b*/ - tmp6/*lut_a*/) * tmp5/*lut_frac*/;
      
      // -- mod="$v_env_rmp" dstVar=out
      tmp4/*seq*/ = out;
      tmp4/*seq*/ = var_v_env_rmp;
      
      // -- mod="lut" dstVar=tmp4/*seq*/
      tmp5/*lut_f*/ = (tmp4/*seq*/ * 256);
      tmp8/*lut_idx_a*/ = (int)tmp5/*lut_f*/;
      tmp6/*lut_frac*/ = tmp5/*lut_f*/ - (float)tmp8/*lut_idx_a*/;
      tmp7/*lut_a*/ = curve_2[( (int)tmp8/*lut_idx_a*/      ) & 255] * (1.0f / 2048);
      tmp10/*lut_b*/ = curve_2[(((int)tmp8/*lut_idx_a*/) + 1) & 255] * (1.0f / 2048);
      tmp4/*seq*/ = tmp7/*lut_a*/ + (tmp10/*lut_b*/ - tmp7/*lut_a*/) * tmp6/*lut_frac*/;
      out *= tmp4/*seq*/;
      
      // -- mod="$P_O3_LEVEL" dstVar=out
      out *= 1.0f;
      
      // -- mod="sto v_o3" dstVar=out
      var_v_o3 = out;
      
      // -- mod="pha" dstVar=out
      
      // ---- mod="pha" input "freq" seq 1/1
      
      // -- mod="$P_O2_RATIO" dstVar=tmp5/*pha_freq*/
      tmp5/*pha_freq*/ = 1.5f;
      
      // -- mod="$v_env_rmp" dstVar=tmp5/*pha_freq*/
      tmp6/*seq*/ = tmp5/*pha_freq*/;
      tmp6/*seq*/ = var_v_env_rmp;
      
      // -- mod="lut" dstVar=tmp6/*seq*/
      tmp7/*lut_f*/ = (tmp6/*seq*/ * 256);
      tmp8/*lut_idx_a*/ = (int)tmp7/*lut_f*/;
      tmp10/*lut_frac*/ = tmp7/*lut_f*/ - (float)tmp8/*lut_idx_a*/;
      tmp11/*lut_a*/ = curve_4[( (int)tmp8/*lut_idx_a*/      ) & 255] * (1.0f / 2048);
      tmp12/*lut_b*/ = curve_4[(((int)tmp8/*lut_idx_a*/) + 1) & 255] * (1.0f / 2048);
      tmp6/*seq*/ = tmp11/*lut_a*/ + (tmp12/*lut_b*/ - tmp11/*lut_a*/) * tmp10/*lut_frac*/;
      tmp5/*pha_freq*/ *= tmp6/*seq*/;
      tmp4/*pha_speed*/ = 0.00545062f * tmp5/*pha_freq*/;
      tmp5/*pha_tmp*/ = (tmp13_pha_phase);
      
      // ---- mod="pha" input "phasemod" seq 1/1
      
      // -- mod="0" dstVar=tmp6/*phasemod*/
      tmp6/*phasemod*/ = 0.0f;
      
      // -- mod="$v_o3" dstVar=tmp6/*phasemod*/
      tmp7/*seq*/ = tmp6/*phasemod*/;
      tmp7/*seq*/ = var_v_o3;
      
      // -- mod="$P_O3_TO_O2" dstVar=tmp7/*seq*/
      tmp7/*seq*/ *= 0.02f;
      tmp6/*phasemod*/ += tmp7/*seq*/;
      tmp5/*pha_tmp*/ += tmp6/*phasemod*/;
      out = ffrac_s(tmp5/*pha_tmp*/);
      tmp13_pha_phase = ffrac_s(tmp13_pha_phase + tmp4/*pha_speed*/);
      
      // -- mod="lut" dstVar=out
      tmp4/*lut_f*/ = (out * 256);
      tmp8/*lut_idx_a*/ = (int)tmp4/*lut_f*/;
      tmp5/*lut_frac*/ = tmp4/*lut_f*/ - (float)tmp8/*lut_idx_a*/;
      tmp6/*lut_a*/ = curve_3[( (int)tmp8/*lut_idx_a*/      ) & 255] * (1.0f / 2048);
      tmp7/*lut_b*/ = curve_3[(((int)tmp8/*lut_idx_a*/) + 1) & 255] * (1.0f / 2048);
      out = tmp6/*lut_a*/ + (tmp7/*lut_b*/ - tmp6/*lut_a*/) * tmp5/*lut_frac*/;
      
      // -- mod="$v_env_rmp" dstVar=out
      tmp4/*seq*/ = out;
      tmp4/*seq*/ = var_v_env_rmp;
      
      // -- mod="lut" dstVar=tmp4/*seq*/
      tmp5/*lut_f*/ = (tmp4/*seq*/ * 256);
      tmp8/*lut_idx_a*/ = (int)tmp5/*lut_f*/;
      tmp6/*lut_frac*/ = tmp5/*lut_f*/ - (float)tmp8/*lut_idx_a*/;
      tmp7/*lut_a*/ = curve_5[( (int)tmp8/*lut_idx_a*/      ) & 255] * (1.0f / 2048);
      tmp10/*lut_b*/ = curve_5[(((int)tmp8/*lut_idx_a*/) + 1) & 255] * (1.0f / 2048);
      tmp4/*seq*/ = tmp7/*lut_a*/ + (tmp10/*lut_b*/ - tmp7/*lut_a*/) * tmp6/*lut_frac*/;
      out *= tmp4/*seq*/;
      
      // -- mod="$P_O2_LEVEL" dstVar=out
      out *= 1.0f;
      
      // -- mod="sto v_o2" dstVar=out
      var_v_o2 = out;
      
      // -- mod="pha" dstVar=out
      
      // ---- mod="pha" input "freq" seq 1/1
      
      // -- mod="$P_O1_RATIO" dstVar=tmp5/*pha_freq*/
      tmp5/*pha_freq*/ = 1.0f;
      
      // -- mod="$v_env_rmp" dstVar=tmp5/*pha_freq*/
      tmp6/*seq*/ = tmp5/*pha_freq*/;
      tmp6/*seq*/ = var_v_env_rmp;
      
      // -- mod="lut" dstVar=tmp6/*seq*/
      tmp7/*lut_f*/ = (tmp6/*seq*/ * 256);
      tmp8/*lut_idx_a*/ = (int)tmp7/*lut_f*/;
      tmp10/*lut_frac*/ = tmp7/*lut_f*/ - (float)tmp8/*lut_idx_a*/;
      tmp11/*lut_a*/ = curve_7[( (int)tmp8/*lut_idx_a*/      ) & 255] * (1.0f / 2048);
      tmp12/*lut_b*/ = curve_7[(((int)tmp8/*lut_idx_a*/) + 1) & 255] * (1.0f / 2048);
      tmp6/*seq*/ = tmp11/*lut_a*/ + (tmp12/*lut_b*/ - tmp11/*lut_a*/) * tmp10/*lut_frac*/;
      tmp5/*pha_freq*/ *= tmp6/*seq*/;
      tmp4/*pha_speed*/ = 0.00545062f * tmp5/*pha_freq*/;
      tmp5/*pha_tmp*/ = (tmp14_pha_phase);
      
      // ---- mod="pha" input "phasemod" seq 1/1
      
      // -- mod="0" dstVar=tmp6/*phasemod*/
      tmp6/*phasemod*/ = 0.0f;
      
      // -- mod="$v_o2" dstVar=tmp6/*phasemod*/
      tmp7/*seq*/ = tmp6/*phasemod*/;
      tmp7/*seq*/ = var_v_o2;
      
      // -- mod="$P_O2_TO_O1" dstVar=tmp7/*seq*/
      tmp7/*seq*/ *= 0.01f;
      tmp6/*phasemod*/ += tmp7/*seq*/;
      
      // -- mod="$v_o3" dstVar=tmp6/*phasemod*/
      tmp7/*seq*/ = tmp6/*phasemod*/;
      tmp7/*seq*/ = var_v_o3;
      
      // -- mod="$P_O3_TO_O1" dstVar=tmp7/*seq*/
      tmp7/*seq*/ *= 0.01f;
      tmp6/*phasemod*/ += tmp7/*seq*/;
      tmp5/*pha_tmp*/ += tmp6/*phasemod*/;
      out = ffrac_s(tmp5/*pha_tmp*/);
      tmp14_pha_phase = ffrac_s(tmp14_pha_phase + tmp4/*pha_speed*/);
      
      // -- mod="lut" dstVar=out
      tmp4/*lut_f*/ = (out * 256);
      tmp8/*lut_idx_a*/ = (int)tmp4/*lut_f*/;
      tmp5/*lut_frac*/ = tmp4/*lut_f*/ - (float)tmp8/*lut_idx_a*/;
      tmp6/*lut_a*/ = curve_6[( (int)tmp8/*lut_idx_a*/      ) & 255] * (1.0f / 2048);
      tmp7/*lut_b*/ = curve_6[(((int)tmp8/*lut_idx_a*/) + 1) & 255] * (1.0f / 2048);
      out = tmp6/*lut_a*/ + (tmp7/*lut_b*/ - tmp6/*lut_a*/) * tmp5/*lut_frac*/;
      
      // -- mod="$v_env_rmp" dstVar=out
      tmp4/*seq*/ = out;
      tmp4/*seq*/ = var_v_env_rmp;
      
      // -- mod="lut" dstVar=tmp4/*seq*/
      tmp5/*lut_f*/ = (tmp4/*seq*/ * 256);
      tmp8/*lut_idx_a*/ = (int)tmp5/*lut_f*/;
      tmp6/*lut_frac*/ = tmp5/*lut_f*/ - (float)tmp8/*lut_idx_a*/;
      tmp7/*lut_a*/ = curve_8[( (int)tmp8/*lut_idx_a*/      ) & 255] * (1.0f / 2048);
      tmp10/*lut_b*/ = curve_8[(((int)tmp8/*lut_idx_a*/) + 1) & 255] * (1.0f / 2048);
      tmp4/*seq*/ = tmp7/*lut_a*/ + (tmp10/*lut_b*/ - tmp7/*lut_a*/) * tmp6/*lut_frac*/;
      out *= tmp4/*seq*/;
      
      // -- mod="$P_O1_LEVEL" dstVar=out
      out *= 1.0f;
      
      // -- mod="sto v_o1" dstVar=out
      var_v_o1 = out;
      
      // -- mod="$v_o1" dstVar=out
      out = var_v_o1;
      
      // -- mod="$P_O1_TO_OUT" dstVar=out
      out *= 0.7f;
      
      // -- mod="$v_o2" dstVar=out
      tmp4/*seq*/ = out;
      tmp4/*seq*/ = var_v_o2;
      
      // -- mod="$P_O2_TO_OUT" dstVar=tmp4/*seq*/
      tmp4/*seq*/ *= 0.11f;
      out += tmp4/*seq*/;
      
      // -- mod="$v_o3" dstVar=out
      tmp4/*seq*/ = out;
      tmp4/*seq*/ = var_v_o3;
      
      // -- mod="$P_O3_TO_OUT" dstVar=tmp4/*seq*/
      tmp4/*seq*/ *= 0.32f;
      out += tmp4/*seq*/;
      
      // -- mod="hbx" dstVar=out
      tmp15_hbx_last = mathLerpf(tmp15_hbx_last, out, 0.0625f);
      out = out - tmp15_hbx_last;
      

      _d[outIdx++] = out;
   } /* end loop frames */
} /* end calc() */
