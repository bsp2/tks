// ----
// ---- file   : CycleTemplateSelectionDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 11Jun2025
// ---- changed:
// ----
// ----
// ----

module MCycleTemplateSelectionDialog;

use namespace ui;


// <class.png>
class CycleTemplateSelectionDialog extends Dialog, ActionProvider {

   define String ACTION_OK;
   define String ACTION_CANCEL;

   protected XMLForm *xfm;

   protected TableView                *tv_sel;
   protected CycleTemplateSelectionTM *tm_sel;

   protected Button *bt_ok;
   protected Button *bt_cancel;

   protected ActionConsumer *recipient;

   protected StringArray *templates;  // base file names (w/o .cy suffix)


   // <ui_init.png>
   public method initCycleTemplateSelectionDialog() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("CycleTemplateSelectionDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      tm_sel <= new CycleTemplateSelectionTM;
      tm_sel.templates <= null;
      tm_sel.initTableModel();
      tv_sel.setTableModel(tm_sel);

      initWindow(xfm,
                 "Select template include",
                 100, 100,
                 300*UI.font_scaling, 400*UI.font_scaling
                 );

      return true;
   }

   // <method_get.png>
   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_OK, ACTION_CANCEL];
   }

   // <method_get.png>
   public virtual isPopup() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual isModal():boolean {
      return true;
   }

   // <method_get.png>
   public virtual isResizable() : boolean {
      return true;
   }

   // <ui_show.png>
   public method showCycleTemplateSelectionDialog(StringArray _templates, String _sTitle, String _sOkCaption, ActionConsumer _recipient) {

      templates <= deref _templates;
      tm_sel.templates <= templates;
      recipient <= _recipient;

      bt_ok.setCaption(_sOkCaption);

      tv_sel.tableModelChanged();

      setWindowTitle(_sTitle);

      show();
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {
      layers.add(tv_sel);
      layers.add(bt_ok);
      layers.add(bt_cancel);
   }

   // <ui_show.png>
   protected virtual preShow() {
      relayout();
      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      resizeAtLeastToMinimum();
      tv_sel.moveCursorToFirstRow();
      UI.SetKeyboardFocus(tv_sel);
   }

   // <method_get.png>
   public method getSelectedTemplates() : StringArray {
      local StringArray ret;
      if(templates.numElements > 0)
      {
         local IntArray rows = tm_sel.getSelectedRows();
         if(0 == rows.numElements)
            rows.add(tm_sel.getCursorIndex());

         int rowIdx;
         foreach rowIdx in rows
         {
            ret.add(templates.get(rowIdx));
         }
      }
      return deref ret;
   }

   // <ui_hide.png>
   public virtual hide() {

      if(UI.IsHiDPI())
         Utils.SaveGeometry(this, STConfig.cycle_templateselection_geo_hidpi);
      else
         Utils.SaveGeometry(this, STConfig.cycle_templateselection_geo_lodpi);

      Dialog::hide();
   }

   // <ui_handle.png>
   protected method handleCancel() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         Action ac <= Action.New(getProvidedActionAlias(ACTION_CANCEL), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <ui_handle.png>
   protected method handleOk() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         Action ac <= Action.New(getProvidedActionAlias(ACTION_OK), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <ui_kbd.png>
   public virtual onKey(Key _key) : boolean {
      switch(_key.pressed)
      {
         case VKEY_ESCAPE:
            handleCancel();
            return true;

         case VKEY_RETURN:
         case VKEY_SPACE:
            handleOk();
            return true;

         default:
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      // trace "xxx CycleTemplateSelectionDialog: got action name="+name;

      switch(acName)
      {
         case "ok":
            handleOk();
            break;

         case "cancel":
            handleCancel();
            break;
      }

      switch(@(_ac.getActionProvider()))
      {
         case @(tv_sel):
            if(TableView.ACTION_ROWCLICKED == acName)
            {
               handleOk();
            }
            else if(TableView.ACTION_ROWSELECTED == acName)
            {
            }
            return true;

         case @(bt_ok):
            handleOk();
            return true;

         case @(bt_cancel):
            handleCancel();
            return true;
      }

      return true;
   }

}
