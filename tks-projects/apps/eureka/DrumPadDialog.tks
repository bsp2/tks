// ----
// ---- file   : DrumPadDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2019-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 24Jul2019
// ---- changed: 25Jul2019, 03Mar2020, 01Jul2022, 04Oct2023, 30Oct2023, 22Mar2024
// ----
// ----
// ----

module MDrumPadDialog;

use namespace ui;
use namespace st2;

namespace st2;


// <class.png>
class DrumPadButton extends Button {
   DrumPadDialog *parent;
   int note_nr;

   // <ui_mouse.png>
   public virtual onMouseEnter(MouseEvent _ev) : boolean {
      local Integer io = note_nr;
      Global.Print("Pad \""+getCaption()+"\" note="+(MIDI.midi_notes.get(note_nr))+" ("+note_nr+" / $"+io.printf("%02x")+")");
      parent.refocusDefault();
      // trace "xxx DrumPadButton: reqSz="+getRequiredSizeString();
      return Button::onMouseEnter(_ev);
   }
}

// <class.png>
class DrumPadDialog extends Dialog {

   protected XMLForm *xfm;

   protected LayerSwitch *ls_layout;
   protected ComboBox    *cm_layout;
   protected ComboBox    *cm_mode;

   protected DrumPadButton*[] pad_buttons_8x2_a;   // 16 button refs
   protected DrumPadButton*[] pad_buttons_8x2_b;   // 16 button refs
   protected DrumPadButton*[] pad_buttons_4x4_a;   // 16 button refs
   protected DrumPadButton*[] pad_buttons_4x4_b;   // 16 button refs
   protected DrumPadButton*[] pad_buttons_3x4_a;   // 12 button refs
   protected DrumPadButton*[] pad_buttons_3x4_b;   // 12 button refs
   protected DrumPadButton*[] pad_buttons_4x3;     // 12 button refs
   protected DrumPadButton*[] pad_buttons_4x2_a;   //  8 button refs
   protected DrumPadButton*[] pad_buttons_4x2_b;   //  8 button refs


   // <ui_init.png>
   public method initDrumPadDialog() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("DrumPadDialog.xfm");
      if(null == xfm)
      {
         trace "[---] initDrumPadDialog() failed";
         return false;
      }

      xfm.autoResolveIds(this);

      // Resolve 8x2 and 4x4 buttons
      int btIdx = 0;
      DrumPadButton *bt;
      String sCaptionSizeReserve <= "NOISE";///"NOISE\nNOISE";
      loop(16)
      {
         bt <= xfm.findLayerById("bt_8x2_a_"+btIdx);
         bt.parent <= this;
         bt.setCaptionSizeReserve(sCaptionSizeReserve);
         bt.setCaption(STConfig.drum_pad_names.get(STConfig.drum_pad_indices_8x2_a.get(btIdx)));
         bt.note_nr = STConfig.drum_pad_notes_8x2_a.get(btIdx);
         bt.setEnableKbdFocusOnMouse(false);
         pad_buttons_8x2_a.add(bt);

         bt <= xfm.findLayerById("bt_8x2_b_"+btIdx);
         bt.parent <= this;
         bt.setCaptionSizeReserve(sCaptionSizeReserve);
         bt.setCaption(STConfig.drum_pad_names.get(STConfig.drum_pad_indices_8x2_b.get(btIdx)));
         bt.note_nr = STConfig.drum_pad_notes_8x2_b.get(btIdx);
         bt.setEnableKbdFocusOnMouse(false);
         pad_buttons_8x2_b.add(bt);

         bt <= xfm.findLayerById("bt_4x4_a_"+btIdx);
         bt.parent <= this;
         bt.setCaptionSizeReserve(sCaptionSizeReserve);
         bt.setCaption(STConfig.drum_pad_names.get(STConfig.drum_pad_indices_4x4_a.get(btIdx)));
         bt.note_nr = STConfig.drum_pad_notes_4x4_a.get(btIdx);
         bt.setEnableKbdFocusOnMouse(false);
         pad_buttons_4x4_a.add(bt);

         bt <= xfm.findLayerById("bt_4x4_b_"+btIdx);
         bt.parent <= this;
         bt.setCaptionSizeReserve(sCaptionSizeReserve);
         bt.setCaption(STConfig.drum_pad_names.get(STConfig.drum_pad_indices_4x4_b.get(btIdx)));
         bt.note_nr = STConfig.drum_pad_notes_4x4_b.get(btIdx);
         bt.setEnableKbdFocusOnMouse(false);
         pad_buttons_4x4_b.add(bt);

         btIdx++;
      }

      // Resolve 3x4 and 4x3 buttons
      btIdx = 0;
      loop(12)
      {
         bt <= xfm.findLayerById("bt_3x4_a_"+btIdx);
         bt.parent <= this;
         bt.setCaptionSizeReserve(sCaptionSizeReserve);
         bt.setCaption(STConfig.drum_pad_names.get(STConfig.drum_pad_indices_3x4_a.get(btIdx)));
         bt.note_nr = STConfig.drum_pad_notes_3x4_a.get(btIdx);
         bt.setEnableKbdFocusOnMouse(false);
         pad_buttons_3x4_a.add(bt);

         bt <= xfm.findLayerById("bt_3x4_b_"+btIdx);
         bt.parent <= this;
         bt.setCaptionSizeReserve(sCaptionSizeReserve);
         bt.setCaption(STConfig.drum_pad_names.get(STConfig.drum_pad_indices_3x4_b.get(btIdx)));
         bt.note_nr = STConfig.drum_pad_notes_3x4_b.get(btIdx);
         bt.setEnableKbdFocusOnMouse(false);
         pad_buttons_3x4_b.add(bt);

         bt <= xfm.findLayerById("bt_4x3_"+btIdx);
         bt.parent <= this;
         bt.setCaptionSizeReserve(sCaptionSizeReserve);
         bt.setCaption(STConfig.drum_pad_names.get(STConfig.drum_pad_indices_4x3.get(btIdx)));
         bt.note_nr = STConfig.drum_pad_notes_4x3.get(btIdx);
         bt.setEnableKbdFocusOnMouse(false);
         pad_buttons_4x3.add(bt);

         btIdx++;
      }

      // Resolve 4x2 buttons
      btIdx = 0;
      loop(8)
      {
         bt <= xfm.findLayerById("bt_4x2_a_"+btIdx);
         bt.parent <= this;
         bt.setCaptionSizeReserve(sCaptionSizeReserve);
         bt.setCaption(STConfig.drum_pad_names.get(STConfig.drum_pad_indices_4x2_a.get(btIdx)));
         bt.note_nr = STConfig.drum_pad_notes_4x2_a.get(btIdx);
         bt.setEnableKbdFocusOnMouse(false);
         pad_buttons_4x2_a.add(bt);

         bt <= xfm.findLayerById("bt_4x2_b_"+btIdx);
         bt.parent <= this;
         bt.setCaptionSizeReserve(sCaptionSizeReserve);
         bt.setCaption(STConfig.drum_pad_names.get(STConfig.drum_pad_indices_4x2_b.get(btIdx)));
         bt.note_nr = STConfig.drum_pad_notes_4x2_b.get(btIdx);
         bt.setEnableKbdFocusOnMouse(false);
         pad_buttons_4x2_b.add(bt);

         btIdx++;
      }

      cm_layout.setSelectedOption(STConfig.default_drum_pad_layout);

      initWindow(xfm,
                 "Drum Pad Mapper",
                 263, 82,
                 770, 364
                 );

      return true;
   }

   // <method_get.png>
   public virtual isModal():boolean {
      return false;
   }

   // <method_get.png>
   public virtual isResizable() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual isPopup() : boolean {
      return true;
   }

   // <ui_kbd.png>
   public virtual isEditable() : boolean {
      // => wantKeyboardFocus()
      return true;
   }

   // <ui_mouse.png>
   public virtual onMouseEnter(MouseEvent _ev) {
      refocusDefault();
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {
      layers.add(cm_layout);
      layers.add(cm_mode);

      int btIdx;

      switch(cm_layout.getSelectedOption())
      {
         case 0: // 8x2
            layers.joinRR(layers, pad_buttons_8x2_a);
            layers.joinRR(layers, pad_buttons_8x2_b);
            break;

         case 1: // 4x4
            layers.joinRR(layers, pad_buttons_4x4_a);
            layers.joinRR(layers, pad_buttons_4x4_b);
            break;

         case 2: // 3x4
            layers.joinRR(layers, pad_buttons_3x4_a);
            layers.joinRR(layers, pad_buttons_3x4_b);
            break;

         case 3: // 4x3
            layers.joinRR(layers, pad_buttons_4x3);
            break;

         case 4: // 4x2
            layers.joinRR(layers, pad_buttons_4x2_a);
            layers.joinRR(layers, pad_buttons_4x2_b);
            break;
      }
   }

   // <ui_kbd.png>
   public virtual getTabCycleOverrides() : PointerArray {
      PointerArray layers; layers.empty();
      addTabCycleOverrides(layers);
      return layers;
   }

   // <ui_show.png>
   public method showDrumPadDialog() {

      handleLayoutChanged(true/*bQuiet*/);

      recursiveBuildTabCycleLists();

      show();
   }

   // <ui_show.png>
   public virtual postShow() {
      Dialog::postShow();

      relayout();
      resizeToMinimum();

      // to prevent accidental reassignment
      cm_mode.setSelectedOption(0);

      highlightSelectedZonePads();

      recursiveSetEnableCursorKeyTabCycling(false);

      refocusDefault();
   }

   // <ui_kbd.png>
   public method refocusDefault() {
      UI.SetKeyboardFocus(this);
   }

   // <ui_hide.png>
   public virtual hide() {
      Dialog::hide();
   }

   // <ui_handle.png>
   protected method handleLayoutChanged(boolean _bQuiet) {

      ls_layout.switchToLayerNr(cm_layout.getSelectedOption());

      resizeToMinimum();

      recursiveSetEnableCursorKeyTabCycling(false);

      if(!_bQuiet)
         Global.Print("Layout is \""+cm_layout.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleModeChanged() {
      Global.Print("Mode is \""+cm_layout.getSelectedOptionName()+"\"");
   }

   // <ui_handle.png>
   protected method handlePadClick(int _btIdx, IntArray _padIndices, IntArray _padNotes) {
      // trace "xxx handlePadClick: btIdx="+_btIdx+" padIndices="+#(_padIndices)+" padNotes="+#(_padNotes);
      Sample sample <= root_form.pg_sample.getSelectedSample();
      if(null != sample)
      {
         if(sample.getNumZones() > 0)
         {
            StSample *s;
            int padNote = _padNotes.get(_btIdx);
            StRange *range;
            local PointerArray zones;
            PageSample pgSample <= root_form.pg_sample;

            switch(cm_mode.getSelectedOption())
            {
               case 0:  // Select+Play
                  s <= sample.sample_bank.firstSample;

                  while(null != s)
                  {
                     range <= s.getKeyRange();

                     if(null != range)
                     {
                        if(range.lo <= padNote <= range.hi)
                           zones.add(s);
                     }

                     s <= s.next;
                  }

                  pgSample.selectZones(sample, zones, true/*bAllowSelectNone*/);
                  pgSample.playZones(zones);
                  Global.Print("Select "+zones.numElements+" pad zone"+Utils.GetPluralString(zones.numElements)+" by pad note "+(MIDI.midi_notes.get(padNote))+" \""+(STConfig.drum_pad_names.get(_padIndices.get(_btIdx)))+"\"");
                  break;

               case 1:  // Assign next
                  zones <= pgSample.getSelectedZones();
                  if(zones.numElements > 0)
                  {
                     local PointerArray zonesFirst; zonesFirst.add(zones.get(0));
                     sample.assignPadZones(zonesFirst, padNote);
                     pgSample.tv_zones.tableModelChanged();
                     Global.Print("Assign next zone"+Utils.GetPluralString(zones.numElements)+" to pad note "+(MIDI.midi_notes.get(padNote))+" \""+(STConfig.drum_pad_names.get(_padIndices.get(_btIdx)))+"\"");
                     zones.delete(0);
                     if(0 != zones.numElements)
                        pgSample.selectZones(sample, zones, true/*bAllowSelectNone*/);
                     else
                        pgSample.tv_zones.moveCursorToNextRow();
                     pgSample.playZones(zonesFirst);
                  }
                  break;

               case 2:  // Assign next 3
                  zones <= pgSample.getSelectedZones();
                  if(zones.numElements >= 3)
                  {
                     local PointerArray zones3;
                     zones3.add(zones.get(0));
                     zones3.add(zones.get(1));
                     zones3.add(zones.get(2));
                     sample.assignPadZones(zones3, padNote);
                     pgSample.tv_zones.tableModelChanged();
                     Global.Print("Assign next 3 zones to pad note "+(MIDI.midi_notes.get(padNote))+" \""+(STConfig.drum_pad_names.get(_padIndices.get(_btIdx)))+"\"");
                     zones.delete(0);
                     zones.delete(0);
                     zones.delete(0);
                     if(0 != zones.numElements)
                        pgSample.selectZones(sample, zones, true/*bAllowSelectNone*/);
                     else
                        pgSample.tv_zones.moveCursorToNextRow();
                     pgSample.playZones(zones3);
                  }
                  break;

               case 3:  // Assign all selected
                  zones <= pgSample.getSelectedZones();
                  if(zones.numElements > 0)
                  {
                     sample.assignPadZones(zones, padNote);
                     pgSample.tv_zones.tableModelChanged();
                     Global.Print("Assign "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+" to pad note "+(MIDI.midi_notes.get(padNote))+" \""+(STConfig.drum_pad_names.get(_padIndices.get(_btIdx)))+"\"");
                     pgSample.playZones(zones);
                  }
                  break;

            }
         }
         else
         {
            Global.Warning("Sample has no zones");
         }
      }
      else
      {
         Global.Warning("No sample selected");
      }

      highlightSelectedZonePads();
   }

   // <ui_update.png>
   protected method highlightSelectedButtonsBG(IntArray _btIndices, PointerArray _padButtons) {
      int i = 0;
      loop(_padButtons.numElements)
      {
         Button bt <= _padButtons.get(i);

         if(_btIndices.contains(i))
         {
            bt.setBackgroundTint(#20ffffff);
            bt.setFontByName("big8");
         }
         else
         {
            bt.setBackgroundTint(0);
            bt.setFontByName(UIConstants.DEFAULT_FONT_NAME_LABEL);
         }

         i++;
      }
   }

   // <ui_update.png>
   protected method highlightSelectedButtonsFG(IntArray _btIndices, PointerArray _padButtons) {
      int i = 0;
      loop(_padButtons.numElements)
      {
         Button bt <= _padButtons.get(i);

         if(_btIndices.contains(i))
         {
            if(0 == bt.getBackgroundTint())
               bt.setBackgroundTint(#0cffffff);
            bt.setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_BUTTON_CAPTION_FG));
         }
         else
         {
            bt.setForegroundColor(lnfGetTintedColor(LookAndFeel.COLOR_BUTTON_CAPTION_FG, #80000000));
         }

         i++;
      }
   }

   // <method_find.png>
   protected method findSelectedBtIndices2(Sample _sample, IntArray _selZones, IntArray _ret, IntArray _padIndices, IntArray _padNotes) {
      if(null != _sample)
      {
         if(_selZones.numElements > 0)
         {
            int padNoteIdx = 0;
            loop(_padNotes.numElements)
            {
               int padNote = _padNotes.get(padNoteIdx);
               int zoneIdx;
               foreach zoneIdx in _selZones
               {
                  StSample s <= _sample.sample_bank.getSampleByIdx(zoneIdx);
                  StRange range <= s.getKeyRange();
                  if(null != range)
                  {
                     if((range.lo > 0) || (range.hi < 127))
                     {
                        if(range.lo <= padNote <= range.hi)
                        {
                           if(!_ret.contains(padNoteIdx))
                              _ret.add(padNoteIdx);
                        }
                     }
                  }
               }

               padNoteIdx++;
            }
         }
      }
   }

   // <method_find.png>
   protected method findSelectedBtIndices(Sample _sample, IntArray _ret, IntArray _padIndices, IntArray _padNotes) {
      _ret.empty();
      if(null != _sample)
      {
         local IntArray selZones <= root_form.pg_sample.tm_zones.getSelectedRowsIncludingCursor();
         findSelectedBtIndices2(_sample, selZones, _ret, _padIndices, _padNotes);
      }
   }

   // <method_find.png>
   protected method findSelectedBtIndicesAllZones(Sample _sample, IntArray _ret, IntArray _padIndices, IntArray _padNotes) {
      _ret.empty();
      if(null != _sample)
      {
         local IntArray selZones;
         selZones.identity(_sample.getNumZones());
         findSelectedBtIndices2(_sample, selZones, _ret, _padIndices, _padNotes);
      }
   }

   // <ui_update.png>
   public method highlightSelectedZonePads() {
      Sample sample <= root_form.pg_sample.getSelectedSample();
      local IntArray selectedBtIndices;
      switch(cm_layout.getSelectedOption())
      {
         case 0: // 8x2
            // BG (selected zones)
            findSelectedBtIndices(sample, selectedBtIndices,
                                  STConfig.drum_pad_indices_8x2_a, STConfig.drum_pad_notes_8x2_a
                                  );
            highlightSelectedButtonsBG(selectedBtIndices, pad_buttons_8x2_a);

            findSelectedBtIndices(sample, selectedBtIndices,
                                  STConfig.drum_pad_indices_8x2_b, STConfig.drum_pad_notes_8x2_b
                                  );
            highlightSelectedButtonsBG(selectedBtIndices, pad_buttons_8x2_b);

            // FG
            findSelectedBtIndicesAllZones(sample, selectedBtIndices,
                                          STConfig.drum_pad_indices_8x2_a, STConfig.drum_pad_notes_8x2_a
                                          );
            highlightSelectedButtonsFG(selectedBtIndices, pad_buttons_8x2_a);

            findSelectedBtIndicesAllZones(sample, selectedBtIndices,
                                          STConfig.drum_pad_indices_8x2_b, STConfig.drum_pad_notes_8x2_b
                                          );
            highlightSelectedButtonsFG(selectedBtIndices, pad_buttons_8x2_b);
            break;

         case 1: // 4x4
            // BG (selected zones)
            findSelectedBtIndices(sample, selectedBtIndices,
                                  STConfig.drum_pad_indices_4x4_a, STConfig.drum_pad_notes_4x4_a
                                  );
            highlightSelectedButtonsBG(selectedBtIndices, pad_buttons_4x4_a);

            findSelectedBtIndices(sample, selectedBtIndices,
                                  STConfig.drum_pad_indices_4x4_b, STConfig.drum_pad_notes_4x4_b
                                  );
            highlightSelectedButtonsBG(selectedBtIndices, pad_buttons_4x4_b);

            // FG
            findSelectedBtIndicesAllZones(sample, selectedBtIndices,
                                          STConfig.drum_pad_indices_4x4_a, STConfig.drum_pad_notes_4x4_a
                                          );
            highlightSelectedButtonsFG(selectedBtIndices, pad_buttons_4x4_a);

            findSelectedBtIndicesAllZones(sample, selectedBtIndices,
                                          STConfig.drum_pad_indices_4x4_b, STConfig.drum_pad_notes_4x4_b
                                          );
            highlightSelectedButtonsFG(selectedBtIndices, pad_buttons_4x4_b);
            break;

         case 2: // 3x4
            // BG (selected zones)
            findSelectedBtIndices(sample, selectedBtIndices,
                                  STConfig.drum_pad_indices_3x4_a, STConfig.drum_pad_notes_3x4_a
                                  );
            highlightSelectedButtonsBG(selectedBtIndices, pad_buttons_3x4_a);

            findSelectedBtIndices(sample, selectedBtIndices,
                                  STConfig.drum_pad_indices_3x4_b, STConfig.drum_pad_notes_3x4_b
                                  );
            highlightSelectedButtonsBG(selectedBtIndices, pad_buttons_3x4_b);

            // FG
            findSelectedBtIndicesAllZones(sample, selectedBtIndices,
                                          STConfig.drum_pad_indices_3x4_a, STConfig.drum_pad_notes_3x4_a
                                          );
            highlightSelectedButtonsFG(selectedBtIndices, pad_buttons_3x4_a);

            findSelectedBtIndicesAllZones(sample, selectedBtIndices,
                                          STConfig.drum_pad_indices_3x4_b, STConfig.drum_pad_notes_3x4_b
                                          );
            highlightSelectedButtonsFG(selectedBtIndices, pad_buttons_3x4_b);
            break;

         case 3: // 4x3
            // BG (selected zones)
            findSelectedBtIndices(sample, selectedBtIndices,
                                  STConfig.drum_pad_indices_4x3, STConfig.drum_pad_notes_4x3
                                  );
            highlightSelectedButtonsBG(selectedBtIndices, pad_buttons_4x3);

            // FG
            findSelectedBtIndicesAllZones(sample, selectedBtIndices,
                                          STConfig.drum_pad_indices_4x3, STConfig.drum_pad_notes_4x3
                                          );
            highlightSelectedButtonsFG(selectedBtIndices, pad_buttons_4x3);
            break;

         case 4: // 4x2
            // BG (selected zones)
            findSelectedBtIndices(sample, selectedBtIndices,
                                  STConfig.drum_pad_indices_4x2_a, STConfig.drum_pad_notes_4x2_a
                                  );
            highlightSelectedButtonsBG(selectedBtIndices, pad_buttons_4x2_a);

            findSelectedBtIndices(sample, selectedBtIndices,
                                  STConfig.drum_pad_indices_4x2_b, STConfig.drum_pad_notes_4x2_b
                                  );
            highlightSelectedButtonsBG(selectedBtIndices, pad_buttons_4x2_b);

            // FG
            findSelectedBtIndicesAllZones(sample, selectedBtIndices,
                                          STConfig.drum_pad_indices_4x2_a, STConfig.drum_pad_notes_4x2_a
                                          );
            highlightSelectedButtonsFG(selectedBtIndices, pad_buttons_4x2_a);

            findSelectedBtIndicesAllZones(sample, selectedBtIndices,
                                          STConfig.drum_pad_indices_4x2_b, STConfig.drum_pad_notes_4x2_b
                                          );
            highlightSelectedButtonsFG(selectedBtIndices, pad_buttons_4x2_b);
            break;
      }
      ls_layout.redraw();
   }

   // <ui_update.png>
   protected method highlightLastPlayedPadButtons(IntArray _notes, PointerArray _buttons, IntArray _padNotes) {
      int note;
      int padIdx = 0;
      foreach note in _padNotes
      {
         Button bt <= _buttons.get(padIdx++);
         if(_notes.contains(note))
            bt.setTint3AndRedraw(#2000ffff);  // redraw when changed
         else
            bt.setTint3AndRedraw(0);  // redraw when changed
      }
   }

   // <ui_update.png>
   public =replay= method highlightLastPlayedPads(IntArray _notes) {
      switch(cm_layout.getSelectedOption())
      {
         case 0: // 8x2
            highlightLastPlayedPadButtons(_notes, pad_buttons_8x2_a, STConfig.drum_pad_notes_8x2_a);
            highlightLastPlayedPadButtons(_notes, pad_buttons_8x2_b, STConfig.drum_pad_notes_8x2_b);
            break;

         case 1: // 4x4
            highlightLastPlayedPadButtons(_notes, pad_buttons_4x4_a, STConfig.drum_pad_notes_4x4_a);
            highlightLastPlayedPadButtons(_notes, pad_buttons_4x4_b, STConfig.drum_pad_notes_4x4_b);
            break;

         case 2: // 3x4
            highlightLastPlayedPadButtons(_notes, pad_buttons_3x4_a, STConfig.drum_pad_notes_3x4_a);
            highlightLastPlayedPadButtons(_notes, pad_buttons_3x4_b, STConfig.drum_pad_notes_3x4_b);
            break;

         case 3: // 4x3
            highlightLastPlayedPadButtons(_notes, pad_buttons_4x3, STConfig.drum_pad_notes_4x3);
            break;

         case 4: // 4x2
            highlightLastPlayedPadButtons(_notes, pad_buttons_4x2_a, STConfig.drum_pad_notes_4x2_a);
            highlightLastPlayedPadButtons(_notes, pad_buttons_4x2_b, STConfig.drum_pad_notes_4x2_b);
            break;
      }

   }

   // <ui_kbd.png>
   public virtual onTriadKey(Key _k) : boolean {
      switch(_k.pressed)
      {
         case 'c':
            hide();
            return true;
      }
   }

   // <ui_kbd.png>
   public virtual onTriadKeyTimeout() {
      Dialogs.ShowTriadKeyHelpDialog("lctrl-x ..",
"
          c  :  Close dialog
"
                                    ,
                                    this);
      return true;
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      // trace "xxx DrumPadDialog::onKey: pressed="+_k.pressed+" DOWN="+VKEY_DOWN;
      PageSample pgSample <= root_form.pg_sample;

      switch(_k.pressed)
      {
         case VKEY_ESCAPE:
            hide();
            return true;

         case VKEY_F10:
            pgSample.toggleDrumPadDialog();
            return true;

         case '0':
            if(_k.modCtrl())
            {
               pgSample.toggleDrumPadDialog();
               return true;
            }
            break;

         case '1':
         case 'q':
            cm_mode.setSelectedOptionAction(0);
            refocusDefault();
            return true;

         case '2':
         case 'w':
            cm_mode.setSelectedOptionAction(1);
            refocusDefault();
            return true;

         case '3':
         case 'e':
            cm_mode.setSelectedOptionAction(2);
            refocusDefault();
            return true;

         case '4':
         case 'r':
            cm_mode.setSelectedOptionAction(3);
            refocusDefault();
            return true;

         case VKEY_UP:
            pgSample.tv_zones.moveCursorToPreviousRow();
            refocusDefault();
            return true;

         case VKEY_DOWN:
            pgSample.tv_zones.moveCursorToNextRow();
            refocusDefault();
            return true;

         case VKEY_HOME:
            pgSample.tv_zones.moveCursorToFirstRow();
            refocusDefault();
            return true;

         case VKEY_END:
            pgSample.tv_zones.moveCursorToLastRow();
            refocusDefault();
            return true;

         case 'a':
            if(_k.modCtrl())
            {
               pgSample.tv_zones.selectAll();
               return true;
            }
            break;
      }

      return Dialog::onKey(_k);
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      if(ap instanceof Button)
      {
         int btIdx;
         switch(cm_layout.getSelectedOption())
         {
            case 0: // 8x2
               btIdx = pad_buttons_8x2_a.indexOfPointer(ap, 0);
               if(-1 != btIdx)
               {
                  handlePadClick(btIdx, STConfig.drum_pad_indices_8x2_a, STConfig.drum_pad_notes_8x2_a);
                  return true;
               }
               else
               {
                  btIdx = pad_buttons_8x2_b.indexOfPointer(ap, 0);
                  if(-1 != btIdx)
                  {
                     handlePadClick(btIdx, STConfig.drum_pad_indices_8x2_b, STConfig.drum_pad_notes_8x2_b);
                     return true;
                  }
               }
               break;

            case 1: // 4x4
               btIdx = pad_buttons_4x4_a.indexOfPointer(ap, 0);
               if(-1 != btIdx)
               {
                  handlePadClick(btIdx, STConfig.drum_pad_indices_4x4_a, STConfig.drum_pad_notes_4x4_a);
                  return true;
               }
               else
               {
                  btIdx = pad_buttons_4x4_b.indexOfPointer(ap, 0);
                  if(-1 != btIdx)
                  {
                     handlePadClick(btIdx, STConfig.drum_pad_indices_4x4_b, STConfig.drum_pad_notes_4x4_b);
                     return true;
                  }
               }
               break;

            case 2: // 3x4
               btIdx = pad_buttons_3x4_a.indexOfPointer(ap, 0);
               if(-1 != btIdx)
               {
                  handlePadClick(btIdx, STConfig.drum_pad_indices_3x4_a, STConfig.drum_pad_notes_3x4_a);
                  return true;
               }
               else
               {
                  btIdx = pad_buttons_3x4_b.indexOfPointer(ap, 0);
                  if(-1 != btIdx)
                  {
                     handlePadClick(btIdx, STConfig.drum_pad_indices_3x4_b, STConfig.drum_pad_notes_3x4_b);
                     return true;
                  }
               }
               break;

            case 3: // 4x3
               btIdx = pad_buttons_4x3.indexOfPointer(ap, 0);
               if(-1 != btIdx)
               {
                  handlePadClick(btIdx, STConfig.drum_pad_indices_4x3, STConfig.drum_pad_notes_4x3);
                  return true;
               }
               break;

            case 4: // 4x2
               btIdx = pad_buttons_4x2_a.indexOfPointer(ap, 0);
               if(-1 != btIdx)
               {
                  handlePadClick(btIdx, STConfig.drum_pad_indices_4x2_a, STConfig.drum_pad_notes_4x2_a);
                  return true;
               }
               else
               {
                  btIdx = pad_buttons_4x2_b.indexOfPointer(ap, 0);
                  if(-1 != btIdx)
                  {
                     handlePadClick(btIdx, STConfig.drum_pad_indices_4x2_b, STConfig.drum_pad_notes_4x2_b);
                     return true;
                  }
               }
               break;
         }
      }

      switch(@(ap))
      {
         case @(cm_layout):
            handleLayoutChanged(false/*bQuiet*/);
            highlightSelectedZonePads();
            return true;

         case @(cm_mode):
            handleModeChanged();
            refocusDefault();
            return true;
      }

      return Dialog::consumeAction(_action);
   }

}
