// ----
// ---- file   : global.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- changed: 22Jan2018, 24Jan2018, 25Jan2018, 26Jan2018, 27Jan2018, 28Jan2018, 29Jan2018
// ----          02Feb2018, 06Feb2018, 09Feb2018, 16Feb2018, 25Feb2018, 28Feb2018, 01Mar2018
// ----          03Mar2018, 17Mar2018, 23Mar2018, 26Mar2018, 30Mar2018, 03Apr2018, 21May2018
// ----          30May2018, 02Jun2018, 22Jun2018, 29Jun2018, 21Jul2018, 22Jul2018, 02Dec2018
// ----          07Dec2018, 15Dec2018, 16Dec2018, 29Dec2018, 30Dec2018, 02Jan2019, 05Jan2019
// ----          16Jan2019, 01Mar2019, 30Mar2019, 23Apr2019, 05May2019, 26May2019, 13Jul2019
// ----          26Aug2019, 14Feb2020, 21Feb2020, 23Feb2020, 27Feb2020, 14May2020, 17May2020
// ----          19May2020, 24May2020, 04Jun2020, 18Aug2020, 20Aug2020, 28Aug2020, 29Aug2020
// ----          12Sep2020, 15Oct2020, 27Nov2020, 09Feb2021, 11Apr2021, 12Apr2021, 15Apr2021
// ----          08May2021, 13May2021, 22May2021, 23May2021, 31May2021, 02Jun2021, 26Jun2021
// ----          17Jul2021, 18Jul2021, 25Jul2021, 28Jul2021, 13Sep2021, 01Oct2021, 15Oct2021
// ----          24Oct2021, 28Oct2021, 31Oct2021, 13Nov2021, 21Nov2021, 12Dec2021, 19Dec2021
// ----          20Dec2021, 23Dec2021, 31Dec2021, 09Jan2022, 16Jan2022, 05Feb2022, 13Feb2022
// ----          23Feb2022, 27Feb2022, 18Mar2022, 20Mar2022, 01Apr2022, 03Apr2022, 08Apr2022
// ----          21Apr2022, 23Apr2022, 24Apr2022, 22Jun2022, 24Jun2022, 08Jul2022, 16Jul2022
// ----          22Jul2022, 13Aug2022, 20Nov2022, 25Nov2022, 10Dec2022, 16Dec2022, 23Dec2022
// ----          06Feb2023, 12Feb2023, 19Feb2023, 26Feb2023, 09Mar2023, 15Mar2023, 18Mar2023
// ----          31Mar2023, 01Apr2023, 12Apr2023, 16Apr2023, 21Apr2023, 04May2023, 29Jul2023
// ----          03Aug2023, 05Aug2023, 13Aug2023, 18Aug2023, 22Sep2023, 02Oct2023, 08Oct2023
// ----          03Nov2023, 04Nov2023, 05Nov2023, 18Nov2023, 02Dec2023, 14Dec2023, 16Dec2023
// ----          06Jan2024, 12Jan2024, 18Jan2024, 11Apr2024, 25Apr2024, 03Jul2024, 07Jul2024
// ----          23Jul2024, 02Aug2024, 09Aug2024, 12Aug2024, 22Aug2024, 15Sep2024, 23Sep2024
// ----          27Sep2024, 29Sep2024, 02Oct2024, 03Oct2024, 05Oct2024, 12Nov2024, 22Nov2024
// ----          23Nov2024, 24Nov2024, 28Nov2024, 30Nov2024, 05Dec2024, 13Dec2024, 23Dec2024
// ----          01Jan2025, 11Jan2025, 08Mar2025, 14Mar2025, 29May2025, 04Jun2025, 05Jun2025
// ----          12Jun2025, 14Jun2025, 21Jun2025
// ----
// ----
// ----

module MGlobal;

use namespace ui;
use namespace st2;


// <class.png>
class Global {

   define String VERSION_STRING = "Eureka - v2025.06.21";

   define String PROJECT_FILE_SUFFIX                  = ".epr";
   define String PATCH_FILE_SUFFIX                    = ".epa";
   define String SAMPLE_FILE_SUFFIX                   = ".esa";
   define String SAMPLE_PAD_KIT_FILE_SUFFIX           = ".edk";   // drum kits
   define String ASSIMIL8OR_FILE_SUFFIX               = ".yml";
   define String CURVE_FILE_SUFFIX                    = ".curve";
   define String MOD_FILE_PREFIX                      = "mod.";
   define String STFX_PRESET_FILE_SUFFIX              = ".stfx";  // single STFX plugin preset
   define String VOICEPLUGIN_CHAIN_PRESET_FILE_SUFFIX = ".evp";   // STFX plugin chains (SamplePluginForm)
   define String FMSTACK_PRESET_FILE_SUFFIX           = ".fms";
   define String TUN_FILE_SUFFIX                      = ".tun";
   define String SCL_FILE_SUFFIX                      = ".scl";

   static boolean b_initializing;

   static boolean b_loading; // true=skip some UI messages while loading a project

   static InfoDialog *dlg_audio_error;
   static Dialog_Quit dlg_quit;

   static String project_file_load_suggested_file = "";
   static String project_file_save_suggested_file = "";
   static StringArray project_file_filter_names = [ "Eureka project (*.epr)" ];
   static StringArray project_file_filter_strings = [ "*.epr" ];

   static StringArray patch_file_filter_names = [ "Eureka patch (*.epa)" ];
   static StringArray patch_file_filter_strings = [ "*.epa" ];

   static StringArray *curve_preset_filenames;

   // relative to STConfig.tuning_table_rootpath.
   //  (note) see LazyScanTuningTablePresets()
   static StringArray *tuning_table_pathnames;
   static StringArray *tuning_table_opt_long;
   static StringArray *tuning_table_opt_short;  // abbreviated, w/o dirnames

   static AppLookAndFeel_Dark *app_lnf_dark;

   static StringArray default_track_color_names;

   static st2::StatusBarLogger logger;

   static BezierEditState *bezier_clipboard_state;


   // <init.png>
   static Init() : boolean {
      Integer io;

      UI.SetLookAndFeel(LookAndFeel.DARK);

      app_lnf_dark  <= new AppLookAndFeel_Dark;
      app_lnf_dark.initAppLookAndFeel();

      app_lnf <= app_lnf_dark;

      DebugPrintCPUInfo();

      if(!STConfig.b_ignore_thread_affinity)
      {
         Debug("Setting process affinity mask to \""+STConfig.process_affinity_mask+"\"");
         Thread.SetProcessAffinityMaskByString(STConfig.process_affinity_mask);

         Thread uiThread <= GetCurrentThread();
         uiThread.setAffinityMaskByString(STConfig.ui_thread_affinity_mask);
      }

      b_initializing = true;

      // Set dummy project to prevent crashes during startup.
      //  (todo) should be fixed properly, though
      current_project <= new Project;

      // Debug-print list of MIDI devices to console (for configuration)
      MIDI.Init();
      MIDI.EnumerateMIDIDevices();

      if(STConfig.b_enable_midi)
      {
         // Initialize SysEx in/out devices
         SysEx.Init();

         MIDI.UpdateOutDeviceNames();

         // Init MIDI input devices
         if(!MIDI.InitMIDIInDevices())
         {
            // (note) do not exit if a midi device is not present
            // // return false;
         }

         MIDI.UpdateInDeviceNames();

         // // trace "xxx MIDI.nrpn_names="+#(MIDI.nrpn_names);
      }

      // Initialize MIDI synth profiles / forms

      // Initialize waveforms/samples
      Waveforms.Init();

      // Default track colors
      InitTrackColors();

      // Parse main screen form
      root_form <= new RootForm;
      if(!root_form.initPakFile("RootForm.xfm"))
      {
         die "failed to parse RootForm.xfm";
      }

      // Load/parse XFMs
      if(!root_form.init())
      {
         trace "[---] RootForm::init() failed\n";
         return false;
      }

      // Initialize project
      InitProject();

      // Scan samples
      Samples.InitSampleCache();

      // Scan (global) voice plugins
      if(STConfig.b_voice_plugins)
      {
         VoicePlugins.RescanVoicePlugins(true/*bRescanGlobal*/, null/*patchPluginIds*/);
      }

      // Init CLAP plugins
      CLAP.Init();

      // Init/scan VST2 plugins
      VST2.Init();

      if(STConfig.b_enable_audio)
      {
         Audio.Init();
         Audio.ListDevices();
         Audio.TrySelectPreferredDevice();
      }

      VST2Plugin.SetEnableHideVSTEditorWhenClosed(STConfig.b_hide_vst_window_when_closed);

      replay.init();

      if(!Dialogs.Init())
      {
         trace "[---] Global::Init: failed to initialize dialogs";
         return false;
      }

      PrintMS("All right.", 2000);

      // TestProjectStuff();

      return true;
   }

   // <method.png>
   public static DebugPrintCPUInfo() {
      int num = Thread.GetNumCPUCores();
      int idx = 0;
      loop(num)
      {
         trace "[dbg] cpuinfo: core["+idx+"] p:"+Thread.IsPerformanceCPUCore(idx)+" e:"+Thread.IsEfficiencyCPUCore(idx)+" ht:"+Thread.IsCPUCoreShared(idx);
         idx++;
      }
   }

   // <method.png>
   static TestProjectStuff() {
      if(1)
      {
         InitTestProject();

         String saveFile = "";
         // saveFile = "debug.epr";
         // saveFile = "debug_dexed_16x128.epr";
         // saveFile = "debug_sparkverb_16x64.epr";
         // saveFile = "debug_littleplate_16x8.epr";
         // saveFile = "debug_ace_16x4.epr";
         // saveFile = "debug_ace_16x16.epr";
         // saveFile = "debug_zebrahz_16x15.epr";
         // saveFile = "debug_pianoteq6_16x3.epr";
         // saveFile = "debug_saturn_16x48.epr";
         // saveFile = "debug_valhalla_plate_16x40.epr";
         // saveFile = "debug_nave_16x16.epr";
         // saveFile = "debug_softube_tape_16x16.epr";
         // saveFile = "debug_outerspace_16x3.epr";
         // saveFile = "debug_multiply_16x16.epr";
         // saveFile = "debug_adaptiverb_16x2.epr";
         // saveFile = "debug_infinite_16x8.epr";
         // saveFile = "debug_hreverb_16x4.epr";
         //saveFile = "debug_codex_16x2.epr";
         // saveFile = "debug_tal_sampler_16x4.epr";
         // saveFile = "debug_renoise_16x2.epr";
         //saveFile = "debug_falcon_16x8.epr";
         // "debug_falcon_16x1.epr";

         if(!saveFile.isBlank())
         {
            // // saveFile = Utils.SubstitutePathVars(STConfig.project_rootpath+"debug/");
            saveFile = Utils.ToNativePathName(STConfig.project_rootpath+"debug/");
            current_project.saveFile(saveFile);
         }

      }
      else
      {
         boolean bLoaded = false;
         String loadFile = "";
         loadFile = "debug.epr";
         // loadFile = "debug_codex_16x1.epr"; // multi-threaded postload OK
         // loadFile = "debug_dexed_16x128.epr"; // multi-threaded postload crash
         // loadFile = "debug_sparkverb_16x64.epr";
         // loadFile = "debug_littleplate_16x8.epr";
         // loadFile = "debug_ace_16x4.epr";
         // loadFile = "debug_ace_16x16.epr";
         // loadFile = "debug_zebrahz_16x15.epr";
         // loadFile = "debug_pianoteq6_16x3.epr";
         // loadFile = "debug_saturn_16x48.epr";
         // loadFile = "debug_valhalla_plate_16x40.epr";
         // loadFile = "debug_nave_16x16.epr";
         // loadFile = "debug_softube_tape_16x16.epr";
         // loadFile = "debug_outerspace_16x3.epr";
         // loadFile = "debug_multiply_16x16.epr";
         // loadFile = "debug_adaptiverb_16x2.epr";
         // loadFile = "debug_infinite_16x8.epr";
         // loadFile = "debug_hreverb_16x4.epr";
         // loadFile = "debug_codex_16x2.epr"; // multi-threaded postload OK
         // loadFile = "debug_tal_sampler_16x4.epr";
         // loadFile = "debug_renoise_16x2.epr";
         // loadFile = "debug_falcon_16x8.epr";
         // loadFile = "debug_falcon_16x1.epr";

         if(!loadFile.isBlank())
         {
            // // loadFile = Utils.SubstitutePathVars(STConfig.project_rootpath+"debug/"+loadFile);
            loadFile = Utils.ToNativePathName(STConfig.project_rootpath+"debug/"+loadFile);
            bLoaded = current_project.loadFile(loadFile);
         }

         if(!bLoaded)
         {
            trace "[---] Global.Init: failed to load project";
            return false;
         }

         // current_project.exit();
         // exit(10);
      }

      root_form.updateSongWidgets();
   }

   // <method.png>
   static LoadProject(String _projectName) : boolean {
      return LoadProject2(_projectName, null/*pathName*/);
   }

   // <method.png>
   static LoadProjectPathName(String _pathName) : boolean {
      if(_pathName.endsWith(PROJECT_FILE_SUFFIX))
      {
         return LoadProject2(null/*projectName*/, _pathName);
      }
      else
      {
         Global.Error("LoadProjectFile: wrong file suffix, pathName=\""+_pathName+"\".");
         return false;
      }
   }

   // <method.png>
   static LoadProject2(String _projectName, String _pathName) : boolean {

      trace "[trc] LoadProject2: call replay.stop()";
      Audio.ResetAllTempSamples();
      Audio.UpdateTemporarySampleFromWaveform(null);
      replay.stop();
      trace "[trc] LoadProject2: END replay.stop()";

      PageSample pgSample <= root_form.pg_sample;
      pgSample.invalidateSampleView();

      PageAudio pgAudio <= root_form.pg_audio;
      pgAudio.invalidateSampleView();

      boolean r = LoadProject3(_projectName, _pathName);

      replay.start();
      Audio.b_suppress_underrun_error = false;
      Audio.ResetUnderrunProtection();
      return r;
   }

   static =audio= LoadProject3(String _projectName, String _pathName) : boolean {
      return LoadProject4(_projectName, _pathName);
   }

   static =replay= LoadProject4(String _projectName, String _pathName) : boolean {

      if(replay.b_recording)
      {
         root_form.handleToggleRecording();
      }

      Audio.b_suppress_underrun_error = true;

      boolean r = false;

      // Close VST plugins, ..
      ExitProject();

      // Init new project
      InitProject();

      // Load requested project file
      //  (note) pathname = project_path + projectName + suffix
      local String pathNameOrig;
      local String pathName;

      if(null != _pathName)
      {
         pathNameOrig = _pathName;
      }
      else
      {
         pathNameOrig <= STConfig.project_rootpath+"/"+_projectName;
      }

      if(!pathNameOrig.endsWith(PROJECT_FILE_SUFFIX))
         pathNameOrig.append(PROJECT_FILE_SUFFIX);

      pathName <= Utils.ToNativePathName(pathNameOrig);

      pathName.replace("//", "/");
      pathNameOrig.replace("//", "/");

      current_project.project_name = _projectName;

      if(current_project.loadFile(pathName))
      {
         if(null != _projectName)
         {
            Global.Success("Loaded project \""+_projectName+"\"");
         }
         else
         {
            Global.Success("Loaded project from file \""+_pathName+"\"");
         }

         root_form.updateSongWidgets();
         Global.UpdateWindowTitle(pathNameOrig);
         root_form.pg_audio.updateTracks();
         root_form.pg_audio.f_audiotracks.verifySelectedTrack();

         // Succeeded
         r = true;
      }
      else
      {
         Global.UpdateWindowTitle("UNSAVED: init");
      }

      root_form.updateSongWidgets();

      root_form.showPage(RootForm.PAGE_AUDIO, false/*bAllowHistory*/);
      PageAudio pgAudio <= root_form.pg_audio;
      pgAudio.updateTracks();

      Global.Debug("Global::LoadProject4() LEAVE");

      return r;
   }

   // <method.png>
   static LoadFromBuffer(Buffer _buffer) : boolean {
      replay.stop();
      return LoadFromBuffer2(_buffer);
   }

   static =audio= LoadFromBuffer2(Buffer _buffer) : boolean {
      return LoadFromBuffer3(_buffer);
   }

   static =replay= LoadFromBuffer3(Buffer _buffer) : boolean {

      if(replay.b_recording)
         root_form.handleToggleRecording();

      Audio.b_suppress_underrun_error = true;

      boolean r = false;

      // Close VST plugins, ..
      ExitProject();

      // Init new project
      InitProject();

      _buffer.byteOrder = LITTLE_ENDIAN;

      r = current_project.loadStream(_buffer);

      if(r)
      {
         Global.Success("Loaded project \""+current_project.project_name+"\" from DAW chunk");

         root_form.updateSongWidgets();
         Global.UpdateWindowTitle(current_project.project_name+" (DAW chunk)");

         // Succeeded
         r = true;
      }
      else
      {
         Global.UpdateWindowTitle("UNSAVED: init");
      }

      root_form.updateSongWidgets();

      replay.start();

      root_form.showPage(RootForm.PAGE_AUDIO, false/*bAllowHistory*/);

      Audio.b_suppress_underrun_error = false;

      return r;
   }

   // <method.png>
   static SaveProject(String _projectName) {

      if(replay.b_recording)
         root_form.handleToggleRecording();

      local String pathName = Utils.ToNativePathName(STConfig.project_rootpath+"/"+_projectName);

      if(!pathName.endsWith(PROJECT_FILE_SUFFIX))
         pathName.append(PROJECT_FILE_SUFFIX);

      if(current_project.saveFile(pathName))
      {
         Global.Success("Saved project \""+_projectName+"\"");
         Global.UpdateWindowTitle(pathName);
      }
      else
      {
         Global.UpdateWindowTitle("SAVE ERROR: "+_projectName);
      }
   }

   // <method.png>
   static SaveProjectManual(String _pathName) {

      if(replay.b_recording)
         root_form.handleToggleRecording();

      if(!_pathName.endsWith(PROJECT_FILE_SUFFIX))
         _pathName.append(PROJECT_FILE_SUFFIX);

      if(current_project.saveFile(_pathName))
      {
         Global.Success("Saved project \""+_pathName+"\"");
         Global.UpdateWindowTitle(_pathName);
      }
      else
      {
         Global.UpdateWindowTitle("SAVE ERROR: "+_pathName);
      }
   }

   // <method.png>
   static /*=replay=*/SaveToBuffer(Buffer _buffer) {
      DummyStream ds;
      ds.offset = 0;
      ds.size = 0;
      if(b_metahost && STConfig.b_metahost_save_project_ref_only)
         current_project.saveStreamMetahostRefOnly(ds);
      else
         current_project.saveStream(ds);

      _buffer.byteOrder = LITTLE_ENDIAN;
      _buffer.size = ds.offset;
      _buffer.offset = 0;
      if(b_metahost && STConfig.b_metahost_save_project_ref_only)
         current_project.saveStreamMetahostRefOnly(ds);
      else
         current_project.saveStream(_buffer);
   }

   // <method.png>
   static ExportSamplesToModFile(String _pathName) {

      if(replay.b_recording)
         root_form.handleToggleRecording();

      if((_pathName >= ".mod") || ("mod." <= _pathName))
      {
         if(current_project.exportSamplesToModFile(_pathName))
         {
            Global.Success("Export samples to mod file \""+_pathName+"\"");
         }
         else
         {
            Global.Error("Failed to export samples to mod file \""+_pathName+"\"");
         }
      }
      else
      {
         Global.Error("Invalid mod file name (must be mod.<name> or <name>.mod)");
      }
   }

   // <method.png>
   static ExportTSR() {

      if(replay.b_recording)
         root_form.handleToggleRecording();

      local String pathNameC <= "autogen_cycle/autogen_calc_"+Utils.ConvertToFileName(current_project.project_name)+".gnu.c";
      local String pathNameStatic <= "autogen_cycle/autogen_"+Utils.ConvertToFileName(current_project.project_name)+".smp";

      if(current_project.exportCycleSampleSourceInt(pathNameC))
      {
         current_project.exportCycleStaticSamples8bit(pathNameStatic);

         Global.Success("Export Cycle <int> sample source to \""+pathNameC+"\" and static samples to \""+pathNameStatic+"\"");

         // Export sampleinfos and vol/freq/loop modsequences
         current_project.exportTSRSampleInfo(STConfig.tsr_sampleinfo_export_pathname_prefix);
      }
      else
      {
         Global.Error("Failed to export Cycle sample source to \""+pathNameC+"\"");
      }
   }

   // <method.png>
   static ExportSYN() {

      if(replay.b_recording)
         root_form.handleToggleRecording();

      local String pathNameC <= Utils.ToNativePathName("$(PROGRAM_DIR)/autogen_cycle/autogen_calc_"+Utils.ConvertToFileName(current_project.project_name)+"_float.c");

      if(current_project.exportCycleSampleSourceFloat(pathNameC))
      {
         Global.Success("Export Cycle <float> sample source to \""+pathNameC+"\"");

         // Export sample/zone infos and static samples
         local String pathNameSyn <= Utils.ToNativePathName("$(PROGRAM_DIR)/autogen_cycle/autogen_"+Utils.ConvertToFileName(current_project.project_name)+".syn");
         current_project.exportSYN(pathNameSyn);

         current_project.recalcProceduralWaveforms();  // zero-filled before waveform export (=> compression)
      }
      else
      {
         Global.Error("Failed to export Cycle sample source to \""+pathNameC+"\"");
      }
   }

   // <method.png>
   static LoadIcon() {
      local PakFile f;
      if(f.open("eureka_icon.bmp"))
      {
         local Buffer b;
         f.readBuffer(b, 0, f.size, true/*bResize*/);
         f.close();
         if(SDL.setIconFromBMP(b))
            Global.Debug("Global::LoadIcon: loaded icon from \"eureka_icon.bmp\"");
         else
            trace "[---] Global::LoadIcon: failed to load icon from \"eureka_icon.bmp\"";
      }
      else
      {
         trace "[---] Global::LoadIcon: failed to open \"eureka_icon.bmp\"";
      }
   }

   // <method_init.png>
   static InitTrackColors() {
      STConfig.default_track_colors.keysToArray(default_track_color_names);
      local IntArray ia;
      default_track_color_names.sortByValue(ia, false/*bCS*/);
      default_track_color_names.rearrange(ia);
   }

   // <method.png>
   static =replay= PreRun() {

      Debug("Global::PreRun: ENTER");

      b_initializing = false;

      if(STConfig.b_enable_midi)
      {
         // Start MIDI device threads
         SysEx.Start();
         MIDI.StartMIDIInDevices();
      }

      // [08Oct2024] replay init moved from here

      // UI thread has least priority, audio+midi threads have default priority (e.g. "nice -10 tks synergy")
      // // Thread cThread <= GetCurrentThread();
      // // cThread.priority = THREAD_PRIORITY_BELOW_NORMAL;//LOWEST;

      root_form.showPage(STConfig.start_page, true);
      PageAudio pgAudio <= root_form.pg_audio;
      pgAudio.updateTracks();

      Mouse.pointerMode = MOUSE_POINTER_MANUAL;  // disable pointer auto-hide

      LoadIcon();

      if(STConfig.b_autoload_project)
         pgAudio.handleLoadSeqProject(false/*bTest*/);

      // [08Oct2024] replay init move to here
      if(STConfig.b_databridge)
      {
         // Create data_bridge VST instance (for querying stream fill level)
         //  and set fixed Audio.buffer_size (64 sample frames)
         replay.initDatabridge();
      }

      // // // Create+start threads
      // // replay.start();

      // Initialize audio (via PortAudio)
      if(STConfig.b_enable_audio)
      {
         // may update Audio.mix_rate
         //  (note) [21Jun2025] now initially starts with b_allow_process=false
         Audio.StartDefaultDevice();

         Global.CheckAudioError();
      }

      // Create+start threads
      //  (note) [21Jun2025] moved after StartDefaultDevice() to fix macOS workgroup join issue (join fails when stream is not running)
      replay.start();

      if(STConfig.b_enable_audio)
      {
         Audio.b_allow_process = true;
      }

      if(Audio.mix_rate < 16000)
         Audio.mix_rate = 48000;  // should not be reachable

      Audio.InitTempSamplePlayer();

      Debug("Global::PreRun: LEAVE");
   }

   // <ui_handle.png>
   static HandleOnClose() {
      int numModal = UI.GetNumModalFloatingLayers();

      if(0 == numModal)
      {
         // OK, quit it
         Global.cmd_file_quit();
      }
      else
      {
         // Do not exit as long as there are modal dialogs
         trace "[~~~] SDL_onClose: cannot exit since there are "+numModal+" modal windows";
      }
   }

   // <exit.png>
   static Exit() {
      Global.Debug("Global::Exit() called.");

      Audio.b_allow_process = false;

      // Wait for threads
      replay.exit();

      // [21Jun2025] moved after replay.exit() to fix macOS workgroup leave crash-issue
      if(STConfig.b_enable_audio)
      {
         Audio.StopDefaultDevice();
         Audio.Exit();
      }

      // Delete mod and lane clipboards
      ModGrid.StaticExitModGrid();

      current_project.exit();

      VoicePlugins.FreeAllVoicePluginLibs();

      Waveforms.Exit();

      if(STConfig.b_enable_midi)
      {
         SysEx.Exit();
         MIDI.ExitMIDIOutDevices();
         MIDI.ExitMIDIInDevices();
      }

      VST2.Exit();
      CLAP.Exit();
      UI.Exit();

      Global.Debug("Global::Exit() finished.");
   }

   // <log.png>
   static Error(String _text) {
      logger.logError(_text);
   }

   // <log.png>
   static FatalError(String _text) {
      logger.logFatal(_text);
   }

   // <log.png>
   static Warning(String _text) {
      logger.logWarning(_text);
   }

   // <log.png>
   static Note(String _text) {
      if(null != root_form)
      {
         int fg = UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_FG);
         int bg = UI.MixColor32(#ff00ee00, UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), 0.9);

         root_form.pushStatusMessage("Note: "+_text, 300, fg, bg, false/*bHead*/);
      }

      trace "[...] Global.Note: \""+_text+"\".";
   }

   // <log.png>
   static Success(String _text) {
      logger.logSuccess(_text);
   }

   // <log.png>
   static SuccessShort(String _text) {
      logger.logSuccessShort(_text);
   }

   // <log.png>
   static PrintMS(String _text, _timeout) {
      if(null != root_form)
      {
         int fg = UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_FG);
         int bg = UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG);

         root_form.pushStatusMessage(_text, _timeout, fg, bg, false/*bHead*/);
      }
      //trace "[dbg] Global.Print: \""+_text+"\".";
   }

   // <log.png>
   static PrintHead(String _text) {
      if(!b_loading && null != root_form)
      {
         int fg = UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_FG);
         int bg = UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG);

         root_form.pushStatusMessage(_text, 150/*350*/, fg, bg, true/*bHead*/);
      }
      //trace "[dbg] Global.Print: \""+_text+"\".";
   }

   // <log.png>
   static Info(local String _text) {
      logger.logInfo(_text);
   }

   // <debug.png>
   static Debug(local String _text) {
      if(STConfig.b_debug_lofreq)
         logger.logDebug(_text);
   }

   // <debug.png>
   static Debug2(local String _text) {
      if(STConfig.b_debug_hifreq)
         logger.logTrace(_text);
   }

   // <debug.png>
   static Debug3(local String _text) {
      if(STConfig.b_debug_rt)
         logger.logVerbose(_text);
   }

   // <debug.png>
   static Debug4(local String _text) {
      // work-in-progress very-verbose debug messages (should be commented out when done)
      // if(STConfig.b_debug_rt)
      // {
         // // trace "[xxx] "+_text;
         logger.logVerbose(_text);
      // }
   }

   // <log.png>
   static Print(String _text) {
      logger.logInfo(_text);
   }

   // <log.png>
   static PrintAndDebug(String _text) {
      Print(_text);
      Debug(_text);
   }

   // // // <log.png>
   // // static PrintLong(String _text) {
   // //    PrintMS(_text, 1000);
   // // }

   // <log.png>
   static PrintShort(String _text) {
      logger.logInfoSlow(_text);
   }

   // <log.png>
   static PrintFast(String _text) {
      logger.logInfoFast(_text);
   }

   // <debug.png>
   static Profile(local String _text) {
      if(STConfig.b_debug_profile)
      {
         logger.logProfile(_text);
      }
   }

   // <log.png>
   static PrintInteractive(String _text) {
      int fg = UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_FG);
      int bg = UI.MixColor32(#ff00ffff, UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), 0.95);

      root_form.pushStatusMessage("$: "+_text, 10, fg, bg, false/*bHead*/);

      trace "[...] Global.PrintShortInteractive: \""+_text+"\".";
   }

   // <log.png>
   static PrintShortInteractive(String _text) {
      int fg = UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_FG);
      int bg = UI.MixColor32(#ff00ffff, UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), 0.95);

      root_form.pushStatusMessage("$: "+_text, 500, fg, bg, false/*bHead*/);

      trace "[...] Global.PrintShortInteractive: \""+_text+"\".";
   }

   // <log.png>
   static PrintBegin(String _text) {
      int fg = #ffffffff;
      int bg = UI.MixColor32(#ffff9b00, UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), 0.1);

      root_form.pushStatusMessage("Begin: "+_text, -1, fg, bg, false/*bHead*/);

      trace "[...] Global.Begin: \""+_text+"\".";
   }

   // <log.png>
   static PrintEndOK(String _text) {

      root_form.endStatusMessageLock();

      int fg = #ff000000;
      int bg = UI.MixColor32(#ff00ff00, UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), 0.8);

      root_form.pushStatusMessage("End: "+_text, 10, fg, bg, false/*bHead*/);

      trace "[...] Global.End<OK>: \""+_text+"\".";
   }

   // <log.png>
   static PrintEndNOK(String _text) {

      root_form.endStatusMessageLock();

      int fg = #ff000000;
      int bg = UI.MixColor32(#ffff9b00, UI.lnf.getColor(LookAndFeel.COLOR_TEXT_EDIT_BG), 0.8);

      root_form.pushStatusMessage("End: "+_text, 10, fg, bg, false/*bHead*/);

      trace "[...] Global.End<NOK>: \""+_text+"\".";
   }

   // <method.png>
   static ConfigureVSync() {

      UI.SetEnableForceHighFramerate(STConfig.b_force_high_framerate);

      Viewport.swapInterval(STConfig.b_vsync ? 1 : 0);

      // If vsync is enabled, disable timer-based framerate limiter
      if(STConfig.b_vsync && STConfig.b_force_high_framerate)
         FPS.limit = 0;
   }

   // <method.png>
   static ConfigureFullscreenDisplaySize() {
      if(STConfig.b_fullscreen_displaysize)
      {
         // 0= auto-detect screen resolution
         Viewport.setScreenResolution(0, 0, STConfig.fullscreen_bits);
      }
      else
      {
         Debug("Global::ConfigureFullscreenDisplaySize: non-native size=("+STConfig.fullscreen_sx+"; "+STConfig.fullscreen_sy+")");
         Viewport.setScreenResolution(STConfig.fullscreen_sx, STConfig.fullscreen_sy, STConfig.fullscreen_bits);
      }
   }

   // <exit.png>
   static ExitProject() {
      Global.Debug("ExitProject");

      // Unload VST plugins, free tracks/lanes/mods, ..
      current_project.exit();

      Waveforms.FreeAll();
   }

   // <init.png>
   static InitProject() {
      ExitProject();

      Waveforms.FreeAll();

      root_form.pg_project.invalidateTrackForms();

      current_project <= new Project;
      current_project.init();

      root_form.updateSongWidgets();
      Global.UpdateWindowTitle("UNSAVED: init");
   }

   // <init.png>
   static InitTestProject() {

      int cpuCore = 0;

      // (note) all benchmarks w/o dropouts, all init-presets

      // @2600Mhz / 44.1kHz / 1024 samples:
      // (note) 16 instances of chromaphone2, processReplacing() called 6 times (instead of once) => ~63% CPU load
      // (note) 16 * 118 instances of Dexed => ~68% CPU load (1888 instances!!)
      // (note) 10 instances of Diva -> 58% CPU load (11 cause crackles)
      // (note) 16 * 4 instances of Pianoteq6 => ~84% CPU load (64 instances)
      // (note) 16 * 17 instances of ZebraHZ => ~78% CPU load (272 instances)

      // @2600Mhz / 44.1kHz / 128 samples:
      // (note) 16 * 7 instances of ZebraHZ => ~36% CPU load (112 instances)

      // @2600Mhz / 44.1kHz / 256 samples:
      // (note) 16 * 15 instances of ZebraHZ => ~71% CPU load (240 instances)
      //         (in Reason: 5 * 14 => 2 DSP bars (70 instances))
      // (note) 16 * 3 instances of Pianoteq6 => ~74% CPU load (48 instances)
      //         (in Reason: 5 * 3 => 2 DSP bars => ~34% CPU load (15 instances), BUT: heavy CPU spikes + crackles around every 2 seconds)
      // (note) 16 * 32 instances of MicroShift => ~80% CPU load (512 instances)
      // (note) 16 * 2 instances of Adaptiverb => ~66% CPU load (32 instances)
      // (note) 16 * 130 instances of SparkVerb => ~73% CPU load (2080 instances)
      // (note) 16 * 40 instances of Valhalla Plate => ~77% CPU load (640 instances)
      // (note) 16 * 10 instances of Soundtoys LittlePlate => ~66% CPU load (160 instances)
      // (note) 16 * 3 instances of Outer Space => ~52% CPU load (48 instances)
      // (note) 16 * 2 instances of Satin => ~81% CPU load (32 instances)
      // (note) 16 * 48 instances of Saturn => ~70% CPU load (768 instances)
      // (note) 16 * 20 instances of Oddity2 => ~42% CPU load (320 instances)
      // (note) 16 * 4 instances of H-Reverb long stereo => ~83% CPU load (64 instances)
      // (note) 16 * 2 instances of CODEX => ~62% CPU load (32 instances)


      int instanceNr = 1;
      loop(1)
      {
         Track track <= current_project.newTrack("track "+(instanceNr++), -1/*idx*/);
         if(!STConfig.b_ignore_thread_affinity)
            track.setCPUCore(cpuCore);
         Lane lane <= track.newLane();
         loop(1)
         {
            ModVST2 mod <= lane.newMod("VST2");
            // mod.loadPluginByUniqueIDString("u-he`Diva`1147754081"); // no more than 10 instances, even though load is ~58%
            mod.loadPluginByUniqueIDString("Digital Suburban`Dexed`1147500644");
            //mod.loadPluginByUniqueIDString("u-he`ACE`1633895765");
            //mod.loadPluginByUniqueIDString("Applied Acoustics Systems`Chromaphone 2`1413628502");
            // mod.loadPluginByUniqueIDString("GForce`Oddity 2`1330603058"); // not working
            //mod.loadPluginByUniqueIDString("GForce`Oddity 2`1330603110"); // audioMasterPinConnected spam [FX version], causes crash at exit
            // mod.loadPluginByUniqueIDString("Waldorf`Nave`1851881061");
            // mod.loadPluginByUniqueIDString("Modartt`Pianoteq 6`1349793393");
            //mod.loadPluginByUniqueIDString("u-he`ZebraHZ`1397573722");
             // mod.loadPluginByUniqueIDString("Zynaptiq`ADAPTIVERB`1515798870");
            //mod.loadPluginByUniqueIDString("UVI`SparkVerb`1399871074");
            // mod.loadPluginByUniqueIDString("Acon Digital`Acon Digital Multiply`1297435732");
            //mod.loadPluginByUniqueIDString("SoundToys`MicroShift`1400130931");
            // mod.loadPluginByUniqueIDString("Valhalla DSP, LLC`ValhallaPlate`1886151028");  // very fast init (~30ms)
            // mod.loadPluginByUniqueIDString("SoundToys`Little Plate`1280330808"); // very slow init (~1000ms)
            // mod.loadPluginByUniqueIDString("AudioThing`Outer Space`1330934608");
            //mod.loadPluginByUniqueIDString("u-he`Satin`1969771348");
            //mod.loadPluginByUniqueIDString("FabFilter`FabFilter Saturn`1179869556");
            // mod.loadPluginByUniqueIDString("Softube`Tape`1852728951");  // detects silence ? very low cpu, even with 16*64 instances
            // mod.loadPluginByUniqueIDString("Waves``1802721110`H-Reverb long Stereo`0x48525653");
            //mod.loadPluginByUniqueIDString("Waves``1802721110`CODEX Stereo`0x4a465753");  // slow init
            // mod.loadPluginByUniqueIDString("PPG`Infinite`1229866545");
            //mod.loadPluginByUniqueIDString("TAL-Togu Audio Line`TAL Sampler`1749380145");
            // mod.loadPluginByUniqueIDString("Renoise`Renoise Redux`1381123160"); // complains about missing TTF font when instantiated too often :)
            //mod.loadPluginByUniqueIDString("UVI`Falcon`1181508462");  // loads but quits entire app when processReplacing is called (!)
            //mod.loadPluginByUniqueIDString("Waldorf`PPG Wave 3.V`842608689");
            //mod.loadPluginByUniqueIDString("XILS-lab`XILS 4`2016625769");
            //mod.loadPluginByUniqueIDString("XILS-lab`XILS 4 FX`2016625765");



            if(STConfig.b_databridge)
            {
               ModVST2 modDB <= lane.newMod("VST2");
               modDB.loadPluginByUniqueIDString("pongasoft and bsp`data_bridge`1970495854");
               modDB.plugin.setParameter(0, 0.0f/*b_input*/); // configure as output
            }
         }

         // Next track
         cpuCore++;
      }

   }

   // <method_get.png>
   static GetAudioTrackWavRootPath() : String {
      // // local String r = Utils.SubstitutePathVars(STConfig.audiotrack_wav_rootpath);
      local String r = Utils.ToNativePathName(STConfig.audiotrack_wav_rootpath);
      r.replace("$(PROJECT_NAME)", Utils.ConvertToFileName(current_project.project_name));
      r.replace("\\", "/");
      r.replace("//", "/");
      return deref r;
   }

   // <method_get.png>
   static GetExportedSamplesWavRootPath() : String {
      // // local String r = Utils.SubstitutePathVars(STConfig.exported_samples_wav_rootpath);
      local String r = Utils.ToNativePathName(STConfig.exported_samples_wav_rootpath);
      r.replace("$(PROJECT_NAME)", Utils.ConvertToFileName(current_project.project_name));
      r.replace("\\", "/");
      r.replace("//", "/");
      return deref r;
   }

   // <method_get.png>
   static GetProjectSamplesWavRootPath() : String {
      // // local String r = Utils.SubstitutePathVars(STConfig.project_samples_wav_rootpath);
      local String r = Utils.ToNativePathName(STConfig.project_samples_wav_rootpath);
      r.replace("$(PROJECT_NAME)", Utils.ConvertToFileName(current_project.project_name));
      r.replace("\\", "/");
      r.replace("//", "/");
      return deref r;
   }

   // <method_get.png>
   static GetOrCreateBezierEditClipboard() : BezierEditState {
      if(null == bezier_clipboard_state)
         bezier_clipboard_state <= new BezierEditState;
      return bezier_clipboard_state;
   }

   // <method_get.png>
   static GetBezierEditClipboard() : BezierEditState {
      return bezier_clipboard_state;
   }

   // <method.png>
   public static GetOrScanCurvePresetFilenames(boolean _bForce) : StringArray {
      _bForce |= (null == curve_preset_filenames);

      if(_bForce)
      {
         local StringArray presetNames; presetNames.free();
         Global.Debug("Global::GetOrScanCurvePresetFilenames: nativePathName=\""+Utils.ToNativePathName(STConfig.curve_rootpath)+"\"");
         local StringArray filenames <= Utils.ReadDirectory(STConfig.curve_rootpath);

         if(null != filenames)
         {
            String *filenameEn;
            foreach filenameEn in filenames
            {
               if(filenameEn.startsWith("f"))
               {
                  StringArray attr <= filenameEn.splitSpace(true);
                  String fileName <= attr.get(1);

                  if(fileName.endsWith(Global.CURVE_FILE_SUFFIX/*.curve*/))
                  {
                     fileName.replace(Global.CURVE_FILE_SUFFIX/*.curve*/, "");
                     presetNames.add(String(fileName));
                  }
               }
            }
         }

         local IntArray ia;
         presetNames.sortByValue(ia, false/*bCS*/);
         presetNames.rearrange(ia);

         Global.Debug("Global::GetOrScanCurvePresetFilenames: found "+presetNames.numElements+" curve preset(s)");

         presetNames.insert(0, "-");

         curve_preset_filenames <= deref presetNames;
      }
      return curve_preset_filenames;
   }

   // <method.png>
   protected static RecursiveScanTuningTablePresets(local String _relPath) {
      local StringArray filenames <= Utils.ReadDirectory(STConfig.tuning_table_rootpath+"/"+_relPath);
      if(null != filenames)
      {
         String *filenameEn;
         foreach filenameEn in filenames
         {
            StringArray attr <= filenameEn.splitSpace(true);
            String fileName <= attr.get(1);

            if('f' == filenameEn.getc(0))
            {
               if(fileName.endsWith(Global.TUN_FILE_SUFFIX/*.tun*/) ||
                  fileName.endsWith(Global.SCL_FILE_SUFFIX/*.scl*/)
                  )
               {
                  tuning_table_pathnames.add(_relPath+"/"+fileName);
                  fileName.replace(Global.TUN_FILE_SUFFIX/*.tun*/, "");
                  fileName.replace(Global.SCL_FILE_SUFFIX/*.scl*/, "");
                  local String sRelPath <= Utils.FixFileName(_relPath);  // remove trailing '/'
                  if(sRelPath >= "/")
                     sRelPath.substring(0, sRelPath.numChars-1);
                  if(sRelPath <= "/")
                     sRelPath.substring(1, sRelPath.numChars-1);
                  tuning_table_opt_long.add(fileName+"\t"+sRelPath);
                  if(fileName.numChars > 20)
                     fileName <= fileName.substring(0, 20-2)+"..";
                  tuning_table_opt_short.add(fileName);
               }
            }
            else if('d' == filenameEn.getc(0))
            {
               if!( (fileName == ".") || (fileName == "..") )
               {
                  RecursiveScanTuningTablePresets(_relPath+"/"+fileName);
               }
            }
         }
      }
   }

   // <method.png>
   public static LazyScanTuningTablePresets(boolean _bForce) {
      _bForce |= (null == tuning_table_pathnames);

      if(_bForce)
      {
         tuning_table_pathnames <= new StringArray;
         tuning_table_opt_long  <= new StringArray;
         tuning_table_opt_short <= new StringArray;
         Global.Debug("Global::LazyScanTuningTablePresets: nativePathName=\""+Utils.ToNativePathName(STConfig.tuning_table_rootpath)+"\"");
         RecursiveScanTuningTablePresets(""/*relPath*/);

         local IntArray ia;
         tuning_table_opt_long.sortByValue(ia, false/*bCS*/);
         tuning_table_pathnames.rearrange(ia);
         tuning_table_opt_long .rearrange(ia);
         tuning_table_opt_short.rearrange(ia);

         Global.Debug("Global::LazyScanTuningTablePresets: found "+ia.numElements+" tuning preset(s)");
      }
   }

   // <method.png>
   static RefocusDefault() {
      root_form.handlePageFocusDefault();
   }

   // <method.png>
   static RefocusDefaultOrFloatingLayer() {
      FloatingLayer fl <= UI.GetFrontMostFloatingLayer();
      if(null != fl)
         UI.SetKeyboardFocus(fl);
      else
         RefocusDefault();
   }

   // <api.png>
   static UpdateWindowTitle(String _fileName) {
      Debug("UpdateWindowTitle to \""+(_fileName + " -- " + Global.VERSION_STRING)+"\".");
      Viewport.caption = _fileName + " -- " + Global.VERSION_STRING;
   }

   // <error_handling.png>
   static CheckAudioError() {
      // Show error dialog
      if(!Audio.b_audio_running)
      {
         dlg_audio_error <= InfoDialog.NewError("Error opening audio device",
                                                "Failed to open audio device."
                                                "\n\nPlease check configuration !",
                                                null
                                                );
         dlg_audio_error.showCentered();

         root_form.handleAudioErrorOccured();
      }
   }

   // --------------------------------------------------------------------------
   // - cmd_file_xxx
   // --------------------------------------------------------------------------


   // <method.png>
   static cmd_file_quit() {

      // debug: force soft crash
      //String s <= null;
      //trace s.length;

      // debug: force hard crash
      //  (note) hard crash code needs to be compiled into _Debug() method
      //_Debug();

      dlg_quit.run();
   }

   // <method.png>
   static cmd_file_quit_2() {
      root_form.beginExit();
   }

}
