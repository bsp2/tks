// ----
// ---- file   : PageSample.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 21Dec2018
// ---- changed: 22Dec2018, 23Dec2018, 27Dec2018, 28Dec2018, 29Dec2018, 30Dec2018, 31Dec2018
// ----          02Jan2019, 03Jan2019, 04Jan2019, 05Jan2019, 06Jan2019, 07Jan2019, 08Jan2019
// ----          10Jan2019, 15Jan2019, 17Jan2019, 30Mar2019, 23Apr2019, 08May2019, 11May2019
// ----          13May2019, 15May2019, 17May2019, 15Jun2019, 18Jun2019, 06Jul2019, 13Jul2019
// ----          19Jul2019, 20Jul2019, 21Jul2019, 22Jul2019, 23Jul2019, 24Jul2019, 25Jul2019
// ----          27Jul2019, 28Jul2019, 05Aug2019, 07Aug2019, 10Sep2019, 22Oct2019, 02Nov2019
// ----          15Feb2020, 17Feb2020, 18Feb2020, 20Feb2020, 22Feb2020, 23Feb2020, 26Feb2020
// ----          28Feb2020, 02Mar2020, 03Mar2020, 10Mar2020, 14May2020, 15May2020, 19May2020
// ----          22May2020, 31May2020, 01Jun2020, 02Jun2020, 03Jun2020, 04Jun2020, 08Jun2020
// ----          10Jun2020, 18Aug2020, 21Aug2020, 23Aug2020, 24Aug2020, 01Sep2020, 02Sep2020
// ----          03Sep2020, 05Sep2020, 06Sep2020, 07Sep2020, 12Sep2020, 13Sep2020, 24Sep2020
// ----          06Oct2020, 12Oct2020, 15Oct2020, 17Oct2020, 29Nov2020, 31Jan2021, 11Apr2021
// ----          15Apr2021, 30Apr2021, 03May2021, 17Jul2021, 19Jul2021, 25Jul2021, 30Jul2021
// ----          08Aug2021, 10Aug2021, 16Aug2021, 23Aug2021, 30Aug2021, 31Aug2021, 04Oct2021
// ----          05Oct2021, 12Oct2021, 11Dec2021, 12Dec2021, 18Jan2022, 05Feb2022, 06Feb2022
// ----          11Feb2022, 08Apr2022, 13May2022, 03Jul2022, 08Jul2022, 09Jul2022, 16Jul2022
// ----          12Aug2022, 13Aug2022, 31Aug2022, 20Nov2022, 21Nov2022, 22Nov2022, 23Nov2022
// ----          24Nov2022, 28Nov2022, 18Dec2022, 20Dec2022, 21Dec2022, 22Dec2022, 23Dec2022
// ----          27Dec2022, 28Dec2022, 29Dec2022, 31Dec2022, 04Jan2023, 19Feb2023, 21Feb2023
// ----          09Mar2023, 10Mar2023, 22Mar2023, 01Apr2023, 12Apr2023, 04May2023, 09May2023
// ----          17May2023, 14Jun2023, 29Jul2023, 05Aug2023, 11Aug2023, 13Aug2023, 16Aug2023
// ----          19Aug2023, 20Aug2023, 24Aug2023, 03Sep2023, 08Sep2023, 10Sep2023, 13Sep2023
// ----          14Sep2023, 15Sep2023, 19Sep2023, 21Sep2023, 04Oct2023, 06Oct2023, 23Oct2023
// ----          02Nov2023, 17Nov2023, 18Nov2023, 02Dec2023, 14Dec2023, 06Jan2024, 09Jan2024
// ----          17Jan2024, 18Jan2024, 19Jan2024, 02Feb2024, 09Feb2024, 14Feb2024, 22Mar2024
// ----          13Apr2024, 16Apr2024, 19Apr2024, 21Apr2024, 26Apr2024, 05Jul2024, 02Aug2024
// ----          03Aug2024, 04Aug2024, 05Aug2024, 06Aug2024, 10Aug2024, 12Aug2024, 13Sep2024
// ----          17Sep2024, 20Sep2024, 30Sep2024, 03Oct2024, 04Oct2024, 05Oct2024, 13Oct2024
// ----          01Nov2024, 03Nov2024, 06Nov2024, 09Nov2024, 12Nov2024, 15Nov2024, 15Dec2024
// ----          17Dec2024, 23Dec2024, 29Dec2024, 30Dec2024, 31Dec2024, 03Jan2025, 04Jan2025
// ----          10Jan2025, 12Jan2025, 31Jan2025, 20Mar2025, 21Mar2025, 22Mar2025, 29Mar2025
// ----          03Apr2025, 05Apr2025, 06Apr2025, 10Apr2025, 19May2025, 20May2025, 28May2025
// ----          31May2025, 10Jun2025, 12Jun2025, 15Jun2025
// ----
// ----
// ----

module MPageSample;

use namespace ui;
use namespace st2;


// <class.png>
class PageSample : Page, SampleViewPlugin {

   define String TA_ZONE_MIDI;
   protected TimerAction *ta_zone_midi;

   define String TA_UPDATE_PARTIALS;
   protected TimerAction *ta_update_partials;

   define int PRG_DPY_PC_DEC        = 0;  // program change nr (decimal, 1..128)
   define int PRG_DPY_PC_LETTER     = 1;  // program change nr (letter, 0..9, A..Z, a..z)
   define int PRG_DPY_UNIQUE_ID     = 2;  // unique sample id (addressable via RPN)
   define int PRG_DPY_UNIQUE_ID_HEX = 3;  // unique sample id (addressable via RPN)
   define int PRG_DPY_PC_HEX        = 4;  // program change nr (hexadecimal, $00..$80)

   protected SplitPane *spl_sample;

   // Upper 'sample' tabs
   define int TAB_PATCH    = 0;
   define int TAB_REINIT   = 1;
   define int TAB_ZONE     = 2;
   define int TAB_COMMON   = 3;
   define int TAB_FILTER   = 4;
   define int TAB_ENV      = 5;
   define int TAB_LFO_FREQ = 6;
   define int TAB_LFO_VOL  = 7;
   define int TAB_LFO_PAN  = 8;
   define int TAB_LFO_AUX  = 9;
   protected TabSwitch *ts_groups;

   // Lower 'zone' tabs
   define int ZONE_TAB_LOOPS     = 0;
   define int ZONE_TAB_GLIDE     = 1;
   define int ZONE_TAB_WT        = 2;
   define int ZONE_TAB_REC       = 3;
   define int ZONE_TAB_MODSEQ_1  = 4;  // M1
   define int ZONE_TAB_MODSEQ_2  = 5;  // M2
   define int ZONE_TAB_MODSEQ_3  = 6;  // M3
   define int ZONE_TAB_MODSEQ_4  = 7;  // M4
   define int ZONE_TAB_VCAL      = 8;
   define int ZONE_TAB_CTL_1     = 9;
   define int ZONE_TAB_CTL_2     = 10;
   define int ZONE_TAB_FX        = 11;
   protected TabSwitch *ts_zone;

   // Sample (StSampleBank)
   protected TextField  *tf_name;
   protected String tf_name_orig_tooltip_caption;
   protected CheckBox   *cb_persistent;

   protected TextField  *tf_info;
   protected Button     *bt_info;
   static TextEditDialog *dlg_info;
   protected Button     *bt_tags;
   protected PopupMenu  *pm_tags;
   static StringArray tags_clipboard;

   protected Button     *bt_perf_mw;
   protected FloatParam *fp_perf_mw;
   protected Button     *bt_perf_bc;
   protected FloatParam *fp_perf_bc;
   protected Button     *bt_perf_fc;
   protected FloatParam *fp_perf_fc;
   protected Button     *bt_perf_ex;
   protected FloatParam *fp_perf_ex;
   protected Button     *bt_perf_gp1;
   protected FloatParam *fp_perf_gp1;
   protected Button     *bt_perf_gp2;
   protected FloatParam *fp_perf_gp2;
   protected Button     *bt_perf_gp3;
   protected FloatParam *fp_perf_gp3;
   protected Button     *bt_perf_gp4;
   protected FloatParam *fp_perf_gp4;
   protected CheckBox   *cb_perfctlfreeze;
   protected CheckBox   *cb_sustain;
   protected ComboBox   *cm_type;
   protected FloatParam *fp_grid_size;
   protected Button     *bt_reinit_zones;
   protected CheckBox   *cb_reinit_loop;
   protected Button     *bt_reinit_drum;
   protected FloatParam *fp_maxvoices;
   // // protected ComboBox   *cm_syn;
   protected CheckBox   *cb_procedural;
   protected ComboBox   *cm_src_track;
   protected CheckBox   *cb_audio;
   protected FloatParam *fp_audio_bpm;
   protected Button     *bt_prg_assign;
   protected ComboBox   *cm_prg;

   protected FloatParam *fp_transpose_oct;
   protected FloatParam *fp_transpose_semi;
   protected FloatParam *fp_transpose_cents;
   protected FloatParam *fp_freq_rand;
   protected FloatParam *fp_pitchbend_up;
   protected FloatParam *fp_pitchbend_down;

   protected FloatParam *fp_sample_rate;

   protected FloatParam *fp_volume;
   protected FloatParam *fp_volume_rand;

   protected FloatParam *fp_pan;
   protected FloatParam *fp_pan_rand;

   protected FloatParam *fp_sampleoff_rand;

   protected CheckBox *cb_uniquenotes;
   protected CheckBox *cb_realloc;
   protected Button   *bt_sample_tuning;
   protected SampleTuningDialog *dlg_sample_tuning;

   // Zone (StSample)
   protected FloatParam *fp_zone_maxvoices;
   protected ComboBox   *cm_zone_mutex_group;
   protected FloatParam *fp_zone_delay;
   protected FloatParam *fp_zone_delay_mul;
   protected FloatParam *fp_zone_sample_rate;
   protected ComboBox   *cm_zone_interpolation;
   protected ComboBox   *cm_zone_interpolation_order;
   protected Button     *bt_zone_lofi;
   protected PopupMenu  *pm_zone_lofi;
   protected ComboBox   *cm_zone_srr;
   protected FloatParam *fp_zone_srr_mask;
   protected ComboBox   *cm_zone_br;
   protected FloatParam *fp_zone_br_mask;
   protected FloatParam *fp_zone_br_preamp;

   protected FloatParam *fp_zone_sampleoff_rel;
   protected FloatParam *fp_zone_sampleoff_rand;
   protected FloatParam *fp_zone_sampleoff_velamt;
   protected CheckBox   *cb_zone_sampleoff_velamt_invert;

   protected SampleAIView *ai_view;
   protected ComboBox     *cm_zone_ai;
   protected FloatParam   *fp_zone_ai_q;
   protected FloatParam   *fp_zone_ai_exp_up;
   protected FloatParam   *fp_zone_ai_exp_down;
   protected FloatParam   *fp_zone_ai_lin_oct;
   protected FloatParam   *fp_zone_ai_lin_max;

   protected ComboBox   *cm_zone_voicebus;

   protected CheckBox   *cb_zone_sampleoff_freezequiet;

   protected PopupMenu *pm_zone_env_quick_preset;

   protected FloatParam *fp_zone_transpose_oct;
   protected FloatParam *fp_zone_transpose_semi;
   protected FloatParam *fp_zone_transpose_cents;
   protected FloatParam *fp_zone_beatfreq;
   protected FloatParam *fp_zone_freqenvamt;
   protected Button     *bt_zone_tuning;
   protected FloatParam *fp_zone_freqlfoamt;
   protected Button     *bt_zone_freq_quick;
   protected Button     *bt_zone_freq_a;
   protected FloatParam *fp_zone_freq_a_speed;
   protected Button     *bt_zone_freq_s;
   protected FloatParam *fp_zone_freq_s_speed;
   protected CheckBox   *cb_zone_freq_s_loop;
   protected Button     *bt_zone_freq_r;
   protected FloatParam *fp_zone_freq_r_speed;
   protected FloatParam *fp_zone_freq_adsr_level;
   protected FloatParam *fp_zone_freq_adsr_time;
   protected ComboBox   *cm_zone_freq_stageop;

   protected FloatParam *fp_zone_volume;
   protected FloatParam *fp_zone_volume_vel;
   protected FloatParam *fp_zone_vollfoamt;
   protected FloatParam *fp_zone_volume_ramp_up;
   protected FloatParam *fp_zone_volume_ramp_down;
   protected Button     *bt_zone_volume_quick;
   protected Button     *bt_zone_volume_a;
   protected FloatParam *fp_zone_volume_a_speed;
   protected Button     *bt_zone_volume_s;
   protected FloatParam *fp_zone_volume_s_speed;
   protected CheckBox   *cb_zone_volume_s_loop;
   protected Button     *bt_zone_volume_r;
   protected FloatParam *fp_zone_volume_r_speed;
   protected FloatParam *fp_zone_volume_adsr_int;
   protected FloatParam *fp_zone_volume_adsr_time;

   protected FloatParam *fp_zone_pan;
   protected FloatParam *fp_zone_panenvamt;
   protected FloatParam *fp_zone_panlfoamt;
   protected Button     *bt_zone_pan_quick;
   protected Button     *bt_zone_pan_a;
   protected FloatParam *fp_zone_pan_a_speed;
   protected Button     *bt_zone_pan_s;
   protected FloatParam *fp_zone_pan_s_speed;
   protected CheckBox   *cb_zone_pan_s_loop;
   protected Button     *bt_zone_pan_r;
   protected FloatParam *fp_zone_pan_r_speed;
   protected FloatParam *fp_zone_pan_adsr_level;
   protected FloatParam *fp_zone_pan_adsr_time;
   protected ComboBox   *cm_zone_pan_stageop;

   protected FloatParam *fp_zone_flt_env_amt;
   protected FloatParam *fp_zone_flt_env_velamt;
   protected FloatParam *fp_zone_flt_lfo_amt;
   protected FloatParam *fp_zone_flt_kbd_amt;
   protected CheckBox   *cb_zone_auxtowav;
   protected Button     *bt_zone_aux_quick;
   protected Button     *bt_zone_aux_a;
   protected FloatParam *fp_zone_aux_a_speed;
   protected Button     *bt_zone_aux_s;
   protected FloatParam *fp_zone_aux_s_speed;
   protected CheckBox   *cb_zone_aux_s_loop;
   protected Button     *bt_zone_aux_r;
   protected FloatParam *fp_zone_aux_r_speed;
   protected FloatParam *fp_zone_aux_adsr_level;
   protected FloatParam *fp_zone_aux_adsr_time;
   protected ComboBox   *cm_zone_aux_stageop;

   protected FloatParam *fp_zone_mm_kbd_min;
   protected FloatParam *fp_zone_mm_kbd_ctr;
   protected FloatParam *fp_zone_mm_kbd_max;

   // LFOs
   protected SampleLFOForm *f_lfo_freq;
   protected SampleLFOForm *f_lfo_volume;
   protected SampleLFOForm *f_lfo_pan;
   protected SampleLFOForm *f_lfo_aux;

   // Voice Calibration (lanes 1..6)
   protected SampleVCalForm *[] a_f_vcal;

   // Glide
   protected SampleGlideForm *f_glide;

   // Wavetable / Timestretch
   protected CheckBox   *cb_zone_ts;
   protected CheckBox   *cb_zone_ts_staticcyclelen;
   protected CheckBox   *cb_zone_ts_xfade;
   protected CheckBox   *cb_zone_ts_abs;
   protected CheckBox   *cb_zone_ts_additive;
   protected ComboBox   *cm_zone_ts_win;
   protected CheckBox   *cb_zone_ts_additive_win;
   protected CheckBox   *cb_zone_ts_additive_true_freq;
   protected FloatParam *fp_zone_ts_cyclelen_reset;
   protected CheckBox   *cb_zone_ts_phase_0;
   protected FloatParam *fp_zone_ts_numpartials;
   protected FloatParam *fp_zone_ts_stereo_spread;
   protected Button     *bt_zone_ts_export;

   protected FloatParam *fp_zone_ts_osc_edit_cfg;
   protected CheckBox   *cb_zone_ts_osc_force_edit_cfg;
   protected Button     *bt_zone_ts_osc_cfg_copy;
   protected Button     *bt_zone_ts_osc_cfg_paste;
   protected StSample   *ts_osc_clipboard;

   protected FloatParam *fp_zone_ts_osc_lvl_sin;
   protected FloatParam *fp_zone_ts_osc_pha_sin;
   protected FloatParam *fp_zone_ts_osc_exa_sin;
   protected FloatParam *fp_zone_ts_osc_exl_sin;
   protected FloatParam *fp_zone_ts_osc_flt_sin;
   protected FloatParam *fp_zone_ts_osc_lvl_tri;
   protected FloatParam *fp_zone_ts_osc_pha_tri;
   protected FloatParam *fp_zone_ts_osc_exa_tri;
   protected FloatParam *fp_zone_ts_osc_exl_tri;
   protected FloatParam *fp_zone_ts_osc_flt_tri;
   protected FloatParam *fp_zone_ts_osc_lvl_sup;
   protected FloatParam *fp_zone_ts_osc_pha_sup;
   protected FloatParam *fp_zone_ts_osc_exa_sup;
   protected FloatParam *fp_zone_ts_osc_exl_sup;
   protected FloatParam *fp_zone_ts_osc_flt_sup;
   protected FloatParam *fp_zone_ts_osc_lvl_sdn;
   protected FloatParam *fp_zone_ts_osc_pha_sdn;
   protected FloatParam *fp_zone_ts_osc_exa_sdn;
   protected FloatParam *fp_zone_ts_osc_exl_sdn;
   protected FloatParam *fp_zone_ts_osc_flt_sdn;
   protected FloatParam *fp_zone_ts_osc_lvl_pul;
   protected FloatParam *fp_zone_ts_osc_pha_pul;
   protected FloatParam *fp_zone_ts_osc_exa_pul;
   protected FloatParam *fp_zone_ts_osc_exl_pul;
   protected FloatParam *fp_zone_ts_osc_flt_pul;

   protected CheckBox   *cb_zone_ts_osc_normalize;
   protected ComboBox   *cm_zone_ts_osc_srr;
   protected FloatParam *fp_zone_ts_osc_srr_mask;

   protected ComboBox   *cm_zone_ts_osc_br;
   protected FloatParam *fp_zone_ts_osc_br_mask;
   protected FloatParam *fp_zone_ts_osc_br_preamp;

   protected FloatParam *fp_zone_ts;
   protected Button     *bt_zone_ts_findroot;
   protected FloatParam *fp_zone_ts_granularity;
   protected FloatParam *fp_zone_ts_granularity_fine;
   protected FloatParam *fp_zone_ts_additive_xfade;
   protected Label      *lb_zone_ts_granularity_amt;
   protected FloatParam *fp_zone_ts_granularity_amt;
   protected FloatParam *fp_zone_ts_phase_rand_amt;
   protected FloatParam *fp_zone_ts_2d_w;
   protected FloatParam *fp_zone_ts_2d_h;

   protected ComboBox   *cm_zone_ts_ipol;
   protected Label      *lb_zone_ts_bend;
   protected FloatParam *fp_zone_ts_bend;

   protected ComboBox   *cm_zone_ts_grain;
   protected FloatParam *fp_zone_ts_additive_wexp;
   protected FloatParam *fp_zone_ts_additive_bexp;
   protected FloatParam *fp_zone_ts_additive_mexp;
   protected FloatParam *fp_zone_ts_additive_mbexp;


   // LiveRec
   protected SampleLiveRecForm *f_liverec;

   // ModSeq
   protected SampleModSeqForm *f_modseq_1;
   protected SampleModSeqForm *f_modseq_2;
   protected SampleModSeqForm *f_modseq_3;
   protected SampleModSeqForm *f_modseq_4;

   // ModMatrix
   protected Panel            *p_ctl1;
   protected Panel            *p_ctl1_var;
   protected Panel            *p_ctl2;
   protected Panel            *p_ctl2_var;
   protected SampleMMVarForm  *f_mm_var;
   protected SampleMMForm *[]  mm_forms;  // SampleMMForm refs

   // Plugins
   public SamplePluginForm *f_plugin;

   protected SplitPane *spl_smpzones;

   public    TableView     *tv_zones;
   public    SampleZonesTM *tm_zones;
   public    SampleZonesNamesTM *tm_zones_names;
   protected PopupMenu     *pm_zones;
   protected Button *bt_zone_add;
   protected Button *bt_zone_remove;
   protected Button *bt_zone_moveup;
   protected Button *bt_zone_movedown;
   protected Button *bt_zone_dblclick;
   protected static StringArray a_dblclick_mode_names = ["-",
                                                         "P - Play zone",
                                                         "S - Edit synth patch",
                                                         "M - Edit machine source",
                                                         ];
   protected Button *bt_zone_names;
   protected Button *bt_zone_reinit;
   protected int last_zones_reinit_type = Sample.TYPE_DRUM_MAP;

   protected Button     *bt_sample_mixer;
   protected CheckBox   *cb_zone_midi;
   protected CheckBox   *cb_zone_solo;
   protected CheckBox   *cb_zone_autoselect;
   protected ComboBox   *cm_zone_key_lo;
   protected ComboBox   *cm_zone_key_hi;
   protected FloatParam *fp_zone_vel_lo;
   protected FloatParam *fp_zone_vel_hi;
   protected CheckBox   *cb_zone_alt;

   protected ComboBox   *cm_modsrc;
   protected CheckBox   *cb_modsrc_noteon;
   protected FloatParam *fp_zone_mod_lo;
   protected FloatParam *fp_zone_mod_hi;
   protected FloatParam *fp_zone_mod_fadein;
   protected FloatParam *fp_zone_mod_fadeout;
   protected CheckBox   *cb_zone_mod_flt;

   protected TableView *tv_loops;
   protected SampleLoopsTM *tm_loops;
   protected PopupMenu *pm_loops;
   protected Button *bt_loop_add;
   protected Button *bt_loop_remove;
   protected Button *bt_loop_moveup;
   protected Button *bt_loop_movedown;

   protected FloatParam *fp_zone_noteoff_loop_idx;
   protected CheckBox   *cb_zone_noteoff_loop_immediate;
   protected CheckBox   *cb_zone_fromstart;
   protected CheckBox   *cb_zone_jumptoloop_immediately;
   protected ComboBox   *cm_zone_play_mode;
   protected ComboBox   *cm_zone_loopfade;

   protected CheckBox *cb_zone_timedloop;
   protected CheckBox *cb_zone_timedloop_fade;
   protected CheckBox *cb_zone_timedloop_oneshot;

   protected FloatParam *fp_zone_offset;
   protected Button     *bt_zone_offset_hex;
   protected FloatParam *fp_zone_len;
   protected Button     *bt_zone_len_hex;
   protected FloatParam *fp_zone_rep;
   protected Button     *bt_zone_autoloop;

   protected CheckBox    *cb_zone_flt_en;
   protected ComboBox    *cm_zone_flt_type;
   protected FloatParam  *fp_zone_flt_cutoff;
   protected FloatParam  *fp_zone_flt_pan;
   protected LayerSwitch *sw_flt_eq;
   protected LayerSwitch *sw_flt_q;
   protected FloatParam  *fp_zone_flt_offset;
   protected FloatParam  *fp_zone_flt_eq_gain;
   protected FloatParam  *fp_zone_flt_resonance;

   protected TableView *tv_samples;
   protected SamplesTM *tm_samples;
   protected PopupMenu *pm_samples;
   protected int last_selected_sample_idx;

   define int NEWSMP_EMPTY       = 0;
   define int NEWSMP_SINE        = 1;
   define int NEWSMP_SINE_AMIGA  = 2;
   define int NEWSMP_CYCLE       = 3;
   define int NEWSMP_CYCLE_AMIGA = 4;
   define int NEWSMP_PATCHPLUGIN = 5;
   define int NEWSMP_FMSTACK     = 6;
   define int NEWSMP_USER        = 7;
   protected int new_sample_mode;
   protected int new_sample_user_idx;
   protected PopupMenu  *pm_sample_add;

   protected Button     *bt_sample_add;
   protected Button     *bt_sample_remove;
   protected Button     *bt_sample_moveup;
   protected Button     *bt_sample_movedown;
   protected TextField  *tf_filter;
   protected CheckBox   *cb_filter_global_audio;
   protected ComboField *cf_nsp_flt;
   protected ComboField *cf_nsp_cur;
   protected Button     *bt_sample_browse;
   protected Button     *bt_sample_load;
   protected Button     *bt_sample_reload;
   protected Button     *bt_sample_saveas;
   protected Button     *bt_sp;
   protected Button     *bt_sp_prev;
   protected Button     *bt_sp_next;
   protected ComboBoxPopup  *sp_popup;

   static TextInputDialog *dlg_new_sample_name;

   static FileNameDialog dialog_sample_filename;

   define int DLG_FILENAME_MODE_LOAD = 1;
   define int DLG_FILENAME_MODE_SAVE = 2;
   int dlg_filename_mode;
   static Dialog_OverwriteSample dialog_overwrite_sample;
   protected boolean b_load_create;  // 1=create new sample before loading
   public    Sample *replace_sample;
   protected byte    replace_sample_prg_id;
   protected byte    replace_sample_nsp;
   protected Sample *preview_sample;
   public    String last_previewed_sample_path;

   static Dialog_CleanupSamples dialog_cleanup_samples;

   static Dialog_DeleteSample dialog_delete_sample;
   static Dialog_DeleteZone dialog_delete_zone;

   static SampleBrowserDialog *dlg_sample_browser;

   static SampleTagSelectionDialog *dlg_sample_tag_selection;

   // Sample Editor
   SampleView *sv_wave;
   float autoselect_sampleview_start_ms;
   float autoselect_sampleview_len_ms;  // -1=keep current selection
   byte  autoselect_note_idx_hint;  // -1=none

   protected Button *bt_audio_tracks;
   protected Button *bt_instr_tracks;
   protected Button *bt_instr_curtrack;
   protected Button *bt_sample_browser;
   protected Button *bt_drum_pad;
   protected Button *bt_synth;
   protected CheckBox *cb_synth_recalc_all;

   public ModSample *mod_sample;  // !null when page is entered from ModSample instance
   public SamplePadCommon *sample_pad_common;          // !null when page is entered from SamplePadForm
   public SamplePad       *sample_pad;
   public SamplePadKit    *sample_pad_kit;
   public SampleTimelineEditorClip  *sample_timeline_editor_clip;  // !null when page is entered from SampleTimelineEditor
   public SampleTimelineModelTrack  *sample_timeline_model_track;  // ..
   public boolean b_return_to_projects_page;  // true=ESCAPE returns to (instrument) tracks page (after editing first mod sample)
   public int     autoselect_sample_idx;  // -1=keep current sample selection
   public int     autoselect_namespace_idx;  // -1=keep current namespace filter
   public boolean b_allow_pgtrack_autoselect;  // true=allow auto-selection from first Track ModSample (auto-resets)
   public int     ui_parent_track_nr;
   protected int  pre_filter_sample_idx;

   // Drum Pad Dialog
   static DrumPadDialog *dlg_drum_pad;

   // Cycle Synth Dialog
   static CycleSynthDialog *dlg_synth;

   protected int last_queried_voice_key = -1;

   // Loop clipboard
   protected int loop_clipboard_start;
   protected int loop_clipboard_len;
   protected int loop_clipboard_rep;

   // Mod Matrix destination options
   //  - update dynamically when zone is selected (voice plugins)
   StringArray mm_dst_names;

   static StringArray additive_osc_names = ["Sine", "Triangle", "Saw Up", "Saw Down", "Pulse"];

   protected int last_edited_env            = 1;  // 0=freq 1=volume 2=pan 3=aux
   protected int last_edited_freq_env_seg   = 0;  // 0=attack, 1=sustain, 2=release
   protected int last_edited_volume_env_seg = 0;  //
   protected int last_edited_pan_env_seg    = 0;  //
   protected int last_edited_aux_env_seg    = 0;  //

   protected static SampleMixerDialog *dlg_samplemixer;
   protected static SampleSelectionDialog *dlg_sampleselection;  // handleRemoveUnreferencedSamples*()


   // <init.png>
   public method init() : boolean {

      if(!initPakFile("PageSample.xfm"))
         return false;

      autoResolveIds(this);

      tf_name_orig_tooltip_caption = tf_name.getToolTipCaption();

      cm_type.setOptions(Sample.type_names);

      fp_volume.setPresetOptions([0.0, -3.0, -6.0, -9.0, -12.0, -15.0, -18.0, -24.0], ["0dB: max", "-3dB: drums", "-6dB: mono synth", "-9dB: mono synth (quiet)", "-12dB: poly synth", "-15dB: poly synth (quiet)", "-18dB: audio clip", "-24dB: audio clip (quiet)"]);

      Utils.SetFloatParamSampleRatePresetOptions(fp_sample_rate);
      Utils.SetFloatParamSampleRatePresetOptions(fp_zone_sample_rate);

      fp_pitchbend_up.setPresetOptions([0.0, 2.0, 7.0, 12.0, 24.0, 36.0, 48.0],
                                       ["0\tOff",
                                        "2\tSemi",
                                        "7\tFifth",
                                        "12\tOct +1",
                                        "24\tOct +2",
                                        "36\tOct +3",
                                        "48\tOct +4"
                                        ]
                                       );

      fp_pitchbend_down.setPresetOptions([0.0, 2.0, 7.0, 12.0, 24.0, 36.0, 48.0],
                                         ["0\tOff",
                                          "2\tSemi",
                                          "7\tFifth",
                                          "12\tOct -1",
                                          "24\tOct -2",
                                          "36\tOct -3",
                                          "48\tOct -4"
                                          ]
                                         );

      cm_modsrc.setOptions(Sample.modsrc_names);
      cm_modsrc.setOptionsLong(Sample.modsrc_names_long);

      local StringArray prgNrs;
      local StringArray prgNrsLong;
      prgNrs.add("-");
      prgNrsLong.add("-");
      local Integer prgNr = 0;
      loop(128)
      {
         prgNr++;
         prgNrs.add(String(prgNr));
         prgNrsLong.add(String(prgNr)+" / $"+prgNr.printf("%02x"));
      }
      cm_prg.setOptions(prgNrs);
      cm_prg.setOptionsLong(prgNrsLong);

      bt_zone_offset_hex.setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_zone_len_hex   .setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));

      bt_perf_mw .setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_perf_bc .setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_perf_fc .setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_perf_ex .setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_perf_gp1.setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_perf_gp2.setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_perf_gp3.setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_perf_gp4.setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));

      cm_zone_key_lo.setOptions(MIDI.midi_notes);
      cm_zone_key_hi.setOptions(MIDI.midi_notes);

      cm_zone_freq_stageop.setOptions(Sample.mm_env_stageop_names);
      cm_zone_freq_stageop.setOptionsLong(Sample.mm_env_stageop_names_long);

      cm_zone_pan_stageop.setOptions(Sample.mm_env_stageop_names);
      cm_zone_pan_stageop.setOptionsLong(Sample.mm_env_stageop_names_long);

      cm_zone_aux_stageop.setOptions(Sample.mm_env_stageop_names);
      cm_zone_aux_stageop.setOptionsLong(Sample.mm_env_stageop_names_long);

      fp_zone_ai_exp_up.setPresetOptions([0.0f, 0.05f,  0.1f,  0.2f,  0.25f,  0.5f,  0.75f,  1.0f, 1.25f,  1.5f,  1.75f,  2.0f],
                                         ["0",  "0.05", "0.1", "0.2", "0.25", "0.5", "0.75", "1",  "1.25", "1.5", "1.75", "2.0"]
                                         );

      fp_zone_ai_exp_down.setPresetOptions([0.0f, 0.05f,  0.1f,  0.2f,  0.25f,  0.5f,  0.75f,  1.0f, 1.25f,  1.5f,  1.75f,  2.0f],
                                           ["0",  "0.05", "0.1", "0.2", "0.25", "0.5", "0.75", "1",  "1.25", "1.5", "1.75", "2.0"]
                                           );

      f_lfo_freq.init();
      f_lfo_volume.init();
      f_lfo_pan.init();
      f_lfo_aux.init();

      int vcalLaneIdx = 0;
      loop(6)
      {
         SampleVCalForm fVCal <= findLayerById("f_vcal_"+(vcalLaneIdx+1));
         fVCal.init(vcalLaneIdx++);
         a_f_vcal.add(fVCal);
      }

      f_glide.init();
      f_liverec.init();

      f_modseq_1.init();
      f_modseq_2.init();
      f_modseq_3.init();
      f_modseq_4.init();

      f_plugin.init();

      cm_zone_ts_ipol.setOptions(Sample.timestretch_interpol_names_short);
      cm_zone_ts_ipol.setOptionsLong(Sample.timestretch_interpol_names_long);
      cm_zone_ts_grain.setOptions(Sample.timestretch_grain_window_names);

      // Init ModMatrix variation form
      f_mm_var <= new SampleMMVarForm;
      if(!f_mm_var.initSampleMMVarForm())
      {
         trace "[!!!] PageSample::initSampleMMVarForm() failed";
         return false;
      }

      // Init ModMatrix entry forms
      for(int mmIdx = 0; mmIdx < STSAMPLE_NUM_MODMATRIX_ENTRIES; mmIdx++)
      {
         SampleMMForm mmForm <= findLayerById("f_mm_"+(mmIdx+1));
         mmForm.initSampleMMForm(mmIdx);
         mm_forms.add(mmForm);
      }

      tm_zones <= new SampleZonesTM;
      tm_zones.initTableModel();
      tm_zones_names <= new SampleZonesNamesTM;
      tm_zones_names.initTableModel();
      tv_zones.setTableModel((true == STConfig.b_pgsample_zone_names) ? tm_zones_names : tm_zones);
      tv_zones.tableModelChanged();
      bt_zone_names.setToggleState(true == STConfig.b_pgsample_zone_names);
      updateZoneDblClickMode();

      tm_loops <= new SampleLoopsTM;
      tm_loops.initTableModel();
      tv_loops.setTableModel(tm_loops);
      tv_loops.tableModelChanged();

      local StringArray noteOffLoopOptions;
      noteOffLoopOptions.add("Off");
      int noteOffLoopIdx = 1;
      loop(128)
         noteOffLoopOptions.add(String(noteOffLoopIdx++));
      fp_zone_noteoff_loop_idx.setUserTable(deref noteOffLoopOptions);

      cm_zone_flt_type.setOptions(Sample.flt_type_names);

      tm_samples <= new SamplesTM;
      tm_samples.initTableModel();
      tv_samples.setTableModel(tm_samples);
      tv_samples.tableModelChanged();

      autoselect_sample_idx = -1;

      mm_dst_names = Sample.mm_dst_names;

      dialog_sample_filename.init("big5");

      sv_wave.installPlugin(this);
      sv_wave.setEnableAllowChannelConversion(true);
      sv_wave.setEnableAutoAddStereoChannel(true);  // convert to stereo when pasting stereo clipboard
      sv_wave.setEnableZeroCrossingMode(true);
      sv_wave.setEnableRegionAutoCycleMode(STConfig.b_pgsample_wave_region_auto_cycle_mode);
      sv_wave.setEnableAutoRecalcRegions(false);
      sv_wave.setEnableAutochop(false);
      sv_wave.setEnableMarkerCreate(false);
      sv_wave.setEnableMarkerDelete(false);
      sv_wave.setEnableExport(false);

      autoselect_sampleview_len_ms = -1;
      autoselect_note_idx_hint = -1;
      ui_parent_track_nr = -1;

      recursiveSetEnableCursorKeyTabCycling(false);

      if(STConfig.b_pgsample_sampleview_ontop)
         spl_sample.swapLayers();

      spl_sample.setSplit(STConfig.pgsample_sample_verticalsplit);
      spl_smpzones.setSplit(STConfig.pgsample_smpzones_verticalsplit);

      ta_zone_midi       <= TimerAction.New(TA_ZONE_MIDI,       this, 100);
      ta_update_partials <= TimerAction.New(TA_UPDATE_PARTIALS, this, 100);

      return true;
   }

   // <method_get.png>
   public method getSampleSplit() : float {
      // called by ConfigIO
      return spl_sample.getSplit();
   }

   // <method_get.png>
   public method getSmpZonesSplit() : float {
      // called by ConfigIO
      return spl_smpzones.getSplit();
   }

   // <ui_page.png>
   public method pageEnter() {
      // (note) may be called more often than pageLeave, see
      Page::pageEnter();
      getRoot().addOverlay(sv_wave);

      pageUpdate();

      if(STConfig.b_scope_pgsample_autoshowhide)
         Dialogs.ShowScopeDialog();
   }

   // <ui_page.png>
   public virtual pageUpdate() {

      // Sample namespace options
      updateNamespaceOptions();

      Global.Debug("PageSample::pageEnter: mod_sample="+#(mod_sample)+" sample_pad_common="+#(sample_pad_common)+" autoselect_sample_idx="+autoselect_sample_idx+" autoselect_namespace_idx="+autoselect_namespace_idx);

      if(null != mod_sample)
         cf_nsp_flt.setSelectedOption(mod_sample.preferred_namespace_idx);
      else if(null != sample_pad_common)
         cf_nsp_flt.setSelectedOption(sample_pad_common.namespace_idx);
      else if(-1 != autoselect_namespace_idx)
      {
         cf_nsp_flt.setSelectedOption(autoselect_namespace_idx);
         autoselect_namespace_idx = -1;
      }

      if(null != sample_timeline_editor_clip)
      {
         cb_filter_global_audio.setSelected(maybe);  // show audio samples only
      }
      else
      {
         cb_filter_global_audio.setSelected(true);  // don't show audio samples
      }

      tf_filter.setText("");
      // (todo) invalidate sample table after project (re-)load
      updateSampleTable(null/*reselectSample*/);
      tv_samples.centerRow();

      if(-1 == autoselect_sample_idx)
      {
         handleSelectSample(false/*bStopAudio*/);
      }
      else
      {
         // When invoked from ModGridSampleButton
         Global.Debug("PageSample::pageEnter: autoselect_sample_idx="+autoselect_sample_idx);
         moveCursorToSampleIdxNoAction(autoselect_sample_idx);
         autoselect_sample_idx = -1;
         handleSelectSample(false/*bStopAudio*/);
      }

      tv_samples.moveCursorToFirstRowIfNoneSelected();
      tv_samples.autoScrollAhead(2/*numRows*/);

      ta_zone_midi.schedule();

      if( null != mod_sample || null != sample_pad )
      {
         if(null != sample_pad_common)
            bt_sp.setCaption("PAD "+sample_pad_common.getName());
         else
            bt_sp.setCaption("TRACK "+ui_parent_track_nr);
         bt_sp.setEditable(true);
         bt_sp_prev.setEditable(true);
         bt_sp_next.setEditable(true);

         Track parentTrack <= current_project.getTrackByIdx(ui_parent_track_nr - 1);
         if(null != parentTrack)
         {
            replay.redirectRemoteEvents(parentTrack.dev_idx, parentTrack.midi_ch);
         }
         else
         {
            // Should not be reachable
            replay.redirectRemoteEvents(-1/*devIdx*/, -1/*midiCh*/);
         }
      }
      else
      {
         bt_sp.setCaption("TEMP");
         bt_sp.setEditable(false);
         bt_sp_prev.setEditable(false);
         bt_sp_next.setEditable(false);

         replay.redirectRemoteEvents(-1/*devIdx*/, -1/*midiCh*/);
      }

      f_modseq_1.onEnterForm();
      f_modseq_2.onEnterForm();
      f_modseq_3.onEnterForm();
      f_modseq_4.onEnterForm();

      attachModMatrixVarForm();  // attach to 'Ctl 1' or 'Ctl 2' tab

      if(autoselect_sampleview_len_ms >= 0)
      {
         sv_wave.setSelectionMS(autoselect_sampleview_start_ms, autoselect_sampleview_len_ms);
         autoselect_sampleview_len_ms = -1;
      }

      if(autoselect_note_idx_hint >= 0)
      {
         trySelectZonesByNoteIdx(autoselect_note_idx_hint);
         autoselect_note_idx_hint = -1;
      }

   }

   // <ui_page.png>
   public virtual pageLeave() {

      if(STConfig.b_scope_pgsample_autoshowhide)
         Dialogs.HideScopeDialog();

      if(null != pm_zone_env_quick_preset)
         pm_zone_env_quick_preset.hide();

      if(null != pm_zones)
         pm_zones.hide();

      if(null != pm_loops)
         pm_loops.hide();

      if(null != pm_samples)
         pm_samples.hide();

      f_modseq_4.onLeaveForm();
      f_modseq_3.onLeaveForm();
      f_modseq_2.onLeaveForm();
      f_modseq_1.onLeaveForm();

      mod_sample <= null;
      sample_pad_common <= null;
      sample_pad        <= null;
      sample_pad_kit    <= null;
      sample_timeline_editor_clip <= null;
      sample_timeline_model_track <= null;

      sv_wave.setSample(null/*waveform*/, null/*samples*/, 0/*numCh*/, 0/*sampleRate*/);
      getRoot().removeOverlay(sv_wave);
      UI.CancelScheduleFor(sv_wave);
      autoselect_sampleview_len_ms = -1;
      autoselect_note_idx_hint = -1;

      Audio.ResetAllTempSamples();
      Audio.UpdateTemporarySampleFromWaveform(null);
      Audio.UpdateTempRefSample(null);
      replay.redirectRemoteEvents(-1/*devIdx*/, -1/*midiCh*/);

      hideSampleBrowser();
      hideDrumPadDialog();

      ta_zone_midi.cancel();
      ta_update_partials.cancel();

      b_return_to_projects_page = false;
      ui_parent_track_nr = -1;
   }

   // <ui_page.png>
   public virtual pageGetActiveSampleView() : SampleView {
      return sv_wave;
   }

   // <ui_handle.png>
   public method invalidateSampleView() {
      sv_wave.setSample(null/*waveform*/, null/*samples*/, 0/*numCh*/, 0/*sampleRate*/);
   }

   // <ui_update.png>
   public method updateSampleTable(Sample _reselectSampleOrNull) {
      // trace "xxx updateSampleTable: reselectSampleOrNull="+#(_reselectSampleOrNull);
      int oldRowIdx = tm_samples.getCursorIndex();
      tm_samples.rebuildEntries(tf_filter.getText(),
                                cf_nsp_flt.getSelectedOption(),
                                cb_filter_global_audio.isSelected(),
                                autoselect_sample_idx/*excludeFromFilterSampleIdx*/
                                );
      tv_samples.tableModelChanged();

      if(null != _reselectSampleOrNull)
         tm_samples.moveCursorToSampleNoAction(_reselectSampleOrNull);
      else
         tv_samples.moveCursorToRowNoAction(oldRowIdx);

      tv_samples.makeCursorRowVisible();
      tv_samples.autoScrollAhead(2/*numRows*/);
   }

   // <ui_update.png>
   public method updateZoneTable() {
      // called by SampleMixerDialog / ZoneMixForm
      tv_zones.tableModelChanged();
   }

   // <ui_handle.png>
   public method renameCurrentSampleInTable() {
      // called when F2 is pressed while samples table has focus
      int rowIdx = tm_samples.getCursorIndex();
      if(-1 != rowIdx)
      {
         // Show TableCellEditorString
         tm_samples.editColumn(SamplesTM.COL_NAME, rowIdx);
      }
   }

   // <ui_handle.png>
   public method renameCurrentZoneInTable() {
      // called when F2 is pressed while zones table with "names" model has focus
      if(@(tv_zones.getTableModel()) == @(tm_zones_names))
      {
         int rowIdx = tm_zones_names.getCursorIndex();
         if(-1 != rowIdx)
         {
            // Show TableCellEditorString
            tm_zones_names.editColumn(SampleZonesNamesTM.COL_NAME, rowIdx);
         }
      }
   }

   // <ui_handle.png>
   public method editLastEditedLoopsColumn() {
      // called when F2 is pressed while loops table has focus
      int rowIdx = tm_loops.getCursorIndex();
      if(-1 != rowIdx)
      {
         // Show TableCellEditorFloatParam
         tm_loops.editColumn(SampleLoopsTM.last_edited_col, rowIdx);
      }
   }

   // <ui_update.png>
   public method updateSampleInfoWhenVisible() {
      if(pageIsCurrent())
      {
         handleSelectSample(false/*bStopAudio*/);
         handleSelectZone(false/*bStopAudio*/);
      }
   }

   // <method.png>
   public method moveCursorToSampleIdxNoAction(int _smpIdx) : int {
      tm_samples.moveCursorToSampleIdxNoAction(_smpIdx);
      tv_samples.makeCursorRowVisible();
      tv_samples.autoScrollAhead(2/*numRows*/);
   }

   // <method.png>
   public method selectSamplePrev() {
      tv_samples.moveCursorToPreviousRow();
   }

   // <method.png>
   public method selectSampleNext() {
      tv_samples.moveCursorToNextRow();
   }

   // <method.png>
   public method selectContextSamplePrev() {
      if(null != mod_sample)
         selectTrackSamplePrev();
      else if(null != sample_pad)
         selectSamplePadPrev();
      else
         selectSamplePrev();
   }

   // <method.png>
   public method selectContextSampleNext() {
      if(null != mod_sample)
         selectTrackSampleNext();
      else if(null != sample_pad)
         selectSamplePadNext();
      else
         selectSampleNext();
   }

   // <ui.png>
   public virtual pageFocusDefault() {
      UI.SetKeyboardFocus(tv_samples);
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {

      switch(ts_groups.getActiveTabIndex())
      {
         case TAB_PATCH:
            _retLayers.joinRR(_retLayers,
                              [
                                 tf_name,
                                 cb_persistent,
                                 tf_info,
                                 bt_info,
                                 bt_tags,

                                 fp_maxvoices,
                                 // // cm_syn,
                                 cb_procedural,
                                 cm_src_track,
                                 cb_audio,
                                 fp_audio_bpm,
                                 bt_prg_assign,
                                 cm_prg,

                                 fp_transpose_oct,
                                 fp_transpose_semi,
                                 fp_transpose_cents,
                                 fp_freq_rand,
                                 fp_pitchbend_up,
                                 fp_pitchbend_down,
                                 fp_sample_rate,
                                 cb_uniquenotes,
                                 cb_realloc,
                                 bt_sample_tuning,

                                 fp_volume,
                                 fp_volume_rand,
                                 fp_pan,
                                 fp_pan_rand,
                                 fp_sampleoff_rand,

                                 fp_perf_mw,
                                 fp_perf_bc,
                                 fp_perf_fc,
                                 fp_perf_ex,
                                 fp_perf_gp1,
                                 fp_perf_gp2,
                                 fp_perf_gp3,
                                 fp_perf_gp4,
                                 cb_perfctlfreeze,
                                 cb_sustain,

                               ]
                              );
            break;

         case TAB_REINIT:
            _retLayers.joinRR(_retLayers,
                              [
                                 cm_type,
                                 fp_grid_size,
                                 bt_reinit_zones,
                                 cb_reinit_loop,
                                 bt_reinit_drum,
                                 ]
                              );
            break;

         case TAB_ZONE:
            _retLayers.joinRR(_retLayers,
                              [
                                 fp_zone_maxvoices,
                                 cm_zone_mutex_group,
                                 cm_zone_voicebus,
                                 fp_zone_delay,
                                 fp_zone_delay_mul,

                                 fp_zone_sample_rate,
                                 cm_zone_interpolation,
                                 cm_zone_interpolation_order,
                                 bt_zone_lofi,
                                 cm_zone_srr,
                                 fp_zone_srr_mask,
                                 cm_zone_br,
                                 fp_zone_br_mask,
                                 fp_zone_br_preamp,

                                 fp_zone_sampleoff_rel,
                                 fp_zone_sampleoff_rand,
                                 fp_zone_sampleoff_velamt,
                                 cb_zone_sampleoff_velamt_invert,

                                 cm_zone_ai,
                                 fp_zone_ai_q,
                                 fp_zone_ai_exp_up,
                                 fp_zone_ai_exp_down,
                                 fp_zone_ai_lin_oct,
                                 fp_zone_ai_lin_max
                                 ]
                              );
            break;

         case TAB_COMMON:
            _retLayers.joinRR(_retLayers,
                              [
                                 fp_zone_transpose_oct,
                                 fp_zone_transpose_semi,
                                 fp_zone_transpose_cents,
                                 fp_zone_freqlfoamt,
                                 fp_zone_beatfreq,
                                 fp_zone_freqenvamt,
                                 bt_zone_tuning,

                                 fp_zone_volume,
                                 fp_zone_volume_vel,
                                 fp_zone_vollfoamt,
                                 fp_zone_volume_ramp_up,
                                 fp_zone_volume_ramp_down,
                                 cb_zone_sampleoff_freezequiet,

                                 fp_zone_pan,
                                 fp_zone_panenvamt,
                                 fp_zone_panlfoamt,

                                 fp_zone_flt_env_amt,
                                 fp_zone_flt_env_velamt,
                                 fp_zone_flt_lfo_amt,
                                 fp_zone_flt_kbd_amt,
                                 cb_zone_auxtowav,

                                 fp_zone_mm_kbd_min,
                                 fp_zone_mm_kbd_ctr,
                                 fp_zone_mm_kbd_max,

                                 ]
                              );
            break;

         case TAB_FILTER:
            _retLayers.joinRR(_retLayers,
                              [
                                 cb_zone_flt_en,
                                 cm_zone_flt_type,
                                 fp_zone_flt_cutoff,
                                 fp_zone_flt_pan
                               ]
                              );

            if(1 == sw_flt_eq.getCurrentChildNr())
               _retLayers.add(fp_zone_flt_eq_gain);
            else
               _retLayers.add(fp_zone_flt_offset);

            if(1 == sw_flt_q.getCurrentChildNr())
               _retLayers.add(fp_zone_flt_resonance);
            break;

         case TAB_ENV:  // Envelopes
            _retLayers.joinRR(_retLayers,
                              [
                                 bt_zone_freq_quick,
                                 bt_zone_freq_a,
                                 fp_zone_freq_a_speed,
                                 bt_zone_freq_s,
                                 fp_zone_freq_s_speed,
                                 cb_zone_freq_s_loop,
                                 bt_zone_freq_r,
                                 fp_zone_freq_r_speed,
                                 fp_zone_freq_adsr_level,
                                 fp_zone_freq_adsr_time,
                                 cm_zone_freq_stageop,

                                 bt_zone_volume_quick,
                                 bt_zone_volume_a,
                                 fp_zone_volume_a_speed,
                                 bt_zone_volume_s,
                                 fp_zone_volume_s_speed,
                                 cb_zone_volume_s_loop,
                                 bt_zone_volume_r,
                                 fp_zone_volume_r_speed,
                                 fp_zone_volume_adsr_int,
                                 fp_zone_volume_adsr_time,

                                 bt_zone_pan_quick,
                                 bt_zone_pan_a,
                                 fp_zone_pan_a_speed,
                                 bt_zone_pan_s,
                                 fp_zone_pan_s_speed,
                                 cb_zone_pan_s_loop,
                                 bt_zone_pan_r,
                                 fp_zone_pan_r_speed,
                                 fp_zone_pan_adsr_level,
                                 fp_zone_pan_adsr_time,
                                 cm_zone_pan_stageop,

                                 bt_zone_aux_quick,
                                 bt_zone_aux_a,
                                 fp_zone_aux_a_speed,
                                 bt_zone_aux_s,
                                 fp_zone_aux_s_speed,
                                 cb_zone_aux_s_loop,
                                 bt_zone_aux_r,
                                 fp_zone_aux_r_speed,
                                 fp_zone_aux_adsr_level,
                                 fp_zone_aux_adsr_time,
                                 cm_zone_aux_stageop,

                                 ]
                              );
            break;

         case TAB_LFO_FREQ:
            f_lfo_freq.addTabCycleOverrides(_retLayers);
            break;

         case TAB_LFO_VOL:
            f_lfo_volume.addTabCycleOverrides(_retLayers);
            break;

         case TAB_LFO_PAN:
            f_lfo_pan.addTabCycleOverrides(_retLayers);
            break;

         case TAB_LFO_AUX:
            f_lfo_aux.addTabCycleOverrides(_retLayers);
            break;
      }

      switch(ts_zone.getActiveTabIndex())
      {
         case ZONE_TAB_LOOPS:
            _retLayers.joinRR(_retLayers,
                              [
                                 fp_zone_noteoff_loop_idx,
                                 cb_zone_noteoff_loop_immediate,
                                 cb_zone_fromstart,
                                 cb_zone_jumptoloop_immediately,
                                 cm_zone_play_mode,
                                 cm_zone_loopfade,

                                 cb_zone_timedloop,
                                 cb_zone_timedloop_fade,
                                 cb_zone_timedloop_oneshot,

                                 tv_loops,
                                 bt_loop_add,
                                 bt_loop_remove,
                                 bt_loop_moveup,
                                 bt_loop_movedown,

                                 fp_zone_offset,
                                 fp_zone_len,
                                 fp_zone_rep,
                                 bt_zone_autoloop
                               ]
                              );
            break;

         case ZONE_TAB_GLIDE:
            f_glide.addTabCycleOverrides(_retLayers);
            break;

         case ZONE_TAB_WT:
            _retLayers.joinRR(_retLayers,
                              [
                                 cb_zone_ts,
                                 cb_zone_ts_staticcyclelen,
                                 cb_zone_ts_xfade,
                                 cb_zone_ts_abs,
                                 cb_zone_ts_additive,
                                 cm_zone_ts_win,
                                 cb_zone_ts_additive_win,
                                 cb_zone_ts_additive_true_freq,
                                 fp_zone_ts_cyclelen_reset,
                                 cb_zone_ts_phase_0,
                                 fp_zone_ts_numpartials,
                                 bt_zone_ts_export,
                                 fp_zone_ts_stereo_spread,

                                 fp_zone_ts_osc_edit_cfg,
                                 cb_zone_ts_osc_force_edit_cfg,
                                 bt_zone_ts_osc_cfg_copy,
                                 bt_zone_ts_osc_cfg_paste,

                                 fp_zone_ts_osc_lvl_sin,
                                 fp_zone_ts_osc_pha_sin,
                                 fp_zone_ts_osc_exa_sin,
                                 fp_zone_ts_osc_exl_sin,
                                 fp_zone_ts_osc_flt_sin,
                                 fp_zone_ts_osc_lvl_tri,
                                 fp_zone_ts_osc_pha_tri,
                                 fp_zone_ts_osc_exa_tri,
                                 fp_zone_ts_osc_exl_tri,
                                 fp_zone_ts_osc_flt_tri,
                                 fp_zone_ts_osc_lvl_sup,
                                 fp_zone_ts_osc_pha_sup,
                                 fp_zone_ts_osc_exa_sup,
                                 fp_zone_ts_osc_exl_sup,
                                 fp_zone_ts_osc_flt_sup,
                                 fp_zone_ts_osc_lvl_sdn,
                                 fp_zone_ts_osc_pha_sdn,
                                 fp_zone_ts_osc_exa_sdn,
                                 fp_zone_ts_osc_exl_sdn,
                                 fp_zone_ts_osc_flt_sdn,
                                 fp_zone_ts_osc_lvl_pul,
                                 fp_zone_ts_osc_pha_pul,
                                 fp_zone_ts_osc_exa_pul,
                                 fp_zone_ts_osc_exl_pul,
                                 fp_zone_ts_osc_flt_pul,
                                 cb_zone_ts_osc_normalize,
                                 cm_zone_ts_osc_srr,
                                 fp_zone_ts_osc_srr_mask,
                                 cm_zone_ts_osc_br,
                                 fp_zone_ts_osc_br_mask,
                                 fp_zone_ts_osc_br_preamp,

                                 fp_zone_ts,
                                 bt_zone_ts_findroot,
                                 fp_zone_ts_granularity,
                                 fp_zone_ts_granularity_fine,
                                 fp_zone_ts_additive_xfade,
                                 fp_zone_ts_granularity_amt,
                                 fp_zone_ts_phase_rand_amt,
                                 fp_zone_ts_2d_w,
                                 fp_zone_ts_2d_h,

                                 cm_zone_ts_ipol,
                                 fp_zone_ts_bend,

                                 cm_zone_ts_grain,
                                 fp_zone_ts_additive_wexp,
                                 fp_zone_ts_additive_bexp,
                                 fp_zone_ts_additive_mexp,
                                 fp_zone_ts_additive_mbexp,
                               ]
                              );
            break;

         case ZONE_TAB_REC:
            f_liverec.addTabCycleOverrides(_retLayers);
            break;

         case ZONE_TAB_MODSEQ_1:
            f_modseq_1.addTabCycleOverrides(_retLayers);
            break;

         case ZONE_TAB_MODSEQ_2:
            f_modseq_2.addTabCycleOverrides(_retLayers);
            break;

         case ZONE_TAB_MODSEQ_3:
            f_modseq_3.addTabCycleOverrides(_retLayers);
            break;

         case ZONE_TAB_MODSEQ_4:
            f_modseq_4.addTabCycleOverrides(_retLayers);
            break;

         case ZONE_TAB_VCAL:
            SampleVCalForm *fVCal;
            foreach fVCal in a_f_vcal
               fVCal.addTabCycleOverrides(_retLayers);
            break;

         case ZONE_TAB_CTL_1:
            _= mm_forms[0].addTabCycleOverrides(_retLayers);
            _= mm_forms[1].addTabCycleOverrides(_retLayers);
            _= mm_forms[2].addTabCycleOverrides(_retLayers);
            _= mm_forms[3].addTabCycleOverrides(_retLayers);
            _= mm_forms[4].addTabCycleOverrides(_retLayers);
            _= mm_forms[5].addTabCycleOverrides(_retLayers);
            _= mm_forms[6].addTabCycleOverrides(_retLayers);
            _= mm_forms[7].addTabCycleOverrides(_retLayers);
            break;

         case ZONE_TAB_CTL_2:
            _= mm_forms[8].addTabCycleOverrides(_retLayers);
            _= mm_forms[9].addTabCycleOverrides(_retLayers);
            _= mm_forms[10].addTabCycleOverrides(_retLayers);
            _= mm_forms[11].addTabCycleOverrides(_retLayers);
            _= mm_forms[12].addTabCycleOverrides(_retLayers);
            _= mm_forms[13].addTabCycleOverrides(_retLayers);
            _= mm_forms[14].addTabCycleOverrides(_retLayers);
            _= mm_forms[15].addTabCycleOverrides(_retLayers);
            break;

         case ZONE_TAB_FX:
            f_plugin.addTabCycleOverrides(_retLayers);
            break;
      }

      _retLayers.joinRR(_retLayers, [
         tv_zones,
         bt_zone_add,
         bt_zone_remove,
         bt_zone_moveup,
         bt_zone_movedown,
         bt_zone_names,
         bt_zone_reinit,

         bt_sample_mixer,
         cb_zone_midi,
         cb_zone_autoselect,
         cb_zone_solo,
         cm_zone_key_lo,
         cm_zone_key_hi,
         fp_zone_vel_lo,
         fp_zone_vel_hi,
         cb_zone_alt,
         cm_modsrc,
         cb_modsrc_noteon,
         fp_zone_mod_lo,
         fp_zone_mod_hi,
         fp_zone_mod_fadein,
         fp_zone_mod_fadeout,
         cb_zone_mod_flt,

         tv_samples,
         bt_sample_add,
         bt_sample_remove,
         bt_sample_moveup,
         bt_sample_movedown,
         tf_filter,
         cf_nsp_flt,
         cb_filter_global_audio,
         cf_nsp_cur,
         bt_sample_browse,
         bt_sample_load,
         bt_sample_reload,
         bt_sample_saveas,

         bt_audio_tracks,
         bt_instr_tracks,
         bt_instr_curtrack,
         bt_sample_browser,
         bt_drum_pad,
         bt_synth,
                              ]
                     );

   }

   // <ui_handle.png>
   protected method showAudioTracks() {
      root_form.showPage(RootForm.PAGE_AUDIO, true/*bAllowHistory*/);
   }

   // <ui_handle.png>
   protected method showInstrumentTracks() {
      root_form.showPage(RootForm.PAGE_PROJECT, true/*bAllowHistory*/);
   }

   // <ui_show.png>
   public method showSampleBrowser(boolean _bESA) {

      hideSampleBrowser();

      if(null == dlg_sample_browser)
      {
         dlg_sample_browser <= new SampleBrowserDialog;
         dlg_sample_browser.initSampleBrowserDialog();
      }

      dlg_sample_browser.showSampleBrowserDialog(_bESA);

      if(_bESA)
      {
         dlg_sample_browser.tryMoveCursorToSample(getSelectedSample());
      }
      else
      {
         bt_sample_browser.setToggleState(true);
         bt_sample_browser.redraw();
      }
   }

   // <method_get.png>
   public method isSampleBrowserVisible() : boolean {
      if(null != dlg_sample_browser)
         return dlg_sample_browser.isFloatingLayerVisible();
      return false;
   }

   // <ui_hide.png>
   public method hideSampleBrowser() {
      if(isSampleBrowserVisible())
      {
         dlg_sample_browser.hide();
         bt_sample_browser.setToggleState(false);
         bt_sample_browser.redraw();
      }
   }

   // <ui_show.png>
   public method toggleSampleBrowser() {
      if(isSampleBrowserVisible())
         hideSampleBrowser();
      else
         showSampleBrowser(false/*bESA*/);
   }

   // <ui_show.png>
   public method showSampleTagSelectionDialog() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         if(null == dlg_sample_tag_selection)
         {
            dlg_sample_tag_selection <= new SampleTagSelectionDialog;
            dlg_sample_tag_selection.initSampleTagSelectionDialog(true/*bEdit*/);
         }

         dlg_sample_tag_selection.showSampleTagSelectionDialog(sample.tags, this/*listener*/);
         Global.Print("Show sample tags dialog");
      }
   }

   // <ui_handle.png>
   protected method handleSampleTagsChanged() {
      local StringArray aNewTags <= dlg_sample_tag_selection.getSelectedTags();
      trace "[trc] PageSample::handleSampleTagsChanged: new tags="+#(aNewTags);
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.tags = aNewTags;
         updateTagsButtonTint();
         sample.markParamsAsModified();
         current_project.markAsModified();
      }
   }

   // <ui_show.png>
   protected method showSampleTagsMenu(boolean _bFocusFirst) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         pm_tags <= PopupMenu.New(this);
         PopupMenuButton *pmb;
         PopupMenu pm <= pm_tags;

         local StringArray aAutoAdd <= sample.findAutoAddTags();
         int numAdd = Utils.FindNumAddableStrings(sample.tags, aAutoAdd);
         pmb <= pm.addDefaultButton("Auto-Add Tags ("+numAdd+")",
                                    "tags_auto"
                                    );
         pmb.setAccelerators("", "lshift-t");
         pmb.setActive(numAdd > 0);

         pm.addSeparator();
         pmb <= pm.addDefaultButton("Copy Tags ("+sample.tags.numElements+")",
                                    "tags_copy"
                                    );

         pm.addSeparator();
         pmb <= pm.addDefaultButton("Paste Tags ("+tags_clipboard.numElements+")",
                                    "tags_paste"
                                    );

         pm.addSeparator();
         pmb <= pm.addDefaultButton("Clear Tags ("+sample.tags.numElements+")",
                                    "tags_clear"
                                    );

         pm.resizeToMinimum();
         pm.showBelowLayer(bt_tags);
         if(_bFocusFirst)
            pm.focusNextMenuItem();

         Global.Print("Show sample tags menu");
      }
   }

   // <ui_handle.png>
   public method handleTagsAutoAdd() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local StringArray aAutoAdd <= sample.findAutoAddTags();
         int numAdded = Utils.MergeStringArrays(sample.tags, aAutoAdd);
         Utils.SortStringArray(sample.tags, false/*bCS*/);
         Global.PrintShort("Auto-Add "+numAdded+" tag"+Utils.GetPluralString(numAdded));  // 500ms
         Global.Print(Utils.SortStringArrayAndMergeToString(sample.tags, " "));
         updateTagsButtonTint();
         sample.markParamsAsModified();
         current_project.markAsModified();
         redraw();
      }
   }

   // <ui_handle.png>
   public method handleTagsCopy(StringArray _other) {
      int numTags = 0;
      if(null != _other)
      {
         // when called from SampleTagSelectionDialog
         tags_clipboard = _other;
         numTags = _other.numElements;
      }
      else
      {
         Sample sample <= getSelectedSample();
         if(null != sample)
         {
            tags_clipboard = sample.tags;
            numTags = sample.tags.numElements;
         }
      }
      Global.Print("Copy "+numTags+" tag"+Utils.GetPluralString(numTags)+" to clipboard");
   }

   // <ui_handle.png>
   public method handleTagsPaste() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.tags = tags_clipboard;
         Utils.SortStringArray(sample.tags, false/*bCS*/);
         updateTagsButtonTint();
         sample.markParamsAsModified();
         current_project.markAsModified();
         int numTags = tags_clipboard.numElements;
         Global.PrintShort("Paste "+numTags+" tag"+Utils.GetPluralString(numTags)+" from clipboard");
         Global.Print(Utils.SortStringArrayAndMergeToString(sample.tags, " "));
      }
   }

   // <ui_handle.png>
   protected method handleTagsClear() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         int num = sample.tags.numElements;
         sample.tags.empty();
         updateTagsButtonTint();
         sample.markParamsAsModified();
         current_project.markAsModified();
         Global.Print("Clear "+num+" sample tag"+Utils.GetPluralString(num));
      }
   }

   // <ui_show.png>
   public method showDrumPadDialog() {
      if(null == dlg_drum_pad)
      {
         dlg_drum_pad <= new DrumPadDialog;
         dlg_drum_pad.initDrumPadDialog();
      }

      if(!isDrumPadDialogVisible())
      {
         dlg_drum_pad.showDrumPadDialog();
         bt_drum_pad.setToggleState(true);
         bt_drum_pad.redraw();
      }
   }

   // <ui_hide.png>
   public method hideDrumPadDialog() {
      if(isDrumPadDialogVisible())
      {
         dlg_drum_pad.hide();
         bt_drum_pad.setToggleState(false);
         bt_drum_pad.redraw();
      }
   }

   // <method_get.png>
   public method isDrumPadDialogVisible() : boolean {
      if(null != dlg_drum_pad)
         return dlg_drum_pad.isFloatingLayerVisible();
      return false;
   }

   // <ui_show.png>
   public method toggleDrumPadDialog() {
      if(isDrumPadDialogVisible())
         hideDrumPadDialog();
      else
         showDrumPadDialog();
   }

   // <ui_update.png>
   public method updateDrumPadDialogPadHighlights() {
      if(isDrumPadDialogVisible())
      {
         dlg_drum_pad.highlightSelectedZonePads();
         UI.LoseMouseFocusIfWithin(dlg_drum_pad);
         UI.LoseKeyboardFocusIfWithin(dlg_drum_pad, true/*bQuiet*/);
      }
   }

   // <ui_show.png>
   public method showSampleMixerDialog() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         if(null == dlg_samplemixer)
         {
            dlg_samplemixer <= new SampleMixerDialog;
            dlg_samplemixer.initSampleMixerDialog();

            dlg_samplemixer.restorePositionIfValid(UI.IsHiDPI()
                                                   ? STConfig.pgsample_samplemixer_pos_hidpi
                                                   : STConfig.pgsample_samplemixer_pos_lodpi
                                                   );
         }

         dlg_samplemixer.showSampleMixerDialog(smp);
      }
   }

   // <ui_show.png>
   public method showSampleSelectionDialog(PointerArray _samples, String _sTitle, String _sOkCaption) {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         if(null == dlg_sampleselection)
         {
            dlg_sampleselection <= new SampleSelectionDialog;
            dlg_sampleselection.initSampleSelectionDialog();

            dlg_sampleselection.restoreGeometryIfValid(UI.IsHiDPI()
                                                       ? STConfig.pgsample_sampleselection_geo_hidpi
                                                       : STConfig.pgsample_sampleselection_geo_lodpi
                                                       );
         }

         // (note) dialog copies 'samples' array
         dlg_sampleselection.showSampleSelectionDialog(deref _samples, _sTitle, _sOkCaption, this/*recipient*/);
      }
   }

   // <ui_show.png>
   public method showCycleSynthDialog() : boolean {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         if(smp.isMono())
         {
            if(null == dlg_synth)
            {
               dlg_synth <= new CycleSynthDialog;
               dlg_synth.initCycleSynthDialog();

               dlg_synth.restoreGeometryIfValid(UI.IsHiDPI()
                                                ? STConfig.cycle_geo_hidpi
                                                : STConfig.cycle_geo_lodpi
                                                );
            }

            dlg_synth.showCycleSynthDialog();
            return true;
         }
         else
            Global.Warning("Synth: sample must be MONO");
      }
      else
         Global.Warning("Synth: no sample selected");
      return false;
   }

   // <ui_show.png>
   public method tryShowVoicePluginParamEditor() : boolean {
      return f_plugin.showGenericParamDialog();
   }

   // <ui_show.png>
   public method tryShowCycleSynthDialog() : boolean {
      // Returns false when sample does not use 'Cycle' synth mode (b_procedural)
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         if( (smp.b_procedural && smp.isMono()) ||
             (-1 != smp.cycle_state.findLastAssignedPatchIdx())
             )
            return showCycleSynthDialog();
      }
      return false;
   }

   // <ui_show.png>
   protected method tryShowFMStackEditor() : boolean {
      return f_plugin.tryEditFMStackPlugin();
   }

   // <ui_show.png>
   protected method tryShowFMStackEditorOrCycleSynthDialogOrZoomToHighlightedRegion() {
      if(tryShowFMStackEditor())
         ts_zone.setActiveTabIndex(ZONE_TAB_FX/*Plugins*/);
      else if(tryShowCycleSynthDialog())
         return;
      else
         selectAndZoomToHighlightedRegion();
   }

   // <ui_update.png>
   public method handlePluginEditorWindowClosed() {
      // called when FMStack editor window is closed
      //  (=> update dynamic parameter and modulation target names)
      f_plugin.handleSelectPluginSlot(false/*bFromUI*/);
      updateMM(true/*bUpdateVarForm*/);
   }

   // <ui_show.png>
   protected method attachModMatrixVarForm() {
      if(ZONE_TAB_CTL_1 == ts_zone.getActiveTabIndex())
         if(p_ctl1_var.getNumChildLayers() > 0)
            return;  // already attached

      if(ZONE_TAB_CTL_2 == ts_zone.getActiveTabIndex())
         if(p_ctl2_var.getNumChildLayers() > 0)
            return;  // already attached

      UI.LoseKeyboardFocusIfWithin(p_ctl1_var, true/*bQuiet*/);
      UI.LoseMouseFocusIfWithin(p_ctl1_var);
      p_ctl1_var.removeChildren();

      UI.LoseKeyboardFocusIfWithin(p_ctl2_var, true/*bQuiet*/);
      UI.LoseMouseFocusIfWithin(p_ctl2_var);
      p_ctl2_var.removeChildren();

      if(ZONE_TAB_CTL_1 == ts_zone.getActiveTabIndex())
      {
         p_ctl1_var.addChildLayer(f_mm_var);
         p_ctl1.relayout();
      }
      else if(ZONE_TAB_CTL_2 == ts_zone.getActiveTabIndex())
      {
         p_ctl2_var.addChildLayer(f_mm_var);
         p_ctl2.relayout();
      }

   }

   // <ui_handle.png>
   protected method handleCycleRecalcAllChanged() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         smp.cycle_state.setEnableRecalcAll(cb_synth_recalc_all.isSelected());
         Global.Print("Cycle Recalc-all is "+Utils.GetEnableString(smp.cycle_state.b_recalc_all));
      }
   }

   // <ui_update.png>
   public method updateCycleRecalcAll() {
      // called when CycleSynthDialog is closed
      Sample smp <= getSelectedSample();
      if(null != smp)
         cb_synth_recalc_all.setSelected(smp.cycle_state.b_recalc_all);
   }

   // <method.png>
   public method recalcAllCyclePatchesOrRenderTrack() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         int t;
         if(smp.src_track_idx >= 0)
         {
            StWaveform wf <= smp.waveform;
            int msWav = wf.numFrames / (wf.sampleRate / 1000.0);
            t = milliSeconds();
            smp.renderSourceTrack();
            t = milliSeconds() - t;
            local Float fo = float(msWav) / t;
            Global.Print("Render \""+cm_src_track.getSelectedOptionNameLong()+"\"("+msWav+"ms) in "+t+"ms => "+fo.printf("%3.2f")+"x realtime");
            Global.Profile("PageSample::recalcAllCyclePatchesOrRenderTrack: renderSourceTrack() took "+t+"ms");
            UI.RedrawAll();
         }
         else if(smp.isMono())
         {
            sv_wave.undoBegin("synth_render");
            sv_wave.selectAll(false/*bAction*/);
            sv_wave.silenceSelection(false/*bUndoBegin*/);

            t = milliSeconds();

            int numPatches = smp.recalcCyclePatches();

            t = milliSeconds() - t;
            Global.Profile("PageSample::recalcAllCyclePatchesOrRenderTrack: recalcCyclePatches() took "+t+"ms");

            sv_wave.undoEnd();

            smp.markWaveformAsModified();
            UI.RedrawAll();

            Global.Print("Recalc "+numPatches+" "+Utils.GetPluralStringEx(numPatches, "patch", "patches"));
         }
      }
   }

   // <method.png>
   public method compileAllPatchPlugins() {
      boolean bOldSuppressUnderrunError = Audio.PushSuppressUnderrunError();

      Sample *sample;
      local String sMsgAll;
      int numExported = 0;
      local Integer numFailed = 0;
      local HashTable idMap; idMap.alloc(3000);  // for sample specific patch plugins
      foreach sample in current_project.samples
         numExported += sample.compileAllPatchPlugins(sMsgAll, numFailed, idMap, true/*bForce*/);

      PageAudio pgAudio <= root_form.pg_audio;
      local StringArray patchPluginIds;
      current_project.findPatchPluginIds(patchPluginIds);  // find all referenced patch plugins (last_compiled_plugin_id)
      pgAudio.handleReloadVoicePluginsRemap(idMap, patchPluginIds);
      handleSelectSample(true/*bStopAudio*/);

      trace "[...] exported "+numExported+" Cycle STFX plugin"+Utils.GetPluralString(numExported)+" ("+numFailed+" failed to compile):\n"+sMsgAll;

      Audio.PopSuppressUnderrunError(bOldSuppressUnderrunError);
   }

   // <method.png>
   public method handleReorderCyclePatches() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         local IntArray srcMap; srcMap.allocAndFill(CycleState.MAX_PATCHES/*max zones*/, -1);
         local PointerArray newPatches; newPatches.alloc(CycleState.MAX_PATCHES);
         CycleState sst <= smp.cycle_state;
         local PointerArray oldPatches <= sst.patches;
         local CyclePatch *spGlobalPlugin;
         local CyclePatch *spPatchPlugin;
         CyclePatch *sp;
         int spIdx = 0;
         foreach sp in sst.patches
         {
            if(sp.target_zone_idx >= 0)
               srcMap[sp.target_zone_idx] = spIdx;
            else if(CyclePatch.TARGET_ZONE_GLOBAL_PLUGIN == sp.target_zone_idx)
               spGlobalPlugin <= oldPatches.getDeref(spIdx);
            else if(CyclePatch.TARGET_ZONE_PATCH_PLUGIN  == sp.target_zone_idx)
               spPatchPlugin <= oldPatches.getDeref(spIdx);
            spIdx++;
         }

         // Re-add global and patch plugin patches first
         if(null != spGlobalPlugin)
            newPatches.add(#(deref spGlobalPlugin));

         if(null != spPatchPlugin)
            newPatches.add(#(deref spPatchPlugin));

         // Re-add patches targeting sample zones in zone order
         int zoneIdx = 0;
         loop(smp.getNumZones())
         {
            int patchIdx = srcMap[zoneIdx];
            if(-1 != patchIdx)
            {
               sp <= oldPatches.getDeref(patchIdx);
               newPatches.add(#(deref sp));
            }
            zoneIdx++;
         }

         int numDone = newPatches.numElements;
         int numUnused = 0;

         // Add remaining (unused) patches
         spIdx = 0;
         foreach sp in oldPatches
         {
            if(!newPatches.containsPointer(sp))
            {
               newPatches.add(#(oldPatches.getDeref(spIdx)));
               numUnused++;
            }
            spIdx++;
         }

         sst.patches <= deref newPatches;

         Global.Print("Reorder "+numDone+" sample-synth patches ("+numUnused+" unused)");
      }
   }

   // <method_get.png>
   public method getSelectedSample() : Sample {
      int idx = tm_samples.getCursorIndex();
      if(-1 != idx)
      {
         SamplesTMEntry en <= tm_samples.entries.get(idx);
         return en.sample;
      }
      return null;
   }

   // <method_get.png>
   public method getSelectedSampleIdx() : int {
      Sample sample <= getSelectedSample();
      return current_project.getSampleIdx(sample);
   }

   // <method_get.png>
   public method getPreviousSample() : Sample {
      int idx = tm_samples.getCursorIndex();
      if(-1 != idx)
      {
         SamplesTMEntry en <= tm_samples.entries.get(idx - 1);
         if(null != en)
            return en.sample;
      }
      return null;
   }

   // <method_get.png>
   public method getNextSample() : Sample {
      int idx = tm_samples.getCursorIndex();
      if(-1 != idx)
      {
         SamplesTMEntry en <= tm_samples.entries.get(idx + 1);
         if(null != en)
            return en.sample;
      }
      return null;
   }

   // <method_get.png>
   public method getLastSelectedSampleIdx() : int {
      return last_selected_sample_idx;
   }

   // <method_set.png>
   public method setLastSelectedSampleIdx(int _idx) {
      Global.Debug("PageSample::setLastSelectedSampleIdx("+_idx+")");
      last_selected_sample_idx = _idx;
      autoselect_sample_idx = _idx;
   }

   // <method_set.png>
   public method setAutoSelectNamespaceIdx(int _nspIdx) {
      autoselect_namespace_idx = _nspIdx;
   }

   // <method_get.png>
   public method getFirstSelectedZone() : StSample {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         int idx = tv_zones.getCursorRow();
         if(-1 != idx)
         {
            StSample s <= sample.sample_bank.getSampleByIdx(idx);
            return s;
         }
      }
      return null;
   }

   // <method_get.png>
   public method getFirstSelectedZoneIdx() : int {
      Sample sample <= getSelectedSample();
      if(null != sample)
         return tv_zones.getCursorRow();
      return -1;
   }

   // <method_get.png>
   public method getSelectedZones() : PointerArray {
      local PointerArray zones;
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         IntArray selRows <= tv_zones.getSelectedRows();
         int idx;
         StSample *s;
         if(selRows.numElements > 0)
         {
            foreach idx in selRows
            {
               s <= sample.sample_bank.getSampleByIdx(idx);
               zones.add(s);
            }
         }
         else
         {
            idx = tv_zones.getCursorRow();
            if(-1 != idx)
            {
               s <= sample.sample_bank.getSampleByIdx(idx);
               zones.add(s);
            }
         }
      }
      return deref zones;
   }

   // <method_get.png>
   public method getSampleMMFormByIdx(int _idx) : SampleMMForm {
      return mm_forms.get(_idx);
   }

   // <ui_update.png>
   protected method updateMMDstNames() {
      StSample s <= getFirstSelectedZone();
      if(null != s)
      {
         int mmDstIdx = STSAMPLE_MM_DST_PLUGIN_1_MOD_1;
         int pluginIdx = 0;
         loop(STSAMPLE_NUM_PLUGINS)
         {
            StPluginShared pluginShared <= s.getVoicePluginShared(pluginIdx);
            int modIdx = 0;
            if(null != pluginShared)
            {
               StPluginInfo pluginInfo <= pluginShared.info;
               loop(STSAMPLE_NUM_MODS_PER_PLUGIN)
               {
                  local String modName <= pluginShared.queryDynamicModName(modIdx);
                  if(modName.numChars > 16)
                     modName.substring(0, 16);
                  mm_dst_names[mmDstIdx] = "FX"+(pluginIdx+1)+"."+(modIdx+1)+": "+modName;
                  mmDstIdx++;
                  modIdx++;
               }
            }
            else
            {
               loop(STSAMPLE_NUM_MODS_PER_PLUGIN)
               {
                  mm_dst_names[mmDstIdx] = "FX"+(pluginIdx+1)+"."+(modIdx+1)+": -";
                  mmDstIdx++;
                  modIdx++;
               }
            }

            // Next plugin slot
            pluginIdx++;
         }
      }
   }

   // <ui_update.png>
   public method updateMM(boolean _bUpdateVarForm) {

      StSample s <= getFirstSelectedZone();

      SampleMMForm *mmForm;
      int mmIdx = 0;

      if(null != s)
      {
         Sample sample <= getSelectedSample();

         if(_bUpdateVarForm)
            f_mm_var.showSample(s, sample);

         updateMMDstNames();

         loop(STSAMPLE_NUM_MODMATRIX_ENTRIES)
         {
            mmForm <= mm_forms[mmIdx++];
            mmForm.showSample(s, sample);
         }
      }
      else
      {
         f_mm_var.showSample(null, null);

         loop(STSAMPLE_NUM_MODMATRIX_ENTRIES)
         {
            mmForm <= mm_forms[mmIdx++];
            mmForm.showSample(null, null);
         }
      }
   }

   // <ui_show.png>
   public static ShowSampleAndSwitchToPage(Sample  _sampleOrNull,
                                           int     _prefNamespaceIdx,  // fallback if sample is null. -1=keep. 0=global
                                           boolean _bFromTrack
                                           ) {
      // e.g. when creating new samples from PageAudio context menu
      PageSample pgSample <= root_form.pg_sample;
      pgSample.autoselect_sample_idx = (null != _sampleOrNull) ? current_project.getSampleIdx(_sampleOrNull) : -1;
      pgSample.autoselect_namespace_idx = (null != _sampleOrNull) ? _sampleOrNull.namespace_idx : _prefNamespaceIdx;
      if(_bFromTrack)
      {
         pgSample.b_allow_pgtrack_autoselect = true;
         pgSample.ui_parent_track_nr = current_project.getTrackIdx(root_form.pg_track.track) + 1;
      }
      root_form.showPage(RootForm.PAGE_SAMPLE, true/*bAllowHistory*/);
   }

   // <ui_show.png>
   public static ShowSampleFromTimelineAndSwitchToPage(Sample _sampleOrNull,
                                                       SampleTimelineEditorClip _clip,
                                                       SampleTimelineModelTrack _track,
                                                       boolean _bFromTrack
                                                       ) {
      PageSample pgSample <= root_form.pg_sample;
      pgSample.sample_timeline_editor_clip <= _clip;
      pgSample.sample_timeline_model_track <= _track;
      ShowSampleAndSwitchToPage(_sampleOrNull,
                                (null != _track) ? _track.preferred_namespace_idx : -1,
                                _bFromTrack
                                );
   }

   // <ui_handle.png>
   public method handleSelectSample(boolean _bStopAudio) {
      // trace "xxx PageSample::handleSelectSample: ENTER";

      Sample sample <= getSelectedSample();
      Global.Debug2("PageSample::handleSelectSample: sample="+#(sample)+" bStopAudio="+_bStopAudio);

      if(_bStopAudio)
      {
         Audio.ResetAllTempSamples();
         Audio.ResetAllSampleVoices(sample);
         Audio.UpdateTemporarySampleFromWaveform(null);
      }

      if(null != sample)
      {
         if(null != mod_sample)
            mod_sample.setSampleIdx(current_project.getSampleIdx(sample));
         else if(null != sample_pad)
            sample_pad.setSampleIdx(current_project.getSampleIdx(sample));
         else if(null != sample_timeline_editor_clip)
            sample_timeline_editor_clip.setSampleIdx(current_project.getSampleIdx(sample));
      }

      // // Audio.UpdateTemporarySampleFromWaveform(null);
      Audio.UpdateTempRefSample(sample);

      boolean bEditable = (null != sample);

      StSamplePlayer sp <= getCurrentSamplePlayer();

      tf_name         .setEditable(bEditable);
      cb_persistent   .setEditable(bEditable);
      tf_info         .setEditable(bEditable);
      bt_info         .setEditable(bEditable);
      bt_tags         .setEditable(bEditable);
      bt_perf_mw      .setEditable(bEditable);
      fp_perf_mw      .setEditable(bEditable);
      fp_perf_bc      .setEditable(bEditable);
      fp_perf_fc      .setEditable(bEditable);
      fp_perf_ex      .setEditable(bEditable);
      fp_perf_gp1     .setEditable(bEditable);
      fp_perf_gp2     .setEditable(bEditable);
      fp_perf_gp3     .setEditable(bEditable);
      fp_perf_gp4     .setEditable(bEditable);
      cb_perfctlfreeze.setEditable(bEditable);
      cb_sustain      .setEditable(bEditable);
      cm_type         .setEditable(bEditable);
      fp_grid_size    .setEditable(bEditable);
      bt_reinit_zones .setEditable(bEditable);
      bt_reinit_drum  .setEditable(bEditable);
      fp_maxvoices    .setEditable(bEditable);
      cb_procedural   .setEditable(bEditable);
      cm_src_track    .setEditable(bEditable);
      cb_audio        .setEditable(bEditable);
      fp_audio_bpm    .setEditable(bEditable);
      bt_prg_assign   .setEditable(bEditable);
      cm_prg          .setEditable(bEditable);

      cm_modsrc.setEditable(bEditable);
      cb_modsrc_noteon.setEditable(bEditable);

      fp_transpose_oct  .setEditable(bEditable);
      fp_transpose_semi .setEditable(bEditable);
      fp_transpose_cents.setEditable(bEditable);

      fp_pitchbend_up  .setEditable(bEditable);
      fp_pitchbend_down.setEditable(bEditable);

      fp_sample_rate.setEditable(bEditable);

      fp_volume.setEditable(bEditable);
      fp_pan   .setEditable(bEditable);

      fp_sampleoff_rand.setEditable(bEditable);
      fp_freq_rand     .setEditable(bEditable);
      fp_volume_rand   .setEditable(bEditable);
      fp_pan_rand      .setEditable(bEditable);

      cb_uniquenotes  .setEditable(bEditable);
      cb_realloc      .setEditable(bEditable);
      bt_sample_tuning.setEditable(bEditable);

      bt_sample_mixer .setEditable(bEditable);

      bt_sample_saveas.setEditable(bEditable);
      bt_sample_reload.setEditable(bEditable);

      cb_synth_recalc_all.setEditable(bEditable);

      if(null != sample)
      {
         // Global.Debug("PageSample::handleSelectSample: baseFrequency="+(sample.waveform.baseFrequency));
         StSampleBank sb <= sample.sample_bank;
         sample.setLiveRecSampleBank(sp);

         tf_name.setText(sample.unique_name);
         cb_persistent.setSelected(sample.b_persistent);
         String diz <= sample.description;
         tf_info.setText(diz);
         updateInfoButtonTint();

         updateTagsButtonTint();

         FloatArray initPerfCtl <= (null != sample_pad) ? sample_pad.initial_perf_ctl : sample.initial_perf_ctl;
         fp_perf_mw .setValue(initPerfCtl.get(STSAMPLEPLAYER_PERFCTL_CC1_MODWHEEL));
         fp_perf_bc .setValue(initPerfCtl.get(STSAMPLEPLAYER_PERFCTL_CC2_BREATHCTL));
         fp_perf_fc .setValue(initPerfCtl.get(STSAMPLEPLAYER_PERFCTL_CC4_FOOTCTL));
         fp_perf_ex .setValue(initPerfCtl.get(STSAMPLEPLAYER_PERFCTL_CC11_EXPRESSION));
         fp_perf_gp1.setValue(initPerfCtl.get(STSAMPLEPLAYER_PERFCTL_CC16_GENERAL_1));
         fp_perf_gp2.setValue(initPerfCtl.get(STSAMPLEPLAYER_PERFCTL_CC17_GENERAL_2));
         fp_perf_gp3.setValue(initPerfCtl.get(STSAMPLEPLAYER_PERFCTL_CC18_GENERAL_3));
         fp_perf_gp4.setValue(initPerfCtl.get(STSAMPLEPLAYER_PERFCTL_CC19_GENERAL_4));
         cb_perfctlfreeze.setSelected(sb.enablePerfCtlFreezeNoteOff);

         cb_sustain.setSelected(sample.b_sustain);

         cm_type      .setSelectedOption(sample.sample_type);
         fp_grid_size .setValue(sample.grid_size);
         fp_maxvoices .setValue(sb.maxVoices);
         cb_procedural.setSelected(sample.b_procedural);

         local StringArray aOptTracksShort;
         local StringArray aOptTracksLong;
         aOptTracksShort.add("-");
         aOptTracksLong.add("-");
         Track *track;
         int trackNr = 1;
         foreach track in current_project.tracks
         {
            aOptTracksShort.add(String(trackNr));
            aOptTracksLong.add(trackNr+":"+track.name);
            trackNr++;
         }
         cm_src_track.setOptions(aOptTracksShort);
         cm_src_track.setOptionsLong(aOptTracksLong);
         cm_src_track.setSelectedOption(sample.src_track_idx + 1);

         cb_audio     .setSelected(sample.b_audio_clip);
         fp_audio_bpm .setValue(sample.audio_clip_bpm);
         cm_prg       .setSelectedOption(sample.prg_id + 1/*skip '-'*/);
         updateProgramTintAndToolTip(sample.prg_id);

         cm_modsrc       .setSelectedOption(sample.mod_src);
         cb_modsrc_noteon.setSelected(sample.b_mod_src_noteon);

         cf_nsp_cur.setSelectedOption(sample.namespace_idx);
         cf_nsp_cur.setEditable(true);

         fp_transpose_oct  .setValue(sample.transpose_oct);
         fp_transpose_semi .setValue(sample.transpose_semi);
         fp_transpose_cents.setValue(sample.transpose_cents);

         fp_pitchbend_up  .setValue(sample.pitchbend_up);
         fp_pitchbend_down.setValue(sample.pitchbend_down);

         fp_sample_rate     .setValue(sample.waveform.sampleRate);
         fp_zone_sample_rate.setResetValue(sample.waveform.sampleRate);

         fp_volume.setValue(Audio.LevelToDecibel(sample.getVolume()));
         fp_pan   .setValue(sample.getPan());

         fp_sampleoff_rand.setValue(sample.getSampleOffRand());
         fp_freq_rand     .setValue(sample.getFreqRand());
         fp_volume_rand   .setValue(sample.getVolumeRand());
         fp_pan_rand      .setValue(sample.getPanRand());

         cb_uniquenotes.setSelected(sb.enableUniqueNotes);
         cb_realloc    .setSelected(sb.enableRealloc);

         sv_wave.setSample(sample.waveform,
                           sample.waveform.sampleData,
                           sample.waveform.numChannels,
                           sample.waveform.sampleRate
                           );

         tm_zones.sample_bank <= sb;
         tm_zones_names.sample_bank <= sb;

         if(maybe == STConfig.b_pgsample_zone_names)
            updateZoneTableModel(sample.hasNamedZone());
         else
            tv_zones.tableModelChanged();

         if(0)
         {
            tv_zones.selectAll();
            tv_zones.moveCursorToFirstRowNoAction();
         }
         else
         {
            // Skip lv/hv=0 and lk/hk=0 helper zones (usually for Cycle synthesis)
            selectAllNonHelperZonesAndMoveCursorNoAction();
         }

         // // Global.Debug("PageSample::handleSelectSample: sample.solo_zone_idx="+sample.solo_zone_idx);
         cb_zone_solo.setSelected(-1 != sample.solo_zone_idx);
         if(-1 != sample.solo_zone_idx)
         {
            tv_zones.moveCursorToRowNoAction(sample.solo_zone_idx);
            tv_zones.deselectMultiple();
         }

         StSampleMutexGroup *mgrp;
         local StringArray mgrpNames;
         mgrpNames.add("-");
         mgrpNames.add(sample.sample_bank.getMutexGroupByIdx(0).name);  // A
         mgrpNames.add(sample.sample_bank.getMutexGroupByIdx(1).name);  // B
         mgrpNames.add(sample.sample_bank.getMutexGroupByIdx(2).name);  // C
         mgrpNames.add(sample.sample_bank.getMutexGroupByIdx(3).name);  // D
         cm_zone_mutex_group.setOptions(mgrpNames);
         // // handleSelectZone(true/*bStopAudio*/);
         handleSelectZone(_bStopAudio);

         updateSampleNameToolTip(sample);

         cb_synth_recalc_all.setSelected(sample.cycle_state.b_recalc_all);
      }
      else
      {
         if(maybe == STConfig.b_pgsample_zone_names)
            updateZoneTableModel(false/*bNames*/);
         tm_zones.sample_bank <= null;
         tm_zones_names.sample_bank <= null;
         tv_zones.tableModelChanged();

         tf_name         .setText("-");
         cb_persistent   .setSelected(false);
         tf_info         .setText("-");
         bt_info         .setBackgroundTint(0);
         bt_tags         .setBackgroundTint(0);
         fp_perf_mw      .setValue(-1);
         fp_perf_bc      .setValue(-1);
         fp_perf_fc      .setValue(-1);
         fp_perf_ex      .setValue(-1);
         fp_perf_gp1     .setValue(-1);
         fp_perf_gp2     .setValue(-1);
         fp_perf_gp3     .setValue(-1);
         fp_perf_gp4     .setValue(-1);
         cb_perfctlfreeze.setSelected(false);
         cb_sustain      .setSelected(false);
         cm_type         .setSelectedOption(-1);
         fp_grid_size    .setValue(1);
         fp_maxvoices    .setValue(0);
         // // cm_syn          .setSelectedOption(-1);
         cb_procedural   .setSelected(false);
         cb_audio        .setSelected(false);
         fp_audio_bpm    .setValue(0.0f);
         cm_prg          .setSelectedOption(-1);

         cm_modsrc       .setSelectedOption(-1);
         cb_modsrc_noteon.setSelected(false);

         cf_nsp_cur.setSelectedOption(0);
         cf_nsp_cur.setEditable(false);

         fp_transpose_oct  .setValue(0);
         fp_transpose_semi .setValue(0);
         fp_transpose_cents.setValue(0);

         fp_pitchbend_up  .setValue(0);
         fp_pitchbend_down.setValue(0);

         fp_sample_rate.setValue(0);

         fp_volume.setValue(-99);
         fp_pan   .setValue(0);

         fp_sampleoff_rand.setValue(0);
         fp_freq_rand     .setValue(0);
         fp_volume_rand   .setValue(0);
         fp_pan_rand      .setValue(0);

         cb_uniquenotes.setSelected(false);
         cb_realloc    .setSelected(false);

         sv_wave.setSample(null, null, 0, 0);

         cm_zone_mutex_group.setOptions(null);
         handleSelectZone(_bStopAudio);

         tf_name.setToolTipCaption(tf_name_orig_tooltip_caption);

         cb_synth_recalc_all.setSelected(false);
      }

      last_selected_sample_idx = tm_samples.getCursorSampleIdx();

      updateSampleViewMarkers();

      current_project.handleFXAutoNoteOns();

      resendInitialPerfCtl();

      // trace "xxx PageSample::handleSelectSample: LEAVE";
   }

   // <method.png>
   protected method printSelectSample() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         int numRefs = current_project.findNumSampleRefsBySample(smp);
         Global.Print("Select sample \""+smp.unique_name+"\" ("+numRefs+" ref"+Utils.GetPluralString(numRefs)+")");
      }
   }

   // <method.png>
   protected method selectAllNonHelperZonesAndMoveCursorNoAction() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         local IntArray selRows;
         StSample s <= smp.getZoneByIdx(0);
         int zoneIdx = 0;
         while(null != s)
         {
            if(s.uiGetEnableAutoSelect())
            {
               if(Sample.ZoneHasValidKeyAndVelocityRanges(s))
                  selRows.add(zoneIdx);
            }

            // Next zone
            zoneIdx++;
            s <= s.next;
         }

         if(selRows.numElements > 0)
         {
            tv_zones.setSelectedRows(selRows);
            tv_zones.moveCursorToRowNoAction(selRows.first);
         }
         else
         {
            tv_zones.selectNone();
         }
      }
   }

   // <method.png>
   protected method selectDefaultTabGroups() {
      ts_groups.setActiveTabIndex(TAB_PATCH);
      ts_zone.setActiveTabIndex(ZONE_TAB_LOOPS);
   }

   // <method_get.png>
   protected method areDefaultTabGroupsSelected() : boolean {
      return
         (TAB_PATCH      == ts_groups.getActiveTabIndex()) &&
         (ZONE_TAB_LOOPS == ts_zone  .getActiveTabIndex()) ;
   }

   // <method_find.png>
   protected method findModSampleInstances(PointerArray _retModSampleInstances) {
      if(null != mod_sample)
      {
         Track parentTrack <= current_project.getTrackByIdx(ui_parent_track_nr - 1);
         if(null != parentTrack)
         {
            Lane *lane;
            foreach lane in parentTrack.lanes
            {
               ModSample *mod;
               foreach mod in lane.mods
               {
                  if(mod instanceof ModSample)
                     _retModSampleInstances.add(mod);
               }
            }
         }
      }
   }

   // <method.png>
   protected method togglePerfCtlDecHex(FloatParam _fp) {
      _fp.toggleHex();
      _fp.setMousePrecision((FloatParam.DISPLAY_HEX == _fp.getDisplayType()) ? 0 : 3);
   }

   // <ui_show.png>
   protected method showTrackSampleComboBoxPopup() {
      local PointerArray modSampleInstances;
      findModSampleInstances(modSampleInstances);
      if(!modSampleInstances.isEmpty())
      {
         int idxSelf = modSampleInstances.indexOfPointer(mod_sample, 0);
         local StringArray sampleNames;
         ModSample *mod;
         foreach mod in modSampleInstances
         {
            Sample smp <= current_project.getSampleByIdx(mod.sample_idx);
            if(null != smp)
               sampleNames.add(smp.unique_name);
         }
         if(!sampleNames.isEmpty())
         {
            sp_popup <= ComboBoxPopup.NewComboBoxPopup(this,
                                                       null/*fontOrNull*/,
                                                       deref sampleNames,
                                                       null/*options_long*/,
                                                       idxSelf/*selected_option*/,
                                                       bt_sp.getSizeX()/*prefSx*/,
                                                       null/*tooltip_captions*/,
                                                       null/*option_bgcolors*/,
                                                       null/*option_fgtints*/
                                                       );
            sp_popup.showNearComboBox(bt_sp/*layer*/);
            sp_popup.focusFirstTabCycleMember();
         }
      }
   }

   // <ui_handle.png>
   protected method handleSelectTrackSampleByIndex(int _index) {
      Global.Debug("PageTrack::handleSelectTrackSampleByIndex: index="+_index);
      local PointerArray modSampleInstances;
      findModSampleInstances(modSampleInstances);
      if(!modSampleInstances.isEmpty())
      {
         if(0 <= _index < modSampleInstances.numElements)
         {
            int idxSelf = modSampleInstances.indexOfPointer(mod_sample, 0);
            if(_index != idxSelf)
            {
               pageLeave();
               mod_sample <= modSampleInstances[_index];
               autoselect_sample_idx = mod_sample.sample_idx;
               pageEnter();
               UI.SetKeyboardFocus(tv_samples);
            }
         }
      }
   }

   // <ui_handle.png>
   protected method selectTrackSamplePrev() {
      local PointerArray modSampleInstances;
      findModSampleInstances(modSampleInstances);
      if(!modSampleInstances.isEmpty())
      {
         int idxSelf = modSampleInstances.indexOfPointer(mod_sample, 0);
         if(idxSelf > 0)
         {
            pageLeave();
            mod_sample <= modSampleInstances[idxSelf - 1];
            autoselect_sample_idx = mod_sample.sample_idx;
            pageEnter();
            Global.Print("Select previous track sampleplayer and sample");
         }
         else
         {
            Global.Warning("Prev: No ModSample instance found");
         }
      }
      else
      {
         Global.Warning("Prev: No ModSample instances found");
      }
   }

   // <ui_handle.png>
   protected method selectTrackSampleNext() {
      local PointerArray modSampleInstances;
      findModSampleInstances(modSampleInstances);
      if(!modSampleInstances.isEmpty())
      {
         int idxSelf = modSampleInstances.indexOfPointer(mod_sample, 0);
         if(0 <= idxSelf < (modSampleInstances.numElements-1))
         {
            pageLeave();
            mod_sample <= modSampleInstances[idxSelf + 1];
            autoselect_sample_idx = mod_sample.sample_idx;
            pageEnter();
            Global.Print("Select next track sampleplayer and sample");
         }
         else
         {
            Global.Warning("Next: No ModSample instance found");
         }
      }
      else
      {
         Global.Warning("Next: No ModSample instances found");
      }
   }

   // <method_find.png>
   protected method findSamplePadInstances(PointerArray _retSamplePadInstances) {
      if(null != sample_pad_kit)
      {
         SamplePadKitVariation kv <= sample_pad_kit.getEditKitVariation();
         SamplePad *pad;
         foreach pad in kv.pads
         {
            if(-1 != pad.sample_idx)
            {
               Sample sample <= current_project.getSampleByIdx(pad.sample_idx);
               if(null != sample)
                  _retSamplePadInstances.add(pad);
            }
         }
      }
   }

   // <ui_show.png>
   protected method showSamplePadKitSampleComboBoxPopup() {
      local PointerArray samplePadInstances;
      findSamplePadInstances(samplePadInstances);
      if(!samplePadInstances.isEmpty())
      {
         int idxSelf = samplePadInstances.indexOfPointer(sample_pad, 0);
         local StringArray opt;
         SamplePad *pad;
         foreach pad in samplePadInstances
         {
            Sample smp <= current_project.getSampleByIdx(pad.sample_idx);
            if(null != smp)
               opt.add( pad.getName()+":"+smp.unique_name );
         }
         sp_popup <= ComboBoxPopup.NewComboBoxPopup(this,
                                                    null/*fontOrNull*/,
                                                    deref opt,
                                                    null/*options_long*/,
                                                    idxSelf/*selected_option*/,
                                                    bt_sp.getSizeX()/*prefSx*/,
                                                    null/*tooltip_captions*/,
                                                    null/*option_bgcolors*/,
                                                    null/*option_fgtints*/
                                                    );
         sp_popup.showNearComboBox(bt_sp/*layer*/);
         sp_popup.focusFirstTabCycleMember();
      }
   }

   // <ui_handle.png>
   protected method handleSelectSamplePadSampleByIndex(int _index) {
      local PointerArray samplePadInstances;
      findSamplePadInstances(samplePadInstances);
      if(!samplePadInstances.isEmpty())
      {
         if(0 <= _index < samplePadInstances.numElements)
         {
            SamplePadKit samplePadKit <= sample_pad_kit;  // reset to null by pageLeave()
            pageLeave();
            sample_pad <= samplePadInstances[_index];
            int newPadIdx = sample_pad.pad_idx;
            samplePadKit.edit_pad_idx = newPadIdx;////_index;
            sample_pad_common <= samplePadKit.pads.get(newPadIdx);////_index);
            sample_pad_kit <= samplePadKit;
            autoselect_sample_idx = sample_pad.sample_idx;
            pageEnter();
            Global.Print("Select sample pad \""+sample_pad.getName()+"\"");
         }
      }
   }

   // <ui_handle.png>
   protected method selectSamplePadPrev() {
      local PointerArray samplePadInstances;
      findSamplePadInstances(samplePadInstances);
      if(!samplePadInstances.isEmpty())
      {
         int idxSelf = samplePadInstances.indexOfPointer(sample_pad, 0);
         if(idxSelf > 0)
         {
            int newIdx = idxSelf - 1;
            SamplePadKit samplePadKit <= sample_pad_kit;  // reset to null by pageLeave()
            pageLeave();
            sample_pad <= samplePadInstances[newIdx];
            int newPadIdx = sample_pad.pad_idx;
            samplePadKit.edit_pad_idx = newPadIdx;////newIdx;
            sample_pad_common <= samplePadKit.pads.get(newPadIdx);////newIdx);
            sample_pad_kit <= samplePadKit;
            autoselect_sample_idx = sample_pad.sample_idx;
            pageEnter();
            Global.Print("Select previous sample pad \""+sample_pad.getName()+"\"");
         }
      }
   }

   // <ui_handle.png>
   protected method selectSamplePadNext() {
      local PointerArray samplePadInstances;
      findSamplePadInstances(samplePadInstances);
      if(!samplePadInstances.isEmpty())
      {
         int idxSelf = samplePadInstances.indexOfPointer(sample_pad, 0);
         if(0 <= idxSelf < (samplePadInstances.numElements-1))
         {
            int newIdx = idxSelf + 1;
            SamplePadKit samplePadKit <= sample_pad_kit;  // reset to null by pageLeave()
            pageLeave();
            sample_pad <= samplePadInstances[newIdx];
            int newPadIdx = sample_pad.pad_idx;
            samplePadKit.edit_pad_idx = newPadIdx;////newIdx;
            sample_pad_common <= samplePadKit.pads.get(newPadIdx);///newIdx);
            sample_pad_kit <= samplePadKit;
            autoselect_sample_idx = sample_pad.sample_idx;
            pageEnter();
            Global.Print("Select next sample pad \""+sample_pad.getName()+"\"");
         }
      }
   }

   // <ui_update.png>
   protected method updateSampleViewMarkers() {

      IntArray iaStart <= sv_wave.autochop_start_offsets;
      IntArray iaEnd   <= sv_wave.autochop_end_offsets;
      iaStart.empty();
      iaEnd.empty();

      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= sample.sample_bank.firstSample;
         while(null != s)
         {
            int smpOff = s.firstLoopOffset;
            int smpLen = s.firstLoopLen;
            iaStart.add(smpOff);
            iaEnd.add(smpOff + smpLen);
            s <= s.next;
         }
      }

      sv_wave.redraw();
   }

   // <debug.png>
   protected method debugPrintZoneOffsetDeltas() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         int firstOff = -1;
         StSample s <= sample.sample_bank.firstSample;
         float minDev = 10000;  // deviation assumes quarter pulses at 120bpm
         float maxDev = -10000;
         float avgDev = 0;
         int dtNum = 0;
         float idealMs = 0;
         float smpRate = (sample.waveform.sampleRate);
         while(null != s)
         {
            int off = s.firstLoopOffset;
            float dt;
            if(-1 != firstOff)
            {
               idealMs += 500.0;
               dt = off - firstOff;
               dt = (1000.0 * dt) / smpRate;
               trace "xxx t="+dt+" dt="+(dt-idealMs)+"ms tIdeal="+idealMs;
               dt -= idealMs;
               if(dt < minDev)
                  minDev = dt;
               if(dt > maxDev)
                  maxDev = dt;
               avgDev += dt;
               dtNum++;
            }
            else
            {
               firstOff = off;
            }

            s <= s.next;
         }
         avgDev /= dtNum;
         if(minDev > 0)
         {
            maxDev -= minDev;
            avgDev -= minDev;
            trace "xxx ==> latency="+minDev+"ms maxDev="+maxDev+"ms avgDev="+avgDev+"ms ("+dtNum+" hits)";
         }
         else
         {
            trace "xxx ==> minDev="+minDev+"ms maxDev="+maxDev+"ms avgDev="+avgDev+"ms ("+dtNum+" hits)";
         }

      }
   }

   // <ui_show.png>
   protected method showSamplesContextMenu(boolean _bFocusFirst) {

      pm_samples <= PopupMenu.New(this);
      PopupMenu pm <= pm_samples;
      PopupMenuButton *pmb;
      boolean bHaveSample = (null != getSelectedSample());

      pmb <= pm.addDefaultButton("Copy sample .wav pathname to clipboard",
                                 "samples_copy_pathname"
                                 );

      pm.addSeparator();
      PopupMenu spm <= PopupMenu.New(pm);
      pmb <= pm.addMenu("Prg Display Mode", deref spm);

      spm.addRadioButton("PrgChg Nr (decimal)", (STConfig.pgsample_prg_dpy_mode == PRG_DPY_PC_DEC),        "prg_dpy_pc_dec");
      spm.addRadioButton("PrgChg Nr (hex)",     (STConfig.pgsample_prg_dpy_mode == PRG_DPY_PC_HEX),        "prg_dpy_pc_hex");
      spm.addRadioButton("PrgChg Nr (letter)",  (STConfig.pgsample_prg_dpy_mode == PRG_DPY_PC_LETTER),     "prg_dpy_pc_letter");
      spm.addRadioButton("RPN Unique Id",       (STConfig.pgsample_prg_dpy_mode == PRG_DPY_UNIQUE_ID),     "prg_dpy_uniqueid");
      spm.addRadioButton("RPN Unique Id (hex)", (STConfig.pgsample_prg_dpy_mode == PRG_DPY_UNIQUE_ID_HEX), "prg_dpy_uniqueid_hex");

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Auto-Assign MIDI Program Numbers",
                                 "samples_assignprgnr"
                                 );

      pmb <= pm.addDefaultButton("Sort by MIDI Program Number",
                                 "samples_sortprgnr"
                                 );

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Merge next sample",
                                 "samples_merge_next"
                                 );
      pmb.setToolTipCaption("Merge next sample\n\n (note) append waveform to current sample (may discard right channel)\n (note) duplicate zones, adjust sample starts and add to this sample");

      pmb <= pm.addDefaultButton("Cycle: Mix current and previous samples",
                                 "samples_cycle_mix"
                                 );
      pmb.setToolTipCaption("Create new (procedural) Cycle sample that mixes the current and previous samples");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Remove unreferenced sample namespaces",
                                 "namespace_remove_unref"
                                 );

      pm.addSeparator();
      spm <= PopupMenu.New(pm);
      pmb <= pm.addMenu("Remove unreferenced samples", deref spm);
      pmb <= spm.addDefaultButton("Remove unreferenced audio clip samples..",
                                  "samples_remove_unref_audio"
                                  );
      spm.addSeparator();
      pmb <= spm.addDefaultButton("Remove unreferenced, non-prgchg-assigned samples..",
                                  "samples_remove_unref_skip_prgchg"
                                  );
      pmb <= spm.addDefaultButton("Remove unreferenced, non-namespace-assigned samples..",
                                  "samples_remove_unref_skip_namespace"
                                  );
      pmb <= spm.addDefaultButton("Remove unreferenced, non-prgchg-or-non-namespace-assigned samples..",
                                  "samples_remove_unref_skip_prgchg_and_namespace"
                                  );
      pmb <= spm.addDefaultButton("Remove all unreferenced samples..",
                                  "samples_remove_unref_all"
                                  );

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Clean-up Project Samples Folder",
                                 "samples_cleanup"
                                 );

      pm.resizeToMinimum();
      pm.showNearMouse(-10, -10);
      if(_bFocusFirst)
         pm.focusNextMenuItem();

      Global.Print("Show samples context menu.");
   }

   // <ui_show.png>
   protected method showZoneAdditive() {
      StSample s <= getFirstSelectedZone();
      boolean bEditable = (null != s);

      if(bEditable)
         bEditable = s.enableTimestretchAdditive;

      if(null != s)
      {
         boolean bAdditive = s.enableTimestretchAdditive;
         cb_zone_ts_staticcyclelen  .setEditable(!bAdditive);
         // // cb_zone_ts_xfade           .setEditable(!bAdditive);
         // // cb_zone_ts_abs             .setEditable(!bAdditive);
         // // fp_zone_ts_granularity_fine.setEditable(!bAdditive);  // [13Oct2024] also allow in additive mode
         fp_zone_ts_additive_xfade  .setEditable(bAdditive);
         // // fp_zone_ts_2d_w            .setEditable(!bAdditive);
         // // fp_zone_ts_2d_h            .setEditable(!bAdditive);
         // // fp_zone_ts_bend            .setEditable(!bAdditive);
         cm_zone_ts_grain           .setEditable(!bAdditive);
         fp_zone_ts_additive_bexp   .setEditable(bAdditive);
         fp_zone_ts_additive_wexp   .setEditable(bAdditive);
         fp_zone_ts_additive_mexp   .setEditable(bAdditive);
         fp_zone_ts_additive_mbexp  .setEditable(bAdditive);

         cb_zone_ts_additive_win      .setEditable(bAdditive);
         cb_zone_ts_additive_true_freq.setEditable(bAdditive);
         fp_zone_ts_cyclelen_reset    .setEditable(bAdditive);
         cb_zone_ts_phase_0           .setEditable(bAdditive);
         fp_zone_ts_numpartials       .setEditable(bAdditive);
         bt_zone_ts_export            .setEditable(bAdditive);
         fp_zone_ts_stereo_spread     .setEditable(bAdditive);

         lb_zone_ts_granularity_amt.setCaption(bAdditive?"Boost:":"GrAmt:");
         lb_zone_ts_granularity_amt.redraw();

         lb_zone_ts_bend.setCaption(bAdditive?"Slew:":"PhBend:");
         lb_zone_ts_bend.redraw();

         cb_zone_ts_xfade.setCaption(bAdditive?"SlewP":"XFade");
         cb_zone_ts_xfade.redraw();

         cb_zone_ts_abs.setCaption(bAdditive?"FdRst":"Abs ");
         cb_zone_ts_abs.redraw();
      }

      fp_zone_ts_osc_edit_cfg      .setEditable(bEditable);
      cb_zone_ts_osc_force_edit_cfg.setEditable(bEditable);
      bt_zone_ts_osc_cfg_copy      .setEditable(bEditable);
      bt_zone_ts_osc_cfg_paste     .setEditable(bEditable);

      fp_zone_ts_osc_lvl_sin     .setEditable(bEditable);
      fp_zone_ts_osc_pha_sin     .setEditable(bEditable);
      fp_zone_ts_osc_exa_sin     .setEditable(bEditable);
      fp_zone_ts_osc_exl_sin     .setEditable(bEditable);
      fp_zone_ts_osc_flt_sin     .setEditable(bEditable);

      fp_zone_ts_osc_lvl_tri     .setEditable(bEditable);
      fp_zone_ts_osc_pha_tri     .setEditable(bEditable);
      fp_zone_ts_osc_exa_tri     .setEditable(bEditable);
      fp_zone_ts_osc_exl_tri     .setEditable(bEditable);
      fp_zone_ts_osc_flt_tri     .setEditable(bEditable);

      fp_zone_ts_osc_lvl_sup     .setEditable(bEditable);
      fp_zone_ts_osc_pha_sup     .setEditable(bEditable);
      fp_zone_ts_osc_exa_sup     .setEditable(bEditable);
      fp_zone_ts_osc_exl_sup     .setEditable(bEditable);
      fp_zone_ts_osc_flt_sup     .setEditable(bEditable);

      fp_zone_ts_osc_lvl_sdn     .setEditable(bEditable);
      fp_zone_ts_osc_pha_sdn     .setEditable(bEditable);
      fp_zone_ts_osc_exa_sdn     .setEditable(bEditable);
      fp_zone_ts_osc_exl_sdn     .setEditable(bEditable);
      fp_zone_ts_osc_flt_sdn     .setEditable(bEditable);

      fp_zone_ts_osc_lvl_pul     .setEditable(bEditable);
      fp_zone_ts_osc_pha_pul     .setEditable(bEditable);
      fp_zone_ts_osc_exa_pul     .setEditable(bEditable);
      fp_zone_ts_osc_exl_pul     .setEditable(bEditable);
      fp_zone_ts_osc_flt_pul     .setEditable(bEditable);

      cb_zone_ts_osc_normalize   .setEditable(bEditable);
      cm_zone_ts_osc_srr         .setEditable(bEditable);
      fp_zone_ts_osc_srr_mask    .setEditable(bEditable);
      cm_zone_ts_osc_br          .setEditable(bEditable);
      fp_zone_ts_osc_br_mask     .setEditable(bEditable);
      fp_zone_ts_osc_br_preamp   .setEditable(bEditable);

      if(bEditable)
      {
         fp_zone_ts_osc_edit_cfg .setValue(s.additiveEditCfg + 1.0f);
         cb_zone_ts_osc_force_edit_cfg.setSelected(s.enableForceAdditiveEditCfg);
         int cfgIdx = s.additiveEditCfg;
         fp_zone_ts_osc_lvl_sin     .setValue(s.getAdditiveLevel (cfgIdx, STSAMPLE_ADDITIVE_OSC_SIN) * 127);
         fp_zone_ts_osc_pha_sin     .setValue(s.getAdditivePhase (cfgIdx, STSAMPLE_ADDITIVE_OSC_SIN) * 128);
         fp_zone_ts_osc_exa_sin     .setValue(s.getAdditiveExpA  (cfgIdx, STSAMPLE_ADDITIVE_OSC_SIN) * 128);
         fp_zone_ts_osc_flt_sin     .setValue(s.getAdditiveFilter(cfgIdx, STSAMPLE_ADDITIVE_OSC_SIN) * 127);
         fp_zone_ts_osc_exl_sin     .setValue(s.getAdditiveExpL  (cfgIdx, STSAMPLE_ADDITIVE_OSC_SIN) * 128);
         fp_zone_ts_osc_lvl_tri     .setValue(s.getAdditiveLevel (cfgIdx, STSAMPLE_ADDITIVE_OSC_TRI) * 127);
         fp_zone_ts_osc_pha_tri     .setValue(s.getAdditivePhase (cfgIdx, STSAMPLE_ADDITIVE_OSC_TRI) * 128);
         fp_zone_ts_osc_exa_tri     .setValue(s.getAdditiveExpA  (cfgIdx, STSAMPLE_ADDITIVE_OSC_TRI) * 128);
         fp_zone_ts_osc_flt_tri     .setValue(s.getAdditiveFilter(cfgIdx, STSAMPLE_ADDITIVE_OSC_TRI) * 127);
         fp_zone_ts_osc_exl_tri     .setValue(s.getAdditiveExpL  (cfgIdx, STSAMPLE_ADDITIVE_OSC_TRI) * 128);
         fp_zone_ts_osc_lvl_sup     .setValue(s.getAdditiveLevel (cfgIdx, STSAMPLE_ADDITIVE_OSC_SUP) * 127);
         fp_zone_ts_osc_pha_sup     .setValue(s.getAdditivePhase (cfgIdx, STSAMPLE_ADDITIVE_OSC_SUP) * 128);
         fp_zone_ts_osc_exa_sup     .setValue(s.getAdditiveExpA  (cfgIdx, STSAMPLE_ADDITIVE_OSC_SUP) * 128);
         fp_zone_ts_osc_flt_sup     .setValue(s.getAdditiveFilter(cfgIdx, STSAMPLE_ADDITIVE_OSC_SUP) * 127);
         fp_zone_ts_osc_exl_sup     .setValue(s.getAdditiveExpL  (cfgIdx, STSAMPLE_ADDITIVE_OSC_SUP) * 128);
         fp_zone_ts_osc_lvl_sdn     .setValue(s.getAdditiveLevel (cfgIdx, STSAMPLE_ADDITIVE_OSC_SDN) * 127);
         fp_zone_ts_osc_pha_sdn     .setValue(s.getAdditivePhase (cfgIdx, STSAMPLE_ADDITIVE_OSC_SDN) * 128);
         fp_zone_ts_osc_exa_sdn     .setValue(s.getAdditiveExpA  (cfgIdx, STSAMPLE_ADDITIVE_OSC_SDN) * 128);
         fp_zone_ts_osc_flt_sdn     .setValue(s.getAdditiveFilter(cfgIdx, STSAMPLE_ADDITIVE_OSC_SDN) * 127);
         fp_zone_ts_osc_exl_sdn     .setValue(s.getAdditiveExpL  (cfgIdx, STSAMPLE_ADDITIVE_OSC_SDN) * 128);
         fp_zone_ts_osc_lvl_pul     .setValue(s.getAdditiveLevel (cfgIdx, STSAMPLE_ADDITIVE_OSC_PUL) * 127);
         fp_zone_ts_osc_pha_pul     .setValue(s.getAdditivePhase (cfgIdx, STSAMPLE_ADDITIVE_OSC_PUL) * 128);
         fp_zone_ts_osc_exa_pul     .setValue(s.getAdditiveExpA  (cfgIdx, STSAMPLE_ADDITIVE_OSC_PUL) * 128);
         fp_zone_ts_osc_flt_pul     .setValue(s.getAdditiveFilter(cfgIdx, STSAMPLE_ADDITIVE_OSC_PUL) * 127);
         fp_zone_ts_osc_exl_pul     .setValue(s.getAdditiveExpL  (cfgIdx, STSAMPLE_ADDITIVE_OSC_PUL) * 128);
         cb_zone_ts_osc_normalize   .setSelected(s.getAdditiveNormalize(cfgIdx));
         cm_zone_ts_osc_srr         .setSelectedOption(s.getAdditiveRateReduction     (cfgIdx));
         fp_zone_ts_osc_srr_mask    .setValue         (s.getAdditiveRateReductionMask (cfgIdx));
         cm_zone_ts_osc_br          .setSelectedOption(s.getAdditiveBitReduction      (cfgIdx));
         fp_zone_ts_osc_br_mask     .setValue         (s.getAdditiveBitReductionMask  (cfgIdx));
         fp_zone_ts_osc_br_preamp   .setValue         (s.getAdditiveBitReductionPreAmp(cfgIdx));
      }
      else
      {
         fp_zone_ts_osc_edit_cfg    .setValue(-1);
         cb_zone_ts_osc_force_edit_cfg.setSelected(false);
         fp_zone_ts_osc_lvl_sin     .setValue(0);
         fp_zone_ts_osc_pha_sin     .setValue(0);
         fp_zone_ts_osc_exa_sin     .setValue(0);
         fp_zone_ts_osc_exl_sin     .setValue(0);
         fp_zone_ts_osc_lvl_tri     .setValue(0);
         fp_zone_ts_osc_pha_tri     .setValue(0);
         fp_zone_ts_osc_exa_tri     .setValue(0);
         fp_zone_ts_osc_exl_tri     .setValue(0);
         fp_zone_ts_osc_lvl_sup     .setValue(0);
         fp_zone_ts_osc_pha_sup     .setValue(0);
         fp_zone_ts_osc_exa_sup     .setValue(0);
         fp_zone_ts_osc_exl_sup     .setValue(0);
         fp_zone_ts_osc_lvl_sdn     .setValue(0);
         fp_zone_ts_osc_pha_sdn     .setValue(0);
         fp_zone_ts_osc_exa_sdn     .setValue(0);
         fp_zone_ts_osc_exl_sdn     .setValue(0);
         fp_zone_ts_osc_lvl_pul     .setValue(0);
         fp_zone_ts_osc_pha_pul     .setValue(0);
         fp_zone_ts_osc_exa_pul     .setValue(0);
         fp_zone_ts_osc_exl_pul     .setValue(0);
         cb_zone_ts_osc_normalize   .setSelected(false);
         cm_zone_ts_osc_srr         .setSelectedOption(-1);
         fp_zone_ts_osc_srr_mask    .setValue         (0);
         cm_zone_ts_osc_br          .setSelectedOption(-1);
         fp_zone_ts_osc_br_mask     .setValue         (0);
         fp_zone_ts_osc_br_preamp   .setValue         (0);
      }
   }

   // <ui_handle.png>
   protected method handleSelectZone(boolean _bStopAudio) {
      // // Global.Debug2("PageSample::handleSelectZone: bStopAudio="+_bStopAudio);

      if(_bStopAudio)
      {
         Audio.ResetAllTempSamples();
         Audio.UpdateTemporarySampleFromWaveform(null);
         resendInitialPerfCtl();
      }

      Sample sample <= getSelectedSample();
      Audio.UpdateTempRefSample(sample);

      StSample s <= getFirstSelectedZone();

      SampleVCalForm *fVCal;

      boolean bEditable = (null != s);
      fp_zone_maxvoices              .setEditable(bEditable);
      cm_zone_mutex_group            .setEditable(bEditable);
      fp_zone_sample_rate            .setEditable(bEditable);
      fp_zone_delay                  .setEditable(bEditable);
      fp_zone_delay_mul              .setEditable(bEditable);
      cm_zone_interpolation          .setEditable(bEditable);
      cm_zone_interpolation_order    .setEditable(bEditable);
      bt_zone_lofi                   .setEditable(bEditable);
      cm_zone_srr                    .setEditable(bEditable);
      fp_zone_srr_mask               .setEditable(bEditable);
      cm_zone_br                     .setEditable(bEditable);
      fp_zone_br_mask                .setEditable(bEditable);
      fp_zone_br_preamp              .setEditable(bEditable);
      fp_zone_sampleoff_rel          .setEditable(bEditable);
      fp_zone_sampleoff_rand         .setEditable(bEditable);
      fp_zone_sampleoff_velamt       .setEditable(bEditable);
      cb_zone_sampleoff_velamt_invert.setEditable(bEditable);

      cm_zone_ai         .setEditable(bEditable);
      fp_zone_ai_q       .setEditable(bEditable);
      fp_zone_ai_exp_up  .setEditable(bEditable);
      fp_zone_ai_exp_down.setEditable(bEditable);
      fp_zone_ai_lin_oct .setEditable(bEditable);
      fp_zone_ai_lin_max .setEditable(bEditable);

      cm_zone_voicebus.setEditable(bEditable);

      cb_zone_sampleoff_freezequiet.setEditable(bEditable);

      cb_zone_autoselect.setEditable(bEditable);

      cm_zone_key_lo     .setEditable(bEditable);
      cm_zone_key_hi     .setEditable(bEditable);
      fp_zone_vel_lo     .setEditable(bEditable);
      fp_zone_vel_hi     .setEditable(bEditable);
      fp_zone_mod_lo     .setEditable(bEditable);
      fp_zone_mod_hi     .setEditable(bEditable);
      fp_zone_mod_fadein .setEditable(bEditable);
      fp_zone_mod_fadeout.setEditable(bEditable);
      cb_zone_mod_flt    .setEditable(bEditable);
      cb_zone_alt        .setEditable(bEditable);

      fp_zone_noteoff_loop_idx      .setEditable(bEditable);
      cb_zone_noteoff_loop_immediate.setEditable(bEditable);
      cb_zone_fromstart             .setEditable(bEditable);
      cb_zone_jumptoloop_immediately.setEditable(bEditable);
      cm_zone_play_mode             .setEditable(bEditable);
      cm_zone_loopfade              .setEditable(bEditable);

      cb_zone_timedloop        .setEditable(bEditable);
      cb_zone_timedloop_fade   .setEditable(bEditable);
      cb_zone_timedloop_oneshot.setEditable(bEditable);

      fp_zone_offset  .setEditable(bEditable);
      fp_zone_len     .setEditable(bEditable);
      fp_zone_rep     .setEditable(bEditable);
      bt_zone_autoloop.setEditable(bEditable);

      cb_zone_flt_en        .setEditable(bEditable);
      cm_zone_flt_type      .setEditable(bEditable);
      fp_zone_flt_cutoff    .setEditable(bEditable);
      fp_zone_flt_pan       .setEditable(bEditable);
      fp_zone_flt_offset    .setEditable(bEditable);
      fp_zone_flt_eq_gain   .setEditable(bEditable);
      fp_zone_flt_resonance .setEditable(bEditable);
      fp_zone_flt_env_amt   .setEditable(bEditable);
      fp_zone_flt_env_velamt.setEditable(bEditable);
      fp_zone_flt_lfo_amt   .setEditable(bEditable);
      fp_zone_flt_kbd_amt   .setEditable(bEditable);
      cb_zone_auxtowav      .setEditable(bEditable);

      fp_zone_transpose_oct  .setEditable(bEditable);
      fp_zone_transpose_semi .setEditable(bEditable);
      fp_zone_transpose_cents.setEditable(bEditable);

      fp_zone_beatfreq  .setEditable(bEditable);
      fp_zone_freqenvamt.setEditable(bEditable);
      bt_zone_tuning    .setEditable(bEditable);

      fp_zone_mm_kbd_min.setEditable(bEditable);
      fp_zone_mm_kbd_ctr.setEditable(bEditable);
      fp_zone_mm_kbd_max.setEditable(bEditable);
      fp_zone_freqlfoamt.setEditable(bEditable);

      bt_zone_freq_quick     .setEditable(bEditable);
      bt_zone_freq_a         .setEditable(bEditable);
      fp_zone_freq_a_speed   .setEditable(bEditable);
      bt_zone_freq_s         .setEditable(bEditable);
      fp_zone_freq_s_speed   .setEditable(bEditable);
      cb_zone_freq_s_loop    .setEditable(bEditable);
      bt_zone_freq_r         .setEditable(bEditable);
      fp_zone_freq_r_speed   .setEditable(bEditable);
      fp_zone_freq_adsr_level.setEditable(bEditable);
      fp_zone_freq_adsr_time .setEditable(bEditable);
      cm_zone_freq_stageop   .setEditable(bEditable);

      fp_zone_volume          .setEditable(bEditable);
      fp_zone_volume_vel      .setEditable(bEditable);
      fp_zone_vollfoamt       .setEditable(bEditable);
      fp_zone_volume_ramp_up  .setEditable(bEditable);
      fp_zone_volume_ramp_down.setEditable(bEditable);

      bt_zone_volume_quick    .setEditable(bEditable);
      bt_zone_volume_a        .setEditable(bEditable);
      fp_zone_volume_a_speed  .setEditable(bEditable);
      bt_zone_volume_s        .setEditable(bEditable);
      fp_zone_volume_s_speed  .setEditable(bEditable);
      cb_zone_volume_s_loop   .setEditable(bEditable);
      bt_zone_volume_r        .setEditable(bEditable);
      fp_zone_volume_r_speed  .setEditable(bEditable);
      fp_zone_volume_adsr_int .setEditable(bEditable);
      fp_zone_volume_adsr_time.setEditable(bEditable);

      fp_zone_pan           .setEditable(bEditable);
      fp_zone_panenvamt     .setEditable(bEditable);
      fp_zone_panlfoamt     .setEditable(bEditable);
      bt_zone_pan_quick     .setEditable(bEditable);
      bt_zone_pan_a         .setEditable(bEditable);
      fp_zone_pan_a_speed   .setEditable(bEditable);
      bt_zone_pan_s         .setEditable(bEditable);
      fp_zone_pan_s_speed   .setEditable(bEditable);
      cb_zone_pan_s_loop    .setEditable(bEditable);
      bt_zone_pan_r         .setEditable(bEditable);
      fp_zone_pan_r_speed   .setEditable(bEditable);
      fp_zone_pan_adsr_level.setEditable(bEditable);
      fp_zone_pan_adsr_time .setEditable(bEditable);
      cm_zone_pan_stageop   .setEditable(bEditable);

      bt_zone_aux_quick     .setEditable(bEditable);
      bt_zone_aux_a         .setEditable(bEditable);
      fp_zone_aux_a_speed   .setEditable(bEditable);
      bt_zone_aux_s         .setEditable(bEditable);
      fp_zone_aux_s_speed   .setEditable(bEditable);
      cb_zone_aux_s_loop    .setEditable(bEditable);
      bt_zone_aux_r         .setEditable(bEditable);
      fp_zone_aux_r_speed   .setEditable(bEditable);
      fp_zone_aux_adsr_level.setEditable(bEditable);
      fp_zone_aux_adsr_time .setEditable(bEditable);
      cm_zone_aux_stageop   .setEditable(bEditable);

      bt_zone_remove  .setEditable(bEditable);
      bt_zone_moveup  .setEditable(bEditable);
      bt_zone_movedown.setEditable(bEditable);
      bt_zone_reinit  .setEditable(bEditable);

      bt_loop_add     .setEditable(bEditable);
      bt_loop_remove  .setEditable(bEditable);
      bt_loop_moveup  .setEditable(bEditable);
      bt_loop_movedown.setEditable(bEditable);

      cb_zone_ts_staticcyclelen    .setEditable(bEditable);
      cb_zone_ts                   .setEditable(bEditable);
      cb_zone_ts_xfade             .setEditable(bEditable);
      cb_zone_ts_abs               .setEditable(bEditable);
      cb_zone_ts_additive          .setEditable(bEditable);
      cm_zone_ts_win               .setEditable(bEditable);
      cb_zone_ts_additive_win      .setEditable(bEditable);
      cb_zone_ts_additive_true_freq.setEditable(bEditable);
      fp_zone_ts_cyclelen_reset    .setEditable(bEditable);
      cb_zone_ts_phase_0           .setEditable(bEditable);
      fp_zone_ts_numpartials       .setEditable(bEditable);
      bt_zone_ts_export            .setEditable(bEditable);
      fp_zone_ts_stereo_spread     .setEditable(bEditable);
      fp_zone_ts                   .setEditable(bEditable);
      bt_zone_ts_findroot          .setEditable(bEditable);
      fp_zone_ts_granularity       .setEditable(bEditable);
      fp_zone_ts_granularity_fine  .setEditable(bEditable);
      fp_zone_ts_additive_xfade    .setEditable(bEditable);
      fp_zone_ts_granularity_amt   .setEditable(bEditable);
      fp_zone_ts_phase_rand_amt    .setEditable(bEditable);
      fp_zone_ts_2d_w              .setEditable(bEditable);
      fp_zone_ts_2d_h              .setEditable(bEditable);
      cm_zone_ts_ipol              .setEditable(bEditable);
      cm_zone_ts_grain             .setEditable(bEditable);
      fp_zone_ts_bend              .setEditable(bEditable);

      if(bEditable)
      {
         // // trace "xxx handleSelectZone: s.offset="+s.offset+" s.len="+s.len;
         fp_zone_maxvoices.setValue(s.maxVoices);
         StSampleMutexGroup mgrp <= s.mutexGroup;
         if(null != mgrp)
            cm_zone_mutex_group.setSelectedOptionByName(mgrp.name);
         else
            cm_zone_mutex_group.setSelectedOption(0); // "-"
         float sr = s.sampleRateRatio * sample.waveform.getSampleRate();
         ai_view.sample_rate = sr;
         fp_zone_sample_rate.setValue(sr);
         fp_zone_delay    .setValue(s.delay);
         fp_zone_delay_mul.setValue(s.delayMultiplier);
         cm_zone_interpolation      .setSelectedOption(s.interpolType);
         cm_zone_interpolation_order.setSelectedOption(s.interpolOrder);
         cm_zone_srr      .setSelectedOption(s.rateReduction);
         fp_zone_srr_mask .setValue         (s.rateReductionMask);
         cm_zone_br       .setSelectedOption(s.bitReduction);
         fp_zone_br_mask  .setValue         (s.bitReductionMask);
         fp_zone_br_preamp.setValue         (s.bitReductionPreAmp);
         fp_zone_sampleoff_rel          .setValue(s.sampleOffsetRel);
         fp_zone_sampleoff_rand         .setValue(s.sampleOffsetRandAmount);
         fp_zone_sampleoff_velamt       .setValue(s.sampleOffsetVelocityAmount);
         cb_zone_sampleoff_velamt_invert.setSelected(s.enableInvertSampleOffsetVelocityAmount);

         cm_zone_ai         .setSelectedOption(s.aiNumPoles);
         fp_zone_ai_q       .setValue(s.aiQ);
         fp_zone_ai_exp_up  .setValue(s.aiExpUp);
         fp_zone_ai_exp_down.setValue(s.aiExpDown);
         fp_zone_ai_lin_oct .setValue(int(s.aiLinOct * 12 + 0.5));
         fp_zone_ai_lin_max .setValue(s.aiLinMax);

         cm_zone_voicebus.setSelectedOption(s.voiceBus + 1);

         cb_zone_sampleoff_freezequiet.setSelected(s.enableFreezeSampleOffWhenQuiet);

         cb_zone_autoselect.setSelected(s.uiGetEnableAutoSelect());

         cm_zone_key_lo     .setSelectedOption(s.getOrCreateKeyRange().lo);
         cm_zone_key_hi     .setSelectedOption(s.getOrCreateKeyRange().hi);
         fp_zone_vel_lo     .setValue(s.getOrCreateVelRange().lo * 127);
         fp_zone_vel_hi     .setValue(s.getOrCreateVelRange().hi * 127);
         fp_zone_mod_lo     .setValue(s.getOrCreateModRange().lo * 127);
         fp_zone_mod_hi     .setValue(s.getOrCreateModRange().hi * 127);
         cb_zone_mod_flt    .setSelected(s.getOrCreateModRange().enableNoteOnFilter);
         fp_zone_mod_fadein .setValue((s.getOrCreateModRange().fadeIn) * 127);
         fp_zone_mod_fadeout.setValue((s.getOrCreateModRange().fadeOut) * 127);
         cb_zone_alt        .setSelected(s.enableAlt);

         fp_zone_noteoff_loop_idx      .setMaxValue(s.numSampleLoops);
         fp_zone_noteoff_loop_idx      .setValue(s.noteOffLoopIndex + 1);
         fp_zone_noteoff_loop_idx      .setMaxValue(s.numSampleLoops);
         cb_zone_noteoff_loop_immediate.setSelected(s.enableNoteOffLoopImmediately);
         cb_zone_fromstart             .setSelected(s.enableFromStart);
         cb_zone_jumptoloop_immediately.setSelected(s.enableJumpToLoopImmediately);
         cm_zone_play_mode             .setSelectedOption(s.playMode);
         cm_zone_loopfade              .setSelectedOption((s.startEndFadeNumFrames > 0)
                                                          ? log2(s.startEndFadeNumFrames)
                                                          : 0
                                                          );

         cb_zone_timedloop        .setSelected(s.enableTimedLoop);
         cb_zone_timedloop_fade   .setSelected(s.enableTimedLoopFade);
         cb_zone_timedloop_oneshot.setSelected(s.enableOneShotLoopStep);

         fp_zone_offset.setValue(s.firstLoopOffset);
         fp_zone_offset.setMaxValue(sample.waveform.numFrames);
         fp_zone_len   .setValue(s.firstLoopLen);
         fp_zone_len   .setMaxValue(sample.waveform.numFrames);
         fp_zone_rep   .setValue(s.firstLoopRep);

         cb_zone_flt_en        .setSelected(s.enableFilter);
         cm_zone_flt_type      .setSelectedOption(s.filterType);
         updateZoneFltEQAndQSwitches(s.filterType);
         fp_zone_flt_cutoff    .setValue(s.filterCutOff * 127);
         fp_zone_flt_pan       .setValue(s.filterPan * (127*4));
         fp_zone_flt_offset    .setValue(s.filterOffset * 127);
         fp_zone_flt_eq_gain   .setValue(s.filterEQGain);
         fp_zone_flt_resonance .setValue(s.filterResonance * 127);
         fp_zone_flt_env_amt   .setValue(s.filterAuxEnvAmount * 127);
         fp_zone_flt_env_velamt.setValue(s.filterAuxEnvVelocityAmount * 127);
         fp_zone_flt_lfo_amt   .setValue(s.filterAuxLFOAmount * 127);
         fp_zone_flt_kbd_amt   .setValue(s.filterKeyboardAmount);
         cb_zone_auxtowav      .setSelected(s.uiEnableAuxToWav);

         fp_zone_transpose_oct  .setValue(s.uiTransposeOct);
         fp_zone_transpose_semi .setValue(s.uiTransposeSemi);
         fp_zone_transpose_cents.setValue(s.uiTransposeCents);
         fp_zone_beatfreq       .setValue(s.beatFrequency);
         fp_zone_freqenvamt     .setValue(s.freqEnvAmt);
         fp_zone_mm_kbd_min     .setValue(-s.getMMKeyboardMin());
         fp_zone_mm_kbd_ctr     .setValue(s.getMMKeyboardCenter());
         fp_zone_mm_kbd_max     .setValue(s.getMMKeyboardMax());
         fp_zone_freqlfoamt     .setValue(s.freqLFOAmt);

         fp_zone_freq_a_speed   .setValue   (s.getOrCreateFreqADSR().getOrCreateEnvAttack().timescale);
         fp_zone_freq_s_speed   .setValue   (s.getOrCreateFreqADSR().getOrCreateEnvSustain().timescale);
         cb_zone_freq_s_loop    .setSelected(s.getOrCreateFreqADSR().enableSustainLoop);
         fp_zone_freq_r_speed   .setValue   (s.getOrCreateFreqADSR().getOrCreateEnvRelease().timescale);
         fp_zone_freq_adsr_level.setValue   (s.getOrCreateFreqADSR().level);
         fp_zone_freq_adsr_time .setValue   ((s.getOrCreateFreqADSR().timescaleMillisec) / 1000.0f);
         cm_zone_freq_stageop   .setSelectedOption(s.getOrCreateFreqADSR().stageOp);

         fp_zone_volume          .setValue(s.volume);
         fp_zone_volume_vel      .setValue(s.volumeVelocityAmount);
         fp_zone_vollfoamt       .setValue(s.volLFOAmt);
         fp_zone_volume_ramp_up  .setValue(s.volumeRampStepsMillisecIn);
         fp_zone_volume_ramp_down.setValue(s.volumeRampStepsMillisecOut);

         fp_zone_volume_a_speed  .setValue(s.getOrCreateVolADSR().getOrCreateEnvAttack().timescale);
         fp_zone_volume_s_speed  .setValue(s.getOrCreateVolADSR().getOrCreateEnvSustain().timescale);
         cb_zone_volume_s_loop   .setSelected(s.getOrCreateVolADSR().enableSustainLoop);
         fp_zone_volume_r_speed  .setValue(s.getOrCreateVolADSR().getOrCreateEnvRelease().timescale);
         fp_zone_volume_adsr_int .setValue(s.getOrCreateVolADSR().intensity);
         fp_zone_volume_adsr_time.setValue((s.getOrCreateVolADSR().timescaleMillisec) / 1000.0f);

         fp_zone_pan           .setValue(s.pan);
         fp_zone_panenvamt     .setValue(s.panEnvAmt);
         fp_zone_panlfoamt     .setValue(s.panLFOAmt);
         fp_zone_pan_a_speed   .setValue(s.getOrCreatePanADSR().getOrCreateEnvAttack().timescale);
         fp_zone_pan_s_speed   .setValue(s.getOrCreatePanADSR().getOrCreateEnvSustain().timescale);
         cb_zone_pan_s_loop    .setSelected(s.getOrCreatePanADSR().enableSustainLoop);
         fp_zone_pan_r_speed   .setValue(s.getOrCreatePanADSR().getOrCreateEnvRelease().timescale);
         fp_zone_pan_adsr_level.setValue(s.getOrCreatePanADSR().level);
         fp_zone_pan_adsr_time .setValue((s.getOrCreatePanADSR().timescaleMillisec) / 1000.0f);
         cm_zone_pan_stageop   .setSelectedOption(s.getOrCreatePanADSR().stageOp);

         fp_zone_aux_a_speed   .setValue(s.getOrCreateAuxADSR().getOrCreateEnvAttack().timescale);
         fp_zone_aux_s_speed   .setValue(s.getOrCreateAuxADSR().getOrCreateEnvSustain().timescale);
         cb_zone_aux_s_loop    .setSelected(s.getOrCreateAuxADSR().enableSustainLoop);
         fp_zone_aux_r_speed   .setValue(s.getOrCreateAuxADSR().getOrCreateEnvRelease().timescale);
         fp_zone_aux_adsr_level.setValue(s.getOrCreateAuxADSR().level);
         fp_zone_aux_adsr_time .setValue((s.getOrCreateAuxADSR().timescaleMillisec) / 1000.0f);
         cm_zone_aux_stageop   .setSelectedOption(s.getOrCreateAuxADSR().stageOp);

         f_lfo_freq  .showLFO(s.getOrCreateFreqLFO(), 0, sample);
         f_lfo_volume.showLFO(s.getOrCreateVolLFO(),  1, sample);
         f_lfo_pan   .showLFO(s.getOrCreatePanLFO(),  2, sample);
         f_lfo_aux   .showLFO(s.getOrCreateAuxLFO(),  3, sample);

         f_modseq_1.showModSeq(s.getOrCreateModSeqByIndexAndPatch(0, s.getDefaultModSeqPatch(0)), 0, s.getDefaultModSeqPatch(0), sample);
         f_modseq_2.showModSeq(s.getOrCreateModSeqByIndexAndPatch(1, s.getDefaultModSeqPatch(1)), 1, s.getDefaultModSeqPatch(1), sample);
         f_modseq_3.showModSeq(s.getOrCreateModSeqByIndexAndPatch(2, s.getDefaultModSeqPatch(2)), 2, s.getDefaultModSeqPatch(2), sample);
         f_modseq_4.showModSeq(s.getOrCreateModSeqByIndexAndPatch(3, s.getDefaultModSeqPatch(3)), 3, s.getDefaultModSeqPatch(3), sample);

         foreach fVCal in a_f_vcal
            fVCal.showSample(s, sample);

         f_glide  .showSample(s, sample);
         f_liverec.showSample(s, sample);
         f_plugin .showSample(s, sample);

         // // fp_zone_ts_granularity.setPresetOptions([64.0, 128.0, 168.558651531, 256.0, 337.117303062, 505.675954593f, 512.0, 674.234606124, 1011.35190919, 1024.0, 1348.46921225, 2048.0, 2696.9384245, 4096.0], ["F-6-24c\t64", "F-5-24c\t128", "C-5\t168", "F-4-24c\t256", "C-4\t337", "C-5*3\t505", "F-3-24c\t512", "C-3\t674", "C-5*6\t1011", "F-2-24c\t1024", "C-2\t1348", "F-1-24c\t2048", "C-1\t2696", "F-0-24c\t4096"]);

         // // fp_zone_ts_cyclelen_reset.setPresetOptions([64.0, 128.0, 168.558651531, 256.0, 337.117303062, 505.675954593f, 512.0, 674.234606124, 1011.35190919, 1024.0, 1348.46921225, 2048.0, 2696.9384245, 4096.0], ["F-6-24c\t64", "F-5-24c\t128", "C-5\t168", "F-4-24c\t256", "C-4\t337", "C-5*3\t505", "F-3-24c\t512", "C-3\t674", "C-5*6\t1011", "F-2-24c\t1024", "C-2\t1348", "F-1-24c\t2048", "C-1\t2696", "F-0-24c\t4096"]);

         local FloatArray aCycle;
         local StringArray aCycleName;
         float c5 = 261.63;
         float fSR = sample.waveform.sampleRate;
         aCycle.add(64);             aCycleName.add("fixed\t"+aCycle.last);
         aCycle.add(128);            aCycleName.add("fixed\t"+aCycle.last);
         aCycle.add(fSR / c5);       aCycleName.add("C-5\t"  +aCycle.last);
         aCycle.add(256);            aCycleName.add("fixed\t"+aCycle.last);
         aCycle.add((2*fSR) / c5);   aCycleName.add("C-4\t"  +aCycle.last);
         aCycle.add((3*fSR) / c5);   aCycleName.add("C-5*3\t"+aCycle.last);
         aCycle.add(512);            aCycleName.add("fixed\t"+aCycle.last);
         aCycle.add((fSR*4) / c5);   aCycleName.add("C-3\t"  +aCycle.last);
         aCycle.add((fSR*6) / c5);   aCycleName.add("C-5*6\t"+aCycle.last);
         aCycle.add(1024);           aCycleName.add("fixed\t"+aCycle.last);
         aCycle.add((fSR*8) / c5);   aCycleName.add("C-2\t"  +aCycle.last);
         aCycle.add(2048);           aCycleName.add("fixed\t"+aCycle.last);
         aCycle.add((fSR*16) / c5);  aCycleName.add("C-1\t"  +aCycle.last);

         fp_zone_ts_granularity.setPresetOptions(aCycle, aCycleName);////["fixed\t64", "fixed\t128", "C-5\t168", "fixed\t256", "C-4\t337", "C-5*3\t505", "F-3-24c\t512", "C-3\t674", "C-5*6\t1011", "fixed\t1024", "C-2\t1348", "fixed\t2048", "C-1\t2696", "fixed\t4096"]);

         fp_zone_ts_cyclelen_reset.setPresetOptions(aCycle, aCycleName);////["F-6-24c\t64", "F-5-24c\t128", "C-5\t168", "F-4-24c\t256", "C-4\t337", "C-5*3\t505", "F-3-24c\t512", "C-3\t674", "C-5*6\t1011", "F-2-24c\t1024", "C-2\t1348", "F-1-24c\t2048", "C-1\t2696", "F-0-24c\t4096"]);


         cb_zone_ts_staticcyclelen    .setSelected(s.enableStaticCyclelen);
         cb_zone_ts                   .setSelected(s.enableTimestretch);
         cb_zone_ts_xfade             .setSelected(s.enableTimestretchXFade);
         cb_zone_ts_abs               .setSelected(s.enableAbsoluteTimestretch);
         cb_zone_ts_additive          .setSelected(s.enableTimestretchAdditive);
         cm_zone_ts_win               .setSelectedOption(sample.partial_window_bits - 5/*9*/);
         cb_zone_ts_additive_win      .setSelected(sample.b_partial_cos_win);
         cb_zone_ts_additive_true_freq.setSelected(sample.b_partial_true_freq);
         fp_zone_ts_cyclelen_reset    .setValue(s.partialCycleLenReset);
         cb_zone_ts_phase_0           .setSelected(s.enablePartialPhase0);
         fp_zone_ts_numpartials       .setValue(s.numPartials);
         fp_zone_ts_stereo_spread     .setValue(s.additiveStereoSpread);
         fp_zone_ts                   .setValue(s.timestretch);
         fp_zone_ts_granularity       .setValue(int(s.timestretchGranularity));
         fp_zone_ts_cyclelen_reset    .setResetValue(s.timestretchGranularity);
         fp_zone_ts_granularity_fine  .setValue(frac(s.timestretchGranularity));
         fp_zone_ts_additive_xfade    .setValue(s.timestretchAdditiveXFade);
         fp_zone_ts_granularity_amt   .setValue(s.timestretchGranularityAmount);
         fp_zone_ts_phase_rand_amt    .setValue(s.timestretchStartPhaseRandAmount);
         fp_zone_ts_2d_w              .setValue(s.timestretch2DWidth);
         fp_zone_ts_2d_h              .setValue(s.timestretch2DHeight);
         cm_zone_ts_ipol              .setSelectedOption(s.timestretchInterpolType);
         cm_zone_ts_grain             .setSelectedOption(s.timestretchGrainWindowType);
         fp_zone_ts_additive_wexp     .setValue(sample.partial_speed_exp);
         fp_zone_ts_additive_bexp     .setValue(sample.partial_bin_exp);
         fp_zone_ts_additive_mexp     .setValue(sample.partial_mag_exp);
         fp_zone_ts_additive_mbexp    .setValue(sample.partial_mag_bin_exp);
         fp_zone_ts_bend              .setValue(s.timestretchBend);

         tm_loops.smp <= sample;
         tm_loops.s <= s;
         tv_loops.tableModelChanged();

         handleSelectLoop(false/*bFromUI*/);

         if(STConfig.b_sampleview_restore_zone_view)
         {
            sv_wave.restoreView(s.uiSVOffset, s.uiSVZoom, s.uiSVZoomYIdx);
            if(s.enableTimestretch && s.enableStaticCyclelen)
               sv_wave.setWavetableCycleHints(s.timestretchGranularity/*cyclelen*/, s.firstLoopOffset);
            else
               sv_wave.setWavetableCycleHints(0, 0);
            sv_wave.redraw();
         }

         ai_view.showSample(s);
         ai_view.redraw();
      }
      else
      {
         fp_zone_maxvoices              .setValue(0);
         cm_zone_mutex_group            .setSelectedOption(-1);
         fp_zone_delay                  .setValue(0);
         fp_zone_delay_mul              .setValue(0);
         cm_zone_interpolation          .setSelectedOption(-1);
         cm_zone_interpolation_order    .setSelectedOption(-1);
         cm_zone_srr                    .setSelectedOption(-1);
         fp_zone_srr_mask               .setValue(0);
         cm_zone_br                     .setSelectedOption(-1);
         fp_zone_br_mask                .setValue(0);
         fp_zone_br_preamp              .setValue(0);
         fp_zone_sampleoff_rel          .setValue(0);
         fp_zone_sampleoff_rand         .setValue(0);
         fp_zone_sampleoff_velamt       .setValue(0);
         cb_zone_sampleoff_velamt_invert.setSelected(false);

         cm_zone_ai         .setSelectedOption(-1);
         fp_zone_ai_q       .setValue(0);
         fp_zone_ai_exp_up  .setValue(0);
         fp_zone_ai_exp_down.setValue(0);
         fp_zone_ai_lin_oct .setValue(0);
         fp_zone_ai_lin_max .setValue(0);

         cm_zone_voicebus.setSelectedOption(-1);

         cb_zone_sampleoff_freezequiet.setSelected(false);

         cb_zone_autoselect.setSelected(false);

         cm_zone_key_lo     .setSelectedOption(-1);
         cm_zone_key_hi     .setSelectedOption(-1);
         fp_zone_vel_lo     .setValue(0);
         fp_zone_vel_hi     .setValue(0);
         fp_zone_mod_lo     .setValue(0);
         fp_zone_mod_hi     .setValue(0);
         cb_zone_mod_flt    .setSelected(false);
         fp_zone_mod_fadein .setValue(0);
         fp_zone_mod_fadeout.setValue(0);
         cb_zone_alt        .setSelected(false);

         fp_zone_noteoff_loop_idx      .setValue(0);
         cb_zone_noteoff_loop_immediate.setSelected(false);
         cb_zone_fromstart             .setSelected(false);
         cb_zone_jumptoloop_immediately.setSelected(false);
         cm_zone_play_mode             .setSelectedOption(-1);
         cm_zone_loopfade              .setSelectedOption(-1);

         cb_zone_timedloop        .setSelected(false);
         cb_zone_timedloop_fade   .setSelected(false);
         cb_zone_timedloop_oneshot.setSelected(false);

         fp_zone_offset.setValue(0);
         fp_zone_len.setValue(0);
         fp_zone_rep.setValue(0);

         cb_zone_flt_en        .setSelected(false);
         cm_zone_flt_type      .setSelectedOption(-1);
         updateZoneFltEQAndQSwitches(0);
         fp_zone_flt_cutoff    .setValue(0);
         fp_zone_flt_pan       .setValue(0);
         fp_zone_flt_offset    .setValue(0);
         fp_zone_flt_eq_gain   .setValue(0);
         fp_zone_flt_resonance .setValue(0);
         fp_zone_flt_env_amt   .setValue(0);
         fp_zone_flt_env_velamt.setValue(0);
         fp_zone_flt_lfo_amt   .setValue(0);
         fp_zone_flt_kbd_amt   .setValue(0);
         cb_zone_auxtowav      .setSelected(false);

         fp_zone_transpose_oct  .setValue(0);
         fp_zone_transpose_semi .setValue(0);
         fp_zone_transpose_cents.setValue(0);
         fp_zone_beatfreq       .setValue(0);
         fp_zone_freqenvamt     .setValue(0);
         fp_zone_mm_kbd_min     .setValue(0);
         fp_zone_mm_kbd_ctr     .setValue(0);
         fp_zone_mm_kbd_max     .setValue(0);
         fp_zone_freqlfoamt     .setValue(0);

         fp_zone_freq_a_speed   .setValue(0);
         fp_zone_freq_s_speed   .setValue(0);
         cb_zone_freq_s_loop    .setSelected(false);
         fp_zone_freq_r_speed   .setValue(0);
         fp_zone_freq_adsr_level.setValue(0);
         fp_zone_freq_adsr_time .setValue(0);
         cm_zone_freq_stageop   .setSelectedOption(-1);

         fp_zone_volume          .setValue(0);
         fp_zone_volume_vel      .setValue(0);
         fp_zone_vollfoamt       .setValue(0);
         fp_zone_volume_ramp_up  .setValue(0);
         fp_zone_volume_ramp_down.setValue(0);

         fp_zone_volume_a_speed  .setValue(0);
         fp_zone_volume_s_speed  .setValue(0);
         cb_zone_volume_s_loop   .setSelected(false);
         fp_zone_volume_r_speed  .setValue(0);
         fp_zone_volume_adsr_int .setValue(0);
         fp_zone_volume_adsr_time.setValue(0);

         fp_zone_pan           .setValue(0);
         fp_zone_panenvamt     .setValue(0);
         fp_zone_panlfoamt     .setValue(0);
         fp_zone_pan_a_speed   .setValue(0);
         fp_zone_pan_s_speed   .setValue(0);
         cb_zone_pan_s_loop    .setSelected(false);
         fp_zone_pan_r_speed   .setValue(0);
         fp_zone_pan_adsr_level.setValue(0);
         fp_zone_pan_adsr_time .setValue(0);
         cm_zone_pan_stageop   .setSelectedOption(-1);

         fp_zone_aux_a_speed   .setValue(0);
         fp_zone_aux_s_speed   .setValue(0);
         cb_zone_aux_s_loop    .setSelected(false);
         fp_zone_aux_r_speed   .setValue(0);
         fp_zone_aux_adsr_level.setValue(0);
         fp_zone_aux_adsr_time .setValue(0);
         cm_zone_aux_stageop   .setSelectedOption(-1);

         f_lfo_freq  .showLFO(null, 0, null);
         f_lfo_volume.showLFO(null, 1, null);
         f_lfo_pan   .showLFO(null, 2, null);
         f_lfo_aux   .showLFO(null, 3, null);

         foreach fVCal in a_f_vcal
            fVCal.showSample(null, null);

         f_glide  .showSample(null, null);
         f_liverec.showSample(null, null);
         f_plugin .showSample(null, null);

         cb_zone_ts_staticcyclelen    .setSelected(false);
         cb_zone_ts                   .setSelected(false);
         cb_zone_ts_xfade             .setSelected(false);
         cb_zone_ts_abs               .setSelected(false);
         cb_zone_ts_additive          .setSelected(false);
         cm_zone_ts_win               .setSelectedOption(-1);
         cb_zone_ts_additive_win      .setSelected(false);
         cb_zone_ts_additive_true_freq.setSelected(false);
         fp_zone_ts_cyclelen_reset    .setValue(0);
         cb_zone_ts_phase_0           .setSelected(false);
         fp_zone_ts_numpartials       .setValue(0);
         fp_zone_ts_stereo_spread     .setValue(0);
         fp_zone_ts                   .setValue(0.0f);
         fp_zone_ts_granularity       .setValue(0.0f);
         fp_zone_ts_granularity_fine  .setValue(0.0f);
         fp_zone_ts_additive_xfade    .setValue(0.0f);
         fp_zone_ts_granularity_amt   .setValue(0.0f);
         fp_zone_ts_phase_rand_amt    .setValue(0.0f);
         fp_zone_ts_2d_w              .setValue(0);
         fp_zone_ts_2d_h              .setValue(0);
         cm_zone_ts_ipol              .setSelectedOption(-1);
         cm_zone_ts_grain             .setSelectedOption(-1);
         fp_zone_ts_additive_wexp     .setValue(0.0f);
         fp_zone_ts_additive_bexp     .setValue(0.0f);
         fp_zone_ts_additive_mexp     .setValue(0.0f);
         fp_zone_ts_additive_mbexp    .setValue(0.0f);
         fp_zone_ts_bend              .setValue(0.0f);

         f_modseq_1.showModSeq(null/*modseq*/, 0/*mseqidx*/, 0/*mseqpatchidx*/, null/*sample*/);
         f_modseq_2.showModSeq(null/*modseq*/, 1/*mseqidx*/, 0/*mseqpatchidx*/, null/*sample*/);
         f_modseq_3.showModSeq(null/*modseq*/, 2/*mseqidx*/, 0/*mseqpatchidx*/, null/*sample*/);
         f_modseq_4.showModSeq(null/*modseq*/, 3/*mseqidx*/, 0/*mseqpatchidx*/, null/*sample*/);

         tm_loops.smp <= null;
         tm_loops.s <= null;
         tv_loops.tableModelChanged();

         handleSelectLoop(false/*bFromUI*/);

         sv_wave.setWavetableCycleHints(0, 0);

         ai_view.showSample(null);
      }

      showZoneAdditive();
      updateMM(true/*bUpdateVarForm*/);

      handleZoneSoloChanged(true/*bQuiet*/);
   }

   // <ui_update.png>
   protected method updateZoneTableModel(boolean _bNames) {
      local IntArray selRows <= tv_zones.getSelectedRows();
      int cursorRow = tv_zones.getCursorRow();
      if(_bNames)
      {
         if(@(tv_zones.getTableModel()) != @(tm_zones_names))
            tv_zones.setTableModel(tm_zones_names);
      }
      else
      {
         if(@(tv_zones.getTableModel()) != @(tm_zones))
            tv_zones.setTableModel(tm_zones);
      }
      tv_zones.tableModelChanged();
      // // tv_zones.moveCursorToRow(cursorRow);
      tv_zones.moveCursorToRowNoAction(cursorRow);
      tv_zones.makeCursorRowVisible();
      tv_zones.setSelectedRows(selRows);
      bt_zone_names.setToggleState(_bNames);
   }

   // <ui.png>
   protected method toggleZoneTableModel() {
      boolean bNames = (@(tv_zones.getTableModel()) != @(tm_zones_names));
      updateZoneTableModel(bNames);
      if(bNames)
         Global.Print("Show zone names");
      else
         Global.Print("Show zone velocity + mod ranges");
   }

   // <ui_update.png>
   protected method updateZoneDblClickMode() {
      switch(STConfig.pgsample_zone_dblclick_mode)
      {
         default:
         case 0:
            // nop
            bt_zone_dblclick.setCaption("-");
            break;

         case 1:
            // Play
            bt_zone_dblclick.setCaption("P");
            break;

         case 2:
            // Edit synth patch
            bt_zone_dblclick.setCaption("S");
            break;

         case 3:
            // Edit synth patch machine
            bt_zone_dblclick.setCaption("M");
            break;
         }
   }

   // <ui_handle.png>
   protected method handleZoneDblClickModeChanged() {
      STConfig.pgsample_zone_dblclick_mode = (STConfig.pgsample_zone_dblclick_mode + 1) % 4;
      updateZoneDblClickMode();
      Global.Print("Zone double-click mode is \""+a_dblclick_mode_names.get(STConfig.pgsample_zone_dblclick_mode)+"\"");
   }

   // <ui_handle.png>
   protected =replay= method playZone(StSample s, boolean _bNoteOn) {
      Sample sample <= getSelectedSample();
      StSamplePlayer sp <= getCurrentSamplePlayer();
      if((null != sample) && (null != s) && (null != sp))
      {
         StRange range <= s.getKeyRange();
         StRange rangeMod <= s.getModRange();
         if((null != range) && (null != rangeMod))
         {
            int note = range.lo + (range.hi - range.lo) / 2;
            float mod = rangeMod.lo + (rangeMod.hi - rangeMod.lo) / 2;

            if(false != _bNoteOn)
            {
               // Note on
               int voicekey;
               if(cb_zone_solo.isSelected())
               {
                  voicekey = sp.startSample(s,
                                            null/*freqTable*/, note, 1.0/*vel*/,
                                            mod,
                                            1.0f/*volume*/,
                                            0/*pan*/,
                                            0/*freq*/
                                            );
               }
               else
               {
                  voicekey = sp.startSampleBank(sample.sample_bank,
                                                null/*freqTable*/, note, 1.0/*_vel*/,
                                                mod,
                                                1.0f/*volume*/,
                                                0/*pan*/,
                                                0/*freq*/
                                                );
               }

               if(voicekey > 0)
               {
                  sp.initStartedVoicesByKey(voicekey);

                  if(maybe == _bNoteOn)
                     sp.noteOff(note, 0.5/*vel*/);
               }
            }
            else
            {
               // Note off
               sp.noteOff(note, 0.5/*vel*/);
            }
         }
      }
   }

   // <ui_handle.png>
   public method playFirstSelectedZone(boolean _bNoteOn) {
      // called by zone table preview (mouse hold)
      StSample s <= getFirstSelectedZone();
      if(null != s)
         playZone(s, _bNoteOn);
   }

   // <ui_handle.png>
   public =replay= method playZones(PointerArray _zones) {
      // called by DrumPadDialog
      StSample *s;
      foreach s in _zones
         playZone(s, maybe/*bNoteOn*/);
   }

   // <ui_show.png>
   protected method showZonesContextMenu(boolean _bFocusFirst) {
      PopupMenu *spm;
      pm_zones <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_zones;

      Sample sample <= getSelectedSample();
      local PointerArray selectedZones <= getSelectedZones();
      boolean bHaveZones = (null != sample) && (0 != sample.getNumZones());

      int numClipboardFrames = SampleView.GetClipboardNumFrames();
      pmb <= pm.addDefaultButton("Add new zone from clipboard ("+numClipboardFrames+" frame"+Utils.GetPluralString(numClipboardFrames)+")",
                                 "zones_new_from_clipboard"
                                 );
      pmb.setAccelerators("", "lshift-n");
      pm.addSeparator();

      pmb <= pm.addDefaultButton("Auto-Tune selected zones",
                                 "zones_auto_tune"
                                 );
      pmb.setActive(selectedZones.numElements > 0);
      pmb.setToolTipCaption("Find root keys and update transpose");

      // pre-filter submenu
      spm <= PopupMenu.New(pm);
      pmb <= pm.addMenu("Auto-tune prefiltered", deref spm);

      pmb <= spm.addDefaultButton("Auto-Tune selected zones (prefilter sr/16)",
                                 "zones_auto_tune_sr1"
                                 );
      pmb.setActive(selectedZones.numElements > 0);
      pmb.setToolTipCaption("Find root keys and update transpose, pre-filter samples at cutoff = samplerate / 16");

      pmb <= spm.addDefaultButton("Auto-Tune selected zones (prefilter sr/32)",
                                 "zones_auto_tune_sr2"
                                 );
      pmb.setActive(selectedZones.numElements > 0);
      pmb.setToolTipCaption("Find root keys and update transpose, pre-filter samples at cutoff = samplerate / 32");

      pmb <= spm.addDefaultButton("Auto-Tune selected zones (prefilter sr/64)",
                                 "zones_auto_tune_sr3"
                                 );
      pmb.setActive(selectedZones.numElements > 0);
      pmb.setToolTipCaption("Find root keys and update transpose, pre-filter samples at cutoff = samplerate / 64");

      pmb <= spm.addDefaultButton("Auto-Tune selected zones (prefilter sr/128)",
                                 "zones_auto_tune_sr4"
                                 );
      pmb.setActive(selectedZones.numElements > 0);
      pmb.setToolTipCaption("Find root keys and update transpose, pre-filter samples at cutoff = samplerate / 128");


      pm.addSeparator();
      pmb <= pm.addDefaultButton("Snap loop starts to zero crossings",
                                 "zones_snap_loop_starts_to_zc"
                                 );
      pmb.setToolTipCaption("For each selected zone, adjust the start of its first loop to the nearest zero crossing (de-click)\n\n (note) useful for cleaning-up auto-sliced one-shot samples");
      pmb <= pm.addDefaultButton("Snap loop ends to zero crossings",
                                 "zones_snap_loop_ends_to_zc"
                                 );
      pmb.setActive(bHaveZones);
      pmb.setToolTipCaption("For each selected zone, adjust the end of its first loop to the nearest zero crossing (de-click)\n\n (note) never extends previous loop area\n\n (note) useful for cleaning-up auto-sliced one-shot samples");
      pmb.setActive(bHaveZones);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Fade-in loop starts",
                                 "zones_fade_starts"
                                 );
      pmb.setActive(bHaveZones);
      pmb.setToolTipCaption("For each selected zone, fade-in the first 24 sample frames");
      pmb <= pm.addDefaultButton("Fade-out loop ends",
                                 "zones_fade_ends"
                                 );
      pmb.setToolTipCaption("For each selected zone, fade-out the last 384 sample frames");
      pmb.setActive(bHaveZones);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Alt-group selected zones",
                                 "zones_alt_group"
                                 );
      pmb.setActive(selectedZones.numElements > 0);

      pm.addSeparator();
      pmb <= pm.addCheckButton("Xfade after Autoloop", STConfig.b_autoloop_xfade, "zones_autoloop_xfade");

      pmb <= pm.addDefaultButton("Auto-Loop Selected Zones (20% start, 20% end)",
                                 "zones_autoloop_20_20"
                                 );
      pmb.setActive(selectedZones.numElements > 0);

      pmb <= pm.addDefaultButton("Auto-Loop Selected Zones (20% start, 10% end)",
                                 "zones_autoloop_20_10"
                                 );
      pmb.setActive(selectedZones.numElements > 0);

      pmb <= pm.addDefaultButton("Auto-Loop Selected Zones (5% start, 10% end)",
                                 "zones_autoloop_5_10"
                                 );
      pmb.setActive(selectedZones.numElements > 0);

      pmb <= pm.addDefaultButton("Auto-Loop Selected Zones (0% start, 0% end)",
                                 "zones_autoloop_0_0"
                                 );
      pmb.setActive(selectedZones.numElements > 0);


      // Re-Init zones sub-menu
      pm.addSeparator();
      spm <= PopupMenu.New(pm);
      pmb <= pm.addMenu("Re-Init Zone Ranges", deref spm);
      pmb.setToolTipCaption("Re-Init Zone Ranges\n\n (note) keep envs, LFOs, modseq, loops, .. just update note, velocity, or mod ranges");

      boolean bEnableInit = false;

      if(null != sample)
      {
         bEnableInit = ((sample.sample_bank.numSamples) > 0);
      }

      int typeIdx = 1;
      while(typeIdx < Sample.TYPE_GRID)////(Sample.type_names.numElements))
      {
         pmb <= spm.addDefaultButton(Sample.type_names.get(typeIdx),
                                     "zones_reinit_"+typeIdx
                                     );
         pmb.setActive(bEnableInit);

         typeIdx++;
      }

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Delete unused waveform areas",
                                 "zones_delete_unused_waveform_areas"
                                 );
      pmb.setToolTipCaption("Delete unused waveform areas and insert silence after each area");

      pmb <= pm.addDefaultButton("Delete unused waveform areas (no silence)",
                                 "zones_delete_unused_waveform_areas_no_silence"
                                 );
      pmb.setToolTipCaption("Delete all unused waveform areas (don't leave gaps between areas)");

      pmb <= pm.addDefaultButton("Reorder waveform areas by zones",
                                 "zones_reorder_waveform_areas"
                                 );
      pmb.setToolTipCaption("Reorder waveform areas by zones\n\n (note) duplicates waveform areas that are referenced by more than one zone");


      pm.addSeparator();
      pmb <= pm.addDefaultButton("Drum Map: Delete C-0..G-A zones and reset LM+HM",
                                 "zones_delete_c0_ga"
                                 );
      pmb.setActive(bHaveZones);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Wave Sequence: Set Delay to Zone Idx",
                                 "zones_waveseq"
                                 );

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Cycle: Reorder patches by zones",
                                 "zones_reorder_cycle_patches"
                                 );


      pm.resizeToMinimum();
      pm.showNearMouse(-10, -10);
      if(_bFocusFirst)
         pm.focusNextMenuItem();

      Global.Print("Show zones context menu.");
   }

   // <method.png>
   protected method execZoneRowClickDefaultAction() {
      switch(STConfig.pgsample_zone_dblclick_mode)
      {
         default:
         case 0:
            break;

         case 1:  // 'P'
            playFirstSelectedZone(maybe/*bNoteOn*/);
            break;

         case 2:  // 'S'
            tryShowFMStackEditorOrCycleSynthDialogOrZoomToHighlightedRegion();
            break;

         case 3:  // 'M'
            if(tryShowFMStackEditor())
               ts_zone.setActiveTabIndex(ZONE_TAB_FX/*Plugins*/);
            else if(tryShowCycleSynthDialog())
               dlg_synth.showMachineEditor();
            else
               selectAndZoomToHighlightedRegion();
            break;
      }
   }

   // <ui_handle.png>
   protected method handleAutoLoopFirstSelectedZone() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local AutoLoop autoLoop;
         local PointerArray zones <= getSelectedZones();
         StSample s <= getFirstSelectedZone();
         int offset = sv_wave.getSelectionStartOffset();
         int len = sv_wave.getSelectionLen();
         if(len >= 8192)
         {
            autoLoop.loopDetect(sample.waveform, offset, len, true/*bRand*/);
            Sample.SetZoneFirstLoop(s,
                                    autoLoop.result_offset,
                                    autoLoop.result_len,
                                    0
                                    );
            handleSelectZone(false/*bStopAudio*/);
            sample.markParamsAsModified();
         }
         else
         {
            Global.Warning("AutoLoop: selection is too short");
         }
      }
   }

   // <ui_handle.png>
   protected method handleAutoLoopSelectedZones(float _pctStart, float _pctEnd) {
      // (note) pctStart/End: 0.05 = 5%
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample *s;
         local AutoLoop autoLoop;
         local PointerArray zones <= getSelectedZones();
         foreach s in zones
         {
            int offset = s.firstLoopOffset;
            int len = s.firstLoopLen;

            // Skip attack+release
            offset += len * _pctStart;
            len = len - len * (_pctStart + _pctEnd);

            if(len >= 256)
            {
               autoLoop.loopDetect(sample.waveform, offset, len, true/*bRand*/);
               Sample.SetZoneFirstLoop(s,
                                       autoLoop.result_offset,
                                       autoLoop.result_len,
                                       0
                                       );
            }
         }
         handleSelectZone(true/*bStopAudio*/);
         sample.markParamsAsModified();

         if(STConfig.b_autoloop_xfade)
         {
            tv_zones.selectNone();
            int zoneIdx = 0;
            foreach s in zones
            {
               tv_zones.moveCursorToRow(zoneIdx);  // updates SampleView
               sv_wave.setSelection(s.firstLoopOffset, s.firstLoopOffset + s.firstLoopLen);
               sv_wave.loopCrossfadeSelection2(128);
               zoneIdx++;
            }
            sv_wave.showAll();
         }
      }
   }

   // <method.png>
   protected =replay= method handleDeleteUnusedWaveformAreas(boolean _bInsertSilence) {
      Sample sample <= getSelectedSample();
      int numRemoved = 0;
      if(null != sample)
      {
         boolean bBeforeFirstArea = true;

         if((sample.waveform.getNumFrames()) > 0)
         {
            local IntArray loopStarts;
            local IntArray loopEnds;

            Audio.ResetAllTempSamples();
            Audio.ResetAllSampleVoices(sample);

            StSample s <= sample.sample_bank.firstSample;
            while(null != s)
            {
               IntArray loops <= s.sampleLoops;
               if(null != loops)
               {
                  int loopIdx = 0;
                  loop(loops.numElements / 3)
                  {
                     if(loops[loopIdx + 1] > 0)  // len > 0 ?
                     {
                        loopStarts.add(loops[loopIdx + 0]);
                        loopEnds.add(loops[loopIdx + 0] + loops[loopIdx + 1]);
                     }
                     loopIdx += 3;
                  }
               }

               if(s.enableFromStart)
                  bBeforeFirstArea = false;  // don't delete waveform data before first loop area

               // Next zone
               s <= s.next;
            }

            Global.Debug("PageSample::handleDeleteUnusedWaveformAreas: found "+loopStarts.numElements+" loop areas");

            int totalNumFramesDeleted = sv_wave.deleteAreas(bBeforeFirstArea, loopStarts, loopEnds, _bInsertSilence);

            Global.Print("DeleteUnusedWaveformAreas: deleted "+totalNumFramesDeleted+" sample frame"+Utils.GetPluralString(totalNumFramesDeleted));

            sv_wave.redraw();
         }
      }
   }

   // <method.png>
   protected =replay= method handleAltGroupSelectedZones() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray selectedZones <= getSelectedZones();
         if(selectedZones.numElements > 0)
         {
            StRange *range;
            StSample s <= selectedZones.get(0);
            range <= s.getOrCreateKeyRange();
            int key = range.lo;

            foreach s in selectedZones
            {
               range <= s.getOrCreateKeyRange();
               int trp = range.lo - key;
               s.transpose = s.transpose + trp;
               range.lo = key;
               range.hi = range.hi - trp;
               s.enableAlt = true;
            }

            sample.sample_bank.updateAltGroups();
            tv_zones.tableModelChanged();

            Global.Print("Alt-group "+(selectedZones.numElements)+" zone"+Utils.GetPluralString(selectedZones.numElements));
         }
      }
   }

   // <method.png>
   public =replay= method handleNewZoneFromClipboard() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         int numClipboardFrames = SampleView.GetClipboardNumFrames();
         if(numClipboardFrames > 0)
         {
            sv_wave.undoBegin("newZoneFromClipboard");

            StSample s <= sample.newZone();
            StWaveform wf <= sample.waveform;
            sv_wave.insertSilenceAt_NoUndo(wf.numFrames, SampleView.NUM_BORDER_SILENCE_FRAMES);
            int wfFrameOffStart = wf.numFrames;
            // // sv_wave.setSelection(wf.numFrames, wf.numFrames);
            sv_wave.sel_startoff = wf.numFrames;
            sv_wave.sel_endoff = wf.numFrames;
            sv_wave.pasteSelection(false/*bUndoBegin*/);
            int wfFrameOffEnd = wf.numFrames;
            sv_wave.undoEnd();
            IntArray loops <= s.getOrCreateSampleLoops();
            loops.add(wfFrameOffStart);
            loops.add(wfFrameOffEnd - wfFrameOffStart);
            loops.add(1);

            tv_zones.tableModelChanged();
            tv_zones.moveCursorToLastRow();

            handleSelectZone(true/*bStopAudio*/);

            sample.markParamsAsModified();
            Global.Print("Create zone");
         }
         else
         {
            Global.Warning("Clipboard is empty");
         }
      }
   }

   // <method.png>
   public method handleAutoTuneSelectedZones(float _prefilterCutOff) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray selectedZones <= getSelectedZones();
         if(selectedZones.numElements > 0)
         {
            float sampleRate = sample.waveform.sampleRate;

            StSample s <= selectedZones.get(0);

            foreach s in selectedZones
            {
               int minOffset = s.minOffset;
               int numFrames = s.maxOffset - minOffset;
               if(numFrames >= 512)
               {
                  // Try to skip first 10% of area (attack phase)
                  if(numFrames >= int(8192+8192*0.1))
                  {
                     int skipAttackOffset = (numFrames * 0.1);
                     minOffset += skipAttackOffset;
                     numFrames -= skipAttackOffset;
                  }

                  float rootKey = sample.findRootKeyForArea(minOffset,
                                                            numFrames,
                                                            _prefilterCutOff,
                                                            sampleRate * s.sampleRateRatio,
                                                            false/*bQuiet*/,
                                                            null/*retMagnitudesOrNull*/,
                                                            null/*retMagnitudesSortIndicesOrNull*/,
                                                            null/*retFreqHzOrNull*/
                                                            );
                  if(rootKey >= 0)
                  {
                     float transp = Sample.KEY_MIDDLE_C - rootKey;
                     float transpFrac = frac(transp);
                     if(transpFrac > 0.5)
                     {
                        s.setTransposeAndUpdateOctSemi(int(transp) + 1);
                        s.setUiTransposeCents(-100.0 * (1.0 - transpFrac));
                     }
                     else
                     {
                        s.setTransposeAndUpdateOctSemi(int(transp));
                        s.setUiTransposeCents(100.0 * transpFrac);
                     }
                  }
               }
            }

            tv_zones.tableModelChanged();
            current_project.markAsModified();
            handleSelectZone(false/*bStopAudio*/);

            Global.Print("Auto-Tune "+(selectedZones.numElements)+" zone"+Utils.GetPluralString(selectedZones.numElements));
         }
      }
   }

   // <method.png>
   protected =replay= method handleDeleteZones_C0_GA() {
      Sample sample <= getSelectedSample();
      int numRemoved = 0;
      if(null != sample)
      {
         int zoneIdx = 0;
         while(zoneIdx < sample.getNumZones())
         {
            StSample s <= sample.getZoneByIdx(zoneIdx);
            StRange range <= s.getKeyRange();
            if(0 == range.lo && 127 == range.hi)
            {
               sample.removeZone(s);
               numRemoved++;
            }
            else
            {
               range <= s.getModRange();
               range.lo = 0;
               range.hi = 1.01;  // => 128  (1.0=127)
               zoneIdx++;
            }
         }
      }

      if(numRemoved > 0)
      {
         tv_zones.tableModelChanged();
         handleSelectZone(true/*bStopAudio*/);
         sample.markParamsAsModified();
      }

      Global.Print("Removed "+numRemoved+" zone"+Utils.GetPluralString(numRemoved));
   }

   // <method.png>
   protected =replay= method handleWaveSeqZonesDelay() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         int zoneIdx = 0;
         while(zoneIdx < sample.getNumZones())
         {
            StSample s <= sample.getZoneByIdx(zoneIdx);
            s.delay = zoneIdx;
            zoneIdx++;
         }

         Global.Print("WaveSeq: init "+zoneIdx+" zone delay param"+Utils.GetPluralString(zoneIdx));
      }
   }

   // <method.png>
   protected method selectZoneByAutoChopRegion(int _startOff, int _endOff) : boolean {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         if((sample.sample_bank.numSamples) > 0)
         {
            StSample s <= sample.sample_bank.firstSample;
            int idx = 0;
            int bestIdx = -1;
            int bestStartDist = 9999999;

            while(null != s)
            {
               int startDist = abs(_startOff - s.firstOffset);
               if(startDist < bestStartDist)
               {
                  bestIdx = idx;
                  bestStartDist = startDist;
               }

               // Next zone
               idx++;
               s <= s.next;
            }

            if(bestIdx >= 0)
            {
               tv_zones.selectNone();
               tv_zones.moveCursorToRow(bestIdx);
               return true;
            }
         }
      }
      return false;
   }

   // <method.png>
   protected method lazySelectFirstZoneOnly() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         int firstIdx = tv_zones.getCursorRow();
         if(-1 != firstIdx)
         {
            if(getSelectedZones().numElements > 1)
            {
               tv_zones.selectNone();
               tv_zones.moveCursorToRow(firstIdx);
            }
         }
      }
   }

   // <method.png>
   public method selectAllZones() {
      tv_zones.selectAll();
      tv_zones.moveCursorToFirstRow();
   }

   // <method.png>
   public method setEnableAlt(boolean _bEnable) {
      cb_zone_alt.setSelected(_bEnable);
      handleZoneAltChanged();
   }

   // <method.png>
   public method setEnableSolo(boolean _bEnable) {
      cb_zone_solo.setSelected(_bEnable);
      handleZoneSoloChanged(true/*bQuiet*/);
   }

   // <method.png>
   protected method selectPrevZone() {
      lazySelectFirstZoneOnly();
      tv_zones.moveCursorToPreviousRow();
   }

   // <method.png>
   protected method selectNextZone() {
      lazySelectFirstZoneOnly();
      tv_zones.moveCursorToNextRow();
   }

   // <method.png>
   protected selectAndZoomToHighlightedRegion() : boolean {
      return sv_wave.copyHighlightToSelection(true/*bZoom*/);
   }

   // <ui_handle.png>
   protected method handleZoneMidiChanged() {
      Global.Print("Select zone by MIDI is "+Utils.GetEnableString(cb_zone_midi.isSelected()));
   }

   // <method.png>
   public method selectZones(Sample sample, PointerArray zones, boolean bAllowSelectNone) {
      if(zones.numElements > 0)
      {
         tv_zones.selectNone();
         int zoneIdx = 0;
         StSample s <= sample.sample_bank.firstSample;
         local IntArray sel;
         loop(sample.getNumZones())
         {
            if(-1 != zones.indexOfPointer(s, 0))
               sel.add(zoneIdx);
            s <= s.next;
            zoneIdx++;
         }
         if(sel.numElements > 0)
         {
            if(sel.numElements > 1)
               tv_zones.setSelectedRows(sel);
            tv_zones.redraw();
            tv_zones.moveCursorToRowNoAction(sel[0]);
            tv_zones.makeCursorRowVisible();
            handleSelectZone(false/*bStopAudio*/);
         }
      }
      else if(bAllowSelectNone)
      {
         tv_zones.selectNone();
         handleSelectZone(false/*bStopAudio*/);
      }
   }

   // <method.png>
   protected method trySelectZonesByMIDI() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones;
         queryLastPlayedZones(sample, zones);
         selectZones(sample, zones, false/*bAllowSelectNone*/);

         if(isDrumPadDialogVisible())
         {
            dlg_drum_pad.highlightSelectedZonePads();
            UI.LoseMouseFocusIfWithin(dlg_drum_pad);
            UI.LoseKeyboardFocusIfWithin(dlg_drum_pad, true/*bQuiet*/);
         }
      }
   }

   // <method.png>
   protected method trySelectZonesByNoteIdx(byte _noteIdx) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones;
         StSample s <= sample.getZoneByIdx(0);
         while(null != s)
         {
            StRange range <= s.getKeyRange();
            if(range.lo <= _noteIdx <= range.hi)
               zones.add(s);
            s <= s.next;
         }

         selectZones(sample, zones, false/*bAllowSelectNone*/);

         if(isDrumPadDialogVisible())
         {
            dlg_drum_pad.highlightSelectedZonePads();
            UI.LoseMouseFocusIfWithin(dlg_drum_pad);
            UI.LoseKeyboardFocusIfWithin(dlg_drum_pad, true/*bQuiet*/);
         }
      }
   }

   // <method_get.png>
   public method getCurrentSamplePlayer() : StSamplePlayer {
      if(null != mod_sample)
      {
         // Track sample player
         return mod_sample.sample_player;
      }
      else if(null != sample_pad_common)
      {
         // Track SamplePad sample player
         return sample_pad_common.sample_player;
      }
      {
         // Temporary sample player
         // // return Audio.temp_sp;
         return Audio.temp_mod_sample.sample_player;
      }
   }

   // <method_get.png>
   public method getCurrentModSample() : ModSample {
      if(null != mod_sample)
      {
         // Track
         return mod_sample;
      }
      else if(null != sample_pad_common)
      {
         // Track SamplePad
         return null;
      }
      else
      {
         // Temporary sample player
         return Audio.temp_mod_sample;
      }
   }

   // <method.png>
   protected =replay= method queryLastPlayedZones(Sample _sample, PointerArray _ret) {
      StSamplePlayer sp <= getCurrentSamplePlayer();

      int lastVoiceKey = sp.getLastVoiceKey();
      if(lastVoiceKey != last_queried_voice_key)
      {
         last_queried_voice_key = lastVoiceKey;
         sp.findUniqueSamplesByVoiceKey(_ret, lastVoiceKey);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneSoloChanged(boolean _bQuiet) {

      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         if(cb_zone_solo.isSelected())
            sample.setSoloZoneIdx(getFirstSelectedZoneIdx());
         else
            sample.setSoloZoneIdx(-1);
      }
      if(!_bQuiet)
         Global.Print("Zone solo is "+Utils.GetEnableString(cb_zone_solo.isSelected()));
   }

   // <ui_show.png>
   protected method showAddSampleMenu(boolean _bFocusFirst) {

      pm_sample_add <= PopupMenu.New(this);
      PopupMenu pm <= pm_sample_add;
      PopupMenuButton *pmb;
      PopupMenu *spm;
      StSample s <= getFirstSelectedZone();

      pmb <= pm.addDefaultButton("New",
                                 "-"
                                 );
      pmb.setActive(false);
      pm.addSeparator();

      pmb <= pm.addDefaultButton("Empty",
                                 "empty"
                                 );

      pmb <= pm.addDefaultButton("Sine",
                                 "sine"
                                 );

      pmb <= pm.addDefaultButton("Sine (Amiga)",
                                 "sine_amiga"
                                 );

      pmb <= pm.addDefaultButton("Cycle",
                                 "cycle"
                                 );

      pmb <= pm.addDefaultButton("Cycle (Amiga)",
                                 "cycle_amiga"
                                 );

      pmb <= pm.addDefaultButton("Patch Plugin",
                                 "patch_plugin"
                                 );

      pmb <= pm.addDefaultButton("FM Stack",
                                 "fm_stack"
                                 );

      // User preset sample sub-menu
      Samples.ScanPresets();  // (re-)scan preset samples
      StringArray aPresets <= Samples.preset_file_names;
      if(!aPresets.isEmpty())
      {
         pm.addSeparator();
         spm <= PopupMenu.New(pm);
         pmb <= pm.addMenu("User", deref spm);

         String *sPreset;
         int presetIdx = 0;
         foreach sPreset in aPresets
         {
            pmb <= spm.addDefaultButton(sPreset.replace(".esa",""), "user_"+presetIdx);
            presetIdx++;
         }
      }

      pm.resizeToMinimum();
      pm.showNearLayerOffset(bt_sample_add, -80, 0);
      if(_bFocusFirst)
         pm.focusNextMenuItem();

      Global.Print("Show Add Sample menu.");
   }

   // <ui_show.png>
   protected method createSampleDialog(int _mode/*NEWSMP_xxx*/) {
      new_sample_mode  = _mode;
      local String defName <= Utils.GetCurrentDateTimeStringNumeric();

      dlg_new_sample_name <= TextInputDialog.NewHold("Enter sample name",
                                                     " Enter new sample name",
                                                     "Create", "Cancel",
                                                     defName, 30, 16, this
                                                     );

      dlg_new_sample_name.setButtonFontByName("big5");
      dlg_new_sample_name.setMessageFontByName("big7");
      dlg_new_sample_name.setTextFontByName("big6");
      dlg_new_sample_name.setButtonIcons(UI.GetIcon("add"), UI.GetIcon("cancel"));
      dlg_new_sample_name.invalidateSizeCaches();
      dlg_new_sample_name.resizeToMinimum();
      dlg_new_sample_name.showCentered();
   }

   // <method_get.png>
   public method getNewSamplePrefIdx() : int {
      Sample sampleSel <= getSelectedSample();
      if(null != sampleSel)
         return current_project.getSampleIdx(sampleSel) + 1;
      return -1; // after last sample
   }

   // <ui_handle.png>
   protected method createSample(String _nameOrNull, int _prefIdx) : Sample {
      // (note) prefIdx=-1: add sample to end of sample list
      Sample sample <= current_project.newSample(_nameOrNull/*null=default*/, _prefIdx);
      updateSampleNameToolTip(sample);
      tf_filter.setText("");
      sample.setNamespaceIdx(cf_nsp_flt.getSelectedOption());
      updateSampleTable(sample);
      handleSelectSample(false/*bStopAudio*/);
      Global.Print("Create sample \""+sample.unique_name+"\"");
      return sample;
   }

   // <ui_handle.png>
   protected method createSampleFromUserPreset() {
      Sample sample <= getSelectedSample();  // newly created by createSample()
      if(null != sample)
      {
         local String pathNameNative <= STConfig.sample_rootpath+"/"+STConfig.pgsample_preset_relpath+"/"+(Samples.preset_file_names.get(new_sample_user_idx));
         Global.Debug("createSampleFromUserPreset: pathNameNative=\""+pathNameNative+"\"");
         local String sName = sample.unique_name;  // name assigned in dialog
         if(loadSample2(pathNameNative, STConfig.sample_rootpath, false/*bProject*/, false/*bCreateSample*/))
         {
            sample.unique_name = sName;
            handleSelectSample(true/*bStopAudio*/);
            Global.Print("Load user preset #"+(new_sample_user_idx+1));
         }
      }
   }


   // <method_init.png>
   protected method initNewSample(int _mode) {
      // called after createSample()
      Global.Debug("PageSample::initNewSample: mode="+_mode);
      switch(_mode)
      {
         case NEWSMP_EMPTY:
            // do nothing
            break;

         case NEWSMP_SINE:
            // create zone, loop, synthesize sine wave
            handlePageCmdSineInit();
            break;

         case NEWSMP_SINE_AMIGA:
            // create zone, loop, synthesize sine wave (16574Hz/C-3), amiga_init
            handlePageCmdSineAmigaInit();
            break;

         case NEWSMP_CYCLE:
            handlePageCmdCycleInit();
            break;

         case NEWSMP_CYCLE_AMIGA:
            handlePageCmdCycleAmigaInit();
            break;

         case NEWSMP_PATCHPLUGIN:
            handlePageCmdPatchPluginInit();
            break;

         case NEWSMP_FMSTACK:
            handlePageCmdFMStackInit();
            break;

         case NEWSMP_USER:
            createSampleFromUserPreset();
            break;
      }
   }

   // <ui_handle.png>
   public method createSingleSampleFromWaveform(FloatArray _smp,
                                                int _numCh, int _chOff, int _dstNumCh,
                                                float _rate,
                                                boolean _bLoop,
                                                boolean _bAudioClip,
                                                float _audioClipBPMOr0
                                                ) : Sample {
      local String *smpName;
      boolean bPoly = true;
      if(!current_project.new_sample_prefix.isBlank())
      {
         smpName <= current_project.new_sample_prefix;
         bPoly = !(smpName <= "a_");  // for audio clips
      }
      Sample sample <= current_project.newSample(smpName, getNewSamplePrefIdx());
      sample.namespace_idx = current_project.new_sample_namespace_idx;
      sample.initSingleFromWaveform(_smp, _numCh, _chOff, _dstNumCh, _rate, _bLoop);

      if(_bAudioClip)
      {
         boolean bPresetLoaded = sample.loadAudioClipPreset();
         sample.b_audio_clip   = true;
      }
      sample.audio_clip_bpm = _audioClipBPMOr0;

      if(!bPoly)
      {
         StSample s <= sample.getZoneByIdx(0);
         s.maxVoices = 1;
      }
      tf_filter.setText("");
      updateSampleTable(sample);
      setLastSelectedSampleIdx(tm_samples.getCursorSampleIdx());
      Global.Print("Create sample \""+sample.unique_name+"\"");
      return sample;
   }

   // <ui_handle.png>
   public method createGranularSampleFromWaveform(FloatArray _smp, int _numCh, int _chOff, int _dstNumCh, float _rate,
                                                  boolean _bLoop
                                                  ) : Sample {
      local String *smpName;
      boolean bPoly = true;
      if(!current_project.new_sample_prefix.isBlank())
      {
         smpName <= current_project.new_sample_prefix;
         bPoly = !(smpName <= "a_");  // for audio clips
      }
      Sample sample <= current_project.newSample(smpName, getNewSamplePrefIdx());
      sample.namespace_idx = current_project.new_sample_namespace_idx;
      sample.initGranularFromWaveform(_smp, _numCh, _chOff, _dstNumCh, _rate, _bLoop);
      if(!bPoly)
      {
         StSample s <= sample.getZoneByIdx(0);
         s.maxVoices = 1;
      }
      tf_filter.setText("");
      updateSampleTable(sample);
      setLastSelectedSampleIdx(tm_samples.getCursorSampleIdx());
      Global.Print("Create granular sample \""+sample.unique_name+"\"");
      return sample;
   }

   // <ui_handle.png>
   public method createSampleFromWaveform(FloatArray _smp, int _numCh, float _rate,
                                          IntArray _startOffsets,
                                          IntArray _endOffsets,
                                          boolean _bLoop
                                          ) : Sample {
      local String *smpName;
      if(!current_project.new_sample_prefix.isBlank())
      {
         smpName <= current_project.new_sample_prefix;
      }
      Sample sample <= current_project.newSample(smpName, getNewSamplePrefIdx());
      sample.namespace_idx = current_project.new_sample_namespace_idx;
      sample.initFromWaveform(_smp, _numCh, _rate, _startOffsets, _endOffsets, _bLoop);
      tf_filter.setText("");
      updateSampleTable(sample);
      setLastSelectedSampleIdx(tm_samples.getCursorSampleIdx());
      Global.Print("Create sample \""+sample.unique_name+"\"");
      return sample;
   }

   // <ui_handle.png>
   protected =replay= method handleReInitZones() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         Audio.ResetAllTempSamples();
         Audio.ResetAllSampleVoices(sample);
         Audio.UpdateTemporarySampleFromWaveform(null);

         sv_wave.lazyAutoChopRegionsForced();

         sample.reinitZones(null/*smp=keep*/, sv_wave.getNumChannels(), sv_wave.getSampleRate(),
                            sv_wave.autochop_start_offsets,
                            sv_wave.autochop_end_offsets,
                            cb_reinit_loop.isSelected()
                            );

         updateSampleTable(null/*reselectSample*/);
         handleSelectSample(true/*bStopAudio*/); // update zones
         updateSampleViewMarkers();
         updateDrumPadDialogPadHighlights();

         Global.Print("Re-Init: type="+cm_type.getSelectedOptionName()+" => "+(sample.sample_bank.numSamples)+" zone"+Utils.GetPluralString(sample.sample_bank.numSamples)+", "+(sample.sample_bank.numAltGroups)+" alt group"+Utils.GetPluralString(sample.sample_bank.numAltGroups));

      }
   }

   // <ui_handle.png>
   public =replay= method handleReInitZoneRanges(int _type) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         Audio.ResetAllTempSamples();
         Audio.ResetAllSampleVoices(sample);
         Audio.UpdateTemporarySampleFromWaveform(null);

         local PointerArray selectedZones <= getSelectedZones();
         if(selectedZones.numElements > 0)
         {
            sample.reInitZoneRanges(_type, selectedZones);
            tv_zones.tableModelChanged();
            handleSelectZone(true/*bStopAudio*/);

            cm_type.setSelectedOption(_type);
            cm_type.redraw();

            Global.Print("Re-Init "+(sample.sample_bank.numSamples)+" zone range"+Utils.GetPluralString(sample.sample_bank.numSamples)+" (type="+(Sample.type_names.get(_type))+")");
         }
         else
         {
            Global.Warning("Re-Init: no zones selected");
         }
      }
   }

   // <ui_handle.png>
   protected method cloneSample() {
      Sample sampleSel <= getSelectedSample();
      if(null != sampleSel)
      {
         boolean bOldSuppressUnderrunError = Audio.PushSuppressUnderrunError();
         Sample sample <= current_project.newSample(sampleSel.unique_name,
                                                    getNewSamplePrefIdx()
                                                    );
         sample.copyFrom(sampleSel);
         sample.analyzeAndUpdatePartials();
         tf_filter.setText("");
         updateSampleTable(sample);
         handleSelectSample(false/*bStopAudio*/);
         Audio.PopSuppressUnderrunError(bOldSuppressUnderrunError);

         Global.Print("Clone sample \""+sample.unique_name+"\"");
      }
   }

   // <ui_handle.png>
   public =replay= method deleteSelectedSample() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         Global.Print("Delete sample \""+sample.unique_name+"\"");
         Audio.ResetAllTempSamples();
         Audio.ResetAllSampleVoices(sample);
         Audio.UpdateTemporarySampleFromWaveform(null);
         current_project.deleteSample(sample);
         tf_filter.setText("");
         updateSampleTable(null/*reselectSample*/);
         handleSelectSample(true/*bStopAudio*/);
      }
   }

   // <ui_handle.png>
   public method deleteSelectedSampleConfirm() {
      Sample sample <= getSelectedSample();
      if(null != sample)
         dialog_delete_sample.run(sample.unique_name);
   }

   // <ui_handle.png>
   protected method moveSelectedSampleUp() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         int rowIdx = tm_samples.getRowIdxBySample(sample);
         if(rowIdx > 0)
         {
            int sampleIdx = current_project.getSampleIdx(sample);
            Sample samplePrev <= tm_samples.getSampleByRowIdx(rowIdx - 1);
            int samplePrevIdx = current_project.getSampleIdx(samplePrev);
            current_project.swapSamples(samplePrevIdx, sampleIdx);
            tf_filter.setText("");
            updateSampleTable(null/*reselectSample*/);
            tv_samples.moveCursorToPreviousRow();
            Global.Print("Move sample up");
         }
      }
   }

   // <ui_handle.png>
   protected method moveSelectedSampleDown() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         int rowIdx = tm_samples.getRowIdxBySample(sample);
         if( (rowIdx+1) < tm_samples.getNumRows() )
         {
            int sampleIdx = current_project.getSampleIdx(sample);
            Sample sampleNext <= tm_samples.getSampleByRowIdx(rowIdx + 1);
            int sampleNextIdx = current_project.getSampleIdx(sampleNext);
            current_project.swapSamples(sampleIdx, sampleNextIdx);
            tf_filter.setText("");
            updateSampleTable(null/*reselectSample*/);
            tv_samples.moveCursorToNextRow();
            Global.Print("Move sample down");
         }
      }
   }

   // <ui_handle.png>
   public method handleFilterChanged() {
      updateSampleTable(getSelectedSample());  // tries to maintain current sample selection
      tv_samples.moveCursorToFirstRowIfNoneSelected();
      tv_samples.autoScrollAhead(2/*numRows*/);

      handleSelectSample(false/*bStopAudio*/);

      Global.Print("Sample name filter is \""+tf_filter.getText()+"\"");
   }

   // <ui_show.png>
   static ShowSampleFileNameDialog(String         _title,
                                  String         _fileName,
                                  boolean        _bDir,
                                  ActionConsumer _recipient,
                                  boolean        _bSave,
                                  String         _suffix,
                                  String         _baseDir
                                  ) {
      trace "[dbg] ShowSampleFileNameDialog: filename=\""+_fileName+"\" baseDir=\""+_baseDir+"\"";
      dialog_sample_filename.configure(_title, _fileName, _bDir, _recipient, _bSave, _suffix, _baseDir);
      dialog_sample_filename.showCentered();
   }

   // <ui_handle.png>
   protected method handleSampleBrowse(boolean _bLoadCreate) {
      Global.Debug2("PageSample::handleSampleBrowse: bLoadCreate="+_bLoadCreate);
      b_load_create = _bLoadCreate;
      if(!b_load_create)
      {
         replace_sample <= getSelectedSample();
         if(null != replace_sample)
         {
            replace_sample_prg_id = replace_sample.prg_id;
            replace_sample_nsp    = replace_sample.getNamespaceIdx();
         }
      }
      else
      {
         replace_sample <= null;
      }
      preview_sample <= null;
      last_previewed_sample_path.empty();
      trace "[trc] PageSample::handleSampleBrowse: call showSampleBrowser()";
      showSampleBrowser(true/*bESA*/); // see SampleBrowserDialog / handleSampleDialogLoad()
   }

   // <ui_handle.png>
   protected method loadSample1() {
      if(0 == UI.GetNumFloatingLayers())
      {
         Sample sample <= getSelectedSample();
         if((null != sample) || b_load_create)
         {
            if(!b_load_create)
            {
               replace_sample <= sample;
               replace_sample_prg_id = sample.prg_id;
               replace_sample_nsp    = sample.getNamespaceIdx();
            }
            else
            {
               replace_sample <= null;
            }

            local String msg <= "Load"+(b_load_create?" + Create":" + Replace")+" Sample";
            if(null != replace_sample)
               replace_sample.setAutoloadFlag(false);
            ShowSampleFileNameDialog(msg,
                                     Utils.PrependDirPrefix((null != replace_sample)?sample.suggested_pathname:null,
                                                            STConfig.sample_rootpath
                                                            ),
                                     false/*bDir*/,
                                     this,
                                     false/*bSave*/,
                                     Global.SAMPLE_FILE_SUFFIX,
                                     STConfig.sample_rootpath
                                     );
            dlg_filename_mode = DLG_FILENAME_MODE_LOAD;

            Global.Print(msg + " (enter filename)");
         }
      }
   }

   // <load.png>
   protected =replay= method loadSample2(String _pathName, String _rootPath, boolean _bProject, boolean _bCreateSample) : boolean {

      return = false;

      if(_bCreateSample)
         createSample(null/*name*/, getNewSamplePrefIdx());

      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         Audio.ResetAllTempSamples();
         Audio.ResetAllSampleVoices(sample);
         Audio.UpdateTemporarySampleFromWaveform(null);
         Audio.UpdateTempRefSample(null);
         invalidateSampleView();

         if(sample.loadFile(_pathName, _rootPath, _bProject, true/*bRecalcPatches*/))
         {
            sample.b_autoload = false;
            Global.SuccessShort("Load \""+_pathName.replace(Utils.ToNativePathName(_rootPath)+"/", "")+"\"");
            sample.setNamespaceIdx(cf_nsp_flt.getSelectedOption());
            updateSampleNameToolTip(sample);
            sample.analyzeAndUpdatePartials();  // (todo) remove ? (already done in loadFile())
            handleSelectSample(true/*bStopAudio*/);
            sv_wave.showAll();
            return = true;
         }
         else
         {
            Global.Error("Failed to load \""+_pathName+"\"");

            if(_bCreateSample)
               deleteSelectedSample();
         }
      }

      return;
   }

   // <load.png>
   public method replaceSampleWav(String _pathName, boolean _bLoop) : boolean {
      // Called by SampleBrowserDialog
      b_load_create = false;
      return loadSampleWav(_pathName, _bLoop);
   }

   // <load.png>
   protected =replay= method loadSampleWav(String _pathName, boolean _bForceLoop) : boolean {

      return = false;

      if(b_load_create)
         createSample(null/*name*/, getNewSamplePrefIdx());

      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         Audio.ResetAllTempSamples();
         Audio.ResetAllSampleVoices(sample);
         Audio.UpdateTemporarySampleFromWaveform(null);
         Audio.UpdateTempRefSample(null);
         invalidateSampleView();

         if(sample.initFromWavFile(_pathName, _bForceLoop))
         {
            sample.b_autoload = false;
            Global.Success("Load WAV sample from \""+_pathName+"\"");
            return = true;
         }
         else
         {
            Global.Error("Failed to load WAV sample from \""+_pathName+"\"");
         }

         updateSampleNameToolTip(sample);
         sample.analyzeAndUpdatePartials();
         handleSelectSample(true/*bStopAudio*/);
         sv_wave.showAll();
      }

      return;
   }

   // <load.png>
   protected method reloadSample() : boolean {
      b_load_create = false;
      preview_sample <= null;
      last_previewed_sample_path.empty();

      return = false;

      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local String rootPath <= Global.GetProjectSamplesWavRootPath();
         local String pathName = rootPath + "/" + sample.unique_name + Global.SAMPLE_FILE_SUFFIX;
         sample.setAutoloadFlag(false);

         if(Utils.CanFileBeRead(Utils.ToNativePathName(pathName)))
         {
            return = loadSample2(pathName, rootPath, true/*bProject*/, false/*bCreateSample*/);
            Global.Print("Reload sample \""+sample.unique_name+"\"");
         }
         else
         {
            Global.Warning("Reload: Failed to read sample file \""+pathName+"\"");
         }

         sample.analyzeAndUpdatePartials();
      }

      return;
   }

   // <ui_handle.png>
   protected method saveSample1() {
      root_form.hideScope();

      if(0 == UI.GetNumFloatingLayers())
      {
         Sample sample <= getSelectedSample();
         if(null != sample)
         {
            // trace "xxx saveSample1: sample.suggested_pathname="+sample.suggested_pathname;
            ShowSampleFileNameDialog("Save Sample",
                                     Utils.BuildPathnameFromSuggestedNameAndEditorName(
                                        Utils.PrependDirPrefix(sample.suggested_pathname + "/",
                                                               STConfig.sample_rootpath
                                                               ),
                                        sample.unique_name)+Global.SAMPLE_FILE_SUFFIX,
                                     false/*bDir*/,
                                     this,
                                     true/*bSave*/,
                                     Global.SAMPLE_FILE_SUFFIX,
                                     STConfig.sample_rootpath
                                     );
            dlg_filename_mode = DLG_FILENAME_MODE_SAVE;

            Global.Print("Save sample (enter filename)");
         }
      }
   }

   // <load.png>
   protected method saveSample3(String _pathName) {
      Global.Debug("PageSample::saveSample3: pathName=\""+_pathName+"\"");
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         if(sample.saveFile(_pathName, STConfig.sample_rootpath, false/*bProject*/, -1/*sampleIdx*/))
         {
            Samples.AddSingleFileToCache(_pathName, sample.tags, true/*bVerbose*/);
            Samples.SaveSampleCache(null);
            Global.Success("Save sample to \""+_pathName+"\"");
         }
         else
         {
            Global.Error("Failed to open \""+_pathName+"\" for writing");
         }

         updateSampleNameToolTip(sample);
         pageFocusDefault();
      }
   }

   // <method.png>
   public method findCleanupSamples() : StringArray {
      local StringArray ret;
      local String rootPath <= Global.GetProjectSamplesWavRootPath();

      local StringArray fileNames <= Utils.ReadDirectory(rootPath);
      if(null != fileNames)
      {
         local String *fileName;
         foreach fileName in fileNames
         {
            local StringArray words <= fileName.splitSpace(true);
            if(fileName <= "f ")
            {
               local String fname <= words.get(1);
               if(!fname.endsWith(".wav") && !fname.endsWith(".yml"))
               {
                  Global.Debug("PageSample::findCleanupSamples: fname=\""+fname+"\"");
                  local String uname <= fname.replace(Global.SAMPLE_FILE_SUFFIX/*.esa*/, "");
                  local Sample sample <= current_project.findSampleByUniqueName(uname);
                  if(null == sample)
                  {
                     Global.Debug("PageSample::findCleanupSamples: sample uname=\""+uname+"\" is not in use");
                     ret.add(uname);
                  }
               }
            }
         }
      }
      return deref ret;
   }

   // <method.png>
   public method handleCleanupSamplesFolder1() {
      local StringArray unames <= findCleanupSamples();
      if(unames.numElements > 0)
      {
         dialog_cleanup_samples.run(unames.numElements);
      }
      else
      {
         Global.Print("Cleanup: No unused samples");
      }
   }

   // <method.png>
   public method handleCleanupSamplesFolder2() {
      local StringArray unames <= findCleanupSamples();
      int numRemoved = 0;
      local String rootPath <= Global.GetProjectSamplesWavRootPath();

      local String *uname;
      foreach uname in unames
      {
         Global.Debug("PageSample::handleCleanupSamplesFolder: remove sample \""+uname+"\"");
         tkfileutils_rm(rootPath + "/" + uname + Global.SAMPLE_FILE_SUFFIX/*.esa*/);
         tkfileutils_rm(rootPath + "/" + uname + ".wav");
         numRemoved++;
      }

      Global.Print("Clean-up Samples Folder (remove "+numRemoved+" sample"+Utils.GetPluralString(numRemoved)+")");
   }

   // <method.png>
   protected method copySampleWavPathnameToClipboard() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local String pathName <= sample.getWavPathname();
         UI.SetClipboard(pathName);
         Global.Print("Copy wav pathname to clipboard");
      }
   }

   // <method.png>
   protected method autoAssignMIDIProgramNumbers() {
      int numAssigned = 0;
      int nspFlt = cf_nsp_flt.getSelectedOption();

      Sample *sample;
      foreach sample in current_project.samples
      {
         if( (0 == nspFlt) || (sample.namespace_idx == nspFlt) )
         {
            if(-1 == sample.prg_id)
            {
               int prgNr = 0;
               loop(128)
               {
                  boolean bFound = false;
                  Sample *osample;
                  foreach osample in current_project.samples
                  {
                     if( (0 == nspFlt) || (osample.namespace_idx == nspFlt) )
                     {
                        if(@(osample) != @(sample))
                        {
                           if(osample.prg_id == prgNr)
                           {
                              bFound = true;
                              break;
                           }
                        }
                     }
                  }

                  if(!bFound)
                  {
                     sample.setPrgId(prgNr);
                     numAssigned++;
                     break;
                  }
                  else
                  {
                     prgNr++;
                  }
               }
            }
         }
      }

      handleSelectSample(false/*bStopAudio*/);
      tv_samples.tableModelChanged();

      if(numAssigned > 0)
         current_project.markAsModified();

      Global.Print("Auto-Assign MIDI Program Numbers (assign "+numAssigned+" program number"+Utils.GetPluralString(numAssigned)+")");
   }

   // <method.png>
   protected =replay= method handleRemoveUnreferencedSamples1(boolean _bSkipPrgChgAssigned,
                                                              boolean _bSkipNamespaceAssigned,
                                                              boolean _bSkipAudio,
                                                              boolean _bMustBeAudio
                                                              ) {
      local PointerArray aSamples;

      Sample *sample;
      foreach sample in current_project.samples
      {
         if(!_bMustBeAudio || sample.b_audio_clip)
         {
            int numRefs = current_project.findNumSampleRefsBySample(sample);
            // // trace "[trc] sample.unique_name=\""+sample.unique_name+"\" numRefs="+numRefs;
            if(0 == numRefs)
            {
               if( (!_bSkipPrgChgAssigned    || (-1    == sample.prg_id)       ) &&
                   (!_bSkipNamespaceAssigned || (0     == sample.namespace_idx)) &&
                   (!_bSkipAudio             || (false == sample.b_audio_clip) )
                   )
               {
                  aSamples.add(sample);
               }
            }
         }
      }

      if(aSamples.numElements > 0)
      {
         local String sTitle = "Remove unreferenced samples";
         if(_bSkipPrgChgAssigned)
            sTitle.append(" (no prgchg)");
         if(_bSkipNamespaceAssigned)
            sTitle.append(" (no nsp)");
         if(_bSkipAudio)
            sTitle.append(" (no audio)");

         showSampleSelectionDialog(deref aSamples, sTitle, "Remove");
      }
      else
      {
         Global.Print("no unreferenced samples");
         pageFocusDefault();
      }
   }

   // <method.png>
   public =replay= method handleRemoveUnreferencedSamples2(StringArray _samples) {
      int numRemoved = 0;  // == _samples.numElements

      Sample *sample;
      foreach sample in _samples
      {
         Audio.ResetAllTempSamples();
         Audio.ResetAllSampleVoices(sample);
         Audio.UpdateTemporarySampleFromWaveform(null);
         current_project.deleteSample(sample);
         numRemoved++;
      }

      if(numRemoved > 0)
      {
         tf_filter.setText("");
         updateSampleTable(null/*reselectSample*/);
         handleSelectSample(true/*bStopAudio*/);
      }

      Global.Print("Remove "+numRemoved+" unreferenced sample"+Utils.GetPluralString(numRemoved));
   }

   // <method.png>
   public method remapSampleNamespaceIndices(IntArray _iaRemap) {
      cf_nsp_flt.setSelectedOption(_iaRemap.get(cf_nsp_flt.getSelectedOption()));
      cf_nsp_cur.setSelectedOption(_iaRemap.get(cf_nsp_cur.getSelectedOption()));
   }

   // <method.png>
   protected method handleRemoveUnreferencedSampleNamespaces() {
      int numRemoved = current_project.removeUnreferencedSampleNamespaces();
      if(numRemoved > 0)
      {
         current_project.tightenSampleNamespaceList();
         updateNamespaceOptions();
      }
      Global.Print("Remove "+numRemoved+" unreferenced sample namespace"+Utils.GetPluralString(numRemoved));
   }

   // <method.png>
   protected method sortByMIDIProgramNumber() {
      Sample curSmp <= getSelectedSample();
      boolean bSorted;
      do
      {
         bSorted = false;

         Sample *sampleC;
         Sample *sampleN;
         PointerArray samples <= current_project.samples;
         int maxIdx = samples.numElements -1;
         int idx = 0;
         while(idx < maxIdx)
         {
            sampleC <= samples.get(idx);
            sampleN <= samples.get(idx+1);
            if(sampleN.prg_id >= 0)
            {
               if( (-1 == sampleC.prg_id) || (sampleN.prg_id < sampleC.prg_id) )
               {
                  // trace "xxx idx="+idx+" sampleC.prg_id="+sampleC.prg_id+" sampleN.prg_id="+sampleN.prg_id;
                  current_project.swapSamples(idx, idx+1);
                  bSorted = true;
               }
            }
            idx++;
         }
      }
      while(bSorted);

      updateSampleTable(curSmp);
      handleSelectSample(false/*bStopAudio*/);
   }

   // <ui_handle.png>
   protected =replay= method handleMergeNextSample() {

      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         Sample smpNext <= getNextSample();
         if(null != smpNext)
         {
            smp.multiplyZoneVolumesBySampleVolumeAndReplaceByOne(1.0f/*volumeScl*/);
            smp.addSamplePanToZonesAndReplaceByZero(0.0f/*pan*/);
            smp.mergeSample(smpNext, 1.0f/*volumeScl*/, 0.0f/*pan*/);
            Global.Print("Merge next sample ("+smpNext.getNumZones()+" zone"+Utils.GetPluralString(smpNext.getNumZones())+")");
            handleSelectSample(false/*bStopAudio*/);
         }
         else
         {
            Global.Warning("Merge: no next sample available");
         }
      }

   }

   // <ui_update.png>
   protected method updateSampleNameToolTip(Sample sample) {
      local String pathName = Utils.FixFileName(sample.suggested_pathname+"/"+sample.unique_name+Global.SAMPLE_FILE_SUFFIX/*.esa*/);
      tf_name.setToolTipCaption(tf_name_orig_tooltip_caption + "\n\nSuggested rel.pathname: \""+pathName+"\" ("+(sample.b_user_waveform_modified ? "U*" : "") + (sample.b_project_waveform_modified ? " P*" : "")+")");
   }

   // <ui_handle.png>
   protected method handleSampleNameChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local String name = Utils.ConvertToFileName(tf_name.getText());
         sample.assignUniqueName(name);
         tv_samples.tableModelChanged();
         tv_samples.makeCursorRowVisible();
         tf_name.setText(sample.unique_name);
         sample.markWaveformAsModified();
         sample.markParamsAsModified();

         updateSampleNameToolTip(sample);

         Global.Print("Sample name is \""+sample.unique_name+"\"");
      }
   }

   // <ui_handle.png>
   protected method handlePersistenceChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.b_persistent = cb_persistent.isSelected();
         Global.Print("Persistence is "+Utils.GetEnableString(sample.b_persistent));
         current_project.markAsModified();
      }
   }

   // <ui_update.png>
   protected method updateInfoButtonTint() {
      boolean bMulti = (Utils.GetNumLines(tf_info.getText()) > 1);
      bt_info.setBackgroundTint(bMulti ? #f0abab30 : 0);
      bt_info.setForegroundColor(bMulti ? lnf_colors.get(LookAndFeel.COLOR_BUTTON_BG) : lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
   }

   // <ui_update.png>
   protected method updateTagsButtonTint() {
      boolean bHaveTags = false;
      Sample sample <= getSelectedSample();
      if(null != sample)
         bHaveTags = sample.tags.numElements > 0;
      bt_tags.setBackgroundTint(bHaveTags ? #f0abab30 : 0);
      bt_tags.setForegroundColor(bHaveTags ? lnf_colors.get(LookAndFeel.COLOR_BUTTON_BG) : lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
   }

   // <ui_handle.png>
   protected method handleSampleInfoChanged(local String _diz, boolean _bFromTextEdit) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         if(_diz != sample.description)
         {
            sample.description = _diz;
            if(_bFromTextEdit)
               tf_info.setText(_diz);
            updateInfoButtonTint();
            sample.markParamsAsModified();
            current_project.markAsModified();
         }
         Global.Print("Sample info is \""+sample.description+"\"");
      }
   }

   // <ui_handle.png>
   protected method handleEditMultiLineSampleInfo() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local String diz <= tf_info.getText();
         local String caption <= "Edit Sample Info";
         local String message <= "Edit Sample Info (press lctrl-s or ESCAPE to save changes)";
         dlg_info <= TextEditDialog.NewOkCancel(caption,
                                                message,
                                                false/*bOkCancel*/,
                                                "Save",
                                                "Cancel",
                                                diz,
                                                this/*recipient*/
                                                );
         dlg_info.restoreGeometryIfValid(UI.IsHiDPI()
                                         ? STConfig.sample_info_textedit_geo_hidpi
                                         : STConfig.sample_info_textedit_geo_lodpi
                                         );
         dlg_info.setEnableAlwaysSave(true);
         dlg_info.setEnableModal(true);
         dlg_info.show();
      }
   }

   // <ui_handle.png>
   protected method handleNamespaceFilterChanged() {

      int smpIdx = tm_samples.getCursorSampleIdx();
      if(-1 != smpIdx)
         pre_filter_sample_idx = smpIdx;

      if(null != mod_sample)
         mod_sample.preferred_namespace_idx = cf_nsp_flt.getSelectedOption();
      else if(null != sample_pad_common)
         sample_pad_common.namespace_idx = cf_nsp_flt.getSelectedOption();
      else if(null != sample_timeline_model_track)
         sample_timeline_model_track.preferred_namespace_idx = cf_nsp_flt.getSelectedOption();

      handleFilterChanged();

      if(-1 != pre_filter_sample_idx)
         tm_samples.moveCursorToSampleIdxNoAction(pre_filter_sample_idx);

      Global.Print("Sample namespace filter is \""+current_project.getSampleNamespaceNameByIdx(cf_nsp_flt.getSelectedOption())+"\"");
   }

   // <ui_handle.png>
   protected method handleNamespaceChanged(boolean _bQuiet) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setNamespaceIdx(cf_nsp_cur.getSelectedOption());
         sample.markParamsAsModified();

         if(0 != cf_nsp_flt.getSelectedOption())
         {
            cf_nsp_flt.setSelectedOption(sample.getNamespaceIdx());
            handleFilterChanged();
         }
         else
         {
            updateSampleTable(sample);
         }

         if(null != mod_sample)
            mod_sample.preferred_namespace_idx = sample.getNamespaceIdx();
         else if(null != sample_pad_common)
            sample_pad_common.namespace_idx = sample.getNamespaceIdx();
         else if(null != sample_timeline_model_track)
            sample_timeline_model_track.preferred_namespace_idx = sample.getNamespaceIdx();

         if(!_bQuiet)
            Global.Print("Sample namespace is \""+current_project.getSampleNamespaceNameByIdx(sample.getNamespaceIdx())+"\"");
      }
   }

   // <ui_update.png>
   protected method updateNamespaceOptions() {
      local StringArray optNamespaces <= current_project.getSampleNamespaceOptions();
      cf_nsp_flt.setOptions(optNamespaces);
      cf_nsp_cur.setOptions(optNamespaces);
   }

   // <ui_handle.png>
   protected method handleNamespaceNameChanged(String _optName) {
      // e.g. "1: bass"
      local String optName = _optName.trim();
      int idxColon = optName.indexOf(":", 0);
      if(-1 != idxColon)
      {
         int nspIdx = optName.substring(0, idxColon);
         if(current_project.renameSampleNamespace(nspIdx, optName.substring(idxColon+1,99).trim()))
         {
            Global.Print("Namespace #"+(nspIdx)+" name is \""+optName+"\"");
            updateSampleTable(null/*reselectSample*/);
            handleSelectSample(false/*bStopAudio*/);
         }
         else
         {
            Global.Warning("Failed to rename namespace #"+(nspIdx));
         }
      }
      updateNamespaceOptions();
   }

   // <method.png>
   protected =replay= method resendInitialPerfCtl() {
      // after stopping audio, e.g. when freedraw ends or voice plugins have been reloaded
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSamplePlayer sp <= getCurrentSamplePlayer();
         if(null != sp)
         {
            FloatArray initPerfCtl <= (null != sample_pad) ? sample_pad.initial_perf_ctl : sample.initial_perf_ctl;
            sp.updatePerfCtls(initPerfCtl);
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleInitialPerfCtlChanged(String _id, int _perfCtlIdx, float _value) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         String msgPrefix <= (null != sample_pad) ? "Sample Pad" : (null != mod_sample) ? "Track Sample" : "";
         FloatArray initPerfCtl <= (null != sample_pad) ? sample_pad.initial_perf_ctl : sample.initial_perf_ctl;
         initPerfCtl[_perfCtlIdx] = _value;
         if(_value >= 0.0f)
         {
            StSamplePlayer sp <= getCurrentSamplePlayer();
            if(null != sp)
               sp.updatePerfCtl(_perfCtlIdx, _value);
         }

         ModSample modSample <= getCurrentModSample();
         float valCC = mathMaxf(0.0f, _value);
         if(null != modSample)
         {
            switch(_perfCtlIdx)
            {
               case STSAMPLEPLAYER_PERFCTL_CC1_MODWHEEL:
                  modSample.cc_modwheel = valCC;
                  break;

               case STSAMPLEPLAYER_PERFCTL_CC2_BREATHCTL:
                  modSample.cc_breath = valCC;
                  break;

               case STSAMPLEPLAYER_PERFCTL_CC4_FOOTCTL:
                  modSample.cc_foot = valCC;
                  break;

               case STSAMPLEPLAYER_PERFCTL_CC11_EXPRESSION:
                  modSample.cc_expr = valCC;
                  break;
            }
         }
         else
         {
            switch(_perfCtlIdx)
            {
               case STSAMPLEPLAYER_PERFCTL_CC1_MODWHEEL:
                  Audio.temp_cc_modwheel = valCC;
                  break;
            }
         }

         sample.markParamsAsModified();
         Global.Print(msgPrefix+" Initial PerfCtl \""+_id+"\" is "+((_value >= 0.0f) ? _value : "<unassigned>"));
      }
   }

   // <ui_handle.png>
   protected =replay= method handlePerfCtlFreezeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSampleBank sb <= sample.sample_bank;
         sb.enablePerfCtlFreezeNoteOff = cb_perfctlfreeze.isSelected();
         Global.Print("Freeze PerfCtl @Note-Off is "+Utils.GetEnableString(sb.enablePerfCtlFreezeNoteOff));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleSustainChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.b_sustain = cb_sustain.isSelected();
         Global.Print("Sustain-hint is "+Utils.GetEnableString(sample.b_sustain));
      }
   }

   // <ui_handle.png>
   protected method handleSampleTypeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.sample_type = cm_type.getSelectedOption();
         current_project.last_used_sample_type = sample.sample_type;
         sample.markParamsAsModified();

         Global.Print("Sample type is \""+cm_type.getSelectedOptionName()+"\"");
      }
   }

   // <ui_handle.png>
   protected method handleGridSizeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.grid_size = fp_grid_size.getFloatValue();
         current_project.last_used_sample_grid_size = sample.grid_size;
         sample.markParamsAsModified();

         Global.Print("Grid Size is "+sample.grid_size);
      }
   }

   // <ui_handle.png>
   protected method handleSampleMaxVoicesChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setMaxVoices(fp_maxvoices.getFloatValue());
         sample.markParamsAsModified();

         Global.Print("Sample polyphony is "+(sample.sample_bank.maxVoices));
      }
   }

   // // // <ui_handle.png>
   // // protected method handleSampleSynChanged() {
   // //    Sample sample <= getSelectedSample();
   // //    if(null != sample)
   // //    {
   // //       int opt = cm_syn.getSelectedOption();
   // //       sample.b_procedural = (1 == opt);
   // //       sample.markParamsAsModified();
   // //       sample.markWaveformAsModified();

   // //       Global.Print("Sample Synthesis Mode is "+cm_syn.getSelectedOptionName());
   // //    }
   // // }

   // <ui_handle.png>
   protected method handleSampleProceduralChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.b_procedural = cb_procedural.isSelected();
         sample.markParamsAsModified();
         sample.markWaveformAsModified();

         Global.Print("Procedural Sample Mode is "+Utils.GetEnableString(cb_procedural.isSelected()));
      }
   }

   // <ui_handle.png>
   protected method handleSampleAudioChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.b_audio_clip = cb_audio.isSelected();
         sample.markParamsAsModified();

         Global.Print("Audio-Clip Sample Mode is "+Utils.GetEnableString(cb_audio.isSelected()));
      }
   }

   // <ui_handle.png>
   protected method handleSrcTrackChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setSourceTrackIndex(cm_src_track.getSelectedOption() - 1);
         sample.markParamsAsModified();

         int numEv = sample.getTotalNumProcSeqEvents();
         Global.Print("Procedural Source Track is \""+cm_src_track.getSelectedOptionNameLong()+"\" ("+numEv+" event"+Utils.GetPluralString(numEv)+")");
      }
   }

   // <ui_handle.png>
   protected method handleSampleAudioBPMChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.audio_clip_bpm = fp_audio_bpm.getFloatValue();
         sample.markParamsAsModified();

         Global.Print("Audio-Clip BPM is "+(int(sample.audio_clip_bpm*100)/100.0));
      }
   }

   // <ui_handle.png>
   protected method handleModSrcChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setModSrc(cm_modsrc.getSelectedOption());
         sample.markParamsAsModified();

         Global.Print("Modulation Controller is "+cm_modsrc.getSelectedOptionName());
      }
   }

   // <ui_handle.png>
   protected method handleModSrcNoteOnChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setEnableModSrcNoteOn(cb_modsrc_noteon.isSelected());
         sample.markParamsAsModified();

         Global.Print("Lock Modulation Controller to Note-On is "+Utils.GetEnableString(sample.b_mod_src_noteon));
      }
   }

   // <ui_handle.png>
   protected method handlePrgChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setPrgId(cm_prg.getSelectedOption() - 1);
         tf_filter.setText("");
         updateSampleTable(null/*reselectSample*/);
         sample.markParamsAsModified();
         updateProgramTintAndToolTip(sample.prg_id);
         Global.Print("MIDI Program Nr is "+cm_prg.getSelectedOptionName());
      }
   }

   // <ui_handle.png>
   protected method handlePrgAutoAssign() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         byte oldPrgId = sample.prg_id;
         byte prg = current_project.findNextUnusedSamplePrg(oldPrgId);
         if(prg < 0)
            prg = oldPrgId;
         cm_prg.setSelectedOption(prg + 1/*skip '-'*/);
         handlePrgChanged();
      }
   }

   // <ui_update.png>
   protected method updateProgramTintAndToolTip(byte _prgId) {
      // check if MIDI program number is unique and display refs in tooltip
      local String sToolTip;
      int numRefs = 0;
      if(_prgId >= 0)
      {
         Sample *smp;
         int smpNr = 1;
         foreach smp in current_project.samples
         {
            if(smp.prg_id >= 0 && smp.prg_id == _prgId)
            {
               sToolTip.append("\n   - Nr "+smpNr+" (uid="+smp.unique_id+") : \""+smp.unique_name+"\"");
               numRefs++;
            }
            smpNr++;
         }
      }
      local String sToolTipBase = "MIDI program number";
      if(numRefs <= 1)
      {
         cm_prg.setBackgroundTint(0);
         cm_prg.setToolTipCaption(deref sToolTipBase);
      }
      else
      {
         cm_prg.setBackgroundTint(#60ffff00);
         cm_prg.setToolTipCaption(sToolTipBase + sToolTip);
      }
   }

   // <ui_handle.png>
   protected method handleTransposeOctChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setTransposeOct(fp_transpose_oct.getFloatValue());
         sample.markParamsAsModified();

         Global.Print("Transpose is "+sample.getTranspose());
      }
   }

   // <ui_handle.png>
   protected method handleTransposeSemiChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setTransposeSemi(fp_transpose_semi.getFloatValue());
         sample.markParamsAsModified();

         Global.Print("Transpose is "+sample.getTranspose());
      }
   }

   // <ui_handle.png>
   protected method handleTransposeCentsChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setTransposeCents(fp_transpose_cents.getFloatValue());
         sample.markParamsAsModified();

         Global.Print("Transpose is "+sample.getTranspose());
      }
   }

   // <ui_handle.png>
   protected method handlePitchbendUpChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setPitchbendUp(fp_pitchbend_up.getFloatValue());
         sample.markParamsAsModified();

         Global.Print("Pitchbend Up is "+sample.pitchbend_up);
      }
   }

   // <ui_handle.png>
   protected method handlePitchbendDownChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setPitchbendDown(fp_pitchbend_down.getFloatValue());
         sample.markParamsAsModified();

         Global.Print("Pitchbend Down is "+sample.pitchbend_down);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleSampleRateChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         float oldRate = sample.waveform.getSampleRate();
         sample.waveform.setSampleRate(fp_sample_rate.getFloatValue());
         fp_zone_sample_rate.setResetValue(sample.waveform.sampleRate);
         sample.markWaveformAsModified();

         local PointerArray zones <= getSelectedZones();
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            fp_zone_sample_rate.setValue(s.sampleRateRatio * (sample.waveform.getSampleRate()));
            fp_zone_sample_rate.redraw();
         }

         Global.Print("Waveform Sample Rate is "+(sample.waveform.getSampleRate()));
      }
   }

   // <ui_handle.png>
   protected method handleVolumeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local Float fodB = fp_volume.getFloatValue();
         sample.setVolume(Audio.DecibelToLevel(fodB));
         local Float foLvl = sample.getVolume() * 100.0;
         sample.markParamsAsModified();
         Global.Print("Volume is "+fodB.printf("%3.3f")+"dB ("+foLvl.printf("%3.3f")+"%)");
      }
   }

   // <ui_handle.png>
   protected method handlePanChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setPan(fp_pan.getFloatValue());
         local Float fo = sample.getPan() * 100;
         sample.markParamsAsModified();
         Global.Print("Panning is "+fo.printf("%3.2f")+"%");
      }
   }

   // <ui_handle.png>
   protected method handleSampleOffRandChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setSampleOffRand(fp_sampleoff_rand.getFloatValue());
         local Float fo = sample.getSampleOffRand() * 100;
         sample.markParamsAsModified();
         Global.Print("Sample offset randomization is "+fo.printf("%3.2f")+"%");
      }
   }

   // <ui_handle.png>
   protected method handleFreqRandChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setFreqRand(fp_freq_rand.getFloatValue());
         local Float fo = sample.getFreqRand();
         sample.markParamsAsModified();
         Global.Print("Frequency randomization is "+fo.printf("%3.2f")+" semi tones");
      }
   }

   // <ui_handle.png>
   protected method handleVolumeRandChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setVolumeRand(fp_volume_rand.getFloatValue());
         local Float fo = sample.getVolumeRand() * 100;
         sample.markParamsAsModified();
         Global.Print("Volume randomization is "+fo.printf("%3.2f")+"%");
      }
   }

   // <ui_handle.png>
   protected method handlePanRandChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setPanRand(fp_pan_rand.getFloatValue());
         local Float fo = sample.getPanRand() * 100;
         sample.markParamsAsModified();
         Global.Print("Panning randomization is "+fo.printf("%3.2f")+"%");
      }
   }

   // <ui_handle.png>
   protected method handleEnableUniqueNotesChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setEnableUniqueNotes(cb_uniquenotes.isSelected());
         sample.markParamsAsModified();
         Global.Print("Unique notes are "+Utils.GetEnableString(sample.sample_bank.enableUniqueNotes));
      }
   }

   // <ui_handle.png>
   protected method handleEnableReallocChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.setEnableRealloc(cb_realloc.isSelected());
         sample.markParamsAsModified();
         Global.Print("Realloc mono-mode is "+Utils.GetEnableString(sample.sample_bank.enableRealloc));
      }
   }

   // <ui_handle.png>
   protected method handleEditSampleTuning() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         if(null == dlg_sample_tuning)
         {
            dlg_sample_tuning <= new SampleTuningDialog;
            dlg_sample_tuning.init();
         }
         dlg_sample_tuning.showTuningDialog(sample, null/*sampleZonesOrNull*/, sample.sample_bank);
         Global.Print("Edit sample micro-tuning");
      }
   }

   // <ui_handle.png>
   protected method createZone() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         sample.newZone();
         tv_zones.tableModelChanged();
         tv_zones.moveCursorToLastRow();
         sample.markParamsAsModified();
         Global.Print("Create zone");
      }
   }

   // <ui_handle.png>
   protected method cloneZone() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample os <= getFirstSelectedZone();
         if(null != os)
         {
            boolean bOldSuppressUnderrunError = Audio.PushSuppressUnderrunError();
            StSample s <= sample.newZoneAfter(os);
            Samples.CopySample(s, os, -1/*appendixNr*/, true/*bCopyName*/, false/*bCopyWaveform*/);
            sample.analyzeAndUpdatePartials();
            tv_zones.tableModelChanged();
            tv_zones.moveCursorToNextRow();
            sample.markParamsAsModified();
            Global.Print("Clone zone");
            Audio.PopSuppressUnderrunError(bOldSuppressUnderrunError);
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method cloneZoneSynth() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         CycleState sst <= sample.cycle_state;
         int firstUnusedPatchIdx = sst.findFirstUnusedPatchIdx();
         if(firstUnusedPatchIdx >= 0)
         {
            StSample os <= getFirstSelectedZone();
            if(null != os)
            {
               StSample s <= sample.newZoneAfter(os);
               Samples.CopySample(s, os, -1/*appendixNr*/, true/*bCopyName*/, false/*bCopyWaveform*/);

               IntArray loops <= s.getOrCreateSampleLoops();

               // Find waveform region (bbox)
               int loopOff = 0;
               int loopMin = 9999999;
               int loopMax = 0;
               loop(loops.numElements/3)
               {
                  if(loops.get(loopOff+0) < loopMin)
                     loopMin = loops.get(loopOff+0);
                  if((loops.get(loopOff+0)+loops.get(loopOff+1)) > loopMax)
                     loopMax = (loops.get(loopOff+0)+loops.get(loopOff+1));
                  loopOff += 3;
               }


               // Shift waveform region
               int loopShift = loopMax - loopMin;

               StWaveform wf <= sample.waveform;
               boolean bResize = false;
               if((loopMax + loopShift) > wf.numFrames)
               {
                  // Resize waveform
                  FloatArray smpDat <= wf.sampleData;
                  smpDat.realloc((loopMax + loopShift) * wf.numChannels);
                  smpDat.useAll();
                  bResize = true;
               }

               // Shift waveform region
               loopOff = 0;
               loop(loops.numElements/3)
               {
                  loops[loopOff] = loops[loopOff] + loopShift;  // shift sample offset
                  loopOff += 3;
               }
               s.verifySampleAreas();

               // Clone synth patch
               int prevZoneIdx = sample.getZoneIdx(os);
               int patchIdx = sst.findPatchIdxByZoneIdx(prevZoneIdx);
               if((-1 != prevZoneIdx) && (-1 != patchIdx))
               {
                  CyclePatch spPrev <= sst.getPatchByIdx(patchIdx);
                  CyclePatch sp <= sst.getPatchByIdx(firstUnusedPatchIdx);
                  sp.copyFrom(spPrev);
                  sp.target_zone_idx = sample.getZoneIdx(s);
               }

               if(bResize)
                  sv_wave.showAll();

               tv_zones.tableModelChanged();
               tv_zones.moveCursorToNextRow();
               sample.markParamsAsModified();
               Global.Print("Clone zone + synth + move waveform area");
            }
         }
         else
            Global.Error("cloneZoneSynth: all synth patches in use");
      }
   }

   // <ui_handle.png>
   protected =replay= method deleteSelectedZone() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            sample.removeZone(s); // also stops any playing voices
            tv_zones.tableModelChanged();
            handleSelectZone(false/*bStopAudio*/);
            sample.markParamsAsModified();
            Global.Print("Delete zone");
         }
      }
   }

   // <ui_handle.png>
   protected method deleteSelectedZoneConfirm() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            int idx = tv_zones.getCursorRow();
            dialog_delete_zone.run(idx+1/*zoneNr*/);
         }
      }
   }

   // <ui_handle.png>
   protected method moveSelectedZoneUp() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            int idx = sample.sample_bank.getSampleIdx(s);
            if(idx > 0)
            {
               sample.swapZones(idx - 1);

               tv_zones.tableModelChanged();
               tv_zones.moveCursorToPreviousRow();

               sample.markParamsAsModified();
               Global.Print("Move zone up");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method moveSelectedZoneDown() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            int idx = sample.sample_bank.getSampleIdx(s);
            if(0 <= idx < (sample.sample_bank.numSamples))
            {
               sample.swapZones(idx);

               tv_zones.tableModelChanged();
               tv_zones.moveCursorToNextRow();

               sample.markParamsAsModified();
               Global.Print("Move zone down");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method repeatZoneReinit() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         handleReInitZoneRanges(last_zones_reinit_type);
         updateDrumPadDialogPadHighlights();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneMaxVoicesChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int poly = fp_zone_maxvoices.getFloatValue();
         foreach s in zones
            s.setMaxVoices(poly);
         sample.markParamsAsModified();
         Global.Print("Zone polyphony is "+poly+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneMutexGroupChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         StSampleMutexGroup *mgrp;
         int mgrpIdx = cm_zone_mutex_group.getSelectedOption();
         if(mgrpIdx > 0)
            mgrp <= sample.sample_bank.getMutexGroupByIdx(mgrpIdx - 1);  // A..D
         else
            mgrp <= null;  // "-"
         foreach s in zones
            s.setMutexGroup(mgrp);
         Global.Print("Zone mutex group is \""+cm_zone_mutex_group.getSelectedOptionName()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneSampleRateChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         Float rate = fp_zone_sample_rate.getFloatValue();
         float wfSampleRate = sample.waveform.getSampleRate();
         Float ratio = rate / wfSampleRate;
         float sr = ratio * sample.waveform.getSampleRate();
         ai_view.sample_rate = sr;
         foreach s in zones
            s.sampleRateRatio = ratio;
         Global.Print("Zone sample rate is "+rate.printf("%3.2f")+" Hz (ratio="+ratio.printf("%3.3f")+") (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneDelayChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         Float delay = fp_zone_delay.getFloatValue();
         foreach s in zones
            s.delay = float(delay);
         Global.Print("Zone delay time is "+delay.printf("%3.2f")+" ms (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneDelayMultiplierChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         Float delay = fp_zone_delay_mul.getFloatValue();
         foreach s in zones
            s.delayMultiplier = float(delay);
         Global.Print("Zone delay time multiplier is "+delay.printf("%3.2f")+" ms (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneInterpolationChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int type = cm_zone_interpolation.getSelectedOption();
         foreach s in zones
            s.interpolType = type;
         Global.Print("Zone interpolation type is \""+cm_zone_interpolation.getSelectedOptionName()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneInterpolationOrderChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int order = cm_zone_interpolation_order.getSelectedOption();
         foreach s in zones
            s.interpolOrder = order;
         Global.Print("Zone interpolation order is \""+cm_zone_interpolation_order.getSelectedOptionName()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneSRRChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int srr = cm_zone_srr.getSelectedOption();
         foreach s in zones
            s.rateReduction = srr;
         fp_zone_srr_mask.setValue(s.rateReductionMask);
         fp_zone_srr_mask.redraw();
         Global.Print("Zone rate reduction is \""+cm_zone_srr.getSelectedOptionName()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneSRRMaskChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         Integer srrMask = fp_zone_srr_mask.getFloatValue();
         int srrBits = (srrMask>0) ? int(log2(srrMask+1)) : 0;
         foreach s in zones
         {
            s.rateReduction     = srrBits;
            s.rateReductionMask = srrMask;
         }
         cm_zone_srr.setSelectedOption(srrBits);
         Global.Print("Zone rate reduction mask is \""+fp_zone_srr_mask.getDisplayedText()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneBRPreAmpChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         float amp = fp_zone_br_preamp.getFloatValue();
         foreach s in zones
            s.bitReductionPreAmp = amp;
         Global.Print("Zone bit reduction pre-amp is \""+amp+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneBRChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int br = cm_zone_br.getSelectedOption();
         foreach s in zones
            s.bitReduction = br;
         fp_zone_br_mask.setValue(s.bitReductionMask);
         fp_zone_br_mask.redraw();
         Global.Print("Zone bit reduction is \""+cm_zone_br.getSelectedOptionName()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneBRMaskChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         Integer brMask = fp_zone_br_mask.getFloatValue();
         int brBits = (brMask>0) ? int(log2(brMask+1)) : 0;
         foreach s in zones
         {
            s.bitReduction     = brBits;
            s.bitReductionMask = brMask;
         }
         cm_zone_br.setSelectedOption(brBits);
         Global.Print("Zone bit reduction mask is \""+fp_zone_br_mask.getDisplayedText()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_show.png>
   protected method showZoneLoFiMenu(boolean _bFocusFirst) {

      pm_zone_lofi <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_zone_lofi;
      StSample s <= getFirstSelectedZone();

      pmb <= pm.addCheckButton("Smooth Freq",
                               s.enableLerpFreq,
                               "lofi_lerp_freq"
                               );

      pmb <= pm.addCheckButton("Smooth Vol",
                               s.enableLerpVol,
                               "lofi_lerp_vol"
                               );

      pm.resizeToMinimum();
      pm.showNearMouse(-10, 0);
      if(_bFocusFirst)
         pm.focusNextMenuItem();

      Global.Print("Show zone lo-fi menu.");
   }

   // <ui_handle.png>
   protected =replay= method handleToggleZoneLerpFreq() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = maybe;
         foreach s in zones
         {
            if(maybe == bEnable)
               bEnable = !s.enableLerpFreq;
            s.enableLerpFreq = bEnable;
         }
         Global.Print("Zone Smooth FREQ is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleToggleZoneLerpVol() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = maybe;
         foreach s in zones
         {
            if(maybe == bEnable)
               bEnable = !s.enableLerpVol;
            s.enableLerpVol = bEnable;
         }
         Global.Print("Zone Smooth VOL is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneSampleOffRelChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         StSample sFirst <= null;
         local Float amount = fp_zone_sampleoff_rel.getFloatValue();
         foreach s in zones
         {
            s.sampleOffsetRel = float(amount);
            if(null == sFirst)
               sFirst <= s;
         }
         amount *= 100;
         if(null != sFirst)
         {
            int lenAbs = (s.firstLen * float(amount)) / 100.0;
            Global.Print("Zone sample offset (percentage) is "+amount.printf("%3.2f")+"% (firstLoopLenAbs="+lenAbs+") (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         }
         else
         {
            Global.Print("Zone sample offset (percentage) is "+amount.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         }
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneSampleOffRandChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float amount = fp_zone_sampleoff_rand.getFloatValue();
         foreach s in zones
            s.sampleOffsetRandAmount = float(amount);
         amount *= 100;
         Global.Print("Zone sample offset randomization amount is "+amount.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneSampleOffVelAmtChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float amount = fp_zone_sampleoff_velamt.getFloatValue();
         foreach s in zones
            s.sampleOffsetVelocityAmount = float(amount);
         amount *= 100;
         Global.Print("Zone sample offset velocity amount is "+amount.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneSampleOffVelAmtInvertChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_sampleoff_velamt_invert.isSelected();
         foreach s in zones
         {
            s.enableInvertSampleOffsetVelocityAmount = bEnable;
         }
         Global.Print("Zone invert sample offset velocity amount is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAINumPolesChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int numPoles = cm_zone_ai.getSelectedOption();
         foreach s in zones
         {
            s.aiNumPoles = numPoles;
         }
         Global.Print("Zone AA/I num poles is "+numPoles+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         ai_view.redraw();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAIQChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         float f = fp_zone_ai_q.getFloatValue();
         foreach s in zones
            s.aiQ = f;
         Global.Print("Zone AA/I Q is "+f+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         ai_view.redraw();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAIExpUpChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         float f = fp_zone_ai_exp_up.getFloatValue();
         foreach s in zones
            s.aiExpUp = f;
         Global.Print("Zone AA/I exponent (up-sampling) is "+f+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         ai_view.redraw();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAIExpDownChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         float f = fp_zone_ai_exp_down.getFloatValue();
         foreach s in zones
            s.aiExpDown = f;
         Global.Print("Zone AA/I exponent (down-sampling) is "+f+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         ai_view.redraw();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAILinOctChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         float f = fp_zone_ai_lin_oct.getFloatValue();
         float fOct = f / 12.0;
         foreach s in zones
            s.aiLinOct = fOct;
         Global.Print("Zone AA/I Linear Note Range is "+f+" ("+(int(fOct*100)/100.0)+" octave"+Utils.GetPluralStringFloat(fOct)+") (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         ai_view.redraw();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAILinMaxChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         float f = fp_zone_ai_lin_max.getFloatValue();
         foreach s in zones
            s.aiLinMax = f;
         Global.Print("Zone AA/I Linear Max Cutoff is "+f+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         ai_view.redraw();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVoiceBusChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int voiceBus = cm_zone_voicebus.getSelectedOption() - 1;
         foreach s in zones
            s.voiceBus = voiceBus;
         Global.Print("Zone Voice Bus is "+cm_zone_voicebus.getSelectedOptionName()+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneSampleOffFreezeQuietChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_sampleoff_freezequiet.isSelected();
         foreach s in zones
            s.enableFreezeSampleOffWhenQuiet = bEnable;
         Global.Print("Zone freeze sample offset when quiet is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected method handleZoneAutoSelectChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         StRange *range;
         boolean bEnable = cb_zone_autoselect.isSelected();
         foreach s in zones
            s.uiSetEnableAutoSelect(bEnable);
         Global.Print("Zone Auto-Select is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }


   // <ui_handle.png>
   protected =replay= method handleZoneKeyLoChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         StRange *range;
         int key = cm_zone_key_lo.getSelectedOption();
         foreach s in zones
         {
            range <= s.getOrCreateKeyRange();
            range.lo = key;
         }
         sample.sample_bank.updateAltGroups();
         Global.Print("Zone low key is "+key+" ("+(MIDI.midi_notes.get(key))+") (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+") (=> "+(sample.sample_bank.numAltGroups)+" alt group"+Utils.GetPluralString(sample.sample_bank.numAltGroups)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneKeyHiChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         StRange *range;
         int key = cm_zone_key_hi.getSelectedOption();
         foreach s in zones
         {
            range <= s.getOrCreateKeyRange();
            range.hi = key;
         }
         sample.sample_bank.updateAltGroups();
         Global.Print("Zone high key is "+key+" ("+(MIDI.midi_notes.get(key))+") (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+") (=> "+(sample.sample_bank.numAltGroups)+" alt group"+Utils.GetPluralString(sample.sample_bank.numAltGroups)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVelLoChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         StRange *range;
         local Float fo = fp_zone_vel_lo.getFloatValue();
         foreach s in zones
         {
            range <= s.getOrCreateVelRange();
            range.lo = float(fo) / 127.0;
         }
         sample.sample_bank.updateAltGroups();
         Global.Print("Zone low velocity is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+") (=> "+(sample.sample_bank.numAltGroups)+" alt group"+Utils.GetPluralString(sample.sample_bank.numAltGroups)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVelHiChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         StRange *range;
         local Float fo = fp_zone_vel_hi.getFloatValue();
         foreach s in zones
         {
            range <= s.getOrCreateVelRange();
            range.hi = float(fo) / 127.0;
         }
         sample.sample_bank.updateAltGroups();
         Global.Print("Zone high velocity is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+") (=> "+(sample.sample_bank.numAltGroups)+" alt group"+Utils.GetPluralString(sample.sample_bank.numAltGroups)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneModLoChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         StRange *range;
         local Float fo = fp_zone_mod_lo.getFloatValue();
         foreach s in zones
         {
            range <= s.getOrCreateModRange();
            range.lo = float(fo) / 127.0;
         }
         sample.sample_bank.updateAltGroups();
         Global.Print("Zone low mod is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+") (=> "+(sample.sample_bank.numAltGroups)+" alt group"+Utils.GetPluralString(sample.sample_bank.numAltGroups)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneModHiChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         StRange *range;
         local Float fo = fp_zone_mod_hi.getFloatValue();
         foreach s in zones
         {
            range <= s.getOrCreateModRange();
            range.hi = float(fo) / 127.0;
         }
         sample.sample_bank.updateAltGroups();
         Global.Print("Zone high mod is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+") (=> "+(sample.sample_bank.numAltGroups)+" alt group"+Utils.GetPluralString(sample.sample_bank.numAltGroups)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneModFltChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_mod_flt.isSelected();
         foreach s in zones
            s.getOrCreateModRange().setEnableNoteOnFilter(bEnable);
         Global.Print("Zone Mod Note-On Filter is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneModFadeInChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         StRange *range;
         local Float fo = fp_zone_mod_fadein.getFloatValue();
         foreach s in zones
         {
            range <= s.getOrCreateModRange();
            range.fadeIn = float(fo) / 127.0;
         }
         sample.sample_bank.updateAltGroups();
         Global.Print("Zone Mod Fade-In Offset is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneModFadeOutChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         StRange *range;
         local Float fo = fp_zone_mod_fadeout.getFloatValue();
         foreach s in zones
         {
            range <= s.getOrCreateModRange();
            range.fadeOut = float(fo) / 127.0;
         }
         sample.sample_bank.updateAltGroups();
         Global.Print("Zone Mod Fade-Out Offset is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAltChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_alt.isSelected();
         foreach s in zones
            s.enableAlt = bEnable;
         sample.sample_bank.updateAltGroups();
         Global.Print("Zone Alternate is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+") (=> "+(sample.sample_bank.numAltGroups)+" alt group"+Utils.GetPluralString(sample.sample_bank.numAltGroups)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneNoteOffLoopIdxChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int loopIdx = int(fp_zone_noteoff_loop_idx.getFloatValue()) - 1;
         foreach s in zones
            s.noteOffLoopIndex = loopIdx;
         Global.Print("Zone Note Off Loop Index is "+((-1 == loopIdx) ? "Off" : int(loopIdx+1))+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneNoteOffLoopImmediateChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_noteoff_loop_immediate.isSelected();
         foreach s in zones
            s.enableNoteOffLoopImmediately = bEnable;
         Global.Print("Zone Note Off Loop Immediately is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFromStartChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_fromstart.isSelected();
         foreach s in zones
            s.enableFromStart = bEnable;
         Global.Print("Zone Play-from-start-before-looping is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneJumpToLoopImmediatelyChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_jumptoloop_immediately.isSelected();
         foreach s in zones
            s.enableJumpToLoopImmediately = bEnable;
         Global.Print("Zone JumpToLoop Immediately is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePlayModeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int mode = cm_zone_play_mode.getSelectedOption();
         foreach s in zones
            s.playMode = mode;
         Global.Print("Zone Play Mode is "+cm_zone_play_mode.getSelectedOptionName()+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneLoopFadeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int numFrames = cm_zone_loopfade.getSelectedOption();
         if(numFrames > 0)
            numFrames = (1 << numFrames);
         foreach s in zones
            s.startEndFadeNumFrames = numFrames;
         Global.Print("Zone Loop Fade is "+cm_zone_loopfade.getSelectedOptionName()+" ("+numFrames+" frames) (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTimedLoopChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_timedloop.isSelected();
         foreach s in zones
            s.enableTimedLoop = bEnable;
         Global.Print("Zone TimedLoop is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_loops.redraw(); // Column Label changed
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTimedLoopFadeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_timedloop_fade.isSelected();
         foreach s in zones
            s.enableTimedLoopFade = bEnable;
         Global.Print("Zone TimedLoop Fade is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTimedLoopOneShotChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_timedloop_oneshot.isSelected();
         foreach s in zones
            s.enableOneShotLoopStep = bEnable;
         Global.Print("Zone TimedLoop OneShot is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }
   // <ui_handle.png>
   protected =replay= method handleZoneOffsetChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         lazySelectFirstZoneOnly();
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            int start = fp_zone_offset.getFloatValue();
            local Integer newStart = start;
            int idx = 0;
            foreach s in zones
            {
               s.firstLoopOffset = start;
               s.verifySampleAreas();
               if(0 == idx++)
               {
                  newStart = s.firstLoopOffset;
                  fp_zone_len.setValue(s.firstLoopLen);
               }
            }

            s <= zones.get(0);
            if(s.enableTimestretch)
            {
               Integer len = s.firstLoopLen;
               Float numCycles = float(s.firstLoopLen) / s.timestretchGranularity;
               Global.Print("Zone offset is "+newStart+" (0x"+newStart.printf("%x")+") frames, length is "+len+" (0x"+len.printf("%x")+") frames / "+numCycles.printf("%4.3f")+" cycles (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            }
            else
            {
               Global.Print("Zone offset is "+newStart+" (0x"+newStart.printf("%x")+") frames (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            }
            tv_zones.tableModelChanged();
            s <= zones.get(0);
            sv_wave.setHighlight(s.firstLoopOffset, s.firstLoopOffset+s.firstLoopLen);
            updateSampleViewMarkers();
            sv_wave.redraw();
            tv_loops.tableModelChanged();
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   public method handleZoneOffsetChangedFromLoopsTM(int _offset) {
      fp_zone_offset.setValue(_offset);
      handleZoneOffsetChanged();
   }

   // <ui_handle.png>
   protected =replay= method handleZoneLenChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         lazySelectFirstZoneOnly();
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            int len = fp_zone_len.getFloatValue();
            local Integer newLen = len;
            int idx = 0;
            foreach s in zones
            {
               s.firstLoopLen = len;
               s.verifySampleAreas();
               if(0 == idx++)
                  newLen = s.firstLoopLen;
            }

            s <= zones.get(0);
            if(s.enableTimestretch)
            {
               Float numCycles = float(s.firstLoopLen) / s.timestretchGranularity;

               Global.Print("Zone length is "+len+" (0x"+newLen.printf("%x")+") frames / "+numCycles.printf("%4.3f")+" cycles (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            }
            else
            {
               Global.Print("Zone length is "+len+" (0x"+newLen.printf("%x")+") frames (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            }
            if(newLen < len)
            {
               fp_zone_len.setMaxValue(newLen);
               fp_zone_len.setValue(newLen);
            }
            tv_zones.tableModelChanged();
            s <= zones.get(0);
            sv_wave.setHighlight(s.firstLoopOffset, s.firstLoopOffset+s.firstLoopLen);
            sv_wave.redraw();
            updateSampleViewMarkers();
            tv_loops.tableModelChanged();
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   public method handleZoneLenChangedFromLoopsTM(int _len) {
      fp_zone_len.setValue(_len);
      handleZoneLenChanged();
   }

   // <ui_handle.png>
   protected =replay= method handleZoneRepChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         lazySelectFirstZoneOnly();
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int rep = fp_zone_rep.getFloatValue();
         foreach s in zones
            s.firstLoopRep = rep;
         Global.Print("Zone num repeats is "+rep+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_loops.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   public method handleZoneRepChangedFromLoopsTM(int _rep) {
      fp_zone_rep.setValue(_rep);
      handleZoneRepChanged();
   }

   // <ui_handle.png>
   protected =replay= method handleHLChanged(int _off, int _len) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         lazySelectFirstZoneOnly();
         local PointerArray zones <= getSelectedZones();
         if(1 == zones.numElements)
         {
            if(_len > 0)
            {
               StSample *s;
               foreach s in zones
               {
                  s.firstLoopOffset = _off;
                  s.firstLoopLen = _len;
                  s.verifySampleAreas();
                  fp_zone_offset.setValue(s.firstLoopOffset);
                  fp_zone_len.setValue(s.firstLoopLen);
               }

               s <= zones.get(0);
               if(s.enableTimestretch)
               {
                  Integer len = s.firstLoopLen;
                  Float numCycles = float(s.firstLoopLen) / s.timestretchGranularity;
                  Global.Print("Zone area off="+_off+" len="+_len+" ("+numCycles.printf("%4.3f")+" cycles) (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");

               }
               else
               {
                  Global.Print("Zone area off="+_off+" len="+_len+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
               }
               tv_zones.tableModelChanged();
               tv_loops.tableModelChanged();
               sample.markParamsAsModified();
               updateSampleViewMarkers();
            }
         }
         else
         {
            Global.Warning("More than one zone selected, skipping area update");
         }
      }
   }

   // <ui_update.png>
   protected method updateZoneFltEQAndQSwitches(int _type) {
      switch(_type)
      {
         default:
            sw_flt_eq.switchToLayerNr(0);
            sw_flt_q.switchToLayerNr(1);
            break;

         case STSAMPLE_FLT_TYPE_PEQ:
         case STSAMPLE_FLT_TYPE_PEQ2:
            sw_flt_eq.switchToLayerNr(1);
            sw_flt_q.switchToLayerNr(1);
            break;

         case STSAMPLE_FLT_TYPE_LSH:
         case STSAMPLE_FLT_TYPE_LSH2:
         case STSAMPLE_FLT_TYPE_HSH:
         case STSAMPLE_FLT_TYPE_HSH2:
            sw_flt_eq.switchToLayerNr(1);
            sw_flt_q.switchToLayerNr(0);
            break;
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFltEnChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_flt_en.isSelected();
         foreach s in zones
            s.enableFilter = bEnable;
         Global.Print("Zone Filter is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFltTypeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int type = cm_zone_flt_type.getSelectedOption();
         foreach s in zones
         {
            s.filterType = type;
         }
         Global.Print("Zone Filter Type is "+cm_zone_flt_type.getSelectedOptionName()+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();

         updateZoneFltEQAndQSwitches(type);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFltCutOffChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float fo = fp_zone_flt_cutoff.getFloatValue();
         foreach s in zones
            s.filterCutOff = fo / 127.0;
         Global.Print("Zone Filter Cutoff is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFltPanChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float fo = fp_zone_flt_pan.getFloatValue();
         foreach s in zones
            s.filterPan = fo / (127.0 * 4);
         Global.Print("Zone Filter Stereo Panning is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFltOffsetChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float fo = fp_zone_flt_offset.getFloatValue();
         foreach s in zones
            s.filterOffset = fo / 127.0;
         Global.Print("Zone Dual Filter Offset is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFltEQGainChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float fo = fp_zone_flt_eq_gain.getFloatValue();
         foreach s in zones
            s.filterEQGain = fo;
         Global.Print("Zone Filter EQ Gain is "+fo.printf("%3.2f")+" dB (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFltResonanceChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float fo = fp_zone_flt_resonance.getFloatValue();
         foreach s in zones
            s.filterResonance = fo / 127.0;
         Global.Print("Zone Filter Resonance is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFltEnvAmtChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float fo = fp_zone_flt_env_amt.getFloatValue();
         foreach s in zones
            s.filterAuxEnvAmount = fo / 127.0;
         Global.Print("Zone Filter Aux Envelope Amount is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFltEnvVelAmtChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float fo = fp_zone_flt_env_velamt.getFloatValue();
         foreach s in zones
            s.filterAuxEnvVelocityAmount = fo / 127.0;
         Global.Print("Zone Filter Aux Envelope Velocity Amount is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFltLFOAmtChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float fo = fp_zone_flt_lfo_amt.getFloatValue();
         foreach s in zones
            s.filterAuxLFOAmount = fo / 127.0;
         Global.Print("Zone Filter Aux LFO Amount is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFltKbdAmtChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float fo = fp_zone_flt_kbd_amt.getFloatValue();
         foreach s in zones
            s.filterKeyboardAmount = fo;
         Global.Print("Zone Filter Keyboard Amount is "+fo.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAuxToWavChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_auxtowav.isSelected();
         foreach s in zones
            s.uiEnableAuxToWav = bEnable;
         Global.Print("Zone AuxToWav is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTransposeOctChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int oct = fp_zone_transpose_oct.getFloatValue();
         foreach s in zones
            s.uiTransposeOct = oct;
         Global.Print("Zone transpose octave is "+oct+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTransposeSemiChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int semi = fp_zone_transpose_semi.getFloatValue();
         foreach s in zones
            s.uiTransposeSemi = semi;
         Global.Print("Zone transpose semitones is "+semi+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTransposeCentsChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float cents = fp_zone_transpose_cents.getFloatValue();
         foreach s in zones
            s.uiTransposeCents = float(cents);
         Global.Print("Zone transpose cents is "+cents.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneBeatFreqChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float cents = fp_zone_beatfreq.getFloatValue();
         foreach s in zones
            s.beatFrequency = float(cents);
         Global.Print("Zone beat frequency (cents) is "+cents.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFreqEnvAmtChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float amt = fp_zone_freqenvamt.getFloatValue();
         foreach s in zones
            s.freqEnvAmt = float(amt);
         amt *= 100;
         Global.Print("Zone Freq Envelope Amount is "+amt.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected method handleEditZoneTuning() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         if(null == dlg_sample_tuning)
         {
            dlg_sample_tuning <= new SampleTuningDialog;
            dlg_sample_tuning.init();
         }
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            dlg_sample_tuning.showTuningDialog(sample, deref zones/*sampleZonesOrNull*/, sample.sample_bank);
            Global.Print("Edit sample micro-tuning");
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneMMKbdMinChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float fmin = fp_zone_mm_kbd_min.getFloatValue();
         foreach s in zones
            s.setMMKeyboardMin(-float(fmin));
         s <= zones.first;
         float mmNote = 0;
         if(null != s)
            mmNote = s.getMMKeyboardCenter() - s.getMMKeyboardMin();
         Global.Print("Zone ModMatrix Keyboard Min is "+fmin.printf("%3.2f")+" ("+Audio.FracNoteToString(mmNote)+") (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneMMKbdCtrChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float ctr = fp_zone_mm_kbd_ctr.getFloatValue();
         foreach s in zones
            s.setMMKeyboardCenter(float(ctr));
         Global.Print("Zone ModMatrix Keyboard Center is "+ctr.printf("%3.2f")+" ("+Audio.FracNoteToString(ctr)+") (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneMMKbdMaxChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float fmax = fp_zone_mm_kbd_max.getFloatValue();
         foreach s in zones
            s.setMMKeyboardMax(float(fmax));
         s <= zones.first;
         float mmNote = 0;
         if(null != s)
            mmNote = s.getMMKeyboardCenter() + s.getMMKeyboardMax();
         Global.Print("Zone ModMatrix Keyboard Max is "+fmax.printf("%3.2f")+" ("+Audio.FracNoteToString(mmNote)+") (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFreqLFOAmtChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float amt = fp_zone_freqlfoamt.getFloatValue();
         foreach s in zones
            s.freqLFOAmt = float(amt);
         amt *= 100;
         Global.Print("Zone Freq LFO Amount is "+amt.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected method handleEditZoneEnvQuickPreset1(StringArray _cfgPresets,
                                                  String      _itemPrefix,
                                                  Layer       _layerAbove,
                                                  boolean     _bFocusFirst
                                                  ) {
      // itemPrefix: 'freq', 'vol', 'pan', or 'aux'
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            // Show context menu (pm_zone_env_quick_preset)
            int numPresets = _cfgPresets.numElements / 4;
            if(numPresets > 0)
            {
               pm_zone_env_quick_preset <= PopupMenu.New(this);
               PopupMenuButton *pmb;
               PopupMenu pm <= pm_zone_env_quick_preset;

               int presetIdx = 0;
               loop(numPresets)
               {
                  pmb <= pm.addDefaultButton(_cfgPresets[presetIdx*4 + 0],
                                             _itemPrefix+presetIdx
                                             );
                  presetIdx++;
               }

               pm.resizeToMinimum();
               pm.showBelowLayer(_layerAbove);
               if(_bFocusFirst)
                  pm.focusNextMenuItem();

               Global.Print("Show "+_itemPrefix+" envelope quick-preset menu");
            }
            else
               Global.Warning("no env quick-presets defined in config");
         }
      }
   }

   // <ui_handle.png>
   protected method handleEditZoneEnvFreqQuickPreset1(boolean _bFocusFirst) {
      handleEditZoneEnvQuickPreset1(STConfig.page_sample_quickedit_env_presets_freq, "freq", bt_zone_freq_quick, _bFocusFirst);
   }

   // <ui_handle.png>
   protected method handleEditZoneEnvFreqQuickPreset2(int _presetIdx) {
      Global.Debug("handleEditZoneEnvFreqQuickPreset2: presetIdx="+_presetIdx);

      //  format: "<name>", "<a_curve_preset>:<a_rate>", "<s_curve_preset>:<s_rate>:<s_loop_flag>", "<r_curve_preset>:<r_rate>"
      StringArray cfgPresets <= STConfig.page_sample_quickedit_env_presets_freq;
      local StringArray *a;
      String *s;
      CurveDialog curveDialog <= Dialogs.curve_dialog;

      // Attack
      s <= cfgPresets[_presetIdx*4 + 1];  // <a_preset_name>:<a_rate>
      Global.Debug("handleEditZoneEnvFreqQuickPreset2: freq attack preset=\""+s+"\"");
      a <= s.splitChar(':');
      handleEditZoneFreqA(); // show (hidden) curve_dialog
      curveDialog.selectCurvePresetByName(a.get(0));
      curveDialog.loadCurvePreset();
      curveDialog.hide();
      fp_zone_freq_a_speed.setValue(float(a.get(1)));
      handleZoneFreqASpeedChanged();

      // Decay/Sustain
      s <= cfgPresets[_presetIdx*4 + 2];  // <s_preset_name>:<s_rate>:<s_loop_flag>
      Global.Debug("handleEditZoneEnvFreqQuickPreset2: freq decay/sustain preset=\""+s+"\"");
      a <= s.splitChar(':');
      handleEditZoneFreqS(); // show (hidden) curve_dialog
      curveDialog.selectCurvePresetByName(a.get(0));
      curveDialog.loadCurvePreset();
      curveDialog.hide();
      fp_zone_freq_s_speed.setValue(float(a.get(1)));
      handleZoneFreqSSpeedChanged();
      switch(a.get(2))
      {
         default:
         case "hold":
            cb_zone_freq_s_loop.setSelected(false);
            break;
         case "loop":
            cb_zone_freq_s_loop.setSelected(true);
            break;
         case "inf":
            cb_zone_freq_s_loop.setSelected(maybe);
            break;
      }
      handleZoneFreqSLoopChanged();

      // Release
      s <= cfgPresets[_presetIdx*4 + 3];  // <r_preset_name>:<r_rate>
      Global.Debug("handleEditZoneEnvFreqQuickPreset2: freq release preset=\""+s+"\"");
      a <= s.splitChar(':');
      handleEditZoneFreqR(); // show (hidden) curve_dialog
      curveDialog.selectCurvePresetByName(a.get(0));
      curveDialog.loadCurvePreset();
      curveDialog.hide();
      fp_zone_freq_r_speed.setValue(float(a.get(1)));
      handleZoneFreqRSpeedChanged();

      Global.Print("Load freq env quick-preset \""+cfgPresets[_presetIdx*4+0]+"\"");
   }

   // <ui_show.png>
   protected method editLastEditedFreqSeg() : boolean {
      switch(last_edited_freq_env_seg)
      {
         default:
         case 0:
            handleEditZoneFreqA();
            return true;

         case 1:
            handleEditZoneFreqS();
            return true;

         case 2:
            handleEditZoneFreqR();
            return true;
      }
      return false;
   }

   // <ui_handle.png>
   protected method handleEditZoneFreqA() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StEnvelope *stenv;
            StADSR *adsr;
            int idx = 0;
            PointerArray mirrorEnvStates; mirrorEnvStates.empty();
            PointerArray mirrorEnvData; mirrorEnvData.empty();
            PointerArray mirrorStEnv; mirrorStEnv.empty();

            foreach s in zones
            {
               if(idx++ > 0)
               {
                  adsr <= s.getOrCreateFreqADSR();
                  stenv <= adsr.getOrCreateEnvAttack();
                  mirrorEnvStates.add(stenv.metaData);
                  mirrorEnvData.add(stenv.data);
                  mirrorStEnv.add(stenv);
               }
            }
            stenv <= zones[0].getOrCreateFreqADSR().getOrCreateEnvAttack();
            last_edited_env = 0;
            last_edited_freq_env_seg = 0;
            Dialogs.ShowCurveDialogEx("Edit Freq Attack+Decay curve",
                                      stenv.metaData,
                                      stenv.data,
                                      stenv,
                                      mirrorEnvStates,
                                      mirrorEnvData,
                                      mirrorStEnv,
                                      "replay",
                                      this/*listener*/,
                                      null/*sampleDataOrNull*/
                                      );
            Global.Print("Edit Zone Freq Attack+Decay Curve ("+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFreqASpeedChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            local Float timescale = fp_zone_freq_a_speed.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateFreqADSR();
               stenv <= adsr.getOrCreateEnvAttack();
               stenv.timescale = timescale;
            }
            Global.Print("Zone Freq Attack+Decay Timescale is "+timescale.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEditZoneFreqS() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StEnvelope *stenv;
            StADSR *adsr;
            int idx = 0;
            PointerArray mirrorEnvStates; mirrorEnvStates.empty();
            PointerArray mirrorEnvData; mirrorEnvData.empty();
            PointerArray mirrorStEnv; mirrorStEnv.empty();
            foreach s in zones
            {
               if(idx++ > 0)
               {
                  adsr <= s.getOrCreateFreqADSR();
                  stenv <= adsr.getOrCreateEnvSustain();
                  mirrorEnvStates.add(stenv.metaData);
                  mirrorEnvData.add(stenv.data);
                  mirrorStEnv.add(stenv);
               }
            }
            stenv <= zones[0].getOrCreateFreqADSR().getOrCreateEnvSustain();
            last_edited_env = 0;
            last_edited_freq_env_seg = 1;
            Dialogs.ShowCurveDialogEx("Edit Freq Sustain curve",
                                      stenv.metaData,
                                      stenv.data,
                                      stenv,
                                      mirrorEnvStates,
                                      mirrorEnvData,
                                      mirrorStEnv,
                                      "replay",
                                      this/*listener*/,
                                      null/*sampleDataOrNull*/
                                      );
            Global.Print("Edit Zone Freq Sustain Curve ("+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFreqSSpeedChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            local Float timescale = fp_zone_freq_s_speed.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateFreqADSR();
               stenv <= adsr.getOrCreateEnvSustain();
               stenv.timescale = timescale;
            }
            Global.Print("Zone Freq Sustain Timescale is "+timescale.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFreqSLoopChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            boolean bEnable = cb_zone_freq_s_loop.isSelected();
            foreach s in zones
            {
               adsr <= s.getOrCreateFreqADSR();
               adsr.enableSustainLoop = bEnable;
            }
            Global.Print("Zone Freq Sustain Loop is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEditZoneFreqR() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StEnvelope *stenv;
            StADSR *adsr;
            int idx = 0;
            PointerArray mirrorEnvStates; mirrorEnvStates.empty();
            PointerArray mirrorEnvData; mirrorEnvData.empty();
            PointerArray mirrorStEnv; mirrorStEnv.empty();
            foreach s in zones
            {
               if(idx++ > 0)
               {
                  adsr <= s.getOrCreateFreqADSR();
                  stenv <= adsr.getOrCreateEnvRelease();
                  mirrorEnvStates.add(stenv.metaData);
                  mirrorEnvData.add(stenv.data);
                  mirrorStEnv.add(stenv);
               }
            }
            stenv <= zones[0].getOrCreateFreqADSR().getOrCreateEnvRelease();
            last_edited_env = 0;
            last_edited_freq_env_seg = 2;
            Dialogs.ShowCurveDialogEx("Edit Freq Release curve",
                                      stenv.metaData,
                                      stenv.data,
                                      stenv,
                                      mirrorEnvStates,
                                      mirrorEnvData,
                                      mirrorStEnv,
                                      "replay",
                                      this/*listener*/,
                                      null/*sampleDataOrNull*/
                                      );
            Global.Print("Edit Zone Freq Release Curve ("+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFreqRSpeedChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            local Float timescale = fp_zone_freq_r_speed.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateFreqADSR();
               stenv <= adsr.getOrCreateEnvRelease();
               stenv.timescale = timescale;
            }
            Global.Print("Zone Freq Release Timescale is "+timescale.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFreqADSRLevelChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            Float level = fp_zone_freq_adsr_level.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateFreqADSR();
               adsr.level = level;
            }
            level *= 100;
            Global.Print("Zone Freq ADSR Level is "+level.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFreqADSRTimeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            local Float timescaleSec = fp_zone_freq_adsr_time.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateFreqADSR();
               adsr.timescaleMillisec = timescaleSec * 1000.0;
            }
            Global.Print("Zone Freq ADSR Timescale is "+timescaleSec.printf("%3.2f")+" sec (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneFreqADSRStageOpChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            int op = cm_zone_freq_stageop.getSelectedOption();
            foreach s in zones
            {
               adsr <= s.getOrCreateFreqADSR();
               adsr.stageOp = op;/////bEnable ? STADSR_STAGEOP_ADD : STADSR_STAGEOP_MUL_INTENSITY;
            }
            Global.Print("Zone Freq ADSR Stage OP is "+cm_zone_freq_stageop.getSelectedOptionNameLong()+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVolumeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float vol = fp_zone_volume.getFloatValue();
         foreach s in zones
            s.volume = float(vol);
         vol *= 100;
         Global.Print("Zone Volume is "+vol.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVolumeVelChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float vol = fp_zone_volume_vel.getFloatValue();
         foreach s in zones
            s.volumeVelocityAmount = float(vol);
         vol *= 100;
         Global.Print("Zone Volume Velocity Amount is "+vol.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVolLFOAmtChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float amt = fp_zone_vollfoamt.getFloatValue();
         foreach s in zones
            s.volLFOAmt = float(amt);
         amt *= 100;
         Global.Print("Zone Volume LFO Amount is "+amt.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVolumeRampUpChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float vol = fp_zone_volume_ramp_up.getFloatValue();
         foreach s in zones
            s.volumeRampStepsMillisecIn = float(vol);
         Global.Print("Zone Volume Ramp Up Time is "+vol.printf("%3.2f")+" ms (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVolumeRampDownChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float vol = fp_zone_volume_ramp_down.getFloatValue();
         foreach s in zones
            s.volumeRampStepsMillisecOut = float(vol);
         Global.Print("Zone Volume Ramp Down Time is "+vol.printf("%3.2f")+" ms (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected method handleEditZoneEnvVolumeQuickPreset1(boolean _bFocusFirst) {
      handleEditZoneEnvQuickPreset1(STConfig.page_sample_quickedit_env_presets_vol, "vol", bt_zone_volume_quick, _bFocusFirst);
   }

   // <ui_handle.png>
   protected method handleEditZoneEnvVolumeQuickPreset2(int _presetIdx) {
      Global.Debug("handleEditZoneEnvVolumeQuickPreset2: presetIdx="+_presetIdx);

      //  format: "<name>", "<a_curve_preset>:<a_rate>", "<s_curve_preset>:<s_rate>:<s_loop_flag>", "<r_curve_preset>:<r_rate>"
      StringArray cfgPresets <= STConfig.page_sample_quickedit_env_presets_vol;
      local StringArray *a;
      String *s;
      CurveDialog curveDialog <= Dialogs.curve_dialog;

      // Attack
      s <= cfgPresets[_presetIdx*4 + 1];  // <a_preset_name>:<a_rate>
      Global.Debug("handleEditZoneEnvVolumeQuickPreset2: vol attack preset=\""+s+"\"");
      a <= s.splitChar(':');
      handleEditZoneVolumeA(); // show (hidden) curve_dialog
      curveDialog.selectCurvePresetByName(a.get(0));
      curveDialog.loadCurvePreset();
      curveDialog.hide();
      fp_zone_volume_a_speed.setValue(float(a.get(1)));
      handleZoneVolumeASpeedChanged();

      // Decay/Sustain
      s <= cfgPresets[_presetIdx*4 + 2];  // <s_preset_name>:<s_rate>:<s_loop_flag>
      Global.Debug("handleEditZoneEnvVolumeQuickPreset2: vol decay/sustain preset=\""+s+"\"");
      a <= s.splitChar(':');
      handleEditZoneVolumeS(); // show (hidden) curve_dialog
      curveDialog.selectCurvePresetByName(a.get(0));
      curveDialog.loadCurvePreset();
      curveDialog.hide();
      fp_zone_volume_s_speed.setValue(float(a.get(1)));
      handleZoneVolumeSSpeedChanged();
      switch(a.get(2))
      {
         default:
         case "hold":
            cb_zone_volume_s_loop.setSelected(false);
            break;
         case "loop":
         case "inf":  // not allowed for volume env, fall back to "loop"
            cb_zone_volume_s_loop.setSelected(true);
            break;
      }
      handleZoneVolumeSLoopChanged();

      // Release
      s <= cfgPresets[_presetIdx*4 + 3];  // <r_preset_name>:<r_rate>
      Global.Debug("handleEditZoneEnvVolumeQuickPreset2: vol release preset=\""+s+"\"");
      a <= s.splitChar(':');
      handleEditZoneVolumeR(); // show (hidden) curve_dialog
      curveDialog.selectCurvePresetByName(a.get(0));
      curveDialog.loadCurvePreset();
      curveDialog.hide();
      fp_zone_volume_r_speed.setValue(float(a.get(1)));
      handleZoneVolumeRSpeedChanged();

      Global.Print("Load volume env quick-preset \""+cfgPresets[_presetIdx*4+0]+"\"");
   }

   // <ui_show.png>
   protected method editLastEditedVolumeSeg() : boolean {
      switch(last_edited_volume_env_seg)
      {
         default:
         case 0:
            handleEditZoneVolumeA();
            return true;

         case 1:
            handleEditZoneVolumeS();
            return true;

         case 2:
            handleEditZoneVolumeR();
            return true;
      }
      return false;
   }

   // <ui_handle.png>
   protected method handleEditZoneVolumeA() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StEnvelope *stenv;
            StADSR *adsr;
            int idx = 0;
            PointerArray mirrorEnvStates; mirrorEnvStates.empty();
            PointerArray mirrorEnvData; mirrorEnvData.empty();
            PointerArray mirrorStEnv; mirrorStEnv.empty();
            foreach s in zones
            {
               if(idx++ > 0)
               {
                  adsr <= s.getOrCreateVolADSR();
                  stenv <= adsr.getOrCreateEnvAttack();
                  mirrorEnvStates.add(stenv.metaData);
                  mirrorEnvData.add(stenv.data);
                  mirrorStEnv.add(stenv);
               }
            }
            stenv <= zones[0].getOrCreateVolADSR().getOrCreateEnvAttack();
            last_edited_env = 1;
            last_edited_volume_env_seg = 0;
            Dialogs.ShowCurveDialogEx("Edit Volume Attack+Decay curve",
                                      stenv.metaData,
                                      stenv.data,
                                      stenv,
                                      mirrorEnvStates,
                                      mirrorEnvData,
                                      mirrorStEnv,
                                      "replay",
                                      this/*listener*/,
                                      null/*sampleDataOrNull*/
                                      );
            Global.Print("Edit Zone Volume Attack+Decay Curve ("+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVolumeASpeedChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            local Float timescale = fp_zone_volume_a_speed.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateVolADSR();
               stenv <= adsr.getOrCreateEnvAttack();
               stenv.timescale = timescale;
            }
            Global.Print("Zone Volume Attack+Decay Timescale is "+timescale.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected method handleEditZoneVolumeS() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StEnvelope *stenv;
            StADSR *adsr;
            int idx = 0;
            PointerArray mirrorEnvStates; mirrorEnvStates.empty();
            PointerArray mirrorEnvData; mirrorEnvData.empty();
            PointerArray mirrorStEnv; mirrorStEnv.empty();
            foreach s in zones
            {
               if(idx++ > 0)
               {
                  adsr <= s.getOrCreateVolADSR();
                  stenv <= adsr.getOrCreateEnvSustain();
                  mirrorEnvStates.add(stenv.metaData);
                  mirrorEnvData.add(stenv.data);
                  mirrorStEnv.add(stenv);
               }
            }
            stenv <= zones[0].getOrCreateVolADSR().getOrCreateEnvSustain();
            last_edited_env = 1;
            last_edited_volume_env_seg = 1;
            Dialogs.ShowCurveDialogEx("Edit Volume Sustain curve",
                                      stenv.metaData,
                                      stenv.data,
                                      stenv,
                                      mirrorEnvStates,
                                      mirrorEnvData,
                                      mirrorStEnv,
                                      "replay",
                                      this/*listener*/,
                                      null/*sampleDataOrNull*/
                                      );
            Global.Print("Edit Zone volume sustain curve ("+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVolumeSSpeedChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            local Float timescale = fp_zone_volume_s_speed.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateVolADSR();
               stenv <= adsr.getOrCreateEnvSustain();
               stenv.timescale = timescale;
            }
            Global.Print("Zone Volume Sustain Timescale is "+timescale.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVolumeSLoopChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            boolean bEnable = cb_zone_volume_s_loop.isSelected();
            foreach s in zones
            {
               adsr <= s.getOrCreateVolADSR();
               adsr.enableSustainLoop = bEnable;
            }
            Global.Print("Zone Volume Sustain Loop is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected method handleEditZoneVolumeR() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StEnvelope *stenv;
            StADSR *adsr;
            int idx = 0;
            PointerArray mirrorEnvStates; mirrorEnvStates.empty();
            PointerArray mirrorEnvData; mirrorEnvData.empty();
            PointerArray mirrorStEnv; mirrorStEnv.empty();
            foreach s in zones
            {
               if(idx++ > 0)
               {
                  adsr <= s.getOrCreateVolADSR();
                  stenv <= adsr.getOrCreateEnvRelease();
                  mirrorEnvStates.add(stenv.metaData);
                  mirrorEnvData.add(stenv.data);
                  mirrorStEnv.add(stenv);
               }
            }
            stenv <= zones[0].getOrCreateVolADSR().getOrCreateEnvRelease();
            last_edited_env = 1;
            last_edited_volume_env_seg = 2;
            Dialogs.ShowCurveDialogEx("Edit Volume Release curve",
                                      stenv.metaData,
                                      stenv.data,
                                      stenv,
                                      mirrorEnvStates,
                                      mirrorEnvData,
                                      mirrorStEnv,
                                      "replay",
                                      this/*listener*/,
                                      null/*sampleDataOrNull*/
                                      );
            Global.Print("Edit Zone volume release curve ("+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVolumeRSpeedChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            local Float timescale = fp_zone_volume_r_speed.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateVolADSR();
               stenv <= adsr.getOrCreateEnvRelease();
               stenv.timescale = timescale;
            }
            Global.Print("Zone Volume Release Timescale is "+timescale.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVolumeADSRIntensityChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            local Float intensity = fp_zone_volume_adsr_int.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateVolADSR();
               adsr.intensity = intensity;
            }
            intensity *= 100;
            Global.Print("Zone Volume ADSR Intensity is "+intensity.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVolumeADSRTimeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            local Float timescaleSec = fp_zone_volume_adsr_time.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateVolADSR();
               adsr.timescaleMillisec = timescaleSec * 1000.0;
            }
            Global.Print("Zone Volume ADSR Timescale is "+timescaleSec.printf("%3.2f")+" sec (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePanChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float pan = fp_zone_pan.getFloatValue();
         foreach s in zones
            s.pan = float(pan);
         pan *= 100;
         Global.Print("Zone Pan is "+pan.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePanEnvAmtChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float amt = fp_zone_panenvamt.getFloatValue();
         foreach s in zones
            s.panEnvAmt = float(amt);
         amt *= 100;
         Global.Print("Zone Pan Envelope Amount is "+amt.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePanLFOAmtChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         local Float amt = fp_zone_panlfoamt.getFloatValue();
         foreach s in zones
            s.panLFOAmt = float(amt);
         amt *= 100;
         Global.Print("Zone Pan LFO Amount is "+amt.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected method handleEditZoneEnvPanQuickPreset1(boolean _bFocusFirst) {
      handleEditZoneEnvQuickPreset1(STConfig.page_sample_quickedit_env_presets_pan, "pan", bt_zone_pan_quick, _bFocusFirst);
   }

   // <ui_handle.png>
   protected method handleEditZoneEnvPanQuickPreset2(int _presetIdx) {
      Global.Debug("handleEditZoneEnvPanQuickPreset2: presetIdx="+_presetIdx);

      //  format: "<name>", "<a_curve_preset>:<a_rate>", "<s_curve_preset>:<s_rate>:<s_loop_flag>", "<r_curve_preset>:<r_rate>"
      StringArray cfgPresets <= STConfig.page_sample_quickedit_env_presets_pan;
      local StringArray *a;
      String *s;
      CurveDialog curveDialog <= Dialogs.curve_dialog;

      // Attack
      s <= cfgPresets[_presetIdx*4 + 1];  // <a_preset_name>:<a_rate>
      Global.Debug("handleEditZoneEnvPanQuickPreset2: pan attack preset=\""+s+"\"");
      a <= s.splitChar(':');
      handleEditZonePanA(); // show (hidden) curve_dialog
      curveDialog.selectCurvePresetByName(a.get(0));
      curveDialog.loadCurvePreset();
      curveDialog.hide();
      fp_zone_pan_a_speed.setValue(float(a.get(1)));
      handleZonePanASpeedChanged();

      // Decay/Sustain
      s <= cfgPresets[_presetIdx*4 + 2];  // <s_preset_name>:<s_rate>:<s_loop_flag>
      Global.Debug("handleEditZoneEnvPanQuickPreset2: pan decay/sustain preset=\""+s+"\"");
      a <= s.splitChar(':');
      handleEditZonePanS(); // show (hidden) curve_dialog
      curveDialog.selectCurvePresetByName(a.get(0));
      curveDialog.loadCurvePreset();
      curveDialog.hide();
      fp_zone_pan_s_speed.setValue(float(a.get(1)));
      handleZonePanSSpeedChanged();
      switch(a.get(2))
      {
         default:
         case "hold":
            cb_zone_pan_s_loop.setSelected(false);
            break;
         case "loop":
            cb_zone_pan_s_loop.setSelected(true);
            break;
         case "inf":
            cb_zone_pan_s_loop.setSelected(maybe);
            break;
      }
      handleZonePanSLoopChanged();

      // Release
      s <= cfgPresets[_presetIdx*4 + 3];  // <r_preset_name>:<r_rate>
      Global.Debug("handleEditZoneEnvPanQuickPreset2: pan release preset=\""+s+"\"");
      a <= s.splitChar(':');
      handleEditZonePanR(); // show (hidden) curve_dialog
      curveDialog.selectCurvePresetByName(a.get(0));
      curveDialog.loadCurvePreset();
      curveDialog.hide();
      fp_zone_pan_r_speed.setValue(float(a.get(1)));
      handleZonePanRSpeedChanged();

      Global.Print("Load pan env quick-preset \""+cfgPresets[_presetIdx*4+0]+"\"");
   }

   // <ui_show.png>
   protected method editLastEditedPanSeg() : boolean {
      switch(last_edited_pan_env_seg)
      {
         default:
         case 0:
            handleEditZonePanA();
            return true;

         case 1:
            handleEditZonePanS();
            return true;

         case 2:
            handleEditZonePanR();
            return true;
      }
      return false;
   }

   // <ui_handle.png>
   protected method handleEditZonePanA() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StEnvelope *stenv;
            StADSR *adsr;
            int idx = 0;
            PointerArray mirrorEnvStates; mirrorEnvStates.empty();
            PointerArray mirrorEnvData; mirrorEnvData.empty();
            PointerArray mirrorStEnv; mirrorStEnv.empty();
            foreach s in zones
            {
               if(idx++ > 0)
               {
                  adsr <= s.getOrCreatePanADSR();
                  stenv <= adsr.getOrCreateEnvAttack();
                  mirrorEnvStates.add(stenv.metaData);
                  mirrorEnvData.add(stenv.data);
                  mirrorStEnv.add(stenv);
               }
            }
            stenv <= zones[0].getOrCreatePanADSR().getOrCreateEnvAttack();
            last_edited_env = 2;
            last_edited_pan_env_seg = 0;
            Dialogs.ShowCurveDialogEx("Edit Pan Attack+Decay curve",
                                      stenv.metaData,
                                      stenv.data,
                                      stenv,
                                      mirrorEnvStates,
                                      mirrorEnvData,
                                      mirrorStEnv,
                                      "replay",
                                      this/*listener*/,
                                      null/*sampleDataOrNull*/
                                      );
            Global.Print("Edit Zone pan attack+decay curve ("+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePanASpeedChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            local Float timescale = fp_zone_pan_a_speed.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreatePanADSR();
               stenv <= adsr.getOrCreateEnvAttack();
               stenv.timescale = timescale;
            }
            Global.Print("Zone Pan Attack+Decay Timescale is "+timescale.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected method handleEditZonePanS() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StEnvelope *stenv;
            StADSR *adsr;
            int idx = 0;
            PointerArray mirrorEnvStates; mirrorEnvStates.empty();
            PointerArray mirrorEnvData; mirrorEnvData.empty();
            PointerArray mirrorStEnv; mirrorStEnv.empty();
            foreach s in zones
            {
               if(idx++ > 0)
               {
                  adsr <= s.getOrCreatePanADSR();
                  stenv <= adsr.getOrCreateEnvSustain();
                  mirrorEnvStates.add(stenv.metaData);
                  mirrorEnvData.add(stenv.data);
                  mirrorStEnv.add(stenv);
               }
            }
            stenv <= zones[0].getOrCreatePanADSR().getOrCreateEnvSustain();
            last_edited_env = 2;
            last_edited_pan_env_seg = 1;
            Dialogs.ShowCurveDialogEx("Edit Pan Sustain curve",
                                      stenv.metaData,
                                      stenv.data,
                                      stenv,
                                      mirrorEnvStates,
                                      mirrorEnvData,
                                      mirrorStEnv,
                                      "replay",
                                      this/*listener*/,
                                      null/*sampleDataOrNull*/
                                      );
            Global.Print("Edit Zone pan sustain curve ("+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePanSSpeedChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            local Float timescale = fp_zone_pan_s_speed.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreatePanADSR();
               stenv <= adsr.getOrCreateEnvSustain();
               stenv.timescale = timescale;
            }
            Global.Print("Zone Pan Sustain Timescale is "+timescale.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePanSLoopChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            boolean bEnable = cb_zone_pan_s_loop.isSelected();
            foreach s in zones
            {
               adsr <= s.getOrCreatePanADSR();
               adsr.enableSustainLoop = bEnable;
            }
            Global.Print("Zone Pan Sustain Loop is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected method handleEditZonePanR() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StEnvelope *stenv;
            StADSR *adsr;
            int idx = 0;
            PointerArray mirrorEnvStates; mirrorEnvStates.empty();
            PointerArray mirrorEnvData; mirrorEnvData.empty();
            PointerArray mirrorStEnv; mirrorStEnv.empty();
            foreach s in zones
            {
               if(idx++ > 0)
               {
                  adsr <= s.getOrCreatePanADSR();
                  stenv <= adsr.getOrCreateEnvRelease();
                  mirrorEnvStates.add(stenv.metaData);
                  mirrorEnvData.add(stenv.data);
                  mirrorStEnv.add(stenv);
               }
            }
            stenv <= zones[0].getOrCreatePanADSR().getOrCreateEnvRelease();
            last_edited_env = 2;
            last_edited_pan_env_seg = 2;
            Dialogs.ShowCurveDialogEx("Edit Pan Release curve",
                                      stenv.metaData,
                                      stenv.data,
                                      stenv,
                                      mirrorEnvStates,
                                      mirrorEnvData,
                                      mirrorStEnv,
                                      "replay",
                                      this/*listener*/,
                                      null/*sampleDataOrNull*/
                                      );
            Global.Print("Edit Zone pan release curve ("+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePanRSpeedChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            local Float timescale = fp_zone_pan_r_speed.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreatePanADSR();
               stenv <= adsr.getOrCreateEnvRelease();
               stenv.timescale = timescale;
            }
            Global.Print("Zone Pan Release Timescale is "+timescale.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePanADSRLevelChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            local Float level = fp_zone_pan_adsr_level.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreatePanADSR();
               adsr.level = level;
            }
            level *= 100;
            Global.Print("Zone Pan ADSR Level is "+level.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePanADSRTimeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            local Float timescaleSec = fp_zone_pan_adsr_time.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreatePanADSR();
               adsr.timescaleMillisec = timescaleSec * 1000.0;
            }
            Global.Print("Zone Pan ADSR Timescale is "+timescaleSec.printf("%3.2f")+" sec (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePanADSRStageOpChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            int op = cm_zone_pan_stageop.getSelectedOption();
            foreach s in zones
            {
               adsr <= s.getOrCreatePanADSR();
               adsr.stageOp = op;////bEnable ? STADSR_STAGEOP_ADD : STADSR_STAGEOP_MUL_INTENSITY;
            }
            Global.Print("Zone Pan ADSR Stage OP is "+cm_zone_pan_stageop.getSelectedOptionNameLong()+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected method handleEditZoneEnvAuxQuickPreset1(boolean _bFocusFirst) {
      handleEditZoneEnvQuickPreset1(STConfig.page_sample_quickedit_env_presets_aux, "aux", bt_zone_aux_quick, _bFocusFirst);
   }

   // <ui_handle.png>
   protected method handleEditZoneEnvAuxQuickPreset2(int _presetIdx) {
      Global.Debug("handleEditZoneEnvAuxQuickPreset2: presetIdx="+_presetIdx);

      //  format: "<name>", "<a_curve_preset>:<a_rate>", "<s_curve_preset>:<s_rate>:<s_loop_flag>", "<r_curve_preset>:<r_rate>"
      StringArray cfgPresets <= STConfig.page_sample_quickedit_env_presets_aux;
      local StringArray *a;
      String *s;
      CurveDialog curveDialog <= Dialogs.curve_dialog;

      // Attack
      s <= cfgPresets[_presetIdx*4 + 1];  // <a_preset_name>:<a_rate>
      Global.Debug("handleEditZoneEnvAuxQuickPreset2: aux attack preset=\""+s+"\"");
      a <= s.splitChar(':');
      handleEditZoneAuxA(); // show (hidden) curve_dialog
      curveDialog.selectCurvePresetByName(a.get(0));
      curveDialog.loadCurvePreset();
      curveDialog.hide();
      fp_zone_aux_a_speed.setValue(float(a.get(1)));
      handleZoneAuxASpeedChanged();

      // Decay/Sustain
      s <= cfgPresets[_presetIdx*4 + 2];  // <s_preset_name>:<s_rate>:<s_loop_flag>
      Global.Debug("handleEditZoneEnvAuxQuickPreset2: aux decay/sustain preset=\""+s+"\"");
      a <= s.splitChar(':');
      handleEditZoneAuxS(); // show (hidden) curve_dialog
      curveDialog.selectCurvePresetByName(a.get(0));
      curveDialog.loadCurvePreset();
      curveDialog.hide();
      fp_zone_aux_s_speed.setValue(float(a.get(1)));
      handleZoneAuxSSpeedChanged();
      switch(a.get(2))
      {
         default:
         case "hold":
            cb_zone_aux_s_loop.setSelected(false);
            break;
         case "loop":
            cb_zone_aux_s_loop.setSelected(true);
            break;
         case "inf":
            cb_zone_aux_s_loop.setSelected(maybe);
            break;
      }
      handleZoneAuxSLoopChanged();

      // Release
      s <= cfgPresets[_presetIdx*4 + 3];  // <r_preset_name>:<r_rate>
      Global.Debug("handleEditZoneEnvAuxQuickPreset2: aux release preset=\""+s+"\"");
      a <= s.splitChar(':');
      handleEditZoneAuxR(); // show (hidden) curve_dialog
      curveDialog.selectCurvePresetByName(a.get(0));
      curveDialog.loadCurvePreset();
      curveDialog.hide();
      fp_zone_aux_r_speed.setValue(float(a.get(1)));
      handleZoneAuxRSpeedChanged();

      Global.Print("Load aux env quick-preset \""+cfgPresets[_presetIdx*4+0]+"\"");
   }

   // <ui_show.png>
   protected method editLastEditedAuxSeg() : boolean {
      switch(last_edited_aux_env_seg)
      {
         default:
         case 0:
            handleEditZoneAuxA();
            return true;

         case 1:
            handleEditZoneAuxS();
            return true;

         case 2:
            handleEditZoneAuxR();
            return true;
      }
      return false;
   }

   // <ui_handle.png>
   protected method handleEditZoneAuxA() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StEnvelope *stenv;
            StADSR *adsr;
            int idx = 0;
            PointerArray mirrorEnvStates; mirrorEnvStates.empty();
            PointerArray mirrorEnvData; mirrorEnvData.empty();
            PointerArray mirrorStEnv; mirrorStEnv.empty();

            s <= zones.get(0);
            if((null != s) && s.uiEnableAuxToWav)
            {
               adsr <= s.getOrCreateAuxADSR();
               stenv <= adsr.getOrCreateEnvAttack();
               StWaveform wf <= sample.waveform;
               if(1 == wf.numChannels)
               {
                  int minOffset = s.minOffset;
                  int maxOffset = s.maxOffset;
                  local FloatArray syncSampleData;
                  syncSampleData.visit(wf.sampleData, minOffset, maxOffset - minOffset);
                  Dialogs.ShowCurveDialogEx("Edit AuxToWav curve",
                                            stenv.metaData,
                                            stenv.data,
                                            null/*stEnvOrNull*/,
                                            mirrorEnvStates,
                                            mirrorEnvData,
                                            null/*mirrorStEnvOrNull*/,
                                            "--none--"/*mutex*/,
                                            this/*syncListenerOrNull*/,
                                            deref syncSampleData
                                            );
                  Global.Print("Edit AuxToWav Curve ("+wf.numFrames+" frames)");
               }
               else
               {
                  Global.Warning("Edit AuxToWave: waveform must be MONO");
               }
            }
            else
            {
               // Regular envelope (!auxtowav)
               foreach s in zones
               {
                  if(idx++ > 0)
                  {
                     adsr <= s.getOrCreateAuxADSR();
                     stenv <= adsr.getOrCreateEnvAttack();
                     mirrorEnvStates.add(stenv.metaData);
                     mirrorEnvData.add(stenv.data);
                     mirrorStEnv.add(stenv);
                  }
               }
               stenv <= zones[0].getOrCreateAuxADSR().getOrCreateEnvAttack();
               last_edited_env = 3;
               last_edited_aux_env_seg = 0;
               Dialogs.ShowCurveDialogEx("Edit Aux Attack+Decay curve",
                                         stenv.metaData,
                                         stenv.data,
                                         stenv,
                                         mirrorEnvStates,
                                         mirrorEnvData,
                                         mirrorStEnv,
                                         "replay"/*mutex*/,
                                         this/*listener*/,
                                         null/*sampleDataOrNull*/
                                         );
               Global.Print("Edit Zone Aux Attack+Decay Curve ("+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            }
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAuxASpeedChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            local Float timescale = fp_zone_aux_a_speed.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateAuxADSR();
               stenv <= adsr.getOrCreateEnvAttack();
               stenv.timescale = timescale;
            }
            Global.Print("Zone Aux Attack+Decay Timescale is "+timescale.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected method handleEditZoneAuxS() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StEnvelope *stenv;
            StADSR *adsr;
            int idx = 0;
            PointerArray mirrorEnvStates; mirrorEnvStates.empty();
            PointerArray mirrorEnvData; mirrorEnvData.empty();
            PointerArray mirrorStEnv; mirrorStEnv.empty();
            foreach s in zones
            {
               if(idx++ > 0)
               {
                  adsr <= s.getOrCreateAuxADSR();
                  stenv <= adsr.getOrCreateEnvSustain();
                  mirrorEnvStates.add(stenv.metaData);
                  mirrorEnvData.add(stenv.data);
                  mirrorStEnv.add(stenv);
               }
            }
            stenv <= zones[0].getOrCreateAuxADSR().getOrCreateEnvSustain();
            last_edited_env = 3;
            last_edited_aux_env_seg = 1;
            Dialogs.ShowCurveDialogEx("Edit Aux Sustain curve",
                                      stenv.metaData,
                                      stenv.data,
                                      stenv,
                                      mirrorEnvStates,
                                      mirrorEnvData,
                                      mirrorStEnv,
                                      "replay",
                                      this/*listener*/,
                                      null/*sampleDataOrNull*/
                                      );
            Global.Print("Edit Zone Aux Sustain Curve ("+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAuxSSpeedChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            local Float timescale = fp_zone_aux_s_speed.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateAuxADSR();
               stenv <= adsr.getOrCreateEnvSustain();
               stenv.timescale = timescale;
            }
            Global.Print("Zone Aux Sustain Timescale is "+timescale.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAuxSLoopChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            boolean bEnable = cb_zone_aux_s_loop.isSelected();
            foreach s in zones
            {
               adsr <= s.getOrCreateAuxADSR();
               adsr.enableSustainLoop = bEnable;
            }
            Global.Print("Zone Aux Sustain Loop is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected method handleEditZoneAuxR() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StEnvelope *stenv;
            StADSR *adsr;
            int idx = 0;
            PointerArray mirrorEnvStates; mirrorEnvStates.empty();
            PointerArray mirrorEnvData; mirrorEnvData.empty();
            PointerArray mirrorStEnv; mirrorStEnv.empty();
            foreach s in zones
            {
               if(idx++ > 0)
               {
                  adsr <= s.getOrCreateAuxADSR();
                  stenv <= adsr.getOrCreateEnvRelease();
                  mirrorEnvStates.add(stenv.metaData);
                  mirrorEnvData.add(stenv.data);
                  mirrorStEnv.add(stenv);
               }
            }
            stenv <= zones[0].getOrCreateAuxADSR().getOrCreateEnvRelease();
            last_edited_env = 3;
            last_edited_aux_env_seg = 2;
            Dialogs.ShowCurveDialogEx("Edit Aux Release curve",
                                      stenv.metaData,
                                      stenv.data,
                                      stenv,
                                      mirrorEnvStates,
                                      mirrorEnvData,
                                      mirrorStEnv,
                                      "replay",
                                      this/*listener*/,
                                      null/*sampleDataOrNull*/
                                      );
            Global.Print("Edit Zone Aux Release Curve ("+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAuxRSpeedChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            StEnvelope *stenv;
            local Float timescale = fp_zone_aux_r_speed.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateAuxADSR();
               stenv <= adsr.getOrCreateEnvRelease();
               stenv.timescale = timescale;
            }
            Global.Print("Zone Aux Release Timescale is "+timescale.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected method handleZoneAuxADSRLevelChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            local Float level = fp_zone_aux_adsr_level.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateAuxADSR();
               adsr.level = level;
            }
            level *= 100;
            Global.Print("Zone Aux ADSR level is "+level.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAuxADSRTimeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            local Float timescaleSec = fp_zone_aux_adsr_time.getFloatValue();
            foreach s in zones
            {
               adsr <= s.getOrCreateAuxADSR();
               adsr.timescaleMillisec = timescaleSec * 1000.0;
            }
            Global.Print("Zone Aux ADSR Timescale is "+timescaleSec.printf("%3.2f")+" sec (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneAuxADSRStageOpChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            StADSR *adsr;
            int op = cm_zone_aux_stageop.getSelectedOption();
            foreach s in zones
            {
               adsr <= s.getOrCreateAuxADSR();
               adsr.stageOp = op;////bEnable ? STADSR_STAGEOP_ADD : STADSR_STAGEOP_MUL;//_INTENSITY;
            }
            Global.Print("Zone Aux ADSR Stage OP is "+cm_zone_aux_stageop.getSelectedOptionNameLong()+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleSelectLoop(boolean _bFromUI) {

      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            if(_bFromUI)
            {
               int loopIdx = tm_loops.getCursorIndex();
               if(-1 == loopIdx)
               {
                  tv_loops.moveCursorToFirstRow();
                  loopIdx = 0;
               }
               s.firstLoopIndex = loopIdx;

               fp_zone_offset.setValue(s.firstLoopOffset);
               fp_zone_len.setValue(s.firstLoopLen);
               fp_zone_rep.setValue(s.firstLoopRep);

               sample.markParamsAsModified();
            }
            else
            {
               tv_loops.moveCursorToRowNoAction(s.firstLoopIndex);
            }

            sv_wave.setHighlight(s.firstLoopOffset, s.firstLoopOffset+s.firstLoopLen);
         }
         else
         {
            sv_wave.setHighlight(0, 0);
         }
      }
      else
      {
         sv_wave.setHighlight(0, 0);
      }

      updateSampleViewMarkers();
   }

   // <ui_handle.png>
   protected =replay= method createLoop() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         lazySelectFirstZoneOnly();
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            IntArray loops <= s.getOrCreateSampleLoops();

            int loopIdx = tm_loops.getCursorIndex();
            if(-1 == loopIdx)
            {
               loops.add(s.firstOffset);
               loops.add(s.firstLen);
               loops.add(0);  // inf repeats
            }
            else
            {
               loopIdx++;
               loops.insert(3*loopIdx + 0, s.firstOffset);
               loops.insert(3*loopIdx + 1, s.firstLen);
               loops.insert(3*loopIdx + 2, 0);

               if(loopIdx <= s.noteOffLoopIndex)
               {
                  s.noteOffLoopIndex = s.noteOffLoopIndex + 1;
                  fp_zone_noteoff_loop_idx.setValue(s.noteOffLoopIndex + 1);
               }
            }

            fp_zone_noteoff_loop_idx.setMaxValue(s.numSampleLoops);

            tv_loops.tableModelChanged();
            if(-1 == loopIdx)
               tv_loops.moveCursorToLastRow();
            else
               tv_loops.moveCursorToNextRow();
            tv_zones.tableModelChanged();
            Global.Print("Create loop");
            sample.markParamsAsModified();
            updateSampleViewMarkers();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method cloneLoop() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         lazySelectFirstZoneOnly();
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            int loopIdx = tm_loops.getCursorIndex();
            if(-1 != loopIdx)
            {
               IntArray loops <= s.getOrCreateSampleLoops();

               int cOff = loops.get(3*loopIdx + 0);
               int cLen = loops.get(3*loopIdx + 1);
               int cRep = loops.get(3*loopIdx + 2);

               loopIdx++;
               loops.insert(3*loopIdx + 0, cOff);
               loops.insert(3*loopIdx + 1, cLen);
               loops.insert(3*loopIdx + 2, cRep);

               if(loopIdx <= s.noteOffLoopIndex)
               {
                  s.noteOffLoopIndex = s.noteOffLoopIndex + 1;
                  fp_zone_noteoff_loop_idx.setValue(s.noteOffLoopIndex + 1);
               }

               fp_zone_noteoff_loop_idx.setMaxValue(s.numSampleLoops);

               tv_loops.tableModelChanged();
               tv_loops.moveCursorToNextRow();
               tv_zones.tableModelChanged();
               Global.Print("Clone loop");
               sample.markParamsAsModified();
               updateSampleViewMarkers();
            }
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method deleteSelectedLoop() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         lazySelectFirstZoneOnly();
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            int loopIdx = tm_loops.getCursorIndex();
            if(-1 != loopIdx)
            {
               IntArray loops <= s.getOrCreateSampleLoops();

               if(loops.numElements >= (2*3))
               {
                  loops.delete(3*loopIdx);  // off
                  loops.delete(3*loopIdx);  // len
                  loops.delete(3*loopIdx);  // rep

                  if(0 == loops.numElements)
                     s.freeSampleLoops();

                  if(loopIdx <= s.noteOffLoopIndex)
                  {
                     s.noteOffLoopIndex = s.noteOffLoopIndex - 1;
                     fp_zone_noteoff_loop_idx.setValue(s.noteOffLoopIndex + 1);
                  }

                  fp_zone_noteoff_loop_idx.setMaxValue(s.numSampleLoops);

                  tv_loops.tableModelChanged();
                  handleSelectLoop(true/*bFromUI*/);
                  tv_zones.tableModelChanged();
                  Global.Print("Delete loop");
                  sample.markParamsAsModified();
                  updateSampleViewMarkers();
               }
            }
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method moveSelectedLoopUp() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         lazySelectFirstZoneOnly();
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            int loopIdx = tm_loops.getCursorIndex();
            if(-1 != loopIdx)
            {
               if(loopIdx > 0)
               {
                  IntArray loops <= s.getOrCreateSampleLoops();

                  loops.swap(3*loopIdx+0,  3*(loopIdx-1) + 0);  // off
                  loops.swap(3*loopIdx+1,  3*(loopIdx-1) + 1);  // len
                  loops.swap(3*loopIdx+2,  3*(loopIdx-1) + 2);  // rep

                  tv_loops.tableModelChanged();
                  tv_loops.moveCursorToPreviousRow();

                  if(loopIdx == s.noteOffLoopIndex)
                  {
                     s.noteOffLoopIndex = s.noteOffLoopIndex - 1;
                     fp_zone_noteoff_loop_idx.setValue(s.noteOffLoopIndex + 1);
                  }

                  Global.Print("Move loop up");
                  sample.markParamsAsModified();
                  updateSampleViewMarkers();
               }
            }
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method moveSelectedLoopDown() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         lazySelectFirstZoneOnly();
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            int loopIdx = tm_loops.getCursorIndex();
            if(-1 != loopIdx)
            {
               if(loopIdx < (s.numSampleLoops - 1))
               {
                  IntArray loops <= s.getOrCreateSampleLoops();

                  loops.swap(3*loopIdx+0,  3*(loopIdx+1) + 0);  // off
                  loops.swap(3*loopIdx+1,  3*(loopIdx+1) + 1);  // len
                  loops.swap(3*loopIdx+2,  3*(loopIdx+1) + 2);  // rep

                  if(loopIdx == s.noteOffLoopIndex)
                  {
                     s.noteOffLoopIndex = s.noteOffLoopIndex + 1;
                     fp_zone_noteoff_loop_idx.setValue(s.noteOffLoopIndex + 1);
                  }

                  tv_loops.tableModelChanged();
                  tv_loops.moveCursorToNextRow();

                  Global.Print("Move loop down");
                  sample.markParamsAsModified();
                  updateSampleViewMarkers();
               }
            }
         }
      }
   }

   // <method.png>
   protected method copyLoopToClipboard() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            IntArray loops <= s.getSampleLoops();
            if(loops.numElements > 0)
            {
               int loopIdx = tm_loops.getCursorIndex();
               if(-1 != loopIdx)
               {
                  if(loopIdx < s.numSampleLoops)
                  {
                     loop_clipboard_start = loops.get(loopIdx*3 + 0);
                     loop_clipboard_len   = loops.get(loopIdx*3 + 1);
                     loop_clipboard_rep   = loops.get(loopIdx*3 + 2);

                     Global.Print("Copy Loop "+(loopIdx+1)+" to Clipboard");
                  }
               }
            }
         }
      }
   }

   // <method.png>
   protected =replay= method pasteNewLoopFromClipboard() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            if(0 != loop_clipboard_len)
            {
               IntArray loops <= s.getOrCreateSampleLoops();
               int loopIdx = tm_loops.getCursorIndex();
               if(-1 == loopIdx)
               {
                  loops.add(loop_clipboard_start);
                  loops.add(loop_clipboard_len);
                  loops.add(loop_clipboard_rep);
               }
               else
               {
                  loopIdx++;
                  loops.insert(loopIdx*3 + 0, loop_clipboard_start);
                  loops.insert(loopIdx*3 + 1, loop_clipboard_len);
                  loops.insert(loopIdx*3 + 2, loop_clipboard_rep);
               }
               s.verifySampleAreas();
               tv_loops.tableModelChanged();
               if(-1 == loopIdx)
                  tv_loops.moveCursorToLastRow();
               else
                  tv_loops.moveCursorToNextRow();
               Global.Print("Paste New Loop from Clipboard");
               updateSampleViewMarkers();
            }
         }
      }
   }

   // <method.png>
   protected =replay= method alignLoopEnds() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            IntArray loops <= s.getSampleLoops();
            if(loops.numElements > 0)
            {
               int minLoopEnd = sample.waveform.getNumFrames();
               int k;

               for(k = 0; k < loops.numElements; k += 3)
               {
                  int loopEnd = (loops[k+0] + loops[k + 1]);
                  if(loopEnd < minLoopEnd)
                     minLoopEnd = loopEnd;
               }

               for(k = 0; k < loops.numElements; k += 3)
               {
                  loops[k+1] = minLoopEnd - loops[k+0];
               }

               sv_wave.setHighlight(s.firstLoopOffset, s.firstLoopOffset+s.firstLoopLen);
               sv_wave.redraw();
               tv_loops.tableModelChanged();
               sample.markParamsAsModified();
               updateSampleViewMarkers();

               Global.Print("Align loop ends to "+loopEnd);
            } // if loops
         } // if zone
      } // if sample
   }

   // <method.png>
   protected =replay= method loopsSpreadFirst() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            IntArray loops <= s.getSampleLoops();
            if(loops.numElements >= (2*3))
            {
               int firstOff = loops[0];
               int firstLen = loops[1];

               int numLoops = loops.numElements / 3;
               numLoops--;

               // set all loops to same length
               int len = loops[3*1 + 1];
               if(len >= firstLen)
                  len = firstLen / (numLoops+1);

               float step = (firstLen-len) / float(numLoops);
               float cur = firstOff;
               int loopIdx = 1*3;
               loop(numLoops)
               {
                  loops[loopIdx + 0] = cur;
                  loops[loopIdx + 1] = len;
                  cur += step;
                  loopIdx += 3;
               }

               s.verifySampleAreas();

               sv_wave.redraw();
               tv_loops.tableModelChanged();
               sample.markParamsAsModified();
               updateSampleViewMarkers();

               Global.Print("Spread loop offsets 2.."+(2+numLoops)+" (step="+int(step)+")");
            } // if loops
         } // if zone
      } // if sample
   }

   // <ui_show.png>
   protected method showLoopsContextMenu(boolean _bFocusFirst) {

      pm_loops <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_loops;

      pmb <= pm.addDefaultButton("Copy Loop to Clipboard",
                                 "loops_copy"
                                 );

      pmb <= pm.addDefaultButton("Paste new Loop from Clipboard",
                                 "loops_paste"
                                 );
      pmb.setActive(0 != loop_clipboard_len);

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Spread offsets 2..n along first loop area",
                                 "loops_spread_first"
                                 );

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Align loop ends to min",
                                 "loops_align_ends"
                                 );

      pm.resizeToMinimum();
      pm.showNearMouse(-10, -10);
      if(_bFocusFirst)
         pm.focusNextMenuItem();

      Global.Print("Show loops context menu.");
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSStaticCycleLenEnableChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            boolean bEnable = cb_zone_ts_staticcyclelen.isSelected();
            foreach s in zones
               s.enableStaticCyclelen = bEnable;
            Global.Print("WT Static CycleLen is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSEnableChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            boolean bEnable = cb_zone_ts.isSelected();
            foreach s in zones
               s.enableTimestretch = bEnable;
            Global.Print("WT Timestretch is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSXFadeEnableChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            boolean bEnable = cb_zone_ts_xfade.isSelected();
            foreach s in zones
               s.enableTimestretchXFade = bEnable;
            Global.Print("WT Timestretch XFade is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSAbsEnableChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            boolean bEnable = cb_zone_ts_abs.isSelected();
            foreach s in zones
               s.enableAbsoluteTimestretch = bEnable;
            if(s.enableTimestretchAdditive)
               Global.Print("WT Additive X-Fade Cycle Reset is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            else
               Global.Print("WT Absolute Timestretch is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSAdditiveEnableChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            boolean bEnable = cb_zone_ts_additive.isSelected();
            foreach s in zones
               s.enableTimestretchAdditive = bEnable;
            Global.Print("WT Resynthesis Timestretch is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
            sample.analyzeAndUpdatePartials();
            showZoneAdditive();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSWinChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         int numBits = 5/*9*/ + cm_zone_ts_win.getSelectedOption();
         sample.setPartialWindowBits(numBits);
         Global.Print("WT Additive Resynthesis Window Size is "+(1 << numBits));
         sample.markParamsAsModified();
         ta_update_partials.reschedule();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSAdditiveWinChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         boolean bEnable = cb_zone_ts_additive_win.isSelected();
         sample.setEnablePartialCosWin(bEnable);
         Global.Print("WT Additive Cosine Window is "+Utils.GetEnableString(bEnable));
         sample.markParamsAsModified();
         sample.analyzeAndUpdatePartials();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSTrueFreqChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         boolean bEnable = cb_zone_ts_additive_true_freq.isSelected();
         sample.setEnablePartialTrueFreq(bEnable);
         Global.Print("WT Additive True Bin Frequencies are "+Utils.GetEnableString(bEnable));
         sample.markParamsAsModified();
         sample.analyzeAndUpdatePartials();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSCycleLenResetChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            float f = fp_zone_ts_cyclelen_reset.getFloatValue();
            foreach s in zones
               s.partialCycleLenReset = f;
         }
         Global.Print("WT Additive Partial CycleLen Reset is "+f);
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSPartialPhase0Changed() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            boolean bEnable = cb_zone_ts_phase_0.isSelected();
            foreach s in zones
               s.enablePartialPhase0 = bEnable;
         }
         Global.Print("WT Additive Partial Start Phase is "+(bEnable?"0":"actual phase"));
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSNumPartialsChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            float numPartials = fp_zone_ts_numpartials.getFloatValue();
            foreach s in zones
               s.setNumPartials(numPartials);
         }
         Global.Print("Additive num partials is "+numPartials);
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSExport() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            if(s.enableTimestretchAdditive)
            {
               StWaveform wf <= sample.waveform;
               float origCycleLen = (s.partialCycleLenReset > 0) ? s.partialCycleLenReset : s.timestretchGranularity;
               // int outCycleLen = 2048;
               int outCycleLen = STConfig.page_sample_additive_wt_export_cycle_len;
               float rateFactor = origCycleLen / outCycleLen;
               if(outCycleLen < 64)
               {
                  outCycleLen = origCycleLen;
                  rateFactor = 1.0f;
               }
               trace "[dbg] PageSample::handleZoneTSExport: origCycleLen="+origCycleLen+" outCycleLen="+outCycleLen+" rateFactor="+rateFactor;
               if(outCycleLen >= 64)
               {
                  // int numWaves = mathMini(wf.numFrames / outCycleLen, wf.numFrames / s.timestretchGranularity);
                  int numWaves = wf.numFrames / origCycleLen;
                  numWaves = mathMini(numWaves, 256);
                  int numCh = (s.additiveStereoSpread > 0 && s.getVoiceCalibrationEnable(1/*pan*/)) ? 2 : 1;
                  FloatArray smpDat <= SampleView.AllocClipboard(numWaves * outCycleLen, numCh);
                  s.exportAdditiveWavetable(smpDat, numCh, outCycleLen, rateFactor, numWaves);
                  smpDat.scale(smpDat, 1.0 / smpDat.absMax);  // normalize
                  Global.Print("Export WT to clipboard. cycleLen="+outCycleLen+" #waves="+numWaves+" #ch="+numCh);
               }
               else
               {
                  Global.Print("Export WT: cycleLen too short (<32)");
               }
            }
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSStereoSpreadChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            float f = fp_zone_ts_stereo_spread.getFloatValue();
            foreach s in zones
               s.additiveStereoSpread = f;
         }
         local Float fo = f * 100;
         Global.Print("Additive stereo spread is "+fo.printf("%3.2f")+"%");
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSOscEditCfgChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         float f = fp_zone_ts_osc_edit_cfg.getFloatValue() - 1.0f;
         if(zones.numElements > 0)
         {
            StSample *s;
            foreach s in zones
            {
               s.additiveEditCfg = f;
               s.recalcAdditiveTbl(999999/*update mix only*/);
            }
         }
         local Float fo = frac(f) * 100;
         Global.Print("Additive oscillator config is "+int(f+1)+" (blend "+fo.printf("%3.2f")+"%) (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
         showZoneAdditive();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSOscForceEditCfgChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         boolean bEnable = cb_zone_ts_osc_force_edit_cfg.isSelected();
         if(zones.numElements > 0)
         {
            StSample *s;
            foreach s in zones
               s.enableForceAdditiveEditCfg = bEnable;
         }
         Global.Print("Use Additive oscillator config from "+(bEnable?"EDITOR":"MODMATRIX")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         sample.markParamsAsModified();
         showZoneAdditive();
      }
   }

   // <ui_handle.png>
   protected method handleZoneTSOscCfgCopy() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            if(null == ts_osc_clipboard)
               ts_osc_clipboard <= new StSample;
            Samples.CopySampleAdditiveOscConfig(ts_osc_clipboard, 0, s, s.additiveEditCfg);

            Global.Print("Copy Additive osc config "+(int(s.additiveEditCfg)+1)+" to clipboard");
         }
      }
   }

   // <ui_handle.png>
   protected method handleZoneTSOscCfgPaste() {
      if(null != ts_osc_clipboard)
      {
         Sample sample <= getSelectedSample();
         if(null != sample)
         {
            local PointerArray zones <= getSelectedZones();
            if(zones.numElements > 0)
            {
               StSample *s;
               foreach s in zones
               {
                  int cfgIdx = s.additiveEditCfg;
                  Samples.CopySampleAdditiveOscConfig(s, cfgIdx, ts_osc_clipboard, 0);
                  s.recalcAdditiveTbl(cfgIdx);
               }
            }
            Global.Print("Paste Additive osc config from clipboard");
            sample.markParamsAsModified();
            showZoneAdditive();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSOscLevelChanged(int _oscIdx, float _f) {
      float f = _f / 127.0;
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            foreach s in zones
            {
               int cfgIdx = s.additiveEditCfg;
               s.setAdditiveCfgValid(cfgIdx, true);
               s.setAdditiveLevel(cfgIdx, _oscIdx, f);
               s.recalcAdditiveTbl(cfgIdx);
            }
         }
         Global.Print("Additive "+additive_osc_names[_oscIdx]+" oscillator level is "+_f);
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSOscPhaseChanged(int _oscIdx, float _f) {
      float f = _f / 128.0f;
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            foreach s in zones
            {
               int cfgIdx = s.additiveEditCfg;
               s.setAdditiveCfgValid(cfgIdx, true);
               s.setAdditivePhase(cfgIdx, _oscIdx, f);
               s.recalcAdditiveTbl(cfgIdx);
            }
         }
         Global.Print("Additive "+additive_osc_names[_oscIdx]+" oscillator phase is "+_f);
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSOscExpAChanged(int _oscIdx, float _f) {
      float f = _f / 128.0f;
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            foreach s in zones
            {
               int cfgIdx = s.additiveEditCfg;
               s.setAdditiveCfgValid(cfgIdx, true);
               s.setAdditiveExpA(cfgIdx, _oscIdx, f);
               s.recalcAdditiveTbl(cfgIdx);
            }
         }
         Global.Print("Additive "+additive_osc_names[_oscIdx]+" oscillator width is "+_f);
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSOscFltChanged(int _oscIdx, float _f) {
      float f = _f / 127.0f;
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            foreach s in zones
            {
               int cfgIdx = s.additiveEditCfg;
               s.setAdditiveCfgValid(cfgIdx, true);
               s.setAdditiveFilter(cfgIdx, _oscIdx, f);
               s.recalcAdditiveTbl(cfgIdx);
            }
         }
         Global.Print("Additive "+additive_osc_names[_oscIdx]+" oscillator filter cutoff is "+_f);
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSOscExpLChanged(int _oscIdx, float _f) {
      float f = _f / 128.0f;
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            foreach s in zones
            {
               int cfgIdx = s.additiveEditCfg;
               s.setAdditiveCfgValid(cfgIdx, true);
               s.setAdditiveExpL(cfgIdx, _oscIdx, f);
               s.recalcAdditiveTbl(cfgIdx);
            }
         }
         Global.Print("Additive "+additive_osc_names[_oscIdx]+" oscillator exponent is "+_f);
         sample.markParamsAsModified();
      }
   }



   // <ui_handle.png>
   protected =replay= method handleZoneTSOscNormalizeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         boolean bEnable = cb_zone_ts_osc_normalize.isSelected();
         foreach s in zones
         {
            int cfgIdx = s.additiveEditCfg;
            s.setAdditiveCfgValid(cfgIdx, true);
            s.setAdditiveNormalize(cfgIdx, bEnable);
            s.recalcAdditiveTbl(cfgIdx);
         }
         Global.Print("Additive normalization is "+Utils.GetEnableString(bEnable)+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSOscSRRChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int srr = cm_zone_ts_osc_srr.getSelectedOption();
         boolean bFirst = true;
         foreach s in zones
         {
            int cfgIdx = s.additiveEditCfg;
            s.setAdditiveCfgValid(cfgIdx, true);
            s.setAdditiveRateReduction(cfgIdx, srr);
            s.recalcAdditiveTbl(cfgIdx);

            if(bFirst)
            {
               bFirst = false;
               fp_zone_ts_osc_srr_mask.setValue(s.getAdditiveRateReductionMask(cfgIdx));
               fp_zone_ts_osc_srr_mask.redraw();
            }
         }
         Global.Print("Additive rate reduction is \""+cm_zone_ts_osc_srr.getSelectedOptionName()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSOscSRRMaskChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         Integer srrMask = fp_zone_ts_osc_srr_mask.getFloatValue();
         int srrBits = (srrMask>0) ? int(log2(srrMask+1)) : 0;
         foreach s in zones
         {
            int cfgIdx = s.additiveEditCfg;
            s.setAdditiveCfgValid(cfgIdx, true);
            s.setAdditiveRateReduction(cfgIdx, srrBits);
            s.setAdditiveRateReductionMask(cfgIdx, srrMask);
            s.recalcAdditiveTbl(cfgIdx);
         }
         cm_zone_ts_osc_srr.setSelectedOption(srrBits);
         Global.Print("Additive rate reduction mask is \""+fp_zone_ts_osc_srr_mask.getDisplayedText()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSOscBRPreAmpChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         float amp = fp_zone_ts_osc_br_preamp.getFloatValue();
         foreach s in zones
         {
            int cfgIdx = s.additiveEditCfg;
            s.setAdditiveCfgValid(cfgIdx, true);
            s.setAdditiveBitReductionPreAmp(cfgIdx, amp);
            s.recalcAdditiveTbl(cfgIdx);
         }
         Global.Print("Additive bit reduction pre-amp is \""+amp+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSOscBRChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         int br = cm_zone_ts_osc_br.getSelectedOption();
         boolean bFirst = true;
         foreach s in zones
         {
            int cfgIdx = s.additiveEditCfg;
            s.setAdditiveCfgValid(cfgIdx, true);
            s.setAdditiveBitReduction(cfgIdx, br);
            s.recalcAdditiveTbl(cfgIdx);

            if(bFirst)
            {
               bFirst = false;
               fp_zone_ts_osc_br_mask.setValue(s.getAdditiveBitReductionMask(cfgIdx));
               fp_zone_ts_osc_br_mask.redraw();
            }
         }
         Global.Print("Additive bit reduction is \""+cm_zone_ts_osc_br.getSelectedOptionName()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSOscBRMaskChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         StSample *s;
         Integer brMask = fp_zone_ts_osc_br_mask.getFloatValue();
         int brBits = (brMask>0) ? int(log2(brMask+1)) : 0;
         foreach s in zones
         {
            int cfgIdx = s.additiveEditCfg;
            s.setAdditiveCfgValid(cfgIdx, true);
            s.setAdditiveBitReduction(cfgIdx, brBits);
            s.setAdditiveBitReductionMask(cfgIdx, brMask);
            s.recalcAdditiveTbl(cfgIdx);
         }
         cm_zone_ts_osc_br.setSelectedOption(brBits);
         Global.Print("Additive bit reduction mask is \""+fp_zone_ts_osc_br_mask.getDisplayedText()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
         tv_zones.tableModelChanged();
         sample.markParamsAsModified();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            float ts = fp_zone_ts.getFloatValue();
            foreach s in zones
               s.timestretch = ts;
            Global.Print("WT Timestretch is "+ts+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSGranularityFindFromRootKey(boolean _bDouble) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         float sampleRate = sample.getWaveformSampleRate();
         int numFrames = sample.getWaveformNumFrames();
         int minOffset = numFrames * 0.1;
         numFrames -= minOffset;
         float prefilterCutOff = 1.0 / 32;
         Float rootHz;
         float rootKey = sample.findRootKeyForArea(minOffset,
                                                   numFrames,
                                                   prefilterCutOff,
                                                   sampleRate,//// * s.sampleRateRatio,
                                                   false/*bQuiet*/,
                                                   null/*retMagnitudesOrNull*/,
                                                   null/*retMagnitudesSortIndicesOrNull*/,
                                                   rootHz/*retFreqHzOrNull*/
                                                   );
         if(rootKey >= 0)
         {
            float cycleLen = sampleRate / rootHz;
            Global.Debug("PageSample::handleZoneTSGranularityFindFromRootKey: rootKey="+rootKey+" rootHz="+rootHz+" cycleLen="+cycleLen);
            if(_bDouble)
               cycleLen *= 2.0f;
            fp_zone_ts_granularity.setValue(int(cycleLen));
            fp_zone_ts_cyclelen_reset.setValue(cycleLen);
            fp_zone_ts_granularity_fine.setValue(frac(cycleLen));
            handleZoneTSCycleLenResetChanged(); // copy to selected zones
            handleZoneTSGranularityChanged(false/*bAnalyzePartials*/); // copy to selected zones
            handleZoneTSGranularityFineChanged(); // copy to selected zones and re-analyze partials
            Global.Print("Find root: note="+Audio.FracNoteToString(rootKey)+" f="+rootHz.printf("%4.2f")+"Hz cycleLen="+(int(1000*cycleLen)/1000.0));
         }
      }

   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSGranularityChanged(boolean _bAnalyzePartials) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            int gran = fp_zone_ts_granularity.getFloatValue();
            float cl = 0;
            foreach s in zones
            {
               cl = gran + frac(s.timestretchGranularity);
               s.timestretchGranularity = cl;
            }
            int numWaves = sample.waveform.getNumFrames() / gran;
            Global.Print("WT Cyclelen is "+cl+" ("+numWaves+" wave"+Utils.GetPluralString(numWaves)+") (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
            if(_bAnalyzePartials && sample.requiresResynthesis())
            {
               ta_update_partials.reschedule();
            }
            fp_zone_ts_cyclelen_reset.setResetValue(cl);
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSGranularityFineChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            float granFine = fp_zone_ts_granularity_fine.getFloatValue();
            float cl = 0;
            foreach s in zones
            {
               cl = int(s.timestretchGranularity) + granFine;
               s.timestretchGranularity = cl;
            }
            Global.Print("WT Cyclelen is "+cl+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
            if(sample.requiresResynthesis())
            {
               ta_update_partials.reschedule();
            }
            fp_zone_ts_cyclelen_reset.setResetValue(cl);
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSAdditiveXFadeChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            Float amt = fp_zone_ts_additive_xfade.getFloatValue();
            foreach s in zones
            {
               s.timestretchAdditiveXFade = amt;
            }
            amt *= 100;
            Global.Print("Additive Cycle-XFade amount is "+amt.printf("%3.2f")+"% (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
            if(sample.requiresResynthesis())
            {
               ta_update_partials.reschedule();
            }
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSGranularityAmtChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            local Float amt = fp_zone_ts_granularity_amt.getFloatValue();
            foreach s in zones
               s.timestretchGranularityAmount = amt;
            amt *= 100;
            Global.Print("WT Timestretch Granularity Amount is "+amt.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTS2DWidthChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            int w = fp_zone_ts_2d_w.getFloatValue();
            foreach s in zones
               s.timestretch2DWidth = w;
            Global.Print("WT Timestretch 2D Width is "+w+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTS2DHeightChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            int h = fp_zone_ts_2d_h.getFloatValue();
            foreach s in zones
               s.timestretch2DHeight = h;
            Global.Print("WT Timestretch 2D Height is "+h+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSPhaseRandAmtChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            Float amt = fp_zone_ts_phase_rand_amt.getFloatValue();
            foreach s in zones
               s.timestretchStartPhaseRandAmount = amt;
            amt *= 100;
            Global.Print("WT Timestretch Phase Randomization Amount is "+amt.printf("%3.2f")+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSIPolChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            int ipol = cm_zone_ts_ipol.getSelectedOption();
            foreach s in zones
               s.timestretchInterpolType = ipol;
            Global.Print("WT Timestretch Interpolation Type is \""+cm_zone_ts_ipol.getSelectedOptionName()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSBendChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            float bend = fp_zone_ts_bend.getFloatValue();
            foreach s in zones
               s.timestretchBend = bend;
            Global.Print("WT Timestretch Phase Bend is "+bend+" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSGrainWindowChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements > 0)
         {
            StSample *s;
            int ipol = cm_zone_ts_grain.getSelectedOption();
            foreach s in zones
               s.timestretchGrainWindowType = ipol;
            Global.Print("WT Timestretch Grain Volume Window Type is \""+cm_zone_ts_grain.getSelectedOptionName()+"\" (update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements)+")");
            sample.markParamsAsModified();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSPartialWExpChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         float f = fp_zone_ts_additive_wexp.getFloatValue();
         sample.partial_speed_exp = f;
         Global.Print("WT Additive Angle Speed Exponent is "+f);
         sample.markParamsAsModified();
         ta_update_partials.reschedule();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSPartialBExpChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         float f = fp_zone_ts_additive_bexp.getFloatValue();
         sample.partial_bin_exp = f;
         Global.Print("WT Additive Bin Speed Exponent is "+f);
         sample.markParamsAsModified();
         ta_update_partials.reschedule();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSPartialMExpChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         float f = fp_zone_ts_additive_mexp.getFloatValue();
         sample.partial_mag_exp = f;
         Global.Print("WT Additive Magnitude Exponent is "+f);
         sample.markParamsAsModified();
         ta_update_partials.reschedule();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneTSPartialMBExpChanged() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         float f = fp_zone_ts_additive_mbexp.getFloatValue();
         sample.partial_mag_bin_exp = f;
         Global.Print("WT Additive Magnitude Bin Exponent is "+f);
         sample.markParamsAsModified();
         ta_update_partials.reschedule();
      }
   }

   // <ui_page.png>
   public virtual pageHandleAutoFocusKey(Key _k) : boolean {
      if(STConfig.b_autofind_sample && (0 != _k.unicode))
      {
         if(0 == _k.mod)
         {
            if(@(UI.GetKeyboardFocus()) != @(tf_filter))
            {
               if(UI.IsAutoFocusKey(_k))
               {
                  pre_filter_sample_idx = last_selected_sample_idx;
                  UI.SetKeyboardFocus(tf_filter);
                  tf_filter.selectAll();
               }
               else
               {
                  return false;
               }
            }
            tf_filter.onKey(_k);
            return true;
         }
      }
      return false;
   }

   // <ui_handle.png>
   protected method cancelSampleFilter() {
      tf_filter.stopEditing(false/*bProvideAction*/, true/*bReturnKey*/, true/*bQuiet*/);
      tf_filter.setText("");
      updateSampleTable(null/*reselectSample*/);
      moveCursorToSampleIdxNoAction(pre_filter_sample_idx);
      UI.SetKeyboardFocus(tv_samples);
   }

   // <method.png>
   public method freePreviewSample() {
      // called before adding multiple samples from SampleBrowserDialog
      if(null != preview_sample)
      {
         Audio.ResetAllTempSamples();
         Audio.ResetAllSampleVoices(preview_sample);
         current_project.deleteSample(preview_sample);
         preview_sample <= null;
         last_previewed_sample_path.empty();
      }
   }

   // <method.png>
   public method handleSampleDialogLoad(String _pathName, boolean _bPreview, boolean _bRefocus) {
      boolean bCreateSample =
         (!_bPreview && (b_load_create && (null == preview_sample))) ||
         (_bPreview && (null == preview_sample))
         ;

      boolean bLoaded = false;

      if(!_bPreview)
      {
         if(null != replace_sample)
            tm_samples.moveCursorToSampleNoAction(replace_sample);

         bLoaded = (b_load_create && (last_previewed_sample_path == _pathName));
      }
      else
      {
         bLoaded = (last_previewed_sample_path == _pathName);
      }

      if(!bLoaded)
      {
         if(loadSample2(_pathName, STConfig.sample_rootpath, false/*bProject*/, bCreateSample))
         {
            Audio.ResetUnderrunProtection();
            Sample newSmp <= getSelectedSample();
            if(null == replace_sample)
               newSmp.setPrgId(-1);
            if(_bPreview)
            {
               preview_sample <= newSmp;
               last_previewed_sample_path = _pathName;
               preview_sample.b_preview = true;
               Global.Debug("sample loaded, preview_sample="+#(preview_sample));
            }
            else if(!b_load_create)
            {
               // trace "xxx preview_sample="+#(preview_sample)+" replace_sample="+#(replace_sample);

               // Restore program change and namespace assignments
               replace_sample.setPrgId(replace_sample_prg_id);
               replace_sample.setNamespaceIdx(replace_sample_nsp);
               // // trace "xxx restore replace_sample_nsp="+replace_sample_nsp+" name="+replace_sample.unique_name;

               if(null != preview_sample)
               {
                  // Delete preview sample
                  Audio.ResetAllTempSamples();
                  Audio.ResetAllSampleVoices(preview_sample);
                  current_project.deleteSample(preview_sample);
                  preview_sample <= null;
                  last_previewed_sample_path.empty();
                  updateSampleTable(null/*reselectSample*/);
               }

            }

            handleSelectSample(true/*bStopAudio*/);
            if(!_bPreview)
            {
               if(_bRefocus)
                  pageFocusDefault();
               preview_sample <= null;
            }
         }
         else
         {
            // Failed to load sample
            trace "[~~~] PageSample::handleSampleDialogLoad: failed to load ESA sample, replace_sample="+#(replace_sample);

            if(null != preview_sample)
            {
               // Delete preview (or target) sample
               Audio.ResetAllTempSamples();
               Audio.ResetAllSampleVoices(preview_sample);
               current_project.deleteSample(preview_sample);
               preview_sample <= null;
               last_previewed_sample_path.empty();
               updateSampleTable(null/*reselectSample*/);
            }

            if(null != replace_sample)
            {
               tv_samples.moveCursorToRowNoAction(current_project.getSampleIdx(replace_sample));
               tv_samples.makeCursorRowVisible();
               tv_samples.autoScrollAhead(2/*numRows*/);
            }

            handleSelectSample(true/*bStopAudio*/);

            if(!_bPreview && _bRefocus)
               pageFocusDefault();
         }
      }
      else
      {
         // Already loaded during (last) preview
         if(!_bPreview)
         {
            preview_sample.b_preview = false;
            if(_bRefocus)
               pageFocusDefault();
            preview_sample <= null;
            tv_samples.redraw();
         }
      }
   }

   // <method.png>
   public method handleSampleDialogLoadCancel() {
      Global.Debug("PageSample: sample file dialog was canceled, preview_sample="+#(preview_sample));

      if(null != preview_sample)
      {
         Audio.ResetAllTempSamples();
         Audio.ResetAllSampleVoices(preview_sample);
         current_project.deleteSample(preview_sample);
         preview_sample <= null;
         updateSampleTable(null/*reselectSample*/);
         handleSelectSample(true/*bStopAudio*/);
      }

      if(null != replace_sample)
      {
         tv_samples.moveCursorToRowNoAction(current_project.getSampleIdx(replace_sample));
         tv_samples.makeCursorRowVisible();
         tv_samples.autoScrollAhead(2/*numRows*/);
         replace_sample <= null;
         handleSelectSample(true/*bStopAudio*/);
      }

      UI.SetKeyboardFocus(tv_samples);
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdCreateZoneGrid(int _num, int _sz) {
      if(1 <= _num <= 128)
      {
         if(_sz >= 16)
         {
            Sample sample <= getSelectedSample();
            if(null != sample)
            {
               int reqNumFrames = _num * _sz;
               if(reqNumFrames <= (sample.waveform.getNumFrames()))
               {
                  int off = 0;
                  loop(_num)
                  {
                     StSample s <= sample.newZone();
                     IntArray loopDat <= s.getOrCreateSampleLoops();
                     loopDat.add(off);
                     loopDat.add(_sz);
                     loopDat.add(1);
                     off += _sz;
                  }
                  Global.Print("Create "+_num+" zone"+Utils.GetPluralString(_num)+" (grid size="+_sz+" frames)");
                  tv_zones.tableModelChanged();
                  tv_zones.redraw();
                  selectAllZones();
               }
               else
               {
                  Global.Print("Waveform too short (need "+_num+"*"+_sz+"="+reqNumFrames+" frames, delta="+((sample.waveform.getNumFrames())-reqNumFrames)+")");
               }
            }
         }
         else
            Global.Error("Invalid size="+_sz);
      }
      else
         Global.Error("Invalid num="+_num);
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdRemoveAllZones() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         tv_zones.tableModelChanged();
         sample.removeAllZones();
         Global.Print("Remove all zones");
      }
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdResizeWaveform(int _numFrames, int _times) : boolean {
      if(_numFrames > 0)
      {
         if(_times > 0)
         {
            Sample sample <= getSelectedSample();
            if(null != sample)
            {
               int numFrames = _numFrames * _times;
               if(numFrames <= STConfig.max_waveform_size)
               {
                  StWaveform wf <= sample.waveform;
                  FloatArray smpDat <= wf.sampleData;
                  int oldLen =  smpDat.numElements;
                  smpDat.realloc(numFrames * wf.numChannels);
                  smpDat.useAll();
                  if(smpDat.numElements > oldLen)
                  {
                     Global.Debug("handlePageCmdResizeWaveform: fill off="+oldLen+" len="+(smpDat.numElements - oldLen));
                     smpDat.fillRegion(oldLen, smpDat.numElements - oldLen, 0.0f);
                  }
                  sample.verifyAllSampleAreas();
                  sample.markWaveformAsModified();

                  sv_wave.showAll();
                  tv_zones.tableModelChanged();
                  tv_loops.tableModelChanged();
                  Global.Print("Resize waveform to "+_numFrames+"*"+_times+"="+numFrames+" frame"+Utils.GetPluralString(numFrames));
                  return true;
               }
               else
                  Global.Error("Waveform totalNumFrames="+numFrames+" exceeds "+(STConfig.max_waveform_size / 1000)+"k frames");
            }
         }
         else
            Global.Error("Invalid times="+_times);
      }
      else
         Global.Error("Invalid numFrames="+_numFrames);
      return false;
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdResize16th(int _num16th, int _times) : boolean {
      if(_num16th > 0)
      {
         float ms = ( (1000 * 60 * 0.25) * _num16th ) / current_project.bpm;

         Sample sample <= getSelectedSample();
         if(null != sample)
         {
            StWaveform wf <= sample.waveform;
            int numFrames = (ms * wf.sampleRate) / 1000;
            if(handlePageCmdResizeWaveform(numFrames, _times))
            {
               if(0 == sample.getNumZones())
               {
                  // lazy-create first zone + loop
                  StSample s <= sample.newZone();
                  IntArray loops <= s.getOrCreateSampleLoops();
                  loops.add(0);
                  loops.add(numFrames);
                  loops.add(1);

                  tv_zones.tableModelChanged();
                  tv_zones.moveCursorToLastRow();

                  handleSelectZone(true/*bStopAudio*/);

                  sample.markParamsAsModified();
               }
            }
            return false;
         }
      }
      else
         Global.Error("Invalid num16th="+_num16th);
      return false;
   }

   // <ui_cmd.png>
   protected method handlePageCmdSelectPct(float _off, float _len) {
      _off = mathClampf(_off/100.0, 0.0f, 1.0f);
      _len = mathClampf(_len/100.0, 0.0f, 1.0f);
      if((_off + _len) > 1.0f)
         _len = 1.0 - _off;
      int numFrames = sv_wave.getNumFrames();
      int startOff = numFrames * _off;
      numFrames = numFrames * _len;
      Global.Debug("select_pct: off="+startOff+" len="+numFrames);
      sv_wave.setSelection(startOff, startOff + numFrames);
      sv_wave.redraw();
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdCrossfadeLoops8192() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         local PointerArray selectedZones <= getSelectedZones();
         StSample *zone;
         int numUpdated = 0;
         foreach zone in selectedZones
         {
            IntArray loops <= zone.getOrCreateSampleLoops();
            if(loops.numElements == (1*3))
            {
               int off = loops[0*3 + 0];
               int len = loops[0*3 + 1];

               if(len >= 8192)
               {
                  loops.insert(0, (off+len) - 8192); // off
                  loops.insert(1, 8192);             // len
                  loops.insert(2, 0);                // rep=inf

                  zone.playMode = STSAMPLE_PLAY_MODE_XFADE_8192;
                  zone.enableFromStart = maybe;

                  numUpdated++;
               }
            }
         }
         Global.Print("insert_crossfade_loops_8192: update "+numUpdated+" zone"+Utils.GetPluralString(numUpdated));

         if(numUpdated > 0)
            handleSelectZone(true/*bStopAudio*/);
      }
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdNormalizeRegions(int _fadeNumFrames) {
      sv_wave.normalizeRegions(_fadeNumFrames);
      sv_wave.lazyAutoChopRegionsForced();
      int numRegions = sv_wave.getNumRegions();
      Global.Print("Normalize "+numRegions+" region"+Utils.GetPluralString(numRegions)+" (#fade="+_fadeNumFrames+")");
      updateSampleViewMarkers();
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdFadeRegions(int _fadeInNumFrames, int _fadeOutNumFrames) {
      sv_wave.fadeRegions(_fadeInNumFrames, _fadeOutNumFrames);
      sv_wave.lazyAutoChopRegionsForced();
      int numRegions = sv_wave.getNumRegions();
      Global.Print("Fade/Declick "+numRegions+" region"+Utils.GetPluralString(numRegions));
      updateSampleViewMarkers();
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdSnapSelectedZonesFirstLoopStartToZeroCrossing(int _maxFramesDist) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         handleSelectZone(true/*bStopAudio*/);

         int numUpdated = 0;
         StWaveform wf <= sample.waveform;
         FloatArray smpDat <= wf.sampleData;
         local PointerArray selectedZones <= getSelectedZones();
         StSample *s;
         foreach s in selectedZones
         {
            int smpOff = s.firstLoopOffset;
            int smpLen = s.firstLoopLen;
            if(smpLen > 0)
            {
               int loopStartBwd = tksampleedit_find_edge_near_bwd(smpDat, 0/*chOff*/, wf.numChannels, smpOff, true/*bRise*/, true/*bFall*/, 0.0001f/*distThreshold*/) - 1;
               int newLoopStart = -1;
               if( (loopStartBwd >= 0) && (abs(loopStartBwd - smpOff) <= _maxFramesDist) )
               {
                  newLoopStart = loopStartBwd;
               }

               int loopStartFwd = tksampleedit_find_edge_near_fwd(smpDat, 0/*chOff*/, wf.numChannels, (loopStartBwd >= 0) ? loopStartBwd : smpOff, true/*bRise*/, true/*bFall*/, 0.0001f/*distThreshold*/) - 1;
               if( (loopStartFwd >= 0) && (abs(loopStartFwd - smpOff) <= _maxFramesDist) )
               {
                  if(loopStartFwd < (smpOff + smpLen))
                  {
                     if(-1 == newLoopStart || ((loopStartFwd - smpOff) < (smpOff - newLoopStart)))
                        newLoopStart = loopStartFwd;
                  }
               }

               if(newLoopStart >= 0)
               {
                  s.firstLoopOffset = newLoopStart;
                  s.firstLoopLen    = smpLen - (newLoopStart - smpOff);
                  s.verifySampleAreas();
                  numUpdated++;
               }
            }
         }

         Global.Print("Snap LpSs to ZCs (update "+numUpdated+" loop"+Utils.GetPluralString(numUpdated)+")");
         updateSampleViewMarkers();
         sample.markParamsAsModified();
         handleSelectZone(true/*bStopAudio*/);
      }
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdSnapSelectedZonesFirstLoopEndToZeroCrossing() {
      // (note) keep snapped position within previous loop region
      //         (prevent selection of subsequent zone's area, e.g. next transient)
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         handleSelectZone(true/*bStopAudio*/);

         int numUpdated = 0;
         StWaveform wf <= sample.waveform;
         FloatArray smpDat <= wf.sampleData;
         local PointerArray selectedZones <= getSelectedZones();
         StSample *s;
         foreach s in selectedZones
         {
            int smpOff = s.firstLoopOffset;
            int smpLen = s.firstLoopLen;
            if(smpLen > 0)
            {
               int loopEnd = smpOff + smpLen;
               // // loopEnd = tksampleedit_find_zerocrossing_near(smpDat, 0/*chOff*/, wf.numChannels, loopEnd, 0.0001f/*distThreshold*/);
               int loopEndBwd = tksampleedit_find_edge_near_bwd(smpDat, 0/*chOff*/, wf.numChannels, loopEnd, true/*bRise*/, true/*bFall*/, 0.0001f/*distThreshold*/);
               if(loopEndBwd > smpOff)
               {
                  int loopEndFwd = tksampleedit_find_edge_near_fwd(smpDat, 0/*chOff*/, wf.numChannels, loopEndBwd, true/*bRise*/, true/*bFall*/, 0.0001f/*distThreshold*/);
                  int loopLen;
                  if(smpOff < loopEndFwd <= loopEnd)
                     loopLen = loopEndFwd - smpOff;
                  else
                     loopLen = loopEndBwd - smpOff;

                  if(loopLen != smpLen)
                  {
                     s.firstLoopOffset = smpOff;
                     s.firstLoopLen    = loopLen;
                     s.verifySampleAreas();
                     numUpdated++;
                  }
               }
            }
         }

         Global.Print("Snap LpEs to ZCs (update "+numUpdated+" loop"+Utils.GetPluralString(numUpdated)+")");
         updateSampleViewMarkers();
         sample.markParamsAsModified();
         handleSelectZone(true/*bStopAudio*/);
      }
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdTightenZoneRegions() {
      local PointerArray zones <= getSelectedZones();
      StSample *s;
      int r = 0;
      foreach s in zones
      {
         int offset = s.firstLoopOffset;
         int len = s.firstLoopLen;
         if(len >= 512)
         {
            sv_wave.setSelection(offset, offset+len);
            sv_wave.tightenSelection(false/*bLowMinThreshold*/);
            int selOff = sv_wave.getSelectionStartOffset();
            int selLen = sv_wave.getSelectionEndOffset() - sv_wave.getSelectionStartOffset();
            if((selOff != s.firstLoopOffset) ||
               (selLen != s.firstLoopLen)
               )
            {
               s.firstLoopOffset = selOff;
               s.firstLoopLen = selLen;
               s.verifySampleAreas();
               r++;
            }
         }
      }

      handleSelectZone(true/*bStopAudio*/);
      Global.Print("Tighten Zone Areas: Update "+r+" loop"+Utils.GetPluralString(r));
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdUID(int _uid) {
      if(0 <= _uid <= 16382)
      {
         Sample smpO <= current_project.findSampleByUniqueID(_uid);
         if(null == smpO)
         {
            Sample smp <= getSelectedSample();
            if(null != smp)
            {
               smp.unique_id = _uid;
               Global.Print("Sample UID is "+_uid);
               tv_samples.redraw();
            }
         }
         else
            Global.Error("UID="+_uid+" is already in use by sample \""+smpO.unique_name+"\"");
      }
      else
      {
         Global.Error("Invalid UID="+_uid+", must be in range 0..16382");
      }
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdUpdateZonesEven(boolean _bVel, int _numZonesPerGroup) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         local PointerArray zones <= getSelectedZones();
         if(zones.numElements >= _numZonesPerGroup)
         {
            float cStep = 1.0 / _numZonesPerGroup;  // spread evenly
            StSample *s;
            int zoneIdx = 0;
            loop(zones.numElements / _numZonesPerGroup)
            {
               float cVal = 0;
               int zoneIdxGrp = _numZonesPerGroup;
               loop(_numZonesPerGroup)
               {
                  zoneIdxGrp--;
                  s <= zones.get(zoneIdx++);
                  StRange range <= _bVel ? s.getOrCreateVelRange() : s.getOrCreateModRange();
                  range.lo = cVal;
                  if(0 == zoneIdxGrp)
                     range.hi = 1.01;
                  else
                     range.hi = cVal + cStep;
                  cVal += cStep;
               }
            }
            tv_zones.tableModelChanged();
            sample.markParamsAsModified();
            return true;
         }
         return false;
      }
   }

   // <ui_cmd.png>
   public method handlePageCmdReorderZonesByList(StringArray _argv) : boolean {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         local IntArray ia;
         if(_argv.numElements > 1)
         {
            int idx = 1; // skip cmd name
            loop(_argv.numElements - 1)
            {
               int newIndex = _argv.get(idx++);
               if(newIndex > 0)
                  ia.add(newIndex - 1);  // nr => index
            }
            if(ia.numElements > 0)
            {
               smp.reorderOrRemoveOrCloneZones(ia);
               Global.Print("Reorder "+ia.numElements+" zone"+Utils.GetPluralString(ia.numElements));
               handleSelectSample(false/*bStopAudio*/);
            }
         }
      }
      return false;
   }

   // <ui_cmd.png>
   public =replay= method handlePageCmdReorderWaveformByZones() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         int oldNumFrames = smp.waveform.numFrames;

         smp.reorderWaveformByZones();

         int newNumFrames = smp.waveform.numFrames;
         Global.Print("Reorder waveform by zones. Frame delta="+(newNumFrames - oldNumFrames));

         handleSelectSample(true/*bStopAudio*/);
      }
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdPartialWindowBits(int _num) {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         smp.setPartialWindowBits(_num);
         Global.Print("Partial window bits is "+smp.partial_window_bits);
         smp.analyzeAndUpdatePartials();
      }
   }

   // <ui_cmd.png>
   protected =replay= method handlePageCmdPostRecInitDrum() : boolean {
      fp_volume.setValue(-3);
      handleVolumeChanged();

      fp_maxvoices.setValue(1);
      handleSampleMaxVoicesChanged();

      fp_zone_maxvoices.setValue(1);
      handleZoneMaxVoicesChanged();

      fp_zone_volume_ramp_up.setValue(0);
      handleZoneVolumeRampUpChanged();

      fp_zone_volume_r_speed.setValue(20);
      handleZoneVolumeRSpeedChanged();

      fp_zone_mod_lo.setValue(0);
      handleZoneModLoChanged();

      fp_zone_mod_hi.setValue(128);
      handleZoneModHiChanged();

      sv_wave.normalizeSelection(true/*bUndoBegin*/);

      handleTagsAutoAdd();

      Global.Print("Post-rec init drum sample");
   }

   // <ui_cmd.png>
   public virtual cmdGetAvailableCommands() : StringArray {
      return [
         "amiga_init",
         "analyze_partials",
         "autotag_dir\t<reldir> [addtag1 addtag2 ..]",
         "create_zone_grid\t<num> <sz>",
         "cycle_debug",
         "cycle_init",
         "cycle_mix",
         "cycle_tree_debug",
         "__dev__cycle_autosave_patch_after_recompile", // codegen-dev helper (checksum change after .c code update)
         "debugPrintZoneOffsetDeltas",
         "fade_regions\t<fadeInNumFrames=24> <fadeOutNumFrames=384>",
         "fmstack_init",
         "insert_crossfade_loops_8192",
         "load_default_namespace_names",
         "mm_speed_sync_init",
         "normalize_regions\t<fadeNumFrames=256>",
         "partial_window_bits\t<num=10>",
         "postrec_init_drum",
         "remove_all_zones",
         "render_sine\t<Hz>",
         "render_triangle\t<Hz>",
         "render_saw_up\t<Hz>",
         "render_saw_down\t<Hz>",
         "render_pulse\t<Hz> <width=0.5>",
         "render_noise_white",
         "render_noise_pink",
         "render_noise_blue",
         "render_noise_brown",
         "render_noise_violet",
         "reorder_cycle_patches",
         "reorder_zones_by_list\t<zone nr list>",
         "reorder_waveform_by_zones",
         "resize_waveform\t<num> <times=1>",
         "resize_16th\t<num16th> <times=1>",
         "resize_window\t<w> <h>",
         "select_pct\t<off> <len>",
         "snap_loop_starts_to_zerocrossings\t<maxFramesDist=1024>",
         "snap_loop_ends_to_zerocrossings",
         "tighten_zone_regions",
         "uid\t<uid>",
         "update_mod_zones_even\t<num_zones_per_group=3>",
         "update_vel_zones_even\t<num_zones_per_group=3>",
         "vcal_dump_preset",
         "wt_downsample\t<cyclelen> <div>",
         "wt_resample\t<cyclelen_old> <cyclelen_new>",
         "wt_shift_zcross\t<cyclelen>"
              ];
   }

   // <ui_cmd.png>
   public virtual cmdGetActionToolTips() : HashTable {
      return #[
         "amiga_init"
         = "Prepare sample for TSR.\nSet sample-rate to 16574Hz (C-3), init modsequencers + modmatrix",

         "analyze_partials"
         = "Analyze wavetable partials using the cyclelen setting of the currently selected zone",

         "autotag_dir"
         = "Auto-Assign (guess) sample tags for each file in the given directory (relative to sample root path)",

         "mm_speed_sync_init"
         = "Init mod matrix entries 1..3 / map ModWheel to speed sync",

         "create_zone_grid"
         = "Create <num> evenly spaced zones, <sz> frames per zone",

         "cycle_debug"
         = "Toggle \"Cycle\" sample-softsynth debug mode",

         "cycle_init"
         = "Prepare sample for Cycle sample synthesis",

         "cycle_mix"
         = "Create Cycle sample that mixes the current and next selected samples",

         "cycle_tree_debug"
         = "Toggle \"Cycle\" sample-softsynth tree debug mode",

         "debugPrintZoneOffsetDeltas"
         = "Show latency+avg deviation from 120 BPM clicks (one click per zone)",

         "fade_regions"
         = "Fade / Declick region starts / ends",

         "fmstack_init"
         = "Prepare sample for FM Stack voice plugin",

         "insert_crossfade_loops_8192"
         = "Insert loop that plays last 8k frames of sample, enable crossfade loop mode"
         "\n\n (note) useful after live-recording (capturing) a number of oneshot sample zones"
         ,

         "normalize_regions"
         = "Normalize each zone separately and fade out last <fadeNumFrames> frames",

         "partial_window_bits"
         = "Set resynth wavetable FFT window size (9=512, 10=1024 [def], 11=2048, 12=4096, 13=8192)",

         "postrec_init_drum"
         = "Post-rec re-init drum sample (same as Reinit=>Drum)",

         "remove_all_zones"
         = "Remove all zones",

         "render_sine"
         = "Render sine wave",

         "render_triangle"
         = "Render triangle",

         "render_saw_up"
         = "Render sawtooth (rising)",

         "render_saw_down"
         = "Render sawtooth (falling)",

         "render_pulse"
         = "Render pulse",

         "render_noise_white"
         = "Render white noise",

         "render_noise_pink"
         = "Render pink noise",

         "render_noise_blue"
         = "Render blue noise",

         "render_noise_brown"
         = "Render brown noise",

         "render_noise_violet"
         = "Render violet noise",

         "reorder_cycle_patches"
         = "Reorder Cycle patches by target zone",

         "reorder_zones_by_list"
         = "Reorder, delete, and/or clone zones by list. First zone has index 1.",

         "reorder_waveform_by_zones"
         = "Reorder waveform by zones. Duplicate waveform regions if necessary, discard unused regions.",

         "resize_waveform"
         = "Resize waveform to <num> * <times> frames",

         "resize_16th"
         = "Resize waveform to <num16th> * <times> 16th notes (using current project BPM) + lazy-create first zone/loop",

         "resize_window"
         = "Resize window to <width> * <height> pixels",

         "select_pct"
         = "Select sample area by percentages",

         "snap_loop_starts_to_zerocrossings"
         = "For each selected zone, adjust the start of its first loop to the nearest zero crossing (de-click)",

         "snap_loop_ends_to_zerocrossings"
         = "For each selected zone, adjust the end of its first loop to the nearest zero crossing (de-click)",

         "tighten_zone_regions"
         = "Skip silence around each sample zone (update first loop)",

         "uid"
         = "Reassign unique sample id (0..16382) (uid must not be currently in use by other sample)",

         "update_mod_zones_even"
         = "Update zone mod ranges, <num_zones_per_group> zones per range",

         "update_vel_zones_even"
         = "Update zone velocity ranges, <num_zones_per_group> zones per range",

         "vcal_dump_preset"
         = "Dump last edited voice calibration lane to console (can be appended to \"vcal_presets.ini\")",

         "wt_downsample"
         = "Reduce wavetable cyclelen by 2/4/8/16/.. Reallocates waveform.",

         "wt_resample"
         = "Resize wavetable cyclelen. Reallocates waveform.",

         "wt_shift_zcross"
         = "Shift each wavetable cycle so it starts on a zero-crossing",

               ];
   }

   // <ui_cmd.png>
   public virtual cmdFindArgAutoCompletions(String _cmd, int _argIdx, String _prefix) : StringArray {
      return null;
   }

   // <ui_cmd.png>
   public virtual cmdGetAvailableArgs(String _cmd, int _argIdx) : StringArray {
      Global.Debug("PageSample::cmdGetAvailableArgs: cmd=\""+_cmd+"\" argIdx="+_argIdx);
      switch(_cmd)
      {
         case "debugPrintZoneOffsetDeltas":
            return null;

         case "create_zone_grid":
            return null;

         case "normalize_regions":
         case "remove_all_zones":
            return null;

         case "partial_window_bits":
            return ["8", "9", "10", "11", "12", "13"];

         case "postrec_init_drum":
            return null;

         case "select_pct":
            return null;

         case "snap_loop_starts_to_zerocrossings":
            return ["32", "64", "128", "256", "512", "1024", "2048", "4096"];

         case "snap_loop_ends_to_zerocrossings":
            return null;

         case "tighten_zone_regions":
            return null;

         case "update_mod_zones_even":
         case "update_vel_zones_even":
            return null;
      }
      return null;
   }

   // <ui_cmd.png>
   public virtual cmdGetDefaultActions() : StringArray {
      return ["amiga_init",
              "analyze_partials",
              "create_zone_grid 16 16384",
              "cycle_init",
              "debugPrintZoneOffsetDeltas",
              "fade_regions 24 0",
              "fade_regions 24 384",
              "fade_regions 0 384",
              "fmstack_init",
              "postrec_init_drum",
              "insert_crossfade_loops_8192",
              "mm_speed_sync_init",
              "normalize_regions 256",
              "remove_all_zones",
              "render_sine 261.63",
              "render_triangle 261.63",
              "render_saw_up 261.63",
              "render_saw_down 261.63",
              "render_pulse 261.63 0.25",
              "render_pulse 261.63 0.5",
              "render_pulse 261.63 0.75",
              "render_pulse 261.63 0.95",
              "render_noise_white",
              "render_noise_pink",
              "render_noise_blue",
              "render_noise_brown",
              "render_noise_violet",
              "reorder_cycle_patches",
              "reorder_zones_by_list 1 5 9 2 6 10 3 7 11",
              "reorder_zones_by_list 1 13 25 2 14 26 3 15 27 4 16 28 5 17 29 6 18 30 7 19 31 8 20 32 9 21 33 10 22 34 11 23 35 12 24 36",
              "reorder_waveform_by_zones",
              "resize_waveform 256",
              "resize_16th 16",
              "resize_16th 32",
              "resize_16th 64",
              "resize_window 960 512",
              "resize_window 960 900",
              "select_pct 50 50",
              "snap_loop_starts_to_zerocrossings 1024",
              "snap_loop_ends_to_zerocrossings",
              "tighten_zone_regions",
              "update_mod_zones_even 3",
              "update_vel_zones_even 3",
              "vcal_dump_preset",
              "wt_downsample 2048 8",
              "wt_resample 2048 256",
              "wt_shift_zcross 256",
              ];
   }

   // <method.png>
   protected method handleRender(int _type, StringArray _argv) : boolean {
      // (note) render to current selection
      float hz = 261.63;  // C-5
      float pw = 0.5;

      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StWaveform wf <= sample.waveform;
         FloatArray smp <= wf.sampleData;

         int offset = sv_wave.getSelectionStartOffset();
         int len    = sv_wave.getSelectionLen();

         if(_type <= 4/*pulse*/)
         {
            if(_argv.numElements >= 2)
            {
               hz = _argv.get(1);
               hz = mathClampf(hz, 10.0f, 22050.0);
            }

            if(4 == _type)
            {
               if(_argv.numElements >= 4)
               {
                  pw = _argv.get(2);
                  pw = mathClampf(pw, 0.0, 1.0);
               }
            }
         }

         if(null != smp)
         {
            int availNumFrames = smp.numElements / wf.numChannels;

            if(0 == len)
            {
               offset = 0;
               len    = availNumFrames;
            }

            if((offset + len) <= availNumFrames)
            {
               sv_wave.undoBegin("render");
               sv_wave.undoActionModify(offset, len, SampleView.CHANNEL_MASK_LR);

               if(16574 == wf.sampleRate && 261.63 == hz)
                  hz =  16574/64;  // slightly adjust to 258.96875Hz

               switch(_type)
               {
                  case 0: // sine
                     WaveformUtils.RenderSine(smp, wf.numChannels, wf.sampleRate, offset, len, hz);
                     break;

                  case 1: // triangle
                     WaveformUtils.RenderTriangle(smp, wf.numChannels, wf.sampleRate, offset, len, hz);
                     break;

                  case 2: // saw_up
                     WaveformUtils.RenderSawUp(smp, wf.numChannels, wf.sampleRate, offset, len, hz);
                     break;

                  case 3: // saw_down
                     WaveformUtils.RenderSawDown(smp, wf.numChannels, wf.sampleRate, offset, len, hz);
                     break;

                  case 4: // pulse
                     WaveformUtils.RenderPulse(smp, wf.numChannels, wf.sampleRate, offset, len, hz, pw);
                     break;

                  case 5: // white noise
                     WaveformUtils.RenderWhiteNoise(smp, wf.numChannels, offset, len);
                     break;

                  case 6: // pink noise
                     WaveformUtils.RenderPinkNoise_FFT(smp, wf.numChannels, offset, len);
                     break;

                  case 7: // blue noise
                     WaveformUtils.RenderBlueNoise_FFT(smp, wf.numChannels, offset, len);
                     break;

                  case 8: // brown noise
                     WaveformUtils.RenderBrownNoise_FFT(smp, wf.numChannels, offset, len);
                     break;

                  case 9: // violet noise
                     WaveformUtils.RenderVioletNoise_FFT(smp, wf.numChannels, offset, len);
                     break;
               }

               sv_wave.undoEnd();

               sample.markWaveformAsModified();
               redraw();
               return true;
            }
            else
            {
               // should not be reachable
               Global.Error("render: need "+len+", have "+(availNumFrames-offset)+" frame(s)");
            }
         }
      }
      return false;
   }

   // <ui_cmd.png>
   public method handlePageCmdCycleDebug() {
      boolean bEnable = !MCycle.b_debug1;
      MCycle.b_debug1 = bEnable;
      MCycle.b_debug2 = bEnable;
      MCyclePatch.b_debug0 = bEnable; // show src
      MCyclePatch.b_debug1 = bEnable;
      Global.Print("Cycle softsynth debug is "+Utils.GetEnableString(bEnable));
   }

   // <ui_cmd.png>
   public method handlePageCmdCycleTreeDebug() {
      STConfig.b_cycle_tree_debug = !STConfig.b_cycle_tree_debug;
      Global.Print("Cycle softsynth tree debug is "+Utils.GetEnableString(STConfig.b_cycle_tree_debug));
   }

   // <ui_cmd.png>
   public method handlePageCmdCycleAutoSavePatch() {
      STConfig.b_patch_plugin_resave_patch_on_recompile = !STConfig.b_patch_plugin_resave_patch_on_recompile;
      Global.Print("Cycle codegen-dev auto-save-on-recompile is "+Utils.GetEnableString(STConfig.b_patch_plugin_resave_patch_on_recompile));
   }

   // <ui_cmd.png>
   public method handlePageCmdAmigaInit() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         if((smp.waveform.sampleRate) > 28800)
         {
            fp_sample_rate.setValue(16574);
            smp.waveform.setSampleRate(16574);
            fp_zone_sample_rate.setResetValue(16574);
            smp.markWaveformAsModified();
         }

         smp.setMaxVoices(1);
         smp.setEnableModSrcNoteOn(true);
         smp.markParamsAsModified();

         StSample *s;
         StADSR *adsr;
         StLFO *lfo;
         StEnvelope *env;
         BezierEditState *beState;
         Envelope *beData;
         local PointerArray zones <= getSelectedZones();
         foreach s in zones
         {
            StModSeq *mseq;

            adsr <= s.volADSR;
            env <= adsr.envAttack;
            beState <= env.metaData;
            beData <= env.data;
            Dialogs.curve_dialog.initSustainEnv(beState, beData);

            s.setMaxVoices(1);

            // mseq1 => volume
            mseq <= s.getOrCreateModSeqByIndexAndPatch(0, 0/*patchIdx*/);
            s.setDefaultModSeqPatch(0, 0);
            mseq.valueScl = 1.0f;
            mseq.valueOff = -1.0f;
            mseq.enableOneShot = 1;
            mseq.numSteps = 1;
            mseq.speed = 12;
            mseq.slewAmt = 0.5;
            mseq.setStepValue(0, 1.0);
            s.setMMSrc(0, STSAMPLE_MM_SRC_CC16_GENERAL_1);
            // // s.setMMDst(0, STSAMPLE_MM_DST_MODSEQ1_ADVANCE);
            s.setMMDst(0, STSAMPLE_MM_DST_RETRIG_MODSEQ1);
            s.setMMAmt(0, 1);
            s.setMMEnable(0, true);
            s.setMMSrc(1, STSAMPLE_MM_SRC_MODSEQ1);
            s.setMMDst(1, STSAMPLE_MM_DST_VOLUME);
            s.setMMAmt(1, 1);
            s.setMMEnable(1, true);

            // mseq2 => freq_fine
            mseq <= s.getOrCreateModSeqByIndexAndPatch(1, 0/*patchIdx*/);
            s.setDefaultModSeqPatch(1, 0);
            mseq.valueScl = 16.0f;
            mseq.valueOff = -8.0f;
            mseq.enableOneShot = 0;
            mseq.numSteps = 1;
            mseq.speed = 6;
            mseq.slewAmt = 0;
            mseq.setStepValue(0, 0.5);
            s.setMMSrc(4, STSAMPLE_MM_SRC_CC17_GENERAL_2);
            // // s.setMMDst(4, STSAMPLE_MM_DST_MODSEQ2_ADVANCE);
            s.setMMDst(4, STSAMPLE_MM_DST_RETRIG_MODSEQ2);
            s.setMMAmt(4, 1);
            s.setMMEnable(4, true);
            s.setMMSrc(5, STSAMPLE_MM_SRC_MODSEQ2);
            s.setMMDst(5, STSAMPLE_MM_DST_FREQ_FINE);
            s.setMMAmt(5, 1);
            s.setMMEnable(5, true);

            // JumptoLoopAbs via CC#11 Expr
            //  (note) mutually exclusive to mseq4
            s.setMMOp(6, STSAMPLE_MM_OP_REPLACE);
            s.setMMSrc(6, STSAMPLE_MM_SRC_CC11_EXPR);
            s.setMMDst(6, STSAMPLE_MM_DST_JUMPTOLOOP_ABS);
            s.setMMAmt(6, 127.0);
            s.setMMEnable(6, false);

            // mseq3 => freq_coarse
            mseq <= s.getOrCreateModSeqByIndexAndPatch(2, 0/*patchIdx*/);
            s.setDefaultModSeqPatch(2, 0);
            mseq.valueScl = 24.0f;
            mseq.valueOff = -12.0f;
            mseq.enableOneShot = 0;
            mseq.numSteps = 1;
            mseq.speed = 12;
            mseq.slewAmt = 0;
            mseq.setStepValue(0, 0.5);
            s.setMMSrc(8, STSAMPLE_MM_SRC_CC18_GENERAL_3);
            // // s.setMMDst(8, STSAMPLE_MM_DST_MODSEQ3_ADVANCE);
            s.setMMDst(8, STSAMPLE_MM_DST_RETRIG_MODSEQ3);
            s.setMMAmt(8, 1);
            s.setMMEnable(8, true);
            s.setMMSrc(9, STSAMPLE_MM_SRC_MODSEQ3);
            s.setMMDst(9, STSAMPLE_MM_DST_FREQ_SEMI);
            s.setMMAmt(9, 1.0/12.0);
            s.setMMEnable(9, true);

            // mseq4 => jumptoloop
            //  (note) mutually exclusive to CC#11 Expr
            mseq <= s.getOrCreateModSeqByIndexAndPatch(3, 0/*patchIdx*/);
            s.setDefaultModSeqPatch(3, 0);
            mseq.valueScl = 15.0f;
            mseq.valueOff = 0.0f;
            mseq.enableOneShot = 1;
            mseq.numSteps = 1;
            mseq.speed = 48;
            mseq.slewAmt = 0;
            mseq.setStepValue(0, 0.0f);
            s.setMMSrc(12, STSAMPLE_MM_SRC_CC19_GENERAL_4);
            // // s.setMMDst(12, STSAMPLE_MM_DST_MODSEQ4_ADVANCE);
            s.setMMDst(12, STSAMPLE_MM_DST_RETRIG_MODSEQ4);
            s.setMMAmt(12, 1);
            s.setMMEnable(12, true);
            s.setMMSrc(13, STSAMPLE_MM_SRC_MODSEQ4);
            s.setMMDst(13, STSAMPLE_MM_DST_JUMPTOLOOP_ABS);
            s.setMMAmt(13, 1.0);
            s.setMMEnable(13, false);

            // CC#80 => modseq1 (vol) table
            s.setMMSrc(2, STSAMPLE_MM_SRC_CC80_GENERAL_5);
            s.setMMDst(2, STSAMPLE_MM_DST_MODSEQ1_PATCH);
            s.setMMAmt(2, 127);
            s.setMMEnable(2, true);

            // CC#82 => modseq3 (freq_coarse) table
            s.setMMSrc(3, STSAMPLE_MM_SRC_CC82_GENERAL_7);
            s.setMMDst(3, STSAMPLE_MM_DST_MODSEQ3_PATCH);
            s.setMMAmt(3, 127);
            s.setMMEnable(3, true);

            // breath cc#2 => wt x abs
            s.setMMSrc(10, STSAMPLE_MM_SRC_CC2_BREATHCTL);
            if(0)
            {
               s.setMMDst(10, STSAMPLE_MM_DST_WT_2D_X_ABS);
               s.setMMAmt(10, 127.0);
            }
            else
            {
               // 15Oct2020: use normalized wt pos
               s.setMMDst(10, STSAMPLE_MM_DST_WT_2D_X_REL);
               s.setMMAmt(10, 1.0);
            }
            s.setMMEnable(10, true);

            // foot cc#4 => wt y abs
            s.setMMSrc(11, STSAMPLE_MM_SRC_CC4_FOOTCTL);
            if(0)
            {
               s.setMMDst(11, STSAMPLE_MM_DST_WT_2D_Y_ABS);
               s.setMMAmt(11, 127.0);
            }
            else
            {
               // 15Oct2020: use normalized wt pos
               s.setMMDst(11, STSAMPLE_MM_DST_WT_2D_Y_REL);
               s.setMMAmt(11, 1.0);
            }
            s.setMMEnable(11, false);

            // LFO pan
            lfo <= s.getOrCreatePanLFO();
            lfo.type = STLFO_TYPE_TRI;
            lfo.fadeInTime = 0;
            lfo.fadedLevel = 0.5;
            lfo.dcOffset = 0.5;

            // LFO aux
            lfo <= s.getOrCreateAuxLFO();
            lfo.type = STLFO_TYPE_TRI;
            lfo.fadeInTime = 0;
            lfo.fadedLevel = 0.5;
            lfo.dcOffset = 0.5;

            // lfo pan => wt x
            s.setMMSrc(14, STSAMPLE_MM_SRC_LFO_PAN);
            s.setMMDst(14, STSAMPLE_MM_DST_WT_2D_X_REL);
            s.setMMAmt(14, 1.0);
            s.setMMEnable(14, true);
            s.panLFOAmt = 0;

            // lfo aux => wt y
            s.setMMSrc(15, STSAMPLE_MM_SRC_LFO_AUX);
            s.setMMDst(15, STSAMPLE_MM_DST_WT_2D_Y_REL);
            s.setMMAmt(15, 1.0);
            s.setMMEnable(15, true);

            s.enableTimestretchXFade = false;
         }

         handleSelectSample(false/*bStopAudio*/);

         Global.Print("amiga_init: update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements));
      }
   }

   // <ui_cmd.png>
   public method handlePageCmdSineInit() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         // Create waveform
         int numFrames = Audio.mix_rate / Sample.BASE_FREQ_MIDDLE_C;
         handlePageCmdResizeWaveform(numFrames, 1/*times*/);

         smp.b_procedural = false;
         smp.setMaxVoices(8);
         smp.setEnableModSrcNoteOn(true);
         smp.setVolume(Utils.DBToLevel(-9));
         smp.markParamsAsModified();

         smp.newZone();
         StSample s <= smp.getZoneByIdx(0);
         s.setVolumeRampStepsMillisecIn(1);
         s.setVolumeRampStepsMillisecOut(4);

         IntArray loops <= s.getOrCreateSampleLoops();
         loops.add(0);
         loops.add(numFrames);
         loops.add(0);

         StADSR *adsr;
         StLFO *lfo;
         StEnvelope *env;
         BezierEditState *beState;
         Envelope *beData;

         // Update volume attack envelope (final level = 90%)
         adsr <= s.getOrCreateVolADSR();
         env <= adsr.getOrCreateEnvAttack();
         beState <= new BezierEditState;
         beData <= env.getOrCreateData();
         Dialogs.curve_dialog.initAttackEnvFMStack(beState, beData);
         env.setMetaData(#(deref beState));
         env.intensity = 1.0;
         env.timescale = 200.0;

         s.setMaxVoices(8);

         local StringArray renderArgs;
         handleRender(0/*type=sine*/, renderArgs);

         handleSelectSample(false/*bStopAudio*/);

         Global.Print("sine_init: load sine waveform");
      }
   }

   // <ui_cmd.png>
   public method handlePageCmdSineAmigaInit() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         // Create waveform
         int numFrames = 16574/*Amiga C-3*/ / Sample.BASE_FREQ_MIDDLE_C;
         if(numFrames & 1)
            numFrames++;  // 16bit DMA align
         handlePageCmdResizeWaveform(numFrames, 1/*times*/);

         smp.b_procedural = false;
         smp.setMaxVoices(1);
         smp.setEnableModSrcNoteOn(true);
         smp.setVolume(Utils.DBToLevel(0));

         fp_sample_rate.setValue(16574);
         smp.waveform.setSampleRate(16574);
         fp_zone_sample_rate.setResetValue(16574);
         smp.markWaveformAsModified();

         smp.markParamsAsModified();

         smp.newZone();
         StSample s <= smp.getZoneByIdx(0);
         s.setVolumeRampStepsMillisecIn(1);
         s.setVolumeRampStepsMillisecOut(4);

         IntArray loops <= s.getOrCreateSampleLoops();
         loops.add(0);
         loops.add(numFrames);
         loops.add(0);

         StADSR *adsr;
         StLFO *lfo;
         StEnvelope *env;
         BezierEditState *beState;
         Envelope *beData;

         // Update volume attack envelope (final level = 90%)
         adsr <= s.getOrCreateVolADSR();
         env <= adsr.getOrCreateEnvAttack();
         beState <= new BezierEditState;
         beData <= env.getOrCreateData();
         Dialogs.curve_dialog.initAttackEnvFMStack(beState, beData);
         env.setMetaData(#(deref beState));
         env.intensity = 1.0;
         env.timescale = 200.0;

         s.setMaxVoices(1);

         local StringArray renderArgs;
         handleRender(0/*type=sine*/, renderArgs);

         handleSelectSample(false/*bStopAudio*/);

         handlePageCmdAmigaInit();

         Global.Print("sine_amiga_init: load sine waveform");
      }
   }

   // <ui_cmd.png>
   public method handlePageCmdCycleInit() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         // Create waveform
         int numFrames = Audio.mix_rate * 0.5;
         handlePageCmdResizeWaveform(numFrames, 1/*times*/);

         smp.b_procedural = true;
         smp.setMaxVoices(8);
         smp.setEnableModSrcNoteOn(true);
         smp.setVolume(Utils.DBToLevel(-9));
         smp.markParamsAsModified();

         smp.newZone();
         StSample s <= smp.getZoneByIdx(0);
         s.setVolumeRampStepsMillisecIn(1);
         s.setVolumeRampStepsMillisecOut(4);

         IntArray loops <= s.getOrCreateSampleLoops();
         loops.add(0);
         loops.add(numFrames);
         loops.add(1);

         StADSR *adsr;
         StLFO *lfo;
         StEnvelope *env;
         BezierEditState *beState;
         Envelope *beData;

         // Update volume attack envelope (final level = 90%)
         adsr <= s.getOrCreateVolADSR();
         env <= adsr.getOrCreateEnvAttack();
         beState <= new BezierEditState;
         beData <= env.getOrCreateData();
         Dialogs.curve_dialog.initAttackEnvFMStack(beState, beData);
         env.setMetaData(#(deref beState));
         env.intensity = 1.0;
         env.timescale = 200.0;

         s.setMaxVoices(8);

         // breath cc#2 => wt x abs
         s.setMMSrc(0, STSAMPLE_MM_SRC_CC2_BREATHCTL);
         s.setMMDst(0, STSAMPLE_MM_DST_WT_2D_X_REL);
         s.setMMAmt(0, 1.0);
         s.setMMEnable(0, false);

         // foot cc#4 => wt y abs
         s.setMMSrc(1, STSAMPLE_MM_SRC_CC4_FOOTCTL);
         s.setMMDst(1, STSAMPLE_MM_DST_WT_2D_Y_REL);
         s.setMMAmt(1, 1.0);
         s.setMMEnable(1, false);

         // LFO pan
         lfo <= s.getOrCreatePanLFO();
         lfo.type = STLFO_TYPE_TRI;
         lfo.fadeInTime = 0;
         lfo.fadedLevel = 0.5;
         lfo.dcOffset = 0.5;

         // LFO aux
         lfo <= s.getOrCreateAuxLFO();
         lfo.type = STLFO_TYPE_TRI;
         lfo.fadeInTime = 0;
         lfo.fadedLevel = 0.5;
         lfo.dcOffset = 0.5;

         // lfo pan => wt x
         s.setMMSrc(2, STSAMPLE_MM_SRC_LFO_PAN);
         s.setMMDst(2, STSAMPLE_MM_DST_WT_2D_X_REL);
         s.setMMAmt(2, 1.0);
         s.setMMEnable(2, true);
         s.panLFOAmt = 0;

         // lfo aux => wt y
         s.setMMSrc(3, STSAMPLE_MM_SRC_LFO_AUX);
         s.setMMDst(3, STSAMPLE_MM_DST_WT_2D_Y_REL);
         s.setMMAmt(3, 1.0);
         s.setMMEnable(3, false);

         s.enableTimestretchXFade = false;

         CycleState synst <= smp.cycle_state;
         CyclePatch synp <= synst.getPatchByIdx(0);
         synp.target_zone_idx = 0;
         synp.setSourceBufferMain(
            "arg p_amp 0.7 0 8\n"
            "\n"
            "<out:\n"
            "  sin\n"
            "  * rmp 0 1\n"
            "  * $p_amp\n"
            "  clp\n"
                              );
         smp.recalcCyclePatches();

         handleSelectSample(false/*bStopAudio*/);

         Global.Print("cycle_init: load sine patch");
      }
   }

   // <ui_cmd.png>
   public method handlePageCmdCycleAmigaInit() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         // Create waveform
         int numFrames = 16574 * 0.5;
         if(numFrames & 1)
            numFrames++;  // 16bit DMA align
         handlePageCmdResizeWaveform(numFrames, 1/*times*/);

         smp.b_procedural = true;
         smp.setMaxVoices(1);
         smp.setEnableModSrcNoteOn(true);
         smp.setVolume(Utils.DBToLevel(0));
         smp.markParamsAsModified();

         fp_sample_rate.setValue(16574);
         smp.waveform.setSampleRate(16574);
         fp_zone_sample_rate.setResetValue(16574);
         smp.markWaveformAsModified();

         smp.newZone();
         StSample s <= smp.getZoneByIdx(0);
         s.setVolumeRampStepsMillisecIn(1);
         s.setVolumeRampStepsMillisecOut(4);

         IntArray loops <= s.getOrCreateSampleLoops();
         loops.add(0);
         loops.add(numFrames);
         loops.add(1);

         StADSR *adsr;
         StLFO *lfo;
         StEnvelope *env;
         BezierEditState *beState;
         Envelope *beData;

         // Update volume attack envelope (final level = 90%)
         adsr <= s.getOrCreateVolADSR();
         env <= adsr.getOrCreateEnvAttack();
         beState <= new BezierEditState;
         beData <= env.getOrCreateData();
         Dialogs.curve_dialog.initAttackEnvFMStack(beState, beData);
         env.setMetaData(#(deref beState));
         env.intensity = 1.0;
         env.timescale = 200.0;

         s.setMaxVoices(1);

         // breath cc#2 => wt x abs
         s.setMMSrc(0, STSAMPLE_MM_SRC_CC2_BREATHCTL);
         s.setMMDst(0, STSAMPLE_MM_DST_WT_2D_X_REL);
         s.setMMAmt(0, 1.0);
         s.setMMEnable(0, false);

         // foot cc#4 => wt y abs
         s.setMMSrc(1, STSAMPLE_MM_SRC_CC4_FOOTCTL);
         s.setMMDst(1, STSAMPLE_MM_DST_WT_2D_Y_REL);
         s.setMMAmt(1, 1.0);
         s.setMMEnable(1, false);

         // LFO pan
         lfo <= s.getOrCreatePanLFO();
         lfo.type = STLFO_TYPE_TRI;
         lfo.fadeInTime = 0;
         lfo.fadedLevel = 0.5;
         lfo.dcOffset = 0.5;

         // LFO aux
         lfo <= s.getOrCreateAuxLFO();
         lfo.type = STLFO_TYPE_TRI;
         lfo.fadeInTime = 0;
         lfo.fadedLevel = 0.5;
         lfo.dcOffset = 0.5;

         // lfo pan => wt x
         s.setMMSrc(2, STSAMPLE_MM_SRC_LFO_PAN);
         s.setMMDst(2, STSAMPLE_MM_DST_WT_2D_X_REL);
         s.setMMAmt(2, 1.0);
         s.setMMEnable(2, true);
         s.panLFOAmt = 0;

         // lfo aux => wt y
         s.setMMSrc(3, STSAMPLE_MM_SRC_LFO_AUX);
         s.setMMDst(3, STSAMPLE_MM_DST_WT_2D_Y_REL);
         s.setMMAmt(3, 1.0);
         s.setMMEnable(3, false);

         s.enableTimestretchXFade = false;

         CycleState synst <= smp.cycle_state;
         CyclePatch synp <= synst.getPatchByIdx(0);
         synp.target_zone_idx = 0;
         synp.b_lofi = true;
         synp.setSourceBufferMain(
            "arg p_amp 0.7 0 8\n"
            "\n"
            "<out:\n"
            "  sin\n"
            "  * rmp 0 1\n"
            "  * $p_amp\n"
            "  clp\n"
                              );
         smp.recalcCyclePatches();

         handleSelectSample(false/*bStopAudio*/);

         handlePageCmdAmigaInit();

         Global.Print("cycle_amiga_init: load sine patch");
      }
   }

   // <ui_cmd.png>
   public method handlePageCmdCycleMix() {
      // create procedural Cycle patch that mixes the two previous samples
      Sample smpA <= getPreviousSample();
      if(null != smpA)
      {
         StSample zoneA <= smpA.getZoneByIdx(0);
         if(null != zoneA)
         {
            Sample smpB <= getSelectedSample();
            if(null != smpB)
            {
               StSample zoneB <= smpB.getZoneByIdx(0);
               if(null != zoneB)
               {
                  local String newSampleName <= "cycle mix";
                  createSample(deref newSampleName, getNewSamplePrefIdx());

                  Sample smp <= getSelectedSample();
                  if(null != smp)
                  {
                     int lenA = zoneA.getLastLoopLen();
                     int lenB = zoneB.getLastLoopLen();
                     // Create waveform
                     int numFrames = mathMaxi(lenA, lenB);
                     handlePageCmdResizeWaveform(numFrames, 1/*times*/);

                     smp.b_procedural = true;
                     smp.setMaxVoices(8);
                     smp.setEnableModSrcNoteOn(true);
                     smp.setVolume(1.0);//Utils.DBToLevel(0));
                     smp.markParamsAsModified();

                     smp.newZone();
                     StSample s <= smp.getZoneByIdx(0);
                     s.setVolumeRampStepsMillisecIn(1);
                     s.setVolumeRampStepsMillisecOut(4);

                     IntArray loops <= s.getOrCreateSampleLoops();
                     loops.add(0);
                     loops.add(numFrames);
                     loops.add(1);

                     StADSR *adsr;
                     StLFO *lfo;
                     StEnvelope *env;
                     BezierEditState *beState;
                     Envelope *beData;

                     // Update volume attack envelope (final level = 90%)
                     adsr <= s.getOrCreateVolADSR();
                     env <= adsr.getOrCreateEnvAttack();
                     beState <= new BezierEditState;
                     beData <= env.getOrCreateData();
                     Dialogs.curve_dialog.initAttackEnvFMStack(beState, beData);
                     env.setMetaData(#(deref beState));
                     env.intensity = 1.0;
                     env.timescale = 200.0;

                     s.setMaxVoices(8);

                     // breath cc#2 => wt x abs
                     s.setMMSrc(0, STSAMPLE_MM_SRC_CC2_BREATHCTL);
                     s.setMMDst(0, STSAMPLE_MM_DST_WT_2D_X_REL);
                     s.setMMAmt(0, 1.0);
                     s.setMMEnable(0, false);

                     // foot cc#4 => wt y abs
                     s.setMMSrc(1, STSAMPLE_MM_SRC_CC4_FOOTCTL);
                     s.setMMDst(1, STSAMPLE_MM_DST_WT_2D_Y_REL);
                     s.setMMAmt(1, 1.0);
                     s.setMMEnable(1, false);

                     // LFO pan
                     lfo <= s.getOrCreatePanLFO();
                     lfo.type = STLFO_TYPE_TRI;
                     lfo.fadeInTime = 0;
                     lfo.fadedLevel = 0.5;
                     lfo.dcOffset = 0.5;

                     // LFO aux
                     lfo <= s.getOrCreateAuxLFO();
                     lfo.type = STLFO_TYPE_TRI;
                     lfo.fadeInTime = 0;
                     lfo.fadedLevel = 0.5;
                     lfo.dcOffset = 0.5;

                     // lfo pan => wt x
                     s.setMMSrc(2, STSAMPLE_MM_SRC_LFO_PAN);
                     s.setMMDst(2, STSAMPLE_MM_DST_WT_2D_X_REL);
                     s.setMMAmt(2, 1.0);
                     s.setMMEnable(2, true);
                     s.panLFOAmt = 0;

                     // lfo aux => wt y
                     s.setMMSrc(3, STSAMPLE_MM_SRC_LFO_AUX);
                     s.setMMDst(3, STSAMPLE_MM_DST_WT_2D_Y_REL);
                     s.setMMAmt(3, 1.0);
                     s.setMMEnable(3, false);

                     s.enableTimestretchXFade = false;

                     CycleState synst <= smp.cycle_state;
                     CyclePatch synp <= synst.getPatchByIdx(0);
                     synp.target_zone_idx = 0;
                     synp.setSourceBufferMain(
                        "zone 0 \""+smpA.unique_name+"."+(("" != zoneA.name) ? zoneA.name : smpA.getZoneIdx(zoneA))+"\"\n"
                        "zone 1 \""+smpB.unique_name+"."+(("" != zoneB.name) ? zoneB.name : smpB.getZoneIdx(zoneB))+"\"\n"
                        "\n"
                        "<out:\n"
                        "  = zon 0 rate=1.0\n"
                        "  + zon 1 rate=1.0\n"
                        "  clp\n"
                                          );
                     smp.recalcCyclePatches();

                     handleSelectSample(false/*bStopAudio*/);

                     Global.Print("cycle_mix");
                  } // if smp
               } // if zoneB
               else
                  Global.Warning("Missing zoneB");
            } // if smpB
            else
               Global.Warning("Missing smpB");
         } // if zoneA
         else
            Global.Warning("Missing zoneA");
      } // if smpA
      else
         Global.Warning("Missing smpA");
   }

   // <ui_cmd.png>
   public =replay= method handlePageCmdPatchPluginInit() {
      boolean bOldSuppressUnderrunError = Audio.PushSuppressUnderrunError();

      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         // Create waveform
         int numFrames = 32;  // 1 would do but SampleView prefers to have >=32 samples
         handlePageCmdResizeWaveform(numFrames, 1/*times*/);

         smp.b_procedural = true;
         smp.setMaxVoices(8);
         smp.setEnableModSrcNoteOn(true);
         smp.setVolume(Utils.DBToLevel(-9));
         smp.markParamsAsModified();

         smp.newZone();
         StSample s <= smp.getZoneByIdx(0);
         s.setVolumeRampStepsMillisecIn(0);  // (note) optimized renderer requires volramp to be disabled
         s.setVolumeRampStepsMillisecOut(0);
         s.setInterpolType(STSAMPLE_INTERPOL_NONE);  // (note) sample-reads are discarded, anyway

         IntArray loops <= s.getOrCreateSampleLoops();
         loops.add(0);
         loops.add(numFrames);
         loops.add(0);

         StADSR *adsr;
         StLFO *lfo;
         StEnvelope *env;
         BezierEditState *beState;
         Envelope *beData;

         // Update volume attack envelope (final level = 90%)
         adsr <= s.getOrCreateVolADSR();
         env <= adsr.getOrCreateEnvAttack();
         beState <= new BezierEditState;
         beData <= env.getOrCreateData();
         Dialogs.curve_dialog.initAttackEnvFMStack(beState, beData);
         env.setMetaData(#(deref beState));
         env.intensity = 1.0;
         env.timescale = 200.0;

         s.setMaxVoices(8);

         // LFO pan
         lfo <= s.getOrCreatePanLFO();
         lfo.type = STLFO_TYPE_TRI;
         lfo.fadeInTime = 0;
         lfo.fadedLevel = 1;
         lfo.dcOffset   = 0;

         // LFO aux
         lfo <= s.getOrCreateAuxLFO();
         lfo.type = STLFO_TYPE_TRI;
         lfo.fadeInTime = 0;
         lfo.fadedLevel = 1;
         lfo.dcOffset   = 0;

         s.panLFOAmt = 0;

         s.enableTimestretchXFade = false;

         CycleState synst <= smp.cycle_state;
         CyclePatch synp <= synst.getPatchByIdx(0);
         synp.target_zone_idx = CyclePatch.TARGET_ZONE_PATCH_PLUGIN;
         synp.setSourceBufferMain(
            "id "+Utils.ConvertToVarName(smp.unique_name)+"\n"
            "\n"
            "# declare param p_amp and mod m_amp\n"
            "modparam amp 0.5 0 1\n"
            "\n"
            "<out:\n"
            "  sin\n"
            "  * $m_amp\n"
            "    * 2\n"
            "  clp\n"
                              );
         smp.recalcCyclePatches();

         // Compile voice plugins
         if(synp.recalcExportPlugin(smp, true/*bMessage*/, true/*bReloadSingle*/, null/*idMap*/))
         {
            Global.PrintShort("Export STFX plugin \""+(synp.cycle.plugin_id)+"\"");

            // Install compiled voice plugin
            StPluginInfo pluginInfo <= VoicePlugins.FindVoicePluginInfoById(synp.last_compiled_plugin_id);
            if(null != pluginInfo)
            {
               StPluginShared pluginShared <= pluginInfo.createSharedInstance();
               s.setVoicePluginShared(0/*pluginIdx*/, #(deref pluginShared));
            }
         }

         handleSelectSample(false/*bStopAudio*/);

         Global.Print("cycle_init: load voice plugin patch");
      }

      Audio.PopSuppressUnderrunError(bOldSuppressUnderrunError);
   }

   // <ui_cmd.png>
   public method handlePageCmdFMStackInit() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         StPluginInfo pluginInfo <= VoicePlugins.FindVoicePluginInfoById("fm_stack_v2_medres");
         if(null != pluginInfo)
         {
            // Create dummy waveform
            handlePageCmdResizeWaveform(32/*frames*/, 1/*times*/);

            smp.b_procedural = true;
            smp.setMaxVoices(8);
            smp.setEnableModSrcNoteOn(true);
            smp.setVolume(Utils.DBToLevel(-9));
            smp.markParamsAsModified();

            smp.newZone();
            StSample s <= smp.getZoneByIdx(0);
            s.setVolumeRampStepsMillisecIn(0);
            s.setVolumeRampStepsMillisecOut(0);

            IntArray loops <= s.getOrCreateSampleLoops();
            loops.add(0);
            loops.add(32);
            loops.add(0);

            StADSR *adsr;
            StEnvelope *env;
            BezierEditState *beState;
            Envelope *beData;

            // Update volume attack envelope (final level = 90%)
            adsr <= s.getOrCreateVolADSR();
            env <= adsr.getOrCreateEnvAttack();
            beState <= new BezierEditState;
            beData <= env.getOrCreateData();
            Dialogs.curve_dialog.initAttackEnvFMStack(beState, beData);
            env.setMetaData(#(deref beState));
            env.intensity = 1.0;
            env.timescale = 200.0;

            StPluginShared pluginShared <= pluginInfo.createSharedInstance();
            s.setVoicePluginShared(0/*pluginIdx*/, #(deref pluginShared));

            // Load reset values
            int paramIdx = 0;
            loop(pluginInfo.numParams)
            {
               pluginShared.setParamValue(paramIdx, pluginInfo.getParamReset(paramIdx));
               paramIdx++;
            }

            handleSelectSample(false/*bStopAudio*/);

            Global.Print("fmstack_init: initialize sample");
         }
         else
         {
            Global.Error("fmstack_init: fm_stack_v2_medres voice plugin not found");
         }
      }
   }

   // <ui_cmd.png>
   public method handlePageCmdAnalyzePartials() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            if(s.enableTimestretch && s.enableStaticCyclelen)
            {
               int cycleLen = s.timestretchGranularity;
               if(16 <= cycleLen <= 4096)
               {
                  smp.analyzeAndUpdatePartials();
               }
               else
                  Global.Warning("PageSample::handlePageCmdAnalyzePartials: invalid wavetable cycleLen="+cycleLen+", must be 16..4096 frames");
            }
            else
               Global.Warning("analyze_partials: not a fixed cyclelen wavetable zone");
         }
         else
            Global.Warning("analyze_partials: no zone selected");
      }
   }

   // <ui_cmd.png>
   public method handlePageCmdMMSpeedSyncInit() {
      Sample smp <= getSelectedSample();
      if(null != smp)
      {
         smp.markParamsAsModified();

         local PointerArray zones <= getSelectedZones();
         StSample *s;
         foreach s in zones
         {
            s.setMMSrc(0, STSAMPLE_MM_SRC_CC1_MODWHEEL);
            s.setMMDst(0, STSAMPLE_MM_DST_SYNC_SPEED);
            s.setMMAmt(0, 7.5);
            s.setMMEnable(0, true);

            s.setMMSrc(1, STSAMPLE_MM_SRC_CC1_MODWHEEL);
            s.setMMDst(1, STSAMPLE_MM_DST_VOLUME);
            s.setMMAmt(1, -1.0);
            s.setMMEnable(1, true);

            s.setMMSrc(2, STSAMPLE_MM_SRC_CONST_1);
            s.setMMDst(2, STSAMPLE_MM_DST_SYNC_SLEW);
            s.setMMAmt(2, 0.4);
            s.setMMEnable(2, true);
         }

         handleSelectSample(false/*bStopAudio*/);

         Global.Print("mm_speed_sync_init: update "+zones.numElements+" zone"+Utils.GetPluralString(zones.numElements));
      }
   }

   // <ui_cmd.png>
   public method handlePageCmdDumpVCalPreset() {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= getFirstSelectedZone();
         if(null != s)
         {
            int laneIdx = sample.last_edited_vcal_lane_idx;
            trace "\n[my vcal preset]";
            stdout s.getVoiceCalibrationModulo(laneIdx);
            int voiceIdx = 0;
            loop(8)
            {
               stdout " "+s.getVoiceCalibrationValue(laneIdx, voiceIdx++);
            }
            stdout "\n\n";
         }
      }
   }

   // <ui_cmd.png>
   public =replay= method handlePageCmdWTDownsample(int _cycleLen, int _div) : boolean {
      int newCycleLen = _cycleLen / _div;
      if(newCycleLen >= 8)
      {
         Sample sample <= getSelectedSample();
         if(null != sample)
         {
            StWaveform wf <= sample.waveform;
            FloatArray smpDat <= wf.sampleData;
            int oldLen = smpDat.numElements / wf.numChannels;
            int numWaves = oldLen / _cycleLen;
            // // trace "xxx smpDat.numElements="+smpDat.numElements+" oldLen="+oldLen+" cycleLen="+_cycleLen+" numWaves="+numWaves;
            if(numWaves > 0)
            {
               sv_wave.undoBegin("handlePageCmdWTDownsample");
               sv_wave.undoActionRemove( (newCycleLen*numWaves), oldLen - (newCycleLen*numWaves), SampleView.CHANNEL_MASK_LR);
               sv_wave.undoActionModify(0, (newCycleLen*numWaves), SampleView.CHANNEL_MASK_LR);

               int newLen = numWaves * newCycleLen;
               local FloatArray smpDatNew;
               smpDatNew.alloc(newLen);
               smpDatNew.useAll();

               int k = 0;
               int j = 0;
               loop(newLen)
               {
                  int chIdx = 0;
                  loop(wf.numChannels)
                     smpDatNew[k++] = smpDat[j + chIdx++];
                  j += _div * wf.numChannels;
               }
               smpDat.unlinkFrom(smpDatNew);
               sv_wave.undoEnd();
               sample.verifyAllSampleAreas();
               sample.markWaveformAsModified();

               sv_wave.showAll();
               tv_zones.tableModelChanged();
               tv_loops.tableModelChanged();
               handleSelectZone(false/*bStopAudio*/);
               Global.Print("Downsample wavetable to cycleLen="+_cycleLen+"/"+_div+"="+newCycleLen+" ("+numWaves+" waves)");
               return true;
            }
            else
            {
                Global.Error("numWaves is 0");
            }
         }
      }
      else
      {
         Global.Error("resulting cycleLen is < 8");
      }
      return false;
   }

   // <ui_cmd.png>
   public =replay= method handlePageCmdWTResample(int _cycleLenOld, int _cycleLenNew) : boolean {
      Sample sample <= getSelectedSample();
      if(null != sample && _cycleLenOld != _cycleLenNew)
      {
         StWaveform wf <= sample.waveform;
         FloatArray smpDat <= wf.sampleData;
         int numCh = wf.numChannels;
         int oldLen = smpDat.numElements / numCh;
         int numWaves = oldLen / _cycleLenOld;
         // // trace "xxx smpDat.numElements="+smpDat.numElements+" oldLen="+oldLen+" cycleLen="+_cycleLen+" numWaves="+numWaves;
         if(numWaves > 0)
         {
            sv_wave.undoBegin("handlePageCmdWTResample");

            int newLen = numWaves * _cycleLenNew;

            if(_cycleLenNew < _cycleLenOld)
            {
               // Resample to shorter cyclelen
               sv_wave.undoActionRemove( (_cycleLenNew*numWaves), oldLen - (_cycleLenNew*numWaves), SampleView.CHANNEL_MASK_LR);
               sv_wave.undoActionModify(0, (_cycleLenNew*numWaves), SampleView.CHANNEL_MASK_LR);
            }
            else
            {
               // Resample to longer cyclelen
               sv_wave.undoActionAdd( (_cycleLenOld*numWaves), newLen - (_cycleLenOld*numWaves), SampleView.CHANNEL_MASK_LR);
               sv_wave.undoActionModify(0, (_cycleLenOld*numWaves), SampleView.CHANNEL_MASK_LR);
            }

            local FloatArray smpDatNew;
            smpDatNew.allocAndFill(newLen, 0);

            int cycleFrameOffOld = 0;
            float phaseInc = float(_cycleLenOld) / _cycleLenNew;
            int k = 0;
            loop(numWaves)
            {
               float phaseOff = 0.0f;
               loop(_cycleLenNew)
               {
                  int idxOldA = cycleFrameOffOld + phaseOff;
                  int idxOldB = cycleFrameOffOld + ((int(phaseOff) + 1) % _cycleLenNew);
                  idxOldA = (idxOldA * numCh);
                  idxOldB = (idxOldB * numCh);
                  float amtB = frac(phaseOff);
                  loop(numCh)
                  {
                     smpDatNew[k++] = smpDat[idxOldA] + (smpDat[idxOldB] - smpDat[idxOldA]) * amtB;
                     idxOldA++;
                     idxOldB++;
                  }
                  phaseOff += phaseInc;
               }
               cycleFrameOffOld += _cycleLenOld;
            }

            smpDat.unlinkFrom(smpDatNew);
            sv_wave.undoEnd();
            sample.verifyAllSampleAreas();
            sample.markWaveformAsModified();

            sv_wave.showAll();
            tv_zones.tableModelChanged();
            tv_loops.tableModelChanged();
            handleSelectZone(false/*bStopAudio*/);
            Global.Print("Resample WT from "+_cycleLenOld+" to "+_cycleLenNew+" ("+numWaves+" wave"+Utils.GetPluralString(numWaves)+")");
            return true;
         }
         else
         {
            Global.Error("numWaves is 0");
         }
      }
      return false;
   }

   // <ui_cmd.png>
   public =replay= method handlePageCmdWTShiftZCross(int _cycleLen) : boolean {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StWaveform wf <= sample.waveform;
         FloatArray smpDat <= wf.sampleData;
         int numCh = wf.numChannels;
         int numWaves = smpDat.numElements / (_cycleLen * numCh);
         if(numWaves > 0)
         {
            sv_wave.undoBegin("handlePageCmdWTShiftZCross");
            sv_wave.undoActionModify(0, (numWaves * _cycleLen), SampleView.CHANNEL_MASK_LR);

            local FloatArray smpDatCycle;
            smpDatCycle.alloc(_cycleLen * numCh);
            smpDatCycle.useAll();

            int waveIdx = 0;
            loop(numWaves)
            {
               // Copy current cycle to scratch buffer
               smpDatCycle.copyFrom(smpDat, (waveIdx * _cycleLen * numCh), (_cycleLen * numCh), 0);

               // Find zero-crossing (left-channel)
               float fLast = smpDatCycle[ (_cycleLen-1)*numCh + 0 ];
               int i = 0;
               loop(_cycleLen)
               {
                  float f = smpDatCycle[i];
                  if( (f >= 0.0f && fLast <= 0.0f) ||
                      (f <= 0.0f && fLast >= 0.0f)
                      )
                     break;
                  fLast = f;
                  i += numCh;
               }

               // Copy adjusted cycle back to waveform
               i /= numCh;
               if(i < _cycleLen)
               {
                  trace "[trc] handlePageCmdWTShiftZCross: waveIdx="+waveIdx+" zeroCrossing_i="+i;
                  tksampleedit_ringbuf_copy_samples(smpDat, numCh/*dstNumCh*/, 0/*dstChOff*/, (waveIdx * _cycleLen)/*dstFrameOff*/,
                                                    _cycleLen/*numFrames*/, 2/*numCh*/,
                                                    smpDatCycle, numCh/*srcNumCh*/, 0/*srcChOff*/, i/*srcFrameOff*/
                                                    );

               }

               waveIdx++;
            }

            sv_wave.undoEnd();
            sample.markWaveformAsModified();
            sv_wave.redraw();
            tv_zones.tableModelChanged();
            tv_loops.tableModelChanged();
            Global.Print("Shift wavetable cycles zo zero-crossings (cycleLen="+_cycleLen+" "+numWaves+" waves)");
            return true;
         }
         else
         {
            Global.Error("resulting numWaves is 0");
         }
      }
      return false;
   }

   // <ui_cmd.png>
   protected method cmdResizeWindow(int _w, int _h) {
      Global.Debug("cmdResizeWindow(w="+_w+" h="+_h+")");
      if(960 <= _w < 4000)
      {
         if(504 <= _h < 4000)
         {
            if(!Viewport.isFullScreen())
            {
               Global.Debug("cmdResizeWindow: call UI.OpenWindow("+_w+", "+_h+")");
               UI.QueueResize(_w, _h);
            }
         }
         else
            Global.Warning("height must be 504..4000");
      }
      else
         Global.Warning("width must be 960..4000");
   }

   // <ui_cmd.png>
   public virtual cmdExec(StringArray _argv) : boolean {
      Sample sample <= getSelectedSample();
      Global.Debug("PageSample::cmdExec: argv="+#(_argv));
      int numZonesPerGroup;
      int times;
      int wtCycleLen;

      switch(_argv.get(0))
      {
         case "amiga_init":
            handlePageCmdAmigaInit();
            return true;

         case "autotag_dir":
            if(_argv.numElements > 1)
            {
               Samples.AutoTagDir(_argv.get(1), Utils.StringArrayRegion(_argv, 2, 99));
               return true;
            }
            return false;

         case "cycle_amiga_init":
            handlePageCmdCycleAmigaInit();
            return true;

         case "cycle_debug":
            handlePageCmdCycleDebug();
            return true;

         case "cycle_init":
            handlePageCmdCycleInit();
            return true;

         case "cycle_mix":
            handlePageCmdCycleMix();
            return true;

         case "cycle_tree_debug":
            handlePageCmdCycleTreeDebug();
            return true;

         case "__dev__cycle_autosave_patch_after_recompile":
            handlePageCmdCycleAutoSavePatch();
            return true;

         case "fmstack_init":
            handlePageCmdFMStackInit();
            return true;

         case "analyze_partials":
            handlePageCmdAnalyzePartials();
            return true;

         case "fade_regions":
            int fadeInNumFrames = 24;
            int fadeOutNumFrames = 384;
            if(_argv.numElements >= 2)
               fadeInNumFrames = mathClampi(int(_argv[1]), 0, 65536*8);
            if(_argv.numElements >= 3)
               fadeOutNumFrames = mathClampi(int(_argv[2]), 0, 65536*8);
            handlePageCmdFadeRegions(fadeInNumFrames, fadeOutNumFrames);
            return true;

         case "mm_speed_sync_init":
            handlePageCmdMMSpeedSyncInit();
            return true;

         case "debugPrintZoneOffsetDeltas":
            debugPrintZoneOffsetDeltas();
            return true;

         case "create_zone_grid":
            if(3 == _argv.numElements)
            {
               handlePageCmdCreateZoneGrid(_argv.get(1)/*num*/, _argv.get(2)/*sz*/);
               return true;
            }
            break;

         case "insert_crossfade_loops_8192":
            handlePageCmdCrossfadeLoops8192();
            break;

         case "load_default_namespace_names":
            current_project.loadDefaultSampleNamespaceNames();
            updateNamespaceOptions();
            updateSampleTable(null/*reselectSample*/);
            break;

         case "normalize_regions":
            int fadeNumFrames = 256;
            if(2 == _argv.numElements)
               fadeNumFrames = mathClampi(int(_argv[1]), 0, 65536*8);
            handlePageCmdNormalizeRegions(fadeNumFrames);
            return true;

         case "partial_window_bits":
            if(2 == _argv.numElements)
               handlePageCmdPartialWindowBits(int(_argv[1]));
            else
               handlePageCmdPartialWindowBits(10);
            return true;

         case "remove_all_zones":
            handlePageCmdRemoveAllZones();
            return true;

         case "postrec_init_drum":
            handlePageCmdPostRecInitDrum();
            return true;

         case "resize_waveform":
            if(_argv.numElements >= 2)
            {
               int numFrames = _argv.get(1);
               if(_argv.numElements >= 3)
                  times = _argv.get(2);
               else
                  times = 1;
               return handlePageCmdResizeWaveform(numFrames, times);
            }
            else
               Global.Error("missing \'numFrames\' arg");
            break;

         case "resize_16th":
            if(_argv.numElements >= 2)
            {
               if(_argv.numElements >= 3)
                  times = _argv.get(2);
               else
                  times = 1;
               return handlePageCmdResize16th(_argv.get(1)/*num16th*/, times);
            }
            else
               Global.Error("missing \'num16th\' arg");
            break;

         case "resize_window":
            cmdResizeWindow(int(_argv.get(1)), int(_argv.get(2)));
            return true;

         case "select_pct":
            if(_argv.numElements >= 2)
            {
               if(_argv.numElements >= 3)
               {
                  return handlePageCmdSelectPct(_argv.get(1)/*off*/, _argv.get(2)/*len*/);
               }
               else
                  Global.Error("missing \'len\' arg");
            }
            else
               Global.Error("missing \'off\' arg");
            break;

         case "snap_loop_starts_to_zerocrossings":
            int snapStartZCMaxFramesDist = 1024;
            if(_argv.numElements >= 2)
            {
               snapStartZCMaxFramesDist = mathMaxi(0, _argv[1]);
            }
            handlePageCmdSnapSelectedZonesFirstLoopStartToZeroCrossing(snapStartZCMaxFramesDist);
            return true;

         case "snap_loop_ends_to_zerocrossings":
            handlePageCmdSnapSelectedZonesFirstLoopEndToZeroCrossing();
            return true;

         case "tighten_zone_regions":
            handlePageCmdTightenZoneRegions();
            return true;

         case "uid":
            if(_argv.numElements >= 2)
            {
               return handlePageCmdUID(_argv.get(1)/*uid*/);
            }
            else
               Global.Error("missing \'uid\' arg");
            break;

         case "update_mod_zones_even":
            numZonesPerGroup = 3;
            if(_argv.numElements >= 2)
            {
               numZonesPerGroup = mathClampi(_argv.get(1), 1, mathMini(128, sample.getNumZones()));
            }
            return handlePageCmdUpdateZonesEven(false/*bVel*/, numZonesPerGroup);

         case "update_vel_zones_even":
            numZonesPerGroup = 3;
            if(_argv.numElements >= 2)
            {
               numZonesPerGroup = mathClampi(_argv.get(1), 1, mathMini(128, sample.getNumZones()));
            }
            return handlePageCmdUpdateZonesEven(true/*bVel*/, numZonesPerGroup);

         case "render_sine":
            return handleRender(0, _argv);

         case "render_triangle":
            return handleRender(1, _argv);

         case "render_saw_up":
            return handleRender(2, _argv);

         case "render_saw_down":
            return handleRender(3, _argv);

         case "render_pulse":
            return handleRender(4, _argv);

         case "render_noise_white":
            return handleRender(5, _argv);

         case "render_noise_pink":
            return handleRender(6, _argv);

         case "render_noise_blue":
            return handleRender(7, _argv);

         case "render_noise_brown":
            return handleRender(8, _argv);

         case "render_noise_violet":
            return handleRender(9, _argv);

         case "reorder_cycle_patches":
            handleReorderCyclePatches();
            return true;

         case "reorder_zones_by_list":
            handlePageCmdReorderZonesByList(_argv);
            return true;

         case "reorder_waveform_by_zones":
            handlePageCmdReorderWaveformByZones();
            return true;

         case "vcal_dump_preset":
            handlePageCmdDumpVCalPreset();
            return true;

         case "wt_downsample":
            if(_argv.numElements >= 2)
            {
               wtCycleLen = _argv.get(1);
               if(wtCycleLen >= 8)
               {
                  if(_argv.numElements >= 3)
                  {
                     int wtDiv = _argv.get(2);
                     if(2 <= wtDiv < 32)
                        return handlePageCmdWTDownsample(wtCycleLen, wtDiv);
                     else
                        Global.Error("invalid \'div\' arg (must be in 2..32 range)");
                  }
                  else
                     Global.Error("missing \'div\' arg");
               }
               else
                  Global.Error("invalid \'cyclelen\' (must be >=8)");
            }
            else
               Global.Error("missing \'cyclelen\' arg");
            return true;

         case "wt_resample":
            if(_argv.numElements >= 2)
            {
               wtCycleLen = _argv.get(1);
               if(wtCycleLen >= 8)
               {
                  if(_argv.numElements >= 3)
                  {
                     int wtCycleLenNew = _argv.get(2);
                     if(8 <= wtCycleLenNew <= 16384)
                        return handlePageCmdWTResample(wtCycleLen, wtCycleLenNew);
                     else
                        Global.Error("invalid \'cyclelenNew\' arg (must be in 8..16384 range)");
                  }
                  else
                     Global.Error("missing \'div\' arg");
               }
               else
                  Global.Error("invalid \'cyclelen\' (must be >=8)");
            }
            else
               Global.Error("missing \'cyclelen\' arg");
            return true;

         case "wt_shift_zcross":
            if(_argv.numElements >= 2)
            {
               wtCycleLen = _argv.get(1);
               if(wtCycleLen >= 8)
               {
                  return handlePageCmdWTShiftZCross(wtCycleLen);
               }
               else
                  Global.Error("invalid \'cyclelen\' (must be >=8)");
            }
            else
               Global.Error("missing \'cyclelen\' arg");
            return true;
      }
      return false;
   }

   // <method.png>
   public method getSampleViewSelectionStartOffset() : int {
      return sv_wave.getSelectionStartOffset();
   }

   // <method.png>
   public method getSampleViewSelectionStartLen() : int {
      return sv_wave.getSelectionLen();
   }

   // <ui_handle.png>
   protected =replay= method handleDropFiles_ReplaceSampleSelection(String _pathname) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         boolean bOldSuppressUnderrunError = Audio.PushSuppressUnderrunError();

         local Sample smp;
         smp.init();
         if(smp.initFromWavFile(_pathname, false/*bForceLoop*/))
         {
            sv_wave.replaceSelection(smp.waveform.sampleData,
                                     smp.waveform.numChannels,
                                     true/*bUndo*/,
                                     false/*bAllowChannelConversion*/
                                     );
            sample.markWaveformAsModified();
            sample.analyzeAndUpdatePartials();
            current_project.markAsModified();
         }
         else
         {
            Global.Error("Failed to load \""+_pathname+"\"");
         }

         Audio.PopSuppressUnderrunError(bOldSuppressUnderrunError);
      }
   }

   // <method.png>
   public virtual svBeginReallocSamples() {
      Global.Debug2("PageSample::svBeginReallocSamples");
      // SampleViewPlugin
      Audio.ResetAllTempSamples();
      Audio.ResetAllSampleVoices(getSelectedSample());
      // // Audio.UpdateTemporarySampleFromWaveform(null);
      TKS.lockNamedMutex("replay");
   }

   // <method.png>
   public virtual svHandleDeleteRegion(int offset, len) {
      // SampleViewPlugin
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         int newWfNumFrames = sample.waveform.numFrames;
         StSample s <= sample.sample_bank.firstSample;
         while(null != s)
         {
            s.handleShiftSampleArea(offset, -len);
            s.verifySampleAreas();

            // Update visible sample zone area (SampleView)
            local Double oldZoom   <= s.uiSVZoom;
            float        oldOffset  = s.uiSVOffset;
            local Double newZoom;
            local Float  newOffset;
            SampleView.UpdateOffsetAndZoomAfterInsertDelete(offset, -len,
                                                            newWfNumFrames,
                                                            oldZoom, oldOffset,
                                                            newZoom, newOffset
                                                            );
            s.uiSVZoom   = newZoom;
            s.uiSVOffset = newOffset;

            // Next zone
            s <= s.next;
         }
         sample.analyzeAndUpdatePartials();
      }
   }

   // <method.png>
   public virtual svHandleInsertRegion(int offset, len) {
      trace "[trc] PageSample::svHandleInsertRegion: offset="+offset+" len="+len;
      // SampleViewPlugin
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         int newWfNumFrames = sample.waveform.numFrames;
         StSample s <= sample.sample_bank.firstSample;
         while(null != s)
         {
            // // trace "xxx    call s.handleShiftSampleArea(offset="+offset+", len="+len+")  s.firstLoopOffset="+s.firstLoopOffset;
            s.handleShiftSampleArea(offset, len);
            // // trace "xxx      2 s.firstLoopOffset="+s.firstLoopOffset;
            s.verifySampleAreas();

            // Update visible sample zone area (SampleView)
            local Double oldZoom   <= s.uiSVZoom;
            float        oldOffset  = s.uiSVOffset;
            local Double newZoom;
            local Float  newOffset;
            SampleView.UpdateOffsetAndZoomAfterInsertDelete(offset, len,
                                                            newWfNumFrames,
                                                            oldZoom, oldOffset,
                                                            newZoom, newOffset
                                                            );
            s.uiSVZoom   = newZoom;
            s.uiSVOffset = newOffset;

            // Next zone
            s <= s.next;
         }
         sample.analyzeAndUpdatePartials();
      }
   }

   // <method.png>
   public virtual svHandleMoveRegion(int oldOffset, int len, int newOffset) {
      // SampleViewPlugin
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample s <= sample.sample_bank.firstSample;
         while(null != s)
         {
            s.handleMoveSampleArea(oldOffset, len, newOffset);
            s.verifySampleAreas();
            s <= s.next;
         }
         sample.analyzeAndUpdatePartials();
      }
   }

   // <method.png>
   public virtual svEndReallocSamples() {
      // SampleViewPlugin
      TKS.unlockNamedMutex("replay");
   }

   // <method.png>
   public virtual svHandleRenderHighlightChanged(boolean _bEnabled) {
      // SampleViewPlugin
      // (todo) set sample off+len or loop
   }

   // <method.png>
   public virtual svHandleViewChanged() {
      // SampleViewPlugin
      StSample s <= getFirstSelectedZone();
      if(null != s)
      {
         s.uiSVZoom     = sv_wave.getZoom();
         s.uiSVOffset   = sv_wave.getOffset();
         s.uiSVZoomYIdx = sv_wave.getZoomYIdx();
         // // trace "xxx handleViewChanged: off="+s.uiSVOffset+" zoom="+s.uiSVZoom;
      }
   }

   // <method.png>
   public =replay= method svHandleMarkerChanged(int _markerIdx, int _start, int _end) {
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         StSample selZone <= getFirstSelectedZone();
         int markerIdx = 0;
         StSample s <= sample.sample_bank.firstSample;
         while(null != s)
         {
            if(markerIdx == _markerIdx)
            {
               if(_start < (s.firstLoopOffset+s.firstLoopLen))
                  s.firstLoopLen = (s.firstLoopOffset+s.firstLoopLen) - _start;
               s.firstLoopOffset = _start;
               s.verifySampleAreas();
               if(@(s) == @(selZone))
               {
                  fp_zone_offset.setValue(s.firstLoopOffset);
                  fp_zone_len.setValue(s.firstLoopLen);
                  tv_loops.tableModelChanged();
                  sv_wave.setHighlight(s.firstLoopOffset, s.firstLoopOffset+s.firstLoopLen);
               }
               sample.markParamsAsModified();
               return;
            }
            s <= s.next;
            markerIdx++;
         }
      }
   }

   // <method.png>
   public method handleInsertFile(int _frameOff, String _pathName) {
      // -1: sel start
      // -2: end
      Sample sample <= getSelectedSample();
      if(null != sample)
      {
         if(-1 == _frameOff)
         {
            _frameOff = sv_wave.getSelectionStartOffset();
         }
         else if(-2 == _frameOff)
         {
            _frameOff = (sample.waveform.numFrames) - 1;
         }

         local Sample smp;
         smp.init();
         if(smp.initFromWavFile(_pathName, false/*bForceLoop*/))
         {
            if(_frameOff < 0)
               _frameOff = 0;
            sv_wave.setSelection(_frameOff, _frameOff);
            sv_wave.sel_channel_mask = SampleView.CHANNEL_MASK_LR;
            SampleView.SetClipboardFromArray(smp.waveform.sampleData,
                                             smp.waveform.numChannels
                                             );
            sv_wave.pasteSelection(true/*bUndoBegin*/);
            SampleView.FreeClipboard();

            sample.markWaveformAsModified();
            sample.analyzeAndUpdatePartials();
            current_project.markAsModified();
         }
         else
         {
            Global.Error("Failed to load \""+_pathName+"\"");
         }
      }
   }

   // <method.png>
   public method handleReplaceSampleSelectionByFile(String _dropFileName) {
      if(null != _dropFileName)
      {
         String *sFileName;
         if(_dropFileName >= ".mp3")
            sFileName <= Utils.DecodeMP3(_dropFileName);
         else if(Utils.IsSoXSupportedFileFormat(_dropFileName))
            sFileName <= Utils.ConvertWithSoX(_dropFileName);
         else
            sFileName <= _dropFileName;

         if(sv_wave.getSelectionLen() > 15)
         {
            handleDropFiles_ReplaceSampleSelection(sFileName);
         }
         else
         {
            // Insert waveform at selection start
            int dropFrameOff = sv_wave.getDropFilesFrameOff();
            handleInsertFile(dropFrameOff, sFileName);
         }
         // // handleDropFiles(dropFileNames, dropFrameOff, (VMOD_LSHIFT != UI.GetKeyMod())/*bSeparateSilence*/);
      }
   }

   // <method.png>
   protected =replay= method handleDropFiles(Layer _dropLayer, StringArray _fileNames) {

      String *pathName;
      String *pathNameNative;
      String *sPathName;
      Sample *sample;
      boolean bOldSuppressUnderrunError;

      if(null != _dropLayer)
      {
         // Zone
         if(_dropLayer.hasParentOrIs(tv_zones))
         {
            sample <= getSelectedSample();
            if(null != sample)
            {
               Global.Debug("PageSample::onDropFiles:: create zone(s), fileNames="+#(_fileNames));

               int numZonesAppended = 0;
               int oldNumZones = sample.getNumZones();

               foreach pathName in _fileNames
               {
                  bOldSuppressUnderrunError = Audio.PushSuppressUnderrunError();

                  pathNameNative <= Utils.ToNativePathName(pathName);
                  Global.Debug("PageSample::onDropFiles<zones>: pathNameNative=\""+pathNameNative+"\"");

                  if(pathNameNative >= ".mp3")
                     sPathName <= Utils.DecodeMP3(pathNameNative);
                  else if(Utils.IsSoXSupportedFileFormat(pathNameNative))
                     sPathName <= Utils.ConvertWithSoX(pathNameNative);
                  else
                     sPathName <= pathNameNative;

                  if(pathName >= Global.SAMPLE_FILE_SUFFIX/*.esa*/)
                  {
                     trace "PageSample::onDropFiles:: append .esa zones (todo)";
                  }
                  else if(sPathName.toLower() >= ".wav")
                  {
                     Global.Debug("PageSample::onDropFiles: append zone from wav file \""+pathName+"\"");
                     numZonesAppended += (true == sample.appendZoneFromWavFile(sPathName, false/*bLoop*/)) ? 1 : 0;
                  }

                  Audio.PopSuppressUnderrunError(bOldSuppressUnderrunError);
               }

               // Select new zones
               if(numZonesAppended > 0)
               {
                  handleSelectSample(true/*bStopAudio*/);

                  Global.Debug2("PageSample::appendZones: move cursor to oldNumZones="+oldNumZones);
                  tv_zones.moveCursorToRowNoAction(oldNumZones);
                  tv_zones.makeCursorRowVisible();
                  local IntArray newSel;
                  int rowIdx = oldNumZones;
                  newSel.alloc(numZonesAppended);
                  loop(numZonesAppended)
                     newSel.add(rowIdx++);
                  tv_zones.setSelectedRows(newSel);

                  handleSelectZone(true/*bStopAudio*/);
               }

               sample.analyzeAndUpdatePartials();
            }

            Global.Print("Append "+numZonesAppended+" zone"+Utils.GetPluralString(numZonesAppended)+" from "+_fileNames.numElements+" file"+Utils.GetPluralString(_fileNames.numElements));

            return true;
         }

         // Sample
         if(_dropLayer.hasParentOrIs(tv_samples))
         {
            // Add sample(s)
            int numSamplesAdded = 0;

            foreach pathName in _fileNames
            {
               bOldSuppressUnderrunError = Audio.PushSuppressUnderrunError();

               pathNameNative <= Utils.ToNativePathName(pathName);
               Global.Debug("PageSample::onDropFiles<samples>: pathNameNative=\""+pathNameNative+"\"");

               if(pathNameNative >= ".mp3")
                  sPathName <= Utils.DecodeMP3(pathNameNative);
               else if(Utils.IsSoXSupportedFileFormat(pathNameNative))
                  sPathName <= Utils.ConvertWithSoX(pathNameNative);
               else
                  sPathName <= pathNameNative;

               if(pathNameNative >= Global.SAMPLE_FILE_SUFFIX/*.esa*/)
               {
                  createSample(null/*name*/, getNewSamplePrefIdx());

                  sample <= getSelectedSample();
                  if(null != sample)
                  {
                     // // local String rootPath <= Global.GetProjectSamplesWavRootPath();
                     if(loadSample2(pathNameNative, STConfig.sample_rootpath, false/*bProject*/, false/*bCreateSample*/))
                     {
                        handleSelectSample(true/*bStopAudio*/);
                        numSamplesAdded++;
                     }
                  }
               }
               else if(sPathName.toLower() >= ".wav")
               {
                  createSample(null/*name*/, getNewSamplePrefIdx());
                  sample <= getSelectedSample();
                  if(null != sample)
                  {
                     if(loadSampleWav(sPathName, false/*bForceLoop*/))
                     {
                        sample.assignUniqueName(Utils.BaseName(pathName));
                        sample.analyzeAndUpdatePartials();
                        handleSelectSample(true/*bStopAudio*/);
                        numSamplesAdded++;
                     }
                  }
               }

               Audio.PopSuppressUnderrunError(bOldSuppressUnderrunError);
            }

            Global.Print("Add "+numSamplesAdded+" sample"+Utils.GetPluralString(numSamplesAdded)+" from "+_fileNames.numElements+" file"+Utils.GetPluralString(_fileNames.numElements));

            return true;
         }
      } // if dropLayer
      return false;
   }

   // <method.png>
   public virtual onDropObject(Object _o, MouseEvent _ev) : boolean {
      Layer dropLayer <= UI.FindLayerAtXY(_ev.mouse_abs_x, _ev.mouse_abs_y);
      Global.Debug("PageSample::onDropObject: dropLayer="+#(dropLayer));
      if(null != dropLayer)
         handleDropFiles(dropLayer, _o);
      return false;
   }

   // <ui_handle.png>
   public virtual onDropFiles(StringArray _fileNames) : boolean {
      if(_fileNames.numElements > 0)
      {
         Layer dropLayer <= UI.FindLayerAtDropXY();
         trace "[trc] PageSample::onDropFiles: dropLayer="+#(dropLayer);
         return handleDropFiles(dropLayer, _fileNames);
      }
      return false;
   }

   // <method.png>
   protected method returnToPreviousPage() {
      if( null != mod_sample || null != sample_pad || ui_parent_track_nr >= 0)
      {
         if(b_return_to_projects_page)
         {
            b_return_to_projects_page = false;
            showInstrumentTracks();
         }
         else
         {
            PageProject pgProject <= root_form.pg_project;
            pgProject.handleEditFocusTrack();
         }
      }
      else
      {
         showAudioTracks();
      }
   }

   // <ui_focus.png>
   protected method focusPreviousTable() : boolean {
      if(tv_samples.hierarchyHasKeyboardFocus())
      {
         ts_zone.setActiveTabIndex(ZONE_TAB_FX/*Plugins*/);
         UI.SetKeyboardFocus(f_plugin.tv_plugins);
         f_plugin.tv_plugins.redraw();
         return true;
      }
      else if(f_plugin.tv_plugins.hierarchyHasKeyboardFocus())
      {
         ts_zone.setActiveTabIndex(ZONE_TAB_LOOPS);
         UI.SetKeyboardFocus(tv_loops);
         tv_loops.redraw();
         return true;
      }
      else if(tv_loops.hierarchyHasKeyboardFocus())
      {
         UI.SetKeyboardFocus(tv_zones);
         tv_zones.redraw();
         return true;
      }
      else if(tv_zones.hierarchyHasKeyboardFocus())
      {
         ts_zone.setActiveTabIndex(ZONE_TAB_LOOPS);
         UI.SetKeyboardFocus(tv_samples);
         tv_samples.redraw();
         return true;
      }
      return false;
   }

   // <ui_focus.png>
   protected method focusNextTable() : boolean {
      if(tv_samples.hierarchyHasKeyboardFocus())
      {
         UI.SetKeyboardFocus(tv_zones);
         tv_zones.redraw();
         return true;
      }
      else if(f_plugin.tv_plugins.hierarchyHasKeyboardFocus())
      {
         ts_zone.setActiveTabIndex(ZONE_TAB_LOOPS);
         UI.SetKeyboardFocus(tv_samples);
         tv_samples.redraw();
         return true;
      }
      else if(tv_loops.hierarchyHasKeyboardFocus())
      {
         ts_zone.setActiveTabIndex(ZONE_TAB_FX/*Plugins*/);
         UI.SetKeyboardFocus(f_plugin.tv_plugins);
         f_plugin.tv_plugins.redraw();
         return true;
      }
      else if(tv_zones.hierarchyHasKeyboardFocus())
      {
         ts_zone.setActiveTabIndex(ZONE_TAB_LOOPS);
         UI.SetKeyboardFocus(tv_loops);
         tv_loops.redraw();
         return true;
      }
      return false;
   }

   // <ui_page.png>
   public virtual pageShowPrev() : boolean {
      if(tf_filter.hasKeyboardFocus())
      {
         cancelSampleFilter();
      }
      if(isSampleBrowserVisible())
      {
         hideSampleBrowser();
      }
      returnToPreviousPage();
      return true;
   }

   // <ui_kbd.png>
   protected method handleKeyEscape() : boolean {
      if(tf_filter.hasKeyboardFocus())
      {
         cancelSampleFilter();
         return true;
      }
      else if(isSampleBrowserVisible())
      {
         hideSampleBrowser();
         return true;
      }
      else
      {
         returnToPreviousPage();
         return true;
      }
      return false;
   }

   // <ui_mouse.png>
   public virtual onMouseDoubleClick(MouseEvent _ev) : boolean {
      if(UI.mouse_layer instanceof Panel)
         return handleKeyEscape();
      return false;
   }

   // <ui_kbd.png>
   public virtual onTriadKeyTimeout() {
      Dialogs.ShowTriadKeyHelpDialog("lctrl-x ..",
"
          d         :   Post-rec re-init drum sample
          s         :   Save sample
"
                                    ,
                                    this);
      return true;
   }

   // <ui_kbd.png>
   public virtual wantTriadKeyRepeat(Key _k) : boolean {
      // switch(_k.code)
      // {
      // }
         return false;
   }

   // <ui_kbd.png>
   public virtual onTriadKey(Key _k) : boolean {
      // No unicode events generated if lctrl- is still pressed
      int key = _k.pressed;
      boolean r = false;

      loop(2) // first pass for raw keycode, second pass for unicode
      {
         // US (reference) keyboard layout (raw keycodes)
         switch(key)
         {
            case 'd':
               handlePageCmdPostRecInitDrum();
               r = true; break;

            case 's':
               saveSample1();
               r = true; break;

            default:
               r = maybe; break;
         }

         if(true == r)
            return true;
         else if(maybe == r)
            Global.Print("");

         // see above
         key = _k.unicode;
      }

      return false;
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      // trace "[>>>] PageSample: key="+_k.name+" pressed="+_k.pressed+" mod="+_k.mod;

      switch(_k.pressed)
      {
         case 'q':
            if(0 != _k.mod)  // lshift-q ? (quit dialog)
              return false;
            break;

         case VKEY_ESCAPE:
            handleKeyEscape();
            return true;

         case VKEY_INSERT:
            if(tv_loops.hierarchyHasKeyboardFocus())
            {
               if(_k.modShift())
                  cloneLoop();
               else
                  createLoop();
            }
            else if(tv_zones.hierarchyHasKeyboardFocus())
            {
               if(_k.modShift())
               {
                  if(_k.modCtrl())
                     cloneZoneSynth();
                  else
                     cloneZone();
               }
               else
               {
                  createZone();
               }
            }
            else if(tv_samples.hierarchyHasKeyboardFocus())
            {
               if(_k.modShift())
                  cloneSample();
               else
                  showAddSampleMenu(true/*bFocusFirst*/);
            }
            return true;

         case VKEY_DELETE:
            if(tv_loops.hierarchyHasKeyboardFocus())
            {
               deleteSelectedLoop();
            }
            else if(tv_zones.hierarchyHasKeyboardFocus())
            {
               if(VMOD_LCTRL == UI.GetKeyMod())
                  deleteSelectedZone();
               else
                  deleteSelectedZoneConfirm();
            }
            else ////if(tv_samples.hierarchyHasKeyboardFocus())
            {
               if(VMOD_LCTRL == UI.GetKeyMod())
                  deleteSelectedSample();
               else
                  deleteSelectedSampleConfirm();
            }
            return true;

         case VKEY_LEFT:
            if(_k.modNone())
            {
               if(focusPreviousTable())
                  return true;
            }
            break;

         case VKEY_RIGHT:
         case 'd':
            if(_k.modNone())
            {
               if(focusNextTable())
                  return true;
            }
            break;

         case VKEY_UP:
            if(tv_loops.hierarchyHasKeyboardFocus())
            {
               if(_k.modCtrl())
               {
                  moveSelectedLoopUp();
                  return true;
               }
            }
            else if(tv_zones.hierarchyHasKeyboardFocus())
            {
               if(_k.modCtrl())
               {
                  moveSelectedZoneUp();
                  return true;
               }
            }
            else if(tv_samples.hierarchyHasKeyboardFocus())
            {
               if(_k.modCtrl())
               {
                  moveSelectedSampleUp();
                  return true;
               }
            }
            break;

         case VKEY_DOWN:
            if(tv_loops.hierarchyHasKeyboardFocus())
            {
               if(_k.modCtrl())
               {
                  moveSelectedLoopDown();
                  return true;
               }
            }
            else if(tv_zones.hierarchyHasKeyboardFocus())
            {
               if(_k.modCtrl())
               {
                  moveSelectedZoneDown();
                  return true;
               }
            }
            else if(tv_samples.hierarchyHasKeyboardFocus())
            {
               if(_k.modCtrl())
               {
                  moveSelectedSampleDown();
                  return true;
               }
            }
            break;

         case VKEY_TAB:
            if(_k.modCtrlOnly())
            {
               toggleZoneTableModel();
               return true;
            }
            break;
      }

      switch(_k.pressed)
      {
         // // case 96: // '^' (ger) / '`' (us)
         case VKEY_F11:
            if(0 == _k.mod)
            {
               showCycleSynthDialog();
               return true;
            }
            else if(_k.modCtrl())
            {
               if(_k.modShift())
               {
                  current_project.recalcProceduralWaveforms();
                  compileAllPatchPlugins();
               }
               else
               {
                  recalcAllCyclePatchesOrRenderTrack();
               }
               return true;
            }
            break;

         case VKEY_F1:
            showAudioTracks();
            return true;

         case '1':
            if(_k.modCtrl())
            {
               showAudioTracks();
               return true;
            }
            else
            {
               selectAllZones();
               return true;
            }
            break;

         case VKEY_F2:
            if(tv_samples.hasKeyboardFocus())
            {
               renameCurrentSampleInTable();
            }
            else if(tv_zones.hasKeyboardFocus())
            {
               renameCurrentZoneInTable();
            }
            else if(tv_loops.hasKeyboardFocus())
            {
               editLastEditedLoopsColumn();
            }
            else
            {
               showInstrumentTracks();
            }
            return true;

         case '2':
            if(_k.modCtrl())
            {
               showInstrumentTracks();
               return true;
            }
            else
            {
               selectPrevZone();
               return true;
            }
            break;

         case VKEY_F3:
            root_form.pg_project.handleEditFocusTrack();
            return true;

         case '3':
            if(_k.modCtrl())
            {
               root_form.pg_project.handleEditFocusTrack();
               return true;
            }
            else
            {
               selectNextZone();
               return true;
            }
            break;

         case '4':
            selectContextSamplePrev();
            return true;

         case '5':
            selectContextSampleNext();
            return true;

         case VKEY_F9:
            toggleSampleBrowser();
            return true;

         case '9':
            if(_k.modCtrl())
            {
               toggleSampleBrowser();
               return true;
            }
            break;

         case 'v':
            if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_ENV);  // show Envelopes tab
               editLastEditedVolumeSeg();
               return true;
            }
            else if(_k.modShiftOnly())
            {
               ts_groups.setActiveTabIndex(TAB_ENV);  // show Envelopes tab
               handleEditZoneEnvVolumeQuickPreset1(true/*bFocusFirst*/);
               return true;
            }
            break;

         case VKEY_F10:
            toggleDrumPadDialog();
            return true;

         case VKEY_F12:
            root_form.pg_audio.handleReloadVoicePlugins();
            handleSelectSample(false/*bStopAudio*/);
            return true;

         case '0':
            if(_k.modCtrl())
            {
               toggleDrumPadDialog();
               return true;
            }
            break;

         case 'b':
            handleSampleBrowse(!_k.modShift()/*b_load_create*/);
            return true;

         case 'c':
            if(_k.modNone())
            {
               if(tryShowCycleSynthDialog())
               {
                  dlg_synth.showCurveEditor();
                  return true;
               }
            }
            break;

         case 'e':
            if(_k.modNone())
            {
               if(tv_samples.hasKeyboardFocus())
                  execZoneRowClickDefaultAction();
               else if(!selectAndZoomToHighlightedRegion())
                  execZoneRowClickDefaultAction();
               return true;
            }
            else
               execZoneRowClickDefaultAction();
            break;

         case 'f':
            if(_k.modCtrl())
            {
               if(_k.modShift())
               {
                  if(cf_nsp_cur.isEditable())
                  {
                     UI.SetKeyboardFocus(cf_nsp_cur);
                     cf_nsp_cur.showPopup();
                  }
               }
               else
               {
                  UI.SetKeyboardFocus(cf_nsp_flt);
                  cf_nsp_flt.showPopup();
               }
               return true;
            }
            else if(_k.modShift())
            {
               UI.SetKeyboardFocus(tf_filter);
               tf_filter.onTabFocus();
               return true;
            }
            break;

         case 'g':
            tryShowVoicePluginParamEditor();
            return true;

         case 'm':
            showSampleMixerDialog();
            return true;

         case 'n':
            if(_k.modShift())
            {
               handleNewZoneFromClipboard();
               return true;
            }
            break;

         case 's':
            if(_k.modCtrl())
            {
               saveSample1();
               return true;
            }
            else
            {
               focusPreviousTable();
            }
            break;

         case 't':
         case '<':
            if(_k.modCtrl())
            {
               ts_groups.setActiveTabIndex(TAB_PATCH); // Show "Patch" tab  (not strictly necessary, though)
               handleTagsAutoAdd();
            }
            else if(_k.modShift())
            {
               ts_groups.setActiveTabIndex(TAB_PATCH); // Show "Patch" tab (menu opens below "T"ags button)
               showSampleTagsMenu(true/*bFocusFirst*/);
            }
            else
            {
               ts_groups.setActiveTabIndex(TAB_PATCH); // Show "Patch" tab  (not strictly necessary, though)
               showSampleTagSelectionDialog();
            }
            return true;

         case 'w':
            if(_k.modNone())
            {
               tryShowFMStackEditorOrCycleSynthDialogOrZoomToHighlightedRegion();
               return true;
            }
            break;
      }

      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      local String acName = _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();
      local ObjectAction *oa;
      local StringAction *sac;
      local IntAction *iac;
      local Sample *sample;
      local String *newSampleName;
      StSample *s;
      StSamplePlayer *sp;

      // Global.Debug("PageSample::consumeAction: acName=\""+acName+"\".");

      if(TA_ZONE_MIDI == acName)
      {
         // Periodic timer
         sp <= getCurrentSamplePlayer();
         if(sp.uiCheckResetAnyRedrawFlag())
         {
            sv_wave.redraw();  // show new live-recorded samples
            sample <= getSelectedSample();
            if(null != sample)  // should not be zero
               sample.markWaveformAsModified();
         }

         if(cb_zone_midi.isSelected())
            if(!cb_zone_solo.isSelected())
               trySelectZonesByMIDI();

         if(isDrumPadDialogVisible())
         {
            sp <= getCurrentSamplePlayer();
            IntArray lastNotes;
            lastNotes.empty();
            sp.getNoteHistory(lastNotes, 450/*maxDtMilliSec*/);
            dlg_drum_pad.highlightLastPlayedPads(lastNotes);  // redraw when changed
         }

         // sync sample selection with Synergy audio pattern
         if(null != mod_sample)
         {
            Track parentTrack <= current_project.getTrackByIdx(ui_parent_track_nr - 1);
            if(null != parentTrack)
            {
               if(-1 != parentTrack.parent_midi_track_dev_idx_hint)  // is "Audio" track ?
               {
                  Sample smp <= getSelectedSample();
                  if(null != smp)
                  {
                     if(mod_sample.sample_idx != current_project.getSampleIdx(smp))
                     {
                        // Sample selection changed
                        tm_samples.moveCursorToSampleIdxNoAction(mod_sample.sample_idx);
                        tv_samples.makeCursorRowVisible();
                        tv_samples.autoScrollAhead(2/*numRows*/);
                        handleSelectSample(false/*bStopAudio*/);
                     }
                  }
                  else
                  {
                     // Try to select sample (prev sample was null)
                     tm_samples.moveCursorToSampleIdxNoAction(mod_sample.sample_idx);
                     tv_samples.makeCursorRowVisible();
                     tv_samples.autoScrollAhead(2/*numRows*/);
                     handleSelectSample(false/*bStopAudio*/);
                  }
               }
            }
         }

         ta_zone_midi.reschedule();
         return true;
      }
      else if(TA_UPDATE_PARTIALS == acName)
      {
         sample <= getSelectedSample();
         if(null != sample)
            sample.analyzeAndUpdatePartials();
         return true;
      }
      else if(CurveDialog.ACTION_SYNC_CURVE == acName)
      {
         sv_wave.redraw();
         sample <= getSelectedSample();
         sample.markWaveformAsModified();
         current_project.markAsModified();
         return true;
      }
      else if(SampleMMForm.ACTION_SAMPLEMM_UPDATE_ENTRIES == acName)
      {
         sample <= getSelectedSample();
         s <= getFirstSelectedZone();
         int mmIdx = 0;
         loop(STSAMPLE_NUM_MODMATRIX_ENTRIES)
         {
            SampleMMForm mmForm <= mm_forms[mmIdx++];
            mmForm.showSample(s, sample);
         }
         redraw();
         return true;
      }
      else if(SampleLiveRecForm.ACTION_LIVEREC_EDITED == acName)
      {
         handleSelectZone(false/*bStopAudio*/);
         redraw();
         return true;
      }

      if(@(ap) == @(dlg_new_sample_name))
      {
         if(TextInputDialog.ACTION_TEXTINPUTDIALOGCLOSED == acName)
         {
            Global.Debug2("PageSample::createSampleDialog: _action="+#(_ac));
            sac <= _ac;
            newSampleName <= sac.getStringValue();
            if(!newSampleName.trim().isBlank())
            {
               createSample(deref newSampleName, getNewSamplePrefIdx());
               initNewSample(new_sample_mode);
            }
            else
            {
               Global.Error("Invalid sample name");
            }
         }
         else // if(TextInputDialog.ACTION_TEXTINPUTDIALOGCANCELED == acName)
         {
            dlg_new_sample_name <= null;
         }
         UI.SetKeyboardFocus(tv_samples);
         return true;
      }

      switch(@(ap))
      {
         case @(ts_zone):
            // // trace "xxx PageSample::consumeAction: select zone tab "+ts_zone.getActiveTabIndex();
            if(ZONE_TAB_CTL_1 == ts_zone.getActiveTabIndex() ||
               ZONE_TAB_CTL_2 == ts_zone.getActiveTabIndex()
               )
            {
               attachModMatrixVarForm();
            }
            return true;

         case @(Dialogs.curve_dialog):
            switch(acName)
            {
               case CurveDialog.ACTION_KEY_V:
                  Dialogs.HideCurveDialog();
                  pageFocusDefault();
                  break;

               case CurveDialog.ACTION_KEY_1:
                  switch(last_edited_env)
                  {
                     case 0: handleEditZoneFreqA();   break;
                     case 1: handleEditZoneVolumeA(); break;
                     case 2: handleEditZonePanA();    break;
                     case 3: handleEditZoneAuxA();    break;
                  }
                  break;

               case CurveDialog.ACTION_KEY_2:
                  switch(last_edited_env)
                  {
                     case 0: handleEditZoneFreqS();   break;
                     case 1: handleEditZoneVolumeS(); break;
                     case 2: handleEditZonePanS();    break;
                     case 3: handleEditZoneAuxS();    break;
                  }
                  break;

               case CurveDialog.ACTION_KEY_3:
                  switch(last_edited_env)
                  {
                     case 0: handleEditZoneFreqR();   break;
                     case 1: handleEditZoneVolumeR(); break;
                     case 2: handleEditZonePanR();    break;
                     case 3: handleEditZoneAuxR();    break;
                  }
                  break;

               case CurveDialog.ACTION_KEY_4:
                  editLastEditedFreqSeg();
                  break;

               case CurveDialog.ACTION_KEY_5:
                  editLastEditedVolumeSeg();
                  break;

               case CurveDialog.ACTION_KEY_6:
                  editLastEditedPanSeg();
                  break;

               case CurveDialog.ACTION_KEY_7:
                  editLastEditedAuxSeg();
                  break;
            }
            return true;

         case @(dlg_sample_tag_selection):
            if(SampleTagSelectionDialog.ACTION_TAGS_CHANGED == acName)
            {
               handleSampleTagsChanged();
            }
            pageFocusDefault();
            return true;

         case @(dlg_sample_browser):
            if(SampleBrowserDialog.ACTION_CLOSE == acName)
            {
               // Restore temp sample
               sample <= getSelectedSample();
               if(null != sample)
                  Audio.UpdateTempRefSample(sample);
            }
            return true;

         case @(dlg_sampleselection):
            if(SampleSelectionDialog.ACTION_OK == acName)
            {
               handleRemoveUnreferencedSamples2(dlg_sampleselection.getSelectedSamples());
            }
            else
            {
               Global.Print("Cancel SampleSelectionDialog");
            }
            dlg_sampleselection <= null;
            return true;

         case @(tf_name):
            if((TextField.ACTION_TEXTENTERED == acName) ||
               (TextField.ACTION_TEXTCHANGED == acName)
               )
            {
               handleSampleNameChanged();
            }

            if(TextField.ACTION_TEXTENTERED == acName)
            {
               pageFocusDefault();
            }
            return true;

         case @(cb_persistent):
            handlePersistenceChanged();
            return true;

         case @(tf_info):
            if(TextField.ACTION_RIGHT_CLICK    == acName ||
               TextField.ACTION_MULTILINE_EDIT == acName
               )
            {
               handleEditMultiLineSampleInfo();
            }
            else
            {
               handleSampleInfoChanged(tf_info.getText().trim(), false/*bFromTextEdit*/);

               if(TextField.ACTION_TEXTENTERED == acName)
                  pageFocusDefault();
            }
            return true;

         case @(bt_info):
            handleEditMultiLineSampleInfo();
            return true;

         case @(bt_tags):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showSampleTagsMenu(false/*bFocusFirst*/);
            }
            else if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleTagsAutoAdd();
            }
            else
            {
               showSampleTagSelectionDialog();
            }
            return true;

         case @(pm_tags):
            Global.Debug("pm_tags acName="+acName);

            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close tags menu.");
                  UI.SetKeyboardFocus(tv_samples);
                  break;

               case "tags_auto":
                  UI.SetKeyboardFocus(tv_samples);
                  handleTagsAutoAdd();
                  break;

               case "tags_copy":
                  UI.SetKeyboardFocus(tv_samples);
                  handleTagsCopy(null/*other*/);
                  break;

               case "tags_paste":
                  UI.SetKeyboardFocus(tv_samples);
                  handleTagsPaste();
                  break;

               case "tags_clear":
                  UI.SetKeyboardFocus(tv_samples);
                  handleTagsClear();
                  break;
            }
            return true;

         case @(dlg_info):
            sac <= _ac;
            handleSampleInfoChanged(dlg_info.getText().trim(), true/*bFromTextEdit*/);

            // Save geometry and cursor position
            if(UI.IsHiDPI())
               Utils.SaveGeometry(dlg_info, STConfig.sample_info_textedit_geo_hidpi);
            else
               Utils.SaveGeometry(dlg_info, STConfig.sample_info_textedit_geo_lodpi);

            if(TextEditDialog.ACTION_SAVE == acName)
            {
               dlg_info.hideNoSave();
               UI.SetKeyboardFocus(tf_info);
               tf_info.onTabFocus();
            }
            else if(TextEditDialog.ACTION_TEXTEDITDIALOGCLOSED == acName ||
                    TextEditDialog.ACTION_RIGHT_CLICK          == acName
                    )
            {
               UI.SetKeyboardFocus(tf_info);
               tf_info.onTabFocus();
            }
            return true;

         case @(bt_perf_mw):
            togglePerfCtlDecHex(fp_perf_mw);
            return true;

         case @(bt_perf_bc):
            togglePerfCtlDecHex(fp_perf_bc);
            return true;

         case @(bt_perf_fc):
            togglePerfCtlDecHex(fp_perf_fc);
            return true;

         case @(bt_perf_ex):
            togglePerfCtlDecHex(fp_perf_ex);
            return true;

         case @(bt_perf_gp1):
            togglePerfCtlDecHex(fp_perf_gp1);
            return true;

         case @(bt_perf_gp2):
            togglePerfCtlDecHex(fp_perf_gp2);
            return true;

         case @(bt_perf_gp3):
            togglePerfCtlDecHex(fp_perf_gp3);
            return true;

         case @(bt_perf_gp4):
            togglePerfCtlDecHex(fp_perf_gp4);
            return true;

         case @(fp_perf_mw):
            handleInitialPerfCtlChanged("CC#001 ModWheel", STSAMPLEPLAYER_PERFCTL_CC1_MODWHEEL, fp_perf_mw.getFloatValue());
            return true;

         case @(fp_perf_bc):
            handleInitialPerfCtlChanged("CC#002 BreathCtl", STSAMPLEPLAYER_PERFCTL_CC2_BREATHCTL, fp_perf_bc.getFloatValue());
            return true;

         case @(fp_perf_fc):
            handleInitialPerfCtlChanged("CC#004 FootCtl", STSAMPLEPLAYER_PERFCTL_CC4_FOOTCTL, fp_perf_fc.getFloatValue());
            return true;

         case @(fp_perf_ex):
            handleInitialPerfCtlChanged("CC#011 Expr", STSAMPLEPLAYER_PERFCTL_CC11_EXPRESSION, fp_perf_ex.getFloatValue());
            return true;

         case @(fp_perf_gp1):
            handleInitialPerfCtlChanged("CC#016 GP1", STSAMPLEPLAYER_PERFCTL_CC16_GENERAL_1, fp_perf_gp1.getFloatValue());
            return true;

         case @(fp_perf_gp2):
            handleInitialPerfCtlChanged("CC#017 GP2", STSAMPLEPLAYER_PERFCTL_CC17_GENERAL_2, fp_perf_gp2.getFloatValue());
            return true;

         case @(fp_perf_gp3):
            handleInitialPerfCtlChanged("CC#018 GP3", STSAMPLEPLAYER_PERFCTL_CC18_GENERAL_3, fp_perf_gp3.getFloatValue());
            return true;

         case @(fp_perf_gp4):
            handleInitialPerfCtlChanged("CC#019 GP4", STSAMPLEPLAYER_PERFCTL_CC19_GENERAL_4, fp_perf_gp4.getFloatValue());
            return true;

         case @(cb_perfctlfreeze):
            handlePerfCtlFreezeChanged();
            return true;

         case @(cb_sustain):
            handleSustainChanged();
            return true;

         case @(cm_type):
            handleSampleTypeChanged();
            return true;

         case @(fp_grid_size):
            handleGridSizeChanged();
            return true;

         case @(bt_reinit_zones):
            handleReInitZones();
            return true;

         case @(cb_reinit_loop):
            Global.Print("ReInit sample loops are "+Utils.GetEnableString(cb_reinit_loop.isSelected()));
            return true;

         case @(bt_reinit_drum):
            handlePageCmdPostRecInitDrum();
            return true;

         case @(fp_maxvoices):
            handleSampleMaxVoicesChanged();
            return true;

         // // case @(cm_syn):
         // //    handleSampleSynChanged();
         // //    return true;

         case @(cb_procedural):
            handleSampleProceduralChanged();
            return true;

         case @(cb_audio):
            handleSampleAudioChanged();
            return true;

         case @(cm_src_track):
            handleSrcTrackChanged();
            return true;

         case @(fp_audio_bpm):
            handleSampleAudioBPMChanged();
            return true;

         case @(cm_modsrc):
            handleModSrcChanged();
            return true;

         case @(cb_modsrc_noteon):
            handleModSrcNoteOnChanged();
            return true;

         case @(cm_prg):
            handlePrgChanged();
            return true;

         case @(bt_prg_assign):
            handlePrgAutoAssign();
            return true;

         case @(fp_transpose_oct):
            handleTransposeOctChanged();
            return true;

         case @(fp_transpose_semi):
            handleTransposeSemiChanged();
            return true;

         case @(fp_transpose_cents):
            handleTransposeCentsChanged();
            return true;

         case @(fp_pitchbend_up):
            handlePitchbendUpChanged();
            return true;

         case @(fp_pitchbend_down):
            handlePitchbendDownChanged();
            return true;

         case @(fp_sample_rate):
            handleSampleRateChanged();
            return true;

         case @(fp_volume):
            handleVolumeChanged();
            return true;

         case @(fp_pan):
            handlePanChanged();
            return true;

         case @(fp_sampleoff_rand):
            handleSampleOffRandChanged();
            return true;

         case @(fp_freq_rand):
            handleFreqRandChanged();
            return true;

         case @(fp_volume_rand):
            handleVolumeRandChanged();
            return true;

         case @(fp_pan_rand):
            handlePanRandChanged();
            return true;

         case @(cb_uniquenotes):
            handleEnableUniqueNotesChanged();
            return true;

         case @(cb_realloc):
            handleEnableReallocChanged();
            return true;

         case @(bt_sample_tuning):
            handleEditSampleTuning();
            return true;

         case @(tv_samples):
            if(TableView.ACTION_ROWCLICKED == acName)
            {
               if(!areDefaultTabGroupsSelected())
               {
                  handleSelectSample(false/*bStopAudio*/);
                  printSelectSample();
                  selectDefaultTabGroups();
               }
               else
               {
                  execZoneRowClickDefaultAction();
               }
            }
            else if(TableView.ACTION_ROWSELECTED == acName)
            {
               handleSelectSample(false/*bStopAudio*/);
               printSelectSample();
            }
            else if(TableView.ACTION_SHOWCONTEXTMENU == acName)
            {
               showSamplesContextMenu(tv_samples.b_contextmenu_kbd/*bFocusFirst*/);
            }
            return true;

         case @(tf_filter):
            if(TextField.ACTION_TEXTENTERED == acName)
            {
               if(-1 == tm_samples.getCursorIndex())
               {
                  tv_samples.moveCursorToFirstRow();
                  tv_samples.autoScrollAhead(2/*numRows*/);
               }
               pageFocusDefault();
               tv_samples.redraw();
            }
            else
            {
               handleFilterChanged();
            }
            return true;

         case @(cb_filter_global_audio):
            Global.Print("Audio-clip filter: "+
                         Utils.GetEnableStringMixed(cb_filter_global_audio.isSelected(),
                                                    "Hide audio clips",
                                                    "Show audio clips",
                                                    "Show audio clips only"
                                                    )
                         );
            handleFilterChanged();
            return true;

         case @(cf_nsp_flt):
            if(ComboField.ACTION_CURSORUP == acName)
            {
               UI.SetKeyboardFocus(tv_samples);
               tv_samples.redraw();
            }
            else if(ComboField.ACTION_HIDE == acName)
            {
               pageFocusDefault();
            }
            else if(ComboField.ACTION_OPTIONADDED == acName)
            {
               // should not be reachable
               pageFocusDefault();
            }
            else if(ComboField.ACTION_OPTIONSELECTED == acName)
            {
               handleNamespaceFilterChanged();
            }
            else if(ComboField.ACTION_OPTIONRESELECTED == acName)
            {
               pageFocusDefault();
            }
            else if(ComboField.ACTION_OPTIONREMOVED == acName)
            {
               // should not be reachable
               pageFocusDefault();
            }
            else
            {
               // Rename namespace
               if(ComboField.ACTION_OPTIONEDITED/*char typed*/ == acName)
               {
               }
               else if(ComboField.ACTION_OPTIONRENAMED == acName)
               {
                  handleNamespaceNameChanged(cf_nsp_flt.getSelectedOptionName());
                  handleNamespaceFilterChanged();
                  pageFocusDefault();
               }
            }
            return true;

         case @(cf_nsp_cur):
            if(ComboField.ACTION_CURSORUP == acName)
            {
               UI.SetKeyboardFocus(tv_samples);
               tv_samples.redraw();
            }
            else if(ComboField.ACTION_HIDE == acName)
            {
               pageFocusDefault();
            }
            else if(ComboField.ACTION_OPTIONADDED == acName)
            {
               // should not be reachable
               pageFocusDefault();
            }
            else if(ComboField.ACTION_OPTIONSELECTED == acName)
            {
               handleNamespaceChanged(false/*bQuiet*/);
            }
            else if(ComboField.ACTION_OPTIONRESELECTED == acName)
            {
               pageFocusDefault();
            }
            else if(ComboField.ACTION_OPTIONREMOVED == acName)
            {
               // should not be reachable
               pageFocusDefault();
            }
            else
            {
               // Rename namespace
               if(ComboField.ACTION_OPTIONEDITED/*char typed*/ == acName)
               {
               }
               else if(ComboField.ACTION_OPTIONRENAMED == acName)
               {
                  handleNamespaceNameChanged(cf_nsp_cur.getSelectedOptionName());
                  handleNamespaceChanged(true/*bQuiet*/);
                  pageFocusDefault();
               }
            }
            return true;

         case @(bt_sample_add):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               cloneSample();
            }
            else
            {
               showAddSampleMenu(false/*bFocusFirst*/);
            }
            return true;

         case @(pm_sample_add):
            Global.Debug("pm_sample_add acName="+acName);

            if(acName <= "user_")
            {
               UI.SetKeyboardFocus(tv_samples);
               new_sample_user_idx = int(acName.replace("user_",""));
               createSampleDialog(NEWSMP_USER);
               return true;
            }

            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close Add Sample menu.");
                  UI.SetKeyboardFocus(tv_samples);
                  return true;

               case "empty":
                  UI.SetKeyboardFocus(tv_samples);
                  createSampleDialog(NEWSMP_EMPTY);
                  return true;

               case "sine":
                  UI.SetKeyboardFocus(tv_samples);
                  createSampleDialog(NEWSMP_SINE);
                  return true;

               case "sine_amiga":
                  UI.SetKeyboardFocus(tv_samples);
                  createSampleDialog(NEWSMP_SINE_AMIGA);
                  return true;

               case "cycle":
                  UI.SetKeyboardFocus(tv_samples);
                  createSampleDialog(NEWSMP_CYCLE);
                  return true;

               case "cycle_amiga":
                  UI.SetKeyboardFocus(tv_samples);
                  createSampleDialog(NEWSMP_CYCLE_AMIGA);
                  return true;

               case "patch_plugin":
                  UI.SetKeyboardFocus(tv_samples);
                  createSampleDialog(NEWSMP_PATCHPLUGIN);
                  return true;

               case "fm_stack":
                  UI.SetKeyboardFocus(tv_samples);
                  createSampleDialog(NEWSMP_FMSTACK);
                  return true;
            }
            return true;

         case @(bt_sample_remove):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               deleteSelectedSample();
            }
            else
            {
               deleteSelectedSampleConfirm();
            }
            return true;

         case @(bt_sample_moveup):
            moveSelectedSampleUp();
            return true;

         case @(bt_sample_movedown):
            moveSelectedSampleDown();
            return true;

         case @(bt_sample_browse):
            handleSampleBrowse((Button.ACTION_HOLD_CLICK != acName)/*bLoadCreate*/);
            return true;

         case @(bt_sample_load):
            b_load_create = (Button.ACTION_HOLD_CLICK != acName);
            preview_sample <= null;
            last_previewed_sample_path.empty();
            loadSample1();
            return true;

         case @(bt_sample_reload):
            reloadSample();
            return true;

         case @(bt_sample_saveas):
            saveSample1();
            return true;

         case @(dialog_sample_filename):
            Global.Debug("PageSample: Dialogs.dialog_filename acName="+acName);
            String pathName;
            StringAction *sa;

            if((FileNameDialog.ACTION_RETURN == acName) ||
               (FileNameDialog.ACTION_PREVIEW == acName)
               )
            {
               sa <= _ac;

               switch(dlg_filename_mode)
               {
                  case DLG_FILENAME_MODE_SAVE:
                     if(FileNameDialog.ACTION_RETURN == acName)
                     {
                        // trace "xxx PRE: save patch as \""+pathName+"\"";
                        pathName = Utils.LazyAppendSuffix(sa.getStringValue(), Global.SAMPLE_FILE_SUFFIX);
                        if(Utils.CanFileBeRead(Utils.ToNativePathName(pathName)))
                        {
                           dialog_overwrite_sample.run(pathName);
                        }
                        else
                        {
                           saveSample3(pathName);
                        }
                     }
                     break;

                  case DLG_FILENAME_MODE_LOAD:
                     pathName = Utils.LazyAppendSuffix(sa.getStringValue(), Global.SAMPLE_FILE_SUFFIX);

                     handleSampleDialogLoad(pathName,
                                            (FileNameDialog.ACTION_PREVIEW == acName)/*bPreview*/,
                                            true/*bRefocus*/
                                            );

                     break;
               }
            }
            else if(FileNameDialog.ACTION_CANCEL == acName)
            {
               switch(dlg_filename_mode)
               {
                  case DLG_FILENAME_MODE_SAVE:
                     UI.SetKeyboardFocus(tv_samples);
                     break;

                  case DLG_FILENAME_MODE_LOAD:
                     handleSampleDialogLoadCancel();
                     break;
               }
            }
            return true;

         case @(pm_samples):
            Global.Debug("pm_samples acName="+acName);
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close samples context menu.");
                  pageFocusDefault();
                  return true;

               case "samples_copy_pathname":
                  copySampleWavPathnameToClipboard();
                  pageFocusDefault();
                  return true;

               case "prg_dpy_pc_dec":
                  STConfig.pgsample_prg_dpy_mode = PRG_DPY_PC_DEC;
                  current_project.markAsModified();
                  tv_samples.redraw();
                  pageFocusDefault();
                  return true;

               case "prg_dpy_pc_hex":
                  STConfig.pgsample_prg_dpy_mode = PRG_DPY_PC_HEX;
                  current_project.markAsModified();
                  tv_samples.redraw();
                  pageFocusDefault();
                  return true;

               case "prg_dpy_pc_letter":
                  STConfig.pgsample_prg_dpy_mode = PRG_DPY_PC_LETTER;
                  current_project.markAsModified();
                  tv_samples.redraw();
                  pageFocusDefault();
                  return true;

               case "prg_dpy_uniqueid":
                  STConfig.pgsample_prg_dpy_mode = PRG_DPY_UNIQUE_ID;
                  current_project.markAsModified();
                  tv_samples.redraw();
                  pageFocusDefault();
                  return true;

               case "prg_dpy_uniqueid_hex":
                  STConfig.pgsample_prg_dpy_mode = PRG_DPY_UNIQUE_ID_HEX;
                  current_project.markAsModified();
                  tv_samples.redraw();
                  pageFocusDefault();
                  return true;

               case "samples_assignprgnr":
                  autoAssignMIDIProgramNumbers();
                  pageFocusDefault();
                  return true;

               case "samples_sortprgnr":
                  sortByMIDIProgramNumber();
                  pageFocusDefault();
                  return true;

               case "samples_merge_next":
                  handleMergeNextSample();
                  pageFocusDefault();
                  return true;

               case "samples_cycle_mix":
                  handlePageCmdCycleMix();
                  pageFocusDefault();
                  return true;

               case "samples_cleanup":
                  handleCleanupSamplesFolder1();
                  pageFocusDefault();
                  return true;

               case "samples_remove_unref_audio":
                  handleRemoveUnreferencedSamples1(true/*bSkipPrgChgAssigned*/, true/*bSkipNamespaceAssigned*/,
                                                   false/*bSkipAudio*/, true/*bMustBeAudio*/
                                                   );
                  // (note) focus set to SampleSelectionDialog
                  return true;

               case "samples_remove_unref_skip_prgchg":
                  handleRemoveUnreferencedSamples1(true/*bSkipPrgChgAssigned*/, false/*bSkipNamespaceAssigned*/,
                                                   true/*bSkipAudio*/, false/*bMustBeAudio*/
                                                   );
                  // (note) focus set to SampleSelectionDialog
                  return true;

               case "samples_remove_unref_skip_namespace":
                  handleRemoveUnreferencedSamples1(false/*bSkipPrgChgAssigned*/, true/*bSkipNamespaceAssigned*/,
                                                   true/*bSkipAudio*/, false/*bMustBeAudio*/
                                                   );
                  // (note) focus set to SampleSelectionDialog
                  return true;

               case "samples_remove_unref_skip_prgchg_and_namespace":
                  handleRemoveUnreferencedSamples1(true/*bSkipPrgChgAssigned*/, true/*bSkipNamespaceAssigned*/,
                                                   true/*bSkipAudio*/, false/*bMustBeAudio*/
                                                   );
                  // (note) focus set to SampleSelectionDialog
                  return true;

               case "samples_remove_unref_all":
                  handleRemoveUnreferencedSamples1(false/*bSkipPrgChgAssigned*/, false/*bSkipNamespaceAssigned*/,
                                                   false/*bSkipAudio*/, false/*bMustBeAudio*/
                                                   );
                  // (note) focus set to SampleSelectionDialog
                  return true;

               case "namespace_remove_unref":
                  handleRemoveUnreferencedSampleNamespaces();
                  pageFocusDefault();
                  return true;
            }
            return true;

         case @(bt_sp):
            if(Button.ACTION_WHEEL_UP == acName)
            {
               if(null != mod_sample)
                  selectTrackSamplePrev();
               else if(null != sample_pad)
                  selectSamplePadPrev();
            }
            else if(Button.ACTION_WHEEL_DOWN == acName)
            {
               if(null != mod_sample)
                  selectTrackSampleNext();
               else if(null != sample_pad)
                  selectSamplePadNext();
            }
            else
            {
               if(null != mod_sample)
                  showTrackSampleComboBoxPopup();
               else if(null != sample_pad)
                  showSamplePadKitSampleComboBoxPopup();
            }
            return true;

         case @(bt_sp_prev):
            if(null != mod_sample)
               selectTrackSamplePrev();
            else if(null != sample_pad)
               selectSamplePadPrev();
            return true;

         case @(bt_sp_next):
            if(null != mod_sample)
               selectTrackSampleNext();
            else if(null != sample_pad)
               selectSamplePadNext();
            return true;

         case @(sp_popup):
            if(ComboBoxPopup.ACTION_OPTIONSELECTED == acName)
            {
               iac <= _ac;
               if(null != mod_sample)
                  handleSelectTrackSampleByIndex(iac.getIntValue());
               else if(null != sample_pad)
                  handleSelectSamplePadSampleByIndex(iac.getIntValue());
            }
            return true;

         case @(tv_zones):
            // trace "xxx tv_zones acName="+acName;
            if(TableView.ACTION_ROWCLICKED == acName)
            {
               execZoneRowClickDefaultAction();
            }
            else if(TableView.ACTION_ROWSELECTED == acName)
            {
               handleSelectZone(false/*bStopAudio*/);

               updateDrumPadDialogPadHighlights();

               if(cb_zone_solo.isSelected())
                  handleZoneSoloChanged(true/*bQuiet*/);
            }
            else if(TableView.ACTION_ROWHOLDBEGIN == acName)
            {
               playFirstSelectedZone(true/*bNoteOn*/);
            }
            else if(TableView.ACTION_ROWHOLDEND == acName)
            {
               playFirstSelectedZone(false/*bNoteOn*/);
            }
            else if(TableView.ACTION_SHOWCONTEXTMENU == acName)
            {
               showZonesContextMenu(tv_zones.b_contextmenu_kbd/*bFocusFirst*/);
            }
            else if(TableView.ACTION_MULTIPLESELECTION == acName)
            {
               if(isDrumPadDialogVisible())
               {
                  dlg_drum_pad.highlightSelectedZonePads();
               }
            }
            else if(TableView.ACTION_TAB == acName)
            {
               toggleZoneTableModel();
            }
            return true;

         case @(bt_zone_add):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               if(VMOD_LSHIFT == UI.GetKeyMod())
                  cloneZoneSynth();
               else
                  cloneZone();
            }
            else
            {
               createZone();
            }
            return true;

         case @(bt_zone_remove):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               deleteSelectedZone();
            }
            else
            {
               Global.Warning("Hold-click to remove zone");
            }
            return true;

         case @(bt_zone_moveup):
            moveSelectedZoneUp();
            return true;

         case @(bt_zone_movedown):
            moveSelectedZoneDown();
            return true;

         case @(bt_zone_dblclick):
            handleZoneDblClickModeChanged();
            return true;

         case @(bt_zone_names):
            toggleZoneTableModel();
            return true;

         case @(bt_zone_reinit):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               repeatZoneReinit();
            }
            else
            {
               Global.Warning("Hold-click to repeat last re-init (see zones table context menu)");
            }
            return true;

         case @(pm_zones):
            Global.Debug("pm_zones acName="+acName);

            if(acName <= "zones_reinit_")
            {
               last_zones_reinit_type = acName.replace("zones_reinit_", "");
               handleReInitZoneRanges(last_zones_reinit_type);
               updateDrumPadDialogPadHighlights();
            }
            else
            {
               switch(acName)
               {
                  case PopupMenu.ACTION_CANCEL:
                  case "":
                     Global.Print("Close zones context menu.");
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_new_from_clipboard":
                     handleNewZoneFromClipboard();
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_auto_tune":
                     handleAutoTuneSelectedZones(1.0/*prefilterCutoff*/);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_auto_tune_sr1":
                     handleAutoTuneSelectedZones(1.0/8/*prefilterCutoff*/);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_auto_tune_sr2":
                     handleAutoTuneSelectedZones(1.0/16/*prefilterCutoff*/);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_auto_tune_sr3":
                     handleAutoTuneSelectedZones(1.0/32/*prefilterCutoff*/);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_auto_tune_sr4":
                     handleAutoTuneSelectedZones(1.0/64/*prefilterCutoff*/);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_alt_group":
                     handleAltGroupSelectedZones();
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_autoloop_xfade":
                     STConfig.b_autoloop_xfade = !STConfig.b_autoloop_xfade;
                     Global.Print("Autoloop-Xfade is "+Utils.GetEnableString(STConfig.b_autoloop_xfade));
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_autoloop_0_0":
                     handleAutoLoopSelectedZones(0.0, 0.0);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_autoloop_5_10":
                     handleAutoLoopSelectedZones(0.05, 0.1);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_autoloop_20_10":
                     handleAutoLoopSelectedZones(0.2, 0.1);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_autoloop_20_20":
                     handleAutoLoopSelectedZones(0.2, 0.2);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_delete_unused_waveform_areas":
                     handleDeleteUnusedWaveformAreas(true/*bInsertSilence*/);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_delete_unused_waveform_areas_no_silence":
                     handleDeleteUnusedWaveformAreas(false/*bInsertSilence*/);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_reorder_waveform_areas":
                     handlePageCmdReorderWaveformByZones();
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_snap_loop_starts_to_zc":
                     handlePageCmdSnapSelectedZonesFirstLoopStartToZeroCrossing(1024/*maxFramesDist*/);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_snap_loop_ends_to_zc":
                     handlePageCmdSnapSelectedZonesFirstLoopEndToZeroCrossing();
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_fade_starts":
                     handlePageCmdFadeRegions(24, 0);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_fade_ends":
                     handlePageCmdFadeRegions(0, 384);
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_delete_c0_ga":
                     handleDeleteZones_C0_GA();
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_waveseq":
                     handleWaveSeqZonesDelay();
                     UI.SetKeyboardFocus(tv_zones);
                     return true;

                  case "zones_reorder_cycle_patches":
                     handleReorderCyclePatches();
                     UI.SetKeyboardFocus(tv_zones);
                     return true;
               }
            }
            return true;

         case @(bt_sample_mixer):
            showSampleMixerDialog();
            return true;

         case @(cb_zone_midi):
            handleZoneMidiChanged();
            return true;

         case @(cb_zone_solo):
            handleZoneSoloChanged(false/*bQuiet*/);
            return true;

         case @(fp_zone_maxvoices):
            handleZoneMaxVoicesChanged();
            return true;

         case @(cm_zone_mutex_group):
            handleZoneMutexGroupChanged();
            return true;

         case @(fp_zone_sample_rate):
            handleZoneSampleRateChanged();
            return true;

         case @(fp_zone_delay):
            handleZoneDelayChanged();
            return true;

         case @(fp_zone_delay_mul):
            handleZoneDelayMultiplierChanged();
            return true;

         case @(cm_zone_interpolation):
            handleZoneInterpolationChanged();
            return true;

         case @(cm_zone_interpolation_order):
            handleZoneInterpolationOrderChanged();
            return true;

         case @(cm_zone_srr):
            handleZoneSRRChanged();
            return true;

         case @(fp_zone_srr_mask):
            handleZoneSRRMaskChanged();
            return true;

         case @(cm_zone_br):
            handleZoneBRChanged();
            return true;

         case @(fp_zone_br_mask):
            handleZoneBRMaskChanged();
            return true;

         case @(fp_zone_br_preamp):
            handleZoneBRPreAmpChanged();
            return true;

         case @(pm_zone_lofi):
            Global.Debug("pm_zones acName="+acName);

            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close zone lo-fi menu.");
                  UI.SetKeyboardFocus(tv_zones);
                  return true;

               case "lofi_lerp_freq":
                  handleToggleZoneLerpFreq();
                  UI.SetKeyboardFocus(tv_zones);
                  return true;

               case "lofi_lerp_vol":
                  handleToggleZoneLerpVol();
                  UI.SetKeyboardFocus(tv_zones);
                  return true;
            }
            return true;

         case @(bt_zone_lofi):
            showZoneLoFiMenu(false/*bFocusFirst*/);
            return true;

         case @(fp_zone_sampleoff_rel):
            handleZoneSampleOffRelChanged();
            return true;

         case @(fp_zone_sampleoff_rand):
            handleZoneSampleOffRandChanged();
            return true;

         case @(fp_zone_sampleoff_velamt):
            handleZoneSampleOffVelAmtChanged();
            return true;

         case @(cb_zone_sampleoff_velamt_invert):
            handleZoneSampleOffVelAmtInvertChanged();
            return true;

         case @(cm_zone_ai):
            handleZoneAINumPolesChanged();
            return true;

         case @(fp_zone_ai_q):
            handleZoneAIQChanged();
            return true;

         case @(fp_zone_ai_exp_up):
            handleZoneAIExpUpChanged();
            return true;

         case @(fp_zone_ai_exp_down):
            handleZoneAIExpDownChanged();
            return true;

         case @(fp_zone_ai_lin_oct):
            handleZoneAILinOctChanged();
            return true;

         case @(fp_zone_ai_lin_max):
            handleZoneAILinMaxChanged();
            return true;

         case @(cm_zone_voicebus):
            handleZoneVoiceBusChanged();
            return true;

         case @(cb_zone_sampleoff_freezequiet):
            handleZoneSampleOffFreezeQuietChanged();
            return true;

         case @(cb_zone_autoselect):
            handleZoneAutoSelectChanged();
            return true;

         case @(cm_zone_key_lo):
            handleZoneKeyLoChanged();
            return true;

         case @(cm_zone_key_hi):
            handleZoneKeyHiChanged();
            return true;

         case @(fp_zone_vel_lo):
            handleZoneVelLoChanged();
            return true;

         case @(fp_zone_vel_hi):
            handleZoneVelHiChanged();
            return true;

         case @(fp_zone_mod_lo):
            handleZoneModLoChanged();
            return true;

         case @(fp_zone_mod_hi):
            handleZoneModHiChanged();
            return true;

         case @(cb_zone_mod_flt):
            handleZoneModFltChanged();
            return true;

         case @(fp_zone_mod_fadein):
            handleZoneModFadeInChanged();
            return true;

         case @(fp_zone_mod_fadeout):
            handleZoneModFadeOutChanged();
            return true;

         case @(cb_zone_alt):
            handleZoneAltChanged();
            return true;

         case @(fp_zone_noteoff_loop_idx):
            handleZoneNoteOffLoopIdxChanged();
            return true;

         case @(cb_zone_noteoff_loop_immediate):
            handleZoneNoteOffLoopImmediateChanged();
            return true;

         case @(cb_zone_fromstart):
            handleZoneFromStartChanged();
            return true;

         case @(cb_zone_jumptoloop_immediately):
            handleZoneJumpToLoopImmediatelyChanged();
            return true;

         case @(cm_zone_play_mode):
            handleZonePlayModeChanged();
            return true;

         case @(cm_zone_loopfade):
            handleZoneLoopFadeChanged();
            return true;

         case @(cb_zone_timedloop):
            handleZoneTimedLoopChanged();
            return true;

         case @(cb_zone_timedloop_fade):
            handleZoneTimedLoopFadeChanged();
            return true;

         case @(cb_zone_timedloop_oneshot):
            handleZoneTimedLoopOneShotChanged();
            return true;

         case @(bt_zone_offset_hex):
            fp_zone_offset.toggleHex();
            return true;

         case @(fp_zone_offset):
            handleZoneOffsetChanged();
            return true;

         case @(bt_zone_len_hex):
            fp_zone_len.toggleHex();
            return true;

         case @(fp_zone_len):
            handleZoneLenChanged();
            return true;

         case @(fp_zone_rep):
            handleZoneRepChanged();
            return true;

         case @(bt_zone_autoloop):
            handleAutoLoopFirstSelectedZone();
            return true;

         case @(cb_zone_flt_en):
            handleZoneFltEnChanged();
            return true;

         case @(cm_zone_flt_type):
            handleZoneFltTypeChanged();
            return true;

         case @(fp_zone_flt_cutoff):
            handleZoneFltCutOffChanged();
            return true;

         case @(fp_zone_flt_pan):
            handleZoneFltPanChanged();
            return true;

         case @(fp_zone_flt_offset):
            handleZoneFltOffsetChanged();
            return true;

         case @(fp_zone_flt_eq_gain):
            handleZoneFltEQGainChanged();
            return true;

         case @(fp_zone_flt_resonance):
            handleZoneFltResonanceChanged();
            return true;

         case @(fp_zone_flt_env_amt):
            handleZoneFltEnvAmtChanged();
            return true;

         case @(fp_zone_flt_env_velamt):
            handleZoneFltEnvVelAmtChanged();
            return true;

         case @(fp_zone_flt_lfo_amt):
            handleZoneFltLFOAmtChanged();
            return true;

         case @(fp_zone_flt_kbd_amt):
            handleZoneFltKbdAmtChanged();
            return true;

         case @(cb_zone_auxtowav):
            handleZoneAuxToWavChanged();
            return true;

         case @(fp_zone_transpose_oct):
            handleZoneTransposeOctChanged();
            return true;

         case @(fp_zone_transpose_semi):
            handleZoneTransposeSemiChanged();
            return true;

         case @(fp_zone_transpose_cents):
            handleZoneTransposeCentsChanged();
            return true;

         case @(fp_zone_beatfreq):
            handleZoneBeatFreqChanged();
            return true;

         case @(fp_zone_freqenvamt):
            handleZoneFreqEnvAmtChanged();
            return true;

         case @(bt_zone_tuning):
            handleEditZoneTuning();
            return true;

         case @(fp_zone_mm_kbd_min):
            handleZoneMMKbdMinChanged();
            return true;

         case @(fp_zone_mm_kbd_ctr):
            handleZoneMMKbdCtrChanged();
            return true;

         case @(fp_zone_mm_kbd_max):
            handleZoneMMKbdMaxChanged();
            return true;

         case @(fp_zone_freqlfoamt):
            handleZoneFreqLFOAmtChanged();
            return true;

         case @(bt_zone_freq_quick):
            handleEditZoneEnvFreqQuickPreset1(false/*bFocusFirst*/);
            return true;

         case @(bt_zone_freq_a):
            handleEditZoneFreqA();
            return true;

         case @(fp_zone_freq_a_speed):
            handleZoneFreqASpeedChanged();
            return true;

         case @(bt_zone_freq_s):
            handleEditZoneFreqS();
            return true;

         case @(fp_zone_freq_s_speed):
            handleZoneFreqSSpeedChanged();
            return true;

         case @(cb_zone_freq_s_loop):
            handleZoneFreqSLoopChanged();
            return true;

         case @(bt_zone_freq_r):
            handleEditZoneFreqR();
            return true;

         case @(fp_zone_freq_r_speed):
            handleZoneFreqRSpeedChanged();
            return true;

         case @(fp_zone_freq_adsr_level):
            handleZoneFreqADSRLevelChanged();
            return true;

         case @(fp_zone_freq_adsr_time):
            handleZoneFreqADSRTimeChanged();
            return true;

         case @(cm_zone_freq_stageop):
            handleZoneFreqADSRStageOpChanged();
            return true;

         case @(fp_zone_volume):
            handleZoneVolumeChanged();
            return true;

         case @(fp_zone_volume_vel):
            handleZoneVolumeVelChanged();
            return true;

         case @(fp_zone_vollfoamt):
            handleZoneVolLFOAmtChanged();
            return true;

         case @(fp_zone_volume_ramp_up):
            handleZoneVolumeRampUpChanged();
            return true;

         case @(fp_zone_volume_ramp_down):
            handleZoneVolumeRampDownChanged();
            return true;

         case @(pm_zone_env_quick_preset):
            Global.Debug("pm_zone_env_quick_preset acName="+acName);

            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close zone env quick-preset menu.");
                  UI.SetKeyboardFocus(tv_zones);
                  return true;

               default:
                  if(acName <= "<focus>")
                     return true;
                  if(acName <= "freq")
                     handleEditZoneEnvFreqQuickPreset2(int(acName.replace("freq","")));
                  else if(acName <= "vol")
                     handleEditZoneEnvVolumeQuickPreset2(int(acName.replace("vol","")));
                  else if(acName <= "pan")
                     handleEditZoneEnvPanQuickPreset2(int(acName.replace("pan","")));
                  else if(acName <= "aux")
                     handleEditZoneEnvAuxQuickPreset2(int(acName.replace("aux","")));
                  UI.SetKeyboardFocus(tv_zones);
                  return true;
            }
            return true;

         case @(bt_zone_volume_quick):
            handleEditZoneEnvVolumeQuickPreset1(false/*bFocusFirst*/);
            return true;

         case @(bt_zone_volume_a):
            handleEditZoneVolumeA();
            return true;

         case @(fp_zone_volume_a_speed):
            handleZoneVolumeASpeedChanged();
            return true;

         case @(bt_zone_volume_s):
            handleEditZoneVolumeS();
            return true;

         case @(fp_zone_volume_s_speed):
            handleZoneVolumeSSpeedChanged();
            return true;

         case @(cb_zone_volume_s_loop):
            handleZoneVolumeSLoopChanged();
            return true;

         case @(bt_zone_volume_r):
            handleEditZoneVolumeR();
            return true;

         case @(fp_zone_volume_r_speed):
            handleZoneVolumeRSpeedChanged();
            return true;

         case @(fp_zone_volume_adsr_int):
            handleZoneVolumeADSRIntensityChanged();
            return true;

         case @(fp_zone_volume_adsr_time):
            handleZoneVolumeADSRTimeChanged();
            return true;

         case @(fp_zone_pan):
            handleZonePanChanged();
            return true;

         case @(fp_zone_panenvamt):
            handleZonePanEnvAmtChanged();
            return true;

         case @(fp_zone_panlfoamt):
            handleZonePanLFOAmtChanged();
            return true;

         case @(bt_zone_pan_quick):
            handleEditZoneEnvPanQuickPreset1(false/*bFocusFirst*/);
            return true;

         case @(bt_zone_pan_a):
            handleEditZonePanA();
            return true;

         case @(fp_zone_pan_a_speed):
            handleZonePanASpeedChanged();
            return true;

         case @(bt_zone_pan_s):
            handleEditZonePanS();
            return true;

         case @(fp_zone_pan_s_speed):
            handleZonePanSSpeedChanged();
            return true;

         case @(cb_zone_pan_s_loop):
            handleZonePanSLoopChanged();
            return true;

         case @(bt_zone_pan_r):
            handleEditZonePanR();
            return true;

         case @(fp_zone_pan_r_speed):
            handleZonePanRSpeedChanged();
            return true;

         case @(fp_zone_pan_adsr_level):
            handleZonePanADSRLevelChanged();
            return true;

         case @(fp_zone_pan_adsr_time):
            handleZonePanADSRTimeChanged();
            return true;

         case @(cm_zone_pan_stageop):
            handleZonePanADSRStageOpChanged();
            return true;

         case @(bt_zone_aux_quick):
            handleEditZoneEnvAuxQuickPreset1(false/*bFocusFirst*/);
            return true;

         case @(bt_zone_aux_a):
            handleEditZoneAuxA();
            return true;

         case @(fp_zone_aux_a_speed):
            handleZoneAuxASpeedChanged();
            return true;

         case @(bt_zone_aux_s):
            handleEditZoneAuxS();
            return true;

         case @(fp_zone_aux_s_speed):
            handleZoneAuxSSpeedChanged();
            return true;

         case @(cb_zone_aux_s_loop):
            handleZoneAuxSLoopChanged();
            return true;

         case @(bt_zone_aux_r):
            handleEditZoneAuxR();
            return true;

         case @(fp_zone_aux_r_speed):
            handleZoneAuxRSpeedChanged();
            return true;

         case @(fp_zone_aux_adsr_level):
            handleZoneAuxADSRLevelChanged();
            return true;

         case @(fp_zone_aux_adsr_time):
            handleZoneAuxADSRTimeChanged();
            return true;

         case @(cm_zone_aux_stageop):
            handleZoneAuxADSRStageOpChanged();
            return true;

         case @(tv_loops):
            if(TableView.ACTION_ROWCLICKED == acName)
            {
               lazySelectFirstZoneOnly();
               handleSelectLoop(true/*bFromUI*/);
               editLastEditedLoopsColumn();
            }
            else if(TableView.ACTION_ROWSELECTED == acName)
            {
               lazySelectFirstZoneOnly();
               handleSelectLoop(true/*bFromUI*/);
            }
            else if(TableView.ACTION_SHOWCONTEXTMENU == acName)
            {
               showLoopsContextMenu(tv_loops.b_contextmenu_kbd/*bFocusFirst*/);
            }
            return true;

         case @(pm_loops):
            Global.Debug("pm_loops acName="+acName);

            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close loops context menu.");
                  UI.SetKeyboardFocus(tv_loops);
                  break;

               case "loops_copy":
                  copyLoopToClipboard();
                  UI.SetKeyboardFocus(tv_loops);
                  break;

               case "loops_paste":
                  pasteNewLoopFromClipboard();
                  UI.SetKeyboardFocus(tv_loops);
                  break;

               case "loops_align_ends":
                  alignLoopEnds();
                  UI.SetKeyboardFocus(tv_loops);
                  break;

               case "loops_spread_first":
                  loopsSpreadFirst();
                  UI.SetKeyboardFocus(tv_loops);
                  break;
            }
            return true;

         case @(bt_loop_add):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               cloneLoop();
            }
            else
            {
               createLoop();
            }
            return true;

         case @(bt_loop_remove):
            deleteSelectedLoop();
            return true;

         case @(bt_loop_moveup):
            moveSelectedLoopUp();
            return true;

         case @(bt_loop_movedown):
            moveSelectedLoopDown();
            return true;

         case @(sv_wave):
            // trace "xxx sv_wave: acName=\""+acName+"\"";
            if(SampleView.ACTION_REGION_SELECTED == acName)
            {
               // trace "xxx handle ACTION_REGION_SELECTED";
               if(selectZoneByAutoChopRegion(sv_wave.getSelectionStartOffset(),
                                             sv_wave.getSelectionEndOffset()
                                             ))
               {
               }
            }
            else if(SampleView.ACTION_EXPORT_SELECTION == acName)
            {
               // // handleExportSelection1();  // show dialog (enter filename)
            }
            else if(SampleView.ACTION_MULTI_EXPORT_REGIONS == acName)
            {
               // // handleMultiExportRegions1();  // show dialog (enter filename prefix)
            }
            else if(SampleView.ACTION_DROP_FILES == acName)
            {
               oa <= _ac;
               StringArray dropFileNames <= oa.getObjectValue();
               handleReplaceSampleSelectionByFile(dropFileNames.get(0));
            }
            else if(SampleView.ACTION_HIGHLIGHT_CHANGED == acName)
            {
               handleHLChanged(sv_wave.getSortedHighlightStart(),
                               sv_wave.getSortedHighlightLength()
                               );
            }
            else
            {
               if(SampleView.ACTION_WAVEFORM_CHANGED == acName)
               {
                  sample <= getSelectedSample();
                  if(null != sample)
                  {
                     sample.markWaveformAsModified();
                     updateSampleNameToolTip(sample);
                     current_project.markAsModified();
                     sample.analyzeAndUpdatePartials();
                  }
                  handleSelectZone(true/*bStopAudio*/);
               }

               if((SampleView.ACTION_SELECTION_CHANGED == acName) ||
                  (SampleView.ACTION_WAVEFORM_CHANGED == acName)
                  )
               {
                  // // updateSelectedSampleArea();
               }
            }
            return true;

         case @(cb_zone_ts_staticcyclelen):
            handleZoneTSStaticCycleLenEnableChanged();
            return true;

         case @(cb_zone_ts):
            handleZoneTSEnableChanged();
            return true;

         case @(cb_zone_ts_xfade):
            handleZoneTSXFadeEnableChanged();
            return true;

         case @(cb_zone_ts_abs):
            handleZoneTSAbsEnableChanged();
            return true;

         case @(cb_zone_ts_additive):
            handleZoneTSAdditiveEnableChanged();
            return true;

         case @(fp_zone_ts_numpartials):
            handleZoneTSNumPartialsChanged();
            return true;

         case @(bt_zone_ts_export):
            handleZoneTSExport();
            return true;

         case @(fp_zone_ts_stereo_spread):
            handleZoneTSStereoSpreadChanged();
            return true;

         case @(fp_zone_ts_osc_edit_cfg):
            handleZoneTSOscEditCfgChanged();
            return true;

         case @(cb_zone_ts_osc_force_edit_cfg):
            handleZoneTSOscForceEditCfgChanged();
            return true;

         case @(bt_zone_ts_osc_cfg_copy):
            handleZoneTSOscCfgCopy();
            return true;

         case @(bt_zone_ts_osc_cfg_paste):
            handleZoneTSOscCfgPaste();
            return true;

         case @(fp_zone_ts_osc_lvl_sin):
            handleZoneTSOscLevelChanged(STSAMPLE_ADDITIVE_OSC_SIN, fp_zone_ts_osc_lvl_sin.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_pha_sin):
            handleZoneTSOscPhaseChanged(STSAMPLE_ADDITIVE_OSC_SIN, fp_zone_ts_osc_pha_sin.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_exa_sin):
            handleZoneTSOscExpAChanged(STSAMPLE_ADDITIVE_OSC_SIN, fp_zone_ts_osc_exa_sin.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_flt_sin):
            handleZoneTSOscFltChanged(STSAMPLE_ADDITIVE_OSC_SIN, fp_zone_ts_osc_flt_sin.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_exl_sin):
            handleZoneTSOscExpLChanged(STSAMPLE_ADDITIVE_OSC_SIN, fp_zone_ts_osc_exl_sin.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_lvl_tri):
            handleZoneTSOscLevelChanged(STSAMPLE_ADDITIVE_OSC_TRI, fp_zone_ts_osc_lvl_tri.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_pha_tri):
            handleZoneTSOscPhaseChanged(STSAMPLE_ADDITIVE_OSC_TRI, fp_zone_ts_osc_pha_tri.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_exa_tri):
            handleZoneTSOscExpAChanged(STSAMPLE_ADDITIVE_OSC_TRI, fp_zone_ts_osc_exa_tri.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_flt_tri):
            handleZoneTSOscFltChanged(STSAMPLE_ADDITIVE_OSC_TRI, fp_zone_ts_osc_flt_tri.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_exl_tri):
            handleZoneTSOscExpLChanged(STSAMPLE_ADDITIVE_OSC_TRI, fp_zone_ts_osc_exl_tri.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_lvl_sup):
            handleZoneTSOscLevelChanged(STSAMPLE_ADDITIVE_OSC_SUP, fp_zone_ts_osc_lvl_sup.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_pha_sup):
            handleZoneTSOscPhaseChanged(STSAMPLE_ADDITIVE_OSC_SUP, fp_zone_ts_osc_pha_sup.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_exa_sup):
            handleZoneTSOscExpAChanged(STSAMPLE_ADDITIVE_OSC_SUP, fp_zone_ts_osc_exa_sup.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_flt_sup):
            handleZoneTSOscFltChanged(STSAMPLE_ADDITIVE_OSC_SUP, fp_zone_ts_osc_flt_sup.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_exl_sup):
            handleZoneTSOscExpLChanged(STSAMPLE_ADDITIVE_OSC_SUP, fp_zone_ts_osc_exl_sup.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_lvl_sdn):
            handleZoneTSOscLevelChanged(STSAMPLE_ADDITIVE_OSC_SDN, fp_zone_ts_osc_lvl_sdn.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_pha_sdn):
            handleZoneTSOscPhaseChanged(STSAMPLE_ADDITIVE_OSC_SDN, fp_zone_ts_osc_pha_sdn.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_exa_sdn):
            handleZoneTSOscExpAChanged(STSAMPLE_ADDITIVE_OSC_SDN, fp_zone_ts_osc_exa_sdn.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_flt_sdn):
            handleZoneTSOscFltChanged(STSAMPLE_ADDITIVE_OSC_SDN, fp_zone_ts_osc_flt_sdn.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_exl_sdn):
            handleZoneTSOscExpLChanged(STSAMPLE_ADDITIVE_OSC_SDN, fp_zone_ts_osc_exl_sdn.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_lvl_pul):
            handleZoneTSOscLevelChanged(STSAMPLE_ADDITIVE_OSC_PUL, fp_zone_ts_osc_lvl_pul.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_pha_pul):
            handleZoneTSOscPhaseChanged(STSAMPLE_ADDITIVE_OSC_PUL, fp_zone_ts_osc_pha_pul.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_exa_pul):
            handleZoneTSOscExpAChanged(STSAMPLE_ADDITIVE_OSC_PUL, fp_zone_ts_osc_exa_pul.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_flt_pul):
            handleZoneTSOscFltChanged(STSAMPLE_ADDITIVE_OSC_PUL, fp_zone_ts_osc_flt_pul.getFloatValue());
            return true;

         case @(fp_zone_ts_osc_exl_pul):
            handleZoneTSOscExpLChanged(STSAMPLE_ADDITIVE_OSC_PUL, fp_zone_ts_osc_exl_pul.getFloatValue());
            return true;

         case @(cb_zone_ts_osc_normalize):
            handleZoneTSOscNormalizeChanged();
            return true;

         case @(cm_zone_ts_osc_srr):
            handleZoneTSOscSRRChanged();
            return true;

         case @(fp_zone_ts_osc_srr_mask):
            handleZoneTSOscSRRMaskChanged();
            return true;

         case @(cm_zone_ts_osc_br):
            handleZoneTSOscBRChanged();
            return true;

         case @(fp_zone_ts_osc_br_mask):
            handleZoneTSOscBRMaskChanged();
            return true;

         case @(fp_zone_ts_osc_br_preamp):
            handleZoneTSOscBRPreAmpChanged();
            return true;

         case @(cm_zone_ts_win):
            handleZoneTSWinChanged();
            return true;

         case @(cb_zone_ts_additive_win):
            handleZoneTSAdditiveWinChanged();
            return true;

         case @(cb_zone_ts_additive_true_freq):
            handleZoneTSTrueFreqChanged();
            return true;

         case @(fp_zone_ts_cyclelen_reset):
            handleZoneTSCycleLenResetChanged();
            return true;

         case @(cb_zone_ts_phase_0):
            handleZoneTSPartialPhase0Changed();
            return true;

         case @(fp_zone_ts):
            handleZoneTSChanged();
            return true;

         case @(bt_zone_ts_findroot):
            handleZoneTSGranularityFindFromRootKey((Button.ACTION_HOLD_CLICK == acName)/*bDouble*/);
            return true;

         case @(fp_zone_ts_granularity):
            handleZoneTSGranularityChanged(true/*bAnalyzePartials*/);
            return true;

         case @(fp_zone_ts_granularity_fine):
            handleZoneTSGranularityFineChanged();
            return true;

         case @(fp_zone_ts_additive_xfade):
            handleZoneTSAdditiveXFadeChanged();
            return true;

         case @(fp_zone_ts_granularity_amt):
            handleZoneTSGranularityAmtChanged();
            return true;

         case @(fp_zone_ts_2d_w):
            handleZoneTS2DWidthChanged();
            return true;

         case @(fp_zone_ts_2d_h):
            handleZoneTS2DHeightChanged();
            return true;

         case @(fp_zone_ts_phase_rand_amt):
            handleZoneTSPhaseRandAmtChanged();
            return true;

         case @(cm_zone_ts_ipol):
            handleZoneTSIPolChanged();
            return true;

         case @(fp_zone_ts_bend):
            handleZoneTSBendChanged();
            return true;

         case @(cm_zone_ts_grain):
            handleZoneTSGrainWindowChanged();
            return true;

         case @(fp_zone_ts_additive_wexp):
            handleZoneTSPartialWExpChanged();
            return true;

         case @(fp_zone_ts_additive_bexp):
            handleZoneTSPartialBExpChanged();
            return true;

         case @(fp_zone_ts_additive_mexp):
            handleZoneTSPartialMExpChanged();
            return true;

         case @(fp_zone_ts_additive_mbexp):
            handleZoneTSPartialMBExpChanged();
            return true;

         case @(f_plugin):
            if(SamplePluginForm.ACTION_ENTRY_EDITED == acName)
            {
               updateMM(true/*bUpdateVarForm*/);
               return true;
            }
            break;

         case @(bt_audio_tracks):
            showAudioTracks();
            return true;

         case @(bt_instr_tracks):
            showInstrumentTracks();
            return true;

         case @(bt_instr_curtrack):
            boolean bMiddleClick = (Button.ACTION_MIDDLE_CLICK == acName);  // acName's rewritten after handleEditFocusTrack()
            PageProject pgProject <= root_form.pg_project;
            pgProject.handleEditFocusTrack();
            if(bMiddleClick)
            {
               pgProject.handleEditFocusTrackFirstMod(-1/*noteIdxHint*/);
            }
            return true;

         case @(bt_sample_browser):
            toggleSampleBrowser();
            return true;

         case @(bt_drum_pad):
            toggleDrumPadDialog();
            return true;

         case @(bt_synth):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               // // recalcAllCyclePatchesOrRenderTrack();
               current_project.recalcProceduralWaveforms();
               compileAllPatchPlugins();
            }
            else if(Button.ACTION_RIGHT_CLICK == acName)
            {
               recalcAllCyclePatchesOrRenderTrack();
            }
            else
            {
               showCycleSynthDialog();
            }
            return true;

         case @(cb_synth_recalc_all):
            handleCycleRecalcAllChanged();
            return true;

      }

      return Page::consumeAction(_ac);
   }

}
