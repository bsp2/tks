// ----
// ---- file   : ModGridSyncButton.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2021-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 16Feb2021
// ---- changed: 29Jul2023, 04Oct2023, 01Nov2023
// ----
// ----
// ----

module MModGridSyncButton;

use namespace ui;
use namespace st2;


// <class.png>
class ModGridSyncButton : ModGridButton, ActionConsumer {
   protected ModSync *mod;

   protected FloatParam *fp_delay;


   // <ui_init.png>
   public method initSyncButton(ModSync _mod) {

      initModGridButton();

      setLayout(SuperBorderLayout);
      setEnableKbdFocusOnMouse(false);
      setLookAndFeel(LookAndFeel.LIGHT);

      mod <= _mod;

      Label lb <= Label.New();
      lb.setCaption("Sync");
      lb.setEnableFillBackground(false);
      lb.setLookAndFeel(LookAndFeel.LIGHT);
      lb.setAlignment(Layout.CENTERY);
      lb.setPadLeft(2);
      addLayer(deref lb, Layout.LEFT);

      fp_delay <= FloatParam.New();
      fp_delay.setStep(0.1);
      fp_delay.setMinMaxValues(-100.0, 100.0);
      fp_delay.setResetValue(0.0f);
      fp_delay.setValue(mod.delay);
      fp_delay.setPrecision(5);
      fp_delay.setMousePrecision(1);
      fp_delay.setAlignment(Layout.CENTERY);
      if(UI.IsLoDPI())
         fp_delay.setPadBottom(1);
      addLayer(deref fp_delay, Layout.RIGHT);
   }

   // <method_set.png>
   public virtual setEnableHold(boolean _bHold) {
      // prevent Button HOLD_CLICK action (=> edit modmatrix)
   }

   // <ui_render.png>
   public virtual onDraw() {
      UIRenderer.DrawDefaultControlBackground(0, 0, getSizeX(), getSizeY());
      drawGridBorder();
      UIRenderer.DrawDefaultRaisedBorderRight(0, 0, getSizeX(), getSizeY());
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      switch(@(ap))
      {
         case @(fp_delay):
            mod.setDelay(fp_delay.getValue());  // => -100ms..+100ms
            Global.Print(mod.getInfoString());
            return true;
      }

      return ModGridButton::consumeAction(_ac);
   }
}
