// ----
// ---- file   : PatchVariationsTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 13Feb2018, 05Mar2018, 17Mar2018, 03Aug2024
// ----
// ----
// ----

module MPatchVariationsTM;

use namespace ui;
use namespace st2;


// <class.png>
class PatchVariationsTM : TableModel {

   define int COL_ID   = 0;
   define int COL_NAME = 1;

   Track *track;


   // <method.png>
   public virtual tableModelChanged() {
      TableModel::tableModelChanged();
   }

   // <method_get.png>
   public virtual getNumColumns() : int {
      return 2;
   }

   // <method_get.png>
   public virtual getColumnCaption(int _col) : String {
      return ["Id","Name"][_col];
   }

   // <method_get.png>
   public virtual getNumRows() : int {
      if(null != track)
      {
         return track.patch_variations.numElements;
      }
      return 0;
   }

   // <method_get.png>
   public virtual getCellCaption(int _col, _row) : String {
      TrackPatchVariation tpv <= track.patch_variations.get(_row);
      if(null != tpv)
      {
         switch(_col)
         {
            case COL_ID:
               return String(_row);

            case COL_NAME:
               return tpv.name;
         }
      }
   }

   // <method_get.png>
   public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
      Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);

      // lb.setFontByName("big8");
      lb.setEnableFillBackground(true);

      return lb;
   }

   // <method_update.png>
   public virtual updateCellRendererColors(Layer l, int _col, int _row, int _visibleRow) {

      TableModel::updateCellRendererColors(l, _col, _row, _visibleRow);

      if(cursor_index != _row)
      {
         l.setBackgroundColor(#df343436);
         l.setForegroundColor(#ffc8c2be);
         l.setEnableFillBackground(true);
      }
   }

   // <method_get.png>
   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 32;

         case COL_NAME:
            return 100;
      }
   }

   // <method_get.png>
   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 32;

         case COL_NAME:
            return 120;
      }
   }

   public virtual handleCellEditing(TableCellEditor _tce) {
      switch(_tce.table_col)
      {
         case COL_NAME:
            handleCellEdited(_tce);
            break;
      }
   }

   public virtual handleCellEdited(TableCellEditor _tce) {

      TrackPatchVariation tpv <= track.patch_variations.get(_tce.table_row);
      if(null != tpv)
      {
         TableCellEditorString *tcestr;

         switch(_tce.table_col)
         {
            case COL_NAME:
               tcestr <= _tce;
               tpv.name = tcestr.getText();

               tableModelChanged();
               break;
         }
      }
   }

   public virtual getCellEditor(int _col, int _row) : TableCellEditor {

      TrackPatchVariation tpv <= track.patch_variations.get(_row);
      if(null != tpv)
      {
         TableCellEditorString *tcestr;

         switch(_col)
         {
            case COL_NAME:
               tcestr <= new TableCellEditorString;
               tcestr.initStringEditor(tpv.name);
               return deref tcestr;
         }
      }
   }

}
