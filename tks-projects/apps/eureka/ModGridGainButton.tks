// ----
// ---- file   : ModGridGainButton.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 24Feb2018
// ---- changed: 04Mar2018, 17Mar2018, 26Mar2018, 21Jul2018, 14Dec2018, 31Jul2019, 06Feb2021
// ----          27Dec2021, 10Jan2022, 04Oct2023, 11Nov2023, 23Sep2024, 24Sep2024, 30Apr2025
// ----
// ----
// ----

module MModGridGainButton;

use namespace ui;
use namespace st2;


// <class.png>
class ModGridGainButton : ModGridButton, ActionConsumer {
   protected ModGain *mod;

   protected Dial           *dl_stereowidth;
   protected LevelIndicator *level_indicator;
   protected Button         *bt_phase;
   protected Button         *bt_channels;
   protected Dial           *dl_pan;
   protected Dial           *dl_level;


   // <ui_init.png>
   public method initGainButton(ModGain _mod) {

      initModGridButton();

      setLayout(SuperBorderLayout);
      setEnableKbdFocusOnMouse(false);
      setLookAndFeel(LookAndFeel.LIGHT);

      mod <= _mod;

      Panel pAll <= Panel.New();
      pAll.setAlignment(Layout.EXPAND);
      pAll.setLookAndFeel(LookAndFeel.LIGHT);
      // pAll.setDebug(true);
      addLayer(deref pAll, Layout.CENTER);

      level_indicator <= new LevelIndicator;
      level_indicator.initLevelIndicator();
      level_indicator.setAlignment(Layout.EXPANDX | Layout.EXPANDY);
      level_indicator.setPadding4fUnscaled(0.0f, 0.0f, 2.0f, 0.0f);
      level_indicator.setDpyMode(mod.ui_dpy_mode);
      level_indicator.setLookAndFeel(LookAndFeel.LIGHT);
      pAll.addLayer(deref level_indicator, Layout.CENTER);

      dl_stereowidth <= new Dial;
      dl_stereowidth.initDial(0.0f, 2.0f, mod.stereo_width);
      dl_stereowidth.setLayerName("Stereo Width");
      dl_stereowidth.setRequiredSize2f(ModGrid.GetDialSizeX(), ModGrid.GetDialSizeY());
      dl_stereowidth.setEnableKbdFocusOnMouse(false);
      dl_stereowidth.setPadLeft(0);
      dl_stereowidth.setPadRight(1);
      dl_stereowidth.setResetValues([1.0f, 1.5f, 0.5f]);
      dl_stereowidth.setAlignment(Layout.CENTERY);
      dl_stereowidth.setLookAndFeel(LookAndFeel.LIGHT);
      pAll.addLayer(deref dl_stereowidth, Layout.RIGHT);

      dl_pan <= new Dial;
      dl_pan.initDial(-1.0f, 1.0f, mod.pan);
      dl_pan.setLayerName("Pan");
      dl_pan.setRequiredSize2f(ModGrid.GetDialSizeX(), ModGrid.GetDialSizeY());
      dl_pan.setEnableKbdFocusOnMouse(false);
      dl_pan.setPadLeft(1);
      dl_pan.setPadRight(1);
      dl_pan.setResetValues([0.0f, 0.5f, -0.5f]);
      dl_pan.setAlignment(Layout.CENTERY);
      dl_pan.setLookAndFeel(LookAndFeel.LIGHT);
      pAll.addLayer(deref dl_pan, Layout.RIGHT);

      // Flip phase+channels:
      Panel p <= new Panel;
      p.initPanel();
      p.setAlignment(Layout.EXPANDY);
      p.setLookAndFeel(LookAndFeel.LIGHT);

      bt_phase <= new Button;
      bt_phase.initButtonOnly();
      bt_phase.initLabel();
      bt_phase.setEnableToggle(true);
      bt_phase.setToggleState(mod.b_flip_phase);
      bt_phase.setRequiredSize2fScaled(6, 6);
      bt_phase.setEnableKbdFocusOnMouse(false);
      bt_phase.setAlignment(Layout.CENTERY);
      bt_phase.setPadding4f(0, 2, 4, 2);
      bt_phase.setToolTipCaption("Flip phase");
      bt_phase.setLookAndFeel(LookAndFeel.LIGHT);
      p.addLayer(deref bt_phase, Layout.BOTTOM);

      bt_channels <= new Button;
      bt_channels.initButtonOnly();
      bt_channels.initLabel();
      bt_channels.setEnableToggle(true);
      bt_channels.setToggleState(mod.b_flip_channels);
      bt_channels.setRequiredSize2fScaled(6, 6);
      bt_channels.setEnableKbdFocusOnMouse(false);
      bt_channels.setAlignment(Layout.CENTERY);
      bt_channels.setPadding4f(3, 2, 0, 2);
      bt_channels.setToolTipCaption("Flip channels");
      bt_channels.setLookAndFeel(LookAndFeel.LIGHT);
      p.addLayer(deref bt_channels, Layout.TOP);

      pAll.addLayer(deref p, Layout.RIGHT);

      dl_level <= new Dial;
      dl_level.initDial(-50.0f, 50.0f, Utils.LevelToDB(mod.level));
      dl_level.setLayerName("Level (dB)");
      dl_level.setRequiredSize2f(ModGrid.GetDialSizeX(), ModGrid.GetDialSizeY());
      dl_level.setEnableKbdFocusOnMouse(false);
      dl_level.setResetValues([0.0f, -50.0f]);
      dl_level.setStep(0.01);
      dl_level.setPadLeft(1);
      dl_level.setPadRight(1);
      dl_level.setAlignment(Layout.CENTERY);
      dl_level.setLookAndFeel(LookAndFeel.LIGHT);
      pAll.addLayer(deref dl_level, Layout.RIGHT);

      updateToolTipCaptions();
   }

   // <method_set.png>
   public virtual setEnableHold(boolean _bHold) {
      // prevent Button HOLD_CLICK action (=> edit modmatrix)
   }

   // <method_get.png>
   protected method getLevelPanString(String _prefix) : String {
      return _prefix + "Pan:"+mod.pan+" Level:"+mod.level+" "+mod.getLevelString();
   }

   // <ui_update.png>
   protected method updateToolTipCaptions() {
      dl_stereowidth.setToolTipCaption("Stereo Width: " + ((Utils.GetSnapToZeroFloatString(mod.stereo_width * 100))+"%"));
      dl_stereowidth.updateToolTipIfVisible();
      dl_pan.setToolTipCaption(getLevelPanString("Pan\n\n"));
      dl_level.setToolTipCaption(getLevelPanString("Level\n\n"));
      dl_pan.updateToolTipIfVisible();
      dl_level.updateToolTipIfVisible();
   }

   // <ui_timer.png>
   public virtual handleIdleTimer() {
      // overwrites ModGridButtonBase::handleIdleTimer()
      level_indicator.setSmpLR(mod.getSmpPeakL(), mod.getSmpPeakR(),
                               mod.getSmpAvgL(), mod.getSmpAvgR()
                               );

      if(mod.checkResetQueuedUIUpdate())
      {
         dl_level      .setValue(Utils.LevelToDB(mod.level));
         dl_pan        .setValue(mod.pan);
         dl_stereowidth.setValue(mod.stereo_width);
         redraw();
      }
   }

   // <ui_render.png>
   public virtual onDraw() {
      UIRenderer.DrawDefaultControlBackground(0, 0, getSizeX(), getSizeY());
      drawGridBorder();
      UIRenderer.DrawDefaultRaisedBorderRight(0, 0, getSizeX(), getSizeY());
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      switch(@(ap))
      {
         case @(dl_stereowidth):
            mod.setStereoWidth(dl_stereowidth.getValue());
            updateToolTipCaptions();
            mod.addToUIParamHistory(ModGain.PARAM_STEREO_WIDTH);
            Global.Print("Stereo width is "+((Utils.GetSnapToZeroFloatString(mod.stereo_width * 100))+"%"));
            return true;

         case @(bt_phase):
            mod.setEnableFlipPhase(bt_phase.getToggleState());
            Global.Print("Phase-Flip is "+Utils.GetEnableString(mod.b_flip_phase));
            return true;

         case @(bt_channels):
            mod.setEnableFlipChannels(bt_channels.getToggleState());
            Global.Print("Channel-Flip is "+Utils.GetEnableString(mod.b_flip_channels));
            return true;

         case @(dl_pan):
            mod.setPan(dl_pan.getValue());
            updateToolTipCaptions();
            mod.addToUIParamHistory(ModGain.PARAM_PAN);
            Global.Print("Pan is "+Utils.GetSnapToZeroFloatString(mod.pan)+": "+mod.getLevelString());
            return true;

         case @(dl_level):
            mod.setLevel(Utils.DBToLevel(dl_level.getValue()));
            updateToolTipCaptions();
            mod.addToUIParamHistory(ModGain.PARAM_LEVEL);
            Global.Print("Level is "+Utils.GetSnapToZeroFloatString(mod.level)+": "+mod.getLevelString());
            return true;

         case @(level_indicator):
            if(LevelIndicator.ACTION_DPYMODE == acName)
            {
               mod.ui_dpy_mode = level_indicator.dpy_mode;
               current_project.markAsModified();
            }
            return true;
      }

      return ModGridButton::consumeAction(_ac);
   }
}
