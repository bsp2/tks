// ----
// ---- file   : MIDIMapDefs.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2012-2018 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 29Feb2012
// ----
// ---- changed: 09Nov2012, 13Nov2012, 04Jan2013, 25Mar2013, 09Apr2013, 14Apr2013, 11Aug2014
// ----          13Aug2014, 14Aug2014, 15Aug2014, 21Aug2014, 15Sep2014, 29Sep2014, 25Nov2014
// ----          02Feb2016, 31Jan2018
// ----
// ----
// ----

module MMIDIMapDefs;

use namespace st2;


// <class.png>
class MIDIMapDefs {

   define int TYPE_NOTE_OFF              =  0;  // 0x8x note-off
   define int TYPE_NOTE_ON               =  1;  // 0x9x note-on
   define int TYPE_POLY_PRESSURE         =  2;  // 0xAx polyphonic key pressure
   define int TYPE_CC                    =  3;  // 0xBx continuous controller (7bit or 14bit) (or channel mode msg (local on/off, poly on/off, ..)
   define int TYPE_PROGRAM_CHANGE        =  4;  // 0xCx program change
   define int TYPE_CHANNEL_PRESSURE      =  5;  // 0xDx channel pressure
   define int TYPE_PITCHBEND             =  6;  // 0xEx pitch bend
   define int TYPE_SYSEX                 =  7;  // 0xF0 sys ex (see MIDIMapEvent.sysex_buffer)
   define int TYPE_SYSCOM_TIMECODE       =  8;  // 0xF1 MIDI quarter frame time code
   define int TYPE_SYSCOM_SONG_POSITION  =  9;  // 0xF2 song position pointer
   define int TYPE_SYSCOM_SONG_SELECT    = 10;  // 0xF3 song select
   define int TYPE_SYSCOM_F4             = 11;  // 0xF4 (undefined)
   define int TYPE_SYSCOM_F5             = 12;  // 0xF5 (undefined)
   define int TYPE_SYSCOM_TUNE_REQUEST   = 13;  // 0xF6 tune request
   define int TYPE_SYSRT_TIMING_CLOCK    = 14;  // 0xF8 timing clock (24ppq)
   define int TYPE_SYSRT_F9              = 15;  // 0xF9 (undefined)
   define int TYPE_SYSRT_START           = 16;  // 0xFA start
   define int TYPE_SYSRT_CONTINUE        = 17;  // 0xFB continue
   define int TYPE_SYSRT_STOP            = 18;  // 0xFC stop
   define int TYPE_SYSRT_FD              = 19;  // 0xFD (undefined)
   define int TYPE_SYSRT_ACTIVE_SENSING  = 20;  // 0xFE active sensing
   define int TYPE_SYSRT_SYSTEM_RESET    = 21;  // 0xFF system reset
   define int TYPE_RPN                   = 22;  // registered parameter number (7bit or 14bit)
   define int TYPE_NRPN                  = 23;  // (non-)registered parameter number (7bit or 14bit)

}
