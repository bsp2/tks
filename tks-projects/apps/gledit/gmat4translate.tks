// ----
// ---- file   : gmat4translate.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 13Jun2020
// ---- changed: 15Jun2020, 16Jun2020, 24Jun2020, 09Aug2020, 14Aug2020, 04Feb2025
// ----
// ----
// ----
module MGMat4Translate;

use namespace ui;
use namespace gledit;


// <class.png>
class GMat4Translate : GConstant {

   // <method_new.png>
   public static New() : GMat4Translate {
      local GMat4Translate r;
      r.init();
      return deref r;
   }

   // <method_new.png>
   public static New3(float _x, float _y, float _z) : GMat4Translate {
      local GMat4Translate r;
      r.init();
      r.setFloatParamById("x", _x);
      r.setFloatParamById("y", _y);
      r.setFloatParamById("z", _z);
      return deref r;
   }

   // <method_init.png>
   public virtual init() {
      GObject::init();
      type = TYPE_MAT4;

      addParamFloat("x", "x", 0.0, -10.0, -1000.0, 10.0, 1000.0, 0.0);
      addParamFloat("y", "y", 0.0, -10.0, -1000.0, 10.0, 1000.0, 0.0);
      addParamFloat("z", "z", 0.0, -10.0, -1000.0, 10.0, 1000.0, 0.0);

      addInput("x", TYPE_FLOAT);
      addInput("y", TYPE_FLOAT);
      addInput("z", TYPE_FLOAT);

      addOutput("out", type);
   }

   // <method_get.png>
   public virtual getString() : String {
      float x = getFloatParamById("x");
      float y = getFloatParamById("y");
      float z = getFloatParamById("z");
      return "translate("+x+", "+y+", "+z+")";
   }

   // <method.png>
   public method emit(local String       _outputId,
                      local GModule      _module,
                      local GProgram     _program,
                      local String       _out,
                      local String       _dstVar,
                      local boolean      _bGLSL,
                      local PointerArray _objDone
                      ) {
      float x = getFloatParamById("x");
      float y = getFloatParamById("y");
      float z = getFloatParamById("z");

      _out.append("// GMat4Translate id="+id+" id="+getObjectPath()+"\n");

      if(_bGLSL)
      {
         // (note) column-major (OpenGL)
         _out.append(_dstVar+" = mat4(vec4(1,0,0,0), vec4(0,1,0,0), vec4(0,0,1,0), vec4("+x+", "+y+", "+z+", 1));\n");
      }
      else
      {
         local GInput *input;
         local String *tX;
         local String *tY;
         local String *tZ;

         // x
         input <= getInputById("x");
         if(input.isConnected())
         {
            tX <= _module.allocTmpVarScript(_out, TYPE_FLOAT, "in_x");
            input.emit(_module, _program, _out, tX, false/*bGLSL*/, _objDone);
            _out.append(tX+" += "+x+";\n");
         }
         else
            tX <= String(x);

         // y
         input <= getInputById("y");
         if(input.isConnected())
         {
            tY <= _module.allocTmpVarScript(_out, TYPE_FLOAT, "in_y");
            input.emit(_module, _program, _out, tY, false/*bGLSL*/, _objDone);
            _out.append(tY+" += "+y+";\n");
         }
         else
            tY <= String(y);

         // z
         input <= getInputById("z");
         if(input.isConnected())
         {
            tZ <= _module.allocTmpVarScript(_out, TYPE_FLOAT, "in_z");
            input.emit(_module, _program, _out, tZ, false/*bGLSL*/, _objDone);
            _out.append(tZ+" += "+z+";\n");
         }
         else
            tZ <= String(z);

         // (note) row-major (C-array / Direct3D)
         // // // _out.append(_dstVar+" = [1,0,0,0, 0,1,0,0, 0,0,1,0, "+sX+","+sY+","+sZ+",1];\n");
         // // _out.append(_dstVar+
         // //             " = [1,0,0,0,\n"
         // //             "    0,1,0,0,\n"
         // //             "    0,0,1,0,\n"
         // //             "    "+tX+","+tY+","+tZ+",1\n"
         // //             "    ];\n"
         // //             );
         // _out.append(_dstVar+
         //             " = [1,0,0,"+tX+",\n"
         //             "    0,1,0,"+tY+",\n"
         //             "    0,0,1,"+tZ+",\n"
         //             "    0,0,0,1\n"
         //             "    ];\n"
         //             );
         _out.append(_dstVar+".initTranslatef("+tX+", "+tY+", "+tZ+");\n");
      }
   }
}
