// ----
// ---- file   : gparamprovider.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 13Jun2020
// ---- changed: 15Jun2020, 20Jun2020, 21Jun2020, 22Jun2020, 27Jun2020, 01Jul2020, 09Jul2020
// ----          20Jul2020, 14Aug2020
// ----
// ----
// ----
module MGParamProvider;

use namespace ui;
use namespace gledit;


// <class.png>
class GParamProvider : GDefs {
   GParam *params[];


   // <method_get.png>
   public method getNumParams() : int {
      return params.numElements;
   }

   // <method_get.png>
   public method unlinkParams() : PointerArray {
      return deref params;
   }

   // <method_get.png>
   public method getParamByIndex(int _idx) : GParam {
      return params.get(_idx);
   }

   // <method_remove.png>
   public method removeParamById(String _name) {
      GParam p <= getParamById(_name);
      if(null != p)
      {
         params.remove(p);
      }
   }

   // <method_add.png>
   public method addParam(GParam _p) : GParam {
      params.add(#(deref _p));
      return _p;
   }

   // <method.png>
   protected method addParamFloat(String _id, String _caption, float _def, float _min, float _minLimit, float _max, float _maxLimit, float _ctr) : GParam {
      GParamFloat p <= GParamFloat.New(_id, _caption, _def, _min, _minLimit, _max, _maxLimit, _ctr);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   protected method addParamFloatSimple(String _id, float _def, float _min, float _max) : GParamFloat {
      // trace "xxx addParamFloatSimple: this="+#(this)+" id="+_id+" def="+_def+" min="+_min+" max="+_max;
      GParamFloat p <= GParamFloat.New(_id, _id, _def, _min, _min, _max, _max, (_max+_min)*0.5/*ctr*/);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   protected method addParamInt(String _id, String _caption, int _def, int _min, int _minLimit, int _max, int _maxLimit, int _ctr) : GParamInt {
      GParamInt p <= GParamInt.New(_id, _caption, _def, _min, _minLimit, _max, _maxLimit, _ctr);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   protected method addParamIntSimple(String _id, int _def, int _min, int _max) : GParamInt {
      GParamInt p <= GParamInt.New(_id, _id, _def, _min, _min, _max, _max, (_max+_min)/2/*ctr*/);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   protected method addParamBool(String _id, String _caption, boolean _def) : GParamBool {
      GParamBool p <= GParamBool.New(_id, _caption, _def);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   protected method addParamChoice(String _id, String _caption, int _def, StringArray _options) : GParamChoice {
      GParamChoice p <= GParamChoice.New(_id, _caption, _def, deref _options);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   protected method addParamChoiceIOType(String _id, String _caption, int _defIOType) : GParamChoiceIOType {
      GParamChoiceIOType p <= GParamChoiceIOType.New(_id, _caption, _defIOType);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   protected method addParamRGB(String _id, String _caption, int _def) : GParamRGB {
      GParamRGB p <= GParamRGB.New(_id, _caption, _def);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   protected method addParamRGBSimple(String _id, int _def) : GParamRGB {
      GParamRGB p <= GParamRGB.New(_id, _id, _def);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   protected method addParamRGBA(String _id, String _caption, int _def) : GParamRGBA {
      GParamRGBA p <= GParamRGBA.New(_id, _caption, _def);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   protected method addParamRGBASimple(String _id, int _def) : GParamRGBA {
      GParamRGBA p <= GParamRGBA.New(_id, _id, _def);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   protected method addParamAlpha(String _id, String _caption, int _def) : GParamAlpha {
      GParamAlpha p <= GParamAlpha.New(_id, _caption, _def);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   protected method addParamAlphaSimple(String _id, int _def) : GParamAlpha {
      GParamAlpha p <= GParamAlpha.New(_id, _id, _def);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   public method addParamFile(String _id, String _caption, String _def,
                              StringArray _fileFilters,
                              StringArray _fileFilterNames
                              ) : GParamFile {
      GParamFile p <= GParamFile.New(_id, _caption, _def, _fileFilters, _fileFilterNames);
      params.add(#(deref p));
      return p;
   }

   // <method.png>
   public method getParamById(String _id) : GParam {
      GParam *p;
      foreach p in params
      {
         if(p.id == _id)
            return p;
      }
      return null;
   }

   // <method.png>
   public method getFloatParamById(String _id) : float {
      GParamFloat p <= getParamById(_id);
      if(null != p)
         return p.value;
      else
         return 0.0f;
   }

   // <method.png>
   public method getIntParamById(String _id) : int {
      GParamInt p <= getParamById(_id);
      if(null != p)
         return p.value;
      else
         return 0;
   }

   // <method.png>
   public method getChoiceParamById(String _id) : int {
      GParamChoice p <= getParamById(_id);
      if(null != p)
         return p.value;
      else
         return 0;
   }

   // <method.png>
   public method getChoiceIOTypeParamById(String _id) : int {
      GParamChoiceIOType p <= getParamById(_id);
      if(null != p)
         return p.getIOTypeFromValue();
      else
         return 0;
   }

   // <method.png>
   public method getRGBParamById(String _id) : int {
      GParamRGB p <= getParamById(_id);
      if(null != p)
         return p.value;
      else
         return 0;
   }

   // <method.png>
   public method getRGBAParamById(String _id) : int {
      GParamRGBA p <= getParamById(_id);
      if(null != p)
         return p.value;
      else
         return 0;
   }

   // <method.png>
   public method getAlphaParamById(String _id) : int {
      GParamAlpha p <= getParamById(_id);
      if(null != p)
         return p.value;
      else
         return 0;
   }

   // <method.png>
   public method getBoolParamById(String _id) : boolean {
      GParamBool p <= getParamById(_id);
      return p.value;
   }

   // <method.png>
   public method getBoolParamByIdAsGLString(String _id) : String {
      GParamBool p <= getParamById(_id);
      return p.value ? "GL_TRUE" : "GL_FALSE";
   }

   // <method.png>
   public method getFileParamById(String _id) : String {
      GParamFile p <= getParamById(_id);
      return p.value;
   }

   // <method.png>
   public method setFloatParamById(String _id, float _val) {
      GParamFloat p <= getParamById(_id);
      if(null != p)
         p.setValue(_val);
   }

   // <method.png>
   public method setIntParamById(String _id, int _val) {
      GParamInt p <= getParamById(_id);
      // trace "xxx setIntParamById: id="+_id+" p="+#(p);
      if(null != p)
         p.setValue(_val);
   }

   // <method.png>
   public method setRGBParamById(String _id, int _val) {
      GParamRGB p <= getParamById(_id);
      if(null != p)
         p.setValue(_val);
   }

   // <method.png>
   public method setRGBAParamById(String _id, int _val) {
      GParamRGBA p <= getParamById(_id);
      if(null != p)
         p.setValue(_val);
   }

   // <method.png>
   public method setAlphaParamById(String _id, int _val) {
      GParamAlpha p <= getParamById(_id);
      if(null != p)
         p.setValue(_val);
   }

   // <method.png>
   public method setBoolParamById(String _id, boolean _val) {
      GParamBool p <= getParamById(_id);
      if(null != p)
         p.setValue(_val);
   }

   // <method.png>
   public method setFileParamById(String _id, String _val) {
      GParamFile p <= getParamById(_id);
      if(null != p)
         p.setValue(Utils.ToProjectPathName(_val));
   }

   // <ui_handle.png>
   public method handleParamChanged(String _paramId) {
   }

  // <save.png>
   public method saveStateParamProvider(local Stream ofs, local GConnectionWriter connectionWriter) {

      // Version
      ofs.i16 = 1;

      // Num params
      ofs.i8 = getNumParams();

      local GParam *p;
      foreach p in params
      {
         p.saveStateParam(ofs);
      }
   }

   // <load.png>
   public method loadStateParamProvider(local Stream ifs) : boolean {

      // Version
      local short ver = ifs.u16;

      if(1 <= ver <= 1)
      {
         // Num params
         local int numParams = ifs.u8;
         // trace "xxx loadStateParamProvider: this="+#(this)+" numParams="+numParams;

         local int paramIdx = 0;
         loop(numParams)
         {
            // trace "xxx loadStateParamProvider: ifs.offset="+ifs.offset;
            if(!GParam.LoadStateParam(ifs, this/*parent*/))
            {
               trace "[---] GParamProvider::loadStateParamProvider: failed to load param "+(paramIdx+1)+"/"+numParams;
               return false;
            }

            paramIdx++;
         }

         // Succeeded
         return true;
      }
      else
      {
         trace "[---] GParamProvider::loadStateParamProvider: invalid version "+ver+", this="+#(this);
      }
      return false;
   }
}
