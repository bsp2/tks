// ----
// ---- file   : gshadersource.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 12Jun2020
// ---- changed: 20Jun2020, 26Jun2020, 28Jul2020
// ----
// ----
// ----
module MGShaderSource;

use namespace ui;
use namespace gledit;


// <class.png>
class GShaderSource {
   String s_global;
   String s_functions;
   String s_main;

   String s_src;

   // <method.png>
   public method emitBegin() {
      s_global.empty();
      s_functions.empty();
      s_main.empty();

      // (note) let ZGLShader class auto-append suitable #version (Desktop GL / GLES 2.x / 3.x)
      // s_global.append("#version 130\n");
      // s_global.append("#version 140\n");  // textureGather
      // s_global.append("#version 400\n");  // textureGather
   }

   // <method.png>
   public method emitEnd() {
      s_src = s_global;
      s_functions.replace("gl_FragCoord", "g_FragCoord");
      s_functions.replace("xxx_FragCoord", "gl_FragCoord");
      s_src.append(s_functions);
      s_src.append("\nvoid main() {\n");
      // trace "xxx s_main=\""+s_main+"\"";
      s_main.replace("gl_FragCoord", "g_FragCoord");
      s_main.replace("xxx_FragCoord", "gl_FragCoord");
      Utils.AppendIndentedLines(s_src, s_main, 3);
      // // s_src.append(s_main);
      s_src.append("}\n");
   }

   // <method_add.png>
   public method appendGlobal(String _s) {
      s_global.append(_s);
   }

   // <method_add.png>
   public method appendFunctions(String _s) {
      s_functions.append(_s);
   }

   // <method_add.png>
   public method appendMain(String _s) {
      s_main.append(_s);
   }

}
