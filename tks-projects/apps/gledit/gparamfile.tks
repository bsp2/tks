// ----
// ---- file   : gparamfile.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 21Jun2020
// ---- changed: 01Jul2020, 16Jul2020
// ----
// ----
// ----
module MGParamFile;

use namespace ui;
use namespace gledit;


// <class.png>
class GParamFile : GParam {
   String      value;
   String      def_value;
   StringArray file_filters;
   StringArray file_filter_names;
   String      suggested_directory;


   // <method_new.png>
   static New(String      _id, 
              String      _caption, 
              String      _def,
              StringArray _fileFilters,
              StringArray _fileFilterNames
              ) {
      local GParamFile p;
      p.init(_id, _caption, _def, _fileFilters, _fileFilterNames);
      return deref p;
   }

   // <method_init.png>
   public method init(String      _id, 
                      String      _caption, 
                      String      _def,
                      StringArray _fileFilters,
                      StringArray _fileFilterNames
                      ) {
      initParam(_id, _caption);
      def_value         = _def;
      value             = def_value;
      file_filters      = _fileFilters;
      file_filter_names = _fileFilterNames;
   }

   // <method_get.png>
   public method getSuggestedDirectory() : String {
      if(!value.isBlank())
      {
         local String fileName;
         local String dirName;
         Utils.SplitPathname(value, dirName, fileName);
         return deref dirName;
      }
      else
      {
         return suggested_directory;
      }
   }

   // <method_get.png>
   public method getFileFilters() : StringArray {
      return file_filters;
   }

   // <method_get.png>
   public method getFileFilterNames() : StringArray {
      return file_filter_names;
   }

   // <method_set.png>
   public method setValue(String _val) {
      value = _val;
   }

   // <method_get.png>
   public virtual getString() : String {
      return "\""+value+"\"";
   }

   // <method_set.png>
   public virtual copyParamValueFrom(GParam _o) {
      if(_o instanceof GParamFile)
      {
         GParamFile o <= _o;
         value = o.value;
      }
   }

   // <save.png>
   public virtual saveStateParam(local Stream ofs) {
      GParam::saveStateParam(ofs);

      // Version
      ofs.i16 = 1;

      // Value
      Utils.WriteString(ofs, value);
   }

   // <load.png>
   public virtual loadStateParam(local Stream ifs) : boolean {
      // (note) base class param info is loaded by LoadStateParam

      // Version
      short ver = ifs.u16;

      if(1 <= ver <= 1)
      {
         // Value
         Utils.ReadString(ifs, value);

         // Succeeded
         return true;
      }
      else
      {
         trace "[---] GParamFile::loadStateParam: invalid version "+ver;
      }
      return false;
   }
}


// // // <class.png>
// // class GParamFileMesh : GParamFile {
   
// //    // <method_get.png>
// //    public virtual getSuggestedDirectory() : String {
// //       return current_project.getSuggestedMeshDirectory();
// //    }
// // }
