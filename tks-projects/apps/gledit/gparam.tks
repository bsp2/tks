// ----
// ---- file   : gparam.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 13Jun2020
// ---- changed: 14Jun2020, 15Jun2020, 20Jun2020, 09Jul2020, 14Aug2020
// ----
// ----
// ----
module MGParam;

use namespace ui;
use namespace gledit;


// <class.png>
class GParam : GDefs {

   String  id;
   String  caption;
   String *tooltip_caption;

   // <method_init.png>
   public method initParam(String _id, String _caption) {
      id      = _id;
      caption = _caption;
   }

   // <method_get.png>
   public method getId() : String {
      return id;
   }

   // <method_set.png>
   public method setToolTipCaption(String _s) {
      tooltip_caption <= Object(_s);
   }

   // <method_get.png>
   public method getCaption() : String {
      return caption;
   }

   // <method_get.png>
   public method getString() : String {
      return "?";
   }

   // <method_set.png>
   public method copyParamValueFrom(GParam _o) {
   }

  // <save.png>
   public method saveStateParam(local Stream ofs) {

      // Version
      ofs.i16 = 1;

      // Class
      Utils.WriteString(ofs, yacMetaClassName());

      // Id
      Utils.WriteString(ofs, id);
   }

   // <load.png>
   public method loadStateParam(local Stream ifs) : boolean {
      // (note) base class param info is loaded by LoadStateParam
      trace "[---] GParam::loadStateParam: abstract method called. this="+#(this);
   }

   // <load.png>
   public static LoadStateParam(local Stream ifs, local GParamProvider _parent) : boolean {

      // Version
      // trace "xxx LoadStateParam: ifs.offset="+ifs.offset;
      local short ver = ifs.u16;
      // trace "xxx LoadStateParam:   => ver="+ver;

      if(1 <= ver <= 1)
      {
         // Class name
         local String className;
         Utils.ReadString(ifs, className);
         // trace "xxx LoadStateParam: paramClass="+className;

         // Id
         // trace "xxx before readParamId: ifs.offset="+ifs.offset;
         local String paramId;
         Utils.ReadString(ifs, paramId);
         // trace "xxx LoadStateParam: paramId="+paramId;

         local GParam p <= TKS.newObjectByName(null/*nsp*/, className);

         // trace "xxx => p="+#(p);

         if(null != p)
         {
            GParam thisP <= _parent.getParamById(paramId);
            if(null != thisP)
            {
               // copy (default) attribs added in newer versions (e.g. min/max in gparamfloat v2)
               p.copyParamValueFrom(thisP);
            }

            // Set id + caption
            p.initParam(paramId, paramId/*caption*/);

            if(p.loadStateParam(ifs))
            {
               if(null != thisP)
               {
                  // Copy to parent object param
                  thisP.copyParamValueFrom(p);
               }
               else
               {
                  trace "[~~~] GParam::LoadStateParam: parent="+#(_parent)+" has no param.id=\""+paramId+"\", discarding..";
               }

               // Succeeded
               return true;
            }
            else
            {
               trace "[---] GParam::LoadStateParam: failed to load state, className="+className+" id=\""+paramId+"\" parent="+#(_parent);
            }
         }
         else
         {
            trace "[---] GParam::LoadStateParam: failed to instantiate class \""+className+"\", parent="+#(_parent);
         }
      }
      else
      {
         trace "[---] GParam::LoadStateParam: invalid version "+ver;
      }

      return false;
   }

}
