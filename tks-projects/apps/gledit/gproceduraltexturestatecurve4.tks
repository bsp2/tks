// ----
// ---- file   : gproceduraltexturestatecurve4.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 07Jul2020
// ---- changed: 25Jul2020, 26Jul2020, 01Aug2020, 07Aug2020
// ----
// ----
// ----
module MGProceduralTextureStateCurve4;

use namespace ui;
use namespace gledit;


// <class.png>
abstract class GProceduralTextureStateCurve4 : GProceduralTextureState {

   define int NUM_CURVES = 4;

   BezierEditState *[] curve_states;
   Envelope *[]        curve_envs;

   static Curve4Dialog *dlg_curve;

   ColorMod color_mod;


   // <method_init.png>
   public virtual init() {

      loop(NUM_CURVES)
      {
         BezierEditState beState <= new BezierEditState;
         Envelope beEnv <= new Envelope;
         BezierCurveForm.InitLinearEnv(beState, beEnv);
         curve_states.add(#(deref beState));
         curve_envs.add(#(deref beEnv));
         // trace "xxx beEnv="+#(beEnv);
      }

      color_mod.initColorMod();
   }

   // <ui_show.png>
   public virtual showEditor(GTexture _texture) {
      if(null == dlg_curve)
      {
         dlg_curve <= new Curve4Dialog;
         dlg_curve.initCurve4Dialog(true/*bTex*/);
      }
      dlg_curve.showCurve4DialogTexture(_texture, this);
   }

   // <method_get.png>
   public method getCurveLabels() : StringArray {
      return ["1", "2", "3", "4"];
   }

   // <save.png>
   public virtual saveStateProc(local Stream ofs) {
      // Version
      ofs.i16 = 2;

      // Save curves
      int curveIdx = 0;
      loop(NUM_CURVES)
      {
         BezierEditState beState <= curve_states.get(curveIdx);
         ofs << beState;
         curveIdx++;
      }

      // Color Modulation (v2+)
      color_mod.saveState(ofs);
   }

   // <load.png>
   public virtual loadStateProc(local Stream ifs, local GTexture _gtexture) : boolean {

      short ver = ifs.u16;

      if(1 <= ver <= 2)
      {
         // Read Curves
         int curveIdx = 0;
         local BezierEditState beStateTmp;
         loop(NUM_CURVES)
         {
            BezierEditState beState <= curve_states.get(curveIdx);
            Envelope beEnv <= curve_envs.get(curveIdx);
            beState << ifs;
            BezierCurveForm.CalcEnv(beState, beEnv);
            curveIdx++;
         }

         if(ver >= 2)
         {
            // Color Modulation (v2+)
            if(!color_mod.loadState(ifs))
               return false;
         }               

         recalcTexture(_gtexture);

         // Succeeded
         return true;
      }
      else
      {
         trace "[---] GProceduralTextureStateCurve4::loadStateProc: invalid version "+ver;
      }
      return false;
   }

   // <method.png>
   public method importColors(Curve4Dialog _dlg, GTexture _gtexture, IntArray _colors) {
   }


}

