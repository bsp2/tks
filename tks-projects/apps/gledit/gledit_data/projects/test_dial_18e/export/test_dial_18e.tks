//
// auto-generated by GL Edit v2025.02.09 on 20250301-104118
//
module Mtest_dial_18e;

use tksdl;
use tkopengl;
use tkmath;
use tkzip;

float g_time;
int g_default_fb;
int g_default_vp_x;
int g_default_vp_y;
int g_default_vp_w;
int g_default_vp_h;
float g_dt;
int last_model_id;    // (note) set to 0 to force attrib/buffer rebind
int last_program_id;  // (note) set to 0 to force program rebind
boolean g_init;
int g_tri_count;
class OrbitCamView { float ctr_x; float ctr_y; float ctr_z; float rot_x; float rot_y; float rot_z; float eye_dist; }

// -------- section "default_ring_scene_bg_gradient_gradient_quad_prg_prg1" --------
ZGLShader default_ring_scene_bg_gradient_gradient_quad_prg_prg1;
String default_ring_scene_bg_gradient_gradient_quad_prg_prg1_vtx_src = "attribute vec3 a_position;
attribute vec2 a_uv;
uniform float u_time;
uniform mat4 u_transform;
varying vec2 v_uv;

void main() {
   vec4 tmp1_gl_Position;
   vec3 tmp2_position_src;
   tmp2_position_src = a_position;
   tmp1_gl_Position = vec4(tmp2_position_src.xyz, 1);
   mat4 tmp3_inTransform;
   tmp3_inTransform = u_transform;
   tmp1_gl_Position = tmp3_inTransform * tmp1_gl_Position;
   v_uv = a_uv;
   gl_Position = tmp1_gl_Position;
}
";
String default_ring_scene_bg_gradient_gradient_quad_prg_prg1_frag_src = "uniform float u_time;
uniform mat4 u_transform;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

varying vec2 v_uv;



void fxn1_shader(out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   float clt = 0.121568627451;
   float crt = 0.043137254902;
   float crb = 0.0627450980392;
   float clb = 0.141176470588;
   float ct = mix(clt, crt, v_uv.x);
   float cb = mix(clb, crb, v_uv.x);
   float c = mix(cb, ct, v_uv.y);
   o_color = vec4(c,c,c,1);
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp4_fxnOut_o_color;
   fxn1_shader(tmp4_fxnOut_o_color, g_FragCoord, g_NormCoord);
   gl_FragColor = tmp4_fxnOut_o_color; // read GSource id=shader output=o_color
}
";
int default_ring_scene_bg_gradient_gradient_quad_prg_prg1__a_position;
int default_ring_scene_bg_gradient_gradient_quad_prg_prg1__a_uv;
int default_ring_scene_bg_gradient_gradient_quad_prg_prg1__u_time;
int default_ring_scene_bg_gradient_gradient_quad_prg_prg1__u_transform;
int default_ring_scene_bg_gradient_gradient_quad_prg_prg1_u_fragcoord_off_scl;
int default_ring_scene_bg_gradient_gradient_quad_prg_prg1_u_normcoord_scl;

// -------- section "default_ring_scene_bg_gradient_model_gradient_quad" --------
float ext_default_global_time = 0.0f;

function CalcMat4Ortho(Matrix4f _d, float w, float h, float d) {
   float left   = -w;
   float right  =  w;
   float bottom = -h;
   float top    =  h;
   float znear  = -d;
   float zfar   =  d;

   float tx = -(right + left) / (right - left);
   float ty = -(top + bottom) / (top - bottom);
   float tz = -(zfar + znear) / (zfar - znear);

   float sx = 2.0f / (right - left);
   float sy = 2.0f / (top - bottom);
   float sz = -2.0f / (zfar - znear);

   _d = [sx,0,0,tx,
         0,sy,0,ty,
         0,0,sz,tz,
         0,0,0,1
         ];
}
int default_ring_scene_bg_gradient_buf_gradient_quad_a;
Buffer *default_ring_scene_bg_gradient_buf_gradient_quad_a_data;

// -------- section "default_ring_scene_terrain_terrain_prg_terrain" --------
ZGLShader default_ring_scene_terrain_terrain_prg_terrain;
String default_ring_scene_terrain_terrain_prg_terrain_vtx_src = "attribute vec4 a_position;
attribute vec2 a_uv;
uniform mat4 u_transform;
uniform sampler2D u_tex_hmap;
uniform sampler2D u_tex_pal;
uniform float u_tex_pos_x;
uniform float u_tex_pos_y;
uniform float u_raster_shift_1;
uniform float u_raster_shift_2;
uniform vec3 u_fade_color;
uniform vec2 u_scroll;
varying vec4 v_color;

void fxn2_src(in vec4 i_pos, in vec2 i_uv, in vec2 i_fadeborder_shift, out vec4 o_pos, out vec4 o_color) {
   float uvStep = (1.0 / 1024.0);
   vec2 uv = i_pos.xy * 1.0;// + 1.0;
   uv.x += u_tex_pos_x;
   uv.y += u_tex_pos_y;
   uv = i_uv / 8.0;
   vec2 t = u_scroll;  // px
   uv *= 256.0;  // tex sz
   uv += t;
   uv = floor(uv);
   uv *= 1.0 / 256.0;
   #if 0
   {
      uv = vec2(ivec2(uv*float(747) + 0.5)) * (1.0 / float(747));
   }
   #endif
   vec4 c = texture2DLod(u_tex_hmap, uv, 0.0);
   float z = c.g;
   o_pos = vec4(i_pos.x*1.3*0.95, i_pos.y*1.15*0.95, z*z*z*3.83+sin(i_pos.x*2)*0.0, 1);
   vec2 uvPal = vec2(z, 0);
   o_color = texture2D(u_tex_pal, uvPal);
   o_color *= o_color;
   #if 0
   {
     o_color = vec4(z,z,z,1);
   }
   #endif
   #if 1
   {
     vec4 cr = texture2DLod(u_tex_hmap, vec2(uv.x+uvStep, uv.y), 0.0);
     vec4 cb = texture2DLod(u_tex_hmap, vec2(uv.x, uv.y-uvStep), 0.0);
     if(cr.g < c.g)
       o_color *= 0.89 * 0.53692;
     if(cb.g < c.g)
       o_color *= 0.8997 * 0.53692;
   }
   #endif
   float lum = o_color.r * 0.3 + o_color.g*0.59 + o_color.b*0.11;
   o_color.rgb = mix(o_color.rgb, vec3(lum,lum,lum), 0.93723);
   #if 1
   {
     vec2 ip = i_pos.xy - i_fadeborder_shift;
     ip.x = clamp(ip.x, -float(0.896), float(0.896));
     ip.y = clamp(ip.y, -float(0.896), float(0.896));
     float dc = sqrt(ip.x*ip.x + ip.y*ip.y);
     if(dc < 0.0) dc = 0.0;
     if(dc > 1.0) dc = 1.0;
     dc = pow(dc, float(5.05665));
     dc *= float(0.96187);
     float bg = 0.055;
     dc = mix(1.0, 0.0, dc);
     o_color.a = dc;
   }
   #endif
}

void main() {
   vec4 tmp5_gl_Position;
   vec4 tmp6_fxnIn_i_pos;
   vec2 tmp7_fxnIn_i_uv;
   vec2 tmp8_fxnIn_i_fadeborder_shift;
   vec4 tmp9_fxnOut_o_pos;
   vec4 tmp10_fxnOut_o_color;
   tmp6_fxnIn_i_pos = a_position;
   tmp7_fxnIn_i_uv = a_uv;
   tmp8_fxnIn_i_fadeborder_shift = vec2(0, 0);
   fxn2_src(tmp6_fxnIn_i_pos, tmp7_fxnIn_i_uv, tmp8_fxnIn_i_fadeborder_shift, tmp9_fxnOut_o_pos, tmp10_fxnOut_o_color);
   tmp5_gl_Position = tmp9_fxnOut_o_pos; // read GSource id=src output=o_pos
   mat4 tmp11_inTransform;
   tmp11_inTransform = u_transform;
   tmp5_gl_Position = tmp11_inTransform * tmp5_gl_Position;
   vec4 tmp12_fxnIn_i_pos;
   vec2 tmp13_fxnIn_i_uv;
   vec2 tmp14_fxnIn_i_fadeborder_shift;
   vec4 tmp15_fxnOut_o_pos;
   vec4 tmp16_fxnOut_o_color;
   tmp12_fxnIn_i_pos = a_position;
   tmp13_fxnIn_i_uv = a_uv;
   tmp14_fxnIn_i_fadeborder_shift = vec2(0, 0);
   fxn2_src(tmp12_fxnIn_i_pos, tmp13_fxnIn_i_uv, tmp14_fxnIn_i_fadeborder_shift, tmp15_fxnOut_o_pos, tmp16_fxnOut_o_color);
   v_color = tmp16_fxnOut_o_color; // read GSource id=src output=o_color
   gl_Position = tmp5_gl_Position;
}
";
String default_ring_scene_terrain_terrain_prg_terrain_frag_src = "uniform mat4 u_transform;
uniform sampler2D u_tex_hmap;
uniform sampler2D u_tex_pal;
uniform float u_tex_pos_x;
uniform float u_tex_pos_y;
uniform float u_raster_shift_1;
uniform float u_raster_shift_2;
uniform vec3 u_fade_color;
uniform vec2 u_scroll;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

varying vec4 v_color;



void fxn3_src(out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   o_color = v_color;
   #if 0
   {
      float s1 = sin(g_NormCoord.y * 11.0 + u_raster_shift_1*0.045);
      s1 = 0.25 + s1*0.75;
      s1 = 1.0 - s1*0.15;
      o_color *= s1;
   }
   #endif
   #if 0
   {
     int y1 = int(g_NormCoord.y * 100.0 + u_raster_shift_1) & 15;
     if(y1 > 5)
       o_color *= 0.988;
     int y2 = int(g_NormCoord.y * 100.0 + u_raster_shift_2) & 31;
     if(y2 > 14)
       o_color *= 0.983;
   }
   #endif
   #if 0
   {
     float y3 = smoothstep(0.0, 0.30, g_NormCoord.y*0.4+0.15);
     y3 = 1.0 - y3*0.89;
     y3 *= y3;
     o_color = mix(vec4(u_fade_color, 1.0), o_color, y3);
   }
   #endif
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp17_fxnOut_o_color;
   fxn3_src(tmp17_fxnOut_o_color, g_FragCoord, g_NormCoord);
   gl_FragColor = tmp17_fxnOut_o_color; // read GSource id=src output=o_color
}
";
int default_ring_scene_terrain_terrain_prg_terrain__a_position;
int default_ring_scene_terrain_terrain_prg_terrain__a_uv;
int default_ring_scene_terrain_terrain_prg_terrain__u_transform;
int default_ring_scene_terrain_terrain_prg_terrain__u_tex_hmap;
int default_ring_scene_terrain_terrain_prg_terrain__u_tex_pal;
int default_ring_scene_terrain_terrain_prg_terrain__u_tex_pos_x;
int default_ring_scene_terrain_terrain_prg_terrain__u_tex_pos_y;
int default_ring_scene_terrain_terrain_prg_terrain__u_raster_shift_1;
int default_ring_scene_terrain_terrain_prg_terrain__u_raster_shift_2;
int default_ring_scene_terrain_terrain_prg_terrain__u_fade_color;
int default_ring_scene_terrain_terrain_prg_terrain__u_scroll;
int default_ring_scene_terrain_terrain_prg_terrain_u_fragcoord_off_scl;
int default_ring_scene_terrain_terrain_prg_terrain_u_normcoord_scl;

// -------- section "default_ring_scene_terrain_model_terrain" --------

function CalcMat4Perspective(Matrix4f _d, float aspect, float fov, float znear, float zfar) {
   float top = tan(fov * 2PI * (1.0f/360.0f) * 0.5f) * znear;
   float left   = aspect*-top;
   float right  = aspect*top;
   float bottom = -top;

   float near2 = (2.0f * znear);

   float a = near2 / (right - left);
   float b = near2 / (top - bottom);

   float c = (right + left) / (right - left);
   float d = (top + bottom) / (top - bottom);
   float e = -(zfar + znear) / (zfar - znear);

   float f = -(2.0f * zfar * znear) / (zfar - znear);

   _d = [a,0,c,0,
         0,b,d,0,
         0,0,e,f,
         0,0,-1,0
         ];
   //trace "xxx mat4persp="+#(_d);
}
Texture *default_ring_scene_terrain_terrain_tex_hmap;
Texture *default_ring_scene_terrain_terrain_tex_pal_green_hills;
int default_ring_scene_terrain_buf_terrain_a;
Buffer *default_ring_scene_terrain_buf_terrain_a_data;
int default_ring_scene_terrain_buf_terrain_i;
Buffer *default_ring_scene_terrain_buf_terrain_i_data;

// -------- section "default_ring_scene_prg_aa_tick" --------
ZGLShader default_ring_scene_prg_aa_tick;
String default_ring_scene_prg_aa_tick_vtx_src = "attribute vec3 a_position;
attribute vec2 a_uv;
uniform mat4 u_transform;
uniform vec2 u_aadist;
uniform vec4 u_color;
varying vec2 v_uv;

void main() {
   vec4 tmp18_gl_Position;
   vec3 tmp19_position_src;
   tmp19_position_src = a_position;
   tmp18_gl_Position = vec4(tmp19_position_src.xyz, 1);
   mat4 tmp20_inTransform;
   tmp20_inTransform = u_transform;
   tmp18_gl_Position = tmp20_inTransform * tmp18_gl_Position;
   v_uv = a_uv;
   gl_Position = tmp18_gl_Position;
}
";
String default_ring_scene_prg_aa_tick_frag_src = "uniform mat4 u_transform;
uniform vec2 u_aadist;
uniform vec4 u_color;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

varying vec2 v_uv;



void fxn7_shader(in vec4 i_color, out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   vec2 uv = 1.0 - abs((v_uv-0.5)*2.0);
   uv.x = smoothstep(0.0, u_aadist.x, uv.x);
   uv.y = smoothstep(0.0, u_aadist.y, uv.y);
   float l = uv.x * uv.y;
   o_color = i_color * l;
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp21_fxnIn_i_color;
   vec4 tmp22_fxnOut_o_color;
   tmp21_fxnIn_i_color = u_color;
   fxn7_shader(tmp21_fxnIn_i_color, tmp22_fxnOut_o_color, g_FragCoord, g_NormCoord);
   gl_FragColor = tmp22_fxnOut_o_color; // read GSource id=shader output=o_color
}
";
int default_ring_scene_prg_aa_tick__a_position;
int default_ring_scene_prg_aa_tick__a_uv;
int default_ring_scene_prg_aa_tick__u_transform;
int default_ring_scene_prg_aa_tick__u_aadist;
int default_ring_scene_prg_aa_tick__u_color;
int default_ring_scene_prg_aa_tick_u_fragcoord_off_scl;
int default_ring_scene_prg_aa_tick_u_normcoord_scl;

// -------- section "default_ring_scene_dial_1_small_ticks_model_small_tick" --------
int default_ring_scene_dial_1_small_ticks_buf_small_tick_a;
Buffer *default_ring_scene_dial_1_small_ticks_buf_small_tick_a_data;

// -------- section "default_ring_scene_dial_1_scenegraph_small_ticks" --------

// -------- section "default_ring_scene_dial_1_medium_ticks_model_medium_tick" --------
int default_ring_scene_dial_1_medium_ticks_buf_medium_tick_a;
Buffer *default_ring_scene_dial_1_medium_ticks_buf_medium_tick_a_data;

// -------- section "default_ring_scene_dial_1_scenegraph_medium_ticks" --------

// -------- section "default_ring_scene_dial_1_big_ticks_model_big_tick" --------
int default_ring_scene_dial_1_big_ticks_buf_big_tick_a;
Buffer *default_ring_scene_dial_1_big_ticks_buf_big_tick_a_data;

// -------- section "default_ring_scene_dial_1_scenegraph_big_ticks" --------

// -------- section "default_ring_scene_scenegraph_dial_1" --------

// -------- section "default_ring_scene_prg_ring_blit" --------
ZGLShader default_ring_scene_prg_ring_blit;
String default_ring_scene_prg_ring_blit_vtx_src = "attribute vec4 a_position;
attribute vec2 a_uv;
uniform mat4 u_transform;
uniform sampler2D u_tex;
varying vec2 v_uv;

void main() {
   vec4 tmp23_gl_Position;
   tmp23_gl_Position = a_position;
   mat4 tmp24_inTransform;
   tmp24_inTransform = u_transform;
   tmp23_gl_Position = tmp24_inTransform * tmp23_gl_Position;
   v_uv = a_uv;
   gl_Position = tmp23_gl_Position;
}
";
String default_ring_scene_prg_ring_blit_frag_src = "uniform mat4 u_transform;
uniform sampler2D u_tex;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

varying vec2 v_uv;



void fxn10_src(out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   o_color = texture2D(u_tex, v_uv);
   if(false)
      o_color += vec4(v_uv,0,1);
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp25_fxnOut_o_color;
   fxn10_src(tmp25_fxnOut_o_color, g_FragCoord, g_NormCoord);
   gl_FragColor = tmp25_fxnOut_o_color; // read GSource id=src output=o_color
}
";
int default_ring_scene_prg_ring_blit__a_position;
int default_ring_scene_prg_ring_blit__a_uv;
int default_ring_scene_prg_ring_blit__u_transform;
int default_ring_scene_prg_ring_blit__u_tex;
int default_ring_scene_prg_ring_blit_u_fragcoord_off_scl;
int default_ring_scene_prg_ring_blit_u_normcoord_scl;

// -------- section "default_ring_scene_dial_1_blit_model_ring_blit" --------
Envelope *default_envc4_env_curves_x;
Envelope *default_envc4_env_curves_y;
Envelope *default_envc4_env_curves_z;
Envelope *default_envc4_env_curves_w;
int default_ring_scene_dial_1_blit_buf_ring_blit_a;
Buffer *default_ring_scene_dial_1_blit_buf_ring_blit_a_data;
int default_ring_scene_dial_1_blit_buf_ring_blit_i;
Buffer *default_ring_scene_dial_1_blit_buf_ring_blit_i_data;

// -------- section "default_ring_scene_dial_2_small_ticks_model_small_tick" --------
int default_ring_scene_dial_2_small_ticks_buf_small_tick_a;
Buffer *default_ring_scene_dial_2_small_ticks_buf_small_tick_a_data;

// -------- section "default_ring_scene_dial_2_scenegraph_small_ticks" --------

// -------- section "default_ring_scene_dial_2_medium_ticks_model_medium_tick" --------
int default_ring_scene_dial_2_medium_ticks_buf_medium_tick_a;
Buffer *default_ring_scene_dial_2_medium_ticks_buf_medium_tick_a_data;

// -------- section "default_ring_scene_dial_2_scenegraph_medium_ticks" --------

// -------- section "default_ring_scene_dial_2_big_ticks_model_big_tick" --------
int default_ring_scene_dial_2_big_ticks_buf_big_tick_a;
Buffer *default_ring_scene_dial_2_big_ticks_buf_big_tick_a_data;

// -------- section "default_ring_scene_dial_2_scenegraph_big_ticks" --------

// -------- section "default_ring_scene_scenegraph_dial_2" --------

// -------- section "default_ring_scene_dial_2_blit_model_ring_blit" --------
Envelope *default_envc4_env_curves_dial_2_x;
Envelope *default_envc4_env_curves_dial_2_y;
Envelope *default_envc4_env_curves_dial_2_z;
Envelope *default_envc4_env_curves_dial_2_w;
int default_ring_scene_dial_2_blit_buf_ring_blit_a;
Buffer *default_ring_scene_dial_2_blit_buf_ring_blit_a_data;
int default_ring_scene_dial_2_blit_buf_ring_blit_i;
Buffer *default_ring_scene_dial_2_blit_buf_ring_blit_i_data;

// -------- section "default_ring_scene_dial_3_small_ticks_model_small_tick" --------
int default_ring_scene_dial_3_small_ticks_buf_small_tick_a;
Buffer *default_ring_scene_dial_3_small_ticks_buf_small_tick_a_data;

// -------- section "default_ring_scene_dial_3_scenegraph_small_ticks" --------

// -------- section "default_ring_scene_dial_3_medium_ticks_model_medium_tick" --------
int default_ring_scene_dial_3_medium_ticks_buf_medium_tick_a;
Buffer *default_ring_scene_dial_3_medium_ticks_buf_medium_tick_a_data;

// -------- section "default_ring_scene_dial_3_scenegraph_medium_ticks" --------

// -------- section "default_ring_scene_dial_3_big_ticks_model_big_tick" --------
int default_ring_scene_dial_3_big_ticks_buf_big_tick_a;
Buffer *default_ring_scene_dial_3_big_ticks_buf_big_tick_a_data;

// -------- section "default_ring_scene_dial_3_scenegraph_big_ticks" --------

// -------- section "default_ring_scene_scenegraph_dial_3" --------

// -------- section "default_ring_scene_dial_3_blit_model_ring_blit" --------
Envelope *default_envc4_env_curves_dial_3_x;
Envelope *default_envc4_env_curves_dial_3_y;
Envelope *default_envc4_env_curves_dial_3_z;
Envelope *default_envc4_env_curves_dial_3_w;
int default_ring_scene_dial_3_blit_buf_ring_blit_a;
Buffer *default_ring_scene_dial_3_blit_buf_ring_blit_a_data;
int default_ring_scene_dial_3_blit_buf_ring_blit_i;
Buffer *default_ring_scene_dial_3_blit_buf_ring_blit_i_data;

// -------- section "default_ring_scene_prg_aa_pointer" --------
ZGLShader default_ring_scene_prg_aa_pointer;
String default_ring_scene_prg_aa_pointer_vtx_src = "attribute vec3 a_position;
attribute vec2 a_uv;
uniform mat4 u_transform;
uniform vec2 u_aadist;
uniform vec4 u_color;
varying vec2 v_uv;

void main() {
   vec4 tmp26_gl_Position;
   vec3 tmp27_position_src;
   tmp27_position_src = a_position;
   tmp26_gl_Position = vec4(tmp27_position_src.xyz, 1);
   mat4 tmp28_inTransform;
   tmp28_inTransform = u_transform;
   tmp26_gl_Position = tmp28_inTransform * tmp26_gl_Position;
   v_uv = a_uv;
   gl_Position = tmp26_gl_Position;
}
";
String default_ring_scene_prg_aa_pointer_frag_src = "uniform mat4 u_transform;
uniform vec2 u_aadist;
uniform vec4 u_color;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

varying vec2 v_uv;



void fxn19_shader(in vec4 i_color, out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   vec2 uv = 1.0 - abs((v_uv-0.5)*2.0);
   uv.x = smoothstep(0.0, u_aadist.x, uv.x);
   uv.y = smoothstep(0.0, u_aadist.y, uv.y);
   float l = uv.x * uv.y;
   o_color = i_color * l;
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp29_fxnIn_i_color;
   vec4 tmp30_fxnOut_o_color;
   tmp29_fxnIn_i_color = u_color;
   fxn19_shader(tmp29_fxnIn_i_color, tmp30_fxnOut_o_color, g_FragCoord, g_NormCoord);
   gl_FragColor = tmp30_fxnOut_o_color; // read GSource id=shader output=o_color
}
";
int default_ring_scene_prg_aa_pointer__a_position;
int default_ring_scene_prg_aa_pointer__a_uv;
int default_ring_scene_prg_aa_pointer__u_transform;
int default_ring_scene_prg_aa_pointer__u_aadist;
int default_ring_scene_prg_aa_pointer__u_color;
int default_ring_scene_prg_aa_pointer_u_fragcoord_off_scl;
int default_ring_scene_prg_aa_pointer_u_normcoord_scl;

// -------- section "default_ring_scene_pointer_2_model_pointer2" --------
Envelope *default_envc4_env_curves_dial_2_pointer_x;
Envelope *default_envc4_env_curves_dial_2_pointer_y;
Envelope *default_envc4_env_curves_dial_2_pointer_z;
Envelope *default_envc4_env_curves_dial_2_pointer_w;
int default_ring_scene_pointer_2_buf_pointer2_a;
Buffer *default_ring_scene_pointer_2_buf_pointer2_a_data;

// -------- section "default_ring_scene_pointer_3_model_pointer3" --------
Envelope *default_envc4_env_curves_dial_3_pointer_x;
Envelope *default_envc4_env_curves_dial_3_pointer_y;
Envelope *default_envc4_env_curves_dial_3_pointer_z;
Envelope *default_envc4_env_curves_dial_3_pointer_w;
int default_ring_scene_pointer_3_buf_pointer3_a;
Buffer *default_ring_scene_pointer_3_buf_pointer3_a_data;

// -------- section "default_ring_scene_prg_aa_tri" --------
ZGLShader default_ring_scene_prg_aa_tri;
String default_ring_scene_prg_aa_tri_vtx_src = "attribute vec3 a_position;
attribute vec2 a_uv;
uniform mat4 u_transform;
uniform vec2 u_aadist;
uniform vec4 u_color;
varying vec2 v_uv;

void main() {
   vec4 tmp31_gl_Position;
   vec3 tmp32_position_src;
   tmp32_position_src = a_position;
   tmp31_gl_Position = vec4(tmp32_position_src.xyz, 1);
   mat4 tmp33_inTransform;
   tmp33_inTransform = u_transform;
   tmp31_gl_Position = tmp33_inTransform * tmp31_gl_Position;
   v_uv = a_uv;
   gl_Position = tmp31_gl_Position;
}
";
String default_ring_scene_prg_aa_tri_frag_src = "uniform mat4 u_transform;
uniform vec2 u_aadist;
uniform vec4 u_color;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

varying vec2 v_uv;



void fxn20_shader(in vec4 i_color, out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   #if 1
   {
     float l;
     vec2 uv = v_uv;
     uv.x /= (1.0-uv.y);
     uv = 1.0 - abs((uv-0.5)*2.0);
     uv.x = smoothstep(0.0, u_aadist.x, uv.x);
     uv.y = smoothstep(0.0, u_aadist.y, uv.y);
     l = uv.x * uv.y;
     o_color = i_color * l;
   }
   #else
   {
     o_color = i_color;
   }
   #endif
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp34_fxnIn_i_color;
   vec4 tmp35_fxnOut_o_color;
   tmp34_fxnIn_i_color = u_color;
   fxn20_shader(tmp34_fxnIn_i_color, tmp35_fxnOut_o_color, g_FragCoord, g_NormCoord);
   gl_FragColor = tmp35_fxnOut_o_color; // read GSource id=shader output=o_color
}
";
int default_ring_scene_prg_aa_tri__a_position;
int default_ring_scene_prg_aa_tri__a_uv;
int default_ring_scene_prg_aa_tri__u_transform;
int default_ring_scene_prg_aa_tri__u_aadist;
int default_ring_scene_prg_aa_tri__u_color;
int default_ring_scene_prg_aa_tri_u_fragcoord_off_scl;
int default_ring_scene_prg_aa_tri_u_normcoord_scl;

// -------- section "default_ring_scene_tri_2_model_tri2" --------
Envelope *default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_x;
Envelope *default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_y;
Envelope *default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_z;
Envelope *default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_w;
int default_ring_scene_tri_2_buf_tri2_a;
Buffer *default_ring_scene_tri_2_buf_tri2_a_data;

// -------- section "default_ring_scene_tri_3_model_tri3" --------
Envelope *default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_x;
Envelope *default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_y;
Envelope *default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_z;
Envelope *default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_w;
int default_ring_scene_tri_3_buf_tri3_a;
Buffer *default_ring_scene_tri_3_buf_tri3_a_data;

// -------- section "default_ring_scene_pointer_1_model_pointer1" --------
int default_ring_scene_pointer_1_buf_pointer1_a;
Buffer *default_ring_scene_pointer_1_buf_pointer1_a_data;

// -------- section "default_ring_scene_renderpass_bg_gradient" --------

// -------- section "default_ring_scene_renderpass_terrain" --------

// -------- section "default_ring_scene_renderpass_dial_1" --------

// -------- section "default_ring_scene_renderpass_dial_1_blit" --------

// -------- section "default_ring_scene_renderpass_dial_2" --------

// -------- section "default_ring_scene_renderpass_dial_2_blit" --------

// -------- section "default_ring_scene_renderpass_dial_3" --------

// -------- section "default_ring_scene_renderpass_dial_3_blit" --------

// -------- section "default_ring_scene_renderpass_pointer_2" --------

// -------- section "default_ring_scene_renderpass_pointer_3" --------

// -------- section "default_ring_scene_renderpass_tri_2" --------

// -------- section "default_ring_scene_renderpass_tri_3" --------

// -------- section "default_ring_scene_renderpass_pointer_1" --------

// -------- section "default_scene_ring_scene" --------
Texture *default_ring_scene_tex_dial_1;
int default_ring_scene_fbo_dial_1;
Texture *default_ring_scene_tex_dial_2;
int default_ring_scene_fbo_dial_2;
Texture *default_ring_scene_tex_dial_3;
int default_ring_scene_fbo_dial_3;


function Init_default_ring_scene_bg_gradient_gradient_quad_prg_prg1() {
   default_ring_scene_bg_gradient_gradient_quad_prg_prg1.setVertexSource(default_ring_scene_bg_gradient_gradient_quad_prg_prg1_vtx_src);
   default_ring_scene_bg_gradient_gradient_quad_prg_prg1.setFragmentSource(default_ring_scene_bg_gradient_gradient_quad_prg_prg1_frag_src);
   if(!default_ring_scene_bg_gradient_gradient_quad_prg_prg1.create()) return false;
   default_ring_scene_bg_gradient_gradient_quad_prg_prg1__a_position = glGetAttribLocation(default_ring_scene_bg_gradient_gradient_quad_prg_prg1.programId, "a_position");
   default_ring_scene_bg_gradient_gradient_quad_prg_prg1__a_uv = glGetAttribLocation(default_ring_scene_bg_gradient_gradient_quad_prg_prg1.programId, "a_uv");
   default_ring_scene_bg_gradient_gradient_quad_prg_prg1__u_time = glGetUniformLocation(default_ring_scene_bg_gradient_gradient_quad_prg_prg1.programId, "u_time");
   default_ring_scene_bg_gradient_gradient_quad_prg_prg1__u_transform = glGetUniformLocation(default_ring_scene_bg_gradient_gradient_quad_prg_prg1.programId, "u_transform");
   default_ring_scene_bg_gradient_gradient_quad_prg_prg1_u_fragcoord_off_scl = glGetUniformLocation(default_ring_scene_bg_gradient_gradient_quad_prg_prg1.programId, "u_fragcoord_off_scl");
   default_ring_scene_bg_gradient_gradient_quad_prg_prg1_u_normcoord_scl = glGetUniformLocation(default_ring_scene_bg_gradient_gradient_quad_prg_prg1.programId, "u_normcoord_scl");
   return true;
}

function Exit_default_ring_scene_bg_gradient_gradient_quad_prg_prg1() {
   default_ring_scene_bg_gradient_gradient_quad_prg_prg1.destroy();
}

function Init_default_ring_scene_bg_gradient_model_gradient_quad() {
   default_ring_scene_bg_gradient_buf_gradient_quad_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_bg_gradient_buf_gradient_quad_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_bg_gradient_buf_gradient_quad_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_bg_gradient_model_gradient_quad(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(1 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_bg_gradient_buf_gradient_quad_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 1;
   }
   if(1 != last_program_id)
   {
      default_ring_scene_bg_gradient_gradient_quad_prg_prg1.bind();
   } // 1 != last_program_id
   if(1 != last_program_id)
   {
      default_ring_scene_bg_gradient_gradient_quad_prg_prg1.bind();
      glEnableVertexAttribArray(default_ring_scene_bg_gradient_gradient_quad_prg_prg1__a_position);
      zglVertexAttribOffset(default_ring_scene_bg_gradient_gradient_quad_prg_prg1__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_bg_gradient_gradient_quad_prg_prg1__a_uv);
      zglVertexAttribOffset(default_ring_scene_bg_gradient_gradient_quad_prg_prg1__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 1;
   } // 1 != last_program_id
   float tmp1_init;
   tmp1_init = ext_default_global_time;
   glUniform1f(default_ring_scene_bg_gradient_gradient_quad_prg_prg1__u_time, tmp1_init);
   Matrix4f tmp2_init;
   // GMat4Ortho id=<anon>
   CalcMat4Ortho(tmp2_init, 1, 1, 1);
   if(null != _transform)
   {
      Matrix4f tmp3__transform_mat;
      _transform.mul(tmp2_init) => tmp3__transform_mat;
      glUniformMatrix4fv(default_ring_scene_bg_gradient_gradient_quad_prg_prg1__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp3__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_bg_gradient_gradient_quad_prg_prg1__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp2_init);
   }
   if(0 == _fbW) glUniform4f(default_ring_scene_bg_gradient_gradient_quad_prg_prg1_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_bg_gradient_gradient_quad_prg_prg1_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_bg_gradient_gradient_quad_prg_prg1_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_bg_gradient_gradient_quad_prg_prg1_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_bg_gradient_model_gradient_quad() {
   zglDeleteBuffer(default_ring_scene_bg_gradient_buf_gradient_quad_a);
}

function Init_default_ring_scene_terrain_terrain_prg_terrain() {
   default_ring_scene_terrain_terrain_prg_terrain.setVertexSource(default_ring_scene_terrain_terrain_prg_terrain_vtx_src);
   default_ring_scene_terrain_terrain_prg_terrain.setFragmentSource(default_ring_scene_terrain_terrain_prg_terrain_frag_src);
   if(!default_ring_scene_terrain_terrain_prg_terrain.create()) return false;
   default_ring_scene_terrain_terrain_prg_terrain__a_position = glGetAttribLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "a_position");
   default_ring_scene_terrain_terrain_prg_terrain__a_uv = glGetAttribLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "a_uv");
   default_ring_scene_terrain_terrain_prg_terrain__u_transform = glGetUniformLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "u_transform");
   default_ring_scene_terrain_terrain_prg_terrain__u_tex_hmap = glGetUniformLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "u_tex_hmap");
   default_ring_scene_terrain_terrain_prg_terrain__u_tex_pal = glGetUniformLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "u_tex_pal");
   default_ring_scene_terrain_terrain_prg_terrain__u_tex_pos_x = glGetUniformLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "u_tex_pos_x");
   default_ring_scene_terrain_terrain_prg_terrain__u_tex_pos_y = glGetUniformLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "u_tex_pos_y");
   default_ring_scene_terrain_terrain_prg_terrain__u_raster_shift_1 = glGetUniformLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "u_raster_shift_1");
   default_ring_scene_terrain_terrain_prg_terrain__u_raster_shift_2 = glGetUniformLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "u_raster_shift_2");
   default_ring_scene_terrain_terrain_prg_terrain__u_fade_color = glGetUniformLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "u_fade_color");
   default_ring_scene_terrain_terrain_prg_terrain__u_scroll = glGetUniformLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "u_scroll");
   default_ring_scene_terrain_terrain_prg_terrain_u_fragcoord_off_scl = glGetUniformLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "u_fragcoord_off_scl");
   default_ring_scene_terrain_terrain_prg_terrain_u_normcoord_scl = glGetUniformLocation(default_ring_scene_terrain_terrain_prg_terrain.programId, "u_normcoord_scl");
   return true;
}

function Exit_default_ring_scene_terrain_terrain_prg_terrain() {
   default_ring_scene_terrain_terrain_prg_terrain.destroy();
}

function fxn4_(/*out*/Vector2f o) {
   Vector2f c;
   Vector2f dc;
   Vector2f d;
   d = [sin( (g_time * 0.2*0.25) % 2PI) * 0.255 + 1.255,
        0//sin( (g_time * 0.5*0.25) % 2PI) * 0.155 + 0.255
        ];
   d.mulf(0.25);
   dc = d;
   c.add(dc);
   o = c;
   o = [0,
        g_time * 0.2 * 175
        ];
}

function Init_default_ring_scene_terrain_model_terrain() {
   default_ring_scene_terrain_buf_terrain_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_terrain_buf_terrain_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 1089/*#verts*/), default_ring_scene_terrain_buf_terrain_a_data, GL_STATIC_DRAW);
   default_ring_scene_terrain_buf_terrain_i = zglGenBuffer();
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_ring_scene_terrain_buf_terrain_i);
   zglBufferData(GL_ELEMENT_ARRAY_BUFFER, (4/*GL_UNSIGNED_INT*/ * 6144/*#indices*/), default_ring_scene_terrain_buf_terrain_i_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_terrain_model_terrain(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(2 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_terrain_buf_terrain_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_ring_scene_terrain_buf_terrain_i);
      last_model_id = 2;
   }
   if(2 != last_program_id)
   {
      default_ring_scene_terrain_terrain_prg_terrain.bind();
   } // 2 != last_program_id
   glActiveTexture(GL_TEXTURE0+0);
   default_ring_scene_terrain_terrain_tex_hmap.bind();
   glActiveTexture(GL_TEXTURE0+1);
   default_ring_scene_terrain_terrain_tex_pal_green_hills.bind();
   if(2 != last_program_id)
   {
      default_ring_scene_terrain_terrain_prg_terrain.bind();
      glEnableVertexAttribArray(default_ring_scene_terrain_terrain_prg_terrain__a_position);
      zglVertexAttribOffset(default_ring_scene_terrain_terrain_prg_terrain__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_terrain_terrain_prg_terrain__a_uv);
      zglVertexAttribOffset(default_ring_scene_terrain_terrain_prg_terrain__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 2;
   } // 2 != last_program_id
   Matrix4f tmp4_init;
   // GMat4Perspective id=default.scenes.ring_scene.renderpasses.terrain.models.terrain.programs.terrain.uniforms.transform.inputs.in.0
   CalcMat4Perspective(tmp4_init, 0.68497, 60.4385, 1.1377, 41.6707);
   //tmp4_init.initFrustumFov(0.68497, 60.4385, 1.1377, 41.6707);
   //trace "mat4frustumfov="+#(tmp4_init);
   Matrix4f tmp5_in_dst;
   // GMat4LookAt id=<anon>
   Vector3f tmp6_in_eye;
   Vector3f tmp7_in_center;
   Vector3f tmp8_in_translate;
   Vector3f tmp9_in_up;
   tmp8_in_translate.init(0, 17.7414, 13.4676);
   tmp6_in_eye.init(0, -38.6695, 2.277);
   tmp6_in_eye.add(tmp8_in_translate);
   tmp7_in_center.init(0, -33.7624, -0.69868);
   tmp7_in_center.add(tmp8_in_translate);
   tmp9_in_up.init(0, 0.979, 0);
   Matrix4f.BuildLookAtMatrix4f(tmp6_in_eye, tmp7_in_center, tmp9_in_up) => tmp5_in_dst;
   // connOp=OP_MUL this_input.id=in
   tmp4_init = tmp4_init * tmp5_in_dst;
   // GMat4Scale id= id=default.scenes.ring_scene.renderpasses.terrain.models.terrain.programs.terrain.uniforms.transform.inputs.in.2
   float tmp10_in_x;
   tmp10_in_x = 3.05057 * 1.75502;
   float tmp11_in_y;
   tmp11_in_y = 4.18 * 1.75502;
   float tmp12_in_z;
   tmp12_in_z = 2.49479 * 1.75502;
   tmp5_in_dst.initScalef(tmp10_in_x, tmp11_in_y, tmp12_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp4_init = tmp4_init * tmp5_in_dst;
   // GMat4RotateXYZ id=<anon>
   tmp5_in_dst.initEulerXYZ(6.10558, 0, 0);
   // connOp=OP_MUL this_input.id=in
   tmp4_init = tmp4_init * tmp5_in_dst;
   // GMat4RotateXYZ id=default.scenes.ring_scene.renderpasses.terrain.models.terrain.constants
   float tmp13_in_z;
   float tmp14_z_src;
   tmp14_z_src = ext_default_global_time;
   float tmp15_z_scloff;
   tmp15_z_scloff = tmp14_z_src*-0.46452+0.0;
   tmp13_in_z = tmp15_z_scloff;
   tmp13_in_z += 1.76612;
   tmp5_in_dst.initEulerXYZ(0, 0, tmp13_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp4_init = tmp4_init * tmp5_in_dst;
   if(null != _transform)
   {
      Matrix4f tmp16__transform_mat;
      _transform.mul(tmp4_init) => tmp16__transform_mat;
      glUniformMatrix4fv(default_ring_scene_terrain_terrain_prg_terrain__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp16__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_terrain_terrain_prg_terrain__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp4_init);
   }
   glUniform1i(default_ring_scene_terrain_terrain_prg_terrain__u_tex_hmap, 0);  // bind texture unit 0 to sampler2D
   glUniform1i(default_ring_scene_terrain_terrain_prg_terrain__u_tex_pal, 1);  // bind texture unit 1 to sampler2D
   float tmp17_init;
   tmp17_init = 13.5255;
   glUniform1f(default_ring_scene_terrain_terrain_prg_terrain__u_tex_pos_x, tmp17_init);
   float tmp18_init;
   tmp18_init = 2.567;
   glUniform1f(default_ring_scene_terrain_terrain_prg_terrain__u_tex_pos_y, tmp18_init);
   float tmp19_init;
   float tmp20_in_src;
   tmp20_in_src = ext_default_global_time;
   float tmp21_in_scloff;
   tmp21_in_scloff = tmp20_in_src*11.3117+0.0;
   tmp19_init = tmp21_in_scloff;
   glUniform1f(default_ring_scene_terrain_terrain_prg_terrain__u_raster_shift_1, tmp19_init);
   float tmp22_init;
   float tmp23_in_src;
   tmp23_in_src = ext_default_global_time;
   float tmp24_in_scloff;
   tmp24_in_scloff = tmp23_in_src*19.4562+0.0;
   tmp22_init = tmp24_in_scloff;
   glUniform1f(default_ring_scene_terrain_terrain_prg_terrain__u_raster_shift_2, tmp22_init);
   Vector3f tmp25_init;
   tmp25_init = vector3f(0.0745098, 0.0745098, 0.0745098);
   glUniform3f(default_ring_scene_terrain_terrain_prg_terrain__u_fade_color, tmp25_init.x, tmp25_init.y, tmp25_init.z);
   Vector2f tmp26_init;
   Vector2f tmp27_fxnOut_o;
   fxn4_(tmp27_fxnOut_o);
   tmp26_init = tmp27_fxnOut_o; // read GScript id= output=out
   glUniform2f(default_ring_scene_terrain_terrain_prg_terrain__u_scroll, tmp26_init.x, tmp26_init.y);
   if(0 == _fbW) glUniform4f(default_ring_scene_terrain_terrain_prg_terrain_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_terrain_terrain_prg_terrain_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_terrain_terrain_prg_terrain_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_terrain_terrain_prg_terrain_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2048 triangles
   g_tri_count += 2048;
   zglDrawElementsOffset(GL_TRIANGLES, 6144/*count*/, GL_UNSIGNED_INT, 0/*offset*/);

   // <draw_post>
   default_ring_scene_terrain_terrain_tex_hmap.unbind();
   default_ring_scene_terrain_terrain_tex_pal_green_hills.unbind();
}

function Exit_default_ring_scene_terrain_model_terrain() {
   default_ring_scene_terrain_terrain_tex_hmap.unload();
   default_ring_scene_terrain_terrain_tex_pal_green_hills.unload();
   zglDeleteBuffer(default_ring_scene_terrain_buf_terrain_a);
   zglDeleteBuffer(default_ring_scene_terrain_buf_terrain_i);
}

function Init_default_ring_scene_prg_aa_tick() {
   default_ring_scene_prg_aa_tick.setVertexSource(default_ring_scene_prg_aa_tick_vtx_src);
   default_ring_scene_prg_aa_tick.setFragmentSource(default_ring_scene_prg_aa_tick_frag_src);
   if(!default_ring_scene_prg_aa_tick.create()) return false;
   default_ring_scene_prg_aa_tick__a_position = glGetAttribLocation(default_ring_scene_prg_aa_tick.programId, "a_position");
   default_ring_scene_prg_aa_tick__a_uv = glGetAttribLocation(default_ring_scene_prg_aa_tick.programId, "a_uv");
   default_ring_scene_prg_aa_tick__u_transform = glGetUniformLocation(default_ring_scene_prg_aa_tick.programId, "u_transform");
   default_ring_scene_prg_aa_tick__u_aadist = glGetUniformLocation(default_ring_scene_prg_aa_tick.programId, "u_aadist");
   default_ring_scene_prg_aa_tick__u_color = glGetUniformLocation(default_ring_scene_prg_aa_tick.programId, "u_color");
   default_ring_scene_prg_aa_tick_u_fragcoord_off_scl = glGetUniformLocation(default_ring_scene_prg_aa_tick.programId, "u_fragcoord_off_scl");
   default_ring_scene_prg_aa_tick_u_normcoord_scl = glGetUniformLocation(default_ring_scene_prg_aa_tick.programId, "u_normcoord_scl");
   return true;
}

function Exit_default_ring_scene_prg_aa_tick() {
   default_ring_scene_prg_aa_tick.destroy();
}

function Init_default_ring_scene_dial_1_small_ticks_model_small_tick() {
   default_ring_scene_dial_1_small_ticks_buf_small_tick_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_1_small_ticks_buf_small_tick_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_dial_1_small_ticks_buf_small_tick_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_dial_1_small_ticks_model_small_tick(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(5 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_1_small_ticks_buf_small_tick_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 5;
   }
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
   } // 3 != last_program_id
   Vector2f tmp34_mu_init;
   tmp34_mu_init = vector2f(0.104, 0.884);
   Matrix4f tmp35_mu_init;
   // GMat4Scale id= id=default.scenes.ring_scene.composites.dial_1.composites.small_ticks.models.small_tick.model_uniforms.transform.inputs.in.0
   float tmp36_in_x;
   tmp36_in_x = 0.15079 * 1;
   float tmp37_in_y;
   tmp37_in_y = 0.07389 * 1;
   float tmp38_in_z;
   tmp38_in_z = 1 * 1;
   tmp35_mu_init.initScalef(tmp36_in_x, tmp37_in_y, tmp38_in_z);
   Vector4f tmp39_mu_init;
   tmp39_mu_init = vector4f(0.43, 0.559, 0.43, 1);
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 3;
   } // 3 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp40__transform_mat;
      _transform.mul(tmp35_mu_init) => tmp40__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp40__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp35_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_tick__u_aadist, tmp34_mu_init.x, tmp34_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_tick__u_color, tmp39_mu_init.x, tmp39_mu_init.y, tmp39_mu_init.z, tmp39_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_dial_1_small_ticks_model_small_tick() {
   zglDeleteBuffer(default_ring_scene_dial_1_small_ticks_buf_small_tick_a);
}

function fxn6_script_small_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   float a = -PI/2;
   float w = 2PI/128;
   Matrix4f rot;
   Matrix4f trans;
   trans.initTranslatef(8.5,0,0);
   Matrix4f m;
   int i = 0;
   loop(128)
   {
     if(0 != ((i+0) % 4))
     {
       rot.initEulerXYZ(0,0,-a);
       rot.mul(trans);
       _transform.mul(rot) => m;
       Draw_default_ring_scene_dial_1_small_ticks_model_small_tick(0, 0, m/*transform*/);

     }
     i++;
     a += w;
   }
}

function Init_default_ring_scene_dial_1_scenegraph_small_ticks() {
   return true;
}

function Draw_default_ring_scene_dial_1_scenegraph_small_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.ring_scene.composites.dial_1.composites.small_ticks"
      Matrix4f tmp33__transform_small_ticks;
      tmp33__transform_small_ticks = _transform;
      fxn6_script_small_ticks(_fbW, _fbH, tmp33__transform_small_ticks/*transform*/);
   }

   // <draw_post>
}

function Exit_default_ring_scene_dial_1_scenegraph_small_ticks() {
}

function Init_default_ring_scene_dial_1_medium_ticks_model_medium_tick() {
   default_ring_scene_dial_1_medium_ticks_buf_medium_tick_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_1_medium_ticks_buf_medium_tick_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_dial_1_medium_ticks_buf_medium_tick_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_dial_1_medium_ticks_model_medium_tick(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(7 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_1_medium_ticks_buf_medium_tick_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 7;
   }
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
   } // 3 != last_program_id
   Vector2f tmp42_mu_init;
   tmp42_mu_init = vector2f(0.104, 0.884);
   Matrix4f tmp43_mu_init;
   // GMat4Scale id= id=default.scenes.ring_scene.composites.dial_1.composites.medium_ticks.models.medium_tick.model_uniforms.transform.inputs.in.0
   float tmp44_in_x;
   tmp44_in_x = 0.30452 * 1;
   float tmp45_in_y;
   tmp45_in_y = 0.07389 * 1;
   float tmp46_in_z;
   tmp46_in_z = 1 * 1;
   tmp43_mu_init.initScalef(tmp44_in_x, tmp45_in_y, tmp46_in_z);
   Vector4f tmp47_mu_init;
   tmp47_mu_init = vector4f(0.605, 0.87, 0.54, 1);
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 3;
   } // 3 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp48__transform_mat;
      _transform.mul(tmp43_mu_init) => tmp48__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp48__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp43_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_tick__u_aadist, tmp42_mu_init.x, tmp42_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_tick__u_color, tmp47_mu_init.x, tmp47_mu_init.y, tmp47_mu_init.z, tmp47_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_dial_1_medium_ticks_model_medium_tick() {
   zglDeleteBuffer(default_ring_scene_dial_1_medium_ticks_buf_medium_tick_a);
}

function fxn8_script_medium_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   float a = -PI/2;
   float w = 2PI/32;
   Matrix4f rot;
   Matrix4f trans;
   trans.initTranslatef(8.5,0,0);
   Matrix4f m;
   int i = 0;
   loop(32)
   {
     if(0 != (i % 4))
     {
       rot.initEulerXYZ(0,0,-a);
       rot.mul(trans);
       _transform.mul(rot) => m;
       Draw_default_ring_scene_dial_1_medium_ticks_model_medium_tick(0, 0, m/*transform*/);

     }
     i++;
     a += w;
   }
}

function Init_default_ring_scene_dial_1_scenegraph_medium_ticks() {
   return true;
}

function Draw_default_ring_scene_dial_1_scenegraph_medium_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.ring_scene.composites.dial_1.composites.medium_ticks"
      Matrix4f tmp41__transform_medium_ticks;
      tmp41__transform_medium_ticks = _transform;
      fxn8_script_medium_ticks(_fbW, _fbH, tmp41__transform_medium_ticks/*transform*/);
   }

   // <draw_post>
}

function Exit_default_ring_scene_dial_1_scenegraph_medium_ticks() {
}

function Init_default_ring_scene_dial_1_big_ticks_model_big_tick() {
   default_ring_scene_dial_1_big_ticks_buf_big_tick_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_1_big_ticks_buf_big_tick_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_dial_1_big_ticks_buf_big_tick_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_dial_1_big_ticks_model_big_tick(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(9 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_1_big_ticks_buf_big_tick_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 9;
   }
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
   } // 3 != last_program_id
   Matrix4f tmp50_mu_init;
   // GMat4Scale id= id=default.scenes.ring_scene.composites.dial_1.composites.big_ticks.models.big_tick.model_uniforms.transform.inputs.in.0
   float tmp51_in_x;
   tmp51_in_x = 0.33159 * 1;
   float tmp52_in_y;
   tmp52_in_y = 0.13601 * 1;
   float tmp53_in_z;
   tmp53_in_z = 1 * 1;
   tmp50_mu_init.initScalef(tmp51_in_x, tmp52_in_y, tmp53_in_z);
   Vector2f tmp54_mu_init;
   tmp54_mu_init = vector2f(0.078, 0.317);
   Vector4f tmp55_mu_init;
   tmp55_mu_init = vector4f(0.72, 1, 0.75, 1);
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 3;
   } // 3 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp56__transform_mat;
      _transform.mul(tmp50_mu_init) => tmp56__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp56__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp50_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_tick__u_aadist, tmp54_mu_init.x, tmp54_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_tick__u_color, tmp55_mu_init.x, tmp55_mu_init.y, tmp55_mu_init.z, tmp55_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_dial_1_big_ticks_model_big_tick() {
   zglDeleteBuffer(default_ring_scene_dial_1_big_ticks_buf_big_tick_a);
}

function fxn9_script_big_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   float a = -PI/2;
   float w = 2PI/8;
   Matrix4f rot;
   Matrix4f trans;
   trans.initTranslatef(8.5,0,0);
   Matrix4f m;
   int i = 0;
   loop(8)
   {
       rot.initEulerXYZ(0,0,-a);
       rot.mul(trans);
       _transform.mul(rot) => m;
       Draw_default_ring_scene_dial_1_big_ticks_model_big_tick(0, 0, m/*transform*/);

     a += w;
   }
}

function Init_default_ring_scene_dial_1_scenegraph_big_ticks() {
   return true;
}

function Draw_default_ring_scene_dial_1_scenegraph_big_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.ring_scene.composites.dial_1.composites.big_ticks"
      Matrix4f tmp49__transform_big_ticks;
      tmp49__transform_big_ticks = _transform;
      fxn9_script_big_ticks(_fbW, _fbH, tmp49__transform_big_ticks/*transform*/);
   }

   // <draw_post>
}

function Exit_default_ring_scene_dial_1_scenegraph_big_ticks() {
}

function fxn5_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   Draw_default_ring_scene_dial_1_scenegraph_small_ticks(0, 0, _transform/*transform*/);

   Draw_default_ring_scene_dial_1_scenegraph_medium_ticks(0, 0, _transform/*transform*/);

   Draw_default_ring_scene_dial_1_scenegraph_big_ticks(0, 0, _transform/*transform*/);

}

function Init_default_ring_scene_scenegraph_dial_1() {
   return true;
}

function Draw_default_ring_scene_scenegraph_dial_1(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.ring_scene.composites.dial_1"
      Matrix4f tmp28__transform_dial_1;
      Matrix4f tmp29__transformIn;
      // GMat4Scale id= id=default.scenes.ring_scene.composites.dial_1.inputs.transform.0
      float tmp30_in_x;
      tmp30_in_x = 1 * 0.111;
      float tmp31_in_y;
      tmp31_in_y = 1 * 0.111;
      float tmp32_in_z;
      tmp32_in_z = 1 * 0.111;
      tmp29__transformIn.initScalef(tmp30_in_x, tmp31_in_y, tmp32_in_z);
      _transform.mul(tmp29__transformIn) => tmp28__transform_dial_1;
      fxn5_ticks(_fbW, _fbH, tmp28__transform_dial_1/*transform*/);
   }

   // <draw_post>
}

function Exit_default_ring_scene_scenegraph_dial_1() {
}

function Init_default_ring_scene_prg_ring_blit() {
   default_ring_scene_prg_ring_blit.setVertexSource(default_ring_scene_prg_ring_blit_vtx_src);
   default_ring_scene_prg_ring_blit.setFragmentSource(default_ring_scene_prg_ring_blit_frag_src);
   if(!default_ring_scene_prg_ring_blit.create()) return false;
   default_ring_scene_prg_ring_blit__a_position = glGetAttribLocation(default_ring_scene_prg_ring_blit.programId, "a_position");
   default_ring_scene_prg_ring_blit__a_uv = glGetAttribLocation(default_ring_scene_prg_ring_blit.programId, "a_uv");
   default_ring_scene_prg_ring_blit__u_transform = glGetUniformLocation(default_ring_scene_prg_ring_blit.programId, "u_transform");
   default_ring_scene_prg_ring_blit__u_tex = glGetUniformLocation(default_ring_scene_prg_ring_blit.programId, "u_tex");
   default_ring_scene_prg_ring_blit_u_fragcoord_off_scl = glGetUniformLocation(default_ring_scene_prg_ring_blit.programId, "u_fragcoord_off_scl");
   default_ring_scene_prg_ring_blit_u_normcoord_scl = glGetUniformLocation(default_ring_scene_prg_ring_blit.programId, "u_normcoord_scl");
   return true;
}

function Exit_default_ring_scene_prg_ring_blit() {
   default_ring_scene_prg_ring_blit.destroy();
}

function Init_default_ring_scene_dial_1_blit_model_ring_blit() {
   default_ring_scene_dial_1_blit_buf_ring_blit_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_1_blit_buf_ring_blit_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 30/*#verts*/), default_ring_scene_dial_1_blit_buf_ring_blit_a_data, GL_STATIC_DRAW);
   default_ring_scene_dial_1_blit_buf_ring_blit_i = zglGenBuffer();
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_ring_scene_dial_1_blit_buf_ring_blit_i);
   zglBufferData(GL_ELEMENT_ARRAY_BUFFER, (4/*GL_UNSIGNED_INT*/ * 90/*#indices*/), default_ring_scene_dial_1_blit_buf_ring_blit_i_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_dial_1_blit_model_ring_blit(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(10 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_1_blit_buf_ring_blit_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_ring_scene_dial_1_blit_buf_ring_blit_i);
      last_model_id = 10;
   }
   if(4 != last_program_id)
   {
      default_ring_scene_prg_ring_blit.bind();
   } // 4 != last_program_id
   Matrix4f tmp57_mu_init;
   // GMat4Ortho id=<anon>
   CalcMat4Ortho(tmp57_mu_init, 1, 1, 1);
   Matrix4f tmp58_in_dst;
   // GMat4Scale id= id=default.scenes.ring_scene.renderpasses.dial_1_blit.models.ring_blit.model_uniforms.transform.inputs.in.1
   float tmp59_in_x;
   tmp59_in_x = 0.75 * 1;
   float tmp60_in_y;
   tmp60_in_y = 1 * 1;
   float tmp61_in_z;
   tmp61_in_z = 1 * 1;
   tmp58_in_dst.initScalef(tmp59_in_x, tmp60_in_y, tmp61_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp57_mu_init = tmp57_mu_init * tmp58_in_dst;
   // GMat4Translate id= id=default.scenes.ring_scene.renderpasses.dial_1_blit.models.ring_blit.model_uniforms.transform.inputs.in.2
   tmp58_in_dst.initTranslatef(0, 0, 0);
   // connOp=OP_MUL this_input.id=in
   tmp57_mu_init = tmp57_mu_init * tmp58_in_dst;
   // GMat4RotateXYZ id=default.scenes.ring_scene.renderpasses.dial_1_blit.models.ring_blit.constants
   float tmp62_in_z;
   float tmp63_in_tz;
   float tmp64_tz_src;
   tmp64_tz_src = ext_default_global_time;
   float tmp65_tz_scloff;
   tmp65_tz_scloff = tmp64_tz_src*-0.0161+0.0;
   tmp63_in_tz = tmp65_tz_scloff;
   tmp63_in_tz = tmp63_in_tz % 1.0f;
   tmp62_in_z = default_envc4_env_curves_z.valueAtTime(tmp63_in_tz);
   float tmp66_z_dst;
   float tmp67_in_tw;
   float tmp68_tw_src;
   tmp68_tw_src = ext_default_global_time;
   float tmp69_tw_scloff;
   tmp69_tw_scloff = tmp68_tw_src*0.09977+0.0;
   tmp67_in_tw = tmp69_tw_scloff;
   tmp67_in_tw = tmp67_in_tw % 1.0f;
   tmp66_z_dst = default_envc4_env_curves_w.valueAtTime(tmp67_in_tw);
   tmp62_in_z = tmp66_z_dst + tmp62_in_z;
   tmp62_in_z += 0;
   tmp58_in_dst.initEulerXYZ(0, 0, tmp62_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp57_mu_init = tmp57_mu_init * tmp58_in_dst;
   glActiveTexture(GL_TEXTURE0+0);
   default_ring_scene_tex_dial_1.bind();
   glUniform1i(default_ring_scene_prg_ring_blit__u_tex, 0);  // bind texture unit 0 to sampler2D
   if(4 != last_program_id)
   {
      default_ring_scene_prg_ring_blit.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_ring_blit__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_ring_blit__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_ring_blit__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_ring_blit__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 4;
   } // 4 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp70__transform_mat;
      _transform.mul(tmp57_mu_init) => tmp70__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_ring_blit__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp70__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_ring_blit__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp57_mu_init);
   }
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_ring_blit_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_ring_blit_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_ring_blit_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_ring_blit_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 30 triangles
   g_tri_count += 30;
   zglDrawElementsOffset(GL_TRIANGLES, 90/*count*/, GL_UNSIGNED_INT, 0/*offset*/);

   // <draw_post>
   default_ring_scene_tex_dial_1.unbind();
}

function Exit_default_ring_scene_dial_1_blit_model_ring_blit() {
   zglDeleteBuffer(default_ring_scene_dial_1_blit_buf_ring_blit_a);
   zglDeleteBuffer(default_ring_scene_dial_1_blit_buf_ring_blit_i);
}

function Init_default_ring_scene_dial_2_small_ticks_model_small_tick() {
   default_ring_scene_dial_2_small_ticks_buf_small_tick_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_2_small_ticks_buf_small_tick_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_dial_2_small_ticks_buf_small_tick_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_dial_2_small_ticks_model_small_tick(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(13 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_2_small_ticks_buf_small_tick_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 13;
   }
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
   } // 3 != last_program_id
   Matrix4f tmp77_mu_init;
   // GMat4Scale id= id=default.scenes.ring_scene.composites.dial_2.composites.small_ticks.models.small_tick.model_uniforms.transform.inputs.in.0
   float tmp78_in_x;
   tmp78_in_x = 0.09705 * 1;
   float tmp79_in_y;
   tmp79_in_y = 0.16599 * 1;
   float tmp80_in_z;
   tmp80_in_z = 1 * 1;
   tmp77_mu_init.initScalef(tmp78_in_x, tmp79_in_y, tmp80_in_z);
   Vector2f tmp81_mu_init;
   tmp81_mu_init = vector2f(0.284, 1);
   Vector4f tmp82_mu_init;
   tmp82_mu_init = vector4f(0.43, 0.55, 0.43, 1);
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 3;
   } // 3 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp83__transform_mat;
      _transform.mul(tmp77_mu_init) => tmp83__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp83__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp77_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_tick__u_aadist, tmp81_mu_init.x, tmp81_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_tick__u_color, tmp82_mu_init.x, tmp82_mu_init.y, tmp82_mu_init.z, tmp82_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_dial_2_small_ticks_model_small_tick() {
   zglDeleteBuffer(default_ring_scene_dial_2_small_ticks_buf_small_tick_a);
}

function fxn12_script_small_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   float a = -PI/2;
   float w = 2PI/64;
   Matrix4f rot;
   Matrix4f trans;
   trans.initTranslatef(8.5,0,0);
   Matrix4f m;
   int i = 0;
   loop(64)
   {
     if(0 != ((i+0) % 2))
     {
       rot.initEulerXYZ(0,0,-a);
       rot.mul(trans);
       _transform.mul(rot) => m;
       Draw_default_ring_scene_dial_2_small_ticks_model_small_tick(0, 0, m/*transform*/);

     }
     i++;
     a += w;
   }
}

function Init_default_ring_scene_dial_2_scenegraph_small_ticks() {
   return true;
}

function Draw_default_ring_scene_dial_2_scenegraph_small_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.ring_scene.composites.dial_2.composites.small_ticks"
      Matrix4f tmp76__transform_small_ticks;
      tmp76__transform_small_ticks = _transform;
      fxn12_script_small_ticks(_fbW, _fbH, tmp76__transform_small_ticks/*transform*/);
   }

   // <draw_post>
}

function Exit_default_ring_scene_dial_2_scenegraph_small_ticks() {
}

function Init_default_ring_scene_dial_2_medium_ticks_model_medium_tick() {
   default_ring_scene_dial_2_medium_ticks_buf_medium_tick_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_2_medium_ticks_buf_medium_tick_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_dial_2_medium_ticks_buf_medium_tick_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_dial_2_medium_ticks_model_medium_tick(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(15 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_2_medium_ticks_buf_medium_tick_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 15;
   }
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
   } // 3 != last_program_id
   Matrix4f tmp85_mu_init;
   // GMat4Scale id= id=default.scenes.ring_scene.composites.dial_2.composites.medium_ticks.models.medium_tick.model_uniforms.transform.inputs.in.0
   float tmp86_in_x;
   tmp86_in_x = 0.17919 * 1;
   float tmp87_in_y;
   tmp87_in_y = 0.10655 * 1;
   float tmp88_in_z;
   tmp88_in_z = 1 * 1;
   tmp85_mu_init.initScalef(tmp86_in_x, tmp87_in_y, tmp88_in_z);
   Vector2f tmp89_mu_init;
   tmp89_mu_init = vector2f(0.104, 0.884);
   Vector4f tmp90_mu_init;
   tmp90_mu_init = vector4f(0.605, 0.87, 0.55, 1);
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 3;
   } // 3 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp91__transform_mat;
      _transform.mul(tmp85_mu_init) => tmp91__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp91__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp85_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_tick__u_aadist, tmp89_mu_init.x, tmp89_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_tick__u_color, tmp90_mu_init.x, tmp90_mu_init.y, tmp90_mu_init.z, tmp90_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_dial_2_medium_ticks_model_medium_tick() {
   zglDeleteBuffer(default_ring_scene_dial_2_medium_ticks_buf_medium_tick_a);
}

function fxn13_script_medium_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   float a = -PI/2;
   float w = 2PI/32;
   Matrix4f rot;
   Matrix4f trans;
   trans.initTranslatef(8.5,0,0);
   Matrix4f m;
   int i = 0;
   loop(32)
   {
     if(0 != (i % 4))
     {
       rot.initEulerXYZ(0,0,-a);
       rot.mul(trans);
       _transform.mul(rot) => m;
       Draw_default_ring_scene_dial_2_medium_ticks_model_medium_tick(0, 0, m/*transform*/);

     }
     i++;
     a += w;
   }
}

function Init_default_ring_scene_dial_2_scenegraph_medium_ticks() {
   return true;
}

function Draw_default_ring_scene_dial_2_scenegraph_medium_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.ring_scene.composites.dial_2.composites.medium_ticks"
      Matrix4f tmp84__transform_medium_ticks;
      tmp84__transform_medium_ticks = _transform;
      fxn13_script_medium_ticks(_fbW, _fbH, tmp84__transform_medium_ticks/*transform*/);
   }

   // <draw_post>
}

function Exit_default_ring_scene_dial_2_scenegraph_medium_ticks() {
}

function Init_default_ring_scene_dial_2_big_ticks_model_big_tick() {
   default_ring_scene_dial_2_big_ticks_buf_big_tick_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_2_big_ticks_buf_big_tick_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_dial_2_big_ticks_buf_big_tick_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_dial_2_big_ticks_model_big_tick(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(17 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_2_big_ticks_buf_big_tick_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 17;
   }
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
   } // 3 != last_program_id
   Matrix4f tmp93_mu_init;
   // GMat4Scale id= id=default.scenes.ring_scene.composites.dial_2.composites.big_ticks.models.big_tick.model_uniforms.transform.inputs.in.0
   float tmp94_in_x;
   tmp94_in_x = 0.30528 * 1;
   float tmp95_in_y;
   tmp95_in_y = 0.1241 * 1;
   float tmp96_in_z;
   tmp96_in_z = 1 * 1;
   tmp93_mu_init.initScalef(tmp94_in_x, tmp95_in_y, tmp96_in_z);
   Vector2f tmp97_mu_init;
   tmp97_mu_init = vector2f(0.095, 0.304);
   Vector4f tmp98_mu_init;
   tmp98_mu_init = vector4f(0.72, 1, 0.75, 1);
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 3;
   } // 3 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp99__transform_mat;
      _transform.mul(tmp93_mu_init) => tmp99__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp99__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp93_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_tick__u_aadist, tmp97_mu_init.x, tmp97_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_tick__u_color, tmp98_mu_init.x, tmp98_mu_init.y, tmp98_mu_init.z, tmp98_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_dial_2_big_ticks_model_big_tick() {
   zglDeleteBuffer(default_ring_scene_dial_2_big_ticks_buf_big_tick_a);
}

function fxn14_script_big_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   float a = -PI/2;
   float w = 2PI/8;
   Matrix4f rot;
   Matrix4f trans;
   trans.initTranslatef(8.5,0,0);
   Matrix4f m;
   int i = 0;
   loop(8)
   {
       rot.initEulerXYZ(0,0,-a);
       rot.mul(trans);
       _transform.mul(rot) => m;
       Draw_default_ring_scene_dial_2_big_ticks_model_big_tick(0, 0, m/*transform*/);

     a += w;
   }
}

function Init_default_ring_scene_dial_2_scenegraph_big_ticks() {
   return true;
}

function Draw_default_ring_scene_dial_2_scenegraph_big_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.ring_scene.composites.dial_2.composites.big_ticks"
      Matrix4f tmp92__transform_big_ticks;
      tmp92__transform_big_ticks = _transform;
      fxn14_script_big_ticks(_fbW, _fbH, tmp92__transform_big_ticks/*transform*/);
   }

   // <draw_post>
}

function Exit_default_ring_scene_dial_2_scenegraph_big_ticks() {
}

function fxn11_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   Draw_default_ring_scene_dial_2_scenegraph_small_ticks(0, 0, _transform/*transform*/);

   Draw_default_ring_scene_dial_2_scenegraph_medium_ticks(0, 0, _transform/*transform*/);

   Draw_default_ring_scene_dial_2_scenegraph_big_ticks(0, 0, _transform/*transform*/);

}

function Init_default_ring_scene_scenegraph_dial_2() {
   return true;
}

function Draw_default_ring_scene_scenegraph_dial_2(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.ring_scene.composites.dial_2"
      Matrix4f tmp71__transform_dial_2;
      Matrix4f tmp72__transformIn;
      // GMat4Scale id= id=default.scenes.ring_scene.composites.dial_2.inputs.transform.0
      float tmp73_in_x;
      tmp73_in_x = 1 * 0.111;
      float tmp74_in_y;
      tmp74_in_y = 1 * 0.111;
      float tmp75_in_z;
      tmp75_in_z = 1 * 0.111;
      tmp72__transformIn.initScalef(tmp73_in_x, tmp74_in_y, tmp75_in_z);
      _transform.mul(tmp72__transformIn) => tmp71__transform_dial_2;
      fxn11_ticks(_fbW, _fbH, tmp71__transform_dial_2/*transform*/);
   }

   // <draw_post>
}

function Exit_default_ring_scene_scenegraph_dial_2() {
}

function Init_default_ring_scene_dial_2_blit_model_ring_blit() {
   default_ring_scene_dial_2_blit_buf_ring_blit_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_2_blit_buf_ring_blit_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 30/*#verts*/), default_ring_scene_dial_2_blit_buf_ring_blit_a_data, GL_STATIC_DRAW);
   default_ring_scene_dial_2_blit_buf_ring_blit_i = zglGenBuffer();
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_ring_scene_dial_2_blit_buf_ring_blit_i);
   zglBufferData(GL_ELEMENT_ARRAY_BUFFER, (4/*GL_UNSIGNED_INT*/ * 90/*#indices*/), default_ring_scene_dial_2_blit_buf_ring_blit_i_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_dial_2_blit_model_ring_blit(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(18 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_2_blit_buf_ring_blit_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_ring_scene_dial_2_blit_buf_ring_blit_i);
      last_model_id = 18;
   }
   if(4 != last_program_id)
   {
      default_ring_scene_prg_ring_blit.bind();
   } // 4 != last_program_id
   Matrix4f tmp100_mu_init;
   // GMat4Ortho id=<anon>
   CalcMat4Ortho(tmp100_mu_init, 1, 1, 1);
   Matrix4f tmp101_in_dst;
   // GMat4Scale id=scl_256x192 id=default.scenes.ring_scene.renderpasses.dial_2_blit.models.ring_blit.constants.scl_256x192
   float tmp102_in_x;
   tmp102_in_x = 0.75 * 0.32;
   float tmp103_in_y;
   tmp103_in_y = 1 * 0.32;
   float tmp104_in_z;
   tmp104_in_z = 1 * 0.32;
   tmp101_in_dst.initScalef(tmp102_in_x, tmp103_in_y, tmp104_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp100_mu_init = tmp100_mu_init * tmp101_in_dst;
   // GMat4Translate id=trans_ctr id=default.scenes.ring_scene.renderpasses.dial_2_blit.models.ring_blit.constants.trans_ctr
   tmp101_in_dst.initTranslatef(-1, 1, 0);
   // connOp=OP_MUL this_input.id=in
   tmp100_mu_init = tmp100_mu_init * tmp101_in_dst;
   // GMat4RotateXYZ id=default.scenes.ring_scene.renderpasses.dial_2_blit.models.ring_blit.constants
   float tmp105_in_z;
   float tmp106_in_tx;
   float tmp107_tx_src;
   tmp107_tx_src = ext_default_global_time;
   float tmp108_tx_scloff;
   tmp108_tx_scloff = tmp107_tx_src*0.05924+0.0;
   tmp106_in_tx = tmp108_tx_scloff;
   tmp106_in_tx = tmp106_in_tx % 1.0f;
   tmp105_in_z = default_envc4_env_curves_dial_2_x.valueAtTime(tmp106_in_tx);
   float tmp109_z_dst;
   float tmp110_in_ty;
   float tmp111_ty_src;
   tmp111_ty_src = ext_default_global_time;
   float tmp112_ty_scloff;
   tmp112_ty_scloff = tmp111_ty_src*0.01855+0.0;
   tmp110_in_ty = tmp112_ty_scloff;
   tmp110_in_ty = tmp110_in_ty % 1.0f;
   tmp109_z_dst = default_envc4_env_curves_dial_2_y.valueAtTime(tmp110_in_ty);
   tmp105_in_z = tmp109_z_dst + tmp105_in_z;
   tmp105_in_z += 0;
   tmp101_in_dst.initEulerXYZ(0, 0, tmp105_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp100_mu_init = tmp100_mu_init * tmp101_in_dst;
   glActiveTexture(GL_TEXTURE0+0);
   default_ring_scene_tex_dial_2.bind();
   glUniform1i(default_ring_scene_prg_ring_blit__u_tex, 0);  // bind texture unit 0 to sampler2D
   if(4 != last_program_id)
   {
      default_ring_scene_prg_ring_blit.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_ring_blit__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_ring_blit__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_ring_blit__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_ring_blit__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 4;
   } // 4 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp113__transform_mat;
      _transform.mul(tmp100_mu_init) => tmp113__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_ring_blit__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp113__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_ring_blit__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp100_mu_init);
   }
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_ring_blit_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_ring_blit_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_ring_blit_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_ring_blit_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 30 triangles
   g_tri_count += 30;
   zglDrawElementsOffset(GL_TRIANGLES, 90/*count*/, GL_UNSIGNED_INT, 0/*offset*/);

   // <draw_post>
   default_ring_scene_tex_dial_2.unbind();
}

function Exit_default_ring_scene_dial_2_blit_model_ring_blit() {
   zglDeleteBuffer(default_ring_scene_dial_2_blit_buf_ring_blit_a);
   zglDeleteBuffer(default_ring_scene_dial_2_blit_buf_ring_blit_i);
}

function Init_default_ring_scene_dial_3_small_ticks_model_small_tick() {
   default_ring_scene_dial_3_small_ticks_buf_small_tick_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_3_small_ticks_buf_small_tick_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_dial_3_small_ticks_buf_small_tick_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_dial_3_small_ticks_model_small_tick(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(21 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_3_small_ticks_buf_small_tick_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 21;
   }
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
   } // 3 != last_program_id
   Matrix4f tmp120_mu_init;
   // GMat4Scale id= id=default.scenes.ring_scene.composites.dial_3.composites.small_ticks.models.small_tick.model_uniforms.transform.inputs.in.0
   float tmp121_in_x;
   tmp121_in_x = 0.09705 * 1;
   float tmp122_in_y;
   tmp122_in_y = 0.16599 * 1;
   float tmp123_in_z;
   tmp123_in_z = 1 * 1;
   tmp120_mu_init.initScalef(tmp121_in_x, tmp122_in_y, tmp123_in_z);
   Vector2f tmp124_mu_init;
   tmp124_mu_init = vector2f(0.284, 1);
   Vector4f tmp125_mu_init;
   tmp125_mu_init = vector4f(0.43, 0.55, 0.43, 1);
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 3;
   } // 3 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp126__transform_mat;
      _transform.mul(tmp120_mu_init) => tmp126__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp126__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp120_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_tick__u_aadist, tmp124_mu_init.x, tmp124_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_tick__u_color, tmp125_mu_init.x, tmp125_mu_init.y, tmp125_mu_init.z, tmp125_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_dial_3_small_ticks_model_small_tick() {
   zglDeleteBuffer(default_ring_scene_dial_3_small_ticks_buf_small_tick_a);
}

function fxn16_script_small_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   float a = -PI/2;
   float w = 2PI/32;
   Matrix4f rot;
   Matrix4f trans;
   trans.initTranslatef(8.5,0,0);
   Matrix4f m;
   int i = 0;
   loop(32)
   {
     if(0 != ((i+0) % 2))
     {
       rot.initEulerXYZ(0,0,-a);
       rot.mul(trans);
       _transform.mul(rot) => m;
       Draw_default_ring_scene_dial_3_small_ticks_model_small_tick(0, 0, m/*transform*/);

     }
     i++;
     a += w;
   }
}

function Init_default_ring_scene_dial_3_scenegraph_small_ticks() {
   return true;
}

function Draw_default_ring_scene_dial_3_scenegraph_small_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.ring_scene.composites.dial_3.composites.small_ticks"
      Matrix4f tmp119__transform_small_ticks;
      tmp119__transform_small_ticks = _transform;
      fxn16_script_small_ticks(_fbW, _fbH, tmp119__transform_small_ticks/*transform*/);
   }

   // <draw_post>
}

function Exit_default_ring_scene_dial_3_scenegraph_small_ticks() {
}

function Init_default_ring_scene_dial_3_medium_ticks_model_medium_tick() {
   default_ring_scene_dial_3_medium_ticks_buf_medium_tick_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_3_medium_ticks_buf_medium_tick_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_dial_3_medium_ticks_buf_medium_tick_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_dial_3_medium_ticks_model_medium_tick(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(23 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_3_medium_ticks_buf_medium_tick_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 23;
   }
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
   } // 3 != last_program_id
   Matrix4f tmp128_mu_init;
   // GMat4Scale id= id=default.scenes.ring_scene.composites.dial_3.composites.medium_ticks.models.medium_tick.model_uniforms.transform.inputs.in.0
   float tmp129_in_x;
   tmp129_in_x = 0.17919 * 1;
   float tmp130_in_y;
   tmp130_in_y = 0.10655 * 1;
   float tmp131_in_z;
   tmp131_in_z = 1 * 1;
   tmp128_mu_init.initScalef(tmp129_in_x, tmp130_in_y, tmp131_in_z);
   Vector2f tmp132_mu_init;
   tmp132_mu_init = vector2f(0.104, 0.884);
   Vector4f tmp133_mu_init;
   tmp133_mu_init = vector4f(0.6, 0.87, 0.55, 1);
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 3;
   } // 3 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp134__transform_mat;
      _transform.mul(tmp128_mu_init) => tmp134__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp134__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp128_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_tick__u_aadist, tmp132_mu_init.x, tmp132_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_tick__u_color, tmp133_mu_init.x, tmp133_mu_init.y, tmp133_mu_init.z, tmp133_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_dial_3_medium_ticks_model_medium_tick() {
   zglDeleteBuffer(default_ring_scene_dial_3_medium_ticks_buf_medium_tick_a);
}

function fxn17_script_medium_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   float a = -PI/2;
   float w = 2PI/16;
   Matrix4f rot;
   Matrix4f trans;
   trans.initTranslatef(8.5,0,0);
   Matrix4f m;
   int i = 0;
   loop(16)
   {
     if(0 != (i % 2))
     {
       rot.initEulerXYZ(0,0,-a);
       rot.mul(trans);
       _transform.mul(rot) => m;
       Draw_default_ring_scene_dial_3_medium_ticks_model_medium_tick(0, 0, m/*transform*/);

     }
     i++;
     a += w;
   }
}

function Init_default_ring_scene_dial_3_scenegraph_medium_ticks() {
   return true;
}

function Draw_default_ring_scene_dial_3_scenegraph_medium_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.ring_scene.composites.dial_3.composites.medium_ticks"
      Matrix4f tmp127__transform_medium_ticks;
      tmp127__transform_medium_ticks = _transform;
      fxn17_script_medium_ticks(_fbW, _fbH, tmp127__transform_medium_ticks/*transform*/);
   }

   // <draw_post>
}

function Exit_default_ring_scene_dial_3_scenegraph_medium_ticks() {
}

function Init_default_ring_scene_dial_3_big_ticks_model_big_tick() {
   default_ring_scene_dial_3_big_ticks_buf_big_tick_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_3_big_ticks_buf_big_tick_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_dial_3_big_ticks_buf_big_tick_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_dial_3_big_ticks_model_big_tick(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(25 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_3_big_ticks_buf_big_tick_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 25;
   }
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
   } // 3 != last_program_id
   Matrix4f tmp136_mu_init;
   // GMat4Scale id= id=default.scenes.ring_scene.composites.dial_3.composites.big_ticks.models.big_tick.model_uniforms.transform.inputs.in.0
   float tmp137_in_x;
   tmp137_in_x = 0.24641 * 1;
   float tmp138_in_y;
   tmp138_in_y = 0.18097 * 1;
   float tmp139_in_z;
   tmp139_in_z = 1 * 1;
   tmp136_mu_init.initScalef(tmp137_in_x, tmp138_in_y, tmp139_in_z);
   Vector2f tmp140_mu_init;
   tmp140_mu_init = vector2f(0.095, 0.304);
   Vector4f tmp141_mu_init;
   tmp141_mu_init = vector4f(0.72, 1, 0.75, 1);
   if(3 != last_program_id)
   {
      default_ring_scene_prg_aa_tick.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tick__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tick__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 3;
   } // 3 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp142__transform_mat;
      _transform.mul(tmp136_mu_init) => tmp142__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp142__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_tick__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp136_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_tick__u_aadist, tmp140_mu_init.x, tmp140_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_tick__u_color, tmp141_mu_init.x, tmp141_mu_init.y, tmp141_mu_init.z, tmp141_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_tick_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_tick_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_dial_3_big_ticks_model_big_tick() {
   zglDeleteBuffer(default_ring_scene_dial_3_big_ticks_buf_big_tick_a);
}

function fxn18_script_big_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   float a = -PI/2;
   float w = 2PI/8;
   Matrix4f rot;
   Matrix4f trans;
   trans.initTranslatef(8.5,0,0);
   Matrix4f m;
   int i = 0;
   loop(8)
   {
       rot.initEulerXYZ(0,0,-a);
       rot.mul(trans);
       _transform.mul(rot) => m;
       Draw_default_ring_scene_dial_3_big_ticks_model_big_tick(0, 0, m/*transform*/);

     a += w;
   }
}

function Init_default_ring_scene_dial_3_scenegraph_big_ticks() {
   return true;
}

function Draw_default_ring_scene_dial_3_scenegraph_big_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.ring_scene.composites.dial_3.composites.big_ticks"
      Matrix4f tmp135__transform_big_ticks;
      tmp135__transform_big_ticks = _transform;
      fxn18_script_big_ticks(_fbW, _fbH, tmp135__transform_big_ticks/*transform*/);
   }

   // <draw_post>
}

function Exit_default_ring_scene_dial_3_scenegraph_big_ticks() {
}

function fxn15_ticks(int _fbW, int _fbH, Matrix4f _transform) {
   Draw_default_ring_scene_dial_3_scenegraph_small_ticks(0, 0, _transform/*transform*/);

   Draw_default_ring_scene_dial_3_scenegraph_medium_ticks(0, 0, _transform/*transform*/);

   Draw_default_ring_scene_dial_3_scenegraph_big_ticks(0, 0, _transform/*transform*/);

}

function Init_default_ring_scene_scenegraph_dial_3() {
   return true;
}

function Draw_default_ring_scene_scenegraph_dial_3(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.ring_scene.composites.dial_3"
      Matrix4f tmp114__transform_dial_3;
      Matrix4f tmp115__transformIn;
      // GMat4Scale id= id=default.scenes.ring_scene.composites.dial_3.inputs.transform.0
      float tmp116_in_x;
      tmp116_in_x = 1 * 0.111;
      float tmp117_in_y;
      tmp117_in_y = 1 * 0.111;
      float tmp118_in_z;
      tmp118_in_z = 1 * 0.111;
      tmp115__transformIn.initScalef(tmp116_in_x, tmp117_in_y, tmp118_in_z);
      _transform.mul(tmp115__transformIn) => tmp114__transform_dial_3;
      fxn15_ticks(_fbW, _fbH, tmp114__transform_dial_3/*transform*/);
   }

   // <draw_post>
}

function Exit_default_ring_scene_scenegraph_dial_3() {
}

function Init_default_ring_scene_dial_3_blit_model_ring_blit() {
   default_ring_scene_dial_3_blit_buf_ring_blit_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_3_blit_buf_ring_blit_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 30/*#verts*/), default_ring_scene_dial_3_blit_buf_ring_blit_a_data, GL_STATIC_DRAW);
   default_ring_scene_dial_3_blit_buf_ring_blit_i = zglGenBuffer();
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_ring_scene_dial_3_blit_buf_ring_blit_i);
   zglBufferData(GL_ELEMENT_ARRAY_BUFFER, (4/*GL_UNSIGNED_INT*/ * 90/*#indices*/), default_ring_scene_dial_3_blit_buf_ring_blit_i_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_dial_3_blit_model_ring_blit(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(26 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_dial_3_blit_buf_ring_blit_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_ring_scene_dial_3_blit_buf_ring_blit_i);
      last_model_id = 26;
   }
   if(4 != last_program_id)
   {
      default_ring_scene_prg_ring_blit.bind();
   } // 4 != last_program_id
   glActiveTexture(GL_TEXTURE0+0);
   default_ring_scene_tex_dial_3.bind();
   glUniform1i(default_ring_scene_prg_ring_blit__u_tex, 0);  // bind texture unit 0 to sampler2D
   Matrix4f tmp143_mu_init;
   // GMat4Ortho id=<anon>
   CalcMat4Ortho(tmp143_mu_init, 1, 1, 1);
   Matrix4f tmp144_in_dst;
   // GMat4Scale id=scl_256x192 id=default.scenes.ring_scene.renderpasses.dial_3_blit.models.ring_blit.constants.scl_256x192
   float tmp145_in_x;
   tmp145_in_x = 0.75 * 0.32;
   float tmp146_in_y;
   tmp146_in_y = 1 * 0.32;
   float tmp147_in_z;
   tmp147_in_z = 1 * 0.32;
   tmp144_in_dst.initScalef(tmp145_in_x, tmp146_in_y, tmp147_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp143_mu_init = tmp143_mu_init * tmp144_in_dst;
   // GMat4Translate id=trans_ctr id=default.scenes.ring_scene.renderpasses.dial_3_blit.models.ring_blit.constants.trans_ctr
   tmp144_in_dst.initTranslatef(1, -1, 0);
   // connOp=OP_MUL this_input.id=in
   tmp143_mu_init = tmp143_mu_init * tmp144_in_dst;
   // GMat4RotateXYZ id=default.scenes.ring_scene.renderpasses.dial_3_blit.models.ring_blit.constants
   float tmp148_in_z;
   float tmp149_z_src;
   float tmp150_in_tx;
   float tmp151_tx_src;
   tmp151_tx_src = ext_default_global_time;
   float tmp152_tx_scloff;
   tmp152_tx_scloff = tmp151_tx_src*-0.04148+0.0;
   tmp150_in_tx = tmp152_tx_scloff;
   tmp150_in_tx = tmp150_in_tx % 1.0f;
   tmp149_z_src = default_envc4_env_curves_dial_3_x.valueAtTime(tmp150_in_tx);
   float tmp153_z_scloff;
   tmp153_z_scloff = tmp149_z_src*6.28+0.0;
   tmp148_in_z = tmp153_z_scloff;
   float tmp154_z_dst;
   float tmp155_in_ty;
   float tmp156_ty_src;
   tmp156_ty_src = ext_default_global_time;
   float tmp157_ty_scloff;
   tmp157_ty_scloff = tmp156_ty_src*-0.01818+0.0;
   tmp155_in_ty = tmp157_ty_scloff;
   tmp155_in_ty = tmp155_in_ty % 1.0f;
   tmp149_z_src = default_envc4_env_curves_dial_3_y.valueAtTime(tmp155_in_ty);
   float tmp158_z_scloff;
   tmp158_z_scloff = tmp149_z_src*6.28+0.0;
   tmp154_z_dst = tmp158_z_scloff;
   tmp148_in_z = tmp154_z_dst + tmp148_in_z;
   tmp148_in_z += 0;
   tmp144_in_dst.initEulerXYZ(0, 0, tmp148_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp143_mu_init = tmp143_mu_init * tmp144_in_dst;
   if(4 != last_program_id)
   {
      default_ring_scene_prg_ring_blit.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_ring_blit__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_ring_blit__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_ring_blit__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_ring_blit__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 4;
   } // 4 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp159__transform_mat;
      _transform.mul(tmp143_mu_init) => tmp159__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_ring_blit__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp159__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_ring_blit__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp143_mu_init);
   }
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_ring_blit_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_ring_blit_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_ring_blit_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_ring_blit_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 30 triangles
   g_tri_count += 30;
   zglDrawElementsOffset(GL_TRIANGLES, 90/*count*/, GL_UNSIGNED_INT, 0/*offset*/);

   // <draw_post>
   default_ring_scene_tex_dial_3.unbind();
}

function Exit_default_ring_scene_dial_3_blit_model_ring_blit() {
   zglDeleteBuffer(default_ring_scene_dial_3_blit_buf_ring_blit_a);
   zglDeleteBuffer(default_ring_scene_dial_3_blit_buf_ring_blit_i);
}

function Init_default_ring_scene_prg_aa_pointer() {
   default_ring_scene_prg_aa_pointer.setVertexSource(default_ring_scene_prg_aa_pointer_vtx_src);
   default_ring_scene_prg_aa_pointer.setFragmentSource(default_ring_scene_prg_aa_pointer_frag_src);
   if(!default_ring_scene_prg_aa_pointer.create()) return false;
   default_ring_scene_prg_aa_pointer__a_position = glGetAttribLocation(default_ring_scene_prg_aa_pointer.programId, "a_position");
   default_ring_scene_prg_aa_pointer__a_uv = glGetAttribLocation(default_ring_scene_prg_aa_pointer.programId, "a_uv");
   default_ring_scene_prg_aa_pointer__u_transform = glGetUniformLocation(default_ring_scene_prg_aa_pointer.programId, "u_transform");
   default_ring_scene_prg_aa_pointer__u_aadist = glGetUniformLocation(default_ring_scene_prg_aa_pointer.programId, "u_aadist");
   default_ring_scene_prg_aa_pointer__u_color = glGetUniformLocation(default_ring_scene_prg_aa_pointer.programId, "u_color");
   default_ring_scene_prg_aa_pointer_u_fragcoord_off_scl = glGetUniformLocation(default_ring_scene_prg_aa_pointer.programId, "u_fragcoord_off_scl");
   default_ring_scene_prg_aa_pointer_u_normcoord_scl = glGetUniformLocation(default_ring_scene_prg_aa_pointer.programId, "u_normcoord_scl");
   return true;
}

function Exit_default_ring_scene_prg_aa_pointer() {
   default_ring_scene_prg_aa_pointer.destroy();
}

function Init_default_ring_scene_pointer_2_model_pointer2() {
   default_ring_scene_pointer_2_buf_pointer2_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_pointer_2_buf_pointer2_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_pointer_2_buf_pointer2_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_pointer_2_model_pointer2(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(27 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_pointer_2_buf_pointer2_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 27;
   }
   if(5 != last_program_id)
   {
      default_ring_scene_prg_aa_pointer.bind();
   } // 5 != last_program_id
   Matrix4f tmp160_mu_init;
   // GMat4Scale id=scl_256x192 id=default.scenes.ring_scene.renderpasses.dial_2_blit.models.ring_blit.constants.scl_256x192
   float tmp161_in_x;
   tmp161_in_x = 0.75 * 0.32;
   float tmp162_in_y;
   tmp162_in_y = 1 * 0.32;
   float tmp163_in_z;
   tmp163_in_z = 1 * 0.32;
   tmp160_mu_init.initScalef(tmp161_in_x, tmp162_in_y, tmp163_in_z);
   Matrix4f tmp164_in_dst;
   // GMat4Translate id=trans_ctr id=default.scenes.ring_scene.renderpasses.dial_2_blit.models.ring_blit.constants.trans_ctr
   tmp164_in_dst.initTranslatef(-1, 1, 0);
   // connOp=OP_MUL this_input.id=in
   tmp160_mu_init = tmp160_mu_init * tmp164_in_dst;
   // GMat4RotateXYZ id=default.scenes.ring_scene.renderpasses.pointer_2.models.pointer2.constants
   float tmp165_in_z;
   float tmp166_z_src;
   float tmp167_in_tx;
   float tmp168_tx_src;
   tmp168_tx_src = ext_default_global_time;
   float tmp169_tx_scloff;
   tmp169_tx_scloff = tmp168_tx_src*0.00625+0.0;
   tmp167_in_tx = tmp169_tx_scloff;
   tmp167_in_tx = tmp167_in_tx % 1.0f;
   tmp166_z_src = default_envc4_env_curves_dial_2_pointer_x.valueAtTime(tmp167_in_tx);
   float tmp170_z_scloff;
   tmp170_z_scloff = tmp166_z_src*6.28+0.0;
   tmp165_in_z = tmp170_z_scloff;
   float tmp171_z_dst;
   float tmp172_in_ty;
   float tmp173_ty_src;
   tmp173_ty_src = ext_default_global_time;
   float tmp174_ty_scloff;
   tmp174_ty_scloff = tmp173_ty_src*0.02465+0.0;
   tmp172_in_ty = tmp174_ty_scloff;
   tmp172_in_ty = tmp172_in_ty % 1.0f;
   tmp166_z_src = default_envc4_env_curves_dial_2_pointer_y.valueAtTime(tmp172_in_ty);
   float tmp175_z_scloff;
   tmp175_z_scloff = tmp166_z_src*6.28+0.0;
   tmp171_z_dst = tmp175_z_scloff;
   tmp165_in_z = tmp171_z_dst + tmp165_in_z;
   tmp165_in_z += 0;
   tmp164_in_dst.initEulerXYZ(0, 0, tmp165_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp160_mu_init = tmp160_mu_init * tmp164_in_dst;
   // GMat4Scale id= id=default.scenes.ring_scene.renderpasses.pointer_2.models.pointer2.model_uniforms.transform.inputs.in.3
   float tmp176_in_x;
   tmp176_in_x = 7.40539 * 0.064;
   float tmp177_in_y;
   tmp177_in_y = 0.22492 * 0.064;
   float tmp178_in_z;
   tmp178_in_z = 1 * 0.064;
   tmp164_in_dst.initScalef(tmp176_in_x, tmp177_in_y, tmp178_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp160_mu_init = tmp160_mu_init * tmp164_in_dst;
   Vector2f tmp179_mu_init;
   tmp179_mu_init = vector2f(0.018, 0.793);
   Vector4f tmp180_mu_init;
   tmp180_mu_init = vector4f(0.54, 1, 1, 0.86);
   if(5 != last_program_id)
   {
      default_ring_scene_prg_aa_pointer.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_pointer__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_pointer__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_pointer__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_pointer__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 5;
   } // 5 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp181__transform_mat;
      _transform.mul(tmp160_mu_init) => tmp181__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_pointer__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp181__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_pointer__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp160_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_pointer__u_aadist, tmp179_mu_init.x, tmp179_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_pointer__u_color, tmp180_mu_init.x, tmp180_mu_init.y, tmp180_mu_init.z, tmp180_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_pointer_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_pointer_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_pointer_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_pointer_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_pointer_2_model_pointer2() {
   zglDeleteBuffer(default_ring_scene_pointer_2_buf_pointer2_a);
}

function Init_default_ring_scene_pointer_3_model_pointer3() {
   default_ring_scene_pointer_3_buf_pointer3_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_pointer_3_buf_pointer3_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_pointer_3_buf_pointer3_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_pointer_3_model_pointer3(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(28 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_pointer_3_buf_pointer3_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 28;
   }
   if(5 != last_program_id)
   {
      default_ring_scene_prg_aa_pointer.bind();
   } // 5 != last_program_id
   Matrix4f tmp182_mu_init;
   // GMat4Scale id=scl_256x192 id=default.scenes.ring_scene.renderpasses.dial_3_blit.models.ring_blit.constants.scl_256x192
   float tmp183_in_x;
   tmp183_in_x = 0.75 * 0.32;
   float tmp184_in_y;
   tmp184_in_y = 1 * 0.32;
   float tmp185_in_z;
   tmp185_in_z = 1 * 0.32;
   tmp182_mu_init.initScalef(tmp183_in_x, tmp184_in_y, tmp185_in_z);
   Matrix4f tmp186_in_dst;
   // GMat4Translate id=trans_ctr id=default.scenes.ring_scene.renderpasses.dial_3_blit.models.ring_blit.constants.trans_ctr
   tmp186_in_dst.initTranslatef(1, -1, 0);
   // connOp=OP_MUL this_input.id=in
   tmp182_mu_init = tmp182_mu_init * tmp186_in_dst;
   // GMat4RotateXYZ id=default.scenes.ring_scene.renderpasses.pointer_3.models.pointer3.constants
   float tmp187_in_z;
   float tmp188_z_src;
   float tmp189_in_tx;
   float tmp190_tx_src;
   tmp190_tx_src = ext_default_global_time;
   float tmp191_tx_scloff;
   tmp191_tx_scloff = tmp190_tx_src*0.01146+0.0;
   tmp189_in_tx = tmp191_tx_scloff;
   tmp189_in_tx = tmp189_in_tx % 1.0f;
   tmp188_z_src = default_envc4_env_curves_dial_3_pointer_x.valueAtTime(tmp189_in_tx);
   float tmp192_z_scloff;
   tmp192_z_scloff = tmp188_z_src*6.28+0.0;
   tmp187_in_z = tmp192_z_scloff;
   float tmp193_z_dst;
   float tmp194_in_ty;
   float tmp195_ty_src;
   tmp195_ty_src = ext_default_global_time;
   float tmp196_ty_scloff;
   tmp196_ty_scloff = tmp195_ty_src*-0.02288+0.0;
   tmp194_in_ty = tmp196_ty_scloff;
   tmp194_in_ty = tmp194_in_ty % 1.0f;
   tmp188_z_src = default_envc4_env_curves_dial_3_pointer_y.valueAtTime(tmp194_in_ty);
   float tmp197_z_scloff;
   tmp197_z_scloff = tmp188_z_src*6.28+0.0;
   tmp193_z_dst = tmp197_z_scloff;
   tmp187_in_z = tmp193_z_dst + tmp187_in_z;
   tmp187_in_z += 0;
   tmp186_in_dst.initEulerXYZ(0, 0, tmp187_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp182_mu_init = tmp182_mu_init * tmp186_in_dst;
   // GMat4Scale id= id=default.scenes.ring_scene.renderpasses.pointer_3.models.pointer3.model_uniforms.transform.inputs.in.3
   float tmp198_in_x;
   tmp198_in_x = 7.40539 * 0.064;
   float tmp199_in_y;
   tmp199_in_y = 0.22492 * 0.064;
   float tmp200_in_z;
   tmp200_in_z = 1 * 0.064;
   tmp186_in_dst.initScalef(tmp198_in_x, tmp199_in_y, tmp200_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp182_mu_init = tmp182_mu_init * tmp186_in_dst;
   Vector2f tmp201_mu_init;
   tmp201_mu_init = vector2f(0.018, 0.793);
   Vector4f tmp202_mu_init;
   tmp202_mu_init = vector4f(1, 0.53, 0.54, 0.89);
   if(5 != last_program_id)
   {
      default_ring_scene_prg_aa_pointer.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_pointer__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_pointer__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_pointer__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_pointer__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 5;
   } // 5 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp203__transform_mat;
      _transform.mul(tmp182_mu_init) => tmp203__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_pointer__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp203__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_pointer__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp182_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_pointer__u_aadist, tmp201_mu_init.x, tmp201_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_pointer__u_color, tmp202_mu_init.x, tmp202_mu_init.y, tmp202_mu_init.z, tmp202_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_pointer_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_pointer_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_pointer_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_pointer_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_pointer_3_model_pointer3() {
   zglDeleteBuffer(default_ring_scene_pointer_3_buf_pointer3_a);
}

function Init_default_ring_scene_prg_aa_tri() {
   default_ring_scene_prg_aa_tri.setVertexSource(default_ring_scene_prg_aa_tri_vtx_src);
   default_ring_scene_prg_aa_tri.setFragmentSource(default_ring_scene_prg_aa_tri_frag_src);
   if(!default_ring_scene_prg_aa_tri.create()) return false;
   default_ring_scene_prg_aa_tri__a_position = glGetAttribLocation(default_ring_scene_prg_aa_tri.programId, "a_position");
   default_ring_scene_prg_aa_tri__a_uv = glGetAttribLocation(default_ring_scene_prg_aa_tri.programId, "a_uv");
   default_ring_scene_prg_aa_tri__u_transform = glGetUniformLocation(default_ring_scene_prg_aa_tri.programId, "u_transform");
   default_ring_scene_prg_aa_tri__u_aadist = glGetUniformLocation(default_ring_scene_prg_aa_tri.programId, "u_aadist");
   default_ring_scene_prg_aa_tri__u_color = glGetUniformLocation(default_ring_scene_prg_aa_tri.programId, "u_color");
   default_ring_scene_prg_aa_tri_u_fragcoord_off_scl = glGetUniformLocation(default_ring_scene_prg_aa_tri.programId, "u_fragcoord_off_scl");
   default_ring_scene_prg_aa_tri_u_normcoord_scl = glGetUniformLocation(default_ring_scene_prg_aa_tri.programId, "u_normcoord_scl");
   return true;
}

function Exit_default_ring_scene_prg_aa_tri() {
   default_ring_scene_prg_aa_tri.destroy();
}

function Init_default_ring_scene_tri_2_model_tri2() {
   default_ring_scene_tri_2_buf_tri2_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_tri_2_buf_tri2_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 3/*#verts*/), default_ring_scene_tri_2_buf_tri2_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_tri_2_model_tri2(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(29 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_tri_2_buf_tri2_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 29;
   }
   if(6 != last_program_id)
   {
      default_ring_scene_prg_aa_tri.bind();
   } // 6 != last_program_id
   Matrix4f tmp204_mu_init;
   // GMat4Scale id=scl_256x192 id=default.scenes.ring_scene.renderpasses.dial_2_blit.models.ring_blit.constants.scl_256x192
   float tmp205_in_x;
   tmp205_in_x = 0.75 * 0.32;
   float tmp206_in_y;
   tmp206_in_y = 1 * 0.32;
   float tmp207_in_z;
   tmp207_in_z = 1 * 0.32;
   tmp204_mu_init.initScalef(tmp205_in_x, tmp206_in_y, tmp207_in_z);
   Matrix4f tmp208_in_dst;
   // GMat4Translate id=trans_ctr id=default.scenes.ring_scene.renderpasses.dial_2_blit.models.ring_blit.constants.trans_ctr
   tmp208_in_dst.initTranslatef(-1, 1, 0);
   // connOp=OP_MUL this_input.id=in
   tmp204_mu_init = tmp204_mu_init * tmp208_in_dst;
   // GMat4RotateXYZ id=default.scenes.ring_scene.renderpasses.tri_2.models.tri2.constants
   float tmp209_in_z;
   float tmp210_z_src;
   float tmp211_in_tx;
   float tmp212_tx_src;
   tmp212_tx_src = ext_default_global_time;
   float tmp213_tx_scloff;
   tmp213_tx_scloff = tmp212_tx_src*0.00625+0.0;
   tmp211_in_tx = tmp213_tx_scloff;
   tmp211_in_tx = tmp211_in_tx % 1.0f;
   tmp210_z_src = default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_x.valueAtTime(tmp211_in_tx);
   float tmp214_z_scloff;
   tmp214_z_scloff = tmp210_z_src*6.28+0.0;
   tmp209_in_z = tmp214_z_scloff;
   tmp209_in_z += 0;
   tmp208_in_dst.initEulerXYZ(0, 0, tmp209_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp204_mu_init = tmp204_mu_init * tmp208_in_dst;
   // GMat4Scale id= id=default.scenes.ring_scene.renderpasses.tri_2.models.tri2.model_uniforms.transform.inputs.in.3
   float tmp215_in_x;
   tmp215_in_x = 1 * 0.31628;
   float tmp216_in_y;
   tmp216_in_y = 1 * 0.31628;
   float tmp217_in_z;
   tmp217_in_z = 1 * 0.31628;
   tmp208_in_dst.initScalef(tmp215_in_x, tmp216_in_y, tmp217_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp204_mu_init = tmp204_mu_init * tmp208_in_dst;
   // GMat4Translate id= id=default.scenes.ring_scene.renderpasses.tri_2.models.tri2.model_uniforms.transform.inputs.in.4
   tmp208_in_dst.initTranslatef(0, -3.26244, 0);
   // connOp=OP_MUL this_input.id=in
   tmp204_mu_init = tmp204_mu_init * tmp208_in_dst;
   // GMat4Scale id= id=default.scenes.ring_scene.renderpasses.tri_2.models.tri2.model_uniforms.transform.inputs.in.5
   float tmp218_in_x;
   tmp218_in_x = 1 * 0.21;
   float tmp219_in_y;
   tmp219_in_y = 0.7 * 0.21;
   float tmp220_in_z;
   tmp220_in_z = 1 * 0.21;
   tmp208_in_dst.initScalef(tmp218_in_x, tmp219_in_y, tmp220_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp204_mu_init = tmp204_mu_init * tmp208_in_dst;
   Vector2f tmp221_mu_init;
   tmp221_mu_init = vector2f(0.464, 0.284);
   Vector4f tmp222_mu_init;
   tmp222_mu_init = vector4f(0.81, 1, 0.8, 1);
   if(6 != last_program_id)
   {
      default_ring_scene_prg_aa_tri.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tri__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tri__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tri__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tri__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 6;
   } // 6 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp223__transform_mat;
      _transform.mul(tmp204_mu_init) => tmp223__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_tri__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp223__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_tri__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp204_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_tri__u_aadist, tmp221_mu_init.x, tmp221_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_tri__u_color, tmp222_mu_init.x, tmp222_mu_init.y, tmp222_mu_init.z, tmp222_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_tri_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_tri_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_tri_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_tri_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 1 triangles
   g_tri_count += 1;
   glDrawArrays(GL_TRIANGLES, 0/*first*/, 3);

   // <draw_post>
}

function Exit_default_ring_scene_tri_2_model_tri2() {
   zglDeleteBuffer(default_ring_scene_tri_2_buf_tri2_a);
}

function Init_default_ring_scene_tri_3_model_tri3() {
   default_ring_scene_tri_3_buf_tri3_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_tri_3_buf_tri3_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 3/*#verts*/), default_ring_scene_tri_3_buf_tri3_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_tri_3_model_tri3(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(30 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_tri_3_buf_tri3_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 30;
   }
   if(6 != last_program_id)
   {
      default_ring_scene_prg_aa_tri.bind();
   } // 6 != last_program_id
   Matrix4f tmp224_mu_init;
   // GMat4Scale id=scl_256x192 id=default.scenes.ring_scene.renderpasses.dial_3_blit.models.ring_blit.constants.scl_256x192
   float tmp225_in_x;
   tmp225_in_x = 0.75 * 0.32;
   float tmp226_in_y;
   tmp226_in_y = 1 * 0.32;
   float tmp227_in_z;
   tmp227_in_z = 1 * 0.32;
   tmp224_mu_init.initScalef(tmp225_in_x, tmp226_in_y, tmp227_in_z);
   Matrix4f tmp228_in_dst;
   // GMat4Translate id=trans_ctr id=default.scenes.ring_scene.renderpasses.dial_3_blit.models.ring_blit.constants.trans_ctr
   tmp228_in_dst.initTranslatef(1, -1, 0);
   // connOp=OP_MUL this_input.id=in
   tmp224_mu_init = tmp224_mu_init * tmp228_in_dst;
   // GMat4RotateXYZ id=default.scenes.ring_scene.renderpasses.tri_3.models.tri3.constants
   float tmp229_in_z;
   float tmp230_z_src;
   float tmp231_in_tx;
   float tmp232_tx_src;
   tmp232_tx_src = ext_default_global_time;
   float tmp233_tx_scloff;
   tmp233_tx_scloff = tmp232_tx_src*0.01336+0.0;
   tmp231_in_tx = tmp233_tx_scloff;
   tmp231_in_tx = tmp231_in_tx % 1.0f;
   tmp230_z_src = default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_x.valueAtTime(tmp231_in_tx);
   float tmp234_z_scloff;
   tmp234_z_scloff = tmp230_z_src*6.28+0.0;
   tmp229_in_z = tmp234_z_scloff;
   tmp229_in_z += 0;
   tmp228_in_dst.initEulerXYZ(0, 0, tmp229_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp224_mu_init = tmp224_mu_init * tmp228_in_dst;
   // GMat4Scale id= id=default.scenes.ring_scene.renderpasses.tri_3.models.tri3.model_uniforms.transform.inputs.in.3
   float tmp235_in_x;
   tmp235_in_x = 1 * 0.31628;
   float tmp236_in_y;
   tmp236_in_y = 1 * 0.31628;
   float tmp237_in_z;
   tmp237_in_z = 1 * 0.31628;
   tmp228_in_dst.initScalef(tmp235_in_x, tmp236_in_y, tmp237_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp224_mu_init = tmp224_mu_init * tmp228_in_dst;
   // GMat4Translate id= id=default.scenes.ring_scene.renderpasses.tri_3.models.tri3.model_uniforms.transform.inputs.in.4
   tmp228_in_dst.initTranslatef(0, -3.26244, 0);
   // connOp=OP_MUL this_input.id=in
   tmp224_mu_init = tmp224_mu_init * tmp228_in_dst;
   // GMat4Scale id= id=default.scenes.ring_scene.renderpasses.tri_3.models.tri3.model_uniforms.transform.inputs.in.5
   float tmp238_in_x;
   tmp238_in_x = 1 * 0.21;
   float tmp239_in_y;
   tmp239_in_y = 0.7 * 0.21;
   float tmp240_in_z;
   tmp240_in_z = 1 * 0.21;
   tmp228_in_dst.initScalef(tmp238_in_x, tmp239_in_y, tmp240_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp224_mu_init = tmp224_mu_init * tmp228_in_dst;
   Vector4f tmp241_mu_init;
   tmp241_mu_init = vector4f(0.81, 1, 0.8, 1);
   Vector2f tmp242_mu_init;
   tmp242_mu_init = vector2f(0.464, 0.284);
   if(6 != last_program_id)
   {
      default_ring_scene_prg_aa_tri.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tri__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tri__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_tri__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_tri__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 6;
   } // 6 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp243__transform_mat;
      _transform.mul(tmp224_mu_init) => tmp243__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_tri__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp243__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_tri__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp224_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_tri__u_aadist, tmp242_mu_init.x, tmp242_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_tri__u_color, tmp241_mu_init.x, tmp241_mu_init.y, tmp241_mu_init.z, tmp241_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_tri_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_tri_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_tri_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_tri_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 1 triangles
   g_tri_count += 1;
   glDrawArrays(GL_TRIANGLES, 0/*first*/, 3);

   // <draw_post>
}

function Exit_default_ring_scene_tri_3_model_tri3() {
   zglDeleteBuffer(default_ring_scene_tri_3_buf_tri3_a);
}

function Init_default_ring_scene_pointer_1_model_pointer1() {
   default_ring_scene_pointer_1_buf_pointer1_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_pointer_1_buf_pointer1_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_ring_scene_pointer_1_buf_pointer1_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_pointer_1_model_pointer1(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(31 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_pointer_1_buf_pointer1_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 31;
   }
   if(5 != last_program_id)
   {
      default_ring_scene_prg_aa_pointer.bind();
   } // 5 != last_program_id
   Matrix4f tmp244_mu_init;
   // GMat4Scale id= id=default.scenes.ring_scene.renderpasses.pointer_1.models.pointer1.model_uniforms.transform.inputs.in.0
   float tmp245_in_x;
   tmp245_in_x = 0.75 * 1;
   float tmp246_in_y;
   tmp246_in_y = 1 * 1;
   float tmp247_in_z;
   tmp247_in_z = 1 * 1;
   tmp244_mu_init.initScalef(tmp245_in_x, tmp246_in_y, tmp247_in_z);
   Matrix4f tmp248_in_dst;
   // GMat4RotateXYZ id=default.scenes.ring_scene.renderpasses.pointer_1.models.pointer1.constants
   float tmp249_in_z;
   float tmp250_z_src;
   float tmp251_in_tx;
   float tmp252_tx_src;
   tmp252_tx_src = ext_default_global_time;
   float tmp253_tx_scloff;
   tmp253_tx_scloff = tmp252_tx_src*0.01927+0.0;
   tmp251_in_tx = tmp253_tx_scloff;
   tmp251_in_tx = tmp251_in_tx % 1.0f;
   tmp250_z_src = default_envc4_env_curves_x.valueAtTime(tmp251_in_tx);
   float tmp254_z_scloff;
   tmp254_z_scloff = tmp250_z_src*6.28+0.0;
   tmp249_in_z = tmp254_z_scloff;
   float tmp255_z_dst;
   float tmp256_in_ty;
   float tmp257_ty_src;
   tmp257_ty_src = ext_default_global_time;
   float tmp258_ty_scloff;
   tmp258_ty_scloff = tmp257_ty_src*0.00837+0.0;
   tmp256_in_ty = tmp258_ty_scloff;
   tmp256_in_ty = tmp256_in_ty % 1.0f;
   tmp250_z_src = default_envc4_env_curves_y.valueAtTime(tmp256_in_ty);
   float tmp259_z_scloff;
   tmp259_z_scloff = tmp250_z_src*6.28+0.0;
   tmp255_z_dst = tmp259_z_scloff;
   tmp249_in_z = tmp255_z_dst + tmp249_in_z;
   tmp249_in_z += 0.00818559;
   tmp248_in_dst.initEulerXYZ(0, 0, tmp249_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp244_mu_init = tmp244_mu_init * tmp248_in_dst;
   // GMat4Scale id= id=default.scenes.ring_scene.renderpasses.pointer_1.models.pointer1.model_uniforms.transform.inputs.in.2
   float tmp260_in_x;
   tmp260_in_x = 7.405 * 0.064;
   float tmp261_in_y;
   tmp261_in_y = 0.13932 * 0.064;
   float tmp262_in_z;
   tmp262_in_z = 1 * 0.064;
   tmp248_in_dst.initScalef(tmp260_in_x, tmp261_in_y, tmp262_in_z);
   // connOp=OP_MUL this_input.id=in
   tmp244_mu_init = tmp244_mu_init * tmp248_in_dst;
   Vector4f tmp263_mu_init;
   tmp263_mu_init = vector4f(0.81, 1, 0.8, 1);
   Vector2f tmp264_mu_init;
   tmp264_mu_init = vector2f(0.018, 0.752);
   if(5 != last_program_id)
   {
      default_ring_scene_prg_aa_pointer.bind();
      glEnableVertexAttribArray(default_ring_scene_prg_aa_pointer__a_position);
      zglVertexAttribOffset(default_ring_scene_prg_aa_pointer__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_prg_aa_pointer__a_uv);
      zglVertexAttribOffset(default_ring_scene_prg_aa_pointer__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 5;
   } // 5 != last_program_id
   if(null != _transform)
   {
      Matrix4f tmp265__transform_mat;
      _transform.mul(tmp244_mu_init) => tmp265__transform_mat;
      glUniformMatrix4fv(default_ring_scene_prg_aa_pointer__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp265__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_prg_aa_pointer__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp244_mu_init);
   }
   glUniform2f(default_ring_scene_prg_aa_pointer__u_aadist, tmp264_mu_init.x, tmp264_mu_init.y);
   glUniform4f(default_ring_scene_prg_aa_pointer__u_color, tmp263_mu_init.x, tmp263_mu_init.y, tmp263_mu_init.z, tmp263_mu_init.w);
   if(0 == _fbW) glUniform4f(default_ring_scene_prg_aa_pointer_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_ring_scene_prg_aa_pointer_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_prg_aa_pointer_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_prg_aa_pointer_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_ring_scene_pointer_1_model_pointer1() {
   zglDeleteBuffer(default_ring_scene_pointer_1_buf_pointer1_a);
}

function Init_default_ring_scene_renderpass_bg_gradient() {
   return true;
}

function Draw_default_ring_scene_renderpass_bg_gradient(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.bg_gradient --------
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glDisable(GL_BLEND);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_ring_scene_bg_gradient_model_gradient_quad(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.ring_scene.renderpasses.bg_gradient --------
}

function Exit_default_ring_scene_renderpass_bg_gradient() {
}

function Init_default_ring_scene_renderpass_terrain() {
   return true;
}

function Draw_default_ring_scene_renderpass_terrain(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.terrain --------
   glClearDepth(1);
   glClear(GL_DEPTH_BUFFER_BIT);
   glEnable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glEnable(GL_BLEND);
   glBlendFuncSeparate(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ZERO);
   glBlendColor(0, 0, 0, 0);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_ring_scene_terrain_model_terrain(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.ring_scene.renderpasses.terrain --------
}

function Exit_default_ring_scene_renderpass_terrain() {
}

function Init_default_ring_scene_renderpass_dial_1() {
   return true;
}

function Draw_default_ring_scene_renderpass_dial_1(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.dial_1 --------
   glBindFramebuffer(GL_FRAMEBUFFER, default_ring_scene_fbo_dial_1);
   glViewport(0, 0, 600, 600);
   glScissor(0, 0, 600, 600);
   glClearColor(0, 0, 0, 0);
   glClear(GL_COLOR_BUFFER_BIT);
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glDisable(GL_BLEND);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_ring_scene_scenegraph_dial_1(600, 600, null/*transform*/);

   // <draw_post>
   glBindFramebuffer(GL_FRAMEBUFFER, g_default_fb);
   glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   // -------- END renderpass default.scenes.ring_scene.renderpasses.dial_1 --------
}

function Exit_default_ring_scene_renderpass_dial_1() {
}

function Init_default_ring_scene_renderpass_dial_1_blit() {
   return true;
}

function Draw_default_ring_scene_renderpass_dial_1_blit(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.dial_1_blit --------
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glEnable(GL_BLEND);
   glBlendFuncSeparate(GL_ONE, GL_ONE_MINUS_SRC_COLOR, GL_ONE, GL_ZERO);
   glBlendColor(0, 0, 0, 0);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glDisable(GL_CULL_FACE);
   Draw_default_ring_scene_dial_1_blit_model_ring_blit(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.ring_scene.renderpasses.dial_1_blit --------
}

function Exit_default_ring_scene_renderpass_dial_1_blit() {
}

function Init_default_ring_scene_renderpass_dial_2() {
   return true;
}

function Draw_default_ring_scene_renderpass_dial_2(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.dial_2 --------
   glBindFramebuffer(GL_FRAMEBUFFER, default_ring_scene_fbo_dial_2);
   glViewport(0, 0, 192, 192);
   glScissor(0, 0, 192, 192);
   glClearColor(0, 0, 0, 0);
   glClear(GL_COLOR_BUFFER_BIT);
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glDisable(GL_BLEND);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_ring_scene_scenegraph_dial_2(192, 192, null/*transform*/);

   // <draw_post>
   glBindFramebuffer(GL_FRAMEBUFFER, g_default_fb);
   glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   // -------- END renderpass default.scenes.ring_scene.renderpasses.dial_2 --------
}

function Exit_default_ring_scene_renderpass_dial_2() {
}

function Init_default_ring_scene_renderpass_dial_2_blit() {
   return true;
}

function Draw_default_ring_scene_renderpass_dial_2_blit(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.dial_2_blit --------
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glEnable(GL_BLEND);
   glBlendFuncSeparate(GL_ONE, GL_ONE_MINUS_SRC_COLOR, GL_ONE, GL_ZERO);
   glBlendColor(0, 0, 0, 0);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glDisable(GL_CULL_FACE);
   Draw_default_ring_scene_dial_2_blit_model_ring_blit(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.ring_scene.renderpasses.dial_2_blit --------
}

function Exit_default_ring_scene_renderpass_dial_2_blit() {
}

function Init_default_ring_scene_renderpass_dial_3() {
   return true;
}

function Draw_default_ring_scene_renderpass_dial_3(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.dial_3 --------
   glBindFramebuffer(GL_FRAMEBUFFER, default_ring_scene_fbo_dial_3);
   glViewport(0, 0, 192, 192);
   glScissor(0, 0, 192, 192);
   glClearColor(0, 0, 0, 0);
   glClear(GL_COLOR_BUFFER_BIT);
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glDisable(GL_BLEND);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_ring_scene_scenegraph_dial_3(192, 192, null/*transform*/);

   // <draw_post>
   glBindFramebuffer(GL_FRAMEBUFFER, g_default_fb);
   glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   // -------- END renderpass default.scenes.ring_scene.renderpasses.dial_3 --------
}

function Exit_default_ring_scene_renderpass_dial_3() {
}

function Init_default_ring_scene_renderpass_dial_3_blit() {
   return true;
}

function Draw_default_ring_scene_renderpass_dial_3_blit(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.dial_3_blit --------
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glEnable(GL_BLEND);
   glBlendFuncSeparate(GL_ONE, GL_ONE_MINUS_SRC_COLOR, GL_ONE, GL_ZERO);
   glBlendColor(0, 0, 0, 0);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glDisable(GL_CULL_FACE);
   Draw_default_ring_scene_dial_3_blit_model_ring_blit(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.ring_scene.renderpasses.dial_3_blit --------
}

function Exit_default_ring_scene_renderpass_dial_3_blit() {
}

function Init_default_ring_scene_renderpass_pointer_2() {
   return true;
}

function Draw_default_ring_scene_renderpass_pointer_2(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.pointer_2 --------
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glEnable(GL_BLEND);
   glBlendFuncSeparate(GL_ONE, GL_ONE_MINUS_SRC_COLOR, GL_ONE, GL_ZERO);
   glBlendColor(0, 0, 0, 0);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_ring_scene_pointer_2_model_pointer2(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.ring_scene.renderpasses.pointer_2 --------
}

function Exit_default_ring_scene_renderpass_pointer_2() {
}

function Init_default_ring_scene_renderpass_pointer_3() {
   return true;
}

function Draw_default_ring_scene_renderpass_pointer_3(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.pointer_3 --------
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glEnable(GL_BLEND);
   glBlendFuncSeparate(GL_ONE, GL_ONE_MINUS_SRC_COLOR, GL_ONE, GL_ZERO);
   glBlendColor(0, 0, 0, 0);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_ring_scene_pointer_3_model_pointer3(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.ring_scene.renderpasses.pointer_3 --------
}

function Exit_default_ring_scene_renderpass_pointer_3() {
}

function Init_default_ring_scene_renderpass_tri_2() {
   return true;
}

function Draw_default_ring_scene_renderpass_tri_2(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.tri_2 --------
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glEnable(GL_BLEND);
   glBlendFuncSeparate(GL_ONE, GL_ONE_MINUS_SRC_COLOR, GL_ONE, GL_ZERO);
   glBlendColor(0, 0, 0, 0);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_ring_scene_tri_2_model_tri2(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.ring_scene.renderpasses.tri_2 --------
}

function Exit_default_ring_scene_renderpass_tri_2() {
}

function Init_default_ring_scene_renderpass_tri_3() {
   return true;
}

function Draw_default_ring_scene_renderpass_tri_3(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.tri_3 --------
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glEnable(GL_BLEND);
   glBlendFuncSeparate(GL_ONE, GL_ONE_MINUS_SRC_COLOR, GL_ONE, GL_ZERO);
   glBlendColor(0, 0, 0, 0);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_ring_scene_tri_3_model_tri3(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.ring_scene.renderpasses.tri_3 --------
}

function Exit_default_ring_scene_renderpass_tri_3() {
}

function Init_default_ring_scene_renderpass_pointer_1() {
   return true;
}

function Draw_default_ring_scene_renderpass_pointer_1(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.pointer_1 --------
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glEnable(GL_BLEND);
   glBlendFuncSeparate(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ZERO);
   glBlendColor(0, 0, 0, 0);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_ring_scene_pointer_1_model_pointer1(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.ring_scene.renderpasses.pointer_1 --------
}

function Exit_default_ring_scene_renderpass_pointer_1() {
}

function Init_default_scene_ring_scene() {
   // -------- BEGIN init FBO default.scenes.ring_scene.fbos.dial_1 -------
   default_ring_scene_fbo_dial_1 = zglGenFramebuffer();
   glBindFramebuffer(GL_FRAMEBUFFER, default_ring_scene_fbo_dial_1);
   default_ring_scene_tex_dial_1.bind(); // create id + alloc GL texture RAM
   default_ring_scene_tex_dial_1.unbind();
   glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, default_ring_scene_tex_dial_1.id, 0/*level*/);
   int default_ring_scene_fbo_dial_1_fbStatus = glCheckFramebufferStatus(GL_FRAMEBUFFER);
   if(GL_FRAMEBUFFER_COMPLETE != default_ring_scene_fbo_dial_1_fbStatus)
     trace "[~~~] <tempscript> GFBO: glCheckFramebufferStatus() indicated a problem (id=default.scenes.ring_scene.fbos.dial_1, status="+default_ring_scene_fbo_dial_1_fbStatus+"="+TKS.constantToString(default_ring_scene_fbo_dial_1_fbStatus, "GL_FRAMEBUFFER")+")";
   glBindFramebuffer(GL_FRAMEBUFFER, g_default_fb);
   // -------- END init FBO default.scenes.ring_scene.fbos.dial_1 -------
   // -------- BEGIN init FBO default.scenes.ring_scene.fbos.dial_2 -------
   default_ring_scene_fbo_dial_2 = zglGenFramebuffer();
   glBindFramebuffer(GL_FRAMEBUFFER, default_ring_scene_fbo_dial_2);
   default_ring_scene_tex_dial_2.bind(); // create id + alloc GL texture RAM
   default_ring_scene_tex_dial_2.unbind();
   glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, default_ring_scene_tex_dial_2.id, 0/*level*/);
   int default_ring_scene_fbo_dial_2_fbStatus = glCheckFramebufferStatus(GL_FRAMEBUFFER);
   if(GL_FRAMEBUFFER_COMPLETE != default_ring_scene_fbo_dial_2_fbStatus)
     trace "[~~~] <tempscript> GFBO: glCheckFramebufferStatus() indicated a problem (id=default.scenes.ring_scene.fbos.dial_2, status="+default_ring_scene_fbo_dial_2_fbStatus+"="+TKS.constantToString(default_ring_scene_fbo_dial_2_fbStatus, "GL_FRAMEBUFFER")+")";
   glBindFramebuffer(GL_FRAMEBUFFER, g_default_fb);
   // -------- END init FBO default.scenes.ring_scene.fbos.dial_2 -------
   // -------- BEGIN init FBO default.scenes.ring_scene.fbos.dial_3 -------
   default_ring_scene_fbo_dial_3 = zglGenFramebuffer();
   glBindFramebuffer(GL_FRAMEBUFFER, default_ring_scene_fbo_dial_3);
   default_ring_scene_tex_dial_3.bind(); // create id + alloc GL texture RAM
   default_ring_scene_tex_dial_3.unbind();
   glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, default_ring_scene_tex_dial_3.id, 0/*level*/);
   int default_ring_scene_fbo_dial_3_fbStatus = glCheckFramebufferStatus(GL_FRAMEBUFFER);
   if(GL_FRAMEBUFFER_COMPLETE != default_ring_scene_fbo_dial_3_fbStatus)
     trace "[~~~] <tempscript> GFBO: glCheckFramebufferStatus() indicated a problem (id=default.scenes.ring_scene.fbos.dial_3, status="+default_ring_scene_fbo_dial_3_fbStatus+"="+TKS.constantToString(default_ring_scene_fbo_dial_3_fbStatus, "GL_FRAMEBUFFER")+")";
   glBindFramebuffer(GL_FRAMEBUFFER, g_default_fb);
   // -------- END init FBO default.scenes.ring_scene.fbos.dial_3 -------
   return true;
}

function Draw_default_scene_ring_scene(int _fbW, int _fbH) {
   // <draw_pre>
   Draw_default_ring_scene_renderpass_bg_gradient(0/*fbW*/, 0/*fbH*/);
   Draw_default_ring_scene_renderpass_terrain(0/*fbW*/, 0/*fbH*/);
   boolean tmp266_dial_1_condvisible;
   tmp266_dial_1_condvisible = g_init;
   if(tmp266_dial_1_condvisible) Draw_default_ring_scene_renderpass_dial_1(0/*fbW*/, 0/*fbH*/);
   Draw_default_ring_scene_renderpass_dial_1_blit(0/*fbW*/, 0/*fbH*/);
   boolean tmp267_dial_2_condvisible;
   tmp267_dial_2_condvisible = g_init;
   if(tmp267_dial_2_condvisible) Draw_default_ring_scene_renderpass_dial_2(0/*fbW*/, 0/*fbH*/);
   Draw_default_ring_scene_renderpass_dial_2_blit(0/*fbW*/, 0/*fbH*/);
   boolean tmp268_dial_3_condvisible;
   tmp268_dial_3_condvisible = g_init;
   if(tmp268_dial_3_condvisible) Draw_default_ring_scene_renderpass_dial_3(0/*fbW*/, 0/*fbH*/);
   Draw_default_ring_scene_renderpass_dial_3_blit(0/*fbW*/, 0/*fbH*/);
   Draw_default_ring_scene_renderpass_pointer_2(0/*fbW*/, 0/*fbH*/);
   Draw_default_ring_scene_renderpass_pointer_3(0/*fbW*/, 0/*fbH*/);
   Draw_default_ring_scene_renderpass_tri_2(0/*fbW*/, 0/*fbH*/);
   Draw_default_ring_scene_renderpass_tri_3(0/*fbW*/, 0/*fbH*/);
   Draw_default_ring_scene_renderpass_pointer_1(0/*fbW*/, 0/*fbH*/);

   // <draw_post>
}

function Exit_default_scene_ring_scene() {
   default_ring_scene_tex_dial_1.unload();
   // -------- BEGIN exit FBO default.scenes.ring_scene.fbos.dial_1 -------
   zglDeleteFramebuffer(default_ring_scene_fbo_dial_1);
   // -------- END exit FBO default.scenes.ring_scene.fbos.dial_1 -------
   default_ring_scene_tex_dial_2.unload();
   // -------- BEGIN exit FBO default.scenes.ring_scene.fbos.dial_2 -------
   zglDeleteFramebuffer(default_ring_scene_fbo_dial_2);
   // -------- END exit FBO default.scenes.ring_scene.fbos.dial_2 -------
   default_ring_scene_tex_dial_3.unload();
   // -------- BEGIN exit FBO default.scenes.ring_scene.fbos.dial_3 -------
   zglDeleteFramebuffer(default_ring_scene_fbo_dial_3);
   // -------- END exit FBO default.scenes.ring_scene.fbos.dial_3 -------
}

function Init() {
   if(!Init_default_ring_scene_bg_gradient_gradient_quad_prg_prg1()) return false;
   if(!Init_default_ring_scene_bg_gradient_model_gradient_quad()) return false;
   if(!Init_default_ring_scene_terrain_terrain_prg_terrain()) return false;
   if(!Init_default_ring_scene_terrain_model_terrain()) return false;
   if(!Init_default_ring_scene_prg_aa_tick()) return false;
   if(!Init_default_ring_scene_dial_1_small_ticks_model_small_tick()) return false;
   if(!Init_default_ring_scene_dial_1_scenegraph_small_ticks()) return false;
   if(!Init_default_ring_scene_dial_1_medium_ticks_model_medium_tick()) return false;
   if(!Init_default_ring_scene_dial_1_scenegraph_medium_ticks()) return false;
   if(!Init_default_ring_scene_dial_1_big_ticks_model_big_tick()) return false;
   if(!Init_default_ring_scene_dial_1_scenegraph_big_ticks()) return false;
   if(!Init_default_ring_scene_scenegraph_dial_1()) return false;
   if(!Init_default_ring_scene_prg_ring_blit()) return false;
   if(!Init_default_ring_scene_dial_1_blit_model_ring_blit()) return false;
   if(!Init_default_ring_scene_dial_2_small_ticks_model_small_tick()) return false;
   if(!Init_default_ring_scene_dial_2_scenegraph_small_ticks()) return false;
   if(!Init_default_ring_scene_dial_2_medium_ticks_model_medium_tick()) return false;
   if(!Init_default_ring_scene_dial_2_scenegraph_medium_ticks()) return false;
   if(!Init_default_ring_scene_dial_2_big_ticks_model_big_tick()) return false;
   if(!Init_default_ring_scene_dial_2_scenegraph_big_ticks()) return false;
   if(!Init_default_ring_scene_scenegraph_dial_2()) return false;
   if(!Init_default_ring_scene_dial_2_blit_model_ring_blit()) return false;
   if(!Init_default_ring_scene_dial_3_small_ticks_model_small_tick()) return false;
   if(!Init_default_ring_scene_dial_3_scenegraph_small_ticks()) return false;
   if(!Init_default_ring_scene_dial_3_medium_ticks_model_medium_tick()) return false;
   if(!Init_default_ring_scene_dial_3_scenegraph_medium_ticks()) return false;
   if(!Init_default_ring_scene_dial_3_big_ticks_model_big_tick()) return false;
   if(!Init_default_ring_scene_dial_3_scenegraph_big_ticks()) return false;
   if(!Init_default_ring_scene_scenegraph_dial_3()) return false;
   if(!Init_default_ring_scene_dial_3_blit_model_ring_blit()) return false;
   if(!Init_default_ring_scene_prg_aa_pointer()) return false;
   if(!Init_default_ring_scene_pointer_2_model_pointer2()) return false;
   if(!Init_default_ring_scene_pointer_3_model_pointer3()) return false;
   if(!Init_default_ring_scene_prg_aa_tri()) return false;
   if(!Init_default_ring_scene_tri_2_model_tri2()) return false;
   if(!Init_default_ring_scene_tri_3_model_tri3()) return false;
   if(!Init_default_ring_scene_pointer_1_model_pointer1()) return false;
   if(!Init_default_ring_scene_renderpass_bg_gradient()) return false;
   if(!Init_default_ring_scene_renderpass_terrain()) return false;
   if(!Init_default_ring_scene_renderpass_dial_1()) return false;
   if(!Init_default_ring_scene_renderpass_dial_1_blit()) return false;
   if(!Init_default_ring_scene_renderpass_dial_2()) return false;
   if(!Init_default_ring_scene_renderpass_dial_2_blit()) return false;
   if(!Init_default_ring_scene_renderpass_dial_3()) return false;
   if(!Init_default_ring_scene_renderpass_dial_3_blit()) return false;
   if(!Init_default_ring_scene_renderpass_pointer_2()) return false;
   if(!Init_default_ring_scene_renderpass_pointer_3()) return false;
   if(!Init_default_ring_scene_renderpass_tri_2()) return false;
   if(!Init_default_ring_scene_renderpass_tri_3()) return false;
   if(!Init_default_ring_scene_renderpass_pointer_1()) return false;
   if(!Init_default_scene_ring_scene()) return false;
   return true;
}

function Exit() {
   Exit_default_ring_scene_bg_gradient_gradient_quad_prg_prg1();
   Exit_default_ring_scene_bg_gradient_model_gradient_quad();
   Exit_default_ring_scene_terrain_terrain_prg_terrain();
   Exit_default_ring_scene_terrain_model_terrain();
   Exit_default_ring_scene_prg_aa_tick();
   Exit_default_ring_scene_dial_1_small_ticks_model_small_tick();
   Exit_default_ring_scene_dial_1_scenegraph_small_ticks();
   Exit_default_ring_scene_dial_1_medium_ticks_model_medium_tick();
   Exit_default_ring_scene_dial_1_scenegraph_medium_ticks();
   Exit_default_ring_scene_dial_1_big_ticks_model_big_tick();
   Exit_default_ring_scene_dial_1_scenegraph_big_ticks();
   Exit_default_ring_scene_scenegraph_dial_1();
   Exit_default_ring_scene_prg_ring_blit();
   Exit_default_ring_scene_dial_1_blit_model_ring_blit();
   Exit_default_ring_scene_dial_2_small_ticks_model_small_tick();
   Exit_default_ring_scene_dial_2_scenegraph_small_ticks();
   Exit_default_ring_scene_dial_2_medium_ticks_model_medium_tick();
   Exit_default_ring_scene_dial_2_scenegraph_medium_ticks();
   Exit_default_ring_scene_dial_2_big_ticks_model_big_tick();
   Exit_default_ring_scene_dial_2_scenegraph_big_ticks();
   Exit_default_ring_scene_scenegraph_dial_2();
   Exit_default_ring_scene_dial_2_blit_model_ring_blit();
   Exit_default_ring_scene_dial_3_small_ticks_model_small_tick();
   Exit_default_ring_scene_dial_3_scenegraph_small_ticks();
   Exit_default_ring_scene_dial_3_medium_ticks_model_medium_tick();
   Exit_default_ring_scene_dial_3_scenegraph_medium_ticks();
   Exit_default_ring_scene_dial_3_big_ticks_model_big_tick();
   Exit_default_ring_scene_dial_3_scenegraph_big_ticks();
   Exit_default_ring_scene_scenegraph_dial_3();
   Exit_default_ring_scene_dial_3_blit_model_ring_blit();
   Exit_default_ring_scene_prg_aa_pointer();
   Exit_default_ring_scene_pointer_2_model_pointer2();
   Exit_default_ring_scene_pointer_3_model_pointer3();
   Exit_default_ring_scene_prg_aa_tri();
   Exit_default_ring_scene_tri_2_model_tri2();
   Exit_default_ring_scene_tri_3_model_tri3();
   Exit_default_ring_scene_pointer_1_model_pointer1();
   Exit_default_ring_scene_renderpass_bg_gradient();
   Exit_default_ring_scene_renderpass_terrain();
   Exit_default_ring_scene_renderpass_dial_1();
   Exit_default_ring_scene_renderpass_dial_1_blit();
   Exit_default_ring_scene_renderpass_dial_2();
   Exit_default_ring_scene_renderpass_dial_2_blit();
   Exit_default_ring_scene_renderpass_dial_3();
   Exit_default_ring_scene_renderpass_dial_3_blit();
   Exit_default_ring_scene_renderpass_pointer_2();
   Exit_default_ring_scene_renderpass_pointer_3();
   Exit_default_ring_scene_renderpass_tri_2();
   Exit_default_ring_scene_renderpass_tri_3();
   Exit_default_ring_scene_renderpass_pointer_1();
   Exit_default_scene_ring_scene();
}

function Draw() {
   glEnable(GL_CULL_FACE);
   glCullFace(GL_BACK);
   glFrontFace(GL_CW);
   glDisable(GL_DEPTH_TEST);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   // <draw_pre>
   last_model_id   = 0;
   last_program_id = 0;
   g_tri_count     = 0;  // debug: total number of triangles
   glEnable(GL_SCISSOR_TEST);
   glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glClearColor(0.3,0.3,0.3,1.0);
   glClear(GL_COLOR_BUFFER_BIT);
   Draw_default_scene_ring_scene(0, 0);
   // <draw_post>
   glUseProgram(0);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   g_init = false;
}


function Load(String _zipPathNamePrefix) {
   local Zip zip;
   if(zip.openLocalReadOnly(_zipPathNamePrefix+"test_dial_18e.zip"))
   {
      local Buffer *b;
      default_ring_scene_bg_gradient_buf_gradient_quad_a_data <= zip.loadBufferByName("default_ring_scene_bg_gradient_buf_gradient_quad_a_data.dat");
      default_ring_scene_terrain_buf_terrain_a_data <= zip.loadBufferByName("default_ring_scene_terrain_buf_terrain_a_data.dat");
      default_ring_scene_terrain_buf_terrain_i_data <= zip.loadBufferByName("default_ring_scene_terrain_buf_terrain_i_data.dat");
      default_ring_scene_dial_1_small_ticks_buf_small_tick_a_data <= zip.loadBufferByName("default_ring_scene_dial_1_small_ticks_buf_small_tick_a_data.dat");
      default_ring_scene_dial_1_medium_ticks_buf_medium_tick_a_data <= zip.loadBufferByName("default_ring_scene_dial_1_medium_ticks_buf_medium_tick_a_data.dat");
      default_ring_scene_dial_1_big_ticks_buf_big_tick_a_data <= zip.loadBufferByName("default_ring_scene_dial_1_big_ticks_buf_big_tick_a_data.dat");
      default_ring_scene_dial_1_blit_buf_ring_blit_a_data <= zip.loadBufferByName("default_ring_scene_dial_1_blit_buf_ring_blit_a_data.dat");
      default_ring_scene_dial_1_blit_buf_ring_blit_i_data <= zip.loadBufferByName("default_ring_scene_dial_1_blit_buf_ring_blit_i_data.dat");
      default_ring_scene_dial_2_small_ticks_buf_small_tick_a_data <= zip.loadBufferByName("default_ring_scene_dial_2_small_ticks_buf_small_tick_a_data.dat");
      default_ring_scene_dial_2_medium_ticks_buf_medium_tick_a_data <= zip.loadBufferByName("default_ring_scene_dial_2_medium_ticks_buf_medium_tick_a_data.dat");
      default_ring_scene_dial_2_big_ticks_buf_big_tick_a_data <= zip.loadBufferByName("default_ring_scene_dial_2_big_ticks_buf_big_tick_a_data.dat");
      default_ring_scene_dial_2_blit_buf_ring_blit_a_data <= zip.loadBufferByName("default_ring_scene_dial_2_blit_buf_ring_blit_a_data.dat");
      default_ring_scene_dial_2_blit_buf_ring_blit_i_data <= zip.loadBufferByName("default_ring_scene_dial_2_blit_buf_ring_blit_i_data.dat");
      default_ring_scene_dial_3_small_ticks_buf_small_tick_a_data <= zip.loadBufferByName("default_ring_scene_dial_3_small_ticks_buf_small_tick_a_data.dat");
      default_ring_scene_dial_3_medium_ticks_buf_medium_tick_a_data <= zip.loadBufferByName("default_ring_scene_dial_3_medium_ticks_buf_medium_tick_a_data.dat");
      default_ring_scene_dial_3_big_ticks_buf_big_tick_a_data <= zip.loadBufferByName("default_ring_scene_dial_3_big_ticks_buf_big_tick_a_data.dat");
      default_ring_scene_dial_3_blit_buf_ring_blit_a_data <= zip.loadBufferByName("default_ring_scene_dial_3_blit_buf_ring_blit_a_data.dat");
      default_ring_scene_dial_3_blit_buf_ring_blit_i_data <= zip.loadBufferByName("default_ring_scene_dial_3_blit_buf_ring_blit_i_data.dat");
      default_ring_scene_pointer_2_buf_pointer2_a_data <= zip.loadBufferByName("default_ring_scene_pointer_2_buf_pointer2_a_data.dat");
      default_ring_scene_pointer_3_buf_pointer3_a_data <= zip.loadBufferByName("default_ring_scene_pointer_3_buf_pointer3_a_data.dat");
      default_ring_scene_tri_2_buf_tri2_a_data <= zip.loadBufferByName("default_ring_scene_tri_2_buf_tri2_a_data.dat");
      default_ring_scene_tri_3_buf_tri3_a_data <= zip.loadBufferByName("default_ring_scene_tri_3_buf_tri3_a_data.dat");
      default_ring_scene_pointer_1_buf_pointer1_a_data <= zip.loadBufferByName("default_ring_scene_pointer_1_buf_pointer1_a_data.dat");
      
      // Envelope default_envc4_env_curves_x
      default_envc4_env_curves_x <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_x.env");
      b.offset = 0;
      default_envc4_env_curves_x << b;
      
      // Envelope default_envc4_env_curves_y
      default_envc4_env_curves_y <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_y.env");
      b.offset = 0;
      default_envc4_env_curves_y << b;
      
      // Envelope default_envc4_env_curves_z
      default_envc4_env_curves_z <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_z.env");
      b.offset = 0;
      default_envc4_env_curves_z << b;
      
      // Envelope default_envc4_env_curves_w
      default_envc4_env_curves_w <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_w.env");
      b.offset = 0;
      default_envc4_env_curves_w << b;
      
      // Envelope default_envc4_env_curves_dial_2_x
      default_envc4_env_curves_dial_2_x <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_2_x.env");
      b.offset = 0;
      default_envc4_env_curves_dial_2_x << b;
      
      // Envelope default_envc4_env_curves_dial_2_y
      default_envc4_env_curves_dial_2_y <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_2_y.env");
      b.offset = 0;
      default_envc4_env_curves_dial_2_y << b;
      
      // Envelope default_envc4_env_curves_dial_2_z
      default_envc4_env_curves_dial_2_z <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_2_z.env");
      b.offset = 0;
      default_envc4_env_curves_dial_2_z << b;
      
      // Envelope default_envc4_env_curves_dial_2_w
      default_envc4_env_curves_dial_2_w <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_2_w.env");
      b.offset = 0;
      default_envc4_env_curves_dial_2_w << b;
      
      // Envelope default_envc4_env_curves_dial_3_x
      default_envc4_env_curves_dial_3_x <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_3_x.env");
      b.offset = 0;
      default_envc4_env_curves_dial_3_x << b;
      
      // Envelope default_envc4_env_curves_dial_3_y
      default_envc4_env_curves_dial_3_y <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_3_y.env");
      b.offset = 0;
      default_envc4_env_curves_dial_3_y << b;
      
      // Envelope default_envc4_env_curves_dial_3_z
      default_envc4_env_curves_dial_3_z <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_3_z.env");
      b.offset = 0;
      default_envc4_env_curves_dial_3_z << b;
      
      // Envelope default_envc4_env_curves_dial_3_w
      default_envc4_env_curves_dial_3_w <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_3_w.env");
      b.offset = 0;
      default_envc4_env_curves_dial_3_w << b;
      
      // Envelope default_envc4_env_curves_dial_2_pointer_x
      default_envc4_env_curves_dial_2_pointer_x <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_2_pointer_x.env");
      b.offset = 0;
      default_envc4_env_curves_dial_2_pointer_x << b;
      
      // Envelope default_envc4_env_curves_dial_2_pointer_y
      default_envc4_env_curves_dial_2_pointer_y <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_2_pointer_y.env");
      b.offset = 0;
      default_envc4_env_curves_dial_2_pointer_y << b;
      
      // Envelope default_envc4_env_curves_dial_2_pointer_z
      default_envc4_env_curves_dial_2_pointer_z <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_2_pointer_z.env");
      b.offset = 0;
      default_envc4_env_curves_dial_2_pointer_z << b;
      
      // Envelope default_envc4_env_curves_dial_2_pointer_w
      default_envc4_env_curves_dial_2_pointer_w <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_2_pointer_w.env");
      b.offset = 0;
      default_envc4_env_curves_dial_2_pointer_w << b;
      
      // Envelope default_envc4_env_curves_dial_3_pointer_x
      default_envc4_env_curves_dial_3_pointer_x <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_3_pointer_x.env");
      b.offset = 0;
      default_envc4_env_curves_dial_3_pointer_x << b;
      
      // Envelope default_envc4_env_curves_dial_3_pointer_y
      default_envc4_env_curves_dial_3_pointer_y <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_3_pointer_y.env");
      b.offset = 0;
      default_envc4_env_curves_dial_3_pointer_y << b;
      
      // Envelope default_envc4_env_curves_dial_3_pointer_z
      default_envc4_env_curves_dial_3_pointer_z <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_3_pointer_z.env");
      b.offset = 0;
      default_envc4_env_curves_dial_3_pointer_z << b;
      
      // Envelope default_envc4_env_curves_dial_3_pointer_w
      default_envc4_env_curves_dial_3_pointer_w <= new Envelope;
      b <= zip.loadBufferByName("default_envc4_env_curves_dial_3_pointer_w.env");
      b.offset = 0;
      default_envc4_env_curves_dial_3_pointer_w << b;
      
      // Texture default_ring_scene_terrain_terrain_tex_hmap
      default_ring_scene_terrain_terrain_tex_hmap <= new Texture;
      b <= zip.loadBufferByName("default_ring_scene_terrain_terrain_tex_hmap.png");
      b.offset = 0;
      default_ring_scene_terrain_terrain_tex_hmap.loadImageStream(b, 1024, 1024, 1/*bpp*/);
      default_ring_scene_terrain_terrain_tex_hmap.target = GL_TEXTURE_2D;
      default_ring_scene_terrain_terrain_tex_hmap.flags  = TEX_MODULATE | TEX_INTENSITY | TEX_REPEAT_S | TEX_REPEAT_T;
      
      // Texture default_ring_scene_terrain_terrain_tex_pal_green_hills
      default_ring_scene_terrain_terrain_tex_pal_green_hills <= new Texture;
      b <= zip.loadBufferByName("default_ring_scene_terrain_terrain_tex_pal_green_hills.png");
      b.offset = 0;
      default_ring_scene_terrain_terrain_tex_pal_green_hills.loadImageStream(b, 512, 1, 4/*bpp*/);
      default_ring_scene_terrain_terrain_tex_pal_green_hills.target = GL_TEXTURE_2D;
      default_ring_scene_terrain_terrain_tex_pal_green_hills.flags  = TEX_MODULATE | TEX_ALPHA | TEX_MINFILTERLINEAR | TEX_MAGFILTERLINEAR | TEX_CLAMPTOEDGE_S | TEX_CLAMPTOEDGE_T;
      
      // Texture default_ring_scene_tex_dial_1
      default_ring_scene_tex_dial_1 <= new Texture;
      default_ring_scene_tex_dial_1.alloc(600, 600, 4/*bpp*/);
      default_ring_scene_tex_dial_1.target = GL_TEXTURE_2D;
      default_ring_scene_tex_dial_1.flags  = TEX_MODULATE | TEX_ALPHA | TEX_MINFILTERLINEAR | TEX_MAGFILTERLINEAR | TEX_REPEAT_S | TEX_REPEAT_T;
      
      // Texture default_ring_scene_tex_dial_2
      default_ring_scene_tex_dial_2 <= new Texture;
      default_ring_scene_tex_dial_2.alloc(192, 192, 4/*bpp*/);
      default_ring_scene_tex_dial_2.target = GL_TEXTURE_2D;
      default_ring_scene_tex_dial_2.flags  = TEX_MODULATE | TEX_ALPHA | TEX_MINFILTERLINEAR | TEX_MAGFILTERLINEAR | TEX_CLAMPTOEDGE_S | TEX_CLAMPTOEDGE_T;
      
      // Texture default_ring_scene_tex_dial_3
      default_ring_scene_tex_dial_3 <= new Texture;
      default_ring_scene_tex_dial_3.alloc(192, 192, 4/*bpp*/);
      default_ring_scene_tex_dial_3.target = GL_TEXTURE_2D;
      default_ring_scene_tex_dial_3.flags  = TEX_MODULATE | TEX_ALPHA | TEX_MINFILTERLINEAR | TEX_MAGFILTERLINEAR | TEX_CLAMPTOEDGE_S | TEX_CLAMPTOEDGE_T;
      
      // Envelope default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_x
      default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_x <= new Envelope;
      b <= zip.loadBufferByName("default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_x.env");
      b.offset = 0;
      default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_x << b;
      
      // Envelope default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_y
      default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_y <= new Envelope;
      b <= zip.loadBufferByName("default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_y.env");
      b.offset = 0;
      default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_y << b;
      
      // Envelope default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_z
      default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_z <= new Envelope;
      b <= zip.loadBufferByName("default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_z.env");
      b.offset = 0;
      default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_z << b;
      
      // Envelope default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_w
      default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_w <= new Envelope;
      b <= zip.loadBufferByName("default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_w.env");
      b.offset = 0;
      default_ring_scene_tri_2_envc4_env_curves_dial_2_tri_w << b;
      
      // Envelope default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_x
      default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_x <= new Envelope;
      b <= zip.loadBufferByName("default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_x.env");
      b.offset = 0;
      default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_x << b;
      
      // Envelope default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_y
      default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_y <= new Envelope;
      b <= zip.loadBufferByName("default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_y.env");
      b.offset = 0;
      default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_y << b;
      
      // Envelope default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_z
      default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_z <= new Envelope;
      b <= zip.loadBufferByName("default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_z.env");
      b.offset = 0;
      default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_z << b;
      
      // Envelope default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_w
      default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_w <= new Envelope;
      b <= zip.loadBufferByName("default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_w.env");
      b.offset = 0;
      default_ring_scene_tri_3_envc4_env_curves_dial_3_tri_w << b;
   }
   else
   {
      trace "[---] Mtest_dial_18e.Load: failed to open "+_zipPathNamePrefix+"test_dial_18e.zip";
   }
   g_init = true;
   g_default_vp_w = 800;
   g_default_vp_h = 600;
}
