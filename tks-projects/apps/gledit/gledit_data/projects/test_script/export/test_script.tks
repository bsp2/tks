//
// auto-generated by GL Edit v2020.07.28 on 20200728-175859
//
module Mtest_script;

use tksdl;
use tkopengl;
use tkmath;
use tkzip;

float g_time;
int g_default_fb;
int g_default_vp_x;
int g_default_vp_y;
int g_default_vp_w;
int g_default_vp_h;
float g_dt;
int last_model_id;    // (note) set to 0 to force attrib/buffer rebind
int last_program_id;  // (note) set to 0 to force program rebind
boolean g_init;
int g_tri_count;

// -------- section "default_scene1_model_quadmodel" --------

function CalcMat4Perspective(Matrix4f _d, float aspect, float fov, float znear, float zfar) {
   float top = tan(fov * 2PI * (1.0f/360.0f) * 0.5f) * znear;
   float left   = aspect*-top;
   float right  = aspect*top;
   float bottom = -top;

   float near2 = (2.0f * znear);

   float a = near2 / (right - left);
   float b = near2 / (top - bottom);

   float c = (right + left) / (right - left);
   float d = (top + bottom) / (top - bottom);
   float e = -(zfar + znear) / (zfar - znear);

   float f = -(2.0f * zfar * znear) / (zfar - znear);

   _d = [a,0,0,0, 0,b,0,0, c,d,e,-1, 0,0,f,0];
   //trace "xxx mat4persp="+#(_d);
}
float ext_default_global_time = 0.0f;
float cur_ang;
Texture *default_scene1_quadmodel_tex_tex1;
ZGLShader default_scene1_quadmodel_prg_prg1;
String default_scene1_quadmodel_prg_prg1_vtx_src = "in vec4 a_position;
in vec2 a_uv;
in vec4 a_color;
in vec3 a_normal;
uniform mat4 u_transform;
uniform sampler2D u_tex;
uniform vec3 u_lightpos;
uniform mat4 u_transform_inv;
uniform float u_time;
out vec2 v_uv;
out vec4 v_color;
out vec3 v_normal;

void fxn2_env_map(in vec3 lightpos, in mat4 transform_inv, in vec3 in_eye, in vec3 in_normal, out vec4 o_color, out vec2 o_uv) {
   float dot = dot(normalize((transform_inv * vec4(lightpos,1))).xyz, in_normal); 
   if(dot < 0) 
     dot = 0; 
   o_color = vec4(dot, dot, dot, 1); 
   vec3 eye = (transform_inv * normalize(vec4(in_eye,1))).xyz; 
   vec3 rv = reflect(eye, in_normal); 
   o_uv = normalize(rv).xy * 0.5 + 0.5; 
}

void main() {
   vec4 tmp1_gl_Position;
   tmp1_gl_Position = a_position;
   mat4 tmp2_inTransform;
   tmp2_inTransform = u_transform;
   tmp1_gl_Position = tmp2_inTransform * tmp1_gl_Position;
   vec3 tmp3_fxnIn_lightpos;
   mat4 tmp4_fxnIn_transform_inv;
   vec3 tmp5_fxnIn_in_eye;
   vec3 tmp6_fxnIn_in_normal;
   vec4 tmp7_fxnOut_o_color;
   vec2 tmp8_fxnOut_o_uv;
   tmp3_fxnIn_lightpos = normalize(vec3(-116.972, 0, 204.549));
   tmp4_fxnIn_transform_inv = u_transform_inv;
   tmp5_fxnIn_in_eye = normalize(vec3(-135.344, 181.474, 0));
   tmp6_fxnIn_in_normal = a_normal;
   fxn2_env_map(tmp3_fxnIn_lightpos, tmp4_fxnIn_transform_inv, tmp5_fxnIn_in_eye, tmp6_fxnIn_in_normal, tmp7_fxnOut_o_color, tmp8_fxnOut_o_uv);
   v_uv = tmp8_fxnOut_o_uv; // read GSource id=env_map output=o_uv
   vec3 tmp9_fxnIn_lightpos;
   mat4 tmp10_fxnIn_transform_inv;
   vec3 tmp11_fxnIn_in_eye;
   vec3 tmp12_fxnIn_in_normal;
   vec4 tmp13_fxnOut_o_color;
   vec2 tmp14_fxnOut_o_uv;
   tmp9_fxnIn_lightpos = normalize(vec3(-116.972, 0, 204.549));
   tmp10_fxnIn_transform_inv = u_transform_inv;
   tmp11_fxnIn_in_eye = normalize(vec3(-135.344, 181.474, 0));
   tmp12_fxnIn_in_normal = a_normal;
   fxn2_env_map(tmp9_fxnIn_lightpos, tmp10_fxnIn_transform_inv, tmp11_fxnIn_in_eye, tmp12_fxnIn_in_normal, tmp13_fxnOut_o_color, tmp14_fxnOut_o_uv);
   v_color = tmp13_fxnOut_o_color; // read GSource id=env_map output=o_color
   gl_Position = tmp1_gl_Position;
}
";
String default_scene1_quadmodel_prg_prg1_frag_src = "uniform mat4 u_transform;
uniform sampler2D u_tex;
uniform vec3 u_lightpos;
uniform mat4 u_transform_inv;
uniform float u_time;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

in vec2 v_uv;
in vec4 v_color;
in vec3 v_normal;

out vec4 o_FragColor;


void fxn3_env_map(in vec4 in_color, in vec3 in_normal, in vec2 in_uv, out vec4 out_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   /* out_color = in_color * 0.5 + 0.5;  */
   /* out_color = vec4(1,0,0,1); */ 
   /* in_color *= 0.75; */
   /* in_color += 0.25;  */
   /* in_color = vec4(1,1,1,1), */
   out_color = in_color + texture2D(u_tex, in_uv); 
   /* out_color = vec4(0,1,0,1); */
   out_color *= vec4(0.9, 1.0, 0.9, 1);
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp15_fxnIn_in_color;
   vec3 tmp16_fxnIn_in_normal;
   vec2 tmp17_fxnIn_in_uv;
   vec4 tmp18_fxnOut_out_color;
   tmp15_fxnIn_in_color = v_color;
   tmp16_fxnIn_in_normal = v_normal;
   tmp17_fxnIn_in_uv = v_uv;
   fxn3_env_map(tmp15_fxnIn_in_color, tmp16_fxnIn_in_normal, tmp17_fxnIn_in_uv, tmp18_fxnOut_out_color, g_FragCoord, g_NormCoord);
   o_FragColor = tmp18_fxnOut_out_color; // read GSource id=env_map output=out_color
}
";
int default_scene1_quadmodel_prg_prg1__a_position;
int default_scene1_quadmodel_prg_prg1__a_uv;
int default_scene1_quadmodel_prg_prg1__a_color;
int default_scene1_quadmodel_prg_prg1__a_normal;
int default_scene1_quadmodel_prg_prg1__u_transform;
int default_scene1_quadmodel_prg_prg1__u_tex;
int default_scene1_quadmodel_prg_prg1__u_lightpos;
int default_scene1_quadmodel_prg_prg1__u_transform_inv;
int default_scene1_quadmodel_prg_prg1__u_time;
int default_scene1_quadmodel_prg_prg1_u_fragcoord_off_scl;
int default_scene1_quadmodel_prg_prg1_u_normcoord_scl;
int default_scene1_buf_quadmodel_a;
Buffer *default_scene1_buf_quadmodel_a_data;

// -------- section "default_scene1_blit_model_blit" --------
ZGLShader default_scene1_blit_blit_prg_prg1;
String default_scene1_blit_blit_prg_prg1_vtx_src = "in vec3 a_position;
uniform float u_time;
uniform sampler2D u_tex1;

void main() {
   vec4 tmp19_gl_Position;
   vec3 tmp20_position_src;
   tmp20_position_src = a_position;
   tmp19_gl_Position = vec4(tmp20_position_src.xyz, 1);
   gl_Position = tmp19_gl_Position;
}
";
String default_scene1_blit_blit_prg_prg1_frag_src = "uniform float u_time;
uniform sampler2D u_tex1;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

out vec4 o_FragColor;


void fxn4_blit_fbo(out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   o_color = texture2D(u_tex1, g_NormCoord.st*0.5+0.5);// + vec4(g_NormCoord.st,0,0); 
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp21_fxnOut_o_color;
   fxn4_blit_fbo(tmp21_fxnOut_o_color, g_FragCoord, g_NormCoord);
   o_FragColor = tmp21_fxnOut_o_color; // read GSource id=blit_fbo output=o_color
}
";
int default_scene1_blit_blit_prg_prg1__a_position;
int default_scene1_blit_blit_prg_prg1__u_time;
int default_scene1_blit_blit_prg_prg1__u_tex1;
int default_scene1_blit_blit_prg_prg1_u_fragcoord_off_scl;
int default_scene1_blit_blit_prg_prg1_u_normcoord_scl;
int default_scene1_blit_buf_blit_a;
Buffer *default_scene1_blit_buf_blit_a_data;

// -------- section "default_scene1_renderpass_rp_model" --------

// -------- section "default_scene1_renderpass_blit" --------

// -------- section "default_scene_scene1" --------
Texture *default_scene1_rp_model_tex_fbo_tex;
int default_scene1_rp_model_fbo_fbo1;
int default_scene1_rp_model_fbo_fbo1_zs_rb;


function fxn1_gen_sine(/*out*/Float o_sine) {
   o_sine = sin(cur_ang); 
   cur_ang += 0.0015123; 
}

function Init_default_scene1_model_quadmodel() {
   default_scene1_buf_quadmodel_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_scene1_buf_quadmodel_a);
   zglBufferData(GL_ARRAY_BUFFER, (36/*vtxAttribSz*/ * 3888/*#verts*/), default_scene1_buf_quadmodel_a_data, GL_STATIC_DRAW);
   default_scene1_quadmodel_prg_prg1.setVertexSource(default_scene1_quadmodel_prg_prg1_vtx_src);
   default_scene1_quadmodel_prg_prg1.setFragmentSource(default_scene1_quadmodel_prg_prg1_frag_src);
   if(!default_scene1_quadmodel_prg_prg1.create()) return false;
   default_scene1_quadmodel_prg_prg1__a_position = glGetAttribLocation(default_scene1_quadmodel_prg_prg1.programId, "a_position");
   default_scene1_quadmodel_prg_prg1__a_uv = glGetAttribLocation(default_scene1_quadmodel_prg_prg1.programId, "a_uv");
   default_scene1_quadmodel_prg_prg1__a_color = glGetAttribLocation(default_scene1_quadmodel_prg_prg1.programId, "a_color");
   default_scene1_quadmodel_prg_prg1__a_normal = glGetAttribLocation(default_scene1_quadmodel_prg_prg1.programId, "a_normal");
   default_scene1_quadmodel_prg_prg1__u_transform = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_transform");
   default_scene1_quadmodel_prg_prg1__u_tex = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_tex");
   default_scene1_quadmodel_prg_prg1__u_lightpos = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_lightpos");
   default_scene1_quadmodel_prg_prg1__u_transform_inv = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_transform_inv");
   default_scene1_quadmodel_prg_prg1__u_time = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_time");
   default_scene1_quadmodel_prg_prg1_u_fragcoord_off_scl = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_fragcoord_off_scl");
   default_scene1_quadmodel_prg_prg1_u_normcoord_scl = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_normcoord_scl");
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_scene1_model_quadmodel(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(1 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_scene1_buf_quadmodel_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 1;
   }
   glActiveTexture(GL_TEXTURE0+0);
   default_scene1_quadmodel_tex_tex1.bind();
   if(1 != last_program_id)
   {
      default_scene1_quadmodel_prg_prg1.bind();
      glEnableVertexAttribArray(default_scene1_quadmodel_prg_prg1__a_position);
      zglVertexAttribOffset(default_scene1_quadmodel_prg_prg1__a_position, 3, GL_FLOAT, GL_FALSE/*normalize*/, 36/*stride*/, 0);
      glEnableVertexAttribArray(default_scene1_quadmodel_prg_prg1__a_uv);
      zglVertexAttribOffset(default_scene1_quadmodel_prg_prg1__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 36/*stride*/, 12);
      glEnableVertexAttribArray(default_scene1_quadmodel_prg_prg1__a_color);
      zglVertexAttribOffset(default_scene1_quadmodel_prg_prg1__a_color, 4, GL_UNSIGNED_BYTE, GL_TRUE/*normalize*/, 36/*stride*/, 20);
      glEnableVertexAttribArray(default_scene1_quadmodel_prg_prg1__a_normal);
      zglVertexAttribOffset(default_scene1_quadmodel_prg_prg1__a_normal, 3, GL_FLOAT, GL_FALSE/*normalize*/, 36/*stride*/, 24);
      last_program_id = 1;
   } // 1 != last_program_id
   Matrix4f tmp1_init;
   CalcMat4Perspective(tmp1_init, 1, 42.4384, 0.071, 247.799);
   //tmp1_init.initFrustumFov(1, 42.4384, 0.071, 247.799);
   //trace "mat4frustumfov="+#(tmp1_init);
   Matrix4f tmp2_in_dst;
   tmp2_in_dst = [1,0,0,0, 0,1,0,0, 0,0,1,0, -0.11709,-1.58394,-5.36275,1];
   tmp1_init = tmp1_init * tmp2_in_dst;
   tmp2_in_dst = [3.21019,0,0,0, 0,3.21019,0,0, 0,0,6.42038,0, 0,0,0,1];
   tmp1_init = tmp1_init * tmp2_in_dst;
   float tmp3_in_y;
   tmp3_in_y = ext_default_global_time;
   tmp3_in_y += -0.711208;
   tmp2_in_dst.initEulerXYZ(0, tmp3_in_y, 0);
   tmp1_init = tmp1_init * tmp2_in_dst;
   tmp2_in_dst.initEulerXYZ(0.208621, 0, 0);
   tmp1_init = tmp1_init * tmp2_in_dst;
   float tmp4_in_y;
   Float tmp5_fxnOut_o_sine;
   fxn1_gen_sine(tmp5_fxnOut_o_sine);
   tmp4_in_y = tmp5_fxnOut_o_sine; // read GScript id=gen_sine output=o_sine
   tmp4_in_y += 0;
   tmp2_in_dst.initEulerXYZ(0, tmp4_in_y, 0);
   tmp1_init = tmp1_init * tmp2_in_dst;
   if(null != _transform)
   {
      Matrix4f tmp6__transform_mat;
      _transform.mul(tmp1_init) => tmp6__transform_mat;
      glUniformMatrix4fv(default_scene1_quadmodel_prg_prg1__u_transform, 1/*count*/, GL_FALSE/*transpose*/, tmp6__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_scene1_quadmodel_prg_prg1__u_transform, 1/*count*/, GL_FALSE/*transpose*/, tmp1_init);
   }
   glUniform1i(default_scene1_quadmodel_prg_prg1__u_tex, 0);  // bind texture unit 0 to sampler2D
   Vector3f tmp7_init;
   Matrix4f tmp8_init;
   tmp8_init = tmp1_init;
   // OP_MAT_INVERT
   tmp8_init.invert();
   glUniformMatrix4fv(default_scene1_quadmodel_prg_prg1__u_transform_inv, 1/*count*/, GL_FALSE/*transpose*/, tmp8_init);
   float tmp9_init;
   tmp9_init = ext_default_global_time;
   glUniform1f(default_scene1_quadmodel_prg_prg1__u_time, tmp9_init);
   if(0 == _fbW) glUniform4f(default_scene1_quadmodel_prg_prg1_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_scene1_quadmodel_prg_prg1_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_scene1_quadmodel_prg_prg1_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_scene1_quadmodel_prg_prg1_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 1296 triangles
   g_tri_count += 1296;
   glDrawArrays(GL_TRIANGLES, 0/*first*/, 3888);

   // <draw_post>
   default_scene1_quadmodel_tex_tex1.unbind();
}

function Exit_default_scene1_model_quadmodel() {
   default_scene1_quadmodel_tex_tex1.unload();
   default_scene1_quadmodel_prg_prg1.destroy();
   zglDeleteBuffer(default_scene1_buf_quadmodel_a);
}

function Init_default_scene1_blit_model_blit() {
   default_scene1_blit_buf_blit_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_scene1_blit_buf_blit_a);
   zglBufferData(GL_ARRAY_BUFFER, (8/*vtxAttribSz*/ * 4/*#verts*/), default_scene1_blit_buf_blit_a_data, GL_STATIC_DRAW);
   default_scene1_blit_blit_prg_prg1.setVertexSource(default_scene1_blit_blit_prg_prg1_vtx_src);
   default_scene1_blit_blit_prg_prg1.setFragmentSource(default_scene1_blit_blit_prg_prg1_frag_src);
   if(!default_scene1_blit_blit_prg_prg1.create()) return false;
   default_scene1_blit_blit_prg_prg1__a_position = glGetAttribLocation(default_scene1_blit_blit_prg_prg1.programId, "a_position");
   default_scene1_blit_blit_prg_prg1__u_time = glGetUniformLocation(default_scene1_blit_blit_prg_prg1.programId, "u_time");
   default_scene1_blit_blit_prg_prg1__u_tex1 = glGetUniformLocation(default_scene1_blit_blit_prg_prg1.programId, "u_tex1");
   default_scene1_blit_blit_prg_prg1_u_fragcoord_off_scl = glGetUniformLocation(default_scene1_blit_blit_prg_prg1.programId, "u_fragcoord_off_scl");
   default_scene1_blit_blit_prg_prg1_u_normcoord_scl = glGetUniformLocation(default_scene1_blit_blit_prg_prg1.programId, "u_normcoord_scl");
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_scene1_blit_model_blit(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(2 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_scene1_blit_buf_blit_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 2;
   }
   glActiveTexture(GL_TEXTURE0+0);
   default_scene1_rp_model_tex_fbo_tex.bind();
   if(2 != last_program_id)
   {
      default_scene1_blit_blit_prg_prg1.bind();
      glEnableVertexAttribArray(default_scene1_blit_blit_prg_prg1__a_position);
      zglVertexAttribOffset(default_scene1_blit_blit_prg_prg1__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 8/*stride*/, 0);
      last_program_id = 2;
   } // 2 != last_program_id
   float tmp10_init;
   tmp10_init = ext_default_global_time;
   glUniform1f(default_scene1_blit_blit_prg_prg1__u_time, tmp10_init);
   glUniform1i(default_scene1_blit_blit_prg_prg1__u_tex1, 0);  // bind texture unit 0 to sampler2D
   if(0 == _fbW) glUniform4f(default_scene1_blit_blit_prg_prg1_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_scene1_blit_blit_prg_prg1_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_scene1_blit_blit_prg_prg1_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_scene1_blit_blit_prg_prg1_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
   default_scene1_rp_model_tex_fbo_tex.unbind();
}

function Exit_default_scene1_blit_model_blit() {
   default_scene1_blit_blit_prg_prg1.destroy();
   zglDeleteBuffer(default_scene1_blit_buf_blit_a);
}

function Init_default_scene1_renderpass_rp_model() {
   return true;
}

function Draw_default_scene1_renderpass_rp_model(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.scene1.renderpasses.rp_model --------
   glBindFramebuffer(GL_FRAMEBUFFER, default_scene1_rp_model_fbo_fbo1);
   glViewport(0, 0, 512, 512);
   glScissor(0, 0, 512, 512);
   glClearColor(0.498039, 0.466667, 0.329412, 1);
   glClearDepth(1);
   glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
   glEnable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glDisable(GL_BLEND);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_scene1_model_quadmodel(512, 512, null/*transform*/);

   // <draw_post>
   glBindFramebuffer(GL_FRAMEBUFFER, g_default_fb);
   glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   // -------- END renderpass default.scenes.scene1.renderpasses.rp_model --------
}

function Exit_default_scene1_renderpass_rp_model() {
}

function Init_default_scene1_renderpass_blit() {
   return true;
}

function Draw_default_scene1_renderpass_blit(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.scene1.renderpasses.blit --------
   glClearColor(0.12549, 0.12549, 0.12549, 1);
   glClear(GL_COLOR_BUFFER_BIT);
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glDisable(GL_BLEND);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_scene1_blit_model_blit(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.scene1.renderpasses.blit --------
}

function Exit_default_scene1_renderpass_blit() {
}

function Init_default_scene_scene1() {
   // -------- BEGIN init FBO default.scenes.scene1.renderpasses.rp_model.fbos.fbo1 -------
   default_scene1_rp_model_fbo_fbo1 = zglGenFramebuffer();
   glBindFramebuffer(GL_FRAMEBUFFER, default_scene1_rp_model_fbo_fbo1);
   default_scene1_rp_model_tex_fbo_tex.bind(); // create id + alloc GL texture RAM
   default_scene1_rp_model_tex_fbo_tex.unbind();
   glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, default_scene1_rp_model_tex_fbo_tex.id, 0/*level*/);
   default_scene1_rp_model_fbo_fbo1_zs_rb = zglGenRenderbuffer();
   glBindRenderbuffer(GL_RENDERBUFFER, default_scene1_rp_model_fbo_fbo1_zs_rb);
   glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT24, 512, 512);
   glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, default_scene1_rp_model_fbo_fbo1_zs_rb);
   glBindRenderbuffer(GL_RENDERBUFFER, 0);
   int default_scene1_rp_model_fbo_fbo1_fbStatus = glCheckFramebufferStatus(GL_FRAMEBUFFER);
   if(GL_FRAMEBUFFER_COMPLETE != default_scene1_rp_model_fbo_fbo1_fbStatus)
     trace "[~~~] <tempscript> GFBO: glCheckFramebufferStatus() indicated a problem (id=default.scenes.scene1.renderpasses.rp_model.fbos.fbo1, status="+default_scene1_rp_model_fbo_fbo1_fbStatus+"="+TKS.constantToString(default_scene1_rp_model_fbo_fbo1_fbStatus, "GL_FRAMEBUFFER")+")";
   glBindFramebuffer(GL_FRAMEBUFFER, g_default_fb);
   // -------- END init FBO default.scenes.scene1.renderpasses.rp_model.fbos.fbo1 -------
   return true;
}

function Draw_default_scene_scene1(int _fbW, int _fbH) {
   // <draw_pre>
   Draw_default_scene1_renderpass_rp_model(0/*fbW*/, 0/*fbH*/);
   Draw_default_scene1_renderpass_blit(0/*fbW*/, 0/*fbH*/);

   // <draw_post>
}

function Exit_default_scene_scene1() {
   default_scene1_rp_model_tex_fbo_tex.unload();
   // -------- BEGIN exit FBO default.scenes.scene1.renderpasses.rp_model.fbos.fbo1 -------
   zglDeleteRenderbuffer(default_scene1_rp_model_fbo_fbo1_zs_rb);
   zglDeleteFramebuffer(default_scene1_rp_model_fbo_fbo1);
   // -------- END exit FBO default.scenes.scene1.renderpasses.rp_model.fbos.fbo1 -------
}

function Init() {
   if(!Init_default_scene1_model_quadmodel()) return false;
   if(!Init_default_scene1_blit_model_blit()) return false;
   if(!Init_default_scene1_renderpass_rp_model()) return false;
   if(!Init_default_scene1_renderpass_blit()) return false;
   if(!Init_default_scene_scene1()) return false;
   return true;
}

function Exit() {
   Exit_default_scene1_model_quadmodel();
   Exit_default_scene1_blit_model_blit();
   Exit_default_scene1_renderpass_rp_model();
   Exit_default_scene1_renderpass_blit();
   Exit_default_scene_scene1();
}

function Draw() {
   // <draw_pre>
   last_model_id   = 0;
   last_program_id = 0;
   g_tri_count     = 0;  // debug: total number of triangles
   glEnable(GL_SCISSOR_TEST);
   glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glClearColor(0.3,0.3,0.3,1.0);
   glClear(GL_COLOR_BUFFER_BIT);
   Draw_default_scene_scene1(0, 0);
   // <draw_post>
   glUseProgram(0);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   g_init = false;
}


function Load(String _zipPathNamePrefix) {
   local Zip zip;
   if(zip.openLocalReadOnly(_zipPathNamePrefix+"test_script.zip"))
   {
      local Buffer *b;
      default_scene1_buf_quadmodel_a_data <= zip.loadBufferByName("default_scene1_buf_quadmodel_a_data.dat");
      default_scene1_blit_buf_blit_a_data <= zip.loadBufferByName("default_scene1_blit_buf_blit_a_data.dat");
      
      // Texture default_scene1_quadmodel_tex_tex1
      default_scene1_quadmodel_tex_tex1 <= new Texture;
      b <= zip.loadBufferByName("default_scene1_quadmodel_tex_tex1.png");
      b.offset = 0;
      default_scene1_quadmodel_tex_tex1.loadImageStream(b, 256, 256, 3/*bpp*/);
      default_scene1_quadmodel_tex_tex1.target = GL_TEXTURE_2D;
      default_scene1_quadmodel_tex_tex1.flags  = TEX_MODULATE | TEX_MINFILTERLINEAR | TEX_MAGFILTERLINEAR | TEX_CLAMPTOEDGE_S | TEX_CLAMPTOEDGE_T;
      
      // Texture default_scene1_rp_model_tex_fbo_tex
      default_scene1_rp_model_tex_fbo_tex <= new Texture;
      default_scene1_rp_model_tex_fbo_tex.alloc(512, 512, 4/*bpp*/);
      default_scene1_rp_model_tex_fbo_tex.target = GL_TEXTURE_2D;
      default_scene1_rp_model_tex_fbo_tex.flags  = TEX_MODULATE | TEX_ALPHA | TEX_MINFILTERLINEAR | TEX_MAGFILTERLINEAR | TEX_REPEAT_S | TEX_REPEAT_T;
   }
   else
   {
      trace "[---] Mtest_script.Load: failed to open "+_zipPathNamePrefix+"test_script.zip";
   }
   g_init = true;
   g_default_vp_w = 800;
   g_default_vp_h = 600;
}
