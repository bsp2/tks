//
// auto-generated by GL Edit v2020.07.28 on 20200728-180717
//
module Mtestquadshader;

use tksdl;
use tkopengl;
use tkmath;
use tkzip;

float g_time;
int g_default_fb;
int g_default_vp_x;
int g_default_vp_y;
int g_default_vp_w;
int g_default_vp_h;
float g_dt;
int last_model_id;    // (note) set to 0 to force attrib/buffer rebind
int last_program_id;  // (note) set to 0 to force program rebind
boolean g_init;
int g_tri_count;

// -------- section "default_scene1_model_quad" --------
float ext_default_global_time = 0.0f;
ZGLShader default_scene1_quad_prg_prg1;
String default_scene1_quad_prg_prg1_vtx_src = "in vec3 a_position;
uniform float u_time;

void main() {
   vec4 tmp1_gl_Position;
   vec3 tmp2_position_src;
   tmp2_position_src = a_position;
   tmp1_gl_Position = vec4(tmp2_position_src.xyz, 1);
   gl_Position = tmp1_gl_Position;
}
";
String default_scene1_quad_prg_prg1_frag_src = "uniform float u_time;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

out vec4 o_FragColor;


void fxn1_shader(out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   float l = 1.0 - length(g_NormCoord.xy); 
   l = smoothstep(0.0, (sin(u_time*1.5)*0.5+0.5)*0.3+0.015, l); 
   l = pow(l, 3.0); 
   o_color = vec4(l,l,l,l); 
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp3_fxnOut_o_color;
   fxn1_shader(tmp3_fxnOut_o_color, g_FragCoord, g_NormCoord);
   o_FragColor = tmp3_fxnOut_o_color; // read GSource id=shader output=o_color
}
";
int default_scene1_quad_prg_prg1__a_position;
int default_scene1_quad_prg_prg1__u_time;
int default_scene1_quad_prg_prg1_u_fragcoord_off_scl;
int default_scene1_quad_prg_prg1_u_normcoord_scl;
int default_scene1_buf_quad_a;
Buffer *default_scene1_buf_quad_a_data;

// -------- section "default_scene_scene1" --------


function Init_default_scene1_model_quad() {
   default_scene1_buf_quad_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_scene1_buf_quad_a);
   zglBufferData(GL_ARRAY_BUFFER, (8/*vtxAttribSz*/ * 4/*#verts*/), default_scene1_buf_quad_a_data, GL_STATIC_DRAW);
   default_scene1_quad_prg_prg1.setVertexSource(default_scene1_quad_prg_prg1_vtx_src);
   default_scene1_quad_prg_prg1.setFragmentSource(default_scene1_quad_prg_prg1_frag_src);
   if(!default_scene1_quad_prg_prg1.create()) return false;
   default_scene1_quad_prg_prg1__a_position = glGetAttribLocation(default_scene1_quad_prg_prg1.programId, "a_position");
   default_scene1_quad_prg_prg1__u_time = glGetUniformLocation(default_scene1_quad_prg_prg1.programId, "u_time");
   default_scene1_quad_prg_prg1_u_fragcoord_off_scl = glGetUniformLocation(default_scene1_quad_prg_prg1.programId, "u_fragcoord_off_scl");
   default_scene1_quad_prg_prg1_u_normcoord_scl = glGetUniformLocation(default_scene1_quad_prg_prg1.programId, "u_normcoord_scl");
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_scene1_model_quad(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(1 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_scene1_buf_quad_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 1;
   }
   if(1 != last_program_id)
   {
      default_scene1_quad_prg_prg1.bind();
      glEnableVertexAttribArray(default_scene1_quad_prg_prg1__a_position);
      zglVertexAttribOffset(default_scene1_quad_prg_prg1__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 8/*stride*/, 0);
      last_program_id = 1;
   } // 1 != last_program_id
   float tmp1_init;
   tmp1_init = ext_default_global_time;
   glUniform1f(default_scene1_quad_prg_prg1__u_time, tmp1_init);
   if(0 == _fbW) glUniform4f(default_scene1_quad_prg_prg1_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_scene1_quad_prg_prg1_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_scene1_quad_prg_prg1_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_scene1_quad_prg_prg1_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_scene1_model_quad() {
   default_scene1_quad_prg_prg1.destroy();
   zglDeleteBuffer(default_scene1_buf_quad_a);
}

function Init_default_scene_scene1() {
   return true;
}

function Draw_default_scene_scene1(int _fbW, int _fbH) {
   // <draw_pre>
   Draw_default_scene1_model_quad(0, 0, null/*transform*/);

   // <draw_post>
}

function Exit_default_scene_scene1() {
}

function Init() {
   if(!Init_default_scene1_model_quad()) return false;
   if(!Init_default_scene_scene1()) return false;
   return true;
}

function Exit() {
   Exit_default_scene1_model_quad();
   Exit_default_scene_scene1();
}

function Draw() {
   // <draw_pre>
   last_model_id   = 0;
   last_program_id = 0;
   g_tri_count     = 0;  // debug: total number of triangles
   glEnable(GL_SCISSOR_TEST);
   glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glClearColor(0.3,0.3,0.3,1.0);
   glClear(GL_COLOR_BUFFER_BIT);
   Draw_default_scene_scene1(0, 0);
   // <draw_post>
   glUseProgram(0);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   g_init = false;
}


function Load(String _zipPathNamePrefix) {
   local Zip zip;
   if(zip.openLocalReadOnly(_zipPathNamePrefix+"testquadshader.zip"))
   {
      local Buffer *b;
      default_scene1_buf_quad_a_data <= zip.loadBufferByName("default_scene1_buf_quad_a_data.dat");
   }
   else
   {
      trace "[---] Mtestquadshader.Load: failed to open "+_zipPathNamePrefix+"testquadshader.zip";
   }
   g_init = true;
   g_default_vp_w = 800;
   g_default_vp_h = 600;
}
