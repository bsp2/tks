//
// auto-generated by GL Edit v2020.07.28 on 20200729-090259
//
module Mtest_tween_cam_2;

use tksdl;
use tkopengl;
use tkmath;
use tkzip;

float g_time;
int g_default_fb;
int g_default_vp_x;
int g_default_vp_y;
int g_default_vp_w;
int g_default_vp_h;
float g_dt;
int last_model_id;    // (note) set to 0 to force attrib/buffer rebind
int last_program_id;  // (note) set to 0 to force program rebind
boolean g_init;
int g_tri_count;

// -------- section "default_scene1_model_quadmodel" --------
int g_mod_default_scene1_quadmodel_cam_switch_switch_idx = 0;

function CalcMat4Perspective(Matrix4f _d, float aspect, float fov, float znear, float zfar) {
   float top = tan(fov * 2PI * (1.0f/360.0f) * 0.5f) * znear;
   float left   = aspect*-top;
   float right  = aspect*top;
   float bottom = -top;

   float near2 = (2.0f * znear);

   float a = near2 / (right - left);
   float b = near2 / (top - bottom);

   float c = (right + left) / (right - left);
   float d = (top + bottom) / (top - bottom);
   float e = -(zfar + znear) / (zfar - znear);

   float f = -(2.0f * zfar * znear) / (zfar - znear);

   _d = [a,0,0,0, 0,b,0,0, c,d,e,-1, 0,0,f,0];
   //trace "xxx mat4persp="+#(_d);
}
float ext_default_global_time = 0.0f;
Texture *default_scene1_quadmodel_tex_tex1;
Texture *default_scene1_quadmodel_tex_tex_hmap;
ZGLShader default_scene1_quadmodel_prg_prg1;
String default_scene1_quadmodel_prg_prg1_vtx_src = "in vec4 a_position;
in vec2 a_uv;
in vec4 a_color;
in vec3 a_normal;
uniform mat4 u_transform;
uniform float u_time;
uniform sampler2D u_tex;
uniform sampler2D u_tex_hmap;
out vec2 v_uv;
out vec4 v_color;
out vec3 v_normal;

void fxn1_hmap_modulate(in vec4 i_position, out vec4 o_position) {
   vec4 c = texture2D(u_tex_hmap, vec2(i_position.x*0.5+0.5, 0.0)); 
   c *= 0.7; 
   o_position = i_position + c; 
}

void main() {
   vec4 tmp1_gl_Position;
   vec4 tmp2_fxnIn_i_position;
   vec4 tmp3_fxnOut_o_position;
   tmp2_fxnIn_i_position = a_position;
   fxn1_hmap_modulate(tmp2_fxnIn_i_position, tmp3_fxnOut_o_position);
   tmp1_gl_Position = tmp3_fxnOut_o_position; // read GSource id=hmap_modulate output=o_position
   mat4 tmp4_inTransform;
   tmp4_inTransform = u_transform;
   tmp1_gl_Position = tmp4_inTransform * tmp1_gl_Position;
   v_uv = a_uv;
   v_color = vec4(1, 1, 1, 1);
   gl_Position = tmp1_gl_Position;
}
";
String default_scene1_quadmodel_prg_prg1_frag_src = "uniform mat4 u_transform;
uniform float u_time;
uniform sampler2D u_tex;
uniform sampler2D u_tex_hmap;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

in vec2 v_uv;
in vec4 v_color;
in vec3 v_normal;

out vec4 o_FragColor;


void fxn2_src1(out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   o_color = texture(u_tex, v_uv); 
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp5_fxnOut_o_color;
   fxn2_src1(tmp5_fxnOut_o_color, g_FragCoord, g_NormCoord);
   o_FragColor = tmp5_fxnOut_o_color; // read GSource id=src1 output=o_color
}
";
int default_scene1_quadmodel_prg_prg1__a_position;
int default_scene1_quadmodel_prg_prg1__a_uv;
int default_scene1_quadmodel_prg_prg1__a_color;
int default_scene1_quadmodel_prg_prg1__a_normal;
int default_scene1_quadmodel_prg_prg1__u_transform;
int default_scene1_quadmodel_prg_prg1__u_time;
int default_scene1_quadmodel_prg_prg1__u_tex;
int default_scene1_quadmodel_prg_prg1__u_tex_hmap;
int default_scene1_quadmodel_prg_prg1_u_fragcoord_off_scl;
int default_scene1_quadmodel_prg_prg1_u_normcoord_scl;
int default_scene1_buf_quadmodel_a;
Buffer *default_scene1_buf_quadmodel_a_data;

// -------- section "default_scene_scene1" --------

// -------- section "default_scene2_model_quadmodel" --------
int g_mod_default_scene2_quadmodel_cam_tween_src_idx = 0;
int g_mod_default_scene2_quadmodel_cam_tween_dst_idx = 1;
float g_mod_default_scene2_quadmodel_cam_tween_t = 0.0f;
boolean g_mod_default_scene2_quadmodel_cam_tween_adv = false;
Texture *default_scene2_quadmodel_tex_tex1;
Texture *default_scene2_quadmodel_tex_tex_hmap;
int g_mod_default_tween_colors_src_idx = 0;
int g_mod_default_tween_colors_dst_idx = 1;
float g_mod_default_tween_colors_t = 0.0f;
boolean g_mod_default_tween_colors_adv = false;
ZGLShader default_scene2_quadmodel_prg_prg1;
String default_scene2_quadmodel_prg_prg1_vtx_src = "in vec4 a_position;
in vec2 a_uv;
in vec4 a_color;
in vec3 a_normal;
uniform mat4 u_transform;
uniform float u_time;
uniform sampler2D u_tex;
uniform sampler2D u_tex_hmap;
uniform vec4 u_proxy_tween_colors_out;
out vec2 v_uv;
out vec4 v_color;
out vec3 v_normal;

void fxn4_hmap_modulate(in vec4 i_position, out vec4 o_position) {
   vec4 c = texture2D(u_tex_hmap, vec2(i_position.x*0.5+0.5, 0.0)); 
   c *= 0.7; 
   o_position = i_position + c; 
}

void main() {
   vec4 tmp6_gl_Position;
   vec4 tmp7_fxnIn_i_position;
   vec4 tmp8_fxnOut_o_position;
   tmp7_fxnIn_i_position = a_position;
   fxn4_hmap_modulate(tmp7_fxnIn_i_position, tmp8_fxnOut_o_position);
   tmp6_gl_Position = tmp8_fxnOut_o_position; // read GSource id=hmap_modulate output=o_position
   mat4 tmp9_inTransform;
   tmp9_inTransform = u_transform;
   tmp6_gl_Position = tmp9_inTransform * tmp6_gl_Position;
   v_uv = a_uv;
   v_color = vec4(1, 1, 1, 1);
   gl_Position = tmp6_gl_Position;
}
";
String default_scene2_quadmodel_prg_prg1_frag_src = "uniform mat4 u_transform;
uniform float u_time;
uniform sampler2D u_tex;
uniform sampler2D u_tex_hmap;
uniform vec4 u_proxy_tween_colors_out;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

in vec2 v_uv;
in vec4 v_color;
in vec3 v_normal;

out vec4 o_FragColor;


void fxn5_src1(out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   o_color = texture(u_tex, v_uv); 
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp10_fxnOut_o_color;
   fxn5_src1(tmp10_fxnOut_o_color, g_FragCoord, g_NormCoord);
   o_FragColor = tmp10_fxnOut_o_color; // read GSource id=src1 output=o_color
   vec4 tmp11_color_dst;
   tmp11_color_dst = u_proxy_tween_colors_out;
   o_FragColor = tmp11_color_dst + o_FragColor;
}
";
int default_scene2_quadmodel_prg_prg1__a_position;
int default_scene2_quadmodel_prg_prg1__a_uv;
int default_scene2_quadmodel_prg_prg1__a_color;
int default_scene2_quadmodel_prg_prg1__a_normal;
int default_scene2_quadmodel_prg_prg1__u_transform;
int default_scene2_quadmodel_prg_prg1__u_time;
int default_scene2_quadmodel_prg_prg1__u_tex;
int default_scene2_quadmodel_prg_prg1__u_tex_hmap;
int default_scene2_quadmodel_prg_prg1__u_proxy_tween_colors_out;
int default_scene2_quadmodel_prg_prg1_u_fragcoord_off_scl;
int default_scene2_quadmodel_prg_prg1_u_normcoord_scl;
int default_scene2_buf_quadmodel_a;
Buffer *default_scene2_buf_quadmodel_a_data;
int default_scene2_buf_quadmodel_i;
Buffer *default_scene2_buf_quadmodel_i_data;

// -------- section "default_scene_scene2" --------
int g_mod_global_scene_switch_switch_idx = 1;


function Init_default_scene1_model_quadmodel() {
   default_scene1_buf_quadmodel_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_scene1_buf_quadmodel_a);
   zglBufferData(GL_ARRAY_BUFFER, (44/*vtxAttribSz*/ * 4/*#verts*/), default_scene1_buf_quadmodel_a_data, GL_STATIC_DRAW);
   default_scene1_quadmodel_prg_prg1.setVertexSource(default_scene1_quadmodel_prg_prg1_vtx_src);
   default_scene1_quadmodel_prg_prg1.setFragmentSource(default_scene1_quadmodel_prg_prg1_frag_src);
   if(!default_scene1_quadmodel_prg_prg1.create()) return false;
   default_scene1_quadmodel_prg_prg1__a_position = glGetAttribLocation(default_scene1_quadmodel_prg_prg1.programId, "a_position");
   default_scene1_quadmodel_prg_prg1__a_uv = glGetAttribLocation(default_scene1_quadmodel_prg_prg1.programId, "a_uv");
   default_scene1_quadmodel_prg_prg1__a_color = glGetAttribLocation(default_scene1_quadmodel_prg_prg1.programId, "a_color");
   default_scene1_quadmodel_prg_prg1__a_normal = glGetAttribLocation(default_scene1_quadmodel_prg_prg1.programId, "a_normal");
   default_scene1_quadmodel_prg_prg1__u_transform = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_transform");
   default_scene1_quadmodel_prg_prg1__u_time = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_time");
   default_scene1_quadmodel_prg_prg1__u_tex = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_tex");
   default_scene1_quadmodel_prg_prg1__u_tex_hmap = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_tex_hmap");
   default_scene1_quadmodel_prg_prg1_u_fragcoord_off_scl = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_fragcoord_off_scl");
   default_scene1_quadmodel_prg_prg1_u_normcoord_scl = glGetUniformLocation(default_scene1_quadmodel_prg_prg1.programId, "u_normcoord_scl");
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_scene1_model_quadmodel(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(1 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_scene1_buf_quadmodel_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 1;
   }
   glActiveTexture(GL_TEXTURE0+0);
   default_scene1_quadmodel_tex_tex1.bind();
   glActiveTexture(GL_TEXTURE0+1);
   default_scene1_quadmodel_tex_tex_hmap.bind();
   if(1 != last_program_id)
   {
      default_scene1_quadmodel_prg_prg1.bind();
      glEnableVertexAttribArray(default_scene1_quadmodel_prg_prg1__a_position);
      zglVertexAttribOffset(default_scene1_quadmodel_prg_prg1__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 44/*stride*/, 0);
      glEnableVertexAttribArray(default_scene1_quadmodel_prg_prg1__a_uv);
      zglVertexAttribOffset(default_scene1_quadmodel_prg_prg1__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 44/*stride*/, 8);
      glEnableVertexAttribArray(default_scene1_quadmodel_prg_prg1__a_color);
      zglVertexAttribOffset(default_scene1_quadmodel_prg_prg1__a_color, 4, GL_FLOAT, GL_FALSE/*normalize*/, 44/*stride*/, 16);
      glEnableVertexAttribArray(default_scene1_quadmodel_prg_prg1__a_normal);
      zglVertexAttribOffset(default_scene1_quadmodel_prg_prg1__a_normal, 3, GL_FLOAT, GL_FALSE/*normalize*/, 44/*stride*/, 32);
      last_program_id = 1;
   } // 1 != last_program_id
   Matrix4f tmp1_init;
   if(g_mod_default_scene1_quadmodel_cam_switch_switch_idx < 0) g_mod_default_scene1_quadmodel_cam_switch_switch_idx += 3; else if(g_mod_default_scene1_quadmodel_cam_switch_switch_idx >= 3) g_mod_default_scene1_quadmodel_cam_switch_switch_idx -= 3;
   switch(g_mod_default_scene1_quadmodel_cam_switch_switch_idx)
   {
      default:
      case 0:
         // input 1/3: 1 connection, first=default.scenes.scene1.models.quadmodel.mods.cam1
         CalcMat4Perspective(tmp1_init, 1, 45, 0.1, 20);
         //tmp1_init.initFrustumFov(1, 45, 0.1, 20);
         //trace "mat4frustumfov="+#(tmp1_init);
         Matrix4f tmp2_in_dst;
         tmp2_in_dst = [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,-4.62976,1];
         tmp1_init = tmp1_init * tmp2_in_dst;
         tmp2_in_dst.initEulerXYZ(-0.965385, 0, 0);
         tmp1_init = tmp1_init * tmp2_in_dst;
         break;
   
      case 1:
         // input 2/3: 1 connection, first=default.scenes.scene1.models.quadmodel.mods.cam2
         CalcMat4Perspective(tmp1_init, 1, 64.918, 0.1, 24.7153);
         //tmp1_init.initFrustumFov(1, 64.918, 0.1, 24.7153);
         //trace "mat4frustumfov="+#(tmp1_init);
         Matrix4f tmp3_in_dst;
         tmp3_in_dst = [1,0,0,0, 0,1,0,0, 0,0,1,0, -0.04395,0,-1.43747,1];
         tmp1_init = tmp1_init * tmp3_in_dst;
         tmp3_in_dst.initEulerXYZ(-0.965385, 0.148292, 0);
         tmp1_init = tmp1_init * tmp3_in_dst;
         break;
   
      case 2:
         // input 3/3: 1 connection, first=default.scenes.scene1.models.quadmodel.mods.cam3
         CalcMat4Perspective(tmp1_init, 1, 45, 0.1, 20);
         //tmp1_init.initFrustumFov(1, 45, 0.1, 20);
         //trace "mat4frustumfov="+#(tmp1_init);
         Matrix4f tmp4_in_dst;
         tmp4_in_dst = [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,-2.00149,1];
         tmp1_init = tmp1_init * tmp4_in_dst;
         tmp4_in_dst.initEulerXYZ(-0.703595, -0.227036, 0);
         tmp1_init = tmp1_init * tmp4_in_dst;
         break;
   } // switch(g_mod_default_scene1_quadmodel_cam_switch_switch_idx)
   if(null != _transform)
   {
      Matrix4f tmp5__transform_mat;
      _transform.mul(tmp1_init) => tmp5__transform_mat;
      glUniformMatrix4fv(default_scene1_quadmodel_prg_prg1__u_transform, 1/*count*/, GL_FALSE/*transpose*/, tmp5__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_scene1_quadmodel_prg_prg1__u_transform, 1/*count*/, GL_FALSE/*transpose*/, tmp1_init);
   }
   float tmp6_init;
   tmp6_init = ext_default_global_time;
   glUniform1f(default_scene1_quadmodel_prg_prg1__u_time, tmp6_init);
   glUniform1i(default_scene1_quadmodel_prg_prg1__u_tex, 0);  // bind texture unit 0 to sampler2D
   glUniform1i(default_scene1_quadmodel_prg_prg1__u_tex_hmap, 1);  // bind texture unit 1 to sampler2D
   if(0 == _fbW) glUniform4f(default_scene1_quadmodel_prg_prg1_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_scene1_quadmodel_prg_prg1_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_scene1_quadmodel_prg_prg1_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_scene1_quadmodel_prg_prg1_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
   default_scene1_quadmodel_tex_tex1.unbind();
   default_scene1_quadmodel_tex_tex_hmap.unbind();
}

function Exit_default_scene1_model_quadmodel() {
   default_scene1_quadmodel_tex_tex1.unload();
   default_scene1_quadmodel_tex_tex_hmap.unload();
   default_scene1_quadmodel_prg_prg1.destroy();
   zglDeleteBuffer(default_scene1_buf_quadmodel_a);
}

function Init_default_scene_scene1() {
   return true;
}

function Draw_default_scene_scene1(int _fbW, int _fbH) {
   // <draw_pre>
   Draw_default_scene1_model_quadmodel(0, 0, null/*transform*/);

   // <draw_post>
}

function Exit_default_scene_scene1() {
}

function fxn3_tween_pos(/*out*/Float o_time) {
   o_time = (g_time*0.6) % 4.0f;
}

function Init_default_scene2_model_quadmodel() {
   default_scene2_buf_quadmodel_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_scene2_buf_quadmodel_a);
   zglBufferData(GL_ARRAY_BUFFER, (44/*vtxAttribSz*/ * 64/*#verts*/), default_scene2_buf_quadmodel_a_data, GL_STATIC_DRAW);
   default_scene2_buf_quadmodel_i = zglGenBuffer();
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_scene2_buf_quadmodel_i);
   zglBufferData(GL_ELEMENT_ARRAY_BUFFER, (4/*GL_UNSIGNED_INT*/ * 186/*#indices*/), default_scene2_buf_quadmodel_i_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   default_scene2_quadmodel_prg_prg1.setVertexSource(default_scene2_quadmodel_prg_prg1_vtx_src);
   default_scene2_quadmodel_prg_prg1.setFragmentSource(default_scene2_quadmodel_prg_prg1_frag_src);
   if(!default_scene2_quadmodel_prg_prg1.create()) return false;
   default_scene2_quadmodel_prg_prg1__a_position = glGetAttribLocation(default_scene2_quadmodel_prg_prg1.programId, "a_position");
   default_scene2_quadmodel_prg_prg1__a_uv = glGetAttribLocation(default_scene2_quadmodel_prg_prg1.programId, "a_uv");
   default_scene2_quadmodel_prg_prg1__a_color = glGetAttribLocation(default_scene2_quadmodel_prg_prg1.programId, "a_color");
   default_scene2_quadmodel_prg_prg1__a_normal = glGetAttribLocation(default_scene2_quadmodel_prg_prg1.programId, "a_normal");
   default_scene2_quadmodel_prg_prg1__u_transform = glGetUniformLocation(default_scene2_quadmodel_prg_prg1.programId, "u_transform");
   default_scene2_quadmodel_prg_prg1__u_time = glGetUniformLocation(default_scene2_quadmodel_prg_prg1.programId, "u_time");
   default_scene2_quadmodel_prg_prg1__u_tex = glGetUniformLocation(default_scene2_quadmodel_prg_prg1.programId, "u_tex");
   default_scene2_quadmodel_prg_prg1__u_tex_hmap = glGetUniformLocation(default_scene2_quadmodel_prg_prg1.programId, "u_tex_hmap");
   default_scene2_quadmodel_prg_prg1__u_proxy_tween_colors_out = glGetUniformLocation(default_scene2_quadmodel_prg_prg1.programId, "u_proxy_tween_colors_out");
   default_scene2_quadmodel_prg_prg1_u_fragcoord_off_scl = glGetUniformLocation(default_scene2_quadmodel_prg_prg1.programId, "u_fragcoord_off_scl");
   default_scene2_quadmodel_prg_prg1_u_normcoord_scl = glGetUniformLocation(default_scene2_quadmodel_prg_prg1.programId, "u_normcoord_scl");
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_scene2_model_quadmodel(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(2 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_scene2_buf_quadmodel_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_scene2_buf_quadmodel_i);
      last_model_id = 2;
   }
   glActiveTexture(GL_TEXTURE0+0);
   default_scene2_quadmodel_tex_tex1.bind();
   glActiveTexture(GL_TEXTURE0+1);
   default_scene2_quadmodel_tex_tex_hmap.bind();
   if(2 != last_program_id)
   {
      default_scene2_quadmodel_prg_prg1.bind();
      glEnableVertexAttribArray(default_scene2_quadmodel_prg_prg1__a_position);
      zglVertexAttribOffset(default_scene2_quadmodel_prg_prg1__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 44/*stride*/, 0);
      glEnableVertexAttribArray(default_scene2_quadmodel_prg_prg1__a_uv);
      zglVertexAttribOffset(default_scene2_quadmodel_prg_prg1__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 44/*stride*/, 8);
      glEnableVertexAttribArray(default_scene2_quadmodel_prg_prg1__a_color);
      zglVertexAttribOffset(default_scene2_quadmodel_prg_prg1__a_color, 4, GL_FLOAT, GL_FALSE/*normalize*/, 44/*stride*/, 16);
      glEnableVertexAttribArray(default_scene2_quadmodel_prg_prg1__a_normal);
      zglVertexAttribOffset(default_scene2_quadmodel_prg_prg1__a_normal, 3, GL_FLOAT, GL_FALSE/*normalize*/, 44/*stride*/, 32);
      last_program_id = 2;
   } // 2 != last_program_id
   Matrix4f tmp7_init;
   
   //
   // Tween default.scenes.scene2.models.quadmodel.mods.cam_tween:
   //
   boolean tmp8_cam_tween_reset;
   boolean tmp9_cam_tween_prev;
   boolean tmp10_cam_tween_next;
   float tmp11_cam_tween_speed;
   tmp11_cam_tween_speed = 0.0166667;
   Float tmp12_fxnOut_o_time;
   fxn3_tween_pos(tmp12_fxnOut_o_time);
   g_mod_default_scene2_quadmodel_cam_tween_t = tmp12_fxnOut_o_time; // read GScript id=tween_pos output=o_time
   g_mod_default_scene2_quadmodel_cam_tween_src_idx = int(g_mod_default_scene2_quadmodel_cam_tween_t);
   g_mod_default_scene2_quadmodel_cam_tween_dst_idx = g_mod_default_scene2_quadmodel_cam_tween_src_idx + 1;
   g_mod_default_scene2_quadmodel_cam_tween_t = g_mod_default_scene2_quadmodel_cam_tween_t - int(g_mod_default_scene2_quadmodel_cam_tween_t);
   if(tmp8_cam_tween_reset) { g_mod_default_scene2_quadmodel_cam_tween_src_idx = 0; g_mod_default_scene2_quadmodel_cam_tween_dst_idx = 1; g_mod_default_scene2_quadmodel_cam_tween_t = 0.0f; }
   if(tmp9_cam_tween_prev) { g_mod_default_scene2_quadmodel_cam_tween_src_idx--; g_mod_default_scene2_quadmodel_cam_tween_dst_idx--; g_mod_default_scene2_quadmodel_cam_tween_t = 0.0f; }
   if(tmp10_cam_tween_next) { g_mod_default_scene2_quadmodel_cam_tween_src_idx++; g_mod_default_scene2_quadmodel_cam_tween_dst_idx++; g_mod_default_scene2_quadmodel_cam_tween_t = 0.0f; }
   if(g_mod_default_scene2_quadmodel_cam_tween_adv) { g_mod_default_scene2_quadmodel_cam_tween_adv = false; g_mod_default_scene2_quadmodel_cam_tween_src_idx++; g_mod_default_scene2_quadmodel_cam_tween_dst_idx++; }
   if(g_mod_default_scene2_quadmodel_cam_tween_src_idx < 0) g_mod_default_scene2_quadmodel_cam_tween_src_idx += 4; else if(g_mod_default_scene2_quadmodel_cam_tween_src_idx >= 4) g_mod_default_scene2_quadmodel_cam_tween_src_idx -= 4;
   if(g_mod_default_scene2_quadmodel_cam_tween_dst_idx < 0) g_mod_default_scene2_quadmodel_cam_tween_dst_idx += 4; else if(g_mod_default_scene2_quadmodel_cam_tween_dst_idx >= 4) g_mod_default_scene2_quadmodel_cam_tween_dst_idx -= 4;
   Matrix4f tmp13_cam_tween_src;
   Matrix4f tmp14_cam_tween_dst;
   if( (g_mod_default_scene2_quadmodel_cam_tween_src_idx == 0) || (g_mod_default_scene2_quadmodel_cam_tween_dst_idx == 0) )
   {
      // input 1/4: 4 connections, first=default.scenes.scene2.models.quadmodel.mods.cam1
      Matrix4f tmp15_cam_tween_input_0;
      CalcMat4Perspective(tmp15_cam_tween_input_0, 1, 45, 0.1, 20);
      //tmp15_cam_tween_input_0.initFrustumFov(1, 45, 0.1, 20);
      //trace "mat4frustumfov="+#(tmp15_cam_tween_input_0);
      Matrix4f tmp16_in_dst;
      tmp16_in_dst = [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,-2.27299,1];
      tmp15_cam_tween_input_0 = tmp15_cam_tween_input_0 * tmp16_in_dst;
      tmp16_in_dst.initEulerXYZ(-0.965385, 0, 0);
      tmp15_cam_tween_input_0 = tmp15_cam_tween_input_0 * tmp16_in_dst;
      if(g_mod_default_scene2_quadmodel_cam_tween_src_idx == 0)
         tmp13_cam_tween_src = tmp15_cam_tween_input_0;
      if(g_mod_default_scene2_quadmodel_cam_tween_dst_idx == 0)
         tmp14_cam_tween_dst = tmp15_cam_tween_input_0;
   } // end tween inputIdx=0
   if( (g_mod_default_scene2_quadmodel_cam_tween_src_idx == 1) || (g_mod_default_scene2_quadmodel_cam_tween_dst_idx == 1) )
   {
      // input 2/4: 4 connections, first=default.scenes.scene2.models.quadmodel.mods.cam1
      Matrix4f tmp17_cam_tween_input_1;
      CalcMat4Perspective(tmp17_cam_tween_input_1, 1, 64.918, 0.1, 24.7153);
      //tmp17_cam_tween_input_1.initFrustumFov(1, 64.918, 0.1, 24.7153);
      //trace "mat4frustumfov="+#(tmp17_cam_tween_input_1);
      Matrix4f tmp18_in_dst;
      tmp18_in_dst = [1,0,0,0, 0,1,0,0, 0,0,1,0, -0.04395,0,-1.43747,1];
      tmp17_cam_tween_input_1 = tmp17_cam_tween_input_1 * tmp18_in_dst;
      tmp18_in_dst.initEulerXYZ(-0.965394, 0.148292, 0);
      tmp17_cam_tween_input_1 = tmp17_cam_tween_input_1 * tmp18_in_dst;
      if(g_mod_default_scene2_quadmodel_cam_tween_src_idx == 1)
         tmp13_cam_tween_src = tmp17_cam_tween_input_1;
      if(g_mod_default_scene2_quadmodel_cam_tween_dst_idx == 1)
         tmp14_cam_tween_dst = tmp17_cam_tween_input_1;
   } // end tween inputIdx=1
   if( (g_mod_default_scene2_quadmodel_cam_tween_src_idx == 2) || (g_mod_default_scene2_quadmodel_cam_tween_dst_idx == 2) )
   {
      // input 3/4: 4 connections, first=default.scenes.scene2.models.quadmodel.mods.cam1
      Matrix4f tmp19_cam_tween_input_2;
      CalcMat4Perspective(tmp19_cam_tween_input_2, 1, 45, 0.1, 20);
      //tmp19_cam_tween_input_2.initFrustumFov(1, 45, 0.1, 20);
      //trace "mat4frustumfov="+#(tmp19_cam_tween_input_2);
      Matrix4f tmp20_in_dst;
      tmp20_in_dst = [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,-8.33726,1];
      tmp19_cam_tween_input_2 = tmp19_cam_tween_input_2 * tmp20_in_dst;
      tmp20_in_dst.initEulerXYZ(-0.703595, -0.227036, 0);
      tmp19_cam_tween_input_2 = tmp19_cam_tween_input_2 * tmp20_in_dst;
      if(g_mod_default_scene2_quadmodel_cam_tween_src_idx == 2)
         tmp13_cam_tween_src = tmp19_cam_tween_input_2;
      if(g_mod_default_scene2_quadmodel_cam_tween_dst_idx == 2)
         tmp14_cam_tween_dst = tmp19_cam_tween_input_2;
   } // end tween inputIdx=2
   if( (g_mod_default_scene2_quadmodel_cam_tween_src_idx == 3) || (g_mod_default_scene2_quadmodel_cam_tween_dst_idx == 3) )
   {
      // input 4/4: 4 connections, first=default.scenes.scene2.models.quadmodel.mods.cam1
      Matrix4f tmp21_cam_tween_input_3;
      CalcMat4Perspective(tmp21_cam_tween_input_3, 1, 45, 0.1, 20);
      //tmp21_cam_tween_input_3.initFrustumFov(1, 45, 0.1, 20);
      //trace "mat4frustumfov="+#(tmp21_cam_tween_input_3);
      Matrix4f tmp22_in_dst;
      tmp22_in_dst = [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0.77962,-3.97177,1];
      tmp21_cam_tween_input_3 = tmp21_cam_tween_input_3 * tmp22_in_dst;
      tmp22_in_dst.initEulerXYZ(-0.703595, -0.227036, 0);
      tmp21_cam_tween_input_3 = tmp21_cam_tween_input_3 * tmp22_in_dst;
      if(g_mod_default_scene2_quadmodel_cam_tween_src_idx == 3)
         tmp13_cam_tween_src = tmp21_cam_tween_input_3;
      if(g_mod_default_scene2_quadmodel_cam_tween_dst_idx == 3)
         tmp14_cam_tween_dst = tmp21_cam_tween_input_3;
   } // end tween inputIdx=3
   // Tween interpol=easeOutBounce
   float tmp23_cam_tween_teaseoutbounce;
   if(g_mod_default_scene2_quadmodel_cam_tween_t < (1 / 2.75/*d1*/)) tmp23_cam_tween_teaseoutbounce = 7.5625/*n1*/ * g_mod_default_scene2_quadmodel_cam_tween_t * g_mod_default_scene2_quadmodel_cam_tween_t;
   else if(g_mod_default_scene2_quadmodel_cam_tween_t < (2 / 2.75/*d1*/)) { tmp23_cam_tween_teaseoutbounce = (g_mod_default_scene2_quadmodel_cam_tween_t - 1.5 / 2.75/*d1*/); tmp23_cam_tween_teaseoutbounce = 7.5625/*n1*/ * tmp23_cam_tween_teaseoutbounce * tmp23_cam_tween_teaseoutbounce + 0.75; }
   else if(g_mod_default_scene2_quadmodel_cam_tween_t < (2.5 / 2.75/*d1*/)) { tmp23_cam_tween_teaseoutbounce = (g_mod_default_scene2_quadmodel_cam_tween_t - 2.25 / 2.75/*d1*/); tmp23_cam_tween_teaseoutbounce = 7.5625/*n1*/ * tmp23_cam_tween_teaseoutbounce * tmp23_cam_tween_teaseoutbounce + 0.9375; }
   else { tmp23_cam_tween_teaseoutbounce = (g_mod_default_scene2_quadmodel_cam_tween_t - 2.625 / 2.75/*d1*/); tmp23_cam_tween_teaseoutbounce = 7.5625/*n1*/ * tmp23_cam_tween_teaseoutbounce * tmp23_cam_tween_teaseoutbounce + 0.984375; }
   tmp7_init[0] = tmp13_cam_tween_src[0] + (tmp14_cam_tween_dst[0] - tmp13_cam_tween_src[0]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[1] = tmp13_cam_tween_src[1] + (tmp14_cam_tween_dst[1] - tmp13_cam_tween_src[1]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[2] = tmp13_cam_tween_src[2] + (tmp14_cam_tween_dst[2] - tmp13_cam_tween_src[2]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[3] = tmp13_cam_tween_src[3] + (tmp14_cam_tween_dst[3] - tmp13_cam_tween_src[3]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[4] = tmp13_cam_tween_src[4] + (tmp14_cam_tween_dst[4] - tmp13_cam_tween_src[4]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[5] = tmp13_cam_tween_src[5] + (tmp14_cam_tween_dst[5] - tmp13_cam_tween_src[5]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[6] = tmp13_cam_tween_src[6] + (tmp14_cam_tween_dst[6] - tmp13_cam_tween_src[6]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[7] = tmp13_cam_tween_src[7] + (tmp14_cam_tween_dst[7] - tmp13_cam_tween_src[7]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[8] = tmp13_cam_tween_src[8] + (tmp14_cam_tween_dst[8] - tmp13_cam_tween_src[8]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[9] = tmp13_cam_tween_src[9] + (tmp14_cam_tween_dst[9] - tmp13_cam_tween_src[9]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[10] = tmp13_cam_tween_src[10] + (tmp14_cam_tween_dst[10] - tmp13_cam_tween_src[10]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[11] = tmp13_cam_tween_src[11] + (tmp14_cam_tween_dst[11] - tmp13_cam_tween_src[11]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[12] = tmp13_cam_tween_src[12] + (tmp14_cam_tween_dst[12] - tmp13_cam_tween_src[12]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[13] = tmp13_cam_tween_src[13] + (tmp14_cam_tween_dst[13] - tmp13_cam_tween_src[13]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[14] = tmp13_cam_tween_src[14] + (tmp14_cam_tween_dst[14] - tmp13_cam_tween_src[14]) * tmp23_cam_tween_teaseoutbounce;
   tmp7_init[15] = tmp13_cam_tween_src[15] + (tmp14_cam_tween_dst[15] - tmp13_cam_tween_src[15]) * tmp23_cam_tween_teaseoutbounce;
   
   Matrix4f tmp24_in_dst;
   tmp24_in_dst = [0.61507,0,0,0, 0,0.61507,0,0, 0,0,0.61507,0, 0,0,0,1];
   tmp7_init = tmp7_init * tmp24_in_dst;
   if(null != _transform)
   {
      Matrix4f tmp25__transform_mat;
      _transform.mul(tmp7_init) => tmp25__transform_mat;
      glUniformMatrix4fv(default_scene2_quadmodel_prg_prg1__u_transform, 1/*count*/, GL_FALSE/*transpose*/, tmp25__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_scene2_quadmodel_prg_prg1__u_transform, 1/*count*/, GL_FALSE/*transpose*/, tmp7_init);
   }
   float tmp26_init;
   tmp26_init = ext_default_global_time;
   glUniform1f(default_scene2_quadmodel_prg_prg1__u_time, tmp26_init);
   glUniform1i(default_scene2_quadmodel_prg_prg1__u_tex, 0);  // bind texture unit 0 to sampler2D
   glUniform1i(default_scene2_quadmodel_prg_prg1__u_tex_hmap, 1);  // bind texture unit 1 to sampler2D
   Vector4f tmp27_init;
   
   //
   // Tween default.mods.tween_colors:
   //
   boolean tmp28_tween_colors_reset;
   boolean tmp29_tween_colors_prev;
   boolean tmp30_tween_colors_next;
   float tmp31_tween_colors_speed;
   tmp31_tween_colors_speed = 0.00919;
   if(tmp28_tween_colors_reset) { g_mod_default_tween_colors_src_idx = 0; g_mod_default_tween_colors_dst_idx = 1; g_mod_default_tween_colors_t = 0.0f; }
   if(tmp29_tween_colors_prev) { g_mod_default_tween_colors_src_idx--; g_mod_default_tween_colors_dst_idx--; g_mod_default_tween_colors_t = 0.0f; }
   if(tmp30_tween_colors_next) { g_mod_default_tween_colors_src_idx++; g_mod_default_tween_colors_dst_idx++; g_mod_default_tween_colors_t = 0.0f; }
   if(g_mod_default_tween_colors_adv) { g_mod_default_tween_colors_adv = false; g_mod_default_tween_colors_src_idx++; g_mod_default_tween_colors_dst_idx++; }
   if(g_mod_default_tween_colors_src_idx < 0) g_mod_default_tween_colors_src_idx += 3; else if(g_mod_default_tween_colors_src_idx >= 3) g_mod_default_tween_colors_src_idx -= 3;
   if(g_mod_default_tween_colors_dst_idx < 0) g_mod_default_tween_colors_dst_idx += 3; else if(g_mod_default_tween_colors_dst_idx >= 3) g_mod_default_tween_colors_dst_idx -= 3;
   Vector4f tmp32_tween_colors_src;
   Vector4f tmp33_tween_colors_dst;
   if( (g_mod_default_tween_colors_src_idx == 0) || (g_mod_default_tween_colors_dst_idx == 0) )
   {
      // input 1/3: 3 connections, first=default.constants.blue
      Vector4f tmp34_tween_colors_input_0;
      tmp34_tween_colors_input_0 = vector4f(0, 0, 1, 1);
      if(g_mod_default_tween_colors_src_idx == 0)
         tmp32_tween_colors_src = tmp34_tween_colors_input_0;
      if(g_mod_default_tween_colors_dst_idx == 0)
         tmp33_tween_colors_dst = tmp34_tween_colors_input_0;
   } // end tween inputIdx=0
   if( (g_mod_default_tween_colors_src_idx == 1) || (g_mod_default_tween_colors_dst_idx == 1) )
   {
      // input 2/3: 3 connections, first=default.constants.blue
      Vector4f tmp35_tween_colors_input_1;
      tmp35_tween_colors_input_1 = vector4f(1, 0, 0, 1);
      if(g_mod_default_tween_colors_src_idx == 1)
         tmp32_tween_colors_src = tmp35_tween_colors_input_1;
      if(g_mod_default_tween_colors_dst_idx == 1)
         tmp33_tween_colors_dst = tmp35_tween_colors_input_1;
   } // end tween inputIdx=1
   if( (g_mod_default_tween_colors_src_idx == 2) || (g_mod_default_tween_colors_dst_idx == 2) )
   {
      // input 3/3: 3 connections, first=default.constants.blue
      Vector4f tmp36_tween_colors_input_2;
      tmp36_tween_colors_input_2 = vector4f(0, 1, 0, 1);
      if(g_mod_default_tween_colors_src_idx == 2)
         tmp32_tween_colors_src = tmp36_tween_colors_input_2;
      if(g_mod_default_tween_colors_dst_idx == 2)
         tmp33_tween_colors_dst = tmp36_tween_colors_input_2;
   } // end tween inputIdx=2
   // Tween interpol=Linear
   tmp27_init.x = tmp32_tween_colors_src.x + (tmp33_tween_colors_dst.x - tmp32_tween_colors_src.x) * g_mod_default_tween_colors_t;
   tmp27_init.y = tmp32_tween_colors_src.y + (tmp33_tween_colors_dst.y - tmp32_tween_colors_src.y) * g_mod_default_tween_colors_t;
   tmp27_init.z = tmp32_tween_colors_src.z + (tmp33_tween_colors_dst.z - tmp32_tween_colors_src.z) * g_mod_default_tween_colors_t;
   tmp27_init.w = tmp32_tween_colors_src.w + (tmp33_tween_colors_dst.w - tmp32_tween_colors_src.w) * g_mod_default_tween_colors_t;
   g_mod_default_tween_colors_t += tmp31_tween_colors_speed;
   if(g_mod_default_tween_colors_t >= 1.0f)
   {
      g_mod_default_tween_colors_adv = true; 
      g_mod_default_tween_colors_t -= 1.0f;
   }
   
   glUniform4f(default_scene2_quadmodel_prg_prg1__u_proxy_tween_colors_out, tmp27_init.x, tmp27_init.y, tmp27_init.z, tmp27_init.w);
   if(0 == _fbW) glUniform4f(default_scene2_quadmodel_prg_prg1_u_fragcoord_off_scl, 0, 0, 1.0, 1.0);
   else glUniform4f(default_scene2_quadmodel_prg_prg1_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_scene2_quadmodel_prg_prg1_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_scene2_quadmodel_prg_prg1_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 62 triangles
   g_tri_count += 62;
   zglDrawElementsOffset(GL_TRIANGLES, 186/*count*/, GL_UNSIGNED_INT, 0/*offset*/);

   // <draw_post>
   default_scene2_quadmodel_tex_tex1.unbind();
   default_scene2_quadmodel_tex_tex_hmap.unbind();
}

function Exit_default_scene2_model_quadmodel() {
   default_scene2_quadmodel_tex_tex1.unload();
   default_scene2_quadmodel_tex_tex_hmap.unload();
   default_scene2_quadmodel_prg_prg1.destroy();
   zglDeleteBuffer(default_scene2_buf_quadmodel_a);
   zglDeleteBuffer(default_scene2_buf_quadmodel_i);
}

function Init_default_scene_scene2() {
   return true;
}

function Draw_default_scene_scene2(int _fbW, int _fbH) {
   // <draw_pre>
   Draw_default_scene2_model_quadmodel(0, 0, null/*transform*/);

   // <draw_post>
}

function Exit_default_scene_scene2() {
}

function Init() {
   if(!Init_default_scene1_model_quadmodel()) return false;
   if(!Init_default_scene_scene1()) return false;
   if(!Init_default_scene2_model_quadmodel()) return false;
   if(!Init_default_scene_scene2()) return false;
   return true;
}

function Exit() {
   Exit_default_scene1_model_quadmodel();
   Exit_default_scene_scene1();
   Exit_default_scene2_model_quadmodel();
   Exit_default_scene_scene2();
}

function Draw() {
   // <draw_pre>
   last_model_id   = 0;
   last_program_id = 0;
   g_tri_count     = 0;  // debug: total number of triangles
   glEnable(GL_SCISSOR_TEST);
   glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glClearColor(0.3,0.3,0.3,1.0);
   glClear(GL_COLOR_BUFFER_BIT);
   Function tmp37_scene_select_draw;
   if(g_mod_global_scene_switch_switch_idx < 0) g_mod_global_scene_switch_switch_idx += 2; else if(g_mod_global_scene_switch_switch_idx >= 2) g_mod_global_scene_switch_switch_idx -= 2;
   switch(g_mod_global_scene_switch_switch_idx)
   {
      default:
      case 0:
         // input 1/2: 1 connection, first=default.scenes.scene1
         tmp37_scene_select_draw <= Draw_default_scene_scene1;
         break;
   
      case 1:
         // input 2/2: 1 connection, first=default.scenes.scene2
         tmp37_scene_select_draw <= Draw_default_scene_scene2;
         break;
   } // switch(g_mod_global_scene_switch_switch_idx)
   if(null != tmp37_scene_select_draw) tmp37_scene_select_draw.eval({0, 0});
   // <draw_post>
   glUseProgram(0);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   g_init = false;
}


function Load(String _zipPathNamePrefix) {
   local Zip zip;
   if(zip.openLocalReadOnly(_zipPathNamePrefix+"test_tween_cam_2.zip"))
   {
      local Buffer *b;
      default_scene1_buf_quadmodel_a_data <= zip.loadBufferByName("default_scene1_buf_quadmodel_a_data.dat");
      default_scene2_buf_quadmodel_a_data <= zip.loadBufferByName("default_scene2_buf_quadmodel_a_data.dat");
      default_scene2_buf_quadmodel_i_data <= zip.loadBufferByName("default_scene2_buf_quadmodel_i_data.dat");
      
      // Texture default_scene1_quadmodel_tex_tex1
      default_scene1_quadmodel_tex_tex1 <= new Texture;
      b <= zip.loadBufferByName("default_scene1_quadmodel_tex_tex1.png");
      b.offset = 0;
      default_scene1_quadmodel_tex_tex1.loadImageStream(b, 64, 1, 4/*bpp*/);
      default_scene1_quadmodel_tex_tex1.target = GL_TEXTURE_2D;
      default_scene1_quadmodel_tex_tex1.flags  = TEX_MODULATE | TEX_ALPHA | TEX_CLAMPTOEDGE_S | TEX_CLAMPTOEDGE_T;
      
      // Texture default_scene1_quadmodel_tex_tex_hmap
      default_scene1_quadmodel_tex_tex_hmap <= new Texture;
      b <= zip.loadBufferByName("default_scene1_quadmodel_tex_tex_hmap.png");
      b.offset = 0;
      default_scene1_quadmodel_tex_tex_hmap.loadImageStream(b, 256, 256, 4/*bpp*/);
      default_scene1_quadmodel_tex_tex_hmap.target = GL_TEXTURE_2D;
      default_scene1_quadmodel_tex_tex_hmap.flags  = TEX_MODULATE | TEX_ALPHA | TEX_MINFILTERLINEAR | TEX_MAGFILTERLINEAR | TEX_CLAMPTOEDGE_S | TEX_CLAMPTOEDGE_T;
      
      // Texture default_scene2_quadmodel_tex_tex1
      default_scene2_quadmodel_tex_tex1 <= new Texture;
      b <= zip.loadBufferByName("default_scene2_quadmodel_tex_tex1.png");
      b.offset = 0;
      default_scene2_quadmodel_tex_tex1.loadImageStream(b, 64, 1, 4/*bpp*/);
      default_scene2_quadmodel_tex_tex1.target = GL_TEXTURE_2D;
      default_scene2_quadmodel_tex_tex1.flags  = TEX_MODULATE | TEX_ALPHA | TEX_CLAMPTOEDGE_S | TEX_CLAMPTOEDGE_T;
      
      // Texture default_scene2_quadmodel_tex_tex_hmap
      default_scene2_quadmodel_tex_tex_hmap <= new Texture;
      b <= zip.loadBufferByName("default_scene2_quadmodel_tex_tex_hmap.png");
      b.offset = 0;
      default_scene2_quadmodel_tex_tex_hmap.loadImageStream(b, 256, 256, 4/*bpp*/);
      default_scene2_quadmodel_tex_tex_hmap.target = GL_TEXTURE_2D;
      default_scene2_quadmodel_tex_tex_hmap.flags  = TEX_MODULATE | TEX_ALPHA | TEX_MINFILTERLINEAR | TEX_MAGFILTERLINEAR | TEX_CLAMPTOEDGE_S | TEX_CLAMPTOEDGE_T;
   }
   else
   {
      trace "[---] Mtest_tween_cam_2.Load: failed to open "+_zipPathNamePrefix+"test_tween_cam_2.zip";
   }
   g_init = true;
   g_default_vp_w = 800;
   g_default_vp_h = 600;
}
