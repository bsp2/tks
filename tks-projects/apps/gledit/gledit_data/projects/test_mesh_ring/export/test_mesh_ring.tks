//
// auto-generated by GL Edit v2020.07.28 on 20200728-174424
//
module Mtest_mesh_ring;

use tksdl;
use tkopengl;
use tkmath;
use tkzip;

float g_time;
int g_default_fb;
int g_default_vp_x;
int g_default_vp_y;
int g_default_vp_w;
int g_default_vp_h;
float g_dt;
int last_model_id;    // (note) set to 0 to force attrib/buffer rebind
int last_program_id;  // (note) set to 0 to force program rebind
boolean g_init;
int g_tri_count;

// -------- section "default_ring_scene_model_ringmodel" --------

function CalcMat4Ortho(Matrix4f _d, float w, float h, float d) {
   float left   = -w;
   float right  =  w;
   float bottom = -h;
   float top    =  h;
   float znear  = -d;
   float zfar   =  d;

   float tx = (right + left) / (right - left);
   float ty = (top + bottom) / (top - bottom);
   float tz = (zfar + znear) / (zfar - znear);

   float sx = 2.0f / (right - left);
   float sy = 2.0f / (top - bottom);
   float sz = -2.0f / (zfar - znear);

    _d = [sx,0,0,0, 0,sy,0,0, 0,0,sz,0, tx, ty, tz, 1];
}
float ext_default_global_time = 0.0f;
Texture *default_ring_scene_ringmodel_tex_tex;
ZGLShader default_ring_scene_ringmodel_prg_default;
String default_ring_scene_ringmodel_prg_default_vtx_src = "in vec4 a_position;
in vec2 a_uv;
uniform mat4 u_transform;
uniform sampler2D u_tex;
out vec2 v_uv;

void main() {
   vec4 tmp1_gl_Position;
   tmp1_gl_Position = a_position;
   mat4 tmp2_inTransform;
   tmp2_inTransform = u_transform;
   tmp1_gl_Position = tmp2_inTransform * tmp1_gl_Position;
   v_uv = a_uv;
   gl_Position = tmp1_gl_Position;
}
";
String default_ring_scene_ringmodel_prg_default_frag_src = "uniform mat4 u_transform;
uniform sampler2D u_tex;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

in vec2 v_uv;

out vec4 o_FragColor;


void fxn1_src(out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   o_color = texture2D(u_tex, v_uv);
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp3_fxnOut_o_color;
   fxn1_src(tmp3_fxnOut_o_color, g_FragCoord, g_NormCoord);
   o_FragColor = tmp3_fxnOut_o_color; // read GSource id=src output=o_color
}
";
int default_ring_scene_ringmodel_prg_default__a_position;
int default_ring_scene_ringmodel_prg_default__a_uv;
int default_ring_scene_ringmodel_prg_default__u_transform;
int default_ring_scene_ringmodel_prg_default__u_tex;
int default_ring_scene_ringmodel_prg_default_u_fragcoord_off_scl;
int default_ring_scene_ringmodel_prg_default_u_normcoord_scl;
int default_ring_scene_buf_ringmodel_a;
Buffer *default_ring_scene_buf_ringmodel_a_data;
int default_ring_scene_buf_ringmodel_i;
Buffer *default_ring_scene_buf_ringmodel_i_data;

// -------- section "default_ring_scene_renderpass_renderpass" --------

// -------- section "default_scene_ring_scene" --------


function Init_default_ring_scene_model_ringmodel() {
   default_ring_scene_buf_ringmodel_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_buf_ringmodel_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 108/*#verts*/), default_ring_scene_buf_ringmodel_a_data, GL_STATIC_DRAW);
   default_ring_scene_buf_ringmodel_i = zglGenBuffer();
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_ring_scene_buf_ringmodel_i);
   zglBufferData(GL_ELEMENT_ARRAY_BUFFER, (4/*GL_UNSIGNED_INT*/ * 324/*#indices*/), default_ring_scene_buf_ringmodel_i_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   default_ring_scene_ringmodel_prg_default.setVertexSource(default_ring_scene_ringmodel_prg_default_vtx_src);
   default_ring_scene_ringmodel_prg_default.setFragmentSource(default_ring_scene_ringmodel_prg_default_frag_src);
   if(!default_ring_scene_ringmodel_prg_default.create()) return false;
   default_ring_scene_ringmodel_prg_default__a_position = glGetAttribLocation(default_ring_scene_ringmodel_prg_default.programId, "a_position");
   default_ring_scene_ringmodel_prg_default__a_uv = glGetAttribLocation(default_ring_scene_ringmodel_prg_default.programId, "a_uv");
   default_ring_scene_ringmodel_prg_default__u_transform = glGetUniformLocation(default_ring_scene_ringmodel_prg_default.programId, "u_transform");
   default_ring_scene_ringmodel_prg_default__u_tex = glGetUniformLocation(default_ring_scene_ringmodel_prg_default.programId, "u_tex");
   default_ring_scene_ringmodel_prg_default_u_fragcoord_off_scl = glGetUniformLocation(default_ring_scene_ringmodel_prg_default.programId, "u_fragcoord_off_scl");
   default_ring_scene_ringmodel_prg_default_u_normcoord_scl = glGetUniformLocation(default_ring_scene_ringmodel_prg_default.programId, "u_normcoord_scl");
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_ring_scene_model_ringmodel(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(1 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_ring_scene_buf_ringmodel_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_ring_scene_buf_ringmodel_i);
      last_model_id = 1;
   }
   glActiveTexture(GL_TEXTURE0+0);
   default_ring_scene_ringmodel_tex_tex.bind();
   if(1 != last_program_id)
   {
      default_ring_scene_ringmodel_prg_default.bind();
      glEnableVertexAttribArray(default_ring_scene_ringmodel_prg_default__a_position);
      zglVertexAttribOffset(default_ring_scene_ringmodel_prg_default__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_ring_scene_ringmodel_prg_default__a_uv);
      zglVertexAttribOffset(default_ring_scene_ringmodel_prg_default__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 1;
   } // 1 != last_program_id
   Matrix4f tmp1_init;
   CalcMat4Ortho(tmp1_init, 1, 1, 1);
   Matrix4f tmp2_in_dst;
   tmp2_in_dst = [0.45313,0,0,0, 0,0.45313,0,0, 0,0,0.45313,0, 0,0,0,1];
   tmp1_init = tmp1_init * tmp2_in_dst;
   float tmp3_in_z;
   float tmp4_z_src;
   tmp4_z_src = ext_default_global_time;
   float tmp5_z_scloff;
   tmp5_z_scloff = tmp4_z_src*-1.48698+0.0;
   tmp3_in_z = tmp5_z_scloff;
   tmp3_in_z += 0;
   tmp2_in_dst.initEulerXYZ(0, 0, tmp3_in_z);
   tmp1_init = tmp1_init * tmp2_in_dst;
   if(null != _transform)
   {
      Matrix4f tmp6__transform_mat;
      _transform.mul(tmp1_init) => tmp6__transform_mat;
      glUniformMatrix4fv(default_ring_scene_ringmodel_prg_default__u_transform, 1/*count*/, GL_FALSE/*transpose*/, tmp6__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_ring_scene_ringmodel_prg_default__u_transform, 1/*count*/, GL_FALSE/*transpose*/, tmp1_init);
   }
   glUniform1i(default_ring_scene_ringmodel_prg_default__u_tex, 0);  // bind texture unit 0 to sampler2D
   if(0 == _fbW) glUniform4f(default_ring_scene_ringmodel_prg_default_u_fragcoord_off_scl, -790.4, -157, 1, 1);
   else glUniform4f(default_ring_scene_ringmodel_prg_default_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_ring_scene_ringmodel_prg_default_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_ring_scene_ringmodel_prg_default_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 108 triangles
   g_tri_count += 108;
   zglDrawElementsOffset(GL_TRIANGLES, 324/*count*/, GL_UNSIGNED_INT, 0/*offset*/);

   // <draw_post>
   default_ring_scene_ringmodel_tex_tex.unbind();
}

function Exit_default_ring_scene_model_ringmodel() {
   default_ring_scene_ringmodel_tex_tex.unload();
   default_ring_scene_ringmodel_prg_default.destroy();
   zglDeleteBuffer(default_ring_scene_buf_ringmodel_a);
   zglDeleteBuffer(default_ring_scene_buf_ringmodel_i);
}

function Init_default_ring_scene_renderpass_renderpass() {
   return true;
}

function Draw_default_ring_scene_renderpass_renderpass(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.ring_scene.renderpasses.renderpass --------
   glClearColor(0.12549, 0.12549, 0.12549, 1);
   glClear(GL_COLOR_BUFFER_BIT);
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glDisable(GL_BLEND);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_ring_scene_model_ringmodel(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.ring_scene.renderpasses.renderpass --------
}

function Exit_default_ring_scene_renderpass_renderpass() {
}

function Init_default_scene_ring_scene() {
   return true;
}

function Draw_default_scene_ring_scene(int _fbW, int _fbH) {
   // <draw_pre>
   Draw_default_ring_scene_renderpass_renderpass(0/*fbW*/, 0/*fbH*/);

   // <draw_post>
}

function Exit_default_scene_ring_scene() {
}

function Init() {
   if(!Init_default_ring_scene_model_ringmodel()) return false;
   if(!Init_default_ring_scene_renderpass_renderpass()) return false;
   if(!Init_default_scene_ring_scene()) return false;
   return true;
}

function Exit() {
   Exit_default_ring_scene_model_ringmodel();
   Exit_default_ring_scene_renderpass_renderpass();
   Exit_default_scene_ring_scene();
}

function Draw() {
   // <draw_pre>
   last_model_id   = 0;
   last_program_id = 0;
   g_tri_count     = 0;  // debug: total number of triangles
   glEnable(GL_SCISSOR_TEST);
   glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glClearColor(0.3,0.3,0.3,1.0);
   glClear(GL_COLOR_BUFFER_BIT);
   Draw_default_scene_ring_scene(0, 0);
   // <draw_post>
   glUseProgram(0);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   g_init = false;
}


function Load(String _zipPathNamePrefix) {
   local Zip zip;
   if(zip.openLocalReadOnly(_zipPathNamePrefix+"test_mesh_ring.zip"))
   {
      local Buffer *b;
      default_ring_scene_buf_ringmodel_a_data <= zip.loadBufferByName("default_ring_scene_buf_ringmodel_a_data.dat");
      default_ring_scene_buf_ringmodel_i_data <= zip.loadBufferByName("default_ring_scene_buf_ringmodel_i_data.dat");
      
      // Texture default_ring_scene_ringmodel_tex_tex
      default_ring_scene_ringmodel_tex_tex <= new Texture;
      b <= zip.loadBufferByName("default_ring_scene_ringmodel_tex_tex.png");
      b.offset = 0;
      default_ring_scene_ringmodel_tex_tex.loadImageStream(b, 256, 256, 4/*bpp*/);
      default_ring_scene_ringmodel_tex_tex.target = GL_TEXTURE_2D;
      default_ring_scene_ringmodel_tex_tex.flags  = TEX_MODULATE | TEX_MINFILTERLINEAR | TEX_MAGFILTERTRILINEAR | TEX_REPEAT_S | TEX_REPEAT_T;
   }
   else
   {
      trace "[---] Mtest_mesh_ring.Load: failed to open "+_zipPathNamePrefix+"test_mesh_ring.zip";
   }
   g_init = true;
   g_default_vp_w = 800;
   g_default_vp_h = 600;
}
