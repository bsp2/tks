//
// auto-generated by GL Edit v2020.07.28 on 20200728-152012
//
module Mtest_scenegraph_script_nested;

use tksdl;
use tkopengl;
use tkmath;
use tkzip;

float g_time;
int g_default_fb;
int g_default_vp_x;
int g_default_vp_y;
int g_default_vp_w;
int g_default_vp_h;
float g_dt;
int last_model_id;    // (note) set to 0 to force attrib/buffer rebind
int last_program_id;  // (note) set to 0 to force program rebind
boolean g_init;
int g_tri_count;

// -------- section "default_sg_scene_model_quad" --------
float ext_default_global_time = 0.0f;
ZGLShader default_sg_scene_quad_prg_prg1;
String default_sg_scene_quad_prg_prg1_vtx_src = "in vec3 a_position;
in vec2 a_uv;
uniform float u_time;
uniform mat4 u_transform;
out vec2 v_uv;

void main() {
   vec4 tmp1_gl_Position;
   vec3 tmp2_position_src;
   tmp2_position_src = a_position;
   tmp1_gl_Position = vec4(tmp2_position_src.xyz, 1);
   mat4 tmp3_inTransform;
   tmp3_inTransform = u_transform;
   tmp1_gl_Position = tmp3_inTransform * tmp1_gl_Position;
   v_uv = a_uv;
   gl_Position = tmp1_gl_Position;
}
";
String default_sg_scene_quad_prg_prg1_frag_src = "uniform float u_time;
uniform mat4 u_transform;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

in vec2 v_uv;

out vec4 o_FragColor;


void fxn2_shader(out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   vec2 p = (v_uv-0.5)*2.0;
   float l = 1.0 - length(p); 
   l = smoothstep(0.0, (sin(u_time*1.5)*0.5+0.5)*0.3+0.015, l); 
   l = pow(l, 3.0); 
   o_color = vec4(l,l,l,l); 
   o_color = vec4(v_uv, 0,1);
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp4_fxnOut_o_color;
   fxn2_shader(tmp4_fxnOut_o_color, g_FragCoord, g_NormCoord);
   o_FragColor = tmp4_fxnOut_o_color; // read GSource id=shader output=o_color
}
";
int default_sg_scene_quad_prg_prg1__a_position;
int default_sg_scene_quad_prg_prg1__a_uv;
int default_sg_scene_quad_prg_prg1__u_time;
int default_sg_scene_quad_prg_prg1__u_transform;
int default_sg_scene_quad_prg_prg1_u_fragcoord_off_scl;
int default_sg_scene_quad_prg_prg1_u_normcoord_scl;
int default_sg_scene_buf_quad_a;
Buffer *default_sg_scene_buf_quad_a_data;

// -------- section "default_sg_scene_scenegraph_circle_inner" --------

// -------- section "default_sg_scene_scenegraph_circle_outer" --------

function CalcMat4Perspective(Matrix4f _d, float aspect, float fov, float znear, float zfar) {
   float top = tan(fov * 2PI * (1.0f/360.0f) * 0.5f) * znear;
   float left   = aspect*-top;
   float right  = aspect*top;
   float bottom = -top;

   float near2 = (2.0f * znear);

   float a = near2 / (right - left);
   float b = near2 / (top - bottom);

   float c = (right + left) / (right - left);
   float d = (top + bottom) / (top - bottom);
   float e = -(zfar + znear) / (zfar - znear);

   float f = -(2.0f * zfar * znear) / (zfar - znear);

   _d = [a,0,0,0, 0,b,0,0, c,d,e,-1, 0,0,f,0];
   //trace "xxx mat4persp="+#(_d);
}

// -------- section "default_sg_scene_renderpass_renderpass" --------

// -------- section "default_scene_sg_scene" --------
int g_mod_global_scene_switch_switch_idx = 1;


function Init_default_sg_scene_model_quad() {
   default_sg_scene_buf_quad_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_sg_scene_buf_quad_a);
   zglBufferData(GL_ARRAY_BUFFER, (16/*vtxAttribSz*/ * 4/*#verts*/), default_sg_scene_buf_quad_a_data, GL_STATIC_DRAW);
   default_sg_scene_quad_prg_prg1.setVertexSource(default_sg_scene_quad_prg_prg1_vtx_src);
   default_sg_scene_quad_prg_prg1.setFragmentSource(default_sg_scene_quad_prg_prg1_frag_src);
   if(!default_sg_scene_quad_prg_prg1.create()) return false;
   default_sg_scene_quad_prg_prg1__a_position = glGetAttribLocation(default_sg_scene_quad_prg_prg1.programId, "a_position");
   default_sg_scene_quad_prg_prg1__a_uv = glGetAttribLocation(default_sg_scene_quad_prg_prg1.programId, "a_uv");
   default_sg_scene_quad_prg_prg1__u_time = glGetUniformLocation(default_sg_scene_quad_prg_prg1.programId, "u_time");
   default_sg_scene_quad_prg_prg1__u_transform = glGetUniformLocation(default_sg_scene_quad_prg_prg1.programId, "u_transform");
   default_sg_scene_quad_prg_prg1_u_fragcoord_off_scl = glGetUniformLocation(default_sg_scene_quad_prg_prg1.programId, "u_fragcoord_off_scl");
   default_sg_scene_quad_prg_prg1_u_normcoord_scl = glGetUniformLocation(default_sg_scene_quad_prg_prg1.programId, "u_normcoord_scl");
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   return true;
}

function Draw_default_sg_scene_model_quad(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(3 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_sg_scene_buf_quad_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 3;
   }
   if(1 != last_program_id)
   {
      default_sg_scene_quad_prg_prg1.bind();
      glEnableVertexAttribArray(default_sg_scene_quad_prg_prg1__a_position);
      zglVertexAttribOffset(default_sg_scene_quad_prg_prg1__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 0);
      glEnableVertexAttribArray(default_sg_scene_quad_prg_prg1__a_uv);
      zglVertexAttribOffset(default_sg_scene_quad_prg_prg1__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 16/*stride*/, 8);
      last_program_id = 1;
   } // 1 != last_program_id
   float tmp14_init;
   tmp14_init = ext_default_global_time;
   glUniform1f(default_sg_scene_quad_prg_prg1__u_time, tmp14_init);
   Matrix4f tmp15_init;
   if(null != _transform)
   {
      glUniformMatrix4fv(default_sg_scene_quad_prg_prg1__u_transform, 1/*count*/, GL_FALSE/*transpose*/, _transform);
   }
   if(0 == _fbW) glUniform4f(default_sg_scene_quad_prg_prg1_u_fragcoord_off_scl, -790.4, -157, 1, 1);
   else glUniform4f(default_sg_scene_quad_prg_prg1_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_sg_scene_quad_prg_prg1_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_sg_scene_quad_prg_prg1_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);

   // <draw_post>
}

function Exit_default_sg_scene_model_quad() {
   default_sg_scene_quad_prg_prg1.destroy();
   zglDeleteBuffer(default_sg_scene_buf_quad_a);
}

function fxn3_circle_inner(int _fbW, int _fbH, Matrix4f _transform) {
   Matrix4f m;
   Matrix4f mTrans;
   mTrans.initTranslatef(0, 3.4, 0.0);
   float a = g_time * 0.4;
   float w = 2PI / 6;
   loop(6)
   {
     Matrix4f mRot; mRot.initEulerXYZ(0,0,a);
     m = _transform * mRot;
     m = m * mTrans;
     Draw_default_sg_scene_model_quad(0, 0, m/*transform*/);

     a += w;
   }
}

function Init_default_sg_scene_scenegraph_circle_inner() {
   return true;
}

function Draw_default_sg_scene_scenegraph_circle_inner(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.sg_scene.composites.circle_inner"
      Matrix4f tmp11__transform_circle_inner;
      Matrix4f tmp12__transformIn;
      tmp12__transformIn = [0.15366,0,0,0, 0,0.15366,0,0, 0,0,0.15366,0, 0,0,0,1];
      Matrix4f tmp13_transform_dst;
      tmp13_transform_dst = [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1];
      tmp12__transformIn = tmp12__transformIn * tmp13_transform_dst;
      tmp13_transform_dst.initEulerXYZ(0, 0, -0.783353);
      tmp12__transformIn = tmp12__transformIn * tmp13_transform_dst;
      _transform.mul(tmp12__transformIn) => tmp11__transform_circle_inner;
      Draw_default_sg_scene_model_quad(0, 0, tmp11__transform_circle_inner/*transform*/);
      
      {
         // Scenegraph node "default.scenes.sg_scene.composites.circle_inner.script_node"
         Matrix4f tmp16__transform_script_node;
         Matrix4f tmp17__transformIn;
         tmp17__transformIn = [1,0,0,0, 0,1,0,0, 0,0,1,0, -8.73372,-5.48208,0,1];
         Matrix4f tmp18_transform_dst;
         tmp18_transform_dst = [0.61426,0,0,0, 0,0.61426,0,0, 0,0,0.61426,0, 0,0,0,1];
         tmp17__transformIn = tmp17__transformIn * tmp18_transform_dst;
         float tmp19_in_y;
         float tmp20_y_src;
         tmp20_y_src = ext_default_global_time;
         float tmp21_y_scloff;
         tmp21_y_scloff = tmp20_y_src*6.09375+0.0;
         tmp19_in_y = tmp21_y_scloff;
         tmp19_in_y += 0;
         tmp18_transform_dst.initEulerXYZ(0, tmp19_in_y, 0);
         tmp17__transformIn = tmp17__transformIn * tmp18_transform_dst;
         tmp11__transform_circle_inner.mul(tmp17__transformIn) => tmp16__transform_script_node;
         fxn3_circle_inner(_fbW, _fbH, tmp16__transform_script_node/*transform*/);
      }
   }

   // <draw_post>
}

function Exit_default_sg_scene_scenegraph_circle_inner() {
}

function fxn1_circle_outer(int _fbW, int _fbH, Matrix4f _transform) {
   Matrix4f m;
   Matrix4f mTrans;
   mTrans.initTranslatef(0, 3.4, 0.0);
   float a = g_time * 0.4;
   float w = 2PI / 6;
   loop(6)
   {
     Matrix4f mRot; mRot.initEulerXYZ(0,0,a);
     m = _transform * mRot;
     m = m * mTrans;
     Draw_default_sg_scene_scenegraph_circle_inner(0, 0, m/*transform*/);

     a += w;
   }
}

function Init_default_sg_scene_scenegraph_circle_outer() {
   return true;
}

function Draw_default_sg_scene_scenegraph_circle_outer(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(null == _transform)
   {
      _transform <= new Matrix4f;  // root node: load identity
   }
   
   {
      // Scenegraph node "default.scenes.sg_scene.composites.circle_outer"
      Matrix4f tmp1__transform_circle_outer;
      Matrix4f tmp2__transformIn;
      CalcMat4Perspective(tmp2__transformIn, 1, 45, 0.1, 20);
      //tmp2__transformIn.initFrustumFov(1, 45, 0.1, 20);
      //trace "mat4frustumfov="+#(tmp2__transformIn);
      Matrix4f tmp3_transform_dst;
      Vector3f tmp4_in_eye;
      Vector3f tmp5_in_center;
      Vector3f tmp6_in_translate;
      Vector3f tmp7_in_up;
      tmp6_in_translate.init(0, 0, 1.54621);
      tmp4_in_eye.init(0, -3.71094, 0);
      tmp4_in_eye.add(tmp6_in_translate);
      tmp5_in_center.init(0, -0.63477, -1.21159);
      tmp5_in_center.add(tmp6_in_translate);
      tmp7_in_up.init(0, 1, 0);
      Matrix4f.BuildLookAtMatrix4f(tmp4_in_eye, tmp5_in_center, tmp7_in_up) => tmp3_transform_dst;
      tmp2__transformIn = tmp2__transformIn * tmp3_transform_dst;
      tmp3_transform_dst = [0.63862,0,0,0, 0,0.63862,0,0, 0,0,0.63862,0, 0,0,0,1];
      tmp2__transformIn = tmp2__transformIn * tmp3_transform_dst;
      _transform.mul(tmp2__transformIn) => tmp1__transform_circle_outer;
      
      {
         // Scenegraph node "default.scenes.sg_scene.composites.circle_outer.circle_outer"
         Matrix4f tmp8__transform_circle_outer;
         Matrix4f tmp9__transformIn;
         tmp9__transformIn.initEulerXYZ(0, 0, 0);
         Matrix4f tmp10_transform_dst;
         tmp10_transform_dst = [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1];
         tmp9__transformIn = tmp9__transformIn * tmp10_transform_dst;
         tmp10_transform_dst = [0.5,0,0,0, 0,0.5,0,0, 0,0,0.5,0, 0,0,0,1];
         tmp9__transformIn = tmp9__transformIn * tmp10_transform_dst;
         tmp1__transform_circle_outer.mul(tmp9__transformIn) => tmp8__transform_circle_outer;
         fxn1_circle_outer(_fbW, _fbH, tmp8__transform_circle_outer/*transform*/);
      }
   }

   // <draw_post>
}

function Exit_default_sg_scene_scenegraph_circle_outer() {
}

function Init_default_sg_scene_renderpass_renderpass() {
   return true;
}

function Draw_default_sg_scene_renderpass_renderpass(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.sg_scene.renderpasses.renderpass --------
   glClearColor(0.12549, 0.12549, 0.12549, 1);
   glClear(GL_COLOR_BUFFER_BIT);
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glEnable(GL_BLEND);
   glBlendFuncSeparate(GL_ONE, GL_ONE_MINUS_SRC_COLOR, GL_ONE, GL_ZERO);
   glBlendColor(0, 0, 0, 0);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glDisable(GL_CULL_FACE);
   Draw_default_sg_scene_scenegraph_circle_outer(0, 0, null/*transform*/);

   // <draw_post>
   // -------- END renderpass default.scenes.sg_scene.renderpasses.renderpass --------
}

function Exit_default_sg_scene_renderpass_renderpass() {
}

function Init_default_scene_sg_scene() {
   return true;
}

function Draw_default_scene_sg_scene(int _fbW, int _fbH) {
   // <draw_pre>
   Draw_default_sg_scene_renderpass_renderpass(0/*fbW*/, 0/*fbH*/);

   // <draw_post>
}

function Exit_default_scene_sg_scene() {
}

function Init() {
   if(!Init_default_sg_scene_model_quad()) return false;
   if(!Init_default_sg_scene_scenegraph_circle_inner()) return false;
   if(!Init_default_sg_scene_scenegraph_circle_outer()) return false;
   if(!Init_default_sg_scene_renderpass_renderpass()) return false;
   if(!Init_default_scene_sg_scene()) return false;
   return true;
}

function Exit() {
   Exit_default_sg_scene_model_quad();
   Exit_default_sg_scene_scenegraph_circle_inner();
   Exit_default_sg_scene_scenegraph_circle_outer();
   Exit_default_sg_scene_renderpass_renderpass();
   Exit_default_scene_sg_scene();
}

function Draw() {
   // <draw_pre>
   last_model_id   = 0;
   last_program_id = 0;
   g_tri_count     = 0;  // debug: total number of triangles
   glEnable(GL_SCISSOR_TEST);
   glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glClearColor(0.3,0.3,0.3,1.0);
   glClear(GL_COLOR_BUFFER_BIT);
   Function tmp22_scene_select_draw;
   if(g_mod_global_scene_switch_switch_idx < 0) g_mod_global_scene_switch_switch_idx += 2; else if(g_mod_global_scene_switch_switch_idx >= 2) g_mod_global_scene_switch_switch_idx -= 2;
   switch(g_mod_global_scene_switch_switch_idx)
   {
      default:
      case 0:
         // input 1/2: - no connections -
         tmp22_scene_select_draw <= null;
         break;
   
      case 1:
         // input 2/2: 1 connection, first=default.scenes.sg_scene
         tmp22_scene_select_draw <= Draw_default_scene_sg_scene;
         break;
   } // switch(g_mod_global_scene_switch_switch_idx)
   if(null != tmp22_scene_select_draw) tmp22_scene_select_draw.eval({0, 0});
   // <draw_post>
   glUseProgram(0);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   g_init = false;
}


function Load(String _zipPathNamePrefix) {
   local Zip zip;
   if(zip.openLocalReadOnly(_zipPathNamePrefix+"test_scenegraph_script_nested.zip"))
   {
      local Buffer *b;
      default_sg_scene_buf_quad_a_data <= zip.loadBufferByName("default_sg_scene_buf_quad_a_data.dat");
   }
   else
   {
      trace "[---] Mtest_scenegraph_script_nested.Load: failed to open "+_zipPathNamePrefix+"test_scenegraph_script_nested.zip";
   }
   g_init = true;
   g_default_vp_w = 800;
   g_default_vp_h = 600;
}
