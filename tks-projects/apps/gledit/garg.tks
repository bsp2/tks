// ----
// ---- file   : garg.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 21Jun2020
// ---- changed: 22Jun2020
// ----
// ----
// ----
module MGArg;

use namespace ui;
use namespace gledit;


// <class.png>
class GArg : GObject, GParamProvider {
   protected boolean b_init_done;


   // <method_init.png>
   public virtual init() {
      GObject::init();
      type = getInitialArgType();
      initIO();
   }

   // <method.png>
   public method initIO() {
      inputs.free();
      outputs.free();
      addOutput(GOutput.OUT_DEF, type);
   }

   // <method_get.png>
   public method getInitialArgType() : int {
      return TYPE_FLOAT;
   }

   // <method_get.png>
   public virtual getInputDomain(String _inputId) : int {
      return DOMAIN_SCRIPT;
   }

   // <method_get.png>
   public virtual getOutputDomain(String _outputId) : int {
      return DOMAIN_SCRIPT;
   }

   // <method_get.png>
   public virtual getObjectPathVirtFolder() : String {
      return "args";
   }

   // <method_get.png>
   public virtual getPreferredIdPrefix() : String {
      return "arg";
   }

   // <method.png>
   public virtual getVarName() : String {
      return "ext_"+getNamespacePrefix()+"_"+id;
   }

  // <save.png>
   public virtual saveStateObject(local Stream ofs, local GConnectionWriter connectionWriter) {
      GObject::saveStateObject(ofs, connectionWriter);

      // Version
      ofs.i16 = 1;

      // Params
      GParamProvider::saveStateParamProvider(ofs, connectionWriter);
   }

   // <load.png>
   public method loadStateObject(local Stream ifs) : boolean {
      // (note) base class object info is loaded by LoadStateObject

      // Version
      short ver = ifs.u16;

      if(1 <= ver <= 1)
      {
         if(GParamProvider::loadStateParamProvider(ifs))
         {
            // Succeeded
            return true;
         }
         else
         {
            trace "[---] GArg::loadStateObject: failed to load params, this="+#(this)+" path="+getObjectPath();
         }
      }
      else
      {
         trace "[---] GArg::loadStateObject: invalid version "+ver+", this="+#(this)+" path="+getObjectPath();
      }
      return false;
   }

   // <method.png>
   public virtual emitBegin() {
      b_init_done = false;
   }

   // <method.png>
   public virtual emit(local String       _outputId, 
                       local GModule      _module, 
                       local GProgram     _program, 
                       local String       _out, 
                       local String       _dstVar, 
                       local boolean      _bGLSL,
                       local PointerArray _parents
                       ) {

      local String varName <= getVarName();

      if(!b_init_done)
      {
         b_init_done = true;

         local String sGlobal;
         sGlobal.append(getScriptTypeName()+" "+varName+" = "+getScriptDefaultValue()+";\n");
         _module.appendGlobal(sGlobal);
      }

      _out.append(_dstVar+" = "+varName+";\n");
   }
 
}
