// ----
// ---- file   : watchfile.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL Edit" application.
// ----
// ---- created: 18Jun2020
// ---- changed: 19Jun2020, 20Jun2020, 22Jun2020, 26Jun2020, 27Jun2020
// ----
// ----
// ----
module MWatchFile;

use namespace ui;
use namespace gledit;


// <class.png>
class WatchFile {
   String project_path_name;
   String native_path_name;
   String last_buf;

   public method init(String _pathName) {
      project_path_name = Utils.ToProjectPathName(_pathName);
      native_path_name <= Utils.ToNativePathName(_pathName);

      last_buf.loadLocal(native_path_name, true/*bRemoveCR*/);
   }

   public method hasChanged() : boolean {
      // (todo) read dir and check timestamp first
      String buf;
      if(buf.loadLocal(native_path_name, true/*bRemoveCR*/))
      {
         if(buf.length > 1)
         {
            if(buf != last_buf)
            {
               trace "[dbg] WatchFile::hasChanged: native=\""+native_path_name+"\" project=\""+project_path_name+"\"";
               last_buf = buf;
               return true;
            }
         }
      }
      return false;
   }
   
}


// <class.png>
class WatchFileList {
   WatchFile *files[];

   // <method_add.png>
   public method addToWatchList(String _pathName) {
      WatchFile *wf;
      local String prjPathName <= Utils.ToProjectPathName(_pathName);
      trace "[dbg] WatchFileLiest:addToWatchList(\""+prjPathName+"\")";
      foreach wf in files
      {
         if(wf.project_path_name == prjPathName)
         {
            wf.native_path_name = Utils.ToNativePathName(prjPathName);
            return;
         }
      }
      wf <= new WatchFile;
      wf.init(deref prjPathName);
      files.add(#(deref wf));
   }
   
   // <method.png>
   public method checkNext() : String {
      // return next project_path_name that changed contents, or null
      WatchFile *wf;
      foreach wf in files
      {
         // trace "xxx check wf.path_name=\""+wf.path_name+"\"";
         if(wf.hasChanged())
            return wf.project_path_name;
      }
      return null;
   }

   // <method_remove.png>
   public method unwatchAll() {
      files.free();
   }

   // <method_remove.png>
   public method removeFromWatchList(String _pathName) {
      WatchFile *wf;
      foreach wf in files
      {
         if(wf.project_path_name == _pathName)
         {
            files.remove(wf);
            return;
         }
      }
   }
}
