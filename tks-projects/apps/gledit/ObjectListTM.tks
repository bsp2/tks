// ----
// ---- file   : ObjectListTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL Edit" application.
// ----
// ---- created: 13Jul2020
// ---- changed: 06Feb2025
// ----
// ----
// ----

module MObjectListTM;


use namespace ui;
use namespace gledit;


class ObjectListTM : TableModel {

   define int COL_TYPE = 0;
   define int COL_ID   = 1;
   define int COL_PATH = 2;

   PointerArray *flt_objects;
   PointerArray *flt_object_paths;

   protected PNGIcon icon_tex;


   public virtual getNumColumns() : int {
      return 3;
   }

   public virtual getColumnCaption(int _col) : String {
      return ["Type", "Id", "Path"] [_col];
   }

   public virtual getNumRows() : int {
      return flt_objects.numElements;
   }

   public virtual getCellCaption(int _col, _row) : String {

      GObject obj <= flt_objects.get(_row);
      if(null != obj)
      {
         String objPath <= flt_object_paths.get(_row);

         switch(_col)
         {
            case COL_TYPE:
               return obj.yacMetaClassName();

            case COL_ID:
               return obj.getId();

            case COL_PATH:
               return objPath;
         }
      }
   }

   public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
      Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);

      lb.setIconPlacement(Layout.BOTTOM);
      lb.setForegroundTint(0);

      local GTexture *gtexture;

      GObject obj <= flt_objects.get(_row);
      if(obj instanceof GTexture)
      {
         gtexture <= obj;
      }
      else if(obj instanceof GFBO)
      {
         GFBO gfbo <= obj;
         gtexture <= gfbo.getFirstConnectedTexture();
      }

      if(null != gtexture)
      {
         // trace "xxx row="+_row+" obj="+#(obj)+" id="+gtexture.id+" tex=("+gtexture.getTextureWidth()+"; "+gtexture.getTextureHeight()+") bpp="+gtexture.getTextureBytesPerPixel();
         // (note) gtexture.getTextureWidth() == 0 == auto  => query Texture object instead
         Texture tex <= gtexture.tex;
         int texW = tex.sx;
         int texH = tex.sy;
         if(GTexture.PROC_NONE == gtexture.proc_type && 0 == texW)
         {
            // unavailable
            // trace "xxx unavail, id="+gtexture.id+" texW="+texW;
            lb.setForegroundTint(#c0FF0000);
         }
         if(COL_ID == _col)
         {
            lb.setIconScaleX(64.0 / texW);
            lb.setIconScaleY(64.0 / texH);
            lb.setIconPadding4f(0,0,0,0);
            lb.setIconPlacement(Layout.RIGHT|Layout.BOTTOM);
            icon_tex.visitIconTexture(gtexture.tex);
            icon_tex.setEnableFlipY(true);
            lb.setIcon(icon_tex);
         }

      }
      else
      {
         lb.setIcon(null);
      }

      // // lb.setFontByName("big2");

      // // ObjectTypesTMEntry en <= entries.get(_row);

      // // if(null != en)
      // // {
      // //    if(COL_NAME == _col)
      // //    {
      // //       // lb.setIcon(UI.GetIcon("arr2x_r"));
      // //       lb.setInnerPadLeft(12);
      // //    }
      // // }

      return lb;
   }

   // // public method getCellIcon(int _col, int _row) : Icon {
   // //    GObject obj <= flt_objects.get(_row);
   // //    if(null != obj)
   // //    {
   // //       if(COL_ID == _col)
   // //       {
   // //          if(obj instanceof GTexture)
   // //          {
   // //             GTexture gtexture <= obj;
   // //             icon_tex.visitIconTexture(gtexture.tex);
   // //             return icon_tex;
   // //          }
   // //       }
   // //    }
   // //    return null;
   // // }

   // // public virtual getRowHeight(int _row) : int {
   // //    int r = TableModel::getRowHeight(_row);
   // //    GObject obj <= flt_objects.get(_row);
   // //    if(null != obj)
   // //    {
   // //       if(obj instanceof GTexture)
   // //          r += 64;
   // //    }
   // //    return r;
   // // }

   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_TYPE:
            return 70;

         case COL_ID:
            return 70;

         case COL_PATH:
            return 200;
      }
   }

   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_TYPE:
            return 80;

         case COL_ID:
            return 100;

         case COL_PATH:
            return 400;
      }
   }

}
