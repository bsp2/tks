// ----
// ---- file   : Page.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2012-2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 13Nov2012, 04Jan2013, 06Jan2013, 25Mar2013, 19Apr2013, 11Aug2014, 12Aug2014
// ----          15Aug2014, 18Aug2014, 20Aug2014, 09Sep2014, 14Sep2014, 19Sep2014, 21Sep2014
// ----          27Sep2014, 29Sep2014, 21Feb2015, 23Feb2015, 06Mar2015, 29Sep2015, 12Oct2015
// ----          12Nov2015, 09Feb2017, 30Jul2017, 02Dec2018, 11Jan2019, 02Mar2019, 29Aug2019
// ----          12Jun2020
// ----
// ----
// ----

module MPage;

use namespace ui;
use namespace gledit;


// <class.png>
abstract class Page : XMLForm, ActionProvider, CmdProvider {

   // // protected virtual allowCursorKeysForTabCycling() : boolean {
   // //    return false;
   // // }

   public method pageGetName() : String {
      String n <= (this).yacMetaClassName();
      return n.replace("Page", "");
   }

   public method pageIsSub() : boolean {
      // Return true if current page should only be left temporarily.
      //  When this page is left, editing continues on the current page.
      return false;
   }

   public method pageEnter() {
   }

   public method isPageLocked() : boolean {
      return false;
   }

   public method pageLeave() {
   }

   public method pageLeaveSub() {
      // Leave temporarily (e.g. to edit MMC), editing continues when sub page returns
      pageLeave();
   }

   public method pageGetParent() : int {
      return -1;
   }

   public method pageIsModal() : boolean {
      return false;
   }

   public method pageFocusDefault() {
   }

   public method pageForceKbdFocusSelMode() : boolean {
      // true=temporarily enabled kbdfocus selection mode for cursor keys
      return false;
   }

   public method pageHandleAutoFocusKey(Key _k) : boolean {
      return false;
   }

   public method pageSceneChanged(int _groupIdx, boolean _bMulti) : boolean {
      return false;
   }

   // <ui_timer.png>
   public method pageHandleReplayTimer() {
   }

   public method pageHandleMuteSoloChanged() {
   }

   public method pageIsCurrent() {
      return (@(root_form.getCurrentPage()) == @(this));
   }

   // <ui_kbd.png>
   public virtual getTabCycleOverrides() : PointerArray {
      return getTabCycleOverridesDef();
   }

}
