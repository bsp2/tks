// ----
// ---- file   : PageNavBar.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2019-2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----          also see: <http://wolzow.mindworks.ee/analog/m1k-midi-spec.htm>
// ----
// ---- created: 29Jan2019
// ---- changed: 03Aug2019, 12Jun2020
// ----
// ----
// ----
module MPageNavBar;

use namespace ui;
use namespace gledit;


// <class.png>
class PageNavBar : Control {
   protected IntArray page_ids;
   protected Panel *pn_buttons;
   protected PointerArray buttons;


   // <init.png>
   public method initPageNavBarOnly() {
      setLayout(SuperBorderLayout);

      local Panel p;
      p.initPanel();
      p.setPadBottom(2);
      pn_buttons <= p;

      addPage(RootForm.PAGE_START,         "glEdit",
              "Show Start Page\n\n (note) lctrl-NUM 1"
              );

      addLayer(deref p, Layout.LEFT);

      if(GConfig.lnf_idx == LookAndFeel.IDX_MONO)
         recursiveSetLookAndFeel(LookAndFeel.MONO);
      else
         recursiveSetLookAndFeel(LookAndFeel.DARK);
      recursiveOnLookAndFeelChanged();
   }

   // <method_add.png>
   protected method addPage(int _pageId, String _caption, String _toolTipCaption) {
      local Button bt;
      bt.initButton();
      bt.setCaption(_caption);
      bt.setToolTipCaption(_toolTipCaption);
      bt.setAlignment(Layout.LEFT);
      bt.setPadding4f(0, 4, 0, 4);
      bt.setLayerStyle(LookAndFeel.STYLE_FLAT);
      pn_buttons.addLayer(deref bt, Layout.RIGHT);
      buttons.add(bt);
      page_ids.add(_pageId);
   }

   // <ui_render.png>
   public virtual onDraw() {
      UIRenderer.DrawFilledRectangle(0, 0, getSizeX(), getSizeY()-3, lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG));
   }

   // <ui_render.png>
   public virtual onDrawPost() {
      Control::onDrawPost();

      UIRenderer.DrawLine(0, getSizeY()-3,
                          getSizeX(), getSizeY()-3,
                          lnf_colors.get(LookAndFeel.COLOR_BORDER_DIMLIGHT)
                          );
      // UIRenderer.DrawLine(0, getSizeY()-4,
      //                     getSizeX(), getSizeY()-4,
      //                     lnf_colors.get(LookAndFeel.COLOR_BORDER_NORMAL)
      //                     );
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {

      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      // trace "xxx PageNavBar::consumeAction: acName=\""+acName+"\".";

      if(!root_form.isCurrentPageModal())
      {
         int idx = buttons.indexOfPointer(ap, 0);
         if(-1 != idx)
         {
            int pageId = page_ids.get(idx);

            if(pageId == root_form.getCurrentPageNr())
               pageId = RootForm.PAGE_START;
            else
            {
               root_form.showPage(pageId, true/*bHistory*/);
            }
         }
      }
   }

   // <ui_xfm.png>
   public method beginXFMTag(AbstractXMLForm _form, HashTable _attributes) : boolean {
      initControl();

      if(Layer::beginXFMTag(_form, _attributes))
      {
         String atname, atval;
         StringArray atsplit;
         foreach atname in _attributes
         {
            atval<=_attributes[atname];
            switch(atname)
            {
            }
         }

         initPageNavBarOnly();
      }
      return true;
   }
}
