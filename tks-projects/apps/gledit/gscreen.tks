// ----
// ---- file   : gscreen.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 12Jun2020
// ---- changed: 14Jun2020, 20Jun2020, 12Aug2020
// ----
// ----
// ----
module MGScreen;

use namespace ui;
use namespace gledit;


// <class.png>
class GScreen : GObject {
   int   width;
   int   height;
   int   z_bits;
   int   s_bits;


   // <method_new.png>
   static New() : GScreen {
      local GScreen r;
      r.init();
      return deref r;
   }

   // <method_init.png>
   public virtual init() {
      GObject::init();

      width  = 800;
      height = 600;
      
      z_bits = 16;
      s_bits = 8;

      setId("screen1");
   }

   // <save.png>
   public virtual saveStateObject(local Stream ofs, local GConnectionWriter connectionWriter) {
      GObject::saveStateObject(ofs, connectionWriter);

      // Version
      ofs.i16 = 1;

      // Width
      ofs.i16 = width;

      // Height
      ofs.i16 = height;

      // Z Bits
      ofs.i8 = z_bits;

      // Stencil Bits
      ofs.i8 = s_bits;
   }

   // <load.png>
   public virtual loadStateObject(local Stream ifs) : boolean {
      // (note) base class object info is loaded by LoadStateObject

      // Version
      short ver = ifs.u16;

      if(1 <= ver <= 1)
      {
         // Width
         width = ifs.u16;

         // Height
         height = ifs.u16;

         // Z Bits
         z_bits = ifs.u8;

         // Stencil Bits
         s_bits = ifs.u8;

         // Succeeded
         return true;
      }
      else
      {
         trace "[---] GConstant::loadStateObject: invalid version "+ver+", this="+#(this)+" path="+getObjectPath();
      }
      return false;
   }
      
   // <method.png>
   public method emitModule(GModule _module) {
      float vx = 0;
      float vy = 0;
      float pw = current_project.getPreviewWidth();
      float ph = current_project.getPreviewHeight();
      float sw = current_project.getScreenWidth();
      float sh = current_project.getScreenHeight();
      float vw;
      float vh;

      trace "[dbg] Preview pwh=("+pw+";"+ph+")";
      trace "[dbg] Screen swh=("+sw+";"+sh+")";

      vw = sw;
      vh = sh;

      if(vw > pw)
      {
         vh *= pw / vw;
         vw = pw;
      }
      if(vh > ph)
      {
         vw *= ph / vh;
         vh  = ph;
      }

      vx = (pw - vw) * 0.5;
      vy = (ph - vh) * 0.5;

      // trace "xxx view vsz=("+vw+";"+vh+") vpos=("+vx+";"+vy+")";

      local Point2f abspos;
      root_form.pg_start.preview.calcAbsolutePosition(abspos);
      abspos.x = abspos.x + vx;
      abspos.y = Viewport.height - (abspos.y + vy + vh);

      current_project.cur_viewport_x = abspos.x;
      current_project.cur_viewport_y = abspos.y;
      current_project.cur_viewport_w = vw;
      current_project.cur_viewport_h = vh;

      // trace "xxx cur_viewport="+current_project.cur_viewport_x+";"+current_project.cur_viewport_y+";"+current_project.cur_viewport_w+";"+current_project.cur_viewport_h;

      _module.appendDrawPre(
         "glEnable(GL_SCISSOR_TEST);\n"
         // "glScissor(0,0, Viewport.width, Viewport.height); \n"
         // "glClearColor(0.2,0.2,0.2,1.0);\n"
         // "glClear(GL_COLOR_BUFFER_BIT);\n"
         "glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);\n"
         "glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);\n"
         // // "glViewport("+abspos.x+", "+abspos.y+", "+vw+", "+vh+");\n"
         // // "glScissor("+abspos.x+", "+abspos.y+", "+vw+", "+vh+");\n"
         "glClearColor(0.3,0.3,0.3,1.0);\n"
         "glClear(GL_COLOR_BUFFER_BIT);\n"
                            );
   }

}
