// ----
// ---- file   : gparamchoiceiotype.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 27Jun2020
// ---- changed: 09Jul2020, 09Aug2020
// ----
// ----
// ----
module MGParamChoiceIOType;

use namespace ui;
use namespace gledit;


// <class.png>
class GParamChoiceIOType : GParamChoice {

   static StringArray io_type_names = [
      "int",    // TYPE_INT   
      "ivec2",  // TYPE_IVEC2 
      "ivec3",  // TYPE_IVEC3 
      "ivec4",  // TYPE_IVEC4 
      "float",  // TYPE_FLOAT 
      "vec2",   // TYPE_VEC2  
      "vec3",   // TYPE_VEC3  
      "vec4",   // TYPE_VEC4  
      "mat2",   // TYPE_MAT2  
      "mat3",   // TYPE_MAT3  
      "mat4",   // TYPE_MAT4
      "bool",   // TYPE_BOOL
      "fxn",    // TYPE_FUNCTION
      "cam",    // TYPE_ORBITCAMVIEW
                                       ];


   // <method_new.png>
   static New(String _id, String _caption, int _defIOType) {
      local GParamChoiceIOType p;
      p.initFromIOType(_id, _caption, _defIOType);
      return deref p;
   }

   // <method_init.png>
   public method initFromIOType(String _id, String _caption, int _defIOType) {
      init(_id, _caption, IOTypeToValue(_defIOType), io_type_names);
   }

   // <method.png>
   public static IOTypeToValue(int _ioType) {
      switch(_ioType)
      {
         default:
         case TYPE_INT:           return  0;
         case TYPE_IVEC2:         return  1;
         case TYPE_IVEC3:         return  2;
         case TYPE_IVEC4:         return  3;
         case TYPE_FLOAT:         return  4;
         case TYPE_VEC2:          return  5;
         case TYPE_VEC3:          return  6;
         case TYPE_VEC4:          return  7;
         case TYPE_MAT2:          return  8;
         case TYPE_MAT3:          return  9;
         case TYPE_MAT4:          return 10;
         case TYPE_BOOL:          return 11;
         case TYPE_FUNCTION:      return 12;
         case TYPE_ORBITCAMVIEW:  return 13;
      }
   }

   // <method.png>
   public static ValueToIOType(int _ioType) : int {
      switch(_ioType)
      {
         default:
         case  0: return TYPE_INT;
         case  1: return TYPE_IVEC2;
         case  2: return TYPE_IVEC3;
         case  3: return TYPE_IVEC4;
         case  4: return TYPE_FLOAT;
         case  5: return TYPE_VEC2;
         case  6: return TYPE_VEC3;
         case  7: return TYPE_VEC4;
         case  8: return TYPE_MAT2;
         case  9: return TYPE_MAT3;
         case 10: return TYPE_MAT4;
         case 11: return TYPE_BOOL;
         case 12: return TYPE_FUNCTION;
         case 13: return TYPE_ORBITCAMVIEW;
      }
   }

   // <method.png>
   public method setValueByIOType(int _ioType) {
      value = IOTypeToValue(_ioType);
   }

   // <method.png>
   public method getIOTypeFromValue() : int {
      return ValueToIOType(value);
   }

   // <save.png>
   public virtual saveStateParam(local Stream ofs) {
      GParam::saveStateParam(ofs);

      // Version
      ofs.i16 = 1;

      // Value
      ofs.i32 = value;
   }

   // <load.png>
   public virtual loadStateParam(local Stream ifs) : boolean {
      // (note) base class param info is loaded by LoadStateParam

      // Version
      short ver = ifs.u16;

      if(1 <= ver <= 1)
      {
         // Value
         value = ifs.i32;

         // Succeeded
         return true;
      }
      else
      {
         trace "[---] GParamChoiceIOType::loadStateParam: invalid version "+ver;
      }
      return false;
   }
   
}
