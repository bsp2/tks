// ----
// ---- file   : RootForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL Edit" application.
// ----
// ---- created: 12Jun2020
// ---- changed: 14Jun2020, 13Aug2020, 04Feb2025, 09Feb2025, 18Jul2025, 16Sep2025
// ----
// ----
// ----

module MRootForm;

use namespace ui;
use namespace gledit;


// <class.png>
class RootForm : XMLForm, ActionProvider, StatusBarListener {

   define String EV_SYN_KEY;

   // main pages:
   define int PAGE_NONE               =  0;
   define int PAGE_START              =  1;

   define int NUM_PAGES               =  2;

   define String TA_REPLAY_TIMER;
   define String TA_EXIT        = "onExitTimer";
   define String TA_REPLAYTIME  = "onReplayTimeTimer";
   define String TA_REDRAW_ALL  = "onRedrawAllTimer";

   protected TimerAction *ta_exit;
   protected TimerAction *ta_redraw_all;
   protected TimerAction *ta_replaytime;         // used to update min:sec display every second

   define int REDRAW_TIMEOUT_SHORT  = 33;
   define int REDRAW_TIMEOUT_MEDIUM = 100;
   define int REDRAW_TIMEOUT_LONG   = 500;

   protected TimerAction *ta_replay_timer;

   protected int autosave_replay_timer_count;

   // View splits
   protected LayerSwitch *sw_views; // view switch

   // Status bar area
   protected PageNavBar *navbar;
   protected Button     *bt_back;
   protected StatusBar  *sb_status;
   protected ComboBoxPopup *cmdautocomplete_popup;
   protected StringArray   *cmdautocomplete_options;
   protected int            cmdautocomplete_word_idx;
   protected ComboBoxPopup *cmdhistory_popup;
   protected ComboBoxPopup  *cmdactions_popup;

   protected OpaquePanel *pn_bg;

   public    Page                   *pg_none;
   public    PageStart              *pg_start;

   define int PAGE_HISTORY_SIZE = 8;
   protected IntArray page_history;
   protected int      current_page;
   protected boolean  b_current_page_allow_history;
   protected int      page_history_idx;

   protected IntArray page_subhistory;


   PointerArray syn_key_queue;

   protected int force_kbdfocusselmode_usecount;

   protected boolean b_fix_layout;

   protected boolean b_force_show_bpm;  // true=show BPM instead of time (while replay is running)

   define int CMD_HISTORY_SIZE = 32;
   protected StringArray cmd_history;

   protected StringArray cmd_actions; // valid while default actions popup is shown

   protected int last_status_message_ms;

   protected boolean b_queued_read_pixel;

   protected boolean b_shader_version_determined;


   // <ui_init.png>
   public method init() : boolean {

      initTimers();

      autoResolveIds(this);

      sb_status.setStatusBarListener(this);

      if(initPages())
      {
         // // lnf_colors[LookAndFeel.COLOR_TABFOCUS_TEXT_BORDER] = #ff00ffff;

         // // if(UI.PreferMonoIcons())
         // // {
         // //    bt_transport_play.setIcon(UI.GetIcon("transport_play_mono"));
         // //    bt_transport_stop.setIcon(UI.GetIcon("stop_mono"));
         // // }

         return true;
      }
      else
      {
         return false;
      }
   }

   public method initTimers() {
      ta_replay_timer    <= TimerAction.New(TA_REPLAY_TIMER,   this, 30);
      ta_replaytime      <= TimerAction.New(TA_REPLAYTIME,     this, 50);
      ta_replaytime.setDefaultTicks(50/*def*/, 50/*short*/, 250/*medium*/, 250/*long*/);
      ta_redraw_all      <= TimerAction.New(TA_REDRAW_ALL,     this, REDRAW_TIMEOUT_MEDIUM); // dynamic timeout

      ta_replaytime.scheduleLong();
   }

   protected method initPages() : boolean {
      boolean r = true;

      page_history.alloc(PAGE_HISTORY_SIZE);
      page_history_idx = 0;

      // r = r && pg_none.init();
      r = r && pg_start.init();

      if(r)
      {
         showPage(PAGE_NONE, true/*bAllowHistory*/);
      }

      return r;
   }

   // <ui.png>
   public method showKbdFocusInfo() {

      Layer cfocus <= UI.GetKeyboardFocus();

      if(null != cfocus)
      {
         String idOrName = cfocus.layer_name;
         String fm;

         if(idOrName.isBlank())
         {
            // Dev fallback, each widget should have a name!
            fm = "Focus: "+cfocus.layer_id;
         }
         else
         {
            // Prefix widget type (bt, cb, tv, cm, tf, ..)
            fm = "Focus<"+(cfocus.layer_id.substring(0, cfocus.layer_id.indexOf("_", 0))) + ">: "+idOrName;
         }


         if(cfocus instanceof CheckBox)
         {
            CheckBox cb <= cfocus;
            fm.append(cb.isSelected() ? " (checked)" : " (unchecked)");
         }
         else if(cfocus instanceof ComboBox)
         {
            ComboBox cm <= cfocus;
            fm.append(" ("+cm.getSelectedOptionName()+")");
         }
         else if(cfocus instanceof TextField) // also FloatParam
         {
            TextField tf <= cfocus;
            fm.append(" ("+tf.getText()+")");
         }
         else if(cfocus instanceof TableView)
         {
            TableView tv <= cfocus;
            fm.append(" ("+(tv.getCursorRow()+1)+"/"+tv.getNumRows()+")");
         }
         else if(cfocus instanceof Label)
         {
            Label lb <= cfocus; // also Button

            if(cfocus.layer_name.isBlank())
            {
               String cap <= lb.getCaption();
               if(cap.isBlank())
               {
                  cap <= lb.getToolTipCaption();
               }
               fm.append(" ("+cap+")");
            }
         }
         // // else if(cfocus instanceof TabbedView)
         // // {
         // //    TabbedView tab <= cfocus;
         // //    fm.append(" ("+tab.getActiveViewCaption()+")");
         // // }
         else if(cfocus instanceof TabSwitch)
         {
            TabSwitch ts <= cfocus;
            fm.append(" ("+ts.getActiveViewCaption()+")");
         }

         fm.append(".");

         Global.Print(fm);
      }
   }

   // <ui_kbd.png>
   public method queueSynKey(int _code, int _mod, boolean _bPressed) {
      local Key k;

      k.mod = _mod;

      if(_bPressed)
      {
         k.pressed = _code;
      }
      else
      {
         k.released = _code;
      }

      syn_key_queue.add(#(deref k));

      Events.SendSynKey();
   }

   // <ui_kbd.png>
   public method queueSynKeyForceKbdSelMode(int _code, int _mod, boolean _bPressed) {

      Page pg <= getCurrentPage();

      if(pg.pageForceKbdFocusSelMode())
      {
         if(_bPressed)
         {
            if(0 == force_kbdfocusselmode_usecount++)
            {
               // UI.SetKbdFocusSelectionModeBehaviour(true);
               queueSynKey(319+1000/*temp hold*/, 0, true);
            }

            queueSynKey(_code, _mod, true);
         }
         else
         {
            queueSynKey(_code, _mod, false);

            if(0 == --force_kbdfocusselmode_usecount)
            {
               queueSynKey(319+1000, 0, false);
               // UI.SetKbdFocusSelectionModeBehaviour(GConfig.b_kbdfocusselectionmode_behaviour);
            }
         }
      }
      else
      {
         queueSynKey(_code, _mod, _bPressed);
      }
   }

   // <ui_kbd.png>
   public method queueSynKeyTyped(int _code, int _mod) {
      queueSynKey(_code, _mod, true);
      queueSynKey(_code, _mod, false);
   }

   // <ui_kbd.png>
   public method processSynKeyQueue() {
      Key *k;

      foreach k in syn_key_queue
      {
         UI.OnKeyboard(k);
      }

      syn_key_queue.free();
   }

   // <ui_midi.png>
   public method tryDialogGlobalEvent(String _targetName) : boolean {

      // FloatingLayer *fl;

      // foreach fl in UI.floating_layers
      // {
      //    if(fl.isModal())
      //    {
      //       if(fl instanceof MMTListener)
      //       {
      //          MMTListener mmtl <= fl;

      //          if(mmtl.mmtHandleGlobalEvent(_targetName))
      //          {
      //             return true;
      //          }
      //       }
      //    }
      // }

      return false;
   }

   // <ui.png>
   public method isDialogActive() : boolean {

      return (0 != UI.GetNumModalFloatingLayers());
   }

   // <ui_page.png>
   public method getCurrentPage() : Page {
      return sw_views.getChildByIdx(current_page);
   }

   // <ui_page.png>
   public method getPageByIdx(int _idx) : Page {
      return sw_views.getChildByIdx(_idx);
   }

   // <ui_page.png>
   public method getCurrentPageNr() : int {
      return current_page;
   }

   // <ui_page.png>
   public method isCurrentPageModal() : boolean {
      if(0 == UI.GetNumModalFloatingLayers())
      {
         Page pg <= getCurrentPage();

         if(pg.pageIsModal())
         {
            Global.Print("Cannot change page, dialog sequence active.");

            return true;
         }
         else
         {
            return false;
         }
      }
      else
      {
         Global.Print("Cannot change page because of active dialog.");

         return true;
      }
   }

   // <ui_page.png>
   protected method getHistoryPage(int _idx) : int {
      if(_idx < 0)
         _idx += PAGE_HISTORY_SIZE;

      return page_history.get(_idx);
   }

   // <ui_page.png>
   protected method deleteHistoryPage(int _idx) {
      if(_idx < 0)
         _idx += PAGE_HISTORY_SIZE;
      else if(_idx >= PAGE_HISTORY_SIZE)
         _idx -= PAGE_HISTORY_SIZE;
      page_history.delete(_idx);

      if(page_history_idx >= _idx)
      {
         page_history_idx--;
         if(page_history_idx < 0)
            page_history_idx += page_history.numElements;
      }
   }

   // <method_get.png>
   public method isCurrentPageLocked() : boolean {
      Page pg <= getCurrentPage();

      return pg.isPageLocked();
   }

   // <ui_page.png>
   public method clearPageHistory() {
      // Called when Start is shown (via pageEnter())
      page_history.empty();
      page_history.add(PAGE_START);
      page_history_idx = 0;
      page_subhistory.empty();
   }

   // <api.png>
   public method showPage(int _idx, boolean _bAllowHistory) {

      trace "[dbg] RootForm::showPage("+_idx+"), current_page="+current_page;

      if(_idx == current_page)
         return;

      ta_replay_timer.schedule();

      // trace "xxx -----------------------------";
      // Global.Debug("RootForm::showPage: idx="+_idx+" bAllowHistory="+_bAllowHistory);
      // trace "xxx beg showPage: history="+page_history.string;
      // trace "xxx beg showPage: history_idx="+page_history_idx;

      Page pg <= getCurrentPage();
      Page newPg <= getPageByIdx(_idx);

      if(null == newPg)
         return; // should not happen

      if(pg.pageIsSub())
      {
         // Returning from temporary page, don't return page to history, again.
         _bAllowHistory = false;
      }

      if(_bAllowHistory)
      {
         if(_bAllowHistory)
         {
            if(PAGE_HISTORY_SIZE == page_history.numElements)
            {
               deleteHistoryPage(page_history_idx + PAGE_HISTORY_SIZE - 1);
               ///deleteHistoryPage(page_history_idx + 1);
            }

            // Push new page onto stack
            page_history.insert(page_history_idx, _idx);
         }
      }

      if(newPg.pageIsSub())
      {
         // Leave temporarily, e.g. don't unset node ref. on PageNode so editing can continue
         pg.pageLeaveSub();
      }
      else
      {
         pg.pageLeave();
      }

      current_page = _idx;

      b_current_page_allow_history = _bAllowHistory;

      sw_views.switchToLayerNr(_idx);

      pg <= getCurrentPage();

      Global.PrintHead("Show page \""+pg.pageGetName()+"\".");

      pg.pageEnter();
      pg.pageFocusDefault();

      UI.RedrawAll();

      // trace "xxx end showPage: history="+page_history.string;
      // trace "xxx end showPage: history_idx="+page_history_idx;
   }

   // <ui_page.png>
   public method showPageSub(int _pageNr, boolean _bQuiet) {
      // must only be called for sub pages

      page_subhistory.add(current_page);

      Page pg <= getCurrentPage();

      pg.pageLeaveSub();

      current_page = _pageNr;

      sw_views.switchToLayerNr(_pageNr);

      pg <= getCurrentPage();

      if(!_bQuiet)
      {
         Global.PrintHead("Show sub-page \""+pg.pageGetName()+"\".");
      }

      pg.pageEnter();
      pg.pageFocusDefault();

      UI.RedrawAll();
   }

   // <ui_page.png>
   public method showPageSubPrev() : boolean {
      // Leave sub-page and return to previous page

      if(!isDialogActive())
      {
         if(page_subhistory.numElements > 0)
         {
            Page pg <= getCurrentPage();

            pg.pageLeave();

            current_page = page_subhistory.last;
            page_subhistory.numElements = page_subhistory.numElements - 1;

            sw_views.switchToLayerNr(current_page);

            pg <= getCurrentPage();

            Global.PrintHead("Return to page \""+pg.pageGetName()+"\".");

            pg.pageEnter();
            pg.pageFocusDefault();

            UI.RedrawAll();

            return true;
         }
         else
         {
            trace "[!!!] showPageSubPrev: internal error: sub history is empty";
         }
      }
      return false;
   }

   // <ui_page.png>
   public method showPageNav(int _pageNr) {
      if(!isCurrentPageModal())
      {
         showPage(_pageNr, true/*bAllowHistory*/);
      }
   }

   // <api.png>
   public method showPagePrev() {

      if(page_subhistory.numElements > 0)
      {
         return showPageSubPrev();
      }

      if(!isDialogActive())
      {
         // trace "xxx -----------------------------";
         // trace "xxx beg showPagePrev: history="+page_history.string;
         // trace "xxx beg showPagePrev: history_idx="+page_history_idx;

         int pgNr;

         if(b_current_page_allow_history)
         {
            // if( (page_history_idx + 1) < page_history.numElements )
            // {
            page_history_idx = (page_history_idx + 1) % page_history.numElements;
         }

         pgNr = page_history.get(page_history_idx);

         Page ppg <= sw_views.getChildByIdx(pgNr);

         if(null != ppg)
         {
            Page pg <= getCurrentPage();

            pg.pageLeave();

            current_page = pgNr;
            b_current_page_allow_history = true;

            sw_views.switchToLayerNr(pgNr);

            Global.PrintHead("Show previous page \""+ppg.pageGetName()+"\".");

            ppg.pageEnter();
            ppg.pageFocusDefault();

            redraw();

            // trace "xxx end showPagePrev: history="+page_history.string;
            // trace "xxx end showPagePrev: history_idx="+page_history_idx;
         }
      }
   }

   // <api.png>
   public method showPageNext() {

      if(!isCurrentPageModal())
      {
         // trace "xxx -----------------------------";
         // trace "xxx beg showPageNext: history="+page_history.string;
         // trace "xxx beg showPageNext: history_idx="+page_history_idx;

         page_history_idx--;
         if(page_history_idx < 0)
            page_history_idx += page_history.numElements;

         if(1)
         {
            int pgNr = page_history.get(page_history_idx);

            Page ppg <= sw_views.getChildByIdx(pgNr);

            if(null != ppg)
            {
               Page pg <= getCurrentPage();

               pg.pageLeave();

               current_page = pgNr;
               b_current_page_allow_history = true;

               sw_views.switchToLayerNr(pgNr);

               Global.PrintHead("Show next page \""+ppg.pageGetName()+"\".");

               ppg.pageEnter();
               ppg.pageFocusDefault();

               redraw();

               // trace "xxx end showPageNext: history="+page_history.string;
               // trace "xxx end showPageNext: history_idx="+page_history_idx;
            }
         }
      }
   }

   // <api.png>
   public method showPageParent() {

      Global.Debug("RootForm::showPageParent: page_subhistory="+#(page_subhistory));

      if(page_subhistory.numElements > 0)
      {
         return showPageSubPrev();
      }

      if(!isDialogActive())
      {
         Page pg <= getCurrentPage();

         int parIdx = pg.pageGetParent();

         // trace "xxx showPageParent: pg="+#(pg)+" parIdx="+parIdx;

         if(-1 != parIdx)
         {
            showPage(parIdx, true/*bAllowHistory*/);
         }
      }
   }

   // <api.png>
   public method showPageParentOrPrev() {

      if(!isDialogActive())
      {
         Page pg <= getCurrentPage();

         if(pg.pageIsSub())
         {
            root_form.showPageSubPrev();
         }
         else
         {
            int parIdx = pg.pageGetParent();

            if(-1 != parIdx)
            {
               showPage(parIdx, true/*bAllowHistory*/);
            }
            else
            {
               showPagePrev();
            }
         }
      }
   }

   // <ui_page.png>
   public method handlePageFocusDefault() {
      Page pg <= getCurrentPage();

      pg.pageFocusDefault();
   }

   // <log.png>
   public method isLastStatusMessageOlderThan(int _ms) : boolean {
      return ((milliSeconds() - last_status_message_ms) > _ms);
   }

   // <log.png>
   public method pushStatusMessage(String  _msg,
                                   int     _millisec,
                                   int     _fg,
                                   int     _bg,
                                   boolean _bHead
                                   ) {
      last_status_message_ms = milliSeconds();
      sb_status.pushMessage(_msg, _millisec, _fg, _bg, _bHead);
   }

   // <log.png>
   public method endStatusMessageLock() {
      sb_status.endMessageLock();
   }

   // <log.png>
   public method printLastHeadMessage() {
      sb_status.repushLastHeadMessage();
   }

   // <ui_handle.png>
   public method handleInitNewProject() {

      // updateReplayTimeLabelTo(0, false/*bForceUpdate*/);
   }


   // <exit.png>
   public method beginExit() {

      // Quit main message loop
      UI.Stop();
   }

   // <ui_render.png>
   public method queueRedrawAll() {
      // Calls renderAndRedrawAll() when timer expires
      ta_redraw_all.scheduleShort();
   }

   // <ui_timer.png>
   protected method handleExitTimerExpired() {
      UI.Stop();
   }

   // <save.png>
   public method saveScreenShot() {
      local String pathName <= program_directory+"/images/screenshots/screenshot_"+Utils.GetCurrentDateTimeStringNumeric()+".png";
      if(UI.SaveScreenShotPNG(pathName, 0/*offx*/, 0/*offy*/, 0/*w=vp*/, 0/*h=vp*/))
      {
         Global.Success("Wrote screenshot to \""+pathName+"\"");
      }
      else
      {
         Global.Error("Failed to write screenshot to \""+pathName+"\"");
      }
   }

   // <callback.png>
   protected virtual onStatusBarMessageChanged(String _msg) {
   }

   // <ui_init.png>
   public virtual onOpen() {

      // PointerArray classes <= TKS.findClassesByPrefix(null/*nsp*/, "Node");
      // Object clazz;
      // foreach clazz in classes
      // {
      //    if(clazz instanceof Node)
      //    {
      //       Value ret;
      //       if(TKS.evalMethodByName(clazz, "nodeGetEditor", null/*args*/, ret))
      //       {
      //          NodeEditor editor <= ret.objectValue;
      //          if(editor instanceof NodeEditor)
      //          {
      //             editor.onOpen();
      //          }
      //       }
      //    }
      // }

      // tex_scanline_pattern.flags = TEX_MODULATE | TEX_REPEAT_S | TEX_REPEAT_T | TEX_ALPHA;
      // tex_scanline_pattern.loadImage("scanline_pattern_1.png", 0, 0, 1);
      // tex_scanline_pattern.unload();
      // tex_scanline_pattern.upload();
   }

   // <ui.png>
   public virtual onCycleAppLookAndFeel() {
      setAppLookAndFeelByIdx( (GConfig.lnf_idx + 1) % 2 );
   }

   // <ui.png>
   public method setAppLookAndFeelByIdx(int _idx) {
      GConfig.lnf_idx = _idx;
      switch(GConfig.lnf_idx)
      {
         default:
         case LookAndFeel.IDX_LIGHT:
            app_lnf <= Global.app_lnf_light;
            break;

         case LookAndFeel.IDX_DARK:
            app_lnf <= Global.app_lnf_dark;
            break;

         case LookAndFeel.IDX_MONO:
            app_lnf <= Global.app_lnf_mono;
            break;
      }

      // UI.CycleLookAndFeel();
      UI.SetLookAndFeelResetCustomColors(app_lnf.getName());

      UI.LayoutRootLayer();  // fix Button label clipping
      Global.Print("Toggle LookAndFeel (select \""+app_lnf.getName()+"\" theme)");
   }

   // <ui.png>
   public virtual onLookAndFeelChanged() {
      Layer::onLookAndFeelChanged();
   }

   // <ui.png>
   public virtual onScreenShot() {
      // called when lalt-PRINT/SysBrk is pressed
         // case VKEY_F1:
         // // case 316:  // sysbrk  (not received)
      saveScreenShot();
   }

   // <ui_render.png>
   public virtual onDraw() {
      // Hack to fix status bar layout which slightly changes (width of message area) when window is re-focused..
      //  (todo) proper-fix this
      if(!b_fix_layout)
      {
         b_fix_layout = true;

         UI.LayoutRootLayer();
      }

      if(UIRenderer.b_glcore)
      {
         ZGLShader.SetDefaultVersion("410 core\nprecision mediump float;\n");
      }
      else if(0 && !b_shader_version_determined)
      {
         b_shader_version_determined = true;

         // (note) version-query available since GL3.x. tkopengl returns maj=2 min=1 by default.
         int glVerMaj = zglGetInteger(GL_MAJOR_VERSION);
         int glVerMin = zglGetInteger(GL_MINOR_VERSION);
         trace "[dbg] RootForm::onDraw: glVerMaj="+glVerMaj+" glVerMin="+glVerMin+" b_glcore="+UIRenderer.b_glcore;
         if(glVerMaj <= 2)
            ZGLShader.SetDefaultVersion("120 \n");
      }
   }

   // <ui_render.png>
   public virtual onDrawPost() {
      if(b_queued_read_pixel)
      {
         b_queued_read_pixel = false;
         Integer c32 = zglReadColorPixel(Mouse.x, Viewport.height - 1 -Mouse.y);
         trace "[trc] RootForm::onDrawPost: color under mouse="+c32.printf("#%08x");
         local String sColor <= c32.printf("#%08x");
         Global.Print("Pick color "+sColor);
         UI.SetClipboard(sColor);
      }
   }

   // <ui_kbd.png>
   public virtual getTabCycleOverrides() : PointerArray {
      Page pg <= getCurrentPage();
      // trace "xxx RootForm::getTabCycleOverrides pg="+#(pg);
      return pg.getTabCycleOverrides();
   }

   // <ui_kbd.png>
   public virtual onTriadKey(Key _k) : boolean {
      trace "xxx onTriadKey: _k.code="+_k.code;

      switch(_k.pressed)
      {
         // case 'x':
         //    if(0 != SysEx.audio_native_window_handle)
         //    {
         //       trace "[dbg] switch to VST host window handle="+SysEx.audio_native_window_handle+" (this hwnd="+SDL.nativeWindowHandle+")";
         //       SDL.showNativeWindow(SysEx.audio_native_window_handle);
         //    }
         //    break;
      }
   }

   // <ui_kbd.png>
   public virtual wantKeyRepeat(Key _k) : boolean {
      switch(_k.code)
      {
         // case 'b':
         //    return false;

         // case 'n':
         //    return false;

         // case 'q':
         //    return false;

         // case 'm':
         //    return false;

         // case 'p':
         //    return false;

         // case 'g':
         //    return false;
      }
      return XMLForm::wantKeyRepeat(_k);
   }

   // <ui_kbd.png>
   public method tryHandleTransportKey(Key _k) : boolean {

      switch(_k.pressed)
      {
         case VKEY_KP4:
            pg_start.seekRel(-1.0, 1.0);
            return true;

         case VKEY_KP6:
            pg_start.seekRel(1.0, 1.0);
            return true;

         case VKEY_KP1:
            pg_start.seekRel(-0.1, 0.1);
            return true;

         case VKEY_KP3:
            pg_start.seekRel(0.1, 0.1);
            return true;

         case VKEY_KP7:
            pg_start.seekRel(-1.0/60, 1.0/60);
            return true;

         case VKEY_KP9:
            pg_start.seekRel(1.0/60, 1.0/60);
            return true;

         case VKEY_KP0:
            pg_start.seekAbs(0);
            return true;

         case VKEY_KP_ENTER:
         case VKEY_SPACE:
            if(_k.modCtrl())
               pg_start.toggleSlowMotion(_k.modShift()/*bForceCycle*/);
            else
               pg_start.toggleAnimation();
            return true;

         case VKEY_KP_PLUS:
            pg_start.scaleAnimSpeed(2.0);
            return true;

         case VKEY_KP_MINUS:
            pg_start.scaleAnimSpeed(0.5);
            return true;
      }
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      // trace "[>>>] RootForm: key="+_k.name+" pressed="+_k.pressed+" mod="+_k.mod+" unicode="+_k.unicode;
      // Utils.Backtrace();
      Page *pg;

      if(_k.modShift())
      {
         switch(_k.pressed)
         {
         }
      }

      if(_k.modCtrl())
      {
         switch(_k.pressed)
         {
            case 96: // '^' (ger) / '`' (us)
               UI.SetKeyboardFocus(sb_status);
               sb_status.onTabFocus();
               return true;

            // case VKEY_KP0:
            //    if(!isCurrentPageModal())
            //    {
            //       // Show sysex
            //       showPageNav(PAGE_SYSEX);
            //    }
            //    return true;

         }
      }

      if(!XMLForm::onKey(_k))
      {
         // Global keyjazz
         if(0 == _k.mod)
         {
            switch(_k.pressed)
            {
               case 'b':
                  showPagePrev();
                  return true;

               case 'n':
                  showPageNext();
                  return true;

               case 'p':
                  b_queued_read_pixel = true;
                  redraw();
                  return true;

               case VKEY_ESCAPE:
               case 'q':
                  showPageParentOrPrev();
                  return true;
            }

            switch(_k.released)
            {
               case VKEY_PAUSE:
                  return true;
            }

         } // 0==k.mod
         else
         {
            switch(_k.pressed)
            {
               case VKEY_PAUSE:
                  return true;

               case 'b':
                  if(_k.modCtrl())
                  {
                     showPageParent();
                     return true;
                  }
                  break;

               case 'q':
                  if(_k.modShift())
                  {
                     Global.HandleOnClose();
                  }
                  return true;
            }

            switch(_k.released)
            {
               case VKEY_PAUSE:
                  // Audio.StopTempSample();
                  return true;
            }
         } // 0 == _k.mod

         if(null == UI.keyboard_layer)
         {
            pg <= getCurrentPage();
            if(pg.onKey(_k))
            {
               return true;
            }
         }

         // Hack for cycling buttons with cursor keys, independent of tab cycle groups
         // // trace "xxx RootForm: KeyboardFocus="+#(UI.GetKeyboardFocus());
         if(_k.mod)
         {
            // if(!_k.modCtrl())
            // {
            //    switch(_k.pressed)
            //    {
            //       case VKEY_LEFT:
            //          handleGlobalFocusPrev();
            //          return true;

            //       case VKEY_RIGHT:
            //          handleGlobalFocusNext();
            //          return true;

            //       case VKEY_UP:
            //          handleGlobalFocusPrev();
            //          return true;

            //       case VKEY_DOWN:
            //          handleGlobalFocusNext();
            //          return true;
            //    }
            // }
         }
         else
         {
            switch(_k.pressed)
            {
               case VKEY_LEFT:
                  pg <= getCurrentPage();
                  if(pg.pageForceKbdFocusSelMode())
                  {
                     UI.BeginKbdFocusSelectionMode();
                     UI.FindKbdFocusLeft();
                     UI.EndKbdFocusSelectionMode();
                     return true;
                  }
                  break;

               case VKEY_RIGHT:
                  pg <= getCurrentPage();
                  if(pg.pageForceKbdFocusSelMode())
                  {
                     UI.BeginKbdFocusSelectionMode();
                     UI.FindKbdFocusRight();
                     UI.EndKbdFocusSelectionMode();
                     return true;
                  }
                  break;

               case VKEY_UP:
                  pg <= getCurrentPage();
                  if(pg.pageForceKbdFocusSelMode())
                  {
                     UI.BeginKbdFocusSelectionMode();
                     UI.FindKbdFocusUp();
                     UI.EndKbdFocusSelectionMode();
                     return true;
                  }
                  break;

               case VKEY_DOWN:
                  pg <= getCurrentPage();
                  if(pg.pageForceKbdFocusSelMode())
                  {
                     UI.BeginKbdFocusSelectionMode();
                     UI.FindKbdFocusDown();
                     UI.EndKbdFocusSelectionMode();
                     return true;
                  }
                  break;
            }
         }

         if(tryHandleTransportKey(_k))
            return true;

         //trace "xxx unhandled k.code="+_k.code+" k.mod="+_k.mod+" k.pressed="+_k.pressed;

         pg <= getCurrentPage();
         return pg.pageHandleAutoFocusKey(_k);

         // // return false;
      }
      else
      {
         // handled by form
         return true;
      }
   }

   // <ui_timer.png>
   protected method handleReplayTimer() {
      // Periodic callback (~30 times per sec)
      Page pg <= getCurrentPage();

      // SysEx.HandleQueuedRecv();

      // pg.pageHandleReplayTimer();

      ta_replay_timer.schedule();
   }

   // <ui_handle.png>
   protected virtual recursiveOnResize() {
      // PointerArray classes <= TKS.findClassesByPrefix(null/*nsp*/, "Node");
      // Object clazz;
      // MIDIMapContext *mmc;
      // foreach clazz in classes
      // {
      //    if(clazz instanceof Node)
      //    {
      //       Node n <= clazz;
      //       NodeEditor editor <= n.nodeGetEditorIfExists();
      //       // trace "xxx RootForm::recursiveOnResize: n="+#(n)+" editor="+#(editor);
      //       if(null != editor)
      //       {
      //          // Force relayout
      //          editor.b_layout_done = false;
      //       }
      //    }
      // }

      XMLForm::recursiveOnResize();

      Events.ResetAllEvents();
   }

   // <ui_handle.png>
   protected method handleCmdAutoComplete() {
      int argIdx = sb_status.getWordIndexUnderCursor();
      local String word;
      local StringArray words <= sb_status.getWords();
      local String cmd;
      if(argIdx >= 0)
      {
         word = words.get(argIdx);
         Global.Debug2("RootForm::handleCmdAutoComplete: idx="+argIdx+" word=\""+word+"\"");
      }
      else
      {
         // Empty string
         argIdx = 0;
      }

      cmdautocomplete_word_idx = argIdx;

      cmd = words.get(0);

      CmdProvider cp <= getCurrentPage().cmdGetRedirect();
      local StringArray *options;

      local StringArray cmdsAvail <= cp.cmdGetAvailableCommands();
      Global.Debug2("RootForm::handleCmdAutoComplete: cmdsAvail="+#(cmdsAvail));
      if(null != cmdsAvail)
      {
         if(0 == argIdx)
         {
            if(!cmd.isBlank())
            {
               local String *acmd;
               options <= new StringArray;
               foreach acmd in cmdsAvail
               {
                  // // if(acmd <= word)  // match string start
                  if(acmd & word)  // match substring
                     options.add(acmd);
               }
            }
            else
            {
               options <= cmdsAvail;
            }
            Global.Debug2("RootForm::handleCmdAutoComplete: cmds="+#(options));
         }
         else
         {
            options <= cp.cmdFindArgAutoCompletions(cmd, argIdx - 1, word);
            if(null != options)
            {
               if(options.numElements > 0)
               {
                  Global.Debug2("RootForm::handleCmdAutoComplete: arg "+argIdx+" completions="+#(options));
               }
               else
               {
                  options <= null;
               }
            }
            if(null == options)
            {
               local StringArray argsAvail <= cp.cmdGetAvailableArgs(cmd, argIdx - 1);
               if(null != argsAvail)
               {
                  if(argsAvail.numElements > 0)
                  {
                     if(!word.isBlank())
                     {
                        options <= new StringArray;
                        local String *aarg;
                        foreach aarg in argsAvail
                        {
                           if(aarg <= word)
                              options.add(aarg);
                        }
                     }
                     else
                     {
                        options <= argsAvail;
                     }
                     Global.Debug2("RootForm::handleCmdAutoComplete: arg "+argIdx+" avail="+#(options));
                  }
                  else
                  {
                     options <= null;
                  }
               }
            }
         }
      }

      if(null != options)
      {
         if(options.numElements > 1)
         {
            cmdautocomplete_popup <= ComboBoxPopup.NewComboBoxPopup(this,
                                                                    null/*fontOrNull*/,
                                                                    options,
                                                                    null/*options_long*/,
                                                                    -1/*selected_option*/,
                                                                    sb_status.getSizeX()/*prefSx*/,
                                                                    null/*tooltip_captions*/,
                                                                    null/*option_bgcolors*/,
                                                                    null/*option_fgtints*/
                                                                 );
            cmdautocomplete_popup.showNearComboBox(sb_status);
            // // cmdautocomplete_popup.table.centerRow();
            cmdautocomplete_popup.focusFirstTabCycleMember();
            cmdautocomplete_options <= deref options;
         }
         else if(1 == options.numElements)
         {
            handleCmdAutoCompleteSelection(options.get(0));
         }
      }

   }

   // <ui_handle.png>
   protected method handleCmdHistoryComplete() {
      if(cmd_history.numElements > 0)
      {
         cmdhistory_popup <= ComboBoxPopup.NewComboBoxPopup(this,
                                                            null/*fontOrNull*/,
                                                            cmd_history,
                                                            null/*options_long*/,
                                                            cmd_history.numElements-1/*selected_option*/,
                                                            sb_status.getSizeX()/*prefSx*/,
                                                            null/*tooltip_captions*/,
                                                            null/*option_bgcolors*/,
                                                            null/*option_fgtints*/
                                                            );
         cmdhistory_popup.showNearComboBox(sb_status);
         // // cmdhistory_popup.table.centerRow();
         cmdhistory_popup.focusFirstTabCycleMember();
      }
   }

   // <ui_handle.png>
   protected method handleCmdAutoCompleteSelection(String _option) {
      local String word;
      local StringArray words <= sb_status.getWords();
      local String newText;
      int newCursorX = 0;
      local String option;

      if(0 == cmdautocomplete_word_idx)
      {
         local StringArray ta <= _option.splitSpace(true);
         option = ta.get(0);  // skip arg syntax
      }
      else
         option <= _option;

      if(cmdautocomplete_word_idx >= words.numElements)
      {
         // Append new word
         newText = (sb_status.getText().trim()) + " " + option;
         newText.trim();
         newCursorX = newText.length - 1;
      }
      else
      {
         // Replace word
         int wordIdx = 0;
         int numAppended = 0;
         loop(words.numElements)
         {
            if(numAppended++ > 0)
            {
               newText.append(" ");
            }

            if(wordIdx == cmdautocomplete_word_idx)
            {
               newText.append(option);
               newCursorX = newText.length - 1;
            }
            else
            {
               newText.append(words.get(wordIdx));
            }

            Global.Debug2("RootForm::handleCmdAutoCompleteSelection: wordIdx="+wordIdx+" newText=\""+newText+"\"");

            wordIdx++;
         }
      }

      Global.Debug2("RootForm::handleCmdAutoCompleteSelection: newText=\""+newText+"\" newCursorX="+newCursorX+" option=\""+option+"\"");

      sb_status.setText(newText);
      sb_status.setTextEditedFlag(true);

      UI.SetKeyboardFocus(sb_status);
      sb_status.onTabFocus();
      sb_status.selectNone();
      sb_status.moveCursorTo(newCursorX);
   }

   // <ui_handle.png>
   protected method handleCmdHistorySelection(String _cmd) {
      sb_status.setText(_cmd);
      sb_status.setTextEditedFlag(true);

      UI.SetKeyboardFocus(sb_status);
      sb_status.onTabFocus();
      sb_status.selectNone();
      sb_status.moveCursorEnd();
   }

   // <ui_show.png>
   protected method handleCmdShowDefaultActions() {
      CmdProvider cp <= getCurrentPage().cmdGetRedirect();
      cmd_actions <= cp.cmdGetDefaultActions();
      if(null != cmd_actions)
      {
         cmdactions_popup <= ComboBoxPopup.NewComboBoxPopup(this,
                                                            null/*fontOrNull*/,
                                                            cmd_actions,
                                                            null/*options_long*/,
                                                            -1/*selected_option*/,
                                                            sb_status.getSizeX()/*prefSx*/,
                                                            null/*tooltip_captions*/,
                                                            null/*option_bgcolors*/,
                                                            null/*option_fgtints*/
                                                            );
         cmdactions_popup.showNearComboBox(sb_status);
         cmdactions_popup.focusFirstTabCycleMember();
      }
   }

   // <ui_handle.png>
   protected method handleCmdActionsSelection(String _cmd) {
      sb_status.setText(_cmd);
      sb_status.setTextEditedFlag(true);

      UI.SetKeyboardFocus(sb_status);
      sb_status.onTabFocus();
      sb_status.selectNone();
      sb_status.moveCursorEnd();

      if(0 != UI.GetKeyMod())
         handleCmdExec();
   }

   // <ui_handle.png>
   protected method handleCmdExec() {

      // Add to history
      local String cmdText = sb_status.getText();
      boolean bAddHistory = true;

      if(cmd_history.numElements > 0)
      {
         bAddHistory = (cmd_history.last != cmdText);
      }
      if(bAddHistory)
      {
         if(cmd_history.numElements >= CMD_HISTORY_SIZE)
            cmd_history.delete(0);
         cmd_history.add(cmdText);
      }

      // Eval command
      local StringArray argv <= sb_status.getWords();
      sb_status.stopEditing(false/*bProvideAction*/, false/*bReturnKey*/, true/*bQuiet*/);
      // // sb_status.setTextEditedFlag(false); // re-enable status messages
      sb_status.setText("");
      CmdProvider cp <= getCurrentPage().cmdGetRedirect();

      if(argv.numElements >= 1)
      {
         // // UI.SetKeyboardFocus(sb_status);
         // // sb_status.onTabFocus();

         boolean r = cp.cmdExec(argv);
         Global.Debug2("RootForm::handleCmdExec: r="+r);
      }

      Page pg <= getCurrentPage();
      pg.pageFocusDefault();
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {

      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();
      StringAction *sac;
      IntAction *iac;

      //trace "xxx RootForm::consumeAction: acName=\""+acName+"\".";

      switch(@(ap))
      {
         case @(this):
            switch(acName)
            {
               case TA_REPLAY_TIMER:
                  // 30ms interval
                  handleReplayTimer();

                  if(0 == (++autosave_replay_timer_count & 255))
                  {
                     Global.HandleAutosave();
                  }
                  return true;

               case TA_EXIT:
               {
                  handleExitTimerExpired();
               }
               return true;

               case TA_REDRAW_ALL:
               {
                  ////trace "xxx onRedrawAllTimer expired";
                  // redraw();//renderAndRedrawAll();
                  UI.RedrawAll();
               }
               return true;

               case TA_REPLAYTIME:
               {
                  ////trace "xxx onReplayTimeTimer";
                  ta_replaytime.scheduleLong();
               }
               return true;

            }
            return false;

         case @(bt_back):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               showPageParent();
            }
            else
            {
               showPagePrev();
            }
            return true;

         case @(sb_status):
            if((TextField.ACTION_TABAUTOCOMPLETE == acName) || (TextField.ACTION_CURSORDOWN == acName))
            {
               handleCmdAutoComplete();
            }
            if(TextField.ACTION_CURSORUP == acName)
            {
               handleCmdHistoryComplete();
            }
            else if(TextField.ACTION_TEXTENTERED == acName) // return
            {
               handleCmdExec();
            }
            else if(TextField.ACTION_RIGHT_CLICK == acName)
            {
               handleCmdShowDefaultActions();
            }
            return true;

         case @(cmdautocomplete_popup)
            if(ComboBoxPopup.ACTION_OPTIONSELECTED == acName)
            {
               iac <= _ac;
               handleCmdAutoCompleteSelection(cmdautocomplete_options.get(iac.getIntValue()));
            }
            return true;

         case @(cmdhistory_popup)
            if(ComboBoxPopup.ACTION_OPTIONSELECTED == acName)
            {
               iac <= _ac;
               handleCmdHistorySelection(cmd_history.get(iac.getIntValue()));
            }
            return true;

         case @(cmdactions_popup)
            if(ComboBoxPopup.ACTION_OPTIONSELECTED == acName)
            {
               iac <= _ac;
               handleCmdActionsSelection(cmd_actions.get(iac.getIntValue()));
            }
            return true;

      }

      return false;
   }

}
