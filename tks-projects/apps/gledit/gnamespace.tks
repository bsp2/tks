// ----
// ---- file   : gnamespace.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 12Jun2020
// ---- changed: 14Jun2020, 15Jun2020, 19Jun2020, 22Jun2020, 27Jun2020, 28Jun2020, 01Jul2020
// ----          07Jul2020, 08Jul2020, 09Jul2020, 12Jul2020, 13Jul2020, 14Jul2020, 25Jul2020
// ----          26Jul2020, 01Aug2020
// ----
// ----
// ----
module MGNamespace;

use namespace ui;
use namespace gledit;


// <class.png>
class GNamespace : GNamespaceObject {

   define String GLOBAL_ID = "global";  // "magic" namespace id

   protected String namespace_id;

   GArg        *args         [];  // external arguments
   GConstant   *constants    [];
   GEnvelope   *envelopes    [];
   GTexture    *textures     [];
   GFBO        *fbos         [];
   GRenderPass *renderpasses [];  // GScene only
   GMesh       *meshes       [];
   GProgram    *programs     [];
   GModel      *models       [];
   GComposite  *composites   [];
   GScene      *scenes       [];
   GMod        *mods         [];

   protected int last_selected_objects_row_idx;


   // <method.png>
   public method setNamespaceId(String _id) {
      namespace_id = _id;
   }

   // <method.png>
   public method getNamespaceId() : String {
      return namespace_id;
   }

   // <method_get.png>
   public method hasRenderPasses() : boolean {
      return false;
   }

   // <method_get.png>
   public method canCreateOrRemoveObjects(String _virtFolderId) : boolean {
      if(GLOBAL_ID == namespace_id)
      {
         switch(_virtFolderId)
         {
            case "args":
            case "constants":
            case "mods":
               return true;
         }
         return false;
      }
      return true;
   }

   // <method.png>
   protected method removeNamespaceObjectsConnectionsInt(local PointerArray a) {
      local GObject *obj;
      foreach obj in a
      {
         current_project.removeConnectionsToObject(obj);
      }
   }

   // <method_delete.png>
   public method removeNamespaceObjects() {

      removeNamespaceObjectsConnectionsInt(args);
      prepareRemoveObjectsInt(args);
      args.free();

      removeNamespaceObjectsConnectionsInt(mods);
      prepareRemoveObjectsInt(mods);
      mods.free();

      removeNamespaceObjectsConnectionsInt(constants);
      prepareRemoveObjectsInt(constants);
      constants.free();

      removeNamespaceObjectsConnectionsInt(envelopes);
      prepareRemoveObjectsInt(envelopes);
      envelopes.free();

      removeNamespaceObjectsConnectionsInt(textures);
      prepareRemoveObjectsInt(textures);
      textures.free();

      removeNamespaceObjectsConnectionsInt(fbos);
      prepareRemoveObjectsInt(fbos);
      fbos.free();

      removeNamespaceObjectsConnectionsInt(renderpasses);
      prepareRemoveObjectsInt(renderpasses);
      renderpasses.free();

      removeNamespaceObjectsConnectionsInt(meshes);
      prepareRemoveObjectsInt(meshes);
      meshes.free();

      removeNamespaceObjectsConnectionsInt(programs);
      prepareRemoveObjectsInt(programs);
      programs.free();

      removeNamespaceObjectsConnectionsInt(models);
      prepareRemoveObjectsInt(models);
      models.free();

      removeNamespaceObjectsConnectionsInt(composites);
      prepareRemoveObjectsInt(composites);
      composites.free();

      removeNamespaceObjectsConnectionsInt(scenes);
      prepareRemoveObjectsInt(scenes);
      scenes.free();
   }

   // <method_set.png>
   public method setLastSelectedObjectsRowIdx(int _rowIdx) {
      last_selected_objects_row_idx = _rowIdx;
   }

   // <method_get.png>
   public method getLastSelectedObjectsRowIdx() : int {
      return last_selected_objects_row_idx;
   }

   // <method_add.png>
   public method canAddObject(GObject _object) : boolean {
      boolean bHasRenderPasses = hasRenderPasses();
      boolean bGlobal = (GLOBAL_ID == namespace_id);

      if(_object instanceof GArg)
         return true;
      else if(_object instanceof GConstant)
         return true;
      else if(_object instanceof GEnvelope)
         return !bGlobal;
      else if(_object instanceof GTexture)
         return !bGlobal;
      else if(_object instanceof GFBO)
         return !bGlobal;
      else if(_object instanceof GRenderPass)
      {
         return !bGlobal && bHasRenderPasses;
      }
      else if(_object instanceof GMesh)
         return !bGlobal;
      else if(_object instanceof GProgram)
         return !bGlobal;
      else if(_object instanceof GComposite)
         return !bGlobal;
      else if(_object instanceof GModel)
         return !bGlobal;
      else if(_object instanceof GScene)
         return !bGlobal && !bHasRenderPasses;
      else if(_object instanceof GMod)
         return true;

      return false;
   }

   // <method_add.png>
   public method addObject(GObject _object) : GObject {
      if(_object instanceof GArg)
         addArg(deref _object);
      else if(_object instanceof GConstant)
         addConstant(deref _object);
      else if(_object instanceof GEnvelope)
         addEnvelope(deref _object);
      else if(_object instanceof GTexture)
         addTexture(deref _object);
      else if(_object instanceof GFBO)
         addFBO(deref _object);
      else if(_object instanceof GRenderPass)
         addRenderPass(deref _object);
      else if(_object instanceof GMesh)
         addMesh(deref _object);
      else if(_object instanceof GProgram)
         addProgram(deref _object);
      else if(_object instanceof GComposite)
         addComposite(deref _object);
      else if(_object instanceof GModel)
         addModel(deref _object);
      else if(_object instanceof GScene)
         addScene(deref _object);
      else if(_object instanceof GMod)
         addMod(deref _object);
      else
      {
         trace "[!!!] GNamespace::addObject: unhandled object="+#(_object);
         _object <= null;
      }
      return _object;
   }

   // <method_add.png>
   public method addObjectAutoId(GObject _object, String _prefIdOrNull) : GObject {
      if(_object instanceof GArg)
         addArgAutoId(deref _object, _prefIdOrNull);
      else if(_object instanceof GConstant)
         addConstantAutoId(deref _object, _prefIdOrNull);
      else if(_object instanceof GEnvelope)
         addEnvelopeAutoId(deref _object, _prefIdOrNull);
      else if(_object instanceof GTexture)
         addTextureAutoId(deref _object, _prefIdOrNull);
      else if(_object instanceof GFBO)
         addFBOAutoId(deref _object, _prefIdOrNull);
      else if(_object instanceof GRenderPass)
         addRenderPassAutoId(deref _object, _prefIdOrNull);
      else if(_object instanceof GMesh)
         addMeshAutoId(deref _object, _prefIdOrNull);
      else if(_object instanceof GProgram)
         addProgramAutoId(deref _object, _prefIdOrNull);
      else if(_object instanceof GComposite)
         addCompositeAutoId(deref _object, _prefIdOrNull);
      else if(_object instanceof GModel)
         addModelAutoId(deref _object, _prefIdOrNull);
      else if(_object instanceof GScene)
         addSceneAutoId(deref _object, _prefIdOrNull);
      else if(_object instanceof GMod)
         addModAutoId(deref _object, _prefIdOrNull);
      else
      {
         trace "[!!!] GNamespace::addObjectAutoId: unhandled object="+#(_object);
         _object <= null;
      }
      return _object;
   }

   // <method_get.png>
   public method unlinkObjectInt(PointerArray _a, GObject _gobj) : GObject {
      return _a.unlink(_gobj);
   }

   // <method_get.png>
   public method unlinkObject(GObject _gobj) : GObject {
      GObject r <= unlinkObjectInt(args, _gobj);
      if(null == r) r <= unlinkObjectInt(constants,    _gobj);
      if(null == r) r <= unlinkObjectInt(envelopes,    _gobj);
      if(null == r) r <= unlinkObjectInt(textures,     _gobj);
      if(null == r) r <= unlinkObjectInt(fbos,         _gobj);
      if(null == r) r <= unlinkObjectInt(meshes,       _gobj);
      if(null == r) r <= unlinkObjectInt(programs,     _gobj);
      if(null == r) r <= unlinkObjectInt(models,       _gobj);
      if(null == r) r <= unlinkObjectInt(composites,   _gobj);
      if(null == r) r <= unlinkObjectInt(renderpasses, _gobj);
      if(null == r) r <= unlinkObjectInt(scenes,       _gobj);
      if(null == r) r <= unlinkObjectInt(mods,         _gobj);
      return deref r;
   }

   // <method.png>
   public method hasSubObjects() : boolean {
      return
         !constants   .isEmpty() ||
         !envelopes   .isEmpty() ||
         !textures    .isEmpty() ||
         !fbos        .isEmpty() ||
         !renderpasses.isEmpty() ||
         !meshes      .isEmpty() ||
         !programs    .isEmpty() ||
         !models      .isEmpty() ||
         !composites  .isEmpty() ||
         !scenes      .isEmpty() ||
         !mods        .isEmpty() ;
   }

   // <method_add.png>
   public method addArg(GArg _const) : GArg {
      args.add(#(deref _const));
      _const.setNamespace(this);
      return _const;
   }

   // <method_add.png>
   public method addArgAutoId(GArg _arg, String _prefIdOrNull) : GArg {
      addArg(deref _arg);
      _arg.setId(Utils.CreateAutoId((null != _prefIdOrNull) ? _prefIdOrNull : _arg.getPreferredIdPrefix(), args));
      return _arg;
   }

   // <method_get.png>
   public method getNumArgs() : int {
      return args.numElements;
   }

   // <method.png>
   public method moveArgUp(GArg _const) : boolean {
      return Utils.MoveObjectUp(args, _const);
   }

   // <method.png>
   public method moveArgDown(GArg _const) : boolean {
      return Utils.MoveObjectDown(args, _const);
   }

   // <method_remove.png>
   public method removeArg(GArg _obj) : boolean {
      boolean bLast = args.isLast(_obj);
      args.remove(_obj);
      return bLast;
   }

   // <method_add.png>
   public method addConstant(GConstant _const) : GConstant {
      constants.add(#(deref _const));
      _const.setNamespace(this);
      return _const;
   }

   // <method_add.png>
   public method addConstantAutoId(GConstant _const, String _prefIdOrNull) : GConstant {
      addConstant(deref _const);
      _const.setId(Utils.CreateAutoId((null != _prefIdOrNull) ? _prefIdOrNull : _const.getPreferredIdPrefix(), constants));
      return _const;
   }

   // <method_get.png>
   public method getNumConstants() : int {
      return constants.numElements;
   }

   // <method.png>
   public method moveConstantUp(GConstant _const) : boolean {
      return Utils.MoveObjectUp(constants, _const);
   }

   // <method.png>
   public method moveConstantDown(GConstant _const) : boolean {
      return Utils.MoveObjectDown(constants, _const);
   }

   // <method_remove.png>
   public method removeConstant(GConstant _obj) : boolean {
      boolean bLast = constants.isLast(_obj);
      constants.remove(_obj);
      return bLast;
   }

   // <method_add.png>
   public method addEnvelope(GEnvelope _env) : GEnvelope {
      envelopes.add(#(deref _env));
      _env.setNamespace(this);
      return _env;
   }

   // <method_add.png>
   public method addEnvelopeAutoId(GEnvelope _obj, String _prefIdOrNull) : GEnvelope {
      addEnvelope(deref _obj);
      _obj.id = Utils.CreateAutoId((null != _prefIdOrNull) ? _prefIdOrNull : _obj.getPreferredIdPrefix(), envelopes);
      return _obj;
   }

   // <method_get.png>
   public method getNumEnvelopes() : int {
      return envelopes.numElements;
   }

   // <method.png>
   public method moveEnvelopeUp(GEnvelope _env) : boolean {
      return Utils.MoveObjectUp(envelopes, _env);
   }

   // <method.png>
   public method moveEnvelopeDown(GEnvelope _env) : boolean {
      return Utils.MoveObjectDown(envelopes, _env);
   }

   // <method_remove.png>
   public method removeEnvelope(GEnvelope _obj) : boolean {
      trace "xxx removeEnvelope obj="+#(_obj);
      trace "xxx envelopes.isLast(_obj)="+envelopes.isFirst(_obj);
      boolean bLast = envelopes.isLast(_obj);
      envelopes.remove(_obj);
      return bLast;
   }

   // <method_add.png>
   public method addTexture(GTexture _tex) : GTexture {
      textures.add(#(deref _tex));
      _tex.setNamespace(this);
      return _tex;
   }

   // <method_add.png>
   public method addTextureAutoId(GTexture _obj, String _prefIdOrNull) : GTexture {
      addTexture(deref _obj);
      _obj.id = Utils.CreateAutoId((null != _prefIdOrNull) ? _prefIdOrNull : _obj.getPreferredIdPrefix(), textures);
      return _obj;
   }

   // <method_get.png>
   public method getNumTextures() : int {
      return textures.numElements;
   }

   // <method.png>
   public method moveTextureUp(GTexture _tex) : boolean {
      return Utils.MoveObjectUp(textures, _tex);
   }

   // <method.png>
   public method moveTextureDown(GTexture _tex) : boolean {
      return Utils.MoveObjectDown(textures, _tex);
   }

   // <method_find.png>
   public method findFirstUnconnectedTexture() : GTexture {
      local GTexture *tex;
      foreach tex in textures
      {
         if(!tex.isAnyOutputConnected())
            return tex;
      }
      if(null != parent_namespace)
         return parent_namespace.findFirstUnconnectedTexture();
   }

   // <method_remove.png>
   public method removeTexture(GTexture _obj) : boolean {
      boolean bLast = textures.isLast(_obj);
      textures.remove(_obj);
      return bLast;
   }

   // <method_add.png>
   public method addFBO(GFBO _fbo) : GFBO {
      fbos.add(#(deref _fbo));
      _fbo.setNamespace(this);
      return _fbo;
   }

   // <method_add.png>
   public method addFBOAutoId(GFBO _obj, String _prefIdOrNull) : GFBO {
      addFBO(deref _obj);
      _obj.id = Utils.CreateAutoId((null != _prefIdOrNull) ? _prefIdOrNull : _obj.getPreferredIdPrefix(), fbos);
      return _obj;
   }

   // <method_get.png>
   public method getNumFBOs() : int {
      return fbos.numElements;
   }

   // <method.png>
   public method moveFBOUp(GFBO _fbo) : boolean {
      return Utils.MoveObjectUp(fbos, _fbo);
   }

   // <method.png>
   public method moveFBODown(GFBO _fbo) : boolean {
      return Utils.MoveObjectDown(fbos, _fbo);
   }

   // <method_remove.png>
   public method removeFBO(GFBO _obj) : boolean {
      boolean bLast = fbos.isLast(_obj);
      fbos.remove(_obj);
      return bLast;
   }


   // <method_add.png>
   public method addRenderPass(GRenderPass _renderPass) : GRenderPass {
      renderpasses.add(#(deref _renderPass));
      _renderPass.setNamespace(this);
      return _renderPass;
   }

   // <method_add.png>
   public method addRenderPassAutoId(GRenderPass _obj, String _prefIdOrNull) : GRenderPass {
      addRenderPass(deref _obj);
      _obj.id = Utils.CreateAutoId((null != _prefIdOrNull) ? _prefIdOrNull : _obj.getPreferredIdPrefix(), renderpasses);
      return _obj;
   }

   // <method_get.png>
   public method getNumRenderPasses() : int {
      return renderpasses.numElements;
   }

   // <method.png>
   public method moveRenderPassUp(GRenderPass _renderPass) : boolean {
      return Utils.MoveObjectUp(renderpasses, _renderPass);
   }

   // <method.png>
   public method moveRenderPassDown(GRenderPass _renderPass) : boolean {
      return Utils.MoveObjectDown(renderpasses, _renderPass);
   }

   // <method_remove.png>
   public method removeRenderPass(GRenderPass _obj) : boolean {
      boolean bLast = renderpasses.isLast(_obj);
      renderpasses.remove(_obj);
      return bLast;
   }

   // <method_add.png>
   public method addMesh(GMesh _mesh) : GMesh {
      meshes.add(#(deref _mesh));
      _mesh.setNamespace(this);
      return _mesh;
   }

   // <method_add.png>
   public method addMeshAutoId(GMesh _obj, String _prefIdOrNull) : GMesh {
      addMesh(deref _obj);
      _obj.id = Utils.CreateAutoId((null != _prefIdOrNull) ? _prefIdOrNull : _obj.getPreferredIdPrefix(), meshes);
      return _obj;
   }

   // <method_get.png>
   public method getNumMeshes() : int {
      return meshes.numElements;
   }

   // <method.png>
   public method moveMeshUp(GMesh _mesh) : boolean {
      return Utils.MoveObjectUp(meshes, _mesh);
   }

   // <method.png>
   public method moveMeshDown(GMesh _mesh) : boolean {
      return Utils.MoveObjectDown(meshes, _mesh);
   }

   // <method_remove.png>
   public method removeMesh(GMesh _obj) : boolean {
      boolean bLast = meshes.isLast(_obj);
      meshes.remove(_obj);
      return bLast;
   }

   // <method_add.png>
   public method addProgram(GProgram _program) : GProgram {
      programs.add(#(deref _program));
      _program.setNamespace(this);
      return _program;
   }

   // <method_add.png>
   public method addProgramAutoId(GProgram _obj, String _prefIdOrNull) : GProgram {
      addProgram(deref _obj);
      _obj.id = Utils.CreateAutoId((null != _prefIdOrNull) ? _prefIdOrNull : _obj.getPreferredIdPrefix(), programs);
      return _obj;
   }

   // <method_get.png>
   public method getNumPrograms() : int {
      return programs.numElements;
   }

   // <method_get.png>
   public method getProgramByIndex(int _idx) : GProgram {
      return programs.get(_idx);
   }

   // <method.png>
   public method moveProgramUp(GProgram _program) : boolean {
      return Utils.MoveObjectUp(programs, _program);
   }

   // <method.png>
   public method moveProgramDown(GProgram _program) : boolean {
      return Utils.MoveObjectDown(programs, _program);
   }

   // <method_remove.png>
   public method removeProgram(GProgram _obj) : boolean {
      boolean bLast = programs.isLast(_obj);
      programs.remove(_obj);
      return bLast;
   }

   // <method_add.png>
   public method addModel(GModel _model) : GModel {
      models.add(#(deref _model));
      _model.setNamespace(this);
      return _model;
   }

   // <method_add.png>
   public method addModelAutoId(GModel _obj, String _prefIdOrNull) : GModel {
      addModel(deref _obj);
      _obj.id = Utils.CreateAutoId((null != _prefIdOrNull) ? _prefIdOrNull : _obj.getPreferredIdPrefix(), models);
      return _obj;
   }

   // <method_get.png>
   public method getNumModels() : int {
      return models.numElements;
   }

   // <method_find.png>
   public method findModelById(String _id) : GModel {
      GModel *model;
      foreach model in models
      {
         if(model.getId() == _id)
            return model;
      }
      return null;
   }

   // <method.png>
   public method moveModelUp(GModel _model) : boolean {
      return Utils.MoveObjectUp(models, _model);
   }

   // <method.png>
   public method moveModelDown(GModel _model) : boolean {
      return Utils.MoveObjectDown(models, _model);
   }

   // <method_remove.png>
   public method removeModel(GModel _obj) : boolean {
      boolean bLast = models.isLast(_obj);
      models.remove(_obj);
      return bLast;
   }

   // <method_add.png>
   public method addComposite(GComposite _composite) : GComposite {
      composites.add(#(deref _composite));
      _composite.setNamespace(this);
      return _composite;
   }

   // <method_add.png>
   public method addCompositeAutoId(GComposite _obj, String _prefIdOrNull) : GComposite {
      addComposite(deref _obj);
      _obj.id = Utils.CreateAutoId((null != _prefIdOrNull) ? _prefIdOrNull : _obj.getPreferredIdPrefix(), composites);
      return _obj;
   }

   // <method_get.png>
   public method getNumComposites() : int {
      return composites.numElements;
   }

   // <method.png>
   public method moveCompositeUp(GComposite _composite) : boolean {
      return Utils.MoveObjectUp(composites, _composite);
   }

   // <method.png>
   public method moveCompositeDown(GComposite _composite) : boolean {
      return Utils.MoveObjectDown(composites, _composite);
   }

   // <method_remove.png>
   public method removeComposite(GComposite _obj) : boolean {
      boolean bLast = composites.isLast(_obj);
      composites.remove(_obj);
      return bLast;
   }

   // <method_add.png>
   public method addScene(GScene _scene) : GScene {
      scenes.add(#(deref _scene));
      _scene.setNamespace(this);
      return _scene;
   }

   // <method_add.png>
   public method addSceneAutoId(GScene _obj, String _prefIdOrNull) : GScene {
      addScene(deref _obj);
      _obj.id = Utils.CreateAutoId((null != _prefIdOrNull) ? _prefIdOrNull : _obj.getPreferredIdPrefix(), scenes);
      return _obj;
   }

   // <method_get.png>
   public method getNumScenes() : int {
      return scenes.numElements;
   }

   // <method_get.png>
   public method getSceneByIndex(int _idx) : GScene {
      return scenes.get(_idx);
   }

   // <method_find.png>
   public method findSceneById(String _id) : GScene {
      GScene *scene;
      foreach scene in scenes
      {
         if(scene.getId() == _id)
            return scene;
      }
      return null;
   }

   // <method.png>
   public method moveSceneUp(GScene _scene) : boolean {
      return Utils.MoveObjectUp(scenes, _scene);
   }

   // <method.png>
   public method moveSceneDown(GScene _scene) : boolean {
      return Utils.MoveObjectDown(scenes, _scene);
   }

   // <method_remove.png>
   public method removeScene(GScene _obj) : boolean {
      boolean bLast = scenes.isLast(_obj);
      scenes.remove(_obj);
      return bLast;
   }


   // <method_add.png>
   public method addMod(GMod _mod) : GMod {
      mods.add(#(deref _mod));
      _mod.setNamespace(this);
      return _mod;
   }

   // <method_add.png>
   public method addModAutoId(GMod _obj, String _prefIdOrNull) : GMod {
      addMod(deref _obj);
      _obj.id = Utils.CreateAutoId((null != _prefIdOrNull) ? _prefIdOrNull : _obj.getPreferredIdPrefix(), mods);
      return _obj;
   }

   // <method_get.png>
   public method getNumMods() : int {
      return mods.numElements;
   }

   // <method_get.png>
   public method getModByIndex(int _idx) : GMod {
      return mods.get(_idx);
   }

   // <method_find.png>
   public method findModById(String _id) : GMod {
      GMod *mod;
      foreach mod in mods
      {
         if(mod.getId() == _id)
            return mod;
      }
      return null;
   }

   // <method.png>
   public method moveModUp(GMod _mod) : boolean {
      return Utils.MoveObjectUp(mods, _mod);
   }

   // <method.png>
   public method moveModDown(GMod _mod) : boolean {
      return Utils.MoveObjectDown(mods, _mod);
   }

   // <method_remove.png>
   public method removeMod(GMod _obj) : boolean {
      boolean bLast = mods.isLast(_obj);
      mods.remove(_obj);
      return bLast;
   }

   // // <method_find.png>
   // public method findFirstConnectionToObjectInt(local PointerArray _a, local GObject _obj) : GConnection {
   //    local GObject *o;
   //    foreach o in _a
   //    {
   //       GConnection conn <= o.findFirstConnectionToObject(_obj);
   //       if(null != conn)
   //          return conn;
   //    }
   //    return null;
   // }

   // // <method_find.png>
   // public method findFirstConnectionToObject(GObject _obj) : GConnection {
   //    GConnection *conn;
   //    conn <= findFirstConnectionToObjectInt(args,         _obj);
   //    if(null != conn)
   //       return conn;
   //    conn <= findFirstConnectionToObjectInt(constants,    _obj);
   //    if(null != conn)
   //       return conn;
   //    conn <= findFirstConnectionToObjectInt(envelopes,    _obj);
   //    if(null != conn)
   //       return conn;
   //    conn <= findFirstConnectionToObjectInt(programs,     _obj);
   //    if(null != conn)
   //       return conn;
   //    conn <= findFirstConnectionToObjectInt(models,       _obj);
   //    if(null != conn)
   //       return conn;
   //    conn <= findFirstConnectionToObjectInt(textures,     _obj);
   //    if(null != conn)
   //       return conn;
   //    conn <= findFirstConnectionToObjectInt(fbos,         _obj);
   //    if(null != conn)
   //       return conn;
   //    conn <= findFirstConnectionToObjectInt(renderpasses, _obj);
   //    if(null != conn)
   //       return conn;
   //    conn <= findFirstConnectionToObjectInt(meshes,       _obj);
   //    if(null != conn)
   //       return conn;
   //    conn <= findFirstConnectionToObjectInt(composites,   _obj);
   //    if(null != conn)
   //       return conn;
   //    conn <= findFirstConnectionToObjectInt(scenes,       _obj);
   //    if(null != conn)
   //       return conn;
   //    conn <= findFirstConnectionToObjectInt(mods,         _obj);
   //    if(null != conn)
   //       return conn;
   //    return null;
   // }

   // <method_remove.png>
   public method removeConnectionsToObjectInt(local PointerArray _a, local GObject _obj) {
      local GObject *o;
      foreach o in _a
      {
         o.removeConnectionsToObject(_obj);
      }
   }

   // <method_remove.png>
   public method removeConnectionsToObject(local GObject _obj) {
      removeConnectionsToObjectInt(args,         _obj);
      removeConnectionsToObjectInt(constants,    _obj);
      removeConnectionsToObjectInt(envelopes,    _obj);
      removeConnectionsToObjectInt(programs,     _obj);
      removeConnectionsToObjectInt(models,       _obj);
      removeConnectionsToObjectInt(textures,     _obj);
      removeConnectionsToObjectInt(fbos,         _obj);
      removeConnectionsToObjectInt(renderpasses, _obj);
      removeConnectionsToObjectInt(meshes,       _obj);
      removeConnectionsToObjectInt(composites,   _obj);
      removeConnectionsToObjectInt(scenes,       _obj);
      removeConnectionsToObjectInt(mods,         _obj);
   }

   // <method_remove.png>
   public method prepareRemoveObjectsInt(local PointerArray _a) {
      local GObject *o;
      foreach o in _a
      {
         o.prepareRemove();
      }
   }

   // <method.png>
   public method prepareRemoveNamespaceObjects() {
      prepareRemoveObjectsInt(args);
      prepareRemoveObjectsInt(constants);
      prepareRemoveObjectsInt(envelopes);
      prepareRemoveObjectsInt(textures);
      prepareRemoveObjectsInt(fbos);
      prepareRemoveObjectsInt(renderpasses);
      prepareRemoveObjectsInt(meshes);
      prepareRemoveObjectsInt(programs);
      prepareRemoveObjectsInt(models);
      prepareRemoveObjectsInt(composites);
      prepareRemoveObjectsInt(scenes);
      prepareRemoveObjectsInt(mods);
   }

   // <method.png>
   protected method handleWatchFileChangedInt(local PointerArray _a, local String _pathName) {
      local GObject *obj;
      foreach obj in _a
      {
         obj.handleWatchFileChanged(_pathName);
      }
   }

   // <method.png>
   public virtual handleWatchFileChanged(local String _pathName) {
      trace "xxx GNamespace::handleWatchFileChanged: this="+#(this)+" pathName=\""+_pathName+"\"";
      handleWatchFileChangedInt(textures,     _pathName);
      handleWatchFileChangedInt(meshes,       _pathName);
      handleWatchFileChangedInt(programs,     _pathName);
      handleWatchFileChangedInt(models,       _pathName);
      handleWatchFileChangedInt(composites,   _pathName);
      handleWatchFileChangedInt(scenes,       _pathName);
      handleWatchFileChangedInt(renderpasses, _pathName);
      handleWatchFileChangedInt(mods,         _pathName);
   }

   // <save.png>
   protected method saveStateObjectsInt(local Stream            ofs,
                                        local PointerArray      _a,
                                        local GConnectionWriter connectionWriter
                                        ) {
      // Version
      ofs.i16 = 1;

      // Num objects
      ofs.i16 = _a.numElements;

      local GObject *o;
      foreach o in _a
      {
         o.saveStateObject(ofs, connectionWriter);
      }
   }

   // <save.png>
   public method saveStateNamespace(local Stream ofs, local GConnectionWriter connectionWriter) {
      // Version
      ofs.i16 = 5;

      // Namespace id
      Utils.WriteString(ofs, namespace_id);

      // Object arrays
      saveStateObjectsInt(ofs, args,         connectionWriter);  // v2+
      saveStateObjectsInt(ofs, constants,    connectionWriter);
      saveStateObjectsInt(ofs, envelopes,    connectionWriter);
      saveStateObjectsInt(ofs, textures,     connectionWriter);
      saveStateObjectsInt(ofs, fbos,         connectionWriter);  // v3+
      if(hasRenderPasses())
         saveStateObjectsInt(ofs, renderpasses, connectionWriter);  // v3+
      saveStateObjectsInt(ofs, meshes,       connectionWriter);
      saveStateObjectsInt(ofs, programs,     connectionWriter);
      saveStateObjectsInt(ofs, models,       connectionWriter);
      saveStateObjectsInt(ofs, composites,   connectionWriter);
      saveStateObjectsInt(ofs, scenes,       connectionWriter);
      saveStateObjectsInt(ofs, mods,         connectionWriter);  // v4+

      // Last selected objects table row (v5+)
      ofs.i16 = last_selected_objects_row_idx;
   }

   // <load.png>
   protected method loadStateObjectsInt(local Stream        ifs,
                                        local PointerArray _a
                                        ) : boolean {
      // Version
      local short ver = ifs.u16;

      if(1 <= ver <= 1)
      {
         // Num objects
         local int numObjects = ifs.u16;

         local int objIdx = 0;
         loop(numObjects)
         {
            local GObject o <= GObject.LoadStateObject(ifs);
            if(null != o)
            {
               _a.add(#(deref o));
               o.setNamespace(this);
            }
            else
            {
               trace "[----] GNamespace::loadStateObjectsInt: failed to load object "+(objIdx+1)+"/"+numObjects;
               return false;
            }

            objIdx++;
         }

         // Succeeded
         return true;
      }
      else
      {
         trace "[----] GNamespace::loadStateObjectsInt: invalid version "+ver;
         return false;
      }
   }

   // <load.png>
   public method loadStateNamespace(local Stream ifs) : boolean {
      // Version
      local short ver = ifs.u16;

      if(1 <= ver <= 5)
      {
         // Namespace id
         Utils.ReadString(ifs, namespace_id);

         if(ver >= 2)
         {
            // Args
            if(!loadStateObjectsInt(ifs, args))
            {
               trace "[---] GNamespace::loadStateNamespace: failed to load args, this="+#(this)+" id="+namespace_id;
               return false;
            }
         }

         // Constants
         if(!loadStateObjectsInt(ifs, constants))
         {
            trace "[---] GNamespace::loadStateNamespace: failed to load constants, this="+#(this)+" id="+namespace_id;
            return false;
         }

         // Envelopes
         if(!loadStateObjectsInt(ifs, envelopes))
         {
            trace "[---] GNamespace::loadStateNamespace: failed to load envelopes, this="+#(this)+" id="+namespace_id;
            return false;
         }

         // Textures
         if(!loadStateObjectsInt(ifs, textures))
         {
            trace "[---] GNamespace::loadStateNamespace: failed to load textures, this="+#(this)+" id="+namespace_id;
            return false;
         }

         if(ver >= 3)
         {
            // FBOs (v3+)
            if(!loadStateObjectsInt(ifs, fbos))
            {
               trace "[---] GNamespace::loadStateNamespace: failed to load FBOs, this="+#(this)+" id="+namespace_id;
               return false;
            }

            if(hasRenderPasses())
            {
               // RenderPasses (v3+)
               if(!loadStateObjectsInt(ifs, renderpasses))
               {
                  trace "[---] GNamespace::loadStateNamespace: failed to load RenderPasses, this="+#(this)+" id="+namespace_id;
                  return false;
               }
            }
         }

         // Meshes
         if(!loadStateObjectsInt(ifs, meshes))
         {
            trace "[---] GNamespace::loadStateNamespace: failed to load meshes, this="+#(this)+" id="+namespace_id;
            return false;
         }

         // Programs
         if(!loadStateObjectsInt(ifs, programs))
         {
            trace "[---] GNamespace::loadStateNamespace: failed to load programs, this="+#(this)+" id="+namespace_id;
            return false;
         }

         // Models
         if(!loadStateObjectsInt(ifs, models))
         {
            trace "[---] GNamespace::loadStateNamespace: failed to load models, this="+#(this)+" id="+namespace_id;
            return false;
         }

         // Composites
         if(!loadStateObjectsInt(ifs, composites))
         {
            trace "[---] GNamespace::loadStateNamespace: failed to load composites, this="+#(this)+" id="+namespace_id;
            return false;
         }

         // Scenes
         if(!loadStateObjectsInt(ifs, scenes))
         {
            trace "[---] GNamespace::loadStateNamespace: failed to load scenes, this="+#(this)+" id="+namespace_id;
            return false;
         }

         if(ver >= 4)
         {
            // Mods (v4+)
            if(!loadStateObjectsInt(ifs, mods))
            {
               trace "[---] GNamespace::loadStateNamespace: failed to load mods, this="+#(this)+" id="+namespace_id;
               return false;
            }
         }

         if(ver >= 5)
         {
            // Last selected objects table row (v5+)
            last_selected_objects_row_idx = ifs.i16;
         }

         // Succeeded
         return true;
      }
      else
      {
         trace "[----] GNamespace::loadStateNamespace: invalid version "+ver;
         return false;
      }

   }

   // <method_find.png>
   protected method findNamespaceObjectByPathInt(local PointerArray _a,
                                                 local String       _path,
                                                 local boolean      _bUnfold
                                                 ) : GObject {
      // trace "xxx GNamespace::findNamespaceObjectByPathInt: path=\""+_path+"\"";
      local int idx = _path.indexOfChar('.', 0);
      local String *objectId;
      if(-1 != idx)
      {
         objectId <= _path.substring(0, idx);
      }
      else
      {
         objectId <= _path;
         idx = 999999;
      }

      // trace "xxx GNamespace::findNamespaceObjectByPathInt: path=\""+_path+"\" objectId=\""+objectId+"\"";
      idx++;

      local GObject *o;
      foreach o in _a
      {
         // trace "xxx GNamespace:: o.getId()="+o.getId()+" objectId="+objectId;
         if(o.getId() == objectId)
         {
            // trace "xxx path.numChars="+_path.numChars+" idx="+idx;
            if(_path.numChars > idx)
               return o.findObjectByPathUnfold(_path.substring(idx, -1), _bUnfold);
            else
               return o;
         }
      }

      return null;
   }

   // <method_find.png>
   public method findObjectByPathUnfold(local String _path, local boolean _bUnfold) : GObject {
      // trace "xxx GNamespace::findObjectByPath: path=\""+_path+"\"";
      local int idx = _path.indexOfChar('.', 0);
      if(-1 != idx)
      {
         local String folderId <= _path.substring(0, idx);
         // trace "xxx GNamespace::findObjectByPath: path=\""+_path+"\" folderId=\""+folderId+"\"";
         // trace "xxx GNamespace:   constants="+#(constants);
         idx++;

         if(_bUnfold)
            setVirtFolderFoldStatus(folderId, false);

         switch(folderId)
         {
            case "args":
               return findNamespaceObjectByPathInt(args,       _path.substring(idx, -1), _bUnfold);

            case "constants":
               return findNamespaceObjectByPathInt(constants,  _path.substring(idx, -1), _bUnfold);

            case "envelopes":
               return findNamespaceObjectByPathInt(envelopes,  _path.substring(idx, -1), _bUnfold);

            case "textures":
               return findNamespaceObjectByPathInt(textures,   _path.substring(idx, -1), _bUnfold);

            case "fbos":
               return findNamespaceObjectByPathInt(fbos,       _path.substring(idx, -1), _bUnfold);

            case "renderpasses":
               if(hasRenderPasses())
                  return findNamespaceObjectByPathInt(renderpasses, _path.substring(idx, -1), _bUnfold);
               else
                  return null;

            case "meshes":
               return findNamespaceObjectByPathInt(meshes,     _path.substring(idx, -1), _bUnfold);

            case "programs":
               return findNamespaceObjectByPathInt(programs,   _path.substring(idx, -1), _bUnfold);

            case "models":
               return findNamespaceObjectByPathInt(models,     _path.substring(idx, -1), _bUnfold);

            case "composites":
               return findNamespaceObjectByPathInt(composites, _path.substring(idx, -1), _bUnfold);

            case "scenes":
               return findNamespaceObjectByPathInt(scenes,     _path.substring(idx, -1), _bUnfold);

            case "mods":
            case "scripts": // deprecated name (pre 08Jul2020)
               return findNamespaceObjectByPathInt(mods,       _path.substring(idx, -1), _bUnfold);
         }

      }
      return null;
   }

   // <method_find.png>
   public method findObjectByPath(local String _path) : GObject {
      return findObjectByPathUnfold(_path, false/*bUnfold*/);
   }

   // <method_remove.png>
   protected method emitBeginRecursiveInt(local PointerArray _a) {
      local GObject *o;
      foreach o in _a
      {
         o.emitBeginRecursive();
      }
   }

   // <method_remove.png>
   public method emitBeginRecursive() {
      // trace "xxx GNamespace::emitBeginRecursive: this="+#(this)+" id="+namespace_id;
      emitBeginRecursiveInt(args);
      emitBeginRecursiveInt(constants);
      emitBeginRecursiveInt(envelopes);
      emitBeginRecursiveInt(textures);
      emitBeginRecursiveInt(fbos);
      emitBeginRecursiveInt(meshes);
      emitBeginRecursiveInt(programs);
      emitBeginRecursiveInt(models);
      emitBeginRecursiveInt(composites);
      if(hasRenderPasses())
         emitBeginRecursiveInt(renderpasses);  // 'this' is GScene
      else
         emitBeginRecursiveInt(scenes);
      emitBeginRecursiveInt(mods);
   }

   // <method_remove.png>
   protected method emitModulePostRecursiveInt(local PointerArray _a, GModule _module) {
      local GObject *o;
      foreach o in _a
      {
         local PointerArray parents;
         parents.add(this);
         o.emitPost(_module, null/*program*/, parents);
         parents.remove(this);
         o.emitModulePost(_module);
      }
   }

   // <method.png>
   public method emitModulePost(GModule _module) {
      emitModulePostRecursiveInt(args,       _module);
      emitModulePostRecursiveInt(constants,  _module);
      emitModulePostRecursiveInt(envelopes,  _module);
      emitModulePostRecursiveInt(textures,   _module);
      emitModulePostRecursiveInt(fbos,       _module);
      emitModulePostRecursiveInt(meshes,     _module);
      emitModulePostRecursiveInt(programs,   _module);
      emitModulePostRecursiveInt(models,     _module);
      emitModulePostRecursiveInt(composites, _module);
      if(hasRenderPasses())
         emitModulePostRecursiveInt(renderpasses, _module);  // 'this' is GScene
      else
         emitModulePostRecursiveInt(scenes, _module);
      emitModulePostRecursiveInt(mods,       _module);
   }

   // <method_find.png>
   public method enumerateObjectsInt(local PointerArray _a, local PointerArray _ret, local int _recurseDepthLeft) {
      local GObject *o;
      foreach o in _a
      {
         _ret.add(o);
         if(_recurseDepthLeft > 0)
            o.enumerateObjects(_ret, _recurseDepthLeft - 1);
      }
   }

   // <method_find.png>
   public virtual enumerateObjects(local PointerArray _ret, local int _recurseDepthLeft) {
      enumerateObjectsInt(args,         _ret, _recurseDepthLeft);
      enumerateObjectsInt(constants,    _ret, _recurseDepthLeft);
      enumerateObjectsInt(envelopes,    _ret, _recurseDepthLeft);
      enumerateObjectsInt(textures,     _ret, _recurseDepthLeft);
      enumerateObjectsInt(fbos,         _ret, _recurseDepthLeft);
      enumerateObjectsInt(meshes,       _ret, _recurseDepthLeft);
      enumerateObjectsInt(programs,     _ret, _recurseDepthLeft);
      enumerateObjectsInt(models,       _ret, _recurseDepthLeft);
      enumerateObjectsInt(composites,   _ret, _recurseDepthLeft);
      enumerateObjectsInt(renderpasses, _ret, _recurseDepthLeft);
      enumerateObjectsInt(scenes,       _ret, _recurseDepthLeft);
      enumerateObjectsInt(mods,         _ret, _recurseDepthLeft);
   }

   // <method_set.png>
   public virtual setAllVirtFolderFoldStatus(boolean _bFolded) {
      setVirtFolderFoldStatus("args",         _bFolded);
      setVirtFolderFoldStatus("constants",    _bFolded);
      setVirtFolderFoldStatus("envelopes",    _bFolded);
      setVirtFolderFoldStatus("textures",     _bFolded);
      setVirtFolderFoldStatus("fbos",         _bFolded);
      setVirtFolderFoldStatus("meshes",       _bFolded);
      setVirtFolderFoldStatus("programs",     _bFolded);
      setVirtFolderFoldStatus("models",       _bFolded);
      setVirtFolderFoldStatus("composites",   _bFolded);
      setVirtFolderFoldStatus("renderpasses", _bFolded);
      setVirtFolderFoldStatus("scenes",       _bFolded);
      setVirtFolderFoldStatus("mods",         _bFolded);
   }

}
