// ----
// ---- file   : gargmouse.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 27Jun2020
// ---- changed: 09Jul2020
// ----
// ----
// ----
module MGArgMouse;

use namespace ui;
use namespace gledit;


// <class.png>
class GArgVec2MouseAbs : GArg {

   // <method.png>
   public virtual initIO() {
      GArg::initIO();
      addOutput("x", TYPE_FLOAT);
      addOutput("y", TYPE_FLOAT);
   }

   // <method_get.png>
   public virtual getInitialArgType() : int {
      return TYPE_VEC2;
   }

   // <method_get.png>
   public virtual getPreferredIdPrefix() : String {
      return "mouse_abs";
   }

   // <method.png>
   public virtual emit(local String       _outputId,
                       local GModule      _module,
                       local GProgram     _program,
                       local String       _out,
                       local String       _dstVar,
                       local boolean      _bGLSL,
                       local PointerArray _objDone
                       ) {

      local String varName <= getVarName();

      if(!b_init_done)
      {
         b_init_done = true;

         local String sGlobal;
         local String sDrawPre;

         if(!current_project.b_emit_uses_mouse_pos)
         {
            current_project.b_emit_uses_mouse_pos = true;
            sGlobal.append("float g_mouse_pos_x;\n");
            sGlobal.append("float g_mouse_pos_y;\n");
         }

         sGlobal.append(getScriptTypeName()+" "+varName+";\n");
         sDrawPre.append(varName+".x = g_mouse_pos_x;\n");
         sDrawPre.append(varName+".y = g_mouse_pos_y;\n");

         _module.appendGlobal(sGlobal);
         _module.appendDrawPre(sDrawPre);
      }

      switch(_outputId)
      {
         case GOutput.OUT_DEF:
            _out.append(_dstVar+" = "+varName+";\n");
            break;

         case "x":
            _out.append(_dstVar+" = "+varName+".x;\n");
            break;

         case "y":
            _out.append(_dstVar+" = "+varName+".y;\n");
            break;
      }
   }
}


// <class.png>
class GArgVec2MouseDelta : GArg {


   // <method.png>
   public virtual initIO() {
      GArg::initIO();
      addOutput("x", TYPE_FLOAT);
      addOutput("y", TYPE_FLOAT);
   }

   // <method_get.png>
   public virtual getInitialArgType() : int {
      return TYPE_VEC2;
   }

   // <method_get.png>
   public virtual getPreferredIdPrefix() : String {
      return "mouse_delta";
   }

   // <method.png>
   public virtual emit(local String       _outputId,
                       local GModule      _module,
                       local GProgram     _program,
                       local String       _out,
                       local String       _dstVar,
                       local boolean      _bGLSL,
                       local PointerArray _objDone
                       ) {

      local String varName <= getVarName();

      if(!b_init_done)
      {
         b_init_done = true;

         local String sGlobal;
         local String sDrawPre;

         if(!current_project.b_emit_uses_mouse_delta)
         {
            current_project.b_emit_uses_mouse_delta = true;
            sGlobal.append("float g_mouse_delta_x;\n");
            sGlobal.append("float g_mouse_delta_y;\n");
         }

         sGlobal.append(getScriptTypeName()+" "+varName+";\n");
         sDrawPre.append(varName+".x = g_mouse_delta_x;\n");
         sDrawPre.append(varName+".y = g_mouse_delta_y;\n");

         _module.appendGlobal(sGlobal);
         _module.appendDrawPre(sDrawPre);
      }

      switch(_outputId)
      {
         case GOutput.OUT_DEF:
            _out.append(_dstVar+" = "+varName+";\n");
            break;

         case "x":
            _out.append(_dstVar+" = "+varName+".x;\n");
            break;

         case "y":
            _out.append(_dstVar+" = "+varName+".y;\n");
            break;
      }
   }
}


// <class.png>
class GArgVec2MouseNorm : GArg {
   // (note) (0;0) = screen center, (-1;-1) = left/bottom


   // <method.png>
   public virtual initIO() {
      GArg::initIO();
      addOutput("x", TYPE_FLOAT);
      addOutput("y", TYPE_FLOAT);
   }

   // <method_get.png>
   public virtual getInitialArgType() : int {
      return TYPE_VEC2;
   }

   // <method_get.png>
   public virtual getPreferredIdPrefix() : String {
      return "mouse_norm";
   }

   // <method.png>
   public virtual emit(local String       _outputId,
                       local GModule      _module,
                       local GProgram     _program,
                       local String       _out,
                       local String       _dstVar,
                       local boolean      _bGLSL,
                       local PointerArray _objDone
                       ) {

      local String varName <= getVarName();

      if(!b_init_done)
      {
         b_init_done = true;

         local String sGlobal;
         local String sDrawPre;

         if(!current_project.b_emit_uses_mouse_norm)
         {
            current_project.b_emit_uses_mouse_norm = true;
            sGlobal.append("float g_mouse_norm_x;\n");
            sGlobal.append("float g_mouse_norm_y;\n");
         }

         sGlobal.append(getScriptTypeName()+" "+varName+";\n");
         sDrawPre.append(varName+".x = g_mouse_norm_x;\n");
         sDrawPre.append(varName+".y = g_mouse_norm_y;\n");

         _module.appendGlobal(sGlobal);
         _module.appendDrawPre(sDrawPre);
      }

      _out.append(_dstVar+" = "+varName+";\n");

      switch(_outputId)
      {
         case GOutput.OUT_DEF:
            _out.append(_dstVar+" = "+varName+";\n");
            break;

         case "x":
            _out.append(_dstVar+" = "+varName+".x;\n");
            break;

         case "y":
            _out.append(_dstVar+" = "+varName+".y;\n");
            break;
      }
   }
}


// <class.png>
class GArgVec4MouseButtons : GArg {
   // x=LMB, y=RMB, z=MMB, w=wheel

   // <method.png>
   public virtual initIO() {
      GArg::initIO();
      addOutput("lmb"  , TYPE_FLOAT);
      addOutput("rmb",   TYPE_FLOAT);
      addOutput("mmb",   TYPE_FLOAT);
      addOutput("wheel", TYPE_FLOAT);
      addOutput("wheel_up",   TYPE_FLOAT);
      addOutput("wheel_down", TYPE_FLOAT);
   }

   // <method_get.png>
   public virtual getInitialArgType() : int {
      return TYPE_VEC4;
   }

   // <method_get.png>
   public virtual getPreferredIdPrefix() : String {
      return "mouse_buttons";
   }

   // <method.png>
   public virtual emit(local String       _outputId,
                       local GModule      _module,
                       local GProgram     _program,
                       local String       _out,
                       local String       _dstVar,
                       local boolean      _bGLSL,
                       local PointerArray _objDone
                       ) {

      local String varName <= getVarName();

      if(!b_init_done)
      {
         b_init_done = true;

         local String sGlobal;
         local String sDrawPre;

         if(!current_project.b_emit_uses_mouse_buttons)
         {
            current_project.b_emit_uses_mouse_buttons = true;
            sGlobal.append("float g_mouse_buttons_x;\n");
            sGlobal.append("float g_mouse_buttons_y;\n");
            sGlobal.append("float g_mouse_buttons_z;\n");
            sGlobal.append("float g_mouse_buttons_w;\n");
         }

         sGlobal.append(getScriptTypeName()+" "+varName+";\n");
         sDrawPre.append(varName+".x = g_mouse_buttons_x;\n");
         sDrawPre.append(varName+".y = g_mouse_buttons_y;\n");
         sDrawPre.append(varName+".z = g_mouse_buttons_z;\n");
         sDrawPre.append(varName+".w = g_mouse_buttons_w;\n");

         _module.appendGlobal(sGlobal);
         _module.appendDrawPre(sDrawPre);
      }

      switch(_outputId)
      {
         case GOutput.OUT_DEF:
            _out.append(_dstVar+" = "+varName+";\n");
            break;

         case "lmb":
            _out.append(_dstVar+" = "+varName+".x;\n");
            break;

         case "rmb":
            _out.append(_dstVar+" = "+varName+".y;\n");
            break;

         case "mmb":
            _out.append(_dstVar+" = "+varName+".z;\n");
            break;

         case "wheel":
            _out.append(_dstVar+" = "+varName+".w;\n");
            break;

         case "wheel_up":
            _out.append(_dstVar+" = ("+varName+".w > 0.0) ? 1.0 : 0.0;\n");
            break;

         case "wheel_down":
            _out.append(_dstVar+" = ("+varName+".w < 0.0) ? 1.0 : 0.0;\n");
            break;
      }
   }
}
