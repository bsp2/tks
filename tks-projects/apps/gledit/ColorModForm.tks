// ----
// ---- file   : ColorModForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL Edit" application.
// ----
// ---- created: 26Jul2020
// ---- changed:
// ----
// ----
// ----

module MColorModForm;

use namespace ui;


// <class.png>
class ColorModForm : XMLForm, ActionProvider {
   define String ACTION_EDITED;

   protected ColorMod *cmod;

   protected CheckBox    *cb_enable;
   protected FloatParam  *fp_hue_mul;
   protected FloatParam  *fp_hue_add;
   protected FloatParam  *fp_sat_mul;
   protected FloatParam  *fp_sat_add;
   protected FloatParam  *fp_val_mul;
   protected FloatParam  *fp_val_add;
   protected FloatParam  *fp_brightness;
   protected FloatParam  *fp_contrast;
   protected FloatParam  *fp_r;
   protected FloatParam  *fp_g;
   protected FloatParam  *fp_b;


   // <ui_init.png>
   public method initColorModForm() : boolean {

      if(!initPakFile("ColorModForm.xfm"))
         return false;

      autoResolveIds(this);
      recursiveSetEnableCursorKeyTabCycling(false);
      return true;
   }

   // <ui_show.png>
   public method showColorMod(ColorMod _cmod) {
      cmod <= _cmod;

      cb_enable    .setSelected(cmod.b_enable);
      fp_hue_mul   .setValue(cmod.mod_hue_mul);
      fp_hue_add   .setValue(cmod.mod_hue_add);
      fp_sat_mul   .setValue(cmod.mod_saturation_mul);
      fp_sat_add   .setValue(cmod.mod_saturation_add);
      fp_val_mul   .setValue(cmod.mod_value_mul);
      fp_val_add   .setValue(cmod.mod_value_add);
      fp_brightness.setValue(cmod.mod_brightness);
      fp_contrast  .setValue(cmod.mod_contrast);
      fp_r         .setValue(cmod.mod_r);
      fp_g         .setValue(cmod.mod_g);
      fp_b         .setValue(cmod.mod_b);
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      _retLayers.joinRR(_retLayers,
                        [
                           cb_enable,
                           fp_hue_mul,
                           fp_hue_add,
                           fp_sat_mul,
                           fp_sat_add,
                           fp_val_mul,
                           fp_val_add,
                           fp_brightness,
                           fp_contrast,
                           fp_r,
                           fp_g,
                           fp_b,
                         ]
                        );
   }

   // <ui.png>
   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_EDITED];
   }

   // <method.png>
   protected method provideEdited() {
      provideAction(Action.New(getProvidedActionAlias(ACTION_EDITED), this));
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      // // trace "xxx ColorModForm::consumeAction: acName=\""+acName+"\".";

      switch(@(ap))
      {
         case @(cb_enable):
            cmod.b_enable = cb_enable.isSelected();
            Global.Print("Color modulation is "+Utils.GetEnableString(cmod.b_enable));
            provideEdited();
            return true;

         case @(fp_hue_mul):
            cmod.mod_hue_mul = fp_hue_mul.getFloatValue();
            Global.Print("Hue Factor is "+cmod.mod_hue_mul);
            provideEdited();
            return true;

         case @(fp_hue_add):
            cmod.mod_hue_add = fp_hue_add.getFloatValue();
            Global.Print("Hue Shift is "+cmod.mod_hue_add);
            provideEdited();
            return true;

         case @(fp_sat_mul):
            cmod.mod_saturation_mul = fp_sat_mul.getFloatValue();
            Global.Print("Saturation Factor is "+cmod.mod_saturation_mul);
            provideEdited();
            return true;

         case @(fp_sat_add):
            cmod.mod_saturation_add = fp_sat_add.getFloatValue();
            Global.Print("Saturation Shift is "+cmod.mod_saturation_add);
            provideEdited();
            return true;

         case @(fp_val_mul):
            cmod.mod_value_mul = fp_val_mul.getFloatValue();
            Global.Print("Value Factor is "+cmod.mod_value_mul);
            provideEdited();
            return true;

         case @(fp_val_add):
            cmod.mod_value_add = fp_val_add.getFloatValue();
            Global.Print("Value Shift is "+cmod.mod_value_add);
            provideEdited();
            return true;

         case @(fp_brightness):
            cmod.mod_brightness = fp_brightness.getFloatValue();
            Global.Print("Brightness is "+cmod.mod_brightness);
            provideEdited();
            return true;

         case @(fp_contrast):
            cmod.mod_contrast = fp_contrast.getFloatValue();
            Global.Print("Contrast is "+cmod.mod_contrast);
            provideEdited();
            return true;

         case @(fp_r):
            cmod.mod_r = fp_r.getFloatValue();
            Global.Print("Red Factor is "+cmod.mod_r);
            provideEdited();
            return true;

         case @(fp_g):
            cmod.mod_g = fp_g.getFloatValue();
            Global.Print("Green Factor is "+cmod.mod_g);
            provideEdited();
            return true;

         case @(fp_b):
            cmod.mod_b = fp_b.getFloatValue();
            Global.Print("Blue Factor is "+cmod.mod_b);
            provideEdited();
            return true;
      }
   }
}
