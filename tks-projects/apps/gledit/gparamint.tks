// ----
// ---- file   : gparamint.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 13Jun2020
// ---- changed: 14Jun2020, 15Jun2020, 20Jun2020, 26Jul2020, 08Aug2020, 12Aug2020
// ----
// ----
// ----
module MGParamInt;

use namespace ui;
use namespace gledit;


// <class.png>
class GParamInt : GParam {
   int value;
   int def_value;
   int min_value;
   int min_limit;
   int max_value;
   int max_limit;
   int ctr_value;
   int step;


   // <method_new.png>
   static New(String _id, String _caption, int _def, int _min, int _minLimit, int _max, int _maxLimit, int _ctr) {
      local GParamInt p;
      p.init(_id, _caption, _def, _min, _minLimit, _max, _maxLimit, _ctr);
      return deref p;
   }

   // <method_init.png>
   public method init(String _id, String _caption, int _def, int _min, int _minLimit, int _max, int _maxLimit, int _ctr) {
      initParam(_id, _caption);
      def_value = _def;
      min_value = _min;
      min_limit = _minLimit;
      max_value = _max;
      max_limit = _maxLimit;
      ctr_value = _ctr;
      value = def_value;
      step = 0;
   }

   // <method_set.png>
   public method setValue(int _val) {
      // trace "xxx GParamInt::setValue: val="+_val+" min="+min_value+" max="+max_value;
      if(_val < min_value)
      {
         min_value = _val;
         if(min_value < min_limit)
            min_value = min_limit;
      }
      if(_val > max_value)
      {
         max_value = _val;
         if(max_value > max_limit)
            max_value = max_limit;
      }
      value = mathClampi(_val, min_value, max_value);
   }

   // <method_get.png>
   public virtual getString() : String {
      return value;
   }

   // <method_set.png>
   public virtual copyParamValueFrom(GParam _o) {
      if(_o instanceof GParamInt)
      {
         GParamInt o <= _o;
         value     = o.value;
         min_value = o.min_value;
         max_value = o.max_value;
      }
   }

   // <save.png>
   public virtual saveStateParam(local Stream ofs) {
      GParam::saveStateParam(ofs);

      // Version
      ofs.i16 = 1;

      // Value
      ofs.i32 = value;
   }

   // <load.png>
   public virtual loadStateParam(local Stream ifs) : boolean {
      // (note) base class param info is loaded by LoadStateParam

      // Version
      short ver = ifs.u16;

      if(1 <= ver <= 1)
      {
         // Value
         value = ifs.i32;

         // Succeeded
         return true;
      }
      else
      {
         trace "[---] GParamInt::loadStateParam: invalid version "+ver;
      }
      return false;
   }

}
