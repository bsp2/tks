// ----
// ---- file   : gconnectioncontainer.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 12Aug2020
// ---- changed: 13Aug2020
// ----
// ----
// ----
module MGConnectionContainer;

use namespace ui;
use namespace gledit;


// <class.png>
class GConnectionContainer {

   define int MAX_CONTAINER_CONNECTIONS = 128;


   // <method_set.png>
   public method containerSetForcedConnectionOrProbe(GConnection _conn, boolean _bProbe) {
      // bProbe: true=check if forced connection can be toggled
   }

   // <method_set.png>
   public method containerSetForcedConnection(GConnection _conn) {
      // when 's' is pressed in inputs table
      containerSetForcedConnectionOrProbe(_conn, false/*bProbe*/);
   }

   // <method_find.png>
   public method containerFindConnectionByObject(GObject _obj) : GConnection {
      return null;
   }

   // <method_get.png>
   public method containerCanToggleForcedConnection(GConnection _conn) : boolean {
      return containerSetForcedConnectionOrProbe(_conn, true/*bProbe*/);
   }

   // <method_get.png>
   public method containerGetNumActiveConnections() : int {
      return 0;
   }

   // <method_get.png>
   public method containerGetActiveConnectionByIndex(int _idx) : GConnection {
      return null;
   }

   // <method_get.png>
   public method containerIsForcedConnection(GConnection _conn) : boolean {
      return false;
   }

   // <method_get.png>
   public method containerIsForcedConnectionObject(GObject _obj) : boolean {
      return (null != containerFindConnectionByObject(_obj));
   }

   // <method.png>
   public method containerToggleForcedConnection(GConnection _conn) : boolean {
      if(containerIsForcedConnection(_conn))
      {
         containerSetForcedConnection(null);
         return false;
      }
      else
      {
         containerSetForcedConnection(_conn);
         return true;
      }
   }

   // // <method_get.png>
   // public method containerGetConnectionType()

}
