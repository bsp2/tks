// ----
// ---- file   : GLSLSyntaxHighlighter.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2024-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 14Dec2024
// ---- changed: 15Dec2024, 18Dec2024, 22Dec2024, 11Jan2025, 13Jan2025, 15Jan2025, 31Jan2025
// ----          07Feb2025
// ----
// ----
// ----

module MGLSLSyntaxHighlighter;

use namespace ui;
use namespace gledit;


// <class.png>
class GLSLSyntaxHighlighter : TextViewSyntaxHighlighter {

   define int PAL_NONE      =  0;
   define int PAL_OTHER     =  1;   // "'
   define int PAL_TEXT      =  2;
   define int PAL_COMMENT   =  3;   // //removed
   define int PAL_COMMENT2  =  4;   // // spaced comment
   define int PAL_KEYWORD_1 =  5;   // in,out,param,.. 007b50 008858 008f5c 005040
   define int PAL_KEYWORD_2 =  6;   // #if,#else,..
   define int PAL_KEYWORD_3 =  7;   // sin,cos,abs,..  487eb9 0000ff 739256 6baa31
   define int PAL_KEYWORD_4 =  8;   // +,-,*,/,..
   define int PAL_ASSIGN    =  9;
   define int PAL_KEYWORD_5 = 10;   // <,>,! (after module name / keyword_3)
   define int PAL_VAR       = 11;   // $(MY_PARAM)  b47134 d1833c
   define int PAL_CONTROL   = 12;   // control flow (if,else,switch,while,do,break,continue,..) 7e4b78 9c5e95 b71ea4
   define int PAL_KEY       = 13;   // key=<value>
   define int PAL_FIELD     = 14;   // myarrayparam.myfield
   define int PAL_GLES3     = 15;   // warning

   static IntArray pal_light = [
      0,          // PAL_NONE
      #ff747474,  // PAL_OTHER
      #ff444444,  // PAL_TEXT
      #ffcdcdcd,  // PAL_COMMENT
      #ffa6a6a6,  // PAL_COMMENT2
      #ff007049,  // PAL_KEYWORD_1
      #ff999999,  // PAL_KEYWORD_2
      #ff3e6da0,  // PAL_KEYWORD_3
      #fff03f3f,  // PAL_KEYWORD_4
      #ffb13f3f,  // PAL_ASSIGN
      #ffb13f3f,  // PAL_KEYWORD_5 (==PAL_ASSIGN)
      #ffb46924,  // PAL_VAR
      #ff7e3e76,  // PAL_CONTROL
      #ff3b3d3b,  // PAL_KEY
      #ff334375,  // PAL_FIELD
      #ff9f0000,  // PAL_GLES3
                                ];

   static IntArray pal_dark = [
      0,          // PAL_NONE
      #ff747474,  // PAL_OTHER
      #ffc2c2c2,  // PAL_TEXT
      #ff6d6d59,  // PAL_COMMENT
      #ffbbbb99,  // PAL_COMMENT2
      #ff99cccc,  // PAL_KEYWORD_1  vec2
      #ff686850,  // PAL_KEYWORD_2  #if
      #ffd0bbbb,  // PAL_KEYWORD_3  texture2D
      #ffffaa99,  // PAL_KEYWORD_4
      #ffffaa99,  // PAL_ASSIGN
      #ffb1dfff,  // PAL_KEYWORD_5 (==PAL_ASSIGN)
      #fff4f4bb,  // PAL_VAR
      #ffbbffff,  // PAL_CONTROL
      #ffbbddbb,  // PAL_KEY
      #ffc29ca3,  // PAL_FIELD
      #ffffa366,  // PAL_GLES3
                                ];

   static StringArray a_keywords_1 = [
      "in",
      "out",
      "param",

      "bool",
      "int",
      "uint",
      "ivec2",
      "ivec3",
      "ivec4",
      "float",
      "vec2",
      "vec3",
      "vec4",
      "mat2",
      "mat2x3",
      "mat3x2",
      "mat3",
      "mat3x4",
      "mat4x3",
      "mat4",

      "sampler2D",
      "sampler2DArray",
      "sampler2DArrayShadow",
      "sampler2DMS",
      "sampler2DShadow",
      "sampler3D",
      "samplerCube",
      "samplerCubeShadow",
                                      ];

   static StringArray a_keywords_2 = [
      "#version",  // never used (auto-prepended by ZGLShader)
      "#if", "#else", "#endif",
                                      ];

   static StringArray a_keywords_3 = [
      // trigonometric
      "radians",
      "degrees",
      "sin",
      "cos",
      "tan",
      "asin",
      "acos",
      "atan",

      // exponential
      "pow",
      "exp",
      "log",
      "exp2",
      "log2",
      "sqrt",
      "inversesqrt",

      // common
      "abs",
      "sign",
      "floor",
      "ceil",
      "fract",
      "mod",
      "min",
      "max",
      "clamp",
      "mix",
      "step",
      "smoothstep",

      // geometric
      "length",
      "distance",
      "dot",
      "cross",
      "normalize",
      "faceforward",
      "reflect",

      // matrix
      "matrixCompMult",

      // relational
      "lessThan",
      "lessThanEqual",
      "greaterThan",
      "greaterThanEqual",
      "equal",
      "notEqual",
      "any",
      "all",
      "not",

      // texture
      "texture2D",
      "texture2DProj",
      "texture2DProjLod",
      "textureCube",
      "textureCubeLod",
                                      ];

   static StringArray a_keywords_4 = [
      "+", "-", "*",
      "+=", "-=", "*=", "/=",
      "&", "|", "^",
      ///"&&", "||", "^^", "!&", "!|", "!^",
      ".",
                                      ];

   static StringArray a_keywords_5 = [
      "<", ">", "!",
                                      ];

   static StringArray a_keywords_control = [
      ///"note", "spd", "vel",
      "if", "else", "switch", "for", "do", "while",
      "break", "continue",
      "{", "}",
                                         ];

   static StringArray a_keywords_gles3 = [
      // (todo) complete list
      "texture", "textureSize", "inverse", "transpose",
      "%", "~",
                                         ];


   // <method.png>
   // static int dbg_count;
   public virtual colorizeText(TextView _text) {
      int numRows = _text.getNumRows();
      // trace "xxx ["+(dbg_count++)+"] GLSLSyntaxHighlighter::colorizeText: numRows="+numRows;

      local IntArray aRanges;
      local StringArray aTok;

      IntArray pal <= UI.IsDarkOrMono() ? pal_dark : pal_light;

      String *sLine;
      IntArray *aColors;
      int rowIdx = 0;
      loop(numRows)
      {
         sLine <= _text.getVisibleRowStringByIndex(rowIdx);
         if(null != sLine)
         {
            sLine.tokenizeWithRanges(" \t=~<>()[]{}*+&|^,;:", aRanges) => aTok;
            aColors <= _text.getVisibleRowColorsByIndex(rowIdx);
            aColors.fill(pal.get(PAL_OTHER));
            // trace "aTok="+#(aTok);
            // trace "aRanges="+#(aRanges);

            int palIdxComment = 0;
            boolean bVar = false;
            boolean bParam = false;
            // boolean bTemplate = false;
            String sTokP <= "";
            String sTokPP <= "";
            boolean bAllowKW12 = true;  // directive
            boolean bAllowKW3 = true;   // mod
            boolean bAllowKW4 = true;   // op
            boolean bAllowKW5 = true;//false;  // rel

            String *sTok;
            int tokOff = 0;
            foreach sTok in aTok
            {
               int startOff = aRanges.get(tokOff + 0);
               int numChars = aRanges.get(tokOff + 1);
               // trace "token["+(tokOff/2)+"] sTok=\""+sTok+"\"  substr=\""+sLine.substring(startOff, numChars)+"\"";
               int palIdx = PAL_TEXT;
               if(sTok <= "//")
               {
                  // // spaced comment ?
                  palIdxComment = (sTok.numChars > 2) ? PAL_COMMENT : PAL_COMMENT2;
               }
               if(palIdxComment)
                  palIdx = palIdxComment;
               else if(bVar)
               {
                  palIdx = PAL_VAR;
                  if(sTok == ")")
                     bVar = false;  // $(MYVAR) end
               }
               else if(bParam && 2*2 == tokOff)
                  palIdx = PAL_VAR;
               else if(sTok <= "$")
               {
                  palIdx = PAL_VAR;  // $(MYVAR) start
                  bVar = true;
               }
               // else if(sTok == "=" && tokOff >= 2)
               // {
               //    int startOffKey = aRanges.get(tokOff - 2);
               //    int numCharsKey = aRanges.get(tokOff - 1);
               //    aColors.fillRegion(startOffKey, numCharsKey, C32_KEY);
               //    c32 = C32_KEYWORD_4;
               // }
               else if(bAllowKW4 && a_keywords_4.containsObject(sTok))
               {
                  palIdx = PAL_KEYWORD_4;
                  // bAllowKW12 = false;
               }
               else if(bAllowKW12 && a_keywords_1.containsObject(sTok))
               {
                  palIdx = PAL_KEYWORD_1;
                  // bAllowKW12 = false;
                  // bAllowKW3 = false;
                  // bAllowKW4 = false;
                  if(sTok == "param")
                     bParam = true;
               }
               else if(bAllowKW12 && a_keywords_2.containsObject(sTok))
               {
                  palIdx = PAL_KEYWORD_2;
                  // bAllowKW12 = false;
                  // bAllowKW3 = false;
                  // bAllowKW4 = false;
               }
               else if(bAllowKW3 /*&& "=" != sTokP*/ && a_keywords_3.containsObject(sTok))
               {
                  palIdx = PAL_KEYWORD_3;
                  // // // bAllowKW12 = false;
                  // bAllowKW3 = false;
                  // bAllowKW5 = true;
                  // bAllowKW4 = false;
               }
               else if(bAllowKW5 && a_keywords_5.containsObject(sTok))
               {
                  palIdx = PAL_KEYWORD_5;
               }
               else if("=" == sTok)
                  palIdx = PAL_ASSIGN;
               else if(a_keywords_control.containsObject(sTok))
                  palIdx = PAL_CONTROL;
               else if(sTok & "." && sTok.checkConversions() >= YAC_TYPE_STRING)
                  palIdx = PAL_FIELD;
               else if(a_keywords_gles3.containsObject(sTok))
                  palIdx = PAL_GLES3;
               else if("/" == sTok)
                  palIdx = PAL_KEYWORD_4;

               aColors.fillRegion(startOff, numChars, pal.get(palIdx));

               // Next token
               tokOff += 2;
               sTokPP <= sTokP;
               sTokP <= sTok;
            }

            // trace "xxx line["+rowIdx+"] sLine=\""+sLine+"\"";
            // trace "xxx line["+rowIdx+"] aColors="+aColors;

            // Next visible row
            rowIdx++;
         }
         else
            break;  // beyond end of text
      }
   }

}
