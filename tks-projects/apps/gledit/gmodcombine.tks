// ----
// ---- file   : gmodcombine.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 09Jul2020
// ---- changed: 09Aug2020, 14Aug2020
// ----
// ----
// ----
module MGModCombine;

use namespace ui;
use namespace gledit;


// <class.png>
class GModCombine : GMod, GParamProvider {
   // combines one or many input connections to one output


   // <method_init.png>
   public virtual init() {
      GMod::init();

      addParamChoiceIOType("io_type", "IO Type", TYPE_FLOAT);

      addInput(GInput.IN_DEF, TYPE_FLOAT);
      addOutput(GOutput.OUT_DEF, TYPE_FLOAT);
   }

   // <method_get.png>
   public virtual getPreferredIdPrefix() : String {
      return "combine";
   }

   // <ui_handle.png>
   public virtual handleParamChanged(String _paramId) {
      if("io_type" == _paramId)
      {
         updateIOType();
      }
   }

   // <method.png>
   protected method updateIOType() {
      GInput  input  <= getInputById(GInput.IN_DEF);
      GOutput output <= getOutputById(GOutput.OUT_DEF);
      input.type = getChoiceIOTypeParamById("io_type");
      output.type = input.type;

      // Update connections
      handleOutputTypeChanged(output);
   }

  // <save.png>
   public virtual saveStateObject(local Stream ofs, local GConnectionWriter connectionWriter) {
      GObject::saveStateObject(ofs, connectionWriter);

      // Version
      ofs.i16 = 1;

      // Params
      GParamProvider::saveStateParamProvider(ofs, connectionWriter);
   }

   // <load.png>
   public method loadStateObject(local Stream ifs) : boolean {
      // (note) base class object info is loaded by LoadStateObject

      // Version
      short ver = ifs.u16;

      if(1 <= ver <= 1)
      {
         if(GParamProvider::loadStateParamProvider(ifs))
         {
            updateIOType();

            // Succeeded
            return true;
         }
         else
         {
            trace "[---] GModCombine::loadStateObject: failed to load params, this="+#(this)+" path="+getObjectPath();
         }
      }
      else
      {
         trace "[---] GModCombine::loadStateObject: invalid version "+ver+", this="+#(this)+" path="+getObjectPath();
      }
      return false;
   }

   // <method.png>
   public virtual emit(local String       _outputId,
                       local GModule      _module,
                       local GProgram     _program,
                       local String       _out,
                       local String       _dstVar,
                       local boolean      _bGLSL,
                       local PointerArray _parents
                       ) {
      _parents.add(this);
      local GInput input <= getInputById(GInput.IN_DEF);
      input.emit(_module, _program, _out, _dstVar, _bGLSL, _parents);
      _parents.remove(this);
   }

}
