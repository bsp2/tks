// ----
// ---- file   : gport.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 12Jun2020
// ---- changed: 13Jun2020, 14Jun2020, 16Jun2020, 18Jun2020, 22Jun2020, 30Jun2020, 09Jul2020
// ----          10Jul2020, 02Aug2020, 09Aug2020, 12Aug2020
// ----
// ----
// ----
module MGPort;

use namespace ui;
use namespace gledit;


// <class.png>
class GPort : GBase {
   GObject *parent_object;
   int last_selected_connection_idx;

   GConnection *connections[];  // processed sequentially (GInput). empty=use default value


   // <method_init.png>
   public method initIdType(String _id, int _type) {
      id      = _id;
      type    = _type;
   }

   // <method_get.png>
   public method matchType(GPort _o) : boolean {
      // (todo) typecasts
      return (type == _o.type);
   }

   // <method_add.png>
   public method addConnection(GConnection _conn) {
      connections.add(#(deref _conn));
   }

   // <method_get.png>
   public method getNumActiveConnections() : boolean {
      int r = 0;
      if(!connections.isEmpty())
      {
         GConnection *conn;
         foreach conn in connections
         {
            if(conn.isEnabled())
            {
               GObject obj <= conn.object;
               if(obj.isEnabled())
                  r++;
            }
         }
      }
      return r;
   }

   // <method_get.png>
   public method isConnected() : boolean {
      return (getNumActiveConnections() > 0);
   }

   // <method.png>
   public method getNumConnections() : int {
      return connections.numElements;
   }

   // <method_set.png>
   public method getConnectionByIndex(int _idx) : GConnection {
      return connections.get(_idx);
   }

   // <method_set.png>
   public method getActiveConnectionByIndex(int _idx) : GConnection {
      GConnection *conn;
      int activeIdx = 0;
      foreach conn in connections
      {
         if(conn.isEnabled())
         {
            if(activeIdx == _idx)
               return conn;
            activeIdx++;
         }
      }
      return null;
   }

   // <method_set.png>
   public method findActiveConnectionIndex(GConnection _conn) : int {
      GConnection *conn;
      int activeIdx = 0;
      foreach conn in connections
      {
         if(conn.isEnabled())
         {
            if(@(conn) == @(_conn))
               return activeIdx;
            activeIdx++;
         }
      }
      return -1;
   }

   // <method_set.png>
   public method getLastConnection() : GConnection {
      return connections.last;
   }

   // <method_set.png>
   public method getLastSelectedConnection() : GConnection {
      return connections.get(last_selected_connection_idx);
   }

   // <method_find.png>
   public method findConnection(GObject _obj, String _outputPortId) : GConnection {
      GConnection *conn;
      foreach conn in connections
      {
         if( (@(conn.object) == @(_obj)) && (conn.port_id == _outputPortId) )
            return conn;
      }
      return null;
   }

   // <method_get.png>
   public method getFirstConnectedObjectByType(GObject _type) : GObject {
      GConnection *conn;
      foreach conn in connections
      {
         if(conn.isEnabled())
         {
            if(conn.object instanceof _type)
               return conn.object;
         }
      }
      return null;
   }

   // <method.png>
   public method moveConnectionAfter(GConnection _prevConn, GConnection _conn) {
      int prevConnIdx = connections.indexOfPointer(_prevConn, 0);
      if(-1 != prevConnIdx)
      {
         int connIdx = connections.indexOfPointer(_conn, 0);
         if(-1 != connIdx)
         {
            GConnection conn <= connections.getDeref(connIdx);
            connections.delete(connIdx);
            if(prevConnIdx > connIdx)
               prevConnIdx--;
            connections.insert(prevConnIdx+1, #(deref conn));
         }
      }
   }

   // <method.png>
   public method getConnectionInfoString() : String {
      if(!connections.isEmpty())
      {
         GConnection conn <= connections.get(0);
         return connections.numElements+" connection"+Utils.GetPluralString(connections.numElements)+", first="+(conn.object.getObjectPath());
      }
      else
         return "- no connections -";
   }

}
