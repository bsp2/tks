// ----
// ---- file   : gmodule.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 12Jun2020
// ---- changed: 13Jun2020, 16Jun2020, 01Jul2020, 03Jul2020, 09Jul2020, 19Jul2020, 22Jul2020
// ----          25Jul2020, 28Jul2020, 31Jul2020, 10Aug2020, 12Aug2020, 18Sep2025
// ----
// ----
// ----
module MGModule;

use namespace ui;
use namespace gledit;


// <class.png>
class GModuleSection {
   String  s_section_name;
   String  s_section_global;
   String  s_section_functions;
   String  s_section_init;
   String  s_section_draw_pre;
   String  s_section_draw_post;
   String  s_section_exit;

   String  extra_draw_args;  // empty, or "Matrix4f _transform" for model draw call
   boolean b_draw;           // true = emit Draw() function


   // <method.png>
   public method begin(String _name) {
      s_section_name <= deref _name;
      s_section_global.empty();
      s_section_functions.empty();
      s_section_init.empty();
      s_section_draw_pre.empty();
      s_section_draw_post.empty();
      s_section_exit.empty();
      extra_draw_args.empty();
      b_draw = true;
   }

   // <method_add.png>
   public method appendGlobal(String _s) {
      s_section_global.append(_s);
   }


   // <method_add.png>
   public method appendFunction(String _s) {
      s_section_functions.append(_s);
   }

   // <method_add.png>
   public method appendInit(String _s) {
      s_section_init.append(_s);
   }

   // <method_add.png>
   public method appendDrawPre(String _s) {
      s_section_draw_pre.append(_s);
   }

   // <method_add.png>
   public method appendDrawPost(String _s) {
      s_section_draw_post.append(_s);
   }

   // <method_add.png>
   public method appendExit(String _s) {
      s_section_exit.append(_s);
   }
}


// <class.png>
class GModule {
   define int SECTION_STACK_DEPTH = 8;
   define int MAX_GLOBAL_ONCE_KEYS = 300;

   protected String s_global;
   protected String s_functions;
   protected String s_draw_pre;
   protected String s_draw_post;
   protected String s_init;
   protected String s_exit;
   protected String s_load;  // during export

   protected Stack sections;

   protected GModuleSection *cur_section;

   public String s_src;

   protected int next_tmp_var_id;
   protected int next_tmp_var_id_script;

   protected int next_tmp_fxn_id;

   protected HashTable global_once;


   // <method.png>
   public method emitBegin() {
      s_global.empty();
      s_init.empty();
      s_functions.empty();
      s_draw_pre.empty();
      s_draw_post.empty();
      s_exit.empty();
      s_load.empty();
      global_once.alloc(MAX_GLOBAL_ONCE_KEYS);

      sections.template = GModuleSection;
      sections.size     = SECTION_STACK_DEPTH;

      cur_section <= null;

      next_tmp_var_id = 1;
      next_tmp_var_id_script = 1;

      next_tmp_fxn_id = 1;

      s_global.append("//\n// auto-generated by "+Global.VERSION_STRING+" on "+Utils.GetCurrentDateTimeStringNumeric()+"\n//\n");

      if(current_project.b_export)
      {
         s_global.append("module M"+current_project.project_name+";\n\n");
      }

      s_global.append("use tksdl;\n");
      s_global.append("use tkopengl;\n");
      s_global.append("use tkmath;\n");
      if(current_project.b_export)
         s_global.append("use tkzip;\n");
      s_global.append("\n");
      s_global.append("boolean b_glcore = getenv(\"TKSDL_GLCORE\");\n");
      s_global.append("int vao_id;\n");
      s_global.append("\n");
      s_global.append("float g_time;\n");
      s_global.append("int g_default_fb;\n");
      s_global.append("int g_default_vp_x;\n");
      s_global.append("int g_default_vp_y;\n");
      s_global.append("int g_default_vp_w;\n");
      s_global.append("int g_default_vp_h;\n");
      s_global.append("float g_dt;\n");
      s_global.append("int last_model_id;    // (note) set to 0 to force attrib/buffer rebind\n");
      s_global.append("int last_program_id;  // (note) set to 0 to force program rebind\n");
      s_global.append("boolean g_init;\n");
      s_global.append("int g_tri_count;\n");

      if(current_project.b_export)
      {
        s_global.append(
        "class OrbitCamView { float ctr_x; float ctr_y; float ctr_z; float rot_x; float rot_y; float rot_z; float eye_dist; }\n"
        );
      }
      else
      {
         s_global.append("OrbitCamView *g_edit_cam;\n");
      }

      s_draw_pre.append("last_model_id   = 0;\n");
      s_draw_pre.append("last_program_id = 0;\n");
      s_draw_pre.append("g_tri_count     = 0;  // debug: total number of triangles\n");
   }

   // <method.png>
   public method allocTmpVar(String _out, int _type, String _prefix) : String {
      local String tmpVar <= "tmp"+(next_tmp_var_id++)+"_"+_prefix;
      // declare var
      _out.append(GDefs.GetGLSLTypeName(_type)+" "+tmpVar+";\n");
      return deref tmpVar;
   }

   // <method.png>
   public method allocTmpVarScript(String _out, int _type, String _prefix) : String {
      local String tmpVar <= "tmp"+(next_tmp_var_id_script++)+"_"+_prefix;
      // declare var
      _out.append(/*"local "+*/GDefs.GetScriptTypeName(_type)+" "+tmpVar+";\n");
      return deref tmpVar;
   }

   // <method.png>
   public method allocTmpVarScriptByStringType(String _out, String _type, String _prefix) : String {
      local String tmpVar <= "tmp"+(next_tmp_var_id_script++)+"_"+_prefix;
      // declare var
      _out.append(/*"local "+*/_type+" "+tmpVar+";\n");
      return deref tmpVar;
   }

   // <method.png>
   public method allocTmpFxn(String _prefix) : String {
      return "fxn"+(next_tmp_fxn_id++)+"_"+_prefix;
   }

   // <method.png>
   public method allocGlobalVarScript(GObject _obj, int _type, String _prefix, String _init) : String {
      local String gVar <= "g_"+_obj.getVarName()+"_"+_prefix;
      // declare var
      appendGlobal(GDefs.GetScriptTypeName(_type)+" "+gVar);
      if(null != _init)
         appendGlobal(" = "+_init);
      appendGlobal(";\n");
      return deref gVar;
   }

   // <method.png>
   public method emitEnd() {

      // trace "\n\n\n=========================xxx GModule::emitEnd:";

      s_src = s_global;
      s_src.append("\n");
      // s_global.saveLocal("t.tks");

      s_src.append(s_functions);
      s_src.append("\n");

      s_src.append("function Init() {\n");
      s_src.append("\n");
      s_src.append("if(b_glcore)\n");
      s_src.append("   vao_id = zglGenVertexArray();\n");
      s_src.append("\n");

      Utils.AppendIndentedLines(s_src, s_init, 3);
      s_src.append("   return true;\n}\n\n");

      s_src.append("function Exit() {\n");
      Utils.AppendIndentedLines(s_src, s_exit, 3);
      s_src.append("\n");
      s_src.append("if(b_glcore)\n");
      s_src.append("   zglDeleteVertexArray(vao_id);\n");
      s_src.append("\n");
      s_src.append("}\n\n");

      s_src.append("function Draw() {\n");
      s_src.append("   if(b_glcore)\n");
      s_src.append("      glBindVertexArray(vao_id);\n");
      s_src.append("   glEnable(GL_CULL_FACE);\n");
      s_src.append("   glCullFace(GL_BACK);\n");
      s_src.append("   glFrontFace(GL_CW);\n");
      // // s_src.append("   glClear(GL_DEPTH_BUFFER_BIT);\n");
      // s_src.append("   glEnable(GL_DEPTH_TEST);\n");
      s_src.append("   glDisable(GL_DEPTH_TEST);\n");
      s_src.append("   glDepthMask(GL_TRUE);\n");
      s_src.append("   glDepthFunc(GL_LESS);\n");
      s_src.append("   // <draw_pre>\n");
      Utils.AppendIndentedLines(s_src, s_draw_pre, 3);
      s_src.append("   // <draw_post>\n");
      s_draw_post.append("glUseProgram(0);\n");
      s_draw_post.append("glBindBuffer(GL_ARRAY_BUFFER, 0);\n");
      s_draw_post.append("glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);\n");
      s_draw_post.append("g_init = false;\n");
      // s_draw_post.append("if(b_glcore)\n");
      // s_draw_post.append("  glBindVertexArray(0);\n");
      Utils.AppendIndentedLines(s_src, s_draw_post, 3);
      // s_src.append(" trace \"xxx ext_default_global_time=\"+ext_default_global_time;\n");
      s_src.append("}\n\n");

      // Load
      if(current_project.b_export)
      {
         s_src.append("\nfunction Load(String _zipPathNamePrefix) {\n");
         s_src.append("   local Zip zip;\n");
         s_src.append("   if(zip.openLocalReadOnly(_zipPathNamePrefix+\""+current_project.project_name+".zip\"))\n");
         s_src.append("   {\n");
         s_src.append("      local Buffer *b;\n");
         Utils.AppendIndentedLines(s_src, s_load, 6);
         s_src.append("   }\n");
         s_src.append("   else\n   {\n      trace \"[---] M"+current_project.project_name+".Load: failed to open \"+_zipPathNamePrefix+\""+current_project.project_name+".zip\";\n   }\n");
         s_src.append("   g_init = true;\n");
         s_src.append("   g_default_vp_w = "+(current_project.screen.width)+";\n");
         s_src.append("   g_default_vp_h = "+(current_project.screen.height)+";\n");
         s_src.append("}\n");
      }
   }

   // <method.png>
   public method beginSection(String _name) {
      // trace "xxx ++++++++++++++++++++++ beginSection \""+_name+"\"";
      cur_section <= sections.push();
      cur_section.begin(deref _name);
   }

   // <method_set.png>
   public method setSectionExtraDrawArgs(String _args) {
      cur_section.extra_draw_args = _args;
   }

   // <method_set.png>
   public method setSectionEnableDraw(boolean _bEnable) {
      cur_section.b_draw = _bEnable;
   }

   // <method.png>
   public method endSection() {
      // trace "xxx ...................... endSection \""+cur_section.s_section_name+"\"";

      // Global
      s_global.append("\n// -------- section \""+cur_section.s_section_name+"\" --------\n");
      s_global.append(cur_section.s_section_global);
      // trace "xxx endSection: s_global=>>>"+s_global+"<<<";

      // Functions
      s_functions.append(cur_section.s_section_functions);

      // Init
      s_functions.append("\nfunction Init_"+cur_section.s_section_name+"() {\n");
      Utils.AppendIndentedLines(s_functions, cur_section.s_section_init, 3);
      s_functions.append("   return true;\n");
      s_functions.append("}\n");
      s_init.append("if(!Init_"+cur_section.s_section_name+"()) return false;\n");

      // Draw
      if(cur_section.b_draw)
      {
         s_functions.append("\nfunction Draw_"+cur_section.s_section_name+"(int _fbW, int _fbH");
         if!(cur_section.extra_draw_args.isBlank())
            s_functions.append(", "+cur_section.extra_draw_args);  // e.g. "Matrix4f _transform" (GModel)
         s_functions.append(") {\n");
         s_functions.append("   // <draw_pre>\n");
         Utils.AppendIndentedLines(s_functions, cur_section.s_section_draw_pre, 3);
         s_functions.append("\n   // <draw_post>\n");
         Utils.AppendIndentedLines(s_functions, cur_section.s_section_draw_post, 3);
         s_functions.append("}\n");
         // // s_draw_pre.append("Draw_"+s_section_name+"(_t);\n");  // see e.g. GModel::emitCallDraw()
      }

      // Exit
      s_functions.append("\nfunction Exit_"+cur_section.s_section_name+"() {\n");
      Utils.AppendIndentedLines(s_functions, cur_section.s_section_exit, 3);
      s_functions.append("}\n");
      s_exit.append("Exit_"+cur_section.s_section_name+"();\n");

      cur_section <= sections.pop();
   }

   // <method_add.png>
   public method appendGlobal(String _s) {
      // trace "xxx appendGlobal: cur_section="+#(cur_section);
      // trace "xxx appendGlobal: cur_section.s_section_name="+#(cur_section.s_section_name)+" s_section_global.num="+(cur_section.s_section_global.numChars)+" cur_section.s_section_global.len="+(cur_section.s_section_global.numChars)+" s=\""+_s+"\"";
      if(null != cur_section)
         cur_section.appendGlobal(_s);
      else
         s_global.append(_s);
   }

   // <method_add.png>
   public method appendGlobalOnce(String _key, String _s) {
      if!(global_once.exists(_key))
      {
         global_once[_key] = true;
         appendGlobal(deref _s);
      }
   }

   // <method_add.png>
   public method appendFunction(String _s) {
      if(null != cur_section)
         cur_section.appendFunction(_s);
      else
         s_functions.append(_s);
   }

   // <method_add.png>
   public method appendDrawPre(String _s) {
      if(null != cur_section)
         cur_section.appendDrawPre(_s);
      else
         s_draw_pre.append(_s);
   }

   // <method_add.png>
   public method appendDrawPost(String _s) {
      if(null != cur_section)
         cur_section.appendDrawPost(_s);
      else
         s_draw_post.append(_s);
   }

   // <method_add.png>
   public method appendInit(String _s) {
      if(null != cur_section)
         cur_section.appendInit(_s);
      else
         s_init.append(_s);
   }

   // <method_add.png>
   public method appendExit(String _s) {
      if(null != cur_section)
         cur_section.appendExit(_s);
      else
         s_exit.append(_s);
   }

   // <method_add.png>
   public method appendLoad(String _s) {
      // during export
      s_load.append(_s);
   }

   // <method.png>
   public method emitModule(GModule _module) {
   }

}
