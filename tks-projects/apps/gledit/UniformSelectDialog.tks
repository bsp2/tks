// ----
// ---- file   : UniformSelectDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 01Aug2020
// ---- changed: 04Feb2025
// ----
// ----
// ----

module MUniformSelectDialog;

use namespace ui;
use namespace gledit;


// <class.png>
class UniformSelectDialog extends Dialog, ActionProvider {

   define String ACTION_SELECT;
   define String ACTION_CANCEL;

   protected XMLForm   *xfm;

   protected ActionConsumer *recipient;
   protected GModel *model;

   protected UniformSelectTM  tm_select;
   public    TableView       *tv_select;

   protected Button *bt_select;
   protected Button *bt_cancel;

   protected GUniform *[] entries;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("UniformSelectDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      tm_select.entries <= entries;
      tm_select.initTableModel();
      tv_select.setTableModel(tm_select);

      recursiveBuildTabCycleLists();

      initWindow(xfm, "Select Uniform", 100, 100,
                 360,
                 340
                 );

      // // recursiveSetLookAndFeel(LookAndFeel.LIGHT);

      return true;
   }

   // <method_set.png>
   public method setRecipient(ActionConsumer _ac) {
      recipient <= _ac;
   }

   // <method_get.png>
   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_SELECT, ACTION_CANCEL];
   }

   // <method_get.png>
   public virtual isPopup() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual isModal():boolean {
      return true;
   }

   // <method_get.png>
   public virtual isResizable() : boolean {
      return true;
   }

   // <ui_show.png>
   public method showUniformSelectDialog(ActionConsumer _recipient,
                                         String         _selectCaption,
                                         GModel         _model,
                                         GProgram       _program,
                                         String         _preferredUniformId
                                         ) {
      recipient <= _recipient;
      model <= _model;

      trace "[trc] UniformSelectDialog: preferredUniformId="+_preferredUniformId;

      entries.free();
      int preselRowIdx = 0;
      GUniform *uni;

      foreach uni in _program.uniforms
      {
         if(uni.getId() == _preferredUniformId)
            preselRowIdx = entries.numElements;
         entries.add(uni);
      }

      tv_select.tableModelChanged();
      tv_select.moveCursorToRow(preselRowIdx);
      tv_select.setLeadSelection(preselRowIdx);

      bt_select.setCaption(_selectCaption);

      showNearMouse(-100,-50);
   }

   // <ui_show.png>
   protected virtual preShow() {

      // // setWindowTitle("Select Object Type");

      if(!b_layer_postinit_done)
      {
         if(1 == entries.numElements)
            resizeToMinimum();
      }

      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();

      if(1 == tm_select.getNumRows())
         tv_select.setLeadSelection(0);
      UI.SetKeyboardFocus(tv_select);
   }

   // <ui_handle.png>
   protected method handleCancel() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         Action ac <= Action.New(getProvidedActionAlias(ACTION_CANCEL), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <ui_handle.png>
   protected method handleSelect() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         Action ac <= Action.New(getProvidedActionAlias(ACTION_SELECT), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <method_get.png>
   public method getSelectedUniform() : GUniform {
      return entries.get(tm_select.getCursorIndex());
   }

   // <method_get.png>
   public method getModel() : GModel {
      return model;
   }

   // <ui_kbd.png>
   public virtual onKey(Key _key) : boolean {
      switch(_key.pressed)
      {
         case VKEY_ESCAPE:
            handleCancel();
            return true;

         case VKEY_RETURN:
         case VKEY_SPACE:
            handleSelect();
            return true;

         default:
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();

      ////trace "xxx UniformSelectDialog: got action name="+name;

      switch(acName)
      {
         case "ok":
            handleSelect();
            break;

         case "cancel":
            handleCancel();
            break;
      }

      switch(@(_ac.getActionProvider()))
      {
         case @(bt_select):
             handleSelect();
             return true;

         case @(bt_cancel):
             handleCancel();
             return true;

         case @(tv_select):
            if(TableView.ACTION_ROWCLICKED == acName)
            {
               handleSelect();
            }
            return true;
      }

      return true;
   }

}
