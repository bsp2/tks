// ----
// ---- file   : ExportDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 03Aug2020
// ---- changed: 04Feb2025, 10Feb2025
// ----
// ----
// ----

module MExportDialog;

use namespace ui;
use namespace gledit;


// <class.png>
class ExportDialog extends Dialog {

   protected XMLForm *xfm;

   protected FloatParam *fp_fpslimit;
   protected CheckBox   *cb_vsync;
   protected CheckBox   *cb_gles2;
   protected CheckBox   *cb_deploy_helper;
   protected CheckBox   *cb_scp;
   protected Label      *lb_scpinfo;
   protected Button     *bt_export;
   protected Button     *bt_cancel;


   // <ui_init.png>
   public method initExportDialog() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("ExportDialog.xfm");
      if(null == xfm)
      {
         trace "[---] initExportDialog() failed";
         return false;
      }

      xfm.autoResolveIds(this);

      initWindow(xfm, "Export Project", 263*UI.font_scaling, 82*UI.font_scaling,
                 570*UI.font_scaling,
                 450*UI.font_scaling
                 );

      return true;
   }

   // <method_get.png>
   public virtual isModal():boolean {
      return true;
   }

   // <method_get.png>
   public virtual isResizable() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual isPopup() : boolean {
      return true;
   }

   // <ui_kbd.png>
   public virtual isEditable() : boolean {
      // => wantKeyboardFocus()
      return true;
   }

   // <ui_mouse.png>
   public virtual onMouseEnter(MouseEvent _ev) {
      refocusDefault();
   }

   // // <ui_mouse.png>
   // public virtual onMouseClick(MouseEvent _ev) {
   //    if(_ev.isRightButton())
   //    {
   //       return true;
   //    }
   //    return Dialog::onMouseClick(_ev);
   // }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {
      layers.joinRR(layers,
                    [
                       fp_fpslimit,
                       cb_vsync,
                       cb_deploy_helper,
                       cb_scp,
                       lb_scpinfo,
                       bt_export,
                       bt_cancel
                     ]
                    );
   }

   // <ui_kbd.png>
   public virtual getTabCycleOverrides() : PointerArray {
      PointerArray layers; layers.empty();
      addTabCycleOverrides(layers);
      return layers;
   }

   // <ui_show.png>
   public method showExportDialog() {

      // lb_scpinfo.setCaption(current_project.getSCPCmdLine());
      lb_scpinfo.setCaption("user="+GConfig.scp_user+"\nhost="+GConfig.scp_host+"\npath="+GConfig.scp_path);

      showNearMouse(-10, -10);
   }

   // <ui_show.png>
   public virtual postShow() {
      Dialog::postShow();

      resizeToMinimum();
      recursiveSetEnableCursorKeyTabCycling(false);
      refocusDefault();
   }

   // <ui_kbd.png>
   public method refocusDefault() {
      // // UI.SetKeyboardFocus(cm_mode);
      UI.SetKeyboardFocus(bt_export);
   }

   // <ui_hide.png>
   public virtual hide() {
      Dialog::hide();
   }

   // <ui_handle.png>
   protected method handleCancel() {
      hide();
   }

   // <ui_handle.png>
   protected method handleExport() {
      GConfig.b_apply_shader_version_during_export = cb_gles2.isSelected();

      current_project.exportToZip(fp_fpslimit.getFloatValue(),
                                  cb_vsync.isSelected(),
                                  cb_deploy_helper.isSelected(),
                                  cb_scp.isSelected()
                                  );

      hide();
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      // trace "xxx CurveImageImportDialog::onKey: pressed="+_k.pressed+" DOWN="+VKEY_DOWN;
      PageStart pgStart <= root_form.pg_start;

      switch(_k.pressed)
      {
         case VKEY_ESCAPE:
            hide();
            return true;
      }

      return Dialog::onKey(_k);
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      switch(@(ap))
      {
         case @(bt_export):
            handleExport();
            return true;

         case @(bt_cancel):
            handleCancel();
            return true;

         case @(fp_fpslimit):
            Global.Print("FPS Limit is "+fp_fpslimit.getFloatValue());
            return true;

         case @(cb_vsync):
            Global.Print("VSync is "+Utils.GetEnableString(cb_vsync.isSelected()));
            return true;

         case @(cb_deploy_helper):
            Global.Print("Deploy Helper is "+Utils.GetEnableString(cb_deploy_helper.isSelected()));
            return true;

         case @(cb_scp):
            Global.Print("SCP Deployment is "+Utils.GetEnableString(cb_scp.isSelected()));
            return true;
      }

      return Dialog::consumeAction(_action);
   }

}
