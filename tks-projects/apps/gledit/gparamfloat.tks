// ----
// ---- file   : gparamfloat.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 13Jun2020
// ---- changed: 14Jun2020, 15Jun2020, 20Jun2020, 02Jul2020, 11Jul2020, 20Jul2020, 26Jul2020
// ----          08Aug2020, 12Aug2020, 13Aug2020, 04Feb2025
// ----
// ----
// ----
module MGParamFloat;

use namespace ui;
use namespace gledit;


// <class.png>
class GParamFloat : GParam {
   float value;
   float def_value;
   float min_value;
   float min_limit;
   float max_value;
   float max_limit;
   float ctr_value;
   float step;

   boolean b_percent;  // display 0..1 as 0..100%
   boolean b_cyclic;   // true=wrap-around in min..max range


   // <method_new.png>
   static New(String _id, String _caption, float _def, float _min, float _minLimit, float _max, float _maxLimit, float _ctr) {
      local GParamFloat p;
      p.init(_id, _caption, _def, _min, _minLimit, _max, _maxLimit, _ctr);
      return deref p;
   }

   // <method_init.png>
   public method init(String _id, String _caption, float _def, float _min, float _minLimit, float _max, float _maxLimit, float _ctr) {
      initParam(_id, _caption);
      def_value = _def;
      min_value = _min;
      min_limit = _minLimit;
      max_value = _max;
      max_limit = _maxLimit;
      ctr_value = _ctr;
      value = def_value;
      step = 0;
   }

   // <method_set.png>
   public method setValue(float _val) {
      if(_val < min_value)
      {
         min_value = _val;
         if(min_value < min_limit)
            min_value = min_limit;
      }
      if(_val > max_value)
      {
         max_value = _val;
         if(max_value > max_limit)
            max_value = max_limit;
      }
      value = mathClampf(_val, min_value, max_value);
   }

   // <method_update.png>
   public method updateFromFloatParam(FloatParam _fp) {
      min_limit = _fp.getMinValueLimit();
      min_value = _fp.getMinValue();
      max_limit = _fp.getMaxValueLimit();
      max_value = _fp.getMaxValue();
      setValue(_fp.getFloatValue());
   }

   // <method_set.png>
   public method setEnablePercent(boolean _bEnable) {
      b_percent = _bEnable;
   }

   // <method_set.png>
   public method setEnableCyclic(boolean _bEnable) {
      b_cyclic = _bEnable;
   }

   // <method_get.png>
   public virtual getString() : String {
      return Utils.ToGLSLFloatString(value);
   }

   // <method_set.png>
   public virtual copyParamValueFrom(GParam _o) {
      if(_o instanceof GParamFloat)
      {
         GParamFloat o <= _o;
         // trace "xxx GParamFloat::copyParamValueFrom: old value="+value+" min="+min_value+" max="+max_value+"  NEW value="+o.value+" min="+o.min_value+" max="+o.max_value;
         value     = o.value;
         min_value = o.min_value;
         max_value = o.max_value;
      }
   }

   // <save.png>
   public virtual saveStateParam(local Stream ofs) {
      GParam::saveStateParam(ofs);

      // Version
      ofs.i16 = 2;

      // Value
      ofs.f32 = value;

      // Min/Max (user definable within min/max limit range) (v2+)
      ofs.f32 = min_value;
      ofs.f32 = max_value;
   }

   // <load.png>
   public virtual loadStateParam(local Stream ifs) : boolean {
      // (note) base class param info is loaded by LoadStateParam

      // Version
      short ver = ifs.u16;
      // trace "xxx loadStateParam: ver="+ver;

      if(1 <= ver <= 2)
      {
         // Value
         value = ifs.f32;

         if(ver >= 2)
         {
            // Min/Max (v2+)
            min_value = ifs.f32;
            max_value = ifs.f32;
            // (note) limits are 0;0 in temporary object
            // // // if(min_value < min_limit)
            // // //    min_value = min_limit;
            // // // if(max_value > max_limit)
            // // //    max_value = max_limit;
            // trace "xxx gparamfloat: load min="+min_value+" max="+max_value;
         }

         // Succeeded
         return true;
      }
      else
      {
         trace "[---] GParamFloat::loadStateParam: invalid version "+ver;
      }
      return false;
   }
}
