// ----
// ---- file   : gvarying.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 12Jun2020
// ---- changed: 13Jun2020, 15Jun2020, 16Jun2020, 17Jun2020, 03Jul2020, 01Aug2020, 14Aug2020
// ----          04Feb2025
// ----
// ----
// ----
module MGVarying;

use namespace ui;
use namespace gledit;


// <class.png>
class GVarying : GProgramSubObject {

   // <method_new.png>
   static New(String _id, int _type) : GVarying {
      local GVarying r;
      r.initIdType(_id, _type);
      return deref r;
   }

   // <method_get.png>
   public method getInitialVaryingType() : int {
      return TYPE_FLOAT;
   }

   // <method_init.png>
   public virtual init() {
      GObject::init();
      type = getInitialVaryingType();
      initIO();
   }

   // <method.png>
   public virtual initIO() {
      inputs.free();
      outputs.free();
      addInput(GInput.IN_DEF, type);
      addOutput(GOutput.OUT_DEF, type);
   }

   // <method.png>
   public virtual initIdType(String _id, int _type) {
      init();
      GObject::initIdType(_id, _type);
      initIO();
   }

   // <method_get.png>
   public virtual getInputDomain(String _inputId) : int {
      return DOMAIN_GLSL;
   }

   // <method_get.png>
   public virtual getOutputDomain(String _outputId) : int {
      return DOMAIN_GLSL;
   }

   // <method_get.png>
   public virtual getObjectPathVirtFolder() : String {
      return "varyings";
   }

   // <method.png>
   public virtual getVarName() : String {
      return "v_"+id;
   }


   // // <method.png>
   // public method emitBegin() {
   // }

   // <method.png>
   public virtual emit(local String       _outputId,
                       local GModule      _module,
                       local GProgram     _program,
                       local String       _out,
                       local String       _dstVar,
                       local boolean      _bGLSL,
                       local PointerArray _objDone
                       ) {
      if(_outputId == "vs_out")
      {
         local GInput inVal <= getInputById("in");
         if(inVal.isConnected())
         {
            // // local String sInVar <= _module.allocTmpVarScript(s_script_set, type, "init");
            inVal.emit(_module, _program, _out, _dstVar, true/*bGLSL*/, _objDone);
         }
         else
         {
            // avoid "Input of fragment shader <varying> not written by vertex shader" error (e.g. on macOS)
            _out.append(_dstVar+" = "+GDefs.GetGLSLDefaultTypeValue(inVal.type)+"; /* not connected */\n");
         }
      }
      else
      {
         _out.append(_dstVar+" = "+getGLSLVarName()+";\n");
      }
   }
}
