// ----
// ---- file   : gmodel_test.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 12Jun2020
// ---- changed: 13Jun2020, 14Jun2020, 15Jun2020, 16Jun2020, 18Jun2020, 20Jun2020, 14Aug2020
// ----
// ----
// ----
module MGModel_Test;

use namespace ui;
use namespace gledit;


// <class.png>
class GModel_Test : GModel {

   // <method_new.png>
   static New() : GModel_Test {
      local GModel_Test r;
      r.init();
      return deref r;
   }

   // <method_init.png>
   public virtual init() {
      GModel::init();
      return;

      trace "xx gmodel_test::init";

      setNamespaceId("testmodel");

      GConstant *constant;

      constant <= addConstant(GConstantFloat.New());
      constant.setId("PI");
      constant.setFloatParamById("value", PI);

      constant <= addConstant(GConstantFloat.New());
      constant.setId("2PI");
      constant.setFloatParamById("value", 2*PI);

      constant <= addConstant(GConstantFloat.New());
      constant.setId("E");
      constant.setFloatParamById("value", E);

      constant <= addConstant(GConstantRGBA.New());
      constant.setId("blue");
      constant.setFloatParamById("r", 0.0f);
      constant.setFloatParamById("g", 0.0f);
      constant.setFloatParamById("b", 1.0f);
      constant.setFloatParamById("a", 1.0f);

      constant <= addConstant(GConstantRGBA.New());
      constant.setId("cyanish");
      constant.setFloatParamById("r", 0.2f);
      constant.setFloatParamById("g", 0.6f);
      constant.setFloatParamById("b", 0.8f);
      constant.setFloatParamById("a", 0.9f);

      GMesh_Quad m <= addMesh(GMesh_Quad.New());
      m.setId("monstermesh");
      m.setFloatParamById("width", 1.0);
      m.setFloatParamById("height", 1.0);
      m.setIntParamById("subdiv", 2);
      connectObject("mesh", m);

      GProgram prg <= addProgram(GProgram.New());
      prg.setId("prg1");
      connectObject("program", prg);

      GVertexShader vtx <= prg.getVertexShader();
      // vtx.addSourceAutoId(GSource.New());

      GFragmentShader frg <= prg.getFragmentShader();
      frg.addSourceAutoId(GSource.New(), null);


      GUniform uTransform <= prg.lazyAddUniform("transform", TYPE_MAT4);
      GMat4Scale mTranslate <= GMat4Translate.New3(0.5, 0.0, 0.0);
      uTransform.connect("in", deref mTranslate, "out", OP_AUTO);
      GMat4Scale mScale <= GMat4Scale.New4(0.1, 0.1, 1.0, 1.0);
      uTransform.connect("in", deref mScale, "out", OP_AUTO);
      GMat4Scale mRotate <= GMat4RotateXYZ.New3(0.0, 0.0, 45.0);
      uTransform.connect("in", deref mRotate, "out", OP_AUTO);
      vtx.connect("transform", uTransform, "out", OP_REP);

      GUniformSampler2D uTex <= prg.addUniformAutoId(GUniformSampler2D.New(), null/*preferredPrefixOrNull*/);
      uTex.setId("tex");
      GTexture tex <= addTextureAutoId(GTexture.New(), null);
      uTex.connectObject("tex", tex);

      GAttribute aPos <= prg.lazyAddAttribute("position", TYPE_VEC4);
      vtx.connect("position", aPos, "out", OP_REP);

      GAttribute aUV <= prg.lazyAddAttribute("uv", TYPE_VEC2);
      GVarying vUV <= prg.addVarying(GVarying.New("uv", TYPE_VEC2));
      vUV.connect("in", aUV, "out", OP_AUTO);

      GUniform uTest2 <= prg.lazyAddUniform("test2", TYPE_FLOAT);
      GUniform uTest3 <= prg.lazyAddUniform("test3", TYPE_FLOAT);

   }
}
