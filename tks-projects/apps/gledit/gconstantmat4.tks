// ----
// ---- file   : gconstantmat4.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 07Feb2025
// ---- changed: 
// ----
// ----
// ----
module MGConstantMat4;

use namespace ui;
use namespace gledit;


// <class.png>
class GConstantMat4 : GConstant {
   // intended to be used as "proxy" container for e.g. a modelview matrix (composed of translate/scale/rotate/.. matrices)

   // <method_new.png>
   public static New() : GConstantMat4 {
      local GConstantMat4 r;
      r.init();
      return deref r;
   }

   // <method_init.png>
   public virtual init() {
      GConstant::init();
      type = TYPE_MAT4;

      addInput("mat", TYPE_MAT4);

      addOutput(GOutput.OUT_DEF, type);
   }

   // <method_get.png>
   public virtual getString() : String {
      return "mat4(..)";
   }

   // <method.png>
   public virtual emit(local String       _outputId,
                       local GModule      _module,
                       local GProgram     _program,
                       local String       _out,
                       local String       _dstVar,
                       local boolean      _bGLSL,
                       local PointerArray _parents
                       ) {
      _parents.add(this);

      local GInput *input;

      // mat
      local String *sMat;
      input <= getInputById("mat");
      if(input.isConnected())
      {
         sMat <= _module.allocTmpVarScript(_out, TYPE_MAT4, "in_mat");
         input.emit(_module, _program, _out, sMat, _bGLSL, _parents);

         if(_bGLSL)
         {
            _out.append(_dstVar+" = "+sMat+";\n");
         }
         else
         {
            _out.append(_dstVar+" = "+sMat+";\n");
         }
      }
      else
      {
         if(_bGLSL)
         {
            _out.append(_dstVar+" = mat4(1.0);  // not connected, load identity\n");
         }
         else
         {
            _out.append(_dstVar+".initIdentity();  // not connected, load identity\n");
         }
      }

      _parents.remove(this);
   }
}
