// ----
// ---- file   : gconfig.tks
// ----
// ---- info   : GL Edit configuration file
// ----
// ---- created: 12Jun2020
// ---- changed: 03Jul2020, 11Jul2020, 16Jul2020, 26Jul2020, 29Jul2020, 02Aug2020, 07Aug2020
// ----          08Aug2020, 09Aug2020, 14Aug2020, 15Aug2020, 04Feb2025, 05Feb2025, 07Feb2025
// ----          08Feb2025, 09Feb2025, 10Feb2025, 31Aug2025, 18Sep2025
// ----
// ----
// ----
module MGConfig;

use namespace ui;
use namespace gledit;


// (note) true=fast+smooth cursor movements (60hz arcade mode when repeat rate is set to 1!)
//        false=use millisec timer (~= every second frame (30Hz))
UI.SetEnableVSyncKeyRepeat(false);    // enable millisec/timer based key repeat
//UI.SetEnableVSyncKeyRepeat(true);     // enable vsync/frame based key repeat

UI.ConfigureKeyRepeat(300, 29);     // millisec/timer based key repeat
UI.ConfigureKeyRepeatFrames(15, 2); // vsync/frame based key repeat

UI.ConfigureGL(1/*bGLCore*/, 0/*bDrawGL*/);

// ui::Button.b_hold_dot = true; // show dot in buttons that support hold-click events

// // UI.SetSwapStrategy(UI.SWAP_STRATEGY_EXCHANGE);
// //UI.SetSwapStrategy(UI.SWAP_STRATEGY_COPY);

// UI.b_keyboard_monitor = true;  // for video recording

// true=show tooltips in window corners
// false=show tooltips near mouse cursor
UI.SetEnableWindowCornerToolTips(true);

// true=always grab mouse when editing floatparams
// false=only grab mouse in floatparam dial mode (RMB click)
UI.SetEnableFloatParamMouseGrab(true);

// Prevent blurry upscaling on 4k / UHD displays (Windows 10)
SDL.dpiAwareness = true;
// UI.SetFontScaling(1.7);

// Turn off dialog background dimming
UI.SetEnableShadeModal(false);

// Reserve space key for replay start/stop
UI.SetEnableSpaceBarClicks(false);


function GlobalInit() {
}

class GConfig {


   // Root path
   // // static String rootpath = "f:/gledit_data/";
   static String rootpath = "$(PROGRAM_DIR)/gledit_data/";
   // static String rootpath = "$(HOME)/gledit_data_archive/";

   // $(PROJECT_DIR) : Project file directory
   static String project_rootpath = rootpath + "/projects/";

   // BezierEdit curve preset directory
   //  (note) files use ".curve" suffix
   static String curve_rootpath = rootpath + "/presets/curve/";


   // (note) use the SDL_VIDEO_WINDOW_POS environment var. to position the desktop window
   //         e.g.: export SDL_VIDEO_WINDOW_POS="30,40"

   // (note) this is used by Utils.KeycodeToHex() when capslock key is enabled (resp. shift is pressed)
   // (note) currently supported setting is "de". any other setting will default to a "us" layout (raw key codes).
   static String kbd_layout = "de";

   // Overall font-scaling (1.0 = optimized for 800x480 WVGA display)
   static float font_scaling = 1.0;

   // If true, disable layout caches and allow resize (should be false when running in fullscreen)
   static boolean b_ui_resizable = true;//false;

   // Overall zoom level (scales all graphics by given factors)
   //  (note) window_sx/sy resp. fullscreen_sx/sy should be scaled by the same factor
   //  (note) non-integer zoom factors will result in badly readable fonts
   //  (note) the window size will automatically be scaled accordingly
   static float zoom_x = 1.0;
   static float zoom_y = 1.0;

   // Window width (pixels)
   //  (note) at least 1700 pixels
   static int window_sx_lodpi = 1700;
   // static int window_sx_hidpi = 2502;
   static int window_sx_hidpi = 2250;

   // Window height (pixels)
   //  (note) at least 600 pixels
   // static int window_sy = 480;
   static int window_sy_lodpi = 920;
   // static int window_sy_hidpi = 1387;
   static int window_sy_hidpi = 1120;
 
   // Start in fullscreen mode
   static boolean b_fullscreen = false;
   //static boolean b_fullscreen = true;

   // Fullscreen width (pixels)
   static int fullscreen_sx = 1920;

   // Fullscreen height (pixels)
   static int fullscreen_sy = 1200;

   // Fullscreen bits-per-pixel (16, 24, 32)
   static int fullscreen_bits = 32;

   // set fullscreen resolution to display size
   static boolean b_fullscreen_displaysize = true;

   // If true, render UI 60 times per second. If false, limit FPS to 30.
   static boolean b_force_high_framerate = true;

   // If true, synchronize buffer swap to vertical retrace (for smooth cursor movements)
   static boolean b_vsync = true;

   // If true, windows and dialogs have transparent backgrounds
   static boolean b_transparent_layers = true;

   // KbdFocusSelectionMode behaviour: true=hold, false=toggle
   //  (note) kbdfocus mode is enabled/toggled with right windows key
   static boolean b_kbdfocusselectionmode_behaviour = false;

   static int start_page = RootForm.PAGE_START;

   // 0="light" LookAndFeel
   // 1="dark" LookAndFeel
   // 2="mono" LookAndFeel
   // static int lnf_idx = LookAndFeel.IDX_LIGHT;
   static int lnf_idx = LookAndFeel.IDX_DARK;

   // 0=small UI  1=large UI
   static boolean b_hidpi = 1;

   // External editor command
   //  (note) used for shader sources
   //  (note) in .emacs, use (setq revert-without-query '(".vert" ".frag")) to prevent emacsclient from hanging when file has changed on disk
   static String external_editor_cmd = "f:/fli/tools/dev/emacs-26.3-x86_64/bin/emacsclientw.exe --server-file f:/Projects/.emacs.d/server/server -n \"$(FILE)\"";
   // static String external_editor_cmd = "emacsclient \"$(FILE)\"";
   // static String external_editor_cmd = "notepad.exe \"$(FILE)\"";

   // true=use external editor
   // false=use built-in textedit dialog
   static boolean b_external_editor = false;

   // Internal text editor geometry (new windows)
   //  (note) [x, y, w, h]
   // static Geometry4f textedit_geo = [0, 0, 0, 0];
   // static Geometry4f textedit_geo = [60, 43, 765, 628];
   static Geometry4f textedit_geo = [60, 43, 1480, 903];

   // true=always save changed (e.g. when pressing ESCAPE)
   // false=only save changed when lctrl-s is pressed
   static boolean b_textedit_always_save = true;

   // Finder geometry
   //  (note) [x, y, w, h]
   // static Geometry4f finder_geo = [200, 100, 950, 500];
   static Geometry4f finder_geo = [200, 100, 1600, 600];

   // Connections/ParamsForm split position
   static float params_split_few  = 0.7;
   static float params_split_many = 0.5;



   /***
    ***
    *** General setup
    ***
    ***/

   // if true, print (low frequency) debug messages to console (prefixed with "[dbg]")
   //  (note) Global.Debug()
   static boolean b_debug_lofreq = true;
   // static boolean b_debug_lofreq = false;

   // if true, print (high frequency) debug messages to console (prefixed with "[trc]")
   //  (note) Global.Debug2()
   // static boolean b_debug_hifreq = false;
   static boolean b_debug_hifreq = true;

   // if true, print (realtime) debug messages to console (prefixed with "[>>>]")
   //  (note) Global.Debug3()
   static boolean b_debug_rt = false;
   // static boolean b_debug_rt = true;

   // when true, print profiling messages ("[pro]")
   static boolean b_debug_profile = true;

   // filename of project to load during startup
   // static String autoload_filename = "$(PROJECT_DIR)/test.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test3ds/test3ds.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test3ds_env_map.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test3ds_rim_light/test3ds_rim_light.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test3ds_rim_light_frag/test3ds_rim_light_frag.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test3ds_rim_light_frag_b/test3ds_rim_light_frag_b.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test3ds_rim_light_frag_c/test3ds_rim_light_frag_c.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test3ds_rim_light_frag_d/test3ds_rim_light_frag_d.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test3ds_rim_light_frag_e/test3ds_rim_light_frag_e.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test3ds_rim_light_frag_f/test3ds_rim_light_frag_f.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test3ds_rim_light_frag_g/test3ds_rim_light_frag_g.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test3ds_rim_light_frag_h/test3ds_rim_light_frag_h.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test3ds_rim_light_frag_i/test3ds_rim_light_frag_i.gpr";
   // // static String autoload_filename = "$(PROJECT_DIR)/test3ds_rim_light_frag_i_ew_a/test3ds_rim_light_frag_i_ew_a.gpr";
   // // static String autoload_filename = "$(PROJECT_DIR)/test3ds_rim_light_frag_i_ew_b/test3ds_rim_light_frag_i_ew_b.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/testquadshader.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/testmouse.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/testmouse_norm.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/testmouse_buttons.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_fbo/test_fbo.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_script.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_midi.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_curve4.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_switch.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_scene_select.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_tween.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_tween_cam.gpr";
   static String autoload_filename = "$(PROJECT_DIR)/test_msaa/test_msaa.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_finder.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_move.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_fxaa.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_blur_plus.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_edge_aa.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_edge_aa_2.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_edge_aa_3.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_edge_aa_4.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_renderpass_script.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_lookat.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_lookat2/test_lookat2.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_model_draw_mat.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_scenegraph/test_scenegraph.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_scenegraph_script.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_scenegraph_script_nested.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_mesh_ring.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_1.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_2.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_3.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_4.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_5.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_6.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_7.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_8.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_9.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_10.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_11.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_12/test_dial_12.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_13/test_dial_13.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_14/test_dial_14.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_program_reuse/test_program_reuse.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/debug/debug.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_texel_rgba/test_texel_rgba.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_texel_rgba_2/test_texel_rgba_2.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_15/test_dial_15.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_16/test_dial_16.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_17/test_dial_17.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_17b/test_dial_17b.gpr";  // 2020
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_18b/test_dial_18b.gpr";  // 2025
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_18c/test_dial_18c.gpr";  // 2025
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_18d/test_dial_18d.gpr";  // 2025 ew (static)
   // static String autoload_filename = "$(PROJECT_DIR)/test_dial_18e/test_dial_18e.gpr";  // 2025 ew (scroll)
   // static String autoload_filename = "$(PROJECT_DIR)/test_tween_cyclic/test_tween_cyclic.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_orbit_cam/test_orbit_cam.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_orbit_cam2/test_orbit_cam2.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_orbit_cam3/test_orbit_cam3.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_anon_script/test_anon_script.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_env_curve1/test_env_curve1.gpr";
   // static String autoload_filename = "$(PROJECT_DIR)/test_env_curve1_b/test_env_curve1_b.gpr";

   // true=update autoload_filename each time a project is loaded/saved
   static boolean b_autoload_filename_autoupdate = false;

   // filename to load when "new project" button is clicked
   //  (note) when file does not exist, use builtin default project (warning: no mmc mappings)
   //  (note) the filename is relative to the project_rootpath
   static String newproject_template_filename = "project_template.gpr";

   // if true, show project comment after loading a project (if the comment is not empty)
   static boolean b_autoshowcomment = true;

   // if true, save current project to "crash_autosave-<date>-<time>.st2" in case the program UI crashes
   //  Please think twice before disabling this feature.
   // static boolean b_crash_autosave = true;
   static boolean b_crash_autosave = false;

   // Default directory for autosaves. Use current directory when empty ("") (careful: the CWD may change while the app. is running)
   //  (note) $(PROGRAM_DIR) will be substituted by the application startup directory
   //  (note) $(PROJECT_DIR) will be substituted by the project_rootpath
   static String autosave_dir="$(PROJECT_DIR)/autosaves/";

   // Number of periodical auto-save files (cycle through 'n' save files)
   //  (note) the current autosave file nr is stored in Global.AUTOSAVE_CURRENT_FILENR_FILE (in project_rootpath)
   //  (note) clamped to [1;100] (unless it's set to 0)
   static int num_autosave_files = 20;

   // Autosave interval (number of minutes)
   //  (note) clamped to [1;30]
   static int autosave_interval = 1;

   // Enable/disable autosaves. 'maybe'=only do autosaves when replay is not running
   static boolean b_autosave = true;

   // External file auto-reload interval in millliseconds
   static int watchfile_interval_ms = 500;

   // Generator update interval in milliseconds
   static int update_interval_ms = 50;

   // Generator redraw interval in milliseconds
   static int redraw_interval_ms = 16;

   // Reshow Params interval in milliseconds
   //  e.g. after editing camera via mouse in PreviewWidget
   static int reshow_params_interval_ms = 100;

   // Auto-connect new object to suitable input
   //  - connect first source output to parent shader input (color or position)
   //  - connect texture to first unconnected sampler uniform (within same model namespace if there's only one program)
   //  - connect sampler uniform to first unconnected texture
   //  - connect first attribute output to vertex shader "position" input (and name the attribute "position")
   static boolean b_auto_connect = true;

   // Auto-create proxy uniform when connection SCRIPT domain output to GLSL domain input
   static boolean b_auto_create_proxy_uniforms = true;

   // true=rerun global var initializiers when animation starts
   static boolean b_reset_vars_when_anim_starts = true;

   // true=debug-print total num of triangles
   //  (note) toggle with lctrl-t
   static boolean b_debug_tri_count = false;

   // true=use vertical Curve4Dialog layout
   // false=use 2x2 layout
   static boolean b_curve4_vertical = true;

   // true=smoothen imported camera curves
   static boolean b_curve7_autosmooth = true;

   // true=smoothen ASCII-imported envelope curves
   static boolean b_curve1_autosmooth = false;

   // Shader version header override (""=default)
   //  (note) GLES2 / GLSL1.0: "100\n"
   static String shader_version = "100\n";
   static boolean b_apply_shader_version_during_export = true;
   static boolean b_glsl_1 = false;  // 1=use attribute/varying instead of in/out

   // 1=highlight unconnected objects (red tint)
   //  (note) toggled at runtime with 'u'
   static boolean b_show_unconnected = true;

   // Curve4Dialog geometry (genvelopecurve4)
   static Geometry4f curve4_geo = [496, 3, 1248, 1074];
   static Geometry4f curve4_zoomed_geo = [243, 148, 1754, 509];


   /***
    ***
    *** SCP Deploy Settings
    ***
    ***/
   // used when pwd is != ""
   static String sshpass_cmdline = "C:\\msys64\\usr\\bin\\sshpass.exe -p$(PWD)";

   // how to invoke ssh
   //  (note) prefixed by sshpass if pwd != ""
   static String scp_cmdline = "C:\\msys64\\usr\\bin\\scp.exe -o StrictHostKeyChecking=no $(FILE) $(USER)@$(HOST):$(PATH)";

   static String scp_user = "root";
   static String scp_pwd  = "";
   static String scp_host = "172.20.10.71";
   static String scp_path = "/home/root/tks/deploy/";

   //static String scp_user = "guest";
   //static String scp_pwd  = "guest";
   //static String scp_host = "192.168.2.23";
   //static String scp_path = "/home/guest/tks/deploy/";



   /***
    ***
    *** MIDI setup
    ***
    ***/
   static boolean b_midi = true;

   static String midi_input_device = "gledit";



   /***
    ***
    *** The body of the following function is auto-generated by the UI.
    *** It may override some of the manually configured configuration items
    ***
    ***/
   static UseAutogeneratedConfig() {
      //----BEGIN_AUTOGENERATED_CONFIG----
      //----END_AUTOGENERATED_CONFIG----
   }


   /***
    ***
    *** The body of the following function is auto-generated by the UI.
    *** It overrides the manually configured MIDI input/output devices
    ***
    ***/
   static UseAutogeneratedMIDIConfig() {
      //----BEGIN_AUTOGENERATED_MIDI_CONFIG----
      //----END_AUTOGENERATED_MIDI_CONFIG----
   }

}


// (note) Comment the following line if you don't want the autogenerated UI settings to override the config defaults
GConfig.UseAutogeneratedConfig();
//GConfig.UseAutogeneratedConfig();

// (note) Comment the following line if you don't want the autogenerated UI MIDI settings to override the config defaults
GConfig.UseAutogeneratedMIDIConfig();
//GConfig.UseAutogeneratedMIDIConfig();
