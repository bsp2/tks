// ----
// ---- file   : ConnectionForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL Edit" application.
// ----
// ---- created: 15Jun2020
// ---- changed: 16Jun2020, 27Jun2020
// ----
// ----
// ----

module MConnectionForm;

use namespace ui;
use namespace gledit;


// <class.png>
class ConnectionForm : XMLForm, ActionProvider {

   define int NUM_PARAMS_PER_ROW = 6;

   define String ACTION_CONNECTION_EDITED;

   GConnection *conn;

   protected Label    *lb_in_obj;
   protected Label    *lb_in_port;
   protected Label    *lb_src_obj;
   protected Label    *lb_src_port;

   protected FloatParam *fp_scale;
   protected FloatParam *fp_offset;
   protected ComboBox   *cm_op;


   // <ui_init.png>
   public method initConnectionForm() : boolean {

      if(!initPakFile("ConnectionForm.xfm"))
      {
         return false;
      }

      autoResolveIds(this);

      recursiveSetEnableCursorKeyTabCycling(false);

      cm_op.setOptions(GDefs.op_names_short);
      cm_op.setOptionsLong(GDefs.op_names_long);

      return true;
   }

   // <ui.png>
   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_CONNECTION_EDITED];
   }

   // <method.png>
   protected method provideEdited() {
      provideAction(Action.New(getProvidedActionAlias(ACTION_CONNECTION_EDITED), this));
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      _retLayers.joinRR(_retLayers,
                        [
                           fp_scale,
                           fp_offset,
                           cm_op
                         ]
                        );
   }

   // <ui_show.png>
   public method showConnection(GConnection _conn) {
      // trace "[trc] ConnectionForm::showConnection("+#(_conn)+")";
      conn <= _conn;

      boolean bEditable = (null != conn);

      cm_op.setEditable(bEditable);

      if(bEditable)
      {
         GObject inObj <= (root_form.pg_start.current_input_object);
         if(null != inObj)
         {
            lb_in_obj.setCaption(inObj.getObjectPath());
            lb_in_port.setCaption(conn.port_id_rev);
         }
         else
         {
            lb_in_obj.setCaption("<ill>");  // should not be reachable
            lb_in_port.setCaption("<ill>");  // should not be reachable
         }

         GObject outObj <= conn.object;
         lb_src_obj.setCaption(outObj.getObjectPath());
         lb_src_port.setCaption(conn.port_id);

         fp_scale.setValue(_conn.scale);
         fp_offset.setValue(_conn.offset);
         cm_op.setSelectedOption(_conn.op);
      }
      else
      {
         lb_in_obj.setCaption("-");
         lb_in_port.setCaption("-");
         lb_src_obj.setCaption("-");
         lb_src_port.setCaption("-");
         fp_scale.setValue(-1);
         fp_offset.setValue(-1);
         cm_op.setSelectedOption(-1);
      }

   }

   // <ui_handle.png>
   protected method handleScaleChanged() {
      conn.scale = fp_scale.getFloatValue();
      Global.Print("Connection Scaling Factor is "+conn.scale);
      provideEdited();
   }

   // <ui_handle.png>
   protected method handleOffsetChanged() {
      conn.offset = fp_offset.getFloatValue();
      Global.Print("Connection Offset is "+conn.offset);
      provideEdited();
   }

   // <ui_handle.png>
   protected method handleOpChanged() {
      conn.op = cm_op.getSelectedOption();
      Global.Print("Connection Op is \""+cm_op.getSelectedOptionNameLong()+"\"");
      provideEdited();
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {

      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      //trace "xxx ConnectionForm::consumeAction: acName=\""+acName+"\".";

      switch(@(ap))
      {
         case @(fp_scale):
            handleScaleChanged();
            return true;

         case @(fp_offset):
            handleOffsetChanged();
            return true;

         case @(cm_op):
            handleOpChanged();
            return true;
      }

      return XMLForm::consumeAction(_ac);
   }

}
