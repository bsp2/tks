// ----
// ---- file   : gparambool.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 20Jun2020
// ---- changed:
// ----
// ----
// ----
module MGParamBool;

use namespace ui;
use namespace gledit;


// <class.png>
class GParamBool : GParam {
   boolean value;
   boolean def_value;

   // <method_new.png>
   static New(String _id, String _caption, boolean _def) {
      local GParamBool p;
      p.init(_id, _caption, _def);
      return deref p;
   }

   // <method_init.png>
   public method init(String _id, String _caption, boolean _def) {
      initParam(_id, _caption);
      def_value = _def;
      value = def_value;
   }

   // <method_set.png>
   public method setValue(boolean _val) {
      value = _val;
   }

   // <method_get.png>
   public virtual getString() : String {
      return value ? "true" : "false";
   }

   // <method_set.png>
   public virtual copyParamValueFrom(GParam _o) {
      if(_o instanceof GParamBool)
      {
         GParamBool o <= _o;
         value = o.value;
      }
   }

   // <save.png>
   public virtual saveStateParam(local Stream ofs) {
      GParam::saveStateParam(ofs);

      // Version
      ofs.i16 = 1;

      // Value
      ofs.i8 = value;
   }

   // <load.png>
   public virtual loadStateParam(local Stream ifs) : boolean {
      // (note) base class param info is loaded by LoadStateParam

      // Version
      short ver = ifs.u16;

      if(1 <= ver <= 1)
      {
         // Value
         value = ifs.b8;

         // Succeeded
         return true;
      }
      else
      {
         trace "[---] GParamBool::loadStateParam: invalid version "+ver;
      }
      return false;
   }
}
