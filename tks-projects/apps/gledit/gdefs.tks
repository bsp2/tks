// ----
// ---- file   : gdefs.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 12Jun2020
// ---- changed: 13Jun2020, 14Jun2020, 15Jun2020, 16Jun2020, 17Jun2020, 21Jun2020, 27Jun2020
// ----          01Jul2020, 03Jul2020, 10Jul2020, 09Aug2020, 07Feb2025
// ----
// ----
// ----
module MGDefs;


class GDefs {

   // Maximum range for float params
   define float FLT_MIN = -9999999.0f;
   define float FLT_MAX =  9999999.0f;

   // Maximum range for int params
   define float INT_MIN = -9999999;
   define float INT_MAX =  9999999;

   // Exceptions
   define exception GError : Error;
   define exception GNotFoundError : Error;
   define exception GAttribNotFoundError : GNotFoundError;
   define exception GInvalidType : GError;
   define exception GUnsupportedType : GError;
   define exception GUnsupportedTypeCast : GError;
   define exception GUnsupportedUniformType : GError;
   define exception GNotImplemented : GError;
   define exception GInfiniteRecursion : GError;

   // Object and port I/O types
   define int TYPE_NONE           =  0;
   define int TYPE_INT            =  1;
   define int TYPE_IVEC2          =  2;
   define int TYPE_IVEC3          =  3;
   define int TYPE_IVEC4          =  4;
   define int TYPE_UINT           =  5;
   define int TYPE_UVEC2          =  6;
   define int TYPE_UVEC3          =  7;
   define int TYPE_UVEC4          =  8;
   define int TYPE_FLOAT          =  9;
   define int TYPE_VEC2           = 10;
   define int TYPE_VEC3           = 11;
   define int TYPE_VEC4           = 12;
   define int TYPE_MAT2           = 13;
   define int TYPE_MAT3           = 14;
   define int TYPE_MAT4           = 15;
   define int TYPE_REF            = 16;  // for object references, e.g. texture assigned to uniform sampler
   define int TYPE_SAMPLER2D      = 17;
   define int TYPE_SAMPLER2DARRAY = 18;
   define int TYPE_SAMPLER3D      = 19;
   define int TYPE_SAMPLERCUBE    = 20;
   define int TYPE_UBYTE          = 21;
   define int TYPE_UBYTE_VEC2     = 22;
   define int TYPE_UBYTE_VEC3     = 23;
   define int TYPE_UBYTE_VEC4     = 24;
   define int TYPE_BOOL           = 25;
   define int TYPE_BYTE           = 26;
   define int TYPE_BYTE_VEC2      = 27;
   define int TYPE_BYTE_VEC3      = 28;
   define int TYPE_BYTE_VEC4      = 29;
   define int TYPE_FUNCTION       = 30;
   define int TYPE_ORBITCAMVIEW   = 31;  // dedicated type for GModTween
   // (todo) mat2x3, ..

   // Sequential connection operators
   define int OP_AUTO            =  0;  // OP_REP for first connection, OP_MUL for 2nd onwords
   define int OP_REP             =  1;
   define int OP_MUL             =  2;
   define int OP_MUL_REV         =  3;
   define int OP_ADD             =  4;
   define int OP_SUB             =  5;
   define int OP_SUB_REV         =  6;
   define int OP_DIV             =  7;
   define int OP_DIV_REV         =  8;
   define int OP_MOD             =  9;
   define int OP_MOD_REV         = 10;
   define int OP_MIN             = 11;
   define int OP_MAX             = 12;
   define int OP_RGBA_SRC        = 13;  // Porter Duff (input=alpha+non-premultiplied color, output=alpha+premultiplied color)
   define int OP_RGBA_DST        = 14;
   define int OP_RGBA_SRC_OVER   = 15;
   define int OP_RGBA_DST_OVER   = 16;
   define int OP_RGBA_SRC_IN     = 17;
   define int OP_RGBA_DST_IN     = 18;
   define int OP_RGBA_SRC_OUT    = 19;
   define int OP_RGBA_DST_OUT    = 20;
   define int OP_RGBA_SRC_ATOP   = 21;
   define int OP_RGBA_DST_ATOP   = 22;
   define int OP_RGBA_XOR        = 23;
   define int OP_RGBA_PLUS       = 24;
   define int OP_RGBA_PLUS_CLAMP = 25;
   define int OP_RGB_NORMAL      = 26;  // color blend modes
   define int OP_RGB_MULTIPLY    = 27;
   define int OP_RGB_SCREEN      = 28;
   define int OP_RGB_OVERLAY     = 29;
   define int OP_RGB_DARKEN      = 30;
   define int OP_RGB_LIGHTEN     = 31;
   define int OP_RGB_COLORDODGE  = 32;
   define int OP_RGB_COLORBURN   = 33;
   define int OP_RGB_HARDLIGHT   = 34;
   define int OP_RGB_SOFTLIGHT   = 35;
   define int OP_RGB_DIFFERENCE  = 36;
   define int OP_RGB_EXCLUSION   = 37;
   define int OP_MAT_INVERT      = 38;
   define int OP_MAT_INV_TRP     = 39;  // added in connection v5+  (light normal matrices)
   define int OP_AND             = 40;
   define int OP_OR              = 41;
   define int OP_EOR             = 42;

   static StringArray op_names_short = [
      "<auto>",                   //  0
      "=",                        //  1
      "*",                        //  2
      "*rev",                     //  3
      "+",                        //  4
      "-",                        //  5
      "-rev",                     //  6
      "/",                        //  7
      "/rev",                     //  8
      "%",                        //  9
      "%rev",                     // 10
      "min",                      // 11
      "max",                      // 12
      "rgba_src",                 // 13
      "rgba_dst",                 // 14
      "rgba_src_over",            // 15
      "rgba_dst_over",            // 16
      "rgba_src_in",              // 17
      "rgba_dst_in",              // 18
      "rgba_src_out",             // 19
      "rgba_dst_out",             // 20
      "rgba_src_atop",            // 21
      "rgba_dst_atop",            // 22
      "rgba_xor",                 // 23
      "rgba_plus",                // 24
      "rgba_plus_clamp",          // 25
      "rgb_normal",               // 26
      "rgb_multiply",             // 27
      "rgb_screen",               // 28
      "rgb_overlay",              // 29
      "rgb_darken",               // 30
      "rgb_lighten",              // 31
      "rgb_colordodge",           // 32
      "rgb_colorburn",            // 33
      "rgb_hardlight",            // 34
      "rgb_softlight",            // 35
      "rgb_difference",           // 36
      "rgb_exclusion",            // 37
      "mat invert",               // 38
      "mat invert+transpose",     // 39  added in connection v5
      "&",                        // 40
      "|",                        // 41
      "^",                        // 42
                                        ];

   static StringArray op_names_long = [
      "<auto>",                        //  0
      "=",                             //  1
      "*",                             //  2
      "*rev",                          //  3
      "+",                             //  4
      "-",                             //  5
      "-rev",                          //  6
      "/",                             //  7
      "/rev",                          //  8
      "%",                             //  9
      "%rev",                          // 10
      "min",                           // 11
      "max",                           // 12
      "Composite: RGBA Src",           // 13
      "Composite: RGBA Dst",           // 14
      "Composite: RGBA Src Over",      // 15
      "Composite: RGBA Dst Over",      // 16
      "Composite: RGBA Src In",        // 17
      "Composite: RGBA Dst In",        // 18
      "Composite: RGBA Src Out",       // 19
      "Composite: RGBA Dst Out",       // 20
      "Composite: RGBA Src Atop",      // 21
      "Composite: RGBA Dst Atop",      // 22
      "Composite: RGBA Xor",           // 23
      "Composite: RGBA Plus",          // 24
      "Composite: RGBA Plus (clamp)",  // 25
      "Blend: RGB Normal",             // 26
      "Blend: RGB Multiply",           // 27
      "Blend: RGB Screen",             // 28
      "Blend: RGB Overlay",            // 29
      "Blend: RGB Darken",             // 30
      "Blend: RGB Lighten",            // 31
      "Blend: RGB Colordodge",         // 32
      "Blend: RGB Colorburn",          // 33
      "Blend: RGB Hardlight",          // 34
      "Blend: RGB Softlight",          // 35
      "Blend: RGB Difference",         // 36
      "Blend: RGB Exclusion",          // 37
      "Matrix Invert",                 // 38
      "Matrix Invert + Transpose (normals)",     // 39  added in connection v5
      "&",                             // 40
      "|",                             // 41
      "^",                             // 42
                                        ];

   define int DOMAIN_GLSL   = (1 << 0);
   define int DOMAIN_SCRIPT = (1 << 1);
   define int DOMAIN_ANY    = (DOMAIN_GLSL | DOMAIN_SCRIPT);

   static GetTypeSize(int _type) : int {
      // Returns number of bytes, e.g. for attribute data offset/size calculations
      switch(_type)
      {
         default:
         case TYPE_NONE:        return 0;
         case TYPE_INT:         return 4;
         case TYPE_IVEC2:       return 8;
         case TYPE_IVEC3:       return 12;
         case TYPE_IVEC4:       return 16;
         case TYPE_UINT:        return 4;
         case TYPE_UVEC2:       return 8;
         case TYPE_UVEC3:       return 12;
         case TYPE_UVEC4:       return 16;
         case TYPE_FLOAT:       return 4;
         case TYPE_VEC2:        return 8;
         case TYPE_VEC3:        return 12;
         case TYPE_VEC4:        return 16;
         case TYPE_MAT2:        return 16;
         case TYPE_MAT3:        return 36;
         case TYPE_MAT4:        return 64;
         case TYPE_UBYTE:       return 1;
         case TYPE_UBYTE_VEC2:  return 2;
         case TYPE_UBYTE_VEC3:  return 3;
         case TYPE_UBYTE_VEC4:  return 4;
         case TYPE_BOOL:        return 4;
         case TYPE_BYTE:        return 1;
         case TYPE_BYTE_VEC2:   return 2;
         case TYPE_BYTE_VEC3:   return 3;
         case TYPE_BYTE_VEC4:   return 4;
      }
   }

   static GetGLSLTypeName(int _type) : String {

      switch(_type)
      {
         default:
         case TYPE_NONE:           return "<ill>";
         case TYPE_INT:            return "int";
         case TYPE_IVEC2:          return "ivec2";
         case TYPE_IVEC3:          return "ivec3";
         case TYPE_IVEC4:          return "ivec4";
         case TYPE_UINT:           return "uint";
         case TYPE_UVEC2:          return "uvec2";
         case TYPE_UVEC3:          return "uvec3";
         case TYPE_UVEC4:          return "uvec4";
         case TYPE_FLOAT:          return "float";
         case TYPE_VEC2:           return "vec2";
         case TYPE_VEC3:           return "vec3";
         case TYPE_VEC4:           return "vec4";
         case TYPE_MAT2:           return "mat2";
         case TYPE_MAT3:           return "mat3";
         case TYPE_MAT4:           return "mat4";
         case TYPE_REF:            return "ref";    // (note) not a GLSL type, only for UI display
         case TYPE_SAMPLER2D:      return "sampler2D";
         case TYPE_SAMPLER2DARRAY: return "sampler2DArray";
         case TYPE_SAMPLER3D:      return "sampler3D";
         case TYPE_SAMPLERCUBE:    return "samplerCube";
         case TYPE_UBYTE:          return "ubyte";        // (note) not a GLSL type, only for attribs + UI display
         case TYPE_UBYTE_VEC2:     return "ubyte_vec2";   // (note) not a GLSL type, only for attribs + UI display
         case TYPE_UBYTE_VEC3:     return "ubyte_vec3";   // (note) not a GLSL type, only for attribs + UI display
         case TYPE_UBYTE_VEC4:     return "ubyte_vec4";   // (note) not a GLSL type, only for attribs + UI display
         case TYPE_BOOL:           return "bool";
         case TYPE_BYTE:           return "byte";         // (note) not a GLSL type, only for attribs + UI display
         case TYPE_BYTE_VEC2:      return "byte_vec2";    // (note) not a GLSL type, only for attribs + UI display
         case TYPE_BYTE_VEC3:      return "byte_vec3";    // (note) not a GLSL type, only for attribs + UI display
         case TYPE_BYTE_VEC4:      return "byte_vec4";    // (note) not a GLSL type, only for attribs + UI display
         case TYPE_FUNCTION:       return "fxn";          // (note) not a GLSL type, only for attribs + UI display
         case TYPE_ORBITCAMVIEW:   return "orbitcamview"; // (note) not a GLSL type, only for attribs + UI display
      }
   }

   static ParseGLSLType(String _s) : String {

      switch(_s)
      {
         default:
         case "<ill>":  return TYPE_NONE;
         case "int":    return TYPE_INT;
         case "ivec2":  return TYPE_IVEC2;
         case "ivec3":  return TYPE_IVEC3;
         case "ivec4":  return TYPE_IVEC4;
         case "uint":   return TYPE_UINT;
         case "uvec2":  return TYPE_UVEC2;
         case "uvec3":  return TYPE_UVEC3;
         case "uvec4":  return TYPE_UVEC4;
         case "float":  return TYPE_FLOAT;
         case "vec2":   return TYPE_VEC2;
         case "vec3":   return TYPE_VEC3;
         case "vec4":   return TYPE_VEC4;
         case "mat2":   return TYPE_MAT2;
         case "mat3":   return TYPE_MAT3;
         case "mat4":   return TYPE_MAT4;
         case "mat4":   return TYPE_MAT4;
         case "bool":   return TYPE_BOOL;
      }
   }

   static ParseScriptType(String _s) : String {

      switch(_s)
      {
         default:
         case "<ill>":            return TYPE_NONE;
         case "int":              return TYPE_INT;
         case "uint":
         case "UnsignedInteger":  return TYPE_UINT;
         case "float":            return TYPE_FLOAT;
         case "vec2":
         case "Vector2f":         return TYPE_VEC2;
         case "vec3":
         case "Vector3f":         return TYPE_VEC3;
         case "vec4":
         case "Vector4f":         return TYPE_VEC4;
         case "mat2":
         case "Matrix2f":         return TYPE_MAT2;
         case "mat3":
         case "Matrix3f":         return TYPE_MAT3;
         case "mat4":
         case "Matrix4f":         return TYPE_MAT4;
         case "bool":
         case "boolean":          return TYPE_BOOL;
         case "Function":         return TYPE_FUNCTION;
         case "OrbitCamView":     return TYPE_ORBITCAMVIEW;
      }
   }

   static ParseParamClass(String _s) : Class {

      switch(_s)
      {
         default:
         case "<ill>":  return null;
         case "bool":   return GParamBool;
         case "int":    return GParamInt;
         case "choice": return GParamChoice;
         case "float":  return GParamFloat;
         case "alpha":  return GParamAlpha;
         case "rgb":    return GParamRGB;
         case "rgba":   return GParamRGBA;
         case "file":   return GParamFile;
      }
   }

   static GetScriptTypeName(int _type) : String {

      switch(_type)
      {
         default:
         case TYPE_NONE:          return "<ill>";
         case TYPE_INT:           return "int";
         case TYPE_IVEC2:         return "<todo:ivec2>";
         case TYPE_IVEC3:         return "<todo:ivec3>";
         case TYPE_IVEC4:         return "<todo:ivec4>";
         case TYPE_UINT:          return "UnsignedInteger";
         case TYPE_UVEC2:         return "<todo:uvec2>";
         case TYPE_UVEC3:         return "<todo:uvec3>";
         case TYPE_UVEC4:         return "<todo:uvec4>";
         case TYPE_FLOAT:         return "float";
         case TYPE_VEC2:          return "Vector2f";
         case TYPE_VEC3:          return "Vector3f";
         case TYPE_VEC4:          return "Vector4f";
         case TYPE_MAT2:          return "Matrix2f";
         case TYPE_MAT3:          return "Matrix3f";
         case TYPE_MAT4:          return "Matrix4f";
         case TYPE_BOOL:          return "boolean";
         case TYPE_UBYTE:         return "UnsignedByte";
         case TYPE_BYTE:          return "Byte";
         case TYPE_FUNCTION:      return "Function";
         case TYPE_ORBITCAMVIEW:  return "OrbitCamView";
      }
   }

   static GetScriptTypeNameAsObject(int _type) : String {

      switch(_type)
      {
         default:
         case TYPE_NONE:         return "<ill>";
         case TYPE_INT:          return "Integer";
         case TYPE_IVEC2:        return "<todo:ivec2>";
         case TYPE_IVEC3:        return "<todo:ivec3>";
         case TYPE_IVEC4:        return "<todo:ivec4>";
         case TYPE_UINT:         return "UnsignedInteger";
         case TYPE_UVEC2:        return "<todo:uvec2>";
         case TYPE_UVEC3:        return "<todo:uvec3>";
         case TYPE_UVEC4:        return "<todo:uvec4>";
         case TYPE_FLOAT:        return "Float";
         case TYPE_VEC2:         return "Vector2f";
         case TYPE_VEC3:         return "Vector3f";
         case TYPE_VEC4:         return "Vector4f";
         case TYPE_MAT2:         return "Matrix2f";
         case TYPE_MAT3:         return "Matrix3f";
         case TYPE_MAT4:         return "Matrix4f";
         case TYPE_BOOL:         return "Boolean";
         case TYPE_UBYTE:        return "UnsignedByte";
         case TYPE_BYTE:         return "Byte";
         case TYPE_FUNCTION:     return "Function";
         case TYPE_ORBITCAMVIEW: return "OrbitCamView";
      }
   }

   static GetGLAttribTypeName(int _type) : String {

      switch(_type)
      {
         default:
         case TYPE_NONE:        return "<ill>";
         case TYPE_INT:         return "GL_INT";
         case TYPE_IVEC2:       return "GL_INT";
         case TYPE_IVEC3:       return "GL_INT";
         case TYPE_IVEC4:       return "GL_INT";
         case TYPE_UINT:        return "GL_UNSIGNED_INT";
         case TYPE_UVEC2:       return "GL_UNSIGNED_INT";
         case TYPE_UVEC3:       return "GL_UNSIGNED_INT";
         case TYPE_UVEC4:       return "GL_UNSIGNED_INT";
         case TYPE_FLOAT:       return "GL_FLOAT";
         case TYPE_VEC2:        return "GL_FLOAT";
         case TYPE_VEC3:        return "GL_FLOAT";
         case TYPE_VEC4:        return "GL_FLOAT";
         case TYPE_MAT2:        return "GL_FLOAT";
         case TYPE_MAT3:        return "GL_FLOAT";
         case TYPE_MAT4:        return "GL_FLOAT";
         case TYPE_UBYTE:       return "GL_UNSIGNED_BYTE";
         case TYPE_UBYTE_VEC2:  return "GL_UNSIGNED_BYTE";
         case TYPE_UBYTE_VEC3:  return "GL_UNSIGNED_BYTE";
         case TYPE_UBYTE_VEC4:  return "GL_UNSIGNED_BYTE";
         case TYPE_BOOL:        return "GL_INT";
         case TYPE_BYTE:        return "GL_BYTE";
         case TYPE_BYTE_VEC2:   return "GL_BYTE";
         case TYPE_BYTE_VEC3:   return "GL_BYTE";
         case TYPE_BYTE_VEC4:   return "GL_BYTE";

      }
   }

   static GetGLAttribTypeSize(int _type) : int {
      // 'size' parameter for glAttribPointer (#components)
      // (todo) split mat attribs (vec4 columns)

      switch(_type)
      {
         default:
         case TYPE_NONE:       return 0;
         case TYPE_INT:        return 1;
         case TYPE_IVEC2:      return 2;
         case TYPE_IVEC3:      return 3;
         case TYPE_IVEC4:      return 4;
         case TYPE_UINT:       return 1;
         case TYPE_UVEC2:      return 2;
         case TYPE_UVEC3:      return 3;
         case TYPE_UVEC4:      return 4;
         case TYPE_FLOAT:      return 1;
         case TYPE_VEC2:       return 2;
         case TYPE_VEC3:       return 3;
         case TYPE_VEC4:       return 4;
         case TYPE_MAT2:       return 4;
         case TYPE_MAT3:       return 4;
         case TYPE_MAT4:       return 4;
         case TYPE_UBYTE:      return 1;
         case TYPE_UBYTE_VEC2: return 2;
         case TYPE_UBYTE_VEC3: return 3;
         case TYPE_UBYTE_VEC4: return 4;
         case TYPE_BOOL:       return 4;
         case TYPE_BYTE:       return 1;
         case TYPE_BYTE_VEC2:  return 2;
         case TYPE_BYTE_VEC3:  return 3;
         case TYPE_BYTE_VEC4:  return 4;
      }
   }

   static GetGLSLDefaultTypeValue(int _type) : String {
      switch(_type)
      {
         default:
         case TYPE_NONE:   return "<ill_none>";
         case TYPE_INT:    return "0";
         case TYPE_IVEC2:  return "ivec2(0,0)";
         case TYPE_IVEC3:  return "ivec3(0,0,0)";
         case TYPE_IVEC4:  return "ivec4(0,0,0,0)";
         case TYPE_UINT:   return "0u";
         case TYPE_UVEC2:  return "uvec2(0,0)";
         case TYPE_UVEC3:  return "uvec3(0,0,0)";
         case TYPE_UVEC4:  return "uvec4(0,0,0,0)";
         case TYPE_FLOAT:  return "0.0";
         case TYPE_VEC2:   return "vec2(0,0)";
         case TYPE_VEC3:   return "vec3(0,0,0)";
         case TYPE_VEC4:   return "vec4(0,0,0,1)";
         case TYPE_MAT2:   return "mat2(vec2(1,0), vec2(0,1))";
         case TYPE_MAT3:   return "mat3(vec3(1,0,0), vec3(0,1,0), vec3(0,0,1))";
         case TYPE_MAT4:   return "mat4(vec4(1,0,0,0), vec4(0,1,0,0), vec4(0,0,1,0), vec4(0,0,0,1))";
         case TYPE_BOOL:   return "true";
      }
   }

   static GetScriptDefaultTypeValue(int _type) : String {
      switch(_type)
      {
         default:
         case TYPE_NONE:         return "<ill_none>";
         case TYPE_INT:          return "0";
         case TYPE_IVEC2:        return "<unsupported type ivec2>";
         case TYPE_IVEC3:        return "<unsupported type ivec3>";
         case TYPE_IVEC4:        return "<unsupported type ivec4>";
         case TYPE_UINT:         return "0";
         case TYPE_UVEC2:        return "<unsupported type uvec2>";
         case TYPE_UVEC3:        return "<unsupported type uvec3>";
         case TYPE_UVEC4:        return "<unsupported type uvec4>";
         case TYPE_FLOAT:        return "0.0f";
         case TYPE_VEC2:         return "[0, 0]";
         case TYPE_VEC3:         return "[0, 0, 0]";
         case TYPE_VEC4:         return "[0, 0, 0, 0]";
         case TYPE_MAT2:         return "[1,0, 0,1]";
         case TYPE_MAT3:         return "[1,0,0, 0,1,0, 0,0,1]";
         case TYPE_MAT4:         return "[1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1]";
         case TYPE_BYTE:         return "0";
         case TYPE_BOOL:         return "true";
         case TYPE_UBYTE:        return "0";
         case TYPE_FUNCTION:     return "null";
         case TYPE_ORBITCAMVIEW: return "null";
      }
   }

   static GetOpNameConst(int _op) : String {
      return TKS.scriptClassConstantToString(#(_op), GDefs, "OP_");
   }

   static GetOpName(int _op) : String {
      return op_names_long.get(_op);
   }

   static GetOpNameShort(int _op) : String {
      return op_names_short.get(_op);
   }

   static GetAnonObjectTypesByIOType(int _type) : PointerArray {
      // used for restricting new <anon> objects to certain types
      switch(_type)
      {
         case TYPE_INT:
            return [GScript, GConstantInt];

         case TYPE_FLOAT:
            return [GScript, GConstantFloat, GConstantFloatAngleDeg, GConstantFloatAngleRad, GEnvelopeCurve1];

         case TYPE_VEC2:
            return [GScript, GConstantVec2];

         case TYPE_VEC3:
            return [GScript, GConstantVec3, GConstantRGB];

         case TYPE_VEC4:
            return [GScript, GConstantVec4, GConstantRGBA, GConstantHSVA, GConstantTexelRGBA];

         case TYPE_MAT4:
            return [GScript, GConstantMat4, GMat42D, GMat4OrbitCam, GMat4Perspective, GMat4Scale, GMat4LookAt, GMat4Ortho, GMat4RotateXYZ, GMat4Translate];

         case TYPE_ORBITCAMVIEW:
            return [GScript, GOrbitCamView, GModSwitch, GModTween];
      }
      return null;  // allow all
   }

}
