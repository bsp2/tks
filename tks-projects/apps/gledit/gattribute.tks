// ----
// ---- file   : gattribute.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 12Jun2020
// ---- changed: 13Jun2020, 14Jun2020, 15Jun2020, 17Jun2020, 18Jun2020, 19Jun2020, 21Jun2020
// ----          24Jun2020, 03Jul2020, 14Aug2020
// ----
// ----
// ----
module MGAttribute;

use namespace ui;
use namespace gledit;


// <class.png>
class GAttribute : GProgramSubObject {

   int offset; // temporary during emit(). see GModel::emitModule()


   // <method_new.png>
   static New(GProgram _program, String _id, int _type) : GAttribute {
      local GAttribute r;
      r.initIdType(_id, _type);
      r.parent_program <= _program;
      return deref r;
   }

   // <method_get.png>
   public method getInitialAttributeType() : int {
      return TYPE_FLOAT;
   }

   // <method_init.png>
   public virtual init() {
      GObject::init();
      type = getInitialAttributeType();
      initIO();
   }

   // <method.png>
   public virtual initIO() {
      inputs.free();
      outputs.free();
      addOutput(GOutput.OUT_DEF, type);
   }

   // <method.png>
   public virtual initIdType(String _id, int _type) {
      init();
      GObject::initIdType(_id, _type);
      initIO();
   }

   // <method_get.png>
   public virtual getInputDomain(String _inputId) : int {
      // no inputs
      return DOMAIN_GLSL;
   }

   // <method_get.png>
   public virtual getOutputDomain(String _outputId) : int {
      return DOMAIN_GLSL;
   }

   // <method_get.png>
   public virtual getObjectPathVirtFolder() : String {
      return "attributes";
   }

   // // // <method.png>
   // // public virtual getNamespacePrefix() : String {
   // //    local String r <= parent_program.getNamespacePrefix()+"_prg_"+parent_program.id+"_";
   // //    return deref r;
   // // }

   // <method.png>
   public virtual getVarName() : String {
      return getNamespacePrefix()+"_a_"+id;
   }

   // <method.png>
   public virtual getGLSLVarName() : String {
      return "a_"+id;
   }

   // <method_get.png>
   public method getGLAttribSourceType(GMesh _mesh) : int {
      // Query data type of actual attribute data (in memory)
      int srcType = type;

      // Special case handling: mesh output
      //  (note) may use different type than attrib GLSL type, auto-converted by OpenGL
      GOutput *meshOut;
      if(["position", "normal", "color", "uv"].containsObject(id))
      {
         meshOut <= _mesh.getOutputById(id);
         if(null != meshOut)
         {
            srcType = meshOut.type;
         }
      }

      return srcType;
   }

   // <method_get.png>
   public method getNumBytes(GMesh _mesh) : int {
      return GDefs.GetTypeSize(getGLAttribSourceType(_mesh));
   }

   // <method_get.png>
   public method getGLAttribTypeName(GMesh _mesh) : String {
      return GDefs.GetGLAttribTypeName(getGLAttribSourceType(_mesh));
   }

   // <method_get.png>
   public method getGLAttribTypeSize(GMesh _mesh) : int {
      return GDefs.GetGLAttribTypeSize(getGLAttribSourceType(_mesh));
   }

   // <method_get.png>
   public method getGLAttribNormalize(GMesh _mesh) : boolean {
      switch(getGLAttribSourceType(_mesh))
      {
         case TYPE_UBYTE:
         case TYPE_UBYTE_VEC2:
         case TYPE_UBYTE_VEC3:
         case TYPE_UBYTE_VEC4:
            return true;
      }
      return false;
   }

   // <method.png>
   public virtual emit(local String       _outputId,
                       local GModule      _module,
                       local GProgram     _program,
                       local String       _out,
                       local String       _dstVar,
                       local boolean      _bGLSL,
                       local PointerArray _objDone
                       ) {
      _out.append(_dstVar+" = "+getGLSLVarName()+";\n");
   }
}
