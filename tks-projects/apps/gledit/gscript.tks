// ----
// ---- file   : gscript.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 01Jul2020
// ---- changed: 03Jul2020, 08Jul2020, 14Aug2020
// ----
// ----
// ----
module MGScript;

use namespace ui;
use namespace gledit;


// <class.png>
class GScript : GMod, GSource {

   // <method_get.png>
   public virtual getPreferredIdPrefix() : String {
      return "script";
   }

   // <method_init.png>
   public virtual postInitNewAnon(int _parentInputType) {
      cached_file_content.append("out "+GDefs.GetScriptTypeName(_parentInputType)+" o;\n\no = "+GDefs.GetScriptDefaultTypeValue(_parentInputType)+";\n");
      parseString(cached_file_content);
   }

   // <ui_handle.png>
   public virtual handleRename(String _oldId, String _newId) {
      // Set initial path name
      local String pathName = getFileParamById("source");
      if(pathName.isBlank())
      {
         pathName = Utils.ToProjectPathName("$(PROJECT)/scripts/"+_newId+".tks");
         current_project.addSourceFileToWatchList(pathName);
         setFileParamById("source", pathName);
      }
   }

   // <method.png>
   protected virtual sourceHasDefaultOutput() : boolean {
      return true;
   }

   // <method_update.png>
   protected method sourceUpdateDefaultOutput() {
      GOutput outDef <= getOutputByIndex(0);
      outDef.id = GOutput.OUT_DEF;
      GOutput outFirst <= getOutputByIndex(1);
      if(null != outFirst)
      {
         outDef.type = outFirst.type;
         type = outFirst.type;  // not actually used ??
         Global.Debug2("GScript::sourceUpdateDefaultOutput: new type="+type);
      }
      else
      {
         // Placeholder until script declares actual type
         outDef.type = TYPE_FLOAT;
         type = TYPE_FLOAT;
      }
   }

}
