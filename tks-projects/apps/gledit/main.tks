// ----
// ---- file   : main.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL edit" application.
// ----
// ---- created: 12Jun2020
// ---- changed: 21Jun2020, 30Jun2020, 04Feb2025, 18Sep2025, 20Sep2025
// ----
// ----
// ----

module Main;

use tksdl;
// use tkmidi;

use namespace ui;
use namespace gledit;


// <ui_init.png>
// Initialize UI library
UI.SetEnableFBODepthBuffers(true);
if(GConfig.b_hidpi)
   UI.ConfigureHiDPI();
UI.Initialize(Arguments);

UI.SetKbdFocusSelectionModeBehaviour(GConfig.b_kbdfocusselectionmode_behaviour);

// UI.SetEnableTouchMode(true);  // mainly affects tooltip positions for now (WIP)

// UI.SetOnDrawPostProcessHook(OnDrawPostProcess);

// (note) [27May2018] always use node editor layout cache and invalidate it when root layer is resized
// // UI.b_allow_layout_cache = !GConfig.b_ui_resizable;
UI.b_allow_layout_cache = true;


// <ui_init.png>
////UI.AddIcon(PNGIcon.New("st2", "st2.png"));
UI.AddIcon(PNGIcon.NewMono("table_checkbox",    "table_checkbox.png"));
UI.AddIcon(PNGIcon.NewMono("table_checkbox_2x", "table_checkbox_2x.png"));

UI.AddIcon(PNGIcon.NewMono("mgrctl_link", "mgrctl_link.png"));
UI.AddIcon(PNGIcon.NewMono("mgrctl_link_2x", "mgrctl_link_2x.png"));

UI.AddIcon(PNGIcon.New("up", "up.png"));
UI.AddIcon(PNGIcon.New("down", "down.png"));

UI.AddIcon(PNGIcon.New("back_xl", "back_xl.png"));
UI.AddIcon(PNGIcon.New("back_s",  "back_s.png"));

UI.AddIcon(PNGIcon.New("back_xl_mono", "back_xl_mono.png"));
UI.AddIcon(PNGIcon.New("back_s_mono",  "back_s_mono.png"));

UI.AddIcon(PNGIcon.New("prj_new",  "prj_new.png"));
UI.AddIcon(PNGIcon.New("prj_load", "prj_load.png"));
UI.AddIcon(PNGIcon.New("prj_save", "prj_save.png"));

UI.AddIcon(PNGIcon.New("cfg_save", "cfg_save.png"));

UI.AddIcon(PNGIcon.New("add",         "add.png"));
UI.AddIcon(PNGIcon.New("add_mono",    "add_mono.png"));

UI.AddIcon(PNGIcon.New("addh",        "addh.png"));
UI.AddIcon(PNGIcon.New("addh_mono",   "addh_mono.png"));

UI.AddIcon(PNGIcon.New("adds",        "adds.png"));
UI.AddIcon(PNGIcon.New("adds_mono",   "adds_mono.png"));

UI.AddIcon(PNGIcon.New("addquick",      "addquick.png"));
UI.AddIcon(PNGIcon.New("addquick_mono", "addquick_mono.png"));

UI.AddIcon(PNGIcon.New("remove",      "remove.png"));
UI.AddIcon(PNGIcon.New("remove_mono", "remove_mono.png"));

UI.AddIcon(PNGIcon.New("removeh",      "removeh.png"));
UI.AddIcon(PNGIcon.New("removeh_mono", "removeh_mono.png"));

UI.AddIcon(PNGIcon.New("removes",      "removes.png"));
UI.AddIcon(PNGIcon.New("removes_mono", "removes_mono.png"));

UI.AddIcon(PNGIcon.New("clear",       "clear.png"));
UI.AddIcon(PNGIcon.New("clone",       "clone.png"));
UI.AddIcon(PNGIcon.New("clone_mono",  "clone_mono.png"));
UI.AddIcon(PNGIcon.New("tools",       "tools.png"));
UI.AddIcon(PNGIcon.New("tools_mono",  "tools_mono.png"));

UI.AddIcon(PNGIcon.New("add_sm",    "add_sm.png"));
UI.AddIcon(PNGIcon.New("remove_sm", "remove_sm.png"));

UI.AddIcon(PNGIcon.New("add_sm_mono",    "add_sm_mono.png"));
UI.AddIcon(PNGIcon.New("remove_sm_mono", "remove_sm_mono.png"));

UI.AddIcon(PNGIcon.New("stop_sm",      "stop_sm.png"));
UI.AddIcon(PNGIcon.New("stop_sm_gray", "stop_sm_gray.png"));
UI.AddIcon(PNGIcon.New("stop_mono",    "stop_mono.png"));

UI.AddIcon(PNGIcon.New("exit",     "exit.png"));
UI.AddIcon(PNGIcon.New("cancel",   "cancel.png"));

UI.AddIcon(PNGIcon.New("chbarr_0",   "chbarr_0.png"));
UI.AddIcon(PNGIcon.New("chbarr_0_1", "chbarr_0_1.png"));
UI.AddIcon(PNGIcon.New("chbarr_1",   "chbarr_1.png"));
UI.AddIcon(PNGIcon.New("chbarr_1_0", "chbarr_1_0.png"));

UI.AddIcon(PNGIcon.New("chbarr_0_dark",   "chbarr_0_dark.png"));
UI.AddIcon(PNGIcon.New("chbarr_0_1_dark", "chbarr_0_1_dark.png"));
UI.AddIcon(PNGIcon.New("chbarr_1_dark",   "chbarr_1_dark.png"));
UI.AddIcon(PNGIcon.New("chbarr_1_0_dark", "chbarr_1_0_dark.png"));

// UI.AddIcon(PNGIcon.New("project",  "project.png"));
// UI.AddIcon(PNGIcon.New("pipes",    "pipes.png"));
// UI.AddIcon(PNGIcon.New("config",   "config.png"));
// UI.AddIcon(PNGIcon.New("mapper",   "mapper.png"));
// UI.AddIcon(PNGIcon.New("monitor",  "monitor.png"));
// UI.AddIcon(PNGIcon.NewMono("sysex",    "sysex.png"));
// UI.AddIcon(PNGIcon.New("audio",    "audio.png"));
// UI.AddIcon(PNGIcon.New("presets",  "presets.png"));

// //UI.AddIcon(PNGIcon.New("tape",        "tape.png"));
// UI.AddIcon(PNGIcon.New("prefs",       "prefs.png"));

UI.AddIcon(PNGIcon.New("moveup",   "moveup.png"));
UI.AddIcon(PNGIcon.New("movedown", "movedown.png"));

UI.AddIcon(PNGIcon.New("moveuph",   "moveuph.png"));
UI.AddIcon(PNGIcon.New("movedownh", "movedownh.png"));

UI.AddIcon(PNGIcon.New("moveup_mono",   "moveup_mono.png"));
UI.AddIcon(PNGIcon.New("movedown_mono", "movedown_mono.png"));

UI.AddIcon(PNGIcon.New("moveuph_mono",   "moveuph_mono.png"));
UI.AddIcon(PNGIcon.New("movedownh_mono", "movedownh_mono.png"));

UI.AddIcon(PNGIcon.New("file_browse", "file_browse.png"));

UI.AddIcon(PNGIcon.NewMono("mute_0",   "mute_0.png"));
UI.AddIcon(PNGIcon.NewMono("mute_0_1", "mute_0_1.png"));
UI.AddIcon(PNGIcon.NewMono("mute_1",   "mute_1.png"));
UI.AddIcon(PNGIcon.NewMono("mute_1_0", "mute_1_0.png"));

UI.AddIcon(PNGIcon.NewMono("mute_0_dark",   "mute_0.png"));
UI.AddIcon(PNGIcon.NewMono("mute_0_1_dark", "mute_0_1.png"));
UI.AddIcon(PNGIcon.NewMono("mute_1_dark",   "mute_1.png"));
UI.AddIcon(PNGIcon.NewMono("mute_1_0_dark", "mute_1_0.png"));

UI.AddIcon(PNGIcon.New("trashcan_sm", "trashcan_sm.png"));

UI.AddIcon(PNGIcon.New("lock_0",   "lock_0.png"));
UI.AddIcon(PNGIcon.New("lock_0_1", "lock_0_1.png"));
UI.AddIcon(PNGIcon.New("lock_1",   "lock_1.png"));
UI.AddIcon(PNGIcon.New("lock_1_0", "lock_1_0.png"));

UI.AddIcon(PNGIcon.New("lock_0_dark",   "lock_0.png"));
UI.AddIcon(PNGIcon.New("lock_0_1_dark", "lock_0_1.png"));
UI.AddIcon(PNGIcon.New("lock_1_dark",   "lock_1.png"));
UI.AddIcon(PNGIcon.New("lock_1_0_dark", "lock_1_0.png"));

UI.AddIcon(PNGIcon.New("env_pencil",      "env_pencil.png"));
UI.AddIcon(PNGIcon.New("env_pencil_mono", "env_pencil_mono.png"));
UI.AddIcon(PNGIcon.New("env_smoothen",    "env_smoothen.png"));
UI.AddIcon(PNGIcon.New("env_nudge",       "env_nudge.png"));

UI.AddIcon(PNGIcon.New("ok_sm", "ok_sm.png"));
UI.AddIcon(PNGIcon.New("cancel_sm", "cancel_sm.png"));


// <ui_init.png>
FontResource *fr;

int fsz;

fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, 14);
fr.setEnableMonochrome(false);
UI.AddFontResource(deref fr);
fsz = 14 * GConfig.font_scaling;
UI.AddFontAlias("default "+fsz, "big9");

fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, 16);
UI.AddFontResource(deref fr);
fsz = 16 * GConfig.font_scaling;
UI.AddFontAlias("default "+fsz, "big8");

fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, 20);
fr.setEnableMonochrome(false);
UI.AddFontResource(deref fr);
fsz = 20 * GConfig.font_scaling;
UI.AddFontAlias("default "+fsz, "big7");

fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, 24);
fr.setEnableMonochrome(false);
UI.AddFontResource(deref fr);
fsz = 24 * GConfig.font_scaling;
UI.AddFontAlias("default "+fsz, "big6");

fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, 32);
fr.setEnableMonochrome(false);
UI.AddFontResource(deref fr);
fsz = 32 * GConfig.font_scaling;
UI.AddFontAlias("default "+fsz, "big5");

fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, 48);
fr.setEnableMonochrome(false);
UI.AddFontResource(deref fr);
fsz = 48 * GConfig.font_scaling;
UI.AddFontAlias("default "+fsz, "big4");

fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, 64);
fr.setEnableMonochrome(false);
UI.AddFontResource(deref fr);
fsz = 64 * GConfig.font_scaling;
UI.AddFontAlias("default "+fsz, "big3");

fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, 74);
fr.setEnableMonochrome(false);
UI.AddFontResource(deref fr);
fsz = 74 * GConfig.font_scaling;
UI.AddFontAlias("default "+fsz, "big2");

fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, 84);
fr.setEnableMonochrome(false);
UI.AddFontResource(deref fr);
fsz = 84 * GConfig.font_scaling;
UI.AddFontAlias("default "+fsz, "big1");



// <event_handler.png>
// -----------------------------------------------------------------------------
//
// onSignal - Handles POSIX-style process signals
//
// -----------------------------------------------------------------------------
function onSignal(int sig) {
   Global.Debug("onSignal("+sig+")");
   if(2 == sig)
   {
      trace "[~~~] stop on signal "+sig;
      UI.Stop();
      Global.Exit();
   }
}

// <event_handler.png>
// -----------------------------------------------------------------------------
//
// onSegV - Called when a segmentation violation has occured (d'oh!)
//
// -----------------------------------------------------------------------------
function onSegV() {
   Global.CrashAutosave(true/*bHard*/);

   // Run SegVContinue
   // // return true;
}

use onSegV for TKS.onSegV;


// <event_handler.png>
// -----------------------------------------------------------------------------
//
// onClose - Called when the user tries to close the desktop window
//
// -----------------------------------------------------------------------------
function SDL_onClose() {
   trace "[dbg] main::SDL_onClose() called";

   Global.HandleOnClose();

   return false;
}


// <function.png>
// -----------------------------------------------------------------------------
//
// main - Here be dragons!
//
// -----------------------------------------------------------------------------
function main() {

   // (note) shader init on ATI (nb) fails (glLinkProgram()) when window is not opened before first thread is created
   // (note) the workaround is to simply open and close a window before doing anything else :^)
   Viewport.openWindow(320, 240); // xxxxxxxxxxxxxxxxx
   Viewport.close();

   UI.SetEnableTransparentLayers(GConfig.b_transparent_layers);

   // Save current working directory
   //  (note) some VST plugins change it, leaving the application in the "wrong" directory afterwards
   //          by saving it at program start, the directory can be restored after initializing a VST
   gledit::program_directory = tkfileutils_getcwd();

   if(0 == Configuration.debugLevel)
   {
      Configuration.debugLevel = GConfig.b_debug_lofreq ? 1 : 0;
   }

   Global.Debug("program_directory=\""+gledit::program_directory+"\".");

   // Thread.SetProcessPriorityClass(PROCESS_PRIORITY_CLASS_REALTIME);

   if(Global.Init())
   {
      UI.SetRootForm(root_form);
      boolean bHiDPI = GConfig.b_hidpi && 1;
      int windowSx = bHiDPI ? GConfig.window_sx_hidpi : GConfig.window_sx_lodpi;
      int windowSy = bHiDPI ? GConfig.window_sy_hidpi : GConfig.window_sy_lodpi;
      Global.Debug("Opening window, size=("+windowSx+"; "+windowSy+")");
      UI.SetZoom(GConfig.zoom_x, GConfig.zoom_y);
      UI.OpenWindow(windowSx * GConfig.zoom_x,
                    windowSy * GConfig.zoom_y
                    );

      use SDL_onClose for SDL.onClose;  // (note) overrides UI.onClose

      // //Viewport.setEnableRedraw(false);

      // Enable/disable vsync
      Global.ConfigureVSync();

      // Fullscreen
      Global.ConfigureFullscreenDisplaySize();
      if(GConfig.b_fullscreen)
      {
         Viewport.toggleFullScreen();
      }

      use onSignal for TKS.onSignal;

      // if(!(GConfig.autoload_filename.isBlank()))
      // {
      //    Global.cmd_file_load(GConfig.autoload_filename);
      // }

      try
      {
         Global.PreRun();

         UI.Run();
      }
      catch(Error e)
      {
         trace "[...] caught exception e.msg="+e.message+"\n"+e.stackTrace;
         // Global.CrashAutosave(false);
      }

      Global.Exit();
   }
   else
   {
      trace "[---] Global::init() failed.";
   }
}
