//
// auto-generated by GL Edit v2025.02.09 on 20250920-102657
//
use tksdl;
use tkopengl;
use tkmath;

boolean b_glcore = getenv("TKSDL_GLCORE");
int vao_id;

float g_time;
int g_default_fb;
int g_default_vp_x;
int g_default_vp_y;
int g_default_vp_w;
int g_default_vp_h;
float g_dt;
int last_model_id;    // (note) set to 0 to force attrib/buffer rebind
int last_program_id;  // (note) set to 0 to force program rebind
boolean g_init;
int g_tri_count;
OrbitCamView *g_edit_cam;

// -------- section "default_wavescene_wave_prg_prg1" --------
ZGLShader default_wavescene_wave_prg_prg1;
String default_wavescene_wave_prg_prg1_vtx_src = "in vec4 a_position;
in vec2 a_uv;
in vec4 a_color;
in vec3 a_normal;
uniform mat4 u_transform;
uniform float u_time;
uniform sampler2D u_tex;
uniform sampler2D u_tex_hmap;
uniform vec4 u_proxy_tween_colors_out;
out vec2 v_uv;
out vec4 v_color;
out vec3 v_normal;

void fxn1_hmap_modulate(in vec4 i_position, out vec4 o_position) {
   vec4 c = texture(u_tex_hmap, vec2(i_position.x*0.5+0.5, 0.0)); 
   c *= 0.7; 
   o_position = i_position + c; 
   
}

void main() {
   vec4 tmp1_gl_Position;
   vec4 tmp2_fxnIn_i_position;
   vec4 tmp3_fxnOut_o_position;
   tmp2_fxnIn_i_position = a_position;
   fxn1_hmap_modulate(tmp2_fxnIn_i_position, tmp3_fxnOut_o_position);
   tmp1_gl_Position = tmp3_fxnOut_o_position; // read GSource id=hmap_modulate output=o_position
   mat4 tmp4_inTransform;
   tmp4_inTransform = u_transform;
   tmp1_gl_Position = tmp4_inTransform * tmp1_gl_Position;
   v_uv = a_uv;
   v_color = vec4(1, 1, 1, 1);
   v_normal = vec3(0,0,0); /* not connected */
   gl_Position = tmp1_gl_Position;
   
}
";
String default_wavescene_wave_prg_prg1_frag_src = "uniform mat4 u_transform;
uniform float u_time;
uniform sampler2D u_tex;
uniform sampler2D u_tex_hmap;
uniform vec4 u_proxy_tween_colors_out;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

in vec2 v_uv;
in vec4 v_color;
in vec3 v_normal;

out vec4 o_FragColor;


void fxn2_src1(out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   o_color = texture(u_tex, v_uv); 
   
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp5_fxnOut_o_color;
   fxn2_src1(tmp5_fxnOut_o_color, g_FragCoord, g_NormCoord);
   o_FragColor = tmp5_fxnOut_o_color; // read GSource id=src1 output=o_color
   vec4 tmp6_color_dst;
   tmp6_color_dst = u_proxy_tween_colors_out;
   o_FragColor = tmp6_color_dst + o_FragColor;
   
}
";
int default_wavescene_wave_prg_prg1__a_position;
int default_wavescene_wave_prg_prg1__a_uv;
int default_wavescene_wave_prg_prg1__a_color;
int default_wavescene_wave_prg_prg1__a_normal;
int default_wavescene_wave_prg_prg1__u_transform;
int default_wavescene_wave_prg_prg1__u_time;
int default_wavescene_wave_prg_prg1__u_tex;
int default_wavescene_wave_prg_prg1__u_tex_hmap;
int default_wavescene_wave_prg_prg1__u_proxy_tween_colors_out;
int default_wavescene_wave_prg_prg1_u_fragcoord_off_scl;
int default_wavescene_wave_prg_prg1_u_normcoord_scl;

// -------- section "default_wavescene_model_wave" --------
int g_mod_default_wavescene_wave_cam_tween_src_idx = 0;
int g_mod_default_wavescene_wave_cam_tween_dst_idx = 1;
float g_mod_default_wavescene_wave_cam_tween_t = 0.0f;
boolean g_mod_default_wavescene_wave_cam_tween_adv = false;

function CalcMat4Perspective(Matrix4f _d, float aspect, float fov, float znear, float zfar) {
   float top = tan(fov * 2PI * (1.0f/360.0f) * 0.5f) * znear;
   float left   = aspect*-top;
   float right  = aspect*top;
   float bottom = -top;

   float near2 = (2.0f * znear);

   float a = near2 / (right - left);
   float b = near2 / (top - bottom);

   float c = (right + left) / (right - left);
   float d = (top + bottom) / (top - bottom);
   float e = -(zfar + znear) / (zfar - znear);

   float f = -(2.0f * zfar * znear) / (zfar - znear);

   _d = [a,0,c,0,
         0,b,d,0,
         0,0,e,f,
         0,0,-1,0
         ];
   //trace "xxx mat4persp="+#(_d);
}
float ext_default_global_time = 0.0f;
Texture *default_wavescene_wave_tex_tex1;
Texture *default_wavescene_wave_tex_tex_hmap;
int g_mod_default_tween_colors_src_idx = 0;
int g_mod_default_tween_colors_dst_idx = 1;
float g_mod_default_tween_colors_t = 0.0f;
boolean g_mod_default_tween_colors_adv = false;
int default_wavescene_buf_wave_a;
Buffer *default_wavescene_buf_wave_a_data;
int default_wavescene_buf_wave_i;
Buffer *default_wavescene_buf_wave_i_data;

// -------- section "default_wavescene_blit_prg_prg_blit" --------
ZGLShader default_wavescene_blit_prg_prg_blit;
String default_wavescene_blit_prg_prg_blit_vtx_src = "in vec4 a_position;
uniform sampler2D u_tex;

void main() {
   vec4 tmp7_gl_Position;
   tmp7_gl_Position = a_position;
   gl_Position = tmp7_gl_Position;
   
}
";
String default_wavescene_blit_prg_prg_blit_frag_src = "uniform sampler2D u_tex;
uniform vec4 u_fragcoord_off_scl;
uniform vec2 u_normcoord_scl;

out vec4 o_FragColor;


void fxn4_src(out vec4 o_color, in vec4 g_FragCoord, in vec2 g_NormCoord) {
   o_color = texture(u_tex, g_NormCoord*0.5+0.5);
   
}

void main() {
   vec4 g_FragCoord = vec4((gl_FragCoord.xy + u_fragcoord_off_scl.xy) * u_fragcoord_off_scl.zw, gl_FragCoord.zw);
   vec2 g_NormCoord = g_FragCoord.xy * u_normcoord_scl - 1.0;
   vec4 tmp8_fxnOut_o_color;
   fxn4_src(tmp8_fxnOut_o_color, g_FragCoord, g_NormCoord);
   o_FragColor = tmp8_fxnOut_o_color; // read GSource id=src output=o_color
   
}
";
int default_wavescene_blit_prg_prg_blit__a_position;
int default_wavescene_blit_prg_prg_blit__u_tex;
int default_wavescene_blit_prg_prg_blit_u_fragcoord_off_scl;
int default_wavescene_blit_prg_prg_blit_u_normcoord_scl;

// -------- section "default_wavescene_blit_model_blit" --------
int default_wavescene_blit_buf_blit_a;
Buffer *default_wavescene_blit_buf_blit_a_data;

// -------- section "default_wavescene_renderpass_wave" --------

// -------- section "default_wavescene_renderpass_blit" --------

// -------- section "default_scene_wavescene" --------
Texture *default_wavescene_wave_tex_tex_fbo;
int default_wavescene_wave_fbo_fbo;
int default_wavescene_wave_fbo_msaa_fbo;
int default_wavescene_wave_fbo_msaa_fbo_tex;
int default_wavescene_wave_fbo_msaa_fbo_zs_rb;
int g_mod_global_scene_switch_switch_idx = 1;


function Init_default_wavescene_wave_prg_prg1() {
   default_wavescene_wave_prg_prg1.setVertexSource(default_wavescene_wave_prg_prg1_vtx_src);
   default_wavescene_wave_prg_prg1.setFragmentSource(default_wavescene_wave_prg_prg1_frag_src);
   if(!default_wavescene_wave_prg_prg1.create()) return false;
   default_wavescene_wave_prg_prg1__a_position = glGetAttribLocation(default_wavescene_wave_prg_prg1.programId, "a_position");
   default_wavescene_wave_prg_prg1__a_uv = glGetAttribLocation(default_wavescene_wave_prg_prg1.programId, "a_uv");
   default_wavescene_wave_prg_prg1__a_color = glGetAttribLocation(default_wavescene_wave_prg_prg1.programId, "a_color");
   default_wavescene_wave_prg_prg1__a_normal = glGetAttribLocation(default_wavescene_wave_prg_prg1.programId, "a_normal");
   default_wavescene_wave_prg_prg1__u_transform = glGetUniformLocation(default_wavescene_wave_prg_prg1.programId, "u_transform");
   default_wavescene_wave_prg_prg1__u_time = glGetUniformLocation(default_wavescene_wave_prg_prg1.programId, "u_time");
   default_wavescene_wave_prg_prg1__u_tex = glGetUniformLocation(default_wavescene_wave_prg_prg1.programId, "u_tex");
   default_wavescene_wave_prg_prg1__u_tex_hmap = glGetUniformLocation(default_wavescene_wave_prg_prg1.programId, "u_tex_hmap");
   default_wavescene_wave_prg_prg1__u_proxy_tween_colors_out = glGetUniformLocation(default_wavescene_wave_prg_prg1.programId, "u_proxy_tween_colors_out");
   default_wavescene_wave_prg_prg1_u_fragcoord_off_scl = glGetUniformLocation(default_wavescene_wave_prg_prg1.programId, "u_fragcoord_off_scl");
   default_wavescene_wave_prg_prg1_u_normcoord_scl = glGetUniformLocation(default_wavescene_wave_prg_prg1.programId, "u_normcoord_scl");
   
   return true;
}

function Exit_default_wavescene_wave_prg_prg1() {
   default_wavescene_wave_prg_prg1.destroy();
   
}

function fxn3_tween_pos(/*out*/Float o_time) {
   o_time = (g_time*0.6) % 4.0f;
   
}


function Init_default_wavescene_model_wave() {
   default_wavescene_buf_wave_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_wavescene_buf_wave_a);
   zglBufferData(GL_ARRAY_BUFFER, (44/*vtxAttribSz*/ * 64/*#verts*/), default_wavescene_buf_wave_a_data, GL_STATIC_DRAW);
   default_wavescene_buf_wave_i = zglGenBuffer();
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_wavescene_buf_wave_i);
   zglBufferData(GL_ELEMENT_ARRAY_BUFFER, (4/*GL_UNSIGNED_INT*/ * 186/*#indices*/), default_wavescene_buf_wave_i_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   
   return true;
}

function Draw_default_wavescene_model_wave(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(1 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_wavescene_buf_wave_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, default_wavescene_buf_wave_i);
      last_model_id = 1;
   }
   if(1 != last_program_id)
   {
      default_wavescene_wave_prg_prg1.bind();
   } // 1 != last_program_id
   glActiveTexture(GL_TEXTURE0+0);
   default_wavescene_wave_tex_tex1.bind();
   glActiveTexture(GL_TEXTURE0+1);
   default_wavescene_wave_tex_tex_hmap.bind();
   if(1 != last_program_id)
   {
      default_wavescene_wave_prg_prg1.bind();
      if(default_wavescene_wave_prg_prg1__a_position >= 0)
      {
        glEnableVertexAttribArray(default_wavescene_wave_prg_prg1__a_position);
        zglVertexAttribOffset(default_wavescene_wave_prg_prg1__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 44/*stride*/, 0);
      }
      if(default_wavescene_wave_prg_prg1__a_uv >= 0)
      {
        glEnableVertexAttribArray(default_wavescene_wave_prg_prg1__a_uv);
        zglVertexAttribOffset(default_wavescene_wave_prg_prg1__a_uv, 2, GL_FLOAT, GL_FALSE/*normalize*/, 44/*stride*/, 8);
      }
      if(default_wavescene_wave_prg_prg1__a_color >= 0)
      {
        glEnableVertexAttribArray(default_wavescene_wave_prg_prg1__a_color);
        zglVertexAttribOffset(default_wavescene_wave_prg_prg1__a_color, 4, GL_FLOAT, GL_FALSE/*normalize*/, 44/*stride*/, 16);
      }
      if(default_wavescene_wave_prg_prg1__a_normal >= 0)
      {
        glEnableVertexAttribArray(default_wavescene_wave_prg_prg1__a_normal);
        zglVertexAttribOffset(default_wavescene_wave_prg_prg1__a_normal, 3, GL_FLOAT, GL_FALSE/*normalize*/, 44/*stride*/, 32);
      }
      last_program_id = 1;
   } // 1 != last_program_id
   Matrix4f tmp1_init;
   
   //
   // Tween default.scenes.wavescene.models.wave.mods.cam_tween:
   //
   boolean tmp2_cam_tween_reset;
   boolean tmp3_cam_tween_prev;
   boolean tmp4_cam_tween_next;
   float tmp5_cam_tween_speed;
   tmp5_cam_tween_speed = 0.0166667;
   Float tmp6_fxnOut_o_time;
   fxn3_tween_pos(tmp6_fxnOut_o_time);
   g_mod_default_wavescene_wave_cam_tween_t = tmp6_fxnOut_o_time; // read GScript id=tween_pos output=o_time
   g_mod_default_wavescene_wave_cam_tween_src_idx = int(g_mod_default_wavescene_wave_cam_tween_t);
   g_mod_default_wavescene_wave_cam_tween_dst_idx = g_mod_default_wavescene_wave_cam_tween_src_idx + 1;
   g_mod_default_wavescene_wave_cam_tween_t = g_mod_default_wavescene_wave_cam_tween_t - int(g_mod_default_wavescene_wave_cam_tween_t);
   if(tmp2_cam_tween_reset) { g_mod_default_wavescene_wave_cam_tween_src_idx = 0; g_mod_default_wavescene_wave_cam_tween_dst_idx = 1; g_mod_default_wavescene_wave_cam_tween_t = 0.0f; }
   if(tmp3_cam_tween_prev) { g_mod_default_wavescene_wave_cam_tween_src_idx--; g_mod_default_wavescene_wave_cam_tween_dst_idx--; g_mod_default_wavescene_wave_cam_tween_t = 0.0f; }
   if(tmp4_cam_tween_next) { g_mod_default_wavescene_wave_cam_tween_src_idx++; g_mod_default_wavescene_wave_cam_tween_dst_idx++; g_mod_default_wavescene_wave_cam_tween_t = 0.0f; }
   if(g_mod_default_wavescene_wave_cam_tween_adv) { g_mod_default_wavescene_wave_cam_tween_adv = false; g_mod_default_wavescene_wave_cam_tween_src_idx++; g_mod_default_wavescene_wave_cam_tween_dst_idx++; }
   g_mod_default_wavescene_wave_cam_tween_src_idx = (g_mod_default_wavescene_wave_cam_tween_src_idx % 4);
   g_mod_default_wavescene_wave_cam_tween_dst_idx = (g_mod_default_wavescene_wave_cam_tween_dst_idx % 4);
   Matrix4f tmp7_cam_tween_src;
   Matrix4f tmp8_cam_tween_dst;
   if( (g_mod_default_wavescene_wave_cam_tween_src_idx == 0) || (g_mod_default_wavescene_wave_cam_tween_dst_idx == 0) )
   {
      // input 1/4: 4 connections, first=default.scenes.wavescene.models.wave.mods.cam1
      Matrix4f tmp9_cam_tween_input_0;
      // GMat4Perspective id=default.scenes.wavescene.models.wave.mods.cam1.inputs.in.0
      CalcMat4Perspective(tmp9_cam_tween_input_0, 1, 45, 0.1, 20);
      //tmp9_cam_tween_input_0.initFrustumFov(1, 45, 0.1, 20);
      //trace "mat4frustumfov="+#(tmp9_cam_tween_input_0);
      Matrix4f tmp10_in_dst;
      // GMat4Translate id= id=default.scenes.wavescene.models.wave.mods.cam1.inputs.in.1
      tmp10_in_dst.initTranslatef(0, 0, -2.27299);
      // connOp=OP_MUL this_input.id=in
      tmp9_cam_tween_input_0 = tmp9_cam_tween_input_0 * tmp10_in_dst;
      // GMat4RotateXYZ id=<anon>
      tmp10_in_dst.initEulerXYZ(-0.965385, 0, 0);
      // connOp=OP_MUL this_input.id=in
      tmp9_cam_tween_input_0 = tmp9_cam_tween_input_0 * tmp10_in_dst;
      
      if(g_mod_default_wavescene_wave_cam_tween_src_idx == 0)
         tmp7_cam_tween_src = tmp9_cam_tween_input_0;
      if(g_mod_default_wavescene_wave_cam_tween_dst_idx == 0)
         tmp8_cam_tween_dst = tmp9_cam_tween_input_0;
   } // end tween inputIdx=0
   if( (g_mod_default_wavescene_wave_cam_tween_src_idx == 1) || (g_mod_default_wavescene_wave_cam_tween_dst_idx == 1) )
   {
      // input 2/4: 4 connections, first=default.scenes.wavescene.models.wave.mods.cam1
      Matrix4f tmp11_cam_tween_input_1;
      // GMat4Perspective id=default.scenes.wavescene.models.wave.mods.cam2.inputs.in.0
      CalcMat4Perspective(tmp11_cam_tween_input_1, 1, 64.918, 0.1, 24.7153);
      //tmp11_cam_tween_input_1.initFrustumFov(1, 64.918, 0.1, 24.7153);
      //trace "mat4frustumfov="+#(tmp11_cam_tween_input_1);
      Matrix4f tmp12_in_dst;
      // GMat4Translate id= id=default.scenes.wavescene.models.wave.mods.cam2.inputs.in.1
      tmp12_in_dst.initTranslatef(-0.04395, 0, -1.43747);
      // connOp=OP_MUL this_input.id=in
      tmp11_cam_tween_input_1 = tmp11_cam_tween_input_1 * tmp12_in_dst;
      // GMat4RotateXYZ id=<anon>
      tmp12_in_dst.initEulerXYZ(-0.965394, 0.148292, 0);
      // connOp=OP_MUL this_input.id=in
      tmp11_cam_tween_input_1 = tmp11_cam_tween_input_1 * tmp12_in_dst;
      
      if(g_mod_default_wavescene_wave_cam_tween_src_idx == 1)
         tmp7_cam_tween_src = tmp11_cam_tween_input_1;
      if(g_mod_default_wavescene_wave_cam_tween_dst_idx == 1)
         tmp8_cam_tween_dst = tmp11_cam_tween_input_1;
   } // end tween inputIdx=1
   if( (g_mod_default_wavescene_wave_cam_tween_src_idx == 2) || (g_mod_default_wavescene_wave_cam_tween_dst_idx == 2) )
   {
      // input 3/4: 4 connections, first=default.scenes.wavescene.models.wave.mods.cam1
      Matrix4f tmp13_cam_tween_input_2;
      // GMat4Perspective id=default.scenes.wavescene.models.wave.mods.cam3.inputs.in.0
      CalcMat4Perspective(tmp13_cam_tween_input_2, 1, 45, 0.1, 20);
      //tmp13_cam_tween_input_2.initFrustumFov(1, 45, 0.1, 20);
      //trace "mat4frustumfov="+#(tmp13_cam_tween_input_2);
      Matrix4f tmp14_in_dst;
      // GMat4Translate id= id=default.scenes.wavescene.models.wave.mods.cam3.inputs.in.1
      tmp14_in_dst.initTranslatef(0, 0, -8.33726);
      // connOp=OP_MUL this_input.id=in
      tmp13_cam_tween_input_2 = tmp13_cam_tween_input_2 * tmp14_in_dst;
      // GMat4RotateXYZ id=<anon>
      tmp14_in_dst.initEulerXYZ(-0.703595, -0.227036, 0);
      // connOp=OP_MUL this_input.id=in
      tmp13_cam_tween_input_2 = tmp13_cam_tween_input_2 * tmp14_in_dst;
      
      if(g_mod_default_wavescene_wave_cam_tween_src_idx == 2)
         tmp7_cam_tween_src = tmp13_cam_tween_input_2;
      if(g_mod_default_wavescene_wave_cam_tween_dst_idx == 2)
         tmp8_cam_tween_dst = tmp13_cam_tween_input_2;
   } // end tween inputIdx=2
   if( (g_mod_default_wavescene_wave_cam_tween_src_idx == 3) || (g_mod_default_wavescene_wave_cam_tween_dst_idx == 3) )
   {
      // input 4/4: 4 connections, first=default.scenes.wavescene.models.wave.mods.cam1
      Matrix4f tmp15_cam_tween_input_3;
      // GMat4Perspective id=default.scenes.wavescene.models.wave.mods.cam4.inputs.in.0
      CalcMat4Perspective(tmp15_cam_tween_input_3, 1, 45, 0.1, 20);
      //tmp15_cam_tween_input_3.initFrustumFov(1, 45, 0.1, 20);
      //trace "mat4frustumfov="+#(tmp15_cam_tween_input_3);
      Matrix4f tmp16_in_dst;
      // GMat4Translate id= id=default.scenes.wavescene.models.wave.mods.cam4.inputs.in.1
      tmp16_in_dst.initTranslatef(0, 0.77962, -3.97177);
      // connOp=OP_MUL this_input.id=in
      tmp15_cam_tween_input_3 = tmp15_cam_tween_input_3 * tmp16_in_dst;
      // GMat4RotateXYZ id=<anon>
      tmp16_in_dst.initEulerXYZ(-0.703595, -0.227036, 0);
      // connOp=OP_MUL this_input.id=in
      tmp15_cam_tween_input_3 = tmp15_cam_tween_input_3 * tmp16_in_dst;
      
      if(g_mod_default_wavescene_wave_cam_tween_src_idx == 3)
         tmp7_cam_tween_src = tmp15_cam_tween_input_3;
      if(g_mod_default_wavescene_wave_cam_tween_dst_idx == 3)
         tmp8_cam_tween_dst = tmp15_cam_tween_input_3;
   } // end tween inputIdx=3
   // Tween interpol=easeOutBounce
   float tmp17_cam_tween_teaseoutbounce;
   if(g_mod_default_wavescene_wave_cam_tween_t < (1 / 2.75/*d1*/)) tmp17_cam_tween_teaseoutbounce = 7.5625/*n1*/ * g_mod_default_wavescene_wave_cam_tween_t * g_mod_default_wavescene_wave_cam_tween_t;
   else if(g_mod_default_wavescene_wave_cam_tween_t < (2 / 2.75/*d1*/)) { tmp17_cam_tween_teaseoutbounce = (g_mod_default_wavescene_wave_cam_tween_t - 1.5 / 2.75/*d1*/); tmp17_cam_tween_teaseoutbounce = 7.5625/*n1*/ * tmp17_cam_tween_teaseoutbounce * tmp17_cam_tween_teaseoutbounce + 0.75; }
   else if(g_mod_default_wavescene_wave_cam_tween_t < (2.5 / 2.75/*d1*/)) { tmp17_cam_tween_teaseoutbounce = (g_mod_default_wavescene_wave_cam_tween_t - 2.25 / 2.75/*d1*/); tmp17_cam_tween_teaseoutbounce = 7.5625/*n1*/ * tmp17_cam_tween_teaseoutbounce * tmp17_cam_tween_teaseoutbounce + 0.9375; }
   else { tmp17_cam_tween_teaseoutbounce = (g_mod_default_wavescene_wave_cam_tween_t - 2.625 / 2.75/*d1*/); tmp17_cam_tween_teaseoutbounce = 7.5625/*n1*/ * tmp17_cam_tween_teaseoutbounce * tmp17_cam_tween_teaseoutbounce + 0.984375; }
   tmp1_init[0] = tmp7_cam_tween_src[0] + (tmp8_cam_tween_dst[0] - tmp7_cam_tween_src[0]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[1] = tmp7_cam_tween_src[1] + (tmp8_cam_tween_dst[1] - tmp7_cam_tween_src[1]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[2] = tmp7_cam_tween_src[2] + (tmp8_cam_tween_dst[2] - tmp7_cam_tween_src[2]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[3] = tmp7_cam_tween_src[3] + (tmp8_cam_tween_dst[3] - tmp7_cam_tween_src[3]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[4] = tmp7_cam_tween_src[4] + (tmp8_cam_tween_dst[4] - tmp7_cam_tween_src[4]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[5] = tmp7_cam_tween_src[5] + (tmp8_cam_tween_dst[5] - tmp7_cam_tween_src[5]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[6] = tmp7_cam_tween_src[6] + (tmp8_cam_tween_dst[6] - tmp7_cam_tween_src[6]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[7] = tmp7_cam_tween_src[7] + (tmp8_cam_tween_dst[7] - tmp7_cam_tween_src[7]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[8] = tmp7_cam_tween_src[8] + (tmp8_cam_tween_dst[8] - tmp7_cam_tween_src[8]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[9] = tmp7_cam_tween_src[9] + (tmp8_cam_tween_dst[9] - tmp7_cam_tween_src[9]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[10] = tmp7_cam_tween_src[10] + (tmp8_cam_tween_dst[10] - tmp7_cam_tween_src[10]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[11] = tmp7_cam_tween_src[11] + (tmp8_cam_tween_dst[11] - tmp7_cam_tween_src[11]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[12] = tmp7_cam_tween_src[12] + (tmp8_cam_tween_dst[12] - tmp7_cam_tween_src[12]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[13] = tmp7_cam_tween_src[13] + (tmp8_cam_tween_dst[13] - tmp7_cam_tween_src[13]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[14] = tmp7_cam_tween_src[14] + (tmp8_cam_tween_dst[14] - tmp7_cam_tween_src[14]) * tmp17_cam_tween_teaseoutbounce;
   tmp1_init[15] = tmp7_cam_tween_src[15] + (tmp8_cam_tween_dst[15] - tmp7_cam_tween_src[15]) * tmp17_cam_tween_teaseoutbounce;
   
   if(null != _transform)
   {
      Matrix4f tmp18__transform_mat;
      _transform.mul(tmp1_init) => tmp18__transform_mat;
      glUniformMatrix4fv(default_wavescene_wave_prg_prg1__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp18__transform_mat);
   }
   else
   {
      glUniformMatrix4fv(default_wavescene_wave_prg_prg1__u_transform, 1/*count*/, GL_TRUE/*transpose*/, tmp1_init);
   }
   float tmp19_init;
   tmp19_init = ext_default_global_time;
   glUniform1f(default_wavescene_wave_prg_prg1__u_time, tmp19_init);
   glUniform1i(default_wavescene_wave_prg_prg1__u_tex, 0);  // bind texture unit 0 to sampler2D
   glUniform1i(default_wavescene_wave_prg_prg1__u_tex_hmap, 1);  // bind texture unit 1 to sampler2D
   Vector4f tmp20_init;
   
   //
   // Tween default.mods.tween_colors:
   //
   boolean tmp21_tween_colors_reset;
   boolean tmp22_tween_colors_prev;
   boolean tmp23_tween_colors_next;
   float tmp24_tween_colors_speed;
   tmp24_tween_colors_speed = 0.00919;
   if(tmp21_tween_colors_reset) { g_mod_default_tween_colors_src_idx = 0; g_mod_default_tween_colors_dst_idx = 1; g_mod_default_tween_colors_t = 0.0f; }
   if(tmp22_tween_colors_prev) { g_mod_default_tween_colors_src_idx--; g_mod_default_tween_colors_dst_idx--; g_mod_default_tween_colors_t = 0.0f; }
   if(tmp23_tween_colors_next) { g_mod_default_tween_colors_src_idx++; g_mod_default_tween_colors_dst_idx++; g_mod_default_tween_colors_t = 0.0f; }
   if(g_mod_default_tween_colors_adv) { g_mod_default_tween_colors_adv = false; g_mod_default_tween_colors_src_idx++; g_mod_default_tween_colors_dst_idx++; }
   g_mod_default_tween_colors_src_idx = (g_mod_default_tween_colors_src_idx % 3);
   g_mod_default_tween_colors_dst_idx = (g_mod_default_tween_colors_dst_idx % 3);
   Vector4f tmp25_tween_colors_src;
   Vector4f tmp26_tween_colors_dst;
   if( (g_mod_default_tween_colors_src_idx == 0) || (g_mod_default_tween_colors_dst_idx == 0) )
   {
      // input 1/3: 3 connections, first=default.constants.blue
      Vector4f tmp27_tween_colors_input_0;
      tmp27_tween_colors_input_0 = vector4f(0, 0, 1, 1);
      
      if(g_mod_default_tween_colors_src_idx == 0)
         tmp25_tween_colors_src = tmp27_tween_colors_input_0;
      if(g_mod_default_tween_colors_dst_idx == 0)
         tmp26_tween_colors_dst = tmp27_tween_colors_input_0;
   } // end tween inputIdx=0
   if( (g_mod_default_tween_colors_src_idx == 1) || (g_mod_default_tween_colors_dst_idx == 1) )
   {
      // input 2/3: 3 connections, first=default.constants.blue
      Vector4f tmp28_tween_colors_input_1;
      tmp28_tween_colors_input_1 = vector4f(1, 0, 0, 1);
      
      if(g_mod_default_tween_colors_src_idx == 1)
         tmp25_tween_colors_src = tmp28_tween_colors_input_1;
      if(g_mod_default_tween_colors_dst_idx == 1)
         tmp26_tween_colors_dst = tmp28_tween_colors_input_1;
   } // end tween inputIdx=1
   if( (g_mod_default_tween_colors_src_idx == 2) || (g_mod_default_tween_colors_dst_idx == 2) )
   {
      // input 3/3: 3 connections, first=default.constants.blue
      Vector4f tmp29_tween_colors_input_2;
      tmp29_tween_colors_input_2 = vector4f(0, 1, 0, 1);
      
      if(g_mod_default_tween_colors_src_idx == 2)
         tmp25_tween_colors_src = tmp29_tween_colors_input_2;
      if(g_mod_default_tween_colors_dst_idx == 2)
         tmp26_tween_colors_dst = tmp29_tween_colors_input_2;
   } // end tween inputIdx=2
   // Tween interpol=Linear
   tmp20_init.x = tmp25_tween_colors_src.x + (tmp26_tween_colors_dst.x - tmp25_tween_colors_src.x) * g_mod_default_tween_colors_t;
   tmp20_init.y = tmp25_tween_colors_src.y + (tmp26_tween_colors_dst.y - tmp25_tween_colors_src.y) * g_mod_default_tween_colors_t;
   tmp20_init.z = tmp25_tween_colors_src.z + (tmp26_tween_colors_dst.z - tmp25_tween_colors_src.z) * g_mod_default_tween_colors_t;
   tmp20_init.w = tmp25_tween_colors_src.w + (tmp26_tween_colors_dst.w - tmp25_tween_colors_src.w) * g_mod_default_tween_colors_t;
   g_mod_default_tween_colors_t += tmp24_tween_colors_speed;
   if(g_mod_default_tween_colors_t >= 1.0f)
   {
      g_mod_default_tween_colors_adv = true; 
      g_mod_default_tween_colors_t -= 1.0f;
   }
   
   glUniform4f(default_wavescene_wave_prg_prg1__u_proxy_tween_colors_out, tmp20_init.x, tmp20_init.y, tmp20_init.z, tmp20_init.w);
   if(0 == _fbW) glUniform4f(default_wavescene_wave_prg_prg1_u_fragcoord_off_scl, -1426, -236, 1, 1);
   else glUniform4f(default_wavescene_wave_prg_prg1_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_wavescene_wave_prg_prg1_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_wavescene_wave_prg_prg1_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 62 triangles
   g_tri_count += 62;
   zglDrawElementsOffset(GL_TRIANGLES, 186/*count*/, GL_UNSIGNED_INT, 0/*offset*/);
   

   // <draw_post>
   default_wavescene_wave_tex_tex1.unbind();
   default_wavescene_wave_tex_tex_hmap.unbind();
   
}

function Exit_default_wavescene_model_wave() {
   default_wavescene_wave_tex_tex1.unload();
   default_wavescene_wave_tex_tex_hmap.unload();
   zglDeleteBuffer(default_wavescene_buf_wave_a);
   zglDeleteBuffer(default_wavescene_buf_wave_i);
   
}

function Init_default_wavescene_blit_prg_prg_blit() {
   default_wavescene_blit_prg_prg_blit.setVertexSource(default_wavescene_blit_prg_prg_blit_vtx_src);
   default_wavescene_blit_prg_prg_blit.setFragmentSource(default_wavescene_blit_prg_prg_blit_frag_src);
   if(!default_wavescene_blit_prg_prg_blit.create()) return false;
   default_wavescene_blit_prg_prg_blit__a_position = glGetAttribLocation(default_wavescene_blit_prg_prg_blit.programId, "a_position");
   default_wavescene_blit_prg_prg_blit__u_tex = glGetUniformLocation(default_wavescene_blit_prg_prg_blit.programId, "u_tex");
   default_wavescene_blit_prg_prg_blit_u_fragcoord_off_scl = glGetUniformLocation(default_wavescene_blit_prg_prg_blit.programId, "u_fragcoord_off_scl");
   default_wavescene_blit_prg_prg_blit_u_normcoord_scl = glGetUniformLocation(default_wavescene_blit_prg_prg_blit.programId, "u_normcoord_scl");
   
   return true;
}

function Exit_default_wavescene_blit_prg_prg_blit() {
   default_wavescene_blit_prg_prg_blit.destroy();
   
}

function Init_default_wavescene_blit_model_blit() {
   default_wavescene_blit_buf_blit_a = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, default_wavescene_blit_buf_blit_a);
   zglBufferData(GL_ARRAY_BUFFER, (8/*vtxAttribSz*/ * 4/*#verts*/), default_wavescene_blit_buf_blit_a_data, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   
   return true;
}

function Draw_default_wavescene_blit_model_blit(int _fbW, int _fbH, Matrix4f _transform) {
   // <draw_pre>
   if(2 != last_model_id)
   {
      glBindBuffer(GL_ARRAY_BUFFER, default_wavescene_blit_buf_blit_a);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
      last_model_id = 2;
   }
   if(2 != last_program_id)
   {
      default_wavescene_blit_prg_prg_blit.bind();
   } // 2 != last_program_id
   glActiveTexture(GL_TEXTURE0+0);
   default_wavescene_wave_tex_tex_fbo.bind();
   if(2 != last_program_id)
   {
      default_wavescene_blit_prg_prg_blit.bind();
      if(default_wavescene_blit_prg_prg_blit__a_position >= 0)
      {
        glEnableVertexAttribArray(default_wavescene_blit_prg_prg_blit__a_position);
        zglVertexAttribOffset(default_wavescene_blit_prg_prg_blit__a_position, 2, GL_FLOAT, GL_FALSE/*normalize*/, 8/*stride*/, 0);
      }
      last_program_id = 2;
   } // 2 != last_program_id
   glUniform1i(default_wavescene_blit_prg_prg_blit__u_tex, 0);  // bind texture unit 0 to sampler2D
   if(0 == _fbW) glUniform4f(default_wavescene_blit_prg_prg_blit_u_fragcoord_off_scl, -1426, -236, 1, 1);
   else glUniform4f(default_wavescene_blit_prg_prg_blit_u_fragcoord_off_scl, 0.0f, 0.0f, 1.0f, 1.0f);
   if(0 == _fbW) glUniform2f(default_wavescene_blit_prg_prg_blit_u_normcoord_scl, 0.0025, 0.00333333);
   else glUniform2f(default_wavescene_blit_prg_prg_blit_u_normcoord_scl, 1.0f / (0.5f * _fbW), 1.0f / (0.5f * _fbH));
   // draw 2 triangles
   g_tri_count += 2;
   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 4);
   

   // <draw_post>
   default_wavescene_wave_tex_tex_fbo.unbind();
   
}

function Exit_default_wavescene_blit_model_blit() {
   zglDeleteBuffer(default_wavescene_blit_buf_blit_a);
   
}

function Init_default_wavescene_renderpass_wave() {
   return true;
}

function Draw_default_wavescene_renderpass_wave(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.wavescene.renderpasses.wave --------
   glEnable(GL_MULTISAMPLE);
   glBindFramebuffer(GL_FRAMEBUFFER, default_wavescene_wave_fbo_msaa_fbo);
   glViewport(0, 0, 512, 512);
   glScissor(0, 0, 512, 512);
   glClearColor(0.12549, 0.12549, 0.12549, 1);
   glClearDepth(1);
   glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
   glEnable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glDisable(GL_BLEND);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_wavescene_model_wave(512, 512, null/*transform*/);
   

   // <draw_post>
   glDisable(GL_MULTISAMPLE);
   // ---- BEGIN multisample resolve FBO.id=default.scenes.wavescene.models.wave.fbos.fbo
   glBindFramebuffer(GL_DRAW_FRAMEBUFFER, default_wavescene_wave_fbo_fbo);
   glBindFramebuffer(GL_READ_FRAMEBUFFER, default_wavescene_wave_fbo_msaa_fbo);
   glBlitFramebuffer(0, 0, 512, 512,
                     0, 0, 512, 512,
                     GL_COLOR_BUFFER_BIT, GL_NEAREST
                     );
   // ---- END multisample resolve FBO.id=default.scenes.wavescene.models.wave.fbos.fbo
   glBindFramebuffer(GL_FRAMEBUFFER, g_default_fb);
   glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   // -------- END renderpass default.scenes.wavescene.renderpasses.wave --------
   
}

function Exit_default_wavescene_renderpass_wave() {
}

function Init_default_wavescene_renderpass_blit() {
   return true;
}

function Draw_default_wavescene_renderpass_blit(int _fbW, int _fbH) {
   // <draw_pre>
   // -------- BEGIN renderpass default.scenes.wavescene.renderpasses.blit --------
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_STENCIL_TEST);
   glDisable(GL_BLEND);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   glStencilMask(255);
   glStencilFunc(GL_ALWAYS, 0, 0);
   glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CW);
   glCullFace(GL_BACK);
   Draw_default_wavescene_blit_model_blit(0, 0, null/*transform*/);
   

   // <draw_post>
   // -------- END renderpass default.scenes.wavescene.renderpasses.blit --------
   
}

function Exit_default_wavescene_renderpass_blit() {
}

function Init_default_scene_wavescene() {
   // -------- BEGIN init FBO default.scenes.wavescene.models.wave.fbos.fbo -------
   default_wavescene_wave_fbo_fbo = zglGenFramebuffer();
   glBindFramebuffer(GL_FRAMEBUFFER, default_wavescene_wave_fbo_fbo);
   default_wavescene_wave_tex_tex_fbo.bind(); // create id + alloc GL texture RAM
   default_wavescene_wave_tex_tex_fbo.unbind();
   glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, default_wavescene_wave_tex_tex_fbo.id, 0/*level*/);
   int default_wavescene_wave_fbo_fbo_fbStatus_msaa = glCheckFramebufferStatus(GL_FRAMEBUFFER);
   if(GL_FRAMEBUFFER_COMPLETE != default_wavescene_wave_fbo_fbo_fbStatus_msaa)
     trace "[~~~] <tempscript> GFBO: glCheckFramebufferStatus() indicated a problem (id=default.scenes.wavescene.models.wave.fbos.fbo, status="+default_wavescene_wave_fbo_fbo_fbStatus_msaa+"="+TKS.constantToString(default_wavescene_wave_fbo_fbo_fbStatus_msaa, "GL_FRAMEBUFFER")+")";
   default_wavescene_wave_fbo_msaa_fbo = zglGenFramebuffer();
   glBindFramebuffer(GL_FRAMEBUFFER, default_wavescene_wave_fbo_msaa_fbo);
   default_wavescene_wave_fbo_msaa_fbo_tex = zglGenTexture();
   glBindTexture(GL_TEXTURE_2D_MULTISAMPLE, default_wavescene_wave_fbo_msaa_fbo_tex);
   glTexStorage2DMultisample(GL_TEXTURE_2D_MULTISAMPLE, 2, GL_RGBA8, 512, 512, GL_TRUE/*fixedsamplelocations*/);
   glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D_MULTISAMPLE, default_wavescene_wave_fbo_msaa_fbo_tex, 0/*level*/);
   glBindTexture(GL_TEXTURE_2D_MULTISAMPLE, 0);
   default_wavescene_wave_fbo_msaa_fbo_zs_rb = zglGenRenderbuffer();
   glBindRenderbuffer(GL_RENDERBUFFER, default_wavescene_wave_fbo_msaa_fbo_zs_rb);
   glRenderbufferStorageMultisample(GL_RENDERBUFFER, 2, GL_DEPTH_COMPONENT24, 512, 512);
   glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, default_wavescene_wave_fbo_msaa_fbo_zs_rb);
   glBindRenderbuffer(GL_RENDERBUFFER, 0);
   int default_wavescene_wave_fbo_msaa_fbo_fbStatus = glCheckFramebufferStatus(GL_FRAMEBUFFER);
   if(GL_FRAMEBUFFER_COMPLETE != default_wavescene_wave_fbo_msaa_fbo_fbStatus)
     trace "[~~~] <tempscript> GFBO: glCheckFramebufferStatus() indicated a problem (id=default.scenes.wavescene.models.wave.fbos.fbo, status="+default_wavescene_wave_fbo_msaa_fbo_fbStatus+"="+TKS.constantToString(default_wavescene_wave_fbo_msaa_fbo_fbStatus, "GL_FRAMEBUFFER")+")";
   glBindFramebuffer(GL_FRAMEBUFFER, g_default_fb);
   // -------- END init FBO default.scenes.wavescene.models.wave.fbos.fbo -------
   
   return true;
}

function Draw_default_scene_wavescene(int _fbW, int _fbH) {
   // <draw_pre>
   Draw_default_wavescene_renderpass_wave(0/*fbW*/, 0/*fbH*/);
   Draw_default_wavescene_renderpass_blit(0/*fbW*/, 0/*fbH*/);
   

   // <draw_post>
}

function Exit_default_scene_wavescene() {
   default_wavescene_wave_tex_tex_fbo.unload();
   // -------- BEGIN exit FBO default.scenes.wavescene.models.wave.fbos.fbo -------
   zglDeleteRenderbuffer(default_wavescene_wave_fbo_msaa_fbo_zs_rb);
   zglDeleteFramebuffer(default_wavescene_wave_fbo_fbo);
   zglDeleteFramebuffer(default_wavescene_wave_fbo_msaa_fbo);
   zglDeleteTexture(default_wavescene_wave_fbo_msaa_fbo_tex);
   // -------- END exit FBO default.scenes.wavescene.models.wave.fbos.fbo -------
   
}

function Init() {

if(b_glcore)
   vao_id = zglGenVertexArray();

   if(!Init_default_wavescene_wave_prg_prg1()) return false;
   if(!Init_default_wavescene_model_wave()) return false;
   if(!Init_default_wavescene_blit_prg_prg_blit()) return false;
   if(!Init_default_wavescene_blit_model_blit()) return false;
   if(!Init_default_wavescene_renderpass_wave()) return false;
   if(!Init_default_wavescene_renderpass_blit()) return false;
   if(!Init_default_scene_wavescene()) return false;
   
   return true;
}

function Exit() {
   Exit_default_wavescene_wave_prg_prg1();
   Exit_default_wavescene_model_wave();
   Exit_default_wavescene_blit_prg_prg_blit();
   Exit_default_wavescene_blit_model_blit();
   Exit_default_wavescene_renderpass_wave();
   Exit_default_wavescene_renderpass_blit();
   Exit_default_scene_wavescene();
   

if(b_glcore)
   zglDeleteVertexArray(vao_id);

}

function Draw() {
   if(b_glcore)
      glBindVertexArray(vao_id);
   glEnable(GL_CULL_FACE);
   glCullFace(GL_BACK);
   glFrontFace(GL_CW);
   glDisable(GL_DEPTH_TEST);
   glDepthMask(GL_TRUE);
   glDepthFunc(GL_LESS);
   // <draw_pre>
   last_model_id   = 0;
   last_program_id = 0;
   g_tri_count     = 0;  // debug: total number of triangles
   glEnable(GL_SCISSOR_TEST);
   glViewport(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glScissor(g_default_vp_x, g_default_vp_y, g_default_vp_w, g_default_vp_h);
   glClearColor(0.3,0.3,0.3,1.0);
   glClear(GL_COLOR_BUFFER_BIT);
   Function tmp30_scene_select_draw;
   if(g_mod_global_scene_switch_switch_idx < 0) g_mod_global_scene_switch_switch_idx += 2; else if(g_mod_global_scene_switch_switch_idx >= 2) g_mod_global_scene_switch_switch_idx -= 2;
   switch(g_mod_global_scene_switch_switch_idx)
   {
      default:
      case 0:
         // input 1/2: - no connections -
         tmp30_scene_select_draw <= null;
         
         break;
   
      case 1:
         // input 2/2: 1 connection, first=default.scenes.wavescene
         tmp30_scene_select_draw <= Draw_default_scene_wavescene;
         
         break;
   } // switch(g_mod_global_scene_switch_switch_idx)
   if(null != tmp30_scene_select_draw) tmp30_scene_select_draw.eval({0, 0});
   
   // <draw_post>
   glUseProgram(0);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
   g_init = false;
   
}

