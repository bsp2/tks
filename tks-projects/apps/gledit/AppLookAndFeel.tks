// ----
// ---- file   : AppLookAndFeel.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "GL Edit" application.
// ----
// ---- created: 12Jun2020
// ---- changed: 
// ----
// ----
// ----

module MAppLookAndFeel;

use namespace ui;
use namespace gledit;


// <class.png>
abstract class AppLookAndFeelDefs {

   // -------- ??? -------- 
   define int COLOR_xxx                = 0;


   define int TOTAL_NUM_COLORS = 1000;
}


// <class.png>
abstract class AppLookAndFeel : AppLookAndFeelDefs {

   IntArray colors;

   boolean b_bezieredit_draw_tabfocus_border;
 

   public method initAppLookAndFeel() {
      initColors();

      b_bezieredit_draw_tabfocus_border = false;
   }

   public method getName() : String {
      return "?";
   }

   protected method initColors() {
      colors.alloc(TOTAL_NUM_COLORS);
      colors.useAll();
      colors.fill(#ffff00ff);
   }

   public method getColor(int _colorIndex) : int {
      return colors.get(_colorIndex);
   }

   public method getColorAlpha(int _colorIndex, byte _alpha) : int {
      int c32 = colors.get(_colorIndex);
      return (c32&0x00ffffff) | ((_alpha&255)<<24);
   }

   public method getTintedColor(int _lnfIdx, int _tint32) : int {
      int c32 = colors.get(_lnfIdx);
      if(_tint32) // Colorize ?
      {
         c32 = UI.MixColor32(c32, 0xff000000 | (_tint32&0x00FFFFFF), ((_tint32>>24)&255)/255.0);
      }
      return c32;
   }

   public method lnfGetTintedColor(int _lnfIdx, int _tint32) : int {
      int c32 = UI.lnf_colors.get(_lnfIdx);
      if(_tint32) // Colorize ?
      {
         c32 = UI.MixColor32(c32, 0xff000000 | (_tint32&0x00FFFFFF), ((_tint32>>24)&255)/255.0);
      }
      return c32;
   }

   public method setColor(int _colorIndex, int _c32) {
      // for user defined color tweaks (e.g. when color grading is enabled)
      colors[_colorIndex] = _c32;
   }
}


// <class.png>
class AppLookAndFeel_Light : AppLookAndFeel {

   public method initAppLookAndFeel() {
      AppLookAndFeel::initAppLookAndFeel();
   }

   public virtual getName() : String {
      return LookAndFeel.LIGHT;
   }

   protected virtual initColors() {
      AppLookAndFeel::initColors();

      // -------- ??? -------- 
      // colors[COLOR_xxx]                = lnfGetTintedColor(LookAndFeel.COLOR_WINDOW_BG, 0xbf162234);
   }


}


// <class.png>
class AppLookAndFeel_Dark : AppLookAndFeel {

   public method initAppLookAndFeel() {
      AppLookAndFeel::initAppLookAndFeel();
   }

   public virtual getName() : String {
      return LookAndFeel.DARK;
   }

   protected virtual initColors() {
      AppLookAndFeel::initColors();

      // -------- NodeArranger -------- 
      // colors[COLOR_xxx]                = lnfGetTintedColor(LookAndFeel.COLOR_WINDOW_BG, 0xbf121416);//lnfGetTintedColor(LookAndFeel.COLOR_WINDOW_BG, 0xbf181a1c);
   }

}




// <class.png>
class AppLookAndFeel_Mono : AppLookAndFeel {

   public method initAppLookAndFeel() {
      AppLookAndFeel::initAppLookAndFeel();
   }

   public virtual getName() : String {
      return LookAndFeel.MONO;
   }

   protected virtual initColors() {
      AppLookAndFeel::initColors();

      // -------- NodeArranger -------- 
      // colors[COLOR_xxx]                = lnfGetTintedColor(LookAndFeel.COLOR_WINDOW_BG, 0xbf121614);//lnfGetTintedColor(LookAndFeel.COLOR_WINDOW_BG, 0xbf181a1c);
   }

}
