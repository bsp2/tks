// ----
// ---- file   : NM_Filter.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2017-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- created: 20Jan2017
// ---- changed: 21Jan2017, 22Jan2017, 23Jan2017, 27Jan2017, 31Jan2017, 04Feb2017, 05Feb2017
// ----          06Feb2017, 10Feb2017, 12Feb2017, 02Jul2017, 03Sep2017, 21Dec2017, 22Dec2017
// ----          23Dec2017, 24Dec2017, 04Jan2018, 27May2018, 16Jun2018, 17Jun2018, 12Jan2019
// ----          30May2019, 25Jun2019, 14Sep2019, 15Sep2019, 20Sep2019, 18Oct2019, 19Oct2019
// ----          20Oct2019, 07Nov2019, 08Nov2019, 20Feb2020, 25Apr2020, 24Oct2020, 30Oct2020
// ----          06Nov2020, 07Nov2020, 08Nov2020, 10Nov2020, 11Nov2020, 27Jan2021, 21Jun2021
// ----          03Apr2023, 29Jul2023, 03Feb2024, 28Feb2025
// ----
// ----
// ----
module MNM_Filter;

use namespace ui;
use namespace st2;


// <class.png>
class NM_Filter {

   String name; // "Record" or "Replay", for UI, not editable

   boolean b_flt_note_off;
   boolean b_flt_note_on;
   boolean b_flt_poly_pressure;
   boolean b_flt_cc;
   boolean b_flt_program_change;
   boolean b_flt_channel_pressure;
   boolean b_flt_pitchbend;
   boolean b_flt_sysex;
   boolean b_flt_rpn;
   boolean b_flt_nrpn;

   // <method_init.png>
   public method init(String _name) {
      b_flt_note_off         = true;
      b_flt_note_on          = true;
      b_flt_poly_pressure    = true;
      b_flt_cc               = true;
      b_flt_program_change   = true;
      b_flt_channel_pressure = true;
      b_flt_pitchbend        = true;
      b_flt_sysex            = true;
      b_flt_rpn              = true;
      b_flt_nrpn             = true;
   }

   // <method_set.png>
   public =replay= method setEnableFltNoteOff(boolean _bEnabled) {
      b_flt_note_off = _bEnabled;
   }

   // <method_set.png>
   public =replay= method setEnableFltNoteOn(boolean _bEnabled) {
      b_flt_note_on = _bEnabled;
   }

   // <method_set.png>
   public =replay= method setEnableFltPolyPressure(boolean _bEnabled) {
      b_flt_poly_pressure = _bEnabled;
   }

   // <method_set.png>
   public =replay= method setEnableFltCC(boolean _bEnabled) {
      b_flt_cc = _bEnabled;
   }

   // <method_set.png>
   public =replay= method setEnableFltProgramChange(boolean _bEnabled) {
      b_flt_program_change = _bEnabled;
   }

   // <method_set.png>
   public =replay= method setEnableFltChannelPressure(boolean _bEnabled) {
      b_flt_channel_pressure = _bEnabled;
   }

   // <method_set.png>
   public =replay= method setEnableFltPitchbend(boolean _bEnabled) {
      b_flt_pitchbend = _bEnabled;
   }

   // <method_set.png>
   public =replay= method setEnableFltSysEx(boolean _bEnabled) {
      b_flt_sysex = _bEnabled;
   }

   // <method_set.png>
   public =replay= method setEnableFltRPN(boolean _bEnabled) {
      b_flt_rpn = _bEnabled;
   }

   // <method_set.png>
   public =replay= method setEnableFltNRPN(boolean _bEnabled) {
      b_flt_nrpn = _bEnabled;
   }

   // <replay.png>
   public method applyFilter(MIDIPipeFrame fr) {
      if(!b_flt_note_off)
      {
         fr.deleteNoteOffsByFlt(-1, -1);
      }

      if(!b_flt_note_on)
      {
         fr.deleteNoteOnsByFlt(-1, -1);
      }

      if(!b_flt_poly_pressure)
      {
         fr.deletePolyPressureByFlt(-1, -1);
      }

      if(!b_flt_cc)
      {
         fr.deleteCCByFlt(-1, -1, -1);
      }

      if(!b_flt_program_change)
      {
         fr.deletePrgChgByFlt(-1, -1);
      }

      if(!b_flt_channel_pressure)
      {
         fr.deleteChPressureByFlt(-1, -1);
      }

      if(!b_flt_pitchbend)
      {
         fr.deletePitchbendByFlt(-1, -1);
      }

      if(!b_flt_sysex)
      {
         fr.deleteSysExByFlt(-1);
      }

      if(!b_flt_rpn)
      {
         fr.deleteRPNByFlt(-1, -1, -1);
      }

      if(!b_flt_nrpn)
      {
         fr.deleteNRPNByFlt(-1, -1, -1);
      }
   }

   // <save.png>
   public method saveState(Stream ofs) {

      ofs.i16 = 1; // Version

      ofs.i8 = b_flt_note_off;
      ofs.i8 = b_flt_note_on;
      ofs.i8 = b_flt_poly_pressure;
      ofs.i8 = b_flt_cc;
      ofs.i8 = b_flt_program_change;
      ofs.i8 = b_flt_channel_pressure;
      ofs.i8 = b_flt_pitchbend;
      ofs.i8 = b_flt_sysex;
      ofs.i8 = b_flt_rpn;
      ofs.i8 = b_flt_nrpn;
   }

   // <load.png>
   public method loadState(Stream ifs) : boolean {

      short ver = ifs.i16;

      if(ver == 1)
      {
         b_flt_note_off         = ifs.b8;
         b_flt_note_on          = ifs.b8;
         b_flt_poly_pressure    = ifs.b8;
         b_flt_cc               = ifs.b8;
         b_flt_program_change   = ifs.b8;
         b_flt_channel_pressure = ifs.b8;
         b_flt_pitchbend        = ifs.b8;
         b_flt_sysex            = ifs.b8;
         b_flt_rpn              = ifs.b8;
         b_flt_nrpn             = ifs.b8;

         return true;
      }
      else
      {
         trace("[---] NM_Filter::loadState: invalid version "+ver);
      }

      return false;
   }

}
