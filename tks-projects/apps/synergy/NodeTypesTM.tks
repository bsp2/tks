// ----
// ---- file   : NodeTypesTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2014-2023 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 05Sep2014, 27Sep2014, 25Sep2023
// ----          
// ----
// ----

module MNodeTypesTM;

use namespace ui;
use namespace st2;


// <class.png>
class NodeTypesEntry {
   // // Object *clazz;
   String s_class;
   String s_name;
   Icon  *icon;
}


// <class.png>
class NodeTypesTM : TableModel {

   define int COL_ICON        = 0;
   define int COL_NAME        = 1;

   NodeTypesEntry *[] *types;


   public virtual getNumColumns() : int {
      return 2;
   }
   
   public virtual getColumnCaption(int _col) : String {
      return ["Icon", "Name"] [_col];
   }

   public virtual getNumRows() : int {
      return types.numElements;
   }

   public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
      Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);

      lb.setFontByName("big4");

      NodeTypesEntry en <= types.get(_row);

      if(null != en)
      {
         if(COL_NAME == _col)
         {
            lb.setIcon(UI.GetIcon("arr2x_r"));
            lb.setInnerPadLeft(12);
         }
         else if(COL_ICON == _col)
         {
            lb.setIcon(en.icon);
            lb.setInnerPadding4f(0,18*UI.icon_scaling,0,0);
         }
      }

      return lb;
   }

   public virtual getCellCaption(int _col, _row) : String {

      NodeTypesEntry en <= types.get(_row);

      switch(_col)
      {
         case COL_NAME:
            if(null != en)
            {
               return en.s_name;
            }
            else
            {
               return "-";
            }
            break;
      }
   }

   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ICON:
            return 68;

         case COL_NAME:
            return 300;
      }
   }

   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ICON:
            return 68;

         case COL_NAME:
            return 2000;
      }
   }

}
