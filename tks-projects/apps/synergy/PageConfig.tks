// ----
// ---- file   : PageConfig.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2014-2019 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 11Aug2014
// ---- changed: 12Aug2014, 15Aug2014, 18Aug2014, 31Aug2014, 05Sep2014, 16Sep2014, 23Feb2015
// ----          09Feb2017, 23Jun2018, 30Apr2019
// ----
// ----
// ----

module MPageConfig;

use namespace ui;
use namespace st2;


class PageConfig : Page {

   protected Button *bt_parent;

   protected Button *bt_prefs;
   protected Button *bt_mididevs;
   protected Button *bt_audio;
   protected Button *bt_save;


   // <ui_init.png>
   public method init() : boolean {

      if(!initPakFile("PageConfig.xfm"))
      {
         trace "[---] failed to parse PageConfig.xfm";
         return false;
      }

      autoResolveIds(this);

      // bt_audio.setEditable(STConfig.b_enable_audio);
      bt_audio.setEditable(false);

      recursiveSetEnableCursorKeyTabCycling(false);
      
      return true;
   }

   // <ui_page.png>
   public virtual pageGetParent() : int {
      return RootForm.PAGE_PIPEMAP;
   }

   // <ui_page.png>
   public virtual pageFocusDefault() {
      UI.SetKeyboardFocus(bt_mididevs);
   }

   // <ui_page.png>
   public virtual pageForceKbdFocusSelMode() {
      return true;
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      _retLayers = [
         bt_prefs, bt_mididevs, bt_audio, bt_save
                              ];
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      return Page::onKey(_k);
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {

      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      //trace "xxx PageStart::consumeAction: acName=\""+acName+"\".";

      switch(@(ap))
      {
         case @(bt_mididevs):
            root_form.showPage(RootForm.PAGE_MIDIDEVS, true);
            return true;

         case @(bt_audio):
            return true;

         case @(bt_prefs):
            root_form.showPage(RootForm.PAGE_PREFS, true);
            return true;

         case @(bt_save):
            Global.cmd_config_save();
            return true;

         case @(bt_parent):
            root_form.showPageParent();
            return true;
      }

      return Page::consumeAction(_ac);
   }

}
