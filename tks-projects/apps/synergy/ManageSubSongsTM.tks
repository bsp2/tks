// ----
// ---- file   : ManageSubSongsTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2010-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 09Nov2010, 21Nov2010, 07Feb2011, 17Feb2011, 18Feb2011, 28Feb2011, 13Mar2011
// ----          26May2013, 05Jun2013, 31Aug2014, 01Jun2021, 21Nov2022, 13Oct2023
// ----
// ----
// ----

module MManageSubSongsTM;

use namespace ui;
use namespace st2;


class ManageSubSongsTM : TableModel {

   define int COL_ID           = 0;
   define int COL_NAME         = 1;
   define int COL_SUBNAME      = 2;
   define int COL_NUMNODES     = 3;

   public getNumColumns() : int {
      return 4;
   }

   public getColumnCaption(int _col) : String {
      return ["Id", "Project Name", "Sub-Song Name", "#nodes"][_col];
   }

   public getNumRows() : int {
      return all_songs.numElements;
   }

   public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
      Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);
      lb.setFontByName("big6");
      return lb;
   }

   public getCellCaption(int _col, _row) : String {
      ST_Song song <= all_songs.get(_row);

      if(null != song)
      {
         switch(_col)
         {
            case COL_ID:
               return _row;

            case COL_NAME:
               return song.song_name;

            case COL_SUBNAME:
               return song.sub_name;

            case COL_NUMNODES:
               return song.findNumNodes();
         }
      }
      else
      {
         // xxx should never be reached?
         switch(_col)
         {
            case COL_ID:
               return _row;

            default:
            case COL_NAME:
               return "-";
         }
      }
   }

   public method getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 26;

         case COL_NAME:
            return 150;

         case COL_SUBNAME:
            return 150;

         case COL_NUMNODES:
            return 60;
      }
   }

   public method getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 20;

         case COL_NAME:
            return 400;

         case COL_SUBNAME:
            return 700;

         case COL_NUMNODES:
            return 60;
      }
   }

}
