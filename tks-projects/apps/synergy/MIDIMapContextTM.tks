// ----
// ---- file   : MIDIMapContextTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2014 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 14Aug2014, 15Aug2014
// ----
// ----
// ----

module MMIDIMapContextTM;

use namespace ui;
use namespace st2;


// <class.png>
class MIDIMapContextTMEntry {
   String target;
   String target_type;
   String bound_dev;
   String bound_ch;
   String bound_type;

   MIDIMapTarget *mm_target;
   MIDIMapEvent  *mm_event; // can be null
}


// <class.png>
class MIDIMapContextTM : TableModel {

   define int COL_TARGET      = 0;
   define int COL_TARGET_TYPE = 1;
   define int COL_BOUND_DEV   = 2;
   define int COL_BOUND_CH    = 3;
   define int COL_BOUND_TYPE  = 4;

   MIDIMapContextTMEntry *[] entries; // MIDIMapContextTMEntry instances;


   public virtual getNumColumns() : int {
      return 5;
   }

   public virtual getColumnCaption(int _col) : String {
      return ["Target", "Target Type", "Device", "Ch.", "Message type"][_col];
   }

   public virtual getNumRows() : int {
      return entries.numElements;
   }

   public virtual getCellCaption(int _col, _row) : String {
      MIDIMapContextTMEntry entry <= entries.get(_row);

      if(null != entry)
      {
         switch(_col)
         {
            case COL_TARGET:
               return entry.target;

            case COL_TARGET_TYPE:
               return entry.target_type;

            case COL_BOUND_DEV:
               return entry.bound_dev;

            case COL_BOUND_CH:
               return entry.bound_ch;

            case COL_BOUND_TYPE:
               return entry.bound_type;
         }
      }
   }

   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_TARGET:
            return 300;

         case COL_TARGET_TYPE:
            return 70;

         case COL_BOUND_DEV:
            return 80;

         case COL_BOUND_CH:
            return 24;

         case COL_BOUND_TYPE:
            return 150;
      }
   }

   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_TARGET:
            return 450;

         case COL_TARGET_TYPE:
            return 70;

         case COL_BOUND_DEV:
            return 180;

         case COL_BOUND_CH:
            return 24;

         case COL_BOUND_TYPE:
            return 200;
      }
   }

   public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
      Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);

      if(COL_TARGET == _col)
      {
         lb.setFontByName("big8");
      }
      else
      {
         lb.setFontByName(UIConstants.DEFAULT_FONT_NAME_LABEL);
      }

      return lb;
   }
}
