// ----
// ---- file   : scale.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2015-2021 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- changed: 13Oct2015, 14Oct2015, 16Oct2015, 17Oct2015, 18Oct2015, 19Oct2015, 20Oct2015
// ----          21Oct2015, 22Oct2015, 09Nov2015, 16Nov2015, 17Nov2015, 13Mar2016, 19Mar2016
// ----          09Apr2016, 09Jul2016, 12Jul2016, 21Jan2017, 04Feb2017, 06Mar2017, 07Mar2017
// ----          09Mar2017, 10Mar2017, 16Jun2017, 26Aug2017, 03Sep2017, 19May2019, 20Sep2019
// ----          18Oct2019, 12Apr2021, 30Oct2021
// ----
// ----
// ----

module MScale;

use namespace st2;


// <class.png>
class Scale {

   define int MODE_CHROMATIC         = 0;
   define int MODE_MAJOR             = 1;
   define int MODE_NATURAL_MINOR     = 2;
   define int MODE_HARMONIC_MINOR    = 3;
   define int MODE_MELODIC_MINOR     = 4;
   define int MODE_MAJOR_PENTATONIC  = 5;
   define int MODE_MINOR_PENTATONIC  = 6;
   define int MODE_BLUES             = 7;
   define int MODE_DORIAN            = 8;
   define int MODE_PHRYGIAN          = 9;
   define int MODE_PHRYGIAN_DOMINANT = 10;
   define int MODE_LYDIAN            = 11;
   define int MODE_MIXOLYDIAN        = 12;
   define int MODE_AEOLIAN           = 13;
   define int MODE_LOCRIAN           = 14;
   define int MODE_HUNGARIAN_GYPSY   = 15;
   define int MODE_UKRAINIAN_MINOR   = 16;
   define int MODE_PERSIAN           = 17;
   define int MODE_DIMINISHED        = 18;
   define int MODE_WHOLE_TONE        = 19;
   define int MODE_WHOLE_TONE_DIM    = 20;
   define int MODE_BEBOP             = 21;
   define int MODE_EGYPTIAN          = 22;
   define int MODE_ARABIC            = 23;
   define int MODE_BYZANTINE         = 24;
   define int MODE_HUNGARIAN         = 25;
   define int MODE_SPANISH           = 26;
   define int MODE_HINDU             = 27;
   define int MODE_ORIENTAL          = 28;
   define int MODE_CHINESE           = 29;
   define int MODE_IWATO             = 30;
   define int MODE_HIRAJOSHI         = 31;
   define int MODE_PROMETHEUS        = 32;
   define int MODE_PELOG             = 33;
   define int MODE_MOHAMMEDAN        = 34;
   define int MODE_JAVANESE          = 35;
   define int MODE_HAWAIIAN          = 36;
   define int MODE_OCT_SYM_DIM       = 37;
   define int MODE_CDFG              = 38;
   define int MODE_CEFA              = 39;
   define int MODE_CDGA              = 40;
   define int MODE_CDGAS             = 41;
   define int MODE_CDsFGAS           = 42;
   define int MODE_BANKSHIKI_SHO     = 43;
   define int MODE_HUNGARIAN_MAJOR   = 44;
   define int MODE_HUZAM             = 45;
   define int MODE_KOKIN_CHOSHI      = 46;
   define int MODE_KOURD_ATAR        = 47;
   define int MODE_YU_DIAO           = 48;
   define int MODE_NEVESERI          = 49;
   define int MODE_NIAVENT           = 50;
   define int MODE_ZHI_DIAO          = 51;
   define int MODE_PURVI             = 52;
   define int MODE_PYGMY             = 53;
   define int MODE_RUMANIKOS         = 54;
   define int MODE_SABAH             = 55;
   define int MODE_SEGIAH            = 56;
   define int MODE_SHO               = 57;
   define int MODE_GOONKALI          = 58;
   define int MODE_IWATO2            = 59;
   define int MODE_KUMOI             = 60;
   define int MODE_MAGEN_ABOT        = 61;
   define int MODE_MELOG             = 62;
   define int MODE_NOH               = 63;
   define int MODE_PYEONG_JO         = 64;
   define int MODE_ZOKUSO            = 65;
   define int MODE_HANG              = 66;

   define int NUM_MODES              = 67;

   static StringArray mode_names = [
      "Chromatic",         //  0: Chromatic
      "Major/Ioanian",     //  1: Major/Ioanian
      "Natural Minor",     //  2: Natural Minor
      "Harmonic Minor",    //  3: Harmonic Minor
      "Melodic Minor",     //  4: Melodic Minor
      "Major Pentatonic",  //  5: Major Pentatonic
      "Minor Pentatonic",  //  6: Minor Pentatonic
      "Blues",             //  7: Blues
      "Dorian",            //  8: Dorian
      "Phrygian",          //  9: Phrygian
      "Phrygian Dominant", // 10: Phrygian Dominant
      "Lydian",            // 11: Lydian
      "Mixolydian",        // 12: Mixolydian
      "Minor/Aeolian",     // 13: Minor/Aeolian
      "Locrian",           // 14: Locrian
      "Hungarian Gypsy",   // 15: Hungarian Gypsy
      "Ukrainian Minor",   // 16: Ukrainian Minor
      "Persian",           // 17: Persian
      "Diminished",        // 18: Diminished
      "Whole Tone",        // 19: Whole Tone
      "Whole Tone Dim.",   // 20: Whole Tone (Diminished)
      "Bebop",             // 21: Bebop
      "Egyptian",          // 22: Egyptian
      "Arabic",            // 23: Arabic
      "Byzantine",         // 24: Byzantine
      "Hungarian",         // 25: Hungarian
      "Spanish",           // 26: Spanish
      "Hindu",             // 27: Hindu
      "Oriental",          // 28: Oriental
      "Chinese",           // 29: Chinese
      "Iwato",             // 30: Iwato
      "Hirajoshi",         // 31: Hirajoshi
      "Prometheus",        // 32: Prometheus
      "Pelog",             // 33: Pelog
      "Mohammedan",        // 34: Mohammedan
      "Javanese",          // 35: Javanese
      "Hawaiian",          // 36: Hawaiian
      "Oct.Sym.Dim",       // 37: Oct.Sym.Dim
      "CDFG",              // 38: CDFG
      "CEFA",              // 39: CEFA
      "CDGA",              // 40: CDGA
      "CDGAs",             // 41: CDGAs
      "CDsFGAs",           // 42: CDsFGAs
      "Bankshiki-Sho",     // 43: Bankshiki-Sho (Shang-Diao)
      "Hungarian Major",   // 44: Hungarian Major
      "Huzam",             // 45: Huzam
      "Kokin Choshi",      // 46: Kokin Choshi
      "Kourd-Atar",        // 47: Kourd-Atar / Todi
      "Yu-Diao",           // 48: Yu-Diao / Minor Penta
      "Neveseri",          // 49: Neveseri
      "Niavent",           // 50: Niavent
      "Zhi-Diao",          // 51: Zhi-Diao / Pentatonic F
      "Purvi",             // 52: Purvi
      "Pygmy",             // 53: Pygmy
      "Rumanikos",         // 54: Rumanikos
      "Sabah",             // 55: Sabah
      "Segiah",            // 56: Segiah
      "Sho",               // 57: Sho
      "Goonkali",          // 58: Goonkali
      "Iwato2",            // 59: Iwato2
      "Kumoi",             // 60: Kumoi
      "Magen Abot",        // 61: Magen Abot
      "Melog",             // 62: Melog / Selisir
      "Noh",               // 63: Noh
      "Pyeong Jo",         // 64: Pyeong Jo
      "Zokuso",            // 65: Zokuso
      "Hang"               // 66: Hang
                                     ];

   static StringArray mode_names_short = [
      "Chroma",    //  0: Chromatic
      "Major",     //  1: Major/Ioanian
      "Nat.Min",   //  2: Natural Minor
      "HarmMin",   //  3: Harmonic Minor
      "MeloMin",   //  4: Melodic Minor
      "MajPenta",  //  5: Major Pentatonic
      "MinPenta",  //  6: Minor Pentatonic
      "Blues",     //  7: Blues
      "Dorian",    //  8: Dorian
      "Phrygn",    //  9: Phrygian
      "PhryDom",   // 10: Phrygian Dominant
      "Lydian",    // 11: Lydian
      "Mixolydi",  // 12: Mixolydian
      "Min/Aeol",  // 13: Minor/Aeolian
      "Locrian",   // 14: Locrian
      "Hungaria",  // 15: Hungarian Gypsy
      "Ukr Min",   // 16: Ukrainian Minor
      "Persian",   // 17: Persian
      "Diminisd",  // 18: Diminished
      "Whole T",   // 19: Whole Tone
      "WholeTDm",  // 20: Whole Tone (Diminished)
      "Bebop",     // 21: Bebop
      "Egyptian",  // 22: Egyptian
      "Arabic",    // 23: Arabic
      "Byzntine",  // 24: Byzantine
      "Hungari2",  // 25: Hungarian
      "Spanish",   // 26: Spanish
      "Hindu",     // 27: Hindu
      "Oriental",  // 28: Oriental
      "Chinese",   // 29: Chinese
      "Iwato",     // 30: Iwato
      "Hirajshi",  // 31: Hirajoshi
      "Promeths",  // 32: Prometheus
      "Pelog",     // 33: Pelog
      "Mohammdn",  // 34: Mohammedan
      "Javanese",  // 35: Javanese
      "Hawaiian",  // 36: Hawaiian
      "OctSymDm",  // 37: Oct.Sym.Dim
      "CDFG",      // 38: CDFG
      "CEFA",      // 39: CEFA
      "CDGA",      // 40: CDGA
      "CDGAs",     // 41: CDGAs
      "CDsFGAs",   // 42: CDsFGAs
      "Bankshik",  // 43: Bankshiki-Sho (Shang-Diao)
      "Hung.Maj",  // 44: Hungarian Major
      "Huzam",     // 45: Huzam
      "KokinCho",  // 46: Kokin Choshi
      "KourdAtr",  // 47: Kourd-Atar / Todi
      "Yu-Diao",   // 48: Yu-Diao / Minor Penta
      "Neveseri",  // 49: Neveseri
      "Niavent",   // 50: Niavent
      "ZhiDiao",   // 51: Zhi-Diao / Pentatonic F
      "Purvi",     // 52: Purvi
      "Pygmy",     // 53: Pygmy
      "Rumanik",   // 54: Rumanikos
      "Sabah",     // 55: Sabah
      "Segiah",    // 56: Segiah
      "Sho",       // 57: Sho
      "Goonkali",  // 58: Goonkali
      "Iwato2",    // 59: Iwato2
      "Kumoi",     // 60: Kumoi
      "MagenAbt",  // 61: Magen Abot
      "Melog",     // 62: Melog / Selisir
      "Noh",       // 63: Noh
      "PyeongJo",  // 64: Pyeong Jo
      "Zokuso",    // 65: Zokuso
      "Hang"       // 66: Hang
                                     ];

   // (note) used by ModCV_Quantizer module
   static StringArray mode_names_3ln = [
      "Chr",    //  0: Chromatic
      "Maj",    //  1: Major/Ioanian
      "NMn",    //  2: Natural Minor
      "HM",     //  3: Harmonic Minor
      "MM",     //  4: Melodic Minor
      "MP",     //  5: Major Pentatonic
      "NP",     //  6: Minor Pentatonic
      "Blu",    //  7: Blues
      "Dor",    //  8: Dorian
      "Phr",    //  9: Phrygian
      "PD",     // 10: Phrygian Dominant
      "Lyd",    // 11: Lydian
      "Mix",    // 12: Mixolydian
      "Aeo",    // 13: Minor/Aeolian
      "Loc",    // 14: Locrian
      "Hun",    // 15: Hungarian Gypsy
      "Ukr",    // 16: Ukrainian Minor
      "Per",    // 17: Persian
      "Dim",    // 18: Diminished
      "WhT",    // 19: Whole Tone
      "WTD",    // 20: Whole Tone (Diminished)
      "Bop",    // 21: Bebop
      "Egy",    // 22: Egyptian
      "Arb",    // 23: Arabic
      "Byz",    // 24: Byzantine
      "Hn2",    // 25: Hungarian
      "Spa",    // 26: Spanish
      "Hin",    // 27: Hindu
      "Ori",    // 28: Oriental
      "Chi",    // 29: Chinese
      "Iwa",    // 30: Iwato
      "Hir",    // 31: Hirajoshi
      "Pro",    // 32: Prometheus
      "Pel",    // 33: Pelog
      "Moh",    // 34: Mohammedan
      "Jav",    // 35: Javanese
      "Haw",    // 36: Hawaiian
      "Oct",    // 37: Oct.Sym.Dim
      "CDF",    // 38: CDFG
      "CEF",    // 39: CEFA
      "CDG",    // 40: CDGA
      "CDg",    // 41: CDGAs
      "CDs",    // 42: CDsFGAs
      "Ban",    // 43: Bankshiki-Sho (Shang-Diao)
      "HuN",    // 44: Hungarian Major
      "Huz",    // 45: Huzam
      "Kok",    // 46: Kokin Choshi
      "Kou",    // 47: Kourd-Atar / Todi
      "YuD",    // 48: Yu-Diao / Minor Penta
      "Nev",    // 49: Neveseri
      "Nia",    // 50: Niavent
      "Zhi",    // 51: Zhi-Diao / Pentatonic F
      "Pur",    // 52: Purvi
      "Pyg",    // 53: Pygmy
      "Rum",    // 54: Rumanikos
      "Sab",    // 55: Sabah
      "Seg",    // 56: Segiah
      "Sho",    // 57: Sho
      "Goo",    // 58: Goonkali
      "Iwa",    // 59: Iwato2
      "Kum",    // 60: Kumoi
      "MA",     // 61: Magen Abot
      "Mel",    // 62: Melog / Selisir
      "Noh",    // 63: Noh
      "Pye",    // 64: Pyeong Jo
      "Zok",    // 65: Zokuso
      "Han"     // 66: Hang
                                     ];

   define int C  = 0;
   define int Cs = 1;
   define int D  = 2;
   define int Ds = 3;
   define int EE = 4;
   define int F  = 5;
   define int Fs = 6;
   define int G  = 7;
   define int Gs = 8;
   define int A  = 9;
   define int As = 10;
   define int B  = 11;

   static StringArray key_names = [
      "C",
      "C#",
      "D",
      "D#",
      "E",
      "F",
      "F#",
      "G",
      "G#",
      "A",
      "A#",
      "B"
                                   ];

   static StringArray key_names_lc = [
      "c",
      "c#",
      "d",
      "d#",
      "e",
      "f",
      "f#",
      "g",
      "g#",
      "a",
      "a#",
      "b"
                                   ];

   static PointerArray mode_tables = [
      [C, Cs, D, Ds, EE, F, Fs, G, Gs, A, As, B],  //  0: Chromatic
      [C,     D,     EE, F,     G,     A,     B],  //  1: Major/Ioanian
      [C,     D, Ds,     F,     G, Gs,    As   ],  //  2: Natural Minor
      [C,     D, Ds,     F,     G, Gs,        B],  //  3: Harmonic Minor
      [C,     D, Ds,     F,     G,     A,     B],  //  4: Melodic Minor
      [C,     D,     EE,        G,     A       ],  //  5: Major Pentatonic (Gong-Diao)
      [C,        Ds,     F,     G,        As   ],  //  6: Minor Pentatonic
      [C,        Ds,     F, Fs, G,        As   ],  //  7: Blues
      [C,     D, Ds,     F,     G,     A, As   ],  //  8: Dorian (Bayati)
      [C, Cs,    Ds,     F,     G, Gs,    As   ],  //  9: Phrygian
      [C, Cs,        EE, F,     G, Gs,    As   ],  // 10: Phrygian Dominant
      [C,     D,     EE,    Fs, G,     A,     B],  // 11: Lydian
      [C,     D,     EE, F,     G,     A, As   ],  // 12: Mixolydian
      [C,     D, Ds,     F,     G, Gs,    As   ],  // 13: Minor/Aeolian
      [C, Cs,    Ds,     F, Fs,    Gs,    As   ],  // 14: Locrian
      [C,     D, Ds,        Fs, G, Gs,    As   ],  // 15: Hungarian Gypsy
      [C,     D, Ds,        Fs, G,     A, As   ],  // 16: Ukrainian Minor (Romanian) (Hitzaz)
      [C, Cs,        EE, F, Fs,    Gs,        B],  // 17: Persian
      [C,     D, Ds,     F, Fs,    Gs, A,     B],  // 18: Diminished
      [C,     D,     EE,    Fs,    Gs,    As   ],  // 19: Whole Tone
      [C, Cs, Ds,    EE,    Fs,    Gs,    As   ],  // 20: Whole Tone (Diminished) (Super Locrian / Altered Dominant)
      [C,     D,     EE, F,     G,     A, As, B],  // 21: Bebop
      [C,     D,         F,     G,        As   ],  // 22: Egyptian
      [C,     D,     EE, F, Fs, G, Gs,    As   ],  // 23: Arabic
      [C, Cs,        EE, F,     G, Gs,        B],  // 24: Byzantine (Gypsy)
      [C,        Ds, EE,    Fs, G,     A, As   ],  // 25: Hungarian
      [C, Cs,        EE,    Fs,    Gs,    As, B],  // 26: Spanish
      [C,     D,     EE, F,     G, Gs,    As   ],  // 27: Hindu
      [C, Cs,    Ds, EE, F, Fs,    Gs,    As   ],  // 28: Oriental
      [C,            EE,    Fs, G,            B],  // 29: Chinese
      [C,            EE, F,            A,     B],  // 30: Iwato
      [C,     D, Ds,            G, Gs          ],  // 31: Hirajoshi  (Ake Bono)
      [C,     D,     EE,    Fs,        A, As   ],  // 32: Prometheus
      [C, Cs,    Ds,        Fs,           As, B],  // 33: Pelog
      [C,     D, Ds,     F,     G, Gs,        B],  // 34: Mohammedan
      [C, Cs,    Ds,     F,     G,     A,     B],  // 35: Javanese
      [C,     D, Ds,            G,     A,     B],  // 36: Hawaiian
      [C, Cs,    Ds, EE,    Fs, G,     A,     B],  // 37: Oct.Sym.Dim (Octatonic Symmetric Diminished)
      [C,     D,         F,     G              ],  // 38: CDFG
      [C,            EE, F,            A       ],  // 39: CEFA
      [C,     D,                G,     A       ],  // 40: CDGA
      [C,     D,                G,        As   ],  // 41: CDGAs
      [C,        Ds,     F,            A, As   ],  // 42: CDsFAAs
      [C,        Ds,     F,        Gs,    As   ],  // 43: Bankshiki-Sho (Shang-Diao)
      [C,     D, Ds,     F, Fs,    Gs, A       ],  // 44: Hungarian Major
      [C, Cs,        EE, F, Fs,    Gs,    As   ],  // 45: Huzam
      [C, Cs,            F,     G,        As   ],  // 46: Kokin Choshi
      [C, Cs,    Ds,        Fs, G, Gs,        B],  // 47: Kourd-Atar / Todi
      [C,        Ds,     F,     G,        As   ],  // 48: Yu-Diao / Minor Penta
      [C, Cs, D, Ds,     F, Fs,        A, As   ],  // 49: Neveseri
      [C, Cs,    Ds, EE, F,     G, Gs, A       ],  // 50: Niavent
      [C,     D,         F,     G,     A       ],  // 51: Zhi-Diao / Pentatonic F
      [C, Cs, D,         F,     G, Gs, A       ],  // 52: Purvi
      [C,     D, Ds,            G,        As   ],  // 53: Pygmy
      [C,     D,     EE, F,        Gs, A,     B],  // 54: Rumanikos
      [C, Cs, D,     EE, F, Fs,        A, As   ],  // 55: Sabah
      [C, Cs,        EE, F, Fs,    Gs, A       ],  // 56: Segiah
      [C,     D, Ds,     F,     G,     A       ],  // 57: Sho
      [C, Cs             F,     G, Gs          ],  // 58: Goonkali
      [C, Cs             F, Fs,           As   ],  // 59: Iwato2
      [C,     D, Ds,            G,     A       ],  // 60: Kumoi
      [C, Cs, D,     EE, F,     G,     A       ],  // 61: Magen Abot
      [C,            EE, F,            A, As   ],  // 62: Melog / Selisir
      [C,        Ds,     F, Fs, G,     A, As   ],  // 63: Noh
      [C,     D,         F,            A, As   ],  // 64: Pyeong Jo
      [C, Cs,            F, Fs,    Gs          ],  // 65: Zokuso
      [C,     D,     EE, F,            A, As   ]   // 66: Hang
                                ];

   static IntArray white_tbl = [
      0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6
                                ];

   static IntArray white_align_tbl = [
      0, 0, 2, 2, 4, 5, 5, 7, 7, 9, 9, 11
                                ];

   static IntArray index_to_white_tbl = [
      0, 2, 4, 5, 7, 9, 11
                                         ];

   static IntArray neg_harmony_tbl = [
      7, 6, 5, 4, 3, 2, 1, 0, 11, 10, 9, 8
                                      ];

   static IntArray black_flags_tbl = [
      0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0
                                      ];


   // <method.png>
   static ScaleIndexOct(local int _idx, local int _key, local int _mode) : int {
      local IntArray modeTbl <= mode_tables.get(_mode);

      if(null != modeTbl)
      {
         local int oct = (_idx / 12) * 12;
         local int modeIdx = (_idx % 12);
         if(modeIdx < modeTbl.getNumElements())
         {
            // trace "xxx ScaleIndexOct: idx="+_idx+" oct="+oct+" modeIdx="+modeIdx;
            return modeTbl.get(modeIdx) + _key + oct;
         }
      }

      return -1;
   }

   // <method.png>
   static WhiteToIndex(local int _note, local int _base) : int {
      _base = white_align_tbl.get(_base % 12) + (_base/12)*12;
      local int relIdx = (_note - _base);

      // trace "xxx WhiteToIndex: note="+_note+" base="+_base+" relIdx="+relIdx;

      if(relIdx >= 0)
      {
         local int idxOff = white_tbl.get(_base - ((_base / 12) * 12));

         local int idx = white_tbl.get(_note % 12);

         local int ret = (idx - idxOff);

         ret += (((_note / 12) - (_base / 12)) * 7);

         // trace "xxx WhiteToIndex:  => idxOff="+idxOff+" idx="+idx+"   ret="+ret;

         return ret;
      }

      return -1;
   }

   // <method.png>
   static IndexToWhite(local int _idx, local int _base) : int {
      local int baseOct = (_base / 12) * 12;
      local int relIdx = white_tbl.get(_base % 12) + _idx;
      baseOct += (relIdx / 7) * 12;
      return index_to_white_tbl.get(relIdx % 7) + baseOct;
   }

   // <method.png>
   static ScaleIndexRep(local int _idx, local int _key, local int _mode) : int {
      local IntArray modeTbl <= mode_tables.get(_mode);

      if(null != modeTbl)
      {
         local int oct = (_idx / modeTbl.getNumElements()) * 12;
         local int modeIdx = (_idx % modeTbl.getNumElements());
         // trace "xxx ScaleIndexRep: idx="+_idx+" oct="+oct+" modeIdx="+modeIdx;
         return modeTbl.get(modeIdx) + _key + oct;
      }

      return -1;
   }

   // <method.png>
   static ScaleNoteUp(local int _note, local int _key, local int _mode) : int {
      local IntArray modeTbl <= mode_tables.get(_mode);

      if(null != modeTbl)
      {
         local int oct = (_note / 12) * 12;
         local int modeIdx = ((_note - _key) % 12);

         local int i = 0;
         local boolean bFound = false;
         loop(modeTbl.numElements)
         {
            if(modeTbl.get(i) >= modeIdx)
            {
               i = modeTbl.get(i);
               bFound = true;
               break;
            }
            i++;
         }

         if(!bFound)
         {
            oct += 12;
            i = modeTbl.get(0);
         }

         // // trace "xxx ScaleNoteUp: note="+_note+" oct="+oct+" i="+i;
         return i + _key + oct;
      }

      return -1;
   }

   // <method.png>
   static ScaleNoteDownTbl(local int _note, local int _key, local IntArray _modeTbl) : int {

      local int oct = (_note / 12) * 12;
      local int modeIdx = ((_note - _key) % 12);

      local int i;
      if(modeIdx < _modeTbl.get(0))
      {
         oct -= 12;
         i = _modeTbl.last;
      }
      else
      {
         i = 0;
         local boolean bFound = false;
         loop(_modeTbl.numElements)
         {
            if(_modeTbl.get(i) == modeIdx)
            {
               i = _modeTbl.get(i);
               bFound = true;
               break;
            }
            else if(_modeTbl.get(i) > modeIdx)
            {
               i = _modeTbl.get(i - 1);
               bFound = true;
               break;
            }
            i++;
         }
         if(!bFound)
         {
            i = _modeTbl.last;
         }
      }

      // // trace "xxx ScaleNoteDownTbl: note="+_note+" oct="+oct+" i="+i;
      return i + _key + oct;
   }

   // <method.png>
   static ScaleNoteDown(local int _note, local int _key, local int _mode) : int {
      local IntArray modeTbl <= mode_tables.get(_mode);

      if(null != modeTbl)
         return ScaleNoteDownTbl(_note, _key, modeTbl);

      return -1;
   }

   // <method.png>
   static ScaleNoteDrop(local int _note, local int _key, local int _mode) : int {
      local IntArray modeTbl <= mode_tables.get(_mode);

      if(null != modeTbl)
      {
         local int modeIdx = ((_note - _key) % 12);

         if(modeTbl.contains(modeIdx))
         {
            return _note;
         }
      }

      return -1;
   }

   // <method_find.png>
   static FindKeyIdxByString(String _s) : int {
      String *keyName;
      int keyIdx = 0;
      local String slc <= _s.toLower();
      foreach keyName in key_names_lc
      {
         if(keyName == slc)
            return keyIdx;
         keyIdx++;
      }
      return -1;
   }

   // <method_find.png>
   static FindModeIdxBySubString(String _s) : int {
      String *modeName;
      int modeIdx = 0;
      foreach modeName in mode_names
      {
         if((modeName.toLower().replace(" ", "")) & _s)
            return modeIdx;
         modeIdx++;
      }
      return -1;
   }

   // <method_get.png>
   static IsScaleNote(local int _note, local int _key, local int _mode) : boolean {
      local IntArray modeTbl <= mode_tables.get(_mode);
      if(null != modeTbl)
         return modeTbl.contains((_note - _key) % 12);
      return false;
   }

   // <method.png>
   static NegativeHarmony(local int _note, local int _key) : int {
      _key = _key % 12;
      _note += (12 - _key);
      local int oct = (_note / 12);
      _note -= (oct * 12);
      _note = neg_harmony_tbl.get(_note);
      _note += (oct * 12);
      _note -= (12 - _key);
      return _note;
   }

}
