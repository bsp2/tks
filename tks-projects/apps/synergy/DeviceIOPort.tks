// ----
// ---- file   : DeviceIOPort.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2017-2020 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- created: 16Sep2017
// ---- changed: 17Sep2017, 21Sep2017, 02Nov2017, 09Nov2017, 04Jan2018, 07Mar2018, 02May2018
// ----          05May2018, 23May2018, 27May2018, 08Jun2018, 17Jun2018, 02Oct2019, 06Apr2020
// ----
// ----
// ----

module MDeviceIOPort;

use namespace ui;
use namespace st2;


// <class.png>
class DeviceIOPort {
   // (note) used by NodeScript, NodeSeq

   String  var_name;
   int     dev_idx;
   byte    dev_ch;  // -1=all ch (0..15 in NodeScript, can be -1 in NodeSeq)
   boolean b_enable;
   String  info;


   // <method.png>
   public =replay= method copyFrom(DeviceIOPort _o) {
      var_name = _o.var_name;
      dev_idx  = _o.dev_idx;
      dev_ch   = _o.dev_ch;
      b_enable = _o.b_enable;
      info     = _o.info;
   }

   // <method_set.png>
   public =replay= method setVarName(String _s) : boolean {
      if(!_s.isBlank())
      {
         if(-1 == _s.charsetIndexOf("!\"§$%&/\\()=?`´\'#*+~-@|,.:;^°", 0))
         {
            var_name = _s;
            return true;
         }
      }
      return false;
   }

   // <method_set.png>
   public =replay= method setDevIdx(int _devIdx) {
      dev_idx = _devIdx;
   }

   // <method_set.png>
   public =replay= method setDevCh(int _devCh) {
      dev_ch = _devCh;
   }

   // <method_set.png>
   public =replay= method setEnable(boolean _bEnable) {
      b_enable = _bEnable;
   }

   // <method_set.png>
   public method setInfo(String _s) {
      info = _s;
   }

   // <method.png>
   public method appendSource(String src) {
      // used by NodeScript
      if(b_enable)
      {
         src.append("int  "+var_name+"_dev = "+dev_idx+";\n");
         src.append("byte "+var_name+"_ch  = "+dev_ch+";\n");
      }
      else
      {
         src.append("int  "+var_name+"_dev = 999999;\n");
         src.append("byte "+var_name+"_ch  = "+dev_ch+";\n");
      }
   }

   // <save.png>
   public method saveState(Stream ofs) {
      ofs.i16 = 1; // Version

      Utils.WriteString(ofs, var_name);
      ofs.i32 = dev_idx;
      ofs.i8  = dev_ch;
      ofs.i8  = b_enable;
      Utils.WriteString(ofs, info);
   }

   // <load.png>
   public method loadState(Stream ifs, IntArray _outDevIdxMap, IntArray _outDevUseCount) : boolean {
      short ver = ifs.i16;

      if(ver >= 1)
      {
         Utils.ReadString(ifs, var_name);
         dev_idx  = ifs.i32;
         dev_ch   = ifs.s8;
         b_enable = ifs.b8;
         Utils.ReadString(ifs, info);

         _outDevUseCount.inc(dev_idx);
         dev_idx = _outDevIdxMap.get(dev_idx);

         return true;
      }

      return false;
   }
}
