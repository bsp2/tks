// ----
// ---- file   : NT_ImportARDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2016-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 31Mar2016
// ---- changed: 30Nov2018, 03Dec2018, 21Sep2019, 24Oct2019, 30Oct2019, 25Sep2023, 04Oct2023
// ----          06Oct2023, 30Oct2023, 01Dec2023
// ----
// ----
// ----

module MNT_ImportARDialog;

use namespace ui;
use namespace st2;


// <class.png>
class NT_ImportARDialog extends Dialog, ActionProvider, MMTListener {

   define String ACTION_AR_IMPORT;
   define String ACTION_AR_CANCEL;

   protected XMLForm *xfm;

   protected ActionConsumer *recipient;

   public AR_Pattern ar_import_pattern;
   public boolean b_ar_import_pattern_valid;

   protected CheckBox *cb_clear_pat;
   protected CheckBox *cb_clear_ins;
   protected CheckBox *cb_create_instruments;
   protected CheckBox *cb_create_tracks;
   protected CheckBox *cb_length;
   protected CheckBox *cb_notes;
   protected CheckBox *cb_chromatic;
   protected CheckBox *cb_singlech;
   protected CheckBox *cb_trc;
   protected CheckBox *cb_velocities;
   protected CheckBox *cb_accents;
   protected CheckBox *cb_note_durations;
   protected CheckBox *cb_micro_timings;
   protected CheckBox *cb_retrigs;
   protected CheckBox *cb_plocks;
   protected CheckBox *cb_plocks_optimize;
   protected CheckBox *cb_plocks_reset;

   protected Button *bt_import;
   protected Button *bt_cancel;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("NT_ImportARDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      initWindow(xfm,
                 "Import Analog Rytm Pattern",
                 100, 100,
                 640, 240
                 );

      return true;
   }

   public method setRecipient(ActionConsumer _ac) {
      recipient <= _ac;
   }

   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_AR_IMPORT, ACTION_AR_CANCEL];
   }

   public virtual isPopup() : boolean {
      return true;
   }

   public virtual isModal():boolean {
      return true;
   }

   public virtual isResizable() : boolean {
      return false;
   }

   // <ui_show.png>
   protected virtual preShow() {

      setWindowTitle("Import Analog Rytm Pattern");

      if(!b_layer_postinit_done)
         resizeToMinimum();

      // Make a copy of the current pattern clipboard
      AR_Pattern arPat <= /*NodeAnalogRytm*/Global.GetARPatternClipboard();
      if(null != arPat)
      {
         ar_import_pattern = arPat;
         b_ar_import_pattern_valid = true;
      }
      else
      {
         b_ar_import_pattern_valid = false;
      }

      bt_import.setEditable(b_ar_import_pattern_valid);

      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      UI.SetKeyboardFocus(b_ar_import_pattern_valid ? bt_import : bt_cancel);

      if(!b_ar_import_pattern_valid)
         Global.Warning("ImportAR: clipboard is empty (select pattern in AnalogRytm node)");
   }

   // <ui_handle.png>
   protected method handleCancel() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         StringAction ac <= Action.New(getProvidedActionAlias(ACTION_AR_CANCEL), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <ui_handle.png>
   protected method handleImport() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         StringAction ac <= Action.New(getProvidedActionAlias(ACTION_AR_IMPORT), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <method_get.png>
   public method doClearPattern() : boolean {
      return cb_clear_pat.isSelected();
   }

   // <method_get.png>
   public method doClearInstruments() : boolean {
      return cb_clear_ins.isSelected();
   }

   // <method_get.png>
   public method doCreateInstruments() : boolean {
      return cb_create_instruments.isSelected();
   }

   // <method_get.png>
   public method doTracks() : boolean {
      return cb_create_tracks.isSelected();
   }

   // <method_get.png>
   public method doLength() : boolean {
      return cb_length.isSelected();
   }

   // <method_get.png>
   public method doNotes() : boolean {
      return cb_notes.isSelected();
   }

   // <method_get.png>
   public method doChromatic() : boolean {
      return cb_chromatic.isSelected();
   }

   // <method_get.png>
   public method doSingleCh() : boolean {
      return cb_singlech.isSelected();
   }

   // <method_get.png>
   public method doConditional() : boolean {
      return cb_trc.isSelected();
   }

   // <method_get.png>
   public method doVelocities() : boolean {
      return cb_velocities.isSelected();
   }

   // <method_get.png>
   public method doAccents() : boolean {
      return cb_accents.isSelected();
   }

   // <method_get.png>
   public method doDurations() : boolean {
      return cb_note_durations.isSelected();
   }

   // <method_get.png>
   public method doMicroTimings() : boolean {
      return cb_micro_timings.isSelected();
   }

   // <method_get.png>
   public method doRetrigs() : boolean {
      return cb_retrigs.isSelected();
   }

   // <method_get.png>
   public method doPLocks() : boolean {
      return cb_plocks.isSelected();
   }

   // <method_get.png>
   public method doOptimizePLocks() : boolean {
      return cb_plocks_optimize.isSelected();
   }

   // <method_get.png>
   public method doResetPLocks() : boolean {
      return cb_plocks_reset.isSelected();
   }

   // <ui_kbd.png>
   public virtual onTriadKeyTimeout() {

      Dialogs.ShowTriadKeyHelpDialog("lctrl-x ..",
"
          c         :   Close dialog
"
                                    ,
                                    this);
      return true;
   }

   // <ui_kbd.png>
   public virtual onTriadKey(Key _k) : boolean {
      // No unicode events generated if lctrl- is still pressed
      int key = _k.pressed;
      boolean r = false;
      loop(2) // first pass for raw keycode, second pass for unicode
      {
         // US (reference) keyboard layout (raw keycodes)
         switch(key)
         {
            case 'c':
               hide();
               r = true; break;

            default:
               r = maybe; break;
         }

         if(true == r)
         {
            return true;
         }
         else if(maybe == r)
         {
            Global.Print("");
         }

         // see above
         key = _k.unicode;
      }

      return false;
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      switch(_k.pressed)
      {
         case VKEY_ESCAPE:
            handleCancel();
            return true;

        case VKEY_F7:
           if(_k.modShiftOnly())
           {
              handleCancel();
              return true;
           }
           break;

         case VKEY_RETURN:
         case VKEY_SPACE:
            handleImport();
            return true;

         default:
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String name=_ac.getActionName();

      // trace "xxx NT_ImportARDialog: got action name="+name;

      switch(name)
      {
         case "ok":
            handleImport();
            break;

         case "cancel":
            handleCancel();
            break;
      }

      switch(@(_ac.getActionProvider()))
      {
         case @(cb_chromatic):
            if(cb_chromatic.isSelected())
            {
               cb_singlech.setSelected(false);
               cb_singlech.setEditable(false);
               cb_singlech.redraw();
            }
            else
            {
               cb_singlech.setEditable(true);
               cb_singlech.redraw();
            }
            return true;

         case @(cb_singlech):
            if(cb_singlech.isSelected())
            {
               cb_chromatic.setSelected(false);
               cb_chromatic.setEditable(false);
               cb_chromatic.redraw();
            }
            else
            {
               cb_chromatic.setEditable(true);
               cb_chromatic.redraw();
            }
            return true;

         case @(bt_import):
             handleImport();
             return true;

         case @(bt_cancel):
             handleCancel();
             return true;
      }

      return true;
   }

}
