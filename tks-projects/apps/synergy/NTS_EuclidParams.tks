// ----
// ---- file   : NTS_EuclidParams.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2016-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- changed: 09Jul2016, 10Jul2016, 11Jul2016, 12Jul2016, 13Jul2016, 17Jul2016, 08Oct2016
// ----          09Oct2016, 16Oct2016, 11Dec2016, 12Dec2016, 19Dec2016, 30Jan2017, 31Jan2017
// ----          02Feb2017, 03Feb2017, 04Feb2017, 10Feb2017, 12Feb2017, 26Feb2017, 18Mar2017
// ----          01Jun2017, 05Jun2017, 12Aug2017, 18Aug2017, 03Sep2017, 09Oct2017, 14Oct2017
// ----          10Nov2017, 11Nov2017, 25Nov2017, 29Nov2017, 30Nov2017, 04Jan2018, 07Mar2018
// ----          12May2018, 21May2018, 27May2018, 28May2018, 01Jun2018, 17Jun2018, 24Jun2018
// ----          20Jul2019, 02Oct2019, 03Oct2019, 04Oct2019, 05Oct2019, 06Oct2019, 07Oct2019
// ----          08Oct2019, 09Oct2019, 14Oct2019, 16Oct2019, 17Oct2019, 18Oct2019, 19Oct2019
// ----          25Oct2019, 31Oct2019, 01Nov2019, 02Nov2019, 07Nov2019, 06Mar2020, 18Mar2020
// ----          05May2020, 26Oct2020, 27Oct2020, 30Oct2020, 02Nov2020, 03Nov2020, 10Nov2020
// ----          12Nov2020, 13Nov2020, 23Nov2020, 27Jan2021, 20Jun2021, 01Jan2022, 04Jan2022
// ----          21Feb2022, 07May2022, 21Jun2023, 14Oct2023, 27Nov2023, 01Dec2023, 02Dec2023
// ----          06Oct2024
// ----
// ----
// ----
module MNTS_EuclidParams;

use namespace ui;
use namespace st2;


// <class.png>
class NTS_EuclidParams {

   define int MODE_NONE   = 0;
   define int MODE_INCDEC = 1;
   define int MODE_DECINC = 2;

   short   num_trigs;  // 1..64
   short   num_steps;  // 0=use track length, 1..64
   byte    pre_mode;   // see MODE_xxx
   boolean b_reverse;
   byte    post_mode;  // see MODE_xxx
   short   rotation;   // -64..64
   boolean b_invert;

   boolean b_write_trigs;
   boolean b_write_arg1;
   boolean write_arg1_mode_set;    // 0=none, 1=set arg1 to 0, 2=set arg1 to 1, , 3=set arg1 to 2, , 4=set arg1 to 3
   boolean write_arg1_mode_clear;  // 0=none, 1=set arg1 to 0, 2=set arg1 to 1, , 3=set arg1 to 2, , 4=set arg1 to 3
   boolean b_write_repeats;
   boolean b_overlay;

   boolean b_always_undo;  // true=always revert to original track before generating new trigs/arg1/..


   // <method_init.png>
   public method init() {
      num_trigs = 4;
      num_steps = 0;
      pre_mode  = MODE_NONE;
      post_mode = MODE_NONE;
      b_reverse = false;
      b_invert  = false;
      rotation  = 0;

      b_write_trigs         = true;
      b_write_arg1          = false;
      write_arg1_mode_set   = 0;
      write_arg1_mode_clear = 3;
      b_write_repeats       = false;
      b_overlay             = false;

      b_always_undo = true;
   }


   // <save.png>
   public method saveState(Stream _ofs) {

      // Version
      _ofs.i16 = 4;

      // Num trigs
      _ofs.i16 = num_trigs;

      // Num steps
      _ofs.i16 = num_steps;

      // Pre inc/dec mode
      _ofs.i8 = pre_mode;

      // Post inc/dec mode
      _ofs.i8 = post_mode;

      // Reverse
      _ofs.i8 = b_reverse;

      // Rotation
      _ofs.i16 = rotation;

      // Invert
      _ofs.i8 = b_invert;

      // Write trigs
      _ofs.i8 = b_write_trigs;

      // Write arg1 (v4+)
      _ofs.i8 = b_write_arg1;

      // Write arg1 mode set
      _ofs.i8 = write_arg1_mode_set;

      // Write arg1 mode clear (v2+)
      _ofs.i8 = write_arg1_mode_clear;

      // Write repeats
      _ofs.i8 = b_write_repeats;

      // Write overlayed
      _ofs.i8 = b_overlay;

      // Always undo (v3+)
      _ofs.i8 = b_always_undo;
   }

   // <load.png>
   public method loadState(Stream _ifs) : boolean {

      short ver = _ifs.u16;

      if(ver >= 1)
      {
         // Num trigs
         num_trigs = _ifs.u16;

         // Num steps
         num_steps = _ifs.u16;

         // Pre inc/dec mode
         pre_mode = _ifs.u8;

         // Post inc/dec mode
         post_mode = _ifs.u8;

         // Reverse
         b_reverse = _ifs.b8;

         // Rotation
         rotation = _ifs.s16;

         // Invert
         b_invert = _ifs.b8;

         // Write trigs
         b_write_trigs = _ifs.b8;

         if(ver >= 4)
         {
            // Write arg1 (v4+)
            b_write_arg1 = _ifs.b8;
         }

         // Write arg1 mode set
         write_arg1_mode_set = _ifs.u8;

         if(ver >= 2)
         {
            // Write arg1 mode clear (v2+)
            write_arg1_mode_clear = _ifs.u8;
         }

         // Write repeats
         b_write_repeats = _ifs.b8;

         // Write overlayed
         b_overlay = _ifs.b8;

         if(ver >= 3)
         {
            // Always undo (v3+)
            b_always_undo = _ifs.b8;
         }

         return true;
      }
      else
      {
         trace "[---] NTS_EuclidParams::loadState: invalid ver="+ver;
      }

      return false;
   }
}
