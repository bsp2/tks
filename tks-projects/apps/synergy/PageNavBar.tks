// ----
// ---- file   : PageNavBar.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2019-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----          also see: <http://wolzow.mindworks.ee/analog/m1k-midi-spec.htm>
// ----
// ---- created: 29Jan2019
// ---- changed: 03Aug2019, 08Nov2022, 02Oct2024
// ----
// ----
// ----
module MPageNavBar;

use namespace ui;
use namespace st2;


// <class.png>
class PageNavBar : Control {
   protected IntArray    page_ids;
   protected Panel      *pn_buttons;
   protected Button *[]  buttons;


   // <init.png>
   public method initPageNavBarOnly() {
      setLayout(SuperBorderLayout);

      local Panel p;
      p.initPanel();
      p.setPadBottom(2);
      pn_buttons <= p;

      addPage(RootForm.PAGE_PREFS,         "Prefs",
              "Show Preferences Page\n\n (note) lctrl-NUM 2"
              );
      addPage(RootForm.PAGE_MIDIDEVS,      "Devs",
              "Show MIDI Device Page\n\n (note) lctrl-NUM 4"
              );
      addPage(RootForm.PAGE_EDITMIDIMAP,   "MIDIMap(g)",
              "Show Global MIDIMap Page\n\n (note) lctrl-NUM 6"
              );
      addPage(-RootForm.PAGE_EDITMIDIMAP,  "MIDIMap(c)",
              "Show Page-specific MIDIMap Page\n\n (note) \'lctrl-m\'"
              );
      addPage(RootForm.PAGE_EDITMIDIMORPH, "Scene",
              "Show MIDI Controller Scene Page\n\n (note) \'` `\'"
              );
      addPage(RootForm.PAGE_CTLTAG,        "CtlTag",
              "Show MIDI Controller Tag Page\n\n (note) \'`\'"
              );
      addPage(RootForm.PAGE_MIDIMON,       "InputMon",
              "Show MIDI Input Monitor Page\n\n (note) lctrl-NUM ENTER"
              );
      addPage(RootForm.PAGE_OUTPUTMON,     "OutputMon",
              "Show MIDI Output Monitor Page\n\n (note) lctrl-NUM +"
              );
      addPage(RootForm.PAGE_SYSEX,         "SysEx",
              "Show MIDI Synth Editor / SysEx Page\n\n (note) lctrl-NUM 0 (any page)  OR  lctrl-TAB (pipemap page)"
              );
      addPage(RootForm.PAGE_AUDIOTOOL,     "AudioTool",
              "Show Audio Tool Page\n\n (note) lctrl-NUM 9"
              );
      addPage(RootForm.PAGE_PROJECT,       "Project",
              "Show Project Page\n\n (note) lctrl-NUM 5"
              );
      addPage(RootForm.PAGE_PIPEMAP,       "PipeMap",
              "Show PipeMap Page\n\n (note) lctrl-NUM 1"
              );
      addPage(RootForm.PAGE_PIPEROOT,      "PipeRoot",
              "Show PipeRoot Page\n\n (note) lctrl-NUM 7"
              );
      addPage(RootForm.PAGE_PIPE,          "Pipe",
              "Show Current Pipe Editor Page\n\n (note) lctrl-NUM 8"
              );
      addPage(RootForm.PAGE_NODE,          "Node",
              "Show Current Node Editor Page\n\n (note) lctrl-NUM 3"
              );
      addPage(-RootForm.PAGE_NODE,         "<>",
              "Toggle Node Editor A and B\n\n (note) lctrl-x z\n\n (note) set node A with lctrl-x 1, node B with lctrl-x 2"
              );

      addLayer(deref p, Layout.LEFT);

      if(STConfig.lnf_idx == LookAndFeel.IDX_MONO)
         recursiveSetLookAndFeel(LookAndFeel.MONO);
      else
         recursiveSetLookAndFeel(LookAndFeel.DARK);
      recursiveOnLookAndFeelChanged();
   }

   // <method_add.png>
   protected method addPage(int _pageId, String _caption, String _toolTipCaption) {
      local Button bt;
      bt.initButton();
      bt.setCaption(_caption);
      bt.setToolTipCaption(_toolTipCaption);
      bt.setAlignment(Layout.LEFT);
      bt.setPadding4f(0, 4, 0, 4);
      bt.setLayerStyle(LookAndFeel.STYLE_FLAT);
      pn_buttons.addLayer(deref bt, Layout.RIGHT);
      buttons.add(bt);
      page_ids.add(_pageId);
   }

   // <ui_render.png>
   public virtual onDraw() {
      UIRenderer.DrawFilledRectangle(0, 0, getSizeX(), getSizeY()-3, lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG));
   }

   // <ui_render.png>
   public virtual onDrawPost() {
      Control::onDrawPost();

      UIRenderer.DrawLine(0, getSizeY()-3,
                          getSizeX(), getSizeY()-3,
                          lnf_colors.get(LookAndFeel.COLOR_BORDER_DIMLIGHT)
                          );
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      // trace "xxx PageNavBar::consumeAction: acName=\""+acName+"\".";

      if(!root_form.isCurrentPageModal())
      {
         int idx = buttons.indexOfPointer(ap, 0);
         if(-1 != idx)
         {
            int pageId = page_ids.get(idx);

            if(pageId == root_form.getCurrentPageNr())
               pageId = RootForm.PAGE_PIPEMAP;

            if(RootForm.PAGE_EDITMIDIMAP == pageId)
            {
               root_form.pg_midimapper.showGlobalMidiMap();
            }
            else if(-RootForm.PAGE_EDITMIDIMAP == pageId)
            {
               root_form.pageEditMMC();
            }
            else if(RootForm.PAGE_EDITMIDIMORPH == pageId)
            {
               root_form.pg_midimapper.showCurrentScene();
            }
            else if(-RootForm.PAGE_NODE == pageId)
            {
               root_form.showPage(RootForm.PAGE_NODE, true/*bHistory*/);
               root_form.pg_node.handlePipeNodeABSwap();
            }
            else if(RootForm.PAGE_NODE == pageId)
            {
               MIDIPipeNode node <= root_form.pg_pipe.getSelectedNode();
               if(null != node)
               {
                  root_form.pg_pipemap.handleExecNode(node, PagePipeMap.EXEC_EDIT);
                  // root_form.showPage(pageId, true/*bHistory*/);
               }
               else
               {
                  Global.Warning("No node selected, yet");
               }
            }
            else
            {
               root_form.showPage(pageId, true/*bHistory*/);
            }
         }
      }
   }

   // <ui_xfm.png>
   public method beginXFMTag(AbstractXMLForm _form, HashTable _attributes) : boolean {
      initControl();

      if(Layer::beginXFMTag(_form, _attributes))
      {
         String atname, atval;
         StringArray atsplit;
         foreach atname in _attributes
         {
            atval<=_attributes[atname];
            switch(atname)
            {
            }
         }

         initPageNavBarOnly();
      }
      return true;
   }
}
