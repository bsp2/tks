// ----
// ---- file   : markov_bd_1.cpp
// ---- author : 
// ---- legal  : Distributed under terms of the MIT license (https://opensource.org/licenses/MIT)
// ----
// ----          Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// ----          associated documentation files (the "Software"), to deal in the Software without restriction, including
// ----          without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// ----          copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to
// ----          the following conditions:
// ----
// ----          The above copyright notice and this permission notice shall be included in all copies or substantial
// ----          portions of the Software.
// ----
// ----          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// ----          NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// ----          IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// ----          WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// ----          SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ----
// ---- info   : auto-generated by "Cycle"
// ----           $ g++ -Wall -Wno-unused-function -Wno-unused-variable -I../../tksampler -c markov_bd_1.cpp -o markov_bd_1.o
// ---- created: 22Dec2024 15:14:17
// ----
// ----
// ----

// (note) pre-define CYCLE_SKIP_UI to skip all code used only for UI/editing purposes (e.g. when compiling for standalone replay)
// #define CYCLE_SKIP_UI  defined

#include <plugin.h>

#include <stdlib.h>
#include <math.h>
#include <string.h>
#define OVERSAMPLE_FACTOR  2.0f

#define PARAM_AB                 0
#define PARAM_BA                 1
#define PARAM_AB2                2
#define PARAM_BA2                3
#define PARAM_BPF                4
#define PARAM_NOISE_T            5
#define PARAM_BODY_T             6
#define PARAM_PENV_AMT           7
#define NUM_PARAMS               8
#ifndef CYCLE_SKIP_UI
static const char *loc_param_names[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   +1
#endif
                                   ] = {
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   ""
#else
   "ab",                      // 0: AB
   "ba",                      // 1: BA
   "ab2",                     // 2: AB2
   "ba2",                     // 3: BA2
   "bpf",                     // 4: BPF
   "noise_t",                 // 5: NOISE_T
   "body_t",                  // 6: BODY_T
   "penv_amt",                // 7: PENV_AMT

#endif
};
#endif // CYCLE_SKIP_UI
static float loc_param_resets[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   +1
#endif
                              ] = {
#if defined(_MSC_VER) && 0 == NUM_PARAMS
   0.0f
#else
   0.1f,                      // 0: AB
   0.1f,                      // 1: BA
   0.1f,                      // 2: AB2
   0.1f,                      // 3: BA2
   0.6f,                      // 4: BPF
   0.5f,                      // 5: NOISE_T
   0.5f,                      // 6: BODY_T
   0.5f,                      // 7: PENV_AMT

#endif
};

#define MOD_AB                   0
#define MOD_BA                   1
#define MOD_BPF                  2
#define MOD_NOISE_T              3
#define MOD_BODY_T               4
#define MOD_PENV_AMT             5
#define NUM_MODS                 6
#ifndef CYCLE_SKIP_UI
static const char *loc_mod_names[NUM_MODS
#if defined(_MSC_VER) && 0 == NUM_MODS
   +1
#endif
                                 ] = {
#if defined(_MSC_VER) && 0 == NUM_MODS
   ""
#else
   "ab",                   // 0: AB
   "ba",                   // 1: BA
   "bpf",                  // 2: BPF
   "noise_t",              // 3: NOISE_T
   "body_t",               // 4: BODY_T
   "penv_amt",             // 5: PENV_AMT

#endif
};
#endif // CYCLE_SKIP_UI

typedef struct markov_bd_1_info_s {
   st_plugin_info_t base;
} markov_bd_1_info_t;

typedef struct markov_bd_1_shared_s {
   st_plugin_shared_t base;
   float params[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                +1
#endif
                ];

} markov_bd_1_shared_t;

typedef struct markov_bd_1_voice_s {
   st_plugin_voice_t base;
   float             sample_rate;
   float             bpm;
   float             velocity;
   float             note_speed_fixed;
   float             note_speed_cur;
   float             note_speed_inc;
   float             note_cur;
   float             note_inc;
   float             mods[NUM_MODS
#if defined(_MSC_VER) && 0 == NUM_MODS
                          +1
#endif
                          ];
   float mod_ab_cur;
   float mod_ab_inc;
   float mod_ba_cur;
   float mod_ba_inc;
   float mod_bpf_cur;
   float mod_bpf_inc;
   float mod_noise_t_cur;
   float mod_noise_t_inc;
   float mod_body_t_cur;
   float mod_body_t_inc;
   float mod_penv_amt_cur;
   float mod_penv_amt_inc;

   short tmp1;
   unsigned short tmp2_lfsr_state;
   short tmp3_lfsr_state_signed;
   short tmp4_mkv_state;
   float tmp5_mkv_out;
   float tmp6;
   float tmp7;
   float tmp8;
   float tmp9;
   float tmp10;
   unsigned short tmp11_lfsr_state;
   short tmp12_lfsr_state_signed;
   short tmp13_mkv_state;
   float tmp14_mkv_out;
   float tmp15;
   float tmp16;
   float tmp17;
   float tmp18;
   float tmp19;
   unsigned short tmp20_lfsr_state;
   short tmp21_lfsr_state_signed;
   short tmp22_mkv_state;
   float tmp23_mkv_out;
   float tmp24_adsrv2_last_gate;
   float tmp25_adsrv2_level;
   short tmp26_adsrv2_segidx;
   float tmp27_adsrv2_vel;
   float tmp28_svf_lp;
   float tmp29_svf_hp;
   float tmp30_svf_bp;
   float tmp31_sin_phase;
   float tmp32_adsrv2_last_gate;
   float tmp33_adsrv2_level;
   short tmp34_adsrv2_segidx;
   float tmp35_adsrv2_vel;
   float tmp36_adsrv2_last_gate;
   float tmp37_adsrv2_level;
   short tmp38_adsrv2_segidx;
   float tmp39_adsrv2_vel;
   float var_x;
   float var_v_noise;
   float var_v_body;
   float var_v_out;
   float sr_factor;

} markov_bd_1_voice_t;

#define loop(X)  for(unsigned int i = 0u; i < (X); i++)
#define clamp(a,b,c) (((a)<(b))?(b):(((a)>(c))?(c):(a)))

static inline float mathLerpf(float _a, float _b, float _t) { return _a + (_b - _a) * _t; }
static inline float mathClampf(float a, float b, float c) { return (((a)<(b))?(b):(((a)>(c))?(c):(a))); }
static inline float mathMinf(float a, float b) { return (a<b)?a:b; }
static inline float mathMaxf(float a, float b) { return (a>b)?a:b; }
static inline float mathAbsMaxf(float _x, float _y) { return ( ( (_x<0.0f)?-_x:_x)>((_y<0.0f)?-_y:_y)?_x:_y ); }
static inline float mathAbsMinf(float _x, float _y) { return ( ((_x<0.0f)?-_x:_x)<((_y<0.0f)?-_y:_y)?_x:_y ); }
static inline float frac(float _x) { return _x - ((int)_x); }

static inline float winLinear(const float *_s, float _index) {
   int idx = (int)_index;
   float r = _index - (float)idx;
   return mathLerpf(_s[idx], _s[idx+1], r);
}

static float ffrac_s(float _f) { int i; if(_f >= 0.0f) { i = (int)_f; return _f - (float)i; } else { i = (int)-_f; return 1.0f - (-_f - (float)i); } }

#define USE_CYCLE_SINE_TBL  defined
static float cycle_sine_tbl_f[16384];

static float mathLogf(const float _x) {
   union {
      float f;
      unsigned int u;
   } bx;
   bx.f = _x;
   const unsigned int ex = bx.u >> 23;
   const signed int t = (signed int)ex - (signed int)127;
   const unsigned int s = (t < 0) ? (-t) : t;
   bx.u = 1065353216u | (bx.u & 8388607u);
   return
      -1.7417939f + (2.8212026f + (-1.4699568f + (0.44717955f - 0.056570851f * bx.f)*bx.f)*bx.f)*bx.f
      + 0.6931471806f * t;
}

static float mathPowerf(float _x, float _y) {
   float r;
   if(_y != 0.0f)
   {
      if(_x < 0.0f)
      {
         r = (float)( -expf(_y*mathLogf(-_x)) );
      }
      else if(_x > 0.0f)
      {
         r = (float)( expf(_y*mathLogf(_x)) );
      }
      else
      {
         r = 0.0f;
      }
   }
   else
   {
      r = 1.0f;
   }
   return Dstplugin_fix_denorm_32(r);
}

static float loc_bipolar_to_scale(const float _t, const float _div, const float _mul) {
   // t (-1..1) => /_div .. *_mul
   
   float s;

   if(_t < 0.0f)
   {
      s = (1.0f / _div);
      s = 1.0f + (s - 1.0f) * -_t;
      if(s < 0.0f)
         s = 0.0f;
   }
   else
   {
      s = _mul;
      s = 1.0f + (s - 1.0f) * _t;
   }
   
   return s;
}



#ifndef CYCLE_SKIP_UI
static unsigned int loc_copy_chars(char *_d, const unsigned int _dSize, const char *_s) {
   unsigned int r = 0u;
   if(NULL != _d)
   {
      // Write min(dSize,len(s)) characters to 'd'
      char *d = _d;
      if(NULL != _s)
      {
         const char *s = _s;
         for(;;)
         {
            if(r < _dSize)
            {
               char c = s[r++];
               *d++ = c;
               if(0 == c)
                  break;
            }
            else
            {
               if(r > 0u)
                  d[-1] = 0;  // force ASCIIZ
               break;
            }
         }
      }
      else
      {
         if(_dSize > 0u)
         {
            _d[0] = 0;
            r = 1u;
         }
      }
   }
   else
   {
      // Return total length of source string
      if(NULL != _s)
      {
         const char *s = _s;
         for(;;)
         {
            char c = s[r++];
            if(0 == c)
               break;
         }
      }
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int loc_copy_floats(float              *_d,
                                    const unsigned int  _dSize,
                                    const float        *_s,
                                    const unsigned int  _sNum
                                    ) {
   unsigned int r = 0u;
   if(NULL != _d)
   {
      // Write min(dSize,sNum) characters to 'd'
      if(NULL != _s)
      {
         unsigned int num = (_sNum > _dSize) ? _dSize : _sNum;
         memcpy((void*)_d, (const void*)_s, num * sizeof(float));
         r = num;
      }
   }
   else
   {
      // Query total number of presets
      r = _sNum;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_name(st_plugin_info_t *_info,
                                                    unsigned int      _paramIdx
                                                    ) {
   (void)_info;
   return loc_param_names[_paramIdx];
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_group_name(st_plugin_info_t *_info,
                                                          unsigned int      _paramGroupIdx
                                                          ) {
   (void)_info;
   const char *r = NULL;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_param_group_idx(st_plugin_info_t *_info,
                                                          unsigned int      _paramIdx
                                                          ) {
   (void)_info;
   unsigned int r = ~0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_section_name(st_plugin_info_t *_info,
                                                            unsigned int      _paramSectionIdx
                                                            ) {
   (void)_info;
   const char *r = NULL;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_param_section_idx(st_plugin_info_t *_info,
                                                            unsigned int      _paramIdx
                                                            ) {
   (void)_info;
   unsigned int r = ~0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float ST_PLUGIN_API loc_get_param_reset(st_plugin_info_t *_info,
                                               unsigned int      _paramIdx
                                               ) {
   (void)_info;
   return loc_param_resets[_paramIdx];
}
#endif // CYCLE_SKIP_UI

static float ST_PLUGIN_API loc_get_param_value(st_plugin_shared_t *_shared,
                                               unsigned int        _paramIdx
                                               ) {
   ST_PLUGIN_SHARED_CAST(markov_bd_1_shared_t);
   return shared->params[_paramIdx];
}

static void ST_PLUGIN_API loc_set_param_value(st_plugin_shared_t *_shared,
                                              unsigned int        _paramIdx,
                                              float               _value
                                              ) {
   ST_PLUGIN_SHARED_CAST(markov_bd_1_shared_t);
   shared->params[_paramIdx] = _value;
}

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_query_dynamic_param_preset_values(st_plugin_shared_t *_shared,
                                                                        const unsigned int  _paramIdx,
                                                                        float              *_retValues,
                                                                        const unsigned int  _retValuesSize
                                                                        ) {
   ST_PLUGIN_SHARED_CAST(markov_bd_1_shared_t);
   unsigned int r = 0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_query_dynamic_param_preset_name(st_plugin_shared_t *_shared,
                                                                      const unsigned int  _paramIdx,
                                                                      const unsigned int  _presetIdx,
                                                                      char               *_retBuf,
                                                                      const unsigned int  _retBufSize
                                                                      ) {
   ST_PLUGIN_SHARED_CAST(markov_bd_1_shared_t);
   unsigned int r = 0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_array_param_size(st_plugin_info_t   *_info,
                                                           const unsigned int  _paramIdx
                                                           ) {
   unsigned int r = 0u;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_array_param_num_variations(st_plugin_info_t   *_info,
                                                                     const unsigned int  _paramIdx
                                                                     ) {
   unsigned int r = 0u;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float * ST_PLUGIN_API loc_get_array_param_variation_ptr(st_plugin_shared_t *_shared,
                                                               const unsigned int  _paramIdx,
                                                               const unsigned int  _variationIdx
                                                               ) {
   ST_PLUGIN_SHARED_CAST(markov_bd_1_shared_t);
   float *r = NULL;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static void ST_PLUGIN_API loc_set_array_param_edit_variation_idx(st_plugin_shared_t *_shared,
                                                                 const unsigned int  _paramIdx,
                                                                 const int           _variationIdx
                                                                 ) {
   ST_PLUGIN_SHARED_CAST(markov_bd_1_shared_t);
   switch(_paramIdx)
   {
      default:
         break;
   }
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_array_param_element_name(st_plugin_info_t   *_info,
                                                                  const unsigned int  _paramIdx,
                                                                  const unsigned int  _elementIdx
                                                                  ) {
   ST_PLUGIN_INFO_CAST(markov_bd_1_info_t);
   const char *r = NULL;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static int ST_PLUGIN_API loc_get_array_param_element_value_range(st_plugin_info_t   *_info,
                                                                 const unsigned int  _paramIdx,
                                                                 const unsigned int  _elementIdx,
                                                                 float              *_retStorageMin,
                                                                 float              *_retStorageMax,
                                                                 float              *_retDisplayMin,
                                                                 float              *_retDisplayMax,
                                                                 unsigned int       *_retDisplayPrecision
                                                                 ) {
   (void)_elementIdx;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return 0;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float ST_PLUGIN_API loc_get_array_param_element_reset(st_plugin_info_t   *_info,
                                                             const unsigned int  _paramIdx,
                                                             const unsigned int  _elementIdx
                                                             ) {
   ST_PLUGIN_INFO_CAST(markov_bd_1_info_t);
   float r = -999999.0f/*INVALID_VALUE*/;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static void ST_PLUGIN_API loc_update_lut(st_plugin_info_t   *_info,
                                         unsigned int        _idx,
                                         const float        *_src,
                                         const unsigned int  _srcNumElements
                                         ) {
   (void)_info;
   unsigned int copySz = 0u;
   (void)copySz;
   switch(_idx)
   {
      default:
         break;
   }
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_mod_name(st_plugin_info_t *_info,
                                                  unsigned int      _modIdx
                                                  ) {
   (void)_info;
   return loc_mod_names[_modIdx];
}
#endif // CYCLE_SKIP_UI

static void ST_PLUGIN_API loc_set_sample_rate(st_plugin_voice_t *_voice,
                                              float              _sampleRate
                                              ) {
   ST_PLUGIN_VOICE_CAST(markov_bd_1_voice_t);
   if(_sampleRate != voice->sample_rate)
   {
      voice->sr_factor = 24000.0f / _sampleRate;
   }
   voice->sample_rate = _sampleRate;
}

static void ST_PLUGIN_API loc_set_bpm(st_plugin_voice_t *_voice,
                                      float              _bpm
                                      ) {
   ST_PLUGIN_VOICE_CAST(markov_bd_1_voice_t);
   voice->bpm = _bpm;
}

static void ST_PLUGIN_API loc_note_on(st_plugin_voice_t  *_voice,
                                      int                 _bGlide,
                                      unsigned char       _note,
                                      float               _vel
                                      ) {
   ST_PLUGIN_VOICE_CAST(markov_bd_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(markov_bd_1_shared_t);
   (void)_bGlide;
   (void)_note;
   (void)_vel;
   if(!_bGlide)
   {
      memset((void*)voice->mods, 0, sizeof(voice->mods));
#ifdef OVERSAMPLE_FACTOR
      voice->note_speed_fixed = (261.63f/*C-5*/ / (voice->sample_rate * OVERSAMPLE_FACTOR));
#else
      voice->note_speed_fixed = (261.63f/*C-5*/ / voice->sample_rate);
#endif // OVERSAMPLE_FACTOR
      voice->velocity = _vel;
   voice->tmp2_lfsr_state = 43981 * (voice->base.voice_idx + 1u);
      voice->tmp3_lfsr_state_signed = 0;
      voice->tmp4_mkv_state = -1;
      voice->tmp5_mkv_out = 0.0f;
      voice->tmp12_lfsr_state_signed = 0;
      voice->tmp13_mkv_state = -1;
      voice->tmp14_mkv_out = 0.0f;
      voice->tmp21_lfsr_state_signed = 0;
      voice->tmp22_mkv_state = -1;
      voice->tmp23_mkv_out = 0.0f;
      voice->tmp24_adsrv2_last_gate = 0.0f;
      voice->tmp26_adsrv2_segidx = 4;
      voice->tmp28_svf_lp = 0.0f;
      voice->tmp29_svf_hp = 0.0f;
      voice->tmp30_svf_bp = 0.0f;
      voice->tmp31_sin_phase = 0.0f;
      voice->tmp32_adsrv2_last_gate = 0.0f;
      voice->tmp34_adsrv2_segidx = 4;
      voice->tmp36_adsrv2_last_gate = 0.0f;
      voice->tmp38_adsrv2_segidx = 4;
      voice->var_x = 0.0f;
      voice->var_v_noise = 0.0f;
      voice->var_v_body = 0.0f;
      voice->var_v_out = 0.0f;
   }
}

static void ST_PLUGIN_API loc_set_mod_value(st_plugin_voice_t *_voice,
                                            unsigned int       _modIdx,
                                            float              _value,
                                            unsigned           _frameOffset
                                            ) {
   ST_PLUGIN_VOICE_CAST(markov_bd_1_voice_t);
   (void)_frameOffset;
   voice->mods[_modIdx] = _value;
}

static void ST_PLUGIN_API loc_prepare_block(st_plugin_voice_t *_voice,
                                            unsigned int       _numFrames,
                                            float              _freqHz,
                                            float              _note,
                                            float              _vol,
                                            float              _pan
                                            ) {
   ST_PLUGIN_VOICE_CAST(markov_bd_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(markov_bd_1_shared_t);
   (void)_note;
   (void)_vol;
   (void)_pan;

#ifdef OVERSAMPLE_FACTOR
   float noteSpeed = _freqHz / (voice->sample_rate * OVERSAMPLE_FACTOR);
#else
   float noteSpeed = _freqHz / voice->sample_rate;
#endif // OVERSAMPLE_FACTOR

   float modab           = shared->params[PARAM_AB          ]                       + voice->mods[MOD_AB           ];
   float modba           = shared->params[PARAM_BA          ]                       + voice->mods[MOD_BA           ];
   float modbpf          = shared->params[PARAM_BPF         ]                       + voice->mods[MOD_BPF          ];
   float modnoise_t      = shared->params[PARAM_NOISE_T     ]                       + voice->mods[MOD_NOISE_T      ];
   float modbody_t       = shared->params[PARAM_BODY_T      ]                       + voice->mods[MOD_BODY_T       ];
   float modpenv_amt     = shared->params[PARAM_PENV_AMT    ]                       + voice->mods[MOD_PENV_AMT     ];

   if(_numFrames > 0u)
   {
      // lerp
#ifdef OVERSAMPLE_FACTOR
      float recBlockSize = (1.0f / (_numFrames * OVERSAMPLE_FACTOR));
#else
      float recBlockSize = (1.0f / _numFrames);
#endif // OVERSAMPLE_FACTOR
      voice->note_speed_inc = (noteSpeed - voice->note_speed_cur) * recBlockSize;
      voice->note_inc       = (_note - voice->note_cur) * recBlockSize;
      voice->mod_ab_inc           = (modab              - voice->mod_ab_cur            ) * recBlockSize;
      voice->mod_ba_inc           = (modba              - voice->mod_ba_cur            ) * recBlockSize;
      voice->mod_bpf_inc          = (modbpf             - voice->mod_bpf_cur           ) * recBlockSize;
      voice->mod_noise_t_inc      = (modnoise_t         - voice->mod_noise_t_cur       ) * recBlockSize;
      voice->mod_body_t_inc       = (modbody_t          - voice->mod_body_t_cur        ) * recBlockSize;
      voice->mod_penv_amt_inc     = (modpenv_amt        - voice->mod_penv_amt_cur      ) * recBlockSize;
   }
   else
   {
      // initial params/modulation (first block, not rendered)
      voice->note_speed_cur = noteSpeed;
      voice->note_speed_inc = 0.0f;
      voice->note_cur       = _note;
      voice->note_inc       = 0.0f;
      voice->mod_ab_cur           = modab;
      voice->mod_ab_inc           = 0.0f;
      voice->mod_ba_cur           = modba;
      voice->mod_ba_inc           = 0.0f;
      voice->mod_bpf_cur          = modbpf;
      voice->mod_bpf_inc          = 0.0f;
      voice->mod_noise_t_cur      = modnoise_t;
      voice->mod_noise_t_inc      = 0.0f;
      voice->mod_body_t_cur       = modbody_t;
      voice->mod_body_t_inc       = 0.0f;
      voice->mod_penv_amt_cur     = modpenv_amt;
      voice->mod_penv_amt_inc     = 0.0f;
   }

   // printf("xxx note_cur=%f\n", voice->note_cur);
   // printf("xxx prepare_block: numFrames=%u moda=%f\n", _numFrames, moda);
   // printf("xxx voice->voicebus_idx_0=%u voice->base.voice_bus_read_offset=%u\n", voice->voicebus_idx_0, voice->base.voice_bus_read_offset);
}

static void ST_PLUGIN_API loc_process_replace(st_plugin_voice_t  *_voice,
                                              int                 _bMonoIn,
                                              const float        *_samplesIn,
                                              float              *_samplesOut,
                                              unsigned int        _numFrames
                                              ) {
   (void)_bMonoIn;
   (void)_samplesIn;

   ST_PLUGIN_VOICE_CAST(markov_bd_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(markov_bd_1_shared_t);

   // Mono output (replicate left to right channel)
   unsigned int j = 0u;
#ifndef STEREO
   unsigned int jStep = _bMonoIn ? 1u : 2u;
#endif // STEREO
   unsigned int k = 0u;
   for(unsigned int i = 0u; i < _numFrames; i++)
   {
      const float inL = _samplesIn[j];
#ifdef STEREO
      float outL;
      float outR;
      const float inR = _samplesIn[j + 1u];
#endif // STEREO
      float out;
#ifdef OVERSAMPLE_FACTOR
#ifdef STEREO
      float outOSL = 0.0f;
      float outOSR = 0.0f;
#else
      float outOS = 0.0f;
#endif // STEREO
#endif // OVERSAMPLE_FACTOR

#ifdef OVERSAMPLE_FACTOR
      for(unsigned int osi = 0u; osi < OVERSAMPLE_FACTOR; osi++)
#endif // OVERSAMPLE_FACTOR
      {
#ifdef STEREO
         out = outL = inL;
         outR = inR;
#else
         out = inL;
#endif // STEREO
         float tmp_f; (void)tmp_f;
         float tmp2_f; (void)tmp2_f;
         
         // ========
         // ======== lane "out" modIdx=0 modString=fsr
         // ========
         
         // -- mod="fsr" dstVar=out
         voice->tmp1/*i2f*/ = (int)(out * 2048);  // IntFallback: F2I
         voice->tmp2_lfsr_state ^= voice->tmp2_lfsr_state >> 7;
         voice->tmp2_lfsr_state ^= voice->tmp2_lfsr_state << 9;
         voice->tmp2_lfsr_state ^= voice->tmp2_lfsr_state >> 13;
         voice->tmp3_lfsr_state_signed = (voice->tmp2_lfsr_state & 32752);
         voice->tmp1/*i2f*/ = voice->tmp3_lfsr_state_signed >> 4;
         out = voice->tmp1/*i2f*/ / ((float)(2048));  // IntFallback: I2F
         
         // -- mod="mkv" dstVar=out
         voice->tmp8/*mkv_r*/ = out;
         voice->tmp1/*mkv_state_last*/ = voice->tmp4_mkv_state;
         if(voice->tmp4_mkv_state <= 0/*A*/)
         {
            
            // ---- mod="mkv" input "ab" seq 1/1
            
            // -- mod="$m_ab" dstVar=voice->tmp9/*mkv_ab*/
            voice->tmp9/*mkv_ab*/ = voice->mod_ab_cur;
            if(voice->tmp8/*mkv_r*/ <= voice->tmp9/*mkv_ab*/)
            {
               voice->tmp4_mkv_state = 1;
            }
         }
         else
         {
            
            // ---- mod="mkv" input "ba" seq 1/1
            
            // -- mod="$m_ba" dstVar=voice->tmp10/*mkv_ba*/
            voice->tmp10/*mkv_ba*/ = voice->mod_ba_cur;
            if(voice->tmp8/*mkv_r*/ <= voice->tmp10/*mkv_ba*/)
            {
               voice->tmp4_mkv_state = 0;
            }
         }
         if((voice->tmp4_mkv_state&3) != voice->tmp1/*mkv_state_last*/)
         {
            if(voice->tmp4_mkv_state <= 0/*A*/)
            {
               
               // ---- mod="mkv" input "a" seq 1/1
               
               // -- mod="fsr" dstVar=voice->tmp6/*mkv_a*/
               voice->tmp1/*i2f*/ = (int)(voice->tmp6/*mkv_a*/ * 2048);  // IntFallback: F2I
               voice->tmp11_lfsr_state ^= voice->tmp11_lfsr_state >> 7;
               voice->tmp11_lfsr_state ^= voice->tmp11_lfsr_state << 9;
               voice->tmp11_lfsr_state ^= voice->tmp11_lfsr_state >> 13;
               voice->tmp12_lfsr_state_signed = (voice->tmp11_lfsr_state & 32752);
               voice->tmp1/*i2f*/ = voice->tmp12_lfsr_state_signed >> 4;
               voice->tmp6/*mkv_a*/ = voice->tmp1/*i2f*/ / ((float)(2048));  // IntFallback: I2F
               
               // -- mod="mkv" dstVar=voice->tmp6/*mkv_a*/
               voice->tmp17/*mkv_r*/ = voice->tmp6/*mkv_a*/;
               voice->tmp1/*mkv_state_last*/ = voice->tmp13_mkv_state;
               if(voice->tmp13_mkv_state <= 0/*A*/)
               {
                  
                  // ---- mod="mkv" input "ab" seq 1/1
                  
                  // -- mod="$p_ab2" dstVar=voice->tmp18/*mkv_ab*/
                  voice->tmp18/*mkv_ab*/ = shared->params[PARAM_AB2];
                  if(voice->tmp17/*mkv_r*/ <= voice->tmp18/*mkv_ab*/)
                  {
                     voice->tmp13_mkv_state = 1;
                  }
               }
               else
               {
                  
                  // ---- mod="mkv" input "ba" seq 1/1
                  
                  // -- mod="$p_ba2" dstVar=voice->tmp19/*mkv_ba*/
                  voice->tmp19/*mkv_ba*/ = shared->params[PARAM_BA2];
                  if(voice->tmp17/*mkv_r*/ <= voice->tmp19/*mkv_ba*/)
                  {
                     voice->tmp13_mkv_state = 0;
                  }
               }
               if((voice->tmp13_mkv_state&3) != voice->tmp1/*mkv_state_last*/)
               {
                  if(voice->tmp13_mkv_state <= 0/*A*/)
                  {
                     
                     // ---- mod="mkv" input "a" seq 1/1
                     
                     // -- mod="-1" dstVar=voice->tmp15/*mkv_a*/
                     voice->tmp15/*mkv_a*/ = -1.0f;
                     voice->tmp14_mkv_out = voice->tmp15/*mkv_a*/;
                     voice->tmp13_mkv_state = 0/*A*/;
                  }
                  else
                  {
                     
                     // ---- mod="mkv" input "b" seq 1/1
                     
                     // -- mod="1" dstVar=voice->tmp16/*mkv_b*/
                     voice->tmp16/*mkv_b*/ = 1.0f;
                     voice->tmp14_mkv_out = voice->tmp16/*mkv_b*/;
                     voice->tmp13_mkv_state = 1/*B*/;
                  }
               }
               voice->tmp6/*mkv_a*/ = voice->tmp14_mkv_out;
               voice->tmp5_mkv_out = voice->tmp6/*mkv_a*/;
               voice->tmp4_mkv_state = 0/*A*/;
            }
            else
            {
               
               // ---- mod="mkv" input "b" seq 1/1
               
               // -- mod="fsr" dstVar=voice->tmp7/*mkv_b*/
               voice->tmp1/*i2f*/ = (int)(voice->tmp7/*mkv_b*/ * 2048);  // IntFallback: F2I
               voice->tmp20_lfsr_state ^= voice->tmp20_lfsr_state >> 7;
               voice->tmp20_lfsr_state ^= voice->tmp20_lfsr_state << 9;
               voice->tmp20_lfsr_state ^= voice->tmp20_lfsr_state >> 13;
               voice->tmp21_lfsr_state_signed = (voice->tmp20_lfsr_state & 32752);
               voice->tmp1/*i2f*/ = voice->tmp21_lfsr_state_signed >> 4;
               voice->tmp7/*mkv_b*/ = voice->tmp1/*i2f*/ / ((float)(2048));  // IntFallback: I2F
               
               // -- mod="mkv" dstVar=voice->tmp7/*mkv_b*/
               voice->tmp17/*mkv_r*/ = voice->tmp7/*mkv_b*/;
               voice->tmp1/*mkv_state_last*/ = voice->tmp22_mkv_state;
               if(voice->tmp22_mkv_state <= 0/*A*/)
               {
                  
                  // ---- mod="mkv" input "ab" seq 1/1
                  
                  // -- mod="$p_ab2" dstVar=voice->tmp18/*mkv_ab*/
                  voice->tmp18/*mkv_ab*/ = shared->params[PARAM_AB2];
                  if(voice->tmp17/*mkv_r*/ <= voice->tmp18/*mkv_ab*/)
                  {
                     voice->tmp22_mkv_state = 1;
                  }
               }
               else
               {
                  
                  // ---- mod="mkv" input "ba" seq 1/1
                  
                  // -- mod="$p_ba2" dstVar=voice->tmp19/*mkv_ba*/
                  voice->tmp19/*mkv_ba*/ = shared->params[PARAM_BA2];
                  if(voice->tmp17/*mkv_r*/ <= voice->tmp19/*mkv_ba*/)
                  {
                     voice->tmp22_mkv_state = 0;
                  }
               }
               if((voice->tmp22_mkv_state&3) != voice->tmp1/*mkv_state_last*/)
               {
                  if(voice->tmp22_mkv_state <= 0/*A*/)
                  {
                     
                     // ---- mod="mkv" input "a" seq 1/1
                     
                     // -- mod="-1" dstVar=voice->tmp15/*mkv_a*/
                     voice->tmp15/*mkv_a*/ = -1.0f;
                     voice->tmp23_mkv_out = voice->tmp15/*mkv_a*/;
                     voice->tmp22_mkv_state = 0/*A*/;
                  }
                  else
                  {
                     
                     // ---- mod="mkv" input "b" seq 1/1
                     
                     // -- mod="1" dstVar=voice->tmp16/*mkv_b*/
                     voice->tmp16/*mkv_b*/ = 1.0f;
                     voice->tmp23_mkv_out = voice->tmp16/*mkv_b*/;
                     voice->tmp22_mkv_state = 1/*B*/;
                  }
               }
               voice->tmp7/*mkv_b*/ = voice->tmp23_mkv_out;
               voice->tmp5_mkv_out = voice->tmp7/*mkv_b*/;
               voice->tmp4_mkv_state = 1/*B*/;
            }
         }
         out = voice->tmp5_mkv_out;
         
         // -- mod="1" dstVar=out
         voice->tmp6/*seq*/ = out;
         voice->tmp6/*seq*/ = 1.0f;
         
         // -- mod="adsr" dstVar=voice->tmp6/*seq*/
         
         // ---- mod="adsr" input "scl" seq 1/1
         
         // -- mod="0.2" dstVar=voice->tmp10/*addsr_scl*/
         voice->tmp10/*addsr_scl*/ = 0.2f;
         
         // -- mod="$m_noise_t" dstVar=voice->tmp10/*addsr_scl*/
         voice->tmp15/*seq*/ = voice->tmp10/*addsr_scl*/;
         voice->tmp15/*seq*/ = voice->mod_noise_t_cur;
         
         // -- mod="fma" dstVar=voice->tmp15/*seq*/
         voice->tmp15/*seq*/ = (voice->tmp15/*seq*/ * 2.0f) + -1.0f;
         
         // -- mod="bts" dstVar=voice->tmp15/*seq*/
         voice->tmp15/*seq*/ = loc_bipolar_to_scale(voice->tmp15/*seq*/, 4.0f, 4.0f);
         voice->tmp10/*addsr_scl*/ *= voice->tmp15/*seq*/;
         voice->tmp10/*addsr_scl*/ *= voice->sr_factor;
         
         // ---- mod="adsr" input "s" seq 1/1
         
         // -- mod="0" dstVar=voice->tmp8/*adsrv2_suslvl*/
         voice->tmp8/*adsrv2_suslvl*/ = 0.0f;
         if(voice->tmp6/*seq*/ > 0.001f && voice->tmp24_adsrv2_last_gate <= 0.001f)
         {
            voice->tmp27_adsrv2_vel = voice->tmp6/*seq*/;
            voice->tmp26_adsrv2_segidx = 0;
            voice->tmp24_adsrv2_last_gate = 1.0f;
         }
         else if(voice->tmp6/*seq*/ <= 0.001f && voice->tmp24_adsrv2_last_gate > 0.001f)
         {
            voice->tmp26_adsrv2_segidx = 3;
            voice->tmp24_adsrv2_last_gate = 0.0f;
         }
         switch(voice->tmp26_adsrv2_segidx)
         {
            case 0: // a
               
               // ---- mod="adsr" input "a" seq 1/1
               
               // -- mod="1" dstVar=voice->tmp7/*adsrv2_rate*/
               voice->tmp7/*adsrv2_rate*/ = 1.0f;
               if(voice->tmp7/*adsrv2_rate*/ < 1.0f)
               {
                  if(-1 > 0.0f)
                  {
                     voice->tmp7/*adsrv2_rate*/ *= 0.001f + mathPowerf(voice->tmp25_adsrv2_level, -1);
                  }
                  else if(-1 < 0.0f)
                  {
                     voice->tmp7/*adsrv2_rate*/ *= 1.0f / (0.001f + mathPowerf(voice->tmp25_adsrv2_level, -(-1)));
                  }
                  voice->tmp25_adsrv2_level += voice->tmp7/*adsrv2_rate*/ * voice->tmp10/*addsr_scl*/;
                  if(voice->tmp25_adsrv2_level >= 1.0f)
                  {
                     voice->tmp25_adsrv2_level = 1.0f;
                     voice->tmp26_adsrv2_segidx++;
                  }
               }
               else
               {
                  voice->tmp25_adsrv2_level = 1.0f;
                  voice->tmp26_adsrv2_segidx++;
               }
               break;
         
            case 1: // d
               
               // ---- mod="adsr" input "d" seq 1/1
               
               // -- mod="0.5" dstVar=voice->tmp7/*adsrv2_rate*/
               voice->tmp7/*adsrv2_rate*/ = 0.5f;
               if(1.9 > 0.0f)
               {
                  voice->tmp7/*adsrv2_rate*/ *= 0.001f + mathPowerf(voice->tmp25_adsrv2_level, 1.9);
               }
               else if(1.9 < 0.0f)
               {
                  voice->tmp7/*adsrv2_rate*/ *= 1.0f / (0.001f + mathPowerf(voice->tmp25_adsrv2_level, -(1.9)));
               }
               voice->tmp25_adsrv2_level -= voice->tmp7/*adsrv2_rate*/ * voice->tmp10/*addsr_scl*/;
               if(voice->tmp25_adsrv2_level <= voice->tmp8/*adsrv2_suslvl*/)
               {
                  voice->tmp25_adsrv2_level = voice->tmp8/*adsrv2_suslvl*/;
                  voice->tmp26_adsrv2_segidx++;
               }
               break;
         
            case 2: // s
               voice->tmp25_adsrv2_level = voice->tmp8/*adsrv2_suslvl*/;
               break;
         
            case 3: // r
               voice->tmp7/*adsrv2_rate*/ = 0.6;
               if(2 > 0.0f)
               {
                  voice->tmp7/*adsrv2_rate*/ *= 0.001f + mathPowerf(voice->tmp25_adsrv2_level, 2);
               }
               else if(2 < 0.0f)
               {
                  voice->tmp7/*adsrv2_rate*/ *= 1.0f / (0.001f + mathPowerf(voice->tmp25_adsrv2_level, -(2)));
               }
               voice->tmp25_adsrv2_level -= voice->tmp7/*adsrv2_rate*/ * voice->tmp10/*addsr_scl*/;
               if(voice->tmp25_adsrv2_level <= 0.0f)
               {
                  voice->tmp25_adsrv2_level = 0.0f;
                  voice->tmp26_adsrv2_segidx++;
               }
               break;
         
            default:
            case 4: // <end>
               break;
         }
         voice->tmp6/*seq*/ = voice->tmp25_adsrv2_level * voice->tmp27_adsrv2_vel;
         
         // -- mod="pow" dstVar=voice->tmp6/*seq*/
         voice->tmp6/*seq*/ = mathPowerf(voice->tmp6/*seq*/, 1.3f);
         out *= voice->tmp6/*seq*/;
         
         // -- mod="svf" dstVar=out
         
         // ---- mod="svf" input "freq" seq 1/1
         
         // -- mod="$m_bpf" dstVar=voice->tmp6/*addsr_freq*/
         voice->tmp6/*addsr_freq*/ = voice->mod_bpf_cur;
         voice->tmp6/*addsr_freq*/ *= voice->sr_factor;
         voice->tmp28_svf_lp = voice->tmp28_svf_lp + (voice->tmp30_svf_bp * voice->tmp6/*addsr_freq*/);
         voice->tmp29_svf_hp = out - voice->tmp28_svf_lp - (voice->tmp30_svf_bp * 0.8f);
         voice->tmp30_svf_bp = voice->tmp30_svf_bp + (voice->tmp29_svf_hp * voice->tmp6/*addsr_freq*/);
         out = voice->tmp30_svf_bp;
         
         // -- mod="sto v_noise" dstVar=out
         voice->var_v_noise = out;
         
         // -- mod="sin" dstVar=out
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="1" dstVar=voice->tmp7/*sin_freq*/
         voice->tmp7/*sin_freq*/ = 1.0f;
         
         // -- mod="adsr" dstVar=voice->tmp7/*sin_freq*/
         
         // ---- mod="adsr" input "scl" seq 1/1
         
         // -- mod="0.005" dstVar=voice->tmp15/*addsr_scl*/
         voice->tmp15/*addsr_scl*/ = 0.005f;
         
         // -- mod="$m_body_t" dstVar=voice->tmp15/*addsr_scl*/
         voice->tmp16/*seq*/ = voice->tmp15/*addsr_scl*/;
         voice->tmp16/*seq*/ = voice->mod_body_t_cur;
         
         // -- mod="fma" dstVar=voice->tmp16/*seq*/
         voice->tmp16/*seq*/ = (voice->tmp16/*seq*/ * 2.0f) + -1.0f;
         
         // -- mod="bts" dstVar=voice->tmp16/*seq*/
         voice->tmp16/*seq*/ = loc_bipolar_to_scale(voice->tmp16/*seq*/, 2.0f, 2.0f);
         voice->tmp15/*addsr_scl*/ *= voice->tmp16/*seq*/;
         voice->tmp15/*addsr_scl*/ *= voice->sr_factor;
         
         // ---- mod="adsr" input "s" seq 1/1
         
         // -- mod="0" dstVar=voice->tmp9/*adsrv2_suslvl*/
         voice->tmp9/*adsrv2_suslvl*/ = 0.0f;
         if(voice->tmp7/*sin_freq*/ > 0.001f && voice->tmp32_adsrv2_last_gate <= 0.001f)
         {
            voice->tmp35_adsrv2_vel = voice->tmp7/*sin_freq*/;
            voice->tmp34_adsrv2_segidx = 0;
            voice->tmp32_adsrv2_last_gate = 1.0f;
         }
         else if(voice->tmp7/*sin_freq*/ <= 0.001f && voice->tmp32_adsrv2_last_gate > 0.001f)
         {
            voice->tmp34_adsrv2_segidx = 3;
            voice->tmp32_adsrv2_last_gate = 0.0f;
         }
         switch(voice->tmp34_adsrv2_segidx)
         {
            case 0: // a
               
               // ---- mod="adsr" input "a" seq 1/1
               
               // -- mod="1" dstVar=voice->tmp8/*adsrv2_rate*/
               voice->tmp8/*adsrv2_rate*/ = 1.0f;
               if(voice->tmp8/*adsrv2_rate*/ < 1.0f)
               {
                  if(-1 > 0.0f)
                  {
                     voice->tmp8/*adsrv2_rate*/ *= 0.001f + mathPowerf(voice->tmp33_adsrv2_level, -1);
                  }
                  else if(-1 < 0.0f)
                  {
                     voice->tmp8/*adsrv2_rate*/ *= 1.0f / (0.001f + mathPowerf(voice->tmp33_adsrv2_level, -(-1)));
                  }
                  voice->tmp33_adsrv2_level += voice->tmp8/*adsrv2_rate*/ * voice->tmp15/*addsr_scl*/;
                  if(voice->tmp33_adsrv2_level >= 1.0f)
                  {
                     voice->tmp33_adsrv2_level = 1.0f;
                     voice->tmp34_adsrv2_segidx++;
                  }
               }
               else
               {
                  voice->tmp33_adsrv2_level = 1.0f;
                  voice->tmp34_adsrv2_segidx++;
               }
               break;
         
            case 1: // d
               
               // ---- mod="adsr" input "d" seq 1/1
               
               // -- mod="0.3" dstVar=voice->tmp8/*adsrv2_rate*/
               voice->tmp8/*adsrv2_rate*/ = 0.3f;
               if(1.3 > 0.0f)
               {
                  voice->tmp8/*adsrv2_rate*/ *= 0.001f + mathPowerf(voice->tmp33_adsrv2_level, 1.3);
               }
               else if(1.3 < 0.0f)
               {
                  voice->tmp8/*adsrv2_rate*/ *= 1.0f / (0.001f + mathPowerf(voice->tmp33_adsrv2_level, -(1.3)));
               }
               voice->tmp33_adsrv2_level -= voice->tmp8/*adsrv2_rate*/ * voice->tmp15/*addsr_scl*/;
               if(voice->tmp33_adsrv2_level <= voice->tmp9/*adsrv2_suslvl*/)
               {
                  voice->tmp33_adsrv2_level = voice->tmp9/*adsrv2_suslvl*/;
                  voice->tmp34_adsrv2_segidx++;
               }
               break;
         
            case 2: // s
               voice->tmp33_adsrv2_level = voice->tmp9/*adsrv2_suslvl*/;
               break;
         
            case 3: // r
               voice->tmp8/*adsrv2_rate*/ = 0.6;
               if(2 > 0.0f)
               {
                  voice->tmp8/*adsrv2_rate*/ *= 0.001f + mathPowerf(voice->tmp33_adsrv2_level, 2);
               }
               else if(2 < 0.0f)
               {
                  voice->tmp8/*adsrv2_rate*/ *= 1.0f / (0.001f + mathPowerf(voice->tmp33_adsrv2_level, -(2)));
               }
               voice->tmp33_adsrv2_level -= voice->tmp8/*adsrv2_rate*/ * voice->tmp15/*addsr_scl*/;
               if(voice->tmp33_adsrv2_level <= 0.0f)
               {
                  voice->tmp33_adsrv2_level = 0.0f;
                  voice->tmp34_adsrv2_segidx++;
               }
               break;
         
            default:
            case 4: // <end>
               break;
         }
         voice->tmp7/*sin_freq*/ = voice->tmp33_adsrv2_level * voice->tmp35_adsrv2_vel;
         
         // -- mod="1.2" dstVar=voice->tmp7/*sin_freq*/
         voice->tmp8/*seq*/ = voice->tmp7/*sin_freq*/;
         voice->tmp8/*seq*/ = 1.2f;
         
         // -- mod="$m_penv_amt" dstVar=voice->tmp8/*seq*/
         voice->tmp9/*seq*/ = voice->tmp8/*seq*/;
         voice->tmp9/*seq*/ = voice->mod_penv_amt_cur;
         
         // -- mod="fma" dstVar=voice->tmp9/*seq*/
         voice->tmp9/*seq*/ = (voice->tmp9/*seq*/ * 4.0f) + -2.0f;
         voice->tmp8/*seq*/ *= voice->tmp9/*seq*/;
         voice->tmp7/*sin_freq*/ *= voice->tmp8/*seq*/;
         
         // -- mod="0.5" dstVar=voice->tmp7/*sin_freq*/
         voice->tmp7/*sin_freq*/ += 0.5f;
         voice->tmp6/*sin_speed*/ = voice->note_speed_cur * voice->tmp7/*sin_freq*/;
         voice->tmp7/*sin_tmp*/ = (voice->tmp31_sin_phase);
         voice->tmp7/*sin_tmp*/ = ffrac_s(voice->tmp7/*sin_tmp*/);
         out = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp7/*sin_tmp*/)&16383u];
         voice->tmp31_sin_phase = ffrac_s(voice->tmp31_sin_phase + voice->tmp6/*sin_speed*/);
         
         // -- mod="1" dstVar=out
         voice->tmp6/*seq*/ = out;
         voice->tmp6/*seq*/ = 1.0f;
         
         // -- mod="adsr" dstVar=voice->tmp6/*seq*/
         
         // ---- mod="adsr" input "scl" seq 1/1
         
         // -- mod="0.001" dstVar=voice->tmp10/*addsr_scl*/
         voice->tmp10/*addsr_scl*/ = 0.001f;
         
         // -- mod="$m_body_t" dstVar=voice->tmp10/*addsr_scl*/
         voice->tmp15/*seq*/ = voice->tmp10/*addsr_scl*/;
         voice->tmp15/*seq*/ = voice->mod_body_t_cur;
         
         // -- mod="fma" dstVar=voice->tmp15/*seq*/
         voice->tmp15/*seq*/ = (voice->tmp15/*seq*/ * 2.0f) + -1.0f;
         
         // -- mod="bts" dstVar=voice->tmp15/*seq*/
         voice->tmp15/*seq*/ = loc_bipolar_to_scale(voice->tmp15/*seq*/, 8.0f, 4.0f);
         voice->tmp10/*addsr_scl*/ *= voice->tmp15/*seq*/;
         voice->tmp10/*addsr_scl*/ *= voice->sr_factor;
         
         // ---- mod="adsr" input "s" seq 1/1
         
         // -- mod="0" dstVar=voice->tmp8/*adsrv2_suslvl*/
         voice->tmp8/*adsrv2_suslvl*/ = 0.0f;
         if(voice->tmp6/*seq*/ > 0.001f && voice->tmp36_adsrv2_last_gate <= 0.001f)
         {
            voice->tmp39_adsrv2_vel = voice->tmp6/*seq*/;
            voice->tmp38_adsrv2_segidx = 0;
            voice->tmp36_adsrv2_last_gate = 1.0f;
         }
         else if(voice->tmp6/*seq*/ <= 0.001f && voice->tmp36_adsrv2_last_gate > 0.001f)
         {
            voice->tmp38_adsrv2_segidx = 3;
            voice->tmp36_adsrv2_last_gate = 0.0f;
         }
         switch(voice->tmp38_adsrv2_segidx)
         {
            case 0: // a
               
               // ---- mod="adsr" input "a" seq 1/1
               
               // -- mod="1" dstVar=voice->tmp7/*adsrv2_rate*/
               voice->tmp7/*adsrv2_rate*/ = 1.0f;
               if(voice->tmp7/*adsrv2_rate*/ < 1.0f)
               {
                  if(-0.7 > 0.0f)
                  {
                     voice->tmp7/*adsrv2_rate*/ *= 0.001f + mathPowerf(voice->tmp37_adsrv2_level, -0.7);
                  }
                  else if(-0.7 < 0.0f)
                  {
                     voice->tmp7/*adsrv2_rate*/ *= 1.0f / (0.001f + mathPowerf(voice->tmp37_adsrv2_level, -(-0.7)));
                  }
                  voice->tmp37_adsrv2_level += voice->tmp7/*adsrv2_rate*/ * voice->tmp10/*addsr_scl*/;
                  if(voice->tmp37_adsrv2_level >= 1.0f)
                  {
                     voice->tmp37_adsrv2_level = 1.0f;
                     voice->tmp38_adsrv2_segidx++;
                  }
               }
               else
               {
                  voice->tmp37_adsrv2_level = 1.0f;
                  voice->tmp38_adsrv2_segidx++;
               }
               break;
         
            case 1: // d
               
               // ---- mod="adsr" input "d" seq 1/1
               
               // -- mod="0.41" dstVar=voice->tmp7/*adsrv2_rate*/
               voice->tmp7/*adsrv2_rate*/ = 0.41f;
               if(3.3 > 0.0f)
               {
                  voice->tmp7/*adsrv2_rate*/ *= 0.001f + mathPowerf(voice->tmp37_adsrv2_level, 3.3);
               }
               else if(3.3 < 0.0f)
               {
                  voice->tmp7/*adsrv2_rate*/ *= 1.0f / (0.001f + mathPowerf(voice->tmp37_adsrv2_level, -(3.3)));
               }
               voice->tmp37_adsrv2_level -= voice->tmp7/*adsrv2_rate*/ * voice->tmp10/*addsr_scl*/;
               if(voice->tmp37_adsrv2_level <= voice->tmp8/*adsrv2_suslvl*/)
               {
                  voice->tmp37_adsrv2_level = voice->tmp8/*adsrv2_suslvl*/;
                  voice->tmp38_adsrv2_segidx++;
               }
               break;
         
            case 2: // s
               voice->tmp37_adsrv2_level = voice->tmp8/*adsrv2_suslvl*/;
               break;
         
            case 3: // r
               voice->tmp7/*adsrv2_rate*/ = 0.6;
               if(2 > 0.0f)
               {
                  voice->tmp7/*adsrv2_rate*/ *= 0.001f + mathPowerf(voice->tmp37_adsrv2_level, 2);
               }
               else if(2 < 0.0f)
               {
                  voice->tmp7/*adsrv2_rate*/ *= 1.0f / (0.001f + mathPowerf(voice->tmp37_adsrv2_level, -(2)));
               }
               voice->tmp37_adsrv2_level -= voice->tmp7/*adsrv2_rate*/ * voice->tmp10/*addsr_scl*/;
               if(voice->tmp37_adsrv2_level <= 0.0f)
               {
                  voice->tmp37_adsrv2_level = 0.0f;
                  voice->tmp38_adsrv2_segidx++;
               }
               break;
         
            default:
            case 4: // <end>
               break;
         }
         voice->tmp6/*seq*/ = voice->tmp37_adsrv2_level * voice->tmp39_adsrv2_vel;
         
         // -- mod="pow" dstVar=voice->tmp6/*seq*/
         voice->tmp6/*seq*/ = voice->tmp6/*seq*/ * voice->tmp6/*seq*/;
         out *= voice->tmp6/*seq*/;
         
         // -- mod="sto v_body" dstVar=out
         voice->var_v_body = out;
         
         // -- mod="$v_noise" dstVar=out
         out = voice->var_v_noise;
         
         // -- mod="0.9" dstVar=out
         out *= 0.9f;
         
         // -- mod="$v_body" dstVar=out
         voice->tmp6/*seq*/ = out;
         voice->tmp6/*seq*/ = voice->var_v_body;
         
         // -- mod="0.9" dstVar=voice->tmp6/*seq*/
         voice->tmp6/*seq*/ *= 0.9f;
         out += voice->tmp6/*seq*/;
         
         // -- mod="clp" dstVar=out
         if(out > 0.999f) out = 0.999f;
         else if(out < -0.999f) out = -0.999f;
   
         /* end calc */

#ifdef OVERSAMPLE_FACTOR
#ifdef STEREO
         outOSL += outL;
         outOSR += outR;
#else
         outOS += out;
#endif // STEREO
#endif // OVERSAMPLE_FACTOR
         voice->note_speed_cur += voice->note_speed_inc;
         voice->note_cur       += voice->note_inc;
         voice->mod_ab_cur         += voice->mod_ab_inc;
         voice->mod_ba_cur         += voice->mod_ba_inc;
         voice->mod_bpf_cur        += voice->mod_bpf_inc;
         voice->mod_noise_t_cur    += voice->mod_noise_t_inc;
         voice->mod_body_t_cur     += voice->mod_body_t_inc;
         voice->mod_penv_amt_cur   += voice->mod_penv_amt_inc;
      }
#ifdef OVERSAMPLE_FACTOR
      // Apply lowpass filter before downsampling
      //   (note) normalized Fc = F/Fs = 0.442947 / sqrt(oversample_factor^2 - 1)
#ifdef STEREO
      outL = outOSL * (1.0f / OVERSAMPLE_FACTOR);
      outR = outOSR * (1.0f / OVERSAMPLE_FACTOR);
#else
      out = outOS * (1.0f / OVERSAMPLE_FACTOR);
#endif // STEREO
#endif // OVERSAMPLE_FACTOR
#ifdef STEREO
      outL = Dstplugin_fix_denorm_32(outL);
      outR = Dstplugin_fix_denorm_32(outR);
#else
      out = Dstplugin_fix_denorm_32(out);
#endif // STEREO
#ifdef STEREO
      _samplesOut[k]      = outL;
      _samplesOut[k + 1u] = outR;
#else
      _samplesOut[k]      = out;
      _samplesOut[k + 1u] = out;
#endif // STEREO

      // Next frame
      k += 2u;
#ifdef STEREO
      j += 2u;
#else
      j += jStep;
#endif // STEREO
   } /* loop numFrames */
}

static st_plugin_shared_t *ST_PLUGIN_API loc_shared_new(st_plugin_info_t *_info) {
   markov_bd_1_shared_t *ret = (markov_bd_1_shared_t *)malloc(sizeof(markov_bd_1_shared_t));
   if(NULL != ret)
   {
      memset((void*)ret, 0, sizeof(*ret));
      ret->base.info  = _info;
      memcpy((void*)ret->params, (void*)loc_param_resets, NUM_PARAMS * sizeof(float));
   }
   return &ret->base;
}

static void ST_PLUGIN_API loc_shared_delete(st_plugin_shared_t *_shared) {
   free((void*)_shared);
}

static st_plugin_voice_t *ST_PLUGIN_API loc_voice_new(st_plugin_info_t *_info, unsigned int _voiceIdx) {
   markov_bd_1_voice_t *voice = (markov_bd_1_voice_t *)malloc(sizeof(markov_bd_1_voice_t));
   if(NULL != voice)
   {
      memset((void*)voice, 0, sizeof(*voice));
      voice->base.info = _info;
      voice->tmp11_lfsr_state = 4660 * (_voiceIdx + 1u);
      voice->tmp20_lfsr_state = 22136 * (_voiceIdx + 1u);
      voice->tmp25_adsrv2_level = 0.0f;
      voice->tmp27_adsrv2_vel = 0.0f;
      voice->tmp33_adsrv2_level = 0.0f;
      voice->tmp35_adsrv2_vel = 0.0f;
      voice->tmp37_adsrv2_level = 0.0f;
      voice->tmp39_adsrv2_vel = 0.0f;
   }
   return &voice->base;
}

static void ST_PLUGIN_API loc_voice_delete(st_plugin_voice_t *_voice) {
   ST_PLUGIN_VOICE_CAST(markov_bd_1_voice_t);

   free((void*)_voice);
   }

static void ST_PLUGIN_API loc_plugin_exit(st_plugin_info_t *_info) {
   free((void*)_info);
}

#ifdef USE_CYCLE_SINE_TBL
static void loc_calc_sine_tbl(void) {
#define QCOS_BITS 16
#define QCOS_ONE  (1 << QCOS_BITS)
#define QCOS_MASK (QCOS_ONE - 1)
   // (note) same as in TSR "C" implementation
   float *qcos = cycle_sine_tbl_f + 4096; // quarter cos tbl

   // calc quarter cos tbl
   int k = 0;
   for(int a = 0; a < (QCOS_ONE/4); a += (QCOS_ONE/16384)/*4*/)  // 4096 elements
   {
      int x = a - ((int)(QCOS_ONE * 0.25 + 0.5)) + ((a + ((int)(QCOS_ONE * 0.25 + 0.5)))&~QCOS_MASK);
      x = ((x * ((x<0?-x:x) - ((int)(QCOS_ONE * 0.5 + 0.5)))) >> QCOS_BITS) << 4;
      x += (((((int)(QCOS_ONE * 0.225 + 0.5)) * x) >> QCOS_BITS) * ((x<0?-x:x) - QCOS_ONE)) >> QCOS_BITS;
      qcos[k++] = x / float(QCOS_ONE);
   }

   // 0..90deg (rev qtbl)
   int j = 4096;
   k = 0;
   loop(4096)
      cycle_sine_tbl_f[k++] = qcos[--j];

   // 90..180deg = cos tbl
   k += 4096;

   // 180..360deg (y-flip first half of tbl)
   j = 0;
   loop(8192)
      cycle_sine_tbl_f[k++] = -cycle_sine_tbl_f[j++];

#ifdef USE_CYCLE_SINE_TBL_I
   loop(16384)
      cycle_sine_tbl_i[i] = (short)(cycle_sine_tbl_f[i] * 2048.0f/*FX_ONE*/);
#endif // USE_CYCLE_SINE_TBL_I
}
#endif // USE_CYCLE_SINE_TBL

#ifdef USE_CYCLE_HSE_TBL
#endif // USE_CYCLE_HSE_TBL

extern "C" {
st_plugin_info_t *markov_bd_1_init(void) {
   markov_bd_1_info_t *ret = (markov_bd_1_info_t *)malloc(sizeof(markov_bd_1_info_t));

   if(NULL != ret)
   {
      memset(ret, 0, sizeof(*ret));

      ret->base.api_version = ST_PLUGIN_API_VERSION;
      ret->base.id          = "markov_bd_1_0x1e7f0c05";  // unique id. don't change this in future builds.
      ret->base.author      = "";
      ret->base.name        = "markov_bd_1";
      ret->base.short_name  = "markov_bd_1";
      ret->base.flags       = ST_PLUGIN_FLAG_OSC;
      ret->base.category    = ST_PLUGIN_CAT_UNKNOWN;
      ret->base.num_params  = NUM_PARAMS;
      ret->base.num_mods    = NUM_MODS;

      ret->base.shared_new                          = &loc_shared_new;
      ret->base.shared_delete                       = &loc_shared_delete;
      ret->base.voice_new                           = &loc_voice_new;
      ret->base.voice_delete                        = &loc_voice_delete;
#ifndef CYCLE_SKIP_UI
      ret->base.get_param_name                      = &loc_get_param_name;
      ret->base.get_param_group_name                = &loc_get_param_group_name;
      ret->base.get_param_group_idx                 = &loc_get_param_group_idx;
      ret->base.get_param_section_name              = &loc_get_param_section_name;
      ret->base.get_param_section_idx               = &loc_get_param_section_idx;
      ret->base.get_param_reset                     = &loc_get_param_reset;
      ret->base.query_dynamic_param_preset_values   = &loc_query_dynamic_param_preset_values;
      ret->base.query_dynamic_param_preset_name     = &loc_query_dynamic_param_preset_name;
      ret->base.get_array_param_size                = &loc_get_array_param_size;
      ret->base.get_array_param_num_variations      = &loc_get_array_param_num_variations;
      ret->base.get_array_param_variation_ptr       = &loc_get_array_param_variation_ptr;
      ret->base.set_array_param_edit_variation_idx  = &loc_set_array_param_edit_variation_idx;
      ret->base.get_array_param_element_name        = &loc_get_array_param_element_name;
      ret->base.get_array_param_element_value_range = &loc_get_array_param_element_value_range;
      ret->base.get_array_param_element_reset       = &loc_get_array_param_element_reset;
      ret->base.update_lut                          = &loc_update_lut;
#endif // CYCLE_SKIP_UI
      ret->base.get_param_value                     = &loc_get_param_value;
      ret->base.set_param_value                     = &loc_set_param_value;
#ifndef CYCLE_SKIP_UI
      ret->base.get_mod_name                        = &loc_get_mod_name;
#endif // CYCLE_SKIP_UI
      ret->base.set_sample_rate                     = &loc_set_sample_rate;
      ret->base.set_bpm                             = &loc_set_bpm;
      ret->base.note_on                             = &loc_note_on;
      ret->base.set_mod_value                       = &loc_set_mod_value;
      ret->base.prepare_block                       = &loc_prepare_block;
      ret->base.process_replace                     = &loc_process_replace;
      ret->base.plugin_exit                         = &loc_plugin_exit;

#ifdef USE_CYCLE_SINE_TBL
      loc_calc_sine_tbl();
#endif // USE_CYCLE_SINE_TBL
   }

   return &ret->base;
}

#ifndef STFX_SKIP_MAIN_INIT
ST_PLUGIN_APICALL st_plugin_info_t *ST_PLUGIN_API st_plugin_init(unsigned int _pluginIdx) {
   switch(_pluginIdx)
   {
      case 0u:
         return markov_bd_1_init();
   }
   return NULL;
}
#endif // STFX_SKIP_MAIN_INIT

} // extern "C"
