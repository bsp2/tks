// ----
// ---- file   : evenangle_1.cpp
// ---- author : 
// ---- legal  : Distributed under terms of the MIT license (https://opensource.org/licenses/MIT)
// ----
// ----          Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// ----          associated documentation files (the "Software"), to deal in the Software without restriction, including
// ----          without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// ----          copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to
// ----          the following conditions:
// ----
// ----          The above copyright notice and this permission notice shall be included in all copies or substantial
// ----          portions of the Software.
// ----
// ----          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// ----          NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// ----          IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// ----          WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// ----          SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ----
// ---- info   : auto-generated by "Cycle"
// ----           $ g++ -Wall -Wno-unused-function -Wno-unused-variable -I../../tksampler -c evenangle_1.cpp -o evenangle_1.o
// ---- created: 22Dec2024 15:14:08
// ----
// ----
// ----

// (note) pre-define CYCLE_SKIP_UI to skip all code used only for UI/editing purposes (e.g. when compiling for standalone replay)
// #define CYCLE_SKIP_UI  defined

#include <plugin.h>

#include <stdlib.h>
#include <math.h>
#include <string.h>
#define OVERSAMPLE_FACTOR  2.0f

#define PARAM_AMP                0
#define NUM_PARAMS               1
#ifndef CYCLE_SKIP_UI
static const char *loc_param_names[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   +1
#endif
                                   ] = {
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   ""
#else
   "amp",                     // 0: AMP

#endif
};
#endif // CYCLE_SKIP_UI
static float loc_param_resets[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   +1
#endif
                              ] = {
#if defined(_MSC_VER) && 0 == NUM_PARAMS
   0.0f
#else
   0.5f,                      // 0: AMP

#endif
};

#define MOD_AMP                  0
#define NUM_MODS                 1
#ifndef CYCLE_SKIP_UI
static const char *loc_mod_names[NUM_MODS
#if defined(_MSC_VER) && 0 == NUM_MODS
   +1
#endif
                                 ] = {
#if defined(_MSC_VER) && 0 == NUM_MODS
   ""
#else
   "amp",                  // 0: AMP

#endif
};
#endif // CYCLE_SKIP_UI

typedef struct evenangle_1_info_s {
   st_plugin_info_t base;
} evenangle_1_info_t;

typedef struct evenangle_1_shared_s {
   st_plugin_shared_t base;
   float params[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                +1
#endif
                ];

} evenangle_1_shared_t;

typedef struct evenangle_1_voice_s {
   st_plugin_voice_t base;
   float             sample_rate;
   float             bpm;
   float             velocity;
   float             note_speed_fixed;
   float             note_speed_cur;
   float             note_speed_inc;
   float             note_cur;
   float             note_inc;
   float             mods[NUM_MODS
#if defined(_MSC_VER) && 0 == NUM_MODS
                          +1
#endif
                          ];
   float mod_amp_cur;
   float mod_amp_inc;

   float tmp1;
   float tmp2_sin_phase;
   float tmp3;
   float tmp4;
   float tmp5_sin_phase;
   float tmp6;
   float tmp7_sin_phase;
   float tmp8_sin_phase;
   float tmp9_sin_phase;
   float tmp10_sin_phase;
   float tmp11_sin_phase;
   float tmp12_sin_phase;
   float tmp13_sin_phase;
   float tmp14_sin_phase;
   float tmp15_sin_phase;
   float tmp16_sin_phase;
   float tmp17_sin_phase;
   float tmp18_sin_phase;
   float tmp19_sin_phase;
   float tmp20_sin_phase;
   float tmp21_sin_phase;
   float tmp22_sin_phase;
   float tmp23_sin_phase;
   float tmp24_sin_phase;
   float tmp25_sin_phase;
   float tmp26_sin_phase;
   float tmp27_sin_phase;
   float tmp28_sin_phase;
   float tmp29_sin_phase;
   float tmp30_sin_phase;
   float tmp31_sin_phase;
   float tmp32_sin_phase;
   float tmp33_sin_phase;
   float tmp34_sin_phase;
   float tmp35_sin_phase;
   float tmp36_sin_phase;
   float tmp37_sin_phase;
   float tmp38_sin_phase;
   float tmp39_sin_phase;
   float tmp40_sin_phase;
   float tmp41_sin_phase;
   float tmp42_sin_phase;
   float tmp43_sin_phase;
   float tmp44_sin_phase;
   float tmp45_sin_phase;
   float tmp46_sin_phase;
   float tmp47_sin_phase;
   float tmp48_sin_phase;
   float tmp49_sin_phase;
   float tmp50_sin_phase;
   float tmp51_sin_phase;
   float tmp52_sin_phase;
   float tmp53_sin_phase;
   float tmp54_sin_phase;
   float tmp55_sin_phase;
   float tmp56_sin_phase;
   float tmp57_sin_phase;
   float tmp58_sin_phase;
   float tmp59_sin_phase;
   float tmp60_sin_phase;
   float tmp61_sin_phase;
   float tmp62_sin_phase;
   float tmp63_sin_phase;
   float tmp64_sin_phase;
   float tmp65_sin_phase;
   float tmp66_sin_phase;
   float tmp67_sin_phase;
   float tmp68_sin_phase;
   float tmp69_sin_phase;
   float tmp70_sin_phase;
   float tmp71_sin_phase;
   float tmp72_sin_phase;
   float tmp73_sin_phase;
   float tmp74_sin_phase;
   float tmp75_sin_phase;
   float tmp76_sin_phase;
   float tmp77_sin_phase;
   float tmp78_sin_phase;
   float tmp79_sin_phase;
   float tmp80_sin_phase;
   float tmp81_sin_phase;
   float tmp82_sin_phase;
   float tmp83_sin_phase;
   float tmp84_sin_phase;
   float tmp85_sin_phase;
   float tmp86_sin_phase;
   float tmp87_sin_phase;
   float tmp88_sin_phase;
   float tmp89_sin_phase;
   float tmp90_sin_phase;
   float tmp91_sin_phase;
   float tmp92_sin_phase;
   float tmp93_sin_phase;
   float tmp94_sin_phase;
   float tmp95_sin_phase;
   float tmp96_sin_phase;
   float tmp97_sin_phase;
   float tmp98_sin_phase;
   float tmp99_sin_phase;
   float tmp100_sin_phase;
   float tmp101_sin_phase;
   float tmp102_sin_phase;
   float tmp103_sin_phase;
   float tmp104_sin_phase;
   float tmp105_sin_phase;
   float tmp106_sin_phase;
   float tmp107_sin_phase;
   float tmp108_sin_phase;
   float tmp109_sin_phase;
   float tmp110_sin_phase;
   float tmp111_sin_phase;
   float tmp112_sin_phase;
   float tmp113_sin_phase;
   float tmp114_sin_phase;
   float tmp115_sin_phase;
   float tmp116_sin_phase;
   float tmp117_sin_phase;
   float tmp118_sin_phase;
   float tmp119_sin_phase;
   float tmp120_sin_phase;
   float tmp121_sin_phase;
   float tmp122_sin_phase;
   float tmp123_sin_phase;
   float tmp124_sin_phase;
   float tmp125_sin_phase;
   float tmp126_sin_phase;
   float tmp127_sin_phase;
   float tmp128_sin_phase;
   float tmp129_sin_phase;
   float tmp130_sin_phase;
   float tmp131_sin_phase;
   float tmp132_sin_phase;
   float tmp133_sin_phase;
   float tmp134_sin_phase;
   float tmp135_sin_phase;
   float tmp136_sin_phase;
   float tmp137_sin_phase;
   float tmp138_sin_phase;
   float tmp139_sin_phase;
   float tmp140_sin_phase;
   float tmp141_sin_phase;
   float tmp142_sin_phase;
   float tmp143_sin_phase;
   float tmp144_sin_phase;
   float tmp145_sin_phase;
   float tmp146_sin_phase;
   float tmp147_sin_phase;
   float tmp148_sin_phase;
   float tmp149_sin_phase;
   float tmp150_sin_phase;
   float tmp151_sin_phase;
   float tmp152_sin_phase;
   float tmp153_sin_phase;
   float tmp154_sin_phase;
   float tmp155_sin_phase;
   float tmp156_sin_phase;
   float tmp157_sin_phase;
   float tmp158_sin_phase;
   float tmp159_sin_phase;
   float tmp160_sin_phase;
   float tmp161_sin_phase;
   float tmp162_sin_phase;
   float tmp163_sin_phase;
   float tmp164_sin_phase;
   float tmp165_sin_phase;
   float tmp166_sin_phase;
   float tmp167_sin_phase;
   float tmp168_sin_phase;
   float tmp169_sin_phase;
   float tmp170_sin_phase;
   float tmp171_sin_phase;
   float tmp172_sin_phase;
   float tmp173_sin_phase;
   float tmp174_sin_phase;
   float tmp175_sin_phase;
   float tmp176_sin_phase;
   float tmp177_sin_phase;
   float tmp178_sin_phase;
   float tmp179_sin_phase;
   float tmp180_sin_phase;
   float tmp181_sin_phase;
   float tmp182_sin_phase;
   float tmp183_sin_phase;
   float tmp184_sin_phase;
   float tmp185_sin_phase;
   float tmp186_sin_phase;
   float tmp187_sin_phase;
   float tmp188_sin_phase;
   float tmp189_sin_phase;
   float tmp190_sin_phase;
   float tmp191_sin_phase;
   float tmp192_sin_phase;
   float tmp193_sin_phase;
   float tmp194_sin_phase;
   float tmp195_sin_phase;
   float tmp196_sin_phase;
   float tmp197_sin_phase;
   float tmp198_sin_phase;
   float tmp199_sin_phase;
   float tmp200_sin_phase;
   float tmp201_sin_phase;
   float tmp202_sin_phase;
   float tmp203_sin_phase;
   float tmp204_sin_phase;
   float tmp205_sin_phase;
   float tmp206_sin_phase;
   float tmp207_sin_phase;
   float tmp208_sin_phase;
   float tmp209_sin_phase;
   float tmp210_sin_phase;
   float tmp211_sin_phase;
   float tmp212_sin_phase;
   float tmp213_sin_phase;
   float tmp214_sin_phase;
   float tmp215_sin_phase;
   float tmp216_sin_phase;
   float tmp217_sin_phase;
   float tmp218_sin_phase;
   float tmp219_sin_phase;
   float tmp220_sin_phase;
   float tmp221_sin_phase;
   float tmp222_sin_phase;
   float tmp223_sin_phase;
   float tmp224_sin_phase;
   float tmp225_sin_phase;
   float tmp226_sin_phase;
   float tmp227_sin_phase;
   float tmp228_sin_phase;
   float tmp229_sin_phase;
   float tmp230_sin_phase;
   float tmp231_sin_phase;
   float tmp232_sin_phase;
   float tmp233_sin_phase;
   float tmp234_sin_phase;
   float tmp235_sin_phase;
   float tmp236_sin_phase;
   float tmp237_sin_phase;
   float tmp238_sin_phase;
   float tmp239_sin_phase;
   float tmp240_sin_phase;
   float tmp241_sin_phase;
   float tmp242_sin_phase;
   float tmp243_sin_phase;
   float tmp244_sin_phase;
   float tmp245_sin_phase;
   float tmp246_sin_phase;
   float tmp247_sin_phase;
   float tmp248_sin_phase;
   float tmp249_sin_phase;
   float tmp250_sin_phase;
   float tmp251_sin_phase;
   float tmp252_sin_phase;
   float tmp253_sin_phase;
   float tmp254_sin_phase;
   float tmp255_sin_phase;
   float tmp256_sin_phase;
   float tmp257_sin_phase;
   float tmp258_sin_phase;
   float tmp259_sin_phase;
   float tmp260_sin_phase;
   float tmp261_sin_phase;
   float var_x;
   float var___ti_evenangle_hs_1;
   float var___ti_evenangle_hs_1_out__v_s;
   float sr_factor;

} evenangle_1_voice_t;

#define loop(X)  for(unsigned int i = 0u; i < (X); i++)
#define clamp(a,b,c) (((a)<(b))?(b):(((a)>(c))?(c):(a)))

static inline float mathLerpf(float _a, float _b, float _t) { return _a + (_b - _a) * _t; }
static inline float mathClampf(float a, float b, float c) { return (((a)<(b))?(b):(((a)>(c))?(c):(a))); }
static inline float mathMinf(float a, float b) { return (a<b)?a:b; }
static inline float mathMaxf(float a, float b) { return (a>b)?a:b; }
static inline float mathAbsMaxf(float _x, float _y) { return ( ( (_x<0.0f)?-_x:_x)>((_y<0.0f)?-_y:_y)?_x:_y ); }
static inline float mathAbsMinf(float _x, float _y) { return ( ((_x<0.0f)?-_x:_x)<((_y<0.0f)?-_y:_y)?_x:_y ); }
static inline float frac(float _x) { return _x - ((int)_x); }

static inline float winLinear(const float *_s, float _index) {
   int idx = (int)_index;
   float r = _index - (float)idx;
   return mathLerpf(_s[idx], _s[idx+1], r);
}

static float ffrac_s(float _f) { int i; if(_f >= 0.0f) { i = (int)_f; return _f - (float)i; } else { i = (int)-_f; return 1.0f - (-_f - (float)i); } }

#define USE_CYCLE_SINE_TBL  defined
static float cycle_sine_tbl_f[16384];



#ifndef CYCLE_SKIP_UI
static unsigned int loc_copy_chars(char *_d, const unsigned int _dSize, const char *_s) {
   unsigned int r = 0u;
   if(NULL != _d)
   {
      // Write min(dSize,len(s)) characters to 'd'
      char *d = _d;
      if(NULL != _s)
      {
         const char *s = _s;
         for(;;)
         {
            if(r < _dSize)
            {
               char c = s[r++];
               *d++ = c;
               if(0 == c)
                  break;
            }
            else
            {
               if(r > 0u)
                  d[-1] = 0;  // force ASCIIZ
               break;
            }
         }
      }
      else
      {
         if(_dSize > 0u)
         {
            _d[0] = 0;
            r = 1u;
         }
      }
   }
   else
   {
      // Return total length of source string
      if(NULL != _s)
      {
         const char *s = _s;
         for(;;)
         {
            char c = s[r++];
            if(0 == c)
               break;
         }
      }
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int loc_copy_floats(float              *_d,
                                    const unsigned int  _dSize,
                                    const float        *_s,
                                    const unsigned int  _sNum
                                    ) {
   unsigned int r = 0u;
   if(NULL != _d)
   {
      // Write min(dSize,sNum) characters to 'd'
      if(NULL != _s)
      {
         unsigned int num = (_sNum > _dSize) ? _dSize : _sNum;
         memcpy((void*)_d, (const void*)_s, num * sizeof(float));
         r = num;
      }
   }
   else
   {
      // Query total number of presets
      r = _sNum;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_name(st_plugin_info_t *_info,
                                                    unsigned int      _paramIdx
                                                    ) {
   (void)_info;
   return loc_param_names[_paramIdx];
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_group_name(st_plugin_info_t *_info,
                                                          unsigned int      _paramGroupIdx
                                                          ) {
   (void)_info;
   const char *r = NULL;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_param_group_idx(st_plugin_info_t *_info,
                                                          unsigned int      _paramIdx
                                                          ) {
   (void)_info;
   unsigned int r = ~0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_section_name(st_plugin_info_t *_info,
                                                            unsigned int      _paramSectionIdx
                                                            ) {
   (void)_info;
   const char *r = NULL;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_param_section_idx(st_plugin_info_t *_info,
                                                            unsigned int      _paramIdx
                                                            ) {
   (void)_info;
   unsigned int r = ~0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float ST_PLUGIN_API loc_get_param_reset(st_plugin_info_t *_info,
                                               unsigned int      _paramIdx
                                               ) {
   (void)_info;
   return loc_param_resets[_paramIdx];
}
#endif // CYCLE_SKIP_UI

static float ST_PLUGIN_API loc_get_param_value(st_plugin_shared_t *_shared,
                                               unsigned int        _paramIdx
                                               ) {
   ST_PLUGIN_SHARED_CAST(evenangle_1_shared_t);
   return shared->params[_paramIdx];
}

static void ST_PLUGIN_API loc_set_param_value(st_plugin_shared_t *_shared,
                                              unsigned int        _paramIdx,
                                              float               _value
                                              ) {
   ST_PLUGIN_SHARED_CAST(evenangle_1_shared_t);
   shared->params[_paramIdx] = _value;
}

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_query_dynamic_param_preset_values(st_plugin_shared_t *_shared,
                                                                        const unsigned int  _paramIdx,
                                                                        float              *_retValues,
                                                                        const unsigned int  _retValuesSize
                                                                        ) {
   ST_PLUGIN_SHARED_CAST(evenangle_1_shared_t);
   unsigned int r = 0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_query_dynamic_param_preset_name(st_plugin_shared_t *_shared,
                                                                      const unsigned int  _paramIdx,
                                                                      const unsigned int  _presetIdx,
                                                                      char               *_retBuf,
                                                                      const unsigned int  _retBufSize
                                                                      ) {
   ST_PLUGIN_SHARED_CAST(evenangle_1_shared_t);
   unsigned int r = 0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_array_param_size(st_plugin_info_t   *_info,
                                                           const unsigned int  _paramIdx
                                                           ) {
   unsigned int r = 0u;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_array_param_num_variations(st_plugin_info_t   *_info,
                                                                     const unsigned int  _paramIdx
                                                                     ) {
   unsigned int r = 0u;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float * ST_PLUGIN_API loc_get_array_param_variation_ptr(st_plugin_shared_t *_shared,
                                                               const unsigned int  _paramIdx,
                                                               const unsigned int  _variationIdx
                                                               ) {
   ST_PLUGIN_SHARED_CAST(evenangle_1_shared_t);
   float *r = NULL;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static void ST_PLUGIN_API loc_set_array_param_edit_variation_idx(st_plugin_shared_t *_shared,
                                                                 const unsigned int  _paramIdx,
                                                                 const int           _variationIdx
                                                                 ) {
   ST_PLUGIN_SHARED_CAST(evenangle_1_shared_t);
   switch(_paramIdx)
   {
      default:
         break;
   }
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_array_param_element_name(st_plugin_info_t   *_info,
                                                                  const unsigned int  _paramIdx,
                                                                  const unsigned int  _elementIdx
                                                                  ) {
   ST_PLUGIN_INFO_CAST(evenangle_1_info_t);
   const char *r = NULL;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static int ST_PLUGIN_API loc_get_array_param_element_value_range(st_plugin_info_t   *_info,
                                                                 const unsigned int  _paramIdx,
                                                                 const unsigned int  _elementIdx,
                                                                 float              *_retStorageMin,
                                                                 float              *_retStorageMax,
                                                                 float              *_retDisplayMin,
                                                                 float              *_retDisplayMax,
                                                                 unsigned int       *_retDisplayPrecision
                                                                 ) {
   (void)_elementIdx;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return 0;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float ST_PLUGIN_API loc_get_array_param_element_reset(st_plugin_info_t   *_info,
                                                             const unsigned int  _paramIdx,
                                                             const unsigned int  _elementIdx
                                                             ) {
   ST_PLUGIN_INFO_CAST(evenangle_1_info_t);
   float r = -999999.0f/*INVALID_VALUE*/;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static void ST_PLUGIN_API loc_update_lut(st_plugin_info_t   *_info,
                                         unsigned int        _idx,
                                         const float        *_src,
                                         const unsigned int  _srcNumElements
                                         ) {
   (void)_info;
   unsigned int copySz = 0u;
   (void)copySz;
   switch(_idx)
   {
      default:
         break;
   }
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_mod_name(st_plugin_info_t *_info,
                                                  unsigned int      _modIdx
                                                  ) {
   (void)_info;
   return loc_mod_names[_modIdx];
}
#endif // CYCLE_SKIP_UI

static void ST_PLUGIN_API loc_set_sample_rate(st_plugin_voice_t *_voice,
                                              float              _sampleRate
                                              ) {
   ST_PLUGIN_VOICE_CAST(evenangle_1_voice_t);
   if(_sampleRate != voice->sample_rate)
   {
      voice->sr_factor = 24000.0f / _sampleRate;
   }
   voice->sample_rate = _sampleRate;
}

static void ST_PLUGIN_API loc_set_bpm(st_plugin_voice_t *_voice,
                                      float              _bpm
                                      ) {
   ST_PLUGIN_VOICE_CAST(evenangle_1_voice_t);
   voice->bpm = _bpm;
}

static void ST_PLUGIN_API loc_note_on(st_plugin_voice_t  *_voice,
                                      int                 _bGlide,
                                      unsigned char       _note,
                                      float               _vel
                                      ) {
   ST_PLUGIN_VOICE_CAST(evenangle_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(evenangle_1_shared_t);
   (void)_bGlide;
   (void)_note;
   (void)_vel;
   if(!_bGlide)
   {
      memset((void*)voice->mods, 0, sizeof(voice->mods));
#ifdef OVERSAMPLE_FACTOR
      voice->note_speed_fixed = (261.63f/*C-5*/ / (voice->sample_rate * OVERSAMPLE_FACTOR));
#else
      voice->note_speed_fixed = (261.63f/*C-5*/ / voice->sample_rate);
#endif // OVERSAMPLE_FACTOR
      voice->velocity = _vel;
      voice->tmp2_sin_phase = 0.0f;
      voice->tmp5_sin_phase = 0.0f;
      voice->tmp7_sin_phase = 0.0f;
      voice->tmp8_sin_phase = 0.0f;
      voice->tmp9_sin_phase = 0.0f;
      voice->tmp10_sin_phase = 0.0f;
      voice->tmp11_sin_phase = 0.0f;
      voice->tmp12_sin_phase = 0.0f;
      voice->tmp13_sin_phase = 0.0f;
      voice->tmp14_sin_phase = 0.0f;
      voice->tmp15_sin_phase = 0.0f;
      voice->tmp16_sin_phase = 0.0f;
      voice->tmp17_sin_phase = 0.0f;
      voice->tmp18_sin_phase = 0.0f;
      voice->tmp19_sin_phase = 0.0f;
      voice->tmp20_sin_phase = 0.0f;
      voice->tmp21_sin_phase = 0.0f;
      voice->tmp22_sin_phase = 0.0f;
      voice->tmp23_sin_phase = 0.0f;
      voice->tmp24_sin_phase = 0.0f;
      voice->tmp25_sin_phase = 0.0f;
      voice->tmp26_sin_phase = 0.0f;
      voice->tmp27_sin_phase = 0.0f;
      voice->tmp28_sin_phase = 0.0f;
      voice->tmp29_sin_phase = 0.0f;
      voice->tmp30_sin_phase = 0.0f;
      voice->tmp31_sin_phase = 0.0f;
      voice->tmp32_sin_phase = 0.0f;
      voice->tmp33_sin_phase = 0.0f;
      voice->tmp34_sin_phase = 0.0f;
      voice->tmp35_sin_phase = 0.0f;
      voice->tmp36_sin_phase = 0.0f;
      voice->tmp37_sin_phase = 0.0f;
      voice->tmp38_sin_phase = 0.0f;
      voice->tmp39_sin_phase = 0.0f;
      voice->tmp40_sin_phase = 0.0f;
      voice->tmp41_sin_phase = 0.0f;
      voice->tmp42_sin_phase = 0.0f;
      voice->tmp43_sin_phase = 0.0f;
      voice->tmp44_sin_phase = 0.0f;
      voice->tmp45_sin_phase = 0.0f;
      voice->tmp46_sin_phase = 0.0f;
      voice->tmp47_sin_phase = 0.0f;
      voice->tmp48_sin_phase = 0.0f;
      voice->tmp49_sin_phase = 0.0f;
      voice->tmp50_sin_phase = 0.0f;
      voice->tmp51_sin_phase = 0.0f;
      voice->tmp52_sin_phase = 0.0f;
      voice->tmp53_sin_phase = 0.0f;
      voice->tmp54_sin_phase = 0.0f;
      voice->tmp55_sin_phase = 0.0f;
      voice->tmp56_sin_phase = 0.0f;
      voice->tmp57_sin_phase = 0.0f;
      voice->tmp58_sin_phase = 0.0f;
      voice->tmp59_sin_phase = 0.0f;
      voice->tmp60_sin_phase = 0.0f;
      voice->tmp61_sin_phase = 0.0f;
      voice->tmp62_sin_phase = 0.0f;
      voice->tmp63_sin_phase = 0.0f;
      voice->tmp64_sin_phase = 0.0f;
      voice->tmp65_sin_phase = 0.0f;
      voice->tmp66_sin_phase = 0.0f;
      voice->tmp67_sin_phase = 0.0f;
      voice->tmp68_sin_phase = 0.0f;
      voice->tmp69_sin_phase = 0.0f;
      voice->tmp70_sin_phase = 0.0f;
      voice->tmp71_sin_phase = 0.0f;
      voice->tmp72_sin_phase = 0.0f;
      voice->tmp73_sin_phase = 0.0f;
      voice->tmp74_sin_phase = 0.0f;
      voice->tmp75_sin_phase = 0.0f;
      voice->tmp76_sin_phase = 0.0f;
      voice->tmp77_sin_phase = 0.0f;
      voice->tmp78_sin_phase = 0.0f;
      voice->tmp79_sin_phase = 0.0f;
      voice->tmp80_sin_phase = 0.0f;
      voice->tmp81_sin_phase = 0.0f;
      voice->tmp82_sin_phase = 0.0f;
      voice->tmp83_sin_phase = 0.0f;
      voice->tmp84_sin_phase = 0.0f;
      voice->tmp85_sin_phase = 0.0f;
      voice->tmp86_sin_phase = 0.0f;
      voice->tmp87_sin_phase = 0.0f;
      voice->tmp88_sin_phase = 0.0f;
      voice->tmp89_sin_phase = 0.0f;
      voice->tmp90_sin_phase = 0.0f;
      voice->tmp91_sin_phase = 0.0f;
      voice->tmp92_sin_phase = 0.0f;
      voice->tmp93_sin_phase = 0.0f;
      voice->tmp94_sin_phase = 0.0f;
      voice->tmp95_sin_phase = 0.0f;
      voice->tmp96_sin_phase = 0.0f;
      voice->tmp97_sin_phase = 0.0f;
      voice->tmp98_sin_phase = 0.0f;
      voice->tmp99_sin_phase = 0.0f;
      voice->tmp100_sin_phase = 0.0f;
      voice->tmp101_sin_phase = 0.0f;
      voice->tmp102_sin_phase = 0.0f;
      voice->tmp103_sin_phase = 0.0f;
      voice->tmp104_sin_phase = 0.0f;
      voice->tmp105_sin_phase = 0.0f;
      voice->tmp106_sin_phase = 0.0f;
      voice->tmp107_sin_phase = 0.0f;
      voice->tmp108_sin_phase = 0.0f;
      voice->tmp109_sin_phase = 0.0f;
      voice->tmp110_sin_phase = 0.0f;
      voice->tmp111_sin_phase = 0.0f;
      voice->tmp112_sin_phase = 0.0f;
      voice->tmp113_sin_phase = 0.0f;
      voice->tmp114_sin_phase = 0.0f;
      voice->tmp115_sin_phase = 0.0f;
      voice->tmp116_sin_phase = 0.0f;
      voice->tmp117_sin_phase = 0.0f;
      voice->tmp118_sin_phase = 0.0f;
      voice->tmp119_sin_phase = 0.0f;
      voice->tmp120_sin_phase = 0.0f;
      voice->tmp121_sin_phase = 0.0f;
      voice->tmp122_sin_phase = 0.0f;
      voice->tmp123_sin_phase = 0.0f;
      voice->tmp124_sin_phase = 0.0f;
      voice->tmp125_sin_phase = 0.0f;
      voice->tmp126_sin_phase = 0.0f;
      voice->tmp127_sin_phase = 0.0f;
      voice->tmp128_sin_phase = 0.0f;
      voice->tmp129_sin_phase = 0.0f;
      voice->tmp130_sin_phase = 0.0f;
      voice->tmp131_sin_phase = 0.0f;
      voice->tmp132_sin_phase = 0.0f;
      voice->tmp133_sin_phase = 0.0f;
      voice->tmp134_sin_phase = 0.0f;
      voice->tmp135_sin_phase = 0.0f;
      voice->tmp136_sin_phase = 0.0f;
      voice->tmp137_sin_phase = 0.0f;
      voice->tmp138_sin_phase = 0.0f;
      voice->tmp139_sin_phase = 0.0f;
      voice->tmp140_sin_phase = 0.0f;
      voice->tmp141_sin_phase = 0.0f;
      voice->tmp142_sin_phase = 0.0f;
      voice->tmp143_sin_phase = 0.0f;
      voice->tmp144_sin_phase = 0.0f;
      voice->tmp145_sin_phase = 0.0f;
      voice->tmp146_sin_phase = 0.0f;
      voice->tmp147_sin_phase = 0.0f;
      voice->tmp148_sin_phase = 0.0f;
      voice->tmp149_sin_phase = 0.0f;
      voice->tmp150_sin_phase = 0.0f;
      voice->tmp151_sin_phase = 0.0f;
      voice->tmp152_sin_phase = 0.0f;
      voice->tmp153_sin_phase = 0.0f;
      voice->tmp154_sin_phase = 0.0f;
      voice->tmp155_sin_phase = 0.0f;
      voice->tmp156_sin_phase = 0.0f;
      voice->tmp157_sin_phase = 0.0f;
      voice->tmp158_sin_phase = 0.0f;
      voice->tmp159_sin_phase = 0.0f;
      voice->tmp160_sin_phase = 0.0f;
      voice->tmp161_sin_phase = 0.0f;
      voice->tmp162_sin_phase = 0.0f;
      voice->tmp163_sin_phase = 0.0f;
      voice->tmp164_sin_phase = 0.0f;
      voice->tmp165_sin_phase = 0.0f;
      voice->tmp166_sin_phase = 0.0f;
      voice->tmp167_sin_phase = 0.0f;
      voice->tmp168_sin_phase = 0.0f;
      voice->tmp169_sin_phase = 0.0f;
      voice->tmp170_sin_phase = 0.0f;
      voice->tmp171_sin_phase = 0.0f;
      voice->tmp172_sin_phase = 0.0f;
      voice->tmp173_sin_phase = 0.0f;
      voice->tmp174_sin_phase = 0.0f;
      voice->tmp175_sin_phase = 0.0f;
      voice->tmp176_sin_phase = 0.0f;
      voice->tmp177_sin_phase = 0.0f;
      voice->tmp178_sin_phase = 0.0f;
      voice->tmp179_sin_phase = 0.0f;
      voice->tmp180_sin_phase = 0.0f;
      voice->tmp181_sin_phase = 0.0f;
      voice->tmp182_sin_phase = 0.0f;
      voice->tmp183_sin_phase = 0.0f;
      voice->tmp184_sin_phase = 0.0f;
      voice->tmp185_sin_phase = 0.0f;
      voice->tmp186_sin_phase = 0.0f;
      voice->tmp187_sin_phase = 0.0f;
      voice->tmp188_sin_phase = 0.0f;
      voice->tmp189_sin_phase = 0.0f;
      voice->tmp190_sin_phase = 0.0f;
      voice->tmp191_sin_phase = 0.0f;
      voice->tmp192_sin_phase = 0.0f;
      voice->tmp193_sin_phase = 0.0f;
      voice->tmp194_sin_phase = 0.0f;
      voice->tmp195_sin_phase = 0.0f;
      voice->tmp196_sin_phase = 0.0f;
      voice->tmp197_sin_phase = 0.0f;
      voice->tmp198_sin_phase = 0.0f;
      voice->tmp199_sin_phase = 0.0f;
      voice->tmp200_sin_phase = 0.0f;
      voice->tmp201_sin_phase = 0.0f;
      voice->tmp202_sin_phase = 0.0f;
      voice->tmp203_sin_phase = 0.0f;
      voice->tmp204_sin_phase = 0.0f;
      voice->tmp205_sin_phase = 0.0f;
      voice->tmp206_sin_phase = 0.0f;
      voice->tmp207_sin_phase = 0.0f;
      voice->tmp208_sin_phase = 0.0f;
      voice->tmp209_sin_phase = 0.0f;
      voice->tmp210_sin_phase = 0.0f;
      voice->tmp211_sin_phase = 0.0f;
      voice->tmp212_sin_phase = 0.0f;
      voice->tmp213_sin_phase = 0.0f;
      voice->tmp214_sin_phase = 0.0f;
      voice->tmp215_sin_phase = 0.0f;
      voice->tmp216_sin_phase = 0.0f;
      voice->tmp217_sin_phase = 0.0f;
      voice->tmp218_sin_phase = 0.0f;
      voice->tmp219_sin_phase = 0.0f;
      voice->tmp220_sin_phase = 0.0f;
      voice->tmp221_sin_phase = 0.0f;
      voice->tmp222_sin_phase = 0.0f;
      voice->tmp223_sin_phase = 0.0f;
      voice->tmp224_sin_phase = 0.0f;
      voice->tmp225_sin_phase = 0.0f;
      voice->tmp226_sin_phase = 0.0f;
      voice->tmp227_sin_phase = 0.0f;
      voice->tmp228_sin_phase = 0.0f;
      voice->tmp229_sin_phase = 0.0f;
      voice->tmp230_sin_phase = 0.0f;
      voice->tmp231_sin_phase = 0.0f;
      voice->tmp232_sin_phase = 0.0f;
      voice->tmp233_sin_phase = 0.0f;
      voice->tmp234_sin_phase = 0.0f;
      voice->tmp235_sin_phase = 0.0f;
      voice->tmp236_sin_phase = 0.0f;
      voice->tmp237_sin_phase = 0.0f;
      voice->tmp238_sin_phase = 0.0f;
      voice->tmp239_sin_phase = 0.0f;
      voice->tmp240_sin_phase = 0.0f;
      voice->tmp241_sin_phase = 0.0f;
      voice->tmp242_sin_phase = 0.0f;
      voice->tmp243_sin_phase = 0.0f;
      voice->tmp244_sin_phase = 0.0f;
      voice->tmp245_sin_phase = 0.0f;
      voice->tmp246_sin_phase = 0.0f;
      voice->tmp247_sin_phase = 0.0f;
      voice->tmp248_sin_phase = 0.0f;
      voice->tmp249_sin_phase = 0.0f;
      voice->tmp250_sin_phase = 0.0f;
      voice->tmp251_sin_phase = 0.0f;
      voice->tmp252_sin_phase = 0.0f;
      voice->tmp253_sin_phase = 0.0f;
      voice->tmp254_sin_phase = 0.0f;
      voice->tmp255_sin_phase = 0.0f;
      voice->tmp256_sin_phase = 0.0f;
      voice->tmp257_sin_phase = 0.0f;
      voice->tmp258_sin_phase = 0.0f;
      voice->tmp259_sin_phase = 0.0f;
      voice->tmp260_sin_phase = 0.0f;
      voice->tmp261_sin_phase = 0.0f;
      voice->var_x = 0.0f;
      voice->var___ti_evenangle_hs_1 = 0.0f;
      voice->var___ti_evenangle_hs_1_out__v_s = 2.0f;
   }
}

static void ST_PLUGIN_API loc_set_mod_value(st_plugin_voice_t *_voice,
                                            unsigned int       _modIdx,
                                            float              _value,
                                            unsigned           _frameOffset
                                            ) {
   ST_PLUGIN_VOICE_CAST(evenangle_1_voice_t);
   (void)_frameOffset;
   voice->mods[_modIdx] = _value;
}

static void ST_PLUGIN_API loc_prepare_block(st_plugin_voice_t *_voice,
                                            unsigned int       _numFrames,
                                            float              _freqHz,
                                            float              _note,
                                            float              _vol,
                                            float              _pan
                                            ) {
   ST_PLUGIN_VOICE_CAST(evenangle_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(evenangle_1_shared_t);
   (void)_note;
   (void)_vol;
   (void)_pan;

#ifdef OVERSAMPLE_FACTOR
   float noteSpeed = _freqHz / (voice->sample_rate * OVERSAMPLE_FACTOR);
#else
   float noteSpeed = _freqHz / voice->sample_rate;
#endif // OVERSAMPLE_FACTOR

   float modamp          = shared->params[PARAM_AMP         ]                       + voice->mods[MOD_AMP          ];

   if(_numFrames > 0u)
   {
      // lerp
#ifdef OVERSAMPLE_FACTOR
      float recBlockSize = (1.0f / (_numFrames * OVERSAMPLE_FACTOR));
#else
      float recBlockSize = (1.0f / _numFrames);
#endif // OVERSAMPLE_FACTOR
      voice->note_speed_inc = (noteSpeed - voice->note_speed_cur) * recBlockSize;
      voice->note_inc       = (_note - voice->note_cur) * recBlockSize;
      voice->mod_amp_inc          = (modamp             - voice->mod_amp_cur           ) * recBlockSize;
   }
   else
   {
      // initial params/modulation (first block, not rendered)
      voice->note_speed_cur = noteSpeed;
      voice->note_speed_inc = 0.0f;
      voice->note_cur       = _note;
      voice->note_inc       = 0.0f;
      voice->mod_amp_cur          = modamp;
      voice->mod_amp_inc          = 0.0f;
   }

   // printf("xxx note_cur=%f\n", voice->note_cur);
   // printf("xxx prepare_block: numFrames=%u moda=%f\n", _numFrames, moda);
   // printf("xxx voice->voicebus_idx_0=%u voice->base.voice_bus_read_offset=%u\n", voice->voicebus_idx_0, voice->base.voice_bus_read_offset);
}

static void ST_PLUGIN_API loc_process_replace(st_plugin_voice_t  *_voice,
                                              int                 _bMonoIn,
                                              const float        *_samplesIn,
                                              float              *_samplesOut,
                                              unsigned int        _numFrames
                                              ) {
   (void)_bMonoIn;
   (void)_samplesIn;

   ST_PLUGIN_VOICE_CAST(evenangle_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(evenangle_1_shared_t);

   // Mono output (replicate left to right channel)
   unsigned int j = 0u;
#ifndef STEREO
   unsigned int jStep = _bMonoIn ? 1u : 2u;
#endif // STEREO
   unsigned int k = 0u;
   for(unsigned int i = 0u; i < _numFrames; i++)
   {
      const float inL = _samplesIn[j];
#ifdef STEREO
      float outL;
      float outR;
      const float inR = _samplesIn[j + 1u];
#endif // STEREO
      float out;
#ifdef OVERSAMPLE_FACTOR
#ifdef STEREO
      float outOSL = 0.0f;
      float outOSR = 0.0f;
#else
      float outOS = 0.0f;
#endif // STEREO
#endif // OVERSAMPLE_FACTOR

#ifdef OVERSAMPLE_FACTOR
      for(unsigned int osi = 0u; osi < OVERSAMPLE_FACTOR; osi++)
#endif // OVERSAMPLE_FACTOR
      {
#ifdef STEREO
         out = outL = inL;
         outR = inR;
#else
         out = inL;
#endif // STEREO
         float tmp_f; (void)tmp_f;
         float tmp2_f; (void)tmp2_f;
         
         // ========
         // ======== lane "out" modIdx=0 modString=set __ti_evenangle_hs_1
         // ========
         
         // -- mod="set __ti_evenangle_hs_1" dstVar=out
         voice->tmp1/*delta*/ = out;
         
         // ---- mod="set __ti_evenangle_hs_1" input "value" seq 1/1
         
         // -- mod="set __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s = 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="1" dstVar=voice->tmp4/*sin_freq*/
         voice->tmp4/*sin_freq*/ = 1.0f;
         voice->tmp3/*sin_speed*/ = voice->note_speed_cur * voice->tmp4/*sin_freq*/;
         voice->tmp4/*sin_tmp*/ = (voice->tmp2_sin_phase);
         voice->tmp4/*sin_tmp*/ = ffrac_s(voice->tmp4/*sin_tmp*/);
         voice->tmp1/*delta*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp4/*sin_tmp*/)&16383u];
         voice->tmp2_sin_phase = ffrac_s(voice->tmp2_sin_phase + voice->tmp3/*sin_speed*/);
         
         // -- mod="rep" dstVar=voice->tmp1/*delta*/
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp5_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp5_sin_phase = ffrac_s(voice->tmp5_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp7_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp7_sin_phase = ffrac_s(voice->tmp7_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp8_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp8_sin_phase = ffrac_s(voice->tmp8_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp9_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp9_sin_phase = ffrac_s(voice->tmp9_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp10_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp10_sin_phase = ffrac_s(voice->tmp10_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp11_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp11_sin_phase = ffrac_s(voice->tmp11_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp12_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp12_sin_phase = ffrac_s(voice->tmp12_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp13_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp13_sin_phase = ffrac_s(voice->tmp13_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp14_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp14_sin_phase = ffrac_s(voice->tmp14_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp15_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp15_sin_phase = ffrac_s(voice->tmp15_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp16_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp16_sin_phase = ffrac_s(voice->tmp16_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp17_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp17_sin_phase = ffrac_s(voice->tmp17_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp18_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp18_sin_phase = ffrac_s(voice->tmp18_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp19_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp19_sin_phase = ffrac_s(voice->tmp19_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp20_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp20_sin_phase = ffrac_s(voice->tmp20_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp21_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp21_sin_phase = ffrac_s(voice->tmp21_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp22_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp22_sin_phase = ffrac_s(voice->tmp22_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp23_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp23_sin_phase = ffrac_s(voice->tmp23_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp24_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp24_sin_phase = ffrac_s(voice->tmp24_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp25_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp25_sin_phase = ffrac_s(voice->tmp25_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp26_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp26_sin_phase = ffrac_s(voice->tmp26_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp27_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp27_sin_phase = ffrac_s(voice->tmp27_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp28_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp28_sin_phase = ffrac_s(voice->tmp28_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp29_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp29_sin_phase = ffrac_s(voice->tmp29_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp30_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp30_sin_phase = ffrac_s(voice->tmp30_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp31_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp31_sin_phase = ffrac_s(voice->tmp31_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp32_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp32_sin_phase = ffrac_s(voice->tmp32_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp33_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp33_sin_phase = ffrac_s(voice->tmp33_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp34_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp34_sin_phase = ffrac_s(voice->tmp34_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp35_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp35_sin_phase = ffrac_s(voice->tmp35_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp36_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp36_sin_phase = ffrac_s(voice->tmp36_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp37_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp37_sin_phase = ffrac_s(voice->tmp37_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp38_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp38_sin_phase = ffrac_s(voice->tmp38_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp39_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp39_sin_phase = ffrac_s(voice->tmp39_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp40_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp40_sin_phase = ffrac_s(voice->tmp40_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp41_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp41_sin_phase = ffrac_s(voice->tmp41_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp42_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp42_sin_phase = ffrac_s(voice->tmp42_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp43_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp43_sin_phase = ffrac_s(voice->tmp43_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp44_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp44_sin_phase = ffrac_s(voice->tmp44_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp45_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp45_sin_phase = ffrac_s(voice->tmp45_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp46_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp46_sin_phase = ffrac_s(voice->tmp46_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp47_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp47_sin_phase = ffrac_s(voice->tmp47_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp48_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp48_sin_phase = ffrac_s(voice->tmp48_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp49_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp49_sin_phase = ffrac_s(voice->tmp49_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp50_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp50_sin_phase = ffrac_s(voice->tmp50_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp51_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp51_sin_phase = ffrac_s(voice->tmp51_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp52_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp52_sin_phase = ffrac_s(voice->tmp52_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp53_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp53_sin_phase = ffrac_s(voice->tmp53_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp54_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp54_sin_phase = ffrac_s(voice->tmp54_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp55_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp55_sin_phase = ffrac_s(voice->tmp55_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp56_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp56_sin_phase = ffrac_s(voice->tmp56_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp57_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp57_sin_phase = ffrac_s(voice->tmp57_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp58_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp58_sin_phase = ffrac_s(voice->tmp58_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp59_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp59_sin_phase = ffrac_s(voice->tmp59_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp60_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp60_sin_phase = ffrac_s(voice->tmp60_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp61_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp61_sin_phase = ffrac_s(voice->tmp61_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp62_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp62_sin_phase = ffrac_s(voice->tmp62_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp63_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp63_sin_phase = ffrac_s(voice->tmp63_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp64_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp64_sin_phase = ffrac_s(voice->tmp64_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp65_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp65_sin_phase = ffrac_s(voice->tmp65_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp66_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp66_sin_phase = ffrac_s(voice->tmp66_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp67_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp67_sin_phase = ffrac_s(voice->tmp67_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp68_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp68_sin_phase = ffrac_s(voice->tmp68_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp69_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp69_sin_phase = ffrac_s(voice->tmp69_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp70_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp70_sin_phase = ffrac_s(voice->tmp70_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp71_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp71_sin_phase = ffrac_s(voice->tmp71_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp72_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp72_sin_phase = ffrac_s(voice->tmp72_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp73_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp73_sin_phase = ffrac_s(voice->tmp73_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp74_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp74_sin_phase = ffrac_s(voice->tmp74_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp75_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp75_sin_phase = ffrac_s(voice->tmp75_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp76_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp76_sin_phase = ffrac_s(voice->tmp76_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp77_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp77_sin_phase = ffrac_s(voice->tmp77_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp78_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp78_sin_phase = ffrac_s(voice->tmp78_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp79_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp79_sin_phase = ffrac_s(voice->tmp79_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp80_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp80_sin_phase = ffrac_s(voice->tmp80_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp81_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp81_sin_phase = ffrac_s(voice->tmp81_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp82_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp82_sin_phase = ffrac_s(voice->tmp82_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp83_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp83_sin_phase = ffrac_s(voice->tmp83_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp84_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp84_sin_phase = ffrac_s(voice->tmp84_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp85_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp85_sin_phase = ffrac_s(voice->tmp85_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp86_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp86_sin_phase = ffrac_s(voice->tmp86_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp87_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp87_sin_phase = ffrac_s(voice->tmp87_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp88_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp88_sin_phase = ffrac_s(voice->tmp88_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp89_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp89_sin_phase = ffrac_s(voice->tmp89_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp90_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp90_sin_phase = ffrac_s(voice->tmp90_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp91_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp91_sin_phase = ffrac_s(voice->tmp91_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp92_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp92_sin_phase = ffrac_s(voice->tmp92_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp93_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp93_sin_phase = ffrac_s(voice->tmp93_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp94_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp94_sin_phase = ffrac_s(voice->tmp94_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp95_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp95_sin_phase = ffrac_s(voice->tmp95_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp96_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp96_sin_phase = ffrac_s(voice->tmp96_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp97_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp97_sin_phase = ffrac_s(voice->tmp97_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp98_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp98_sin_phase = ffrac_s(voice->tmp98_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp99_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp99_sin_phase = ffrac_s(voice->tmp99_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp100_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp100_sin_phase = ffrac_s(voice->tmp100_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp101_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp101_sin_phase = ffrac_s(voice->tmp101_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp102_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp102_sin_phase = ffrac_s(voice->tmp102_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp103_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp103_sin_phase = ffrac_s(voice->tmp103_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp104_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp104_sin_phase = ffrac_s(voice->tmp104_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp105_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp105_sin_phase = ffrac_s(voice->tmp105_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp106_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp106_sin_phase = ffrac_s(voice->tmp106_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp107_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp107_sin_phase = ffrac_s(voice->tmp107_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp108_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp108_sin_phase = ffrac_s(voice->tmp108_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp109_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp109_sin_phase = ffrac_s(voice->tmp109_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp110_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp110_sin_phase = ffrac_s(voice->tmp110_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp111_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp111_sin_phase = ffrac_s(voice->tmp111_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp112_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp112_sin_phase = ffrac_s(voice->tmp112_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp113_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp113_sin_phase = ffrac_s(voice->tmp113_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp114_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp114_sin_phase = ffrac_s(voice->tmp114_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp115_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp115_sin_phase = ffrac_s(voice->tmp115_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp116_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp116_sin_phase = ffrac_s(voice->tmp116_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp117_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp117_sin_phase = ffrac_s(voice->tmp117_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp118_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp118_sin_phase = ffrac_s(voice->tmp118_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp119_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp119_sin_phase = ffrac_s(voice->tmp119_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp120_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp120_sin_phase = ffrac_s(voice->tmp120_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp121_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp121_sin_phase = ffrac_s(voice->tmp121_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp122_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp122_sin_phase = ffrac_s(voice->tmp122_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp123_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp123_sin_phase = ffrac_s(voice->tmp123_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp124_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp124_sin_phase = ffrac_s(voice->tmp124_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp125_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp125_sin_phase = ffrac_s(voice->tmp125_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp126_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp126_sin_phase = ffrac_s(voice->tmp126_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp127_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp127_sin_phase = ffrac_s(voice->tmp127_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp128_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp128_sin_phase = ffrac_s(voice->tmp128_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp129_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp129_sin_phase = ffrac_s(voice->tmp129_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp130_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp130_sin_phase = ffrac_s(voice->tmp130_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp131_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp131_sin_phase = ffrac_s(voice->tmp131_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp132_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp132_sin_phase = ffrac_s(voice->tmp132_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp133_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp133_sin_phase = ffrac_s(voice->tmp133_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp134_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp134_sin_phase = ffrac_s(voice->tmp134_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp135_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp135_sin_phase = ffrac_s(voice->tmp135_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp136_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp136_sin_phase = ffrac_s(voice->tmp136_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp137_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp137_sin_phase = ffrac_s(voice->tmp137_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp138_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp138_sin_phase = ffrac_s(voice->tmp138_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp139_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp139_sin_phase = ffrac_s(voice->tmp139_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp140_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp140_sin_phase = ffrac_s(voice->tmp140_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp141_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp141_sin_phase = ffrac_s(voice->tmp141_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp142_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp142_sin_phase = ffrac_s(voice->tmp142_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp143_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp143_sin_phase = ffrac_s(voice->tmp143_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp144_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp144_sin_phase = ffrac_s(voice->tmp144_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp145_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp145_sin_phase = ffrac_s(voice->tmp145_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp146_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp146_sin_phase = ffrac_s(voice->tmp146_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp147_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp147_sin_phase = ffrac_s(voice->tmp147_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp148_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp148_sin_phase = ffrac_s(voice->tmp148_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp149_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp149_sin_phase = ffrac_s(voice->tmp149_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp150_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp150_sin_phase = ffrac_s(voice->tmp150_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp151_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp151_sin_phase = ffrac_s(voice->tmp151_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp152_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp152_sin_phase = ffrac_s(voice->tmp152_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp153_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp153_sin_phase = ffrac_s(voice->tmp153_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp154_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp154_sin_phase = ffrac_s(voice->tmp154_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp155_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp155_sin_phase = ffrac_s(voice->tmp155_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp156_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp156_sin_phase = ffrac_s(voice->tmp156_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp157_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp157_sin_phase = ffrac_s(voice->tmp157_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp158_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp158_sin_phase = ffrac_s(voice->tmp158_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp159_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp159_sin_phase = ffrac_s(voice->tmp159_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp160_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp160_sin_phase = ffrac_s(voice->tmp160_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp161_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp161_sin_phase = ffrac_s(voice->tmp161_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp162_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp162_sin_phase = ffrac_s(voice->tmp162_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp163_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp163_sin_phase = ffrac_s(voice->tmp163_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp164_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp164_sin_phase = ffrac_s(voice->tmp164_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp165_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp165_sin_phase = ffrac_s(voice->tmp165_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp166_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp166_sin_phase = ffrac_s(voice->tmp166_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp167_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp167_sin_phase = ffrac_s(voice->tmp167_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp168_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp168_sin_phase = ffrac_s(voice->tmp168_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp169_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp169_sin_phase = ffrac_s(voice->tmp169_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp170_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp170_sin_phase = ffrac_s(voice->tmp170_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp171_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp171_sin_phase = ffrac_s(voice->tmp171_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp172_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp172_sin_phase = ffrac_s(voice->tmp172_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp173_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp173_sin_phase = ffrac_s(voice->tmp173_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp174_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp174_sin_phase = ffrac_s(voice->tmp174_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp175_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp175_sin_phase = ffrac_s(voice->tmp175_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp176_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp176_sin_phase = ffrac_s(voice->tmp176_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp177_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp177_sin_phase = ffrac_s(voice->tmp177_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp178_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp178_sin_phase = ffrac_s(voice->tmp178_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp179_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp179_sin_phase = ffrac_s(voice->tmp179_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp180_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp180_sin_phase = ffrac_s(voice->tmp180_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp181_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp181_sin_phase = ffrac_s(voice->tmp181_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp182_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp182_sin_phase = ffrac_s(voice->tmp182_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp183_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp183_sin_phase = ffrac_s(voice->tmp183_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp184_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp184_sin_phase = ffrac_s(voice->tmp184_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp185_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp185_sin_phase = ffrac_s(voice->tmp185_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp186_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp186_sin_phase = ffrac_s(voice->tmp186_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp187_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp187_sin_phase = ffrac_s(voice->tmp187_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp188_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp188_sin_phase = ffrac_s(voice->tmp188_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp189_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp189_sin_phase = ffrac_s(voice->tmp189_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp190_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp190_sin_phase = ffrac_s(voice->tmp190_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp191_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp191_sin_phase = ffrac_s(voice->tmp191_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp192_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp192_sin_phase = ffrac_s(voice->tmp192_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp193_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp193_sin_phase = ffrac_s(voice->tmp193_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp194_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp194_sin_phase = ffrac_s(voice->tmp194_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp195_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp195_sin_phase = ffrac_s(voice->tmp195_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp196_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp196_sin_phase = ffrac_s(voice->tmp196_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp197_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp197_sin_phase = ffrac_s(voice->tmp197_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp198_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp198_sin_phase = ffrac_s(voice->tmp198_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp199_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp199_sin_phase = ffrac_s(voice->tmp199_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp200_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp200_sin_phase = ffrac_s(voice->tmp200_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp201_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp201_sin_phase = ffrac_s(voice->tmp201_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp202_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp202_sin_phase = ffrac_s(voice->tmp202_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp203_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp203_sin_phase = ffrac_s(voice->tmp203_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp204_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp204_sin_phase = ffrac_s(voice->tmp204_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp205_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp205_sin_phase = ffrac_s(voice->tmp205_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp206_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp206_sin_phase = ffrac_s(voice->tmp206_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp207_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp207_sin_phase = ffrac_s(voice->tmp207_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp208_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp208_sin_phase = ffrac_s(voice->tmp208_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp209_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp209_sin_phase = ffrac_s(voice->tmp209_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp210_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp210_sin_phase = ffrac_s(voice->tmp210_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp211_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp211_sin_phase = ffrac_s(voice->tmp211_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp212_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp212_sin_phase = ffrac_s(voice->tmp212_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp213_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp213_sin_phase = ffrac_s(voice->tmp213_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp214_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp214_sin_phase = ffrac_s(voice->tmp214_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp215_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp215_sin_phase = ffrac_s(voice->tmp215_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp216_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp216_sin_phase = ffrac_s(voice->tmp216_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp217_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp217_sin_phase = ffrac_s(voice->tmp217_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp218_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp218_sin_phase = ffrac_s(voice->tmp218_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp219_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp219_sin_phase = ffrac_s(voice->tmp219_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp220_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp220_sin_phase = ffrac_s(voice->tmp220_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp221_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp221_sin_phase = ffrac_s(voice->tmp221_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp222_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp222_sin_phase = ffrac_s(voice->tmp222_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp223_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp223_sin_phase = ffrac_s(voice->tmp223_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp224_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp224_sin_phase = ffrac_s(voice->tmp224_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp225_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp225_sin_phase = ffrac_s(voice->tmp225_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp226_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp226_sin_phase = ffrac_s(voice->tmp226_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp227_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp227_sin_phase = ffrac_s(voice->tmp227_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp228_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp228_sin_phase = ffrac_s(voice->tmp228_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp229_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp229_sin_phase = ffrac_s(voice->tmp229_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp230_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp230_sin_phase = ffrac_s(voice->tmp230_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp231_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp231_sin_phase = ffrac_s(voice->tmp231_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp232_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp232_sin_phase = ffrac_s(voice->tmp232_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp233_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp233_sin_phase = ffrac_s(voice->tmp233_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp234_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp234_sin_phase = ffrac_s(voice->tmp234_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp235_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp235_sin_phase = ffrac_s(voice->tmp235_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp236_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp236_sin_phase = ffrac_s(voice->tmp236_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp237_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp237_sin_phase = ffrac_s(voice->tmp237_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp238_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp238_sin_phase = ffrac_s(voice->tmp238_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp239_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp239_sin_phase = ffrac_s(voice->tmp239_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp240_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp240_sin_phase = ffrac_s(voice->tmp240_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp241_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp241_sin_phase = ffrac_s(voice->tmp241_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp242_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp242_sin_phase = ffrac_s(voice->tmp242_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp243_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp243_sin_phase = ffrac_s(voice->tmp243_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp244_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp244_sin_phase = ffrac_s(voice->tmp244_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp245_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp245_sin_phase = ffrac_s(voice->tmp245_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp246_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp246_sin_phase = ffrac_s(voice->tmp246_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp247_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp247_sin_phase = ffrac_s(voice->tmp247_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp248_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp248_sin_phase = ffrac_s(voice->tmp248_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp249_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp249_sin_phase = ffrac_s(voice->tmp249_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp250_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp250_sin_phase = ffrac_s(voice->tmp250_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp251_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp251_sin_phase = ffrac_s(voice->tmp251_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp252_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp252_sin_phase = ffrac_s(voice->tmp252_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp253_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp253_sin_phase = ffrac_s(voice->tmp253_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp254_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp254_sin_phase = ffrac_s(voice->tmp254_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp255_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp255_sin_phase = ffrac_s(voice->tmp255_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp256_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp256_sin_phase = ffrac_s(voice->tmp256_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp257_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp257_sin_phase = ffrac_s(voice->tmp257_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp258_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp258_sin_phase = ffrac_s(voice->tmp258_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp259_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp259_sin_phase = ffrac_s(voice->tmp259_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp260_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp260_sin_phase = ffrac_s(voice->tmp260_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         
         // -- mod="sin" dstVar=voice->tmp1/*delta*/
         voice->tmp3/*seq*/ = voice->tmp1/*delta*/;
         
         // ---- mod="sin" input "freq" seq 1/1
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="1" dstVar=voice->tmp6/*sin_freq*/
         voice->tmp6/*sin_freq*/ *= 1.0f;
         voice->tmp4/*sin_speed*/ = voice->note_speed_cur * voice->tmp6/*sin_freq*/;
         voice->tmp6/*sin_tmp*/ = (voice->tmp261_sin_phase);
         voice->tmp6/*sin_tmp*/ = ffrac_s(voice->tmp6/*sin_tmp*/);
         voice->tmp3/*seq*/ = cycle_sine_tbl_f[(unsigned short)(16384 * voice->tmp6/*sin_tmp*/)&16383u];
         voice->tmp261_sin_phase = ffrac_s(voice->tmp261_sin_phase + voice->tmp4/*sin_speed*/);
         
         // -- mod="$__ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp3/*seq*/
         voice->tmp4/*seq*/ = voice->tmp3/*seq*/;
         voice->tmp4/*seq*/ = voice->var___ti_evenangle_hs_1_out__v_s;
         
         // -- mod="pow" dstVar=voice->tmp4/*seq*/
         voice->tmp4/*seq*/ = voice->tmp4/*seq*/ * voice->tmp4/*seq*/;
         
         // -- mod="rcp" dstVar=voice->tmp4/*seq*/
         if(0.0f != voice->tmp4/*seq*/)
            voice->tmp4/*seq*/ = 1.0f / voice->tmp4/*seq*/;
         voice->tmp3/*seq*/ *= voice->tmp4/*seq*/;
         voice->tmp1/*delta*/ += voice->tmp3/*seq*/;
         
         // -- mod="inc __ti_evenangle_hs_1_out__v_s" dstVar=voice->tmp1/*delta*/
         voice->var___ti_evenangle_hs_1_out__v_s += 2;
         voice->var___ti_evenangle_hs_1 = voice->tmp1/*delta*/;
         
         // -- mod="$__ti_evenangle_hs_1" dstVar=out
         out = voice->var___ti_evenangle_hs_1;
         
         // ========
         // ======== lane "out" modIdx=1 modString=$m_amp
         // ========
         
         // -- mod="$m_amp" dstVar=out
         voice->tmp1/*seq*/ = out;
         voice->tmp1/*seq*/ = voice->mod_amp_cur;
         out *= voice->tmp1/*seq*/;
         
         // -- mod="clp" dstVar=out
         if(out > 0.999f) out = 0.999f;
         else if(out < -0.999f) out = -0.999f;
   
         /* end calc */

#ifdef OVERSAMPLE_FACTOR
#ifdef STEREO
         outOSL += outL;
         outOSR += outR;
#else
         outOS += out;
#endif // STEREO
#endif // OVERSAMPLE_FACTOR
         voice->note_speed_cur += voice->note_speed_inc;
         voice->note_cur       += voice->note_inc;
         voice->mod_amp_cur        += voice->mod_amp_inc;
      }
#ifdef OVERSAMPLE_FACTOR
      // Apply lowpass filter before downsampling
      //   (note) normalized Fc = F/Fs = 0.442947 / sqrt(oversample_factor^2 - 1)
#ifdef STEREO
      outL = outOSL * (1.0f / OVERSAMPLE_FACTOR);
      outR = outOSR * (1.0f / OVERSAMPLE_FACTOR);
#else
      out = outOS * (1.0f / OVERSAMPLE_FACTOR);
#endif // STEREO
#endif // OVERSAMPLE_FACTOR
#ifdef STEREO
      outL = Dstplugin_fix_denorm_32(outL);
      outR = Dstplugin_fix_denorm_32(outR);
#else
      out = Dstplugin_fix_denorm_32(out);
#endif // STEREO
#ifdef STEREO
      _samplesOut[k]      = outL;
      _samplesOut[k + 1u] = outR;
#else
      _samplesOut[k]      = out;
      _samplesOut[k + 1u] = out;
#endif // STEREO

      // Next frame
      k += 2u;
#ifdef STEREO
      j += 2u;
#else
      j += jStep;
#endif // STEREO
   } /* loop numFrames */
}

static st_plugin_shared_t *ST_PLUGIN_API loc_shared_new(st_plugin_info_t *_info) {
   evenangle_1_shared_t *ret = (evenangle_1_shared_t *)malloc(sizeof(evenangle_1_shared_t));
   if(NULL != ret)
   {
      memset((void*)ret, 0, sizeof(*ret));
      ret->base.info  = _info;
      memcpy((void*)ret->params, (void*)loc_param_resets, NUM_PARAMS * sizeof(float));
   }
   return &ret->base;
}

static void ST_PLUGIN_API loc_shared_delete(st_plugin_shared_t *_shared) {
   free((void*)_shared);
}

static st_plugin_voice_t *ST_PLUGIN_API loc_voice_new(st_plugin_info_t *_info, unsigned int _voiceIdx) {
   evenangle_1_voice_t *voice = (evenangle_1_voice_t *)malloc(sizeof(evenangle_1_voice_t));
   if(NULL != voice)
   {
      memset((void*)voice, 0, sizeof(*voice));
      voice->base.info = _info;
   }
   return &voice->base;
}

static void ST_PLUGIN_API loc_voice_delete(st_plugin_voice_t *_voice) {
   ST_PLUGIN_VOICE_CAST(evenangle_1_voice_t);

   free((void*)_voice);
   }

static void ST_PLUGIN_API loc_plugin_exit(st_plugin_info_t *_info) {
   free((void*)_info);
}

#ifdef USE_CYCLE_SINE_TBL
static void loc_calc_sine_tbl(void) {
#define QCOS_BITS 16
#define QCOS_ONE  (1 << QCOS_BITS)
#define QCOS_MASK (QCOS_ONE - 1)
   // (note) same as in TSR "C" implementation
   float *qcos = cycle_sine_tbl_f + 4096; // quarter cos tbl

   // calc quarter cos tbl
   int k = 0;
   for(int a = 0; a < (QCOS_ONE/4); a += (QCOS_ONE/16384)/*4*/)  // 4096 elements
   {
      int x = a - ((int)(QCOS_ONE * 0.25 + 0.5)) + ((a + ((int)(QCOS_ONE * 0.25 + 0.5)))&~QCOS_MASK);
      x = ((x * ((x<0?-x:x) - ((int)(QCOS_ONE * 0.5 + 0.5)))) >> QCOS_BITS) << 4;
      x += (((((int)(QCOS_ONE * 0.225 + 0.5)) * x) >> QCOS_BITS) * ((x<0?-x:x) - QCOS_ONE)) >> QCOS_BITS;
      qcos[k++] = x / float(QCOS_ONE);
   }

   // 0..90deg (rev qtbl)
   int j = 4096;
   k = 0;
   loop(4096)
      cycle_sine_tbl_f[k++] = qcos[--j];

   // 90..180deg = cos tbl
   k += 4096;

   // 180..360deg (y-flip first half of tbl)
   j = 0;
   loop(8192)
      cycle_sine_tbl_f[k++] = -cycle_sine_tbl_f[j++];

#ifdef USE_CYCLE_SINE_TBL_I
   loop(16384)
      cycle_sine_tbl_i[i] = (short)(cycle_sine_tbl_f[i] * 2048.0f/*FX_ONE*/);
#endif // USE_CYCLE_SINE_TBL_I
}
#endif // USE_CYCLE_SINE_TBL

#ifdef USE_CYCLE_HSE_TBL
#endif // USE_CYCLE_HSE_TBL

extern "C" {
st_plugin_info_t *evenangle_1_init(void) {
   evenangle_1_info_t *ret = (evenangle_1_info_t *)malloc(sizeof(evenangle_1_info_t));

   if(NULL != ret)
   {
      memset(ret, 0, sizeof(*ret));

      ret->base.api_version = ST_PLUGIN_API_VERSION;
      ret->base.id          = "evenangle_1_0xcd8bf539";  // unique id. don't change this in future builds.
      ret->base.author      = "";
      ret->base.name        = "evenangle_1";
      ret->base.short_name  = "evenangle_1";
      ret->base.flags       = ST_PLUGIN_FLAG_OSC;
      ret->base.category    = ST_PLUGIN_CAT_UNKNOWN;
      ret->base.num_params  = NUM_PARAMS;
      ret->base.num_mods    = NUM_MODS;

      ret->base.shared_new                          = &loc_shared_new;
      ret->base.shared_delete                       = &loc_shared_delete;
      ret->base.voice_new                           = &loc_voice_new;
      ret->base.voice_delete                        = &loc_voice_delete;
#ifndef CYCLE_SKIP_UI
      ret->base.get_param_name                      = &loc_get_param_name;
      ret->base.get_param_group_name                = &loc_get_param_group_name;
      ret->base.get_param_group_idx                 = &loc_get_param_group_idx;
      ret->base.get_param_section_name              = &loc_get_param_section_name;
      ret->base.get_param_section_idx               = &loc_get_param_section_idx;
      ret->base.get_param_reset                     = &loc_get_param_reset;
      ret->base.query_dynamic_param_preset_values   = &loc_query_dynamic_param_preset_values;
      ret->base.query_dynamic_param_preset_name     = &loc_query_dynamic_param_preset_name;
      ret->base.get_array_param_size                = &loc_get_array_param_size;
      ret->base.get_array_param_num_variations      = &loc_get_array_param_num_variations;
      ret->base.get_array_param_variation_ptr       = &loc_get_array_param_variation_ptr;
      ret->base.set_array_param_edit_variation_idx  = &loc_set_array_param_edit_variation_idx;
      ret->base.get_array_param_element_name        = &loc_get_array_param_element_name;
      ret->base.get_array_param_element_value_range = &loc_get_array_param_element_value_range;
      ret->base.get_array_param_element_reset       = &loc_get_array_param_element_reset;
      ret->base.update_lut                          = &loc_update_lut;
#endif // CYCLE_SKIP_UI
      ret->base.get_param_value                     = &loc_get_param_value;
      ret->base.set_param_value                     = &loc_set_param_value;
#ifndef CYCLE_SKIP_UI
      ret->base.get_mod_name                        = &loc_get_mod_name;
#endif // CYCLE_SKIP_UI
      ret->base.set_sample_rate                     = &loc_set_sample_rate;
      ret->base.set_bpm                             = &loc_set_bpm;
      ret->base.note_on                             = &loc_note_on;
      ret->base.set_mod_value                       = &loc_set_mod_value;
      ret->base.prepare_block                       = &loc_prepare_block;
      ret->base.process_replace                     = &loc_process_replace;
      ret->base.plugin_exit                         = &loc_plugin_exit;

#ifdef USE_CYCLE_SINE_TBL
      loc_calc_sine_tbl();
#endif // USE_CYCLE_SINE_TBL
   }

   return &ret->base;
}

#ifndef STFX_SKIP_MAIN_INIT
ST_PLUGIN_APICALL st_plugin_info_t *ST_PLUGIN_API st_plugin_init(unsigned int _pluginIdx) {
   switch(_pluginIdx)
   {
      case 0u:
         return evenangle_1_init();
   }
   return NULL;
}
#endif // STFX_SKIP_MAIN_INIT

} // extern "C"
