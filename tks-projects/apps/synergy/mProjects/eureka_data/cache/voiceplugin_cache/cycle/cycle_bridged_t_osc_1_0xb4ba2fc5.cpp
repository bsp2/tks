// ----
// ---- file   : bridged_t_osc_1.cpp
// ---- author : 
// ---- legal  : Distributed under terms of the MIT license (https://opensource.org/licenses/MIT)
// ----
// ----          Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// ----          associated documentation files (the "Software"), to deal in the Software without restriction, including
// ----          without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// ----          copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to
// ----          the following conditions:
// ----
// ----          The above copyright notice and this permission notice shall be included in all copies or substantial
// ----          portions of the Software.
// ----
// ----          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// ----          NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// ----          IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// ----          WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// ----          SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ----
// ---- info   : auto-generated by "Cycle"
// ----           $ g++ -Wall -Wno-unused-function -Wno-unused-variable -I../../tksampler -c bridged_t_osc_1.cpp -o bridged_t_osc_1.o
// ---- created: 22Dec2024 15:14:01
// ----
// ----
// ----

// (note) pre-define CYCLE_SKIP_UI to skip all code used only for UI/editing purposes (e.g. when compiling for standalone replay)
// #define CYCLE_SKIP_UI  defined

#include <plugin.h>

#include <stdlib.h>
#include <math.h>
#include <string.h>

#define PARAM_DCY                0
#define PARAM_TRIG_LEVEL         1
#define PARAM_BPF_FREQ           2
#define PARAM_BPF_RES            3
#define PARAM_DCY2               4
#define PARAM_DRIVE              5
#define PARAM_DRIVEMIX           6
#define NUM_PARAMS               7
#ifndef CYCLE_SKIP_UI
static const char *loc_param_names[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   +1
#endif
                                   ] = {
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   ""
#else
   "dcy",                     // 0: DCY
   "trig_level",              // 1: TRIG_LEVEL
   "bpf_freq",                // 2: BPF_FREQ
   "bpf_res",                 // 3: BPF_RES
   "dcy2",                    // 4: DCY2
   "drive",                   // 5: DRIVE
   "drivemix",                // 6: DRIVEMIX

#endif
};
#endif // CYCLE_SKIP_UI
static float loc_param_resets[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   +1
#endif
                              ] = {
#if defined(_MSC_VER) && 0 == NUM_PARAMS
   0.0f
#else
   0.99f,                     // 0: DCY
   0.25f,                     // 1: TRIG_LEVEL
   0.47f,                     // 2: BPF_FREQ
   0.01f,                     // 3: BPF_RES
   0.0f,                      // 4: DCY2
   0.0f,                      // 5: DRIVE
   0.0f,                      // 6: DRIVEMIX

#endif
};

#define MOD_DCY                  0
#define MOD_TRIG_LEVEL           1
#define MOD_BPF_FREQ             2
#define MOD_BPF_RES              3
#define MOD_DCY2                 4
#define MOD_DRIVE                5
#define MOD_DRIVEMIX             6
#define NUM_MODS                 7
#ifndef CYCLE_SKIP_UI
static const char *loc_mod_names[NUM_MODS
#if defined(_MSC_VER) && 0 == NUM_MODS
   +1
#endif
                                 ] = {
#if defined(_MSC_VER) && 0 == NUM_MODS
   ""
#else
   "dcy",                  // 0: DCY
   "trig_level",           // 1: TRIG_LEVEL
   "bpf_freq",             // 2: BPF_FREQ
   "bpf_res",              // 3: BPF_RES
   "dcy2",                 // 4: DCY2
   "drive",                // 5: DRIVE
   "drivemix",             // 6: DRIVEMIX

#endif
};
#endif // CYCLE_SKIP_UI

typedef struct bridged_t_osc_1_info_s {
   st_plugin_info_t base;
} bridged_t_osc_1_info_t;

typedef struct bridged_t_osc_1_shared_s {
   st_plugin_shared_t base;
   float params[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                +1
#endif
                ];

} bridged_t_osc_1_shared_t;

typedef struct bridged_t_osc_1_voice_s {
   st_plugin_voice_t base;
   float             sample_rate;
   float             bpm;
   float             velocity;
   float             note_speed_fixed;
   float             note_speed_cur;
   float             note_speed_inc;
   float             note_cur;
   float             note_inc;
   float             mods[NUM_MODS
#if defined(_MSC_VER) && 0 == NUM_MODS
                          +1
#endif
                          ];
   float mod_dcy_cur;
   float mod_dcy_inc;
   float mod_trig_level_cur;
   float mod_trig_level_inc;
   float mod_bpf_freq_cur;
   float mod_bpf_freq_inc;
   float mod_bpf_res_cur;
   float mod_bpf_res_inc;
   float mod_dcy2_cur;
   float mod_dcy2_inc;
   float mod_drive_cur;
   float mod_drive_inc;
   float mod_drivemix_cur;
   float mod_drivemix_inc;

   float tmp1;
   float tmp2_svf_lp;
   float tmp3_svf_hp;
   float tmp4_svf_bp;
   float tmp5;
   float tmp6;
   float tmp7;
   float tmp8;
   float var_x;
   float var_v_trig;
   float var_out__out;
   float sr_factor;

} bridged_t_osc_1_voice_t;

#define loop(X)  for(unsigned int i = 0u; i < (X); i++)
#define clamp(a,b,c) (((a)<(b))?(b):(((a)>(c))?(c):(a)))

static inline float mathLerpf(float _a, float _b, float _t) { return _a + (_b - _a) * _t; }
static inline float mathClampf(float a, float b, float c) { return (((a)<(b))?(b):(((a)>(c))?(c):(a))); }
static inline float mathMinf(float a, float b) { return (a<b)?a:b; }
static inline float mathMaxf(float a, float b) { return (a>b)?a:b; }
static inline float mathAbsMaxf(float _x, float _y) { return ( ( (_x<0.0f)?-_x:_x)>((_y<0.0f)?-_y:_y)?_x:_y ); }
static inline float mathAbsMinf(float _x, float _y) { return ( ((_x<0.0f)?-_x:_x)<((_y<0.0f)?-_y:_y)?_x:_y ); }
static inline float frac(float _x) { return _x - ((int)_x); }

static inline float winLinear(const float *_s, float _index) {
   int idx = (int)_index;
   float r = _index - (float)idx;
   return mathLerpf(_s[idx], _s[idx+1], r);
}

static float ffrac_s(float _f) { int i; if(_f >= 0.0f) { i = (int)_f; return _f - (float)i; } else { i = (int)-_f; return 1.0f - (-_f - (float)i); } }

static float loc_bipolar_to_scale(const float _t, const float _div, const float _mul) {
   // t (-1..1) => /_div .. *_mul
   
   float s;

   if(_t < 0.0f)
   {
      s = (1.0f / _div);
      s = 1.0f + (s - 1.0f) * -_t;
      if(s < 0.0f)
         s = 0.0f;
   }
   else
   {
      s = _mul;
      s = 1.0f + (s - 1.0f) * _t;
   }
   
   return s;
}

static void loc_init(st_plugin_voice_t *_voice);

void loc_init(st_plugin_voice_t *_voice) {
   ST_PLUGIN_VOICE_CAST(bridged_t_osc_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(bridged_t_osc_1_shared_t);

   float out = 0.0f;
   (void)out;
   // -------- lane "init" modIdx=0 modString=set v_trig
   
   // -- mod="set v_trig" dstVar=out
   voice->var_v_trig = 1;
} /* end init */


#ifndef CYCLE_SKIP_UI
static unsigned int loc_copy_chars(char *_d, const unsigned int _dSize, const char *_s) {
   unsigned int r = 0u;
   if(NULL != _d)
   {
      // Write min(dSize,len(s)) characters to 'd'
      char *d = _d;
      if(NULL != _s)
      {
         const char *s = _s;
         for(;;)
         {
            if(r < _dSize)
            {
               char c = s[r++];
               *d++ = c;
               if(0 == c)
                  break;
            }
            else
            {
               if(r > 0u)
                  d[-1] = 0;  // force ASCIIZ
               break;
            }
         }
      }
      else
      {
         if(_dSize > 0u)
         {
            _d[0] = 0;
            r = 1u;
         }
      }
   }
   else
   {
      // Return total length of source string
      if(NULL != _s)
      {
         const char *s = _s;
         for(;;)
         {
            char c = s[r++];
            if(0 == c)
               break;
         }
      }
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int loc_copy_floats(float              *_d,
                                    const unsigned int  _dSize,
                                    const float        *_s,
                                    const unsigned int  _sNum
                                    ) {
   unsigned int r = 0u;
   if(NULL != _d)
   {
      // Write min(dSize,sNum) characters to 'd'
      if(NULL != _s)
      {
         unsigned int num = (_sNum > _dSize) ? _dSize : _sNum;
         memcpy((void*)_d, (const void*)_s, num * sizeof(float));
         r = num;
      }
   }
   else
   {
      // Query total number of presets
      r = _sNum;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_name(st_plugin_info_t *_info,
                                                    unsigned int      _paramIdx
                                                    ) {
   (void)_info;
   return loc_param_names[_paramIdx];
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_group_name(st_plugin_info_t *_info,
                                                          unsigned int      _paramGroupIdx
                                                          ) {
   (void)_info;
   const char *r = NULL;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_param_group_idx(st_plugin_info_t *_info,
                                                          unsigned int      _paramIdx
                                                          ) {
   (void)_info;
   unsigned int r = ~0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_section_name(st_plugin_info_t *_info,
                                                            unsigned int      _paramSectionIdx
                                                            ) {
   (void)_info;
   const char *r = NULL;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_param_section_idx(st_plugin_info_t *_info,
                                                            unsigned int      _paramIdx
                                                            ) {
   (void)_info;
   unsigned int r = ~0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float ST_PLUGIN_API loc_get_param_reset(st_plugin_info_t *_info,
                                               unsigned int      _paramIdx
                                               ) {
   (void)_info;
   return loc_param_resets[_paramIdx];
}
#endif // CYCLE_SKIP_UI

static float ST_PLUGIN_API loc_get_param_value(st_plugin_shared_t *_shared,
                                               unsigned int        _paramIdx
                                               ) {
   ST_PLUGIN_SHARED_CAST(bridged_t_osc_1_shared_t);
   return shared->params[_paramIdx];
}

static void ST_PLUGIN_API loc_set_param_value(st_plugin_shared_t *_shared,
                                              unsigned int        _paramIdx,
                                              float               _value
                                              ) {
   ST_PLUGIN_SHARED_CAST(bridged_t_osc_1_shared_t);
   shared->params[_paramIdx] = _value;
}

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_query_dynamic_param_preset_values(st_plugin_shared_t *_shared,
                                                                        const unsigned int  _paramIdx,
                                                                        float              *_retValues,
                                                                        const unsigned int  _retValuesSize
                                                                        ) {
   ST_PLUGIN_SHARED_CAST(bridged_t_osc_1_shared_t);
   unsigned int r = 0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_query_dynamic_param_preset_name(st_plugin_shared_t *_shared,
                                                                      const unsigned int  _paramIdx,
                                                                      const unsigned int  _presetIdx,
                                                                      char               *_retBuf,
                                                                      const unsigned int  _retBufSize
                                                                      ) {
   ST_PLUGIN_SHARED_CAST(bridged_t_osc_1_shared_t);
   unsigned int r = 0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_array_param_size(st_plugin_info_t   *_info,
                                                           const unsigned int  _paramIdx
                                                           ) {
   unsigned int r = 0u;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_array_param_num_variations(st_plugin_info_t   *_info,
                                                                     const unsigned int  _paramIdx
                                                                     ) {
   unsigned int r = 0u;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float * ST_PLUGIN_API loc_get_array_param_variation_ptr(st_plugin_shared_t *_shared,
                                                               const unsigned int  _paramIdx,
                                                               const unsigned int  _variationIdx
                                                               ) {
   ST_PLUGIN_SHARED_CAST(bridged_t_osc_1_shared_t);
   float *r = NULL;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static void ST_PLUGIN_API loc_set_array_param_edit_variation_idx(st_plugin_shared_t *_shared,
                                                                 const unsigned int  _paramIdx,
                                                                 const int           _variationIdx
                                                                 ) {
   ST_PLUGIN_SHARED_CAST(bridged_t_osc_1_shared_t);
   switch(_paramIdx)
   {
      default:
         break;
   }
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_array_param_element_name(st_plugin_info_t   *_info,
                                                                  const unsigned int  _paramIdx,
                                                                  const unsigned int  _elementIdx
                                                                  ) {
   ST_PLUGIN_INFO_CAST(bridged_t_osc_1_info_t);
   const char *r = NULL;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static int ST_PLUGIN_API loc_get_array_param_element_value_range(st_plugin_info_t   *_info,
                                                                 const unsigned int  _paramIdx,
                                                                 const unsigned int  _elementIdx,
                                                                 float              *_retStorageMin,
                                                                 float              *_retStorageMax,
                                                                 float              *_retDisplayMin,
                                                                 float              *_retDisplayMax,
                                                                 unsigned int       *_retDisplayPrecision
                                                                 ) {
   (void)_elementIdx;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return 0;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float ST_PLUGIN_API loc_get_array_param_element_reset(st_plugin_info_t   *_info,
                                                             const unsigned int  _paramIdx,
                                                             const unsigned int  _elementIdx
                                                             ) {
   ST_PLUGIN_INFO_CAST(bridged_t_osc_1_info_t);
   float r = -999999.0f/*INVALID_VALUE*/;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static void ST_PLUGIN_API loc_update_lut(st_plugin_info_t   *_info,
                                         unsigned int        _idx,
                                         const float        *_src,
                                         const unsigned int  _srcNumElements
                                         ) {
   (void)_info;
   unsigned int copySz = 0u;
   (void)copySz;
   switch(_idx)
   {
      default:
         break;
   }
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_mod_name(st_plugin_info_t *_info,
                                                  unsigned int      _modIdx
                                                  ) {
   (void)_info;
   return loc_mod_names[_modIdx];
}
#endif // CYCLE_SKIP_UI

static void ST_PLUGIN_API loc_set_sample_rate(st_plugin_voice_t *_voice,
                                              float              _sampleRate
                                              ) {
   ST_PLUGIN_VOICE_CAST(bridged_t_osc_1_voice_t);
   if(_sampleRate != voice->sample_rate)
   {
      voice->sr_factor = 48000.0f / _sampleRate;
   }
   voice->sample_rate = _sampleRate;
}

static void ST_PLUGIN_API loc_set_bpm(st_plugin_voice_t *_voice,
                                      float              _bpm
                                      ) {
   ST_PLUGIN_VOICE_CAST(bridged_t_osc_1_voice_t);
   voice->bpm = _bpm;
}

static void ST_PLUGIN_API loc_note_on(st_plugin_voice_t  *_voice,
                                      int                 _bGlide,
                                      unsigned char       _note,
                                      float               _vel
                                      ) {
   ST_PLUGIN_VOICE_CAST(bridged_t_osc_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(bridged_t_osc_1_shared_t);
   (void)_bGlide;
   (void)_note;
   (void)_vel;
   if(!_bGlide)
   {
      memset((void*)voice->mods, 0, sizeof(voice->mods));
#ifdef OVERSAMPLE_FACTOR
      voice->note_speed_fixed = (261.63f/*C-5*/ / (voice->sample_rate * OVERSAMPLE_FACTOR));
#else
      voice->note_speed_fixed = (261.63f/*C-5*/ / voice->sample_rate);
#endif // OVERSAMPLE_FACTOR
      voice->velocity = _vel;
      voice->tmp2_svf_lp = 0.0f;
      voice->tmp3_svf_hp = 0.0f;
      voice->tmp4_svf_bp = 0.0f;
      voice->var_x = 0.0f;
      voice->var_v_trig = 0.0f;
      voice->var_out__out = 0.0f;
      loc_init(&voice->base);
   }
}

static void ST_PLUGIN_API loc_set_mod_value(st_plugin_voice_t *_voice,
                                            unsigned int       _modIdx,
                                            float              _value,
                                            unsigned           _frameOffset
                                            ) {
   ST_PLUGIN_VOICE_CAST(bridged_t_osc_1_voice_t);
   (void)_frameOffset;
   voice->mods[_modIdx] = _value;
}

static void ST_PLUGIN_API loc_prepare_block(st_plugin_voice_t *_voice,
                                            unsigned int       _numFrames,
                                            float              _freqHz,
                                            float              _note,
                                            float              _vol,
                                            float              _pan
                                            ) {
   ST_PLUGIN_VOICE_CAST(bridged_t_osc_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(bridged_t_osc_1_shared_t);
   (void)_note;
   (void)_vol;
   (void)_pan;

#ifdef OVERSAMPLE_FACTOR
   float noteSpeed = _freqHz / (voice->sample_rate * OVERSAMPLE_FACTOR);
#else
   float noteSpeed = _freqHz / voice->sample_rate;
#endif // OVERSAMPLE_FACTOR

   float moddcy          = shared->params[PARAM_DCY         ]                       + voice->mods[MOD_DCY          ];
   float modtrig_level   = shared->params[PARAM_TRIG_LEVEL  ]                       + voice->mods[MOD_TRIG_LEVEL   ];
   float modbpf_freq     = shared->params[PARAM_BPF_FREQ    ]                       + voice->mods[MOD_BPF_FREQ     ];
   float modbpf_res      = shared->params[PARAM_BPF_RES     ]                       + voice->mods[MOD_BPF_RES      ];
   float moddcy2         = shared->params[PARAM_DCY2        ]                       + voice->mods[MOD_DCY2         ];
   float moddrive        = shared->params[PARAM_DRIVE       ]                       + voice->mods[MOD_DRIVE        ];
   float moddrivemix     = shared->params[PARAM_DRIVEMIX    ]                       + voice->mods[MOD_DRIVEMIX     ];

   if(_numFrames > 0u)
   {
      // lerp
#ifdef OVERSAMPLE_FACTOR
      float recBlockSize = (1.0f / (_numFrames * OVERSAMPLE_FACTOR));
#else
      float recBlockSize = (1.0f / _numFrames);
#endif // OVERSAMPLE_FACTOR
      voice->note_speed_inc = (noteSpeed - voice->note_speed_cur) * recBlockSize;
      voice->note_inc       = (_note - voice->note_cur) * recBlockSize;
      voice->mod_dcy_inc          = (moddcy             - voice->mod_dcy_cur           ) * recBlockSize;
      voice->mod_trig_level_inc   = (modtrig_level      - voice->mod_trig_level_cur    ) * recBlockSize;
      voice->mod_bpf_freq_inc     = (modbpf_freq        - voice->mod_bpf_freq_cur      ) * recBlockSize;
      voice->mod_bpf_res_inc      = (modbpf_res         - voice->mod_bpf_res_cur       ) * recBlockSize;
      voice->mod_dcy2_inc         = (moddcy2            - voice->mod_dcy2_cur          ) * recBlockSize;
      voice->mod_drive_inc        = (moddrive           - voice->mod_drive_cur         ) * recBlockSize;
      voice->mod_drivemix_inc     = (moddrivemix        - voice->mod_drivemix_cur      ) * recBlockSize;
   }
   else
   {
      // initial params/modulation (first block, not rendered)
      voice->note_speed_cur = noteSpeed;
      voice->note_speed_inc = 0.0f;
      voice->note_cur       = _note;
      voice->note_inc       = 0.0f;
      voice->mod_dcy_cur          = moddcy;
      voice->mod_dcy_inc          = 0.0f;
      voice->mod_trig_level_cur   = modtrig_level;
      voice->mod_trig_level_inc   = 0.0f;
      voice->mod_bpf_freq_cur     = modbpf_freq;
      voice->mod_bpf_freq_inc     = 0.0f;
      voice->mod_bpf_res_cur      = modbpf_res;
      voice->mod_bpf_res_inc      = 0.0f;
      voice->mod_dcy2_cur         = moddcy2;
      voice->mod_dcy2_inc         = 0.0f;
      voice->mod_drive_cur        = moddrive;
      voice->mod_drive_inc        = 0.0f;
      voice->mod_drivemix_cur     = moddrivemix;
      voice->mod_drivemix_inc     = 0.0f;
   }

   // printf("xxx note_cur=%f\n", voice->note_cur);
   // printf("xxx prepare_block: numFrames=%u moda=%f\n", _numFrames, moda);
   // printf("xxx voice->voicebus_idx_0=%u voice->base.voice_bus_read_offset=%u\n", voice->voicebus_idx_0, voice->base.voice_bus_read_offset);
}

static void ST_PLUGIN_API loc_process_replace(st_plugin_voice_t  *_voice,
                                              int                 _bMonoIn,
                                              const float        *_samplesIn,
                                              float              *_samplesOut,
                                              unsigned int        _numFrames
                                              ) {
   (void)_bMonoIn;
   (void)_samplesIn;

   ST_PLUGIN_VOICE_CAST(bridged_t_osc_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(bridged_t_osc_1_shared_t);

   // Mono output (replicate left to right channel)
   unsigned int j = 0u;
#ifndef STEREO
   unsigned int jStep = _bMonoIn ? 1u : 2u;
#endif // STEREO
   unsigned int k = 0u;
   for(unsigned int i = 0u; i < _numFrames; i++)
   {
      const float inL = _samplesIn[j];
#ifdef STEREO
      float outL;
      float outR;
      const float inR = _samplesIn[j + 1u];
#endif // STEREO
      float out;
#ifdef OVERSAMPLE_FACTOR
#ifdef STEREO
      float outOSL = 0.0f;
      float outOSR = 0.0f;
#else
      float outOS = 0.0f;
#endif // STEREO
#endif // OVERSAMPLE_FACTOR

#ifdef OVERSAMPLE_FACTOR
      for(unsigned int osi = 0u; osi < OVERSAMPLE_FACTOR; osi++)
#endif // OVERSAMPLE_FACTOR
      {
#ifdef STEREO
         out = outL = inL;
         outR = inR;
#else
         out = inL;
#endif // STEREO
      float tmp_f; (void)tmp_f;
      float tmp2_f; (void)tmp2_f;
      
      // ========
      // ======== lane "out" modIdx=0 modString=$v_trig
      // ========
      
      // -- mod="$v_trig" dstVar=out
      out = voice->var_v_trig;
      
      // -- mod="$m_dcy" dstVar=out
      voice->tmp1/*seq*/ = out;
      voice->tmp1/*seq*/ = voice->mod_dcy_cur;
      
      // -- mod="fma" dstVar=voice->tmp1/*seq*/
      voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * 0.3f) + 0.7f;
      out *= powf(voice->tmp1/*seq*/, voice->sr_factor);
      
      // -- mod="sto v_trig" dstVar=out
      voice->var_v_trig = out;
      
      // -- mod="$m_trig_level" dstVar=out
      voice->tmp1/*seq*/ = out;
      voice->tmp1/*seq*/ = voice->mod_trig_level_cur;
      
      // -- mod="4" dstVar=voice->tmp1/*seq*/
      voice->tmp1/*seq*/ *= 4.0f;
      out *= voice->tmp1/*seq*/;
      
      // -- mod="svf" dstVar=out
      
      // ---- mod="svf" input "res" seq 1/1
      
      // -- mod="$m_bpf_res" dstVar=voice->tmp1/*res*/
      voice->tmp1/*res*/ = voice->mod_bpf_res_cur;
      
      // -- mod="0.2" dstVar=voice->tmp1/*res*/
      voice->tmp1/*res*/ *= 0.2f;
      
      // ---- mod="svf" input "freq" seq 1/1
      
      // -- mod="$m_bpf_freq" dstVar=voice->tmp5/*freq*/
      voice->tmp5/*freq*/ = voice->mod_bpf_freq_cur;
      
      // -- mod="kbd" dstVar=voice->tmp5/*freq*/
      voice->tmp6/*amt*/ = 1;
      voice->tmp7/*off*/ = 0;
      voice->tmp5/*freq*/ *= 127.0f;
      voice->tmp8/*scl*/ = 4;
      voice->tmp5/*freq*/ += (voice->note_cur + (voice->tmp7/*off*/ * 12.0f) - 64.0f) * voice->tmp6/*amt*/;
      voice->tmp5/*freq*/ = clamp(voice->tmp5/*freq*/, 0.0f, 127.0f);
      #ifdef OVERSAMPLE_FACTOR
      voice->tmp5/*freq*/ = ((440.0f/32.0f)*expf( ((voice->tmp5/*freq*/-9.0f)/12.0f)*logf(2.0f) )) / (voice->sample_rate * OVERSAMPLE_FACTOR);
      #else
      voice->tmp5/*freq*/ = ((440.0f/32.0f)*expf( ((voice->tmp5/*freq*/-9.0f)/12.0f)*logf(2.0f) )) / voice->sample_rate;
      #endif
      voice->tmp5/*freq*/ *= voice->tmp8/*scl*/;
      voice->tmp2_svf_lp = voice->tmp2_svf_lp + (voice->tmp4_svf_bp * voice->tmp5/*freq*/);
      
      // ---- mod="svf" input "postlpf" seq 1/1
      
      // -- mod="1" dstVar=voice->tmp2_svf_lp
      voice->tmp6/*seq*/ = voice->tmp2_svf_lp;
      voice->tmp6/*seq*/ = 1.0f;
      
      // -- mod="$m_dcy2" dstVar=voice->tmp6/*seq*/
      voice->tmp7/*seq*/ = voice->tmp6/*seq*/;
      voice->tmp7/*seq*/ = voice->mod_dcy2_cur;
      
      // -- mod="0.01" dstVar=voice->tmp7/*seq*/
      voice->tmp7/*seq*/ *= 0.01f;
      voice->tmp6/*seq*/ -= voice->tmp7/*seq*/;
      voice->tmp2_svf_lp *= voice->tmp6/*seq*/;
      voice->tmp3_svf_hp = out - voice->tmp2_svf_lp - (voice->tmp4_svf_bp * voice->tmp1/*res*/);
      voice->tmp4_svf_bp = voice->tmp4_svf_bp + (voice->tmp3_svf_hp * voice->tmp5/*freq*/);
      out = voice->tmp4_svf_bp;
      
      // -- mod="set out__out" dstVar=out
      voice->var_out__out = out;
      
      // -- mod="ipl" dstVar=out
      voice->tmp1/*b*/ = out;
      
      // ---- mod="ipl" input "b" seq 1/1
      
      // -- mod="$out__out" dstVar=voice->tmp1/*b*/
      voice->tmp1/*b*/ = voice->var_out__out;
      
      // -- mod="$m_drive" dstVar=voice->tmp1/*b*/
      voice->tmp5/*seq*/ = voice->tmp1/*b*/;
      voice->tmp5/*seq*/ = voice->mod_drive_cur;
      
      // -- mod="fma" dstVar=voice->tmp5/*seq*/
      voice->tmp5/*seq*/ = (voice->tmp5/*seq*/ * 2.0f) + -1.0f;
      
      // -- mod="bts" dstVar=voice->tmp5/*seq*/
      voice->tmp5/*seq*/ = loc_bipolar_to_scale(voice->tmp5/*seq*/, 16.0f, 2.0f);
      voice->tmp1/*b*/ *= voice->tmp5/*seq*/;
      
      // -- mod="tanh" dstVar=voice->tmp1/*b*/
      voice->tmp1/*b*/ = tanhf(voice->tmp1/*b*/);
      voice->tmp5/*t*/ = out;
      
      // ---- mod="ipl" input "t" seq 1/1
      
      // -- mod="$m_drivemix" dstVar=voice->tmp5/*t*/
      voice->tmp5/*t*/ = voice->mod_drivemix_cur;
      out = out + (voice->tmp1/*b*/ - out) * voice->tmp5/*t*/;

      /* end calc */

#ifdef OVERSAMPLE_FACTOR
#ifdef STEREO
         outOSL += outL;
         outOSR += outR;
#else
         outOS += out;
#endif // STEREO
#endif // OVERSAMPLE_FACTOR
         voice->note_speed_cur += voice->note_speed_inc;
         voice->note_cur       += voice->note_inc;
         voice->mod_dcy_cur        += voice->mod_dcy_inc;
         voice->mod_trig_level_cur  += voice->mod_trig_level_inc;
         voice->mod_bpf_freq_cur   += voice->mod_bpf_freq_inc;
         voice->mod_bpf_res_cur    += voice->mod_bpf_res_inc;
         voice->mod_dcy2_cur       += voice->mod_dcy2_inc;
         voice->mod_drive_cur      += voice->mod_drive_inc;
         voice->mod_drivemix_cur   += voice->mod_drivemix_inc;
      }
#ifdef OVERSAMPLE_FACTOR
      // Apply lowpass filter before downsampling
      //   (note) normalized Fc = F/Fs = 0.442947 / sqrt(oversample_factor^2 - 1)
#ifdef STEREO
      outL = outOSL * (1.0f / OVERSAMPLE_FACTOR);
      outR = outOSR * (1.0f / OVERSAMPLE_FACTOR);
#else
      out = outOS * (1.0f / OVERSAMPLE_FACTOR);
#endif // STEREO
#endif // OVERSAMPLE_FACTOR
#ifdef STEREO
      outL = Dstplugin_fix_denorm_32(outL);
      outR = Dstplugin_fix_denorm_32(outR);
#else
      out = Dstplugin_fix_denorm_32(out);
#endif // STEREO
#ifdef STEREO
      _samplesOut[k]      = outL;
      _samplesOut[k + 1u] = outR;
#else
      _samplesOut[k]      = out;
      _samplesOut[k + 1u] = out;
#endif // STEREO

      // Next frame
      k += 2u;
#ifdef STEREO
      j += 2u;
#else
      j += jStep;
#endif // STEREO
   } /* loop numFrames */
}

static st_plugin_shared_t *ST_PLUGIN_API loc_shared_new(st_plugin_info_t *_info) {
   bridged_t_osc_1_shared_t *ret = (bridged_t_osc_1_shared_t *)malloc(sizeof(bridged_t_osc_1_shared_t));
   if(NULL != ret)
   {
      memset((void*)ret, 0, sizeof(*ret));
      ret->base.info  = _info;
      memcpy((void*)ret->params, (void*)loc_param_resets, NUM_PARAMS * sizeof(float));
   }
   return &ret->base;
}

static void ST_PLUGIN_API loc_shared_delete(st_plugin_shared_t *_shared) {
   free((void*)_shared);
}

static st_plugin_voice_t *ST_PLUGIN_API loc_voice_new(st_plugin_info_t *_info, unsigned int _voiceIdx) {
   bridged_t_osc_1_voice_t *voice = (bridged_t_osc_1_voice_t *)malloc(sizeof(bridged_t_osc_1_voice_t));
   if(NULL != voice)
   {
      memset((void*)voice, 0, sizeof(*voice));
      voice->base.info = _info;
   }
   return &voice->base;
}

static void ST_PLUGIN_API loc_voice_delete(st_plugin_voice_t *_voice) {
   ST_PLUGIN_VOICE_CAST(bridged_t_osc_1_voice_t);

   free((void*)_voice);
   }

static void ST_PLUGIN_API loc_plugin_exit(st_plugin_info_t *_info) {
   free((void*)_info);
}

#ifdef USE_CYCLE_SINE_TBL
static void loc_calc_sine_tbl(void) {
#define QCOS_BITS 16
#define QCOS_ONE  (1 << QCOS_BITS)
#define QCOS_MASK (QCOS_ONE - 1)
   // (note) same as in TSR "C" implementation
   float *qcos = cycle_sine_tbl_f + 4096; // quarter cos tbl

   // calc quarter cos tbl
   int k = 0;
   for(int a = 0; a < (QCOS_ONE/4); a += (QCOS_ONE/16384)/*4*/)  // 4096 elements
   {
      int x = a - ((int)(QCOS_ONE * 0.25 + 0.5)) + ((a + ((int)(QCOS_ONE * 0.25 + 0.5)))&~QCOS_MASK);
      x = ((x * ((x<0?-x:x) - ((int)(QCOS_ONE * 0.5 + 0.5)))) >> QCOS_BITS) << 4;
      x += (((((int)(QCOS_ONE * 0.225 + 0.5)) * x) >> QCOS_BITS) * ((x<0?-x:x) - QCOS_ONE)) >> QCOS_BITS;
      qcos[k++] = x / float(QCOS_ONE);
   }

   // 0..90deg (rev qtbl)
   int j = 4096;
   k = 0;
   loop(4096)
      cycle_sine_tbl_f[k++] = qcos[--j];

   // 90..180deg = cos tbl
   k += 4096;

   // 180..360deg (y-flip first half of tbl)
   j = 0;
   loop(8192)
      cycle_sine_tbl_f[k++] = -cycle_sine_tbl_f[j++];

#ifdef USE_CYCLE_SINE_TBL_I
   loop(16384)
      cycle_sine_tbl_i[i] = (short)(cycle_sine_tbl_f[i] * 2048.0f/*FX_ONE*/);
#endif // USE_CYCLE_SINE_TBL_I
}
#endif // USE_CYCLE_SINE_TBL

#ifdef USE_CYCLE_HSE_TBL
#endif // USE_CYCLE_HSE_TBL

extern "C" {
st_plugin_info_t *bridged_t_osc_1_init(void) {
   bridged_t_osc_1_info_t *ret = (bridged_t_osc_1_info_t *)malloc(sizeof(bridged_t_osc_1_info_t));

   if(NULL != ret)
   {
      memset(ret, 0, sizeof(*ret));

      ret->base.api_version = ST_PLUGIN_API_VERSION;
      ret->base.id          = "bridged_t_osc_1_0xb4ba2fc5";  // unique id. don't change this in future builds.
      ret->base.author      = "";
      ret->base.name        = "bridged_t_osc_1";
      ret->base.short_name  = "bridged_t_osc_1";
      ret->base.flags       = ST_PLUGIN_FLAG_OSC;
      ret->base.category    = ST_PLUGIN_CAT_UNKNOWN;
      ret->base.num_params  = NUM_PARAMS;
      ret->base.num_mods    = NUM_MODS;

      ret->base.shared_new                          = &loc_shared_new;
      ret->base.shared_delete                       = &loc_shared_delete;
      ret->base.voice_new                           = &loc_voice_new;
      ret->base.voice_delete                        = &loc_voice_delete;
#ifndef CYCLE_SKIP_UI
      ret->base.get_param_name                      = &loc_get_param_name;
      ret->base.get_param_group_name                = &loc_get_param_group_name;
      ret->base.get_param_group_idx                 = &loc_get_param_group_idx;
      ret->base.get_param_section_name              = &loc_get_param_section_name;
      ret->base.get_param_section_idx               = &loc_get_param_section_idx;
      ret->base.get_param_reset                     = &loc_get_param_reset;
      ret->base.query_dynamic_param_preset_values   = &loc_query_dynamic_param_preset_values;
      ret->base.query_dynamic_param_preset_name     = &loc_query_dynamic_param_preset_name;
      ret->base.get_array_param_size                = &loc_get_array_param_size;
      ret->base.get_array_param_num_variations      = &loc_get_array_param_num_variations;
      ret->base.get_array_param_variation_ptr       = &loc_get_array_param_variation_ptr;
      ret->base.set_array_param_edit_variation_idx  = &loc_set_array_param_edit_variation_idx;
      ret->base.get_array_param_element_name        = &loc_get_array_param_element_name;
      ret->base.get_array_param_element_value_range = &loc_get_array_param_element_value_range;
      ret->base.get_array_param_element_reset       = &loc_get_array_param_element_reset;
      ret->base.update_lut                          = &loc_update_lut;
#endif // CYCLE_SKIP_UI
      ret->base.get_param_value                     = &loc_get_param_value;
      ret->base.set_param_value                     = &loc_set_param_value;
#ifndef CYCLE_SKIP_UI
      ret->base.get_mod_name                        = &loc_get_mod_name;
#endif // CYCLE_SKIP_UI
      ret->base.set_sample_rate                     = &loc_set_sample_rate;
      ret->base.set_bpm                             = &loc_set_bpm;
      ret->base.note_on                             = &loc_note_on;
      ret->base.set_mod_value                       = &loc_set_mod_value;
      ret->base.prepare_block                       = &loc_prepare_block;
      ret->base.process_replace                     = &loc_process_replace;
      ret->base.plugin_exit                         = &loc_plugin_exit;

#ifdef USE_CYCLE_SINE_TBL
      loc_calc_sine_tbl();
#endif // USE_CYCLE_SINE_TBL
   }

   return &ret->base;
}

#ifndef STFX_SKIP_MAIN_INIT
ST_PLUGIN_APICALL st_plugin_info_t *ST_PLUGIN_API st_plugin_init(unsigned int _pluginIdx) {
   switch(_pluginIdx)
   {
      case 0u:
         return bridged_t_osc_1_init();
   }
   return NULL;
}
#endif // STFX_SKIP_MAIN_INIT

} // extern "C"
