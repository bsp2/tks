// ----
// ---- file   : NMM_ScriptEntryDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2017-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- created: 11Mar2017
// ---- changed: 12Mar2017, 05Jun2017, 24Mar2023
// ----
// ----
// ----
module MNMM_ScriptEntryDialog;

use namespace ui;


// <class.png>
class NMM_ScriptEntryDialog extends TextInputDialog {
   define String ACTION_SELECTPREVIOUSENTRY;
   define String ACTION_SELECTNEXTENTRY;

   public static NewHold(String _caption, String _message, String _btOkCaption, String _btCancelCaption,
                         String _defaultText, int _maxCols, int _visCols,
                         ActionConsumer _recipient
                         ) : NMM_ScriptEntryDialog {
      local NMM_ScriptEntryDialog d;
      d.initTextInputDialog(deref _caption, deref _message, _btOkCaption, _btCancelCaption, _defaultText, _maxCols, _visCols, "textinput", true, _recipient);
      d.postInitScriptEntryDialog();
      return deref d;
   }

   public method postInitScriptEntryDialog() {
      textfield.setEnableCursorUpDown(true);
   }

   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_TEXTINPUTDIALOGCLOSED,
              ACTION_TEXTINPUTDIALOGCLOSED_HOLD,
              ACTION_TEXTINPUTDIALOGEDITED,
              ACTION_TEXTINPUTDIALOGCANCELED,
              ACTION_SELECTPREVIOUSENTRY,
              ACTION_SELECTNEXTENTRY,
              ];
   }

   public virtual onKey(Key _k) : boolean {

      switch(_k.pressed)
      {
         case 'f':
            if(_k.modCtrl())
            {
               hide();
               return true;
            }
            break;
      }

      return TextInputDialog::onKey(_k);
   }

   public virtual consumeAction(Action _ac) : boolean {
      String name = _ac.getActionName();
      switch(name)
      {
         case TextField.ACTION_CURSORUP:
            if(null != recipient)
               recipient.consumeAction(Action.New(getProvidedActionAlias(ACTION_SELECTPREVIOUSENTRY), this));
            return true;

         case TextField.ACTION_CURSORDOWN:
            if(null != recipient)
               recipient.consumeAction(Action.New(getProvidedActionAlias(ACTION_SELECTNEXTENTRY), this));
            return true;
      }
      return TextInputDialog::consumeAction(deref _ac);
   }

}
