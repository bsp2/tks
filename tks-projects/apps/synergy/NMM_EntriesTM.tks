// ----
// ---- file   : NMM_EntriesTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2015-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 30Oct2015
// ---- changed: 31Oct2015, 01Nov2015, 07Nov2015, 28Feb2025
// ----
// ----
// ----

module MNMM_EntriesTM;

use namespace ui;
use namespace st2;


class NMM_EntriesTM : TableModel {

   define int COL_ID      = 0;
   define int COL_NAME    = 1;
   define int COL_ENABLE  = 2;
   define int COL_DST     = 3;
   define int COL_CH      = 4;
   define int COL_OP      = 5;
   define int COL_TYPES   = 6;

   NodeModMatrixEditor *parent_editor;
   NodeModMatrix *parent_node;


   public virtual getNumColumns() : int {
      return 6;
   }

   public virtual getColumnCaption(int _col) : String {
      return ["#", "Name", "Play", "Destination", "Ch", "Op", "Types"][_col];
   }

   public virtual getNumRows() : int {
      if(null != parent_editor)
      {
         NMM_Pattern pat <= parent_editor.getEditPattern();

         if(null != pat)
         {
            return pat.getNumEntries();
         }
      }
      return 0;
   }

   public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
      Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);
      lb.setIcon(null);

      if(COL_NAME == _col)
      {
         lb.setFontByName("big7");
      }
      else if(COL_ENABLE == _col)
      {
         NMM_Pattern pat <= parent_editor.getEditPattern();

         if(null != pat)
         {
            NMM_Entry en <= pat.getEntry(_row);

            if(null != en)
            {
               if(en.b_op)
               {
                  lb.setIcon(UI.GetIcon("mgrctl_celvis_2x"));
                  lb.setCaption("");
               }
            }
         }
      }
      else if((COL_DST == _col) || (COL_CH == _col))
      {
         lb.setFontByName("big8");
      }
      else if(COL_TYPES != _col)
      {
         lb.setFontByName(UIConstants.DEFAULT_FONT_NAME_LABEL);
      }

      return lb;
   }

   public virtual getCellCaption(int _col, _row) : String {

      NMM_Pattern pat <= parent_editor.getEditPattern();

      if(null != pat)
      {
         NMM_Entry en <= pat.getEntry(_row);

         if(null != en)
         {
            switch(_col)
            {
               case COL_ID:
                  return String(_row + 1);

               case COL_NAME:
                  return en.name;

               case COL_ENABLE:
                  return "";

               case COL_DST:
                  return en.getDstName();

               case COL_CH:
                  return (en.arg_dst.dev_ch) + 1;

               case COL_OP:
                  return NMM_Entry.op_names.get(en.op);

               case COL_TYPES:
                  return en.getTypesString();
            }
         }
      }
   }

   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 16;

         case COL_NAME:
            return 120;

         case COL_ENABLE:
            return 24;

         case COL_DST:
            return 120;

         case COL_CH:
            return 16;

         case COL_OP:
            return 64;

         case COL_TYPES:
            return 100;
      }
   }

   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 16;

         case COL_NAME:
            return 140;

         case COL_ENABLE:
            return 24;

         case COL_DST:
            return 120;

         case COL_CH:
            return 16;

         case COL_OP:
            return 64;

         case COL_TYPES:
            return 150;
      }
   }

   public virtual handleCellOnMouse(int _col, int _row, MouseEvent _ev) : boolean {
      if(null != parent_node)
      {
         if(COL_ENABLE == _col)
         {
            if(_ev.leftButtonDown())
            {
               NMM_Pattern pat <= parent_editor.getEditPattern();

               if(null != pat)
               {
                  NMM_Entry en <= pat.getEntry(_row);

                  if(null != en)
                  {
                     en.setEnableOp(!en.b_op);

                     Global.Print("Op is "+Utils.GetEnableString(en.b_op));

                     parent_editor.updateOpEnable();
                  }
               }
               return true;
            }
         }

      }
      return false;
   }
}
