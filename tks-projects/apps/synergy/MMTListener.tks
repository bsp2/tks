// ----
// ---- file   : MMTListener.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2014-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 11Aug2014
// ---- changed: 12Aug2014, 15Aug2014, 18Aug2014, 21Aug2014, 22Aug2014, 05Sep2014, 14Sep2014
// ----          16Sep2014, 23Sep2014, 29Sep2014, 24Feb2015, 04Jan2018, 12Jun2023, 27Oct2023
// ----
// ----
// ----

module MMMTListener;

use namespace ui;
use namespace st2;


// <class.png>
class MMTListener {


   // <method.png>
   public static MMTHandleLayerValue(Layer _l, float _val) : boolean {

      if(_l instanceof FloatParam)
      {
         FloatParam fp <= _l;
         if(fp.isEditable())
         {
            fp.setValue( (fp.getMinValue() + ((fp.getMaxValue() - fp.getMinValue()) * _val)) );
            fp.handleValueChanging();
         }
         return true;
      }
      else if(_l instanceof ComboBox)
      {
         ComboBox cm <= _l;
         if(cm.isEditable())
            cm.setSelectedOptionAction( (cm.getNumOptions() - 1) * _val);
         return true;
      }
      else if(_l instanceof CheckBox)
      {
         CheckBox cb <= _l;
         if(cb.isEditable())
            cb.setSelectedAction(_val >= 0.5f);
         return true;
      }

      return false;
   }

   // <method.png>
   public static MMTHandleLayerValueDelta(Layer _l, int _delta) : boolean {

      if(_l instanceof FloatParam)
      {
         FloatParam fp <= _l;
         if(fp.isEditable())
         {
            if(_delta < 0)
            {
               loop(-_delta)
                  fp.decFine();
            }
            else if(_delta > 0)
            {
               loop(_delta)
                  fp.incFine();
            }
         }
         return true;
      }
      else if(_l instanceof ComboBox)
      {
         ComboBox cm <= _l;
         if(cm.isEditable())
         {
            if(_delta < 0)
            {
               loop(-_delta)
                  cm.selectPreviousOptionAction();
            }
            else if(_delta > 0)
            {
               loop(_delta)
                  cm.selectNextOptionAction();
            }
         }
         return true;
      }
      else if(_l instanceof CheckBox)
      {
         CheckBox cb <= _l;
         if(cb.isEditable())
         {
            if(0 != _delta)
               cb.toggleSelectionAction();
         }
         return true;
      }
      else if(_l instanceof Button)
      {
         if(0 != _delta)
         {
            Button bt <= _l;
            if( bt.isEditable() && (bt.isToggle() || bt.allowDeltaClick()) )
            {
               if(bt.isToggle())
                  bt.toggleSelectionAction();
               else
                  bt.handleButtonClick(null/*ev*/);
            }
         }
         return true;
      }

      return false;
   }

   // <method_handle.png>
   public method mmtHandleGlobalEvent(String _targetName) : boolean {
      return false;
   }

   // <method_handle.png>
   public method mmtHandleGlobalValueDefault(float _val) : boolean {
      Layer l <= UI.GetKeyboardFocus();
      return MMTHandleLayerValue(l, _val);
   }

   // <method_handle.png>
   public method mmtHandleGlobalValue(float _val) : boolean {
      return mmtHandleGlobalValueDefault(_val);
   }

   // <method_handle.png>
   public method mmtHandleGlobalValueDeltaDefault(int _delta) : boolean {
      Layer l <= UI.GetKeyboardFocus();
      // // trace "xxx mmtHandleGlobalValueDeltaDefault: l="+#(l)+" delta="+_delta;
      return MMTHandleLayerValueDelta(l, _delta);
   }

   // <method_handle.png>
   public method mmtHandleGlobalValueDelta(int _delta) : boolean {
      return mmtHandleGlobalValueDeltaDefault(_delta);
   }

   // <method_handle.png>
   public static MMTHandleLayerEvent(Layer _l, MIDIMapEvent _ev, boolean _bInv) : boolean {
      if(MIDIMapDefs.CLASS_DELTA == _ev.class_type)
      {
         return MMTHandleLayerValueDelta(_l, _ev.getDeltaValue());
      }
      else
      {
         float val = _ev.getNormalizedFloatValue();

         if(_bInv)
            val = 1.0f - val;

         return MMTHandleLayerValue(_l, val);
      }
   }

   // <method_handle.png>
   public static MMTHandleLayerInc(Layer _l) : boolean {
      if(_l instanceof FloatParam)
      {
         FloatParam fp <= _l;
         fp.incFine();
         return true;
      }
      else if(_l instanceof ComboBox)
      {
         ComboBox cm <= _l;
         cm.selectNextOptionAction();
         return true;
      }
      else if(_l instanceof CheckBox)
      {
         CheckBox cb <= _l;
         cb.toggleSelectionAction();
         return true;
      }

      return false;
   }

   // <method_handle.png>
   public static MMTHandleLayerDec(Layer _l) : boolean {
      if(_l instanceof FloatParam)
      {
         FloatParam fp <= _l;
         fp.decFine();
         return true;
      }
      else if(_l instanceof ComboBox)
      {
         ComboBox cm <= _l;
         cm.selectPreviousOptionAction();
         return true;
      }

      return false;
   }

   // <method_get.png>
   public method mmtGetFocusLayers() : PointerArray {
   }

   // <method_handle.png>
   public method mmtHandleFocus(float _val) {
      PointerArray layers <= mmtGetFocusLayers();
      if(null != layers)
         UI.SetKeyboardTabFocus(mmtSelectFocusLayer(layers, _val));
   }

   // <method.png>
   protected method filterNonEditableLayers(PointerArray _allLayers, PointerArray _newLayers, int _idx) : int {
      _newLayers.empty();

      Layer *l;

      int curIdx = 0;
      int retIdx = _idx;
      foreach l in _allLayers
      {
         if(null != l)
         {
            if(l.wantKeyboardFocus())
            {
               _newLayers.add(l);
            }
            else if(_idx >= curIdx)
            {
               retIdx--;
            }
         }
         else if(_idx >= curIdx)
         {
            retIdx--;
         }
         curIdx++;
      }

      return retIdx;
   }

   // <method_handle.png>
   public method mmtHandleFocusDelta(int _delta) {
      PointerArray allLayers <= mmtGetFocusLayers();

      if(null != allLayers)
      {
         Layer kbdLayer <= UI.GetKeyboardFocus();
         int idx = allLayers.indexOfPointer(kbdLayer, 0);

         PointerArray layers;
         idx = filterNonEditableLayers(allLayers, layers, idx);

         // // if(layers.get(idx) != kbdLayer)
         // // {
         // //    trace "xxx filterNonEditableLayers: kbdlayer not at idx="+idx+" !!! (found at "+layers.indexOfPointer(kbdLayer, 0)+")";
         // // }

         // // trace "xxx mmtHandleFocusDelta: flt idx="+idx;
         // // trace "xxx #nonEditable="+(allLayers.numElements - layers.numElements);

         if(-1 == idx)
         {
            Global.Debug("MMTListener::mmtHandleFocusDelta: kbdfocus not found in layers list, using center idx.");
            idx = layers.numElements / 2;
         }

         if(-1 != idx)
         {
            Layer l <= layers.get(idx);

            if(_delta > 0)
            {
               loop(_delta)
               {
                  idx++;
                  if(idx < layers.numElements)
                     l <= layers.get(idx);
                  else
                     break;
               }
            }
            else if(_delta < 0)
            {
               loop(-_delta)
               {
                  idx--;
                  if(idx >= 0)
                     l <= layers.get(idx);
               }
            }

            if(null != l)
               UI.SetKeyboardTabFocus(l);
         }
      }
   }

   // <method.png>
   public method mmtSelectFocusLayer(PointerArray _layers, float _val) {
      PointerArray layers;
      filterNonEditableLayers(_layers, layers, -1);
      int idx = layers.numElements * (1.0f - _val);
      return layers.get(idx >= layers.numElements ? idx -1 : idx);
   }

   // <method.png>
   public method mmtSelectTableRow(TableModel _tm, float _val) : int {
      int idx = _tm.getNumRows() * (1.0f - _val);
      return (idx >= _tm.getNumRows() ? idx -1 : idx);
   }

   // <method.png>
   public method mmtSelectTableRowDelta(TableView _tv, int _delta) {
      if(_delta > 0)
      {
         loop(_delta)
            _tv.moveCursorToNextRow();
      }
      else if(_delta < 0)
      {
         loop(-_delta)
            _tv.moveCursorToPreviousRow();
      }
   }

}
