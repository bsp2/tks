// ----
// ---- file   : CM_CyclicMorphDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2017-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 27May2017
// ---- changed: 17May2020, 05Oct2023, 30Oct2023
// ----
// ----
// ----

module MCM_CyclicMorphDialog;

use namespace ui;


class CM_CyclicMorphDialog extends Dialog, ActionProvider, MMTListener {

   define String ACTION_CM_GENERATE;
   define String ACTION_CM_CANCEL;

   protected XMLForm *xfm;

   protected ActionConsumer *recipient;

   protected FloatParam *fp_range;
   protected ComboBox   *cm_off;
   protected CheckBox   *cb_all;

   protected Button *bt_generate;
   protected Button *bt_cancel;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("CM_CyclicMorphDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      initWindow(xfm,
                 "Cyclic Morph Generator",
                 100, 100,
                 640, 100
                 );

      cm_off.setOptions(Node.patnr_options);

      return true;
   }

   public method setRecipient(ActionConsumer _ac) {
      recipient <= _ac;
   }

   public method setOffsetAndRange(int _off, int _range) {
      cm_off.setSelectedOption(_off);
      fp_range.setValue(_range);
   }

   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_CM_GENERATE, ACTION_CM_CANCEL];
   }

   public virtual isPopup() : boolean {
      return true;
   }

   public virtual isModal():boolean {
      return true;
   }

   public virtual isResizable() : boolean {
      return false;
   }

   // <ui_show.png>
   protected virtual preShow() {

      if(!b_layer_postinit_done)
         resizeToMinimum();

      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      UI.SetKeyboardFocus(bt_generate);
   }

   // <ui_handle.png>
   protected method handleCancel() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         StringAction ac <= Action.New(getProvidedActionAlias(ACTION_CM_CANCEL), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <ui_handle.png>
   protected method handleGenerate() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         StringAction ac <= Action.New(getProvidedActionAlias(ACTION_CM_GENERATE), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <method_get.png>
   public method getOffset() : int {
      return cm_off.getSelectedOption();
   }

   // <method_get.png>
   public method getRange() : int {
      return fp_range.getFloatValue();
   }

   // <method_get.png>
   public method getEnableAllGroups() : boolean {
      return cb_all.isSelected();
   }

   // <ui_kbd.png>
   public virtual onKey(Key _key) returns boolean {
      switch(_key.pressed)
      {
         case VKEY_ESCAPE:
            handleCancel();
            return true;

         case VKEY_RETURN:
         case VKEY_SPACE:
            handleGenerate();
            return true;

         default:
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) returns boolean {
      String name=_ac.getActionName();

      switch(name)
      {
         case "ok":
            handleGenerate();
            break;

         case "cancel":
            handleCancel();
            break;
      }

      switch(@(_ac.getActionProvider()))
      {
         case @(bt_generate):
             handleGenerate();
             return true;

         case @(bt_cancel):
             handleCancel();
             return true;
      }

      return true;
   }

}
