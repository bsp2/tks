// ----
// ---- file   : NTS_ImportMonDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 25Apr2020
// ---- changed: 09May2020, 04Oct2023, 30Oct2023, 28Feb2025
// ----
// ----
// ----

module MNTS_ImportMonDialog;

use namespace ui;


// <class.png>
class NTS_ImportMonDialog extends Dialog, ActionProvider, MMTListener {

   define String ACTION_MON_IMPORT;
   define String ACTION_MON_CANCEL;

   protected XMLForm *xfm;

   protected ActionConsumer *recipient;

   public NM_Pattern *import_pattern;

   protected CheckBox *cb_guess_mnn;
   protected CheckBox *cb_prefer_global_out;

   protected Button *bt_import;
   protected Button *bt_cancel;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("NTS_ImportMonDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      initWindow(xfm,
                 "Import Monitor Pattern Clipboard",
                 100, 100,
                 640, 240
                 );

      return true;
   }

   public method setRecipient(ActionConsumer _ac) {
      recipient <= _ac;
   }

   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_MON_IMPORT, ACTION_MON_CANCEL];
   }

   public virtual isPopup() : boolean {
      return true;
   }

   public virtual isModal():boolean {
      return true;
   }

   public virtual isResizable() : boolean {
      return false;
   }

   // <ui_show.png>
   protected virtual preShow() {

      if(!b_layer_postinit_done)
         resizeToMinimum();

      // Query current Monitor pattern clipboard
      local NM_Pattern monPat;
      import_pattern <= monPat.patGetClipboard();

      bt_import.setEditable( (null != import_pattern) );

      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      UI.SetKeyboardFocus( (null != import_pattern) ? bt_import : bt_cancel);
   }

   // <ui_handle.png>
   protected method handleCancel() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         StringAction ac <= Action.New(getProvidedActionAlias(ACTION_MON_CANCEL), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <ui_handle.png>
   protected method handleImport() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         StringAction ac <= Action.New(getProvidedActionAlias(ACTION_MON_IMPORT), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <method_get.png>
   public method doGuessNoteNameProfile() : boolean {
      return cb_guess_mnn.isSelected();
   }

   // <method_get.png>
   public method doPreferGlobalOut() : boolean {
      return cb_prefer_global_out.isSelected();
   }

   // <ui_kbd.png>
   public virtual onKey(Key _key) : boolean {
      switch(_key.pressed)
      {
         case VKEY_ESCAPE:
            handleCancel();
            return true;

         case VKEY_RETURN:
         case VKEY_SPACE:
            handleImport();
            return true;

         default:
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String name=_ac.getActionName();

      switch(name)
      {
         case "ok":
            handleImport();
            break;

         case "cancel":
            handleCancel();
            break;
      }

      switch(@(_ac.getActionProvider()))
      {
         case @(bt_import):
             handleImport();
             return true;

         case @(bt_cancel):
             handleCancel();
             return true;
      }

      return true;
   }

}
