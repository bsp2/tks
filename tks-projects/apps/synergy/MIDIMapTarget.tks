// ----
// ---- file   : MIDIMapTarget.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2014-2021 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 14Aug2014
// ---- changed: 15Aug2014, 15Sep2014, 16Sep2014, 22Sep2014, 29Sep2014, 18Dec2021
// ----
// ----
// ----

module MMIDIMapTarget;

use namespace st2;


// <class.png>
class MIDIMapTarget : MIDIMapDefs {

   String target_name; // e.g. "Global.yes"

   // (note) MIDIMapEvents to be bound to this target have to match the class/syn types

   byte class_type;  // see MIDIMapEventType.class_type
   byte syn_type;    // see MIDIMapEventType.syn_type
   int  delta_mod;   // only trigger on every nth event

   String short_name;  // e.g. for Push
   String long_name;
   int    dpy_type;

   public Object *linked_object;  // for mmcPushGetEncValueString(). can be null.


   public method canBind(MIDIMapEvent _ev) : boolean {
      // trace "xxx canBind: class_type="+class_type+" _ev.class_type="+_ev.class_type;

      if(class_type == _ev.class_type)
      {
         switch(class_type)
         {
            case CLASS_VALUE:
               return true;

            case CLASS_DELTA:
               return (TYPE_CC == _ev.type);

            case CLASS_BUTTON:
               switch(syn_type)
               {
                  case SYN_BUTTON_MOD:
                     return
                        (SYN_BUTTON_CLICK      == _ev.syn_type) ||
                        (SYN_BUTTON_HOLD_BEGIN == _ev.syn_type) ||
                        (SYN_BUTTON_HOLD_END   == _ev.syn_type) ;

                  case SYN_BUTTON_CLICK:
                  case SYN_BUTTON_SELECT:
                     return
                        (SYN_BUTTON_CLICK == _ev.syn_type) ||
                        (SYN_BUTTON_HOLD_END == _ev.syn_type) ;  // long click

                  case SYN_BUTTON_HOLD_BEGIN:
                     return
                        (SYN_BUTTON_CLICK      == _ev.syn_type) ||
                        (SYN_BUTTON_HOLD_BEGIN == _ev.syn_type) ||
                        (SYN_BUTTON_HOLD_END   == _ev.syn_type) ;

                  case SYN_BUTTON_KEYREPEAT:
                  case SYN_BUTTON_REPEAT:
                     return
                        // // (SYN_BUTTON_REPEAT     == _ev.syn_type) ||
                        (SYN_BUTTON_CLICK      == _ev.syn_type) ||
                        (SYN_BUTTON_HOLD_BEGIN == _ev.syn_type) ||
                        (SYN_BUTTON_HOLD_END   == _ev.syn_type) ;
               }
               break;
         }
      }

      return false;
   }

   public method getTargetTypeName() : String {
      switch(class_type)
      {
         case CLASS_VALUE:
            return "Value";

         case CLASS_DELTA:
            return "Delta";

         case CLASS_BUTTON:
            switch(syn_type)
            {
               case SYN_BUTTON_MOD:
                  return "Button Mod";

               case SYN_BUTTON_CLICK:
                  return "Button Click";

               case SYN_BUTTON_HOLD_BEGIN:
                  return "Button Hold Mod";

               case SYN_BUTTON_KEYREPEAT:
                  return "Button KeyRepeat";

               case SYN_BUTTON_REPEAT:
                  return "Button Repeat";

               case SYN_BUTTON_SELECT:
                  return "Button Select";
            }
      }

      return "???";
   }

}
