// ----
// ---- file   : ImportSynthProfileTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2019-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 18Jan2019
// ---- changed: 20Jan2019, 01Jun2021, 28Feb2025
// ----
// ----
// ----

module MImportSynthProfileTM;

use namespace ui;
use namespace st2;


// <class.png>
class ImportSynthProfileDO : MIDIMapDefs {
   MIDISynthProfileCtlAlias *ctl_alias;

   int id;
   int type;  // see MIDIMapDefs.TYPE_xxx
   String type_name;
   String nr_string;
   String caption;
   String ctltag_name;


   // <method_init.png>
   public method init(int _type, MIDISynthProfileCtlAlias _alias, int _id) {
      type = _type;
      ctl_alias <= _alias;
      id = _id;

      switch(type)
      {
         default:
            type_name = "???";
            break;

         case TYPE_CC:
            type_name = "CC";
            break;

         case TYPE_RPN:
            type_name = "RPN";
            break;

         case TYPE_NRPN:
            type_name = "NRPN";
            break;
      }

      nr_string  = String(_alias.nr);
      caption    = _alias.caption;
   }
}


// <class.png>
class ImportSynthProfileTM : TableModel {

   define int COL_ID       = 0;
   define int COL_TYPE     = 1;
   define int COL_NR       = 2;
   define int COL_CAPTION  = 3;
   define int COL_CTLTAG   = 4;
   define int COL_STYLE    = 5;
   define int COL_RANGE    = 6;
   define int COL_MIN      = 7;
   define int COL_MAX      = 8;

   PointerArray entries;  // ImportSynthProfileDO instances


   // <method_init.png>
   public method rebuildEntries(MIDISynthProfile _msp, String _filter, STX_MIDIOutDevice _dev, int _midiCh) {
      MIDISynthProfileCtlAlias *alias;
      local ImportSynthProfileDO *en;
      entries.free();

      local StringArray filterWords <= _filter.splitSpace(true);
      // trace "xxx filterWords="+#(filterWords);
      int id = 0;
      local String *ctltag;

      // CC
      foreach alias in _msp.cc_alias_lut
      {
         if(null != alias)
         {
            en <= new ImportSynthProfileDO;
            en.init(MIDIMapDefs.TYPE_CC, alias, id);
            ctltag <= alias.findCtlTagForDevCh(_dev, _midiCh, true/*bNameOnly*/);
            if(null != ctltag)
               en.ctltag_name = ctltag;
            else
               en.ctltag_name = "-";

            // trace "xxx CC en.caption=\""+en.caption+"\"";

            if(Utils.MatchFilterString(filterWords, en.caption)     ||
               Utils.MatchFilterString(filterWords, en.ctltag_name) ||
               Utils.MatchFilterString(filterWords, en.nr_string)   ||
               Utils.MatchFilterString(filterWords, en.type_name)
               )
            {
               entries.add(#(deref en));
            }

            id++;
         }
      }

      // RPN
      foreach alias in _msp.rpn_alias_lut
      {
         if(null != alias)
         {
            en <= new ImportSynthProfileDO;
            en.init(MIDIMapDefs.TYPE_RPN, alias, id);
            ctltag <= alias.findCtlTagForDevCh(_dev, _midiCh, true/*bNameOnly*/);
            if(null != ctltag)
               en.ctltag_name = ctltag;
            else
               en.ctltag_name = "-";

            if(Utils.MatchFilterString(filterWords, en.caption)     ||
               Utils.MatchFilterString(filterWords, en.ctltag_name) ||
               Utils.MatchFilterString(filterWords, en.nr_string)   ||
               Utils.MatchFilterString(filterWords, en.type_name)
               )
            {
               entries.add(#(deref en));
            }

            id++;
         }
      }

      // NRPN
      foreach alias in _msp.nrpn_alias_lut
      {
         if(null != alias)
         {
            en <= new ImportSynthProfileDO;
            en.init(MIDIMapDefs.TYPE_NRPN, alias, id);
            ctltag <= alias.findCtlTagForDevCh(_dev, _midiCh, true/*bNameOnly*/);
            if(null != ctltag)
               en.ctltag_name = ctltag;
            else
               en.ctltag_name = "-";

            if(Utils.MatchFilterString(filterWords, en.caption)     ||
               Utils.MatchFilterString(filterWords, en.ctltag_name) ||
               Utils.MatchFilterString(filterWords, en.nr_string)   ||
               Utils.MatchFilterString(filterWords, en.type_name)
               )
            {
               entries.add(#(deref en));
            }

            id++;
         }
      }
   }

   // <method_get.png>
   public virtual getNumColumns() : int {
      return 9;
   }

   // <method_get.png>
   public virtual getColumnCaption(int _col) : String {
      return ["Id", "Ctl.Type", "Ctl.Nr", "Alias", "Ctl.Tag", "Style", "Range", "Min", "Max"][_col];
   }

   // <method_get.png>
   public virtual getNumRows() : int {
      return entries.numElements;
   }

   // <method_get.png>
   // public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
   //    Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);
   //    lb.setFontByName("big7");
   //    return lb;
   // }

   // <method_get.png>
   public virtual getCellCaption(int _col, _row) : String {
      ImportSynthProfileDO en <= entries.get(_row);
      if(null != en)
      {
         switch(_col)
         {
            case COL_ID:
               return String(en.id + 1);

            case COL_TYPE:
               return en.type_name;

            case COL_NR:
               return en.nr_string;

            case COL_CAPTION:
               return en.caption;

            case COL_CTLTAG:
               return en.ctltag_name;

            case COL_STYLE:
               return NT_CEL.cel_style_names.get(en.ctl_alias.cel_style);

            case COL_RANGE:
               return NT_CEL.cel_range_names.get(en.ctl_alias.cel_range);

            case COL_MIN:
               return String(en.ctl_alias.min);

            case COL_MAX:
               return String(en.ctl_alias.max);
         }
      }
   }

   // <method_get.png>
   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 40;

         case COL_TYPE:
            return 50;

         case COL_NR:
            return 40;

         case COL_CAPTION:
            return 160;

         case COL_CTLTAG:
            return 160;

         case COL_STYLE:
            return 100;

         case COL_RANGE:
            return 100;

         case COL_MIN:
            return 60;

         case COL_MAX:
            return 60;
      }
   }

   // <method_get.png>
   public virtual getPreferredColumnWidth(int _col) : int {
      if(COL_CAPTION == _col)
         return 400;
      else if(COL_CTLTAG == _col)
         return 240;
      else
         return getMinimumColumnWidth(_col);
   }

}
