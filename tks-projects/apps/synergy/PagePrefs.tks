// ----
// ---- file   : PagePrefs.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2011-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 19Mar2011, 19Feb2012, 20Feb2012, 25Feb2012, 13May2012, 14May2012, 22Apr2013
// ----          07May2013, 28May2013, 01Jun2013, 05Jun2013, 11Jun2013, 11Aug2014, 12Aug2014
// ----          23Aug2014, 04Sep2014, 05Sep2014, 16Sep2014, 19Sep2014, 23Feb2015, 02Mar2015
// ----          04Mar2015, 06Nov2015, 11Mar2016, 28Mar2016, 30Jan2017, 09Feb2017, 04Mar2017
// ----          05Mar2017, 13Mar2017, 30Apr2017, 18Jun2017, 02Nov2017, 22Dec2017, 10Jan2019
// ----          07Aug2019, 20Sep2019, 01Nov2019, 07Nov2019, 08Nov2019, 25Oct2020, 01Nov2020
// ----          14May2021, 15May2021, 19Dec2021, 18Feb2023, 04Mar2023, 16Jul2023, 28Jul2023
// ----          26Sep2023, 03Oct2023, 15Oct2023, 27Oct2023, 13Apr2024, 16Jan2025
// ----
// ----
// ----

module MPagePrefs;

use namespace ui;
use namespace st2;


// <class.png>
class PagePrefs extends Page {

   protected TabSwitch *tab_groups;

   protected Button     *bt_parent;

   protected CheckBox   *cb_project_crashautosave;
   protected CheckBox   *cb_project_autoshowcomment;
   protected TextField  *tf_project_autoloadfilename;
   protected CheckBox   *cb_project_autoload_autoupdate;
   protected Button     *bt_project_autoload_lastloaded;
   protected Button     *bt_project_autoload_lastsaved;
   protected TextField  *tf_rootpath;
   protected FloatParam *fp_autosave_num;
   protected FloatParam *fp_autosave_interval;
   protected CheckBox   *cb_autosave;

   protected ComboBox   *cm_misc_faderport_model;
   protected ComboBox   *cm_misc_faderport_detailedit;

   protected CheckBox   *cb_mftwister;

   protected ComboBox   *cm_misc_push_mode;
   // // protected CheckBox   *cb_vsync_keyrepeat;

   protected ComboBox *cm_misc_middlec_offset;
   protected CheckBox *cb_misc_middlec_glyphs;

   protected CheckBox *cb_script_exec;

   protected CheckBox *cb_pipemap_ctlinfo;

   protected ComboBox *cm_midi_metronome_dev;
   protected ComboBox *cm_midi_metronome_ch;
   protected CheckBox *cb_midi_metronome_enable;
   protected ComboBox *cm_midi_metronome_note_bar;
   protected ComboBox *cm_midi_metronome_note_beat;

   protected FloatParam *fp_reclatency;
   protected CheckBox   *cb_reclatency;

   protected FloatParam *fp_precount_global;
   protected FloatParam *fp_precount_tracker;

   protected FloatParam *fp_minnotedur;

   protected CheckBox   *cb_mtc;
   protected FloatParam *fp_mtc_offset;
   protected FloatParam *fp_mtc_prerun;
   protected FloatParam *fp_mtc_align;


   // "Kbd"
   protected CheckBox  *cb_kbd_vsync;
   protected CheckBox  *cb_kbd_cmdcnp;
   protected CheckBox  *cb_kbd_mapslashtoless;
   protected CheckBox  *cb_kbd_swaphomeend;


   // "UI"
   protected CheckBox   *cb_ui_transparent;

   protected ComboBox   *cm_ui_postfx_fs_mode;
   protected TextField  *tf_ui_postfx_fs_color;
   protected Button     *bt_ui_postfx_fs_color;

   protected ComboBox   *cm_ui_postfx_win_mode;
   protected TextField  *tf_ui_postfx_win_color;
   protected Button     *bt_ui_postfx_win_color;

   protected ComboBox   *cm_ui_size_preset;
   protected FloatParam *fp_ui_zoom;
   protected Button     *bt_ui_zoom_apply;
   protected CheckBox   *cb_ui_vsync;
   protected CheckBox   *cb_ui_fpslimit;
   protected CheckBox   *cb_ui_fullscreen;
   protected FloatParam *fp_ui_fullscreensx;
   protected FloatParam *fp_ui_fullscreensy;
   protected ComboBox   *cm_ui_fullscreenbits;
   protected CheckBox   *cb_ui_fullscreendisplaysize;
   protected ComboBox   *cm_ui_cursor_zoom;
   protected ComboBox   *cm_ui_start_page;
   protected ComboBox   *cm_ui_theme;
   protected ComboBox   *cm_ui_color_grading;
   protected FloatParam *fp_ui_color_grading_amount;

   protected Button *bt_save;

   protected static ColorPickerDialog dlg_color;
   protected static boolean b_dlg_color_fs;

   protected boolean b_theme_changed;


   // <ui_init.png>
   public method init() : boolean {

      if(!initPakFile("PagePrefs.xfm"))
      {
         trace "[---] failed to parse PagePrefs.xfm";
         return false;
      }

      if(autoResolveIds(this))
      {
         recursiveSetEnableCursorKeyTabCycling(false);

         if(dlg_color.init())
         {
            if(app_lnf.b_ascii_back_buttons)
               Global.ASCIIBackButton(bt_parent);

            return true;
         }
      }

      return false;
   }

   // <ui_page.png>
   public virtual pageGetParent() : int {
      // return RootForm.PAGE_CONFIG;
      return RootForm.PAGE_PIPEMAP;
   }

   // <ui_page.png>
   public virtual pageEnter() {

      Page::pageEnter();

      cm_midi_metronome_dev.setOptions(MIDI.out_device_names_sorted);
      cm_midi_metronome_dev.setOptionBGColors(MIDI.out_device_bgcolors_sorted);
      STX_MIDIOutDevice metronomeDev <= MIDI.GetMIDIOutDeviceByAliasOrName(STConfig.midi_metronome_device);
      if(null != metronomeDev)
      {
         cm_midi_metronome_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(metronomeDev.dev_idx));
      }
      else
      {
         cm_midi_metronome_dev.setInvalidOptionName(STConfig.midi_metronome_device);
         cm_midi_metronome_dev.setSelectedOption(-1);
      }
      cm_midi_metronome_ch.setSelectedOption(STConfig.midi_metronome_ch);
      updateMetronomeEnable();

      cm_midi_metronome_note_bar  .setOptions(MIDI.midi_notes);
      cm_midi_metronome_note_bar  .setSelectedOption(STConfig.midi_metronome_note_bar);

      cm_midi_metronome_note_beat .setOptions(MIDI.midi_notes);
      cm_midi_metronome_note_beat .setSelectedOption(STConfig.midi_metronome_note_beat);

      cb_project_crashautosave      .setSelected(STConfig.b_crash_autosave);
      cb_project_autoshowcomment    .setSelected(STConfig.b_autoshowcomment);
      tf_project_autoloadfilename   .setText(STConfig.autoload_filename);
      cb_project_autoload_autoupdate.setSelected(STConfig.b_autoload_filename_autoupdate);
      tf_rootpath                   .setText(STConfig.rootpath);
      fp_autosave_num               .setValue(STConfig.num_autosave_files);
      fp_autosave_interval          .setValue(STConfig.autosave_interval);
      cb_autosave                   .setSelected(STConfig.b_autosave);

      cm_misc_faderport_model.setSelectedOption(STConfig.b_faderport ? (8 == STConfig.faderport_model) ? 1 : 2 : 0);
      cm_misc_faderport_detailedit.setSelectedOption([4,8,16,32,64].indexOf(STConfig.faderport_detailedit_div, 0));

      cb_mftwister.setSelected(STConfig.b_mf_twister);

      cm_misc_push_mode.setSelectedOption(STConfig.push_mode);
      // // cb_vsync_keyrepeat         .setSelected(UI.b_vsync_keyrepeat);

      cm_misc_middlec_offset.setSelectedOption(abs(mathClampi(STConfig.midi_note_octave_offset, -2, 0)));
      cb_misc_middlec_glyphs.setSelected(STConfig.b_node_tracker_note_octave_offset_glyphs);

      cb_script_exec.setSelected(STConfig.b_node_script_exec);

      cb_pipemap_ctlinfo.setSelected(STConfig.b_show_ctl_info);

      fp_reclatency              .setValue(STConfig.node_tracker_rec_latency);
      cb_reclatency              .setSelected(STConfig.b_node_tracker_rec_latency);

      fp_precount_global         .setValue(STConfig.pipemap_precount_num_bars);
      fp_precount_tracker        .setValue(STConfig.node_tracker_precount_num_bars);

      fp_minnotedur              .setValue(MIDIPipeFrame.GetMinimumNoteDuration());

      cb_mtc                     .setSelected(STConfig.b_midi_send_mtc);
      fp_mtc_offset              .setValue(STConfig.midi_mtc_offset_16th);
      fp_mtc_prerun              .setValue(STConfig.midi_mtc_prerun_ms);
      fp_mtc_align               .setValue(STConfig.midi_mtc_seq_align_ms);


      cb_kbd_vsync         .setSelected(UI.b_vsync_keyrepeat);
      cb_kbd_cmdcnp        .setSelected(UI.b_key_cmd_copy_paste);
      cb_kbd_mapslashtoless.setSelected(UI.b_key_map_slash_to_less);
      cb_kbd_swaphomeend   .setSelected(STConfig.b_key_swap_pattern_home_end);


      cb_ui_transparent          .setSelected(UI.b_transparent_layers);

      cm_ui_postfx_fs_mode       .setSelectedOption(STConfig.postfx_fs_mode);
      UnsignedInteger ioC32 = STConfig.postfx_fs_color;
      tf_ui_postfx_fs_color      .setText(ioC32.printf("#%08x"));

      cm_ui_postfx_win_mode      .setSelectedOption(STConfig.postfx_win_mode);
      ioC32 = STConfig.postfx_win_color;
      tf_ui_postfx_win_color     .setText(ioC32.printf("#%08x"));

      cm_ui_size_preset.setSelectedOption(STConfig.ui_size_preset + 1);
      fp_ui_zoom.setValue(STConfig.zoom_x);

      cb_ui_vsync                .setSelected(STConfig.b_vsync);
      cb_ui_fpslimit             .setSelected(!STConfig.b_force_high_framerate);
      cb_ui_fullscreen           .setSelected(STConfig.b_fullscreen);
      fp_ui_fullscreensx         .setValue(STConfig.fullscreen_sx);
      fp_ui_fullscreensy         .setValue(STConfig.fullscreen_sy);
      cm_ui_fullscreenbits       .setSelectedOption(["15", "16", "24", "32"].indexOfObject(String(STConfig.fullscreen_bits), 0));
      cb_ui_fullscreendisplaysize.setSelected(STConfig.b_fullscreen_displaysize);

      cm_ui_cursor_zoom.setSelectedOption(SDL.cursorZoom - 1);

      updateStartPage();

      cm_ui_theme.setSelectedOption(STConfig.lnf_idx);
      b_theme_changed = false;

      local StringArray colorGradingOptions;
      local String *colorGradingImgFileName;
      colorGradingOptions.add("-");
      foreach colorGradingImgFileName in UI.post_fbo_color_grading_texture_cycle_list
      {
         local String colorGradingImgName;
         colorGradingImgFileName.replace(".png", "") => colorGradingImgName;
         colorGradingImgName.replace("image_with_gradient_256x16_", "");
         if(!colorGradingImgName.isBlank())
            colorGradingOptions.add(colorGradingImgName);
      }
      cm_ui_color_grading.setOptions(colorGradingOptions);
      cm_ui_color_grading.setSelectedOption(STConfig.lnf_colorgrading_initial_idx + 1);
      cm_ui_color_grading.setEditable(0 == UI.multisample_samples);

      fp_ui_color_grading_amount.setValue(UI.post_fbo_color_grading_amount);

      updateNativeDisplaySize();
      updateCustomSize();
   }

   // <ui_page.png>
   public virtual pageFocusDefault() {
      UI.SetKeyboardFocus(tab_groups);
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {

      // trace "xxx PagePrefs: tab_groups="+#(tab_groups);

      switch(tab_groups.getActiveTabIndex())
      {
         case 0: // Project
            _retLayers = [
               tab_groups,
               cb_project_crashautosave,
               cb_project_autoshowcomment,
               tf_project_autoloadfilename,
               bt_project_autoload_lastloaded,
               bt_project_autoload_lastsaved,
               tf_rootpath,
               fp_autosave_num,
               fp_autosave_interval,
               bt_save
                      ];
            break;

         case 1: // Misc
            _retLayers = [
               tab_groups,
               cm_misc_middlec_offset,
               cb_misc_middlec_glyphs,
               cm_misc_faderport_model,
               cm_misc_faderport_detailedit,
               cm_misc_push_mode,
               cb_script_exec,
               bt_save
                      ];
            break;

         case 2: // Metronome
            _retLayers = [
               tab_groups,
               cm_midi_metronome_dev,
               cm_midi_metronome_ch,
               cb_midi_metronome_enable,
               cm_midi_metronome_note_bar,
               cm_midi_metronome_note_beat,
               fp_reclatency,
               cb_reclatency,
               fp_precount_global,
               fp_precount_tracker,
               fp_minnotedur,
               cb_mtc,
               fp_mtc_offset,
               fp_mtc_prerun,
               fp_mtc_align,
               bt_save
                      ];
            break;

         case 3:  // Kbd
            _retLayers = [
               cb_kbd_vsync,
               cb_kbd_cmdcnp,
               cb_kbd_mapslashtoless,
               cb_kbd_swaphomeend
                          ];
            break;

         case 4: // UI
            _retLayers = [
               tab_groups,
               cm_ui_size_preset,
               fp_ui_zoom,
               bt_ui_zoom_apply,
               cm_ui_cursor_zoom,
               cb_ui_transparent,
               cm_ui_postfx_fs_mode,
               tf_ui_postfx_fs_color,
               cm_ui_postfx_win_mode,
               tf_ui_postfx_win_color,
               cb_ui_vsync,
               cb_ui_fpslimit,
               fp_ui_fullscreensx,
               fp_ui_fullscreensy,
               cm_ui_fullscreenbits,
               cb_ui_fullscreendisplaysize,
               cb_ui_fullscreen,
               cm_ui_start_page,
               cm_ui_theme,
               bt_save
                      ];
            break;
      }
   }

   // <ui_page.png>
   public virtual pageLeave() {
      if(b_theme_changed)
      {
         // // root_form.onCycleAppLookAndFeel();
         InfoDialog d <= InfoDialog.NewInfo("Theme Change",
                                            "The theme has changed. Please save your project and the configuration, then restart the application !",
                                            null
                                            );
         d.setEnableDialogIsPopup(true);
         d.setEnableOpaque(true);
         d.showCentered();
      }
   }

   // <ui_update.png>
   protected method updateNativeDisplaySize() {
      boolean bEditable = ! STConfig.b_fullscreen_displaysize;
      fp_ui_fullscreensx.setEditable(bEditable);
      fp_ui_fullscreensy.setEditable(bEditable);
   }

   // <ui_update.png>
   protected method updateCustomSize() {
      boolean bEditable = (0 == cm_ui_size_preset.getSelectedOption());
      fp_ui_zoom.setEditable(bEditable);
      bt_ui_zoom_apply.setEditable(bEditable);
      // // cm_ui_cursor_zoom.setEditable(bEditable);
   }

   //---- project ----
   // <ui_handle.png>
   protected method handleProjectCrashAutosaveChanged() {
      boolean bEnable = cb_project_crashautosave.isSelected();
      STConfig.b_crash_autosave = bEnable;
      Global.Success("Crash auto-save is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected method handleProjectAutoshowCommentChanged() {
      boolean bEnable = cb_project_autoshowcomment.isSelected();
      STConfig.b_autoshowcomment = bEnable;
      Global.Success("Auto-show comment after project-loading is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected method handleProjectAutoloadFilenameChanged() {
      STConfig.autoload_filename = tf_project_autoloadfilename.getText();
      Global.Success("Auto-load filename is \""+STConfig.autoload_filename+"\"");
   }

   // <method_get.png>
   public static method GetRelativeProjectPathname(String _name) {
      String name = _name;

      name.replace("\\", "/");
      name.replace("//", "/");

      String progDir = program_directory;
      if(!progDir.isBlank())
      {
         if(!progDir.endsWith("/"))
            progDir.append("/");

         progDir.replace("\\", "/");
         progDir.replace("//", "/");
      }

      name.replace(progDir, "");
      return name;
   }

   // <ui_handle.png>
   protected method handleProjectAutoloadLastLoaded() {
      STConfig.autoload_filename = GetRelativeProjectPathname(Global.file_open_suggested_file);
      tf_project_autoloadfilename.setText(STConfig.autoload_filename);
      handleProjectAutoloadFilenameChanged();
   }

   // <ui_handle.png>
   protected method handleProjectAutoloadLastSaved() {
      STConfig.autoload_filename = GetRelativeProjectPathname(Global.file_save_suggested_file);
      tf_project_autoloadfilename.setText(STConfig.autoload_filename);
      handleProjectAutoloadFilenameChanged();
   }

   // <ui_handle.png>
   protected method handleProjectAutoloadAutoUpdate() {
      STConfig.b_autoload_filename_autoupdate = cb_project_autoload_autoupdate.isSelected();
      Global.Print("Autoload filename auto-update is "+Utils.GetEnableString(STConfig.b_autoload_filename_autoupdate));
   }

   // <ui_handle.png>
   protected method handleRootPathChanged() {
      STConfig.rootpath = tf_rootpath.getText();
      Global.PrintFast("Root Path is \""+STConfig.rootpath+"\"");
   }

   // <ui_handle.png>
   protected method handleNumAutosaveFilesChanged() {
      STConfig.num_autosave_files = fp_autosave_num.getFloatValue();

      Global.Print("Num autosave files is "+STConfig.num_autosave_files);
   }

   // <ui_handle.png>
   protected method handleAutosaveIntervalChanged() {
      STConfig.autosave_interval = fp_autosave_interval.getFloatValue();

      Global.Print("Autosave interval is "+STConfig.autosave_interval+" minute"+Utils.GetPluralString(STConfig.autosave_interval));
   }

   // <ui_handle.png>
   protected method handleEnableAutosaveChanged() {
      STConfig.b_autosave = cb_autosave.isSelected();

      Global.Print("Autosave is "+Utils.GetEnableString(false != STConfig.b_autosave)+((maybe == STConfig.b_autosave)?" (not during replay)":""));
   }


   //---- misc ----

   // <ui_handle.png>
   protected method handleMiscFaderPortModelChanged() {
      int opt = cm_misc_faderport_model.getSelectedOption();

      STConfig.b_faderport = (opt > 0);

      if(1 == opt)
         STConfig.faderport_model = 8;
      else if(2 == opt)
         STConfig.faderport_model = 16;

      Global.Print("FaderPort Model is "+cm_misc_faderport_model.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleMiscFaderPortDetailEditChanged() {
      int opt = cm_misc_faderport_detailedit.getSelectedOption();

      STConfig.faderport_detailedit_div = [4,8,16,32,64].get(opt);

      Global.Print("FaderPort Detail-Edit precision is "+cm_misc_faderport_detailedit.getSelectedOptionName()+" (div="+STConfig.faderport_detailedit_div+")");
   }

   // <ui_handle.png>
   protected method handleMiscPushModeChanged() {
      push.setMode(cm_misc_push_mode.getSelectedOption());

      Global.Print("Push Mode is "+cm_misc_push_mode.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleMFTwisterChanged() {
      STConfig.b_mf_twister = !STConfig.b_mf_twister;

      Global.Print("MFTwister bi-di support is "+Utils.GetEnableString(STConfig.b_mf_twister));
   }

   // <ui_handle.png>
   protected method handleScriptExecChanged() {
      STConfig.b_node_script_exec = !STConfig.b_node_script_exec;

      Global.Print("Script exec is "+Utils.GetEnableString(STConfig.b_node_script_exec));
   }

   // <ui_handle.png>
   protected method handleMIDINoteOffsetChanged() {
      STConfig.midi_note_octave_offset = -cm_misc_middlec_offset.getSelectedOption();
      Global.Print("MIDI note display octave offset is "+STConfig.midi_note_octave_offset);
      MIDI.UpdateMIDINoteOctaves();
   }

   // <ui_handle.png>
   protected method handleMIDINoteOffsetGlyphsChanged() {
      STConfig.b_node_tracker_note_octave_offset_glyphs = cb_misc_middlec_glyphs.isSelected();
      Global.Print("MIDI note display negative tracker octave glyphs is "+Utils.GetEnableString(STConfig.b_node_tracker_note_octave_offset_glyphs));
      MIDI.UpdateMIDINoteOctaves();
   }

   // <ui_handle.png>
   protected method handlePipeMapShowEventInfoChanged() {
      STConfig.b_show_ctl_info = cb_pipemap_ctlinfo.isSelected();
      Global.Print("PipeMap: show event info is "+Utils.GetEnableString(STConfig.b_show_ctl_info));
   }

   // <ui_handle.png>
   protected =replay= method handleMIDIMetronomeDeviceChanged() {
      STConfig.midi_metronome_device = cm_midi_metronome_dev.getSelectedOptionName();
      replay.handleMetronomeDevChanged();
      Global.Print("MIDI Metronome device is \""+STConfig.midi_metronome_device+"\"");
   }

   // <ui_handle.png>
   protected =replay= method handleMIDIMetronomeChannelChanged() {
      STConfig.midi_metronome_ch = cm_midi_metronome_ch.getSelectedOption();
      Global.Print("MIDI Metronome channel is "+(STConfig.midi_metronome_ch+1));
   }

   // <ui_handle.png>
   protected =replay= method handleMIDIMetronomeEnableChanged() {
      STConfig.b_midi_metronome = cb_midi_metronome_enable.isSelected();
      Global.Print("MIDI Metronome is "+Utils.GetEnableString(STConfig.b_midi_metronome));
   }

   // <ui_update.png>
   public method updateMetronomeEnable() {
      cb_midi_metronome_enable.setSelected(STConfig.b_midi_metronome);
   }

   // <ui_handle.png>
   protected method handleMIDIMetronomeNoteBarChanged() {
      STConfig.midi_metronome_note_bar = cm_midi_metronome_note_bar.getSelectedOption();

      Global.Print("MIDI Metronome note(bar) is "+STConfig.midi_metronome_note_bar);
   }

   // <ui_handle.png>
   protected method handleMIDIMetronomeNoteBeatChanged() {
      STConfig.midi_metronome_note_beat = cm_midi_metronome_note_beat.getSelectedOption();

      Global.Print("MIDI Metronome note(beat) is "+STConfig.midi_metronome_note_beat);
   }

   // <ui_handle.png>
   protected method handleRecLatencyChanged() {
      STConfig.node_tracker_rec_latency = fp_reclatency.getFloatValue();

      Global.Print("Rec latency is "+STConfig.node_tracker_rec_latency+" ms");
   }

   // <ui_handle.png>
   protected method handleEnableRecLatencyChanged() {
      STConfig.b_node_tracker_rec_latency = cb_reclatency.isSelected();

      Global.Print("Rec latency is "+Utils.GetEnableString(STConfig.b_node_tracker_rec_latency));
   }

   // <ui_handle.png>
   protected method handlePrecountGlobalChanged() {
      STConfig.pipemap_precount_num_bars = fp_precount_global.getFloatValue();

      Global.Print("Global Pre-Count is "+STConfig.pipemap_precount_num_bars+" bar(s)");
   }

   // <ui_handle.png>
   protected method handlePrecountTrackerChanged() {
      STConfig.node_tracker_precount_num_bars = fp_precount_tracker.getFloatValue();

      Global.Print("Tracker Pre-Count is "+STConfig.node_tracker_precount_num_bars+" bar(s)");
   }

   // <ui_handle.png>
   protected method handleMinNoteDurChanged() {
      MIDIPipeFrame.SetMinimumNoteDuration(fp_minnotedur.getFloatValue());

      Global.Print("Minimum Note Duration is "+MIDIPipeFrame.GetMinimumNoteDuration()+" tick"+Utils.GetPluralString(MIDIPipeFrame.GetMinimumNoteDuration()));
   }

   // <ui_handle.png>
   protected =replay= method handleMTCEnableChanged() {
      STConfig.b_midi_send_mtc = cb_mtc.isSelected();
      Global.Print("MTC (MIDI Time-Code) is "+Utils.GetEnableString(STConfig.b_midi_send_mtc));
   }

   // <ui_handle.png>
   protected =replay= method handleMTCOffsetChanged() {
      STConfig.midi_mtc_offset_16th = fp_mtc_offset.getFloatValue();
      Global.Print("MTC tape-recorder bar 1 offset is "+STConfig.midi_mtc_offset_16th+" 16th notes");
   }

   // <ui_handle.png>
   protected =replay= method handleMTCPreRunChanged() {
      STConfig.midi_mtc_prerun_ms = fp_mtc_prerun.getFloatValue();
      Global.Print("MTC tape-recorder Pre-Run is "+STConfig.midi_mtc_prerun_ms+" milliseconds");
   }

   // <ui_handle.png>
   protected =replay= method handleMTCAlignChanged() {
      STConfig.midi_mtc_seq_align_ms = fp_mtc_align.getFloatValue();
      Global.Print("MTC tape-recorder<->sequencer start alignment is "+((STConfig.midi_mtc_seq_align_ms>0)?"+":"")+STConfig.midi_mtc_seq_align_ms+" milliseconds");
   }


   // ---- Kbd ----
   // <ui_handle.png>
   protected method handleKbdVSyncChanged() {
      boolean bEnable = cb_kbd_vsync.isSelected();
      UI.SetEnableVSyncKeyRepeat(bEnable);
      Global.Success("VSync key repeat is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected method handleKbdCmdCopyPaste() {
      boolean bEnable = cb_kbd_cmdcnp.isSelected();
      UI.SetEnableKeyCmdCopyPaste(bEnable);
      Global.Success("macOS text edit Command copy / paste is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected method handleKbdMapSlashToLess() {
      boolean bEnable = cb_kbd_mapslashtoless.isSelected();
      UI.SetEnableKeyMapSlashToLess(bEnable);
      Global.Success("Map SLASH to LESS is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected method handleKbdSwapHomeEnd() {
      boolean bEnable = cb_kbd_swaphomeend.isSelected();
      STConfig.b_key_swap_pattern_home_end = bEnable;
      Global.Success("Swap HOME / END pattern selection keys is "+Utils.GetEnableString(bEnable));
   }


   // ---- UI ----
   // <ui_handle.png>
   protected method handleUITransparentChanged() {
      boolean bEnable = cb_ui_transparent.isSelected();
      UI.SetEnableTransparentLayers(bEnable);
      UI.RedrawAll();
      Global.Success("Transparent layers are "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected method handleUIPostFXFSModeChanged() {
      STConfig.postfx_fs_mode = cm_ui_postfx_fs_mode.getSelectedOption();
      UI.RedrawAll();
      Global.Success("PostFX<fs> mode is "+cm_ui_postfx_fs_mode.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleUIPostFXFSColorChanged() {
      String s <= (tf_ui_postfx_fs_color.getText().trim());
      if(s <= "#")
         STConfig.postfx_fs_color = s;
      else
         STConfig.postfx_fs_color = "#"+s;
      UnsignedInteger io = STConfig.postfx_fs_color;
      UI.RedrawAll();
      Global.Print("PostFX<fs> color is #"+io.printf("%08x"));
   }

   // <ui_handle.png>
   protected method handlePickPostFXFSColor() {
      b_dlg_color_fs = true;
      dlg_color.showColor(STConfig.postfx_fs_color, this);
   }

   // <ui_handle.png>
   protected method handleUIPostFXWinColorChanged() {
      String s <= (tf_ui_postfx_win_color.getText().trim());
      if(s <= "#")
         STConfig.postfx_win_color = s;
      else
         STConfig.postfx_win_color = "#"+s;
      UnsignedInteger io = STConfig.postfx_win_color;
      UI.RedrawAll();
      Global.Print("PostFX<win> color is #"+io.printf("%08x"));
   }

   // <ui_handle.png>
   protected method handlePickPostFXWinColor() {
      b_dlg_color_fs = false;
      dlg_color.showColor(STConfig.postfx_win_color, this);
   }

   // <ui_handle.png>
   protected method handleUIPostFXWinModeChanged() {
      STConfig.postfx_win_mode = cm_ui_postfx_win_mode.getSelectedOption();
      UI.RedrawAll();
      Global.Success("PostFX<win> mode is "+cm_ui_postfx_win_mode.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleUIVSyncChanged() {
      boolean bEnable = cb_ui_vsync.isSelected();
      STConfig.b_vsync = bEnable;
      Global.ConfigureVSync();
      Global.Success("VSync is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected method handleUIFPSLimitChanged() {
      boolean bEnable = cb_ui_fpslimit.isSelected();
      STConfig.b_force_high_framerate = !bEnable;
      Global.ConfigureVSync();
      Global.Success("The FPS limiter is "+Utils.GetEnableString(bEnable));
   }

   // <ui_handle.png>
   protected method handleUIFullscreenChanged() {
      boolean bEnable = cb_ui_fullscreen.isSelected();
      STConfig.b_fullscreen = bEnable;
      UI.QueueToggleFullscreen();
      /////Viewport.toggleFullScreen(); // causes sporadic crashes
      Global.ConfigureVSync();
      Global.Success("Switched to "+(bEnable?"fullscreen":"windowed")+" interface");
   }

   // <ui_handle.png>
   protected method handleUIFullscreenWidthChanged() {
      int w = fp_ui_fullscreensx.getFloatValue();
      STConfig.fullscreen_sx = w;
      Global.ConfigureFullscreenDisplaySize();
      Global.Success("Fullscreen width is "+w);
   }

   // <ui_handle.png>
   protected method handleUIFullscreenHeightChanged() {
      int h = fp_ui_fullscreensy.getFloatValue();
      STConfig.fullscreen_sy = h;
      Global.ConfigureFullscreenDisplaySize();
      Global.Success("Fullscreen height is "+h);
   }

   // <ui_handle.png>
   protected method handleUIFullscreenDisplaySizeChanged() {
      boolean bEnable = cb_ui_fullscreendisplaysize.isSelected();
      STConfig.b_fullscreen_displaysize = bEnable;
      updateNativeDisplaySize();
      Global.ConfigureFullscreenDisplaySize();
      Global.Success("Now using "+(bEnable?"native display size":"manually configured size")+" in fullscreen mode");
   }

   // <ui_handle.png>
   protected method handleUIFullscreenBitsChanged() {
      int bits = ["15", "16", "24", "32"].get(cm_ui_fullscreenbits.getSelectedOption());
      STConfig.fullscreen_bits = bits;
      Global.ConfigureFullscreenDisplaySize();
      Global.Success("Fullscreen bits-per-pixel is "+bits);
   }

   // <ui_handle.png>
   protected method handleUISizePresetChanged() {
      STConfig.ui_size_preset = cm_ui_size_preset.getSelectedOption() - 1;
      switch(STConfig.ui_size_preset)
      {
         case 0:  // small    (1k)
            cm_ui_cursor_zoom.setSelectedOptionAction(0/*1x*/);
            STConfig.window_sx = 960;
            STConfig.window_sy = 600;
            STConfig.zoom_x = 1;
            STConfig.zoom_y = 1;
            fp_ui_zoom.setValue(1);
            break;

         case 1:  // small x2 (2k)
            cm_ui_cursor_zoom.setSelectedOptionAction(1/*2x*/);
            STConfig.window_sx = 960;
            STConfig.window_sy = 600;
            STConfig.zoom_x = 2;
            STConfig.zoom_y = 2;
            fp_ui_zoom.setValue(2);
            break;

         case 2:  // large    (4k)
            cm_ui_cursor_zoom.setSelectedOptionAction(0/*1x*/);
            STConfig.window_sx = 1900;
            STConfig.window_sy = 1600;
            STConfig.zoom_x = 1;
            STConfig.zoom_y = 1;
            fp_ui_zoom.setValue(1);
            break;
      }
      updateCustomSize();
      Global.Print("UI Size Preset is "+cm_ui_size_preset.getSelectedOptionName()+" ("+(STConfig.window_sx*STConfig.zoom_x)+"x"+(STConfig.window_sy*STConfig.zoom_y)+")");
      if(STConfig.ui_size_preset >= 0)
      {
         handleUIZoomApply();
         UI.QueueCustomResizePrefs(STConfig.window_sx, STConfig.window_sy);
      }
   }

   // <ui_handle.png>
   protected method handleUIZoomChanged() {
      float f = fp_ui_zoom.getFloatValue();
      STConfig.zoom_x = f;
      STConfig.zoom_y = f;
      Global.Print("Zoom is "+f);
   }

   // <ui_handle.png>
   protected method handleUIZoomApply() {
      UI.QueueReopen();
      // // Global.ConfigureVSync();
      UI.SetZoom(STConfig.zoom_x, STConfig.zoom_y);
   }

   // <ui_handle.png>
   protected method handleUICursorZoomChanged() {
      STConfig.cursor_zoom = cm_ui_cursor_zoom.getSelectedOption() + 1;
      UI.SetCursorZoom(STConfig.cursor_zoom);
      if(Utils.IsWindows())
      {
         Global.Print("Cursor Zoom is "+cm_ui_cursor_zoom.getSelectedOptionName()+" (requires app restart on Windows)");
      }
      else
      {
         UI.UpdateCursors();
         Global.Print("Cursor Zoom is "+cm_ui_cursor_zoom.getSelectedOptionName());
      }
   }

   // <method_update.png>
   protected method updateStartPage() {

      int opt = 0;

      switch(STConfig.start_page)
      {
         default:
         case RootForm.PAGE_START:
            break;

         case RootForm.PAGE_CONFIG:
            opt = 1;
            break;

         case RootForm.PAGE_MIDIMAPPER:
            opt = 2;
            break;

         case RootForm.PAGE_MIDIMON:
            opt = 3;
            break;

         case RootForm.PAGE_SYSEX:
            opt = 4;
            break;

         case RootForm.PAGE_PROJECT:
            opt = 5;
            break;

         case RootForm.PAGE_PIPEROOT:
            opt = 6;
            break;

         case RootForm.PAGE_MIDIDEVS:
            opt = 7;
            break;

         case RootForm.PAGE_SUBSONGS:
            opt = 8;
            break;

         case RootForm.PAGE_PREFS:
            opt = 9;
            break;

         case RootForm.PAGE_PIPEMAP:
            opt = 10;
            break;
      }

      cm_ui_start_page.setSelectedOption(opt);
   }

   // <ui_handle.png>
   protected method handleUIStartPageChanged() {

      // Start;Config;MIDIMapper;MIDIMon;SysEx;Project;PipeRoot;MIDIDevs;SubSongs;Prefs;PipeMap
      switch(cm_ui_start_page.getSelectedOption())
      {
         default:
         case 0: // Start
            STConfig.start_page = RootForm.PAGE_START;
            break;

         case 1: // Config
            STConfig.start_page = RootForm.PAGE_CONFIG;
            break;

         case 2: // MIDIMapper
            STConfig.start_page = RootForm.PAGE_MIDIMAPPER;
            break;

         case 3: // MIDIMon
            STConfig.start_page = RootForm.PAGE_MIDIMON;
            break;

         case 4: // SysEx
            STConfig.start_page = RootForm.PAGE_SYSEX;
            break;

         case 5: // Project
            STConfig.start_page = RootForm.PAGE_PROJECT;
            break;

         case 6: // PipeRoot
            STConfig.start_page = RootForm.PAGE_PIPEROOT;
            break;

         case 7: // MIDIDevs
            STConfig.start_page = RootForm.PAGE_MIDIDEVS;
            break;

         case 8: // SubSongs
            STConfig.start_page = RootForm.PAGE_SUBSONGS;
            break;

         case 9: // Prefs
            STConfig.start_page = RootForm.PAGE_PREFS;
            break;

         case 10: // PipeMap
            STConfig.start_page = RootForm.PAGE_PIPEMAP;
            break;
      }

      Global.Print("Start Page is "+cm_ui_start_page.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleUIThemeChanged() {
      b_theme_changed = (STConfig.lnf_idx != cm_ui_theme.getSelectedOption());
      if(b_theme_changed)
      {
         STConfig.lnf_idx = cm_ui_theme.getSelectedOption();
         root_form.setAppLookAndFeelByIdx(STConfig.lnf_idx);
         Node.HandleNodeEditorLookAndFeelChanged();
         cm_ui_color_grading.setSelectedOption((STConfig.lnf_preferred_colorgradings.get(STConfig.lnf_idx)) + 1);
         handleUIColorGradingChanged();
      }
      Global.Print("Theme is "+cm_ui_theme.getSelectedOptionName()+" (please save config and restart application)");
   }

   // <ui_handle.png>
   protected method handleUIColorGradingChanged() {
      STConfig.lnf_colorgrading_initial_idx = cm_ui_color_grading.getSelectedOption() - 1;
      STConfig.EnableColorGrading_Cycle(STConfig.lnf_colorgrading_initial_idx);
      boolean bEnable = (-1 != STConfig.lnf_colorgrading_initial_idx) && !UI.b_draw_post_fbo;
      if(bEnable)
      {
         UI.TogglePostFBOColorGrading();
      }
      UI.b_draw_post_fbo = (-1 != STConfig.lnf_colorgrading_initial_idx);
      UI.RedrawAll();
      UI.CompositeAll();
      Global.Print("Color-Grading LUT is "+cm_ui_color_grading.getSelectedOptionName()+" (idx="+(cm_ui_color_grading.getSelectedOption()-1)+")");
   }

   // <ui_handle.png>
   protected method handleUIColorGradingAmountChanged() {
      UI.SetPostFBOColorGradingAmount(fp_ui_color_grading_amount.getFloatValue());
      UI.CompositeAll();
      Global.Print("Color-Grading Amount is "+fp_ui_color_grading_amount.getDisplayedText());
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      switch(_k.pressed)
      {
         case VKEY_F12:
            if(_k.modNone())
            {
               root_form.toggleMetronome();
               updateMetronomeEnable();
            }
            else if(_k.modShift())
            {
               root_form.toggleMTC();
               cb_mtc.setSelected(STConfig.b_midi_send_mtc);
            }
            return true;

         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
            if(_k.modCtrl())
            {
               tab_groups.setActiveTabIndex(_k.code - '1');
               UI.LayoutRootLayer();  // workaround for "Save configuration" layout issue when cycling through tabs with lctrl-1..5
               pageFocusDefault();
               return true;
            }
            break;
      }
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();
      UnsignedInteger ioC32;

      switch(@(ap))
      {
         case @(dlg_color):
            if(b_dlg_color_fs)
            {
               STConfig.postfx_fs_color = dlg_color.getColor();
               ioC32 = STConfig.postfx_fs_color;
               tf_ui_postfx_fs_color      .setText(ioC32.printf("#%08x"));
            }
            else
            {
               STConfig.postfx_win_color = dlg_color.getColor();
               ioC32 = STConfig.postfx_win_color;
               tf_ui_postfx_win_color     .setText(ioC32.printf("#%08x"));
            }
            break;

         case @(bt_save):
            Global.cmd_config_save();
            return true;

            // Project:
         case @(cb_project_crashautosave):
            handleProjectCrashAutosaveChanged();
            return true;

         case @(cb_project_autoshowcomment):
            handleProjectAutoshowCommentChanged();
            return true;

         case @(tf_project_autoloadfilename):
            handleProjectAutoloadFilenameChanged();
            return true;

         case @(bt_project_autoload_lastloaded):
            handleProjectAutoloadLastLoaded();
            return true;

         case @(bt_project_autoload_lastsaved):
            handleProjectAutoloadLastSaved();
            return true;

         case @(cb_project_autoload_autoupdate):
            handleProjectAutoloadAutoUpdate();
            return true;

         case @(tf_rootpath):
            handleRootPathChanged();
            return true;

         case @(fp_autosave_num):
            handleNumAutosaveFilesChanged();
            return true;

         case @(fp_autosave_interval):
            handleAutosaveIntervalChanged();
            return true;

         case @(cb_autosave):
            handleEnableAutosaveChanged();
            return true;


            // Misc:
         case @(cm_misc_faderport_model):
            handleMiscFaderPortModelChanged();
            return true;

         case @(cm_misc_faderport_detailedit):
            handleMiscFaderPortDetailEditChanged();
            return true;

         case @(cb_mftwister):
            handleMFTwisterChanged();
            return true;

         case @(cm_misc_push_mode):
            handleMiscPushModeChanged();
            return true;

         case @(cb_script_exec):
            handleScriptExecChanged();
            return true;

         case @(cb_pipemap_ctlinfo):
            handlePipeMapShowEventInfoChanged();
            return true;

         // // case @(cb_vsync_keyrepeat):
         // //    handleVsyncKeyRepeatChanged();
         // //    return true;

         case @(cm_misc_middlec_offset):
            handleMIDINoteOffsetChanged();
            return true;

         case @(cb_misc_middlec_glyphs):
            handleMIDINoteOffsetGlyphsChanged();
            return true;


            // Metronome:
         case @(cm_midi_metronome_dev):
            handleMIDIMetronomeDeviceChanged();
            return true;

         case @(cm_midi_metronome_ch):
            handleMIDIMetronomeChannelChanged();
            return true;

         case @(cb_midi_metronome_enable):
            handleMIDIMetronomeEnableChanged();
            return true;

         case @(cm_midi_metronome_note_bar):
            handleMIDIMetronomeNoteBarChanged();
            return true;

         case @(cm_midi_metronome_note_beat):
            handleMIDIMetronomeNoteBeatChanged();
            return true;

         case @(fp_reclatency):
            handleRecLatencyChanged();
            return true;

         case @(cb_reclatency):
            handleEnableRecLatencyChanged();
            return true;

         case @(fp_precount_global):
            handlePrecountGlobalChanged();
            return true;

         case @(fp_precount_tracker):
            handlePrecountTrackerChanged();
            return true;

         case @(fp_minnotedur):
            handleMinNoteDurChanged();
            return true;

         case @(cb_mtc):
            handleMTCEnableChanged();
            return true;

         case @(fp_mtc_offset):
            handleMTCOffsetChanged();
            return true;

         case @(fp_mtc_prerun):
            handleMTCPreRunChanged();
            return true;

         case @(fp_mtc_align):
            handleMTCAlignChanged();
            return true;


            // Kbd:
         case @(cb_kbd_vsync):
            handleKbdVSyncChanged();
            return true;

         case @(cb_kbd_cmdcnp):
            handleKbdCmdCopyPaste();
            return true;

         case @(cb_kbd_mapslashtoless):
            handleKbdMapSlashToLess();
            return true;

         case @(cb_kbd_swaphomeend):
            handleKbdSwapHomeEnd();
            return true;


            // UI:
         case @(cb_ui_transparent):
            handleUITransparentChanged();
            return true;

         case @(cm_ui_postfx_fs_mode):
            handleUIPostFXFSModeChanged();
            return true;

         case @(tf_ui_postfx_fs_color):
            handleUIPostFXFSColorChanged();
            return true;

         case @(bt_ui_postfx_fs_color):
            handlePickPostFXFSColor();
            return true;

         case @(cm_ui_postfx_win_mode):
            handleUIPostFXWinModeChanged();
            return true;

         case @(tf_ui_postfx_win_color):
            handleUIPostFXWinColorChanged();
            return true;

         case @(bt_ui_postfx_win_color):
            handlePickPostFXWinColor();
            return true;

         case @(cb_ui_vsync):
            handleUIVSyncChanged();
            return true;

         case @(cb_ui_fpslimit):
            handleUIFPSLimitChanged();
            return true;

         case @(cb_ui_fullscreen):
            handleUIFullscreenChanged();
            return true;

         case @(fp_ui_fullscreensx):
            handleUIFullscreenWidthChanged();
            return true;

         case @(fp_ui_fullscreensy):
            handleUIFullscreenHeightChanged();
            return true;

         case @(cm_ui_fullscreenbits):
            handleUIFullscreenBitsChanged();
            return true;

         case @(cb_ui_fullscreendisplaysize):
            handleUIFullscreenDisplaySizeChanged();
            return true;

         case @(cm_ui_size_preset):
            handleUISizePresetChanged();
            return true;

         case @(fp_ui_zoom):
            handleUIZoomChanged();
            return true;

         case @(bt_ui_zoom_apply):
            handleUIZoomApply();
            return true;

         case @(cm_ui_cursor_zoom):
            handleUICursorZoomChanged();
            return true;

         case @(cm_ui_start_page):
            handleUIStartPageChanged();
            return true;

         case @(cm_ui_theme):
            handleUIThemeChanged();
            return true;

         case @(cm_ui_color_grading):
            handleUIColorGradingChanged();
            return true;

         case @(fp_ui_color_grading_amount):
            handleUIColorGradingAmountChanged();
            return true;

         case @(bt_parent):
            root_form.showPageParent();
            return true;

         case @(tab_groups):
            // Workaround to clean up graphics leftovers and fix TitledPanel layout issue
            UI.RedrawAll();
            relayout();
            return true;
      }

      return Page::consumeAction(_action);
   }

}
