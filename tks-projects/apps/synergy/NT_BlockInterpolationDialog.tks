// ----
// ---- file   : NT_BlockInterpolationDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2010-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 11Jan2010
// ---- changed: 09Jan2012, 17Jan2015, 23Jan2015, 03Feb2015, 30Nov2018, 03Dec2018, 03Apr2020
// ----          06Oct2023, 29Oct2023
// ----
// ----
// ----

module MNT_BlockInterpolationDialog;

use namespace ui;


// <class.png>
class NT_BlockInterpolationDialog extends Dialog, ActionConsumer, ActionProvider {

   define int IPOL_LINEAR            = 0;
   define int IPOL_SMOOTHSTEP        = 1;
   define int IPOL_COSINE            = 2;
   define int IPOL_SMOOTHSTEP_COSINE = 3;
   define int IPOL_COSINE_SMOOTHSTEP = 4;
   define int IPOL_RAND              = 5;

   static StringArray interpol_type_names = [
      "Linear",
      "Smoothstep",
      "Cosine",
      "SmoothStep -> Cosine",
      "Cosine -> SmoothStep",
      "Random"
   ];

   define int MIN_WIDTH = 64;
   define int MIN_HEIGHT =64;

   define String ACTION_NAME = "BlockInterpolationDialog";

   protected ActionConsumer *recipient;

   ComboBox *cm_interpoltype;
   Spacer   *sp_debug;
   Button   *bt_ok;


   public static New(ActionConsumer _recipient) : NT_BlockInterpolationDialog
   {
      local NT_BlockInterpolationDialog d;
      d.initBlockInterpolationDialog(_recipient);
      return deref d;
   }

   protected initBlockInterpolationDialog(ActionConsumer _recipient) {

      initDialog();

      recipient <= deref _recipient;
      int w, h;

      Label *lb;
      Panel *lp;
      ComboBox *cm;
      CheckBox *cb;

      Panel l <= Panel.New();

      local SizeGroupX sgxLabel;
      l.setSizeGroup(deref sgxLabel);

      // Add interpolation type combobox
      lp <= Panel.New();
      lp.setPadding4f(6,0,0,0);

      lb <= Label.New();
      lb.setCaption("Interpolation type:");
      lb.setTextPlacement(Layout.RIGHT);
      lb.setSizeGroup(sgxLabel);
      lb.setAlignment(Layout.BASELINE);
      lb.setPadLeft(2);
      lp.addLayer(deref lb, Layout.RIGHT);

      cm <= ComboBox.New();
      cm.setOptions(interpol_type_names);
      cm.setSelectedOption(IPOL_LINEAR);
      cm.setAlignment(Layout.BASELINE);
      lp.addLayer(deref cm, Layout.RIGHT);
      cm_interpoltype <= cm;

      l.addLayer(deref lp, Layout.BOTTOM);

      // Add OK button
      Button btOk <= Button.New();
      btOk.setCaption("Interpolate");
      btOk.setAlignment(Layout.CENTER);
      btOk.setPadding4f(UIConstants.DIALOGBUTTON_PAD_TOP, UIConstants.DIALOGBUTTON_PAD_LEFT,
                        UIConstants.DIALOGBUTTON_PAD_BOTTOM, UIConstants.DIALOGBUTTON_PAD_RIGHT
                        );
      btOk.setInnerPadding4f(UIConstants.DIALOGBUTTON_INSET_TOP, UIConstants.DIALOGBUTTON_INSET_LEFT,
                             UIConstants.DIALOGBUTTON_INSET_BOTTOM, UIConstants.DIALOGBUTTON_INSET_RIGHT
                             );
      btOk.setProvidedActionAlias(Button.ACTION_CLICK, "ok");
      btOk.setEnableLabelButtonHiDPI();
      bt_ok <= btOk;

      // Add Cancel button
      Button btCancel <= Button.New();
      btCancel.setCaption("Cancel");
      btCancel.setAlignment(Layout.CENTER);
      btCancel.setIcon(UI.GetIcon("cancel"));
      btCancel.setIconScale(0.5);
      btCancel.setPadding4f(UIConstants.DIALOGBUTTON_PAD_TOP, UIConstants.DIALOGBUTTON_PAD_LEFT,
                            UIConstants.DIALOGBUTTON_PAD_BOTTOM, UIConstants.DIALOGBUTTON_PAD_RIGHT
                            );
      btCancel.setInnerPadding4f(UIConstants.DIALOGBUTTON_INSET_TOP, UIConstants.DIALOGBUTTON_INSET_LEFT,
                                 UIConstants.DIALOGBUTTON_INSET_BOTTOM, UIConstants.DIALOGBUTTON_INSET_RIGHT
                                 );
      btCancel.setProvidedActionAlias(Button.ACTION_CLICK, "cancel");
      btCancel.setEnableLabelButton(true);

      // Group the Ok and Cancel buttons
      Panel p <= Panel.New();
      p.addLayer(deref btOk, Layout.LEFT);
      p.addLayer(deref btCancel, Layout.RIGHT);
      p.setAlignment(Layout.CENTER);

      l.addLayer(deref p, Layout.BOTTOM);

      // Initialize window
      initWindow(deref l,
                 "Block interpolation",
                 0, 0, // update position in show()
                 MIN_WIDTH, MIN_HEIGHT
                 );

      resizeToMinimum();
   }

   public method getInterpolType() : int {
      return cm_interpoltype.getSelectedOption();
   }

   protected handleSelection() {
      hide();
      if(recipient instanceof ActionConsumer)
      {
         Action ac <= Action.New(ACTION_NAME, this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   protected dialogCanceled() {
      hide();
   }

   public virtual consumeAction(Action _ac) returns boolean {
      String name = _ac.getActionName();
      switch(name)
      {
         case "ok":
            handleSelection();
            break;

         case "cancel":
            dialogCanceled();
            break;
      }
      return true;
   }

   public virtual onKey(Key _key) returns boolean {
      switch(_key.pressed)
      {
         case VKEY_ESCAPE:
            dialogCanceled();
            return true;

         case VKEY_RETURN:
         case VKEY_SPACE:
            handleSelection();
            return true;

         default:
            break;
      }
      return false;
   }

   protected virtual preShow() {
      Dialog::preShow();
   }

   protected virtual postShow() {
      Dialog::postShow();
      UI.SetKeyboardFocus(bt_ok);
   }

}
