// ----
// ---- file   : NSQ_ActivityLED.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 13May2020
// ---- changed: 28Feb2025
// ----
// ----
// ----

module MNSQ_ActivityLED;

use namespace ui;
use namespace st2;


// <class.png>
class NSQ_ActivityLED : Layer {

   NodeSeqEditor *parent_editor;
   protected int track_idx;
   boolean b_out;


   // <ui_init.png>
   public method initLED(NodeSeqEditor _editor, int _trackIdx) {
      initLayer();
      parent_editor <= _editor;
      track_idx = _trackIdx;
   }

   // <ui_render.png>
   public virtual onDraw() {
      int c32 = lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG);
      int c32Tint = 0;

      NSQ_Pattern pat <= parent_editor.getEditPattern();
      boolean bActive = false;
      float act = 0;

      if(null != pat)
      {
         if(b_out)
            c32Tint = app_lnf.getColor(AppLookAndFeel.COLOR_NODESEQ_ACTIVITY_LED_OUT);
         else
            c32Tint = app_lnf.getColor(AppLookAndFeel.COLOR_NODESEQ_ACTIVITY_LED_IN);

         NSQ_Track track <= pat.getTrackByIdx(track_idx);
         if(b_out)
         {
            if(track.ui_midi_out_activity_countdown >= 0)
            {
               act = float(track.ui_midi_out_activity_countdown) / NSQ_Track.UI_MIDI_ACTIVITY_MAX;
               track.ui_midi_out_activity_countdown--;
               bActive = (track.ui_midi_out_activity_countdown >= 0);
            }
         }
         else
         {
            if(track.ui_midi_in_activity_countdown >= 0)
            {
               act = float(track.ui_midi_in_activity_countdown) / NSQ_Track.UI_MIDI_ACTIVITY_MAX;
               track.ui_midi_in_activity_countdown--;
               bActive = (track.ui_midi_in_activity_countdown >= 0);
            }
         }

         act = 1.0 - act;
         act *= act;
         act *= act;
         act = 1.0 - act;

         c32Tint = (c32Tint&0xFFFFFF) | (int(((c32Tint>>24)&255) * act) << 24);
         c32 = UI.TintColor32(c32, c32Tint);
      }

      UIRenderer.DisableBlending();
      UIRenderer.DrawFilledRectangle(0, 0, getSizeX(), getSizeY(), c32);

      if(bActive)
         redraw();
   }
}
