// ----
// ---- file   : NodeMonoPolyEditor.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2015-2019 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 10Apr2015, 12Apr2015, 13Apr2015, 29Apr2015, 15May2015, 26Jul2015, 15Nov2015
// ----          19Jan2017, 08Feb2017, 09Feb2017, 18Mar2017, 24Mar2017, 16Jun2017, 01Sep2017
// ----          12Oct2017, 13Oct2017, 29Aug2019, 20Sep2019, 05Oct2019, 08Nov2019
// ----
// ----
// ----

module MNodeMonoPolyEditor;

use namespace ui;
use namespace st2;


// <class.png>
class NodeMonoPolyEditor extends NodeEditor, MIDIMapEventListener, ActionProvider, MIDIMapDefs {

   public NodeMonoPoly *monopoly;

   protected ComboBox  *cm_in_dev;
   protected CheckBox  *cb_in_en;
   protected ComboBox  *cm_in_ch;

   protected ComboBox   *cm_out1_dev;
   protected CheckBox   *cb_out1_en;
   protected ComboBox   *cm_out1_ch;
   protected FloatParam *fp_out1_transpose;

   protected ComboBox   *cm_out2_dev;
   protected CheckBox   *cb_out2_en;
   protected ComboBox   *cm_out2_ch;
   protected FloatParam *fp_out2_transpose;

   protected ComboBox   *cm_out3_dev;
   protected CheckBox   *cb_out3_en;
   protected ComboBox   *cm_out3_ch;
   protected FloatParam *fp_out3_transpose;

   protected ComboBox   *cm_out4_dev;
   protected CheckBox   *cb_out4_en;
   protected ComboBox   *cm_out4_ch;
   protected FloatParam *fp_out4_transpose;

   protected ComboBox    *cm_dbl_dev;
   protected CheckBox    *cb_dbl_en;
   protected LayerSwitch *ls_dbl_ch;
   protected FloatParam  *fp_dbl_ch_off;
   protected ComboBox    *cm_dbl_ch_abs;
   protected CheckBox    *cb_dbl_abs;

   protected ComboBox  *cm_trig_mode;
   protected CheckBox  *cb_trig_double;
   protected CheckBox  *cb_trig_paired;
   protected CheckBox  *cb_trig_next;
   protected FloatParam *fp_output;

   protected ComboBox  *cm_ctl_mode;
   protected CheckBox  *cb_ctl_gate;

   protected ComboBox  *cm_vel_mode;
   protected CheckBox  *cb_vel_fixed;


   // <init.png>
   public virtual init() : boolean {

      if(initPakFile("NodeMonoPolyEditor.xfm"))
      {
         if(autoResolveIds(this))
         {
            initMMC();

            return true;
         }
      }

      return false;
   }

   // <midi_mmc.png>
   protected method initMMC() {

      mmcInit("NodeMonoPolyEditor");

      // From PageNode: (so these show up in the map editor)
      root_form.pg_node.addBaseMMCTargets(this);
   }

   // <midi_mmc.png>
   public virtual mmcHandleEvent(MIDIMapEvent _ev) : boolean {
      // trace "xxx NodeAutoEditor::mmcHandleEvent";

      if(!mmcIsBindableEvent(_ev))
         return false;

      MIDIMapEvent boundEv <= mmcGetBindingByEvent(_ev);

      if(null != boundEv)
      {
         switch(boundEv.bound_target.target_name)
         {
            default:
               return root_form.pg_node.mmcHandleNodeTarget(boundEv.bound_target.target_name);
         }
      }

      return false;
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {

      layers.joinRR(layers,
                    [
                       cm_in_dev,
                       cb_in_en,
                       cm_in_ch,

                       cm_out1_dev,
                       cb_out1_en,
                       cm_out1_ch,
                       fp_out1_transpose,

                       cm_out2_dev,
                       cb_out2_en,
                       cm_out2_ch,
                       fp_out2_transpose,

                       cm_out3_dev,
                       cb_out3_en,
                       cm_out3_ch,
                       fp_out3_transpose,

                       cm_out4_dev,
                       cb_out4_en,
                       cm_out4_ch,
                       fp_out4_transpose,

                       cm_dbl_dev,
                       cb_dbl_en
                       ]
                    );

      if(monopoly.b_dbl_abs)
      {
         layers.joinRR(layers,
                       [
                          cm_dbl_ch_abs,
                          cb_dbl_abs
                        ]
                       );
      }
      else
      {
         layers.joinRR(layers,
                       [
                          fp_dbl_ch_off,
                          cb_dbl_abs
                        ]
                       );
      }


      layers.joinRR(layers,
                    [
                       cm_trig_mode,
                       cb_trig_double,
                       cb_trig_paired,
                       cb_trig_next,
                       fp_output,

                       cm_ctl_mode,
                       cb_ctl_gate,

                       cm_vel_mode,
                       cb_vel_fixed
                     ]
                    );
      return layers;
   }

   // <ui_show.png>
   public virtual showNode(NodeMonoPoly _monopoly) {
      monopoly <= _monopoly;

      StringArray devAll;
      IntArray bgcolorsAll;

      devAll = MIDI.out_device_names_sorted;
      bgcolorsAll = MIDI.out_device_bgcolors_sorted;

      cm_in_dev.setOptions(devAll);
      cm_in_dev.setOptionBGColors(bgcolorsAll);

      cm_out1_dev.setOptions(devAll);
      cm_out1_dev.setOptionBGColors(bgcolorsAll);

      cm_out2_dev.setOptions(devAll);
      cm_out2_dev.setOptionBGColors(bgcolorsAll);

      cm_out3_dev.setOptions(devAll);
      cm_out3_dev.setOptionBGColors(bgcolorsAll);

      cm_out4_dev.setOptions(devAll);
      cm_out4_dev.setOptionBGColors(bgcolorsAll);

      cm_dbl_dev.setOptions(devAll);
      cm_dbl_dev.setOptionBGColors(bgcolorsAll);

      boolean bEnable;

      bEnable = monopoly.b_in_en;
      cb_in_en.setSelected(bEnable);
      cm_in_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(monopoly.in_dev));
      cm_in_dev.setEditable(bEnable);
      cm_in_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(monopoly.in_dev, null/*firstOptionOrNull*/));
      cm_in_ch.setSelectedOption(monopoly.in_ch);
      cm_in_ch.setEditable(bEnable);

      bEnable = monopoly.b_out1_en;
      cb_out1_en.setSelected(bEnable);
      cm_out1_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(monopoly.out1_dev));
      cm_out1_dev.setEditable(bEnable);
      cm_out1_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(monopoly.out1_dev, null/*firstOptionOrNull*/));
      cm_out1_ch.setSelectedOption(monopoly.out1_ch);
      cm_out1_ch.setEditable(bEnable);
      fp_out1_transpose.setEditable(bEnable);

      bEnable = monopoly.b_out2_en;
      cb_out2_en.setSelected(bEnable);
      cm_out2_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(monopoly.out2_dev));
      cm_out2_dev.setEditable(bEnable);
      cm_out2_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(monopoly.out2_dev, null/*firstOptionOrNull*/));
      cm_out2_ch.setSelectedOption(monopoly.out2_ch);
      cm_out2_ch.setEditable(bEnable);
      fp_out2_transpose.setEditable(bEnable);

      bEnable = monopoly.b_out3_en;
      cb_out3_en.setSelected(bEnable);
      cm_out3_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(monopoly.out3_dev));
      cm_out3_dev.setEditable(bEnable);
      cm_out3_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(monopoly.out3_dev, null/*firstOptionOrNull*/));
      cm_out3_ch.setSelectedOption(monopoly.out3_ch);
      cm_out3_ch.setEditable(bEnable);
      fp_out3_transpose.setEditable(bEnable);

      bEnable = monopoly.b_out4_en;
      cb_out4_en.setSelected(bEnable);
      cm_out4_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(monopoly.out4_dev));
      cm_out4_dev.setEditable(bEnable);
      cm_out4_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(monopoly.out4_dev, null/*firstOptionOrNull*/));
      cm_out4_ch.setSelectedOption(monopoly.out4_ch);
      cm_out4_ch.setEditable(bEnable);
      fp_out4_transpose.setEditable(bEnable);

      bEnable = monopoly.b_dbl_en;
      cb_dbl_en.setSelected(bEnable);
      cm_dbl_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(monopoly.dbl_dev));
      cm_dbl_dev.setEditable(bEnable);
      fp_dbl_ch_off.setValue(monopoly.dbl_ch_off);
      fp_dbl_ch_off.setEditable(bEnable);
      cm_dbl_ch_abs.setSelectedOption(monopoly.dbl_ch_abs);
      cm_dbl_ch_abs.setEditable(bEnable);
      cb_dbl_abs.setSelected(monopoly.b_dbl_abs);
      cb_dbl_abs.setEditable(bEnable);
      ls_dbl_ch.switchToLayerNr(monopoly.b_dbl_abs);

      cm_trig_mode.setSelectedOption(monopoly.trig_mode);
      cb_trig_double.setSelected(monopoly.b_trig_double);
      cb_trig_paired.setSelected(monopoly.b_trig_paired);
      cb_trig_next.setSelected(monopoly.b_trig_next);

      cm_ctl_mode.setSelectedOption(monopoly.ctl_mode);
      cb_ctl_gate.setSelected(monopoly.b_ctl_gate);

      cm_vel_mode.setSelectedOption(monopoly.vel_mode);
      cb_vel_fixed.setSelected(monopoly.b_vel_fixed);

      handlePatternChanged();

      MIDI.AddMIDIMapEventListener(this);

      if(!NodeEditor.b_lock_kbdfocus)
      {
         UI.SetKeyboardFocus(this);
      }
   }

   // <method.png>
   public virtual showNodePost() {
      // trace "xxx NodeMonoPolyEditor::showNodePost";
   }

   // <ui_hide.png>
   public virtual leaveNode() {
      MIDI.RemoveMIDIMapEventListener(this);
   }

   // <ui_hide.png>
   public virtual unsetNode() {
      monopoly <= null;
   }

   // <midi_mmt.png>
   public virtual mmtHandleGlobalValue(float _val) : boolean {
      Layer kbdLayer <= UI.GetKeyboardFocus();

      return false;
   }

   // <midi_mmt.png>
   public virtual mmtHandleGlobalValueDelta(int _delta) : boolean {
      Layer kbdLayer <= UI.GetKeyboardFocus();

      return false;
   }

   // <midi_mml.png>
   public virtual mmlHandleEventUI(MIDIMapEvent _ev) : boolean {

      if(_ev.isReservedEvent())
         return false;

      return false;
   }

   // <ui_handle.png>
   public virtual nodeHandleEditPatternChanged() {
      handlePatternChanged();
   }

   // <ui_handle.png>
   protected method handlePatternChanged() {
      NodeMonoPolyPattern pat <= monopoly.nodeGetCurrentEditPattern();

      if(null != pat)
      {
         fp_out1_transpose.setValue(pat.out1_transpose);
         fp_out2_transpose.setValue(pat.out2_transpose);
         fp_out3_transpose.setValue(pat.out3_transpose);
         fp_out4_transpose.setValue(pat.out4_transpose);
      }
      else
      {
         fp_out1_transpose.setValue(0);
         fp_out2_transpose.setValue(0);
         fp_out3_transpose.setValue(0);
         fp_out4_transpose.setValue(0);
      }

      fp_out1_transpose.redraw();
      fp_out2_transpose.redraw();
      fp_out3_transpose.redraw();
      fp_out4_transpose.redraw();

      root_form.pg_node.handleEditPatternChanged();
   }

   // <ui_handle.png>
   protected method handleInEnChanged() {
      boolean bEnable = cb_in_en.isSelected();
      monopoly.setEnableIn(bEnable);
      cm_in_dev.setEditable(bEnable);
      cm_in_ch.setEditable(bEnable);
      Global.Print("Input is "+Utils.GetEnableString(monopoly.b_in_en));
   }

   // <ui_handle.png>
   protected method handleInDevChanged() {
      monopoly.setInDev(MIDI.SortedToUnsortedDevIdx(cm_in_dev.getSelectedOption()));

      cm_in_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(monopoly.in_dev, null/*firstOptionOrNull*/));

      Global.Print("Input device is "+cm_in_dev.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleInChChanged() {
      monopoly.setInCh(cm_in_ch.getSelectedOption());

      Global.Print("Input channel is "+cm_in_ch.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleOut1EnChanged() {
      boolean bEnable = cb_out1_en.isSelected();
      monopoly.setEnableOut1(bEnable);
      cm_out1_dev.setEditable(bEnable);
      cm_out1_ch.setEditable(bEnable);
      fp_out1_transpose.setEditable(bEnable);
      Global.Print("Out.1 is "+Utils.GetEnableString(monopoly.b_out1_en));
   }

   // <ui_handle.png>
   protected method handleOut1DevChanged() {
      monopoly.setOut1Dev(MIDI.SortedToUnsortedDevIdx(cm_out1_dev.getSelectedOption()));

      cm_out1_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(monopoly.out1_dev, null/*firstOptionOrNull*/));

      Global.Print("Out.1 device is "+cm_out1_dev.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleOut1ChChanged() {
      monopoly.setOut1Ch(cm_out1_ch.getSelectedOption());

      Global.Print("Out.1 channel is "+cm_out1_ch.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleOut1TransposeChanged() {
      NodeMonoPolyPattern pat <= monopoly.getOrCreateCurrentEditPattern();
      pat.setOut1Transpose(fp_out1_transpose.getFloatValue());

      Global.Print("Out.1 transpose is "+pat.out1_transpose);
   }

   // <ui_handle.png>
   protected method handleOut2EnChanged() {
      boolean bEnable = cb_out2_en.isSelected();
      monopoly.setEnableOut2(bEnable);
      cm_out2_dev.setEditable(bEnable);
      cm_out2_ch.setEditable(bEnable);
      fp_out2_transpose.setEditable(bEnable);
      Global.Print("Out.2 is "+Utils.GetEnableString(monopoly.b_out2_en));
   }

   // <ui_handle.png>
   protected method handleOut2DevChanged() {
      monopoly.setOut2Dev(MIDI.SortedToUnsortedDevIdx(cm_out2_dev.getSelectedOption()));

      cm_out2_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(monopoly.out2_dev, null/*firstOptionOrNull*/));

      Global.Print("Out.2 device is "+cm_out2_dev.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleOut2ChChanged() {
      monopoly.setOut2Ch(cm_out2_ch.getSelectedOption());

      Global.Print("Out.2 channel is "+cm_out2_ch.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleOut2TransposeChanged() {
      NodeMonoPolyPattern pat <= monopoly.getOrCreateCurrentEditPattern();
      pat.setOut2Transpose(fp_out2_transpose.getFloatValue());

      Global.Print("Out.2 transpose is "+pat.out2_transpose);
   }

   // <ui_handle.png>
   protected method handleOut3EnChanged() {
      boolean bEnable = cb_out3_en.isSelected();
      monopoly.setEnableOut3(bEnable);
      cm_out3_dev.setEditable(bEnable);
      cm_out3_ch.setEditable(bEnable);
      fp_out3_transpose.setEditable(bEnable);
      Global.Print("Out.3 is "+Utils.GetEnableString(monopoly.b_out3_en));
   }

   // <ui_handle.png>
   protected method handleOut3DevChanged() {
      monopoly.setOut3Dev(MIDI.SortedToUnsortedDevIdx(cm_out3_dev.getSelectedOption()));

      cm_out3_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(monopoly.out3_dev, null/*firstOptionOrNull*/));

      Global.Print("Out.3 device is "+cm_out3_dev.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleOut3ChChanged() {
      monopoly.setOut3Ch(cm_out3_ch.getSelectedOption());

      Global.Print("Out.3 channel is "+cm_out3_ch.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleOut3TransposeChanged() {
      NodeMonoPolyPattern pat <= monopoly.getOrCreateCurrentEditPattern();
      pat.setOut3Transpose(fp_out3_transpose.getFloatValue());

      Global.Print("Out.3 transpose is "+pat.out3_transpose);
   }

   // <ui_handle.png>
   protected method handleOut4EnChanged() {
      boolean bEnable = cb_out4_en.isSelected();
      monopoly.setEnableOut4(bEnable);
      cm_out4_dev.setEditable(bEnable);
      cm_out4_ch.setEditable(bEnable);
      fp_out4_transpose.setEditable(bEnable);
      Global.Print("Out.4 is "+Utils.GetEnableString(monopoly.b_out4_en));
   }

   // <ui_handle.png>
   protected method handleOut4DevChanged() {
      monopoly.setOut4Dev(MIDI.SortedToUnsortedDevIdx(cm_out4_dev.getSelectedOption()));

      cm_out4_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(monopoly.out4_dev, null/*firstOptionOrNull*/));

      Global.Print("Out.4 device is "+cm_out4_dev.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleOut4ChChanged() {
      monopoly.setOut4Ch(cm_out4_ch.getSelectedOption());

      Global.Print("Out.4 channel is "+cm_out4_ch.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleOut4TransposeChanged() {
      NodeMonoPolyPattern pat <= monopoly.getOrCreateCurrentEditPattern();
      pat.setOut4Transpose(fp_out4_transpose.getFloatValue());

      Global.Print("Out.4 transpose is "+pat.out4_transpose);
   }

   // <ui_handle.png>
   protected method handleDblEnChanged() {
      boolean bEnable = cb_dbl_en.isSelected();
      monopoly.setEnableDbl(bEnable);
      cm_dbl_dev.setEditable(bEnable);
      fp_dbl_ch_off.setEditable(bEnable);
      cm_dbl_ch_abs.setEditable(bEnable);
      cb_dbl_abs.setEditable(bEnable);
      Global.Print("Dbl is "+Utils.GetEnableString(monopoly.b_dbl_en));
   }

   // <ui_handle.png>
   protected method handleDblDevChanged() {
      monopoly.setDblDev(MIDI.SortedToUnsortedDevIdx(cm_dbl_dev.getSelectedOption()));

      Global.Print("Dbl device is "+cm_dbl_dev.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleDblChOffChanged() {
      monopoly.setDblChOff(fp_dbl_ch_off.getFloatValue());

      Global.Print("Dbl ch.off is "+monopoly.dbl_ch_off);
   }

   // <ui_handle.png>
   protected method handleDblChAbsChanged() {
      monopoly.setDblChAbs(cm_dbl_ch_abs.getSelectedOption());

      Global.Print("Dbl ch.abs is "+(1 + monopoly.dbl_ch_abs));
   }

   // <ui_handle.png>
   protected method handleEnableDblAbsChanged() {
      monopoly.setEnableDblAbs(cb_dbl_abs.isSelected());

      ls_dbl_ch.switchToLayerNr(monopoly.b_dbl_abs);

      Global.Print("Dbl Abs Ch is "+Utils.GetEnableString(monopoly.b_dbl_abs));
   }

   // <ui_handle.png>
   protected method handleTrigModeChanged() {
      monopoly.setTrigMode(cm_trig_mode.getSelectedOption());

      Global.Print("Trig Mode is "+cm_trig_mode.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleEnableTrigDoubleChanged() {
      monopoly.setEnableTrigDouble(cb_trig_double.isSelected());

      Global.Print("Trig Double is "+Utils.GetEnableString(monopoly.b_trig_double));
   }

   // <ui_handle.png>
   protected method handleEnableTrigPairedChanged() {
      monopoly.setEnableTrigPaired(cb_trig_paired.isSelected());

      Global.Print("Trig Link is "+Utils.GetEnableString(monopoly.b_trig_paired));
   }

   // <ui_handle.png>
   protected method handleEnableTrigNextChanged() {
      monopoly.setEnableTrigNext(cb_trig_next.isSelected());

      Global.Print("Trig Next is "+Utils.GetEnableString(monopoly.b_trig_next));
   }

   // <ui_handle.png>
   protected method handleOutputChanged() {
      monopoly.setNextOutput(fp_output.getFloatValue());

      Global.Print("Next Output is "+monopoly.getNextOutput());
   }

   // <ui_handle.png>
   protected method handleCtlModeChanged() {
      monopoly.setCtlMode(cm_ctl_mode.getSelectedOption());

      Global.Print("Ctl Mode is "+cm_ctl_mode.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleCtlGateChanged() {
      monopoly.setEnableCtlGate(cb_ctl_gate.isSelected());

      Global.Print("Ctl Note-Gate is "+Utils.GetEnableString(monopoly.b_ctl_gate));
   }

   // <ui_handle.png>
   protected method handleVelModeChanged() {
      monopoly.setVelMode(cm_vel_mode.getSelectedOption());

      Global.Print("Vel Mode is "+cm_vel_mode.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleEnableVelFixedChanged() {
      monopoly.setEnableVelFixed(cb_vel_fixed.isSelected());

      Global.Print("Vel Fixed is "+Utils.GetEnableString(monopoly.b_vel_fixed));
   }

   // <method.png>
   public =replay= virtual selectPatternByIdx(int _patNr) {
      monopoly.nodeSetCurrentEditPatternNr(_patNr);
      monopoly.nodeSetCurrentPlayPatternNr(_patNr);

      monopoly.nodeQueuePrgChgOut(_patNr);
      // // replay.handleNodeStateChangedUI(monopoly, -1/*active*/, _patNr/*pat*/);

      handlePatternChanged();
   }

   // <ui_handle.png>
   protected =replay= method handleSelectPreviousPattern() {
      byte patNr = monopoly.nodeGetCurrentEditPatternNr();

      if(patNr > 0)
      {
         selectPatternByIdx(patNr - 1);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleSelectNextPattern() {
      byte patNr = monopoly.nodeGetCurrentEditPatternNr();

      if(patNr < 127)
      {
         selectPatternByIdx(patNr + 1);
      }
   }

   // <ui_handle.png>
   protected method handleSelectPreviousUsedPattern() {
      int patIdx = monopoly.nodeGetCurrentEditPatternNr();
      patIdx = monopoly.nodeFindPreviousPatternNrByUsedIdxWithOffset(patIdx-1, 0);

      if(patIdx >= 0)
      {
         selectPatternByIdx(patIdx);
      }
   }

   // <ui_handle.png>
   protected method handleSelectNextUsedPattern() {
      int patIdx = monopoly.nodeGetCurrentEditPatternNr();
      patIdx = monopoly.nodeFindNextPatternNrByUsedIdxWithOffset(patIdx+1, 0);

      if(patIdx >= 0)
      {
         selectPatternByIdx(patIdx);
      }
   }

   // <method_handle.png>
   public virtual handleStartPlaying() {
   }

   // <method_handle.png>
   public virtual handleStopPlaying(boolean _bAllowBookmark) {
   }

   // <method_handle.png>
   public virtual handleSongPosSelected() {
   }

   // <ui_timer.png>
   public virtual handleReplayTimer() {

      if(fp_output.getFloatValue() != monopoly.getNextOutput())
      {
         fp_output.setValue(monopoly.getNextOutput());
         fp_output.redraw();
      }

   }

   // <ui_mouse.png>
   public virtual onMouse(MouseEvent _ev) : boolean {
      return NodeEditor::onMouse(_ev);
   }

   // <ui_kbd.png>
   protected method handlePatternKeyHome(int _kMod) {
      if((VMOD_LSHIFT|VMOD_LCTRL) == _kMod)
      {
         handleSelectNextUsedPattern();
      }
      else
      {
         if(VMOD_LCTRL == _kMod)
         {
            handleSelectNextPattern();
            handleSelectNextPattern();
            handleSelectNextPattern();
         }
         handleSelectNextPattern();
      }
   }

   // <ui_kbd.png>
   protected method handlePatternKeyEnd(int _kMod) {
      if((VMOD_LSHIFT|VMOD_LCTRL) == _kMod)
      {
         handleSelectPreviousUsedPattern();
      }
      else
      {
         if(VMOD_LCTRL == _kMod)
         {
            handleSelectPreviousPattern();
            handleSelectPreviousPattern();
            handleSelectPreviousPattern();
         }
         handleSelectPreviousPattern();
      }
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      switch(_k.pressed)
      {
         case VKEY_END:
            if(STConfig.b_key_swap_pattern_home_end)
               handlePatternKeyHome(_k.mod);
            else
               handlePatternKeyEnd(_k.mod);
            return true;

         case VKEY_HOME:
            if(STConfig.b_key_swap_pattern_home_end)
               handlePatternKeyEnd(_k.mod);
            else
               handlePatternKeyHome(_k.mod);
            return true;
      }

      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      StringAction *sac;

      switch(@(ap))
      {
         default:
            break;

         case @(cm_in_dev):
            handleInDevChanged();
            return true;

         case @(cb_in_en):
            handleInEnChanged();
            return true;

         case @(cm_in_ch):
            handleInChChanged();
            return true;

         case @(cm_out1_dev):
            handleOut1DevChanged();
            return true;

         case @(cb_out1_en):
            handleOut1EnChanged();
            return true;

         case @(cm_out1_ch):
            handleOut1ChChanged();
            return true;

         case @(fp_out1_transpose):
            handleOut1TransposeChanged();
            return true;

         case @(cm_out2_dev):
            handleOut2DevChanged();
            return true;

         case @(cb_out2_en):
            handleOut2EnChanged();
            return true;

         case @(cm_out2_ch):
            handleOut2ChChanged();
            return true;

         case @(fp_out2_transpose):
            handleOut2TransposeChanged();
            return true;

         case @(cm_out3_dev):
            handleOut3DevChanged();
            return true;

         case @(cb_out3_en):
            handleOut3EnChanged();
            return true;

         case @(cm_out3_ch):
            handleOut3ChChanged();
            return true;

         case @(fp_out3_transpose):
            handleOut3TransposeChanged();
            return true;

         case @(cm_out4_dev):
            handleOut4DevChanged();
            return true;

         case @(cb_out4_en):
            handleOut4EnChanged();
            return true;

         case @(cm_out4_ch):
            handleOut4ChChanged();
            return true;

         case @(fp_out4_transpose):
            handleOut4TransposeChanged();
            return true;

         case @(cm_dbl_dev):
            handleDblDevChanged();
            return true;

         case @(cb_dbl_en):
            handleDblEnChanged();
            return true;

         case @(fp_dbl_ch_off):
            handleDblChOffChanged();
            return true;

         case @(cm_dbl_ch_abs):
            handleDblChAbsChanged();
            return true;

         case @(cb_dbl_abs):
            handleEnableDblAbsChanged();
            return true;

         case @(cm_trig_mode):
            handleTrigModeChanged();
            return true;

         case @(cb_trig_double):
            handleEnableTrigDoubleChanged();
            return true;

         case @(cb_trig_paired):
            handleEnableTrigPairedChanged();
            return true;

         case @(cb_trig_next):
            handleEnableTrigNextChanged();
            return true;

         case @(fp_output):
            handleOutputChanged();
            return true;

         case @(cm_ctl_mode):
            handleCtlModeChanged();
            return true;

         case @(cb_ctl_gate):
            handleCtlGateChanged();
            return true;

         case @(cm_vel_mode):
            handleVelModeChanged();
            return true;

         case @(cb_vel_fixed):
            handleEnableVelFixedChanged();
            return true;

      }

      return XMLForm::consumeAction(_action);
   }

}
