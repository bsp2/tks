// ----
// ---- file   : NM_FitBPMDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2017-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 02Jul2017
// ---- changed: 04Oct2023, 30Oct2023
// ----
// ----
// ----

module MNM_FitBPMDialog;

use namespace ui;
use namespace st2;


class NM_FitBPMDialog extends Dialog, ActionProvider {

   define String ACTION_FIT_OK;
   define String ACTION_FIT_CANCEL;

   protected XMLForm *xfm;

   protected ActionConsumer *recipient;

   protected FloatParam *fp_numbeats;
   protected Label *lb_bpm;

   protected Button *bt_fit;
   protected Button *bt_cancel;

   int milliseconds;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("NM_FitBPMDialog.xfm");
      if(null == xfm)
      {
         return false;
      }

      xfm.autoResolveIds(this);

      initWindow(xfm,
                 "Fit BPM to Sequence",
                 100, 100,
                 640, 240
                 );

      return true;
   }

   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_FIT_OK, ACTION_FIT_CANCEL];
   }

   public virtual isPopup() : boolean {
      return true;
   }

   public virtual isModal():boolean {
      return true;
   }

   public virtual isResizable() : boolean {
      return false;
   }

   // <method_set.png>
   public method setRecipient(ActionConsumer _ac) {
      recipient <= _ac;
   }

   // <method_set.png>
   public method setMilliseconds(int _ms) {
      milliseconds = _ms;

      // Guess num beats by current bpm
      fp_numbeats.setValue(int((milliseconds / ((1000.0*60) / current_song.bpm))+0.5));

      handleNumBeatsChanged();
   }

   // <ui_show.png>
   protected virtual preShow() {

      if(!b_layer_postinit_done)
         resizeToMinimum();

      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      UI.SetKeyboardFocus(bt_fit);
   }

   // <ui_handle.png>
   protected method handleCancel() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         Action ac <= Action.New(getProvidedActionAlias(ACTION_FIT_CANCEL), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <ui_handle.png>
   protected method handleFit() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         Action ac <= Action.New(getProvidedActionAlias(ACTION_FIT_OK), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <method_get.png>
   public method getNumBeats() : int {
      return fp_numbeats.getFloatValue();
   }

   // <method_get.png>
   public method getBPM() : int {
      float numBeats = fp_numbeats.getFloatValue();
      float numMillisecPerBeat = milliseconds / numBeats;
      float bpm = (60*1000.0) / numMillisecPerBeat;
      return bpm;
   }

   // <ui_handle.png>
   protected method handleNumBeatsChanged() {
      lb_bpm.setCaption(String(getBPM()));
      lb_bpm.redraw();

      Global.Print("millisec="+milliseconds+" beats="+fp_numbeats.getFloatValue()+" ("+(fp_numbeats.getFloatValue()/current_song.sig_beats)+" bars) => BPM="+getBPM());
   }

   // <ui_kbd.png>
   public virtual onKey(Key _key) : boolean {
      switch(_key.pressed)
      {
         case VKEY_ESCAPE:
            handleCancel();
            return true;

         case VKEY_RETURN:
         case VKEY_SPACE:
            handleFit();
            return true;

         default:
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String name = _ac.getActionName();

      // trace "xxx NT_ImportARDialog: got action name="+name;

      switch(name)
      {
         case "ok":
            handleFit();
            break;

         case "cancel":
            handleCancel();
            break;
      }

      switch(@(_ac.getActionProvider()))
      {
         case @(bt_fit):
             handleFit();
             return true;

         case @(bt_cancel):
             handleCancel();
             return true;

         case @(fp_numbeats):
            handleNumBeatsChanged();
            return true;
      }

      return true;
   }

}
