// ----
// ---- file   : NT_InstrumentView.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2006-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- changed: 14Sep2006, 17Sep2006, 20Sep2006, 02Oct2006, 03Oct2006, 08Mar2007, 09Mar2007,
// ----          10Mar2007, 15Oct2007, 16Oct2007, 20Oct2007, 21Oct2007, 22Oct2007, 04Nov2007
// ----          10Nov2007, 03Jan2008, 04Jan2008, 10Jan2008, 12Jan2008, 14Jan2008, 15Jan2008
// ----          16Jan2008, 21Jan2008, 27Jan2008, 03Aug2008, 04Aug2008, 05Aug2008, 07Aug2008
// ----          11Aug2008, 13Aug2008, 24Aug2008, 27Aug2008, 16Feb2009, 18Sep2009, 19Sep2009
// ----          20Sep2009, 21Sep2009, 22Sep2009, 23Dec2009, 26Dec2009, 27Dec2009, 03Jan2010
// ----          04Jan2010, 05Jan2010, 06Jan2010, 07Jan2010, 09Jan2010, 10Jan2010, 11Jan2010
// ----          13Jan2010, 16Jan2010, 17Jan2010, 29Jan2010, 25Feb2010, 01Mar2010, 25Apr2010
// ----          30Apr2010, 01May2010, 02May2010, 03May2010, 04May2010, 14May2010, 15May2010
// ----          06Jun2010, 15Jun2010, 16Jun2010, 26Jun2010, 30Jun2010, 01Jul2010, 02Jul2010
// ----          03Jul2010, 06Jul2010, 07Jul2010, 10Jul2010, 13Jul2010, 21Jul2010, 02Aug2010
// ----          28Sep2010, 19Oct2010, 25Oct2010, 09Nov2010, 22Jan2011, 03Feb2011, 06Feb2011
// ----          07Feb2011, 20Feb2011, 22Feb2011, 24Feb2011, 25Feb2011, 14Mar2011, 15Mar2011
// ----          20Mar2011, 26Mar2011, 20Apr2011, 05Jul2011, 04Jan2012, 08Jan2012, 09Jan2012
// ----          16Jan2012, 17Jan2012, 24Jan2012, 29Jan2012, 03Feb2012, 07Feb2012, 14Feb2012
// ----          19Feb2012, 20Feb2012, 21Feb2012, 14May2012, 03Nov2012, 06Dec2012, 12Dec2012
// ----          23Dec2012, 03Jan2013, 04Jan2013, 05Jan2013, 06Jan2013, 28Feb2013, 29Mar2013
// ----          07Apr2013, 19Apr2013, 22Apr2013, 12May2013, 14May2013, 15May2013, 25May2013
// ----          26May2013, 27May2013, 31May2013, 01Jun2013, 04Jun2013, 05Jun2013, 02Feb2014
// ----          17Jan2015, 19Jan2015, 23Jan2015, 24Jan2015, 26Jan2015, 27Jan2015, 28Jan2015
// ----          29Jan2015, 30Jan2015, 01Feb2015, 02Feb2015, 03Feb2015, 04Feb2015, 05Feb2015
// ----          06Feb2015, 18Feb2015, 22Feb2015, 23Feb2015, 26Feb2015, 01Mar2015, 06Mar2015
// ----          08Mar2015, 27Apr2015, 04May2015, 11May2015, 09Oct2015, 24Oct2015, 27Oct2015
// ----          28Oct2015, 11Nov2015, 17Dec2015, 17Jan2016, 22Jan2016, 01Feb2016, 28Mar2016
// ----          29Mar2016, 08Jul2016, 25Jul2016, 29Jan2017, 11Feb2017, 12Feb2017, 01Jul2017
// ----          09Jul2017, 04Jan2018, 03Mar2018, 06Mar2018, 07Mar2018, 21May2018, 24Jun2018
// ----          02Dec2018, 10Jan2019, 13Jan2019, 17Jan2019, 18Jan2019, 20Jan2019, 07Jun2019
// ----          01Aug2019, 20Sep2019, 03Oct2019, 06Mar2020, 14Mar2020, 19Mar2020, 02Apr2020
// ----          03Apr2020, 26Apr2020, 28Apr2020, 26Aug2020, 27Jan2021, 31Jan2021, 24Apr2021
// ----          21Jul2021, 11Feb2022, 08Apr2022, 21Sep2023, 03Oct2023, 14Oct2023, 15Oct2023
// ----          20Oct2023, 05Nov2023, 18Nov2023, 02Dec2023, 22Mar2024, 07Jul2024, 05Oct2024
// ----          16Jan2025, 28Feb2025, 07Jun2025, 12Jun2025
// ----
// ----
// ----

module MNT_InstrumentView;

use namespace ui;
use namespace st2;


// <class.png>
class NT_InstrumentView : XMLForm, ActionProvider, RemoteEventListener {

   NodeTrackerEditor *parent_editor;
   NodeTracker *parent_node;

   define String TA_MIDI_LEARN;
   define String TA_SELECT_KEYJAZZ_INSTR;
   define String TA_RELAYOUT;

   protected TimerAction ta_midi_learn;
   protected TimerAction ta_select_keyjazz_instr;
   protected TimerAction ta_relayout;

   protected NT_InstrumentsTM tm_instruments;
   public    TableView *tv_instruments;

   protected SplitPane *sp_instr;

   protected Panel *pn_allinstr;
   protected Panel *pn_curinstr;

   protected Button *bt_instr_new;
   protected Button *bt_instr_new_learn;
   protected Button *bt_instr_delete;
   protected Button *bt_instr_copy;
   protected Button *bt_instr_paste;

   protected TitledPanel *tp_instr;
   protected PopupMenu   *pm_ctlclipboard_instr;
   protected TextField   *tf_instr_name;
   protected Label       *lb_instr_profile;
   protected ComboBox    *cm_instr_dev;
   protected Button      *bt_instr_io_learn;
   protected ComboBox    *cm_instr_ch;
   protected FloatParam  *fp_instr_bank_msb;
   protected CheckBox    *cb_instr_bank_msb;
   protected FloatParam  *fp_instr_bank_lsb;
   protected CheckBox    *cb_instr_bank_lsb;
   protected CheckBox    *cb_instr_program;
   protected CheckBox    *cb_instr_program_shift;
   protected FloatParam  *fp_instr_program;
   protected Button      *bt_instr_program_learn;
   protected FloatParam  *fp_instr_pitchbend;
   protected CheckBox    *cb_instr_pbreset;
   protected CheckBox    *cb_instr_mono;
   protected CheckBox    *cb_instr_audio;
   protected FloatParam  *fp_instr_smpuid;
   protected Button      *bt_instr_smpimport;
   protected PopupMenu   *pm_instr;
   protected NT_ImportSampleDialog *dlg_importsmp;

   protected TableView       *tv_params;
   protected NT_MIDIParamsTM *tm_params;
   protected PopupMenu       *pm_params;
   protected Button       *bt_param_new;
   protected Button       *bt_param_new_learn;
   protected Button       *bt_param_delete;
   protected Button       *bt_param_copy;
   protected Button       *bt_param_paste;

   protected TitledPanel *tp_params;
   protected PopupMenu   *pm_ctlclipboard_params;
   protected TextField   *tf_param_name;
   protected ImportSynthProfileDialog *dlg_importmsp;
   protected Button      *bt_param_io_learn;
   protected FloatParam  *fp_param_reset;
   protected CheckBox    *cb_param_reset_select;
   protected CheckBox    *cb_param_reset_note;
   protected Button      *bt_param_reset_learn;
   protected ComboBox    *cm_param_range;
   protected CheckBox    *cb_param_scale14bit;
   protected FloatParam  *fp_param_recusr_rpn_min;
   protected FloatParam  *fp_param_recusr_rpn_ctr;
   protected FloatParam  *fp_param_recusr_rpn_max;
   protected CheckBox    *cb_param_recusr_asym;
   protected ComboBox    *cm_param_style;
   protected ComboBox    *cm_param_type;
   protected ComboBox    *cm_param_forceddev;
   protected ComboBox    *cm_param_forcedch;
   protected ComboBox    *cm_param_msblsb;
   protected LayerSwitch *ls_param_type;
   protected ComboBox    *cm_param_cc_msb_id;
   protected ComboBox    *cm_param_cc_lsb_id;
   protected ComboBox    *cm_param_rpn_alias_id;
   protected FloatParam  *fp_param_rpn_id;
   protected ComboBox    *cm_param_nrpn_alias_id;
   protected FloatParam  *fp_param_nrpn_id;
   protected FloatParam  *fp_param_remote_instance_id;
   protected Button      *bt_param_remote_query_instance_ids;
   protected FloatParam  *fp_param_remote_param_idx;
   protected Button      *bt_param_remote_query_params;
   protected ComboBox    *cm_param_remote_params;
   protected FloatParam  *fp_param_remote_out_min;
   protected FloatParam  *fp_param_remote_out_max;
   protected CheckBox    *cb_param_remote_relative;

   static NT_DeleteInstrumentDialog      dialog_deleteinstrument;
   // // static Dialog_OverwriteInstrument   dialog_overwriteinstrument;

   protected boolean b_select;  // true if view is running in selection mode

   protected boolean b_queue_select_keyjazz_instr_makevisible;

   protected static NT_Instrument *instr_clipboard;

   protected static NT_MIDIParam *param_clipboard;

   define int LEARN_NONE           = 0;
   define int LEARN_INSTR_NEW      = 1;
   define int LEARN_INSTR_IO       = 2;
   define int LEARN_INSTR_PROGRAM  = 3;
   define int LEARN_PARAM_NEW      = 4;
   define int LEARN_PARAM_IO       = 5;
   define int LEARN_PARAM_RESET    = 6;
   // (note) learn_mode is stored in node (needed by midi recording)

   static StringArray learn_mode_names = ["None",
                                          "New Instrument",
                                          "Instrument IO",
                                          "Instrument Program",
                                          "New Param",
                                          "Param IO",
                                          "Param Reset Value"
                                          ];
   protected STX_MIDIInDevice *learn_indev;
   protected boolean b_learning; // true while scanning MIDI input for bank select/program change
   define int LEARN_TIMEOUT = 49;  // number of ta_midi_learn timeouts (=> 50*200 = 10 sec)
   define int TINT32_LEARN = #58ef6467;
   protected int learn_timeout;
   protected boolean b_learn_param_created;

   static HashTable remote_param_names;  // indexed by remote_instance_id, value=StringArray

   protected boolean b_new_instr_tabcycle_list;


   // <init.png>
   public method init(NodeTrackerEditor _parentEditor) : boolean {

      parent_editor <= _parentEditor;

      if(initPakFile("NT_InstrumentView.xfm"))
      {
         if(!autoResolveIds(this))
            return false;

         initTimers();

         tm_instruments.parent_node <= null;
         tm_instruments.initTableModel();
         tv_instruments.setTableModel(tm_instruments);

         tm_params <= new NT_MIDIParamsTM;
         tm_params.initTableModel();
         tv_params.setTableModel(tm_params);

         cm_param_type      .setOptions(NT_MIDIParam.midi_long_type_names); // (note) updated in showParam() depending on actual instr. type
         cm_param_style     .setOptions(NT_CEL.cel_style_names);
         cm_param_range     .setOptions(NT_CEL.cel_range_names);
         cm_param_msblsb    .setOptions(NT_MIDIParam.msblsb_mode_names);
         cm_param_cc_msb_id .setOptions(MIDI.cc_names); // updated when param is shown
         cm_param_cc_lsb_id .setOptions(MIDI.cc_names); // updated when param is shown

         if(initDialogs())
         {
            return true;
         }
      }

      return false;
   }

   // <ui_timer.png>
   protected method initTimers() {
      ta_midi_learn           <= TimerAction.New(TA_MIDI_LEARN,           this, 200);
      ta_select_keyjazz_instr <= TimerAction.New(TA_SELECT_KEYJAZZ_INSTR, this,  60);
      ta_relayout             <= TimerAction.New(TA_RELAYOUT,             this, 100);
   }

   // // public virtual layoutHierarchy(local boolean _bInvalidateSizeCaches, local boolean _bLayoutFinal) {
   // //    XMLForm::layoutHierarchy(_bInvalidateSizeCaches, _bLayoutFinal);
   // //    XMLForm::layoutHierarchy(_bInvalidateSizeCaches, _bLayoutFinal);
   // // }

   // <ui_init.png>
   public method initDialogs() : boolean {
      return true;
   }

   // <ui_show.png>
   public method showNode(NodeTracker _node) {
      parent_node <= _node;

      tm_instruments.parent_node <= _node;

      setLearnMode(LEARN_NONE, true/*bQuiet*/);

      tv_instruments.tableModelChanged();

      selectKeyJazzInstr(true/*bCenter*/);

      if(!NodeEditor.b_lock_kbdfocus)
      {
         UI.SetKeyboardFocus(tv_instruments);
      }

      handleInstrumentSelected();
   }

   // <ui_show.png>
   public method showNodeQuiet(NodeTracker _node) {
      parent_node <= _node;
      tm_instruments.parent_node <= _node;
      tv_instruments.tableModelChanged();
   }

   // <method_handle.png>
   public method selectKeyJazzInstr(boolean _bCenter) {
      tv_instruments.moveCursorToRowNoAction(parent_node.keyJazzGetInstrumentNr());

      if(_bCenter)
         tv_instruments.centerRow();

      // // trace "xxx iv: selectKeyJazzinstr bCenter="+_bCenter;

      trySelectParamForCurrentCel();
   }

   // <method.png>
   protected method trySelectParamForCurrentCel() {
      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         int cCtlId = parent_editor.pattern_view.getCurrentController();

         if(cCtlId >= NT_TrackPattern.CTL_USR)
         {
            int usrCtlId = cCtlId - NT_TrackPattern.CTL_USR;
            NT_MIDIParam param <= ins.usrctl_params.get(usrCtlId);

            if(null != param)
            {
               tv_params.moveCursorToRow(usrCtlId);
               tv_params.centerRow();
               editSelectedParameter();
            }
         }
      }
   }

   // <method.png>
   protected trySelectCelForParam() {

      if(!parent_editor.isPatternViewActive())
      {
         NT_MIDIParam param <= getSelectedParameter();

         if(null != param)
         {
            NT_PatternView pv <= parent_editor.pattern_view;
            NT_TEL tel <= pv.getCurrentTrackLayout();

            if(null != tel)
            {
               NT_CEL cel <= tel.findVisibleCelForCtlById(param.id + NT_TrackPattern.CTL_USR);

               if(null != cel)
               {
                  int idx = tel.getIdxByCel(cel);
                  if(-1 != idx)
                  {
                     pv.moveCursorToCel(idx);
                  }
               }
            }
         }
      }
   }

   // <method.png>
   public method queueSelectKeyJazzInstr(boolean _bCenter) {
      // Called by PatternView.cursorTrackChanged() via NodeTrackerEditor.keyJazzSelectInstrument()
      b_queue_select_keyjazz_instr_makevisible |= _bCenter;
      ta_select_keyjazz_instr.schedule();
   }

   // <ui_hide.png>
   public method leaveNode() {

      // trace "xxx iv::leaveNode: parent_node="+#(parent_node);

      setLearnMode(LEARN_NONE, true/*bQuiet*/);
      ta_relayout.cancel();

      // Do not unset parent node so editing can continue (leaveSub)
      // // parent_node <= null;

      // // tm_instruments.parent_node <= null;

      tm_params.params <= null;

      cancelAllTimers();
   }

   // <method.png>
   public method cancelAllTimers() {
      ta_midi_learn.cancel();
      ta_select_keyjazz_instr.cancel();
   }

   // <ui_handle.png>
   public method handleViewLeave() {
      setLearnMode(LEARN_NONE, true/*bQuiet*/);
   }

   // <method.png>
   protected method returnToPatternView() {

      // switch back to pattern view
      parent_editor.toggleViews();
   }

   // <method.png>
   protected method refocusInstruments() {
      UI.SetKeyboardFocus(tv_instruments);
      tv_instruments.redraw();
   }

   // <method.png>
   protected method refocusParams() {
      if(null != getSelectedInstrument())
      {
         UI.SetKeyboardFocus(tv_params);
         tv_params.redraw();
      }
      else
         refocusInstruments();
   }

   // <ui_kbd.png>
   public method addMMTFocusLayers(PointerArray layers) {

      // // trace "xxx iv:addMMTFocusLayers: b_new_instr_tabcycle_list="+b_new_instr_tabcycle_list+" kbdfocus="+#(UI.keyboard_layer);

      if(b_new_instr_tabcycle_list)
      {
         if(@(UI.keyboard_layer) != @(tv_params))
         {
            layers.add(tv_instruments);
            layers.add(tf_instr_name);
            layers.add(cm_instr_dev);
            layers.add(cm_instr_ch);
            layers.add(tv_params);

            if(layers.containsPointer(UI.keyboard_layer) || tv_instruments.hierarchyHasKeyboardFocus() || tv_params.hierarchyHasKeyboardFocus())
               return;
            layers.remove(tv_instruments);
            layers.remove(tf_instr_name);
            layers.remove(cm_instr_dev);
            layers.remove(cm_instr_ch);
            layers.remove(tv_params);
         }
         b_new_instr_tabcycle_list = false;
      }

      layers.add(tv_instruments);
      layers.add(bt_instr_new);
      layers.add(bt_instr_new_learn);
      layers.add(bt_instr_delete);
      layers.add(bt_instr_copy);
      layers.add(bt_instr_paste);

      layers.add(tf_instr_name);
      layers.add(lb_instr_profile);
      layers.add(cm_instr_dev);
      layers.add(cm_instr_ch);
      layers.add(bt_instr_io_learn);

      layers.add(fp_instr_bank_msb);
      layers.add(cb_instr_bank_msb);
      layers.add(fp_instr_bank_lsb);
      layers.add(cb_instr_bank_lsb);
      layers.add(fp_instr_program);
      layers.add(cb_instr_program);
      layers.add(cb_instr_program_shift);
      layers.add(bt_instr_program_learn);
      layers.add(fp_instr_pitchbend);
      layers.add(cb_instr_pbreset);
      layers.add(cb_instr_mono);
      layers.add(cb_instr_audio);
      layers.add(fp_instr_smpuid);
      layers.add(bt_instr_smpimport);

      layers.add(tv_params);
      layers.add(bt_param_new);
      layers.add(bt_param_new_learn);
      layers.add(bt_param_delete);
      layers.add(bt_param_copy);
      layers.add(bt_param_paste);

      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         layers.add(tf_param_name);
         layers.add(bt_param_io_learn);
         layers.add(fp_param_reset);
         layers.add(cb_param_reset_select);
         layers.add(cb_param_reset_note);
         layers.add(bt_param_reset_learn);
         layers.add(cm_param_range);
         layers.add(cb_param_scale14bit);
         layers.add(cm_param_style);
         layers.add(cm_param_forceddev);
         layers.add(cm_param_forcedch);
         layers.add(fp_param_recusr_rpn_min);
         if(cb_param_recusr_asym.isSelected())
            layers.add(fp_param_recusr_rpn_ctr);
         layers.add(fp_param_recusr_rpn_max);
         layers.add(cb_param_recusr_asym);
         layers.add(cm_param_type);
         layers.add(cm_param_msblsb);

         switch(param.type)
         {
            case NT_MIDIParam.TYPE_CC:
               layers.add(cm_param_cc_msb_id);
               layers.add(cm_param_cc_lsb_id);
               break;

            case NT_MIDIParam.TYPE_RPN:
               layers.add(cm_param_rpn_alias_id);
               layers.add(fp_param_rpn_id);
               break;

            case NT_MIDIParam.TYPE_NRPN:
               layers.add(cm_param_nrpn_alias_id);
               layers.add(fp_param_nrpn_id);
               break;

            case NT_MIDIParam.TYPE_REMOTE:
               layers.add(fp_param_remote_instance_id);
               layers.add(bt_param_remote_query_instance_ids);
               layers.add(bt_param_remote_query_params);
               layers.add(fp_param_remote_param_idx);
               if(cm_param_remote_params.isEditable())
                  layers.add(cm_param_remote_params);
               layers.add(fp_param_remote_out_min);
               layers.add(fp_param_remote_out_max);
               layers.add(cb_param_remote_relative);
               break;
         }
      }
   }

   // <method.png>
   public method getSelectedInstrument() : NT_Instrument {
      int ci = tm_instruments.getCursorIndex();
      if(ci > 0) // Instrument 0 cannot be edited
      {
         NT_Instrument ins <= parent_node.getInstrument(ci);
         return ins;
      }
      return null;
   }

   // <ui_handle.png>
   protected method handleInstrumentSelected() {
      NT_Instrument ins <= getSelectedInstrument();

      bt_instr_paste.setEditable((null != instr_clipboard));

      if(null != ins)
      {
         bt_instr_delete.setEditable(true);
         bt_instr_copy  .setEditable(true);

         int firstIdx;

         firstIdx = ins.ui_last_selected_param_idx;

         if(null == ins.getUsrCtlParam(firstIdx))
            firstIdx = ins.findNextUsedParamIdx(0);

         if(-1 != firstIdx)
            tv_params.moveCursorToRow(firstIdx);
         else
            tv_params.moveCursorToFirstRow();

         NT_PatternView pv <= parent_editor.pattern_view;
         NT_Track track <= pv.getCurrentTrack();
         if(null != track)
            track.queueInstrumentSelected();

      }
      else
      {
         bt_instr_delete.setEditable(false);
         bt_instr_copy  .setEditable(false);

         tv_params.moveCursorToFirstRow();
      }

      editSelectedInstrument();

      editSelectedParameter();

      redraw();
   }

   // <method.png>
   public method editSelectedInstrument() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         tf_instr_name.setText(ins.getName());

         cm_instr_dev.setOptions(MIDI.out_device_names_sorted);
         cm_instr_dev.setOptionBGColors(MIDI.out_device_bgcolors_sorted);

         if(null != ins.out_device)
            cm_instr_dev.setSelectedOption(MIDI.out_devices_sorted.indexOfPointer(ins.out_device, 0));
         else
            cm_instr_dev.setSelectedOption(-1);

         handleInstrDevOrChannelChanged(false/*bAutoName*/);

         cm_instr_ch.setSelectedOption(ins.midi_channel);

         fp_instr_pitchbend.setValue(ins.pitchbend_range);
         cb_instr_pbreset.setSelected(ins.b_pitchbend_reset);
         cb_instr_mono.setSelected(ins.b_mono);

         cb_instr_audio.setSelected(ins.b_audio);

         cb_instr_bank_msb     .setSelected(ins.b_bank_msb);
         cb_instr_bank_lsb     .setSelected(ins.b_bank_lsb);
         cb_instr_program      .setSelected(ins.b_program);
         cb_instr_program_shift.setSelected(ins.b_program_shift);

         fp_instr_bank_msb.setValue((ins.bank >> 8) + 1);
         fp_instr_bank_lsb.setValue((ins.bank & 127) + 1);
         fp_instr_program.setValue(ins.program + 1);

         fp_instr_smpuid.setValue(ins.smp_uid);

         tf_instr_name         .setEditable(true);
         cm_instr_dev          .setEditable(true);
         bt_instr_io_learn     .setEditable(true);
         cm_instr_ch           .setEditable(true);
         fp_instr_pitchbend    .setEditable(true);
         cb_instr_pbreset      .setEditable(true);
         cb_instr_mono         .setEditable(true);
         cb_instr_audio        .setEditable(true);
         fp_instr_smpuid       .setEditable(true);
         cb_instr_bank_msb     .setEditable(true);
         cb_instr_bank_lsb     .setEditable(true);
         cb_instr_program      .setEditable(true);
         cb_instr_program_shift.setEditable(true);
         fp_instr_bank_msb     .setEditable(true);
         fp_instr_bank_lsb     .setEditable(true);
         fp_instr_program      .setEditable(true);
         bt_instr_program_learn.setEditable(true);

         tm_params.params <= ins.usrctl_params;

         tv_params.setEditable(true);
         bt_param_new      .setEditable(true);
         bt_param_new_learn.setEditable(true);
         bt_param_delete   .setEditable(true);
         bt_param_copy     .setEditable(true);
         bt_param_paste    .setEditable((null != param_clipboard));
      }
      else
      {
         tf_instr_name.setText("");

         cm_instr_dev.setOptions(null);

         lb_instr_profile.setCaption("-");

         cb_instr_bank_msb     .setSelected(false);
         cb_instr_bank_lsb     .setSelected(false);
         cb_instr_program      .setSelected(false);
         cb_instr_program_shift.setSelected(false);

         tf_instr_name         .setEditable(false);
         cm_instr_dev          .setEditable(false);
         cm_instr_ch           .setEditable(false);
         bt_instr_io_learn     .setEditable(false);
         fp_instr_pitchbend    .setEditable(false);
         cb_instr_pbreset      .setEditable(false);
         cb_instr_mono         .setEditable(false);
         cb_instr_audio        .setEditable(false);
         fp_instr_smpuid       .setEditable(false);
         cb_instr_bank_msb     .setEditable(false);
         cb_instr_bank_lsb     .setEditable(false);
         cb_instr_program      .setEditable(false);
         cb_instr_program_shift.setEditable(false);
         fp_instr_bank_msb     .setEditable(false);
         fp_instr_bank_lsb     .setEditable(false);
         fp_instr_program      .setEditable(false);
         bt_instr_program_learn.setEditable(false);

         tm_params.params <= null;

         tv_params.setEditable(false);
         bt_param_new      .setEditable(false);
         bt_param_new_learn.setEditable(false);
         bt_param_delete   .setEditable(false);
         bt_param_copy     .setEditable(false);
         bt_param_paste    .setEditable(false);

         if([LEARN_INSTR_IO, LEARN_INSTR_PROGRAM, LEARN_PARAM_NEW].contains(parent_node.learn_mode))
         {
            setLearnMode(LEARN_NONE, true/*bQuiet*/);
         }
      }
      tv_params.tableModelChanged();
   }

   // <ui_show.png>
   protected method showInstrumentsContextMenu(boolean _bFocusFirst) {

      pm_instr <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_instr;
      boolean bHaveInstr = (null != getSelectedInstrument());

      String sIcon_remove <= UI.PreferMonoIcons() ? "removes_mono" : "trashcan_sm";

      pmb <= pm.addDefaultButton("New", "new");
      pmb.setToolTipCaption("Create new instrument");

      pmb <= pm.addDefaultButton("Clone", "clone");
      pmb.setToolTipCaption("Clone selected instrument");
      pmb.setActive(bHaveInstr);

      pm.addSeparator();
      pmb <= pm.addIconButton("Delete", sIcon_remove, "delete");
      pmb.setToolTipCaption("Delete selected instrument");
      pmb.setActive(bHaveInstr);

      MIDI.AppendCtlTagSubMenu(pm, "CtlTag");

      pm.resizeToMinimum();
      pm.showNearMouse(-10, -10);

      if(_bFocusFirst)
         pm.focusNextMenuItem();

      Global.Print("Show instrument context menu.");
   }

   // <method_get.png>
   protected method getLearnButton() : Button {
      Button *bt;

      switch(parent_node.learn_mode)
      {
         default:
         case LEARN_NONE:
            bt <= null;
            break;

         case LEARN_INSTR_NEW:
            bt <= bt_instr_new_learn;
            break;

         case LEARN_INSTR_IO:
            bt <= bt_instr_io_learn;
            break;

         case LEARN_INSTR_PROGRAM:
            bt <= bt_instr_program_learn;
            break;

         case LEARN_PARAM_NEW:
            bt <= bt_param_new_learn;
            break;

         case LEARN_PARAM_IO:
            bt <= bt_param_io_learn;
            break;

         case LEARN_PARAM_RESET:
            bt <= bt_param_reset_learn;
            break;
      }

      return bt;
   }

   // <method_set.png>
   protected method setLearnMode(int _mode, boolean _bQuiet) {

      b_learn_param_created = false;

      if(parent_node.learn_mode == _mode)
      {
         // Toggle off
         if(!_bQuiet)
         {
            Global.Print("Stop learn <"+learn_mode_names.get(parent_node.learn_mode)+">");
         }

         parent_node.learn_mode = LEARN_NONE;
      }
      else
      {
         if(!_bQuiet)
         {
            if(parent_node.learn_mode != LEARN_NONE)
            {
               if(LEARN_NONE == _mode)
                  Global.Print("Stop learn <"+learn_mode_names.get(parent_node.learn_mode)+">");
            }
         }

         parent_node.learn_mode = _mode;

         if(!_bQuiet)
         {
            if(LEARN_NONE != _mode)
               Global.Print("Start learn <"+learn_mode_names.get(parent_node.learn_mode)+">");
         }
      }

      String caption = " Learn ";

      bt_instr_new_learn    .setBackgroundTint(0);
      bt_instr_new_learn    .setCaption(caption);
      bt_instr_new_learn    .redraw();
      bt_instr_io_learn     .setBackgroundTint(0);
      bt_instr_io_learn     .setCaption(caption);
      bt_instr_io_learn     .redraw();
      bt_instr_program_learn.setBackgroundTint(0);
      bt_instr_program_learn.setCaption(caption);
      bt_instr_program_learn.redraw();
      bt_param_new_learn    .setBackgroundTint(0);
      bt_param_new_learn    .setCaption(caption);
      bt_param_new_learn    .redraw();
      bt_param_io_learn     .setBackgroundTint(0);
      bt_param_io_learn     .setCaption(caption);
      bt_param_io_learn     .redraw();
      bt_param_reset_learn  .setBackgroundTint(0);
      bt_param_reset_learn  .setCaption(caption);
      bt_param_reset_learn  .redraw();

      Button bt <= getLearnButton();

      if(null != bt)
      {
         bt.setCaption(" Stop ");
         bt.setBackgroundTint(TINT32_LEARN);
         bt.redraw();
         learn_timeout = LEARN_TIMEOUT;
         ta_midi_learn.schedule();
      }
      else
      {
         ta_midi_learn.cancel();
         learn_timeout = -1;
      }
   }

   // <method_handle.png>
   protected method mmlHandleEventInstrNew(MIDIMapEvent _ev) : boolean {

      // trace "xxx mmlHandleEventInstrNew";

      if(MIDIMapDefs.TYPE_NOTE_ON == _ev.type)
      {
         createNewInstrument(-1);

         if(null != getSelectedInstrument())
         {
            return mmlHandleEventInstrIO(_ev, STConfig.b_node_tracker_midilearn_instr_single/*bAutoStopLearn*/);
         }
      }

      return false;
   }

   // <method_handle.png>
   protected method mmlHandleEventInstrIO(MIDIMapEvent _ev, boolean _bAutoStopLearn) : boolean {

      // // trace "xxx mmlHandleEventInstrIO";

      if(MIDIMapDefs.TYPE_NOTE_ON == _ev.type)
      {
         // // trace "xxx _ev.dev.dev_idx="+(_ev.dev.dev_idx);
         // // trace "xxx _ev devName="+(_ev.dev.getAliasOrDeviceName());
         cm_instr_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(_ev.dev.dev_idx));
         cm_instr_ch.setSelectedOption(_ev.dev_ch);
         handleInstrDevChanged();
         handleInstrChChanged();

         if(_bAutoStopLearn)
            setLearnMode(LEARN_NONE, true/*bQuiet*/);

         return true;
      }

      return false;
   }

   // <method_handle.png>
   protected method mmlHandleEventInstrProgram(MIDIMapEvent _ev) : boolean {

      // trace "xxx mmlHandleEventInstrProgram";

      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         if(null != ins.out_device)
         {
            if( (ins.out_device.dev_idx) == (_ev.dev.dev_idx) )
            {
               if(ins.midi_channel == _ev.dev_ch)
               {
                  if(MIDIMapDefs.TYPE_PROGRAM_CHANGE == _ev.type)
                  {
                     // // trace "xxx _ev.dev.dev_idx="+(_ev.dev.dev_idx);
                     // // trace "xxx _ev devName="+(_ev.dev.getAliasOrDeviceName());
                     fp_instr_program.setValue(_ev.arg1 + 1);
                     fp_instr_program.redraw();
                     handleInstrProgramChanged(-1);
                     return true;
                  }
                  else if(MIDIMapDefs.TYPE_CC == _ev.type)
                  {
                     if(0 == _ev.arg1) // Bank select MSB (rarely used)
                     {
                        fp_instr_bank_msb.setValue(_ev.arg1 + 1);
                        fp_instr_bank_msb.redraw();
                        handleInstrBankMSBChanged(-1);
                        return true;
                     }
                     else if(32 == _ev.arg1) // Bank select LSB
                     {
                        fp_instr_bank_lsb.setValue(_ev.arg1 + 1);
                        fp_instr_bank_lsb.redraw();
                        handleInstrBankLSBChanged(-1);
                        return true;
                     }
                  }
               }
            }
         }
      }

      return false;
   }

   // <method_handle.png>
   protected method mmlHandleEventParamNew(MIDIMapEvent _ev) : boolean {

      if(null != getSelectedInstrument())
      {
         if([MIDIMapDefs.TYPE_CC, MIDIMapDefs.TYPE_RPN, MIDIMapDefs.TYPE_NRPN].contains(_ev.type))
         {
            if(!b_learn_param_created)
            {
               createNewParam(-1, false/*bQuiet*/);
               b_learn_param_created = true;
            }

            if(null != getSelectedParameter())
               return mmlHandleEventParamIO(_ev);
         }
      }
   }

   // <method_handle.png>
   protected method mmlHandleEventParamNewRemote(RemoteEvent _ev) : boolean {

      if(null != getSelectedInstrument())
      {
         if(!b_learn_param_created)
         {
            createNewParam(-1, false/*bQuiet*/);
            b_learn_param_created = true;
         }

         if(null != getSelectedParameter())
            return mmlHandleEventParamIORemote(_ev);
      }
   }

   // <method_handle.png>
   protected method mmlHandleEventParamIO(MIDIMapEvent _ev) : boolean {

      // trace "xxx mmlHandleEventParamIO";

      NT_MIDIParam param <= getSelectedParameter();

      if(null != param)
      {
         // IO
         NT_Instrument ins <= getSelectedInstrument();

         if(null != ins.out_device)
         {
            if( (ins.out_device.dev_idx) != (_ev.dev.dev_idx) )
            {
               cm_param_forceddev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(_ev.dev.dev_idx) + 1);
            }
            else
            {
               cm_param_forceddev.setSelectedOption(0); // "-"
            }
            handleParamForcedDevChanged(true/*bQuiet*/);
         }

         if( (ins.midi_channel) != (_ev.dev_ch) )
         {
            cm_param_forcedch.setSelectedOption(_ev.dev_ch + 1);
         }
         else
         {
            cm_param_forcedch.setSelectedOption(0);
         }
         handleParamForcedChChanged(true/*bQuiet*/);

         // Type
         switch(_ev.type)
         {
            case MIDIMapDefs.TYPE_CC:
               cm_param_type.setSelectedOption(NT_MIDIParam.TYPE_CC);
               handleParamTypeChanged(false/*bUpdateOnly*/);

               if(NT_MIDIParam.MSBLSB_ONLYLSB == param.msblsb_mode)
               {
                  cm_param_cc_lsb_id.setSelectedOption(_ev.ext_type);
                  handleParamCCLSBIdChanged();
               }
               else if(NT_MIDIParam.MSBLSB_ONLYMSB == param.msblsb_mode)
               {
                  cm_param_cc_msb_id.setSelectedOption(_ev.ext_type);
                  handleParamCCMSBIdChanged();
               }
               else if(NT_MIDIParam.MSBLSB_BOTH == param.msblsb_mode)
               {
                  if(32 <= _ev.ext_type <= 63)
                  {
                     cm_param_cc_lsb_id.setSelectedOption(_ev.ext_type);
                     handleParamCCLSBIdChanged();
                  }
                  else
                  {
                     cm_param_cc_msb_id.setSelectedOption(_ev.ext_type);
                     handleParamCCMSBIdChanged();
                  }
               }
               break;

            case MIDIMapDefs.TYPE_RPN:
               cm_param_type.setSelectedOption(NT_MIDIParam.TYPE_RPN);
               handleParamTypeChanged(false/*bUpdateOnly*/);
               fp_param_rpn_id.setValue(_ev.ext_type);
               handleParamRPNIdChanged();
               return true;

            case MIDIMapDefs.TYPE_NRPN:
               cm_param_type.setSelectedOption(NT_MIDIParam.TYPE_NRPN);
               handleParamTypeChanged(false/*bUpdateOnly*/);
               fp_param_nrpn_id.setValue(_ev.ext_type);
               handleParamNRPNIdChanged();
               return true;

            case MIDIMapDefs.TYPE_PROGRAM_CHANGE:
               cm_param_type.setSelectedOption(NT_MIDIParam.TYPE_PRGCHG);
               handleParamTypeChanged(false/*bUpdateOnly*/);
               return true;

         } // switch _ev.type
      } // if param

      // // if(_ev.isNoteEvent())
      // // {
      // //    // trace "xxx _ev.dev.dev_idx="+(_ev.dev.dev_idx);
      // //    // trace "xxx _ev devName="+(_ev.dev.getAliasOrDeviceName());
      // //    cm_instr_dev.setSelectedOption(_ev.dev.dev_idx);
      // //    cm_instr_ch.setSelectedOption(_ev.dev_ch);
      // //    handleInstrDevChanged();
      // //    handleInstrChChanged();
      // //    return true;
      // // }

      return false;
   }

   // <method_handle.png>
   protected method mmlHandleEventParamIORemote(RemoteEvent _ev) : boolean {

      // trace "xxx mmlHandleEventParamIORemote";

      NT_MIDIParam param <= getSelectedParameter();

      if(null != param)
      {
         // IO
         // // NT_Instrument ins <= getSelectedInstrument();

         // Type
         cm_param_type.setSelectedOption(NT_MIDIParam.TYPE_REMOTE);
         handleParamTypeChanged(false/*bUpdateOnly*/);

         fp_param_remote_instance_id.setValue(_ev.instance_id);
         handleParamRemoteInstanceIdChanged();

         fp_param_remote_param_idx.setValue(_ev.param_idx);
         handleParamRemoteParamIdxChanged();

         if(!param.b_name_edited)
         {
            param.name = _ev.param_name;
            tf_param_name.setText(param.name);
         }

         return true;
      } // if param

      return false;
   }

   // <method_handle.png>
   protected method mmlHandleEventParamReset(MIDIMapEvent _ev) : boolean {

      // trace "xxx mmlHandleEventParamReset";

      NT_MIDIParam param <= getSelectedParameter();

      if(null != param)
      {
         Boolean bMatchLSB;

         // trace "xxx test param matches";

         if(param.matchMIDIMapEvent(getSelectedInstrument(), _ev, bMatchLSB))
         {
            // trace "xxx ==> param matches";

            // Type
            switch(_ev.type)
            {
               case MIDIMapDefs.TYPE_CC:
                  if(NT_MIDIParam.MSBLSB_BOTH == param.msblsb_mode)
                  {
                     float cVal = fp_param_reset.getFloatValue() * 128.0;

                     if(bMatchLSB)
                     {
                        cVal = (int(cVal)&0x3F80) | _ev.arg1;
                     }
                     else
                     {
                        cVal = (int(cVal)&127) | (_ev.arg1 << 7);
                     }

                     cVal /= 128.0;

                     fp_param_reset.setValue(cVal);
                     handleParamResetChanged();
                  }
                  else
                  {
                     fp_param_reset.setValue(_ev.arg1);
                     handleParamResetChanged();
                  }
                  return true;

               case MIDIMapDefs.TYPE_RPN:
               case MIDIMapDefs.TYPE_NRPN:
                  if(param.b_scale14bit)
                  {
                     fp_param_reset.setValue(_ev.arg1 / 128.0);
                  }
                  else
                  {
                     fp_param_reset.setValue(_ev.arg1);
                  }
                  handleParamResetChanged();
                  return true;

               case MIDIMapDefs.TYPE_PROGRAM_CHANGE:
                  if(param.b_scale14bit)
                  {
                     fp_param_reset.setValue(_ev.arg1 / 128.0);
                  }
                  else
                  {
                     fp_param_reset.setValue(_ev.arg1);
                  }
                  handleParamResetChanged();
                  return true;

            } // switch _ev.type
         }
      } // if param

      return false;
   }

   // <method_handle.png>
   protected method mmlHandleEventParamResetRemote(RemoteEvent _ev) : boolean {

      NT_MIDIParam param <= getSelectedParameter();

      if(null != param)
      {
         if(NT_MIDIParam.TYPE_REMOTE == param.type)
         {
            float paramValue = param.unmapRemoteEventParamValue(_ev.param_value);
            fp_param_reset.setValue(paramValue);
            handleParamResetChanged();
            return true;
         }
      } // if param

      return false;
   }

   // <ui_midi.png>
   public method mmlHandleEventUI(MIDIMapEvent _ev) : boolean {
      // Called by NodeTrackerEditor.mmlHandleEventUI()

      // trace "xxx mmlHandleEventUI";

      MIDIMapEvent evXForm = _ev;

      MIDIMorphScene.TransformEvent(evXForm);
      if(evXForm.isValid())
      {
         evXForm.echoTransformForced();

         boolean bHandled = false;

         switch(parent_node.learn_mode)
         {
            case LEARN_INSTR_NEW:
               bHandled = mmlHandleEventInstrNew(evXForm);
               break;

            case LEARN_INSTR_IO:
               bHandled = mmlHandleEventInstrIO(evXForm, true/*bAutoStopLearn*/);
               break;

            case LEARN_INSTR_PROGRAM:
               bHandled = mmlHandleEventInstrProgram(evXForm);
               break;

            case LEARN_PARAM_NEW:
               bHandled = mmlHandleEventParamNew(evXForm);
               break;

            case LEARN_PARAM_IO:
               bHandled = mmlHandleEventParamIO(evXForm);
               break;

            case LEARN_PARAM_RESET:
               bHandled = mmlHandleEventParamReset(evXForm);
               break;
         }

         if(bHandled)
         {
            learn_timeout = LEARN_TIMEOUT;
         }
      }

      return false;
   }

   // <method.png>
   public virtual handleRemoteEvent(RemoteEvent _ev) : boolean {
      // overrides RemoteEventListener::handleRemoteEvent
      boolean bHandled = false;

      MIDIMapEvent evXForm;

      switch(parent_node.learn_mode)
      {
         case LEARN_INSTR_NEW:
            if(evXForm.initFromRemoteEvent(_ev))
            {
               bHandled = mmlHandleEventInstrNew(evXForm);
            }
            break;

         case LEARN_INSTR_IO:
            if(evXForm.initFromRemoteEvent(_ev))
            {
               bHandled = mmlHandleEventInstrIO(evXForm, true/*bAutoStopLearn*/);
            }
            break;

         case LEARN_INSTR_PROGRAM:
            break;

         case LEARN_PARAM_NEW:
            bHandled = mmlHandleEventParamNewRemote(_ev);
            break;

         case LEARN_PARAM_IO:
            bHandled = mmlHandleEventParamIORemote(_ev);
            break;

         case LEARN_PARAM_RESET:
            bHandled = mmlHandleEventParamResetRemote(_ev);
            break;
      }

      if(bHandled)
      {
         learn_timeout = LEARN_TIMEOUT;
      }

      return bHandled;
   }

   // <method_handle.png>
   public virtual handleRemoteReplyInstanceIds(PointerArray _instances) {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         if(NT_MIDIParam.TYPE_REMOTE == param.type)
         {
            if(_instances.numElements > 0)
            {
               SysExInstance *inst;
               SysExInstance instFirst <= null;

               local FloatArray presetValues;
               local StringArray presetNames;
               local Integer io;

               int instIdx = 0;
               foreach inst in _instances
               {
                  if(instIdx > 0)
                     trace "[trc] NT_InstumentView::handleRemoteReplayInstanceIds: ..............................................";
                  trace "[trc] NT_InstumentView::handleRemoteReplayInstanceIds: instance["+instIdx+"].dev_idx      ="+inst.dev_idx;
                  trace "[trc] NT_InstumentView::handleRemoteReplayInstanceIds: instance["+instIdx+"].midi_ch      ="+inst.midi_ch;
                  trace "[trc] NT_InstumentView::handleRemoteReplayInstanceIds: instance["+instIdx+"].instance_id  ="+inst.instance_id;
                  trace "[trc] NT_InstumentView::handleRemoteReplayInstanceIds: instance["+instIdx+"].instance_name=\""+inst.instance_name+"\"";
                  trace "[trc] NT_InstumentView::handleRemoteReplayInstanceIds: instance["+instIdx+"].b_effect     ="+inst.b_effect;
                  if(!inst.b_effect && (null == instFirst))
                     instFirst <= inst;

                  io = inst.instance_id;

                  presetValues.add(inst.instance_id);
                  presetNames.add(io.printf("%5d")+":"+inst.instance_name);

                  // Next instance
                  instIdx++;
               }

               if(null != instFirst)
                  inst <= instFirst;
               else
                  inst <= _instances.first;

               param.remote_instance_id = inst.instance_id;
               fp_param_remote_instance_id.setValue(inst.instance_id);
               fp_param_remote_instance_id.redraw();

               fp_param_remote_instance_id.setPresetOptions(presetValues, presetNames);

               updateAutoRemoteParamName(param);
               updateRemoteParamOptions(param);

               Global.Success("Found "+_instances.numElements+" instance"+Utils.GetPluralString(_instances.numElements));
            }
            else
            {
               Global.Warning("No instances found");
            }
         }
      }
   }

   // <method_handle.png>
   public virtual handleRemoteReplyParams(int _instanceId, StringArray _paramNames) {

      remote_param_names[String(_instanceId)] = Object(_paramNames);  // store copy of paramNames array

      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         if(NT_MIDIParam.TYPE_REMOTE == param.type)
         {
            if(_instanceId > 0)
            {
               param.remote_instance_id = _instanceId;
               fp_param_remote_instance_id.setValue(_instanceId);
               fp_param_remote_instance_id.redraw();

               cm_param_remote_params.setOptions(_paramNames);
               cm_param_remote_params.setEditable(true);
               cm_param_remote_params.setSelectedOption(param.remote_param_idx);
               cm_param_remote_params.redraw();

               updateAutoRemoteParamName(param);

               Global.Success("Received "+_paramNames.numElements+" Remote param"+Utils.GetPluralString(_paramNames.numElements)+" (instanceId="+_instanceId+")");
            }
            else
            {
               Global.Warning("Failed to query params: No such Remote instance");

               cm_param_remote_params.setOptions(null);
               cm_param_remote_params.setEditable(false);
               cm_param_remote_params.setSelectedOption(-1);
               cm_param_remote_params.redraw();
            }
         }
      }
   }

   // <ui_timer.png>
   protected method handleMIDILearnTimer() {

      // // trace "xxx handleMIDILearnTimer: learn_timeout="+learn_timeout+" mode="+parent_node.learn_mode;

      if(LEARN_NONE != parent_node.learn_mode)
      {
         learn_timeout--;

         if(learn_timeout <= 0)
         {
            setLearnMode(LEARN_NONE, false/*bQuiet*/);
         }
         else
         {
            Button bt <= getLearnButton();

            if(learn_timeout & 1)
               bt.setBackgroundTint(TINT32_LEARN);
            else
               bt.setBackgroundTint(0);

            if(0 == (learn_timeout & 1))
            {
               if(0 != (learn_timeout & 2))
                  bt.setCaption(" "+(learn_timeout/2)+" ");
               else
                  bt.setCaption(" Stop ");
            }

            bt.redraw();

            ta_midi_learn.schedule();
         }
      }

   }

   // <method.png>
   protected method toggleInstrNewLearn() {
      setLearnMode(LEARN_INSTR_NEW, false/*bQuiet*/);
   }

   // <method.png>
   protected method toggleInstrIOLearn() {
      setLearnMode(LEARN_INSTR_IO, false/*bQuiet*/);
   }

   // <method.png>
   protected method toggleInstrProgramLearn() {

      setLearnMode(LEARN_INSTR_PROGRAM, false/*bQuiet*/);
   }

   // <method.png>
   protected method toggleParamNewLearn() {
      setLearnMode(LEARN_PARAM_NEW, false/*bQuiet*/);
   }

   // <method.png>
   protected method toggleParamIOLearn() {
      setLearnMode(LEARN_PARAM_IO, false/*bQuiet*/);
   }

   // <method.png>
   protected method toggleParamResetLearn() {
      setLearnMode(LEARN_PARAM_RESET, false/*bQuiet*/);
   }

   // <method.png>
   protected method determineMaxInstrCopyNr(String _s) : int {
      String prefix;
      Utils.ExtractCopyPrefix(_s, prefix);

      int maxNr = -1;
      NT_Instrument *ins;
      foreach ins in parent_node.instruments
      {
         if(null != ins)
         {
            String n <= ins.name;
            if(null != n)
            {
               if(n.startsWith(prefix))
               {
                  maxNr = 0;
                  int nr = Utils.DetermineCopyNr(n);
                  if(nr > maxNr)
                  {
                     maxNr = nr;
                  }
               }
            }
         }
      }
      return maxNr;
   }

   // <method.png>
   public method createNewInstrument(int _idx) : NT_Instrument {

      boolean bMakeVisible = false;

      if(_idx <= 0)
      {
         // Find first unused instrument slot
         _idx = parent_node.findFirstUnusedInstrumentSlot();

         bMakeVisible = true;
      }

      if(-1 != _idx)
      {
         local NT_Instrument ins;
         ins.init(parent_node, _idx);

         ins.createDefaultParams();

         ins.setName(Utils.GetCurrentDateTimeStringNumeric());

         parent_node.setInstrument(_idx, deref ins);

         // Select new instrument in table
         tv_instruments.tableModelChanged();
         tv_instruments.moveCursorToRow(tm_instruments.getSortedRowNr(_idx));

         // Set as keyjazz instrument
         parent_editor.keyJazzSelectInstrument(_idx, bMakeVisible, false/*bQuiet*/);

         editSelectedInstrument();

         b_new_instr_tabcycle_list = true; // temporarily override tabcycle list

         return ins;
      }
      else
      {
         Global.Error("All instruments in use, can't create.");
      }

      return null;
   }

   // <method.png>
   protected method cloneSelectedInstrument() {
      if(copyInstrumentToClipboard())
      {
         if(null != createNewInstrument(-1))
         {
            pasteInstrumentClipboard();

            Global.Print("Clone instrument");
         }
      }
   }

   // <method.png>
   protected method createInstrumentFromCtlTagEntry(int _idx) : NT_Instrument {
      NT_Instrument ins <= createNewInstrument(tm_instruments.getCursorIndex());
      if(null != ins)
      {
         initFromCtlTagEntryInstr(_idx);
      }
      return ins;
   }

   // <method.png>
   protected method confirmDeleteSelectedInstrument() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         dialog_deleteinstrument.run(tm_instruments.getCursorIndex(), ins.name, this);
      }
   }

   // <method.png>
   public method deleteSelectedInstrument() {
      // Called by NT_DeleteInstrumentDialog
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         parent_node.setInstrument(ins.instrument_nr, null);

         tv_instruments.tableModelChanged();

         editSelectedInstrument();
         editSelectedParameter();

         setLearnMode(LEARN_NONE, true/*bQuiet*/);
      }
   }

   // <method.png>
   protected method copyInstrumentToClipboard() : boolean {

      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         instr_clipboard <= new NT_Instrument;

         instr_clipboard.copyFrom(ins, -1);

         bt_instr_paste.setEditable(true);
         bt_instr_paste.redraw();

         Global.Print("Copy instrument to clipboard");

         return true;
      }
      else
      {
         Global.Error("No instrument selected");
      }

      return false;
   }

   // <method.png>
   protected method pasteInstrumentClipboard() {

      if(null != instr_clipboard)
      {
         createNewInstrument(tm_instruments.getCursorIndex());

         NT_Instrument ins <= getSelectedInstrument();

         if(null != ins)
         {
            int maxNr = determineMaxInstrCopyNr(instr_clipboard.getName());

            ins.copyFrom(instr_clipboard, maxNr + 1);

            handleInstrumentSelected();

            Global.Print("Paste instrument clipboard");
         }
      }
      else
      {
         Global.Error("Instr clipboard is empty");
      }
   }

   // <ui_handle.png>
   protected method handleCopyCtlInstr(boolean _bClipboardB) {
      local String msgPrefix = "copyctl<"+(_bClipboardB?"B":"A")+">: ";
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         if(null != ins.out_device)
         {
            NMM_Arg cb <= _bClipboardB ? mmarg_clipboard_b : mmarg_clipboard_a;
            cb.initFromCopiedCtl(ins.out_device.dev_idx,
                                 ins.midi_channel,
                                 NMM_Arg.TYPE_RPN,
                                 0/*ccNr*/,
                                 0/*rpnNr*/,
                                 0/*nrpnNr*/
                                 );

            Global.Print(msgPrefix+"type="+cb.getClipboardTypeString()+" dev="+cb.getClipboardPortString());
         }
         else
         {
            Global.Warning(msgPrefix+"no device");
         }
      }
      else
      {
         Global.Warning(msgPrefix+"no instrument");
      }
   }

   // <ui_handle.png>
   protected =replay= method handlePasteCtlInstr(boolean _bClipboardB) {
      local String msgPrefix = "pastectl<"+(_bClipboardB?"B":"A")+">: ";
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         NMM_Arg cb <= _bClipboardB ? mmarg_clipboard_b : mmarg_clipboard_a;
         local STX_MIDIOutDevice dev <= MIDI.GetMIDIOutDeviceByIndex(cb.dev_idx);
         if(null != dev)
         {
            ins.setOutDevice(dev);
            ins.setMidiChannel(cb.dev_ch);
            editSelectedInstrument();
            handleInstrDevOrChannelChanged(true/*bAutoName*/);

            Global.Print(msgPrefix+"dev="+cb.getClipboardPortString());
         }
         else
         {
            Global.Warning(msgPrefix+"invalid device");
         }
      }
      else
      {
         Global.Warning(msgPrefix+"no instrument");
      }
   }

   // <method.png>
   protected method initFromCtlTagEntryInstr(int _idx) {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         CtlTagEntry en <= current_song.getCtlTagEntryByIdx(_idx);
         MIDIMapEvent ev <= en.mm_event;
         ins.setOutDevice(ev.dev);
         ins.setMidiChannel(ev.dev_ch);
         editSelectedInstrument();
         handleInstrDevOrChannelChanged(true/*bAutoName*/);
      }
   }

   // <ui_show.png>
   protected method showCtlClipboardInstrMenu(boolean _bFocusFirst) {

      pm_ctlclipboard_instr <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_ctlclipboard_instr;
      boolean bHaveInstr = (null != getSelectedInstrument());

      MIDI.AppendCtlClipboardMenuItems(pm, bHaveInstr/*bActiveCopy*/, bHaveInstr/*bActivePaste*/);

      MIDI.AppendCtlTagSubMenu(pm, "CtlTag");

      // Present
      pm.resizeToMinimum();
      pm.showNearMouse(-30, 0);

      if(_bFocusFirst)
         pm.focusNextMenuItem();

      Global.Print("Show Ctl.Clipboard instrument menu.");
   }

   // <ui_handle.png>
   protected method handleInstrNameChanged(boolean _bNameEdited) {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         local String name <= tf_instr_name.getText();
         ins.setName(name);
         if(name.isBlank())
         {
            ins.b_name_edited = false;
         }
         else
         {
            local String autoName <= ins.getAutoName();
            if(name == autoName)
               ins.b_name_edited = false;
            else
               ins.b_name_edited |= _bNameEdited;
         }
         tv_instruments.tableModelChanged();

         Global.Print("Name is \""+ins.getName()+"\"");
      }
   }

   // <ui_handle.png>
   protected method handleInstrPitchbendChanged() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         float f = fp_instr_pitchbend.getValue();
         ins.setPitchbendRange(f);
         fp_instr_pitchbend.setValue(f);

         Global.Print("PB range is "+ins.pitchbend_range);
      }
   }

   // <ui_handle.png>
   protected method handleInstrPitchbendResetChanged() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         ins.setEnablePitchbendReset(cb_instr_pbreset.isSelected());

         Global.Print("PB reset is "+Utils.GetEnableString(ins.b_pitchbend_reset));
      }
   }

   // <ui_handle.png>
   protected method handleInstrMonoChanged() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         ins.setEnableMono(cb_instr_mono.isSelected());

         Global.Print("Mono auto-note-off is "+Utils.GetEnableString(ins.b_mono));
      }
   }

   // <ui_handle.png>
   protected method handleInstrAudioChanged() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         ins.setEnableAudio(cb_instr_audio.isSelected());

         Global.Print("Audio-Track mode is "+Utils.GetEnableStringMixed(ins.b_audio, "disabled", "enabled (PrgChg)", "enabled (RPN 90 smp_uid)"));
      }
   }

   // <ui_handle.png>
   protected method handleInstrSmpUIDChanged() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         short smpUID = fp_instr_smpuid.getValue();
         ins.setSmpUID(smpUID);

         if(-1 != smpUID)
         {
            if(null != ins.out_device)
            {
               // trace "xxx NT_InstrumentView::handleInstrSmpUIDChanged: send smpUID="+smpUID;
               ins.out_device.rpn(ins.midi_channel, 90/*RPN_SMP_UID*/, smpUID);
            }
         }

         Global.Print("Unique Sample ID is "+fp_instr_smpuid.getValue());
      }
   }

   // <ui_handle.png>
   public method handleInstrSmpImport(boolean _bUIDOnly) {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         if(null != ins.out_device)
         {
            if(null == dlg_importsmp)
            {
               dlg_importsmp <= new NT_ImportSampleDialog;
               dlg_importsmp.init();
            }
            dlg_importsmp.showImportSampleDialog(this, parent_node, _bUIDOnly);
         }
         else
         {
            Global.Warning("ImportSamples: invalid instrument output device");
         }
      }
      else
      {
         Global.Warning("ImportSamples: no instrument (unable to determine dev+ch)");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleInstrSmpImport2() {
      NT_Instrument curIns <= getSelectedInstrument();
      if(null != curIns)
      {
         PointerArray entries <= dlg_importsmp.getSelectedEntries();  // NT_ImportSamplesDO[]
         int align16 = dlg_importsmp.getAlign16th();
         NT_Instrument *ins;
         NT_ImportSamplesDO *en;
         int numAdded = 0;
         int numSkipped = 0;
         int numPat = 0;
         boolean bInstr = dlg_importsmp.doCreateInstruments();
         boolean bAudio = dlg_importsmp.doAudioInstruments();
         boolean bPat   = dlg_importsmp.doCreatePatterns();
         foreach en in entries
         {
            if(bInstr)
            {
               ins <= parent_node.getInstrument(1);
               if(null != ins)
               {
                  if(-1 != ins.smp_uid)  // allow instrument 1 to be overwritten (just used to determine initial dev+ch)
                     ins <= null;
               }

               if(null == ins)
               {
                  ins <= parent_node.findInstrumentByUniqueId(en.smp_uid);
               }

               if(null == ins)
               {
                  ins <= createNewInstrument(-1);
               }

               if(null != ins)
               {
                  ins.setName(en.smp_name);
                  ins.b_name_edited = true;
                  ins.setEnableAudio(bAudio);
                  ins.setOutDevice(curIns.out_device);
                  ins.setMidiChannel(curIns.midi_channel);
                  ins.setSmpUID(en.smp_uid);
                  numAdded++;

                  if(bPat)
                  {
                     // Create/init pattern
                     NT_MetaPattern *metaPat;
                     int len16 = (en.len_16th + (align16/2));
                     len16 = int(len16 / align16) * align16;
                     int patLenTicks =  len16 * current_song.ppq / 4.0;
                     int patNr = (ins.instrument_nr-1) * 4; // 1=>01A, 2=>02A, ..
                     metaPat <= parent_node.getOrCreateMetaPattern(patNr);
                     metaPat.setNumTicks(patLenTicks);
                     local String patName = en.smp_name;
                     if(patName <= parent_node.smp_import_filter)
                     {
                        // e.g. "a_peak_intro" => "1:intro"
                        patName.replace(parent_node.smp_import_filter, "");
                        patName = (NodeTrackerEditor.instr_nr_names.get(ins.instrument_nr)) + ":" + patName;
                     }
                     metaPat.patSetName(patName);
                     Global.Debug("NT_InstrumentView::handleInstrSmpImport2: pat["+patNr+"] name=\""+metaPat.pat_name+"\" smpName=\""+en.smp_name+"\"");

                     NT_Track *track;
                     if(0 == (parent_node.tracks.numElements))
                     {
                        track <= parent_node.lazyCreateTrackByName("audio");
                     }
                     else
                     {
                        track <= parent_node.tracks.get(0);
                     }
                     NT_TrackPattern *trackPat;
                     trackPat <= track.getOrCreatePattern(patNr);
                     Envelope env <= trackPat.getCreateEnvelope(NT_Defs.CTL_INSTR);
                     if(0 == env.numElements)
                     {
                        env.insertReplaceEvent(0/*patOffset*/, ins.instrument_nr, 1/*res*/);
                     }
                     numPat++;
                  }
               }
               else
               {
                  numSkipped++;
               }
            }
            else
            {
               // [12Jun2025] update UID (procedural track output + sequence export target sample)
               curIns.smp_uid = en.smp_uid;

               numSkipped++;
            }
         }
         selectKeyJazzInstr(true/*bCenter*/);
         handleInstrumentSelected();
         parent_editor.nodeHandleEditPatternChanged();
         Global.Print("importsmp: add "+numAdded+", skip "+numSkipped+" instrument(s), init "+numPat+" pattern"+Utils.GetPluralString(numPat));
      }
   }

   // <ui_handle.png>
   protected method handleInstrDevChanged() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         STX_MIDIOutDevice outDev <= MIDI.GetMIDIOutDeviceByIndexSorted(cm_instr_dev.getSelectedOption());

         if(VMOD_LALT == UI.GetKeyMod())
         {
            STX_MIDIOutDevice origOutDev <= ins.out_device;
            int numUpdated = 0;
            NT_Instrument *insOther;
            foreach insOther in parent_node.instruments
            {
               if(null != insOther)
               {
                  if(@(insOther.out_device) == @(origOutDev))
                  {
                     insOther.setOutDevice(outDev);
                     numUpdated++;
                  }
               }
            }

            Global.Print("Update "+numUpdated+" instrument device"+Utils.GetPluralString(numUpdated));
         }
         else
         {
            ins.setOutDevice(outDev);
            Global.Print("Device is \""+outDev.getAliasOrDeviceName()+"\"");
         }

         handleInstrDevOrChannelChanged(true/*bAutoName*/);

         tv_instruments.redraw(); // update invalid status
      }
   }

   // <ui_handle.png>
   protected method handleInstrChChanged() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         byte newCh = cm_instr_ch.getSelectedOption();

         if(VMOD_LALT == UI.GetKeyMod())
         {
            STX_MIDIOutDevice origOutDev <= ins.out_device;
            byte origCh = ins.midi_channel;
            int numUpdated = 0;
            foreach ins in parent_node.instruments
            {
               if(null != ins)
               {
                  if(@(ins.out_device) == @(origOutDev))
                  {
                     if(ins.midi_channel == origCh)
                     {
                        ins.setMidiChannel(newCh);
                        numUpdated++;
                     }
                  }
               }
            }

            Global.Print("Update "+numUpdated+" instrument MIDI channels"+Utils.GetPluralString(numUpdated));
         }
         else
         {
            ins.setMidiChannel(newCh);
            Global.Print("Channel is "+(newCh+1));
         }

         handleInstrDevOrChannelChanged(true/*bAutoName*/);
      }
   }

   // <ui_handle.png>
   protected method handleInstrBankMSBChanged(byte _bankMSB) {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         if(-1 == _bankMSB)
         {
            _bankMSB = fp_instr_bank_msb.getValue();
         }
         ins.setBank( (ins.bank&0x007F) | ((_bankMSB - 1) << 8) );
         fp_instr_bank_msb.setValue(_bankMSB);

         if(-1 != _bankMSB)
         {
            if(ins.b_bank_msb)  // true or maybe
            {
               if(null != ins.out_device)
               {
                  ins.out_device.bankMSB(ins.midi_channel, _bankMSB - 1);
               }
            }
         }

         Global.Print("Bank MSB is "+fp_instr_bank_msb.getValue());
      }
   }

   // <ui_handle.png>
   protected method handleInstrBankMSBSendChanged() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         ins.setEnableBankMSB(cb_instr_bank_msb.isSelected());

         Global.Print("Send bank MSB is "+Utils.GetEnableString(ins.b_bank_msb));
      }
   }

   // <ui_handle.png>
   protected method handleInstrBankLSBChanged(byte _bankLSB) {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         if(-1 == _bankLSB)
         {
            _bankLSB = fp_instr_bank_lsb.getValue();
         }
         ins.setBank( (ins.bank&0x7F00) | (_bankLSB - 1) );
         fp_instr_bank_lsb.setValue(_bankLSB);

         if(-1 != _bankLSB)
         {
            if(ins.b_bank_lsb)  // true or maybe
            {
               if(null != ins.out_device)
               {
                  ins.out_device.bankLSB(ins.midi_channel, _bankLSB - 1);
               }
            }
         }

         Global.Print("Bank LSB is "+fp_instr_bank_lsb.getValue());
      }
   }

   // <ui_handle.png>
   protected method handleInstrBankLSBSendChanged() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         ins.setEnableBankLSB(cb_instr_bank_lsb.isSelected());

         Global.Print("Send bank LSB is "+Utils.GetEnableString(ins.b_bank_msb));
      }
   }

   // <ui_handle.png>
   protected method handleInstrProgramChanged(byte _program) {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         if(-1 == _program)
         {
            _program = fp_instr_program.getValue();
         }
         ins.setProgram(_program - 1);
         fp_instr_program.setValue(_program);

         if(-1 != _program)
         {
            if(ins.b_program)  // true or maybe
            {
               if(null != ins.out_device)
               {
                  ins.out_device.programChange(ins.midi_channel, _program - 1);
               }
            }
         }

         Global.Print("Program is "+fp_instr_program.getValue());
      }
   }

   // <ui_handle.png>
   protected method handleInstrProgramSendChanged() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         ins.setEnableProgram(cb_instr_program.isSelected());

         Global.Print("Send program change is "+Utils.GetEnableString(ins.b_program));
      }
   }

   // <ui_handle.png>
   protected method handleInstrProgramShiftChanged() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         ins.setEnableProgramShift(cb_instr_program_shift.isSelected());

         Global.Print("CTL_PC program number shift-by-one is "+Utils.GetEnableString(ins.b_program_shift));
      }
   }

   // <method.png>
   protected method getSelectedParameter() : NT_MIDIParam {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         int idx = tm_params.getCursorIndex();
         if(-1 != idx)
         {
            NT_MIDIParam mp <= ins.getUsrCtlParam(idx);
            return mp;
         }
      }
      return null;
   }

   // <ui_handle.png>
   protected method handleInstrDevOrChannelChanged(boolean _bAutoName) {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         if(null != ins.out_device)
         {
            if(_bAutoName && !ins.b_name_edited)
            {
               // Generate instrument name
               local String autoName <= ins.getAutoName();
               if(null != autoName)
               {
                  ins.name = autoName;
                  tf_instr_name.setText(ins.name);
               }
            }

            lb_instr_profile.setCaption(ins.out_device.getProfileIdOrDefault(ins.midi_channel));

            local String ttCap;
            local String ttCapLine;
            local StringArray ttOptionsLong;
            local Byte ch = 1;
            loop(16)
            {
               ttCapLine.empty();
               if(ch > 1)
               {
                  ttCap.append("\n");
               }

               ttCapLine.append( ch.printf("%02d: ") + (ins.out_device.getProfileIdOrDefault(ch - 1)) );
               ttCap.append(ttCapLine);
               ttOptionsLong.add(ttCapLine);
               ch++;
            }
            cm_instr_ch.setToolTipCaption(ttCap);
            cm_instr_ch.setOptionsLong(ttOptionsLong);
            // // cm_param_forcedch.setToolTipCaption(ttCap);
         }
         else
         {
            lb_instr_profile.setCaption("");
            cm_instr_ch.setToolTipCaption(null);
         }

         tv_instruments.tableModelChanged();
         handleParamDevOrChannelChanged();  // calls updateParamCCAndNRPNOptions()
         lb_instr_profile.redraw();
      }
   }

   // <ui_handle.png>
   protected method handleParamDevOrChannelChanged() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         NT_MIDIParam param <= getSelectedParameter();

         STX_MIDIDevice paramDev <= null;
         byte paramCh = 0;

         if(null != param)
         {
            paramDev <= param.forced_dev;

            if(null == paramDev)
               paramDev <= ins.out_device;

            if(param.forced_ch > 0)
               paramCh = param.forced_ch - 1;
            else
               paramCh = ins.midi_channel;

            cm_param_forcedch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(param.getActualDevIdx(ins), "-"));
         }

         if(null != paramDev)
         {
            String ttCap;
            ttCap.empty();
            Byte ch = 1;
            loop(16)
            {
               if(ch > 1)
               {
                  ttCap.append("\n");
               }

               ttCap.append( ch.printf("%02d: ") + (paramDev.getProfileIdOrDefault(ch - 1)) );
               ch++;
            }
            cm_param_forcedch.setToolTipCaption(ttCap);
         }
         else
         {
            cm_param_forcedch.setToolTipCaption(null);
         }

         updateParamCCAndNRPNOptions();

         autogenMIDIParamName();
      }
   }

   // <method_update.png>
   protected method updateParamCCAndNRPNOptions() {
      // Called when parameter is selected or output device has changed (forceCh -1=off)

      NT_MIDIParam param <= getSelectedParameter();

      if(null != param)
      {
         NT_Instrument ins <= getSelectedInstrument();

         byte forceCh = param.forced_ch - 1;  /* 0=off => -1=off */

         StringArray *sa;
         sa <= ins.getCCNames(param.forced_dev, forceCh, false/*bMultiLine*/);
         // // trace "xxx updateParamCCAndNRPNOptions: cc="+#(sa);
         cm_param_cc_msb_id.setOptions(sa);
         cm_param_cc_lsb_id.setOptions(sa);
         sa <= ins.getCCNames(param.forced_dev, forceCh, true/*bMultiLine*/);
         cm_param_cc_msb_id.setToolTipCaptions(sa);
         cm_param_cc_lsb_id.setToolTipCaptions(sa);

         sa <= ins.getRPNNames(param.forced_dev, forceCh, false/*bMultiLine*/);
         // // trace "xxx updateParamCCAndNRPNOptions: rpn="+#(sa);
         cm_param_rpn_alias_id.setOptions(sa);
         sa <= ins.getRPNNames(param.forced_dev, forceCh, true/*bMultiLine*/);
         cm_param_rpn_alias_id.setToolTipCaptions(sa);
         cm_param_rpn_alias_id.setEditable(false);

         if(null != sa)
         {
            if(sa.numElements > 0)
            {
               cm_param_rpn_alias_id.setEditable(true);
               cm_param_rpn_alias_id.setSelectedOption(NT_MIDIParam.GetRPNAliasIdxByRPN(sa, param.rpn_id));
            }
         }

         sa <= ins.getNRPNNames(param.forced_dev, forceCh, false/*bMultiLine*/);
         // // trace "xxx updateParamCCAndNRPNOptions: nrpn="+#(sa);
         cm_param_nrpn_alias_id.setOptions(sa);
         sa <= ins.getNRPNNames(param.forced_dev, forceCh, true/*bMultiLine*/);
         cm_param_nrpn_alias_id.setToolTipCaptions(sa);
         cm_param_nrpn_alias_id.setEditable(false);

         if(null != sa)
         {
            if(sa.numElements > 0)
            {
               cm_param_nrpn_alias_id.setEditable(true);
               cm_param_nrpn_alias_id.setSelectedOption(NT_MIDIParam.GetNRPNAliasIdxByNRPN(sa, param.nrpn_id));
            }
         }
      }
   }

   // <method_update.png>
   protected method updateParamRange(NT_MIDIParam _param) {
      // Called when parameter value range has changed (or when param is selected)

      switch(_param.ui_range)
      {
         case NT_CEL.RANGE_0_255:
         case NT_CEL.RANGE_M128_P127:
            fp_param_reset.setStepCoarse(1);
            fp_param_reset.setMaxValue(255);
            fp_param_reset.setEnableMaxEditable(_param.isPN() && !_param.b_scale14bit);
            fp_param_reset.setPrecision(_param.b_scale14bit ? 3 : 0);
            break;

         default:
         case NT_CEL.RANGE_0_127:
         case NT_CEL.RANGE_M64_P63:
            fp_param_reset.setStepCoarse(1);
            fp_param_reset.setMaxValue(127);
            fp_param_reset.setEnableMaxEditable(_param.isPN() && !_param.b_scale14bit);
            fp_param_reset.setPrecision(_param.b_scale14bit ? 3 : 0);
            break;

         case NT_CEL.RANGE_BINARY_127:
            fp_param_reset.setStepCoarse(127);
            fp_param_reset.setMaxValue(127);
            fp_param_reset.setEnableMaxEditable(_param.isPN() && !_param.b_scale14bit);
            fp_param_reset.setPrecision(0);
            break;

         case NT_CEL.RANGE_BINARY_255:
            fp_param_reset.setStepCoarse(255);
            fp_param_reset.setMaxValue(255);
            fp_param_reset.setEnableMaxEditable(_param.isPN() && !_param.b_scale14bit);
            fp_param_reset.setPrecision(0);
            break;
      }

      fp_param_reset.setValue(_param.reset);
      fp_param_reset.validateValues();
      fp_param_reset.redraw();
   }

   // <method.png>
   public method editSelectedParameter() {
      NT_MIDIParam param <= getSelectedParameter();

      if(null != param)
      {
         NT_Instrument ins <= getSelectedInstrument();
         ins.ui_last_selected_param_idx = param.id;

         handleParamDevOrChannelChanged();  // calls updateParamCCAndNRPNOptions()

         tf_param_name        .setText           (param.name);
         cm_param_type        .setSelectedOption (param.type);

         local StringArray devNames = MIDI.out_device_names_sorted;
         devNames.insert(0, "-");
         cm_param_forceddev.setOptions(devNames);
         local IntArray devColors = MIDI.out_device_bgcolors_sorted;
         devColors.insert(0, 0);
         cm_param_forceddev.setOptionBGColors(devColors);

         if(null != param.forced_dev)
         {
            cm_param_forceddev.setSelectedOption((MIDI.out_devices_sorted.indexOfPointer(param.forced_dev, 0)) + 1);
         }
         else
         {
            cm_param_forceddev.setSelectedOption(0);  // "-"
         }

         cm_param_forcedch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(param.getActualDevIdx(ins), "-"));
         cm_param_forcedch.setSelectedOption (param.forced_ch);
         cm_param_style   .setSelectedOption (param.ui_style);
         cm_param_range   .setSelectedOption (param.ui_range);

         updateParamRange(param);

         fp_param_reset             .setValue          (param.reset);
         cb_param_reset_select      .setSelected       (param.b_reset_select);
         cb_param_reset_note        .setSelected       (param.b_reset_note);
         cm_param_msblsb            .setSelectedOption (param.msblsb_mode);
         cm_param_msblsb            .setEditable       (param.type == NT_MIDIParam.TYPE_CC);
         cb_param_scale14bit        .setSelected       (param.b_scale14bit);
         ls_param_type              .switchToLayerNr   (param.type);
         cm_param_cc_msb_id         .setSelectedOption (param.cc_msb_id);
         cm_param_cc_msb_id         .setEditable       (param.useMSB());
         cm_param_cc_lsb_id         .setSelectedOption (param.cc_lsb_id);
         cm_param_cc_lsb_id         .setEditable       (param.useLSB());
         fp_param_rpn_id            .setValue          (param.rpn_id);
         fp_param_nrpn_id           .setValue          (param.nrpn_id);
         fp_param_remote_instance_id.setValue          (param.remote_instance_id);
         fp_param_remote_param_idx  .setValue          (param.remote_param_idx);

         updateRemoteParamOptions(param);

         fp_param_recusr_rpn_min .setValue    (param.recusr_rpn_min);
         fp_param_recusr_rpn_ctr .setValue    (param.recusr_rpn_ctr);
         fp_param_recusr_rpn_max .setValue    (param.recusr_rpn_max);
         cb_param_recusr_asym    .setSelected (param.b_recusr_asym);
         fp_param_recusr_rpn_ctr.setEditable(param.b_recusr_asym);

         fp_param_remote_out_min    .setMinValue       (param.b_remote_relative ? -1.0f : 0.0f);
         fp_param_remote_out_min    .setValue          (param.remote_out_min);
         fp_param_remote_out_max    .setValue          (param.remote_out_max);
         cb_param_remote_relative   .setSelected       (param.b_remote_relative);

         tf_param_name                     .setEditable(true);
         bt_param_io_learn                 .setEditable(true);
         cm_param_type                     .setEditable(true);
         cm_param_forceddev                .setEditable(true);
         cm_param_forcedch                 .setEditable(true);
         cm_param_style                    .setEditable(true);
         cm_param_range                    .setEditable(true);
         cb_param_scale14bit               .setEditable(true);
         fp_param_recusr_rpn_min           .setEditable(true);
         fp_param_recusr_rpn_max           .setEditable(true);
         cb_param_recusr_asym              .setEditable(true);
         fp_param_reset                    .setEditable(true);
         cb_param_reset_select             .setEditable(true);
         cb_param_reset_note               .setEditable(true);
         bt_param_reset_learn              .setEditable(true);
         ls_param_type                     .setEditable(true);
         cm_param_rpn_alias_id             .setEditable(true);
         fp_param_rpn_id                   .setEditable(true);
         cm_param_nrpn_alias_id            .setEditable(true);
         fp_param_nrpn_id                  .setEditable(true);
         fp_param_remote_instance_id       .setEditable(true);
         bt_param_remote_query_instance_ids.setEditable(true);
         fp_param_remote_param_idx         .setEditable(true);
         fp_param_remote_out_min           .setEditable(true);
         fp_param_remote_out_max           .setEditable(true);
         cb_param_remote_relative          .setEditable(true);

         // Update layout
         handleParamTypeChanged(true/*bUpdateOnly*/);

         if(-1 == tm_params.getCursorIndex())
            tv_params.moveCursorToFirstRow();

         trySelectCelForParam();
      }
      else
      {
         tf_param_name.setText("");

         cm_param_cc_msb_id.setOptions(null);
         cm_param_cc_lsb_id.setOptions(null);
         cm_param_rpn_alias_id .setOptions(null);
         cm_param_nrpn_alias_id.setOptions(null);

         tf_param_name                     .setEditable(false);
         bt_param_io_learn                 .setEditable(false);
         cm_param_type                     .setSelectedOption(-1);
         cm_param_type                     .setEditable(false);
         cm_param_forceddev                .setSelectedOption(0);
         cm_param_forceddev                .setEditable(false);
         cm_param_forcedch                 .setSelectedOption(0);
         cm_param_forcedch                 .setEditable(false);
         cm_param_style                    .setSelectedOption(-1);
         cm_param_style                    .setEditable(false);
         cm_param_range                    .setSelectedOption(-1);
         cm_param_range                    .setEditable(false);
         cm_param_msblsb                   .setSelectedOption(-1);
         cm_param_msblsb                   .setEditable(false);
         cb_param_scale14bit               .setSelected(false);
         cb_param_scale14bit               .setEditable(false);
         fp_param_recusr_rpn_min           .setEditable(false);
         fp_param_recusr_rpn_ctr           .setEditable(false);
         fp_param_recusr_rpn_max           .setEditable(false);
         cb_param_recusr_asym              .setEditable(false);
         fp_param_reset                    .setEditable(false);
         cb_param_reset_select             .setSelected(false);
         cb_param_reset_select             .setEditable(false);
         cb_param_reset_note               .setSelected(false);
         cb_param_reset_note               .setEditable(false);
         bt_param_reset_learn              .setEditable(false);
         ls_param_type                     .setEditable(false);
         cm_param_cc_msb_id                .setEditable(false);
         cm_param_cc_lsb_id                .setEditable(false);
         cm_param_rpn_alias_id             .setEditable(false);
         fp_param_rpn_id                   .setEditable(false);
         cm_param_nrpn_alias_id            .setEditable(false);
         fp_param_nrpn_id                  .setEditable(false);
         fp_param_remote_instance_id       .setEditable(false);
         bt_param_remote_query_instance_ids.setEditable(false);
         fp_param_remote_param_idx         .setEditable(false);
         cm_param_remote_params            .setEditable(false);
         fp_param_remote_out_min           .setEditable(false);
         fp_param_remote_out_max           .setEditable(false);
         cb_param_remote_relative          .setEditable(false);

         if([LEARN_PARAM_IO, LEARN_PARAM_RESET].contains(parent_node.learn_mode))
         {
            setLearnMode(LEARN_NONE, true/*bQuiet*/);
         }
      }
   }

   // <method.png>
   protected =replay= method deleteSelectedParam() {
      // // trace "xxx EditInstrumentMIDIDialog::deleteSelectedParam";

      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         int idx = tm_params.getCursorIndex();

         if(-1 != idx)
         {
            ins.deleteParamByIdx(idx);

            tv_params.tableModelChanged();

            int newIdx = ins.findNextUsedParamIdx(idx);
            if(-1 == newIdx)
            {
               newIdx = ins.findPreviousUsedParamIdx(idx);
               if(-1 == newIdx)
                  newIdx = ins.findNextUsedParamIdx(0);
            }

            if(-1 != newIdx)
               tv_params.moveCursorToRow(newIdx);
            else
               tv_params.moveCursorToFirstRow();

            handleParamsChanged();

            editSelectedParameter();
         }
      }
   }

   // <ui_handle.png>
   protected method handleEditOrCreateParameter() {
      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         int idx = tm_params.getCursorIndex();

         if(-1 != idx)
         {
            NT_MIDIParam mp <= ins.getUsrCtlParam(idx);

            if(null != mp)
            {
               // Edit existing parameter
               // // trace "xxx EditInstrumentMIDIDialog::editSelectedParam: idx="+idx+" mp="+#(mp);
               editSelectedParameter();///showParam(mp, ins);
            }
            else
            {
               // Create new parameter at the selected index
               createNewParam(idx, false/*bQuiet*/);
            }
         }
      }
   }

   // <method.png>
   protected method determineMaxParamCopyNr(String _s) : int {

      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         String prefix;
         Utils.ExtractCopyPrefix(_s, prefix);

         int maxNr = -1;
         NT_MIDIParam *param;
         foreach param in ins.usrctl_params
         {
            if(null != param)
            {
               String n <= param.name;
               if(null != n)
               {
                  if(n.startsWith(prefix))
                  {
                     maxNr = 0;
                     int nr = Utils.DetermineCopyNr(n);
                     if(nr > maxNr)
                     {
                        maxNr = nr;
                     }
                  }
               }
            }
         }
         return maxNr;
      }
      return -1;
   }

   // <method.png>
   public =replay= method createNewParam(int _idx, boolean _bQuiet) : NT_MIDIParam {
      Global.Debug("NT_InstrumentView::createNewParam: idx="+_idx);

      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         boolean bHaveCC1  = ins.haveDefaultCC( 1/*mw*/);
         boolean bHaveCC2  = ins.haveDefaultCC( 2/*bc*/);
         boolean bHaveCC4  = ins.haveDefaultCC( 4/*fc*/);
         boolean bHaveCC11 = ins.haveDefaultCC(11/*ex*/);
         boolean bHaveCC16 = ins.haveDefaultCC(16/*gp1*/);
         boolean bHaveCC17 = ins.haveDefaultCC(17/*gp2*/);
         boolean bHaveCC18 = ins.haveDefaultCC(18/*gp3*/);
         boolean bHaveCC19 = ins.haveDefaultCC(19/*gp4*/);

         NT_MIDIParam *mp <= ins.createNewParam(_idx);

         if(!_bQuiet)
         {
            if(null != mp)
            {
               if(!bHaveCC1)
               {
                  // already set to MW
               }
               else if(!bHaveCC2)
                  mp.cc_msb_id = 2;
               else if(!bHaveCC4)
                  mp.cc_msb_id = 4;
               else if(!bHaveCC11)
                  mp.cc_msb_id = 11;
               else if(!bHaveCC16)
                  mp.cc_msb_id = 16;
               else if(!bHaveCC17)
                  mp.cc_msb_id = 17;
               else if(!bHaveCC18)
                  mp.cc_msb_id = 18;
               else if(!bHaveCC19)
                  mp.cc_msb_id = 19;

               tv_params.tableModelChanged();

               tv_params.moveCursorToRow(mp.id);

               editSelectedParameter();

               autogenMIDIParamName();

               handleParamsChanged();
            }
         }

         return mp;
      }

      return null;
   }

   // <method.png>
   protected method cloneSelectedParam() {
      if(copyParamToClipboard())
      {
         if(null != createNewParam(-1, false/*bQuiet*/))
         {
            pasteParamClipboard();

            Global.Print("Clone parameter");
         }
         else
         {
            Global.Warning("Failed to create parameter");
         }
      }
   }

   // <method_handle.png>
   protected method handleParamsChanged() {
      // called after param has been created or deleted
      tv_params.tableModelChanged();

      updateParamVisibility(false/*bUpdateLayout*/);
   }

   // <method.png>
   public updateParamVisibility(boolean _bUpdateLayout) {
      NT_Instrument ins <= getSelectedInstrument();
      updateParamVisibilityForIns(ins, _bUpdateLayout, true/*bCalcExtents*/);
   }

   // <method.png>
   public updateParamVisibilityForIns(NT_Instrument ins, boolean _bUpdateLayout, boolean _bCalcExtents) {
      // (note) _bUpdateLayout: update cel even it's already visible (e.g. after layout/range have been assigned)
      // (note) based on EditControllerMapping.MakeAllCtlsVisible()

      if(null != ins)
      {
         NT_PatternView pv <= parent_editor.pattern_view;
         NT_TEL tel <= pv.getCurrentTrackLayout();
         int numMapped  = 0;
         int numAdded   = 0;
         int numRemoved = 0;
         int numUpdated = 0;
         int pvCursorCel = -1;
         if(null != tel)
         {
            NT_Track track <= pv.getCurrentTrack();

            int usrCtlId;
            int ctlId;
            NT_CEL *cel;

            // Order cels so that added cels will appear on the right hand side
            tel.orderByVisibility();

            // Remove cels for unmapped params that have no envelope data
            foreach cel in tel.ctl_layouts
            {
               if(cel.b_visible)
               {
                  ctlId = cel.ctl_id;
                  if(ctlId >= NT_TrackPattern.CTL_USR)
                  {
                     if(null == ins.getUsrCtlParam(ctlId - NT_TrackPattern.CTL_USR))
                     {
                        // visible cel shows user controller that is not mapped to a param
                        //  ==> hide cel
                        cel.b_visible = false;

                        numRemoved++;
                     }
                  }
               }
            }

            // Add cels for mapped params that have not been made visible, yet
            usrCtlId = 0;
            loop(NT_TrackPattern.CTL_NUMUSR)
            {
               int paramId = usrCtlId;

               if(null != ins.getUsrCtlParam(paramId))
               {
                  // user controller slot is in use, now check if it is visible in the track layout
                  ctlId = usrCtlId + NT_TrackPattern.CTL_USR;
                  cel <= tel.findVisibleCelForCtlById(ctlId);
                  if(null == cel)
                  {
                     // not visible, yet
                     cel <= tel.findFirstInvisibleCel();
                     if(null != cel)
                     {
                        // initialize cel
                        cel.b_visible = 1;
                        cel.ctl_id    = ctlId;
                        cel.style     = ins.getUsrCtlParamLayoutStyle(paramId);
                        cel.range     = ins.getUsrCtlParamLayoutRange(paramId);
                        // // trace "xxx init cel paramId="+paramId+" style="+cel.style+" range0"+cel.range;

                        pvCursorCel = tel.getIdxByCel(cel);

                        numAdded++;
                     }
                     else
                     {
                        trace "[~~~] NT_InstrumentView: unable to auto-map parameter since all cels are in use.";
                        return;
                     }
                  } // if userctl not mapped to cel
                  else
                  {
                     if(_bUpdateLayout)
                     {
                        cel.style = ins.getUsrCtlParamLayoutStyle(paramId);
                        cel.range = ins.getUsrCtlParamLayoutRange(paramId);

                        pvCursorCel = tel.getIdxByCel(cel);

                        numUpdated++;
                     }

                     numMapped++;
                  }
               }

               // Next user controller
               usrCtlId++;
            }

            // Anything changed ?
            if(_bCalcExtents)
            {
               if((numAdded > 0) || (numRemoved > 0) || (numUpdated > 0))
               {
                  tel.calcCursorExtents();
                  pv.handleTrackLayoutChanged();
                  if(-1 != pvCursorCel)
                  {
                     pv.moveCursorToCel(pvCursorCel);
                  }
                  pv.queueRedrawAll();
               }

               Global.Print("param cels: keep "+numMapped+", add "+numAdded+", remove "+numRemoved);
            }

         } // if current track / current track layout
      } // if ins
   }

   // <method.png>
   protected method copyParamToClipboard() : boolean {

      NT_MIDIParam param <= getSelectedParameter();

      if(null != param)
      {
         param_clipboard <= new NT_MIDIParam;
         param_clipboard = param;

         bt_param_paste.setEditable(true);

         Global.Print("Copy param to clipboard");

         return true;
      }
      else
      {
         Global.Error("No param selected");
      }
      return false;
   }

   // <method.png>
   protected method pasteParamClipboard() {

      if(null != param_clipboard)
      {
         NT_MIDIParam param <= createNewParam(tm_params.getCursorIndex(), false/*bQuiet*/);

         if(null != param)
         {
            param.name = "\n???";

            int maxNr = determineMaxParamCopyNr(param_clipboard.name);
            int origParamId = param.id;
            param = param_clipboard;
            param.id = origParamId;

            if(maxNr >= 0)
            {
               param.name = Utils.BuildCopiedName(param.name, maxNr + 1);
            }

            editSelectedParameter();

            Global.Print("Paste param clipboard");
         }
      }
      else
      {
         Global.Error("Param clipboard is empty");
      }
   }

   // <ui_handle.png>
   protected method handleCopyCtlParam(boolean _bClipboardB) {
      local String msgPrefix = "copyctl<"+(_bClipboardB?"B":"A")+">: ";
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         NT_MIDIParam param <= getSelectedParameter();
         if(null != param)
         {
            STX_MIDIOutDevice dev <= param.getEffectiveDevice(ins);
            if(null != dev)
            {
               NMM_Arg cb <= _bClipboardB ? mmarg_clipboard_b : mmarg_clipboard_a;
               int midiCh = param.getEffectiveChannel(ins);
               cb.initFromCopiedCtl(dev.dev_idx,
                                    midiCh,
                                    NMM_Arg.TYPE_NONE,
                                    0/*ccNr*/,
                                    0/*rpnNr*/,
                                    0/*nrpnNr*/
                                    );
               cb.copyTypeFromNodeTrackerMIDIParam(param);

               Global.Print(msgPrefix+"type="+cb.getClipboardTypeString()+" dev="+cb.getClipboardPortString());
            }
            else
            {
               Global.Warning(msgPrefix+"no device");
            }
         }
         else
         {
            Global.Warning(msgPrefix+"no param");
         }
      }
      else
      {
         Global.Warning(msgPrefix+"no instrument");
      }
   }

   // <ui_handle.png>
   protected =replay= method handlePasteCtlParam(boolean _bClipboardB) {
      local String msgPrefix = "pastectl<"+(_bClipboardB?"B":"A")+">: ";
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         NT_MIDIParam param <= getSelectedParameter();
         if(null == param)
            param <= createNewParam(tm_params.getCursorIndex(), true/*bQuiet*/);
         if(null != param)
         {
            NMM_Arg cb <= _bClipboardB ? mmarg_clipboard_b : mmarg_clipboard_a;
            param.copyFromNodeModMatrixArg(ins, cb);

            editSelectedParameter();
            Global.Print(msgPrefix+"type="+cb.getClipboardTypeString()+" dev="+cb.getClipboardPortString());
         }
         else
         {
            Global.Warning(msgPrefix+"no param");
         }
      }
      else
      {
         Global.Warning(msgPrefix+"no instrument");
      }
   }

   // <method.png>
   protected method initFromCtlTagEntryParam(int _idx) {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         NT_MIDIParam param <= getSelectedParameter();
         if(null != param)
         {
            CtlTagEntry en <= current_song.getCtlTagEntryByIdx(_idx);
            MIDIMapEvent ev <= en.mm_event;
            param.initFromMIDIMapEvent(ins, ev, true/*bMayForceDevCh*/);
            editSelectedParameter();
         }
      }
   }

   // <method.png>
   protected method createParamFromFromCtlTagEntry(int _idx) {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         NT_MIDIParam param <= createNewParam(tm_params.getCursorIndex(), false/*bQuiet*/);
         if(null != param)
         {
            initFromCtlTagEntryParam(_idx);
         }
      }
   }

   // <ui_show.png>
   protected method showCtlClipboardParamsMenu(boolean _bFocusFirst) {

      pm_ctlclipboard_params <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_ctlclipboard_params;
      boolean bHaveParam = (null != getSelectedParameter());

      MIDI.AppendCtlClipboardMenuItems(pm, bHaveParam/*bActiveCopy*/, true/*bActivePaste*/);

      MIDI.AppendCtlTagSubMenu(pm, "CtlTag");

      // Present
      pm.resizeToMinimum();
      pm.showNearMouse(-30, 0);

      if(_bFocusFirst)
         pm.focusNextMenuItem();

      Global.Print("Show Ctl.Clipboard param menu.");
   }

   // <method.png>
   public method autogenMIDIParamName() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         // Generate new param name if it has not been edited, yet
         if(!param.b_name_edited)
         {
            if(NT_MIDIParam.TYPE_REMOTE != param.type)
            {
               param.name = param.uiGetMIDIParamString(false/*bMultiLine*/, getSelectedInstrument());

               if(param.name != tf_param_name.getText())
               {
                  tf_param_name.setText(param.name);

                  // (note) may be called while InstrumentView is not visible (and TableModel.params have not been updated, yet)
                  NT_Instrument ins <= getSelectedInstrument();
                  tm_params.params <= (null != ins) ? ins.usrctl_params : null;

                  tv_params.tableModelChanged();
               }
            }
            else
            {
               updateAutoRemoteParamName(param);
            }
         }
      }
   }

   // <method.png>
   protected method autogenParamNameInt(NT_Instrument ins, NT_MIDIParam param) {
      // Generate new param name if it has not been edited, yet
      if(!param.b_name_edited)
      {
         if(NT_MIDIParam.TYPE_REMOTE != param.type)
         {
            param.name = param.uiGetMIDIParamString(false/*bMultiLine*/, ins);
         }
         else
         {
            if(remote_param_names.exists(String(param.remote_instance_id)))
            {
               StringArray paramNames <= remote_param_names[String(param.remote_instance_id)];
               param.name = paramNames.get(param.remote_param_idx);
            }
            else
            {
               if(param.name.isBlank())
                  param.name = "remote param "+param.remote_param_idx;
            }
         }
      }
   }

   // <method.png>
   protected method updateAutoRemoteParamName(NT_MIDIParam param) {
      if(!param.b_name_edited)
      {
         if(remote_param_names.exists(String(param.remote_instance_id)))
         {
            StringArray paramNames <= remote_param_names[String(param.remote_instance_id)];
            param.name = paramNames.get(param.remote_param_idx);
         }
         else
         {
            if(param.name.isBlank())
               param.name = "remote param "+param.remote_param_idx;
         }
         if(param.name != tf_param_name.getText())
         {
            tf_param_name.setText(param.name);
            tv_params.tableModelChanged();
         }
      }
   }

   // <method.png>
   protected method autoselectRangeAndStyle() {
      NT_Instrument ins <= getSelectedInstrument();
      if(null != ins)
      {
         if(null != ins.out_device)
         {
            NT_MIDIParam param <= getSelectedParameter();
            if(null != param)
            {
               byte ch;
               if(0 == param.forced_ch)
                  ch = ins.midi_channel;
               else
                  ch = param.forced_ch - 1;

               MIDISynthProfile msp <= ins.out_device.getMIDISynthProfile(ch);
               MIDISynthProfileCtlAlias al <= null;
               if(null != msp)
               {
                  switch(param.type)
                  {
                     case NT_MIDIParam.TYPE_CC:
                        break;

                     case NT_MIDIParam.TYPE_RPN:
                        al <= msp.getRPNAliasByNr(param.rpn_id);
                        break;

                     case NT_MIDIParam.TYPE_NRPN:
                        al <= msp.getNRPNAliasByNr(param.nrpn_id);
                        break;
                  }

                  if(null != al)
                  {
                     param.ui_style = al.cel_style;
                     param.ui_range = al.cel_range;

                     cm_param_style.setSelectedOption (param.ui_style);
                     cm_param_range.setSelectedOption (param.ui_range);

                     if(al.max > 0)
                     {
                        if(al.max > 255)
                        {
                           param.b_scale14bit = true;
                           cb_param_scale14bit.setSelected(true);
                        }
                        else
                        {
                           param.b_scale14bit = false;
                           cb_param_scale14bit.setSelected(false);
                        }
                     }

                     updateParamVisibility(true/*bUpdateLayout*/);
                  }
               }
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleParamTypeChanged(boolean _bUpdateOnly) {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.type = cm_param_type.getSelectedOption();
         ls_param_type.switchToLayerNr(param.type);
         cm_param_msblsb.setEditable(param.type == NT_MIDIParam.TYPE_CC);

         cb_param_scale14bit.setEditable(true);

         ta_relayout.reschedule();
         updateParamRange(param);

         switch(param.type)
         {
            case NT_MIDIParam.TYPE_CC:
               if(param.msblsb_mode != cm_param_msblsb.getSelectedOption())
               {
                  param.msblsb_mode = NT_MIDIParam.MSBLSB_ONLYMSB;
                  cm_param_msblsb.setSelectedOption(param.msblsb_mode);
               }

               if(!_bUpdateOnly)
               {
                  cb_param_scale14bit.setSelected(true);
                  handleParamScale14BitChanged();
               }
               break;

            case NT_MIDIParam.TYPE_RPN:
            case NT_MIDIParam.TYPE_NRPN:
               // why set mslsb_mode ??
               if(param.msblsb_mode != cm_param_msblsb.getSelectedOption())
               {
                  param.msblsb_mode = NT_MIDIParam.MSBLSB_ONLYLSB;
                  cm_param_msblsb.setSelectedOption(param.msblsb_mode);
               }

               if(!_bUpdateOnly)
               {
                  cb_param_scale14bit.setSelected(false);
                  handleParamScale14BitChanged();
               }
               break;

            case NT_MIDIParam.TYPE_PRGCHG:
               break;
         }

         updateRemoteParamOptions(param);
         autogenMIDIParamName();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamForcedDevChanged(boolean _bQuiet) {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         int devIdx = cm_param_forceddev.getSelectedOption();
         if(devIdx > 0)
         {
            param.forced_dev <= MIDI.GetMIDIOutDeviceByIndexSorted(devIdx - 1);

            if(!_bQuiet)
               Global.Print("Forced device is \""+(param.forced_dev.getAliasOrDeviceName())+"\"");
         }
         else
         {
            param.forced_dev <= null;

            if(!_bQuiet)
               Global.Print("Use instrument device");
         }

         handleParamDevOrChannelChanged();  // calls updateParamCCAndNRPNOptions()
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamForcedChChanged(boolean _bQuiet) {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.forced_ch = cm_param_forcedch.getSelectedOption();

         if(!_bQuiet)
            Global.Print("Forced channel is "+(param.forced_ch ? param.forced_ch : "Off"));
      }

      handleParamDevOrChannelChanged();  // calls updateParamCCAndNRPNOptions()
   }

   // <ui_handle.png>
   protected =replay= method handleParamStyleChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.ui_style = cm_param_style.getSelectedOption();

         NT_PatternView pv <= parent_editor.pattern_view;
         NT_TEL tel <= pv.getCurrentTrackLayout();
         if(null != tel)
         {
            NT_CEL cel <= tel.findVisibleCelForCtlById(param.id + NT_TrackPattern.CTL_USR);
            if(null != cel)
            {
               cel.style = param.ui_style;
               tel.calcCursorExtents();
               pv.queueRedrawAll();
            }
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamRangeChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.ui_range = cm_param_range.getSelectedOption();

         updateParamRange(param);

         NT_PatternView pv <= parent_editor.pattern_view;
         NT_TEL tel <= pv.getCurrentTrackLayout();
         if(null != tel)
         {
            NT_CEL cel <= tel.findVisibleCelForCtlById(param.id + NT_TrackPattern.CTL_USR);
            if(null != cel)
            {
               cel.range = param.ui_range;
               tel.calcCursorExtents();
               pv.queueRedrawAll();
            }
         }

      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamMSBLSBChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.msblsb_mode = cm_param_msblsb.getSelectedOption();
         cm_param_cc_lsb_id.setEditable(param.useLSB());
         cm_param_cc_msb_id.setEditable(param.useMSB());

         autogenMIDIParamName();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamScale14BitChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.b_scale14bit = cb_param_scale14bit.isSelected();

         updateParamRange(param);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamResetChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.reset = fp_param_reset.getValue();

         Integer io = param.reset;

         String msg = "Reset value is "+param.reset;

         float effectiveOutVal = param.mapCtlVal(param.reset);
         Integer ioEff = effectiveOutVal;
         Float foEff = effectiveOutVal;

         // (note) for debugging purposes, unmap the value as if it had been recorded from MIDI input
         switch(param.type)
         {
            default:
               msg.append(" ("+io.printf("0x%04x")+") => send val="+ioEff.printf("0x%04x")+" ("+ioEff+")"+" MSB/LSB:"+((ioEff>>7).printf("%02x"))+":"+((ioEff&127).printf("%02x")));
               Global.Debug("iv: def param reset="+param.reset+" mapCtlVal="+effectiveOutVal+" unmapCtlVal="+param.unmapCtlVal(false/*bLSB*/, param.b_scale14bit ? int(effectiveOutVal/128.0) : int(effectiveOutVal)));
               break;

            case NT_MIDIParam.TYPE_RPN:
            case NT_MIDIParam.TYPE_NRPN:
               msg.append(" ("+io.printf("0x%04x")+") => send val="+ioEff.printf("0x%04x")+" ("+ioEff+")"+" MSB/LSB:"+((ioEff>>7).printf("%02x"))+":"+((ioEff&127).printf("%02x")));
               Global.Debug("iv: (n)rpn param reset="+param.reset+" mapCtlVal="+effectiveOutVal+" unmapCtlVal="+param.unmapCtlVal(false/*bLSB*/, effectiveOutVal));
               break;

            case NT_MIDIParam.TYPE_PRGCHG:
               msg.append(" ("+(Node.patnr_options.get(param.reset))+")");
               Global.Debug("iv: PRGCHG param reset="+param.reset+" mapCtlVal="+effectiveOutVal+" unmapCtlVal="+param.unmapCtlVal(false/*bLSB*/, int(effectiveOutVal)));
               break;

            case NT_MIDIParam.TYPE_REMOTE:
               msg.append(" ("+io.printf("%04x")+") => send val="+foEff);
               Global.Debug("iv: Remote param reset="+param.reset+" mapCtlVal="+effectiveOutVal+" unmapCtlVal="+param.unmapRemoteEventParamValue(effectiveOutVal));
               break;
         }

         autogenMIDIParamName();  // prgchg def=..

         Global.Print(msg);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamResetSelectChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.b_reset_select = cb_param_reset_select.isSelected();

         Global.Print("Param reset instr.select is "+Utils.GetEnableString(param.b_reset_select));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamResetNoteChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.b_reset_note = cb_param_reset_note.isSelected();

         Global.Print("Param reset note-on is "+Utils.GetEnableString(param.b_reset_note));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamCCMSBIdChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.cc_msb_id = cm_param_cc_msb_id.getSelectedOption();

         if(param.useLSB())
         {
            // Auto-select corresponding LSB controller for lower 32 CCs
            if(param.cc_msb_id < 32)
            {
               param.cc_lsb_id = 32 + param.cc_msb_id;
               cm_param_cc_lsb_id.setSelectedOption(param.cc_lsb_id);
            }
         }

         autogenMIDIParamName();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamCCLSBIdChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.cc_lsb_id = cm_param_cc_lsb_id.getSelectedOption();

         autogenMIDIParamName();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamRPNIdChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         NT_Instrument ins <= getSelectedInstrument();

         param.rpn_id = fp_param_rpn_id.getFloatValue();

         cm_param_rpn_alias_id.setSelectedOption(NT_MIDIParam.GetRPNAliasIdxByRPN(ins.getRPNNames(param.forced_dev, param.forced_ch-1, false/*bMultiLine*/), param.rpn_id));

         autoselectRangeAndStyle();
         autogenMIDIParamName();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamRPNAliasIdChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         NT_Instrument ins <= getSelectedInstrument();

         int idx = cm_param_rpn_alias_id.getSelectedOption();
         StringArray sa <= ins.getRPNNames(param.forced_dev, param.forced_ch-1, false/*bMultiLine*/);
         if(null != sa)
         {
            String aliasStr <= sa.get(idx);
            int rpnNr = STX_MIDIDevice.GetRPNFromCaption(aliasStr); // RPN#<vwxyz>
            param.rpn_id = rpnNr;
            fp_param_rpn_id.setValue(rpnNr);
            fp_param_rpn_id.redraw();

            autoselectRangeAndStyle();
            autogenMIDIParamName();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamNRPNIdChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         NT_Instrument ins <= getSelectedInstrument();

         param.nrpn_id = fp_param_nrpn_id.getFloatValue();

         cm_param_nrpn_alias_id.setSelectedOption(NT_MIDIParam.GetNRPNAliasIdxByNRPN(ins.getNRPNNames(param.forced_dev, param.forced_ch-1, false/*bMultiLine*/), param.nrpn_id));

         autoselectRangeAndStyle();
         autogenMIDIParamName();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamNRPNAliasIdChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         NT_Instrument ins <= getSelectedInstrument();

         int idx = cm_param_nrpn_alias_id.getSelectedOption();
         StringArray sa <= ins.getNRPNNames(param.forced_dev, param.forced_ch-1, false/*bMultiLine*/);
         if(null != sa)
         {
            String aliasStr <= sa.get(idx);
            int nrpnNr = STX_MIDIDevice.GetNRPNFromCaption(aliasStr); // NRPN#<vwxyz>
            param.nrpn_id = nrpnNr;
            fp_param_nrpn_id.setValue(nrpnNr);
            fp_param_nrpn_id.redraw();

            autoselectRangeAndStyle();
            autogenMIDIParamName();
         }
      }
   }

   // <ui_update.png>
   protected method updateRemoteParamOptions(NT_MIDIParam param) {
      boolean bHaveRemoteParams = false;

      if(NT_MIDIParam.TYPE_REMOTE == param.type)
      {
         StringArray remoteParamNames <= remote_param_names.get(String(param.remote_instance_id));
         if(null != remoteParamNames)
         {
            cm_param_remote_params.setOptions(remoteParamNames);
            cm_param_remote_params.setSelectedOption(param.remote_param_idx);
            bHaveRemoteParams = true;
         }
      }

      if(!bHaveRemoteParams)
      {
         cm_param_remote_params.setOptions(null);
         cm_param_remote_params.setSelectedOption(-1);
      }

      cm_param_remote_params.setEditable(bHaveRemoteParams);
   }

   // <ui_handle.png>
   protected =replay= method handleParamRemoteInstanceIdChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.remote_instance_id = fp_param_remote_instance_id.getFloatValue();

         updateRemoteParamOptions(param);
         updateAutoRemoteParamName(param);

         Global.Print("Remote param instance id is "+param.remote_instance_id);
      }
   }

   // <ui_handle.png>
   protected method handleParamRemoteQueryInstanceIds() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         NT_Instrument ins <= getSelectedInstrument();

         int vstDevIdx = -1;
         int midiCh    = -1;

         STX_MIDIOutDevice outDev <= param.getEffectiveDevice(ins);
         // // trace "xxx handleParamRemoteQueryInstanceId: outDev="+#(outDev);
         if(null != outDev)
         {
            vstDevIdx = outDev.getVSTDevIdx();
            midiCh    = param.getEffectiveChannel(ins);
         }

         SysEx.QueueSendRemoteQueryInstanceId(vstDevIdx,
                                              midiCh,
                                              param.remote_instance_id/*0=use dev/ch*/
                                              );
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamRemoteParamIdxChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         // NT_Instrument ins <= getSelectedInstrument();
         param.remote_param_idx = fp_param_remote_param_idx.getFloatValue();

         updateAutoRemoteParamName(param);

         Global.Print("Remote param idx is "+param.remote_param_idx);
      }
   }

   // <ui_handle.png>
   protected method handleParamRemoteQueryParams() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         if(param.remote_instance_id > 0)
         {
            SysEx.QueueSendRemoteQueryParams(param.remote_instance_id);
         }
         else
         {
            Global.Warning("Cannot query Remote params: invalid instance id");
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamRecUsrRPNMinChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.recusr_rpn_min = fp_param_recusr_rpn_min.getFloatValue();

         Global.Print("RecUSR param range is "+param.getRecUsrCtlValueRangeString());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamRecUsrRPNCtrChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.recusr_rpn_ctr = fp_param_recusr_rpn_ctr.getFloatValue();

         Global.Print("RecUSR param range is "+param.getRecUsrCtlValueRangeString());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamRecUsrRPNMaxChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.recusr_rpn_max = fp_param_recusr_rpn_max.getFloatValue();

         Global.Print("RecUSR param range is "+param.getRecUsrCtlValueRangeString());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamRecUsrAsymChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.b_recusr_asym = cb_param_recusr_asym.isSelected();
         fp_param_recusr_rpn_ctr.setEditable(param.b_recusr_asym);

         Global.Print("RecUSR param range is "+param.getRecUsrCtlValueRangeString());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamRemoteOutMinChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.remote_out_min = fp_param_remote_out_min.getFloatValue();

         Global.Print("Remote param out min is "+param.remote_out_min);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamRemoteOutMaxChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.remote_out_max = fp_param_remote_out_max.getFloatValue();

         Global.Print("Remote param out max is "+param.remote_out_max);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleParamRemoteRelativeChanged() {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         param.b_remote_relative = cb_param_remote_relative.isSelected();
         fp_param_remote_out_min.setMinValue(param.b_remote_relative ? -1.0f : 0.0f);
         fp_param_remote_out_min.validateValues();
         fp_param_remote_out_min.redraw();
      }
   }

   // <ui_handle.png>
   protected method handleParamNameChanged(boolean _bEntered) {
      NT_MIDIParam param <= getSelectedParameter();
      if(null != param)
      {
         String defName = param.uiGetMIDIParamString(false/*bMultiLine*/, getSelectedInstrument());
         param.name = tf_param_name.getText();
         param.b_name_edited = (!(param.name.isBlank()) && (param.name != defName));
         if(param.b_name_edited)
         {
            Global.Debug("Param name edited, defName=\""+defName+"\", newName=\""+param.name+"\".");
         }
         else if(_bEntered)
         {
            param.name = defName;
            tf_param_name.setText(defName);
         }
         tv_params.tableModelChanged();
         // // trace "xxx consumeAction tf_name. str=\""+param.name+"\" b_name_edited="+param.b_name_edited;
      }
   }

   // <ui_show.png>
   protected method showParamsContextMenu(boolean _bFocusFirst) {

      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         pm_params <= PopupMenu.New(this);
         PopupMenuButton *pmb;
         PopupMenu pm <= pm_params;
         boolean bHaveParam = (null != getSelectedParameter());

         MIDI.AppendCtlClipboardMenuItems(pm, bHaveParam/*bActiveCopy*/, true/*bActivePaste*/);

         pm.addSeparator();
         MIDISynthProfile msp <= ins.getMIDISynthProfile();
         pmb <= pm.addDefaultButton("Import from Synth Profile \""+msp.profile_caption+"\"..",
                                    "import_profile"
                                    );
         pmb.setAccelerators("lctrl-lshift-i", "lctrl-lshift-INSERT");
         pmb.setActive(true);

         pm.addSeparator();
         pmb <= pm.addDefaultButton("Import Generic Ctls 1..4 (CC#16..CC#19) ",
                                    "import_perfctl_5"
                                    );
         pmb <= pm.addDefaultButton("Import Performance Ctls (MW,BC,FC,Ex,Sus,Sos,Soft,Bright,Pitchbend) ",
                                    "import_perfctl_4"
                                    );
         pmb <= pm.addDefaultButton("Import Performance Ctls (MW,BC,Ex,Sus,Bright,Pitchbend) ",
                                    "import_perfctl_3"
                                    );
         pmb <= pm.addDefaultButton("Import Performance Ctls (MW,BC,Ex,Sus,Pitchbend) ",
                                    "import_perfctl_2"
                                    );
         pmb <= pm.addDefaultButton("Import Performance Ctls (MW,Ex,Pitchbend) ",
                                    "import_perfctl_1"
                                    );
         pmb <= pm.addDefaultButton("Import Performance Ctls (MW,Pitchbend) ",
                                    "import_perfctl_0"
                                    );

         pm.addSeparator();
         pmb <= pm.addDefaultButton("Import PTFX (4 cmds/args) ",
                                    "import_ptfx_4"
                                    );
         pmb <= pm.addDefaultButton("Import PTFX (3 cmds/args) ",
                                    "import_ptfx_3"
                                    );
         pmb <= pm.addDefaultButton("Import PTFX (2 cmds/args) ",
                                    "import_ptfx_2"
                                    );
         pmb <= pm.addDefaultButton("Import PTFX (1 cmd/arg) ",
                                    "import_ptfx_1"
                                    );

         pm.addSeparator();
         pmb <= pm.addDefaultButton("Import Audio RPNs",
                                    "import_audio"
                                    );
         pmb.setToolTipCaption("Import Audio RPNs 87 (smp peak), set CTL_PC cel to hex (smp uid), and enable audio RPN smp_uid instrument mode\n\n (note) afterwards:\n  (note)   - select audio sampler MIDI port in instrument editor\n  (note)   - enter audio clip sample UID in CTL_PC cel\n  (note)   - query sample peaks in audio dialog (lctrl-x a)");

         pm.addSeparator();
         int numCtlTagEntries = current_song.findNumCtlTagEntriesForDevCh(ins.out_device, ins.midi_channel);
         pmb <= pm.addDefaultButton("Import from CtlTag ("+numCtlTagEntries+")",
                                    "import_ctltag"
                                    );
         pmb.setAccelerators(null, "lalt-INSERT");
         pmb.setActive(numCtlTagEntries > 0);

         MIDI.AppendCtlTagSubMenu(pm, "CtlTag");

         pm.resizeToMinimum();
         pm.showNearMouse(-10, -10);

         if(_bFocusFirst)
            pm.focusNextMenuItem();

         Global.Print("Show params context menu.");
      }
   }

   // <method.png>
   protected method lazyAddCCParam(NT_Instrument _ins, byte _ccMSB, Boolean _retFindOrAdd) : NT_MIDIParam {
      NT_MIDIParam mp <= _ins.findParamForTypeAndMSBCCOrNRPN(NT_MIDIParam.TYPE_CC, _ccMSB);
      if(null != mp)
      {
         _retFindOrAdd = false;
         return mp;
      }

      mp <= createNewParam(-1, true/*bQuiet*/);
      if(null != mp)
      {
         mp.ui_range = NT_CEL.RANGE_0_127;
         mp.cc_msb_id = _ccMSB;
         autogenParamNameInt(_ins, mp);
         _retFindOrAdd = true;
         return mp;
      }
      else
      {
         // Maximum number of parameters exceeded
         _retFindOrAdd = maybe;
         return null;
      }
   }

   // <method.png>
   protected =replay= method lazyAddRPNParam(NT_Instrument _ins, short _rpn, Boolean _retFindOrAdd) : NT_MIDIParam {
      NT_MIDIParam mp <= _ins.findParamForTypeAndMSBCCOrNRPN(NT_MIDIParam.TYPE_RPN, _rpn);
      if(null != mp)
      {
         _retFindOrAdd = false;
         return mp;
      }

      mp <= createNewParam(-1, true/*bQuiet*/);
      if(null != mp)
      {
         mp.type         = NT_MIDIParam.TYPE_RPN;
         mp.rpn_id       = _rpn;
         mp.b_scale14bit = false;
         autogenParamNameInt(_ins, mp);
         _retFindOrAdd = true;
         return mp;
      }
      else
      {
         // Maximum number of parameters exceeded
         _retFindOrAdd = maybe;
         return null;
      }
   }

   // <ui_handle.png>
   public method handleImportPerfCtlParams(int _type) {

      // types:
      //   0: MW,Pitchbend
      //   1: MW,Ex,Pitchbend
      //   2: MW,BC,Ex,Sus,Pitchbend
      //   3: MW,BC,Ex,Sus,Bright,Pitchbend
      //   4: MW,BC,FC,Ex,Sus,Sos,Soft,Bright,Pitchbend
      //   5: Generic 1..4 (CC#16..CC#19)

      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         // Show pitchbend cel
         NT_PatternView pv <= parent_editor.pattern_view;
         NT_TEL tel <= pv.getCurrentTrackLayout();

         parent_node.undoBeginNested("import_perfctl_params");
         parent_node.undoTouchNodeState();

         int numAdded = 0;
         int numExceeded = 0;
         Boolean bFindOrAdd;
         NT_MIDIParam *mp;

         if(null != tel)
         {
            tel.lazyAddVisibleCelForCtlById(NT_Defs.CTL_PB,
                                            NT_CEL.STYLE_HEX,
                                            NT_CEL.RANGE_M64_P63
                                            );
         }

         if(5 == _type)
         {
            // Generic 1 (CC 16)
            mp <= lazyAddCCParam(ins, 16/*ccMSB*/, bFindOrAdd);
            if(true == bFindOrAdd) numAdded++; else if(maybe == bFindOrAdd) numExceeded++;

            // Generic 2 (CC 17)
            mp <= lazyAddCCParam(ins, 17/*ccMSB*/, bFindOrAdd);
            if(true == bFindOrAdd) numAdded++; else if(maybe == bFindOrAdd) numExceeded++;

            // Generic 3 (CC 18)
            mp <= lazyAddCCParam(ins, 18/*ccMSB*/, bFindOrAdd);
            if(true == bFindOrAdd) numAdded++; else if(maybe == bFindOrAdd) numExceeded++;

            // Generic 4 (CC 19)
            mp <= lazyAddCCParam(ins, 19/*ccMSB*/, bFindOrAdd);
            if(true == bFindOrAdd) numAdded++; else if(maybe == bFindOrAdd) numExceeded++;
         }
         else
         {
            // Modwheel (cc 1)
            mp <= lazyAddCCParam(ins, 1/*ccMSB*/, bFindOrAdd);
            if(true == bFindOrAdd) numAdded++; else if(maybe == bFindOrAdd) numExceeded++;

            // Breath Control (cc 2)
            if(_type >= 2)
            {
               mp <= lazyAddCCParam(ins, 2/*ccMSB*/, bFindOrAdd);
               if(true == bFindOrAdd) numAdded++; else if(maybe == bFindOrAdd) numExceeded++;
            }

            // Foot Control (cc 4)
            if(_type >= 4)
            {
               mp <= lazyAddCCParam(ins, 4/*ccMSB*/, bFindOrAdd);
               if(true == bFindOrAdd) numAdded++; else if(maybe == bFindOrAdd) numExceeded++;
            }

            // Expression Pedal (cc 11)
            if(_type >= 1)
            {
               mp <= lazyAddCCParam(ins, 11/*ccMSB*/, bFindOrAdd);
               if(true == bFindOrAdd) numAdded++; else if(maybe == bFindOrAdd) numExceeded++;
            }

            // Sustain pedal (cc 64, "hold 1 sw")
            if(_type >= 2)
            {
               mp <= lazyAddCCParam(ins, 64/*ccMSB*/, bFindOrAdd);
               if(true == bFindOrAdd)
               {
                  numAdded++;
                  mp.ui_style = NT_CEL.STYLE_HI_NIBBLE;
                  mp.ui_range = NT_CEL.RANGE_BINARY_127;
               }
               else if(maybe == bFindOrAdd) numExceeded++;
            }

            // Sostenuto Pedal (cc 66, "Sostenuto SW")
            if(_type >= 4)
            {
               mp <= lazyAddCCParam(ins, 66/*ccMSB*/, bFindOrAdd);
               if(true == bFindOrAdd)
               {
                  numAdded++;
                  mp.ui_style = NT_CEL.STYLE_HI_NIBBLE;
                  mp.ui_range = NT_CEL.RANGE_BINARY_127;
               }
               else if(maybe == bFindOrAdd) numExceeded++;
            }

            // Soft pedal (cc 67, "Soft Pedal SW")
            if(_type >= 4)
            {
               mp <= lazyAddCCParam(ins, 67/*ccMSB*/, bFindOrAdd);
               if(true == bFindOrAdd)
               {
                  numAdded++;
                  mp.ui_style = NT_CEL.STYLE_HI_NIBBLE;
                  mp.ui_range = NT_CEL.RANGE_BINARY_127;
               }
               else if(maybe == bFindOrAdd) numExceeded++;
            }

            // MPE Brightness (cc 74)
            if(_type >= 3)
            {
               mp <= lazyAddCCParam(ins, 74/*ccMSB*/, bFindOrAdd);
               if(true == bFindOrAdd) numAdded++; else if(maybe == bFindOrAdd) numExceeded++;
            }
         }

         handleParamsChanged();
         editSelectedParameter();

         parent_node.undoEndNested("import_perfctl_params");

         if(0 == numExceeded)
            Global.Print("importperfctl: "+numAdded+" added");
         else
            Global.Warning("importperfctl: "+numAdded+" added, "+numExceeded+" skipped due to max param limit");
      }
   }

   // <ui_handle.png>
   protected method handleImportPTFX(int _num) {

      // RPN#91 (reset-value trigger), RPN#92..99 (cmd1/arg1 .. cmd4/arg4)

      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         NT_PatternView pv <= parent_editor.pattern_view;
         NT_TEL tel <= pv.getCurrentTrackLayout();

         parent_node.undoBeginNested("import_ptfx_params");
         parent_node.undoTouchNodeState();

         int numAdded = 0;
         int numExceeded = 0;
         Boolean bFindOrAdd;
         NT_MIDIParam *mp;

         if(null != tel)
         {
            // RPN#91 (reset-value trigger)
            mp <= lazyAddRPNParam(ins, 91, bFindOrAdd);
            if(true == bFindOrAdd)
            {
               numAdded++;
               mp.ui_style = NT_CEL.STYLE_LO_NIBBLE;
               mp.ui_range = NT_CEL.RANGE_BINARY_127;
               mp.b_reset_select = true;
               mp.reset = 1;
            }
            else if(maybe == bFindOrAdd) numExceeded++;

            int cmdRPN = 92;
            loop(_num)
            {
               // cmdN
               mp <= lazyAddRPNParam(ins, cmdRPN, bFindOrAdd);
               if(true == bFindOrAdd)
               {
                  numAdded++;
                  mp.ui_style = NT_CEL.STYLE_LETTER;
                  mp.ui_range = NT_CEL.RANGE_0_127;
               }
               else if(maybe == bFindOrAdd) numExceeded++;

               // argN
               mp <= lazyAddRPNParam(ins, cmdRPN+1, bFindOrAdd);
               if(true == bFindOrAdd)
               {
                  numAdded++;
                  mp.ui_style = NT_CEL.STYLE_HEX;
                  mp.ui_range = NT_CEL.RANGE_0_255;
               }
               else if(maybe == bFindOrAdd) numExceeded++;

               // Next cmd/arg pair
               cmdRPN += 2;
            }

            handleParamsChanged();
            editSelectedParameter();

            parent_node.undoEndNested("import_ptfx_params");

            if(0 == numExceeded)
               Global.Print("importptfx: "+numAdded+" added");
            else
               Global.Warning("importptfx: "+numAdded+" added, "+numExceeded+" skipped due to max param limit");

         } // if tel
      }
   }

   // <ui_handle.png>
   protected method handleImportAudioRPNs() {

      // RPN#87 (smp_peak), RPN#90 (smp_uid)

      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         NT_PatternView pv <= parent_editor.pattern_view;
         NT_TEL tel <= pv.getCurrentTrackLayout();

         parent_node.undoBeginNested("import_audio_params");
         parent_node.undoTouchNodeState();

         int numAdded = 0;
         int numExceeded = 0;
         Boolean bFindOrAdd;
         NT_MIDIParam *mp;

         if(null != tel)
         {
            // Modify CTL_PC cel to display 0..$FF hex (RPN smp_uid)
            tel.lazyAddOrUpdateCelForCtlById(NT_Defs.CTL_PC,
                                             NT_CEL.STYLE_HEX,
                                             NT_CEL.RANGE_0_255
                                             );

            // RPN#87 (smp_peak)
            mp <= lazyAddRPNParam(ins, 87, bFindOrAdd);
            if(true == bFindOrAdd)
            {
               numAdded++;
               mp.ui_style = NT_CEL.STYLE_BAR16;
               mp.ui_range = NT_CEL.RANGE_0_255;
            }
            else if(maybe == bFindOrAdd) numExceeded++;

            // Enable audio instrument mode
            ins.setEnableAudio(maybe/*=send RPN smp_uid*/);

            if(null == ins.out_device)
            {
               // Prefer "vst_h" device (index=7) for audio clips
               ins.setOutDevice(MIDI.GetVSTOutDeviceByIdx(STConfig.preferred_audio_dev_idx));
            }

            handleParamsChanged();
            editSelectedParameter();
            editSelectedInstrument();

            parent_node.undoEndNested("import_audio_params");

            if(0 == numExceeded)
               Global.Print("importaudioparams: "+numAdded+" added");
            else
               Global.Warning("importaudioparams: "+numAdded+" added, "+numExceeded+" skipped due to max param limit");

         } // if tel
      }
   }

   // <ui_handle.png>
   protected method handleImportParamsFromCtlTags() {

      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         int numUpdated = 0;
         int numAdded = 0;
         int numExceeded = 0;

         parent_node.undoBeginNested("import_ctltag_params");
         parent_node.undoTouchNodeState();

         CtlTagEntry *entry;

         foreach entry in current_song.ctltag_entries
         {
            if(@(entry.mm_event.dev) == @(ins.out_device))
            {
               if(ins.midi_channel == (entry.mm_event.dev_ch))
               {
                  trace "xxx importctltags: tag_name=\""+entry.tag_name+"\"";
                  NT_MIDIParam mp <= ins.findParamForMidiMapEvent(entry.mm_event);
                  if(null != mp)
                  {
                     if(!mp.b_name_edited)
                     {
                        if(mp.name != entry.tag_name)
                        {
                           mp.name = entry.tag_name;
                           numUpdated++;
                        }
                     }
                  }
                  else
                  {
                     mp <= createNewParam(-1, true/*bQuiet*/);
                     if(null != mp)
                     {
                        mp.initFromMIDIMapEvent(ins, entry.mm_event, false/*bForceDevCh*/);
                        mp.name = entry.tag_name;
                        numAdded++;
                     }
                     else
                     {
                        if(0 == numExceeded)
                           Global.Warning("importctltags: maximum number of params exceeded");
                        numExceeded++;
                     }
                  }
               } // if ch match
            } // dev match
         } // foreach ctltag entry

         handleParamsChanged();
         editSelectedParameter();

         parent_node.undoEndNested("import_ctltag_params");

         if(0 == numExceeded)
            Global.Print("importctltags: "+numAdded+" added, "+numUpdated+" updated");
         else
            Global.Warning("importctltags: "+numAdded+" added, "+numUpdated+" updated, "+numExceeded+" skipped due to max param limit");

      } // if ins

      // (note) LALT may have set focus to popupmenubar
      UI.SetKeyboardFocus(tv_params);
   }

   // <ui_handle.png>
   protected =replay= method handleImportParamsFromProfile1() {

      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         // Show import dialog
         MIDISynthProfile msp <= ins.getMIDISynthProfile();
         if(null != msp)
         {
            if(null == dlg_importmsp)
            {
               dlg_importmsp <= new ImportSynthProfileDialog;
               dlg_importmsp.init();
            }
            dlg_importmsp.showMSP(msp, ins.out_device, ins.midi_channel, this);
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleImportParamsFromProfile2() {

      NT_Instrument ins <= getSelectedInstrument();

      if(null != ins)
      {
         parent_node.undoBeginNested("import_msp_params");
         parent_node.undoTouchNodeState();

         int numUpdated = 0;
         int numAdded = 0;
         int numExceeded = 0;

         local PointerArray selectedAliases <= dlg_importmsp.getSelectedAliases();
         MIDISynthProfileCtlAlias *alias;
         local MIDIMapEvent mmEv;
         mmEv.dev <= ins.out_device;
         mmEv.dev_ch = ins.midi_channel;

         NT_PatternView pv <= parent_editor.pattern_view;
         NT_TEL tel <= pv.getCurrentTrackLayout();

         foreach alias in selectedAliases
         {
            mmEv.type = alias.type;
            mmEv.ext_type = alias.nr;

            // switch(alias.type)
            NT_MIDIParam mp <= ins.findParamForMidiMapEvent(mmEv);
            if(null == mp)
            {
               mp <= createNewParam(-1, true/*bQuiet*/);
               if(null != mp)
               {
                  mp.initFromMIDIMapEvent(ins, mmEv, false/*bForceDevCh*/);
                  mp.ui_style = alias.cel_style;
                  mp.ui_range = alias.cel_range;

                  switch(alias.type)
                  {
                     case MIDIMapDefs.TYPE_CC:
                        if(0 != alias.nr_lo)
                        {
                           mp.msblsb_mode = NT_MIDIParam.MSBLSB_BOTH;
                           mp.cc_lsb_id = alias.nr_lo;
                        }
                        break;

                     case MIDIMapDefs.TYPE_RPN:
                     case MIDIMapDefs.TYPE_NRPN:
                        mp.b_scale14bit = (alias.max > 255);
                        break;
                  }

                  tel.lazyAddOrUpdateCelForCtlById(NT_Defs.CTL_USR + mp.id,
                                                   mp.ui_style,
                                                   mp.ui_range
                                                   );

                  autogenParamNameInt(ins, mp);
                  numAdded++;
               }
               else
               {
                  numExceeded++;
               }
            }
         }

         tel.calcCursorExtents();
         handleParamsChanged();
         editSelectedParameter();

         parent_node.undoEndNested("import_msp_params");

         if(0 == numExceeded)
            Global.Print("importprofile: "+numAdded+" added");
         else
            Global.Warning("importprofile: "+numAdded+" added, "+numExceeded+" skipped due to max param limit");

         parent_editor.pattern_view.queueRedrawAll();
      }
   }

   // <method.png>
   public virtual layoutHierarchy(local boolean _bInvalidateSizeCaches, local boolean _bLayoutFinal) {
      XMLForm::layoutHierarchy(_bInvalidateSizeCaches, _bLayoutFinal);

      // Fix table y offset
      tv_instruments.centerRow();
   }

   // <ui_mouse.png>
   public virtual onMouseClick(MouseEvent _ev) : boolean {
      if(_ev.isRightButton())
      {
         if(tp_instr.isMouseOverWithin())
         {
            showCtlClipboardInstrMenu(false/*bFocusFirst*/);
         }
         else if(tp_params.isMouseOverWithin())
         {
            showCtlClipboardParamsMenu(false/*bFocusFirst*/);
         }
         return true;
      }
      return false;
   }

   // <ui_kbd.png>
   public virtual onTriadKey(Key _k) : boolean {
      switch(_k.pressed)
      {
         case 'c':
            returnToPatternView();
            return true;

         case 'd':
            if(null == getSelectedInstrument())
            {
               createNewInstrument(tm_instruments.getCursorIndex());
            }
            else
            {
               createNewInstrument(-1);
            }
            return true;

         case 'b':
            deleteSelectedParam();
            return true;

         case 's':
            if(null == getSelectedParameter())
            {
               createNewParam(tm_params.getCursorIndex(), false/*bQuiet*/);
            }
            else
            {
               createNewParam(-1, false/*bQuiet*/);
            }
            return true;

         case 'w':
            cloneSelectedParam();
            return true;

         case 'v':
            confirmDeleteSelectedInstrument();
            return true;
      }

      return false;
   }

   // <ui_kbd.png>
   public virtual onTriadKeyTimeout() {
      Dialogs.ShowTriadKeyHelpDialog("lctrl-x ..",
"
          b         :   Delete selected parameter
          c         :   Close dialog
          d         :   New instrument
          l         :   Load (custom) instrument(s)
          s         :   Create new parameter
          v         :   Delete selected instrument
          w         :   Clone selected parameter
"
                                    ,
                                    this);
      return true;
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      if(VMOD_LCTRL == _k.mod)
      {
         switch(_k.pressed)
         {
            case 'c':
               if(pn_allinstr.hierarchyHasKeyboardFocus())
               {
                  copyInstrumentToClipboard();
               }
               else if(pn_curinstr.hierarchyHasKeyboardFocus())
               {
                  copyParamToClipboard();
               }
               return true;

            case 'v':
               if(pn_allinstr.hierarchyHasKeyboardFocus())
               {
                  pasteInstrumentClipboard();
               }
               else if(pn_curinstr.hierarchyHasKeyboardFocus())
               {
                  pasteParamClipboard();
               }
               return true;
         }
      }

      // // trace "[>>>] NT_InstrumentView: _k.mod="+_k.mod+" _k.modAlt()="+_k.modAlt();

      switch(_k.pressed)
      {
         case 'i':
         case VKEY_INSERT:
            if(_k.modAlt())
               handleImportParamsFromCtlTags();
            else if(_k.modCtrl())
            {
               if(_k.modShift())
                  handleImportParamsFromProfile1();
               else
                  handleInstrSmpImport(false/*bUIDOnly*/);
            }
            else if(pn_allinstr.hierarchyHasKeyboardFocus())
            {
               if(_k.modShift())
               {
                  cloneSelectedInstrument();
               }
               else if(_k.modNone())
               {
                  createNewInstrument(-1);
               }
            }
            else if(pn_curinstr.hierarchyHasKeyboardFocus())
            {
               if(_k.modShift())
               {
                  cloneSelectedParam();
               }
               else if(_k.modNone())
               {
                  createNewParam(tm_params.getCursorIndex(), false/*bQuiet*/);
               }
            }
            return true;

         case VKEY_DELETE:
            if(_k.modNone())
            {
               if(pn_allinstr.hierarchyHasKeyboardFocus())
               {
                  confirmDeleteSelectedInstrument();
               }
               else if(pn_curinstr.hierarchyHasKeyboardFocus())
               {
                  deleteSelectedParam();
               }
            }
            return true;

            // '1'..'4': with or without modifier keys
         case '1':
            UI.SetKeyboardFocus(tv_instruments);
            tv_instruments.redraw();
            return true;

         case '2':
            tf_instr_name.onTabFocus();
            return true;

         case '3':
            UI.SetKeyboardFocus(tv_params);
            tv_params.redraw();
            return true;

         case '4':
            tf_param_name.onTabFocus();
            return true;

         case '5':
            if(null != getSelectedParameter())
            {
               UI.SetKeyboardFocus(cm_param_type);
            }
            return true;

         case 'a':
            if(_k.modNone())
            {
               if(tv_instruments.hierarchyHasKeyboardFocus())
               {
                  showInstrumentsContextMenu(true/*bFocusFirst*/);
               }
               else if(tv_params.hierarchyHasKeyboardFocus())
               {
                  showParamsContextMenu(true/*bFocusFirst*/);
               }
            }
            return true;

         case 'k':
            parent_editor.cmd_track_editsound();
            return true;

         case VKEY_RIGHT:
            if(_k.modNone())
            {
               if(tv_instruments.hasKeyboardFocus())
               {
                  b_new_instr_tabcycle_list = false;
                  if(null != getSelectedInstrument())
                  {
                     UI.SetKeyboardFocus(tv_params);
                     tv_params.redraw();
                  }
                  return true;
               }
               else if(tv_params.hasKeyboardFocus())
               {
                  b_new_instr_tabcycle_list = false;
                  if(null != getSelectedParameter())
                  {
                     tf_param_name.onTabFocus();
                     return true;
                  }
               }
            }
            break;

         case VKEY_LEFT:
            if(_k.modNone())
            {
               if(tv_params.hasKeyboardFocus())
               {
                  b_new_instr_tabcycle_list = false;
                  UI.SetKeyboardFocus(tv_instruments);
                  tv_instruments.redraw();
                  return true;
               }
               else if(tv_instruments.hasKeyboardFocus())
               {
                  b_new_instr_tabcycle_list = false;
                  tv_instruments.focusPreviousTabCycleMember(false/*bLocal*/);
                  return true;
               }
            }
            break;
      }

      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();
      StringAction *sac;

      // // trace "[dbg] NT_InstrumentView::consumeAction: acName="+acName+" ap="+#(ap);

      switch(@(ap))
      {
         case @(bt_instr_new):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               cloneSelectedInstrument();
            }
            else
            {
               createNewInstrument(-1);
            }
            return true;

         case @(bt_instr_new_learn):
            toggleInstrNewLearn();
            return true;

         case @(bt_instr_delete):
            confirmDeleteSelectedInstrument();
            return true;

         case @(bt_instr_copy):
            copyInstrumentToClipboard();
            return true;

         case @(bt_instr_paste):
            pasteInstrumentClipboard();
            return true;

         case @(tv_instruments):
         {
            if(TableView.ACTION_ROWCLICKED == acName)
            {
               if(b_select && (null != getSelectedInstrument())) // only hide if selected instrument exists, otherwise create a new one
               {
                  // Select current instrument
                  returnToPatternView();
               }
               else
               {
                  if(null == getSelectedInstrument())
                  {
                     createNewInstrument(tm_instruments.getCursorIndex());
                  }
                  else
                  {
                     editSelectedInstrument();
                  }
               }
               return true;
            }
            else if(TableView.ACTION_ROWSELECTED == acName)
            {
               parent_editor.keyJazzSelectInstrument(tm_instruments.getCursorIndex(), false/*bMakeVisible*/, false/*bQuiet*/);
               handleInstrumentSelected();
               trySelectParamForCurrentCel();
            }
            else if(TableView.ACTION_SHOWCONTEXTMENU == acName)
            {
               showInstrumentsContextMenu(tv_instruments.b_contextmenu_kbd/*bFocusFirst*/);
            }
         }
         return true;

            // Instrument editing (general):
         case @(pm_instr):
            Global.Debug2("NT_InstrumentView::consumeAction: pm_instr acName="+acName);
            if(PopupMenu.IsFocusAction(_action))
               return true;

            if(acName <= "ctltagentry_")
            {
               createInstrumentFromCtlTagEntry(int(acName.replace("ctltagentry_", "")));
               return true;
            }

            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close instrument menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "new":
                  createNewInstrument(tm_instruments.getCursorIndex());
                  return true;

               case "clone":
                  cloneSelectedInstrument();
                  return true;

               case "delete":
                  confirmDeleteSelectedInstrument();
                  return true;
            }
            return true;

         case @(pm_ctlclipboard_instr):
            Global.Debug2("NT_InstrumentView::consumeAction: pm_ctlclipboard_instr acName="+acName);
            if(PopupMenu.IsFocusAction(_action))
               return true;

            if(acName <= "ctltagentry_")
            {
               initFromCtlTagEntryInstr(int(acName.replace("ctltagentry_", "")));
               return true;
            }

            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close Ctl.Clipboard instrument menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "copyctl_a":
                  handleCopyCtlInstr(false/*bClipboardB*/);
                  return true;

               case "copyctl_b":
                  handleCopyCtlInstr(true/*bClipboardB*/);
                  return true;

               case "pastectl_a":
                  handlePasteCtlInstr(false/*bClipboardB*/);
                  return true;

               case "pastectl_b":
                  handlePasteCtlInstr(true/*bClipboardB*/);
                  return true;
            }
            return true;

         case @(tf_instr_name):
            handleInstrNameChanged((TextField.ACTION_TEXTEDITED == acName)/*bNameEdited*/);
            if(TextField.ACTION_TEXTENTERED == acName)
               refocusInstruments();
            return true;

         case @(cm_instr_dev):
            handleInstrDevChanged();
            return true;

         case @(cm_instr_ch):
            handleInstrChChanged();
            return true;

         case @(fp_instr_pitchbend):
            handleInstrPitchbendChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusInstruments();
            return true;

         case @(cb_instr_pbreset):
            handleInstrPitchbendResetChanged();
            return true;

         case @(cb_instr_mono):
            handleInstrMonoChanged();
            return true;

         case @(cb_instr_audio):
            handleInstrAudioChanged();
            return true;

         case @(fp_instr_smpuid):
            handleInstrSmpUIDChanged();
            return true;

         case @(bt_instr_smpimport):
            handleInstrSmpImport( (Button.ACTION_HOLD_CLICK == acName)/*bUIDOnly*/ );
            return true;

         case @(dlg_importsmp):
            if(NT_ImportSampleDialog.ACTION_IMPORT == acName)
            {
               handleInstrSmpImport2();
            }
            refocusInstruments();
            return true;

         case @(cm_instr_dev):
            handleInstrDevChanged();
            return true;

         case @(bt_instr_io_learn):
            toggleInstrIOLearn();
            return true;

         case @(fp_instr_bank_lsb):
            handleInstrBankLSBChanged(-1);
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusInstruments();
            return true;

         case @(cb_instr_bank_lsb):
            handleInstrBankLSBSendChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusInstruments();
            return true;

         case @(fp_instr_bank_msb):
            handleInstrBankMSBChanged(-1);
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusInstruments();
            return true;

         case @(cb_instr_bank_msb):
            handleInstrBankMSBSendChanged();
            return true;

         case @(fp_instr_program):
            handleInstrProgramChanged(-1);
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusInstruments();
            return true;

         case @(cb_instr_program):
            handleInstrProgramSendChanged();
            return true;

         case @(cb_instr_program_shift):
            handleInstrProgramShiftChanged();
            return true;

         case @(bt_instr_program_learn):
            toggleInstrProgramLearn();
            return true;

            // Instrument Parameters:
         case @(pm_ctlclipboard_params):
            Global.Debug2("NT_InstrumentView::consumeAction: pm_ctlclipboard_params acName="+acName);
            if(PopupMenu.IsFocusAction(_action))
               return true;

            if(acName <= "ctltagentry_")
            {
               initFromCtlTagEntryParam(int(acName.replace("ctltagentry_", "")));
               return true;
            }

            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close Ctl.Clipboard parameter menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "copyctl_a":
                  handleCopyCtlParam(false/*bClipboardB*/);
                  return true;

               case "copyctl_b":
                  handleCopyCtlParam(true/*bClipboardB*/);
                  return true;

               case "pastectl_a":
                  handlePasteCtlParam(false/*bClipboardB*/);
                  return true;

               case "pastectl_b":
                  handlePasteCtlParam(true/*bClipboardB*/);
                  return true;
            }
            return true;

         case @(bt_param_new):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               cloneSelectedParam();
            }
            else
            {
               createNewParam(-1, false/*bQuiet*/);
            }
            return true;

         case @(bt_param_new_learn):
            toggleParamNewLearn();
            return true;

         case @(bt_param_delete):
            deleteSelectedParam();
            return true;

         case @(bt_param_copy):
            copyParamToClipboard();
            return true;

         case @(bt_param_paste):
            pasteParamClipboard();
            return true;

         case @(tv_params):
            if(TableView.ACTION_ROWCLICKED == acName)
            {
               handleEditOrCreateParameter();
            }
            else if(TableView.ACTION_ROWSELECTED == acName)
            {
               editSelectedParameter();
            }
            else if(TableView.ACTION_SHOWCONTEXTMENU == acName)
            {
               showParamsContextMenu(tv_params.b_contextmenu_kbd/*bFocusFirst*/);
            }
            return true;

         case @(pm_params):
            Global.Debug("pm_params acName="+acName);
            if(PopupMenu.IsFocusAction(_action))
               return true;

            if(acName <= "ctltagentry_")
            {
               createParamFromFromCtlTagEntry(int(acName.replace("ctltagentry_", "")));
               return true;
            }

            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close params context menu.");
                  UI.SetKeyboardFocus(tv_params);
                  return true;

               case "copyctl_a":
                  handleCopyCtlParam(false/*bClipboardB*/);
                  return true;

               case "copyctl_b":
                  handleCopyCtlParam(true/*bClipboardB*/);
                  return true;

               case "pastectl_a":
                  handlePasteCtlParam(false/*bClipboardB*/);
                  return true;

               case "pastectl_b":
                  handlePasteCtlParam(true/*bClipboardB*/);
                  return true;

               case "import_perfctl_0":
                  handleImportPerfCtlParams(0);
                  return true;

               case "import_perfctl_1":
                  handleImportPerfCtlParams(1);
                  return true;

               case "import_perfctl_2":
                  handleImportPerfCtlParams(2);
                  return true;

               case "import_perfctl_3":
                  handleImportPerfCtlParams(3);
                  return true;

               case "import_perfctl_4":
                  handleImportPerfCtlParams(4);
                  return true;

               case "import_perfctl_5":
                  handleImportPerfCtlParams(5);
                  return true;

               case "import_ctltag":
                  handleImportParamsFromCtlTags();
                  return true;

               case "import_profile":
                  handleImportParamsFromProfile1();
                  return true;

               case "import_ptfx_1":
                  handleImportPTFX(1);
                  return true;

               case "import_ptfx_2":
                  handleImportPTFX(2);
                  return true;

               case "import_ptfx_3":
                  handleImportPTFX(3);
                  return true;

               case "import_ptfx_4":
                  handleImportPTFX(4);
                  return true;

               case "import_audio":
                  handleImportAudioRPNs();
                  return true;
            }
            return true;

         case @(dlg_importmsp):
            if(ImportSynthProfileDialog.ACTION_IMPORT == acName)
            {
               handleImportParamsFromProfile2();
            }
            return true;

            // Current Parameter:
         case @(tf_param_name):
            if(TextField.ACTION_CURSORLEFT == acName)
            {
               UI.SetKeyboardFocus(tv_params);
               tv_params.redraw();
            }
            else if(TextField.ACTION_CURSORRIGHT == acName)
            {
               return false;
            }
            else
            {
               handleParamNameChanged(TextField.ACTION_TEXTENTERED == acName);
               if(TextField.ACTION_TEXTENTERED == acName)
                  refocusParams();
            }
            return true;

         case @(bt_param_io_learn):
            toggleParamIOLearn();
            return true;

         case @(cm_param_type):
            handleParamTypeChanged(false/*bUpdateOnly*/);
            return true;

         case @(cm_param_forceddev):
            handleParamForcedDevChanged(false/*bQuiet*/);
            return true;

         case @(cm_param_forcedch):
            handleParamForcedChChanged(false/*bQuiet*/);
            return true;

         case @(cm_param_style):
            handleParamStyleChanged();
            return true;

         case @(cm_param_range):
            handleParamRangeChanged();
            return true;

         case @(cm_param_msblsb):
            handleParamMSBLSBChanged();
            return true;

         case @(cb_param_scale14bit):
            handleParamScale14BitChanged();
            return true;

         case @(fp_param_recusr_rpn_min):
            handleParamRecUsrRPNMinChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusParams();
            return true;

         case @(fp_param_recusr_rpn_ctr):
            handleParamRecUsrRPNCtrChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusParams();
            return true;

         case @(fp_param_recusr_rpn_max):
            handleParamRecUsrRPNMaxChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusParams();
            return true;

         case @(cb_param_recusr_asym):
            handleParamRecUsrAsymChanged();
            return true;

         case @(fp_param_reset):
            handleParamResetChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusParams();
            return true;

         case @(cb_param_reset_select):
            handleParamResetSelectChanged();
            return true;

         case @(cb_param_reset_note):
            handleParamResetNoteChanged();
            return true;

         case @(bt_param_reset_learn):
            toggleParamResetLearn();
            return true;

         case @(cm_param_cc_msb_id):
            handleParamCCMSBIdChanged();
            return true;

         case @(cm_param_cc_lsb_id):
            handleParamCCLSBIdChanged();
            return true;

         case @(cm_param_rpn_alias_id):
            handleParamRPNAliasIdChanged();
            return true;

         case @(fp_param_rpn_id):
            handleParamRPNIdChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusParams();
            return true;

         case @(cm_param_nrpn_alias_id):
            handleParamNRPNAliasIdChanged();
            return true;

         case @(fp_param_nrpn_id):
            handleParamNRPNIdChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusParams();
            return true;

         case @(fp_param_remote_instance_id):
            handleParamRemoteInstanceIdChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusParams();
            return true;

         case @(bt_param_remote_query_instance_ids):
            handleParamRemoteQueryInstanceIds();
            return true;

         case @(fp_param_remote_param_idx):
            handleParamRemoteParamIdxChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusParams();
            return true;

         case @(bt_param_remote_query_params):
            handleParamRemoteQueryParams();
            return true;

         case @(cm_param_remote_params):
            fp_param_remote_param_idx.setValue(cm_param_remote_params.getSelectedOption());
            handleParamRemoteParamIdxChanged();
            Global.Print("Remote param idx is "+fp_param_remote_param_idx.getFloatValue()+" (\""+cm_param_remote_params.getSelectedOptionName()+"\")");
            return true;

         case @(fp_param_remote_out_min):
            handleParamRemoteOutMinChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusParams();
            return true;

         case @(fp_param_remote_out_max):
            handleParamRemoteOutMaxChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusParams();
            return true;

         case @(cb_param_remote_relative):
            handleParamRemoteRelativeChanged();
            return true;
      }

      switch(acName)
      {
         case TA_MIDI_LEARN:
            handleMIDILearnTimer();
            return true;

         case TA_SELECT_KEYJAZZ_INSTR:
            selectKeyJazzInstr(b_queue_select_keyjazz_instr_makevisible/*bCenter*/);
            b_queue_select_keyjazz_instr_makevisible = false;
            return true;

         case TA_RELAYOUT:
            relayout();  // update split position
            UI.RedrawAll();
            return true;
      }

      return XMLForm::consumeAction(_action);
   }
}
