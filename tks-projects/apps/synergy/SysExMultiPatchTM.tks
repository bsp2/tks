// ----
// ---- file   : SysExMultiPatchTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2019 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 29Jan2019
// ---- changed: 
// ----          
// ----
// ----

module MSysExMultiPatchTM;

use namespace ui;
use namespace st2;


// <class.png>
class SysExMultiPatchDO {
   int patch_idx;

   String bank_name;
   String program_name;


   // <method_init.png>
   public method init(int _patchIdx, String _bankName, String _programName) {
      patch_idx    = _patchIdx;
      bank_name    = _bankName;
      program_name = _programName;
   }
}


// <class.png>
class SysExMultiPatchTM : TableModel {

   define int COL_PATCHIDX = 0;
   define int COL_BANK     = 1;
   define int COL_PROGRAM  = 2;

   PointerArray entries;  // SysExMultiPatchDO instances


   // <method_init.png>
   public method rebuildEntries(EditMIDISynthForm _synthform, String _filter, int _prefPatchIdx) : int {
      // returns prefPatchRow or -1
      int retPrefPatchRow = -1;

      local SysExMultiPatchDO *en;
      entries.free();

      local StringArray filterWords <= _filter.splitSpace(true);
      // trace "xxx filterWords="+#(filterWords);

      int patchIdx = 0;
      int bankIdx = 0;

      local StringArray bankNames <= _synthform.getBankNames();

      loop(_synthform.num_banks)
      {
         local StringArray programNames <= _synthform.getProgramNames(bankIdx);
         int programIdx = 0;

         loop(_synthform.num_programs_per_bank)
         {
            en <= new SysExMultiPatchDO;
            en.init(patchIdx, bankNames.get(bankIdx), programNames.get(programIdx));

            if(Utils.MatchFilterString(filterWords, en.bank_name)     ||
               Utils.MatchFilterString(filterWords, en.program_name)
               )
            {
               if(patchIdx == _prefPatchIdx)
                  retPrefPatchRow = entries.numElements;
               entries.add(#(deref en));
            }

            programIdx++;
            patchIdx++;
         } // loop programs

         bankIdx++;
      } // loop banks

      return retPrefPatchRow;
   }

   // <method_get.png>
   public virtual getNumColumns() : int {
      return 3;
   }
   
   // <method_get.png>
   public virtual getColumnCaption(int _col) : String {
      return ["PatchNr", "Bank", "Program"][_col];
   }

   // <method_get.png>
   public virtual getNumRows() : int {
      return entries.numElements;
   }

   // <method_get.png>
   // public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
   //    Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);
   //    lb.setFontByName("big7");
   //    return lb;
   // }

   // <method_get.png>
   public virtual getCellCaption(int _col, _row) : String {
      SysExMultiPatchDO en <= entries.get(_row);
      if(null != en)
      {
         switch(_col)
         {
            case COL_PATCHIDX:
               return String(en.patch_idx + 1);

            case COL_BANK:
               return en.bank_name;

            case COL_PROGRAM:
               return en.program_name;
         }
      }
   }

   // <method_get.png>
   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_PATCHIDX:
            return 40;

         case COL_BANK:
            return 140;

         case COL_PROGRAM:
            return 240;
      }
   }

   // <method_get.png>
   public virtual getPreferredColumnWidth(int _col) : int {
      return getMinimumColumnWidth(_col);
   }

}
