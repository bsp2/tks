// ----
// ---- file   : NT_TapModeDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2016-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- changed: 30Sep2016, 02Oct2016, 11Oct2016, 29Oct2017, 30Nov2018, 03Dec2018, 04Oct2023
// ----          30Oct2023
// ----
// ----
// ----
module MNT_TapModeDialog;

use namespace ui;
use namespace st2;


class NT_TapModeDialog extends Dialog {

   protected NodeTrackerEditor *editor;

   protected XMLForm *xfm;

   protected ComboBox   *cm_source_pat;
   protected FloatParam *fp_step_resolution;
   protected CheckBox   *cb_step_resolution_lock;
   protected CheckBox   *cb_advance;
   protected CheckBox   *cb_select;
   protected CheckBox   *cb_alltracks;
   protected CheckBox   *cb_beatsync;
   protected CheckBox   *cb_resetsourcestep;

   protected Button     *bt_ok;
   protected CheckBox   *cb_keepenabled;
   protected Button     *bt_cancel;

   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("NT_TapModeDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      cm_source_pat.setOptions(Node.patnr_options);

      initWindow(xfm,
                 "Tap Mode",
                 100, 100,
                 640, 240
                 );

      resizeToMinimum();

      return true;
   }

   public virtual isPopup() : boolean {
      return true;
   }

   public virtual isModal():boolean {
      return true;
   }

   public virtual isResizable() : boolean {
      return false;
   }

   public method run(NodeTrackerEditor _editor) {
      editor <= _editor;

      showCentered();
   }

   public virtual postShow() {
      Dialog::postShow();

      updateWidgetsFromNode(editor);

      UI.SetKeyboardFocus(bt_ok);
   }

   public method updateWidgetsFromNode(NodeTrackerEditor _editor) {

      cm_source_pat.setSelectedOption(_editor.tracker_node.last_copied_pattern_nr);

      if(!cb_step_resolution_lock.isSelected())
      {
         fp_step_resolution.setValue(_editor.pattern_view.step_resolution);
      }

      cb_advance        .setSelected(_editor.tracker_node.b_tap_mode_advance);
      cb_select         .setSelected(_editor.tracker_node.b_tap_mode_select);
      cb_alltracks      .setSelected(_editor.tracker_node.b_tap_mode_alltracks);
      cb_beatsync       .setSelected(_editor.tracker_node.b_tap_mode_beatsync);
      cb_resetsourcestep.setSelected(_editor.tracker_node.b_tap_mode_resetsourcestep);
      cb_keepenabled    .setSelected(_editor.tracker_node.b_tap_mode_keepenabled);
   }

   // <ui_kbd.png>
   public virtual onTriadKeyTimeout() {

      Dialogs.ShowTriadKeyHelpDialog("lctrl-x ..",
"
          t
          c         :   Close dialog
"
                                    ,
                                    this);
      return true;
   }

   // <ui_kbd.png>
   public virtual onTriadKey(Key _k) : boolean {
      // No unicode events generated if lctrl- is still pressed
      int key = _k.pressed;
      boolean r = false;
      loop(2) // first pass for raw keycode, second pass for unicode
      {
         // US (reference) keyboard layout (raw keycodes)
         switch(key)
         {
            case 't':
            case 'c':
               hide();
               r = true; break;

            default:
               r = maybe; break;
         }

         if(true == r)
         {
            return true;
         }
         else if(maybe == r)
         {
            Global.Print("");
         }

         // see above
         key = _k.unicode;
      }

      return false;
   }

   public virtual onKey(Key _k) : boolean {

      if(VKEY_ESCAPE == _k.code)
      {
         hide();
         return true;
      }

      return false;
   }

   public method getSourcePatNr() : byte {
      return cm_source_pat.getSelectedOption();
   }

   public method getStepResolution() : int {
      return fp_step_resolution.getFloatValue();
   }

   public method getEnableAdvance() : boolean {
      return cb_advance.isSelected();
   }

   public method getEnableSelect() : boolean {
      return cb_select.isSelected();
   }

   public method getEnableAllTracks() : boolean {
      return cb_alltracks.isSelected();
   }

   public method getEnableBeatSync() : boolean {
      return cb_beatsync.isSelected();
   }

   public method getEnableResetSourceStep() : boolean {
      return cb_resetsourcestep.isSelected();
   }

   public method getKeepEnabled() : boolean {
      return cb_keepenabled.isSelected();
   }

   public virtual consumeAction(Action _action) : boolean {

      switch(@(_action.getActionProvider()))
      {
         case @(bt_ok):
            hide();
            editor.cmd_edit_tapmode_start();
            return true;

         case @(bt_cancel):
            hide();
            return true;
      }

      return Dialog::consumeAction(_action);
   }
}
