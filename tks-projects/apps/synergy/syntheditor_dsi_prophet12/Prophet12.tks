// ----
// ---- file   : Prophet12.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2017-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- created: 16Feb2017
// ---- changed: 17Feb2017, 18Feb2017, 19Feb2017, 20Feb2017, 21Feb2017, 22Feb2017, 23Feb2017
// ----          24Feb2017, 25Feb2017, 26Feb2017, 15Apr2017, 07May2017, 09May2017, 23May2017
// ----          26May2017, 27May2017, 07Jun2017, 26Jun2017, 25Aug2017, 01Sep2017, 07Sep2017
// ----          08Sep2017, 10Sep2017, 13Sep2017, 04Jan2018, 07Mar2018, 26Jan2019, 28Jan2019
// ----          17Nov2019, 09Jul2021, 13Jul2021, 14Nov2022, 24Nov2022, 11Feb2023, 21Sep2023
// ----          08Oct2023, 21Oct2023, 31Jan2025, 29Mar2025, 30May2025
// ----
// ----
// ----
module MProphet12;

use namespace ui;
use namespace st2;


boolean b_recv_patch_names = true;
boolean b_solo = false;
boolean b_mute_a = false;
boolean b_mute_b = false;
boolean b_force_send_after_mute = false;
boolean b_mirror = false;
boolean b_debug = false;
boolean b_debug_proxy = true;
boolean b_clear_usr_banks = false;

EditMIDISynthFormProphet12 *editor_singleton;  // hack to be able to load/save UI state in profile

P12_RandOscDialog *dlg_randosc;


// <class.png>
class P12_WheelLabel : Label {

   public virtual onMouse(MouseEvent _ev) : boolean {
      Label::onMouse(_ev);

      if(_ev.wheelDown())
      {
         editor_singleton.selectNextPatch();
         return true;
      }

      if(_ev.wheelUp())
      {
         editor_singleton.selectPreviousPatch();
         return true;
      }

      return false;
   }

}

// <class.png>
class Prophet12_Defs {

   static StringArray category_names = [
      "None",        //  0
      "Bass",        //  1
      "Lead",        //  2
      "Keys",        //  3
      "Pad",         //  4
      "Brass",       //  5
      "Stab",        //  6
      "Bell",        //  7
      "Organ",       //  8
      "Drone",       //  9
      "Atmo",        // 10
      "FX",          // 11
      "Bassdrum",    // 12
      "Tom",         // 13
      "Snaredrum",   // 14
      "Clap",        // 15
      "Hihat",       // 16
      "Percussion",  // 17
      "Other"        // 18
                                        ];

   static StringArray osc_shape_names = [
      "Off",           // 0
      "Sawtooth",      // 1
      "Pulse",         // 2
      "Triangle",      // 3
      "Sine",          // 4
      "Tines",         // 5
      "Mellow",        // 6
      "Church",        // 7
      "Muted",         // 8
      "Nasal",         // 9
      "Boing",         // 10
      "Gothic",        // 11
      "Ahhh",          // 12
      "Shrill",        // 13
      "Ohhhh",         // 14
      "Buzzzz",        // 15
      "Meh",           // 16
      "Red Noise",     // 17
      "White Noise",   // 18
      "Violet Noise"   // 19
                                     ];

   static IntArray osc_shape_colors = [
      #1f000000,  // 0:Off
      #1f00ff00,  // 1:Sawtooth
      #1f00ffff,  // 2:Pulse
      #1f007f7f,  // 3:Triangle
      #10005f5f,  // 4:Sine
      #1f7f7f00,  // 5:Tines
      #1f7f7f00,  // 6:Mellow
      #1fafaf00,  // 7:Church
      #1fafaf00,  // 8:Muted
      #1fffff00,  // 9:Nasal
      #1fffff00,  // 10:Boing
      #1fffff00,  // 11:Gothic
      #1fffff00,  // 12:Ahhh
      #1fffff00,  // 13:Shrill
      #1fffff00,  // 14:Ohhhh
      #1fffff00,  // 15:Buzzzz
      #1f7f7f00,  // 16:Meh
      #5fef8060,  // 17:Red Noise
      #5fefa060,  // 18:White Noise
      #5fefc060   // 19:Violet Noise
                                     ];

   static StringArray osc_shapelr_names = [
      "Tines",         // 0
      "Mellow",        // 1
      "Church",        // 2
      "Muted",         // 3
      "Nasal",         // 4
      "Boing",         // 5
      "Gothic",        // 6
      "Ahhh",          // 7
      "Shrill",        // 8
      "Ohhhh",         // 9
      "Buzzzz",        // 10
      "Meh"            // 11
                                     ];

   static StringArray mod_source_names = [
      "Off",                // 0
      "Osc 1",              // 1
      "Osc 2",              // 2
      "Osc 3",              // 3
      "Osc 4",              // 4
      "LFO 1",              // 5
      "LFO 2",              // 6
      "LFO 3",              // 7
      "LFO 4",              // 8
      "Lowpass Env",        // 9
      "VCA Env",            // 10
      "Env 3",              // 11
      "Env 4",              // 12
      "Pitchbend",          // 13
      "Mod Wheel",          // 14
      "Slider 1 Position",  // 15
      "Slider 2 Position",  // 16
      "Slider 1 Pressure",  // 17
      "Slider 2 Pressure",  // 18
      "Aftertouch",         // 19
      "Breath; CC#2",       // 20
      "Foot Pedal; CC#4",   // 21
      "Expression; CC#11",  // 22
      "Velocity",           // 23
      "Note Number",        // 24
      "Random",             // 25
      "DC",                 // 26
      "Audio Out"           // 27
                                          ];

   static StringArray mod_dest_names = [
      "Off",                // 0
      "Osc 1 Freq",         // 1
      "Osc 2 Freq",         // 2
      "Osc 3 Freq",         // 3
      "Osc 4 Freq",         // 4
      "Osc All Freq",       // 5
      "Osc 1 Level",        // 6
      "Osc 2 Level",        // 7
      "Osc 3 Level",        // 8
      "Osc 4 Level",        // 9
      "Osc 1 Shape Mod",    // 10
      "Osc 2 Shape Mod",    // 11
      "Osc 3 Shape Mod",    // 12
      "Osc 4 Shape Mod",    // 13
      "Osc All Shape Mod",  // 14
      "Sub Osc Level",      // 15
      "Osc 1 FM",           // 16
      "Osc 2 FM",           // 17
      "Osc 3 FM",           // 18
      "Osc 4 FM",           // 19
      "Osc All FM",         // 20
      "Osc 1 AM",           // 21
      "Osc 2 AM",           // 22
      "Osc 3 AM",           // 23
      "Osc 4 AM",           // 24
      "Osc All AM",         // 25
      "Osc 1 Slop",         // 26
      "Osc 2 Slop",         // 27
      "Osc 3 Slop",         // 28
      "Osc 4 Slop",         // 29
      "Osc All Slop",       // 30
      "Air",                // 31
      "Girth",              // 32
      "Hack",               // 33
      "Decimate",           // 34
      "Drive",              // 35
      "LPF Cutoff",         // 36
      "LPF Resonance",      // 37
      "HPF Cutoff",         // 38
      "HPF Resonance",      // 39
      "VCA",                // 40
      "Pan",                // 41
      "Pan Spread",         // 42
      "Feedback Amount",    // 43
      "Feedback Tuning",    // 44
      "Delay 1 Amount",     // 45
      "Delay 2 Amount",     // 46
      "Delay 3 Amount",     // 47
      "Delay 4 Amount",     // 48
      "Delay 1 Time",       // 49
      "Delay 2 Time",       // 50
      "Delay 3 Time",       // 51
      "Delay 4 Time",       // 52
      "Delay All Time",     // 53
      "Delay 1 Feedback",   // 54
      "Delay 2 Feedback",   // 55
      "Delay 3 Feedback",   // 56
      "Delay 4 Feedback",   // 57
      "Delay 1 Pan",        // 58
      "Delay 2 Pan",        // 59
      "Delay 3 Pan",        // 60
      "Delay 4 Pan",        // 61
      "LFO 1 Freq",         // 62
      "LFO 2 Freq",         // 63
      "LFO 3 Freq",         // 64
      "LFO 4 Freq",         // 65
      "LFO 1 Amount",       // 66
      "LFO 2 Amount",       // 67
      "LFO 3 Amount",       // 68
      "LFO 4 Amount",       // 69
      "LPF Env Amount",     // 70
      "Amp Env Amount",     // 71
      "Env 3 Amount",       // 72
      "Env 4 Amount",       // 73
      "LPF Env Attack",     // 74
      "Amp Env Attack",     // 75
      "Env 3 Attack",       // 76
      "Env 4 Attack",       // 77
      "All Env Attack",     // 78
      "LPF Env Decay",      // 79
      "Amp Env Decay",      // 80
      "Env 3 Decay",        // 81
      "Env 4 Decay",        // 82
      "All Env Decay",      // 83
      "LPF Env Release",    // 84
      "Amp Env Release",    // 85
      "Env 3 Release",      // 86
      "Env 4 Release",      // 87
      "All Env Release",    // 88
      "Mod 1 Amount",       // 89
      "Mod 2 Amount",       // 90
      "Mod 3 Amount",       // 91
      "Mod 4 Amount",       // 92
      "Mod 5 Amount",       // 93
      "Mod 6 Amount",       // 94
      "Mod 7 Amount",       // 95
      "Mod 8 Amount",       // 96
      "Mod 9 Amount",       // 97
      "Mod 10 Amount",      // 98
      "Mod 11 Amount",      // 99
      "Mod 12 Amount",      // 100
      "Mod 13 Amount",      // 101
      "Mod 14 Amount",      // 102
      "Mod 15 Amount",      // 103
      "Mod 16 Amount"       // 104
                                         ];

   static StringArray uni_modes = [
      "1 Voice",    // 0
      "2 Voices",   // 1
      "3 Voices",   // 2
      "4 Voices",   // 3
      "5 Voices",   // 4
      "6 Voices",   // 5
      "7 Voices",   // 6
      "8 Voices",   // 7
      "9 Voices",   // 8
      "10 Voices",  // 9
      "11 Voices",  // 10
      "12 Voices"   // 11
                                   ];


   static StringArray uni_keyassign_modes = [
      "Low Note",     // 0
      "Low Retrig",   // 1
      "High Note",    // 2
      "High Retrig",  // 3
      "Last Note",    // 4
      "Last Retrig"   // 5
                                   ];


   static StringArray glide_modes = [
      "Fix Rate",              // 0
      "Fix Rate A (legato)",   // 1
      "Fix Time",              // 2
      "Fix Time A (legato)"    // 3
                                   ];

   static StringArray lfo_sync_mode_names = [
      "32nd triplet",    // 0
      "32nd",            // 1
      "16th Triplet",    // 2
      "16th",            // 3
      "8th Triplet",     // 4
      "8th",             // 5
      "Quarter Triplet", // 6
      "1 Quarter",       // 7
      "Dotted Quarter",  // 8
      "Half",            // 9
      "3 Quarters",      // 10
      "4 Quarters",      // 11
      "6 Quarters",      // 12
      "8 Quarters",      // 13
      "16 Quarters",     // 14
      "32 Quarters"      // 15
                                   ];

   static StringArray lfo_shape_names = [
      "Triangle",          // 0
      "Reverse Sawtooth",  // 1
      "Sawtooth",          // 2
      "Square",            // 3
      "Pulse 1",           // 4
      "Pulse 2",           // 5
      "Pulse 3",           // 6
      "Random"             // 7
                                   ];

   static StringArray delay_time_names = [
      "0.9556 ms",   // 0
      "1.0124 ms",   // 1
      "1.0726 ms",   // 2
      "1.1364 ms",   // 3
      "1.2039 ms",   // 4
      "1.2755 ms",   // 5
      "1.3514 ms",   // 6
      "1.4317 ms",   // 7
      "1.5169 ms",   // 8
      "1.6071 ms",   // 9
      "1.7026 ms",   // 10
      "1.8039 ms",   // 11
      "1.9111 ms",   // 12
      "2.0248 ms",   // 13
      "2.1452 ms",   // 14
      "2.2727 ms",   // 15
      "2.4079 ms",   // 16
      "2.5511 ms",   // 17
      "2.7027 ms",   // 18
      "2.8635 ms",   // 19
      "3.0337 ms",   // 20
      "3.2141 ms",   // 21
      "3.4052 ms",   // 22
      "3.6077 ms",   // 23
      "3.8223 ms",   // 24
      "4.0495 ms",   // 25
      "4.2903 ms",   // 26
      "4.5455 ms",   // 27
      "4.8157 ms",   // 28
      "5.1021 ms",   // 29
      "5.4055 ms",   // 30
      "5.7269 ms",   // 31
      "6.0675 ms",   // 32
      "6.4282 ms",   // 33
      "6.8105 ms",   // 34
      "7.2155 ms",   // 35
      "7.6445 ms",   // 36
      "8.0991 ms",   // 37
      "8.5807 ms",   // 38
      "9.0909 ms",   // 39
      "9.6315 ms",   // 40
      "10.2042 ms",  // 41
      "10.8110 ms",  // 42
      "11.4538 ms",  // 43
      "12.1349 ms",  // 44
      "12.8565 ms",  // 45
      "13.6210 ms",  // 46
      "14.4309 ms",  // 47
      "15.2890 ms",  // 48
      "16.1982 ms",  // 49
      "17.1614 ms",  // 50
      "18.1818 ms",  // 51
      "19.2630 ms",  // 52
      "20.4084 ms",  // 53
      "21.6219 ms",  // 54
      "22.9077 ms",  // 55
      "24.2698 ms",  // 56
      "25.7130 ms",  // 57
      "27.2419 ms",  // 58
      "28.8618 ms",  // 59
      "30.5781 ms",  // 60
      "32.3963 ms",  // 61
      "34.3227 ms",  // 62
      "36.3636 ms",  // 63
      "38.5259 ms",  // 64
      "40.8168 ms",  // 65
      "43.2439 ms",  // 66
      "45.8153 ms",  // 67
      "48.5396 ms",  // 68
      "51.4259 ms",  // 69
      "54.4839 ms",  // 70
      "57.7237 ms",  // 71
      "61.1561 ms",  // 72
      "64.7926 ms",  // 73
      "68.6454 ms",  // 74
      "72.7273 ms",  // 75
      "77.0519 ms",  // 76
      "81.6336 ms",  // 77
      "86.4878 ms",  // 78
      "91.6306 ms",  // 79
      "97.0793 ms",  // 80
      "102.8519 ms", // 81
      "108.9678 ms", // 82
      "115.4474 ms", // 83
      "122.3122 ms", // 84
      "124.7166 ms", // 85
      "129.8653 ms", // 86
      "135.0140 ms", // 87
      "140.1627 ms", // 88
      "145.3115 ms", // 89
      "150.4602 ms", // 90
      "155.6089 ms", // 91
      "160.7576 ms", // 92
      "165.9064 ms", // 93
      "171.0551 ms", // 94
      "176.2038 ms", // 95
      "181.3525 ms", // 96
      "186.5013 ms", // 97
      "191.6500 ms", // 98
      "196.7987 ms", // 99
      "201.9474 ms", // 100
      "207.0962 ms", // 101
      "212.2449 ms", // 102
      "217.3936 ms", // 103
      "222.5424 ms", // 104
      "227.6911 ms", // 105
      "232.8398 ms", // 106
      "237.9885 ms", // 107
      "243.1373 ms", // 108
      "248.2860 ms", // 109
      "253.4347 ms", // 110
      "258.5834 ms", // 111
      "263.7322 ms", // 112
      "268.8809 ms", // 113
      "274.0296 ms", // 114
      "279.1783 ms", // 115
      "284.3271 ms", // 116
      "289.4758 ms", // 117
      "294.6245 ms", // 118
      "299.7732 ms", // 119
      "304.9220 ms", // 120
      "310.0707 ms", // 121
      "315.2194 ms", // 122
      "320.3681 ms", // 123
      "325.5169 ms", // 124
      "330.6656 ms", // 125
      "335.8143 ms", // 126
      "340.9631 ms", // 127
      "346.1118 ms", // 128
      "351.2605 ms", // 129
      "356.4092 ms", // 130
      "361.5580 ms", // 131
      "366.7067 ms", // 132
      "371.8554 ms", // 133
      "377.0041 ms", // 134
      "382.1529 ms", // 135
      "387.3016 ms", // 136
      "392.4503 ms", // 137
      "397.5990 ms", // 138
      "402.7478 ms", // 139
      "407.8965 ms", // 140
      "413.0452 ms", // 141
      "418.1939 ms", // 142
      "423.3427 ms", // 143
      "428.4914 ms", // 144
      "433.6401 ms", // 145
      "438.7888 ms", // 146
      "443.9376 ms", // 147
      "449.0863 ms", // 148
      "454.2350 ms", // 149
      "459.3838 ms", // 150
      "464.5325 ms", // 151
      "469.6812 ms", // 152
      "474.8299 ms", // 153
      "479.9787 ms", // 154
      "485.1274 ms", // 155
      "490.2761 ms", // 156
      "495.4248 ms", // 157
      "500.5736 ms", // 158
      "505.7223 ms", // 159
      "510.8710 ms", // 160
      "516.0197 ms", // 161
      "521.1685 ms", // 162
      "526.3172 ms", // 163
      "531.4659 ms", // 164
      "536.6146 ms", // 165
      "541.7634 ms", // 166
      "546.9121 ms", // 167
      "552.0608 ms", // 168
      "557.2096 ms", // 169
      "562.3583 ms", // 170
      "567.5070 ms", // 171
      "572.6557 ms", // 172
      "577.8045 ms", // 173
      "582.9532 ms", // 174
      "588.1019 ms", // 175
      "593.2506 ms", // 176
      "598.3994 ms", // 177
      "603.5481 ms", // 178
      "608.6968 ms", // 179
      "613.8455 ms", // 180
      "618.9943 ms", // 181
      "624.1430 ms", // 182
      "629.2917 ms", // 183
      "634.4404 ms", // 184
      "639.5892 ms", // 185
      "644.7379 ms", // 186
      "649.8866 ms", // 187
      "655.0353 ms", // 188
      "660.1841 ms", // 189
      "665.3328 ms", // 190
      "670.4815 ms", // 191
      "675.6303 ms", // 192
      "680.7790 ms", // 193
      "685.9277 ms", // 194
      "691.0764 ms", // 195
      "696.2252 ms", // 196
      "701.3739 ms", // 197
      "706.5226 ms", // 198
      "711.6713 ms", // 199
      "716.8201 ms", // 200
      "721.9688 ms", // 201
      "727.1175 ms", // 202
      "732.2662 ms", // 203
      "737.4150 ms", // 204
      "742.5637 ms", // 205
      "747.7124 ms", // 206
      "752.8611 ms", // 207
      "758.0099 ms", // 208
      "763.1586 ms", // 209
      "768.3073 ms", // 210
      "773.4560 ms", // 211
      "778.6048 ms", // 212
      "783.7535 ms", // 213
      "788.9022 ms", // 214
      "794.0510 ms", // 215
      "799.1997 ms", // 216
      "804.3484 ms", // 217
      "809.4971 ms", // 218
      "814.6459 ms", // 219
      "819.7946 ms", // 220
      "824.9433 ms", // 221
      "830.0920 ms", // 222
      "835.2408 ms", // 223
      "840.3895 ms", // 224
      "845.5382 ms", // 225
      "850.6869 ms", // 226
      "855.8357 ms", // 227
      "860.9844 ms", // 228
      "866.1331 ms", // 229
      "871.2818 ms", // 230
      "876.4306 ms", // 231
      "881.5793 ms", // 232
      "886.7280 ms", // 233
      "891.8768 ms", // 234
      "897.0255 ms", // 235
      "902.1742 ms", // 236
      "907.3229 ms", // 237
      "912.4717 ms", // 238
      "917.6204 ms", // 239
      "922.7691 ms", // 240
      "927.9178 ms", // 241
      "933.0666 ms", // 242
      "938.2153 ms", // 243
      "943.3640 ms", // 244
      "948.5127 ms", // 245
      "953.6615 ms", // 246
      "958.8102 ms", // 247
      "963.9589 ms", // 248
      "969.1076 ms", // 249
      "974.2564 ms", // 250
      "979.4051 ms", // 251
      "984.5538 ms", // 252
      "989.7025 ms", // 253
      "994.8513 ms", // 254
      "1000.0000 ms" // 255
                                    ];

   static StringArray delay_sync_mode_names = [
      "64th",            // 0
      "32nd",            // 1
      "Dotted 32nd",     // 2
      "16th",            // 3
      "Dotted 16th",     // 4
      "8th",             // 5
      "Dotted 8th",      // 6
      "Quarter",         // 7
      "Dotted Quarter",  // 8
      "Half",            // 9
      "Dotted Half",     // 10
      "Whole"            // 11
                                               ];

   define int RAND_ALL            = 0;
   define int RAND_ALL_ENABLE     = 1;
   define int RAND_MUSICAL        = 2;
   define int RAND_MUSICAL_ENABLE = 3;
}


// <class.png>
class Prophet12_Osc : Prophet12_Defs {

   byte  idx;  // 0..3
   short nrpn_base;

   boolean b_enable;     // Virtual: use "off" shape when not enabled

   byte    shape;        // 0..19
   byte    shape_mod;    // 0..127 ==> -63..64
   byte    shape_left;   // 0..11
   byte    shape_right;  // 0..11
   boolean b_sync;       // Enable hard sync
   boolean b_keyfollow;  //
   boolean b_wavereset;  //
   byte    pitch;        // midi note
   byte    fine;         // 0..100 => -50..50
   byte    slop;         // 0..127
   byte    glide;        // 0..127
   byte    fm;           // 0..255
   boolean b_fm_ext;     // increase FM amount range via mod matrix (up to 4x)
   byte    am;           // 0..255
   boolean b_am_ext;     // increase AM amount range via mod matrix (up to 4x)
   byte    level;        // 0..127


   // <method_init.png>
   public method loadInit(byte _idx) {
      idx = _idx;
      nrpn_base = (idx * 18);

      b_enable = (0 == _idx);

      shape       = (0 == idx) ? 4 : 0;
      shape_mod   = 64;
      shape_left  = 1;
      shape_right = 11;
      b_sync      = false;
      b_keyfollow = true;
      b_wavereset = false;
      pitch       = 3*12;
      fine        = 50;
      slop        = 0;
      glide       = 0;
      fm          = 0;
      b_fm_ext    = false;
      am          = 0;
      b_am_ext    = false;
      level       = (0 == _idx) ? 100 : 0;
   }

   // <method_init.png>
   public method initFromRaw(Buffer raw, int off) {

      b_enable = true;
      b_fm_ext = false;
      b_am_ext = false;

      shape        = raw.peekI8(off + 12);
      shape_mod    = raw.peekI8(off + 28);
      shape_left   = raw.peekI8(off + 16);
      shape_right  = raw.peekI8(off + 24);
      b_sync       = raw.peekI8(off + 52);
      b_keyfollow  = raw.peekI8(off + 56);
      b_wavereset  = raw.peekI8(off + 60);
      pitch        = raw.peekI8(off +  0);
      fine         = raw.peekI8(off +  4);
      slop         = raw.peekI8(off + 44);
      glide        = raw.peekI8(off + 48);
      fm           = raw.peekI8(off + 32);
      am           = raw.peekI8(off + 36);
      level        = raw.peekI8(off +  8);
   }

   // <method_init.png>
   public method loadRandom(int _mode) {

      if(_mode & 1)
         b_enable = true;
      else
         b_enable = rand(1+1);

      shape       = (_mode&1/*allenable*/) ? (1+rand(18+1)) : (rand(19+1));
      shape_mod   = rand(127+1);
      shape_left  = rand(11+1);
      shape_right = rand(11+1);
      b_sync      = rand(1+1);

      b_keyfollow = rand(1+1);
      b_keyfollow = rand(1+1);
      b_wavereset = rand(1+1);
      if(_mode >= RAND_MUSICAL)
      {
         pitch    = rand(8+1);
         pitch = 12*2 + (pitch/2)*12 + 7*(pitch&1);
      }
      else
         pitch    = rand(120+1);
      if(_mode >= RAND_MUSICAL)
         fine        = rand(100+1);
      else
         fine        = rand(30+1) + 35;
      if(_mode >= RAND_MUSICAL)
         slop        = rand(40+1);
      else
         slop        = rand(127+1);
      glide       = rand(127+1);
      fm          = rand(255 + 3*127); ////rand(8*127) - 4*127;
      b_fm_ext    = rand(1+1);
      am          = rand(255 + 3*127); ////rand(8*127) - 4*127;
      b_am_ext    = rand(1+1);
      if(_mode >= RAND_MUSICAL)
         level       = 40 + rand(60+1);
      else
         level       = rand(100+1);
   }

   // <method_init.png>
   public method blend(Prophet12_Osc _l, Prophet12_Osc _r, float _factor, boolean _bAllowDetune) {

      // trace "xxx blend<osc>: factor="+_factor;

      b_enable    = round(mathLerpf(_l.b_enable,   _r.b_enable, _factor));

      shape       = round(mathLerpf(_l.shape,       _r.shape,       _factor));
      // trace "xxx  ==> shape="+shape+"  (l="+_l.shape+" r="+_r.shape+")";

      shape_mod   = round(mathLerpf(_l.shape_mod,   _r.shape_mod,   _factor));
      shape_left  = round(mathLerpf(_l.shape_left,  _r.shape_left,  _factor));
      shape_right = round(mathLerpf(_l.shape_right, _r.shape_right, _factor));
      b_sync      = round(mathLerpf(_l.b_sync,      _r.b_sync,      _factor));
      b_keyfollow = round(mathLerpf(_l.b_keyfollow, _r.b_keyfollow, _factor));
      b_wavereset = round(mathLerpf(_l.b_wavereset, _r.b_wavereset, _factor));

      if(maybe == _bAllowDetune)
      {
         if(_factor >= 0.5)
         {
            pitch = _r.pitch;
            fine  = _r.fine;
         }
         else
         {
            pitch = _l.pitch;
            fine  = _l.fine;
         }
      }
      else if(true == _bAllowDetune)
      {
         pitch       = round(mathLerpf(_l.pitch,       _r.pitch,       _factor));
         fine        = round(mathLerpf(_l.fine,        _r.fine,        _factor));
      }

      slop        = round(mathLerpf(_l.slop,        _r.slop,        _factor));
      glide       = round(mathLerpf(_l.glide,       _r.glide,       _factor));
      fm          = round(mathLerpf(_l.fm,          _r.fm,          _factor));
      b_fm_ext    = _l.b_fm_ext || _r.b_fm_ext;
      am          = round(mathLerpf(_l.am,          _r.am,          _factor));
      b_am_ext    = _l.b_am_ext || _r.b_am_ext;
      level       = round(mathLerpf(_l.level,       _r.level,       _factor));
   }

   // <method.png>
   public method sendShape(local EditMIDISynthFormProphet12 _editor,
                           local Prophet12_Program          _layer,
                           local boolean _bProxy
                           ) {
      _editor.queueNRPN(nrpn_base + 3 + _layer.layer_idx*512,
                        (b_enable &&
                         ((0 == _layer.layer_idx && !b_mute_a) || ((1 == _layer.layer_idx) && !b_mute_b))
                         )
                        ? shape : 0,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendShapeMod(local EditMIDISynthFormProphet12 _editor,
                              local Prophet12_Program          _layer,
                              local boolean _bProxy
                              ) {
      _editor.queueNRPN(nrpn_base + 4 + _layer.layer_idx*512,
                        shape_mod,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendShapeLeft(local EditMIDISynthFormProphet12 _editor,
                               local Prophet12_Program          _layer,
                               local boolean _bProxy
                               ) {
      _editor.queueNRPN(nrpn_base + 5 + _layer.layer_idx*512,
                        shape_left,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendShapeRight(local EditMIDISynthFormProphet12 _editor,
                                local Prophet12_Program          _layer,
                                local boolean _bProxy
                                ) {
      _editor.queueNRPN(nrpn_base + 6 + _layer.layer_idx*512,
                        shape_right,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendSyncEnable(local EditMIDISynthFormProphet12 _editor,
                                local Prophet12_Program          _layer,
                                local boolean _bProxy
                                ) {
      _editor.queueNRPN(nrpn_base + 11 + _layer.layer_idx*512,
                        b_sync,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendKeyFollow(local EditMIDISynthFormProphet12 _editor,
                               local Prophet12_Program          _layer,
                               local boolean _bProxy
                               ) {
      _editor.queueNRPN(nrpn_base + 12 + _layer.layer_idx*512,
                        b_keyfollow,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendWaveReset(local EditMIDISynthFormProphet12 _editor,
                               local Prophet12_Program          _layer,
                               local boolean _bProxy
                               ) {
      _editor.queueNRPN(nrpn_base + 13 + _layer.layer_idx*512,
                        b_wavereset,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendEnable(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) {
      sendShape(_editor, _layer, _bProxy);
   }

   // <method.png>
   public method sendPitch(local EditMIDISynthFormProphet12 _editor,
                           local Prophet12_Program          _layer,
                           local boolean _bProxy
                           ) {
      _editor.queueNRPN(nrpn_base + 0 + _layer.layer_idx*512,
                        pitch,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendFine(local EditMIDISynthFormProphet12 _editor,
                          local Prophet12_Program          _layer,
                          local boolean _bProxy
                          ) {
      _editor.queueNRPN(nrpn_base + 1 + _layer.layer_idx*512,
                        fine,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendSlop(local EditMIDISynthFormProphet12 _editor,
                          local Prophet12_Program          _layer,
                          local boolean _bProxy
                          ) {
      _editor.queueNRPN(nrpn_base + 9 + _layer.layer_idx*512,
                        slop,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendGlide(local EditMIDISynthFormProphet12 _editor,
                           local Prophet12_Program          _layer,
                           local boolean _bProxy
                           ) {
      _editor.queueNRPN(nrpn_base + 10 + _layer.layer_idx*512,
                        glide,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendLevel(local EditMIDISynthFormProphet12 _editor,
                           local Prophet12_Program          _layer,
                           local boolean _bProxy
                           ) {
      _editor.queueNRPN(nrpn_base + 2 + _layer.layer_idx*512,
                        level,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendFM(local EditMIDISynthFormProphet12 _editor,
                        local Prophet12_Program          _layer,
                        local boolean _bProxy
                        ) : boolean {

      // trace "xxx OSC::sendFM: fm="+fm+" b_fm_ext="+b_fm_ext;

      return _layer.updateParamExt8x4(_editor,
                                      1 + ((idx+1)&3) /*modSrc*/,
                                      b_enable ? (1 + idx) : 0/*modDest*/,
                                      nrpn_base + 7 + _layer.layer_idx*512,
                                      Prophet12_ModEntry.AUTOGEN_OSC1_FMEXT_0 + (3*idx),
                                      b_fm_ext ? fm : mathClampi(fm, 0, 255),
                                      _bProxy
                                      );
   }

   // <method.png>
   public method sendAM(local EditMIDISynthFormProphet12 _editor,
                        local Prophet12_Program          _layer,
                        local boolean _bProxy
                        ) : boolean {

      return _layer.updateParamExt8x4(_editor,
                                      1 + ((idx+1)&3) /*modSrc*/,
                                      b_enable ? (6 + idx) : 0/*modDest*/,
                                      nrpn_base + 8 + _layer.layer_idx*512,
                                      Prophet12_ModEntry.AUTOGEN_OSC1_AMEXT_0 + (3*idx),
                                      b_am_ext ? am : mathClampi(am, 0, 255),
                                      _bProxy
                                      );
   }

   // <method.png>
   public method send(EditMIDISynthFormProphet12 _editor,
                      Prophet12_Program          _layer,
                      boolean _bProxy
                      ) {
      sendShape      (_editor, _layer, _bProxy);
      sendShapeMod   (_editor, _layer, _bProxy);
      sendShapeLeft  (_editor, _layer, _bProxy);
      sendShapeRight (_editor, _layer, _bProxy);
      sendSyncEnable (_editor, _layer, _bProxy);
      sendKeyFollow  (_editor, _layer, _bProxy);
      sendWaveReset  (_editor, _layer, _bProxy);
      sendPitch      (_editor, _layer, _bProxy);
      sendFine       (_editor, _layer, _bProxy);
      sendSlop       (_editor, _layer, _bProxy);
      sendGlide      (_editor, _layer, _bProxy);
      sendLevel      (_editor, _layer, _bProxy);
      sendFM         (_editor, _layer, _bProxy);
      sendAM         (_editor, _layer, _bProxy);
   }

   // <method.png>
   public method tryRecvNRPN(local short _nrpn, local short _val) : boolean {

      if( (nrpn_base + 3) == _nrpn)
      {
         shape = _val;
         b_enable = (0 != shape);
         return true;
      }

      if( (nrpn_base + 4) == _nrpn)
      {
         shape_mod = _val;
         return true;
      }

      if( (nrpn_base + 5) == _nrpn)
      {
         shape_left = _val;
         return true;
      }

      if( (nrpn_base + 6) == _nrpn)
      {
         shape_right = _val;
         return true;
      }

      if( (nrpn_base + 11) == _nrpn)
      {
         b_sync = _val;
         return true;
      }

      if( (nrpn_base + 12) == _nrpn)
      {
         b_keyfollow = _val;
         return true;
      }

      if( (nrpn_base + 13) == _nrpn)
      {
         b_wavereset = _val;
         return true;
      }

      if( (nrpn_base + 0) == _nrpn)
      {
         pitch = _val;
         return true;
      }

      if( (nrpn_base + 1) == _nrpn)
      {
         fine = _val;
         return true;
      }

      if( (nrpn_base + 9) == _nrpn)
      {
         slop = _val;
         return true;
      }

      if( (nrpn_base + 10) == _nrpn)
      {
         glide = _val;
         return true;
      }

      if( (nrpn_base + 2) == _nrpn)
      {
         level = _val;
         return true;
      }

      if( (nrpn_base + 7) == _nrpn)
      {
         fm = _val;
         b_fm_ext = false;
         return true;
      }

      if( (nrpn_base + 8) == _nrpn)
      {
         am = _val;
         b_am_ext = false;
         return true;
      }

      return false;
   }

   // <method.png>
   public method sendDiff(local Prophet12_Osc _o,
                          local EditMIDISynthFormProphet12 _editor,
                          local Prophet12_Program          _layer,
                          local boolean _bProxy
                          ) {

      if(shape != _o.shape)
      {
         _o.sendShape(_editor, _layer, _bProxy);
      }

      if(shape_mod != _o.shape_mod)
      {
         _o.sendShapeMod(_editor, _layer, _bProxy);
      }

      if(shape_left != _o.shape_left)
      {
         _o.sendShapeLeft(_editor, _layer, _bProxy);
      }

      if(shape_right != _o.shape_right)
      {
         _o.sendShapeRight(_editor, _layer, _bProxy);
      }

      if(b_sync != _o.b_sync)
      {
         _o.sendSyncEnable(_editor, _layer, _bProxy);
      }

      if(b_keyfollow != _o.b_keyfollow)
      {
         _o.sendKeyFollow(_editor, _layer, _bProxy);
      }

      if(b_wavereset != _o.b_wavereset)
      {
         _o.sendWaveReset(_editor, _layer, _bProxy);
      }

      if(pitch != _o.pitch)
      {
         _o.sendPitch(_editor, _layer, _bProxy);
      }

      if(fine != _o.fine)
      {
         _o.sendFine(_editor, _layer, _bProxy);
      }

      if(slop != _o.slop)
      {
         _o.sendSlop(_editor, _layer, _bProxy);
      }

      if(glide != _o.glide)
      {
         _o.sendGlide(_editor, _layer, _bProxy);
      }

      if(level != _o.level)
      {
         _o.sendLevel(_editor, _layer, _bProxy);
      }

      if(fm != _o.fm)
      {
         _o.sendFM(_editor, _layer, _bProxy);
      }

      if(am != _o.am)
      {
         _o.sendAM(_editor, _layer, _bProxy);
      }

      if(b_enable != _o.b_enable)
      {
         _o.sendEnable(_editor, _layer, _bProxy);
      }
   }

   // <method.png>
   public method copyFrom(Prophet12_Osc _o) {

      int origIdx = idx;
      int origNRPN = nrpn_base;

      yacOperatorAssign(_o);

      idx = origIdx;
      nrpn_base = origNRPN;
   }

   // <save.png>
   public method save(Stream ofs) {

      ofs.i16 = 1; // Version

      ofs.i8  = b_enable;

      ofs.i8  = shape;
      ofs.i8  = shape_mod;
      ofs.i8  = shape_left;
      ofs.i8  = shape_right;
      ofs.i8  = b_sync;
      ofs.i8  = b_keyfollow;
      ofs.i8  = b_wavereset;
      ofs.i8  = pitch;
      ofs.i8  = fine;
      ofs.i8  = slop;
      ofs.i8  = glide;
      ofs.i16 = fm;
      ofs.i8  = b_fm_ext;
      ofs.i16 = am;
      ofs.i8  = b_am_ext;
      ofs.i8  = level;
   }

   // <load.png>
   public method load(Stream ifs) : boolean {

      short ver = ifs.i16;

      if(ver >= 1)
      {
         b_enable    = ifs.b8;

         shape       = ifs.u8;
         shape_mod   = ifs.u8;
         shape_left  = ifs.u8;
         shape_right = ifs.u8;
         b_sync      = ifs.b8;
         b_keyfollow = ifs.b8;
         b_wavereset = ifs.b8;
         pitch       = ifs.u8;
         fine        = ifs.u8;
         slop        = ifs.u8;
         glide       = ifs.u8;
         fm          = ifs.s16;
         b_fm_ext    = ifs.b8;
         am          = ifs.s16;
         b_am_ext    = ifs.b8;
         level       = ifs.u8;

         return true;
      }
      else
      {
         trace "[---] Prophet12_Osc::load: invalid ver="+ver;
      }

      return false;
   }
}


// <class.png>
class Prophet12_Env : Prophet12_Defs {

   byte  idx;  // 0..3
   short nrpn_base;

   boolean b_enable;

   byte    delay;     // 0..127
   byte    attack;    // 0..127
   byte    decay;     // 0..127
   byte    sustain;   // 0..127
   byte    release;   // 0..127
   boolean b_repeat;
   byte    mod_dest;
   short   amount;        // 0..254 => -127..127
   boolean b_amount_ext;  // true= amount has range -381..635 => -508..508
   byte    vel_amount;    // 0..127
   byte    dcurve_ext;    // -127..127
   byte    rcurve_ext;    // -127..127


   // <method_init.png>
   public method loadInit(byte _idx) {
      idx = _idx;
      nrpn_base = 103 + (idx * 11);

      b_enable = true;

      delay        = 0;
      attack       = 2;
      decay        = 40;
      sustain      = 23;
      release      = 32;
      b_repeat     = false;
      mod_dest     = (0 == _idx) ? 40/*VCA*/ : (1 == _idx) ? 36/*LPFFreq*/ : 0;
      amount       = 127;
      b_amount_ext = false;
      vel_amount   = 0;
      dcurve_ext   = 0;
      rcurve_ext   = 0;
   }

   // <method_init.png>
   public method initFromRaw(Buffer raw, int off) {

      b_enable = true;
      b_amount_ext = false;

      delay       = raw.peekI8(off +  177 - 177);
      attack      = raw.peekI8(off +  181 - 177);
      decay       = raw.peekI8(off +  185 - 177);
      sustain     = raw.peekI8(off +  189 - 177);
      release     = raw.peekI8(off +  193 - 177);
      b_repeat    = raw.peekI8(off +  199 - 177);

      if(idx >= 2)
         mod_dest    = raw.peekI8(off +  196 - 178);

      if(0 == idx)
         amount      = raw.peekI8(off + 169 - 177);
      else if(1 == idx)
      {
         // trace "xxx read LPF amount from off="+ (off + 168 - 176);
         amount      = raw.peekI8(off + 168 - 176);
      }
      else
      {
         // trace "xxx read amount from off="+ (off + 170 - 178);
         amount      = raw.peekI8(off + 170 - 178);
      }

      // trace "xxx Prophet12_Env::initFromRaw: env["+idx+"] read amount="+amount+" from synth";

      if(0 == idx)
         vel_amount  = raw.peekI8(off + 173 - 177); // VCA
      else if(1 == idx)
         vel_amount  = raw.peekI8(off + 172 - 176); // LPF
      else
      {
         // trace "xxx read vel_amount["+idx+"] from off="+(off + 172 - 178);
         vel_amount  = raw.peekI8(off + 174 - (176+idx) + idx - 2);
      }

      dcurve_ext = 0;
      rcurve_ext = 0;
   }

   // <method_init.png>
   public method loadRandom(int _mode) {

      if(_mode&1)
         b_enable = true;
      else
         b_enable = rand(1+1);

      if(_mode >= RAND_MUSICAL)
         delay = rand(20+1);
      else
         delay       = rand(127+1);
      if(_mode >= RAND_MUSICAL)
         attack = rand(50+1);
      else
         attack      = rand(127+1);
      decay       = rand(127+1);
      sustain     = rand(127+1);
      release     = rand(127+1);
      b_repeat    = rand(1 + 1);
      mod_dest    = rand(104 + 1);
      amount      = (0 == idx) ? rand(127+3*127) : ((rand(8*127) - 4*127));
      b_amount_ext = rand(1+1);
      vel_amount  = rand(127+1);
      if(_mode >= RAND_MUSICAL)
      {
         dcurve_ext  = rand(30*2) - 30;
         rcurve_ext  = rand(30*2) - 30;
      }
      else
      {
         dcurve_ext  = rand(127*2) - 127;
         rcurve_ext  = rand(127*2) - 127;
      }
   }

   // <method_init.png>
   public method blend(Prophet12_Env _l, Prophet12_Env _r, float _factor, boolean _bModDest) {

      b_enable    = round(mathLerpf(_l.b_enable,   _r.b_enable, _factor));

      delay       = round(mathLerpf(_l.delay,       _r.delay,       _factor));
      attack      = round(mathLerpf(_l.attack,      _r.attack,      _factor));
      decay       = round(mathLerpf(_l.decay,       _r.decay,       _factor));
      sustain     = round(mathLerpf(_l.sustain,     _r.sustain,     _factor));
      release     = round(mathLerpf(_l.release,     _r.release,     _factor));
      b_repeat    = round(mathLerpf(_l.b_repeat,    _r.b_repeat,    _factor));

      if(false == _bModDest)
      {
         mod_dest     = (_factor < 0.5) ? _l.mod_dest : _r.mod_dest;
         amount       = (_factor < 0.5) ? _l.amount : _r.amount;
         b_amount_ext = _l.b_amount_ext || _r.b_amount_ext;
      }
      else if(true == _bModDest)
      {
         mod_dest     = round(mathLerpf(_l.mod_dest,    _r.mod_dest,    _factor));
         amount       = round(mathLerpf(_l.amount,      _r.amount,      _factor));
         b_amount_ext = _l.b_amount_ext || _r.b_amount_ext;
      }
      else if(maybe == _bModDest)
      {
         mod_dest     = (_factor < 0.5) ? _l.mod_dest : _r.mod_dest;
         amount       = round(mathLerpf(_l.amount,      _r.amount,      _factor));
         b_amount_ext = _l.b_amount_ext || _r.b_amount_ext;
      }

      vel_amount  = round(mathLerpf(_l.vel_amount,  _r.vel_amount,  _factor));
      dcurve_ext  = round(mathLerpf(_l.dcurve_ext,  _r.dcurve_ext,  _factor));
      rcurve_ext  = round(mathLerpf(_l.rcurve_ext,  _r.rcurve_ext,  _factor));
   }

   // <method.png>
   public method sendDelay(local EditMIDISynthFormProphet12 _editor,
                           local Prophet12_Program          _layer,
                           local boolean _bProxy
                           ) {
      _editor.queueNRPN(nrpn_base + 2 + _layer.layer_idx*512,
                        b_enable ? delay : 0,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendAttack(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) {
      _editor.queueNRPN(nrpn_base + 3 + _layer.layer_idx*512,
                        b_enable ? attack : 0,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendDecay(local EditMIDISynthFormProphet12 _editor,
                           local Prophet12_Program          _layer,
                           local boolean _bProxy
                           ) {
      _editor.queueNRPN(nrpn_base + 4 + _layer.layer_idx*512,
                        b_enable ? decay : 0,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendSustain(local EditMIDISynthFormProphet12 _editor,
                             local Prophet12_Program          _layer,
                             local boolean _bProxy
                             ) {
      _editor.queueNRPN(nrpn_base + 5 + _layer.layer_idx*512,
                        b_enable ? sustain : 0,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendRelease(local EditMIDISynthFormProphet12 _editor,
                             local Prophet12_Program          _layer,
                             local boolean _bProxy
                             ) {
      _editor.queueNRPN(nrpn_base + 6 + _layer.layer_idx*512,
                        b_enable ? release : 0,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendRepeat(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) {
      _editor.queueNRPN(nrpn_base + 7 + _layer.layer_idx*512,
                        b_enable ? b_repeat : 0,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendEnable(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) {
      sendDelay     (_editor, _layer, _bProxy);
      sendAttack    (_editor, _layer, _bProxy);
      sendDecay     (_editor, _layer, _bProxy);
      sendSustain   (_editor, _layer, _bProxy);
      sendRelease   (_editor, _layer, _bProxy);
      sendRepeat    (_editor, _layer, _bProxy);
      sendVelAmount (_editor, _layer, _bProxy);
   }

   // <method.png>
   public method sendModDest(local EditMIDISynthFormProphet12 _editor,
                             local Prophet12_Program          _layer,
                             local boolean _bProxy
                             ) {
      _editor.queueNRPN(nrpn_base + 8 + _layer.layer_idx*512,
                        mod_dest,
                        _bProxy
                        );
   }


   // <method.png>
   public method sendVelAmount(local EditMIDISynthFormProphet12 _editor,
                               local Prophet12_Program          _layer,
                               local boolean _bProxy
                               ) {
      _editor.queueNRPN(nrpn_base + 1 + _layer.layer_idx*512,
                        b_enable ? vel_amount : 0,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendAmount(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) : boolean {

      if(0 == idx)
      {
         return _layer.updateParamExt7x4(_editor,
                                         9 + 1/*modSrc*/,
                                         b_enable ? mod_dest : 0 /*modDst*/,
                                         nrpn_base + 0 + _layer.layer_idx*512,
                                         Prophet12_ModEntry.AUTOGEN_ENV1_AMOUNTEXT_0 + (3*idx),
                                         b_amount_ext ? amount : mathClampi(amount, 0, 127),
                                         _bProxy
                                         );
      }
      else
      {
         return _layer.updateParamExtN7x4(_editor,
                                          9 + ((1 == idx) ? 0 : idx) /*modSrc*/,
                                          b_enable ? mod_dest : 0,
                                          nrpn_base + 0 + _layer.layer_idx*512,
                                          Prophet12_ModEntry.AUTOGEN_ENV1_AMOUNTEXT_0 + (3*idx),
                                          (b_amount_ext ? amount : mathClampi(amount, 0, 254)) - 127,
                                          false/*bZeroIsMin*/,
                                          _bProxy
                                          );
      }
   }

   // <method.png>
   public method sendDCurve(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) : boolean {

      byte modSrc;
      byte modDst;

      if(0 == idx)
      {
         modSrc = 10; // VCA Env
         modDst = 80; // Amp Env Decay
      }
      else if(1 == idx)
      {
         modSrc = 9;  // VCF Env
         modDst = 79; // LPF Env Decay
      }
      else
      {
         modSrc = 11 + idx - 2;
         modDst = 81 + idx - 2;
      }

      return _layer.updateParamExt7x4ModOnly(_editor,
                                             modSrc,
                                             modDst,
                                             Prophet12_ModEntry.AUTOGEN_ENVDCURVEEXT_0 + idx,
                                             -dcurve_ext,
                                             _bProxy
                                             );
   }

   // <method.png>
   public method sendRCurve(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) : boolean {

      byte modSrc;
      byte modDst;

      if(0 == idx)
      {
         modSrc = 10; // VCA Env
         modDst = 85; // Amp Env Release
      }
      else if(1 == idx)
      {
         modSrc = 9;  // VCF Env
         modDst = 84; // LPF Env Release
      }
      else
      {
         modSrc = 11 + idx - 2;  // Env3/4
         modDst = 86 + idx - 2;  // Env3/4 Release
      }

      return _layer.updateParamExt7x4ModOnly(_editor,
                                             modSrc,
                                             modDst,
                                             Prophet12_ModEntry.AUTOGEN_ENVRCURVEEXT_0 + idx,
                                             -rcurve_ext,
                                             _bProxy
                                             );
   }

   // <method.png>
   public method send(EditMIDISynthFormProphet12 _editor,
                      Prophet12_Program          _layer,
                      boolean _bProxy
                      ) {
      sendDelay     (_editor, _layer, _bProxy);
      sendAttack    (_editor, _layer, _bProxy);
      sendDecay     (_editor, _layer, _bProxy);
      sendSustain   (_editor, _layer, _bProxy);
      sendRelease   (_editor, _layer, _bProxy);
      sendRepeat    (_editor, _layer, _bProxy);
      sendModDest   (_editor, _layer, _bProxy);
      sendVelAmount (_editor, _layer, _bProxy);
      sendAmount    (_editor, _layer, _bProxy);
      sendDCurve    (_editor, _layer, _bProxy);
      sendRCurve    (_editor, _layer, _bProxy);
   }

   // <method.png>
   public method tryRecvNRPN(local short _nrpn, local short _val) : boolean {

      if( (nrpn_base + 2) == _nrpn)
      {
         delay = _val;
         b_enable = true;
         return true;
      }

      if( (nrpn_base + 3) == _nrpn)
      {
         attack = _val;
         b_enable = true;
         return true;
      }

      if( (nrpn_base + 4) == _nrpn)
      {
         decay = _val;
         b_enable = true;
         return true;
      }

      if( (nrpn_base + 5) == _nrpn)
      {
         sustain = _val;
         b_enable = true;
         return true;
      }

      if( (nrpn_base + 6) == _nrpn)
      {
         release = _val;
         b_enable = true;
         return true;
      }

      if( (nrpn_base + 7) == _nrpn)
      {
         b_repeat = _val;
         b_enable = true;
         return true;
      }

      if( (nrpn_base + 8) == _nrpn)
      {
         mod_dest = _val;
         return true;
      }

      if( (nrpn_base + 0) == _nrpn)
      {
         amount = _val;
         b_amount_ext = false;
         return true;
      }

      if( (nrpn_base + 1) == _nrpn)
      {
         vel_amount = _val;
         return true;
      }

      return false;
   }

   // <method.png>
   public method sendDiff(local Prophet12_Env _o,
                          local EditMIDISynthFormProphet12 _editor,
                          local Prophet12_Program          _layer,
                          local boolean _bProxy
                          ) {

      if(b_enable != _o.b_enable)
      {
         _o.sendEnable(_editor, _layer, _bProxy);
      }

      if(delay != _o.delay)
      {
         _o.sendDelay(_editor, _layer, _bProxy);
      }

      if(attack != _o.attack)
      {
         _o.sendAttack(_editor, _layer, _bProxy);
      }

      if(decay != _o.decay)
      {
         _o.sendDecay(_editor, _layer, _bProxy);
      }

      if(sustain != _o.sustain)
      {
         _o.sendSustain(_editor, _layer, _bProxy);
      }

      if(release != _o.release)
      {
         _o.sendRelease(_editor, _layer, _bProxy);
      }

      if(b_repeat != _o.b_repeat)
      {
         _o.sendRepeat(_editor, _layer, _bProxy);
      }

      if(mod_dest != _o.mod_dest)
      {
         _o.sendModDest(_editor, _layer, _bProxy);
      }

      if(amount != _o.amount)
      {
         _o.sendAmount(_editor, _layer, _bProxy);
      }

      if(vel_amount != _o.vel_amount)
      {
         _o.sendVelAmount(_editor, _layer, _bProxy);
      }
   }

   // <method.png>
   public method copyFrom(Prophet12_Env _o) {

      int origIdx = idx;
      int origNRPN = nrpn_base;

      yacOperatorAssign(_o);

      idx = origIdx;
      nrpn_base = origNRPN;
   }

   // <save.png>
   public method save(Stream ofs) {

      ofs.i16 = 2; // Version

      ofs.i8  = b_enable;

      ofs.i8  = delay;
      ofs.i8  = attack;
      ofs.i8  = decay;
      ofs.i8  = sustain;
      ofs.i8  = release;
      ofs.i8  = b_repeat;
      ofs.i8  = mod_dest;
      ofs.i16 = amount;
      ofs.i8  = b_amount_ext;
      ofs.i8  = vel_amount;
      ofs.i8  = dcurve_ext;
      ofs.i8  = rcurve_ext;
   }

   // <load.png>
   public method load(Stream ifs) : boolean {

      short ver = ifs.i16;

      if(ver >= 1)
      {
         b_enable = ifs.b8;

         delay        = ifs.u8;
         attack       = ifs.u8;
         decay        = ifs.u8;
         sustain      = ifs.u8;
         release      = ifs.u8;
         b_repeat     = ifs.b8;
         mod_dest     = ifs.u8;
         amount       = ifs.s16;
         b_amount_ext = ifs.b8;
         vel_amount   = ifs.u8;

         if(ver >= 2)
         {
            dcurve_ext = ifs.s8;  // v2+
            rcurve_ext = ifs.s8;  // v2+
         }

         return true;
      }
      else
      {
         trace "[---] Prophet12_Env::load: invalid ver="+ver;
      }

      return false;
   }

}


// <class.png>
class Prophet12_LFO : Prophet12_Defs {

   byte  idx;  // 0..3
   short nrpn_base;

   boolean b_enable;

   byte    freq;         // 0..255
   byte    sync_mode;
   boolean b_sync;
   byte    shape;
   byte    slew_rate;    // 0..127
   byte    phase;        // 0..127
   boolean b_wavereset;
   byte    mod_dest;
   byte    amount;       // 0..127, or 0..254 when b_amount_ext is true
   byte    b_amount_ext; // Increase amount range via mod matrix


   // <method_init.png>
   public method loadInit(byte _idx) {

      idx = _idx;
      nrpn_base = 147 + (idx * 10);

      b_enable = true;

      freq         = 105;
      sync_mode    = 0;
      b_sync       = false;
      slew_rate    = 0;
      phase        = 0;
      b_wavereset  = false;
      mod_dest     = 0;
      amount       = 0;
      b_amount_ext = false;
   }

   // <method_init.png>
   public method initFromRaw(Buffer raw, int off) {

      b_enable = true;
      b_amount_ext = false;

      freq        = raw.peekI8(off +  128 - 128);
      sync_mode   = raw.peekI8(off +  132 - 128);
      b_sync      = raw.peekI8(off +  148 - 128);
      shape       = raw.peekI8(off +  136 - 128);
      slew_rate   = raw.peekI8(off +  156 - 128);
      phase       = raw.peekI8(off +  160 - 128);
      b_wavereset = raw.peekI8(off +  152 - 128);
      mod_dest    = raw.peekI8(off +  144 - 128);
      amount      = raw.peekI8(off +  140 - 128);
   }

   // <method_init.png>
   public method loadRandom(int _mode) {

      if(_mode&1)
         b_enable = true;
      else
         b_enable = rand(1+1);

      freq         = rand(255+1);
      sync_mode    = rand(15+1);
      b_sync       = rand(1+1);
      shape        = rand(7+1);
      slew_rate    = rand(127+1);
      phase        = rand(127+1);
      b_wavereset  = rand(1+1);
      mod_dest     = rand(104+1);
      amount       = rand(254+1);
      b_amount_ext = rand(1+1);
   }

   // <method_init.png>
   public method blend(Prophet12_LFO _l, Prophet12_LFO _r, float _factor, boolean _bModDest) {

      b_enable     = round(mathLerpf(_l.b_enable,     _r.b_enable,     _factor));

      freq         = round(mathLerpf(_l.freq,         _r.freq,         _factor));
      sync_mode    = round(mathLerpf(_l.sync_mode,    _r.sync_mode,    _factor));
      b_sync       = round(mathLerpf(_l.b_sync,       _r.b_sync,       _factor));
      shape        = round(mathLerpf(_l.shape,        _r.shape,        _factor));
      slew_rate    = round(mathLerpf(_l.slew_rate,    _r.slew_rate,    _factor));
      phase        = round(mathLerpf(_l.phase,        _r.phase,        _factor));
      b_wavereset  = round(mathLerpf(_l.b_wavereset,  _r.b_wavereset,  _factor));

      if(false == _bModDest)
      {
         mod_dest     = (_factor < 0.5) ? _l.mod_dest : _r.mod_dest;
         amount       = (_factor < 0.5) ? _l.amount : _r.amount;
         b_amount_ext = _l.b_amount_ext || _r.b_amount_ext;
      }
      else if(true == _bModDest)
      {
         mod_dest     = round(mathLerpf(_l.mod_dest,    _r.mod_dest,     _factor));
         amount       = round(mathLerpf(_l.amount,      _r.amount,       _factor));
         b_amount_ext = _l.b_amount_ext || _r.b_amount_ext;
      }
      else if(maybe == _bModDest)
      {
         mod_dest     = (_factor < 0.5) ? _l.mod_dest : _r.mod_dest;
         amount       = round(mathLerpf(_l.amount,      _r.amount,       _factor));
         b_amount_ext = _l.b_amount_ext || _r.b_amount_ext;
      }
      // // mod_dest     = round(mathLerpf(_l.mod_dest,     _r.mod_dest,     _factor));
      // // amount       = round(mathLerpf(_l.amount,       _r.amount,       _factor));
      // // b_amount_ext = round(mathLerpf(_l.b_amount_ext, _r.b_amount_ext, _factor));
   }

   // <method.png>
   public method sendFreq(local EditMIDISynthFormProphet12 _editor,
                          local Prophet12_Program          _layer,
                          local boolean _bProxy
                          ) {
      _editor.queueNRPN(nrpn_base + 0 + _layer.layer_idx*512,
                        b_enable ? freq : 0,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendSyncMode(local EditMIDISynthFormProphet12 _editor,
                              local Prophet12_Program          _layer,
                              local boolean _bProxy
                              ) {
      _editor.queueNRPN(nrpn_base + 1 + _layer.layer_idx*512,
                        sync_mode,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendSyncEnable(local EditMIDISynthFormProphet12 _editor,
                                local Prophet12_Program          _layer,
                                local boolean _bProxy
                                ) {
      _editor.queueNRPN(nrpn_base + 2 + _layer.layer_idx*512,
                        b_sync,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendShape(local EditMIDISynthFormProphet12 _editor,
                           local Prophet12_Program          _layer,
                           local boolean _bProxy
                           ) {
      _editor.queueNRPN(nrpn_base + 3 + _layer.layer_idx*512,
                        shape,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendPhase(local EditMIDISynthFormProphet12 _editor,
                           local Prophet12_Program          _layer,
                           local boolean _bProxy
                           ) {
      _editor.queueNRPN(nrpn_base + 6 + _layer.layer_idx*512,
                        phase,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendWaveReset(local EditMIDISynthFormProphet12 _editor,
                               local Prophet12_Program          _layer,
                               local boolean _bProxy
                               ) {
      _editor.queueNRPN(nrpn_base + 7 + _layer.layer_idx*512,
                        b_wavereset,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendSlewRate(local EditMIDISynthFormProphet12 _editor,
                              local Prophet12_Program          _layer,
                              local boolean _bProxy
                              ) {
      _editor.queueNRPN(nrpn_base + 5 + _layer.layer_idx*512,
                        slew_rate,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendModDest(local EditMIDISynthFormProphet12 _editor,
                             local Prophet12_Program          _layer,
                             local boolean _bProxy
                             ) {
      _editor.queueNRPN(nrpn_base + 8 + _layer.layer_idx*512,
                        b_enable ? mod_dest : 0,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendAmount(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) : boolean {

      if(amount >= 0)
      {
         return _layer.updateParamExt7x4(_editor,
                                         5 + idx /*modSrc*/,
                                         b_enable ? mod_dest : 0,
                                         nrpn_base + 4 + _layer.layer_idx*512,
                                         Prophet12_ModEntry.AUTOGEN_LFO1_AMOUNTEXT_0 + (3*idx),
                                         b_amount_ext ? amount : mathClampi(amount, 0, 127),
                                         _bProxy
                                         );
      }
      else
      {
         return _layer.updateParamExtN7x4(_editor,
                                          5 + idx /*modSrc*/,
                                          b_enable ? mod_dest : 0,
                                          nrpn_base + 4 + _layer.layer_idx*512,
                                          Prophet12_ModEntry.AUTOGEN_LFO1_AMOUNTEXT_0 + (3*idx),
                                          amount,
                                          true/*bZeroIsMin*/,
                                          _bProxy
                                          );
      }
   }

   // <method.png>
   public method sendEnable(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) {
      sendModDest (_editor, _layer, _bProxy);
      sendFreq    (_editor, _layer, _bProxy);
   }

   // <method.png>
   public method send(EditMIDISynthFormProphet12 _editor,
                      Prophet12_Program          _layer,
                      boolean _bProxy
                      ) {
      sendFreq       (_editor, _layer, _bProxy);
      sendSyncMode   (_editor, _layer, _bProxy);
      sendSyncEnable (_editor, _layer, _bProxy);
      sendShape      (_editor, _layer, _bProxy);
      sendPhase      (_editor, _layer, _bProxy);
      sendWaveReset  (_editor, _layer, _bProxy);
      sendSlewRate   (_editor, _layer, _bProxy);
      sendModDest    (_editor, _layer, _bProxy);
      sendAmount     (_editor, _layer, _bProxy);
   }

   // <method.png>
   public method tryRecvNRPN(local short _nrpn, local short _val) : boolean {

      if( (nrpn_base + 0) == _nrpn)
      {
         freq = _val;
         b_enable = true;
         return true;
      }

      if( (nrpn_base + 1) == _nrpn)
      {
         sync_mode = _val;
         return true;
      }

      if( (nrpn_base + 2) == _nrpn)
      {
         b_sync = _val;
         return true;
      }

      if( (nrpn_base + 3) == _nrpn)
      {
         shape = _val;
         return true;
      }

      if( (nrpn_base + 6) == _nrpn)
      {
         phase = _val;
         return true;
      }

      if( (nrpn_base + 7) == _nrpn)
      {
         b_wavereset = _val;
         return true;
      }

      if( (nrpn_base + 5) == _nrpn)
      {
         slew_rate = _val;
         return true;
      }

      if( (nrpn_base + 8) == _nrpn)
      {
         mod_dest = _val;
         return true;
      }

      if( (nrpn_base + 4) == _nrpn)
      {
         amount = _val;
         b_amount_ext = false;
         return true;
      }

      return false;
   }

   // <method.png>
   public method sendDiff(local Prophet12_LFO _o,
                          local EditMIDISynthFormProphet12 _editor,
                          local Prophet12_Program          _layer,
                          local boolean _bProxy
                          ) {

      if(freq != _o.freq)
      {
         _o.sendFreq(_editor, _layer, _bProxy);
      }

      if(sync_mode != _o.sync_mode)
      {
         _o.sendSyncMode(_editor, _layer, _bProxy);
      }

      if(b_sync != _o.b_sync)
      {
         _o.sendSyncEnable(_editor, _layer, _bProxy);
      }

      if(shape != _o.shape)
      {
         _o.sendShape(_editor, _layer, _bProxy);
      }

      if(phase != _o.phase)
      {
         _o.sendPhase(_editor, _layer, _bProxy);
      }

      if(b_wavereset != _o.b_wavereset)
      {
         _o.sendWaveReset(_editor, _layer, _bProxy);
      }

      if(slew_rate != _o.slew_rate)
      {
         _o.sendSlewRate(_editor, _layer, _bProxy);
      }

      if(mod_dest != _o.mod_dest)
      {
         _o.sendModDest(_editor, _layer, _bProxy);
      }

      // trace "xxx LFO["+idx+"]::sendDiff: amount="+amount+" o.amount="+_o.amount;

      if(amount != _o.amount)
      {
         _o.sendAmount(_editor, _layer, _bProxy);
      }

      if(b_enable != _o.b_enable)
      {
         _o.sendEnable(_editor, _layer, _bProxy);
      }
   }

   // <method.png>
   public method copyFrom(Prophet12_LFO _o) {

      int origIdx = idx;
      int origNRPN = nrpn_base;

      yacOperatorAssign(_o);

      idx = origIdx;
      nrpn_base = origNRPN;
   }

   // <save.png>
   public method save(Stream ofs) {

      ofs.i16 = 1; // Version

      ofs.i8  = b_enable;

      ofs.i8  = freq;
      ofs.i8  = sync_mode;
      ofs.i8  = b_sync;
      ofs.i8  = shape;
      ofs.i8  = slew_rate;
      ofs.i8  = phase;
      ofs.i8  = b_wavereset;
      ofs.i8  = mod_dest;
      ofs.i16 = amount;
      ofs.i8  = b_amount_ext;
   }

   // <load.png>
   public method load(Stream ifs) : boolean {

      short ver = ifs.i16;

      if(ver >= 1)
      {
         b_enable   = ifs.b8;

         freq         = ifs.u8;
         sync_mode    = ifs.u8;
         b_sync       = ifs.b8;
         shape        = ifs.u8;
         slew_rate    = ifs.u8;
         phase        = ifs.u8;
         b_wavereset  = ifs.b8;
         mod_dest     = ifs.u8;
         amount       = ifs.s16;
         b_amount_ext = ifs.b8;

         return true;
      }
      else
      {
         trace "[---] Prophet12_LFO::load: invalid ver="+ver;
      }

      return false;
   }

}


// <class.png>
class Prophet12_Delay : Prophet12_Defs {

   byte  idx;  // 0..3
   short nrpn_base;

   boolean b_enable;

   byte    time;       // 0..255
   byte    sync_mode;
   boolean b_sync;
   byte    fb_amount;  // 0..127
   byte    lpf;        // 0..127
   byte    hpf;        // 0..127
   boolean b_hpf;      // FltMode
   short   pan;        // 0..127 => -64..63
   boolean b_pan_ext;  // true= pan has range -381..508 => -445..444
   byte    amount;     // 0..127



   // <method_init.png>
   public method loadInit(byte _idx) {
      idx = _idx;
      nrpn_base = 187 + (idx * 8);

      b_enable = true;

      time      = 20;
      sync_mode = 0;
      b_sync    = false;
      fb_amount = 0;
      lpf       = 42;
      hpf       = 70;
      b_hpf     = false;
      pan       = 64;
      b_pan_ext = false;
      amount    = 0;
   }

   // <method_init.png>
   public method initFromRaw(Buffer raw, int off) {

      b_enable = true;

      time        = raw.peekI8(off +  96 - 96);
      sync_mode   = raw.peekI8(off +  100 - 96);
      b_sync      = raw.peekI8(off +  112 - 96);
      fb_amount   = raw.peekI8(off +  108 - 96);
      lpf         = raw.peekI8(off +  116 - 96);
      hpf         = raw.peekI8(off +  120 - 96);
      b_hpf       = raw.peekI8(off +  124 - 96);
      pan         = raw.peekI8(off +  164 - 96);
      b_pan_ext   = false;
      amount      = raw.peekI8(off +  104 - 96);

      // trace "xxx read delay["+idx+"] amount="+amount;
   }

   // <method_init.png>
   public method loadRandom(int _mode) {

      if(_mode&1)
         b_enable = true;
      else
         b_enable = rand(1+1);

      time         = rand(255+1);
      sync_mode    = rand(11+1);
      b_sync       = rand(1+1);
      if(_mode >= RAND_MUSICAL)
         fb_amount    = rand(80+1);
      else
         fb_amount    = rand(127+1);
      lpf          = rand(127+1);
      if(_mode >= RAND_MUSICAL)
         hpf          = rand(80+1);
      else
         hpf          = rand(127+1);
      b_hpf        = rand(1+1);
      if(_mode >= RAND_MUSICAL)
      {
         pan          = 64 + rand(64) - 32;
         b_pan_ext = false;
      }
      else
      {
         pan       = rand(300+1) - 150;
         b_pan_ext = rand(1+1);
      }
      amount       = rand(127+1);
   }

   // <method_init.png>
   public method blend(Prophet12_Delay _l, Prophet12_Delay _r, float _factor) {

      b_enable     = round(mathLerpf(_l.b_enable,     _r.b_enable,     _factor));

      time         = round(mathLerpf(_l.time,         _r.time,         _factor));
      sync_mode    = round(mathLerpf(_l.sync_mode,    _r.sync_mode,    _factor));
      b_sync       = round(mathLerpf(_l.b_sync,       _r.b_sync,       _factor));
      fb_amount    = round(mathLerpf(_l.fb_amount,    _r.fb_amount,    _factor));
      lpf          = round(mathLerpf(_l.lpf,          _r.lpf,          _factor));
      hpf          = round(mathLerpf(_l.hpf,          _r.hpf,          _factor));
      b_hpf        = round(mathLerpf(_l.b_hpf,        _r.b_hpf,        _factor));
      // // pan          = round(mathLerpf(_l.pan,          _r.pan,          _factor));
      pan          = round(mathLerpf(_l.pan,          _r.pan,          _factor));
      b_pan_ext    = _l.b_pan_ext || _r.b_pan_ext;
      amount       = round(mathLerpf(_l.amount,       _r.amount,       _factor));
   }

   // <method.png>
   public method sendTime(local EditMIDISynthFormProphet12 _editor,
                          local Prophet12_Program          _layer,
                          local boolean _bProxy
                          ) {
      _editor.queueNRPN(nrpn_base + 0 + _layer.layer_idx*512,
                        time,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendSyncMode(local EditMIDISynthFormProphet12 _editor,
                              local Prophet12_Program          _layer,
                              local boolean _bProxy
                              ) {
      _editor.queueNRPN(nrpn_base + 1 + _layer.layer_idx*512,
                        sync_mode,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendSyncEnable(local EditMIDISynthFormProphet12 _editor,
                                local Prophet12_Program          _layer,
                                local _bProxy
                                ) {
      _editor.queueNRPN(nrpn_base + 2 + _layer.layer_idx*512,
                        b_sync,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendAmount(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) {
      _editor.queueNRPN(nrpn_base + 3 + _layer.layer_idx*512,
                        b_enable ? amount : 0,
                        _bProxy
                        );
   }

   // // <method.png>
   // public method sendPan(local EditMIDISynthFormProphet12 _editor,
   //                       local Prophet12_Program          _layer,
   //                       local boolean _bProxy
   //                       ) {
   //    // (note) added later on (nrpn dly1=429, dly2=430, ..)
   //    _editor.queueNRPN(429 + idx + _layer.layer_idx*512,
   //                      pan,
   //                      _bProxy
   //                      );
   // }

   // <method.png>
   public method sendPan(local EditMIDISynthFormProphet12 _editor,
                         local Prophet12_Program          _layer,
                         local boolean _bProxy
                         ) : boolean {

      return _layer.updateParamExt7x4(_editor,
                                      26/*modSrc=DC*/,
                                      b_enable ? (58 + idx)/*Delay n Pan*/ : 0 /*modDst*/,
                                      429 + idx + _layer.layer_idx*512,
                                      Prophet12_ModEntry.AUTOGEN_DELAY1_PANEXT_0 + (3*idx),
                                      b_pan_ext ? pan : mathClampi(pan, 0, 127),
                                      _bProxy
                                      );
   }

   // <method.png>
   public method sendEnable(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) {
      sendAmount  (_editor, _layer, _bProxy);
      sendLPF     (_editor, _layer, _bProxy);
      sendHPF     (_editor, _layer, _bProxy);
      sendFltMode (_editor, _layer, _bProxy);
   }

   // <method.png>
   public method sendFltMode(local EditMIDISynthFormProphet12 _editor,
                             local Prophet12_Program          _layer,
                             local boolean _bProxy
                             ) {
      _editor.queueNRPN(nrpn_base + 7 + _layer.layer_idx*512,
                        b_enable ? b_hpf : 1,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendLPF(local EditMIDISynthFormProphet12 _editor,
                         local Prophet12_Program          _layer,
                         local boolean _bProxy
                         ) {
      _editor.queueNRPN(nrpn_base + 5 + _layer.layer_idx*512,
                        b_enable ? lpf : 0,
                        _bProxy
                        );

   }

   // <method.png>
   public method sendHPF(local EditMIDISynthFormProphet12 _editor,
                         local Prophet12_Program          _layer,
                         local boolean _bProxy
                         ) {
      _editor.queueNRPN(nrpn_base + 6 + _layer.layer_idx*512,
                        b_enable ? hpf : 127,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendFbAmount(local EditMIDISynthFormProphet12 _editor,
                              local Prophet12_Program          _layer,
                              local boolean _bProxy
                              ) {
      _editor.queueNRPN(nrpn_base + 4 + _layer.layer_idx*512,
                        fb_amount,
                        _bProxy
                        );
   }

   // <method.png>
   public method send(EditMIDISynthFormProphet12 _editor,
                      Prophet12_Program          _layer,
                      boolean _bProxy
                      ) {
      sendTime       (_editor, _layer, _bProxy);
      sendSyncMode   (_editor, _layer, _bProxy);
      sendSyncEnable (_editor, _layer, _bProxy);
      sendAmount     (_editor, _layer, _bProxy);
      sendPan        (_editor, _layer, _bProxy);
      sendFltMode    (_editor, _layer, _bProxy);
      sendLPF        (_editor, _layer, _bProxy);
      sendHPF        (_editor, _layer, _bProxy);
      sendFbAmount   (_editor, _layer, _bProxy);
   }

   // <method.png>
   public method tryRecvNRPN(local short _nrpn, local short _val) : boolean {

      if( (nrpn_base + 0) == _nrpn)
      {
         time = _val;
         return true;
      }

      if( (nrpn_base + 1) == _nrpn)
      {
         sync_mode = _val;
         return true;
      }

      if( (nrpn_base + 3) == _nrpn)
      {
         amount = _val;
         b_enable = true;
         return true;
      }

      if( (429 + idx) == _nrpn)
      {
         pan = _val;
         return true;
      }

      if( (nrpn_base + 7) == _nrpn)
      {
         b_hpf = _val;
         b_enable = true;
         return true;
      }

      if( (nrpn_base + 5) == _nrpn)
      {
         lpf = _val;
         b_enable = true;
         return true;
      }

      if( (nrpn_base + 6) == _nrpn)
      {
         hpf = _val;
         b_enable = true;
         return true;
      }

      if( (nrpn_base + 4) == _nrpn)
      {
         fb_amount = _val;
         return true;
      }

      return false;
   }

   // <method.png>
   public method sendDiff(local Prophet12_Delay _o,
                          local EditMIDISynthFormProphet12 _editor,
                          local Prophet12_Program          _layer,
                          local boolean _bProxy
                          ) {

      if(time != _o.time)
      {
         _o.sendTime(_editor, _layer, _bProxy);
      }

      if(sync_mode != _o.sync_mode)
      {
         _o.sendSyncMode(_editor, _layer, _bProxy);
      }

      if(amount != _o.amount)
      {
         _o.sendAmount(_editor, _layer, _bProxy);
      }

      if(pan != _o.pan)
      {
         _o.sendPan(_editor, _layer, _bProxy);
      }

      if(b_hpf != _o.b_hpf)
      {
         _o.sendFltMode(_editor, _layer, _bProxy);
      }

      if(lpf != _o.lpf)
      {
         _o.sendLPF(_editor, _layer, _bProxy);
      }

      if(hpf != _o.hpf)
      {
         _o.sendHPF(_editor, _layer, _bProxy);
      }

      if(fb_amount != _o.fb_amount)
      {
         _o.sendFbAmount(_editor, _layer, _bProxy);
      }

      if(b_enable != _o.b_enable)
      {
         _o.sendEnable(_editor, _layer, _bProxy);
      }
   }

   // <method.png>
   public method copyFrom(Prophet12_Delay _o) {

      int origIdx = idx;
      int origNRPN = nrpn_base;

      yacOperatorAssign(_o);

      idx = origIdx;
      nrpn_base = origNRPN;
   }

   // <save.png>
   public method save(Stream ofs) {

      ofs.i16 = 2; // Version

      ofs.i8 = b_enable;

      ofs.i8  = time;
      ofs.i8  = sync_mode;
      ofs.i8  = b_sync;
      ofs.i8  = fb_amount;
      ofs.i8  = lpf;
      ofs.i8  = hpf;
      ofs.i8  = b_hpf;
      ofs.i16 = pan;  // i16 since v2
      ofs.i8  = b_pan_ext; // v2+
      ofs.i8  = amount;
   }

   // <load.png>
   public method load(Stream ifs) : boolean {

      short ver = ifs.i16;

      if(ver >= 1)
      {
         b_enable   = ifs.b8;

         time       = ifs.u8;
         sync_mode  = ifs.u8;
         b_sync     = ifs.u8;
         fb_amount  = ifs.u8;
         lpf        = ifs.u8;
         hpf        = ifs.u8;
         b_hpf      = ifs.u8;

         if(ver >= 2)
         {
            pan        = ifs.s16;
            b_pan_ext  = ifs.b8;
         }
         else
         {
            pan        = ifs.u8;
         }

         amount     = ifs.u8;

         return true;
      }
      else
      {
         trace "[---] Prophet12_Delay::load: invalid ver="+ver;
      }

      return false;
   }

}


// <class.png>
class Prophet12_ModEntry : Prophet12_Defs {

   byte  idx;  // 0..15
   short nrpn_base;

   boolean b_enable;

   byte    src;
   byte    amount;  // 0..254 => -127..127
   boolean b_amount_ext;  // true=amount has range -381..635 => -508..508
   byte    dst;

   define int AUTOGEN_NONE              =  0;
   define int AUTOGEN_OSC1_FMEXT_0      =  1;
   define int AUTOGEN_OSC1_FMEXT_1      =  2;
   define int AUTOGEN_OSC1_FMEXT_2      =  3;
   define int AUTOGEN_OSC2_FMEXT_0      =  4;
   define int AUTOGEN_OSC2_FMEXT_1      =  5;
   define int AUTOGEN_OSC2_FMEXT_2      =  6;
   define int AUTOGEN_OSC3_FMEXT_0      =  7;
   define int AUTOGEN_OSC3_FMEXT_1      =  8;
   define int AUTOGEN_OSC3_FMEXT_2      =  9;
   define int AUTOGEN_OSC4_FMEXT_0      =  10;
   define int AUTOGEN_OSC4_FMEXT_1      =  11;
   define int AUTOGEN_OSC4_FMEXT_2      =  12;
   define int AUTOGEN_OSC1_AMEXT_0      =  13;
   define int AUTOGEN_OSC1_AMEXT_1      =  14;
   define int AUTOGEN_OSC1_AMEXT_2      =  15;
   define int AUTOGEN_OSC2_AMEXT_0      =  16;
   define int AUTOGEN_OSC2_AMEXT_1      =  17;
   define int AUTOGEN_OSC2_AMEXT_2      =  18;
   define int AUTOGEN_OSC3_AMEXT_0      =  19;
   define int AUTOGEN_OSC3_AMEXT_1      =  20;
   define int AUTOGEN_OSC3_AMEXT_2      =  21;
   define int AUTOGEN_OSC4_AMEXT_0      =  22;
   define int AUTOGEN_OSC4_AMEXT_1      =  23;
   define int AUTOGEN_OSC4_AMEXT_2      =  24;
   define int AUTOGEN_LFO1_AMOUNTEXT_0  =  25;
   define int AUTOGEN_LFO1_AMOUNTEXT_1  =  26;
   define int AUTOGEN_LFO1_AMOUNTEXT_2  =  27;
   define int AUTOGEN_LFO2_AMOUNTEXT_0  =  28;
   define int AUTOGEN_LFO2_AMOUNTEXT_1  =  29;
   define int AUTOGEN_LFO2_AMOUNTEXT_2  =  30;
   define int AUTOGEN_LFO3_AMOUNTEXT_0  =  31;
   define int AUTOGEN_LFO3_AMOUNTEXT_1  =  32;
   define int AUTOGEN_LFO3_AMOUNTEXT_2  =  33;
   define int AUTOGEN_LFO4_AMOUNTEXT_0  =  34;
   define int AUTOGEN_LFO4_AMOUNTEXT_1  =  35;
   define int AUTOGEN_LFO4_AMOUNTEXT_2  =  36;
   define int AUTOGEN_ENV1_AMOUNTEXT_0  =  37;
   define int AUTOGEN_ENV1_AMOUNTEXT_1  =  38;
   define int AUTOGEN_ENV1_AMOUNTEXT_2  =  39;
   define int AUTOGEN_ENV2_AMOUNTEXT_0  =  40;
   define int AUTOGEN_ENV2_AMOUNTEXT_1  =  41;
   define int AUTOGEN_ENV2_AMOUNTEXT_2  =  42;
   define int AUTOGEN_ENV3_AMOUNTEXT_0  =  43;
   define int AUTOGEN_ENV3_AMOUNTEXT_1  =  44;
   define int AUTOGEN_ENV3_AMOUNTEXT_2  =  45;
   define int AUTOGEN_ENV4_AMOUNTEXT_0  =  46;
   define int AUTOGEN_ENV4_AMOUNTEXT_1  =  47;
   define int AUTOGEN_ENV4_AMOUNTEXT_2  =  48;
   define int AUTOGEN_MOD1_AMOUNTEXT_0  =  49;
   define int AUTOGEN_MOD1_AMOUNTEXT_1  =  50;
   define int AUTOGEN_MOD1_AMOUNTEXT_2  =  51;
   define int AUTOGEN_MOD2_AMOUNTEXT_0  =  52;
   define int AUTOGEN_MOD2_AMOUNTEXT_1  =  53;
   define int AUTOGEN_MOD2_AMOUNTEXT_2  =  54;
   define int AUTOGEN_MOD3_AMOUNTEXT_0  =  55;
   define int AUTOGEN_MOD3_AMOUNTEXT_1  =  56;
   define int AUTOGEN_MOD3_AMOUNTEXT_2  =  57;
   define int AUTOGEN_MOD4_AMOUNTEXT_0  =  58;
   define int AUTOGEN_MOD4_AMOUNTEXT_1  =  59;
   define int AUTOGEN_MOD4_AMOUNTEXT_2  =  60;
   define int AUTOGEN_MOD5_AMOUNTEXT_0  =  61;
   define int AUTOGEN_MOD5_AMOUNTEXT_1  =  62;
   define int AUTOGEN_MOD5_AMOUNTEXT_2  =  63;
   define int AUTOGEN_MOD6_AMOUNTEXT_0  =  64;
   define int AUTOGEN_MOD6_AMOUNTEXT_1  =  65;
   define int AUTOGEN_MOD6_AMOUNTEXT_2  =  66;
   define int AUTOGEN_MOD7_AMOUNTEXT_0  =  67;
   define int AUTOGEN_MOD7_AMOUNTEXT_1  =  68;
   define int AUTOGEN_MOD7_AMOUNTEXT_2  =  69;
   define int AUTOGEN_MOD8_AMOUNTEXT_0  =  70;
   define int AUTOGEN_MOD8_AMOUNTEXT_1  =  71;
   define int AUTOGEN_MOD8_AMOUNTEXT_2  =  72;
   define int AUTOGEN_MOD9_AMOUNTEXT_0  =  73;
   define int AUTOGEN_MOD9_AMOUNTEXT_1  =  74;
   define int AUTOGEN_MOD9_AMOUNTEXT_2  =  75;
   define int AUTOGEN_MOD10_AMOUNTEXT_0 =  76;
   define int AUTOGEN_MOD10_AMOUNTEXT_1 =  77;
   define int AUTOGEN_MOD10_AMOUNTEXT_2 =  78;
   define int AUTOGEN_MOD11_AMOUNTEXT_0 =  79;
   define int AUTOGEN_MOD11_AMOUNTEXT_1 =  80;
   define int AUTOGEN_MOD11_AMOUNTEXT_2 =  81;
   define int AUTOGEN_MOD12_AMOUNTEXT_0 =  82;
   define int AUTOGEN_MOD12_AMOUNTEXT_1 =  83;
   define int AUTOGEN_MOD12_AMOUNTEXT_2 =  84;
   define int AUTOGEN_MOD13_AMOUNTEXT_0 =  85;
   define int AUTOGEN_MOD13_AMOUNTEXT_1 =  86;
   define int AUTOGEN_MOD13_AMOUNTEXT_2 =  87;
   define int AUTOGEN_MOD14_AMOUNTEXT_0 =  88;
   define int AUTOGEN_MOD14_AMOUNTEXT_1 =  89;
   define int AUTOGEN_MOD14_AMOUNTEXT_2 =  90;
   define int AUTOGEN_MOD15_AMOUNTEXT_0 =  91;
   define int AUTOGEN_MOD15_AMOUNTEXT_1 =  92;
   define int AUTOGEN_MOD15_AMOUNTEXT_2 =  93;
   define int AUTOGEN_MOD16_AMOUNTEXT_0 =  94;
   define int AUTOGEN_MOD16_AMOUNTEXT_1 =  95;
   define int AUTOGEN_MOD16_AMOUNTEXT_2 =  96;
   define int AUTOGEN_VCAEXT            =  97;
   define int AUTOGEN_PANEXT            =  98;
   define int AUTOGEN_ENVDCURVEEXT_0    =  99;  // Amp
   define int AUTOGEN_ENVDCURVEEXT_1    = 100;  // LPF
   define int AUTOGEN_ENVDCURVEEXT_2    = 101;  // Env3
   define int AUTOGEN_ENVDCURVEEXT_3    = 102;  // Env4
   define int AUTOGEN_ENVRCURVEEXT_0    = 103;  // Amp
   define int AUTOGEN_ENVRCURVEEXT_1    = 104;  // LPF
   define int AUTOGEN_ENVRCURVEEXT_2    = 105;  // Env3
   define int AUTOGEN_ENVRCURVEEXT_3    = 106;  // Env4
   define int AUTOGEN_LPFEXT            = 107;
   define int AUTOGEN_DELAY1_PANEXT_0  =  108;
   define int AUTOGEN_DELAY1_PANEXT_1  =  109;
   define int AUTOGEN_DELAY1_PANEXT_2  =  110;
   define int AUTOGEN_DELAY2_PANEXT_0  =  111;
   define int AUTOGEN_DELAY2_PANEXT_1  =  112;
   define int AUTOGEN_DELAY2_PANEXT_2  =  113;
   define int AUTOGEN_DELAY3_PANEXT_0  =  114;
   define int AUTOGEN_DELAY3_PANEXT_1  =  115;
   define int AUTOGEN_DELAY3_PANEXT_2  =  116;
   define int AUTOGEN_DELAY4_PANEXT_0  =  117;
   define int AUTOGEN_DELAY4_PANEXT_1  =  118;
   define int AUTOGEN_DELAY4_PANEXT_2  =  119;

   byte autogen_src;


   // <method_init.png>
   public method loadInit(byte _idx) {
      idx = _idx;
      nrpn_base = 219 + (4 * idx);

      b_enable = false;

      src          = 0;
      amount       = 127;
      b_amount_ext = false;
      dst          = 0;

      autogen_src = AUTOGEN_NONE;
   }

   // <method_init.png>
   public method initFromRaw(Buffer raw, int off) {

      b_enable = true;
      b_amount_ext = false;

      src     = raw.peekI8(off + 206 - 206);
      amount  = raw.peekI8(off + 222 - 206);
      dst     = raw.peekI8(off + 238 - 206);

      autogen_src = AUTOGEN_NONE;
   }

   // <method_init.png>
   public method loadRandom(int _mode) {

      if(idx < 8)
      {
         if(_mode < RAND_MUSICAL)
         {
            if(_mode&1)
               b_enable = true;
            else
               b_enable = rand(1+1);
            src = rand(27+1);
            dst = rand(104+1);
            amount = rand(8*127) - 4* 127;
            b_amount_ext = rand(1+1);
         }
         else
         {
            amount = rand(8*127) - 4* 127;
            b_amount_ext = rand(1+1);
         }
      }
   }

   // <method_init.png>
   public method blend(Prophet12_ModEntry _l, Prophet12_ModEntry _r, float _factor, boolean _bFull) {

      // // if(AUTOGEN_NONE != _r.autogen_src)
      // // {
      // //    autogen_src = _r.autogen_src;
      // // }

      autogen_src = (_factor >= 0.5) ? _r.autogen_src : _l.autogen_src;

      boolean bBlendDone = false;

      if(true == _bFull)
      {
         src = round(mathLerpf(_l.src, _r.src, _factor));
         dst = round(mathLerpf(_l.dst, _r.dst, _factor));

         amount        = round(mathLerpf(_l.amount,       _r.amount,       _factor));
         b_amount_ext  = _l.b_amount_ext || _r.b_amount_ext;
         b_enable      = round(mathLerpf(_l.b_enable,     _r.b_enable,     _factor));

         bBlendDone = true;
      }
      else if(maybe == _bFull)
      {
         // if(0 == idx)
         //    trace "xxx blend modentry maybe l.src="+_l.src+" l.dst="+_l.dst+" factor="+_factor;

         if( (0 == _l.src) && (0 == _l.dst) )
         {
            src = _r.src;
            dst = _r.dst;

            amount        = round(mathLerpf(_l.amount,       _r.amount,       _factor));
            b_amount_ext  = _l.b_amount_ext || _r.b_amount_ext;
            b_enable      = (0 != _r.dst);

            bBlendDone = true;
         }
      }

      if(!bBlendDone) ////else if(false == _bFull)
      {
         if(_factor >= 0.5)
         {
            src = _r.src;
         }
         else
         {
            src = _l.src;
         }

         if(_factor >= 0.5)
         {
            dst = _r.dst;
         }
         else
         {
            dst = _l.dst;
         }

         amount        = round(mathLerpf(_l.amount,       _r.amount,       _factor));
         b_amount_ext  = _l.b_amount_ext || _r.b_amount_ext;
         b_enable      = round(mathLerpf(_l.b_enable,     _r.b_enable,     _factor));
         // // // autogen_src   = AUTOGEN_NONE;
      }
   }

   // <method.png>
   public method sendSrc(local EditMIDISynthFormProphet12 _editor,
                         local Prophet12_Program          _layer,
                         local boolean _bProxy
                         ) {
      _editor.queueNRPN(219 + (4 * idx) + 0 + _layer.layer_idx*512,
                        b_enable ? src : 0,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendAmount(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) : boolean {

      // trace "xxx Mod::sendAmount: idx="+idx+" layer_idx="+_layer.layer_idx+" amount="+amount+" b_amount_ext="+b_amount_ext;

      return _layer.updateParamExtN7x4(_editor,
                                       b_enable ? src : 0,
                                       b_enable ? dst : 0,
                                       219 + (4 * idx) + 1 + _layer.layer_idx*512,
                                       Prophet12_ModEntry.AUTOGEN_MOD1_AMOUNTEXT_0 + (3*idx),
                                       (b_amount_ext ? amount : (mathClampi(amount, 0, 254))) - 127,
                                       false/*bZeroIsMin*/,
                                       _bProxy
                                       );
   }

   // // <method.png>
   // public method sendAmountRaw(EditMIDISynthFormProphet12 _editor,
   //                             Prophet12_Program          _layer
   //                             ) : boolean {
   //    _editor.queueNRPN(219 + (4 * idx) + 1 + _layer.layer_idx*512,
   //                      b_enable ? amount : 127
   //                      );
   // }

   // <method.png>
   public method sendDst(local EditMIDISynthFormProphet12 _editor,
                         local Prophet12_Program          _layer,
                         local boolean _bProxy
                         ) {
      _editor.queueNRPN(219 + (4 * idx) + 2 + _layer.layer_idx*512,
                        ((((0 == _layer.layer_idx) && !b_mute_a) || ((1 == _layer.layer_idx) && !b_mute_b)) && b_enable) ? dst : 0,
                        _bProxy
                        );
   }

   // <method.png>
   public method sendEnable(local EditMIDISynthFormProphet12 _editor,
                            local Prophet12_Program          _layer,
                            local boolean _bProxy
                            ) {
      sendSrc    (_editor, _layer, _bProxy);
      sendDst    (_editor, _layer, _bProxy);
      sendAmount (_editor, _layer, _bProxy);
   }

   // <method.png>
   public method send(local EditMIDISynthFormProphet12 _editor,
                      local Prophet12_Program          _layer,
                      boolean _bProxy
                      ) {
      sendSrc    (_editor, _layer, _bProxy);
      sendAmount (_editor, _layer, _bProxy);
      sendDst    (_editor, _layer, _bProxy);
   }

   // <method.png>
   public method tryRecvNRPN(local short _nrpn, local short _val) : boolean {

      // trace "xxx Mod::tryRecvNRPN: nrpn="+_nrpn+" val="+_val;

      if( (nrpn_base + 0) == _nrpn)
      {
         src = _val;
         b_enable = true;
         return true;
      }

      if( (nrpn_base + 1) == _nrpn)
      {
         amount = _val;
         b_amount_ext = false;
         b_enable |= (127 != amount);
         return true;
      }

      if( (nrpn_base + 2) == _nrpn)
      {
         dst = _val;
         b_enable = true;
         return true;
      }

      return false;
   }

   // <method.png>
   public method sendDiff(local Prophet12_ModEntry _o,
                          local EditMIDISynthFormProphet12 _editor,
                          local Prophet12_Program          _layer,
                          local boolean _bProxy
                          ) {

      if(src != _o.src)
      {
         _o.sendSrc(_editor, _layer, _bProxy);
      }

      if(amount != _o.amount)
      {
         _o.sendAmount(_editor, _layer, _bProxy);
      }

      if(dst != _o.dst)
      {
         _o.sendDst(_editor, _layer, _bProxy);
      }

      if(b_enable != _o.b_enable)
      {
         _o.sendEnable(_editor, _layer, _bProxy);
      }
   }

   // <method.png>
   public method copyFrom(Prophet12_ModEntry _o) {

      int origIdx = idx;
      int origNRPN = nrpn_base;

      yacOperatorAssign(_o);

      idx = origIdx;
      nrpn_base = origNRPN;
   }

   // <save.png>
   public method save(Stream ofs) {

      ofs.i16 = 1; // Version

      ofs.i8  = b_enable;

      ofs.i8  = src;
      ofs.i8  = amount;
      ofs.i8  = b_amount_ext;
      ofs.i8  = dst;

      ofs.i16 = autogen_src;
   }

   // <load.png>
   public method load(Stream ifs) : boolean {

      short ver = ifs.i16;

      if(ver >= 1)
      {
         b_enable     = ifs.b8;

         src          = ifs.u8;
         amount       = ifs.u8;
         b_amount_ext = ifs.b8;
         dst          = ifs.u8;

         autogen_src  = ifs.u16;

         return true;
      }
      else
      {
         trace "[---] Prophet12_ModEntry::load: invalid ver="+ver;
      }

      return false;
   }

}


// <class.png>
class Prophet12_Program : Prophet12_Defs {
   byte layer_idx;

   String program_name;

   ClassArray      oscs;    // Prophet12_Osc instances
   // suboctave
   // glide
   // pitchbend up/down
   ClassArray      envs;    // Prophet12_Env
   ClassArray      lfos;    // Prophet12_LFO
   ClassArray      delays;  // Prophet12_Delay
   ClassArray      mods;    // Prophet12_ModEntry

   // filter
   short   lpf_freq;       // 0..164, -127..164 (ext)
   byte    lpf_res;        // 0..127
   byte    lpf_keyamount;  // 0..127
   boolean b_lpf_4pole;

   byte    hpf_freq;       // 0..127
   byte    hpf_res;        // 0..127
   byte    hpf_keyamount;  // 0..127

   byte    fb_amount;      // 0..254 => -127..127
   byte    fb_tune;        // 0..48
   boolean b_fb;

   byte    b_linear_fm;

   boolean b_char_enable;  // true=sub/char on, maybe=sub on, false=sub/char off
   byte    sub_osc;        // 0..127
   byte    air;            // 0..127
   byte    girth;          // 0..127
   byte    hack;           // 0..127
   byte    decimate;       // 0..127
   byte    drive;          // 0..127

   byte    voice_vol;      // 0..127
   byte    vca_ext;        // 0..127 (via mod matrix)
   byte    pan_ext;        // -127..127 (via mod matrix)
   byte    pan_spread;     // 0..127
   byte    dist_amount;    // 0..127

   byte    glide_mode;
   boolean b_glide;
   byte    pitchbend_up;   // 0..12
   byte    pitchbend_down; // 0..24

   byte    b_uni;
   byte    uni_detune;     // 0..127
   byte    uni_mode;
   byte    uni_keyassign;

   byte    b_arp;



   // <method_init.png>
   public method loadInit(byte _layerIdx) {
      layer_idx = _layerIdx;

      program_name = "Init";

      oscs.template = Prophet12_Osc;
      oscs.alloc(4);
      oscs.useAll();
      _= oscs[0].loadInit(0);
      _= oscs[1].loadInit(1);
      _= oscs[2].loadInit(2);
      _= oscs[3].loadInit(3);

      envs.template = Prophet12_Env;
      envs.alloc(4);
      envs.useAll();
      _= envs[0].loadInit(0);
      _= envs[1].loadInit(1);
      _= envs[2].loadInit(2);
      _= envs[3].loadInit(3);

      lfos.template = Prophet12_LFO;
      lfos.alloc(4);
      lfos.useAll();
      _= lfos[0].loadInit(0);
      _= lfos[1].loadInit(1);
      _= lfos[2].loadInit(2);
      _= lfos[3].loadInit(3);

      delays.template = Prophet12_Delay;
      delays.alloc(4);
      delays.useAll();
      _= delays[0].loadInit(0);
      _= delays[1].loadInit(1);
      _= delays[2].loadInit(2);
      _= delays[3].loadInit(3);

      mods.template = Prophet12_ModEntry;
      mods.alloc(16);
      mods.useAll();
      int modIdx = 0;
      loop(16)
      {
         _= mods[modIdx].loadInit(modIdx);
         modIdx++;
      }

      lpf_freq       = 100;
      lpf_res        = 0;
      b_lpf_4pole    = true;
      lpf_keyamount  = 40;

      hpf_freq       = 0;
      hpf_res        = 0;
      hpf_keyamount  = 0;

      fb_amount      = 127;
      fb_tune        = 36;
      b_fb           = false;

      b_linear_fm    = false;

      voice_vol      = 127;
      vca_ext        = 0;
      pan_ext        = 0;
      pan_spread     = 0;
      dist_amount    = 0;

      b_char_enable  = true;
      sub_osc        = 0;
      air            = 0;
      girth          = 0;
      hack           = 0;
      decimate       = 0;
      drive          = 16;

      b_glide        = false;
      glide_mode     = 0;
      pitchbend_up   = 12;
      pitchbend_down = 12;

      b_uni          = false;
      uni_detune     = 20;
      uni_mode       = 0;
      uni_keyassign  = 0;

      b_arp = false;
   }

   // <method_init.png>
   public method initFromRaw(Buffer raw) {

      int off = 512 * layer_idx;

      Prophet12_Osc osc1 <= oscs[0];
      Prophet12_Osc osc2 <= oscs[1];
      Prophet12_Osc osc3 <= oscs[2];
      Prophet12_Osc osc4 <= oscs[3];

      osc1.initFromRaw(raw, off + 0);
      osc2.initFromRaw(raw, off + 1);
      osc3.initFromRaw(raw, off + 2);
      osc4.initFromRaw(raw, off + 3);

      Prophet12_Env env1 <= envs[0];
      Prophet12_Env env2 <= envs[1];
      Prophet12_Env env3 <= envs[2];
      Prophet12_Env env4 <= envs[3];
      env1.initFromRaw(raw, off + 177);
      env2.initFromRaw(raw, off + 176);
      env3.initFromRaw(raw, off + 178);
      env4.initFromRaw(raw, off + 179);

      Prophet12_LFO lfo1 <= lfos[0];
      Prophet12_LFO lfo2 <= lfos[1];
      Prophet12_LFO lfo3 <= lfos[2];
      Prophet12_LFO lfo4 <= lfos[3];
      lfo1.initFromRaw(raw, off + 128);
      lfo2.initFromRaw(raw, off + 129);
      lfo3.initFromRaw(raw, off + 130);
      lfo4.initFromRaw(raw, off + 131);

      Prophet12_Delay delay1 <= delays[0];
      Prophet12_Delay delay2 <= delays[1];
      Prophet12_Delay delay3 <= delays[2];
      Prophet12_Delay delay4 <= delays[3];
      delay1.initFromRaw(raw, off + 96);
      delay2.initFromRaw(raw, off + 97);
      delay3.initFromRaw(raw, off + 98);
      delay4.initFromRaw(raw, off + 99);

      Prophet12_ModEntry *mod;
      foreach mod in mods
      {
         mod.initFromRaw(raw, off + 206 + mod.idx);
      }

      // Layer global
      lpf_freq       = raw.peekI8(off + 85);
      lpf_res        = raw.peekI8(off + 86);
      lpf_keyamount  = raw.peekI8(off + 87);
      b_lpf_4pole    = raw.peekI8(off + 88);

      hpf_freq       = raw.peekI8(off + 89);
      hpf_res        = raw.peekI8(off + 90);
      hpf_keyamount  = raw.peekI8(off + 91);

      fb_amount      = raw.peekI8(off + 94);
      fb_tune        = raw.peekI8(off + 95);
      b_fb           = (127 != fb_amount);

      b_linear_fm    = raw.peekI8(off + 64);

      sub_osc        = raw.peekI8(off + 40);
      air            = raw.peekI8(off + 76);
      girth          = raw.peekI8(off + 77);
      hack           = raw.peekI8(off + 78);
      decimate       = raw.peekI8(off + 79);
      drive          = raw.peekI8(off + 80);
      b_char_enable  = (0 != sub_osc) ? maybe : false;
      if( (0 != air) || (0 != girth) || (0 != hack) || (0 != decimate) || (0 != drive) )
         b_char_enable = true;

      voice_vol      = raw.peekI8(off + 93);
      vca_ext        = 0;
      pan_ext        = 0;
      pan_spread     = raw.peekI8(off + 92);
      dist_amount    = raw.peekI8(off + 254);

      glide_mode     = raw.peekI8(off + 72);
      b_glide        = raw.peekI8(off + 73);

      b_uni          = raw.peekI8(off + 257);
      uni_detune     = raw.peekI8(off + 258);
      uni_mode       = raw.peekI8(off + 259);
      uni_keyassign  = raw.peekI8(off + 260);


      if(b_recv_patch_names)
      {
         program_name.empty();
         int charIdx = 0;
         loop(20-3)
         {
            program_name.append(tcchar(raw.peekI8(off + 402 + charIdx++)));
            // trace "xxx charIdx="+charIdx+" program_name="+program_name;
         }
      }

      b_arp = raw.peekI8(off + 296);
   }

   // <method.png>
   public method copyFrom(Prophet12_Program _o) {
      int idx;

      program_name = _o.program_name;

      Prophet12_Osc *osc;
      idx = 0;
      loop(4)
      {
         osc <= oscs[idx];
         osc = _o.oscs[idx++];
      }

      Prophet12_Env *env;
      idx = 0;
      loop(4)
      {
         env <= envs[idx];
         env = _o.envs[idx++];
      }

      Prophet12_LFO *lfo;
      idx = 0;
      loop(4)
      {
         lfo <= lfos[idx];
         lfo = _o.lfos[idx++];
      }

      Prophet12_Delay *delay;
      idx = 0;
      loop(4)
      {
         delay <= delays[idx];
         delay = _o.delays[idx++];
      }

      Prophet12_ModEntry *mod;
      idx = 0;
      loop(16)
      {
         mod <= mods[idx];
         mod = _o.mods[idx++];
      }

      lpf_freq       = _o.lpf_freq;
      lpf_res        = _o.lpf_res;
      lpf_keyamount  = _o.lpf_keyamount;
      b_lpf_4pole    = _o.b_lpf_4pole;

      hpf_freq       = _o.hpf_freq;
      hpf_res        = _o.hpf_res;
      hpf_keyamount  = _o.hpf_keyamount;

      fb_amount      = _o.fb_amount;
      fb_tune        = _o.fb_tune;
      b_fb           = _o.b_fb;

      b_linear_fm    = _o.b_linear_fm;

      b_char_enable  = _o.b_char_enable;
      sub_osc        = _o.sub_osc;
      air            = _o.air;
      girth          = _o.girth;
      hack           = _o.hack;
      decimate       = _o.decimate;
      drive          = _o.drive;

      voice_vol      = _o.voice_vol;
      vca_ext        = _o.vca_ext;
      pan_ext        = _o.pan_ext;
      pan_spread     = _o.pan_spread;
      dist_amount    = _o.dist_amount;

      glide_mode     = _o.glide_mode;
      b_glide        = _o.b_glide;
      pitchbend_up   = _o.pitchbend_up;
      pitchbend_down = _o.pitchbend_down;

      b_uni          = _o.b_uni;
      uni_detune     = _o.uni_detune;
      uni_mode       = _o.uni_mode;
      uni_keyassign  = _o.uni_keyassign;

      b_arp          = _o.b_arp;
   }

   // <method_init.png>
   public method loadRandom(int _mode) {
      program_name = "Random"+rand(99999);

      _= oscs[0].loadRandom(_mode);
      _= oscs[1].loadRandom(_mode);
      _= oscs[2].loadRandom(_mode);
      _= oscs[3].loadRandom(_mode);

      _= envs[0].loadRandom(_mode);
      _= envs[1].loadRandom(_mode);
      _= envs[2].loadRandom(_mode);
      _= envs[3].loadRandom(_mode);

      _= lfos[0].loadRandom(_mode);
      _= lfos[1].loadRandom(_mode);
      _= lfos[2].loadRandom(_mode);
      _= lfos[3].loadRandom(_mode);

      _= delays[0].loadRandom(_mode);
      _= delays[1].loadRandom(_mode);
      _= delays[2].loadRandom(_mode);
      _= delays[3].loadRandom(_mode);

      int modIdx = 0;
      loop(16)
      {
         Prophet12_ModEntry mod  <= mods.get(modIdx);
         mod.loadRandom(_mode);
         modIdx++;
      }

      if(_mode >= RAND_MUSICAL)
         lpf_freq = 20 + rand(144 + 1);
      else
         lpf_freq = rand(164 + 1);

      if(_mode >= RAND_MUSICAL)
         lpf_res = rand(64 + 1);
      else
         lpf_res = rand(127 + 1);

      lpf_keyamount = rand(127 + 1);
      b_lpf_4pole = rand(1+1);

      if(_mode >= RAND_MUSICAL)
         hpf_freq = rand(70 + 1);
      else
         hpf_freq = rand(127 + 1);
      hpf_res = rand(127 + 1);
      hpf_keyamount = rand(127 + 1);

      if(_mode >= RAND_MUSICAL)
         fb_amount = 127 + rand(70 + 1);
      else
         fb_amount = rand(254 + 1);

      if(_mode >= RAND_MUSICAL)
         fb_tune = 10 + rand(38 + 1);
      else
         fb_tune = rand(48 + 1);
      b_fb = rand(10+1) > 7;

      b_linear_fm = rand(1+1);

      sub_osc  = rand(127+1);
      air      = rand(127+1);
      girth    = rand(127+1);
      if(_mode >= RAND_MUSICAL)
         hack     = rand(64+1);
      else
         hack     = rand(127+1);
      if(_mode >= RAND_MUSICAL)
         decimate = rand(80+1);
      else
         decimate = rand(127+1);
      if(_mode >= RAND_MUSICAL)
         drive    = rand(32+1);
      else
         drive    = rand(127+1);

      if(_mode >= RAND_MUSICAL)
         voice_vol = 40 + rand(87+1);
      else
         voice_vol = rand(127+1);
      if(_mode >= RAND_MUSICAL)
         vca_ext = rand(1+1) * rand(127+1);
      else
         vca_ext = rand(127+1);
      if(_mode >= RAND_MUSICAL)
         pan_ext = rand(1+1) * (64 - 25 + rand(50+1));
      else
         pan_ext = rand(127+1);

      if(_mode >= RAND_MUSICAL)
         pan_spread = rand(1+1) * rand(40+1);
      else
         pan_spread = rand(127+1);

      if(_mode >= RAND_MUSICAL)
         dist_amount = rand(1+1) * rand(30+1);
      else
         dist_amount = rand(127+1);

      glide_mode = rand(3+1);
      b_glide = rand(1+1);
      pitchbend_up = rand(12+1);
      pitchbend_down = rand(24+1);

      if(_mode >= RAND_MUSICAL)
         b_uni = rand(10+1) > 7;
      else
         b_uni = rand(1+1);

      if(_mode >= RAND_MUSICAL)
         uni_detune = rand(32+1);
      else
         b_uni = rand(127+1);

      uni_mode = rand(12+1);
      uni_keyassign = rand(5+1);
   }

   // // <method_init.png>
   // public method blend(Prophet12_Program _l, Prophet12_Program _r, float _factor) {
   // }

   // <method.png>
   public method allocAutogenSrc(local byte _src) : Prophet12_ModEntry {
      local Prophet12_ModEntry *mod;

      // trace "\n\nxxx allocAutogenSrc: src="+_src;

      local int i = 15;
      loop(16)
      {
         mod <= mods.get(i);

         if(mod.autogen_src == _src)
         {
            // Re-use previously allocated entry
            // trace "xxx allocAutogenSrc: reuse mod.idx="+mod.idx+" old mod.autogen_src="+mod.autogen_src;
            mod.b_enable = true;
            return mod;
         }

         i--;
      }

      // // i = 15;
      // // loop(16)
      // // {
      // //    mod <= mods.get(i);

      // //    if(mod.autogen_src == Prophet12_ModEntry.AUTOGEN_NONE)
      // //    {
      // //       if( ((3-1) != i) && ((10-1) != i) )  // Avoid buggy mod slots
      // //       {
      // //          if(0 == mod.dst)  // Not user defined ?
      // //          {
      // //             mod.autogen_src = _src;
      // //             mod.b_enable    = true;
      // //             // trace "xxx allocAutogenSrc: alloc mod.idx="+mod.idx+" old mod.autogen_src="+mod.autogen_src;
      // //             return mod;
      // //          }
      // //       }
      // //    }

      // //    i--;
      // // }

      i = 15;
      loop(16)
      {
         mod <= mods.get(i);

         if(mod.autogen_src == Prophet12_ModEntry.AUTOGEN_NONE)
         {
            if(0 == mod.dst)  // Not user defined ?
            {
               mod.autogen_src = _src;
               mod.b_enable    = true;
               // trace "xxx allocAutogenSrc: alloc mod.idx="+mod.idx+" old mod.autogen_src="+mod.autogen_src;
               return mod;
            }
         }

         i--;
      }

      // trace "xxx allocAutogenSrc failed\n";

      return null;
   }

   // <method.png>
   public method freeAutogenSrc(local byte _src) : Prophet12_ModEntry {
      local Prophet12_ModEntry *mod;

      foreach mod in mods
      {
         if(mod.autogen_src == _src)
         {
            mod.autogen_src = Prophet12_ModEntry.AUTOGEN_NONE;
            mod.b_enable = false;
            mod.src = 0;
            mod.dst = 0;
            mod.amount = 127;  // +0
            return mod;
         }
      }

      return null;
   }

   // <method.png>
   public method updateParamExtnx4(local EditMIDISynthFormProphet12 _editor,
                                   local byte  _modSrc,
                                   local byte  _modDst,
                                   local short _nrpn,
                                   local byte  _autogenSrcBase,
                                   local short _value,
                                   local short _max,
                                   local boolean _bProxy
                                   ) : boolean {

      local boolean ret = true;

      local Prophet12_ModEntry *mod;

      local int numSlots;

      if(0 != _modDst)
      {
         if(_value > _max)
            numSlots = 1 + ( (_value - (_max + 1)) / 127 );
         else
            numSlots = 0;
         // trace "xxx updateParamExtnx4: value="+_value+" numSlots="+numSlots;
      }
      else
      {
         numSlots = 0;
      }

      local int slotIdx = 2;

      loop(3 - numSlots)
      {
         mod <= freeAutogenSrc(_autogenSrcBase + slotIdx);
         if(null != mod)
            mod.send(_editor, this, _bProxy);

         slotIdx--;
      }

      if(0 != _modDst)
      {
         _editor.queueNRPN(_nrpn, (_value > _max) ? _max : _value, _bProxy);

         _value -= _max;

         slotIdx = 0;

         loop(numSlots)
         {
            mod <= allocAutogenSrc(_autogenSrcBase + slotIdx);

            if(null != mod)
            {
               mod.src    = _modSrc;
               mod.dst    = _modDst;
               mod.amount = (_value > 127) ? 254 : (_value + 127);

               mod.send(_editor, this, _bProxy);
            }
            else
            {
               ret = false;
            }

            _value -= 127;

            slotIdx++;
         }
      }
      else
      {
         _editor.queueNRPN(_nrpn,
                           0,
                           _bProxy
                           );
      }

      return ret;
   }


   // <method.png>
   public method updateParamExt7x4(local EditMIDISynthFormProphet12 _editor,
                                   local byte  _modSrc,
                                   local byte  _modDst,
                                   local short _nrpn,
                                   local byte  _autogenSrcBase,
                                   local short _value,
                                   local boolean _bProxy
                                   ) : boolean {

      return updateParamExtnx4(_editor,
                               _modSrc,
                               _modDst,
                               _nrpn,
                               _autogenSrcBase,
                               _value,
                               127,
                               _bProxy
                               );
   }

   // <method.png>
   public method updateParamExt7x4ModOnly(local EditMIDISynthFormProphet12 _editor,
                                          local byte  _modSrc,
                                          local byte  _modDst,
                                          local byte  _autogenSrcBase,
                                          local short _value,
                                          local boolean _bProxy
                                          ) : boolean {

      local boolean ret = true;

      local Prophet12_ModEntry *mod;

      mod <= freeAutogenSrc(_autogenSrcBase);
      if(null != mod)
         mod.send(_editor, this, _bProxy);

      if(0 != _value)
      {
         mod <= allocAutogenSrc(_autogenSrcBase);

         if(null != mod)
         {
            mod.src    = _modSrc;
            mod.dst    = _modDst;
            mod.amount = _value + 127;

            mod.send(_editor, this, _bProxy);
         }
         else
         {
            ret = false;
         }
      }

      return ret;
   }

   // <method.png>
   public method updateParamExt8x4(local EditMIDISynthFormProphet12 _editor,
                                   local byte  _modSrc,
                                   local byte  _modDst,
                                   local short _nrpn,
                                   local byte  _autogenSrcBase,
                                   local short _value,
                                   local boolean _bProxy
                                   ) : boolean {

      // trace "xxx updateParamExt8x4: autogenSrcBase="+_autogenSrcBase;

      return updateParamExtnx4(_editor,
                               _modSrc,
                               _modDst,
                               _nrpn,
                               _autogenSrcBase,
                               _value,
                               255,
                               _bProxy
                               );
   }

   // <method.png>
   public method updateParamExtN7x4(local EditMIDISynthFormProphet12 _editor,
                                    local byte  _modSrc,
                                    local byte  _modDst,
                                    local short _nrpn,
                                    local byte  _autogenSrcBase,
                                    local short _value, // -508 .. 508
                                    local boolean _bZeroIsMin,
                                    local boolean _bProxy
                                    ) : boolean {

      local boolean ret = true;

      local Prophet12_ModEntry *mod;

      local int numSlots;

      if(0 != _modDst)
      {
         if(_bZeroIsMin && (_value < 0))
         {
            // Need modslot for negative values
            numSlots = 1 + (-_value / 127);
         }
         else
         {
            if(abs(_value) > 127)
               numSlots = 1 + ( (abs(_value) - (127 + 1)) / 127 );
            else
               numSlots = 0;
         }
      }
      else
      {
         numSlots = 0;
      }

      // trace "xxx updateParamExtN7x4: value="+_value+" numSlots="+numSlots;

      local int slotIdx = 2;

      loop(3 - numSlots)
      {
         mod <= freeAutogenSrc(_autogenSrcBase + slotIdx);
         if(null != mod)
            mod.send(_editor, this, _bProxy);

         slotIdx--;
      }

      if(0 != _modDst)
      {
         if(_value >= 0)
         {
            _editor.queueNRPN(_nrpn,
                              (_value > 127) ? 254 : (_value + 127),
                              _bProxy
                              );
            _value -= 127;
         }
         else
         {
            if(_bZeroIsMin && (_value < 0))
            {
               _editor.queueNRPN(_nrpn,
                                 0,
                                 _bProxy
                                 );
            }
            else
            {
               _editor.queueNRPN(_nrpn,
                                 (_value < -127) ? 0 : (_value + 127),
                                 _bProxy
                                 );
               _value += 127;
            }
         }


         slotIdx = 0;

         loop(numSlots)
         {
            mod <= allocAutogenSrc(_autogenSrcBase + slotIdx);

            if(null != mod)
            {
               mod.src    = _modSrc;
               mod.dst    = _modDst;

               if(_value >= 0)
               {
                  mod.amount = (_value > 127) ? 254 : (_value + 127);
               }
               else
               {
                  mod.amount = (_value < -127) ? 0 : (_value + 127);
               }

               mod.send(_editor, this, _bProxy);
            }
            else
            {
               ret = false;
            }

            if(_value >= 0)
            {
               _value -= 127;
            }
            else
            {
               _value += 127;
            }

            slotIdx++;
         }
      }
      else
      {
         if(_bZeroIsMin)
         {
            _editor.queueNRPN(_nrpn,
                              0/*0*/,
                              _bProxy
                              );
         }
         else
         {
            _editor.queueNRPN(_nrpn,
                              127/*0*/,
                              _bProxy
                              );
         }
      }

      return ret;
   }

   // <method.png>
   public method sendCharEnable(local EditMIDISynthFormProphet12 _editor,
                                local boolean _bProxy
                                ) {
      _editor.queueNRPN( 72 + layer_idx*512, ((false != b_char_enable) && (((0 == layer_idx) && !b_mute_a) || ((1 == layer_idx) && !b_mute_b)) ) ? sub_osc : 0, _bProxy);
      _editor.queueNRPN( 80 + layer_idx*512, (true == b_char_enable) ? air : 0,      _bProxy);
      _editor.queueNRPN( 81 + layer_idx*512, (true == b_char_enable) ? girth : 0,    _bProxy);
      _editor.queueNRPN( 82 + layer_idx*512, (true == b_char_enable) ? hack : 0,     _bProxy);
      _editor.queueNRPN( 83 + layer_idx*512, (true == b_char_enable) ? decimate : 0, _bProxy);
      _editor.queueNRPN( 84 + layer_idx*512, (true == b_char_enable) ? drive : 0,    _bProxy);
   }

   // <method.png>
   public method sendVCA(local EditMIDISynthFormProphet12 _editor,
                         local boolean _bProxy
                         ) : boolean {

      return updateParamExt7x4ModOnly(_editor,
                                      26/*modSrc=DC*/,
                                      40/*modDst=VCA*/,
                                      Prophet12_ModEntry.AUTOGEN_VCAEXT,
                                      vca_ext,
                                      _bProxy
                                      );
   }

   // <method.png>
   public method sendPan(local EditMIDISynthFormProphet12 _editor,
                         local boolean _bProxy
                         ) : boolean {

      return updateParamExt7x4ModOnly(_editor,
                                      26/*modSrc=DC*/,
                                      41/*modDst=Pan*/,
                                      Prophet12_ModEntry.AUTOGEN_PANEXT,
                                      pan_ext,
                                      _bProxy
                                      );
   }

   // <method.png>
   public method sendLPFFreq(local EditMIDISynthFormProphet12 _editor,
                             local boolean _bProxy
                             ) : boolean {

      _editor.queueNRPN(90 + layer_idx*512, mathClampi(lpf_freq, 0, 164),
                        _bProxy
                        );

      if((lpf_freq < 0) || (lpf_freq > 164))
      {
         return updateParamExt7x4ModOnly(_editor,
                                         26/*modSrc=DC*/,
                                         36/*modDst=LPF Cutoff*/,
                                         Prophet12_ModEntry.AUTOGEN_LPFEXT,
                                         (lpf_freq > 164) ? (lpf_freq - 164) : lpf_freq,
                                         _bProxy
                                         );
      }
      else
      {
         return updateParamExt7x4ModOnly(_editor,
                                         26/*modSrc=DC*/,
                                         36/*modDst=LPF Cutoff*/,
                                         Prophet12_ModEntry.AUTOGEN_LPFEXT,
                                         0,
                                         _bProxy
                                         );
      }
   }

   // <method.png>
   public method send(local EditMIDISynthFormProphet12 _editor,
                      local boolean _bProxy
                      ) {

      local Prophet12_Osc *osc;
      foreach osc in oscs
      {
         osc.send(_editor, this, _bProxy);
      }

      local Prophet12_Env *env;
      foreach env in envs
      {
         env.send(_editor, this, _bProxy);
      }

      local Prophet12_LFO *lfo;
      foreach lfo in lfos
      {
         lfo.send(_editor, this, _bProxy);
      }

      local Prophet12_Delay *delay;
      foreach delay in delays
      {
         delay.send(_editor, this, _bProxy);
      }

      local Prophet12_ModEntry *mod;
      foreach mod in mods
      {
         mod.send(_editor, this, _bProxy);
      }

      sendLPFFreq(_editor, _bProxy);

      _editor.queueNRPN( 91 + layer_idx*512, lpf_res,                _bProxy);
      _editor.queueNRPN( 92 + layer_idx*512, lpf_keyamount,          _bProxy);
      _editor.queueNRPN( 93 + layer_idx*512, b_lpf_4pole,            _bProxy);
      _editor.queueNRPN( 94 + layer_idx*512, hpf_freq,               _bProxy);
      _editor.queueNRPN( 95 + layer_idx*512, hpf_res,                _bProxy);
      _editor.queueNRPN( 96 + layer_idx*512, hpf_keyamount,          _bProxy);
      _editor.queueNRPN( 97 + layer_idx*512, b_fb ? fb_amount : 127, _bProxy);
      _editor.queueNRPN( 98 + layer_idx*512, fb_tune,                _bProxy);
      _editor.queueNRPN( 77 + layer_idx*512, b_linear_fm,            _bProxy);
      _editor.queueNRPN( 99 + layer_idx*512, voice_vol,              _bProxy);  // resets to 127 ?!
      sendVCA(_editor, _bProxy);
      sendPan(_editor, _bProxy);
      _editor.queueNRPN(100 + layer_idx*512, pan_spread,             _bProxy);
      _editor.queueNRPN(101 + layer_idx*512, dist_amount,            _bProxy);

      sendCharEnable(_editor, _bProxy);

      _editor.queueNRPN( 74 + layer_idx*512, b_glide,                _bProxy);
      _editor.queueNRPN( 73 + layer_idx*512, glide_mode,             _bProxy);
      _editor.queueNRPN(284 + layer_idx*512, uni_detune,             _bProxy);
      _editor.queueNRPN(285 + layer_idx*512, uni_mode,               _bProxy);
      _editor.queueNRPN(283 + layer_idx*512, b_uni,                  _bProxy);
      _editor.queueNRPN(286 + layer_idx*512, uni_keyassign,          _bProxy);
      _editor.queueNRPN( 75 + layer_idx*512, pitchbend_up,           _bProxy);
      _editor.queueNRPN( 76 + layer_idx*512, pitchbend_down,         _bProxy);

      _editor.queueNRPN(289 + layer_idx*512, b_arp,                  _bProxy);

      _editor.sendNameDiff(480 + 3/*wtf*/ + layer_idx*512, "'''''''''''''''''''''''''''''", program_name, _bProxy);

   }

   // <method.png>
   public method tryRecvNRPN(local short _nrpn, local short _val) : boolean {

      local short nrpnRel = _nrpn - layer_idx * 512;

      local Prophet12_Osc *osc;
      foreach osc in oscs
      {
         if(osc.tryRecvNRPN(nrpnRel, _val))
            return true;
      }

      local Prophet12_Env *env;
      foreach env in envs
      {
         if(env.tryRecvNRPN(nrpnRel, _val))
            return true;
      }

      local Prophet12_LFO *lfo;
      foreach lfo in lfos
      {
         if(lfo.tryRecvNRPN(nrpnRel, _val))
            return true;
      }

      local Prophet12_Delay *delay;
      foreach delay in delays
      {
         if(delay.tryRecvNRPN(nrpnRel, _val))
            return true;
      }

      local Prophet12_ModEntry *mod;
      foreach mod in mods
      {
         if(mod.tryRecvNRPN(nrpnRel, _val))
            return true;
      }

      if(90 == nrpnRel)
      {
         lpf_freq = _val;
         return true;
      }

      if(91 == nrpnRel)
      {
         lpf_res = _val;
         return true;
      }

      if(92 == nrpnRel)
      {
         lpf_keyamount = _val;
         return true;
      }

      if(93 == nrpnRel)
      {
         b_lpf_4pole = _val;
         return true;
      }

      if(94 == nrpnRel)
      {
         hpf_freq = _val;
         return true;
      }

      if(95 == nrpnRel)
      {
         hpf_res = _val;
         return true;
      }

      if(96 == nrpnRel)
      {
         hpf_keyamount = _val;
         return true;
      }

      if(97 == nrpnRel)
      {
         fb_amount = _val;
         b_fb = (127 != fb_amount);
         return true;
      }

      if(98 == nrpnRel)
      {
         fb_tune = _val;
         return true;
      }

      if(77 == nrpnRel)
      {
         b_linear_fm = _val;
         return true;
      }

      if(99 == nrpnRel)
      {
         voice_vol = _val;
         return true;
      }

      if(100 == nrpnRel)
      {
         pan_spread = _val;
         return true;
      }

      if(101 == nrpnRel)
      {
         dist_amount = _val;
         return true;
      }

      if(72 == nrpnRel)
      {
         sub_osc = _val;
         b_char_enable = true;
         return true;
      }

      if(80 == nrpnRel)
      {
         air = _val;
         b_char_enable = true;
         return true;
      }

      if(81 == nrpnRel)
      {
         girth = _val;
         b_char_enable = true;
         return true;
      }

      if(82 == nrpnRel)
      {
         hack = _val;
         b_char_enable = true;
         return true;
      }

      if(83 == nrpnRel)
      {
         decimate = _val;
         b_char_enable = true;
         return true;
      }

      if(84 == nrpnRel)
      {
         drive = _val;
         b_char_enable = true;
         return true;
      }

      if(74 == nrpnRel)
      {
         b_glide = _val;
         return true;
      }

      if(73 == nrpnRel)
      {
         glide_mode = _val;
         return true;
      }

      if(75 == nrpnRel)
      {
         pitchbend_up = _val;
         return true;
      }

      if(76 == nrpnRel)
      {
         pitchbend_down = _val;
         return true;
      }

      if(284 == nrpnRel)
      {
         uni_detune = _val;
         return true;
      }

      if(285 == nrpnRel)
      {
         uni_mode = _val;
         return true;
      }

      if(283 == nrpnRel)
      {
         b_uni = _val;
         return true;
      }

      if(286 == nrpnRel)
      {
         uni_keyassign = _val;
         return true;
      }

      return false;
   }

   // <method.png>
   public method sendDiff(local Prophet12_Program _o,
                          local EditMIDISynthFormProphet12 _editor,
                          local boolean _bProxy
                          ) {
      int idx;

      idx = 0;
      loop(4)
      {
         local Prophet12_Osc osc <= oscs.get(idx);
         local Prophet12_Osc oscO <= _o.oscs.get(idx);
         osc.sendDiff(oscO, _editor, this, _bProxy);
         idx++;
      }

      idx = 0;
      loop(4)
      {
         local Prophet12_Env env <= envs.get(idx);
         local Prophet12_Env envO <= _o.envs.get(idx);
         env.sendDiff(envO, _editor, this, _bProxy);
         idx++;
      }

      idx = 0;
      loop(4)
      {
         local Prophet12_LFO lfo <= lfos.get(idx);
         local Prophet12_LFO lfoO <= _o.lfos.get(idx);
         lfo.sendDiff(lfoO, _editor, this, _bProxy);
         idx++;
      }

      idx = 0;
      loop(4)
      {
         local Prophet12_Delay delay <= delays.get(idx);
         local Prophet12_Delay delayO <= _o.delays.get(idx);
         delay.sendDiff(delayO, _editor, this, _bProxy);
         idx++;
      }

      idx = 0;
      loop(16)
      {
         local Prophet12_ModEntry mod <= mods.get(idx);
         local Prophet12_ModEntry modO <= _o.mods.get(idx);
         mod.sendDiff(modO, _editor, this, _bProxy);
         idx++;
      }


      if(lpf_freq != _o.lpf_freq)
      {
         _o.sendLPFFreq(_editor, _bProxy);
      }

      if(lpf_res != _o.lpf_res)
      {
         _editor.queueNRPN( 91 + layer_idx*512, _o.lpf_res,                _bProxy);
      }

      if(lpf_keyamount != _o.lpf_keyamount)
      {
         _editor.queueNRPN( 92 + layer_idx*512, _o.lpf_keyamount,          _bProxy);
      }

      if(b_lpf_4pole != _o.b_lpf_4pole)
      {
         _editor.queueNRPN( 93 + layer_idx*512, _o.b_lpf_4pole,            _bProxy);
      }

      if(hpf_freq != _o.hpf_freq)
      {
         _editor.queueNRPN( 94 + layer_idx*512, _o.hpf_freq,               _bProxy);
      }

      if(hpf_res != _o.hpf_res)
      {
         _editor.queueNRPN( 95 + layer_idx*512, _o.hpf_res,                _bProxy);
      }

      if(hpf_keyamount != _o.hpf_keyamount)
      {
         _editor.queueNRPN( 96 + layer_idx*512, _o.hpf_keyamount,          _bProxy);
      }

      if(fb_amount != _o.fb_amount)
      {
         _editor.queueNRPN( 97 + layer_idx*512, _o.b_fb ? _o.fb_amount : 127, _bProxy);
      }

      if(fb_tune != _o.fb_tune)
      {
         _editor.queueNRPN( 98 + layer_idx*512, _o.fb_tune,                _bProxy);
      }

      if(b_linear_fm != _o.b_linear_fm)
      {
         _editor.queueNRPN( 77 + layer_idx*512, _o.b_linear_fm,            _bProxy);
      }

      if(voice_vol != _o.voice_vol)
      {
         _editor.queueNRPN( 99 + layer_idx*512, _o.voice_vol,              _bProxy);  // resets to 127 ?!
      }

      if(vca_ext != _o.vca_ext)
      {
         _o.sendVCA(_editor, _bProxy);
      }

      if(pan_ext != _o.pan_ext)
      {
         _o.sendPan(_editor, _bProxy);
      }

      if(pan_spread != _o.pan_spread)
      {
         _editor.queueNRPN(100 + layer_idx*512, _o.pan_spread,             _bProxy);
      }

      if(dist_amount != _o.dist_amount)
      {
         _editor.queueNRPN(101 + layer_idx*512, _o.dist_amount,            _bProxy);
      }

      // Character
      if( ((false != b_char_enable) ? sub_osc : 0) != ((false != _o.b_char_enable) ? _o.sub_osc : 0) )
      {
         _editor.queueNRPN( 72 + layer_idx*512, (false != _o.b_char_enable) ? _o.sub_osc : 0, _bProxy);
      }

      if( ((true == b_char_enable) ? air : 0) != ((true == _o.b_char_enable) ? _o.air : 0) )
      {
         _editor.queueNRPN( 80 + layer_idx*512, (true == _o.b_char_enable) ? _o.air : 0, _bProxy);
      }

      if( ((true == b_char_enable) ? girth : 0) != ((true == _o.b_char_enable) ? _o.girth : 0) )
      {
         _editor.queueNRPN( 81 + layer_idx*512, (true == _o.b_char_enable) ? _o.girth : 0, _bProxy);
      }

      if( ((true == b_char_enable) ? hack : 0) != ((true == _o.b_char_enable) ? _o.hack : 0) )
      {
         _editor.queueNRPN( 82 + layer_idx*512, (true == _o.b_char_enable) ? _o.hack : 0, _bProxy);
      }

      if( ((true == b_char_enable) ? decimate : 0) != ((true == _o.b_char_enable) ? _o.decimate : 0) )
      {
         _editor.queueNRPN( 83 + layer_idx*512, (true == _o.b_char_enable) ? _o.decimate : 0, _bProxy);
      }

      if( ((true == b_char_enable) ? drive : 0) != ((true == _o.b_char_enable) ? _o.drive : 0) )
      {
         _editor.queueNRPN( 84 + layer_idx*512, (true == _o.b_char_enable) ? _o.drive : 0, _bProxy);
      }

      if(b_glide != _o.b_glide)
      {
         _editor.queueNRPN( 74 + layer_idx*512, _o.b_glide,                _bProxy);
      }

      if(glide_mode != _o.glide_mode)
      {
         _editor.queueNRPN( 73 + layer_idx*512, _o.glide_mode,             _bProxy);
      }

      if(uni_detune != _o.uni_detune)
      {
         _editor.queueNRPN(284 + layer_idx*512, _o.uni_detune,             _bProxy);
      }

      if(uni_mode != _o.uni_mode)
      {
         _editor.queueNRPN(285 + layer_idx*512, _o.uni_mode,               _bProxy);
      }

      if(b_uni != _o.b_uni)
      {
         _editor.queueNRPN(283 + layer_idx*512, _o.b_uni,                  _bProxy);
      }

      if(uni_keyassign != _o.uni_keyassign)
      {
         _editor.queueNRPN(286 + layer_idx*512, _o.uni_keyassign,          _bProxy);
      }

      if(pitchbend_up != _o.pitchbend_up)
      {
         _editor.queueNRPN( 75 + layer_idx*512, _o.pitchbend_up,           _bProxy);
      }

      if(pitchbend_down != _o.pitchbend_down)
      {
         _editor.queueNRPN( 76 + layer_idx*512, _o.pitchbend_down,         _bProxy);
      }

      if(b_arp != _o.b_arp)
      {
         _editor.queueNRPN(289 + layer_idx*512, _o.b_arp,                  _bProxy);
      }

      // _editor.sendNameDiff(480 + 3/*wtf*/ + layer_idx*512, "'''''''''''''''''''''''''''''", program_name);
   }

   // <save.png>
   public method save(Stream ofs) {

      ofs.i16 = 4; // Version

      Utils.WriteString(ofs, program_name);

      Prophet12_Osc *osc;
      foreach osc in oscs
      {
         osc.save(ofs);
      }

      Prophet12_Env *env;
      foreach env in envs
      {
         env.save(ofs);
      }

      Prophet12_LFO *lfo;
      foreach lfo in lfos
      {
         lfo.save(ofs);
      }

      Prophet12_Delay *delay;
      foreach delay in delays
      {
         delay.save(ofs);
      }

      Prophet12_ModEntry *mod;
      foreach mod in mods
      {
         mod.save(ofs);
      }

      ofs.i16 = lpf_freq;  // v4+: store as i16 instead of u8
      ofs.i8 = lpf_res;
      ofs.i8 = lpf_keyamount;
      ofs.i8 = b_lpf_4pole;

      ofs.i8 = hpf_freq;
      ofs.i8 = hpf_res;
      ofs.i8 = hpf_keyamount;

      ofs.i8 = fb_amount;
      ofs.i8 = fb_tune;
      ofs.i8 = b_fb;

      ofs.i8 = b_linear_fm;

      ofs.i8 = b_char_enable;
      ofs.i8 = sub_osc;
      ofs.i8 = air;
      ofs.i8 = girth;
      ofs.i8 = hack;
      ofs.i8 = decimate;
      ofs.i8 = drive;

      ofs.i8 = voice_vol;
      ofs.i8 = vca_ext;  // v2+
      ofs.i8 = pan_ext;  // v2+
      ofs.i8 = pan_spread;
      ofs.i8 = dist_amount;

      ofs.i8 = glide_mode;
      ofs.i8 = b_glide;
      ofs.i8 = pitchbend_up;
      ofs.i8 = pitchbend_down;

      ofs.i8 = b_uni;
      ofs.i8 = uni_detune;
      ofs.i8 = uni_mode;
      ofs.i8 = uni_keyassign;

      ofs.i8 = b_arp; // v3+
   }

   // <load.png>
   public method load(Stream ifs) : boolean {

      short ver = ifs.i16;

      if(ver >= 1)
      {
         Utils.ReadString(ifs, program_name);

         Prophet12_Osc *osc;
         foreach osc in oscs
         {
            if(!osc.load(ifs))
               return false;
         }

         Prophet12_Env *env;
         foreach env in envs
         {
            if(!env.load(ifs))
               return false;
         }

         Prophet12_LFO *lfo;
         foreach lfo in lfos
         {
            if(!lfo.load(ifs))
               return false;
         }

         Prophet12_Delay *delay;
         foreach delay in delays
         {
            if(!delay.load(ifs))
               return false;
         }

         Prophet12_ModEntry *mod;
         foreach mod in mods
         {
            if(!mod.load(ifs))
               return false;
         }

         if(ver >= 4)
         {
            lpf_freq    = ifs.s16;
         }
         else
         {
            lpf_freq    = ifs.u8;
         }
         lpf_res        = ifs.u8;
         lpf_keyamount  = ifs.u8;
         b_lpf_4pole    = ifs.b8;

         hpf_freq       = ifs.u8;
         hpf_res        = ifs.u8;
         hpf_keyamount  = ifs.u8;

         fb_amount      = ifs.u8;
         fb_tune        = ifs.u8;
         b_fb           = ifs.b8;

         b_linear_fm    = ifs.b8;

         b_char_enable  = ifs.s8;  // true,false,maybe
         sub_osc        = ifs.u8;
         air            = ifs.u8;
         girth          = ifs.u8;
         hack           = ifs.u8;
         decimate       = ifs.u8;
         drive          = ifs.u8;

         voice_vol      = ifs.u8;
         if(ver >= 2)
         {
            vca_ext = ifs.s8;  // v2+
            pan_ext = ifs.s8;  // v2+
         }
         pan_spread     = ifs.u8;
         dist_amount    = ifs.u8;

         glide_mode     = ifs.u8;
         b_glide        = ifs.u8;
         pitchbend_up   = ifs.u8;
         pitchbend_down = ifs.u8;

         b_uni          = ifs.b8;
         uni_detune     = ifs.u8;
         uni_mode       = ifs.u8;
         uni_keyassign  = ifs.u8;

         if(ver >= 3)
         {
            b_arp = ifs.b8;  // v3+
         }

         return true;
      }
      else
      {
         trace "[---] Prophet12_Program::load: invalid ver="+ver;
      }

      return false;
   }

}


// <class.png>
class Prophet12_Patch : Prophet12_Defs {
   EditMIDISynthFormProphet12 *parent_editor;

   String patch_name;     // truncated to 20 chars during upload
   int    patch_category; // None, Bass, Lead, .. (see xfm)

   Prophet12_Program layer_a;
   Prophet12_Program layer_b;

   byte ab_mode;  // 0=A Only, 1=Stack, 2=Split
   byte split_point;

   byte mastertune_coarse; // 0..24 => -12..12
   byte mastertune_fine;   // 0..100 => -50..50

   define int MAX_SYSEX_SEND_SIZE = 4096;
   static Buffer sysex; // temporary send buffer


   // <method_init.png>
   public method init(EditMIDISynthFormProphet12 _editor) {
      parent_editor <= _editor;

      sysex.size = MAX_SYSEX_SEND_SIZE;

      loadInitPatch();
   }

   // <method.png>
   public method copyFrom(Prophet12_Patch _o) {
      patch_name = _o.patch_name;
      patch_category = _o.patch_category;

      ab_mode     = _o.ab_mode;
      split_point = _o.split_point;

      mastertune_coarse = _o.mastertune_coarse;
      mastertune_fine   = _o.mastertune_fine;

      layer_a.copyFrom(_o.layer_a);
      layer_b.copyFrom(_o.layer_b);
   }

   // <method.png>
   public method loadInitPatch() {

      setPatchName("Init");

      patch_category = 0;

      ab_mode = 0;
      split_point = 5*12;

      mastertune_coarse = 12;
      mastertune_fine   = 50;

      layer_a.loadInit(0);
      layer_b.loadInit(1);
   }

   // <method_init.png>
   public method loadRandom(int _mode) {

      setPatchName("Random"+rand(99999));

      // // ab_mode = rand(10+1) > 3;

      layer_a.loadRandom(_mode);
      layer_b.loadRandom(_mode);
   }

   // <method.png>
   public method sendPatch(local boolean _bProxy) {
      if(b_debug)
         Global.Debug("Prophet12::sendPatch");

      parent_editor.updateMuteMirrorFlags();

      local boolean bOldMirror = b_mirror;
      b_mirror = false;

      if(!_bProxy)
         parent_editor.beginNRPNBatch();

      parent_editor.queueNRPN(288, ab_mode,            _bProxy);
      parent_editor.queueNRPN(287, split_point,        _bProxy);

      parent_editor.queueNRPN(1058, mastertune_coarse, _bProxy);
      parent_editor.queueNRPN(1025, mastertune_fine,   _bProxy);

      layer_b.send(parent_editor, _bProxy);  // Send b before A to work around voice_vol bug (b updates a volume..BUT not always)
      layer_a.send(parent_editor, _bProxy);

      if(!_bProxy)
      {
         parent_editor.endNRPNBatchAndSend();
         parent_editor.clearMIDICache();
      }

      b_mirror = bOldMirror;
   }

   // <method.png>
   public method tryRecvNRPN(local short _nrpn, local short _val) : boolean {

      if(288 == _nrpn)
      {
         ab_mode = _val;
         return true;
      }

      if(287 == _nrpn)
      {
         split_point = _val;
         return true;
      }

      if(1058 == _nrpn)
      {
         mastertune_coarse = _val;
         return true;
      }

      if(1025 == _nrpn)
      {
         mastertune_fine = _val;
      }

      if(_nrpn >= 512)
      {
         return layer_b.tryRecvNRPN(_nrpn, _val);
      }
      else
      {
         return layer_a.tryRecvNRPN(_nrpn, _val);
      }
   }

   // <replay.png>
   public method sendDiff(local Prophet12_Patch _o,
                          local boolean _bProxy
                          ) {

      if(ab_mode != _o.ab_mode)
      {
         parent_editor.queueNRPN(288, _o.ab_mode,            _bProxy);
      }

      if(split_point != _o.split_point)
      {
         parent_editor.queueNRPN(287, _o.split_point,        _bProxy);
      }

      if(mastertune_coarse != _o.mastertune_coarse)
      {
         parent_editor.queueNRPN(1058, _o.mastertune_coarse, _bProxy);
      }

      if(mastertune_fine != _o.mastertune_fine)
      {
         parent_editor.queueNRPN(1025, _o.mastertune_fine,   _bProxy);
      }

      // Send b before A to work around voice_vol bug (b updates a volume..BUT not always)
      layer_b.sendDiff(_o.layer_b, parent_editor, _bProxy);
      layer_a.sendDiff(_o.layer_a, parent_editor, _bProxy);
   }

   // <method.png>
   public method sendMIDIUpdate(STX_MIDIOutDevice _outDev, byte _midiCh) {
      int paramOff;
      int numSent;

      // // _outDev.addBuffer(sysex); // add buffer synchronized to replay
   }

   // <method.png>
   public method getPatchName() : String {
      return patch_name;
   }

   // <method.png>
   public method setPatchName(String _s) {
      patch_name = _s;
   }

   // <method.png>
   public method downloadPatch(boolean _bEdit, byte _bank, byte _prg) : boolean {
      ////parent_editor.midiSelectPatch(_patchNr);

      Buffer b;

      if(_bEdit)
      {
         // Request edit buffer
         b.size = 5;
         b.offset = 0;

         b.i8 = 0xF0;
         b.i8 = 0x01;  // DSI ID
         b.i8 = 0x2A;  // Prophet 12 id
         b.i8 = 0x06;  // Request edit buffer
         b.i8 = 0xF7;

         if(b_debug)
            Global.Debug2("Prophet12::downloadPatch<EditBuffer>: send download request:");
         Utils.HexDump(b, 0, 5);
      }
      else
      {
         // Request program buffer
         b.size = 7;
         b.offset = 0;

         b.i8 = 0xF0;
         b.i8 = 0x01;  // DSI ID
         b.i8 = 0x2A;  // Prophet 12 id
         b.i8 = 0x05;  // Request program buffer (layer a+b)
         b.i8 = _bank; // bank
         b.i8 = _prg;  // program
         b.i8 = 0xF7;

         if(b_debug)
            Global.Debug2("Prophet12::downloadPatch<Program>: send download request:");
         Utils.HexDump(b, 0, 7);
      }

      parent_editor.midiSendBuffer(b);

      if(parent_editor.waitForSysEx())
      {
         if(b_debug)
            Global.Debug2("Prophet12_Patch::downloadPatchEditBuffer: got sysex");

         Utils.HexDump(parent_editor.sysex_buffer, 0, parent_editor.sysex_buffer.offset);

         Buffer syx_old;

         // Buffer syx = parent_editor.sysex_buffer;
         // trace "xxx diff syx:";
         // Utils.BufferDiff(syx_old, syx);
         // syx_old = parent_editor.sysex_buffer;

         Buffer raw;
         Buffer raw_old;

         if(DecodeSysexToRaw(parent_editor.sysex_buffer, raw))
         {
            Global.Debug("Prophet12_Patch::download: patch data decoded OK, sz="+raw.offset);

            // Utils.HexDump(raw, 0, raw.offset);

            // trace "xxx diff raw:";
            // Utils.BufferDiff(raw_old, raw, true/*bVerbose*/);

            if(1)
            {
               layer_a.initFromRaw(raw);
               layer_b.initFromRaw(raw);
            }

            ab_mode = raw.peekI8(425);
            split_point = raw.peekI8(424);

            // (todo) master tune (global setting)

            if(b_recv_patch_names)
            {
               patch_name = layer_a.program_name;
            }

            // trace "xxx DOWNLOAD patch.patch_name="+patch_name;

            raw_old = raw;

            if(_bEdit)
               parent_editor.updateShadowPatch(this);
         }
         else
         {
            Global.Error("Recv: SysEx decoding failed");
         }
      }


      return false;
   }

   // <method.png>
   public static DecodeSysexToRaw(Buffer syx, Buffer raw) : boolean {
      if(syx.peekI8(0) == 0x01) // DSI id
      {
         if(syx.peekI8(1) == 0x2A)  // Prophet12 id
         {
            int bytesLeft = -1;
            int srcOff = -1;

            if(syx.peekI8(2) == 3)  // Edit buffer data
            {
               bytesLeft = syx.offset - 3;
               srcOff = 3;
            }
            else if(syx.peekI8(2) == 2)  // Program dump layer a+b
            {
               bytesLeft = syx.offset - 5;
               srcOff = 5;
            }

            if(-1 != bytesLeft)
            {
               raw.size = 2048;
               raw.offset = 0;

               int dstOff = 0;

               while(bytesLeft > 0)
               {
                  byte msbs = syx.peekI8(srcOff++);
                  bytesLeft--;

                  if(bytesLeft > 0)
                  {
                     byte b0 = syx.peekI8(srcOff++);
                     bytesLeft--;
                     raw.i8 = (b0 | (((msbs >> 0)&1)<<7));

                     if(bytesLeft > 0)
                     {
                        byte b1 = syx.peekI8(srcOff++);
                        bytesLeft--;
                        raw.i8 = (b1 | (((msbs >> 1)&1)<<7));

                        if(bytesLeft > 0)
                        {
                           byte b2 = syx.peekI8(srcOff++);
                           bytesLeft--;
                           raw.i8 = (b2 | (((msbs >> 2)&1)<<7));

                           if(bytesLeft > 0)
                           {
                              byte b3 = syx.peekI8(srcOff++);
                              bytesLeft--;
                              raw.i8 = (b3 | (((msbs >> 3)&1)<<7));

                              if(bytesLeft > 0)
                              {
                                 byte b4 = syx.peekI8(srcOff++);
                                 bytesLeft--;
                                 raw.i8 = (b4 | (((msbs >> 4)&1)<<7));

                                 if(bytesLeft > 0)
                                 {
                                    byte b5 = syx.peekI8(srcOff++);
                                    bytesLeft--;
                                    raw.i8 = (b5 | (((msbs >> 5)&1)<<7));

                                    if(bytesLeft > 0)
                                    {
                                       byte b6 = syx.peekI8(srcOff++);
                                       bytesLeft--;
                                       raw.i8 = (b6 | (((msbs >> 6)&1)<<7));
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }

               return true;
            }
         }
      }
      return false;
   }

   // <save.png>
   public method save(Stream _ofs) {
      // Version
      _ofs.i16 = 5;

      // Patch name
      Utils.WriteString(_ofs, patch_name);

      // Patch category
      _ofs.i8 = patch_category;   // insert Brass=5 cat in v4+, Atmo=10 in v5+

      // A/B mode
      _ofs.i8 = ab_mode;      // v2+
      _ofs.i8 = split_point;  // v2+

      // Master Tune
      _ofs.i8 = mastertune_coarse;  // v3+
      _ofs.i8 = mastertune_fine;    // v3+

      layer_a.save(_ofs);
      layer_b.save(_ofs);
   }

   // <load.png>
   public method load(Stream _ifs) : boolean {
      short ver = _ifs.u16;

      if(ver >= 1)
      {
         Utils.ReadString(_ifs, patch_name);

         patch_category = _ifs.u8;

         if(ver < 4)
         {
            if(patch_category >= 5)
               patch_category++;
         }

         if(ver < 5)
         {
            if(patch_category >= 10)
               patch_category++;
         }

         if(ver >= 2)
         {
            ab_mode = _ifs.u8;  // v2+
            split_point = _ifs.u8;  // v2+
         }

         if(ver >= 3)
         {
            mastertune_coarse = _ifs.u8;  // v3+
            mastertune_fine   = _ifs.u8;  // v3+
         }

         if(layer_a.load(_ifs))
         {
            if(layer_b.load(_ifs))
            {
               return true;
            }
         }

      }

      return false;
   }
}


// <class.png>
class MIDISynthProfileDataProphet12 : MIDISynthProfileData {

   define int NUM_GLOBAL_PATCHES = 16*99;
   define int NUM_PATCHES = 17*99;  // 16 global banks + 1 per-project bank

   // 1683 Prophet12_Patch instances
   PointerArray patches;

   short current_patch_nr;
   boolean b_autosend;   // true=send patch when editor is entered or patch is selected, maybe=only send when patch is selected
   boolean b_send_diff;  // true=send diff, false=send entire patch
   boolean b_morph_auto;
   boolean b_morph_preview;

   boolean b_proxy_reset;

   byte    multiedit_off;  // 0..98   for editing "n" patches simultaneously (e.g. common modmatrix settings, ..)
   byte    multiedit_num;  // 1..99    this only works for P17 project-specific patches
   boolean b_multiedit;


   // <method_init.png>
   public virtual init(MIDISynthProfile _profile) {
      MIDISynthProfileData::init(_profile);

      patches.alloc(NUM_PATCHES);

      loop(NUM_PATCHES)
      {
         Prophet12_Patch patch <= new Prophet12_Patch;
         patch.init(midi_profile.edit_form);
         patches.add(#(deref patch));
      }

      current_patch_nr = 0;
      b_autosend = maybe;
      b_morph_auto = false;
      b_morph_preview = false;
      b_proxy_reset = true;

      multiedit_off = 0;
      multiedit_num = 1;
   }

   // <method_get.png>
   public virtual isMultiTimbral() : boolean {
      return true;
   }

   // <save.png>
   public virtual saveMIDIProfileData(Stream _ofs) {
      // Version
      _ofs.i16 = 4;

      _ofs.i16 = current_patch_nr;
      _ofs.i8  = b_autosend;
      _ofs.i8  = b_send_diff;  // v3+
      _ofs.i8  = b_morph_auto; // v2+

      _ofs.i16 = NUM_GLOBAL_PATCHES;

      int patchIdx = 0;
      loop(NUM_GLOBAL_PATCHES)
      {
         Prophet12_Patch p <= patches.get(patchIdx);
         p.save(_ofs);
         patchIdx++;
      }

      // MTS tables (v4+)
      saveMTSTables(_ofs);
   }

   // <load.png>
   public virtual loadMIDIProfileData(Stream _ifs, boolean _bFromUI) : boolean {
      short ver = _ifs.u16;

      if(ver >= 1)
      {
         if(!_bFromUI)
         {
            current_patch_nr = _ifs.u16;
         }
         else
         {
            int skip0 = _ifs.u16;
         }

         b_autosend = _ifs.s8;  // mixed

         if(ver >= 3)
         {
            b_send_diff = _ifs.b8;  // v3+
         }

         if(ver >= 2)
         {
            b_morph_auto = _ifs.b8;  // v2+
         }

         int numPatches = _ifs.u16;

         if(current_patch_nr >= numPatches)
            current_patch_nr = numPatches - 1;

         int patchIdx = 0;
         loop(numPatches)
         {
            Prophet12_Patch p <= patches.get(patchIdx);

            if(!p.load(_ifs))
            {
               trace "[---] failed to load Prophet12 patch "+patchIdx;
               return false;
            }

            if(b_clear_usr_banks)
            {
               if(patchIdx < 3*99)
               {
                  p.loadInitPatch();
               }
            }

            patchIdx++;
         }

         if(ver >= 4)
         {
            // MTS tables (v4+)
            if(!loadMTSTables(_ifs))
               return false;
         }

         return true;
      }

      return false;
   }

   // <method_get.png>
   public virtual projectMIDIProfileDataRequiresSynthEditorInit() : boolean {
      return true;
   }

   // <save.png>
   public virtual saveProjectMIDIProfileData(Stream _ofs) {
      // Version
      _ofs.i16 = 6;

      // Patch nr
      _ofs.i16 = current_patch_nr;

      _ofs.i8 = forced_redirect_midi_ch; // v6+

      // Save bank 17
      int patchIdx = 16*99;
      loop(99)
      {
         Prophet12_Patch p <= patches.get(patchIdx);
         p.save(_ofs);
         patchIdx++;
      }

      // Save morph settings (v3+)
      editor_singleton.saveState(_ofs);

      // Proxy reset enable
      _ofs.i8 = b_proxy_reset;  // v4+

      // Multiedit settings (v5+)
      _ofs.i8 = multiedit_off;
      _ofs.i8 = multiedit_num;
      _ofs.i8 = b_multiedit;
   }

   // <load.png>
   public virtual loadProjectMIDIProfileData(Stream _ifs) : boolean {
      short ver = _ifs.u16;

      if(ver >= 1)
      {
         if(ver >= 2)
         {
            current_patch_nr = _ifs.u16;
         }

         if(ver >= 6)
         {
            forced_redirect_midi_ch = _ifs.s8; // v6+
         }

         // Load bank 17
         int patchIdx = 16*99;
         loop(99)
         {
            Prophet12_Patch p <= patches.get(patchIdx);
            if(!p.load(_ifs))
            {
               trace "[---] failed to load Prophet12 patch "+patchIdx;
               return false;
            }
            patchIdx++;
         }

         if(ver >= 3)
         {
            Global.Debug2("Prophet12: load editor project state");
            if(!editor_singleton.loadState(_ifs, this))
               return false;
         }

         if(ver >= 4)
         {
            b_proxy_reset = _ifs.b8;
         }

         if(ver >= 5)
         {
            // Multiedit settings (v5+)
            multiedit_off = _ifs.u8;
            multiedit_num = _ifs.u8;
            b_multiedit   = _ifs.b8;
         }

         Global.Debug2("Prophet12::loadProjectMIDIProfileData: OK");

         return true;
      }
      return false;
   }

}


// <class.png>
class EditMIDISynthFormProphet12MenuPanel : Panel {
   EditMIDISynthFormProphet12 *parent_editor;


   // <ui_mouse.png>
   public virtual onMouse(MouseEvent _ev) : boolean {

      if(_ev.wheelUp())
      {
         parent_editor.selectPreviousMenuOption();
         return true;
      }

      if(_ev.wheelDown())
      {
         parent_editor.selectNextMenuOption();
         return true;
      }

      return Panel::onMouse(_ev);
   }

}


// <class.png>
class EditMIDISynthFormProphet12 : EditMIDISynthForm, ActionProvider, MIDIMapEventListener, Prophet12_Defs {

   define int MIDI_UPDATE_RATE = 1000/20; // 20 times per sec.
   define int UI_UPDATE_RATE   = 1000/20; // 10 times per sec.

   define String TA_MIDISEND;
   define String TA_UPDATEMIDI;
   define String TA_UPDATEUI;
   define String TA_NRPNGRACE;

   MIDISynthProfileDataProphet12 *data;
   Prophet12_Patch *patch;  // Reference to current patch in data.patches[]. never null.
   STX_MIDIInDevice *in_dev;
   STX_MIDIOutDevice *out_dev;
   byte midi_ch;
   boolean b_have_sysex;
   Buffer sysex_buffer;  // Incoming sysex data

   short current_midi_patch_nr = -1; // to avoid unnecessary MIDI program selects
   short queued_midi_patch_nr = -1;
   boolean b_queued_midi_send_patch;
   boolean b_first_midi_send_patch;  // send entire patch at first
   protected boolean b_first_rebuild_patch_names;

   protected boolean b_lock_replay_patch;  // temporarily true when diff mode is enabled and patch is changed

   Prophet12_Patch *patch_clipboard;

   Prophet12_Patch *init_patch;

   Prophet12_Patch *rand_patch;

   Prophet12_Patch *temp_patch;

   protected TabSwitch *ts_groups;

   protected Label *lb_patch_name;  // over TabSwitch

   // Patch
   protected CheckBox   *cb_patch_autosend;
   protected CheckBox   *cb_patch_diff;
   protected Button     *bt_patch_project;
   protected ComboBox   *cm_patch_nr;
   protected TextField  *tf_patch_name;
   protected CheckBox   *cb_patch_recvnames;
   protected TextField  *tf_layer_a_name;
   protected ComboBox   *cm_abmode;
   protected FloatParam *fp_splitpoint;
   protected FloatParam *fp_mastertune_coarse;
   protected FloatParam *fp_mastertune_fine;
   protected TextField  *tf_layer_b_name;
   protected ComboBox   *cm_patch_category;
   protected ComboBox   *cm_find_category;
   protected TextField  *tf_find_name;
   protected Button     *bt_find_catprev;
   protected Button     *bt_find_catbrowse;
   protected ComboBoxPopup *cmp_find_catbrowse;
   protected Button     *bt_find_catnext;
   protected ComboBox   *cm_patch_voicemode;
   protected ComboBox   *cm_patch_nr_midi;
   protected CheckBox   *cb_patch_midi_follow;
   protected CheckBox   *cb_patch_proxy_follow;
   protected CheckBox   *cb_patch_proxy_lock;
   protected CheckBox   *cb_patch_proxy_reset;
   protected CheckBox   *cb_nrpn_recv;

   // Patch Utils
   protected Button     *bt_patch_send;
   protected Button     *bt_patch_receive_bank;
   protected Button     *bt_patch_receive_edit;
   protected Button     *bt_patch_receive_prg;
   // // protected CheckBox   *cb_bug_workarounds;

   // Patch Utils C'N'P
   protected Button *bt_patch_copy;
   protected Button *bt_patch_paste;
   protected Button *bt_patch_init;

   protected Button *bt_patch_tools;
   protected PopupMenu *pm_tools;
   Button *bt_mts;

   // Program
   define int MENU_VOICE  = 0;
   define int MENU_OSC    = 1;
   define int MENU_ENV    = 2;
   define int MENU_LFO    = 3;
   define int MENU_DELAY  = 4;
   define int MENU_MATRIX = 5;

   protected ComboBox    *cm_prg_menu_layer;
   protected CheckBox    *cb_prg_menu_solo;
   protected EditMIDISynthFormProphet12MenuPanel *pn_prg_menu;
   protected LayerSwitch *ls_prg_menu;
   protected Button      *bt_prg_menu_osc;
   protected Button      *bt_prg_menu_voice;
   protected Button      *bt_prg_menu_env;
   protected Button      *bt_prg_menu_lfo;
   protected Button      *bt_prg_menu_delay;
   protected Button      *bt_prg_menu_matrix;
   protected FloatParam  *fp_prg_menu_multioff;
   protected FloatParam  *fp_prg_menu_multinum;
   protected CheckBox    *cb_prg_menu_multiedit;

   protected Prophet12_OscForm *prg_osc1;
   protected Prophet12_OscForm *prg_osc2;
   protected Prophet12_OscForm *prg_osc3;
   protected Prophet12_OscForm *prg_osc4;

   protected FloatParam *fp_lpffreq;
   protected FloatParam *fp_lpfres;
   protected FloatParam *fp_lpfkeyamount;
   protected CheckBox   *cb_lpf4pole;

   protected FloatParam *fp_hpffreq;
   protected FloatParam *fp_hpfres;
   protected FloatParam *fp_hpfkeyamount;

   protected FloatParam *fp_fbamount;
   protected FloatParam *fp_fbtune;
   protected CheckBox   *cb_fb;

   protected ComboBox   *cm_fmmode;

   protected CheckBox   *cb_charenable;
   protected FloatParam *fp_sub;
   protected FloatParam *fp_air;
   protected FloatParam *fp_girth;
   protected FloatParam *fp_hack;
   protected FloatParam *fp_decimate;
   protected FloatParam *fp_drive;

   protected FloatParam *fp_voicevol;
   protected FloatParam *fp_vcaext;
   protected FloatParam *fp_panext;
   protected FloatParam *fp_panspread;
   protected FloatParam *fp_distamount;

   protected CheckBox   *cb_glide;
   protected ComboBox   *cm_glidemode;
   protected FloatParam *fp_pitchbendup;
   protected FloatParam *fp_pitchbenddown;

   protected CheckBox   *cb_uni;
   protected FloatParam *fp_unidetune;
   protected ComboBox   *cm_unimode;
   protected ComboBox   *cm_unikeyassign;
   protected CheckBox   *cb_arp;

   protected Prophet12_EnvForm *prg_env1;  // VCA
   protected Prophet12_EnvForm *prg_env2;  // LPF
   protected Prophet12_EnvForm *prg_env3;  // Aux3
   protected Prophet12_EnvForm *prg_env4;  // Aux4

   protected Prophet12_LFOForm *prg_lfo1;
   protected Prophet12_LFOForm *prg_lfo2;
   protected Prophet12_LFOForm *prg_lfo3;
   protected Prophet12_LFOForm *prg_lfo4;

   protected Prophet12_DelayForm *prg_delay1;
   protected Prophet12_DelayForm *prg_delay2;
   protected Prophet12_DelayForm *prg_delay3;
   protected Prophet12_DelayForm *prg_delay4;

   protected Prophet12_MatrixForm *prg_matrix;


   protected TimerAction *ta_midisend;
   protected TimerAction *ta_updatemidi;
   protected TimerAction *ta_updateui;
   protected TimerAction *ta_nrpngrace;

   protected boolean b_patch_midi_follow;
   protected boolean b_patch_proxy_follow;
   protected boolean b_patch_proxy_lock;

   protected boolean b_nrpngrace;  // true=discard incoming NRPNs after sending NRPN

   static Prophet12_Program *layer_clipboard;
   static Prophet12_Program *layer_clipboard_swap;

   // Morph:
   protected ComboBox *cm_morph_patch_nr_l;
   protected ComboBox *cm_morph_patch_nr_r;
   protected Button   *bt_morph_swap;
   protected Button   *bt_morph_select_all_or_none;
   protected ComboBox *cm_morph_mode;
   protected ComboBox *cm_morph_layer;
   protected Button   *bt_morph_randomize;
   protected CheckBox *cb_morph_auto;
   protected CheckBox *cb_morph_preview;

   protected Prophet12_MorphForm *morph_osc1;
   protected Prophet12_MorphForm *morph_osc2;
   protected Prophet12_MorphForm *morph_osc3;
   protected Prophet12_MorphForm *morph_osc4;

   protected Prophet12_MorphForm *morph_env1;
   protected Prophet12_MorphForm *morph_env2;
   protected Prophet12_MorphForm *morph_env3;
   protected Prophet12_MorphForm *morph_env4;

   protected Prophet12_MorphForm *morph_lfo1;
   protected Prophet12_MorphForm *morph_lfo2;
   protected Prophet12_MorphForm *morph_lfo3;
   protected Prophet12_MorphForm *morph_lfo4;

   protected Prophet12_MorphForm *morph_delay1;
   protected Prophet12_MorphForm *morph_delay2;
   protected Prophet12_MorphForm *morph_delay3;
   protected Prophet12_MorphForm *morph_delay4;

   protected Prophet12_MorphForm *morph_filter;
   protected Prophet12_MorphForm *morph_char;
   protected Prophet12_MorphForm *morph_volume;
   protected Prophet12_MorphForm *morph_glideuni;

   protected Prophet12_MorphForm *morph_global;

   protected PointerArray morph_forms;

   protected boolean b_bank_recv_in_progress;
   protected int bank_recv_src;  // 0..7
   protected int bank_recv_dst;  // 0..9

   protected boolean b_nrpn_batch;
   protected Buffer nrpn_batch_buf;

   // // // Used for modulation. Initialized with a copy of the current patch when handleProxyReset() is called.
   protected Prophet12_Patch *proxy_patch;   // reference to current "original state" patch (always valid)
   protected Prophet12_Patch *replay_patch;  // should match the synth patch state
   protected Prophet12_Patch *orig_replay_patch;  // patch state when entering editor
   protected Prophet12_Patch *shadow_patch;  // proxy modulated patch, will be synced with replay_patch
   protected MIDIPipeFrame *shadow_frame;    // valid during handleProxyEvents() and handleProxyReset()
   protected boolean b_proxy_force_send_all;  // true after program startup. reverts to false when proxy_program is selected for the first time

   MTSDialog *dlg_mts;


   // <method_init.png>
   public virtual init(MIDISynthProfile _profile) : boolean {
      EditMIDISynthForm::init(_profile);

      bank_names = ["U1",  "U2",  "U3",  "U4",
                    "F5",  "F6",  "F7",  "F8",
                    "E9",  "E10", "E11", "E12",
                    "E13", "E14", "E15", "E16",
                    "P17"
                    ];

      proxy_multimorph_bank = 17;  // bank idx + 1
      num_programs_per_bank = 99;
      num_banks             = 17;

      if(initPakFile("Prophet12.xfm"))
      {
         if(autoResolveIds(this))
         {
            cm_patch_category.setOptions(category_names);
            StringArray fltCat; fltCat.join(["*"], category_names);
            cm_find_category.setOptions(fltCat);

            pn_prg_menu.parent_editor <= this;

            if(!prg_osc1.init(this, 1))
               return false;

            if(!prg_osc2.init(this, 2))
               return false;

            if(!prg_osc3.init(this, 3))
               return false;

            if(!prg_osc4.init(this, 4))
               return false;

            if(!prg_env1.init(this, 1, false/*bHasDest*/))
               return false;

            if(!prg_env2.init(this, 2, false/*bHasDest*/))
               return false;

            if(!prg_env3.init(this, 3, true/*bHasDest*/))
               return false;

            if(!prg_env4.init(this, 4, true/*bHasDest*/))
               return false;

            if(!prg_lfo1.init(this, 1))
               return false;

            if(!prg_lfo2.init(this, 2))
               return false;

            if(!prg_lfo3.init(this, 3))
               return false;

            if(!prg_lfo4.init(this, 4))
               return false;

            if(!prg_delay1.init(this, 1))
               return false;

            if(!prg_delay2.init(this, 2))
               return false;

            if(!prg_delay3.init(this, 3))
               return false;

            if(!prg_delay4.init(this, 4))
               return false;

            if(!prg_matrix.init(this))
               return false;

            cm_glidemode.setOptions(glide_modes);

            cm_unimode     .setOptions(uni_modes);
            cm_unikeyassign.setOptions(uni_keyassign_modes);

            // Morph:
            if(!morph_osc1.init(this))
               return false;
            if(!morph_osc2.init(this))
               return false;
            if(!morph_osc3.init(this))
               return false;
            if(!morph_osc4.init(this))
               return false;
            morph_osc1.configureOsc();
            morph_osc2.configureOsc();
            morph_osc3.configureOsc();
            morph_osc4.configureOsc();

            if(!morph_env1.init(this))
               return false;
            if(!morph_env2.init(this))
               return false;
            if(!morph_env3.init(this))
               return false;
            morph_env3.configureEnv34OrLFO();
            if(!morph_env4.init(this))
               return false;
            morph_env4.configureEnv34OrLFO();

            if(!morph_lfo1.init(this))
               return false;
            if(!morph_lfo2.init(this))
               return false;
            if(!morph_lfo3.init(this))
               return false;
            if(!morph_lfo4.init(this))
               return false;
            morph_lfo1.configureEnv34OrLFO();
            morph_lfo2.configureEnv34OrLFO();
            morph_lfo3.configureEnv34OrLFO();
            morph_lfo4.configureEnv34OrLFO();

            if(!morph_delay1.init(this))
               return false;
            if(!morph_delay2.init(this))
               return false;
            if(!morph_delay3.init(this))
               return false;
            if(!morph_delay4.init(this))
               return false;

            if(!morph_filter.init(this))
               return false;
            if(!morph_char.init(this))
               return false;
            if(!morph_volume.init(this))
               return false;
            if(!morph_glideuni.init(this))
               return false;

            if(!morph_global.init(this))
               return false;
            morph_global.configureGlobal();
            morph_global.setGlobalToolTips();

            morph_forms = [
               morph_osc1,
               morph_osc2,
               morph_osc3,
               morph_osc4,
               morph_env1,
               morph_env2,
               morph_env3,
               morph_env4,
               morph_lfo1,
               morph_lfo2,
               morph_lfo3,
               morph_lfo4,
               morph_delay1,
               morph_delay2,
               morph_delay3,
               morph_delay4,
               morph_filter,
               morph_char,
               morph_volume,
               morph_glideuni,
               morph_global
                           ];

            initMMC();

            initTimers();

            patch_clipboard <= new Prophet12_Patch;
            patch_clipboard.init(this);

            init_patch <= new Prophet12_Patch;
            init_patch.init(this);

            rand_patch <= new Prophet12_Patch;
            rand_patch.init(this);
            rand_patch.loadRandom(RAND_MUSICAL_ENABLE);

            temp_patch <= new Prophet12_Patch;
            temp_patch.init(this);

            replay_patch <= new Prophet12_Patch;
            replay_patch.init(this);

            orig_replay_patch <= new Prophet12_Patch;
            orig_replay_patch.init(this);

            shadow_patch <= new Prophet12_Patch;
            shadow_patch.init(this);

            layer_clipboard <= new Prophet12_Program;
            layer_clipboard.loadInit(0);

            layer_clipboard_swap <= new Prophet12_Program;
            layer_clipboard_swap.loadInit(0);

            b_nrpn_batch = false;
            nrpn_batch_buf.size = 8192;

            Global.Debug("P12: editor initialization OK.");
            b_proxy_force_send_all = true;

            editor_singleton <= this;

            b_first_midi_send_patch = true;

            if(_profile.num_midi_tunings > 0)
            {
               bt_mts.setEditable(true);

               dlg_mts <= new MTSDialog;
               if(!dlg_mts.init())
               {
                  trace "[---] failed to init MTSDialog";
                  return false;
               }
            }

            dlg_randosc <= new P12_RandOscDialog;
            if(dlg_randosc.init())
            {
               return true;
            }
         }
      }

      return false;
   }

   // <midi_mmc.png>
   protected method initMMC() {

      mmcInit("EditMIDISynthFormProphet12");

      ////addBaseMMCTargets(this);
   }

   // <ui_timer.png>
   protected method initTimers() {
      ta_midisend   <= TimerAction.New(TA_MIDISEND, this, 200);
      ta_updatemidi <= TimerAction.New(TA_UPDATEMIDI, this, MIDI_UPDATE_RATE);
      ta_updateui   <= TimerAction.New(TA_UPDATEUI, this, UI_UPDATE_RATE);
      ta_nrpngrace  <= TimerAction.New(TA_NRPNGRACE, this, 50);
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {

      switch(ts_groups.getActiveTabIndex())
      {
         case 0: // Patch
            _retLayers.joinRR(_retLayers,
                              [
                                 bt_patch_project,
                                 cm_patch_nr,
                                 tf_patch_name,
                                 tf_layer_a_name,
                                 tf_layer_b_name,
                                 cm_patch_category,
                                 cm_find_category,
                                 tf_find_name,
                                 bt_find_catprev,
                                 bt_find_catbrowse,
                                 bt_find_catnext,

                                 cb_patch_autosend,
                                 cb_patch_diff,
                                 cb_patch_recvnames,
                                 cm_abmode,
                                 fp_splitpoint,
                                 fp_mastertune_coarse,
                                 fp_mastertune_fine,

                                 cm_patch_nr_midi,
                                 cb_patch_midi_follow,
                                 cb_patch_proxy_follow,
                                 cb_patch_proxy_lock,
                                 cb_patch_proxy_reset,

                                 bt_patch_send,
                                 bt_patch_receive_bank,
                                 bt_patch_receive_prg,
                                 bt_patch_receive_edit,
                                 // // cb_bug_workarounds,

                                 bt_patch_tools,
                                 bt_mts,

                                 bt_patch_copy,
                                 bt_patch_paste,
                                 bt_patch_init
                               ]
                              );
            break;

         case 1: // Program
            _retLayers.joinRR(_retLayers,
                              [
                                 cm_prg_menu_layer,
                                 cb_prg_menu_solo,
                                 bt_prg_menu_voice,
                                 bt_prg_menu_osc,
                                 bt_prg_menu_env,
                                 bt_prg_menu_lfo,
                                 bt_prg_menu_delay,
                                 bt_prg_menu_matrix,
                                 fp_prg_menu_multioff,
                                 fp_prg_menu_multinum,
                                 cb_prg_menu_multiedit
                               ]
                              );

            switch(ls_prg_menu.getCurrentChildNr())
            {
               case 0: // Osc
                  prg_osc1.addTabCycleOverrides(_retLayers);
                  prg_osc2.addTabCycleOverrides(_retLayers);
                  prg_osc3.addTabCycleOverrides(_retLayers);
                  prg_osc4.addTabCycleOverrides(_retLayers);
                  break;

               case 1: // Voice
                  _retLayers.joinRR(_retLayers,
                                    [
                                       fp_lpffreq,
                                       fp_lpfres,
                                       cb_lpf4pole,
                                       fp_lpfkeyamount,

                                       fp_hpffreq,
                                       fp_hpfres,
                                       fp_hpfkeyamount,

                                       fp_fbamount,
                                       fp_fbtune,
                                       cb_fb,
                                       cm_fmmode,

                                       fp_sub,
                                       fp_air,
                                       fp_girth,
                                       fp_hack,
                                       fp_decimate,
                                       fp_drive,
                                       cb_charenable,

                                       fp_voicevol,
                                       fp_vcaext,
                                       fp_panext,
                                       fp_panspread,
                                       fp_distamount,

                                       cm_glidemode,
                                       cb_glide,
                                       fp_pitchbendup,
                                       fp_pitchbenddown,
                                       fp_mastertune_coarse,
                                       fp_mastertune_fine,

                                       fp_unidetune,
                                       cm_unimode,
                                       cb_uni,
                                       cm_unikeyassign,
                                       cb_arp
                                     ]
                                    );
                  break;

               case 2: // Env
                  prg_env1.addTabCycleOverrides(_retLayers);
                  prg_env2.addTabCycleOverrides(_retLayers);
                  prg_env3.addTabCycleOverrides(_retLayers);
                  prg_env4.addTabCycleOverrides(_retLayers);
                  break;

               case 3: // LFO
                  prg_lfo1.addTabCycleOverrides(_retLayers);
                  prg_lfo2.addTabCycleOverrides(_retLayers);
                  prg_lfo3.addTabCycleOverrides(_retLayers);
                  prg_lfo4.addTabCycleOverrides(_retLayers);
                  break;

               case 4: // Delay
                  prg_delay1.addTabCycleOverrides(_retLayers);
                  prg_delay2.addTabCycleOverrides(_retLayers);
                  prg_delay3.addTabCycleOverrides(_retLayers);
                  prg_delay4.addTabCycleOverrides(_retLayers);
                  break;

               case 5: // Matrix
                  prg_matrix.addTabCycleOverrides(_retLayers);
                  break;
            }
            break;

         case 2: // Morph
            _retLayers.joinRR(_retLayers,
                              [
                                 cm_morph_patch_nr_l,
                                 bt_morph_swap,
                                 cm_morph_patch_nr_r,
                                 bt_morph_select_all_or_none,
                                 cm_morph_mode,
                                 cm_morph_layer,
                                 bt_morph_randomize
                               ]
                              );

            morph_osc1.addTabCycleOverrides(_retLayers);
            morph_osc2.addTabCycleOverrides(_retLayers);
            morph_osc3.addTabCycleOverrides(_retLayers);
            morph_osc4.addTabCycleOverrides(_retLayers);

            morph_env1.addTabCycleOverrides(_retLayers);
            morph_env2.addTabCycleOverrides(_retLayers);
            morph_env3.addTabCycleOverrides(_retLayers);
            morph_env4.addTabCycleOverrides(_retLayers);

            morph_lfo1.addTabCycleOverrides(_retLayers);
            morph_lfo2.addTabCycleOverrides(_retLayers);
            morph_lfo3.addTabCycleOverrides(_retLayers);
            morph_lfo4.addTabCycleOverrides(_retLayers);

            morph_delay1.addTabCycleOverrides(_retLayers);
            morph_delay2.addTabCycleOverrides(_retLayers);
            morph_delay3.addTabCycleOverrides(_retLayers);
            morph_delay4.addTabCycleOverrides(_retLayers);

            morph_global.addTabCycleOverrides(_retLayers);
            break;
      }

   }

   // <ui.png>
   public virtual invalidateSizeCache() {
      EditMIDISynthForm::invalidateSizeCache();
      lb_patch_name.invalidateSizeCache();
      lb_patch_name.setRequiredSize2f(1, 1);
   }

   // <ui.png>
   public virtual layoutHierarchy(local boolean _bInvalidateSizeCaches, local boolean _bLayoutFinal) {

      if(!_bLayoutFinal)
      {
         lb_patch_name.setRequiredSize2f(1, 1);
      }

      EditMIDISynthForm::layoutHierarchy(_bInvalidateSizeCaches, _bLayoutFinal);

      if(_bLayoutFinal)
      {
         updatePatchNameLabel();
      }
   }

   // <ui_update.png>
   protected method updatePatchNameLabel() {
      lb_patch_name.setRequiredSize2f(0, 0);
      lb_patch_name.invalidateSizeCache();

      StringArray patchNames;
      StringArray patchNamesCat;
      buildFilteredPatchNames(patchNames, patchNamesCat, null/*fltPatchIndices*/, -1, null/*nameFilterOrNull*/);

      lb_patch_name.setCaption(patchNames.get(data.current_patch_nr));
      lb_patch_name.setSize2f(170*UI.font_scaling,
                              lb_patch_name.getMinimumSizeY()
                              );
      lb_patch_name.setPosition2f(ts_groups.getHeaderSizeX()  + (getSizeX() - ts_groups.getHeaderSizeX() - lb_patch_name.getSizeX())*0.5,
                                  ts_groups.getPositionY() + (ts_groups.getHeaderSizeY() - lb_patch_name.getSizeY())*0.5
                                  );
      lb_patch_name.redraw();

      // trace "xxx layout lb_patch_name: pos="+lb_patch_name.getPositionString()+" sz="+lb_patch_name.getSizeString();
   }

   // <save.png>
   public method saveState(Stream _ofs) {
      // Version
      _ofs.i16 = 2;

      _ofs.i16 = cm_morph_patch_nr_l.getSelectedOption();
      _ofs.i16 = cm_morph_patch_nr_r.getSelectedOption();
      _ofs.i8  = cm_morph_mode.getSelectedOption();
      _ofs.i8  = cm_morph_layer.getSelectedOption();
      _ofs.i8  = cb_morph_auto.isSelected();
      _ofs.i8  = cb_morph_preview.isSelected();  // v2+
      morph_osc1.saveState(_ofs);
      morph_osc2.saveState(_ofs);
      morph_osc3.saveState(_ofs);
      morph_osc4.saveState(_ofs);
      morph_env1.saveState(_ofs);
      morph_env2.saveState(_ofs);
      morph_env3.saveState(_ofs);
      morph_env4.saveState(_ofs);
      morph_lfo1.saveState(_ofs);
      morph_lfo2.saveState(_ofs);
      morph_lfo3.saveState(_ofs);
      morph_lfo4.saveState(_ofs);
      morph_delay1  .saveState(_ofs);
      morph_delay2  .saveState(_ofs);
      morph_delay3  .saveState(_ofs);
      morph_delay4  .saveState(_ofs);
      morph_filter  .saveState(_ofs);
      morph_char    .saveState(_ofs);
      morph_volume  .saveState(_ofs);
      morph_glideuni.saveState(_ofs);
      morph_global  .saveState(_ofs);
   }

   // <load.png>
   public method loadState(Stream _ifs, MIDISynthProfileDataProphet12 _data) : boolean {
      short ver = _ifs.u16;

      if(1 <= ver < 99)
      {
         data <= _data;
         rebuildPatchNames();

         // Load morph settings
         short patchNr = _ifs.u16;
         // trace "xxx patchNr="+patchNr;
         cm_morph_patch_nr_l.setSelectedOption(patchNr);
         cm_morph_patch_nr_r.setSelectedOption(_ifs.u16);
         cm_morph_mode.setSelectedOption(_ifs.i8);
         cm_morph_layer.setSelectedOption(_ifs.i8);
         cb_morph_auto.setSelected(_ifs.i8);

         if(ver >= 2)
         {
            cb_morph_preview.setSelected(_ifs.i8);
         }

         if(!morph_osc1.loadState(_ifs))
            return false;
         if(!morph_osc2.loadState(_ifs))
            return false;
         if(!morph_osc3.loadState(_ifs))
            return false;
         if(!morph_osc4.loadState(_ifs))
            return false;
         if(!morph_env1.loadState(_ifs))
            return false;
         if(!morph_env2.loadState(_ifs))
            return false;
         if(!morph_env3.loadState(_ifs))
            return false;
         if(!morph_env4.loadState(_ifs))
            return false;
         if(!morph_lfo1.loadState(_ifs))
            return false;
         if(!morph_lfo2.loadState(_ifs))
            return false;
         if(!morph_lfo3.loadState(_ifs))
            return false;
         if(!morph_lfo4.loadState(_ifs))
            return false;
         if(!morph_delay1.loadState(_ifs))
            return false;
         if(!morph_delay2.loadState(_ifs))
            return false;
         if(!morph_delay3.loadState(_ifs))
            return false;
         if(!morph_delay4.loadState(_ifs))
            return false;
         if(!morph_filter.loadState(_ifs))
            return false;
         if(!morph_char.loadState(_ifs))
            return false;
         if(!morph_volume.loadState(_ifs))
            return false;
         if(!morph_glideuni.loadState(_ifs))
            return false;
         if(!morph_global.loadState(_ifs))
            return false;

         return true;
      }
      else
      {
         trace "[---] EditMIDISynthFormProphet12::loadState: invalid ver="+ver;
         return false;
      }
   }

   // <method.png>
   public virtual handlePostReload() {
      // trace "xxx reload: send patch b_autosend="+data.b_autosend;
      b_force_send_after_mute = true;

      if(data.b_autosend)
      {
         // trace "xxx reload: call handlePatchNrChanged()";
         handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
      }
   }

   // <method_get.png>
   module method getEditLayerNr() : int {
      return cm_prg_menu_layer.getSelectedOption() & 1;
   }

   // <method_get.png>
   module method getEditLayerNrAB() : int {
      return cm_prg_menu_layer.getSelectedOption();
   }

   // <method_get.png>
   namespace method getEditLayer() : Prophet12_Program {
      if(0 == getEditLayerNr())
      {
         return patch.layer_a;
      }
      else
      {
         return patch.layer_b;
      }
   }

   // <method_update.png>
   public =replay= updateShadowPatch(local Prophet12_Patch _patch) {
      if(!b_lock_replay_patch)
      {
         // Global.Debug("P12::updateShadowPatch()");
         // Utils.Backtrace();
         replay_patch.copyFrom(_patch);
         shadow_patch.copyFrom(_patch);
      }
   }

   // <method_handle.png>
   public =replay= method handlePatchEdited() {
      // called when patch has been edited via the UI or incoming NRPNs
      boolean bAllowUpdate = true;

      if(maybe == b_patch_proxy_lock)
      {
         bAllowUpdate = editingProxyPatch();
      }

      if(bAllowUpdate)
         updateShadowPatch(patch);
   }

   // <method_handle.png>
   public method tryMultiEditOsc(int _nr, String _id, float _val, boolean _bExt) {
      if(VMOD_LALT == UI.GetKeyMod())
      {
         if(1 != _nr)
         {
            prg_osc1.tryMultiEditById(_id, _val, _bExt);
         }

         if(2 != _nr)
         {
            prg_osc2.tryMultiEditById(_id, _val, _bExt);
         }

         if(3 != _nr)
         {
            prg_osc3.tryMultiEditById(_id, _val, _bExt);
         }

         if(4 != _nr)
         {
            prg_osc4.tryMultiEditById(_id, _val, _bExt);
         }
      }
   }

   // <method_handle.png>
   public method tryMultiEditEnv(int _nr, String _id, float _val, boolean _bExt) {
      if(VMOD_LALT == UI.GetKeyMod())
      {
         if(1 != _nr)
         {
            if(_id != "cm_mod_dest")
            {
               prg_env1.tryMultiEditById(_id, _val, _bExt);
            }
         }

         if(2 != _nr)
         {
            if(_id != "cm_mod_dest")
            {
               prg_env2.tryMultiEditById(_id, _val, _bExt);
            }
         }

         if(3 != _nr)
         {
            prg_env3.tryMultiEditById(_id, _val, _bExt);
         }

         if(4 != _nr)
         {
            prg_env4.tryMultiEditById(_id, _val, _bExt);
         }
      }
   }

   // <method_handle.png>
   public method tryMultiEditLFO(int _nr, String _id, float _val, boolean _bExt) {
      if(VMOD_LALT == UI.GetKeyMod())
      {
         if(1 != _nr)
         {
            prg_lfo1.tryMultiEditById(_id, _val, _bExt);
         }

         if(2 != _nr)
         {
            prg_lfo2.tryMultiEditById(_id, _val, _bExt);
         }

         if(3 != _nr)
         {
            prg_lfo3.tryMultiEditById(_id, _val, _bExt);
         }

         if(4 != _nr)
         {
            prg_lfo4.tryMultiEditById(_id, _val, _bExt);
         }
      }
   }

   // <method_handle.png>
   public method tryMultiEditDelay(int _nr, String _id, float _val, boolean _bExt) {
      if(VMOD_LALT == UI.GetKeyMod())
      {
         if(1 != _nr)
         {
            prg_delay1.tryMultiEditById(_id, _val, _bExt);
         }

         if(2 != _nr)
         {
            prg_delay2.tryMultiEditById(_id, _val, _bExt);
         }

         if(3 != _nr)
         {
            prg_delay3.tryMultiEditById(_id, _val, _bExt);
         }

         if(4 != _nr)
         {
            prg_delay4.tryMultiEditById(_id, _val, _bExt);
         }
      }
   }

   // <ui_show.png>
   public =replay= virtual showDataStatic(MIDISynthProfileDataProphet12 _data,
                                          STX_MIDIInDevice  _inDev,
                                          STX_MIDIOutDevice _outDev,
                                          byte              _midiCh
                                          ) {
      boolean bFirst = (@(data) == @(null));

      data    <= _data;
      in_dev  <= _inDev;
      out_dev <= _outDev;
      midi_ch  = _midiCh;

      patch <= _data.patches.get(_data.current_patch_nr);
      proxy_patch <= patch;

      if(bFirst)
      {
         updateShadowPatch(patch);
      }
   }

   // <ui_show.png>
   public =replay= virtual showData(MIDISynthProfileDataProphet12 _data,
                                    STX_MIDIInDevice  _inDev,
                                    STX_MIDIOutDevice _outDev,
                                    byte              _midiCh
                                    ) {

      orig_replay_patch.copyFrom(replay_patch);

      showDataStatic(_data, _inDev, _outDev, _midiCh);

      if(true == data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      updateUIFromPatch();

      if(null == in_dev)
      {
         Global.Error("Prophet12: input device not configured or found");
      }

      if(null == out_dev)
      {
         Global.Error("Prophet12: output device not configured or found");
      }
      else
      {
         if(-1 == current_midi_patch_nr)
         {
            if(b_patch_midi_follow)
            {
               midiSelectPatch(0);
            }
         }
      }

      fp_prg_menu_multioff.setValue(data.multiedit_off + 1);
      fp_prg_menu_multinum.setValue(data.multiedit_num);
      cb_prg_menu_multiedit.setSelected(data.b_multiedit);
      handleMultiEditEnableChanged(true/*bQuiet*/); // update bgtint

   }

   // <ui_show.png>
   public virtual enter() {
      b_queued_midi_send_patch = false;
      ta_updatemidi.schedule();
      MIDI.AddMIDIMapEventListener(this);
   }

   // <ui_show.png>
   public virtual leave() {
      b_queued_midi_send_patch = false;
      MIDI.RemoveMIDIMapEventListener(this);

      ta_midisend.cancel();
      ta_updatemidi.cancel();
      ta_updateui.cancel();
      ta_nrpngrace.cancel();
   }

   // <ui_focus.png>
   public virtual refocusDefault() {
      UI.SetKeyboardFocus(ts_groups);
   }

   // <method.png>
   protected method buildNameFiltersFromString(StringArray nameFilters, String _nameFilterOrNull) {
      String *fltStr;

      if(null != _nameFilterOrNull)
      {
         if(!_nameFilterOrNull.isBlank())
         {
            nameFilters = _nameFilterOrNull.splitChar(' ');

            foreach fltStr in nameFilters
            {
               fltStr.trim();
               fltStr.toLower();
            }
         }
         else
         {
            nameFilters.empty();
         }
      }
      else
      {
         nameFilters.empty();
      }
   }

   // <method.png>
   protected method matchNameFilters(Prophet12_Patch _patch, StringArray _nameFilters) {
      String *fltStr;
      boolean ret;

      if(0 != _nameFilters.numElements)
      {
         ret = false;

         // Try patch name
         foreach fltStr in _nameFilters
         {
            if(((_patch.patch_name).toLower()) & fltStr)
            {
               ret = true;
               break;
            }
         }

         if(!ret)
         {
            // Try layer A name
            foreach fltStr in _nameFilters
            {
               if(((_patch.layer_a.program_name).toLower()) & fltStr)
               {
                  ret = true;
                  break;
               }
            }

            if(!ret)
            {
               // Try layer B name
               foreach fltStr in _nameFilters
               {
                  if(((_patch.layer_b.program_name).toLower()) & fltStr)
                  {
                     ret = true;
                     break;
                  }
               }
            }
         }

      }
      else
      {
         ret = true;
      }

      return ret;
   }

   // <method.png>
   protected method buildFilteredPatchNames(StringArray midiPatchNames,
                                            StringArray midiPatchNamesCat,
                                            IntArray    fltPatchIndices,
                                            int         _catFilter,
                                            String      _nameFilterOrNull
                                            ) {
      String bankName = "U1";
      midiPatchNames.empty();
      midiPatchNamesCat.empty();
      if(null != fltPatchIndices)
         fltPatchIndices.empty();
      int bankIdx = 0;
      int patchIdx = 0;
      String patchName;
      Prophet12_Patch *p;

      StringArray nameFilters;
      buildNameFiltersFromString(nameFilters, _nameFilterOrNull);

      int fltCurPatchNr = -1;
      int fltPatchIdx = 0;

      loop(8)
      {
         byte prgNr = 1;
         loop(99)
         {
            p <= data.patches.get(patchIdx);

            if( (-1 == _catFilter) || (_catFilter == p.patch_category) )
            {
               if(matchNameFilters(p, nameFilters))
               {
                  if(patchIdx == data.current_patch_nr)
                  {
                     fltCurPatchNr = fltPatchIdx;
                  }

                  if(null != fltPatchIndices)
                     fltPatchIndices.add(patchIdx);

                  patchName = bankName+" P"+prgNr+": "+p.getPatchName();
                  if(0 != p.ab_mode)
                     patchName.append("*");
                  midiPatchNames.add(patchName);
                  if(0 != p.patch_category)
                  {
                     patchName.append("\t["+category_names.get(p.patch_category)+"]");  // \t = start right align
                  }
                  midiPatchNamesCat.add(patchName);

                  fltPatchIdx++;
               }
            }

            prgNr++;
            patchIdx++;
         }

         bankIdx++;

         if(4 == bankIdx)
            bankName[0] = 'F';
         bankName = tcchar(bankName[0]) + (bankIdx + 1);
      }

      bankName[0] = 'E';
      loop(MIDISynthProfileDataProphet12.NUM_PATCHES - (8*99))
      {
         p <= data.patches.get(patchIdx);

         if( (-1 == _catFilter) || (_catFilter == p.patch_category) )
         {
            if(matchNameFilters(p, nameFilters))
            {
               if(patchIdx == data.current_patch_nr)
               {
                  fltCurPatchNr = fltPatchIdx;
               }

               if(null != fltPatchIndices)
                  fltPatchIndices.add(patchIdx);

               patchName = bankName+" P"+((patchIdx%99)+1)+": "+p.getPatchName();
               if(0 != p.ab_mode)
                  patchName.append("*");
               midiPatchNames.add(patchName);
               if(0 != p.patch_category)
               {
                  patchName.append("\t["+category_names.get(p.patch_category)+"]");  // \t = start right align
               }
               midiPatchNamesCat.add(patchName);

               fltPatchIdx++;
            }
         }

         if(98 == (patchIdx % 99))
         {
            bankIdx++;
            bankName = tcchar(bankName[0])+(bankIdx + 1);
         }

         if(16 == bankIdx)
            bankName[0] = 'P';

         patchIdx++;
      }

      return fltCurPatchNr;
   }

   // <method.png>
   protected method rebuildPatchNames() {

      b_first_rebuild_patch_names = false;

      StringArray midiPatchNames;
      StringArray midiPatchNamesCat;

      buildFilteredPatchNames(midiPatchNames, midiPatchNamesCat, null/*fltPatchIndices*/, -1, null/*nameFilterOrNull*/);

      cm_patch_nr_midi.setOptions(midiPatchNames);

      cm_patch_nr.setOptions(midiPatchNames);
      cm_patch_nr.setOptionsLong(midiPatchNamesCat);

      cm_morph_patch_nr_l.setOptions(midiPatchNames);
      cm_morph_patch_nr_l.setOptionsLong(midiPatchNamesCat);

      cm_morph_patch_nr_r.setOptions(midiPatchNames);
      cm_morph_patch_nr_r.setOptionsLong(midiPatchNamesCat);
   }

   // <ui_update.png>
   protected method updateUIFromPatch() {
      if(b_debug)
         Global.Debug2("Prophet12::updateUIFromPatch: patch_nr="+data.current_patch_nr);

      int v;

      // Patch

      b_lock_replay_patch = data.b_send_diff;  // prevent showLayer() from calling handlePatchEdited() / updateShadowPatch()

      rebuildPatchNames();

      cm_patch_nr_midi  .setSelectedOption(current_midi_patch_nr);
      cm_patch_nr       .setSelectedOption(data.current_patch_nr);
      cb_patch_autosend .setSelected(      data.b_autosend);
      cb_patch_diff     .setSelected(      data.b_send_diff);
      cb_morph_auto     .setSelected(      data.b_morph_auto);
      cb_morph_preview  .setSelected(      data.b_morph_preview);
      tf_patch_name     .setText(          patch.patch_name);
      cm_patch_category .setSelectedOption(patch.patch_category);
      cb_patch_midi_follow  .setSelected (b_patch_midi_follow);
      cb_patch_proxy_follow .setSelected (b_patch_proxy_follow);
      cb_patch_proxy_lock   .setSelected (b_patch_proxy_lock);
      cb_patch_proxy_reset  .setSelected (data.b_proxy_reset);

      // Patch widgets
      tf_patch_name.setText(patch.getPatchName());

      tf_layer_a_name.setText(patch.layer_a.program_name);
      tf_layer_b_name.setText(patch.layer_b.program_name);

      cm_abmode.setSelectedOption(patch.ab_mode);
      fp_splitpoint.setValue(patch.split_point);

      fp_mastertune_coarse.setValue(patch.mastertune_coarse - 12);
      fp_mastertune_fine  .setValue(patch.mastertune_fine - 50);

      Prophet12_Program layer <= getEditLayer();

      prg_osc1.showOsc(layer.oscs[0]);
      prg_osc2.showOsc(layer.oscs[1]);
      prg_osc3.showOsc(layer.oscs[2]);
      prg_osc4.showOsc(layer.oscs[3]);

      prg_env1.showEnv(layer.envs[0]);
      prg_env2.showEnv(layer.envs[1]);
      prg_env3.showEnv(layer.envs[2]);
      prg_env4.showEnv(layer.envs[3]);

      prg_lfo1.showLFO(layer.lfos[0]);
      prg_lfo2.showLFO(layer.lfos[1]);
      prg_lfo3.showLFO(layer.lfos[2]);
      prg_lfo4.showLFO(layer.lfos[3]);

      prg_delay1.showDelay(layer.delays[0]);
      prg_delay2.showDelay(layer.delays[1]);
      prg_delay3.showDelay(layer.delays[2]);
      prg_delay4.showDelay(layer.delays[3]);

      prg_matrix.showLayer(layer);

      fp_lpffreq     .setValueAndEnable(layer.lpf_freq);
      fp_lpfres      .setValueAndEnable(layer.lpf_res);
      fp_lpfkeyamount.setValueAndEnable(layer.lpf_keyamount);
      cb_lpf4pole    .setSelectedAndEnable(layer.b_lpf_4pole);

      fp_hpffreq     .setValueAndEnable(layer.hpf_freq);
      fp_hpfres      .setValueAndEnable(layer.hpf_res);
      fp_hpfkeyamount.setValueAndEnable(layer.hpf_keyamount);

      fp_fbamount    .setValueAndEnable(layer.fb_amount - 127);
      fp_fbtune      .setValueAndEnable(layer.fb_tune);
      cb_fb          .setSelectedAndEnable(layer.b_fb);

      cm_fmmode     .setSelectedOptionAndEnable(layer.b_linear_fm);

      fp_voicevol    .setValueAndEnable(layer.voice_vol);
      fp_vcaext      .setValueAndEnable(layer.vca_ext);
      fp_panext      .setValueAndEnable(layer.pan_ext);
      fp_panspread   .setValueAndEnable(layer.pan_spread);
      fp_distamount  .setValueAndEnable(layer.dist_amount);

      cb_charenable  .setSelectedAndEnable(layer.b_char_enable);
      fp_sub         .setValueAndEnable(layer.sub_osc);
      fp_air         .setValueAndEnable(layer.air);
      fp_girth       .setValueAndEnable(layer.girth);
      fp_hack        .setValueAndEnable(layer.hack);
      fp_decimate    .setValueAndEnable(layer.decimate);
      fp_drive       .setValueAndEnable(layer.drive);

      cb_glide             .setSelectedAndEnable(layer.b_glide);
      cm_glidemode         .setSelectedOptionAndEnable(layer.glide_mode);
      fp_pitchbendup       .setValueAndEnable(layer.pitchbend_up);
      fp_pitchbenddown     .setValueAndEnable(layer.pitchbend_down);

      cb_uni         .setSelectedAndEnable(layer.b_uni);
      fp_unidetune   .setValueAndEnable(layer.uni_detune);
      cm_unimode     .setSelectedOptionAndEnable(layer.uni_mode);
      cm_unikeyassign.setSelectedOptionAndEnable(layer.uni_keyassign);
      cb_arp         .setSelectedAndEnable(layer.b_arp);

      updatePatchNameLabel();

      b_lock_replay_patch = false;

      redraw();
   }

   // <ui_midi.png>
   public =replay= method midiSelectPatch(short _patch) {
      if(b_debug)
         Global.Debug("Prophet12::midiSelectPatch: patch="+_patch);

      if(_patch < (8*99))
      {
         if(current_midi_patch_nr != _patch)
         {
            if(null != out_dev)
            {
               out_dev.bankSelect(midi_ch, (_patch / 99));
               out_dev.programChange(midi_ch, (_patch % 99));
               out_dev.send(milliSeconds());
               TKS.sleep(100);
            }

            current_midi_patch_nr = _patch;

            cm_patch_nr_midi.setSelectedOption(_patch);
            cm_patch_nr_midi.redraw();
         }
      }

   }

   // <ui_midi.png>
   public =replay= method midiSendBuffer(Buffer _b) {
      if(null != out_dev)
      {
         out_dev.addBuffer(_b);
         out_dev.send(milliSeconds());
      }
   }

   // <ui_midi.png>
   public virtual mmlHandleEventUI(MIDIMapEvent _ev) : boolean {
      // trace "[trc] Prophet12::mmlHandleEventUI";
      if(@(_ev.dev) == @(in_dev))
      {
         // trace "[trc] Prophet12::mmlHandleEventUI: is in_dev";

         if(MIDIMapDefs.TYPE_SYSEX == _ev.type)
         {
            sysex_buffer = _ev.sysex_buffer;
            b_have_sysex = true;
         }
         else if(MIDIMapDefs.TYPE_NRPN == _ev.type)
         {
            if(cb_nrpn_recv.isSelected())
            {
               if(!b_nrpngrace)
               {
                  if(patch.tryRecvNRPN(_ev.ext_type, _ev.arg1))
                  {
                     updateShadowPatch(patch);
                     scheduleUIUpdate();
                  }
               }
            }
         }
      }
      return false;
   }

   // <replay.png>
   public virtual handleProxyReset(byte _midiCh, MIDIPipeFrame _frame) {
      // Called from replay thread
      if(null != out_dev)
      {
         if(data.b_proxy_reset)
         {
            // Reset to original patch state
            shadow_frame <= _frame;

            proxy_patch <= data.patches.get(data.current_patch_nr);
            proxy_bank = data.current_patch_nr / 99;
            proxy_program = data.current_patch_nr % 99;

            if(true != b_patch_proxy_lock)
            {
               if(b_proxy_force_send_all)
               {
                  b_proxy_force_send_all = false;
                  proxy_patch.sendPatch(true/*bProxy*/);

                  if(b_debug_proxy)
                     Global.Debug("P12::handleProxyReset: send full patch \""+proxy_patch.patch_name+"\"");
               }
               else
               {
                  replay_patch.sendDiff(proxy_patch, true/*bProxy*/);
               }

               updateShadowPatch(proxy_patch);

               if(b_debug_proxy)
                  Global.Debug("P12::handleProxyReset: numNRPN="+shadow_frame.getNumEventsNRPN());
            }
         }
      }
   }

   // <replay.png>
   public virtual handleProxyBankSelect(byte _midiCh, short _bankNr) {
      // Called from replay thread
      proxy_bank = mathClampi(_bankNr, 1, 17) - 1;
   }

   // <replay.png>
   public virtual handleProxyProgramChange(byte          _midiCh,
                                           short         _programNr,
                                           MIDIPipeFrame _frameOut,
                                           boolean       _bMorphFollows
                                           ) {
      // Called from replay thread
      proxy_program = mathClampi(_programNr, 1, 99) - 1;

      if(null != data)
      {
         proxy_patch <= data.patches.get((proxy_bank * 99) + proxy_program);

         if(true != b_patch_proxy_lock)
         {
            if(b_debug_proxy)
               Global.Debug("P12::handleProxyProgramChange: select patch \""+proxy_patch.patch_name+"\" bMorphFollows="+_bMorphFollows);

            if(!_bMorphFollows)
            {
               shadow_frame <= _frameOut;
               replay_patch.sendDiff(proxy_patch, true/*bProxy*/);
               updateShadowPatch(proxy_patch);
            }

            if(b_patch_proxy_follow)
            {
               data.current_patch_nr = proxy_bank * 99 + proxy_program;
            }
         }

         if(b_debug_proxy)
            Global.Debug("P12: handleProxyProgramChange: frameOut.numEventsNRPN="+_frameOut.getNumEventsNRPN());
      }
   }

   // <replay.png>
   public virtual handleProxyBankSelectDst(byte _midiCh, short _bankNr) {
      // Called from replay thread
      proxy_bank_dst = mathClampi(_bankNr, 1, 17) - 1;
   }

   // <replay.png>
   public virtual handleProxyProgramChangeDst(byte _midiCh, short _programNr) {
      // Called from replay thread
      proxy_program_dst = mathClampi(_programNr, 1, 99) - 1;
   }

   // <replay.png>
   public virtual handleProxyAmountDst(byte _midiCh, float _amount) {
      // Called from replay thread
      proxy_amount_dst = _amount;
   }

   // <replay.png>
   public virtual handleProxyMorph(byte _midiCh, MIDIPipeFrame _frameOut) {
      Prophet12_Patch l <= data.patches.get(proxy_bank * 99 + proxy_program);
      Prophet12_Patch r <= data.patches.get(proxy_bank_dst * 99 + proxy_program_dst);

      morphPatchInt(shadow_patch, l, r, proxy_amount_dst, true/*bProxy*/);

      if(false == b_patch_proxy_lock)
      {
         shadow_frame <= _frameOut;

         if(b_debug_proxy)
            Global.Debug("P12::handleProxyMorph: send diff cur=\""+replay_patch.patch_name+"\" new=\""+shadow_patch.patch_name+"\"");

         replay_patch.sendDiff(shadow_patch, true/*bProxy*/);
         replay_patch.copyFrom(shadow_patch);

         if(b_debug_proxy)
            Global.Debug("P12: handleProxyMorph: frameOut.numEventsNRPN="+_frameOut.getNumEventsNRPN());
      }
   }

   // <replay.png>
   public virtual handleProxyEvents(byte          _midiCh,
                                    MIDIPipeFrame _frameIn,
                                    boolean       _bFrameRec,
                                    int           _inDev,
                                    byte          _inCh,
                                    MIDIPipeFrame _frameOut
                                    ) {
      // Called from replay thread
      if(null != out_dev)
      {
         int numEvents = _frameIn.getNumEventsNRPNByFlt(_inDev, _inCh);

         if(numEvents > 0)
         {
            int evIdx = 0;
            MIDIPipeEvent pev;

            boolean bSendDiff = false;

            loop(numEvents)
            {
               if(_frameIn.getEventByIdxAndFlt(evIdx, pev, MIDIPIPE_EVENT_TYPE_NRPN, _inDev, _inCh))
               {
                  short nrpn = pev.nrpn;
                  short nrpnValue = pev.nrpnValue;

                  if(shadow_patch.tryRecvNRPN(nrpn, nrpnValue))
                  {
                     bSendDiff = true;
                  }

                  // // // Forward to actual synth device
                  // // _frame.nrpn(true/*bset*/, out_dev.dev_idx, midi_ch, nrpn, nrpnValue);
               }

               evIdx++;
            }

            if(false == b_patch_proxy_lock)
            {
               if(bSendDiff)
               {
                  shadow_frame <= _frameOut;

                  replay_patch.sendDiff(shadow_patch, true/*bProxy*/);
                  replay_patch.copyFrom(shadow_patch);
               }

               if(b_debug_proxy)
                  Global.Debug("P12: handleProxyEvents: bSendDiff="+bSendDiff+" frameOut.numEventsNRPN="+_frameOut.getNumEventsNRPN());
            }
         }

      }
   }

   // <replay.png>
   public virtual handleProxyNotes(int _autoDevFlt, int _autoChFlt, MIDIPipeFrame _frame, boolean _bMuted) {
      // Forward events (on proxy node automation port) to actual synth device
      //  (note) all types except for RPN
      if(_frame.numEvents > 0)
      {
         if(null != out_dev)
         {
            MIDIPipeFrame frOut; frOut.empty();
            frOut.mergeFrameFltDst(_frame,
                                   _autoDevFlt/*fltDev*/,
                                   _autoChFlt/*fltCh*/,
                                   out_dev.dev_idx/*dstDev*/,
                                   midi_ch/*dstCh*/,
                                   true/*bMergeNotes*/,
                                   false/*bMergeRPN*/
                                   );
            // trace "xxx mirror layerCh="+layerCh+" to partCh="+partCh+" => frOut.numEvents="+frOut.numEvents;
            if(_bMuted)
               frOut.deleteNoteOnsByFlt(-1, -1);

            // trace "xxx bMuted="+_bMuted+" frOut.numEvents="+frOut.numEvents;
            _frame.mergeFrame(frOut);
         }
      }
   }

   // <ui_midi.png>
   public method waitForSysEx() : boolean {
      b_have_sysex = false;

      if(b_debug)
         Global.Debug("Prophet12::waitForSysEx: in_dev="+#(in_dev));

      if(null != in_dev)
      {
         if(b_debug)
            Global.Debug("Prophet12::waitForSysEx: in_dev.aliasOrDevName=\""+in_dev.getAliasOrDeviceName()+"\"");

         // 1 second timeout
         loop(10)
         {
            replay.processMidiMapUIEventQueue();

            if(b_have_sysex)
            {
               break;
            }

            TKS.sleep(100);
         }

         if(!b_have_sysex)
            Global.Error("Prophet12: waitForSysEx: Timeout");
      }

      return b_have_sysex;
   }

   // <ui_handle.png>
   protected method handlePatchAutosendChanged() {
      data.b_autosend = cb_patch_autosend.isSelected();
      Global.Print("Autosend is "+((maybe == data.b_autosend) ? " enabled (when patch is selected)" : Utils.GetEnableString(data.b_autosend)));

      clearMIDICache();

      if(true == data.b_autosend)
      {
         scheduleMIDISendPatch();
      }
   }

   // <ui_handle.png>
   protected method handlePatchDiffChanged() {
      data.b_send_diff = cb_patch_diff.isSelected();
      Global.Print("Send "+(data.b_send_diff ? "patch differences" : "entire patch"));

      clearMIDICache();

      if(false == data.b_send_diff)
      {
         scheduleMIDISendPatch();
      }
   }

   // <ui_handle.png>
   protected method handleGoToNextBank() {
      cm_patch_nr.setSelectedOption(  (((data.current_patch_nr/99)+1)%17)*99 );
      handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
   }

   // <ui_handle.png>
   protected method handleGoToFirstProjectPatch() {
      cm_patch_nr.setSelectedOption(16*99);
      handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
      Global.Print("Select first project-specific patch (P17 P1)");
   }

   // <ui_handle.png>
   public method selectNextPatch() {
      cm_patch_nr.setSelectedOption(mathWrapi(data.current_patch_nr+1, 0, 17*99));
      handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
   }

   // <ui_handle.png>
   public method selectPreviousPatch() {
      cm_patch_nr.setSelectedOption(mathWrapi(data.current_patch_nr-1, 0, 17*99));
      handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
   }

   // <ui_handle.png>
   module =replay= method handlePatchNrChanged(boolean _bMIDIFollow, boolean _bAllowAutosend) {

      b_solo = false;
      cb_prg_menu_solo.setSelected(false);
      b_mute_a = false;
      b_mute_b = false;

      data.current_patch_nr = cm_patch_nr.getSelectedOption();
      patch <= data.patches.get(data.current_patch_nr);

      if( (null == proxy_patch) || (maybe != b_patch_proxy_lock) )
      {
         proxy_patch <= patch;
         proxy_bank = data.current_patch_nr / 99;
         proxy_program = data.current_patch_nr % 99;
      }

      _bAllowAutosend = _bAllowAutosend && ((maybe != b_patch_proxy_lock) || editingProxyPatch());

      if(_bAllowAutosend)
      {
         Integer io = (data.current_patch_nr % 99) + 1;
         Global.Print((data.b_autosend ? "Send":"Select")+" patch "+(data.current_patch_nr+1)+" (0x"+io.printf("%02x")+") ("+patch.patch_name+")");
      }

      if(_bMIDIFollow)
      {
         if(data.current_patch_nr < (99*8))
         {
            current_midi_patch_nr = data.current_patch_nr;
         }
      }

      updateUIFromPatch();

      if(_bAllowAutosend)
      {
         if(false != data.b_autosend)
         {
            // // queued_midi_patch_nr = 0;
            scheduleMIDISendPatch();
         }
         else if(b_patch_midi_follow)
         {
            if(data.current_patch_nr < (99*8))
            {
               queued_midi_patch_nr = data.current_patch_nr;
               scheduleMIDISend();
            }
         }
      }

      printCurrentPatchNrInfo(data.current_patch_nr, patch.patch_name);
   }

   // <ui_handle.png>
   protected method handleMIDIPatchNrChanged() {
      int patchNr = cm_patch_nr_midi.getSelectedOption();

      if(b_patch_midi_follow)
      {
         queued_midi_patch_nr = patchNr;
         scheduleMIDISend();
      }

      Global.Print("Select MIDI patch "+patchNr);
   }

   // <ui_handle.png>
   protected method handlePatchMIDIFollowChanged() {
      b_patch_midi_follow = cb_patch_midi_follow.isSelected();
      Global.Print("MIDI follow is "+Utils.GetEnableString(b_patch_midi_follow));

      if(b_patch_midi_follow && !data.b_autosend)
      {
         queued_midi_patch_nr = data.current_patch_nr;
         scheduleMIDISend();
      }
   }

   // <ui_handle.png>
   protected method handleNRPNRecvChanged() {
      b_debug = true;

      Global.Print("Recv NRPN is "+Utils.GetEnableString(cb_nrpn_recv.isSelected()));
   }

   // <ui_handle.png>
   protected method handlePatchProxyFollowChanged() {
      b_patch_proxy_follow = cb_patch_proxy_follow.isSelected();
      Global.Print("Proxy follow is "+Utils.GetEnableString(b_patch_proxy_follow));

      if(b_patch_proxy_follow)
      {
         queued_midi_patch_nr = proxy_bank * 99 + proxy_program;
         scheduleMIDISend();
      }
   }

   // <ui_handle.png>
   protected method handlePatchProxyLockChanged() {
      b_patch_proxy_lock = cb_patch_proxy_lock.isSelected();
      Global.Print("Proxy lock is "+Utils.GetEnableString(false != b_patch_proxy_lock)+((maybe == b_patch_proxy_lock) ? " (edit proxy patch only)":""));
   }

   // <ui_handle.png>
   protected =replay= method handlePatchProxyResetChanged() {
      data.b_proxy_reset = cb_patch_proxy_reset.isSelected();
      Global.Print("Proxy reset is "+Utils.GetEnableString(data.b_proxy_reset));
   }

   // <method_update.png>
   module method updateMuteMirrorFlags() {
      if(b_solo)
      {
         switch(getEditLayerNrAB())
         {
            case 0: // A
               b_mute_a = false;
               b_mute_b = true;
               b_mirror = false;
               break;

            case 1: // B
               b_mute_a = true;
               b_mute_b = false;
               b_mirror = false;
               break;

            case 2: // A+B
               b_mute_a = false;
               b_mute_b = false;
               b_mirror = true;
               break;
         }
      }
      else
      {
         switch(getEditLayerNrAB())
         {
            case 0: // A
            case 1: // B
               b_mute_a = false;
               b_mute_b = false;
               b_mirror = false;
               break;

            case 2: // A+B
               b_mute_a = false;
               b_mute_b = false;
               b_mirror = true;
               break;
         }
      }
   }

   // <replay.png>
   public method beginNRPNBatch() {
      // When sending entire patches (avoid thousands of replay mutex lock/unlock calls that can mess up timing of other tracks)
      b_nrpn_batch = true;
      nrpn_batch_buf.offset = 0;
   }

   // <replay.png>
   public method endNRPNBatchAndSend() {
      // When sending entire patches (avoid thousands of replay mutex lock/unlock calls that can mess up timing of other tracks)
      if(nrpn_batch_buf.offset > 0)
      {
         if(null != out_dev)
         {
            out_dev.addBuffer(nrpn_batch_buf);
         }
      }

      b_nrpn_batch = false;
   }

   // <replay.png>
   public method sendNRPN(short _nrpn, short _value) {
      if(b_nrpn_batch)
      {
         nrpn_batch_buf.i8 = 0xB0 | (midi_ch&15);
         nrpn_batch_buf.i8 = 99;
         nrpn_batch_buf.i8 = (_nrpn >> 7) & 127;
         nrpn_batch_buf.i8 = 98;
         nrpn_batch_buf.i8 = (_nrpn & 127);
         nrpn_batch_buf.i8 = 6;
         nrpn_batch_buf.i8 = (_value >> 7) & 127;
         nrpn_batch_buf.i8 = 38;
         nrpn_batch_buf.i8 = (_value & 127);
      }
      else
      {
         if(null != out_dev)
         {
            out_dev.nrpn(midi_ch, _nrpn, _value);
         }
      }
   }

   // <method.png>
   public method editingProxyPatch() : boolean {
      return (data.current_patch_nr == ((proxy_bank * 99) + proxy_program));
   }

   // <replay.png>
   public method queueNRPN(local short _nrpn, local short _value, local _bProxy) {
      if(b_debug)
         Global.Debug2("Prophet12::queueNRPN: nrpn="+_nrpn+" value="+_value+" b_mirror="+b_mirror);

      if(!_bProxy)
      {
         boolean bAllowSend = true;

         if(maybe == b_patch_proxy_lock)
         {
            bAllowSend = editingProxyPatch();
            // trace "xxx p12: bAllowSend="+bAllowSend;
         }

         if(b_mirror && (_nrpn < 512))
         {
            if(bAllowSend)
               sendNRPN(_nrpn + 512, _value);
            patch.tryRecvNRPN(_nrpn + 512, _value);

            if(bAllowSend)
               sendNRPN(_nrpn, _value);
         }
         else if(b_mirror && (_nrpn >= 512))
         {
            if(bAllowSend)
               sendNRPN(_nrpn, _value);

            if(bAllowSend)
               sendNRPN(_nrpn - 512, _value);
            patch.tryRecvNRPN(_nrpn - 512, _value);
         }
         else
         {
            if(bAllowSend)
               sendNRPN(_nrpn, _value);
         }


         // Multi-edit
         if(data.b_multiedit)
         {
            Prophet12_Patch *mePatch;

            int meIdx = (16*99 + data.multiedit_off);

            loop(multiEditGetNum())
            {
               mePatch <= data.patches.get(meIdx);

               mePatch.tryRecvNRPN(_nrpn, _value);

               if(b_mirror && (_nrpn < 512))
               {
                  mePatch.tryRecvNRPN(_nrpn + 512, _value);
               }
               else if(b_mirror && (_nrpn >= 512))
               {
                  mePatch.tryRecvNRPN(_nrpn - 512, _value);
               }

               meIdx++;
            }
         }


         b_nrpngrace = true;
         ta_nrpngrace.reschedule();
      }
      else
      {
         // During handleProxyEvents() and handleProxyReset()
         if(null != out_dev)
         {
            shadow_frame.nrpn(true/*bSet*/, out_dev.dev_idx, midi_ch, _nrpn, _value);
         }
      }
   }

   // <replay.png>
   public method queueNRPNLayer(local short _nrpn, local short _value, local _bProxy) {

      local int layer = cm_prg_menu_layer.getSelectedOption();

      if(0 == layer)
      {
         queueNRPN(_nrpn, _value, _bProxy);
      }
      else if(1 == layer)
      {
         queueNRPN(_nrpn + 512, _value, _bProxy);
      }
      else if(2 == layer)
      {
         queueNRPN(_nrpn, _value, _bProxy);
         queueNRPN(_nrpn + 512, _value, _bProxy);
      }

   }

   // <ui_timer.png>
   module method scheduleMIDISendPatch() {
      // trace "xxx Prophet12::scheduleMIDISendPatch:";
      b_queued_midi_send_patch = true;
      ta_midisend.cancel();
      ta_midisend.schedule();
   }

   // <ui_timer.png>
   protected method scheduleMIDISend() {
      ta_midisend.cancel();
      ta_midisend.schedule();
   }

   // <ui_timer.png>
   protected =replay= method handleMIDISendTimer() {

      if(b_bank_recv_in_progress)
      {
         int recvPatchNr = cm_patch_nr_midi.getSelectedOption() % 99;
         Global.Debug("P12: BANK RECV: recvPatchNr="+recvPatchNr);
         current_midi_patch_nr = -1; // Force program change (discard edit buffer)
         midiSelectPatch(bank_recv_src*99 + recvPatchNr);
         Global.Print("Receive bank "+(bank_recv_src+1)+" P"+(recvPatchNr+1)+" to bank "+(bank_recv_dst+1));
         cm_patch_nr.setSelectedOption(data.current_patch_nr);
         handlePatchNrChanged(false/*bMIDIFollow*/, false/*bAllowAutosend*/);
         handlePatchReceive(false/*bEdit*/);
         Global.Print("Receive bank "+(bank_recv_src+1)+" P"+(recvPatchNr+1)+" to bank "+(bank_recv_dst+1)+": "+patch.getPatchName());

         if(recvPatchNr < (99-1))
         {
            // Select next patch
            Global.Debug("P12: BANK RECV: current_midi_patch_nr="+current_midi_patch_nr);
            current_midi_patch_nr++;
            cm_patch_nr_midi.setSelectedOption(current_midi_patch_nr);
            cm_patch_nr_midi.redraw();

            data.current_patch_nr = bank_recv_dst * 99 + recvPatchNr + 1;

            scheduleMIDISend();
         }
         else
         {
            Global.Print("Bank receive finished.");
            b_bank_recv_in_progress = false;

            bt_patch_receive_bank.setCaption("Receive Bank");
            bt_patch_receive_bank.redraw();
         }
      }
      else
      {
         if(-1 != queued_midi_patch_nr)
         {
            midiSelectPatch(queued_midi_patch_nr);
            queued_midi_patch_nr = -1;
         }

         if(b_queued_midi_send_patch)
         {
            b_queued_midi_send_patch = false;

            if(1)
            {
               boolean bSendAll = b_first_midi_send_patch || !data.b_send_diff || b_mute_a || b_mute_b || b_force_send_after_mute;
               b_first_midi_send_patch = false;

               // trace "xxx send patch: b_mute_a="+b_mute_a+" b_mute_b="+b_mute_b;

               if(bSendAll)
               {
                  // Send entire patch (slow)
                  Global.Debug("P12: send entire patch");
                  patch.sendPatch(false/*bProxy*/);
                  updateShadowPatch(patch);
                  clearMIDICache();
               }
               else
               {
                  // Send diff (fast)
                  MIDIPipeFrame frOut;
                  frOut.empty();
                  frOut.setRoot(current_pipe_root);
                  shadow_frame <= frOut;

                  replay_patch.sendDiff(patch, true/*bProxy*/);
                  updateShadowPatch(patch);

                  out_dev.begin();
                  frOut.emit();

                  if(PageSysEx.b_debug)
                     Global.Debug("P12: send patch diff frOut.numEvents="+frOut.numEvents);
               }

               b_force_send_after_mute = false;
            }

         }
      }
   }

   // <ui_timer.png>
   protected method scheduleUIUpdate() {
      ta_updateui.reschedule();
   }

   // <ui_timer.png>
   protected method handleUIUpdateTimer() {
      updateUIFromPatch();
   }

   // <ui_handle.png>
   protected method handlePatchNameChanged() {
      patch.setPatchName(tf_patch_name.getText());

      rebuildPatchNames();

      updatePatchNameLabel();

      Global.Print("Patch name is \""+patch.patch_name+"\"");
   }

   // <method.png>
   module method sendNameDiff(local int _nrpnBase, local String _oldName, local String _newName, local boolean _bProxy) {
      local int idx = 0;

      // loop(20)
      // {
      //    char oc = _oldName.getc(idx);
      //    char nc = _newName.getc(idx);

      //    if(0 == nc)
      //    {
      //       nc = ' ';
      //    }

      //    if(oc != nc)
      //    {
      //       queueNRPN(_nrpnBase + idx, nc);
      //    }

      //    idx++;
      // }

      loop(20 - 3)  // 20-2 triggers patch change! only 17 usable chars, apparently
      {
         local char c = _newName.getc(idx);
         if(0 == c)
            c = ' ';
         queueNRPN(_nrpnBase + idx, c, _bProxy);
         idx++;
      }
   }

   // <ui_handle.png>
   protected method handleLayerANameChanged() {
      Prophet12_Program layer <= patch.layer_a;

      String oldName = layer.program_name;

      layer.program_name = tf_layer_a_name.getText();

      sendNameDiff(480 +3/*wtf*/, oldName, layer.program_name, false/*bProxy*/);

      handlePatchEdited();

      Global.Print("Layer A name is \""+layer.program_name+"\"");
   }

   // <ui_handle.png>
   protected method handleLayerBNameChanged() {
      Prophet12_Program layer <= patch.layer_b;

      String oldName = layer.program_name;

      layer.program_name = tf_layer_b_name.getText();

      sendNameDiff(480 + 3 + 512, oldName, layer.program_name, false/*bProxy*/);

      handlePatchEdited();

      Global.Print("Layer B name is \""+layer.program_name+"\"");
   }

   // <ui_handle.png>
   protected =replay= method handleABModeChanged() {
      patch.ab_mode = cm_abmode.getSelectedOption();

      queueNRPN(288, patch.ab_mode, false/*bProxy*/);

      rebuildPatchNames();

      handlePatchEdited();

      Global.Print("A/B Mode is "+cm_abmode.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected =replay= method handleSplitPointChanged() {
      patch.split_point = fp_splitpoint.getFloatValue();

      queueNRPN(287, patch.split_point, false/*bProxy*/);

      handlePatchEdited();

      Global.Print("Split Point is "+patch.split_point);
   }

   // <ui_handle.png>
   protected =replay= method handleMasterTuneCoarseChanged() {
      patch.mastertune_coarse = fp_mastertune_coarse.getFloatValue() + 12;

      queueNRPN(1058, patch.mastertune_coarse, false/*bProxy*/);

      handlePatchEdited();

      Global.Print("Master Tune Coarse "+patch.mastertune_coarse);
   }

   // <ui_handle.png>
   protected =replay= method handleMasterTuneFineChanged() {
      patch.mastertune_fine = fp_mastertune_fine.getFloatValue() + 50;

      queueNRPN(1025, patch.mastertune_fine, false/*bProxy*/);

      handlePatchEdited();

      Global.Print("Master Tune Fine "+patch.mastertune_fine);
   }

   // <ui_handle.png>
   protected method handlePatchCategoryChanged() {
      patch.patch_category = cm_patch_category.getSelectedOption();

      cm_find_category.setSelectedOption(patch.patch_category + 1);
      cm_find_category.redraw();

      Global.Print("Patch category is \""+cm_patch_category.getSelectedOptionName()+"\"");

      rebuildPatchNames();
   }


   // <ui_handle.png>
   protected method handleFindCategoryChanged() {

      int catIdx = cm_find_category.getSelectedOption() - 1;

      int patchIdx = 0;
      int res = 0;

      loop(MIDISynthProfileDataProphet12.NUM_PATCHES)
      {
         Prophet12_Patch p <= data.patches.get(patchIdx++);

         if( (-1 == catIdx) || (p.patch_category == catIdx) )
         {
            res++;
         }
      }

      Global.Print("Find category is \""+cm_find_category.getSelectedOptionName()+"\" ("+res+" patch(es))");
   }

   // <ui_handle.png>
   protected method handleFindCategoryPrev() {

      if(data.current_patch_nr > 0)
      {
         int patchIdx = data.current_patch_nr - 1;

         int catIdx = cm_find_category.getSelectedOption() - 1;

         StringArray nameFilters;
         buildNameFiltersFromString(nameFilters, tf_find_name.getText());

         while(patchIdx >= 0)
         {
            Prophet12_Patch p <= data.patches.get(patchIdx);

            if( (-1 == catIdx) || (p.patch_category == catIdx) )
            {
               if(matchNameFilters(p, nameFilters))
               {
                  cm_patch_nr.setSelectedOption(patchIdx);
                  handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
                  return;
               }
            }

            patchIdx--;
         }
      }

   }

   // <ui_handle.png>
   protected method handleFindCategoryBrowse() {

      StringArray midiPatchNames;
      StringArray midiPatchNamesCat;

      int fltCurPatchNr = buildFilteredPatchNames(midiPatchNames,
                                                  midiPatchNamesCat,
                                                  null/*fltPatchIndices*/,
                                                  cm_find_category.getSelectedOption() - 1,
                                                  tf_find_name.getText()
                                                  );

      if(midiPatchNamesCat.numElements > 0)
      {
         Global.Print("Found "+(midiPatchNamesCat.numElements)+" matching patches");

         cmp_find_catbrowse <= ComboBoxPopup.NewComboBoxPopup(this,
                                                              null/*fontOrNull*/,
                                                              midiPatchNamesCat,
                                                              null/*optionsLongOrNull*/,
                                                              fltCurPatchNr,
                                                              280*UI.font_scaling/*prefSx*/,
                                                              null/*toolTipCaptions*/,
                                                              null/*optionBGColors*/,
                                                              null/*option_fgtints*/
                                                              );

         cmp_find_catbrowse.showAboveLayer(bt_find_catbrowse);
         cmp_find_catbrowse.centerRow();
         cmp_find_catbrowse.focusFirstTabCycleMember();
      }
      else
      {
         Global.Print("No matching patches found");
      }
   }

   // <ui_handle.png>
   protected method handleFindCategoryBrowseOptionSelected(IntAction _ac) {
      int selOpt = _ac.getIntValue();

      if(-1 != selOpt)
      {
         StringArray midiPatchNames;
         StringArray midiPatchNamesCat;
         IntArray fltPatchIndices;

         buildFilteredPatchNames(midiPatchNames,
                                 midiPatchNamesCat,
                                 fltPatchIndices,
                                 cm_find_category.getSelectedOption() - 1,
                                 tf_find_name.getText()
                                 );

         cm_patch_nr.setSelectedOption(fltPatchIndices.get(selOpt));
         cm_patch_nr.redraw();
         handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
      }

      refocusDefault();
   }

   // <ui_handle.png>
   protected method handleFindCategoryNext() {

      if(data.current_patch_nr < MIDISynthProfileDataProphet12.NUM_PATCHES)
      {
         int patchIdx = data.current_patch_nr + 1;

         int catIdx = cm_find_category.getSelectedOption() - 1;

         StringArray nameFilters;
         buildNameFiltersFromString(nameFilters, tf_find_name.getText());

         while(patchIdx < MIDISynthProfileDataProphet12.NUM_PATCHES)
         {
            Prophet12_Patch p <= data.patches.get(patchIdx);

            if( (-1 == catIdx) || (p.patch_category == catIdx) )
            {
               if(matchNameFilters(p, nameFilters))
               {
                  cm_patch_nr.setSelectedOption(patchIdx);
                  handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
                  return;
               }
            }

            patchIdx++;
         }
      }

   }

   // <ui_handle.png>
   protected method handlePatchReceiveBank() {

      if(b_bank_recv_in_progress)
      {
         b_bank_recv_in_progress = false;

         bt_patch_receive_bank.setCaption("Receive Bank");
         bt_patch_receive_bank.redraw();

         cm_patch_nr.setSelectedOption(data.current_patch_nr);
         cm_patch_nr.redraw();

         handlePatchNrChanged(false/*bMIDIFollow*/, true/*bAllowAutosend*/);

         updateUIFromPatch();

         Global.Print("Abort bank receive");
      }
      else
      {
         b_bank_recv_in_progress = true;

         bank_recv_src = current_midi_patch_nr / 99;
         bank_recv_dst = cm_patch_nr.getSelectedOption() / 99;

         if(bank_recv_src < 8)
         {
            cm_patch_nr_midi.setSelectedOption(bank_recv_src * 99);
            cm_patch_nr_midi.redraw();
            current_midi_patch_nr = bank_recv_src * 99;

            cm_patch_nr.setSelectedOption(bank_recv_dst * 99);
            cm_patch_nr.redraw();

            handlePatchNrChanged(false/*bMIDIFollow*/, false/*bAllowAutosend*/);

            bt_patch_receive_bank.setCaption("Stop");
            bt_patch_receive_bank.redraw();

            scheduleMIDISend();

            Global.Print("Receiving bank "+(bank_recv_src+1)+" to editor bank "+(bank_recv_dst+1));
         }
         else
         {
            Global.Print("Bank "+(bank_recv_src+1)+" is not available on synth");
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatchReceive(boolean _bEdit) {

      patch.downloadPatch(_bEdit, (current_midi_patch_nr/99)&7, ((current_midi_patch_nr%99)&127) );

      // trace "xxx handlePatchReceive: patch.patch_name="+patch.patch_name;

      updateUIFromPatch();

      // trace "xxx handlePatchReceive: patch.patch_name="+patch.patch_name;

      relayout();

   }

   // <method.png>
   public =replay= method clearMIDICache() {
      if(null != out_dev)
      {
         current_pipe_root.clearMIDICacheForDev(out_dev.dev_idx);
         Global.Debug2("Prophet12::clearMIDICache");
      }
   }

   // <method_get.png>
   public virtual getBankNames() : StringArray {
      // overwrites EditMIDISynthForm::getBankNames()
      local StringArray ret;
      int bankNr = 1;
      loop(4)
         ret.add("Bank U"+bankNr++);
      loop(4)
         ret.add("Bank F"+bankNr++);
      loop(8)
         ret.add("Bank E"+bankNr++);
      ret.add("Project Bank 17");
      return deref ret;
   }

   // <method_get.png>
   public virtual getProgramNames(int _bankIdx) : StringArray {

      if(b_first_rebuild_patch_names)
         rebuildPatchNames();

      // overwrites EditMIDISynthForm::getProgramNames()
      StringArray allPatchNames <= cm_patch_nr.getOptions();
      local StringArray ret;
      int patchIdx = _bankIdx * 99;
      loop(99)
      {
         ret.add(allPatchNames.get(patchIdx++));
      }
      return deref ret;
   }

   // <ui_handle.png>
   protected method handlePatchSend() {

      patch.sendPatch(false/*bProxy*/);
      updateShadowPatch(patch);
      clearMIDICache();

      // Prophet12_Patch ulPatch <= data.patches.get(data.first_patch_nr);

      // if(ulPatch.uploadToPatch(data.first_patch_nr))
      // {
      //    Global.Success("Upload patch "+data.first_patch_nr);
      // }

      // (todo) send first..last
   }

   // <ui_handle.png>
   protected method handlePatchCopy() {

      // trace "xxx handlePatchCopy patch="+#(patch);
      patch_clipboard.copyFrom(patch);

      Global.Print("Copy patch to clipboard");
   }

   // <ui_handle.png>
   protected =replay= method handlePatchPaste() {

      // byte origPatchToneNr = patch.getToneByte(PATCH_TONE_NUMBER);
      patch.copyFrom(patch_clipboard);
      // patch.setToneByteNoSend(PATCH_TONE_NUMBER, origPatchToneNr);

      updateUIFromPatch();

      if(data.b_autosend)
      {
         // // queued_midi_patch_nr = 0;
         scheduleMIDISendPatch();
      }

      Global.Print("Paste patch clipboard");
   }

   // <ui_handle.png>
   protected =replay= method handlePatchInit() {

      patch.loadInitPatch();///copyFrom(init_patch);

      updateUIFromPatch();

      if(null != out_dev)
      {
         current_pipe_root.clearMIDICacheForDev(out_dev.dev_idx);
      }

      TKS.sleep(30);

      if(data.b_autosend)
      {
         // // queued_midi_patch_nr = 0;
         scheduleMIDISendPatch();
      }

      Global.Print("Initialize patch");
   }

   // <ui_handle.png>
   protected method handleCopyFromReplayPatch() {
      patch.copyFrom(orig_replay_patch);

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      updateUIFromPatch();

      Global.Print("Copy from replay patch");
   }

   // <ui_handle.png>
   protected method handleCopyAToClipboard() {
      layer_clipboard.copyFrom(patch.layer_a);

      Global.Print("Copy A to Clipboard");
   }

   // <ui_handle.png>
   protected method handleCopyBToClipboard() {
      layer_clipboard.copyFrom(patch.layer_b);

      Global.Print("Copy B to Clipboard");
   }

   // <ui_handle.png>
   protected =replay= method handlePasteClipboardToA() {
      patch.layer_a.copyFrom(layer_clipboard);

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      updateUIFromPatch();

      Global.Print("Paste Clipboard to A");
   }

   // <ui_handle.png>
   protected =replay= method handlePasteClipboardToB() {
      patch.layer_b.copyFrom(layer_clipboard);

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      updateUIFromPatch();

      Global.Print("Paste Clipboard to B");
   }

   // <ui_handle.png>
   protected =replay= method handleCopyAToB() {
      patch.layer_b.copyFrom(patch.layer_a);

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      updateUIFromPatch();

      Global.Print("Copy A to B");
   }

   // <ui_handle.png>
   protected =replay= method handleCopyBToA() {
      patch.layer_a.copyFrom(patch.layer_b);

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      updateUIFromPatch();

      Global.Print("Copy B to A");
   }

   // <ui_handle.png>
   protected =replay= method handleSwapAB() {
      layer_clipboard_swap.copyFrom(patch.layer_a);
      patch.layer_a.copyFrom(patch.layer_b);
      patch.layer_b.copyFrom(layer_clipboard_swap);

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      updateUIFromPatch();

      Global.Print("Swap A and B");
   }

   // <ui_handle.png>
   protected =replay= method handleInitA() {
      patch.layer_a.loadInit(0);

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      updateUIFromPatch();

      Global.Print("Init A");
   }

   // <ui_handle.png>
   protected =replay= method handleInitB() {
      patch.layer_b.loadInit(1);

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      updateUIFromPatch();

      Global.Print("Init B");
   }

   // <ui_handle.png>
   protected method handleEditMTS1() {
      if((data.mts.tables.numElements) > 0)
      {
         dlg_mts.showMTS(this, data.mts, in_dev, out_dev, midi_ch, data.midi_profile);
         Global.Print("Show MTS dialog");
      }
      else
      {
         Global.Warning("Synth does not support the MIDI Tuning Standard");
      }
   }

   // <ui_show.png>
   protected method showToolsMenu() {

      pm_tools <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_tools;

      pmb <= pm.addDefaultButton("Copy From Replay Patch", "copy_from_replay_patch");
      pmb.setFontByName("big8");

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Copy A To Clipboard", "copy_a_to_clipboard");
      pmb.setFontByName("big8");

      pmb <= pm.addDefaultButton("Copy B To Clipboard", "copy_b_to_clipboard");
      pmb.setFontByName("big8");

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Paste clipboard to A", "paste_clipboard_to_a");
      pmb.setFontByName("big8");

      pmb <= pm.addDefaultButton("Paste clipboard to B", "paste_clipboard_to_b");
      pmb.setFontByName("big8");

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Copy A To B", "copy_a_to_b");
      pmb.setFontByName("big8");

      pmb <= pm.addDefaultButton("Copy B To A", "copy_b_to_a");
      pmb.setFontByName("big8");

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Swap A and B", "swap_ab");
      pmb.setFontByName("big8");

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Randomize OSCs..", "rand_osc");
      pmb.setFontByName("big8");
      pmb.setAccelerators("r", "");

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Init A", "init_a");
      pmb.setFontByName("big8");

      pmb <= pm.addDefaultButton("Init B", "init_b");
      pmb.setFontByName("big8");

      pm.resizeToMinimum();

      pm.showNearMouse(-30, 0);

      Global.Print("Show Tools menu.");
   }

   // <ui_handle.png>
   protected method handleLayerChanged() {
      Global.Print("Edit "+(cm_prg_menu_layer.getSelectedOptionName()));

      updateMuteMirrorFlags();

      updateUIFromPatch();

      if(b_solo)
      {
         if(data.b_autosend)
         {
            scheduleMIDISendPatch();
         }
      }
   }

   // <ui_handle.png>
   protected method handleSoloChanged() {
      b_solo = cb_prg_menu_solo.isSelected();
      Global.Print("Solo Layer is "+Utils.GetEnableString(b_solo));

      updateMuteMirrorFlags();
      b_force_send_after_mute = true;

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }
   }

   // <method_select.png>
   protected method selectMenuOption(int _option) {

      bt_prg_menu_voice .setToggleState(false);
      bt_prg_menu_osc   .setToggleState(false);
      bt_prg_menu_env   .setToggleState(false);
      bt_prg_menu_lfo   .setToggleState(false);
      bt_prg_menu_delay .setToggleState(false);
      bt_prg_menu_matrix.setToggleState(false);

      Button *bt;

      switch(_option)
      {
         default:
         case MENU_VOICE:
            bt <= bt_prg_menu_voice;
            break;

         case MENU_OSC:
            bt <= bt_prg_menu_osc;
            break;

         case MENU_ENV:
            bt <= bt_prg_menu_env;
            break;

         case MENU_LFO:
            bt <= bt_prg_menu_lfo;
            break;

         case MENU_DELAY:
            bt <= bt_prg_menu_delay;
            break;

         case MENU_MATRIX:
            bt <= bt_prg_menu_matrix;
            prg_matrix.showLayer(getEditLayer());
            break;
      }

      ls_prg_menu.switchToLayerNr(_option);
      ls_prg_menu.redraw();
      pn_prg_menu.redraw();

      bt.setToggleState(true);

      if(pn_prg_menu.hasChildLayer(UI.GetKeyboardFocus()))
      {
         UI.SetKeyboardFocus(bt);
      }
   }

   // <method_select.png>
   module method selectPreviousMenuOption() {
      int opt = ls_prg_menu.getCurrentChildNr();

      if(0 == opt)
      {
         // opt = MENU_MATRIX;
      }
      else
      {
         opt--;
      }

      selectMenuOption(opt);
   }

   // <method_select.png>
   module method selectNextMenuOption() {
      int opt = ls_prg_menu.getCurrentChildNr();

      if(MENU_MATRIX == opt)
      {
         // opt = 0;
      }
      else
      {
         opt++;
      }

      selectMenuOption(opt);
   }

   // <ui_handle.png>
   protected method handleMultiEditOffChanged() {
      data.multiedit_off = fp_prg_menu_multioff.getFloatValue() - 1;

      Global.Print("Multi-edit start patch is P17 P"+(data.multiedit_off+1));
   }

   // <method_get.png>
   protected method multiEditGetNum() : int {
      int ret = mathMini(data.multiedit_num, (99-data.multiedit_off));
      return ret;
   }

   // <ui_handle.png>
   protected method handleMultiEditNumChanged() {
      data.multiedit_num = fp_prg_menu_multinum.getFloatValue();

      Global.Print("Multi-edit number of patches is "+multiEditGetNum());
   }

   // <ui_handle.png>
   protected method handleMultiEditEnableChanged(boolean _bQuiet) {
      data.b_multiedit = cb_prg_menu_multiedit.isSelected();

      int bg32 = 0;

      if(data.b_multiedit)
      {
         bg32 = #c0ffff00;
      }

      fp_prg_menu_multioff.setBackgroundTint(bg32);
      fp_prg_menu_multinum.setBackgroundTint(bg32);

      fp_prg_menu_multioff.redraw();
      fp_prg_menu_multinum.redraw();

      if(!_bQuiet)
      {
         Global.Print("Multi-edit is "+Utils.GetEnableString(data.b_multiedit));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleLPFFreqChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.lpf_freq = fp_lpffreq.getFloatValue();

      Global.Print("LPF Frequency is "+layer.lpf_freq);

      if(!layer.sendLPFFreq(this, false/*bProxy*/))
         Global.Warning("LPF Freq: all mod slots in use");

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleLPFResChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.lpf_res = fp_lpfres.getFloatValue();

      queueNRPNLayer(91, layer.lpf_res, false/*bProxy*/);

      Global.Print("LPF Resonance is "+layer.lpf_res);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleLPFKeyAmountChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.lpf_keyamount = fp_lpfkeyamount.getFloatValue();

      queueNRPNLayer(92, layer.lpf_keyamount, false/*bProxy*/);

      Global.Print("LPF Key Amount is "+layer.lpf_keyamount);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleLPF4PoleChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.b_lpf_4pole = cb_lpf4pole.isSelected();

      queueNRPNLayer(93, layer.b_lpf_4pole, false/*bProxy*/);

      Global.Print("LPF mode is "+(layer.b_lpf_4pole ? "4" : "2")+" pole");

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleHPFFreqChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.hpf_freq = fp_hpffreq.getFloatValue();

      queueNRPNLayer(94, layer.hpf_freq, false/*bProxy*/);

      Global.Print("HPF Frequency is "+layer.hpf_freq);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleHPFResChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.hpf_res = fp_hpfres.getFloatValue();

      queueNRPNLayer(95, layer.hpf_res, false/*bProxy*/);

      Global.Print("HPF Resonance is "+layer.hpf_res);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleHPFKeyAmountChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.hpf_keyamount = fp_hpfkeyamount.getFloatValue();

      queueNRPNLayer(96, layer.hpf_keyamount, false/*bProxy*/);

      Global.Print("HPF Key Amount is "+layer.hpf_keyamount);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleFBAmountChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.fb_amount = fp_fbamount.getFloatValue() + 127;

      if(127 != layer.fb_amount)
      {
         layer.b_fb = true;
         cb_fb.setSelected(true);
      }
      else
      {
         layer.b_fb = false;
         cb_fb.setSelected(false);
      }

      queueNRPNLayer(97, layer.b_fb ? layer.fb_amount : 127, false/*bProxy*/);

      Global.Print("Feedback Amount is "+(layer.fb_amount - 127));

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleFBTuneChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.fb_tune = fp_fbtune.getFloatValue();

      queueNRPNLayer(98, layer.fb_tune, false/*bProxy*/);

      Global.Print("Feedback Tune is "+layer.fb_tune);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleFBEnableChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.b_fb = cb_fb.isSelected();

      if(layer.b_fb)
      {
         queueNRPNLayer(97, layer.fb_amount, false/*bProxy*/);
      }
      else
      {
         queueNRPNLayer(97, 127/*fb_amount*/, false/*bProxy*/);
      }

      Global.Print("Feedback is "+Utils.GetEnableString(layer.b_fb));

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleFMModeChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.b_linear_fm = cm_fmmode.getSelectedOption();

      queueNRPNLayer(77, layer.b_linear_fm, false/*bProxy*/);

      Global.Print("FM Mode is "+(layer.b_linear_fm ? "Linear" : "Exponential"));

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleVoiceVolChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.voice_vol = fp_voicevol.getFloatValue();

      queueNRPNLayer(99, layer.voice_vol, false/*bProxy*/);

      Global.Print("Voice Volume is "+layer.voice_vol);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleVCAExtChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.vca_ext = fp_vcaext.getFloatValue();

      layer.sendVCA(this, false/*bProxy*/);

      Global.Print("VCA (ext) is "+layer.vca_ext);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handlePanExtChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.pan_ext = fp_panext.getFloatValue();

      layer.sendPan(this, false/*bProxy*/);

      Global.Print("Pan (ext) is "+layer.pan_ext);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handlePanSpreadChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.pan_spread = fp_panspread.getFloatValue();

      queueNRPNLayer(100, layer.pan_spread, false/*bProxy*/);

      Global.Print("Pan Spread is "+layer.pan_spread);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleDistAmountChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.dist_amount = fp_distamount.getFloatValue();

      queueNRPNLayer(101, layer.dist_amount, false/*bProxy*/);

      Global.Print("Distortion Amount is "+layer.dist_amount);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleCharEnableChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.b_char_enable = cb_charenable.isSelected();

      layer.sendCharEnable(this, false/*bProxy*/);

      Global.Print("Sub is "+((false != layer.b_char_enable) ? "On":"Off")+", Character is "+((true == layer.b_char_enable)?"On":"Off"));

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleSubChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.sub_osc = fp_sub.getFloatValue();

      if(false == layer.b_char_enable)
      {
         layer.b_char_enable = maybe;
         cb_charenable.setSelected(maybe);
         layer.sendCharEnable(this, false/*bProxy*/);
      }
      else
      {
         queueNRPNLayer(72, layer.sub_osc, false/*bProxy*/);
      }

      Global.Print("Sub Osc Level is "+layer.sub_osc);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleAirChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.air = fp_air.getFloatValue();

      if(true != layer.b_char_enable)
      {
         layer.b_char_enable = true;
         cb_charenable.setSelected(true);
         layer.sendCharEnable(this, false/*bProxy*/);
      }
      else
      {
         queueNRPNLayer(80, layer.air, false/*bProxy*/);
      }

      Global.Print("Air is "+layer.air);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleGirthChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.girth = fp_girth.getFloatValue();

      if(true != layer.b_char_enable)
      {
         layer.b_char_enable = true;
         cb_charenable.setSelected(true);
         layer.sendCharEnable(this, false/*bProxy*/);
      }
      else
      {
         queueNRPNLayer(81, layer.girth, false/*bProxy*/);
      }

      Global.Print("Girth is "+layer.girth);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleHackChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.hack = fp_hack.getFloatValue();

      if(true != layer.b_char_enable)
      {
         layer.b_char_enable = true;
         cb_charenable.setSelected(true);
         layer.sendCharEnable(this, false/*bProxy*/);
      }
      else
      {
         queueNRPNLayer(82, layer.hack, false/*bProxy*/);
      }

      Global.Print("Hack is "+layer.hack);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleDecimateChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.decimate = fp_decimate.getFloatValue();

      if(true != layer.b_char_enable)
      {
         layer.b_char_enable = true;
         cb_charenable.setSelected(true);
         layer.sendCharEnable(this, false/*bProxy*/);
      }
      else
      {
         queueNRPNLayer(83, layer.decimate, false/*bProxy*/);
      }

      Global.Print("Decimate is "+layer.decimate);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleDriveChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.drive = fp_drive.getFloatValue();

      if(true != layer.b_char_enable)
      {
         layer.b_char_enable = true;
         cb_charenable.setSelected(true);
         layer.sendCharEnable(this, false/*bProxy*/);
      }
      else
      {
         queueNRPNLayer(84, layer.drive, false/*bProxy*/);
      }

      Global.Print("Drive is "+layer.drive);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleGlideEnableChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.b_glide = cb_glide.isSelected();

      queueNRPNLayer(74, layer.b_glide, false/*bProxy*/);

      Global.Print("Glide is "+Utils.GetEnableString(layer.b_glide));

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleGlideModeChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.glide_mode = cm_glidemode.getSelectedOption();

      queueNRPNLayer(73, layer.glide_mode, false/*bProxy*/);

      Global.Print("Glide Mode is "+cm_glidemode.getSelectedOptionName());

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handlePitchbendUpChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.pitchbend_up = fp_pitchbendup.getFloatValue();

      queueNRPNLayer(75, layer.pitchbend_up, false/*bProxy*/);

      Global.Print("Pitchbend Range Up is "+layer.pitchbend_up);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handlePitchbendDownChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.pitchbend_down = fp_pitchbenddown.getFloatValue();

      queueNRPNLayer(76, layer.pitchbend_down, false/*bProxy*/);

      Global.Print("Pitchbend Range Down is "+layer.pitchbend_down);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleUniDetuneChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.uni_detune = fp_unidetune.getFloatValue();

      queueNRPNLayer(284, layer.uni_detune, false/*bProxy*/);

      Global.Print("Unison Detune is "+layer.uni_detune);

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleUniModeChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.uni_mode = cm_unimode.getSelectedOption();

      queueNRPNLayer(285, layer.uni_mode, false/*bProxy*/);

      Global.Print("Unison Mode is "+cm_unimode.getSelectedOptionName());

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleUniKeyAssignChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.uni_keyassign = cm_unikeyassign.getSelectedOption();

      queueNRPNLayer(286, layer.uni_keyassign, false/*bProxy*/);

      Global.Print("Unison Key Assign is "+cm_unikeyassign.getSelectedOptionName());

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleUniEnableChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.b_uni = cb_uni.isSelected();

      queueNRPNLayer(283, layer.b_uni, false/*bProxy*/);

      Global.Print("Unison is "+Utils.GetEnableString(layer.b_uni));

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleArpEnableChanged() {
      Prophet12_Program layer <= getEditLayer();

      layer.b_arp = cb_arp.isSelected();

      queueNRPNLayer(289, layer.b_arp, false/*bProxy*/);

      Global.Print("Arpeggiator is "+Utils.GetEnableString(layer.b_arp));

      handlePatchEdited();
   }

   // <ui_handle.png>
   protected method handleMorphAutoChanged() {
      data.b_morph_auto = cb_morph_auto.isSelected();
      Global.Print("Morph Autosend is "+Utils.GetEnableString(data.b_morph_auto));

      if(data.b_morph_auto)
      {
         // // queued_midi_patch_nr = 0;
         handleMorphEdited();
      }
   }

   // <ui_handle.png>
   protected method handleMorphPreviewChanged() {
      data.b_morph_preview = cb_morph_preview.isSelected();
      Global.Print("Morph Preview is "+Utils.GetEnableString(data.b_morph_preview));

      // if(data.b_morph_preview)
      // {
      //    // // queued_midi_patch_nr = 0;
      //    // handleMorphEdited();
      // }
   }

   // <ui_handle.png>
   protected method handleMorphSwap() {

      int l = cm_morph_patch_nr_l.getSelectedOption();
      int r = cm_morph_patch_nr_r.getSelectedOption();
      cm_morph_patch_nr_l.setSelectedOption(r);
      cm_morph_patch_nr_l.redraw();
      cm_morph_patch_nr_r.setSelectedOption(l);
      cm_morph_patch_nr_r.redraw();

      handleMorphEdited();

      Global.Print("Swap left <> right");
   }

   // <ui_handle.png>
   protected method handleMorphSelectCurrentMinusOne() {

      if(data.current_patch_nr > 0)
      {
         cm_morph_patch_nr_l.setSelectedOption(data.current_patch_nr - 1);
         cm_morph_patch_nr_l.redraw();

         handleMorphEdited();

         Global.Print("Select patch before current");
      }
   }

   // <ui_handle.png>
   protected method handleMorphSelectAllOrNone() {

      Prophet12_MorphForm *form;

      boolean bClear = false;

      foreach form in morph_forms
      {
         bClear |= form.isEnabled();
      }

      foreach form in morph_forms
      {
         form.setEnable(!bClear);
      }

      Global.Print("Select "+(bClear ? "none" : "all"));
   }

   // <ui_handle.png>
   protected method handleMorphResetAllBias() {
      Prophet12_MorphForm *form;

      foreach form in morph_forms
      {
         form.resetBias();
      }

      handleMorphEdited();
   }

   // <ui_handle.png>
   protected method handleMorphModeChanged() {

      bt_morph_randomize.setEditable(cm_morph_mode.getSelectedOption() >= 1);
      bt_morph_randomize.redraw();

      cm_morph_patch_nr_r.setEditable(0 == cm_morph_mode.getSelectedOption());
      cm_morph_patch_nr_r.redraw();

      handleMorphEdited();

      Global.Print("Morph Mode is "+cm_morph_mode.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleMorphLayerChanged() {
      Global.Print("Morph Layer Mode is "+cm_morph_layer.getSelectedOptionName());

      handleMorphEdited();
   }

   // <method.png>
   protected static CalcBiasedFactor(float _g, float _f) : float {

      if(_f >= 0.5)
      {
         // Bias towards R
         _g += (_f - 0.5) * 2;
      }
      else
      {
         // Bias towards L
         _g -= (0.5 - _f) * 2;
      }

      return mathClampf(_g, 0.0, 1.0);
   }

   // <method.png>
   protected method morphLayer(Prophet12_Program _d, Prophet12_Program _l, Prophet12_Program _r, float gfactor) {

      float factor;
      // // float gfactor = morph_global.getFactor();

      if(morph_global.isEnabled())
      {
         factor = gfactor;
         // trace "xxx morph: factor.global = "+factor;

         int modIdx = 0;
         loop(16)
         {
            Prophet12_ModEntry modL <= _l.mods.get(modIdx);
            Prophet12_ModEntry modR <= _r.mods.get(modIdx);
            Prophet12_ModEntry mod  <= _d.mods.get(modIdx);
            mod.blend(modL, modR, factor, morph_global.allowDetune());
            modIdx++;
         }
      }

      if(morph_osc1.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_osc1.getFactor());
         // trace "xxx morph: factor.osc1 = "+factor;
         _= (_d.oscs)[0].blend(_l.oscs[0], _r.oscs[0], factor, morph_osc1.allowDetune());
      }

      if(morph_osc2.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_osc2.getFactor());
         // trace "xxx morph: factor.osc2 = "+factor;
         _= (_d.oscs)[1].blend(_l.oscs[1], _r.oscs[1], factor, morph_osc2.allowDetune());
      }

      if(morph_osc3.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_osc3.getFactor());
         // trace "xxx morph: factor.osc3 = "+factor;
         _= (_d.oscs)[2].blend(_l.oscs[2], _r.oscs[2], factor, morph_osc3.allowDetune());
      }

      if(morph_osc4.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_osc4.getFactor());
         // trace "xxx morph: factor.osc4 = "+factor;
         _= (_d.oscs)[3].blend(_l.oscs[3], _r.oscs[3], factor, morph_osc4.allowDetune());
      }

      if(morph_env1.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_env1.getFactor());
         // trace "xxx morph: factor.env1 = "+factor;
         _= (_d.envs)[0].blend(_l.envs[0], _r.envs[0], factor, true);
      }

      if(morph_env2.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_env2.getFactor());
         // trace "xxx morph: factor.env2 = "+factor;
         _= (_d.envs)[1].blend(_l.envs[1], _r.envs[1], factor, true);
      }

      if(morph_env3.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_env3.getFactor());
         // trace "xxx morph: factor.env3 = "+factor;
         _= (_d.envs)[2].blend(_l.envs[2], _r.envs[2], factor, morph_env3.allowDetune());
      }

      if(morph_env4.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_env4.getFactor());
         // trace "xxx morph: factor.env4 = "+factor;
         _= (_d.envs)[3].blend(_l.envs[3], _r.envs[3], factor, morph_env4.allowDetune());
      }

      if(morph_lfo1.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_lfo1.getFactor());
         // trace "xxx morph: factor.lfo1 = "+factor;
         _= (_d.lfos)[0].blend(_l.lfos[0], _r.lfos[0], factor, morph_lfo1.allowDetune());
      }

      if(morph_lfo2.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_lfo2.getFactor());
         // trace "xxx morph: factor.lfo2 = "+factor;
         _= (_d.lfos)[1].blend(_l.lfos[1], _r.lfos[1], factor, morph_lfo2.allowDetune());
      }

      if(morph_lfo3.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_lfo3.getFactor());
         // trace "xxx morph: factor.lfo3 = "+factor;
         _= (_d.lfos)[2].blend(_l.lfos[2], _r.lfos[2], factor, morph_lfo3.allowDetune());
      }

      if(morph_lfo4.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_lfo4.getFactor());
         // trace "xxx morph: factor.lfo4 = "+factor;
         _= (_d.lfos)[3].blend(_l.lfos[3], _r.lfos[3], factor, morph_lfo4.allowDetune());
      }

      if(morph_delay1.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_delay1.getFactor());
         // trace "xxx morph: factor.delay1 = "+factor;
         _= (_d.delays)[0].blend(_l.delays[0], _r.delays[0], factor);
      }

      if(morph_delay2.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_delay2.getFactor());
         // trace "xxx morph: factor.delay2 = "+factor;
         _= (_d.delays)[1].blend(_l.delays[1], _r.delays[1], factor);
      }

      if(morph_delay3.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_delay3.getFactor());
         // trace "xxx morph: factor.delay3 = "+factor;
         _= (_d.delays)[2].blend(_l.delays[2], _r.delays[2], factor);
      }

      if(morph_delay4.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_delay4.getFactor());
         // trace "xxx morph: factor.delay4 = "+factor;
         _= (_d.delays)[3].blend(_l.delays[3], _r.delays[3], factor);
      }

      if(morph_filter.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_filter.getFactor());
         // trace "xxx morph: factor.filter = "+factor;

         _d.lpf_freq       = round(mathLerpf(_l.lpf_freq,       _r.lpf_freq,       factor));
         _d.lpf_res        = round(mathLerpf(_l.lpf_res,        _r.lpf_res,        factor));
         _d.lpf_keyamount  = round(mathLerpf(_l.lpf_keyamount,  _r.lpf_keyamount,  factor));
         _d.b_lpf_4pole    = round(mathLerpf(_l.b_lpf_4pole,    _r.b_lpf_4pole,    factor));

         _d.hpf_freq       = round(mathLerpf(_l.hpf_freq,       _r.hpf_freq,       factor));
         _d.hpf_res        = round(mathLerpf(_l.hpf_res,        _r.hpf_res,        factor));
         _d.hpf_keyamount  = round(mathLerpf(_l.hpf_keyamount,  _r.hpf_keyamount,  factor));
      }

      if(morph_global.isEnabled())
      {
         factor = gfactor;/////morph_global.getFactor();

         _d.b_linear_fm    = round(mathLerpf(_l.b_linear_fm,    _r.b_linear_fm,    factor));
      }

      if(morph_char.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_char.getFactor());
         // trace "xxx morph: factor.char = "+factor;

         _d.fb_amount      = round(mathLerpf(_l.fb_amount,      _r.fb_amount,      factor));
         _d.fb_tune        = round(mathLerpf(_l.fb_tune,        _r.fb_tune,        factor));
         _d.b_fb           = round(mathLerpf(_l.b_fb,           _r.b_fb,           factor));

         _d.b_char_enable = true;

         _d.sub_osc        = round(mathLerpf(_l.sub_osc,        _r.sub_osc,        factor));
         _d.air            = round(mathLerpf(_l.air,            _r.air,            factor));
         _d.girth          = round(mathLerpf(_l.girth,          _r.girth,          factor));
         _d.hack           = round(mathLerpf(_l.hack,           _r.hack,           factor));
         _d.decimate       = round(mathLerpf(_l.decimate,       _r.decimate,       factor));
         _d.drive          = round(mathLerpf(_l.drive,          _r.drive,          factor));
      }

      if(morph_volume.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_volume.getFactor());
         // trace "xxx morph: factor.volume = "+factor;

         _d.voice_vol      = round(mathLerpf(_l.voice_vol,      _r.voice_vol,      factor));
         _d.vca_ext        = round(mathLerpf(_l.vca_ext,        _r.vca_ext,        factor));
         _d.pan_ext        = round(mathLerpf(_l.pan_ext,        _r.pan_ext,        factor));
         _d.pan_spread     = round(mathLerpf(_l.pan_spread,     _r.pan_spread,     factor));
         _d.dist_amount    = round(mathLerpf(_l.dist_amount,    _r.dist_amount,    factor));
      }

      if(morph_glideuni.isEnabled())
      {
         factor = CalcBiasedFactor(gfactor, morph_glideuni.getFactor());
         // trace "xxx morph: factor.glideuni = "+factor;

         _d.glide_mode     = round(mathLerpf(_l.glide_mode,     _r.glide_mode,     factor));
         _d.b_glide        = round(mathLerpf(_l.b_glide,        _r.b_glide,        factor));
         _d.pitchbend_up   = round(mathLerpf(_l.pitchbend_up,   _r.pitchbend_up,   factor));
         _d.pitchbend_down = round(mathLerpf(_l.pitchbend_down, _r.pitchbend_down, factor));

         _d.b_uni          = round(mathLerpf(_l.b_uni,          _r.b_uni,          factor));
         _d.uni_detune     = round(mathLerpf(_l.uni_detune,     _r.uni_detune,     factor));
         _d.uni_mode       = round(mathLerpf(_l.uni_mode,       _r.uni_mode,       factor));
         _d.uni_keyassign  = round(mathLerpf(_l.uni_keyassign,  _r.uni_keyassign,  factor));
      }
   }

   // <method.png>
   protected method morphPatchInt(Prophet12_Patch _d, Prophet12_Patch _l, Prophet12_Patch _r, float _gfactor, boolean _bProxy) {
      int morphLayer = cm_morph_layer.getSelectedOption() + 1;

      Prophet12_Patch l <= _l;
      Prophet12_Patch r <= _r;

      if(1 == morphLayer)
      {
         // A
         morphLayer(_d.layer_a, l.layer_a, _r.layer_a, _gfactor);
      }
      else if(2 == morphLayer)
      {
         // B
         morphLayer(_d.layer_b, l.layer_b, _r.layer_b, _gfactor);
      }
      else if(3 == morphLayer)
      {
         // A+B
         morphLayer(_d.layer_b, l.layer_b, _r.layer_b, _gfactor);
         morphLayer(_d.layer_a, l.layer_a, _r.layer_a, _gfactor);
      }
      else if(4 == morphLayer)
      {
         // A-AB
         temp_patch.copyFrom(_l);
         temp_patch.layer_b.copyFrom(temp_patch.layer_a);
         l <= temp_patch;

         morphLayer(_d.layer_b, l.layer_b, _r.layer_b, _gfactor);
         morphLayer(_d.layer_a, l.layer_a, _r.layer_a, _gfactor);
      }
      else if(5 == morphLayer)
      {
         // B-AB
         temp_patch.copyFrom(_l);
         temp_patch.layer_a.copyFrom(temp_patch.layer_b);
         l <= temp_patch;

         morphLayer(_d.layer_b, l.layer_b, _r.layer_b, _gfactor);
         morphLayer(_d.layer_a, l.layer_a, _r.layer_a, _gfactor);
      }
      else if(6 == morphLayer)
      {
         // AB-A
         temp_patch.copyFrom(_r);
         temp_patch.layer_b.copyFrom(temp_patch.layer_a);
         r <= temp_patch;

         morphLayer(_d.layer_b, l.layer_b, r.layer_b, _gfactor);
         morphLayer(_d.layer_a, l.layer_a, r.layer_a, _gfactor);
      }
      else if(7 == morphLayer)
      {
         // AB-B
         temp_patch.copyFrom(_r);
         temp_patch.layer_a.copyFrom(temp_patch.layer_b);
         r <= temp_patch;

         morphLayer(_d.layer_b, l.layer_b, r.layer_b, _gfactor);
         morphLayer(_d.layer_a, l.layer_a, r.layer_a, _gfactor);
      }
      else if(8 == morphLayer)
      {
         // A-B
         morphLayer(_d.layer_a, l.layer_a, r.layer_b, _gfactor);
      }
      else if(9 == morphLayer)
      {
         // B-A
         morphLayer(_d.layer_a, l.layer_b, r.layer_a, _gfactor);
      }
      else if(10 == morphLayer)
      {
         // A*-B
         morphLayer(_d.layer_a, l.layer_a, _r.layer_b, _gfactor);
      }
      else if(11 == morphLayer)
      {
         // A-B*
         morphLayer(_d.layer_b, l.layer_a, _r.layer_b, _gfactor);
      }
      else if(12 == morphLayer)
      {
         // B-A*
         morphLayer(_d.layer_a, l.layer_b, _r.layer_a, _gfactor);
      }
      else if(13 == morphLayer)
      {
         // B*-A
         morphLayer(_d.layer_b, l.layer_b, _r.layer_a, _gfactor);
      }

      if(morph_global.isEnabled())
      {
         float factor = _gfactor;
         // // patch.ab_mode = round(mathLerpf(_l.ab_mode, _r.ab_mode, factor));
         float tuneL = (_l.mastertune_coarse - 12) + (_l.mastertune_fine - 50)/100.0;
         float tuneR = (_r.mastertune_coarse - 12) + (_r.mastertune_fine - 50)/100.0;
         float tune =  mathLerpf(tuneL, tuneR, factor);
         // trace "xxx tune="+tune+" frac(tune)="+frac(tune);
         if(frac(tune) > 0.5)
         {
            _d.mastertune_coarse = mathClampi(int(tune)+1+12, 0, 24);
            _d.mastertune_fine   = mathClampi((-(1.0 - frac(tune)))*100 + 50, 0, 100);
         }
         else if(frac(tune) < -0.5)
         {
            _d.mastertune_coarse = mathClampi(int(tune)-1+12, 0, 24);
            _d.mastertune_fine   = mathClampi(((1.0 + frac(tune)))*100 + 50, 0, 100);
         }
         else
         {
            _d.mastertune_coarse = mathClampi(int(tune)+12, 0, 24);
            _d.mastertune_fine   = frac(tune)*100 + 50;
         }
         // trace "xxx   ==> coarse="+(patch.mastertune_coarse-12)+" fine="+((patch.mastertune_fine-50)/100.0);
      }

      if(_bProxy)
         _d.patch_name = _r.patch_name;
   }

   // <method.png>
   protected =replay= method morphPatch(Prophet12_Patch _l, Prophet12_Patch _r) {

      float gfactor = morph_global.getFactor();

      if(data.b_morph_preview)
      {
         if(null != out_dev)
         {
            MIDIPipeFrame frOut;
            frOut.empty();
            frOut.setRoot(current_pipe_root);
            shadow_frame <= frOut;

            // Update temporary shadow patch
            morphPatchInt(shadow_patch, _l, _r, gfactor, true/*bProxy*/);

            replay_patch.sendDiff(shadow_patch, true/*bProxy*/);
            replay_patch.copyFrom(shadow_patch);

            out_dev.begin();

            frOut.emit();

            // trace "xxx morph preview: frOut.numEvents="+frOut.numEvents+" out_dev="+#(out_dev)+" l="+_l.patch_name+" r="+_r.patch_name;

            out_dev.send(milliSeconds());
         }
      }
      else
      {
         // Update current patch
         morphPatchInt(patch, _l, _r, gfactor, false/*bProxy*/);
      }
   }

   // <ui_handle.png>
   protected method handleMorphRandomize() {

      Global.Print("Morph: Randomize");

      rand_patch.loadRandom(cm_morph_mode.getSelectedOption() - 1);

      handleMorphEdited();
   }

   // <method.png>
   protected method morphLR() {
      Prophet12_Patch l <= data.patches.get(cm_morph_patch_nr_l.getSelectedOption());
      Prophet12_Patch r <= data.patches.get(cm_morph_patch_nr_r.getSelectedOption());
      morphPatch(l, r);

      scheduleUIUpdate();

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }
   }

   // <ui_handle.png>
   protected method handleMorphEdited() {
      // trace "xxx handleMorphEdited";

      if(data.b_morph_auto)
      {
         Prophet12_Patch *l;
         Prophet12_Patch *r;

         l <= data.patches.get(cm_morph_patch_nr_l.getSelectedOption());

         if(0 == cm_morph_mode.getSelectedOption())
            r <= data.patches.get(cm_morph_patch_nr_r.getSelectedOption());
         else
            r <= rand_patch;

         morphPatch(l, r);

         if(!data.b_morph_preview)
         {
            scheduleUIUpdate();

            if(data.b_autosend)
            {
               scheduleMIDISendPatch();
            }
         }
      }

   }

   // <ui_show.png>
   public method showRandOscDialog() {
      dlg_randosc.showRandOsc(this);
   }

   // <method.png>
   public virtual printCurrentPatchNrInfo(int _patchNr, String _patchName) {
      local Integer bankIdx = _patchNr / 99;
      local Integer prgIdx = _patchNr % 99;
      local Integer bankNr = bankIdx + 1;
      local Integer prgNr = prgIdx + 1;
      Global.Print("Select patch "+bank_names.get(bankIdx)+" P"+prgNr.printf("%d")+" \""+_patchName+"\" b:$"+bankNr.printf("%02x")+" p:$"+prgNr.printf("%02x"));
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      // trace "[>>>] Prophet12::onKey: code="+_k.code+" pressed="+_k.pressed+" mod="+_k.mod;

      if(_k.modCtrl())
      {
         switch(_k.pressed)
         {
            case 'q':
               cb_prg_menu_multiedit.toggleSelection();
               handleMultiEditEnableChanged(false/*bQuiet*/);
               return true;

            case 's':
               Global.Debug("Prophet12: send patch manually");
               // // queued_midi_patch_nr = 0;
               scheduleMIDISendPatch();
               return true;

            case 'e':
               handlePatchReceive(true/*bEdit*/);
               return true;

            case 'c':
               handlePatchCopy();
               return true;

            case 'v':
               handlePatchPaste();
               return true;

            case 'n':
               handlePatchInit();
               return true;
         }
      }

      switch(_k.pressed)
      {
         case VKEY_HOME:
            if(STConfig.b_key_swap_pattern_home_end)
               selectPreviousPatch();
            else
               selectNextPatch();
            return true;

         case VKEY_END:
            if(STConfig.b_key_swap_pattern_home_end)
               selectNextPatch();
            else
               selectPreviousPatch();
            return true;

         case 'r':
            showRandOscDialog();
            return true;
      }

      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      StringAction *sac;

      // trace "[>>>] Prophet12::consumeAction: acName="+acName+" ap="+#(ap);

      switch(acName)
      {
         case TA_MIDISEND:
            handleMIDISendTimer();
            return true;

         case TA_UPDATEMIDI:
            patch.sendMIDIUpdate(out_dev, midi_ch);
            ta_updatemidi.schedule();
            return true;

         case TA_UPDATEUI:
            handleUIUpdateTimer();
            return true;

         case TA_NRPNGRACE:
            b_nrpngrace = false;
            return true;

         case Prophet12_MorphForm.ACTION_MORPH_EDITED:
            handleMorphEdited();
            return true;

         case ComboBoxPopup.ACTION_OPTIONSELECTED:
            if(@(ap) == @(cmp_find_catbrowse))
            {
               handleFindCategoryBrowseOptionSelected(_action);
            }
            return true;

         case P12_RandOscDialog.ACTION_RANDOSC_CHANGED:
            updateUIFromPatch();
            return true;
      }

      switch(@(ap))
      {
         // Patch:
         case @(cb_patch_autosend):
            handlePatchAutosendChanged();
            return true;

         case @(cb_patch_diff):
            handlePatchDiffChanged();
            return true;

         case @(bt_patch_project):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleGoToFirstProjectPatch();
            }
            else
            {
               handleGoToNextBank();
            }
            return true;

         case @(cm_patch_nr):
            handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
            return true;

         case @(tf_patch_name):
            handlePatchNameChanged();
            if(TextField.ACTION_TEXTENTERED == acName)
            {
               refocusDefault();
            }
            return true;

         case @(cb_patch_recvnames):
            b_recv_patch_names = cb_patch_recvnames.isSelected();
            Global.Print("Recv Patch Names is "+Utils.GetEnableString(b_recv_patch_names));
            return true;

         case @(tf_layer_a_name):
            handleLayerANameChanged();
            return true;

         case @(tf_layer_b_name):
            handleLayerBNameChanged();
            return true;

         case @(cm_abmode):
            handleABModeChanged();
            return true;

         case @(fp_splitpoint):
            handleSplitPointChanged();
            return true;

         case @(fp_mastertune_coarse):
            handleMasterTuneCoarseChanged();
            return true;

         case @(fp_mastertune_fine):
            handleMasterTuneFineChanged();
            return true;

         case @(cm_patch_category):
            handlePatchCategoryChanged();
            return true;

         case @(cm_find_category):
            handleFindCategoryChanged();
            return true;

         case @(bt_find_catprev):
            handleFindCategoryPrev();
            return true;

         case @(bt_find_catbrowse):
            handleFindCategoryBrowse();
            return true;

         case @(bt_find_catnext):
            handleFindCategoryNext();
            return true;

         case @(cm_patch_nr_midi):
            handleMIDIPatchNrChanged();
            return true;

         case @(cb_patch_midi_follow):
            handlePatchMIDIFollowChanged();
            return true;

         case @(cb_patch_proxy_follow):
            handlePatchProxyFollowChanged();
            return true;

         case @(cb_patch_proxy_lock):
            handlePatchProxyLockChanged();
            return true;

         case @(cb_patch_proxy_reset):
            handlePatchProxyResetChanged();
            return true;

         case @(cb_nrpn_recv):
            handleNRPNRecvChanged();
            return true;

         case @(bt_patch_receive_bank):
            handlePatchReceiveBank();
            return true;

         case @(bt_patch_receive_prg):
            handlePatchReceive(false/*bEdit*/);
            return true;

         case @(bt_patch_receive_edit):
            handlePatchReceive(true/*bEdit*/);
            return true;

         case @(bt_patch_send):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               clearMIDICache();
            }
            handlePatchSend();
            return true;

         case @(bt_patch_copy):
            handlePatchCopy();
            return true;

         case @(bt_patch_paste):
            handlePatchPaste();
            return true;

         case @(bt_patch_init):
            handlePatchInit();
            return true;

         case @(pm_tools):
            Global.Debug2("p12: pm_tools acName="+acName);
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close tools menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "copy_from_replay_patch":
                  handleCopyFromReplayPatch();
                  return true;

               case "copy_a_to_clipboard":
                  handleCopyAToClipboard();
                  return true;

               case "copy_b_to_clipboard":
                  handleCopyBToClipboard();
                  return true;

               case "paste_clipboard_to_a":
                  handlePasteClipboardToA();
                  return true;

               case "paste_clipboard_to_b":
                  handlePasteClipboardToB();
                  return true;

               case "copy_a_to_b":
                  handleCopyAToB();
                  return true;

               case "copy_b_to_a":
                  handleCopyBToA();
                  return true;

               case "swap_ab":
                  handleSwapAB();
                  return true;

               case "rand_osc":
                  showRandOscDialog();
                  return true;

               case "init_a":
                  handleInitA();
                  return true;

               case "init_b":
                  handleInitB();
                  return true;
            }
            return true;

         case @(bt_patch_tools):
            showToolsMenu();
            return true;

         case @(bt_mts):
            handleEditMTS1();
            return true;

         case @(cm_prg_menu_layer):
            handleLayerChanged();
            return true;

         case @(cb_prg_menu_solo):
            handleSoloChanged();
            return true;

         case @(bt_prg_menu_voice):
            selectMenuOption(MENU_VOICE);
            return true;

         case @(bt_prg_menu_osc):
            selectMenuOption(MENU_OSC);
            return true;

         case @(bt_prg_menu_env):
            selectMenuOption(MENU_ENV);
            return true;

         case @(bt_prg_menu_lfo):
            selectMenuOption(MENU_LFO);
            return true;

         case @(bt_prg_menu_delay):
            selectMenuOption(MENU_DELAY);
            return true;

         case @(bt_prg_menu_matrix):
            selectMenuOption(MENU_MATRIX);
            return true;

         case @(fp_prg_menu_multioff):
            handleMultiEditOffChanged();
            return true;

         case @(fp_prg_menu_multinum):
            handleMultiEditNumChanged();
            return true;

         case @(cb_prg_menu_multiedit):
            handleMultiEditEnableChanged(false/*bQuiet*/);
            return true;

         case @(fp_lpffreq):
            handleLPFFreqChanged();
            return true;

         case @(fp_lpfres):
            handleLPFResChanged();
            return true;

         case @(fp_lpfkeyamount):
            handleLPFKeyAmountChanged();
            return true;

         case @(cb_lpf4pole):
            handleLPF4PoleChanged();
            return true;

         case @(fp_hpffreq):
            handleHPFFreqChanged();
            return true;

         case @(fp_hpfres):
            handleHPFResChanged();
            return true;

         case @(fp_hpfkeyamount):
            handleHPFKeyAmountChanged();
            return true;

         case @(fp_fbamount):
            handleFBAmountChanged();
            return true;

         case @(fp_fbtune):
            handleFBTuneChanged();
            return true;

         case @(cb_fb):
            handleFBEnableChanged();
            return true;

         case @(cm_fmmode):
            handleFMModeChanged();
            return true;

         case @(fp_voicevol):
            handleVoiceVolChanged();
            return true;

         case @(fp_vcaext):
            handleVCAExtChanged();
            return true;

         case @(fp_panext):
            handlePanExtChanged();
            return true;

         case @(fp_panspread):
            handlePanSpreadChanged();
            return true;

         case @(fp_distamount):
            handleDistAmountChanged();
            return true;

         case @(cb_charenable):
            handleCharEnableChanged();
            return true;

         case @(fp_sub):
            handleSubChanged();
            return true;

         case @(fp_air):
            handleAirChanged();
            return true;

         case @(fp_girth):
            handleGirthChanged();
            return true;

         case @(fp_hack):
            handleHackChanged();
            return true;

         case @(fp_decimate):
            handleDecimateChanged();
            return true;

         case @(fp_drive):
            handleDriveChanged();
            return true;

         case @(cb_glide):
            handleGlideEnableChanged();
            return true;

         case @(cm_glidemode):
            handleGlideModeChanged();
            return true;

         case @(fp_pitchbendup):
            handlePitchbendUpChanged();
            return true;

         case @(fp_pitchbenddown):
            handlePitchbendDownChanged();
            return true;

         case @(fp_unidetune):
            handleUniDetuneChanged();
            return true;

         case @(cm_unimode):
            handleUniModeChanged();
            return true;

         case @(cm_unikeyassign):
            handleUniKeyAssignChanged();
            return true;

         case @(cb_uni):
            handleUniEnableChanged();
            return true;

         case @(cb_arp):
            handleArpEnableChanged();
            return true;

            // Morph
         case @(cb_morph_auto):
            handleMorphAutoChanged();
            return true;

         case @(cb_morph_preview):
            handleMorphPreviewChanged();
            return true;

         case @(cm_morph_patch_nr_l):
         case @(cm_morph_patch_nr_r):
            handleMorphEdited();
            return true;

         case @(bt_morph_swap):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleMorphSelectCurrentMinusOne();
            }
            else
            {
               handleMorphSwap();
            }
            return true;

         case @(bt_morph_select_all_or_none):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleMorphResetAllBias();
            }
            else
            {
               handleMorphSelectAllOrNone();
            }
            return true;

         case @(cm_morph_mode):
            handleMorphModeChanged();
            return true;

         case @(cm_morph_layer):
            handleMorphLayerChanged();
            return true;

         case @(bt_morph_randomize):
            handleMorphRandomize();
            return true;
      }

      return XMLForm::consumeAction(_action);
   }

}
