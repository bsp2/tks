// ----
// ---- file   : Prophet12_MatrixForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2017 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 18Feb2017
// ---- changed: 19Feb2017
// ----
// ----
// ----

module MProphet12_MatrixForm;

use namespace ui;
use namespace st2;


// <class.png>
class Prophet12_MatrixForm extends XMLForm, ActionProvider, MIDIMapDefs, Prophet12_Defs {

   protected Prophet12_Env *env;

   protected PointerArray mod_forms;

   protected ScrollPane *sp_entries;

   namespace EditMIDISynthFormProphet12 *parent_editor;

   protected Prophet12_Program *layer;


   // <init.png>
   public method init(EditMIDISynthFormProphet12 _parentEditor) : boolean {

      parent_editor <= _parentEditor;

      if(!initPakFile("Prophet12_MatrixForm.xfm"))
      {
         trace "[---] failed to parse \"Prophet12_MatrixForm.xfm\"";
         return false;
      }

      if(!autoResolveIds(this))
      {
         return false;
      }

      mod_forms.free();
      int modIdx = 0;
      loop(16)
      {
         Prophet12_MatrixEntryForm form <= findLayerById("mod"+modIdx);

         if(null != form)
         {
            if(form.init(this, modIdx))
            {
               form.setLayoutHints(Layout.BOTTOM);
               mod_forms.add(form);
            }
            else
            {
               trace "[---] Prophet12_MatrixForm::init: failed to init mod"+modIdx;
               return false;
            }
         }
         else
         {
            trace "[---] Prophet12_MatrixForm::init: failed to resolve mod"+modIdx;
            return false;
         }

         modIdx++;
      }

      recursiveBuildTabCycleLists();

      return true;
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {

      Prophet12_MatrixEntryForm *form;

      foreach form in mod_forms
      {
         form.addTabCycleOverrides(layers);
      }

   }

   // <ui_show.png>
   public method showLayer(Prophet12_Program _layer) {
      layer <= _layer;

      Prophet12_MatrixEntryForm *form;

      foreach form in mod_forms
      {
         form.showLayer(_layer);
      }

   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      if(_k.released == VKEY_TAB)
      {
         sp_entries.makeWidgetVisible(UI.GetKeyboardFocus());
      }
      return false;
   }

   // <ui_mouse.png>
   public virtual onMouse(MouseEvent _ev) : boolean {

      if(_ev.wheelUp())
         return true;

      if(_ev.wheelDown())
         return true;

      return XMLForm::onMouse(_ev);
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      StringAction *sac;

      switch(@(ap))
      {
         default:
            break;
      }

      return XMLForm::consumeAction(_action);
   }

}
