// ----
// ---- file   : STX_VirtualMIDIInDevice.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2021-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 09Dec2021
// ---- changed: 05Oct2024
// ----
// ----
// ----

module MSTX_VirtualMIDIInDevice;

use namespace st2;


// <class.png>
class STX_VirtualMIDIInDevice : STX_MIDIInDevice {
   String dev_name;

   define String AUDIO2RPN_NAME = "<Audio2RPN>"; // don't change or e.g. modmatrix presets will not load


   // <init.png>
   public method initVirtual(String _devName, int _devIdx) {
      dev_name = _devName;
      dev_idx  = _devIdx;
   }

   // <method_get.png>
   public virtual isOpen() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual getDeviceName() : String {
      return dev_name;
   }

   // <method_get.png>
   public virtual getAlias() : String {
      if(b_project)
      {
         return project_alias;
      }
      else
      {
         return getGlobalAlias();
      }
   }

   // <method_get.png>
   public virtual getGlobalAlias() : String {
      return MIDI.GetGlobalInDeviceAlias(dev_name);
   }

   // <method_get.png>
   public virtual getName() : String {
      return dev_name;
   }

   // // <method_find.png>
   // public =replay= virtual findOutDeviceAndCache() : STX_MIDIOutDevice {
   //    return null;
   // }

   // // <method_find.png>
   // public virtual findOutDeviceByNativeIdx() : STX_MIDIOutDevice {
   //    return null;
   // }

   // <method.png>
   public virtual start() {
      // intentionally left blank
   }

   // <method.png>
   public virtual close() {
      // intentionally left blank
   }

   // <method.png>
   public virtual keepAlive() : boolean {
      // intentionally left blank
      return true;
   }

   // <method.png>
   public virtual clearEvents() {
      // intentionally left blank
   }

   // <method_get.png>
   public virtual getNextLongMessageBySize(int _size, Buffer _ret) : boolean {
      explain "Return next long message that matches the given size. Return true if such a message was found, false otherwise.";
      // intentionally left blank
      return false;
   }

   // <method_get.png>
   public virtual getNextLongMessage(Buffer _ret) : boolean {
      // intentionally left blank
      return false;
   }

   // <method_set.png>
   public virtual setEnableParam(byte _ch, boolean _bEnabled) {
      // intentionally left blank
   }

}
