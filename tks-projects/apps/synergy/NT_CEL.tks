// ----
// ---- file   : NT_CEL.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2007-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 21Oct2007, 06Nov2007, 18Sep2009, 26Sep2010, 06Feb2011, 19Feb2012, 10Jan2015
// ----          15Feb2015, 29Apr2015, 28Jan2017, 29Mar2017, 24May2018, 12Jan2019, 13Jan2019
// ----          17Jan2019, 18Jan2019, 27Apr2019, 25Apr2020, 20Jun2021, 28Feb2025, 02Apr2025
// ----
// ----
// ----

module MNT_CEL;


class NT_CEL : NT_Defs {

   define int STYLE_NOTE      =  0;  // C-1, ---, A#2..
   define int STYLE_LETTER    =  1;  // 0..9, A..Z, a..z (0..61)
   define int STYLE_HEX       =  2;  // 00..FF (actually depends on RANGE_xxx)
   define int STYLE_PATNR2    =  3;  // 01A..32D
   define int STYLE_PATNR3    =  4;  // 1A..9D
   define int STYLE_BAR4      =  5;  //
   define int STYLE_BAR8      =  6;  //
   define int STYLE_BAR16     =  7;  //
   define int STYLE_BAR32     =  8;  //
   define int STYLE_COLOR     =  9;  // color-block
   define int STYLE_HI_NIBBLE = 10;  // upper byte nibble
   define int STYLE_LO_NIBBLE = 11;  // lower byte nibble

   // STYLE_HEX ranges:
   define int RANGE_0_255     = 0; // 0..255
   define int RANGE_0_127     = 1; // 0..127
   define int RANGE_M128_P127 = 2; // 0..255 => -128..127
   define int RANGE_M64_P63   = 3; // 0..127 => -64..63
   define int RANGE_BINARY_127= 4; // 0, 127
   define int RANGE_BINARY_255= 5; // 0, 255

   static StringArray cel_style_names = ["NOTE", "LETTER", "HEX", "PATNR2", "PATNR3", "BAR4", "BAR8", "BAR16", "BAR32", "COLOR", "HI_NIBL", "LO_NIBL"];

   static StringArray cel_range_names = ["0..255", "0..127", "-128..127", "-64..63", "0, 127", "0, 255"];

   public boolean b_visible;  // Show/hide controller
   public int     ctl_id;     // NT_TrackPattern.CTL_xxx
   public int     style;      // STYLE_xxx
   public int     range;      // RANGE_xxx
   public int     bg_tint;    // 0=no tint, ARGB color otherwise

   public int     num_x;      // cel width (see NT_TEL.calcCursorExtents())

   public int     alt_style;  // alternative style (for editor, swap with "lctrl-x [")


   public method init(boolean _bVisible, int _ctlId, int _style, int _range) {
      b_visible = _bVisible;
      ctl_id    = _ctlId;
      style     = _style;
      range     = _range;
      alt_style = -1;
   }

   public method initDefaultAltStyle() {
      if(CTL_NOTE1 <= ctl_id <= CTL_NOTE5)
      {
         alt_style = -1; //style
      }
      else if(CTL_VEL1 <= ctl_id <= CTL_VEL5)
      {
         alt_style = STYLE_BAR4;///-1;
      }
      else if(CTL_GROOVE == ctl_id)
      {
         alt_style = STYLE_HEX;
      }
      else if(CTL_USR <= ctl_id < (CTL_USR + CTL_NUMUSR))
      {
         if(STYLE_LETTER == style)
            alt_style = style;
         else if(STYLE_HI_NIBBLE == style)
            alt_style = STYLE_HEX;
         else if(STYLE_LO_NIBBLE == style)
            alt_style = STYLE_HEX;
         else if(STYLE_BAR4 <= style <= STYLE_BAR32)
            alt_style = STYLE_HEX;
         else
            alt_style = STYLE_BAR4;
      }
      else if(CTL_PB == ctl_id)
      {
         alt_style = STYLE_BAR4;
      }
      else if(CTL_AT == ctl_id)
      {
         alt_style = STYLE_BAR4;
      }
      else
      {
         alt_style = -1;
      }
   }

   public method clipCtlValue(float f) : float {

      if(CTL_DUR1 <= ctl_id <= CTL_DUR5)
      {
         if(f < 0)
            f = 0;
      }
      else
      {
         switch(style)
         {
            case STYLE_NOTE:
               if(f > 127) f = 127;
               else if(f < -127) f = -127;
               break;

            case STYLE_PATNR3:
               if(f > 127) f = 127;
               else if(f < 0) f = 0;
               break;

            case STYLE_PATNR2:
               if(f > 35) f = 35;
               else if(f < 0) f = 0;
               break;

            case STYLE_LETTER:
               if(f > 61) f = 61;
               else if(f < 0 ) f = 0;
               break;

            default:
            case STYLE_HEX:
            case STYLE_BAR4:
            case STYLE_BAR8:
            case STYLE_BAR16:
            case STYLE_BAR32:
               switch(range)
               {
                  default:
                  case RANGE_0_255:
                     if(f > 255) f = 255;
                     else if(f < 0) f = 0;
                     break;

                  case RANGE_0_127:
                     if(f > 128) f = 128;  // convenience: allow 0x80 (will be clipped later)
                     else if (f < 0) f = 0;
                     break;

                  case RANGE_M128_P127:
                     if(f > 255) f = 255;
                     else if (f < 0) f = 0;
                     break;

                  case RANGE_M64_P63:
                     if(f > 128) f = 128;   // convenience: allow 0x80 (will be clipped later)
                     else if (f < 0) f = 0;
                     break;

                  case RANGE_BINARY_127:
                     if(f>=64) f = 128;  // convenience: allow 0x80 (will be clipped later)
                     else f = 0;
                     break;

                  case  RANGE_BINARY_255:
                     if(f>=127) f = 255;
                     else f = 0;
                     break;
               }
               break;
         }
      }
      return f;
   }

   public method getMinVal() : float {
      return getMinMaxVal(0);
   }

   public method getMaxVal() : float {
      return getMinMaxVal(1);
   }

   public method getMaxValEdit() : float {
      // e.g. when editing envelope in Tracker node
      float r = getMinMaxVal(1);
      if(STYLE_LO_NIBBLE == style)
         r = mathMinf(r, 15.0);
      return r;
   }

   protected method getMinMaxVal(int t) : float {
      switch(style)
      {
         case STYLE_NOTE:
         case STYLE_PATNR3:
            switch(t)
            {
               case 0: return 0;
               case 1: return 127;
            }
            break;

         case STYLE_PATNR2:
            switch(t)
            {
               case 0: return 0;
               case 1: return 35;
            }
            break;

         case STYLE_LETTER:
            switch(t)
            {
               case 0: return 0;
               case 1: return 61;
            }
            break;

         default:
         case STYLE_HEX:
         case STYLE_BAR4:
         case STYLE_BAR8:
         case STYLE_BAR16:
         case STYLE_BAR32:
            switch(range)
            {
               default:
               case RANGE_0_255:
                  switch(t)
                  {
                     case 0: return 0;
                     case 1: return 255;
                  }
                  break;

               case RANGE_0_127:
                  switch(t)
                  {
                     case 0: return 0;
                     case 1: return 127;
                  }
                  break;

               case RANGE_M128_P127:
                  switch(t)
                  {
                     case 0: return 0;
                     case 1: return 255;
                  }
                  break;

               case RANGE_M64_P63:
                  switch(t)
                  {
                     case 0: return 0;
                     case 1: return 127;
                  }
                  break;

               case RANGE_BINARY_127:
                  switch(t)
                  {
                     case 0: return 0;
                     case 1: return 127;
                  }
                  break;

               case RANGE_BINARY_255:
                  switch(t)
                  {
                     case 0: return 0;
                     case 1: return 127;
                  }
                  break;
            }
            break;
      }
      return 0;
   }

   public method getValueBias() : float {
      switch(style)
      {
         case STYLE_NOTE:
         case STYLE_PATNR3:
         case STYLE_PATNR2:
         case STYLE_LETTER:
            return 0;

         default:
         case STYLE_HEX:
         case STYLE_BAR4:
         case STYLE_BAR8:
         case STYLE_BAR16:
         case STYLE_BAR32:
            switch(range)
            {
               default:
               case RANGE_0_255:
               case RANGE_0_127:
               case RANGE_BINARY_127:
               case RANGE_BINARY_255:
                  return 0;

               case RANGE_M128_P127:
                  return 128;

               case RANGE_M64_P63:
                  return 64;
            }
            break;
      }
      return 0;
   }

   public method isNoteCtl() : boolean {
      return
         (NT_TrackPattern.CTL_NOTE1 == ctl_id) ||
         (NT_TrackPattern.CTL_NOTE2 == ctl_id) ||
         (NT_TrackPattern.CTL_NOTE3 == ctl_id) ||
         (NT_TrackPattern.CTL_NOTE4 == ctl_id) ||
         (NT_TrackPattern.CTL_NOTE5 == ctl_id) ;
   }

   public method isDurCtl() : boolean {
      return
         (NT_TrackPattern.CTL_DUR1 == ctl_id) ||
         (NT_TrackPattern.CTL_DUR2 == ctl_id) ||
         (NT_TrackPattern.CTL_DUR3 == ctl_id) ||
         (NT_TrackPattern.CTL_DUR4 == ctl_id) ||
         (NT_TrackPattern.CTL_DUR5 == ctl_id) ;
   }

   public method typeMatches(NT_CEL _o) : boolean {
      if(isNoteCtl() && _o.isNoteCtl())
      {
         return true;
      }
      return (ctl_id == _o.ctl_id);
   }

   public method getNextCelCursorPosition(int _cursorX, int _ctlMapId) : int {
      _cursorX++;

      if((STYLE_HEX == style) || (STYLE_PATNR2 == style))
      {
         if(_ctlMapId & NT_TEL.MSB_FLAG)
         {
            // Skip LSB
            _cursorX++;
         }
      }
      else if(STYLE_PATNR3 == style)
      {
         if(_ctlMapId & NT_TEL.MSB_FLAG)
         {
            // Skip third cel
            _cursorX++;
         }
         else if(_ctlMapId & NT_TEL.TSB_FLAG)
         {
            // Skip 2nd and 3rd cels
            _cursorX += 2;
         }
      }

      return _cursorX;
   }

   public static GetDefaultStyle(int _ctlId) : int {
      switch(_ctlId)
      {
         case CTL_NOTE1:    return STYLE_NOTE;
         case CTL_NOTE2:    return STYLE_NOTE;
         case CTL_NOTE3:    return STYLE_NOTE;
         case CTL_NOTE4:    return STYLE_NOTE;
         case CTL_NOTE5:    return STYLE_NOTE;
         case CTL_VEL1:     return STYLE_HEX;
         case CTL_VEL2:     return STYLE_HEX;
         case CTL_VEL3:     return STYLE_HEX;
         case CTL_VEL4:     return STYLE_HEX;
         case CTL_VEL5:     return STYLE_HEX;
         case CTL_DUR1:     return STYLE_HEX;
         case CTL_DUR2:     return STYLE_HEX;
         case CTL_DUR3:     return STYLE_HEX;
         case CTL_DUR4:     return STYLE_HEX;
         case CTL_DUR5:     return STYLE_HEX;
         case CTL_POLYAT1:  return STYLE_HEX;
         case CTL_POLYAT2:  return STYLE_HEX;
         case CTL_POLYAT3:  return STYLE_HEX;
         case CTL_POLYAT4:  return STYLE_HEX;
         case CTL_POLYAT5:  return STYLE_HEX;
         case CTL_INSTR:    return STYLE_LETTER;
         case CTL_PC:       return STYLE_HEX;
         case CTL_AT:       return STYLE_HEX;
         case CTL_PB:       return STYLE_HEX;
         case CTL_SLIDE:    return STYLE_HEX;
         case CTL_DELAY:    return STYLE_HEX;
         case CTL_RETRIG:   return STYLE_HEX;
         case CTL_BPM:      return STYLE_HEX;
         case CTL_MUTE:     return STYLE_LETTER;
         case CTL_BPM_MUL:  return STYLE_HEX;
         case CTL_SEEK:     return STYLE_HEX;
         case CTL_GROOVE:   return STYLE_HEX;
         default:           return STYLE_HEX;   // CTL_USRn
      }
   }

   public static GetDefaultRange(int _ctlId) : int {
      switch(_ctlId)
      {
         case CTL_NOTE1:    return RANGE_0_127;
         case CTL_NOTE2:    return RANGE_0_127;
         case CTL_NOTE3:    return RANGE_0_127;
         case CTL_NOTE4:    return RANGE_0_127;
         case CTL_NOTE5:    return RANGE_0_127;
         case CTL_VEL1:     return RANGE_0_127;
         case CTL_VEL2:     return RANGE_0_127;
         case CTL_VEL3:     return RANGE_0_127;
         case CTL_VEL4:     return RANGE_0_127;
         case CTL_VEL5:     return RANGE_0_127;
         case CTL_DUR1:     return RANGE_0_255;
         case CTL_DUR2:     return RANGE_0_255;
         case CTL_DUR3:     return RANGE_0_255;
         case CTL_DUR4:     return RANGE_0_255;
         case CTL_DUR5:     return RANGE_0_255;
         case CTL_POLYAT1:  return RANGE_0_127;
         case CTL_POLYAT2:  return RANGE_0_127;
         case CTL_POLYAT3:  return RANGE_0_127;
         case CTL_POLYAT4:  return RANGE_0_127;
         case CTL_POLYAT5:  return RANGE_0_127;
         case CTL_INSTR:    return RANGE_0_127;
         case CTL_PC:       return RANGE_0_127;
         case CTL_AT:       return RANGE_0_127;
         case CTL_PB:       return RANGE_0_255;
         case CTL_SLIDE:    return RANGE_0_255;
         case CTL_DELAY:    return RANGE_0_255;
         case CTL_RETRIG:   return RANGE_0_255;
         case CTL_BPM:      return RANGE_0_255;
         case CTL_MUTE:     return RANGE_0_255;
         case CTL_BPM_MUL:  return RANGE_0_255;
         case CTL_SEEK:     return RANGE_0_255;
         case CTL_GROOVE:   return RANGE_0_255;
         default:           return RANGE_0_255;   // CTL_USRn
      }
   }

}
