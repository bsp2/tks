// ----
// ---- file   : NSQ_FilterDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2020-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 15Apr2020
// ---- changed: 28Jul2023, 04Oct2023, 30Oct2023
// ----
// ----
// ----

module MNSQ_FilterDialog;

use namespace ui;


// <class.png>
class NSQ_FilterDialog extends Dialog, ActionProvider {

   NodeSeqEditor *parent_editor;

   protected XMLForm *xfm;

   protected ComboBox *cm_preset;

   protected CheckBox *cb_notes;
   protected CheckBox *cb_cc;
   protected CheckBox *cb_rpn;
   protected CheckBox *cb_nrpn;
   protected CheckBox *cb_pitchbend;
   protected CheckBox *cb_polypressure;
   protected CheckBox *cb_chpressure;
   protected CheckBox *cb_prgchg;
   protected CheckBox *cb_sysex;

   protected Button *bt_exec;
   protected Button *bt_cancel;


   // <ui_init.png>
   public method init(NodeSeqEditor _editor) : boolean {

      parent_editor <= _editor;

      initDialog();

      xfm <= XMLForm.New_PakFile("NSQ_FilterDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      initWindow(xfm,
                 "Filter Events",
                 100, 100,
                 640, 240
                 );

      return true;
   }

   public virtual isPopup() : boolean {
      return true;
   }

   public virtual isModal():boolean {
      return true;
   }

   public virtual isResizable() : boolean {
      return false;
   }

   // <ui_show.png>
   protected virtual preShow() {

      if(!b_layer_postinit_done)
         resizeToMinimum();

      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      UI.SetKeyboardFocus(bt_exec);
   }

   // <ui_handle.png>
   protected method handlePresetChanged() {
      switch(cm_preset.getSelectedOption())
      {
         case 0:  // All
            cb_notes       .setSelected(true);
            cb_cc          .setSelected(true);
            cb_rpn         .setSelected(true);
            cb_nrpn        .setSelected(true);
            cb_pitchbend   .setSelected(true);
            cb_polypressure.setSelected(true);
            cb_chpressure  .setSelected(true);
            cb_prgchg      .setSelected(true);
            cb_sysex       .setSelected(true);
            break;

         case 1:  // None
            cb_notes       .setSelected(false);
            cb_cc          .setSelected(false);
            cb_rpn         .setSelected(false);
            cb_nrpn        .setSelected(false);
            cb_pitchbend   .setSelected(false);
            cb_polypressure.setSelected(false);
            cb_chpressure  .setSelected(false);
            cb_prgchg      .setSelected(false);
            cb_sysex       .setSelected(false);
            break;

         case 2:  // Notes
            cb_notes       .setSelected(true);
            cb_cc          .setSelected(false);
            cb_rpn         .setSelected(false);
            cb_nrpn        .setSelected(false);
            cb_pitchbend   .setSelected(false);
            cb_polypressure.setSelected(false);
            cb_chpressure  .setSelected(false);
            cb_prgchg      .setSelected(false);
            cb_sysex       .setSelected(false);
            break;

         case 3:  // Controllers
            cb_notes       .setSelected(false);
            cb_cc          .setSelected(true);
            cb_rpn         .setSelected(true);
            cb_nrpn        .setSelected(true);
            cb_pitchbend   .setSelected(false);
            cb_polypressure.setSelected(false);
            cb_chpressure  .setSelected(false);
            cb_prgchg      .setSelected(false);
            cb_sysex       .setSelected(false);
            break;

         case 4:  // Performance
            cb_notes       .setSelected(false);
            cb_cc          .setSelected(false);
            cb_rpn         .setSelected(false);
            cb_nrpn        .setSelected(false);
            cb_pitchbend   .setSelected(true);
            cb_polypressure.setSelected(true);
            cb_chpressure  .setSelected(true);
            cb_prgchg      .setSelected(false);
            cb_sysex       .setSelected(false);
            break;

         case 5:  // Program Change
            cb_notes       .setSelected(false);
            cb_cc          .setSelected(false);
            cb_rpn         .setSelected(false);
            cb_nrpn        .setSelected(false);
            cb_pitchbend   .setSelected(false);
            cb_polypressure.setSelected(false);
            cb_chpressure  .setSelected(false);
            cb_prgchg      .setSelected(true);
            cb_sysex       .setSelected(false);
            break;

         case 6:  // SysEx
            cb_notes       .setSelected(false);
            cb_cc          .setSelected(false);
            cb_rpn         .setSelected(false);
            cb_nrpn        .setSelected(false);
            cb_pitchbend   .setSelected(false);
            cb_polypressure.setSelected(false);
            cb_chpressure  .setSelected(false);
            cb_prgchg      .setSelected(false);
            cb_sysex       .setSelected(true);
            break;
      }
      Global.Print("Load preset \""+cm_preset.getSelectedOptionName()+"\"");
   }

   // <ui_handle.png>
   protected method handleCancel() {
      hide();
   }

   // <ui_handle.png>
   protected method handleExec() {
      hide();
      parent_editor.handleFilterEvents();
   }

   // <method_get.png>
   public method doNotes() : boolean {
      return cb_notes.isSelected();
   }

   // <method_get.png>
   public method doCC() : boolean {
      return cb_cc.isSelected();
   }

   // <method_get.png>
   public method doRPN() : boolean {
      return cb_rpn.isSelected();
   }

   // <method_get.png>
   public method doNRPN() : boolean {
      return cb_nrpn.isSelected();
   }

   // <method_get.png>
   public method doPitchbend() : boolean {
      return cb_pitchbend.isSelected();
   }

   // <method_get.png>
   public method doPolyPressure() : boolean {
      return cb_polypressure.isSelected();
   }

   // <method_get.png>
   public method doChPressure() : boolean {
      return cb_chpressure.isSelected();
   }

   // <method_get.png>
   public method doPrgChg() : boolean {
      return cb_prgchg.isSelected();
   }

   // <method_get.png>
   public method doSysEx() : boolean {
      return cb_sysex.isSelected();
   }

   // <ui_kbd.png>
   public virtual onKey(Key _key) : boolean {
      switch(_key.pressed)
      {
         case VKEY_ESCAPE:
            handleCancel();
            return true;

         case VKEY_RETURN:
         case VKEY_SPACE:
            handleExec();
            return true;

         case 'f':
         case 'p':
            UI.SetKeyboardFocus(cm_preset);
            return true;

         default:
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {

      String name = _ac.getActionName();

      switch(@(_ac.getActionProvider()))
      {
         case @(cm_preset):
            handlePresetChanged();
            return true;

         case @(bt_exec):
            handleExec();
            return true;

         case @(bt_cancel):
            handleCancel();
            return true;
      }

      return true;
   }

}
