// ----
// ---- file   : BidiCtl.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- created: 13Apr2024
// ---  changed: 22Apr2024
// ----
// ----
// ----

module MBidiCtl;

use namespace ui;
use namespace st2;


// <class.png>
abstract class BidiCtl : RemoteQueryCtlTargetsListener, MIDIMapDefs {
   // base class for bidirectional controllers
   //   implemented by:
   //     - FaderPort
   //     - MFTwister
   STX_MIDIInDevice *in_dev;
   STX_MIDIOutDevice *out_dev;

   // <method_init.png>
   public method init() : boolean {
      // implemented by derived classes
   }

   // <method.png>
   public method handleReplayTimer() {
      // implemented by derived classes
   }

   // <method.png>
   public method handleMIDIEvent(RecordedMIDIEvent _recEv, ClassArray _midiMapRTEventQueue) : boolean {
      // implemented by derived classes
      return false;
   }

   // <ui_handle.png>
   public =replay= method handleSelectOrEditScene() {
      // implemented by derived classes
      //   - called from UI thread
      //   - update rotary indicators from last seen morph scene src ctl value
   }

   // <method.png>
   public method tick() {
      // implemented by derived classes
      //   - called from replay thread
      //   - send queued fader / rotary-indicator updates (sync shadow with device state)
   }

   // <method.png>
   public =replay= method queueBidirectionalRPNUpdate(int _devIdx, byte _ch,
                                                      STX_MIDIOutDevice _autoDev,
                                                      short _rpn, short _rpnVal,
                                                      String _labelOrNull // "-" == unused
                                                      ) {
      // implemented by derived classes
   }

   // <save.png>
   public method saveState(Stream ofs) {
      // implemented by derived classes
   }

   // <load.png>
   public method loadState(Stream ifs) : boolean {
      // implemented by derived classes
      return true;
   }

}
