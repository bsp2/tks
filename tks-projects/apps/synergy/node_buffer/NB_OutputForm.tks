// ----
// ---- file   : NB_OutputForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2015-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 13Oct2015, 14Oct2015, 16Oct2015, 17Oct2015, 18Oct2015, 20Oct2015, 21Oct2015
// ----          20Sep2019, 05Oct2019, 23Jun2023, 11Nov2023
// ----
// ----
// ----

module MNB_OutputForm;

use namespace ui;
use namespace st2;


// <class.png>
class NB_OutputForm extends XMLForm, ActionProvider, MIDIMapDefs {

   protected NodeBufferEditor *parent_editor;

   protected NodeBufferOutput *output;

   protected ComboBox *cm_dev;
   protected CheckBox *cb_enable;
   protected ComboBox *cm_ch;

   protected ComboBox   *cm_playmode;
   protected FloatParam *fp_speed;
   protected ComboBox   *cm_speed;
   protected CheckBox   *cb_scalenotelen;
   protected FloatParam *fp_notelen;

   protected FloatParam *fp_buffer_offset;
   protected FloatParam *fp_micro_offset;
   protected FloatParam *fp_offset;
   protected FloatParam *fp_length;
   protected CheckBox   *cb_length;
   protected FloatParam *fp_arp_dynaoff_scl;
   protected FloatParam *fp_arp_dynalen_scl;

   protected FloatParam *fp_octave;
   protected FloatParam *fp_octave_rand;
   protected FloatParam *fp_octave_rand_prob;
   protected CheckBox   *cb_octave_rand_rep;
   protected FloatParam *fp_note;
   protected FloatParam *fp_pressure_scl;
   protected FloatParam *fp_pressure_off;

   protected ComboBox *cm_scale;
   protected ComboBox *cm_key;
   protected ComboBox *cm_key_mode;
   protected CheckBox *cb_key_arp;


   // <init.png>
   public method init(NodeBufferEditor _parentEditor) : boolean {

      parent_editor <= _parentEditor;

      if(!initPakFile("NB_OutputForm.xfm"))
      {
         trace "[---] failed to parse NB_OutputForm.xfm";
         return false;
      }

      if(!autoResolveIds(this))
      {
         return false;
      }

      fp_speed.setPresetOptions([0.25,      0.5,    0.75,  1.0,         1.5,   2.0],
                                ["Quarter", "Half", "3/4", "<default>", "6/4", "Double"]
                                );

      recursiveBuildTabCycleLists();

      return true;
   }

   // <midi_mmt.png>
   public method addMMTFocusLayers(PointerArray layers) {

      layers.joinRR(layers,
                    [
                       cm_dev,
                       cb_enable,
                       cm_ch,

                       cm_playmode,
                       fp_speed,
                       cm_speed,
                       cb_scalenotelen,
                       fp_notelen,

                       fp_buffer_offset,
                       fp_micro_offset,
                       fp_offset,
                       fp_length,
                       cb_length,
                       fp_arp_dynaoff_scl,
                       fp_arp_dynalen_scl,

                       fp_octave,
                       fp_octave_rand,
                       fp_octave_rand_prob,
                       cb_octave_rand_rep,
                       fp_note,
                       fp_pressure_scl,
                       fp_pressure_off,

                       cm_scale,
                       cm_key,
                       cm_key_mode,
                       cb_key_arp,
                     ]
                    );
   }

   // <method_set.png>
   public method showOutput(NodeBufferOutput _output) {
      output <= _output;

      StringArray devAll;
      devAll.join(["*"], MIDI.out_device_names_sorted);
      IntArray bgcolorsAll;
      bgcolorsAll.join([0], MIDI.out_device_bgcolors_sorted);

      cm_dev.setOptions(devAll);
      cm_dev.setOptionBGColors(bgcolorsAll);

      if(null != output)
      {
         cm_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(output.getDevIdx()) + 1);
         cm_dev.setEditable(true);
         cb_enable.setSelected(output.getEnable());
         cb_enable.setEditable(true);
         cm_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(output.getDevIdx(), "*"/*firstOptionOrNull*/));
         cm_ch.setSelectedOption(output.dev_ch + 1);
         cm_ch.setEditable(true);

         cm_playmode.setSelectedOption(output.play_mode);
         cm_playmode.setEditable(true);
         cm_speed.setSelectedOption(output.speed_div);
         cm_speed.setEditable(true);
         fp_speed.setValue(output.speed);
         fp_speed.setEditable(true);
         cb_scalenotelen.setSelected(output.b_scalenotelen);
         cb_scalenotelen.setEditable(true);
         fp_notelen.setValue(output.getNoteLength());
         fp_notelen.setEditable(true);

         fp_offset.setValue(output.offset);
         fp_offset.setEditable(true);
         fp_micro_offset.setValue(output.micro_offset);
         fp_micro_offset.setEditable(true);
         fp_buffer_offset.setValue(output.buffer_offset);
         fp_buffer_offset.setEditable(true);
         fp_length.setValue(output.length);
         fp_length.setEditable(true);
         cb_length.setSelected(output.b_length);
         cb_length.setEditable(true);
         fp_arp_dynaoff_scl.setValue(output.arp_dynaoff_scl);
         fp_arp_dynaoff_scl.setEditable(true);
         fp_arp_dynalen_scl.setValue(output.arp_dynalen_scl);
         fp_arp_dynalen_scl.setEditable(true);

         fp_octave.setValue(output.octave);
         fp_octave.setEditable(true);
         fp_octave_rand.setValue(output.octave_rand);
         fp_octave_rand.setEditable(true);
         fp_octave_rand_prob.setValue(output.octave_rand_prob);
         fp_octave_rand_prob.setEditable(true);
         cb_octave_rand_rep.setSelected(output.b_octave_rand_rep);
         cb_octave_rand_rep.setEditable(true);
         fp_note.setValue(output.note);
         fp_note.setEditable(true);
         fp_pressure_scl.setValue(output.pressure_scl);
         fp_pressure_scl.setEditable(true);
         fp_pressure_off.setValue(output.pressure_off);
         fp_pressure_off.setEditable(true);

         cm_scale.setSelectedOption(output.scale);
         cm_scale.setEditable(true);
         cm_key.setSelectedOption(output.key);
         cm_key.setEditable(true);
         cm_key_mode.setSelectedOption(output.key_mode);
         cm_key_mode.setEditable(true);
         cb_key_arp.setSelected(output.b_arp_dynakey);
         cb_key_arp.setEditable(true);
      }
      else
      {
         cm_dev.setSelectedOption(-1);
         cm_dev.setEditable(false);
         cb_enable.setEditable(false);
         cm_ch.setSelectedOption(-1);
         cm_ch.setEditable(false);

         cm_playmode.setSelectedOption(-1);
         cm_playmode.setEditable(false);
         cm_speed.setSelectedOption(-1);
         cm_speed.setEditable(true);
         fp_speed.setValue(1.0);
         fp_speed.setEditable(false);
         cb_scalenotelen.setSelected(false);
         cb_scalenotelen.setEditable(false);
         fp_notelen.setValue(1);
         fp_notelen.setEditable(false);

         fp_offset.setValue(0);
         fp_offset.setEditable(false);
         fp_micro_offset.setValue(0);
         fp_micro_offset.setEditable(false);
         fp_buffer_offset.setValue(0);
         fp_buffer_offset.setEditable(false);
         fp_length.setValue(0);
         fp_length.setEditable(false);
         cb_length.setSelected(false);
         cb_length.setEditable(false);
         fp_arp_dynaoff_scl.setValue(0);
         fp_arp_dynaoff_scl.setEditable(false);
         fp_arp_dynalen_scl.setValue(0);
         fp_arp_dynalen_scl.setEditable(false);

         fp_octave.setValue(0);
         fp_octave.setEditable(false);
         fp_octave_rand.setValue(0);
         fp_octave_rand.setEditable(false);
         fp_octave_rand_prob.setValue(0);
         fp_octave_rand_prob.setEditable(false);
         cb_octave_rand_rep.setSelected(false);
         cb_octave_rand_rep.setEditable(false);
         fp_note.setValue(0);
         fp_note.setEditable(false);
         fp_pressure_scl.setValue(1);
         fp_pressure_scl.setEditable(false);
         fp_pressure_off.setValue(0);
         fp_pressure_off.setEditable(false);

         cm_scale.setSelectedOption(-1);
         cm_scale.setEditable(false);
         cm_key.setSelectedOption(-1);
         cm_key.setEditable(false);
         cm_key_mode.setSelectedOption(-1);
         cm_key_mode.setEditable(false);
         cb_key_arp.setSelected(false);
         cb_key_arp.setEditable(false);
      }
   }

   // <ui_handle.png>
   protected method handleDevChanged() {
      output.setDevIdx(MIDI.SortedToUnsortedDevIdx(cm_dev.getSelectedOption() - 1));

      cm_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(output.getDevIdx(), "*"/*firstOptionOrNull*/));

      Global.Print("Dev is "+cm_dev.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleDevEnableChanged() {
      output.setEnable(cb_enable.isSelected());

      Global.Print("Output is "+Utils.GetEnableString(output.getEnable()));
   }

   // <ui_handle.png>
   protected method handleChChanged() {
      output.setDevCh(cm_ch.getSelectedOption() - 1);

      Global.Print("Ch is "+cm_ch.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handlePlayModeChanged() {
      output.setPlayMode(cm_playmode.getSelectedOption());

      Global.Print("Play mode is "+cm_playmode.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleSpeedDivChanged() {
      output.setSpeedDiv(cm_speed.getSelectedOption());

      Global.Print("Speed-Div is "+cm_speed.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleSpeedChanged() {
      output.setSpeed(fp_speed.getFloatValue());

      Global.Print("Speed is "+(output.getSpeed()*100)+"%");
   }

   // <ui_handle.png>
   protected method handleScaleNoteLenChanged() {
      output.setEnableScaleNoteLen(cb_scalenotelen.isSelected());

      Global.Print("Scale notelen is "+Utils.GetEnableString(output.getEnableScaleNoteLen()));
   }

   // <ui_handle.png>
   protected method handleNoteLenChanged() {
      output.setNoteLength(fp_notelen.getFloatValue());

      Global.Print("Notelen is "+output.getNoteLength());
   }

   // <ui_handle.png>
   protected method handleOffsetChanged() {
      output.setOffset(fp_offset.getFloatValue());

      Global.Print("Offset is "+output.getOffset());
   }

   // <ui_handle.png>
   protected method handleMicroOffsetChanged() {
      output.setMicroOffset(fp_micro_offset.getFloatValue());

      Global.Print("Micro offset is "+output.getMicroOffset());
   }

   // <ui_handle.png>
   protected method handleBufferOffsetChanged() {
      output.setBufferOffset(fp_buffer_offset.getFloatValue());

      Global.Print("Buffer offset is "+output.getBufferOffset());
   }

   // <ui_handle.png>
   protected method handleLengthChanged() {
      output.setLength(fp_length.getFloatValue());

      Global.Print("Length is "+output.getLength());
   }

   // <ui_handle.png>
   protected method handleLengthEnableChanged() {
      output.setEnableLength(cb_length.isSelected());

      Global.Print("Length is "+Utils.GetEnableString(output.getEnableLength()));
   }

   // <ui_handle.png>
   protected method handleArpDynaOffSclChanged() {
      output.setArpDynaOffScl(fp_arp_dynaoff_scl.getFloatValue());

      Global.Print("Arp dynamic offset scaling is "+output.getArpDynaOffScl());
   }

   // <ui_handle.png>
   protected method handleArpDynaLenSclChanged() {
      output.setArpDynaLenScl(fp_arp_dynalen_scl.getFloatValue());

      Global.Print("Arp dynamic length scaling is "+output.getArpDynaLenScl());
   }

   // <ui_handle.png>
   protected method handleOctaveChanged() {
      output.setOctave(fp_octave.getFloatValue());

      Global.Print("Octave is "+output.getOctave());
   }

   // <ui_handle.png>
   protected method handleOctaveRandChanged() {
      output.setOctaveRand(fp_octave_rand.getFloatValue());

      Global.Print("Octave randomize range is "+output.getOctaveRand());
   }

   // <ui_handle.png>
   protected method handleOctaveRandProbChanged() {
      output.setOctaveRandProb(fp_octave_rand_prob.getFloatValue());

      Global.Print("Octave randomization probability is "+output.getOctaveRandProb());
   }

   // <ui_handle.png>
   protected method handleOctaveRandRepChanged() {
      output.setEnableOctaveRandRep(cb_octave_rand_rep.isSelected());

      Global.Print("Octave random repeat is "+Utils.GetEnableString(output.getEnableOctaveRandRep()));
   }


   // <ui_handle.png>
   protected method handleNoteChanged() {
      output.setNote(fp_note.getFloatValue());

      Global.Print("Note is "+output.getNote());
   }

   // <ui_handle.png>
   protected method handlePressureSclChanged() {
      output.setPressureScl(fp_pressure_scl.getFloatValue());

      Global.Print("Pressure scl is "+(output.getPressureScl()*100)+"%");
   }

   // <ui_handle.png>
   protected method handlePressureOffChanged() {
      output.setPressureOff(fp_pressure_off.getFloatValue());

      Global.Print("Pressure off is "+output.getPressureOff());
   }

   // <ui_handle.png>
   protected method handleScaleChanged() {
      output.setScale(cm_scale.getSelectedOption());

      Global.Print("Scale is "+cm_scale.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleKeyChanged() {
      output.setKey(cm_key.getSelectedOption());

      Global.Print("Key is "+cm_key.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleKeyModeChanged() {
      output.setKeyMode(cm_key_mode.getSelectedOption());

      Global.Print("Key mode is "+cm_key_mode.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleKeyArpChanged() {
      output.setEnableArpDynaKey(cb_key_arp.isSelected());

      Global.Print("Arp key-track is "+Utils.GetEnableString(output.getEnableArpDynaKey()));
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      StringAction *sac;

      switch(@(ap))
      {
         default:
            break;

         case @(cm_dev):
            handleDevChanged();
            return true;

         case @(cb_enable):
            handleDevEnableChanged();
            return true;

         case @(cm_ch):
            handleChChanged();
            return true;

         case @(cm_playmode):
            handlePlayModeChanged();
            return true;

         case @(cm_speed):
            handleSpeedDivChanged();
            return true;

         case @(fp_speed):
            handleSpeedChanged();
            return true;

         case @(cb_scalenotelen):
            handleScaleNoteLenChanged();
            return true;

         case @(fp_notelen):
            handleNoteLenChanged();
            return true;

         case @(fp_offset):
            handleOffsetChanged();
            return true;

         case @(fp_micro_offset):
            handleMicroOffsetChanged();
            return true;

         case @(fp_buffer_offset):
            handleBufferOffsetChanged();
            return true;

         case @(fp_length):
            handleLengthChanged();
            return true;

         case @(cb_length):
            handleLengthEnableChanged();
            return true;

         case @(fp_arp_dynaoff_scl):
            handleArpDynaOffSclChanged();
            return true;

         case @(fp_arp_dynalen_scl):
            handleArpDynaLenSclChanged();
            return true;

         case @(fp_octave):
            handleOctaveChanged();
            return true;

         case @(fp_octave_rand):
            handleOctaveRandChanged();
            return true;

         case @(fp_octave_rand_prob):
            handleOctaveRandProbChanged();
            return true;

         case @(cb_octave_rand_rep):
            handleOctaveRandRepChanged();
            return true;

         case @(fp_note):
            handleNoteChanged();
            return true;

         case @(fp_pressure_scl):
            handlePressureSclChanged();
            return true;

         case @(fp_pressure_off):
            handlePressureOffChanged();
            return true;

         case @(cm_scale):
            handleScaleChanged();
            return true;

         case @(cm_key):
            handleKeyChanged();
            return true;

         case @(cm_key_mode):
            handleKeyModeChanged();
            return true;

         case @(cb_key_arp):
            handleKeyArpChanged();
            return true;
      }

      return XMLForm::consumeAction(_action);
   }

}
