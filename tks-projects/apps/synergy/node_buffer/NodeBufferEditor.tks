// ----
// ---- file   : NodeBufferEditor.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2015-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 13Oct2015, 14Oct2015, 16Oct2015, 17Oct2015, 19Oct2015, 20Oct2015, 21Oct2015
// ----          22Oct2015, 15Nov2015, 16Nov2015, 08Jul2016, 11Oct2016, 15Oct2016, 19Jan2017
// ----          04Feb2017, 09Feb2017, 18Mar2017, 16Jun2017, 14Jul2017, 01Sep2017, 12Oct2017
// ----          13Oct2017, 04Jan2018, 17Jun2018, 25Jun2019, 29Aug2019, 08Sep2019, 10Sep2019
// ----          20Sep2019, 03Oct2019, 05Oct2019, 08Nov2019, 26Oct2020, 13May2021, 11Feb2023
// ----          23Jun2023, 21Sep2023, 03Oct2023
// ----
// ----
// ----

module MNodeBufferEditor;

use namespace ui;
use namespace st2;


// <class.png>
class NodeBufferEditor extends NodeEditor, ActionProvider, MIDIMapDefs {

   define int TAB_PATTERN   = 0;
   define int TAB_BUFFER    = 1;
   define int TAB_OUT1      = 2;
   define int TAB_OUT2      = 3;
   define int TAB_OUT3      = 4;
   define int TAB_OUT4      = 5;
   define int TAB_ARP       = 6;
   define int TAB_PLAY      = 7;

   define String MMT_TAB_PREV;
   define String MMT_TAB_NEXT;
   define String MMT_TAB_PATTERN;
   define String MMT_TAB_BUFFER;
   define String MMT_TAB_OUT1;
   define String MMT_TAB_OUT2;
   define String MMT_TAB_OUT3;
   define String MMT_TAB_OUT4;
   define String MMT_TAB_ARP;
   define String MMT_TAB_PLAY;

   define String MMT_PAT_NR;
   define String MMT_PAT_NR_INV;
   define String MMT_PAT_NR_DELTA;
   define String MMT_PAT_NR_INC;
   define String MMT_PAT_NR_DEC;

   define String MMT_PAT_NR_1;
   define String MMT_PAT_NR_2;
   define String MMT_PAT_NR_3;
   define String MMT_PAT_NR_4;
   define String MMT_PAT_NR_5;
   define String MMT_PAT_NR_6;
   define String MMT_PAT_NR_7;
   define String MMT_PAT_NR_8;
   define String MMT_PAT_NR_9;
   define String MMT_PAT_NR_10;
   define String MMT_PAT_NR_11;
   define String MMT_PAT_NR_12;
   define String MMT_PAT_NR_13;
   define String MMT_PAT_NR_14;
   define String MMT_PAT_NR_15;
   define String MMT_PAT_NR_16;
   define String MMT_PAT_NR_17;
   define String MMT_PAT_NR_18;
   define String MMT_PAT_NR_19;

   define String MMT_PAT_NR_20;
   define String MMT_PAT_NR_21;
   define String MMT_PAT_NR_22;
   define String MMT_PAT_NR_23;
   define String MMT_PAT_NR_24;
   define String MMT_PAT_NR_25;
   define String MMT_PAT_NR_26;
   define String MMT_PAT_NR_27;
   define String MMT_PAT_NR_28;
   define String MMT_PAT_NR_29;
   define String MMT_PAT_NR_30;
   define String MMT_PAT_NR_31;
   define String MMT_PAT_NR_32;
   define String MMT_PAT_NR_33;
   define String MMT_PAT_NR_34;
   define String MMT_PAT_NR_35;

   define String MMT_PAT_OFFSET;
   define String MMT_PAT_OFFSET_INV;
   define String MMT_PAT_OFFSET_DELTA;
   define String MMT_PAT_OFFSET_INC;
   define String MMT_PAT_OFFSET_DEC;

   define String MMT_PAT_LENGTH;
   define String MMT_PAT_LENGTH_INV;
   define String MMT_PAT_LENGTH_DELTA;
   define String MMT_PAT_LENGTH_INC;
   define String MMT_PAT_LENGTH_DEC;

   define String MMT_PAT_NEW;
   define String MMT_PAT_COPY;
   define String MMT_PAT_PASTE;
   define String MMT_PAT_CLONE;
   define String MMT_PAT_FREE;


   public NodeBuffer *buffer;

   protected TabSwitch *ts_groups;


   // Pattern:
   protected ComboBox   *cm_pattern_nr;
   protected Label      *lb_pat_nr;
   protected TextField  *tf_pat_name;
   protected FloatParam *fp_pat_offset;
   protected FloatParam *fp_pat_length;

   protected Button    *bt_pat_alloc;
   protected Button    *bt_pat_tools;
   protected PopupMenu *pm_pat_tools;
   protected Button    *bt_pat_free;

   // Buffer:
   protected ComboBox   *cm_buffer_dev;
   protected CheckBox   *cb_buffer_enable;
   protected ComboBox   *cm_buffer_ch;
   protected CheckBox   *cb_buffer_lock;

   protected ComboBox   *cm_buffer_storage;

   protected ComboBox   *cm_buffer_mode;
   protected CheckBox   *cb_buffer_dbl;
   protected FloatParam *fp_buffer_offset;
   protected FloatParam *fp_buffer_length;
   protected ComboBox   *cm_buffer_raster;

   protected CheckBox *cb_buffer_polypressure;

   // Outputs:
   protected NB_OutputForm *out_1;
   protected NB_OutputForm *out_2;
   protected NB_OutputForm *out_3;
   protected NB_OutputForm *out_4;

   // Arp:
   protected ComboBox   *cm_arp_dev;
   protected CheckBox   *cb_arp_enable;
   protected ComboBox   *cm_arp_ch;
   protected ComboBox   *cm_arp_mode;
   protected TableView    *tv_arp_notes;
   protected NB_ArpNotesTM *tm_arp_notes;
   protected Button    *bt_arp_add;
   protected Button    *bt_arp_remove;
   protected Button    *bt_arp_moveup;
   protected Button    *bt_arp_movedown;
   protected ComboBox  *cm_arp_baseoct;
   protected CheckBox  *cb_arp_reset;
   protected CheckBox  *cb_arp_reset_q;
   protected CheckBox  *cb_arp_wrap;
   protected CheckBox  *cb_arp_order;
   protected ComboBox  *cm_arp_latch;
   protected CheckBox  *cb_arp_latch_reset;
   protected CheckBox  *cb_arp_play_arp_notes;
   protected CheckBox  *cb_arp_play_non_arp_notes;
   protected CheckBox  *cb_arp_dynaofflen;

   // Play:
   protected ComboBox *cm_node_class;
   protected CheckBox *cb_node_class_show;
   // (note) cm_node_class_show_in is declared in NodeEditor base class


   // <init.png>
   public virtual init() : boolean {

      if(initPakFile("NodeBufferEditor.xfm"))
      {
         if(autoResolveIds(this))
         {
            f_autodev.initAutoDeviceForm();

            cm_pattern_nr.setOptions(Node.patnr_options);

            cm_buffer_storage.setOptionBGColors([#0800ff00, 0]);

            tm_arp_notes <= new NB_ArpNotesTM;
            tm_arp_notes.parent_editor <= this;
            tm_arp_notes.initTableModel();
            tv_arp_notes.setTableModel(tm_arp_notes);

            out_1.init(this);
            out_2.init(this);
            out_3.init(this);
            out_4.init(this);

            initMMC();

            initTimers();

            return true;
         }
      }

      return false;
   }

   // <ui_timer.png>
   protected method initTimers() {
      // // ta_midilearn   <= TimerAction.New(TA_MIDILEARN,   this, STConfig.node_auto_midi_learn_timeout);
   }

   // <midi_mmc.png>
   protected method initMMC() {

      mmcInit("NodeBufferEditor");

      // From PageNode: (so these show up in the map editor)
      root_form.pg_node.addBaseMMCTargets(this);

      mmcAddTarget(MMT_TAB_PREV,       CLASS_BUTTON, SYN_BUTTON_REPEAT);
      mmcAddTarget(MMT_TAB_NEXT,       CLASS_BUTTON, SYN_BUTTON_REPEAT);
      mmcAddTarget(MMT_TAB_PATTERN,    CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_TAB_BUFFER,     CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_TAB_OUT1,       CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_TAB_OUT2,       CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_TAB_OUT3,       CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_TAB_OUT4,       CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_TAB_ARP,        CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_TAB_PLAY,       CLASS_BUTTON, SYN_BUTTON_CLICK);

      mmcAddTargetExO(MMT_PAT_NR,                  CLASS_VALUE,  SYN_NONE,
                      "Pattern", "Pattern Number", DPY_DEFAULT, cm_pattern_nr
                      );
      mmcAddTargetExO(MMT_PAT_NR_INV,              CLASS_VALUE,  SYN_NONE,
                      "Pattern", "Pattern Number", DPY_DEFAULT, cm_pattern_nr
                      );
      mmcAddTargetExO(MMT_PAT_NR_DELTA,            CLASS_DELTA,  4,
                      "Pattern", "Pattern Number", DPY_DEFAULT, cm_pattern_nr
                      );
      mmcAddTarget(MMT_PAT_NR_INC,            CLASS_BUTTON, SYN_BUTTON_REPEAT);
      mmcAddTarget(MMT_PAT_NR_DEC,            CLASS_BUTTON, SYN_BUTTON_REPEAT);

      mmcAddTarget(MMT_PAT_NR_1,              CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_2,              CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_3,              CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_4,              CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_5,              CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_6,              CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_7,              CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_8,              CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_9,              CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_10,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_11,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_12,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_13,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_14,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_15,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_16,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_17,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_18,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_19,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_20,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_21,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_22,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_23,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_24,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_25,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_26,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_27,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_28,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_29,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_30,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_31,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_32,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_33,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_34,             CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_NR_35,             CLASS_BUTTON, SYN_BUTTON_CLICK);

      mmcAddTargetExO(MMT_PAT_OFFSET,                CLASS_VALUE, SYN_NONE,
                      "Offset16", "Pattern Offset",  DPY_DEFAULT, fp_pat_offset
                      );
      mmcAddTargetExO(MMT_PAT_OFFSET_INV,            CLASS_VALUE, SYN_NONE,
                      "Offset16", "Pattern Offset",  DPY_DEFAULT, fp_pat_offset
                      );
      mmcAddTargetExO(MMT_PAT_OFFSET_DELTA,          CLASS_DELTA, 4,
                      "Offset16", "Pattern Offset",  DPY_DEFAULT, fp_pat_offset
                      );
      mmcAddTarget(MMT_PAT_OFFSET_INC,         CLASS_BUTTON, SYN_BUTTON_REPEAT);
      mmcAddTarget(MMT_PAT_OFFSET_DEC,         CLASS_BUTTON, SYN_BUTTON_REPEAT);

      mmcAddTargetExO(MMT_PAT_LENGTH,                CLASS_VALUE, SYN_NONE,
                      "Length16", "Pattern Length",  DPY_DEFAULT, fp_pat_length
                      );
      mmcAddTargetExO(MMT_PAT_LENGTH_INV,            CLASS_VALUE, SYN_NONE,
                      "Length16", "Pattern Length",  DPY_DEFAULT, fp_pat_length
                      );
      mmcAddTargetExO(MMT_PAT_LENGTH_DELTA,          CLASS_DELTA, 4,
                      "Length16", "Pattern Length",  DPY_DEFAULT, fp_pat_length
                      );
      mmcAddTarget(MMT_PAT_LENGTH_INC,         CLASS_BUTTON, SYN_BUTTON_REPEAT);
      mmcAddTarget(MMT_PAT_LENGTH_DEC,         CLASS_BUTTON, SYN_BUTTON_REPEAT);

      // New/Copy/Paste/Clone/Free (pat_tools)
      mmcAddTarget(MMT_PAT_NEW,            CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_COPY,           CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_PASTE,          CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_CLONE,          CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_PAT_FREE,           CLASS_BUTTON, SYN_BUTTON_CLICK);


      // Play

   }

   // <midi_mmc.png>
   public virtual mmcHandleEvent(MIDIMapEvent _ev) : boolean {

      ///trace "xxx NodeBufferEditor::mmcHandleEvent";

      if(!mmcIsBindableEvent(_ev))
         return false;

      MIDIMapEvent boundEv <= mmcGetBindingByEvent(_ev);

      NodeBufferPattern pat <= getEditPattern();

      if(null != boundEv)
      {
         String tgtName <= boundEv.bound_target.target_name;

         switch(tgtName)
         {
            default:
               return root_form.pg_node.mmcHandleNodeTarget(boundEv.bound_target.target_name);

            case MMT_TAB_PREV:
               ts_groups.previousTab();
               return true;

            case MMT_TAB_NEXT:
               ts_groups.nextTab();
               return true;

            case MMT_TAB_PATTERN:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               if(null != pat)
               {
                  Global.Print("Show tab \"Pattern\" ("+cm_pattern_nr.getSelectedOptionName()+") \""+pat.pat_name+"\"");
               }
               else
               {
                  Global.Print("Show tab \"Pattern\" ("+cm_pattern_nr.getSelectedOptionName()+") <empty>");
               }
               return true;

            case MMT_TAB_BUFFER:
               ts_groups.setActiveTabIndex(TAB_BUFFER);
               Global.Print("Show tab \"Buffer\"");
               return true;

            case MMT_TAB_OUT1:
               ts_groups.setActiveTabIndex(TAB_OUT1);
               Global.Print("Show tab \"Out 1\"");
               return true;

            case MMT_TAB_OUT2:
               ts_groups.setActiveTabIndex(TAB_OUT2);
               Global.Print("Show tab \"Out 2\"");
               return true;

            case MMT_TAB_OUT3:
               ts_groups.setActiveTabIndex(TAB_OUT3);
               Global.Print("Show tab \"Out 3\"");
               return true;

            case MMT_TAB_OUT4:
               ts_groups.setActiveTabIndex(TAB_OUT4);
               Global.Print("Show tab \"Out 4\"");
               return true;

            case MMT_TAB_ARP:
               ts_groups.setActiveTabIndex(TAB_ARP);
               Global.Print("Show tab \"Arp\"");
               return true;

            case MMT_TAB_PLAY:
               ts_groups.setActiveTabIndex(TAB_PLAY);
               Global.Print("Show tab \"Play\"");
               return true;

            case MMT_PAT_NR:
            case MMT_PAT_NR_DELTA:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               MMTListener.MMTHandleLayerEvent(cm_pattern_nr, _ev, false/*bInv*/);
               return true;

            case MMT_PAT_NR_INV:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               MMTListener.MMTHandleLayerEvent(cm_pattern_nr, _ev, true/*bInv*/);
               return true;

            case MMT_PAT_NR_INC:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               MMTListener.MMTHandleLayerInc(cm_pattern_nr);
               return true;

            case MMT_PAT_NR_DEC:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               MMTListener.MMTHandleLayerDec(cm_pattern_nr);
               return true;

            case MMT_PAT_NR_1:
            case MMT_PAT_NR_2:
            case MMT_PAT_NR_3:
            case MMT_PAT_NR_4:
            case MMT_PAT_NR_5:
            case MMT_PAT_NR_6:
            case MMT_PAT_NR_7:
            case MMT_PAT_NR_8:
            case MMT_PAT_NR_9:
            case MMT_PAT_NR_10:
            case MMT_PAT_NR_11:
            case MMT_PAT_NR_12:
            case MMT_PAT_NR_13:
            case MMT_PAT_NR_14:
            case MMT_PAT_NR_15:
            case MMT_PAT_NR_16:
            case MMT_PAT_NR_17:
            case MMT_PAT_NR_18:
            case MMT_PAT_NR_19:
            case MMT_PAT_NR_20:
            case MMT_PAT_NR_21:
            case MMT_PAT_NR_22:
            case MMT_PAT_NR_23:
            case MMT_PAT_NR_24:
            case MMT_PAT_NR_25:
            case MMT_PAT_NR_26:
            case MMT_PAT_NR_27:
            case MMT_PAT_NR_28:
            case MMT_PAT_NR_29:
            case MMT_PAT_NR_30:
            case MMT_PAT_NR_31:
            case MMT_PAT_NR_32:
            case MMT_PAT_NR_33:
            case MMT_PAT_NR_34:
            case MMT_PAT_NR_35:
               selectPatternByIdx(int(boundEv.bound_target.target_name.replace("MMT_PAT_NR_", "")) - 1);
               return true;

            case MMT_PAT_OFFSET:
            case MMT_PAT_OFFSET_DELTA:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               MMTListener.MMTHandleLayerEvent(fp_pat_offset, _ev, false/*bInv*/);
               return true;

            case MMT_PAT_OFFSET_INV:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               MMTListener.MMTHandleLayerEvent(fp_pat_offset, _ev, true/*bInv*/);
               return true;

            case MMT_PAT_OFFSET_INC:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               MMTListener.MMTHandleLayerInc(fp_pat_offset);
               return true;

            case MMT_PAT_OFFSET_DEC:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               MMTListener.MMTHandleLayerDec(fp_pat_offset);
               return true;


            case MMT_PAT_LENGTH:
            case MMT_PAT_LENGTH_DELTA:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               MMTListener.MMTHandleLayerEvent(fp_pat_length, _ev, false/*bInv*/);
               return true;

            case MMT_PAT_LENGTH_INV:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               MMTListener.MMTHandleLayerEvent(fp_pat_length, _ev, true/*bInv*/);
               return true;

            case MMT_PAT_LENGTH_INC:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               MMTListener.MMTHandleLayerInc(fp_pat_length);
               return true;

            case MMT_PAT_LENGTH_DEC:
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               MMTListener.MMTHandleLayerDec(fp_pat_length);
               return true;


            case MMT_PAT_NEW:
               handlePatternNew(false/*bSub*/);
               return true;

            case MMT_PAT_COPY:
               handlePatternCopy();
               return true;

            case MMT_PAT_PASTE:
               handlePatternPaste();
               return true;

            case MMT_PAT_CLONE:
               handlePatternClone(false/*bSub*/);
               return true;

            case MMT_PAT_FREE:
               handlePatternFree();
               return true;


               // Play
         }
      }

      // trace "xxx NodeBufferEditor::mmcHandleEvent: unhandled";

      return false;
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {

      switch(ts_groups.getActiveTabIndex())
      {
         case TAB_PATTERN:
            layers.joinRR(layers,
                          [
                             ts_groups,

                             cm_pattern_nr,
                             tf_pat_name,
                             fp_pat_offset,
                             fp_pat_length,
                             bt_pat_alloc,
                             bt_pat_tools,
                             bt_pat_free
                           ]
                          );
            return;

         case TAB_BUFFER:
            layers.joinRR(layers,
                          [
                             ts_groups,

                             cm_buffer_storage,
                             cm_buffer_dev,
                             cb_buffer_enable,
                             cm_buffer_ch,
                             cb_buffer_lock,
                             cm_buffer_mode,
                             cb_buffer_dbl,
                             fp_buffer_offset,
                             fp_buffer_length,
                             cm_buffer_raster,
                             cb_buffer_polypressure
                           ]
                          );
            return;

         case TAB_OUT1:
            layers.add(ts_groups);
            out_1.addMMTFocusLayers(layers);
            return;

         case TAB_OUT2:
            layers.add(ts_groups);
            out_2.addMMTFocusLayers(layers);
            return;

         case TAB_OUT3:
            layers.add(ts_groups);
            out_3.addMMTFocusLayers(layers);
            return;

         case TAB_OUT4:
            layers.add(ts_groups);
            out_4.addMMTFocusLayers(layers);
            return;

         case TAB_ARP:
            layers.joinRR(layers,
                          [
                             ts_groups,

                             cm_arp_dev,
                             cb_arp_enable,
                             cm_arp_ch,
                             cm_arp_mode,

                             tv_arp_notes,
                             bt_arp_add,
                             bt_arp_remove,
                             bt_arp_moveup,
                             bt_arp_movedown,
                             cm_arp_baseoct,
                             cb_arp_reset,
                             cb_arp_reset_q,
                             cb_arp_wrap,
                             cb_arp_order,
                             cm_arp_latch,
                             cb_arp_latch_reset,
                             cb_arp_play_arp_notes,
                             cb_arp_play_non_arp_notes,
                             cb_arp_dynaofflen
                           ]
                          );
            return;

         case TAB_PLAY:
            layers.joinRR(layers,
                          [
                             ts_groups,

                             cm_node_class,
                             cb_node_class_show,
                             cm_node_class_show_in,
                           ]
                          );
            f_autodev.addTabCycleOverrides(layers);
            return;
      }
   }

   // <ui_show.png>
   public virtual showNode(Node _buffer) {
      buffer <= _buffer;

      updatePatternNrComboBox();
      cm_pattern_nr.setSelectedOption(buffer.nodeGetCurrentEditPatternNr());

      StringArray devAll;
      devAll.join(["*"], MIDI.out_device_names_sorted);
      IntArray bgcolorsAll;
      bgcolorsAll.join([0], MIDI.out_device_bgcolors_sorted);

      f_autodev.showNode(buffer, devAll, bgcolorsAll);

      cm_buffer_dev.setOptions(devAll);
      cm_buffer_dev.setOptionBGColors(bgcolorsAll);

      cm_arp_dev.setOptions(devAll);
      cm_arp_dev.setOptionBGColors(bgcolorsAll);

      handlePatternChanged();

      // Buffer:
      updateBufferWidgets();

      // Arp:
      updateArpWidgets();

      // Play:
      cm_node_class.setOptions(STConfig.node_class_names);
      updateNodeClass();
      updateNodeClassShowIn(buffer);

      // MIDI.AddMIDIMapEventListener(this);

      if(!NodeEditor.b_lock_kbdfocus)
      {
         refocusDefault();
      }
   }

   // <method.png>
   public virtual showNodePost() {
      // trace "xxx NodeBufferEditor::showNodePost";
   }

   // <ui_focus.png>
   public virtual refocusDefault() {
      if(!NodeEditor.b_lock_kbdfocus)
      {
         UI.SetKeyboardFocus(ts_groups);
      }
   }

   // <ui_update.png>
   protected method updatePatternNrComboBox() {
      local StringArray patNrOptionsShort;
      local StringArray patNrOptionsLong;
      local IntArray patNrColors;
      Node.CalcPatNrOptions(buffer, patNrOptionsShort, patNrOptionsLong, patNrColors);
      cm_pattern_nr.setOptions(patNrOptionsShort);
      cm_pattern_nr.setOptionsLong(patNrOptionsLong);
      cm_pattern_nr.setOptionBGColors(patNrColors);
   }

   // <method_get.png>
   protected method getEditPattern() : NodeBufferPattern {
      NodeBufferPattern pat <= buffer.nodeGetCurrentEditPattern();
      return pat;
   }

   // <ui_hide.png>
   public virtual isNodeEditorLocked() : boolean {
      return false;
   }

   // <ui_hide.png>
   public virtual leaveNode() {
      // MIDI.RemoveMIDIMapEventListener(this);

   }

   // <ui_hide.png>
   public virtual unsetNode() {
      tm_arp_notes.parent_node <= null;
      buffer <= null;
   }

   // <midi_mmt.png>
   public virtual mmtHandleGlobalValue(float _val) : boolean {
      Layer kbdLayer <= UI.GetKeyboardFocus();

      return false;
   }

   // <midi_mmt.png>
   public virtual mmtHandleGlobalValueDelta(int _delta) : boolean {
      Layer kbdLayer <= UI.GetKeyboardFocus();

      return false;
   }

   // <midi_mml.png>
   // public virtual mmlHandleEventUI(MIDIMapEvent _ev) : boolean {

      // if(_ev.isReservedEvent())
      //    return false;

   //    return false;
   // }

   // <ui_handle.png>
   public virtual nodeHandleEditPatternChanged() {
      handlePatternChanged();
   }

   // <ui_handle.png>
   protected method handlePatternChanged() {
      NodeBufferPattern pat <= getEditPattern();

      updateBufferWidgets();

      updatePatNrLabel();

      if(null != pat)
      {
         tf_pat_name.setText(pat.pat_name);
         tf_pat_name.setEditable(true);

         bt_pat_free.setEditable(true);

         fp_pat_offset.setValue(pat.getPatternOffset16th());
         fp_pat_offset.setEditable(true);

         fp_pat_length.setValue(pat.getPatternLength16th());
         fp_pat_length.setEditable(true);

         out_1.showOutput(pat.getOutput(0));
         out_2.showOutput(pat.getOutput(1));
         out_3.showOutput(pat.getOutput(2));
         out_4.showOutput(pat.getOutput(3));
      }
      else
      {
         tf_pat_name     .setEditable(false);
         fp_pat_offset   .setEditable(false);
         fp_pat_length   .setEditable(false);

         bt_pat_free.setEditable(true);

         out_1.showOutput(null);
         out_2.showOutput(null);
         out_3.showOutput(null);
         out_4.showOutput(null);
      }

      redraw();

      root_form.pg_node.handleEditPatternChanged();

      // // if(null == UI.GetKeyboardFocus())
      // // {
      // //    // // UI.SetKeyboardFocus(bt_track_midilearn);
      // // }
   }

   // <ui_update.png>
   protected method updatePatNrLabel() {
      Integer io = buffer.nodeGetCurrentEditPatternNr();
      lb_pat_nr.setCaption("Pattern:\n  ("+io.printf("0x%02x")+")");
      lb_pat_nr.redraw();
   }

   // <ui_handle.png>
   protected method handlePatternAlloc(boolean _bSub) : NodeBufferPattern {
      local NodeBufferPattern p;

      p.patInit(buffer, 0/*patNr placeholder*/);

      int patIdx;

      NodeBufferPattern pat <= getEditPattern();

      if(null != pat)
      {
         if(true == _bSub)
         {
            // Find unused A..D sub pattern
            patIdx = buffer.nodeFindFirstUnusedPatternSub(buffer.nodeGetCurrentEditPatternNr());
         }
         else
         {
            // Find unused 1..32 pattern group
            patIdx = buffer.nodeFindFirstUnusedPatternGroup(buffer.nodeGetCurrentEditPatternNr());
         }

         if(-1 == patIdx)
         {
            patIdx = buffer.findFirstUnusedPattern(0);
         }
      }
      else
      {
         patIdx = buffer.nodeGetCurrentEditPatternNr();
      }

      if(-1 != patIdx)
      {
         p.pat_nr = patIdx;
         buffer.nodeSetPattern(patIdx, deref p);

         buffer.nodeSetCurrentEditPatternNr(patIdx);

         ////if(!replay.b_playing)
            buffer.nodeSetCurrentPlayPatternNr(patIdx);

         cm_pattern_nr.setSelectedOption(patIdx);

         selectPatternByIdx(patIdx);

         handlePatternChanged();

         updatePatternNrComboBox();

         Global.SuccessShort("New: Allocated pattern "+cm_pattern_nr.getSelectedOptionName()+" ("+(patIdx+1)+").");
         return p;
      }
      else
      {
         Global.Error("New: All patterns in use.");
         return null;
      }
   }

   // <ui_show.png>
   protected method showPatternToolsMenu(boolean _bFocusFirst) {

      pm_pat_tools <= PopupMenu.New(this);
      PopupMenu pm <= pm_pat_tools;
      PopupMenuButton *pmb;

      NodeBufferPattern pat <= buffer.nodeGetCurrentEditPattern();
      boolean bHavePat = (null != pat);

      pmb <= pm.addDefaultButton("Copy pattern", "copy");
      pmb.setFontByName("big6");
      pmb.setActive(bHavePat);
      pmb.setAccelerators("lctrl-c", "");

      pmb <= pm.addDefaultButton("Paste pattern", "paste");
      pmb.setFontByName("big6");
      pmb.setAccelerators("lctrl-v", "");

      if(bHavePat)
      {
         pmb.setActive(null != pat.patGetClipboard());
      }
      else
      {
         pmb.setActive(false);
      }

      pmb <= pm.addDefaultButton("Clone pattern", "clone");
      pmb.setFontByName("big6");
      pmb.setActive(bHavePat);
      pmb.setAccelerators("lctrl-r", "");

      pmb <= pm.addDefaultButton("Clone pattern (sub)", "clone_sub");
      pmb.setFontByName("big6");
      pmb.setActive(bHavePat);
      pmb.setAccelerators("lshift-lctrl-r", "");

      pmb <= pm.addDefaultButton("New pattern (sub)", "new_sub");
      pmb.setFontByName("big6");
      pmb.setAccelerators("lshift-lctrl-n", "");

      // pm.addSeparator();

      pm.resizeToMinimum();
      pm.showAboveLayer(bt_pat_tools);
      if(_bFocusFirst)
         pm.focusNextMenuItem();

      Global.Print("Show pattern tools menu.");
   }

   // <ui_handle.png>
   protected method handlePatternCopy() {

      NodeBufferPattern pat <= getEditPattern();

      // trace "xxx nb: handlePatternCopy: pat="+#(pat);

      if(null != pat)
      {
         pat.patCopyToClipboard();

         Global.Print("Pattern copied to clipboard.");
      }
   }

   // <ui_handle.png>
   protected method handlePatternPaste() {
      NodeBufferPattern pat <= getEditPattern();

      // trace "xxx nb: handlePatternPaste: pat="+#(pat);

      if(null == pat)
      {
         handlePatternNew(false/*bSub*/);
         pat <= getEditPattern();
      }

      if(null != pat)
      {
         if(pat.patCopyFromClipboard())
         {
            handlePatternChanged();

            updatePatternNrComboBox();

            Global.SuccessShort("Clipboard pasted to pattern.");
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handlePatternNew(boolean _bSub) {

      NodeBufferPattern pat <= handlePatternAlloc(_bSub);

      // if(null != pat)
      // {
      // }
   }

   // <ui_handle.png>
   protected =replay= method handlePatternClone(boolean _bSub) {
      NodeBufferPattern pat <= getEditPattern();

      if(null != pat)
      {
         local NodeBufferPattern tmp;

         tmp.patInit(buffer, 0);

         tmp.patCopyFrom(pat, false/*bClear*/);

         if(null != handlePatternAlloc(_bSub))
         {
            pat <= getEditPattern();

            pat.patCopyFrom(tmp, false/*bClear*/);
            pat.patHandleSongSpeedChanged(true/*bPPQ*/, true/*bBPM*/);

            handlePatternChanged();

            updatePatternNrComboBox();

            Global.SuccessShort("Pattern cloned to "+cm_pattern_nr.getSelectedOptionName()+".");
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatternFree() {

      NodeBufferPattern pat <= getEditPattern();

      if(null != pat)
      {
         buffer.nodeSetPattern(buffer.edit_pattern_nr, null);

         pat <= null;

         handlePatternChanged();

         updatePatternNrComboBox();

         Global.Print("Delete pattern");
      }
   }

   // <ui_handle.png>
   protected method handleSelectPattern() {

      int patNr = cm_pattern_nr.getSelectedOption();

      buffer.nodeSetCurrentEditPatternNr(patNr);
      buffer.nodeSetCurrentPlayPatternNr(patNr);

      buffer.nodeQueuePrgChgOut(patNr);
      // // replay.handleNodeStateChangedUI(buffer, -1/*active*/, patNr/*pat*/);

      handlePatternChanged();

      NodeBufferPattern pat <= getEditPattern();

      // trace "xxx selectscene: buffer.nodeGetCurrentEditPatternNr()="+buffer.nodeGetCurrentEditPatternNr();

      if(null != pat)
      {
         Global.Print("Select pattern "+cm_pattern_nr.getSelectedOptionName()+" \""+pat.pat_name+"\".");
      }
      else
      {
         Global.Print("Select pattern "+cm_pattern_nr.getSelectedOptionName()+" <empty>.");
      }
   }

   // <method.png>
   public virtual selectPatternByIdx(int _idx) {

      cm_pattern_nr.setSelectedOption(_idx);

      handleSelectPattern();
   }

   // <ui_handle.png>
   protected method handleSelectPreviousUsedPattern() {
      int patIdx = buffer.nodeGetCurrentEditPatternNr();
      patIdx = buffer.nodeFindPreviousPatternNrByUsedIdxWithOffset(patIdx-1, 0);

      if(patIdx >= 0)
      {
         selectPatternByIdx(patIdx);
      }
   }

   // <ui_handle.png>
   protected method handleSelectNextUsedPattern() {
      int patIdx = buffer.nodeGetCurrentEditPatternNr();
      patIdx = buffer.nodeFindNextPatternNrByUsedIdxWithOffset(patIdx+1, 0);

      if(patIdx >= 0)
      {
         selectPatternByIdx(patIdx);
      }
   }

   // <method.png>
   protected method selectPatternByUsedIdx(int _idx) {
      if(_idx >= 0)
      {
         int patNr = buffer.nodeGetPatternNrByUsedIdx(_idx);

         if(-1 != patNr)
         {
            selectPatternByIdx(patNr);
         }
      }
      else
      {
         selectPatternByIdx(127); // --/
      }
   }

   // <method.png>
   protected method playPatternByIdx(int _idx) {

      selectPatternByIdx(_idx);

      NodeBufferPattern pat <= getEditPattern();

      buffer.nodeSetCurrentPlayPatternNr(_idx);

      Global.Print("Play pattern "+cm_pattern_nr.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleOffsetChanged() {
      NodeBufferPattern pat <= getEditPattern();

      if(null != pat)
      {
         pat.setPatternOffset16th(fp_pat_offset.getFloatValue());

         handlePatternChanged();

         Global.Print("Pattern offset is "+pat.getPatternOffset16th());
      }
   }

   // <ui_handle.png>
   protected method handleLengthChanged() {
      NodeBufferPattern pat <= getEditPattern();

      if(null != pat)
      {
         pat.setPatternLength16th(fp_pat_length.getFloatValue());

         handlePatternChanged();

         Global.Print("Pattern length is "+pat.getPatternLength16th());
      }
   }

   // <ui_handle.png>
   protected method handleNameChanged() {
      NodeBufferPattern pat <= getEditPattern();

      if(null != pat)
      {
         pat.pat_name = tf_pat_name.getText();

         Global.Print("Pattern name is \""+pat.pat_name+"\".");
      }
   }

   // <ui_update.png>
   protected method updateBufferWidgets() {
      NodeBufferPattern pat <= buffer.nodeGetCurrentEditPattern();

      if(null != pat)
      {
         cm_buffer_storage.setSelectedOption(pat.getBufferStorage());
         cm_buffer_storage.setEditable(true);
      }
      else
      {
         cm_buffer_storage.setSelectedOption(0);
         cm_buffer_storage.setEditable(false);
      }

      NodeBufferStorage bst <= buffer.getEditStorage();

      cm_buffer_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(bst.getBufferDevIdx() )+ 1);
      cb_buffer_enable.setSelected(bst.getEnableBuffer());
      cm_buffer_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(bst.getBufferDevIdx(), "*"/*firstOptionOrNull*/));
      cm_buffer_ch.setSelectedOption(bst.getBufferCh() + 1);
      cb_buffer_lock.setSelected(bst.getEnableBufferLock());

      cm_buffer_mode.setSelectedOption(bst.getBufferMode());
      cb_buffer_dbl.setSelected(bst.getEnableBufferDbl());
      fp_buffer_offset.setValue(bst.getBufferRecOffset());
      fp_buffer_length.setValue(bst.getBufferRecLength());
      cm_buffer_raster.setSelectedOption(bst.getBufferRaster());
      cb_buffer_polypressure.setSelected(bst.getEnableBufferPolyPressure());
   }

   // <ui_handle.png>
   protected method handleBufferDevChanged() {
      NodeBufferStorage bst <= buffer.getEditStorage();

      bst.setBufferDevIdx(MIDI.SortedToUnsortedDevIdx(cm_buffer_dev.getSelectedOption() - 1));

      cm_buffer_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(bst.getBufferDevIdx(), "*"/*firstOptionOrNull*/));

      Global.Print("Buffer device is "+cm_buffer_dev.getSelectedOptionName());
   }


   // <ui_handle.png>
   protected method handleBufferEnableChanged() {
      NodeBufferStorage bst <= buffer.getEditStorage();

      bst.setEnableBuffer(cb_buffer_enable.isSelected());

      Global.Print("Buffer is "+Utils.GetEnableString(bst.getEnableBuffer()));
   }

   // <ui_handle.png>
   protected method handleBufferChChanged() {
      NodeBufferStorage bst <= buffer.getEditStorage();

      bst.setBufferCh(cm_buffer_ch.getSelectedOption() - 1);

      Global.Print("Buffer ch is "+cm_buffer_ch.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleBufferLockChanged() {
      NodeBufferStorage bst <= buffer.getEditStorage();

      bst.setEnableBufferLock(cb_buffer_lock.isSelected());

      Global.Print("Buffer lock is "+Utils.GetEnableString(bst.getEnableBufferLock()));
   }

   // <ui_handle.png>
   protected method handleBufferStorageChanged() {

      NodeBufferPattern pat <= buffer.nodeGetCurrentEditPattern();

      if(null != pat)
      {
         pat.setBufferStorage(cm_buffer_storage.getSelectedOption());

         updateBufferWidgets();

         Global.Print("Buffer storage is "+cm_buffer_storage.getSelectedOptionName());
      }
   }

   // <ui_handle.png>
   protected method handleBufferModeChanged() {
      NodeBufferStorage bst <= buffer.getEditStorage();

      bst.setBufferMode(cm_buffer_mode.getSelectedOption());

      Global.Print("Buffer mode is "+cm_buffer_mode.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleBufferDblChanged() {
      NodeBufferStorage bst <= buffer.getEditStorage();

      bst.setEnableBufferDbl(cb_buffer_dbl.isSelected());

      Global.Print("Double-Buffer is "+Utils.GetEnableString(bst.getEnableBufferDbl()));
   }

   // <ui_handle.png>
   protected method handleBufferRecOffsetChanged() {
      NodeBufferStorage bst <= buffer.getEditStorage();

      bst.setBufferRecOffset(fp_buffer_offset.getFloatValue());
      fp_buffer_offset.setValue(bst.getBufferRecOffset());

      Global.Print("Buffer rec offset is "+bst.getBufferRecOffset());
   }

   // <ui_handle.png>
   protected method handleBufferRecLengthChanged() {
      NodeBufferStorage bst <= buffer.getEditStorage();

      bst.setBufferRecLength(fp_buffer_length.getFloatValue());
      fp_buffer_length.setValue(bst.getBufferRecLength());

      Global.Print("Buffer rec length is "+bst.getBufferRecLength());
   }

   // <ui_handle.png>
   protected method handleBufferRasterChanged() {
      NodeBufferStorage bst <= buffer.getEditStorage();

      bst.setBufferRaster(cm_buffer_raster.getSelectedOption());

      Global.Print("Buffer raster is "+cm_buffer_raster.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleBufferPolyPressureChanged() {
      NodeBufferStorage bst <= buffer.getEditStorage();

      bst.setEnableBufferPolyPressure(cb_buffer_polypressure.isSelected());

      Global.Print("Buffer poly-pressure is "+Utils.GetEnableString(bst.getEnableBufferPolyPressure()));
   }


   // <ui_update.png>
   protected method updateArpWidgets() {
      cm_arp_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(buffer.getArpDevIdx()) + 1);
      cm_arp_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(buffer.getArpDevIdx(), "*"/*firstOptionOrNull*/));
      cm_arp_ch.setSelectedOption(buffer.getArpCh() + 1);

      cb_arp_enable.setSelected(buffer.getEnableArp());

      cm_arp_mode.setSelectedOption(buffer.getArpMode());

      tm_arp_notes.parent_node <= buffer;
      tv_arp_notes.tableModelChanged();

      int numArpNotes = (buffer.arp_note_table.numElements);

      bt_arp_add.setEditable(numArpNotes < 12);
      bt_arp_remove.setEditable(-1 != tm_arp_notes.getCursorIndex());
      bt_arp_moveup.setEditable(-1 != tm_arp_notes.getCursorIndex());
      bt_arp_movedown.setEditable(-1 != tm_arp_notes.getCursorIndex());

      cm_arp_baseoct.setSelectedOption(buffer.getArpBaseOctave());
      cb_arp_reset.setSelected(buffer.getEnableArpReset());
      cb_arp_reset_q.setSelected(buffer.getEnableArpResetQ());
      cb_arp_wrap.setSelected(buffer.getEnableArpWrap());
      cb_arp_order.setSelected(buffer.getEnableArpOrder());
      cm_arp_latch.setSelectedOption(buffer.getArpLatchNumNotes());
      cb_arp_latch_reset.setSelected(buffer.getEnableArpLatchReset());
      cb_arp_play_arp_notes.setSelected(buffer.getEnablePlayArpNotes());
      cb_arp_play_non_arp_notes.setSelected(buffer.getEnablePlayNonArpNotes());
      cb_arp_dynaofflen.setSelected(buffer.getEnableArpDynaOffLen());
   }

   // <ui_handle.png>
   protected method handleArpDevChanged() {
      buffer.setArpDevIdx(MIDI.SortedToUnsortedDevIdx(cm_arp_dev.getSelectedOption() - 1));

      cm_arp_ch.setOptionsLong(MIDI.GetMIDISynthProfileCaptionOptionsByOutDevIdx(buffer.getArpDevIdx(), "*"/*firstOptionOrNull*/));

      Global.Print("Arp device is "+cm_arp_dev.getSelectedOptionName());
   }


   // <ui_handle.png>
   protected method handleArpEnableChanged() {
      buffer.setEnableArp(cb_arp_enable.isSelected());

      Global.Print("Arp is "+Utils.GetEnableString(buffer.getEnableArp()));
   }

   // <ui_handle.png>
   protected method handleArpChChanged() {
      buffer.setArpCh(cm_arp_ch.getSelectedOption() - 1);

      Global.Print("Arp ch is "+cm_arp_ch.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleArpModeChanged() {
      buffer.setArpMode(cm_arp_mode.getSelectedOption());

      Global.Print("Arp mode is "+cm_arp_mode.getSelectedOptionName());
   }

   // <method.png>
   public method incSelectedArpNote() {
      // Called from table view

      int noteIdx = tm_arp_notes.getCursorIndex();

      if(-1 != noteIdx)
      {
         buffer.incArpNote(noteIdx);

         tv_arp_notes.tableModelChanged();
      }

   }

   // <method.png>
   public method decSelectedArpNote() {
      // Called from table view

      int noteIdx = tm_arp_notes.getCursorIndex();

      if(-1 != noteIdx)
      {
         buffer.decArpNote(noteIdx);

         tv_arp_notes.tableModelChanged();
      }
   }

   // <ui_handle.png>
   protected method handleAddArpNote() {

      if(tm_arp_notes.getNumRows() < 12)
      {
         int row = tm_arp_notes.getCursorIndex();

         IntArray notes = buffer.arp_note_table;

         int newNote = 0;
         loop(12)
         {
            if(-1 == notes.indexOf(newNote, 0))
               break;
            newNote++;
         }

         newNote = newNote % 12;

         if(-1 == row)
         {
            notes.add(newNote);
            row = notes.numElements - 1;
         }
         else
         {
            row++;
            notes.insert(row, newNote);
         }

         buffer.copyArpNotes(notes);

         tv_arp_notes.tableModelChanged();

         tv_arp_notes.moveCursorToRow(row);

         bt_arp_add.setEditable(12 != notes.numElements);
      }
   }

   // <ui_handle.png>
   protected method handleRemoveArpNote() {

      if(tm_arp_notes.getNumRows() > 0)
      {
         int row = tm_arp_notes.getCursorIndex();

         if(-1 != row)
         {
            IntArray notes = buffer.arp_note_table;

            notes.delete(row);

            buffer.copyArpNotes(notes);

            tv_arp_notes.tableModelChanged();

            bt_arp_add.setEditable(true);
            bt_arp_remove.setEditable(0 != notes.numElements);
            bt_arp_moveup.setEditable(0 != notes.numElements);
            bt_arp_movedown.setEditable(0 != notes.numElements);
         }
      }
   }

   // <ui_handle.png>
   protected method handleMoveUpArpNote() {

      if(tm_arp_notes.getNumRows() > 1)
      {
         int row = tm_arp_notes.getCursorIndex();

         if(-1 != row)
         {
            IntArray notes = buffer.arp_note_table;

            if(row > 0)
            {
               notes.swap(row, row - 1);
            }

            buffer.copyArpNotes(notes);

            tv_arp_notes.tableModelChanged();

            tv_arp_notes.moveCursorToPreviousRow();
         }
      }
   }

   // <ui_handle.png>
   protected method handleMoveDownArpNote() {
      if(tm_arp_notes.getNumRows() > 1)
      {
         int row = tm_arp_notes.getCursorIndex();

         if(-1 != row)
         {
            IntArray notes = buffer.arp_note_table;

            if(row != (notes.numElements - 1))
            {
               notes.swap(row, row + 1);
            }

            buffer.copyArpNotes(notes);

            tv_arp_notes.tableModelChanged();

            tv_arp_notes.moveCursorToNextRow();
         }
      }
   }

   // <ui_handle.png>
   protected method handleArpBaseOctaveChanged() {
      buffer.setArpBaseOctave(cm_arp_baseoct.getSelectedOption());

      Global.Print("Arp octave is "+cm_arp_baseoct.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleArpResetChanged() {
      buffer.setEnableArpReset(cb_arp_reset.isSelected());

      Global.Print("Arp reset is "+Utils.GetEnableString(buffer.getEnableArpReset()));
   }

   // <ui_handle.png>
   protected method handleArpResetQChanged() {
      buffer.setEnableArpResetQ(cb_arp_reset_q.isSelected());

      Global.Print("Arp reset quantization is "+Utils.GetEnableString(buffer.getEnableArpResetQ()));
   }

   // <ui_handle.png>
   protected method handleArpWrapChanged() {
      buffer.setEnableArpWrap(cb_arp_wrap.isSelected());

      Global.Print("Arp wrap is "+Utils.GetEnableString(buffer.getEnableArpWrap()));
   }

   // <ui_handle.png>
   protected method handleArpOrderChanged() {
      buffer.setEnableArpOrder(cb_arp_order.isSelected());

      Global.Print("Arp order is "+Utils.GetEnableString(buffer.getEnableArpOrder()));
   }

   // <ui_handle.png>
   protected method handleArpLatchChanged() {
      buffer.setArpLatchNumNotes(cm_arp_latch.getSelectedOption());

      Global.Print("Arp latch is "+cm_arp_latch.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleArpLatchResetChanged() {
      buffer.setEnableArpLatchReset(cb_arp_latch_reset.isSelected());

      Global.Print("Arp latch reset is "+Utils.GetEnableString(buffer.getEnableArpLatchReset()));
   }

   // <ui_handle.png>
   public method handleArpPlayArpNotesChanged() {
      buffer.setEnablePlayArpNotes(cb_arp_play_arp_notes.isSelected());

      Global.Print("Play arp notes is "+Utils.GetEnableString(buffer.getEnablePlayArpNotes()));
   }

   // <ui_handle.png>
   public method handleArpPlayNonArpNotesChanged() {
      buffer.setEnablePlayNonArpNotes(cb_arp_play_non_arp_notes.isSelected());

      Global.Print("Play non-arp notes is "+Utils.GetEnableString(buffer.getEnablePlayNonArpNotes()));
   }

   // <ui_handle.png>
   public method handleArpDynaOffLenChanged() {
      buffer.setEnableArpDynaOffLen(cb_arp_dynaofflen.isSelected());

      Global.Print("Arp dynamic off/len is "+Utils.GetEnableString(buffer.getEnableArpDynaOffLen()));
   }


   // <ui_update.png>
   protected method updateNodeClass() {
      cm_node_class.setSelectedOption(buffer.getNodeClassId());
      cb_node_class_show.setSelected(buffer.getEnableNodeClassShow());
   }

   // <ui_handle.png>
   protected method handleNodeClassChanged() {
      buffer.setNodeClassId(cm_node_class.getSelectedOption());

      f_autodev.handleNodeClassChanged();

      Global.Print("Node class is \""+buffer.getNodeClassString()+"\"");
   }

   // <ui_handle.png>
   protected method handleNodeClassShowChanged() {
      buffer.setEnableNodeClassShow(cb_node_class_show.isSelected());

      f_autodev.handleNodeClassShowChanged();

      Global.Print("Node class show is "+Utils.GetEnableString(buffer.getEnableNodeClassShow()));
   }

   // <method_handle.png>
   public virtual handleStartPlaying() {

      Global.Debug3("NodeBufferEditor::handleStartPlaying");

      // // // buffer.nodeCopyLastPatternStartSongOffsetFromEditor();
   }

   // <method_handle.png>
   public virtual handleStopPlaying(boolean _bAllowBookmark) {

      Global.Debug3("NodeBufferEditor::handleStopPlaying");

      // // // buffer.nodeCopyLastPatternStartSongOffsetFromEditor();
   }

   // <method_handle.png>
   public virtual handleSongPosSelected() {

      Global.Debug3("NodeBufferEditor::handleSongPosSelected");

      // called from UI thread while =replay= is locked
      buffer.nodeSetLastPatternStartEditorSongOffset(current_song.song_offset);
   }

   // <method_handle.png>
   public virtual handlePlayPatChanged() {
      Global.Debug3("NodeBufferEditor::handlePlayPatChanged");
   }

   // <ui_timer.png>
   public virtual handleReplayTimer() {

      if(replay.b_playing)
      {
         if(buffer.checkResetNodePatternChanged())
         {
            cm_pattern_nr.setSelectedOption(buffer.nodeGetCurrentEditPatternNr());
            handlePatternChanged();
         }

      }
   }

   // <ui_mouse.png>
   public virtual onMouse(MouseEvent _ev) : boolean {
      //trace "xxx onMouse: _ev.changed_state="+_ev.changed_state+" _ev.current_state="+_ev.current_state;

      return NodeEditor::onMouse(_ev);
   }

   // <ui_kbd.png>
   protected method handlePatternKeyHome(int _kMod) {
      if((VMOD_LSHIFT|VMOD_LCTRL) == _kMod)
      {
         handleSelectNextUsedPattern();
      }
      else
      {
         if(VMOD_LCTRL == _kMod)
         {
            MMTListener.MMTHandleLayerInc(cm_pattern_nr);
            MMTListener.MMTHandleLayerInc(cm_pattern_nr);
            MMTListener.MMTHandleLayerInc(cm_pattern_nr);
         }
         MMTListener.MMTHandleLayerInc(cm_pattern_nr); //selectNextPattern();
      }
   }

   // <ui_kbd.png>
   protected method handlePatternKeyEnd(int _kMod) {
      if((VMOD_LSHIFT|VMOD_LCTRL) == _kMod)
      {
         handleSelectPreviousUsedPattern();
      }
      else
      {
         if(VMOD_LCTRL == _kMod)
         {
            MMTListener.MMTHandleLayerDec(cm_pattern_nr);
            MMTListener.MMTHandleLayerDec(cm_pattern_nr);
            MMTListener.MMTHandleLayerDec(cm_pattern_nr);
         }
         MMTListener.MMTHandleLayerDec(cm_pattern_nr); //selectPrevPattern();
      }
   }

   // <ui_kbd.png>
   public virtual onBeginTriadKeyMode() : boolean {
      Global.Print("lctrl-x - ");
      return true;
   }

   // <ui_kbd.png>
   public virtual onTriadKeyTimeout() {
      Dialogs.ShowTriadKeyHelpDialog("lctrl-x ..",
"
          d         :   Toggle pattern manager
          z         :   Switch between pipenodes A/B
          F3        :   Delete current pattern
"
                                    ,
                                    this);
      return true;
   }

   // <ui_kbd.png>
   public virtual onTriadKey(Key _k) : boolean {
      // No unicode events generated if lctrl- is still pressed
      int key = _k.pressed;
      boolean r = false;
      loop(2) // first pass for raw keycode, second pass for unicode
      {
         // US (reference) keyboard layout (raw keycodes)
         switch(key)
         {
            case VKEY_F3:
               handlePatternFree();
               return true;
         }

         // see above
         key = _k.unicode;
      }

      return false;
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      switch(_k.pressed)
      {
         // case 'q':
         // case VKEY_ESCAPE:
         //    break;

         case '1':
            if(_k.modCtrlOnly())
            {
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               refocusDefault();
               return true;
            }
            break;

         case '2':
            if(_k.modCtrlOnly())
            {
               ts_groups.setActiveTabIndex(TAB_BUFFER);
               refocusDefault();
               return true;
            }
            break;

         case '3':
            if(_k.modCtrlOnly())
            {
               ts_groups.setActiveTabIndex(TAB_OUT1);
               refocusDefault();
               return true;
            }
            break;

         case '4':
            if(_k.modCtrlOnly())
            {
               ts_groups.setActiveTabIndex(TAB_OUT2);
               refocusDefault();
               return true;
            }
            break;

         case '5':
            if(_k.modCtrlOnly())
            {
               ts_groups.setActiveTabIndex(TAB_OUT3);
               refocusDefault();
               return true;
            }
            break;

         case '6':
            if(_k.modCtrlOnly())
            {
               ts_groups.setActiveTabIndex(TAB_OUT4);
               refocusDefault();
               return true;
            }
            break;

         case '7':
            if(_k.modCtrlOnly())
            {
               ts_groups.setActiveTabIndex(TAB_ARP);
               refocusDefault();
               return true;
            }
            break;

         case '8':
            if(_k.modCtrlOnly())
            {
               ts_groups.setActiveTabIndex(TAB_PLAY);
               refocusDefault();
               return true;
            }
            break;

         case VKEY_HOME:
            if(STConfig.b_key_swap_pattern_home_end)
               handlePatternKeyEnd(_k.mod);
            else
               handlePatternKeyHome(_k.mod);
            return true;

         case VKEY_END:
            if(STConfig.b_key_swap_pattern_home_end)
               handlePatternKeyHome(_k.mod);
            else
               handlePatternKeyEnd(_k.mod);
            return true;

         case 'a':
            if(_k.modNone())
            {
               if(TAB_PATTERN == ts_groups.getActiveTabIndex())
                  showPatternToolsMenu(true/*bFocusFirst*/);
               return true;
            }
            break;

         case 'c':
            if( _k.modCtrl() || (_k.modCmd() && UI.b_key_cmd_copy_paste) )
            {
               handlePatternCopy();
               return true;
            }
            break;

         case 'v':
            if( _k.modCtrl() || (_k.modCmd() && UI.b_key_cmd_copy_paste) )
            {
               handlePatternPaste();
               return true;
            }
            break;

         case 'n':
            if(_k.modCtrl())
            {
               if(_k.modShift())
               {
                  handlePatternAlloc(true/*bSub*/);
               }
               else
               {
                  handlePatternAlloc(false/*bSub*/);
               }
               return true;
            }
            else
            {
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               // handleViewEnter();
               tf_pat_name.onTabFocus();
               return true;
            }
            break;

         case 'r':
            if(_k.modCtrl())
            {
               if(_k.modShift())
               {
                  handlePatternClone(true/*bSub*/);
               }
               else
               {
                  handlePatternClone(false/*bSub*/);
               }
               return true;
            }
            break;
      }

      switch(ts_groups.getActiveTabIndex())
      {
         case TAB_PATTERN:
            switch(_k.pressed)
            {
            }
            break;

         case TAB_PLAY:
            break;
      }

      if(trySelectPatternByUsedIdx(_k))
         return true;

      if(_k.modShift())
      {
         switch(_k.pressed)
         {
         }
      }

      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      StringAction *sac;

      switch(@(ap))
      {
         default:
            break;

         case @(ts_groups):
            Global.Print("Active tab is \""+ts_groups.getActiveViewCaption()+"\".");
            return true;

         case @(bt_pat_alloc):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handlePatternClone(false/*bSub*/);
            }
            else
            {
               handlePatternAlloc(false/*bSub*/);
            }
            return true;

         case @(bt_pat_tools):
            showPatternToolsMenu(false/*bFocusFirst*/);
            return true;

         case @(pm_pat_tools):
            Global.Debug2("NodeBufferEditor: pm_pat_tools acName="+acName);
            if(!PopupMenu.IsFocusAction(_action))
               refocusDefault();
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close pattern tools menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "copy":
                  handlePatternCopy();
                  return true;

               case "paste":
                  handlePatternPaste();
                  return true;

               case "clone":
                  handlePatternClone(false/*bSub*/);
                  return true;

               case "clone_sub":
                  handlePatternClone(true/*bSub*/);
                  return true;

               case "new_sub":
                  handlePatternAlloc(true/*bSub*/);
                  return true;
            }
            return true;

         case @(bt_pat_free):
            handlePatternFree();
            return true;

            // Pattern:
         case @(cm_pattern_nr):
            handleSelectPattern();
            return true;

         case @(tf_pat_name):
            handleNameChanged();
            updatePatternNrComboBox();

            if(TextField.ACTION_TEXTENTERED == acName)
            {
               refocusDefault();
            }

            return true;

         case @(fp_pat_offset):
            handleOffsetChanged();
            return true;

         case @(fp_pat_length):
            handleLengthChanged();
            return true;

            // Buffer:
         case @(cm_buffer_dev):
            handleBufferDevChanged();
            return true;

         case @(cb_buffer_enable):
            handleBufferEnableChanged();
            return true;

         case @(cm_buffer_ch):
            handleBufferChChanged();
            return true;

         case @(cb_buffer_lock):
            handleBufferLockChanged();
            return true;

         case @(cm_buffer_storage):
            handleBufferStorageChanged();
            return true;

         case @(cm_buffer_mode):
            handleBufferModeChanged();
            return true;

         case @(cb_buffer_dbl):
            handleBufferDblChanged();
            return true;

         case @(fp_buffer_offset):
            handleBufferRecOffsetChanged();
            return true;

         case @(fp_buffer_length):
            handleBufferRecLengthChanged();
            return true;

         case @(cm_buffer_raster):
            handleBufferRasterChanged();
            return true;

         case @(cb_buffer_polypressure):
            handleBufferPolyPressureChanged();
            return true;

            // Arp:
         case @(cm_arp_dev):
            handleArpDevChanged();
            return true;

         case @(cb_arp_enable):
            handleArpEnableChanged();
            return true;

         case @(cm_arp_ch):
            handleArpChChanged();
            return true;

         case @(cm_arp_mode):
            handleArpModeChanged();
            return true;

         case @(tv_arp_notes):
            if(acName == TableView.ACTION_ROWCLICKED)
            {
            }
            else if(acName == TableView.ACTION_ROWSELECTED)
            {
               bt_arp_remove.setEditable(true);
               bt_arp_moveup.setEditable(true);
               bt_arp_movedown.setEditable(true);
            }
            else if(TableView.ACTION_SHOWCONTEXTMENU == acName)
            {
            }
            return true;

         case @(bt_arp_add):
            handleAddArpNote();
            return true;

         case @(bt_arp_remove):
            handleRemoveArpNote();
            return true;

         case @(bt_arp_moveup):
            handleMoveUpArpNote();
            return true;

         case @(bt_arp_movedown):
            handleMoveDownArpNote();
            return true;

         case @(cm_arp_baseoct):
            handleArpBaseOctaveChanged();
            return true;

         case @(cb_arp_reset):
            handleArpResetChanged();
            return true;

         case @(cb_arp_reset_q):
            handleArpResetQChanged();
            return true;

         case @(cb_arp_wrap):
            handleArpWrapChanged();
            return true;

         case @(cb_arp_order):
            handleArpOrderChanged();
            return true;

         case @(cm_arp_latch):
            handleArpLatchChanged();
            return true;

         case @(cb_arp_latch_reset):
            handleArpLatchResetChanged();
            return true;

         case @(cb_arp_play_arp_notes):
            handleArpPlayArpNotesChanged();
            return true;

         case @(cb_arp_play_non_arp_notes):
            handleArpPlayNonArpNotesChanged();
            return true;

         case @(cb_arp_dynaofflen):
            handleArpDynaOffLenChanged();
            return true;


            // Play:
         case @(cm_node_class):
            handleNodeClassChanged();
            return true;

         case @(cb_node_class_show):
            handleNodeClassShowChanged();
            return true;

         case @(cm_node_class_show_in):
            handleNodeClassShowInChanged(buffer);
            f_autodev.handleNodeClassShowChanged();
            return true;
      }

      return XMLForm::consumeAction(_action);
   }

}
