// ----
// ---- file   : DelayCalculatorDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2022-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 07May2022
// ---- changed: 04Oct2023, 30Oct2023
// ----
// ----
// ----

module MDelayCalculatorDialog;

use namespace ui;
use namespace st2;


// <class.png>
class DelayCalculatorDialog extends Dialog, RemoteEventListener {

   protected XMLForm *xfm;

   protected FloatParam *fp_bpm;
   protected FloatParam *fp_ppq;
   protected ComboBox   *cm_notelen;
   protected FloatParam *fp_num;
   protected FloatParam *fp_sr;

   protected Label      *lb_ticks;
   protected Label      *lb_frames;
   protected Label      *lb_millisec;

   protected Button     *bt_close;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("DelayCalculatorDialog.xfm");
      if(null == xfm)
      {
         return false;
      }

      xfm.autoResolveIds(this);

      /*
        Largo is 40-60 BPM
        Larghetto is 60-66 BPM
        Adagio is 66-76 BPM
        Andante is 76-108 BPM
        Moderato is 108-120 BPM
        Allegro is 120-168 BPM
        Presto is 168-200 BPM
        Prestissimo is 200+ BPM
      */

      fp_bpm.setPresetOptions([60.0, 65.0, 70.0, 85.0, 90.0, 95.0, 100.0, 110.0, 120.0, 130.0, 140.0, 150.0, 160.0, 170.0, 180.0, 200.0],
                              ["Reggae / Dub",                  // 60
                               "Tango",                         // 65
                               "Downtempo / R&B",               // 70
                               "Hip-Hop",                       // 85
                               "Chill-Out",                     // 90
                               "Samba",                         // 95
                               "Pop / Metal / Rumba",           // 100
                               "Rock",                          // 110
                               "Jazz / Funk / House / Techno",  // 120  (+Cha Cha Cha :-))
                               "Garage / Trance",               // 130
                               "Dubstep / Trap / Grime",        // 140  (half time feel)
                               "Hardstyle",                     // 150
                               "Jungle / Drum & Bass",          // 160
                               "Jive / Psy / Neurofunk",        // 170
                               "Salsa",                         // 180
                               "Charleston",                    // 200
                               ]
                              );

      fp_ppq.setPresetOptions([12.0, 24.0, 48.0, 96.0, 192.0, 384.0, 480.0, 768.0, 960.0],
                              ["CR-78", "Soundtracker / Drumulator", "Korg DIN / Sync 48 / KPR-77 / Drumtraks", "DMX / Linn / MPC / Elektron", "Notator / OASYS / Cirklon / Synergy", "E-Mu Command Station", "QY-70/100", "Kurzweil K2000", "Cubase / Cakewalk / Logic"]
                              );
      fp_num.setValue(1);
      fp_sr.setPresetOptions([8000.0,   // 0
                              8287.0,   // 1
                              11025.0,  // 2
                              16574.0,  // 3
                              22050.0,  // 4
                              28800.0,  // 5
                              32000.0,  // 6
                              44100.0,  // 7
                              48000.0,  // 8
                              49170.0,  // 9
                              50000.0,  // 10
                              88100.0,  // 11
                              96000.0,  // 12
                              176200.0, // 13
                              192000.0  // 14
                              ],
                             ["Telephone",    // 0
                              "Amiga C-2",    // 1
                              "AM Broadcast", // 2
                              "Amiga C-3",    // 3
                              "FM Broadcast", // 4
                              "Amiga Max",    // 5
                              "miniDV",       // 6
                              "Audio CD",     // 7
                              "DVD",          // 8
                              "Falcon Max",   // 9
                              "3M 70ies",     // 10
                              "Audio CD x2",  // 11
                              "DVD-Audio",    // 12
                              "Audio CD x3",  // 13
                              "HD DVD-Audio", // 14
                              ]
                             );
      fp_sr.setValue(44100.0);
      cm_notelen.setOptions(NTS_Track.notelen_names);
      cm_notelen.setSelectedOption(NTS_Track.NOTELEN_16);

      initWindow(xfm,
                 "Delay Calculator",
                 100, 100,
                 640, 240
                 );

      return true;
   }

   // <ui_show.png>
   public method showDelayCalculatorDialog() {

      Global.Print("Show Delay Calculator Dialog");

      fp_bpm.setValue(current_song.bpm);
      fp_ppq.setValue(current_song.ppq);

      updateLabels();

      showCenteredFirst();
   }

   // <method_get.png>
   public virtual isPopup() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual isModal():boolean {
      return true;
   }

   // <method_get.png>
   public virtual isResizable() : boolean {
      return false;
   }

   // <ui_show.png>
   protected virtual preShow() {
      resizeToMinimum();
      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      refocusDefault();
   }

   // <ui_hide.png>
   public virtual hide() {
      Dialog::hide();
   }

   // <ui_update.png>
   protected method updateLabels() {
      float bpm = fp_bpm.getFloatValue();
      float ppq = fp_ppq.getFloatValue();
      int noteIdx = cm_notelen.getSelectedOption();
      float num = fp_num.getFloatValue();
      float sr  = fp_sr.getFloatValue();

      FloatArray baseNoteLens <= NTS_Track.base_notelen_dur_tbl;
      local Float ticks = (num * ppq * 4.0) / baseNoteLens.get(noteIdx / 3);
      if(1 == (noteIdx % 3))
         ticks *= 2.0 / 3;  // triplet
      else if(2 == (noteIdx % 3))
         ticks *= 1.5;      // dotted

      local Float ms = (1000.0f * 60.0f * ticks) / (ppq * bpm);
      local Float numFrames = (sr * ms) / 1000.0f;

      if(1)
      {
         lb_ticks .setCaption(ticks.printf("%7.0f")+" ticks");
         lb_frames.setCaption(numFrames.printf("%14.0f")+" frames");
         lb_millisec.setCaption(ms.printf("%7.0f")+" millisec");
      }
      else
      {
         // fractional
         lb_ticks .setCaption(ticks.printf("%7.3f")+" ticks");
         lb_frames.setCaption(numFrames.printf("%14.3f")+" frames");
         lb_millisec.setCaption(ms.printf("%7.3f")+" millisec");
      }

      redraw();
   }

   // <ui_kbd.png>
   protected method refocusDefault() {
      UI.SetKeyboardFocus(bt_close);
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {
      layers.joinRR(layers,
                    [
                       fp_bpm,
                       fp_ppq,
                       cm_notelen,
                       fp_num,
                       fp_sr,

                       bt_close,
                     ]
                    );

      return layers;
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      // trace "xxxx DelayCalculatorDialog::onKey: pressed="+_k.pressed+" name="+_k.name;
      switch(_k.pressed)
      {
         default:
            break;

         case VKEY_ESCAPE:
            hide();
            return true;

         case '1':
            UI.SetKeyboardFocus(fp_bpm);
            return true;

         case '2':
            UI.SetKeyboardFocus(fp_ppq);
            return true;

         case '3':
            UI.SetKeyboardFocus(cm_notelen);
            return true;

         case '4':
            UI.SetKeyboardFocus(fp_num);
            return true;

         case '5':
            UI.SetKeyboardFocus(fp_sr);
            return true;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName = _ac.getActionName();

      switch(@(_ac.getActionProvider()))
      {
         case @(fp_bpm):
            Global.Print("BPM is "+fp_bpm.getFloatValue());
            updateLabels();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusDefault();
            return true;

         case @(fp_ppq):
            Global.Print("PPQ is "+fp_ppq.getFloatValue());
            updateLabels();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusDefault();
            return true;

         case @(cm_notelen):
            Global.Print("Note duration is "+cm_notelen.getSelectedOptionName());
            updateLabels();
            return true;

         case @(fp_num):
            Global.Print("#Steps is "+fp_num.getFloatValue());
            updateLabels();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusDefault();
            return true;

         case @(fp_sr):
            Global.Print("Samplerate is "+fp_sr.getFloatValue());
            updateLabels();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               refocusDefault();
            return true;

         case @(bt_close):
            hide();
            return true;
      }

      return true;
   }

}
