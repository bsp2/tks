// ----
// ---- file   : AudioLiveRecDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2021-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 17Jul2021
// ---- changed: 18Jul2021, 19Jul2021, 21Jul2021, 10Aug2022, 11Aug2022, 12Aug2022, 04Oct2023
// ----          30Oct2023, 16Nov2023, 19Nov2023, 26Jan2025, 28Feb2025
// ----
// ----
// ----

module MAudioLiveRecDialog;

use namespace ui;
use namespace st2;


// <class.png>
class AudioLiveRecDialog extends Dialog, RemoteEventListener {

   protected boolean b_modal;

   boolean b_was_visible_before_docked_to_timeline;


   // <ui_init.png>
   public method init() : boolean {

      b_modal = true;

      initDialog();

      f_audio_liverec <= new AudioLiveRecForm;  // in "st2" namespace, see synergy.tks
      if(!f_audio_liverec.initAudioLiveRecForm())
         return false;

      initWindow(f_audio_liverec,
                 "Audio LiveRec Control",
                 100, 100,
                 640, 240
                 );

      return true;
   }

   // <method_set.png>
   public method setEnableModal(boolean _bModal) {
      b_modal = _bModal;
   }

   // <method_get.png>
   public virtual isPopup() : boolean {
      return b_modal;
   }

   // <method_get.png>
   public virtual isModal():boolean {
      return b_modal;
   }

   // <method_get.png>
   public virtual isResizable() : boolean {
      return false;
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      f_audio_liverec.addTabCycleOverrides(_retLayers);
   }

   // <ui_kbd.png>
   public virtual getTabCycleOverrides() : PointerArray {
      return getTabCycleOverridesDef();
   }

   // <method_get.png>
   public method isAudioLiveRecFormVisible() : boolean {
      return f_audio_liverec.b_docked_to_timeline || isFloatingLayerVisible();
   }

   // <method.png>
   public method dockToArrangerTimeline(NA_TimelineForm _timeline, Panel _parent) {
      // 'parent' is pn_liverec_dock
      if(!f_audio_liverec.b_docked_to_timeline)
      {
         b_was_visible_before_docked_to_timeline = isFloatingLayerVisible();
         if(b_was_visible_before_docked_to_timeline)
            hide();
         setInnerLayer(null);

         _parent.addLayer(f_audio_liverec, Layout.BOTTOM);
         f_audio_liverec.setEnableDockedToTimeline(true, _timeline);
      }
   }

   // <method.png>
   public method undockFromArrangerTimeline(Panel _parent) {
      // 'parent' is pn_liverec_dock
      if(f_audio_liverec.b_docked_to_timeline)
      {
         _parent.removeChildren();

         f_audio_liverec.setEnableDockedToTimeline(false, null/*parentTimeline*/);
         setInnerLayer(f_audio_liverec);

         if(b_was_visible_before_docked_to_timeline)
         {
            show();
         }
      }
   }

   // <ui_handle.png>
   public method handleQuery() {
      f_audio_liverec.handleQuery();
   }

   // <method_get.png>
   public method getExtra16ths() : int {
      return f_audio_liverec.getExtra16ths();
   }

   // <method_get.png>
   public method getEnableForceStereo() : boolean {
      return f_audio_liverec.getEnableForceStereo();
   }

   // <ui_show.png>
   protected virtual preShow() {

      f_audio_liverec.preShow();
      resizeToMinimum();

      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      f_audio_liverec.postShow();

      restoreGeometryIfValid(UI.IsHiDPI()
                             ? STConfig.audio_liverec_dialog_geo_hidpi
                             : STConfig.audio_liverec_dialog_geo_lodpi
                             );
   }

   // <ui_hide.png>
   public virtual hide() {

      if(UI.IsHiDPI())
         STConfig.audio_liverec_dialog_geo_hidpi = getGeometry4f();
      else
         STConfig.audio_liverec_dialog_geo_lodpi = getGeometry4f();

      Dialog::hide();

      f_audio_liverec.hide();
   }

   // <ui_mouse.png>
   public virtual onMouseClick(MouseEvent _ev) : boolean {
      if(_ev.isRightButton())
      {
         hide();
         return true;
      }
      return false;
   }

   // <ui_handle.png>
   public method handleAudioPatNrChanged() {
      f_audio_liverec.handleAudioPatNrChanged();
   }

   // <method.png>
   public method handleStopPlaying() {
      f_audio_liverec.handleStopPlaying();
   }

   // <ui_kbd.png>
   public virtual onTriadKey(Key _k) : boolean {
      switch(_k.pressed)
      {
         case 'c':
            if(root_form.isTrackerEditorVisible())
            {
               PageNode pgNode <= root_form.pg_node;
               NodeTrackerEditor nodeTrackerEditor <= pgNode.editor;
               NT_PatternView patternView <= nodeTrackerEditor.pattern_view;
               UI.LoseKeyboardFocusIfWithin(this, true/*bQuiet*/);
               UI.LoseMouseFocusIfWithin(this);
               UI.SetKeyboardFocus(patternView);
               UI.SetMouseFocus(patternView);
            }
            else
               hide();
            return true;
      }
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      // trace "xxx AudioRecordDialog::onKey: pressed="+_k.pressed+" name="+_k.name;
      switch(_k.pressed)
      {
         default:
            break;

         case 'a':
            if(_k.modCtrlOnly())
            {
               if(root_form.isTrackerEditorVisible())
               {
                  hide();
                  NodeTrackerEditor ntEditor <= root_form.pg_node.editor;
                  ntEditor.cmd_edit_showaudiodialog();
               }
               return true;
            }
            break;

         case VKEY_F2:
            if(_k.modShift())
            {
               hide();
               return true;
            }
            break;

         case VKEY_ESCAPE:
            hide();
            return true;
      }
      return false;
   }

}
