// ----
// ---- file   : ConfigIO.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2011-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- changed: 19Mar2011, 30Mar2011, 23Apr2011, 17Jan2012, 08Feb2012, 19Feb2012, 20Feb2012
// ----          13May2012, 14May2012, 13Nov2012, 21Nov2012, 22Apr2013, 07May2013, 15May2013
// ----          23May2013, 25May2013, 28May2013, 29May2013, 30May2013, 31May2013, 04Jun2013
// ----          05Jun2013, 11Jun2013, 26Aug2013, 27Aug2013, 09Feb2014, 15Jun2014, 09Aug2014
// ----          11Aug2014, 12Aug2014, 13Aug2014, 19Aug2014, 31Aug2014, 14Sep2014, 02Mar2015
// ----          04Mar2015, 09Apr2015, 18Apr2015, 19Apr2015, 13May2015, 14May2015, 28Jul2015
// ----          14Sep2015, 06Nov2015, 08Jan2016, 19Jan2016, 28Mar2016, 25Jul2016, 18Aug2016
// ----          13Jan2017, 28Jan2017, 30Jan2017, 03Mar2017, 04Mar2017, 05Mar2017, 30Apr2017
// ----          16Jun2017, 02Sep2017, 02Nov2017, 22Dec2017, 04Jan2018, 06Jan2018, 24May2018
// ----          03Jun2018, 28Nov2018, 01Dec2018, 01Mar2019, 30Apr2019, 07Aug2019, 22Sep2019
// ----          20Oct2019, 22Oct2019, 29Oct2019, 01Nov2019, 02Nov2019, 08Nov2019, 25Apr2020
// ----          07May2020, 23Oct2020, 24Oct2020, 25Oct2020, 01Nov2020, 15Nov2020, 27Nov2020
// ----          29Nov2020, 13May2021, 14Jun2021, 25Jul2021, 16Dec2021, 18Dec2021, 06May2022
// ----          25Nov2022, 18Feb2023, 04Mar2023, 01Apr2023, 16Jul2023, 28Jul2023, 27Sep2023
// ----          27Oct2023, 29Oct2023, 02Nov2023, 19Nov2023, 11Apr2024, 07Jul2024, 16Jan2025
// ----          14Mar2025
// ----
// ----
// ----
module MConfigIO;

use namespace ui;
use namespace st2;


// <class.png>
class ConfigIO {

   define String START_TAG = "//----BEGIN_AUTOGENERATED_CONFIG----";
   define String END_TAG   = "//----END_AUTOGENERATED_CONFIG----";

   define String START_MIDI_TAG = "//----BEGIN_AUTOGENERATED_MIDI_CONFIG----";
   define String END_MIDI_TAG   = "//----END_AUTOGENERATED_MIDI_CONFIG----";

   protected static String buf;


   // <method.png>
   static protected AddSection(String _name) {
      local String line;
      line.append("      // ------------ ");
      line.append(_name);
      line.append(" ");
      buf.append(Utils.AlignStringC(line, '-', 50));
      buf.append("\n");
   }

   // <method.png>
   static protected AddInt(String _name, int _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append(_val);
      buf.append(";\n");
   }

   // <method.png>
   static protected AddIntExpr(String _name, int _val, String _expr) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append(_val);
      buf.append(_expr);
      buf.append(";\n");
   }

   // <method.png>
   static protected AddIntHex(String _name, int _val) {
      Integer io = _val;
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append(io.printf("#%08x"));
      buf.append(";\n");
   }

   // <method.png>
   static protected AddBoolean(String _name, boolean _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append( (true==_val)?"true":(false==_val)?"false":"maybe" );
      buf.append(";\n");
   }

   // <method.png>
   static protected AddFloat(String _name, float _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append(_val);
      buf.append(";\n");
   }

   // <method.png>
   static protected AddGeometry4f(String _name, Geometry4f _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append(_val); // yacToString() will convert to "[1,2,3,4]" like string
      buf.append(";\n");
   }

   // <method.png>
   static protected AddString(String _name, String _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = \"");
      buf.append(_val);
      buf.append("\";\n");
   }

   // <method.png>
   static protected AddRawString(String _name, String _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append(" = ");
      buf.append(_val);
      buf.append(";\n");
   }

   // <method.png>
   static protected AddFunCall1(String _name, String _val) {
      buf.append("      ");
      buf.append(_name);
      buf.append("(");
      buf.append(_val);
      buf.append(");\n");
   }

   // <method.png>
   static protected AddUI() {
      AddSection("UI");

      // UI Size Preset
      AddInt("ui_size_preset", STConfig.ui_size_preset);

      // Window size
      AddInt("window_sx", int(Viewport.width  / STConfig.zoom_x));
      AddInt("window_sy", int(Viewport.height / STConfig.zoom_y));

      // Window position
      AddInt("window_x", Viewport.positionX);
      AddInt("window_y", Viewport.positionY);

      // Zoom
      AddFloat("zoom_x", STConfig.zoom_x);
      AddFloat("zoom_y", STConfig.zoom_y);

      // Cursor zoom
      AddInt("cursor_zoom", STConfig.cursor_zoom);

      // Transparent layers
      AddBoolean("b_transparent_layers", UI.b_transparent_layers);

      // VSync
      AddBoolean("b_vsync", STConfig.b_vsync);

      // Force highframte (!fpslimit)
      AddBoolean("b_force_high_framerate", STConfig.b_force_high_framerate);

      // Fullscreen
      AddBoolean("b_fullscreen", STConfig.b_fullscreen);

      // Fullscreen width
      AddInt("fullscreen_sx", STConfig.fullscreen_sx);

      // Fullscreen height
      AddInt("fullscreen_sy", STConfig.fullscreen_sy);

      // Fullscreen bits
      AddInt("fullscreen_bits", STConfig.fullscreen_bits);

      // Fullscreen size = display size
      AddBoolean("b_fullscreen_displaysize", STConfig.b_fullscreen_displaysize);

      // Post processing effect (fullscreen mode);
      AddInt("postfx_fs_mode", STConfig.postfx_fs_mode);

      // Post processing effect color (fullscreen mode)
      AddIntHex("postfx_fs_color", STConfig.postfx_fs_color);

      // Post processing effect (window mode);
      AddInt("postfx_win_mode", STConfig.postfx_win_mode);

      // Post processing effect color (window mode)
      AddIntHex("postfx_win_color", STConfig.postfx_win_color);

      // Manage sub-songs selection mode
      // AddInt("managesubsongs_selmode", STConfig.managesubsongs_selmode);

      // Vsync key repeat
      AddBoolean("UI.b_vsync_keyrepeat", UI.b_vsync_keyrepeat);

      // Start page
      AddRawString("start_page", "RootForm."+TKS.scriptClassConstantToString(#(STConfig.start_page), RootForm, "PAGE_"));

      // LookAndFeel
      AddRawString("lnf_idx", "LookAndFeel."+TKS.scriptClassConstantToString(#(STConfig.lnf_idx), LookAndFeel, "IDX_"));

      // LookAndFeel: Color Grading preset
      AddInt("lnf_colorgrading_initial_idx", STConfig.lnf_colorgrading_initial_idx);

      // Color Grading Amount
      buf.append("      UI.SetPostFBOColorGradingAmount("+UI.post_fbo_color_grading_amount+");\n");
   }

   // <method.png>
   static protected AddKbd() {
      AddSection("Kbd");

      // VSync key repeat
      AddFunCall1("UI.SetEnableVSyncKeyRepeat", UI.b_vsync_keyrepeat ? "true" : "false");

      // Command Copy/Paste (macOS)
      AddFunCall1("UI.SetEnableKeyCmdCopyPaste", UI.b_key_cmd_copy_paste ? "true" : "false");

      // Map SLASH to LESS
      AddFunCall1("UI.SetEnableKeyMapSlashToLess", UI.b_key_map_slash_to_less ? "true" : "false");

      // Swap home / end keys
      AddBoolean("b_key_swap_pattern_home_end", STConfig.b_key_swap_pattern_home_end);
   }

   // <method.png>
   static protected AddProject() {
      AddSection("Project");

      // Crash autosave
      AddBoolean("b_crash_autosave", STConfig.b_crash_autosave);

      // Autoshow comment
      AddBoolean("b_autoshowcomment", STConfig.b_autoshowcomment);

      // Autoload filename
      AddString("autoload_filename", STConfig.autoload_filename.replace("\\", "/"));

      // Autoload filename auto-update
      AddBoolean("b_autoload_filename_autoupdate", STConfig.b_autoload_filename_autoupdate);

      // Autosave num files
      AddInt("num_autosave_files", STConfig.num_autosave_files);

      // Autosave interval (minutes)
      AddInt("autosave_interval", STConfig.autosave_interval);

      // Enable/disable autosaves
      AddBoolean("b_autosave", STConfig.b_autosave);
   }

   // <method.png>
   static protected AddReplay() {
      AddSection("Replay");

      AddInt("patternmgr_midi_base_note", STConfig.patternmgr_midi_base_note);
      AddRawString("patternmgr_midi_mode",
                   "PatternManager."+TKS.scriptClassConstantToString(#(STConfig.patternmgr_midi_mode),
                                                                     PatternManager,
                                                                     "MIDI_MODE_"
                                                                     )
                   );

      AddBoolean("b_node_send_play_pattern_prgchg_when_replay_starts", STConfig.b_node_send_play_pattern_prgchg_when_replay_starts);

      // PageSysEx
      AddBoolean("b_pagesysex_redirect_ev", STConfig.b_pagesysex_redirect_ev);

      // PageSysEx: Montage editor synth model (Montage / MODX)
      AddBoolean("b_pagesysex_modx", STConfig.b_pagesysex_modx);
   }

   // <method.png>
   static protected AddPipeMap() {
      AddSection("PipeMap");

      AddInt("pipemap_patnr_display", STConfig.pipemap_patnr_display);
      AddFloat("pipemap_precount_num_bars", STConfig.pipemap_precount_num_bars);
      AddBoolean("b_pipemap_precount", STConfig.b_pipemap_precount);
   }

   // <method.png>
   static protected AddNodeArranger() {
      AddInt("arranger_beatbar_label_offset", STConfig.arranger_beatbar_label_offset);
   }

   // <method.png>
   static protected AddNodeTracker() {
      AddSection("NodeTracker");

      // Recording Pre-Count
      AddFloat("node_tracker_precount_num_bars", STConfig.node_tracker_precount_num_bars);

      // Enable Pre-Count
      AddBoolean("b_node_tracker_precount", STConfig.b_node_tracker_precount);

      // Enable MIDI keyjazz
      AddBoolean("b_node_tracker_midi_keyjazz", STConfig.b_node_tracker_midi_keyjazz);

      // Select+Play
      AddBoolean("b_node_tracker_selectandplay", STConfig.b_node_tracker_selectandplay);

      // Keyjazz manual note off
      AddBoolean("b_node_tracker_keyjazz_manual_noteoff", STConfig.b_node_tracker_keyjazz_manual_noteoff);

      // Advance when all notes released
      AddBoolean("b_node_tracker_advance_allnotesreleased", STConfig.b_node_tracker_advance_allnotesreleased);

      // Write record note offs
      AddBoolean("b_node_tracker_recordnoteoff", STConfig.b_node_tracker_recordnoteoff);

      // Write record note offs only during replay
      AddBoolean("b_node_tracker_recordnoteoff_replay", STConfig.b_node_tracker_recordnoteoff_replay);

      // Record CTL_DURn
      AddBoolean("b_node_tracker_recordnoteoff_dur", STConfig.b_node_tracker_recordnoteoff_dur);

      // Record quantization
      AddBoolean("b_node_tracker_recordquantize", STConfig.b_node_tracker_recordquantize);

      // Recording latency
      AddFloat("node_tracker_rec_latency", STConfig.node_tracker_rec_latency);
      AddBoolean("b_node_tracker_rec_latency", STConfig.b_node_tracker_rec_latency);

      // Ignore PrgChg/Seek/Mute during pattern replay
      AddBoolean("b_node_tracker_ignore_seek_prgchg_mute_during_pattern_replay",
                 STConfig.b_node_tracker_ignore_seek_prgchg_mute_during_pattern_replay
                 );

      // Edit pattern follows replay pattern ("follow arranger")
      AddBoolean("b_node_tracker_edit_pattern_follows_replay_pattern",
                 STConfig.b_node_tracker_edit_pattern_follows_replay_pattern
                 );

      // Decimal patternoffset
      AddBoolean("b_node_tracker_decimal_patternoffset", STConfig.b_node_tracker_decimal_patternoffset);

      // Shift patternoffset
      AddBoolean("b_node_tracker_shift_patternoffset", STConfig.b_node_tracker_shift_patternoffset);

      // Swap stop bookmark behaviour
      AddBoolean("b_node_tracker_swapstopbookmark", STConfig.b_node_tracker_swapstopbookmark);

      // Show track names
      AddBoolean("b_node_tracker_show_track_names", STConfig.b_node_tracker_show_track_names);

      // Double center row
      AddBoolean("b_node_tracker_doublecenter_hidpi", STConfig.b_node_tracker_doublecenter_hidpi);
      AddBoolean("b_node_tracker_doublecenter_lodpi", STConfig.b_node_tracker_doublecenter_lodpi);

      // Double char width
      AddBoolean("b_node_tracker_doublewidth_hidpi", STConfig.b_node_tracker_doublewidth_hidpi);
      AddBoolean("b_node_tracker_doublewidth_lodpi", STConfig.b_node_tracker_doublewidth_lodpi);

      // Double char height
      AddBoolean("b_node_tracker_doubleheight_hidpi", STConfig.b_node_tracker_doubleheight_hidpi);
      AddBoolean("b_node_tracker_doubleheight_lodpi", STConfig.b_node_tracker_doubleheight_lodpi);

      // TimingView: Auto-double char width
      AddBoolean("b_node_tracker_timing_view_autodouble_width",
                 STConfig.b_node_tracker_timing_view_autodouble_width
                 );

      // TimingView: Auto-double char height
      AddBoolean("b_node_tracker_timing_view_autodouble_height",
                 STConfig.b_node_tracker_timing_view_autodouble_height
                 );

      // Decimal pattern offset
      AddBoolean("b_node_tracker_decimal_patternoffset",
                 STConfig.b_node_tracker_decimal_patternoffset
                 );

      // Smooth-scroll
      AddBoolean("b_node_tracker_smoothscroll", STConfig.b_node_tracker_smoothscroll);

      // Autoscroll
      AddBoolean("b_node_tracker_autoscroll", STConfig.b_node_tracker_autoscroll);

      // Wrap-around
      AddBoolean("b_node_tracker_wraparound", STConfig.b_node_tracker_wraparound);

      // Highlight mouseover
      AddBoolean("b_node_tracker_highlight_mouseover_col", STConfig.b_node_tracker_highlight_mouseover_col);

      // Column-Info mouseover
      AddBoolean("b_node_tracker_info_mouseover_col", STConfig.b_node_tracker_info_mouseover_col);

      // Highlight cursor move
      AddBoolean("b_node_tracker_highlight_cursormove", STConfig.b_node_tracker_highlight_cursormove);

      // Draw EQ
      AddBoolean("b_node_tracker_draweq", STConfig.b_node_tracker_draweq);

      // EQ opacity
      AddInt("node_tracker_eq_opacity", STConfig.node_tracker_eq_opacity);

      // Show zoom/step_res as text (briefly)
      AddBoolean("b_node_tracker_zoomicon_anim", STConfig.b_node_tracker_zoomicon_anim);

      // Add CTL_VELn when adding new note cel
      AddBoolean("b_node_tracker_addnotecel_vel", STConfig.b_node_tracker_addnotecel_vel);

      // Add CTL_DURn when adding new note cel
      AddBoolean("b_node_tracker_addnotecel_dur", STConfig.b_node_tracker_addnotecel_dur);

      // Auto-Group note,vel,dur when adding new note cel
      AddBoolean("b_node_tracker_addnotecel_autogroup", STConfig.b_node_tracker_addnotecel_autogroup);

      // Max RMB drag speed
      AddFloat("node_tracker_rmbdrag_speed", STConfig.node_tracker_rmbdrag_speed);

      // Max RMB delta y
      AddInt("node_tracker_rmbdrag_maxdelta_y", STConfig.node_tracker_rmbdrag_maxdelta_y);

      // Undo mode
      AddBoolean("b_node_tracker_undo_record_single_transaction", STConfig.b_node_tracker_undo_record_single_transaction);

      // Undo debug
      AddBoolean("b_node_tracker_undo_debug", STConfig.b_node_tracker_undo_debug);

      // NT_ManageColumnsDialog geometry
      AddGeometry4f("node_tracker_dlg_mgrcol_select_geo_hidpi", STConfig.node_tracker_dlg_mgrcol_select_geo_hidpi);
      AddGeometry4f("node_tracker_dlg_mgrcol_select_geo_lodpi", STConfig.node_tracker_dlg_mgrcol_select_geo_lodpi);
      AddGeometry4f("node_tracker_dlg_mgrcol_add_geo_hidpi",    STConfig.node_tracker_dlg_mgrcol_add_geo_hidpi   );
      AddGeometry4f("node_tracker_dlg_mgrcol_add_geo_lodpi",    STConfig.node_tracker_dlg_mgrcol_add_geo_lodpi   );
      AddGeometry4f("node_tracker_dlg_mgrcol_remove_geo_hidpi", STConfig.node_tracker_dlg_mgrcol_remove_geo_hidpi);
      AddGeometry4f("node_tracker_dlg_mgrcol_remove_geo_lodpi", STConfig.node_tracker_dlg_mgrcol_remove_geo_lodpi);
      AddGeometry4f("node_tracker_dlg_mgrcol_manage_geo_hidpi", STConfig.node_tracker_dlg_mgrcol_manage_geo_hidpi);
      AddGeometry4f("node_tracker_dlg_mgrcol_manage_geo_lodpi", STConfig.node_tracker_dlg_mgrcol_manage_geo_lodpi);
      AddFloat("node_tracker_dlg_mgrcol_select_split_hidpi", STConfig.node_tracker_dlg_mgrcol_select_split_hidpi);
      AddFloat("node_tracker_dlg_mgrcol_select_split_lodpi", STConfig.node_tracker_dlg_mgrcol_select_split_lodpi);
      AddFloat("node_tracker_dlg_mgrcol_add_split_hidpi",    STConfig.node_tracker_dlg_mgrcol_add_split_hidpi);
      AddFloat("node_tracker_dlg_mgrcol_add_split_lodpi",    STConfig.node_tracker_dlg_mgrcol_add_split_lodpi);
      AddFloat("node_tracker_dlg_mgrcol_remove_split_hidpi", STConfig.node_tracker_dlg_mgrcol_remove_split_hidpi);
      AddFloat("node_tracker_dlg_mgrcol_remove_split_lodpi", STConfig.node_tracker_dlg_mgrcol_remove_split_lodpi);
      AddFloat("node_tracker_dlg_mgrcol_manage_split_hidpi", STConfig.node_tracker_dlg_mgrcol_manage_split_hidpi);
      AddFloat("node_tracker_dlg_mgrcol_manage_split_lodpi", STConfig.node_tracker_dlg_mgrcol_manage_split_lodpi);

      // NT_ManageColumnsDialog auto-hide
      AddBoolean("node_tracker_dlg_mgrcol_addremove_autohide", STConfig.node_tracker_dlg_mgrcol_addremove_autohide);

      // Swap lshift INSERT/DELETE behaviour
      AddBoolean("b_node_tracker_swap_lshift", STConfig.b_node_tracker_swap_lshift);

      // NT_QuantizeDialog settings
      AddInt("node_tracker_quantization_last_method", STConfig.node_tracker_quantization_last_method);
      AddInt("node_tracker_quantization_forced_range_ticks", STConfig.node_tracker_quantization_forced_range_ticks);
      AddInt("node_tracker_quantization_min_threshold_ticks", STConfig.node_tracker_quantization_min_threshold_ticks);
      AddFloat("node_tracker_quantization_amount", STConfig.node_tracker_quantization_amount);
      AddBoolean("b_node_tracker_quantization_wrap_around", STConfig.b_node_tracker_quantization_wrap_around);

      AddGeometry4f("nt_audio_dialog_geo_hidpi", STConfig.nt_audio_dialog_geo_hidpi);
      AddGeometry4f("nt_audio_dialog_geo_lodpi", STConfig.nt_audio_dialog_geo_lodpi);

      AddGeometry4f("audio_liverec_dialog_geo_hidpi", STConfig.audio_liverec_dialog_geo_hidpi);
      AddGeometry4f("audio_liverec_dialog_geo_lodpi", STConfig.audio_liverec_dialog_geo_lodpi);

      AddGeometry4f("audio_record_dialog_geo_hidpi", STConfig.audio_record_dialog_geo_hidpi);
      AddGeometry4f("audio_record_dialog_geo_lodpi", STConfig.audio_record_dialog_geo_lodpi);
   }

   // <method.png>
   static protected AddNodeKeyMap() {
   }

   // <method.png>
   static protected AddNodeTrigSeq() {
      AddSection("NodeTrigSeq");

      // Edit pattern follows replay pattern ("follow arranger")
      AddBoolean("b_node_trig_seq_edit_pattern_follows_replay_pattern", STConfig.b_node_trig_seq_edit_pattern_follows_replay_pattern);

      // Step label offset
      AddInt("node_trig_seq_step_label_offset", STConfig.node_trig_seq_step_label_offset);
   }

   // <method.png>
   static protected AddNodeMonitor() {
      AddSection("NodeMonitor");

      // Edit pattern follows replay pattern ("follow arranger")
      AddBoolean("b_node_monitor_edit_pattern_follows_replay_pattern", STConfig.b_node_monitor_edit_pattern_follows_replay_pattern);

      // Display byte/short values as hex
      AddBoolean("b_node_monitor_hex", STConfig.b_node_monitor_hex);

      // Display duration in milliseconds
      AddBoolean("b_node_monitor_dur_millisec", STConfig.b_node_monitor_dur_millisec);

      // Output capture timebase
      AddBoolean("b_node_monitor_capture_tick_timebase", STConfig.b_node_monitor_capture_tick_timebase);
   }

   // <method.png>
   static protected AddNodeScript() {
      AddSection("NodeScript");

      // Script exec
      AddBoolean("b_node_script_exec", STConfig.b_node_script_exec);
   }

   // <method.png>
   static protected AddNodeAnalogRytm() {
      AddSection("NodeAnalogRytm");

      // Auto-select preset by track sound
      AddBoolean("b_node_analog_rytm_find_preset", STConfig.b_node_analog_rytm_find_preset);
   }

   // <method.png>
   static protected AddNodeSeq() { // Freeform
      AddSection("NodeSeq");

      // Ignore PrgChg/Seek/Mute during pattern replay
      AddBoolean("b_node_seq_ignore_seek_prgchg_mute_during_pattern_replay", STConfig.b_node_seq_ignore_seek_prgchg_mute_during_pattern_replay);

      AddBoolean("b_node_seq_autoreset_smooth_scroll", STConfig.b_node_seq_autoreset_smooth_scroll);

      AddBoolean("b_node_seq_tracker_vel_bars", STConfig.b_node_seq_tracker_vel_bars);
   }

   // <method.png>
   static protected AddMetronome() {
      AddSection("Metronome");

      // MIDI metronome device alias or name
      AddString("midi_metronome_device", STConfig.midi_metronome_device);

      // MIDI metronome channel
      AddInt("midi_metronome_ch", STConfig.midi_metronome_ch);

      // MIDI metronome 'bar' note
      AddInt("midi_metronome_note_bar", STConfig.midi_metronome_note_bar);

      // MIDI metronome 'beat' note
      AddInt("midi_metronome_note_beat", STConfig.midi_metronome_note_beat);

      // MIDI metronome enable
      AddBoolean("b_midi_metronome", STConfig.b_midi_metronome);
   }

   // <method.png>
   static protected AddNewTrackDialog() {
      AddSection("NewTrackDialog");

      AddRawString("newtrackdialog_user_filter_history", STConfig.newtrackdialog_user_filter_history);
   }

   // <method.png>
   static protected AddRootPath() {
      AddSection("RootPath");

      // Rootpath
      buf.append("      ");
      buf.append("SetRootPath(\""+(STConfig.rootpath.replace("\\", "/"))+"\");\n");
   }

   // <method.png>
   static protected AddMIDIMisc() {
      AddSection("MIDIMisc");

      AddBoolean("b_show_ctl_info",        STConfig.b_show_ctl_info);
      AddBoolean("b_show_ctl_info_hifreq", STConfig.b_show_ctl_info_hifreq);

      buf.append("      ");
      buf.append("MIDIPipeFrame.SetMinimumNoteDuration("+MIDIPipeFrame.GetMinimumNoteDuration()+");\n");

      AddInt("midi_note_octave_offset", STConfig.midi_note_octave_offset);
      AddBoolean("b_node_tracker_note_octave_offset_glyphs", STConfig.b_node_tracker_note_octave_offset_glyphs);
   }

   // <method.png>
   static protected AddMIDIFilterConfig(ManageMIDIDevicesEntry e, String fltConfig) {

      // trace "[trc] ADDMidiFilterConfig: e.name="+e.name+" e.b_opened="+e.b_opened;

      if(e.b_opened)
      {
         STX_MIDIInDevice *inDev;

         foreach inDev in MIDI.in_devices
         {
            MIDIIn midiin <= inDev.midiin;

            if(null != midiin)
            {
               if(e.name == inDev.getDeviceName())
               {
                  fltConfig.append("         \""+e.name+"\"");
                  fltConfig.append(" = #[ ");

                  fltConfig.append("fltNoteOff="+midiin.fltNoteOff+" ");
                  fltConfig.append("fltNoteOn="+midiin.fltNoteOn+" ");
                  fltConfig.append("fltPolyPressure="+midiin.fltPolyPressure+" ");
                  fltConfig.append("fltCC="+midiin.fltCC+" ");
                  fltConfig.append("fltProgramChange="+midiin.fltProgramChange+" ");
                  fltConfig.append("fltChannelPressure="+midiin.fltChannelPressure+" ");
                  fltConfig.append("fltPitchbend="+midiin.fltPitchbend+" ");
                  fltConfig.append("fltSysEx="+midiin.fltSysEx+" ");
                  fltConfig.append("fltSysComTimeCode="+midiin.fltSysComTimeCode+" ");
                  fltConfig.append("fltSysComSongPosition="+midiin.fltSysComSongPosition+" ");
                  fltConfig.append("fltSysComSongSelect="+midiin.fltSysComSongSelect+" ");
                  fltConfig.append("fltSysComTuneRequest="+midiin.fltSysComTuneRequest+" ");
                  fltConfig.append("fltSysRTTimingClock="+midiin.fltSysRTTimingClock+" ");
                  fltConfig.append("fltSysRTStart="+midiin.fltSysRTStart+" ");
                  fltConfig.append("fltSysRTContinue="+midiin.fltSysRTContinue+" ");
                  fltConfig.append("fltSysRTStop="+midiin.fltSysRTStop+" ");
                  fltConfig.append("fltSysRTActiveSensing="+midiin.fltSysRTActiveSensing+" ");
                  fltConfig.append("fltSysRTSystemReset="+midiin.fltSysRTSystemReset+" ");
                  fltConfig.append("fltRpnSelect="+midiin.fltRpnSelect+" ");
                  fltConfig.append("fltNrpnSelect="+midiin.fltNrpnSelect+" ");
                  fltConfig.append("fltRpn="+midiin.fltRpn+" ");
                  fltConfig.append("fltNrpn="+midiin.fltNrpn+" ");

                  fltConfig.append("]\n");

                  return;
               }
            }
         }

      }

      // Preserve device config (device currently unavailable)
      if(STConfig.midi_in_filter.exists(e.name))
      {
         HashTable cfg <= STConfig.midi_in_filter.get(e.name);

         // toString?

         fltConfig.append("         \""+e.name+"\"");
         fltConfig.append(" = #[ ");
         String *key;
         foreach key in cfg
         {
            if(!key.isBlank())
            {
               fltConfig.append(key);
               fltConfig.append("=\"");
               fltConfig.append(cfg.get(key));
               fltConfig.append("\" ");
            }
         }
         fltConfig.append("]\n");
      }
   }

   // <method.png>
   static protected AddMIDIDeviceConfig() {
      AddSection("MIDIDeviceConfig");

      PointerArray *devs;
      ManageMIDIDevicesEntry *e;
      String fltConfig = "      midi_in_filter = #[\n";

      // Input devices
      devs <= root_form.pg_mididevs.tm_indevs.devs;
      buf.append("      midi_in_devicenames = [ ");
      foreach e in devs
      {
         if(e.b_open)
         {
            if(!e.b_joystick)
            {
               buf.append("\""+e.name+"\",\n                              ");
            }
         }

         AddMIDIFilterConfig(e, fltConfig);
      }

      buf.append("\"\"\n");
      buf.append("                            ];\n");

      buf.append("      midi_in_master_name = \""+STConfig.midi_in_master_name+"\";\n");

      fltConfig.append("      ];\n");

      buf.append(fltConfig);


      // Output devices
      devs <= root_form.pg_mididevs.tm_outdevs.devs;
      buf.append("\n      midi_out_devicenames = [ ");
      foreach e in devs
      {
         if(e.b_open && !e.b_virtual)
         {
            buf.append("\""+e.name+"\",\n                               ");
         }
      }

      buf.append("\"\"\n");
      buf.append("                             ];\n");
   }

   // <method.png>
   static AddMIDIInDeviceAliases() {
      AddSection("MIDIInDeviceAliases");

      String s <= STConfig.midi_in_device_aliases.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_in_device_aliases = ");
      buf.append(s);
      buf.append(";\n");
   }

   // <method.png>
   static AddMIDIOutDeviceAliases() {
      AddSection("MIDIOutDeviceAliases");

      String s <= STConfig.midi_out_device_aliases.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_out_device_aliases = ");
      buf.append(s);
      buf.append(";\n");
   }

   // <method.png>
   static AddMIDIDeviceEchos() {
      AddSection("MIDIDeviceEchos");

      String s <= STConfig.midi_device_echos.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_device_echos = ");
      buf.append(s);
      buf.append(";\n");
   }

   // <method.png>
   static AddMIDIDeviceClocks() {
      AddSection("MIDIDeviceClocks");

      String s <= STConfig.midi_device_clocks.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_device_clocks = ");
      buf.append(s);
      buf.append(";\n");
   }

   // <method.png>
   static AddMIDIDeviceGlobals() {
      AddSection("MIDIDeviceGlobals");

      String s <= STConfig.midi_device_globals.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_device_globals = ");
      buf.append(s);
      buf.append(";\n");
   }

   // <method.png>
   static AddMIDIDeviceMMCRec() {
      AddSection("MIDIDeviceMMCRec");

      String s <= STConfig.midi_device_mmcrec.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_device_mmcrec = ");
      buf.append(s);
      buf.append(";\n");
   }

   // <method.png>
   static AddMIDIDeviceMMCPlay() {
      AddSection("MIDIDeviceMMCPlay");

      String s <= STConfig.midi_device_mmcplay.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_device_mmcplay = ");
      buf.append(s);
      buf.append(";\n");
   }

   // <method.png>
   static AddMIDIDeviceMTC() {
      AddSection("MIDIDeviceMTC");

      String s <= STConfig.midi_device_mtc.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_device_mtc = ");
      buf.append(s);
      buf.append(";\n");

      AddBoolean("b_midi_send_mtc", STConfig.b_midi_send_mtc);
      AddFloat("midi_mtc_offset_16th",  STConfig.midi_mtc_offset_16th);
      AddFloat("midi_mtc_prerun_ms",    STConfig.midi_mtc_prerun_ms);
      AddFloat("midi_mtc_seq_align_ms", STConfig.midi_mtc_seq_align_ms);
   }

   // <method.png>
   static AddMIDIDeviceSPP() {
      AddSection("MIDIDeviceSPP");

      String s <= STConfig.midi_device_spp.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_device_spp = ");
      buf.append(s);
      buf.append(";\n");
   }

   // <method.png>
   static AddMIDIDeviceNoteOffModes() {
      AddSection("MIDIDeviceNoteOffModes");

      String s <= STConfig.midi_device_noteoffmodes.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_device_noteoffmodes = ");
      buf.append(s);
      buf.append(";\n");
   }

   // <method.png>
   static AddMIDIDeviceMIDICache() {
      AddSection("MIDIDeviceMIDICache");

      String s <= STConfig.midi_device_midicache.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_device_midicache = ");
      buf.append(s);
      buf.append(";\n");
   }

   // <method.png>
   static AddMIDIDeviceProfileIds() {
      AddSection("MIDIDeviceProfileIds");

      String s <= STConfig.midi_device_profile_ids.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_device_profile_ids = ");
      buf.append(s);
      buf.append(";\n");
   }

   // <method.png>
   static AddMIDIDeviceInOutMapping() {
      AddSection("MIDIDeviceInOutMapping");

      String s <= STConfig.midi_in_out_device_mapping.reparsableString;
      s.replace("],", "],\n         ");
      buf.append("      midi_in_out_device_mapping = ");
      buf.append(s);
      buf.append(";\n");
   }

   // <method.png>
   static AddPush() {
      AddSection("Push");

      AddRawString("push_mode",
                   "Push."+TKS.scriptClassConstantToString(#(STConfig.push_mode), PushDefs, "MODE_")
                   );
      AddInt("push_kbd_base_oct", STConfig.push_kbd_base_oct);
      AddInt("push_kbd_row_add",  STConfig.push_kbd_row_add);
      AddInt("push_kbd_key",      STConfig.push_kbd_key);
      AddRawString("push_kbd_mode",
                   "Scale."+TKS.scriptClassConstantToString(#(STConfig.push_kbd_mode), Scale, "MODE_")
                   );
      AddInt("push_kbd_shift_x",  STConfig.push_kbd_shift_x);
      AddRawString("push_kbd_split_mode",
                   "PushKbd."+TKS.scriptClassConstantToString(#(STConfig.push_kbd_split_mode), PushKbd, "SPLIT_")
                   );
   }

   // <method.png>
   static AddFaderPort() {
      AddSection("FaderPort");

      AddBoolean("b_faderport", STConfig.b_faderport);
      AddInt("faderport_model", STConfig.faderport_model);
      AddInt("faderport_detailedit_div", STConfig.faderport_detailedit_div);
   }

   // <method.png>
   static AddMIDIFighterTwister() {
      AddSection("MIDIFighter Twister");

      AddBoolean("b_mf_twister", STConfig.b_mf_twister);
   }

   // <method.png>
   static AddConsole1() {
      AddSection("Console-1");

      AddBoolean("b_console1", STConfig.b_console1);
   }

   // <method_get.png>
   static public GetLocalConfigPathName() : String {

      local String s <= TKS.homeDir + "/synergy_config_local.tks";
      if(Utils.CanFileBeRead(s))
         return deref s;

      // Fall back to program directory
      return program_directory + "/synergy_config_local.tks";
   }

   // <save.png>
   static Save() : boolean {
      if(!Save2())
      {
         Global.Error("Failed to save configuration");
      }
   }

   static private Save2() : boolean {

      local String fileBuf;

      buf.empty();
      buf.append(START_TAG+"\n");

      local String cfgPathname <= GetLocalConfigPathName();
      trace "[...] ConfigIO::save: cfgPathname=\""+cfgPathname+"\"";

      if(!fileBuf.loadLocal(cfgPathname, true))
      {
         trace "[---] ConfigIO::Save: failed to open \""+cfgPathname+"\". please check installation.";
         return false;
      }

      int idxStart = fileBuf.indexOf(START_TAG, 0);
      if(-1 == idxStart)
      {
         trace "[---] ConfigIO::Save: config start tag not found. please check installation.";
         return false;
      }

      int idxEnd = fileBuf.indexOf(END_TAG, idxStart+((START_TAG).length));
      if(-1 == idxEnd)
      {
         trace "[---] ConfigIO::Save: config end tag not found. please check installation.";
         return false;
      }

      // Build autogenerated configuration statements
      AddRootPath();
      AddKbd();
      AddUI();
      AddProject();
      AddReplay();
      AddPipeMap();
      AddNodeArranger();
      AddNodeTracker();
      AddNodeKeyMap();
      AddNodeTrigSeq();
      AddNodeMonitor();
      AddNodeScript();
      AddNodeAnalogRytm();
      AddNodeSeq();
      AddMetronome();
      AddNewTrackDialog();

      // Replace configuration
      buf.append("      ");
      fileBuf.replaceRegion(idxStart, idxEnd, buf);

      //
      // Build MIDI configuration
      //
      idxStart = fileBuf.indexOf(START_MIDI_TAG, 0);
      if(-1 == idxStart)
      {
         trace "[---] ConfigIO::Save: config MIDI start tag not found. please check installation.";
         return false;
      }

      idxEnd = fileBuf.indexOf(END_MIDI_TAG, idxStart+((START_MIDI_TAG).length));
      if(-1 == idxEnd)
      {
         trace "[---] ConfigIO::Save: config MIDI end tag not found. please check installation.";
         return false;
      }

      buf.empty();
      buf.append(START_MIDI_TAG+"\n");

      AddMIDIMisc();
      AddMIDIDeviceConfig();
      AddMIDIInDeviceAliases();
      AddMIDIOutDeviceAliases();
      AddMIDIDeviceEchos();
      AddMIDIDeviceClocks();
      AddMIDIDeviceGlobals();
      AddMIDIDeviceMMCRec();
      AddMIDIDeviceMMCPlay();
      AddMIDIDeviceMTC();
      AddMIDIDeviceSPP();
      AddMIDIDeviceNoteOffModes();
      AddMIDIDeviceMIDICache();
      AddMIDIDeviceProfileIds();
      AddMIDIDeviceInOutMapping();
      AddPush();
      AddFaderPort();
      AddMIDIFighterTwister();
      AddConsole1();

      buf.append("      ");

      // Replace MIDI configuration
      fileBuf.replaceRegion(idxStart, idxEnd, buf);

      // Save configuration file
      fileBuf.saveLocal(cfgPathname);
      Global.Success("Local Configuration saved to \""+cfgPathname+"\"");

      return true;
   }

}
