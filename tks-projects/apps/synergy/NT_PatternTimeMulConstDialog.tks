// ----
// ---- file   : NT_PatternTimeMulConstDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2012-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- created: 24Jan2012
// ---- changed: 23Jan2015, 09Feb2017, 30Nov2018, 03Dec2018, 04Oct2023, 30Oct2023
// ----
// ----
// ----

module MNT_PatternTimeMulConstDialog;

use namespace ui;
use namespace st2;


// <class.png>
class NT_PatternTimeMulConstDialog extends Dialog {

   protected NodeTrackerEditor *editor;

   protected XMLForm *xfm;

   protected FloatParam *fp_const;
   protected CheckBox   *cb_alltracks;
   protected Button     *bt_ok;
   protected Button     *bt_cancel;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("NT_PatternTimeMulConstDialog.xfm");
      if(null == xfm)
      {
         return false;
      }

      xfm.autoResolveIds(this);

      initWindow(xfm,
                 "Multiply pattern delta times",
                 100, 100,
                 640, 240
                 );

      resizeToMinimum();

      return true;
   }

   public virtual isPopup() : boolean {
      return true;
   }

   public virtual isModal():boolean {
      return true;
   }

   public virtual isResizable() : boolean {
      return false;
   }

   // <ui_show.png>
   public method run(NodeTrackerEditor _editor) {
      editor <= _editor;

      showCentered();
   }

   // <ui_show.png>
   public virtual postShow() {
      Dialog::postShow();

      UI.SetKeyboardFocus(fp_const);
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      if(VKEY_ESCAPE == _k.code)
      {
         hide();
         return true;
      }

      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {

      switch(@(_action.getActionProvider()))
      {
         case @(bt_ok):
            editor.cmd_events_timemulconst(fp_const.getFloatValue(), cb_alltracks.isSelected());
            hide();
            return true;

         case @(bt_cancel):
            hide();
            return true;

         case @(cb_alltracks):
            return true;

         case @(fp_const):
            if(FloatParam.ACTION_VALUECHANGED == _action.getActionName())
            {
               UI.SetKeyboardFocus(bt_ok);
            }
            return true;
      }

      return Dialog::consumeAction(_action);
   }
}
