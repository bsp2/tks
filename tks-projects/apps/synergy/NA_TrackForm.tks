// ----
// ---- file   : NA_TrackForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2017-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 11Apr2017
// ---- changed: 12Apr2017, 13Apr2017, 14Apr2017, 15Apr2017, 16Apr2017, 17Apr2017, 19Apr2017
// ----          20Apr2017, 25Apr2017, 27Apr2017, 30Apr2017, 26May2017, 14Jul2017, 15Jul2017
// ----          10Aug2017, 12Aug2017, 19Aug2017, 20Aug2017, 12Oct2017, 13Oct2017, 02Jan2018
// ----          03Jan2018, 04Jan2018, 05Jan2018, 06Jan2018, 05Apr2018, 22Jun2018, 17Nov2018
// ----          18Nov2018, 19Nov2018, 24Nov2018, 25Nov2018, 27Nov2018, 28Nov2018, 31May2019
// ----          19Aug2019, 21Sep2019, 22Sep2019, 31Oct2019, 01Nov2019, 09Nov2019, 26Apr2020
// ----          13May2021, 22May2021, 27May2021, 24Jul2021, 12Feb2022, 13Feb2022, 18Mar2022
// ----          11Aug2022, 12Aug2022, 11Feb2023, 15Mar2023, 21Sep2023, 03Oct2023, 05Oct2023
// ----          08Oct2023, 19Oct2023, 21Oct2023, 29Oct2023, 11Nov2023, 16Nov2023, 17Nov2023
// ----          02Feb2024, 03Feb2024, 22Mar2024, 24Mar2024, 02Oct2024, 26Jan2025
// ----
// ----
// ----

module MNA_TrackForm;

use namespace ui;
use namespace st2;


// <class.png>
class NA_TrackForm : XMLForm {

   define int TRACK_SX = 226;
   define int DEFAULT_TRACK_SY = 23;

   NA_TimelineForm *parent_timeline;
   Node *parent_node; // never null

   TextField *tf_name;
   Label *lb_type;
   Button *bt_mute;
   Button *bt_solo;
   Button *bt_lock;


   // <init.png>
   public method init(NA_TimelineForm _parentTimeline, Node _sci, boolean _bAvail) : boolean {
      parent_timeline <= _parentTimeline;
      parent_node <= _sci;

      if(initPakFile("NA_TrackForm.xfm"))
      {
         if(autoResolveIds(this))
         {
            setRequiredSizeX(GetTrackSX());
            setRequiredSizeY(parent_timeline.data.getCurrentTrackSYScaled());

            if(_bAvail)
               lb_type.setBackgroundTint(0);
            else
               lb_type.setBackgroundTint(app_lnf.getColor(AppLookAndFeel.COLOR_ARRANGER_TIMELINE_UNAVAIL_TRACK_TINT));

            postInitTrackForm();

            return true;
         }
      }

      return false;
   }

   // <method.png>
   protected method postInitTrackForm() {
   }

   // <method_get.png>
   public static GetTrackSX() : int {
      if(UI.font_scaling == 2.0)
         return TRACK_SX * 1.98;
      return TRACK_SX * UI.font_scaling;
   }

   // <method_get.png>
   public method isAudio() : boolean {
      return false;
   }

   // <method_get.png>
   public method getNodeGID() : int {
      return parent_node.getNodeGID();
   }

   // <ui_kbd.png>
   public method refocusDefault() {
      parent_timeline.refocusDefault();
   }

   // <ui_update.png>
   public method updateNameTypeAndToolTip(boolean _bUniqueAutoDevCh, String _sharedAutoNodeNames) {
      // Called during updateTrackForms()

      String ttCaption = "  Pipe: \""+parent_node.nodeGetPipeName()+"\"\n  Node: \""+parent_node.nodeGetName()+"\"\n  Type: "+parent_node.nodeGetTypeName()+"\n   GID: "+parent_node.getNodeGID()+"\n\nAuto A: "+parent_node.nodeGetAutoStringA()+"\nAuto B: "+parent_node.nodeGetAutoStringB();

      if(!_bUniqueAutoDevCh)
      {
         ttCaption.append("\n\nWarning: auto dev+ch is not unique!\n  Shared with:\n");
         ttCaption.append(_sharedAutoNodeNames);
      }


      tf_name.setText(parent_node.nodeGetName());
      tf_name.setToolTipCaption(ttCaption);
      tf_name.setToolTipFontOverride(UI.GetFontByName(UIConstants.DEFAULT_FONT_NAME_FIXED));

      lb_type.setCaption(parent_node.nodeGetTypeName());
      lb_type.setToolTipCaption(ttCaption);
      lb_type.setToolTipFontOverride(UI.GetFontByName(UIConstants.DEFAULT_FONT_NAME_FIXED));

      if(!_bUniqueAutoDevCh)
         lb_type.setBackgroundTint(app_lnf.getColor(AppLookAndFeel.COLOR_ARRANGER_TIMELINE_AUTODEV_NOT_UNIQUE_LABEL_TINT));
   }

   // <ui_update.png>
   public method updateMuteSoloLockState(NA_Track _track) {
      bt_mute.setToggleState(_track.b_mute);
      bt_solo.setToggleState(_track.b_solo);
      bt_lock.setToggleState(_track.b_lock);

      if(_track.b_mute)
      {
         bt_mute.setBackgroundTint(app_lnf.getColor(AppLookAndFeel.COLOR_ARRANGER_TIMELINE_TRACK_MUTE_TINT));
         bt_mute.setEditable(true);
         bt_solo.setBackgroundTint(app_lnf.getColor(AppLookAndFeel.COLOR_ARRANGER_TIMELINE_TRACK_SOLO_DEF_TINT));
      }
      else if(_track.b_solo)
      {
         bt_mute.setBackgroundTint(app_lnf.getColor(AppLookAndFeel.COLOR_ARRANGER_TIMELINE_TRACK_MUTE_SOLO_TINT));
         bt_solo.setBackgroundTint(app_lnf.getColor(AppLookAndFeel.COLOR_ARRANGER_TIMELINE_TRACK_SOLO_TINT));
         bt_mute.setEditable(false);
      }
      else
      {
         bt_mute.setBackgroundTint(app_lnf.getColor(AppLookAndFeel.COLOR_ARRANGER_TIMELINE_TRACK_MUTE_DEF_TINT));
         bt_mute.setEditable(true);
         bt_solo.setBackgroundTint(app_lnf.getColor(AppLookAndFeel.COLOR_ARRANGER_TIMELINE_TRACK_SOLO_DEF_TINT));
      }

      if(_track.b_lock)
         bt_lock.setBackgroundTint(app_lnf.getColor(AppLookAndFeel.COLOR_ARRANGER_TIMELINE_TRACK_LOCK_TINT));
      else
         bt_lock.setBackgroundTint(app_lnf.getColor(AppLookAndFeel.COLOR_ARRANGER_TIMELINE_TRACK_LOCK_DEF_TINT));
   }

   // <ui_handle.png>
   protected method handleNameChanged() {
      parent_node.nodeSetName(tf_name.getText());

      Global.Print("Node name is \""+parent_node.nodeGetName()+"\"");
   }

   // <ui_handle.png>
   protected method handleMuteChanged() {

      NA_State tstate <= parent_timeline.tstate;
      NA_Track track <= tstate.findTrackByGID(getNodeGID());

      if(null != track)
      {
         parent_timeline.data.toggleTrackMute(track);
         // // track.setEnableMute(bt_mute.getToggleState());

         // // parent_timeline.updateMuteSoloLockStates();

         Global.Print("Track is "+(track.b_mute ? "muted" : "unmuted"));
      }
   }

   // <ui_handle.png>
   protected method handleSoloChanged() {

      NA_State tstate <= parent_timeline.tstate;
      NA_Track track <= tstate.findTrackByGID(getNodeGID());

      if(null != track)
      {
         parent_timeline.data.toggleTrackSolo(track);
         // // track.setEnableMute(false);
         // // track.setEnableSolo(bt_solo.getToggleState());

         // // parent_timeline.updateMuteSoloLockStates();

         Global.Print("Track solo is "+Utils.GetEnableString(track.b_solo));
      }
   }

   // <ui_handle.png>
   protected method handleLockChanged() {

      NA_State tstate <= parent_timeline.tstate;
      NA_Track track <= tstate.findTrackByGID(getNodeGID());

      if(null != track)
      {
         track.setEnableLock(bt_lock.getToggleState());

         if(track.b_lock)
            bt_lock.setBackgroundTint(#80ffff00);
         else
            bt_lock.setBackgroundTint(0);

         Global.Print("Track lock is "+Utils.GetEnableString(track.b_lock));
      }
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();
      StringAction *sac;

      // trace "[>>>] NA_TrackForm::consumeAction: acName="+acName+" ap="+#(ap);

      switch(@(ap))
      {
         case @(tf_name):
            handleNameChanged();
            if(TextField.ACTION_TEXTENTERED == acName)
               refocusDefault();
            return true;

         case @(bt_mute):
            handleMuteChanged();
            return true;

         case @(bt_solo):
            handleSoloChanged();
            return true;

         case @(bt_lock):
            handleLockChanged();
            return true;
      }

      return XMLForm::consumeAction(_action);
   }
}
