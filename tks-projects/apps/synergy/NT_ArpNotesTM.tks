// ----
// ---- file   : NT_ArpNotesTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2015-2017 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 27Feb2015, 22Sep2017
// ----
// ----
// ----

module MNT_ArpNotesTM;

use namespace ui;
use namespace st2;


class NT_ArpNotesTM : TableModel {

   define int COL_NOTENR      = 0;
   define int COL_NOTE        = 1;

   NodeTrackerEditor *parent_editor;
   NodeTracker *parent_node;


   public virtual getNumColumns() : int {
      return 2;
   }

   public virtual getColumnCaption(int _col) : String {
      return ["#", "Note"][_col];
   }

   public virtual getNumRows() : int {
      if(null != parent_node)
      {
         return parent_node.arp_note_table.numElements;
      }
      else
      {
         return 0;
      }
   }

   public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
      Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);
      lb.setFontByName("big7");
      return lb;
   }

   public virtual getCellCaption(int _col, _row) : String {
      if(null != parent_node)
      {
         switch(_col)
         {
            case COL_NOTENR:
               return String(_row + 1);

            case COL_NOTE:
               return MIDI.base_note_names.get(parent_node.arp_note_table.get(_row) % 12);
         }
      }
   }

   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_NOTENR:
            return 60;

         case COL_NOTE:
            return 100;
      }
   }

   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_NOTENR:
            return 60;

         case COL_NOTE:
            return 800;
      }
   }

   public virtual handleCellOnMouse(int _col, int _row, MouseEvent _ev) : boolean {
      if(null != parent_node)
      {
         if(COL_NOTE == _col)
         {
            if(_ev.wheelUp() || _ev.leftButtonDown())
            {
               parent_editor.incSelectedArpNote();
               return true;
            }
            if(_ev.wheelDown())
            {
               parent_editor.decSelectedArpNote();
               return true;
            }
         }
      }
      return false;
   }

}
