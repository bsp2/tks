// ----
// ---- file   : NT_Defs.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2006-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: ??Sep2006
// ----
// ---- changed: ?????????, 13Jan2010, 15Jan2010, 17Jan2010, 18Jan2010, 21Feb2010, 23Feb2010
// ----          01Mar2010, 29Apr2010, 15Apr2010, 31Jul2010, 01Aug2010, 21Sep2010, 24Sep2010
// ----          20Oct2010, 23Oct2010, 28Feb2011, 10Mar2011, 26Mar2011, 02Apr2011, 05Jan2012
// ----          07Jan2012, 08Jan2012, 31Jan2012, 05Feb2012, 26Jun2012, 03Nov2012, 22Dec2012
// ----          05Jan2013, 25Mar2013, 09May2013, 10May2013, 11May2013, 12May2013, 17Jun2013
// ----          10Jan2015, 11Jan2015, 12Jan2015, 17Jan2015, 28Jan2015, 06Feb2015, 08Feb2015
// ----          09Feb2015, 11Feb2015, 15Feb2015, 22Feb2015, 28Feb2015, 08Mar2015, 19Apr2015
// ----          26Apr2015, 27Apr2015, 29Apr2015, 29Apr2015, 02Jul2015, 28Jul2015, 04Dec2015
// ----          21Dec2015, 29Jan2016, 19May2016, 12Sep2016, 02Oct2016, 20Jan2017, 04Feb2017
// ----          05Mar2017, 06Jun2017, 01Jul2017, 04Oct2017, 04Jan2018, 03Mar2018, 07Mar2018
// ----          01Jun2018, 12Jan2019, 25Jun2019, 02Aug2019, 22Sep2019, 24Oct2019, 06Mar2020
// ----          25Apr2020, 28Apr2020, 01Sep2020, 24Sep2020, 31Jan2021, 04Jan2022, 16Apr2022
// ----          28Feb2025
// ----
// ----
// ----

module MNT_Defs;

use namespace ui;
use namespace st2;

class NT_Defs {
   define float INVALID_VALUE = -999999.0f;

   // Fixed controllers:
   define int CTL_NOTE1      =  0; // MIDI base note select , >0=note on, <0=note off  (SHRESET)
   define int CTL_NOTE2      =  1; // 2nd MIDI note select , >0=note on, <0=note off  (SHRESET)
   define int CTL_NOTE3      =  2; // 3rd MIDI note select , >0=note on, <0=note off  (SHRESET)
   define int CTL_NOTE4      =  3; // 4th MIDI note select , >0=note on, <0=note off  (SHRESET)
   define int CTL_NOTE5      =  4; // 5th MIDI note select , >0=note on, <0=note off  (SHRESET)
   define int CTL_VEL1       =  5; // Note-on/off velocity (0..127)  (SH)
   define int CTL_VEL2       =  6; // Note2 velocity (0..127)  (SH)
   define int CTL_VEL3       =  7; // Note3 velocity (0..127)  (SH)
   define int CTL_VEL4       =  8; // Note4 velocity (0..127)  (SH)
   define int CTL_VEL5       =  9; // Note5 velocity (0..127)  (SH)
   define int CTL_DUR1       = 10; // Note1 duration (ticks) value 0=manual note off  (SH)
   define int CTL_DUR2       = 11; // Note2 duration (ticks) value 0=manual note off  (SH)
   define int CTL_DUR3       = 12; // Note2 duration (ticks) value 0=manual note off  (SH)
   define int CTL_DUR4       = 13; // Note2 duration (ticks) value 0=manual note off  (SH)
   define int CTL_DUR5       = 14; // Note2 duration (ticks) value 0=manual note off  (SH)
   define int CTL_POLYAT1    = 15; // Note1 polyphonic aftertouch (e.g. P08)
   define int CTL_POLYAT2    = 16; // Note2 polyphonic aftertouch
   define int CTL_POLYAT3    = 17; // Note3 polyphonic aftertouch
   define int CTL_POLYAT4    = 18; // Note4 polyphonic aftertouch
   define int CTL_POLYAT5    = 19; // Note5 polyphonic aftertouch
   define int CTL_INSTR      = 20; // Instrument select (0..61 => 0..9, A-Z, a..z)  (SHRESET)
   define int CTL_PC         = 21; // Program change
   define int CTL_AT         = 22; // Channel after touch
   define int CTL_PB         = 23; // Pitch bend modulation (0..64.0..127.0)  (SHRESET*)
   define int CTL_SLIDE      = 24; // Note slide (0=off, 1..255)  (SHRESET*)
   define int CTL_DELAY      = 25; // Track delay (#ticks)  (SHRESET)
   define int CTL_RETRIG     = 26; // Note retrig ($xy: x=tick delta y=#repeats)  (SHRESET)
   define int CTL_BPM        = 27; // Beats Per Minute, 32..255  (SHRESET*)
   define int CTL_MUTE       = 28; // Mute (0=play, >0=mute)
   define int CTL_SEEK       = 29; // Seek to step (multiply arg by offlen ticks (jam_tick_multiplier)
   define int CTL_BPM_MUL    = 30; // Beats Per Minute Multiplier (0..256 => */2..*2, 0x80=*1)
   define int CTL_GROOVE     = 31; // Pipe delay (ticks)
   define int CTL_USR        = 32; // First user defined controller  (SHRESET*)
   define int CTL_NUM        = 48;
   define int CTL_NUMUSR = (CTL_NUM - CTL_USR);

   define int NUM_NOTESLOTS = 5; // CTL_NOTE1..CTL_NOTE5

   // 3 chars
   static StringArray ctl_short_names = ["n1", "n2", "n3", "n4", "n5",
                                         "v1", "v2", "v3", "v4", "v5",
                                         "d1", "d2", "d3", "d4", "d5",
                                         "p1", "p2", "p3", "p4", "p5",
                                         "ins", "pc", "at", "pb", "sli",
                                         "dly", "rtg", "bpm", "mut", "sek", "bml",
                                         "gro",
                                         "u1", "u2",  "u3",  "u4",  "u5",  "u6",  "u7",  "u8",
                                         "u9", "u10", "u11", "u12", "u13", "u14", "u15", "u16",
                                         ];
}
