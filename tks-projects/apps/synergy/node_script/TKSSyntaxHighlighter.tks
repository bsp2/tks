// ----
// ---- file   : TKSSyntaxHighlighter.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2024-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 14Dec2024
// ---- changed: 15Dec2024, 18Dec2024, 22Dec2024, 11Jan2025, 13Jan2025, 15Jan2025, 31Jan2025
// ----          07Feb2025, 09Feb2025, 29Mar2025
// ----
// ----
// ----

module MTKSSyntaxHighlighter;

use namespace ui;
use namespace st2;


// <class.png>
class TKSSyntaxHighlighter : TextViewSyntaxHighlighter {
 
   define int PAL_NONE       =  0;
   define int PAL_OTHER      =  1;   // "'
   define int PAL_TEXT       =  2;
   define int PAL_STRING     =  3;   // "" (quot.flag)
   define int PAL_COMMENT    =  4;   // //removed
   define int PAL_COMMENT2   =  5;   // // spaced comment
   define int PAL_KEYWORD_1  =  6;   // in,out,param,.. 007b50 008858 008f5c 005040
   define int PAL_KEYWORD_1B =  7;   // in,out,param,.. 007b50 008858 008f5c 005040
   define int PAL_KEYWORD_2  =  8;   // #if,#else,..
   define int PAL_KEYWORD_3  =  9;   // sin,cos,abs,..  487eb9 0000ff 739256 6baa31
   define int PAL_KEYWORD_4  = 10;   // +,-,*,/,..
   define int PAL_ASSIGN     = 11;
   define int PAL_KEYWORD_5  = 12;   // <,>,! (after module name / keyword_3)
   define int PAL_VAR        = 13;   // $(MY_PARAM)  b47134 d1833c
   define int PAL_CONTROL    = 14;   // control flow (if,else,switch,while,do,break,continue,..) 7e4b78 9c5e95 b71ea4
   define int PAL_KEY        = 15;   // key=<value>
   define int PAL_FIELD      = 16;   // myarrayparam.myfield
   define int PAL_CLASS      = 17;   // String,Object,Array,..

   static IntArray pal_light = [
      0,          // PAL_NONE
      #ff747474,  // PAL_OTHER
      #ff444444,  // PAL_TEXT
      #ff777777,  // PAL_STRING
      #ffcdcdcd,  // PAL_COMMENT
      #ffa6a6a6,  // PAL_COMMENT2
      #ffd03f3f,  // PAL_KEYWORD_1  in/out/class/method
      #ff007049,  // PAL_KEYWORD_1B vec2
      #ff999999,  // PAL_KEYWORD_2
      #ff3e6da0,  // PAL_KEYWORD_3
      #ff000090,  // PAL_KEYWORD_4
      #ffb13f3f,  // PAL_ASSIGN
      #ffb13f3f,  // PAL_KEYWORD_5 (==PAL_ASSIGN)
      #ffb46924,  // PAL_VAR
      #ff7e3e76,  // PAL_CONTROL
      #ff3b3d3b,  // PAL_KEY
      #ff334375,  // PAL_FIELD
      #ff4f8444,  // PAL_CLASS
                                ];

   static IntArray pal_dark = [
      0,          // PAL_NONE
      #ff747474,  // PAL_OTHER
      #ffc2c2c2,  // PAL_TEXT
      #ff929292,  // PAL_STRING
      #ff6d6d59,  // PAL_COMMENT
      #ffbbbb99,  // PAL_COMMENT2
      #fff4ffff,  // PAL_KEYWORD_1  in/out/class/method
      #ffbbffff,  // PAL_KEYWORD_1B vec2
      #ff686850,  // PAL_KEYWORD_2  #if
      #ffd0bbbb,  // PAL_KEYWORD_3  texture2D
      #ffffaa99,  // PAL_KEYWORD_4
      #ffffaa99,  // PAL_ASSIGN
      #ffb1dfff,  // PAL_KEYWORD_5 (==PAL_ASSIGN)
      #fff4f4bb,  // PAL_VAR
      #ff99cccc,  // PAL_CONTROL
      #ffbbddbb,  // PAL_KEY
      #ffc29ca3,  // PAL_FIELD
      #ffffa398,  // PAL_CLASS
                                ];

   static StringArray a_keywords_1 = [
      "in",
      "out",
      "param",

      "use",
      "module",
      "namespace",

      "function", "class", "method", 
                                      ];

   // static StringArray a_keywords_1b = [

   //                                    ];

   static StringArray a_keywords_2 = [
      ";",
                                      ];

   static StringArray a_keywords_3 = [

      "trace",
      "dtrace",
      "stdout",
      "stderr",
      "print",

      "sin",
      "cos",
      "tan",
      "tanh",
      "asin",
      "acos",
      "sqrt",
      "rad",
      "deg",
      "abs",
      "frag",
      "tcint",
      "tcfloat",
      "tcstr",
      "tcobject",
      "tcpointer",
      "round",
      "floor",
      "ceil",
      "sign",
      "rnd",
      "2n",
      "tcchr",
      "typeid",
      "typename",
      "log",
      "log2",
      "exp",

      "exit",
      "getenv",
      "putenv",
      "_Debug",
      "_DebugLoop",
      "_DebugOC",
      "mathPowerf",
      "pow",
      "mathMaxf",
      "mathMinf",
      "mathAbsMaxf",
      "mathAbsMinf",
      "mathPoweri",
      "mathMaxi",
      "mathMini",
      "mathAbsMaxi",
      "mathAbsMini",
      "mathClampf",
      "mathClampi",
      "mathWrapf",
      "mathWrapi",
      "mathFoldf",
      "mathFoldi",
      "mathLerpf",
      "mathSerpf",
      "mathCerpf",
      "mathLerpCyclicf",
      "mathNextCyclicf",
      "mathSmoothStepf",
      "mathSmoothStepNf",
      "mathDistancePointPlane2d",
      "mathGCD",
      "mathLogLinExpf",
      "mathAtan2f",
      "mathLogf",
      "floor",
      "ceil",
      "system",
      "psystem",
      "lcchar",
      "ucchar",
      "srand",
      "milliSeconds",
      "milliSecondsDouble",
      "GetCurrentThread",
                                      ];

   static StringArray a_keywords_4 = [
      "+", "-", "*",
      "+=", "-=", "*=", "/=",
      "&", "|", "^",
      "%", "/",
      "&&", "||", "^^", "!&", "!|", "!^",
      ".",
      "instanceof", "deref", "extends",
                                      ];

   static StringArray a_keywords_5 = [
      "<", ">", "!",
                                      ];

   static StringArray a_keywords_control = [
      "if", "else", "switch", "for", "do", "while", "loop", "foreach",
      "break", //"continue",
      "virtual", ///"override",
      "private", "protected", "public", "static",
      "{", "}",
                                         ];

   static StringArray a_keywords_class = [
      "Boolean",
      "Byte",
      "UnsignedByte",
      "Short",
      "UnsignedShort",
      "Long",
      "UnsignedLong",
      "Integer",
      "UnsignedInteger",
      "Float",
      "Double",
      "Vector2f",
      "Vector3f",
      "Vector4f",
      "Matrix2f",
      "Matrix2x3f",
      "Matrix3f",
      "Matrix4f",

      "Object",
      "IntArray",
      "IntArray8",
      "IntArray16",
      "IntArray32",
      "IntArray64",
      "IntArray128",
      "ObjectArray",
      "FloatArray",
      "FloatArray8",
      "FloatArray16",
      "FloatArray32",
      "FloatArray64",
      "FloatArray128",
      "StringArray",
      "ClassArray",
      "PointerArray",
      "Buffer",
      "SharedBuffer",
      "Class",
      "Envelope",
      "File",
      "StdOutStream",
      "StdInStream",
      "StdErrStream",
      "PakFile",
      "String",
      "String8",
      "String16",
      "String32",
      "String64",
      "String128",
      "StringIterator",
      "Event",
      "Mailbox",
      "HashTable",
      "Pool",
      "Stack",
      "TreeNode",
      "Thread",
      "Mutex",
      "Process",
      "Time",
      "Value",
      "Variable",
      "Function",
      "Script",
      "ListNode",
      "List",
      "ValueArray",
      "Exception",
      "DummyStream",
      "LFSR",
      "LFSR_NR",

      // tksdl:
      "SDL",
      "Mouse",
      "Key",
      "Joystick",
      "Viewport",
      "Cursor",
      "FPS",
      "AudioDevice",
      "AudioSample",
      "SamplePlayer",

      // tkopengl:
      "Texture",
      "DisplayList",
      "ZGLShader",

      // tkmath:
      "relCmpf",
      "relCmpd",
      "relErrCmpf",
      "relErrCmpd",
      "sinf",
      "cosf",
      "tanf",
      "asinf",
      "acosf",
      "atanf",
      "atan2f",
      "hypotf",
      "sinhf",
      "coshf",
      "tanhf",
      "asinhf",
      "acoshf",
      "atanhf",
      "absf",
      "ceilf",
      "roundf",
      "floorf",
      "modf",
      "sqrtf",
      "powf",
      "expf",
      "exp2f",
      "exp10f",
      "logf",
      "log2f",
      "log10f",
      "sind",
      "cosd",
      "tand",
      "asind",
      "acosd",
      "atand",
      "atan2d",
      "hypotd",
      "sinhd",
      "coshd",
      "tanhd",
      "asinhd",
      "acoshd",
      "atanhd",
      "absd",
      "ceild",
      "roundd",
      "floord",
      "modd",
      "sqrtd",
      "powd",
      "expd",
      "exp2d",
      "exp10d",
      "logd",
      "log2d",
      "log10d",
      "f16_from_f32",
      "f32_from_f16",
      "fx16_from_f16",
      "sqrtcd_YAC_RVAL",
      "powcd_YAC_RVAL",
      "powncd_YAC_RVAL",
      "expcd_YAC_RVAL",
      "logcd_YAC_RVAL",
      "logncd_YAC_RVAL",
      "sincd_YAC_RVAL",
      "coscd_YAC_RVAL",
      "tancd_YAC_RVAL",
      "asincd_YAC_RVAL",
      "acoscd_YAC_RVAL",
      "atancd_YAC_RVAL",
      "sinhcd_YAC_RVAL",
      "coshcd_YAC_RVAL",
      "tanhcd_YAC_RVAL",
      "asinhcd_YAC_RVAL",
      "acoshcd_YAC_RVAL",
      "atanhcd_YAC_RVAL",
      "sqrtcd_YAC_RARG",
      "powcd_YAC_RARG",
      "powncd_YAC_RARG",
      "expcd_YAC_RARG",
      "logcd_YAC_RARG",
      "logncd_YAC_RARG",
      "sincd_YAC_RARG", 
      "coscd_YAC_RARG", 
      "tancd_YAC_RARG", 
      "asincd_YAC_RARG",
      "acoscd_YAC_RARG",
      "atancd_YAC_RARG",
      "sinhcd_YAC_RARG",
      "coshcd_YAC_RARG",
      "tanhcd_YAC_RARG",
      "asinhcd_YAC_RARG",
      "acoshcd_YAC_RARG",
      "atanhcd_YAC_RARG",
      "complexd",
      "complexdPolar",
      "sqrtcf_YAC_RVAL",
      "powcf_YAC_RVAL",
      "powncf_YAC_RVAL",
      "expcf_YAC_RVAL",
      "logcf_YAC_RVAL",
      "logncf_YAC_RVAL",
      "sincf_YAC_RVAL",
      "coscf_YAC_RVAL",
      "tancf_YAC_RVAL",
      "asincf_YAC_RVAL",
      "acoscf_YAC_RVAL",
      "atancf_YAC_RVAL",
      "sinhcf_YAC_RVAL",
      "coshcf_YAC_RVAL",
      "tanhcf_YAC_RVAL",
      "asinhcf_YAC_RVAL",
      "acoshcf_YAC_RVAL",
      "atanhcf_YAC_RVAL",
      "sqrtcf_YAC_RARG",
      "powcf_YAC_RARG",
      "powncf_YAC_RARG",
      "expcf_YAC_RARG",
      "logcf_YAC_RARG",
      "logncf_YAC_RARG",
      "sincf_YAC_RARG",
      "coscf_YAC_RARG",
      "tancf_YAC_RARG",
      "asincf_YAC_RARG",
      "acoscf_YAC_RARG",
      "atancf_YAC_RARG",
      "sinhcf_YAC_RARG",
      "coshcf_YAC_RARG",
      "tanhcf_YAC_RARG",
      "asinhcf_YAC_RARG",
      "acoshcf_YAC_RARG",
      "atanhcf_YAC_RARG",
      "complexf",
      "complexfPolar",
      "matrix2d",
      "matrix2f",
      "matrix2x3f",
      "matrix3d",
      "matrix3f",
      "matrix4d",
      "matrix4f",
      "quaterniond",
      "quaternionf",
      "vector2d",
      "vector2f",
      "vector3d",
      "vector3f",
      "vector4d",
      "vector4f",

      // tkui:
      "UI",
      "UIConstants",
      "UIRenderer",
      "LookAndFeel",
      "LookAndFeel_Light",
      "LookAndFeel_Dark",
      "LookAndFeel_Mono",
      "Point2f",
      "Size2f",
      "Geometry4f",
      "Logger",
      "AcceleratorKey",
      "AcceleratorList",
      "Shader",
      "MouseEvent",
      "CmdProvider",
      "FBO",
      "Layer",
      "Spacer",
      "Shape",
      "ShapePolyline",
      "CursorShapes",
      "Composite",
      "Control",
      "Font",
      "FontResource",
      "FT2Face",
      "FT2Glyph",
      "FT2FontCache",
      "Icon",
      "PNGIcon",
      "IconCache",
      "Form",
      "XMLForm",
      "XFMObject",
      "GraphForm",
      "Panel",
      "TitledPanel",
      "HiddenPanel",
      "TransparentPanel",
      "OpaquePanel",
      "ColorBox",
      "Label",
      "Button",
      "ColorButton",
      "RepeatButton",
      "HSVColorPicker",
      "CheckBox",
      "FloatParam",
      "FloatField",
      "TextField",
      "TextFieldIncDec",
      "TableModel",
      "TreeTableModel",
      "TableView",
      "TableViewData",
      "TableViewHeader",
      "TableCellEditor",
      "TableCellEditorCheckBox",
      "TableCellEditorComboBox",
      "TableCellEditorFloatParam",
      "TableCellEditorString",
      "ComboBox",
      "ComboBoxPopup",
      "ComboField",
      "Slider",
      "Scroller",
      "Dial",
      "LayerSwitch",
      "TabSwitch",
      "View",
      "ViewPane",
      "ScrollPane",
      "WindowDock",
      "WindowTitleBar",
      "RadioButton",
      "RadioButtonGroup",
      "PopupMenu",
      "PopupMenuBar",
      "PopupMenuBarButton",
      "PopupMenuButton",
      "PopupMenuCheckButton",
      "PopupMenuFolderButton",
      "PopupMenuSeparator",
      "PopupMenuWindowDock",
      "TextView",
      "TextEdit",
      "Bezier01Edit",
      "BezierEdit",
      "XYPad",
      "SplitPane",
      "DragHandleLabel",
      "KeyboardMonitor",
      "KeyHelpDialog",
      
      "Layout",
      "SizeGroup",
      "SizeGroupX",
      "SizeGroupY",
      "SizeGroupXY",
      "BorderLayout",
      "SuperBorderLayout",
      "GridLayout",
      "FlowLayout",

      "FloatingLayer",
      "Window",
      "Dialog",
      "ChoiceDialog",
      "InfoDialog",
      "FloatParamEditor",
      "FloatParamDialog",
      "TextEditDialog",
      "TextInputDialog",
      "StringDialog",

      "StatusBar",
      "ToolTip",

      "Action",
      "ActionConsumer",
      "ActionListener",
      "IntAction",
      "FloatAction",
      "ObjectAction",
      "ValueAction",
      "StringAction",
      "KeyAction",
      "TimerAction",
      "DynamicPopupMenuAction",

      "CharFilter",
      "CharFilterBinary255Expr",
      "CharFilterFloat",
      "CharFilterFloatExpr",
      "CharFilterHex",
      "CharFilterHexExpr",
      "CharFilterHexShort",
      "CharFilterHexShortExpr",
      "CharFilterUFix16",
                                         ];


   // <method.png>
   // static int dbg_count;
   public virtual colorizeText(TextView _text) {
      int numRows = _text.getNumRows();
      // trace "xxx ["+(dbg_count++)+"] TKSSyntaxHighlighter::colorizeText: numRows="+numRows;

      local IntArray aRanges;
      local StringArray aTok;

      IntArray pal <= UI.IsDarkOrMono() ? pal_dark : pal_light;

      String *sLine;
      IntArray *aColors;
      int rowIdx = 0;
      loop(numRows)
      {
         sLine <= _text.getVisibleRowStringByIndex(rowIdx);
         if(null != sLine)
         {
            sLine.tokenizeWithRanges(" \t=~<>()[]{}*+&|^,;:", aRanges) => aTok;
            aColors <= _text.getVisibleRowColorsByIndex(rowIdx);
            aColors.fill(pal.get(PAL_OTHER));
            // trace "aTok="+#(aTok);
            // trace "aRanges="+#(aRanges);

            int palIdxComment = 0;
            boolean bVar = false;
            boolean bParam = false;
            // boolean bTemplate = false;
            String sTokP <= "";
            String sTokPP <= "";
            boolean bAllowKW12 = true;  // directive
            boolean bAllowKW3 = true;   // mod
            boolean bAllowKW4 = true;   // op
            boolean bAllowKW5 = true;//false;  // rel

            String *sTok;
            int tokOff = 0;
            foreach sTok in aTok
            {
               int startOff = aRanges.get(tokOff + 0);
               int numChars = aRanges.get(tokOff + 1);
               // trace "token["+(tokOff/2)+"] sTok=\""+sTok+"\"  substr=\""+sLine.substring(startOff, numChars)+"\"";
               int palIdx = PAL_TEXT;
               if(sTok <= "//")
               {
                  // // spaced comment ?
                  palIdxComment = (sTok.numChars > 2) ? PAL_COMMENT : PAL_COMMENT2;
               }
               if(palIdxComment)
                  palIdx = palIdxComment;
               else if(bVar)
               {
                  palIdx = PAL_VAR;
                  if(sTok == ")")
                     bVar = false;  // $(MYVAR) end
               }
               else if(bParam && 2*2 == tokOff)
                  palIdx = PAL_VAR;
               else if(sTok <= "$")
               {
                  palIdx = PAL_VAR;  // $(MYVAR) start
                  bVar = true;
               }
               // else if(sTok == "=" && tokOff >= 2)
               // {
               //    int startOffKey = aRanges.get(tokOff - 2);
               //    int numCharsKey = aRanges.get(tokOff - 1);
               //    aColors.fillRegion(startOffKey, numCharsKey, C32_KEY);
               //    c32 = C32_KEYWORD_4;
               // }
               else if(sTok.getQuotFlag())
                  palIdx = PAL_STRING;
               else if(bAllowKW4 && a_keywords_4.containsObject(sTok))
               {
                  palIdx = PAL_KEYWORD_4;
                  // bAllowKW12 = false;
               }
               else if(bAllowKW12 && a_keywords_1.containsObject(sTok))
               {
                  palIdx = PAL_KEYWORD_1;
                  // bAllowKW12 = false;
                  // bAllowKW3 = false;
                  // bAllowKW4 = false;
                  if(sTok == "param")
                     bParam = true;
               }
               // else if(bAllowKW12 && a_keywords_1b.containsObject(sTok))
               // {
               //    palIdx = PAL_KEYWORD_1B;
               //    // bAllowKW12 = false;
               //    // bAllowKW3 = false;
               //    // bAllowKW4 = false;
               // }
               else if(bAllowKW12 && a_keywords_2.containsObject(sTok))
               {
                  palIdx = PAL_KEYWORD_2;
                  // bAllowKW12 = false;
                  // bAllowKW3 = false;
                  // bAllowKW4 = false;
               }
               else if(bAllowKW3 /*&& "=" != sTokP*/ && a_keywords_3.containsObject(sTok))
               {
                  palIdx = PAL_KEYWORD_3;
                  // // // bAllowKW12 = false;
                  // bAllowKW3 = false;
                  // bAllowKW5 = true;
                  // bAllowKW4 = false;
               }
               else if(bAllowKW5 && a_keywords_5.containsObject(sTok))
               {
                  palIdx = PAL_KEYWORD_5;
               }
               else if("=" == sTok)
                  palIdx = PAL_ASSIGN;
               else if(a_keywords_control.containsObject(sTok))
                  palIdx = PAL_CONTROL;
               else if(sTok & "." && sTok.checkConversions() >= YAC_TYPE_STRING)
                  palIdx = PAL_FIELD;
               else if(a_keywords_class.containsObject(sTok))
                  palIdx = PAL_CLASS;
               else if("/" == sTok)
                  palIdx = PAL_KEYWORD_4;

               aColors.fillRegion(startOff, numChars, pal.get(palIdx));

               // Next token
               tokOff += 2;
               sTokPP <= sTokP;
               sTokP <= sTok;
            }

            // trace "xxx line["+rowIdx+"] sLine=\""+sLine+"\"";
            // trace "xxx line["+rowIdx+"] aColors="+aColors;

            // Next visible row
            rowIdx++;
         }
         else
            break;  // beyond end of text
      }
   }

}
