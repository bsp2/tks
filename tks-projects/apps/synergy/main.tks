// ----
// ---- file   : main.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2006-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- changed: 14Sep2006, 17Sep2006, 20Sep2006, 15Oct2007, 20Oct2007, 21Oct2007, 22Oct2007,
// ----          30Oct2007, 31Oct2007, 04Nov2007, 05Nov2007, 10Nov2007, 21Dec2007, 04Jan2008
// ----          07Jan2008, 10Jan2008, 12Jan2008, 13Jan2008, 15Jan2008, 16Jan2008, 03Aug2008
// ----          09Aug2008, 24Aug2008, 31Aug2008, 17Sep2009, 18Sep2009, 20Sep2009, 21Sep2009
// ----          22Sep2009, 23Sep2009, 26Dec2009, 02Jan2010, 03Jan2010, 09Jan2010, 10Jan2010
// ----          11Jan2010, 16Jan2010, 25Jan2010, 27Jan2010, 29Jan2010, 06Feb2010, 25Feb2010
// ----          01Mar2010, 24Apr2010, 29Apr2010, 30Apr2010, 01May2010, 02May2010, 03May2010
// ----          04May2010, 11May2010, 14May2010, 15May2010, 16May2010, 06Jun2010, 10Jun2010
// ----          13Jun2010, 15Jun2010, 24Jun2010, 26Jun2010, 28Jun2010, 30Jun2010, 01Jul2010
// ----          02Jul2010, 04Jul2010, 06Jul2010, 10Jul2010, 12Jul2010, 16Jul2010, 17Jul2010
// ----          18Jul2010, 21Jul2010, 08Sep2010, 24Sep2010, 26Sep2010, 27Sep2010, 28Sep2010
// ----          04Oct2010, 08Oct2010, 09Oct2010, 10Oct2010, 12Oct2010, 13Oct2010, 14Oct2010
// ----          15Oct2010, 16Oct2010, 17Oct2010, 19Oct2010, 20Oct2010, 25Oct2010, 26Oct2010
// ----          02Nov2010, 09Nov2010, 16Nov2010, 21Nov2010, 19Jan2011, 23Jan2011, 03Feb2011
// ----          18Feb2011, 20Feb2011, 25Feb2011, 28Feb2011, 01Mar2011, 30Mar2011, 08Feb2012
// ----          22Apr2013, 23May2013, 31May2013, 05Jun2013, 09Aug2014, 11Aug2014, 13Aug2014
// ----          15Aug2014, 18Aug2014, 19Aug2014, 20Aug2014, 21Aug2014, 31Aug2014, 05Sep2014
// ----          06Sep2014, 13Sep2014, 17Sep2014, 18Sep2014, 24Sep2014, 27Sep2014, 27Jan2015
// ----          04Mar2015, 14Mar2015, 20Mar2015, 29Apr2015, 03Oct2015, 13Oct2015, 30Oct2015
// ----          23Jan2016, 02Feb2016, 03Mar2016, 09Jul2016, 21Jul2016, 30Jan2017, 04Mar2017
// ----          07May2017, 05Jun2017, 16Sep2017, 15Feb2018, 27May2018, 27Nov2018, 30Nov2018
// ----          09Oct2019, 20Oct2019, 06Apr2020, 12Apr2020, 08May2020, 09May2020, 16Apr2021
// ----          18Mar2022, 07May2022, 11Aug2022, 08Nov2022, 16Jul2023, 28Jul2023, 24Sep2023
// ----          03Aug2024, 11Sep2025, 12Sep2025, 20Sep2025
// ----
// ----
// ----

module Main;

use tksdl;
use tkmidi;

use namespace ui;
use namespace st2;

// Post processing modes
#define POST_NONE      0
#define POST_SOLID     1
#define POST_SCANLINES 2


// <ui_init.png>
function NewNoteIcon(String _name, String _path) {
   // NodeTracker
   PNGIcon r <= PNGIcon.NewMono(_name, _path);
   // // r.setView(20, 0, 46, 50);
   return deref r;
}

// <ui_init.png>
function InitUI() {
   // Initialize UI library
   UI.Initialize(Arguments);
   UI.SetLogger(Global.logger);

   UI.SetKbdFocusSelectionModeBehaviour(STConfig.b_kbdfocusselectionmode_behaviour);

   // UI.SetEnableTouchMode(true);  // mainly affects tooltip positions for now (WIP)

   UI.SetOnDrawPostProcessHook(OnDrawPostProcess);

   // (note) [27May2018] always use node editor layout cache and invalidate it when root layer is resized
   // // UI.b_allow_layout_cache = !STConfig.b_ui_resizable;
   UI.b_allow_layout_cache = true;

   UI.AddIcon(PNGIcon.NewMono("mgrctl_link", "mgrctl_link.png"));
   UI.AddIcon(PNGIcon.NewMono("mgrctl_link_2x", "mgrctl_link_2x.png"));
   UI.AddIcon(PNGIcon.NewMono("mgrctl_celvis", "mgrctl_celvis.png"));
   UI.AddIcon(PNGIcon.NewMono("mgrctl_celvis_2x", "mgrctl_celvis_2x.png"));

   UI.AddIcon(PNGIcon.New("up", "up.png"));
   UI.AddIcon(PNGIcon.New("down", "down.png"));

   UI.AddIcon(PNGIcon.New("back_xl", "back_xl.png"));
   UI.AddIcon(PNGIcon.New("back_s",  "back_s.png"));

   UI.AddIcon(PNGIcon.New("back_xl_mono", "back_xl_mono.png"));
   UI.AddIcon(PNGIcon.New("back_s_mono",  "back_s_mono.png"));

   UI.AddIcon(PNGIcon.New("prj_new",  "prj_new.png"));
   UI.AddIcon(PNGIcon.New("prj_load", "prj_load.png"));
   UI.AddIcon(PNGIcon.New("prj_save", "prj_save.png"));

   UI.AddIcon(PNGIcon.New("cfg_save", "cfg_save.png"));

   UI.AddIcon(PNGIcon.New("add",         "add.png"));
   UI.AddIcon(PNGIcon.New("add_mono",    "add_mono.png"));

   UI.AddIcon(PNGIcon.New("addh",        "addh.png"));
   UI.AddIcon(PNGIcon.New("addh_mono",   "addh_mono.png"));

   UI.AddIcon(PNGIcon.New("adds",        "adds.png"));
   UI.AddIcon(PNGIcon.New("adds_mono",   "adds_mono.png"));

   UI.AddIcon(PNGIcon.New("addquick",      "addquick.png"));
   UI.AddIcon(PNGIcon.New("addquick_mono", "addquick_mono.png"));

   UI.AddIcon(PNGIcon.New("remove",      "remove.png"));
   UI.AddIcon(PNGIcon.New("remove_mono", "remove_mono.png"));

   UI.AddIcon(PNGIcon.New("removeh",      "removeh.png"));
   UI.AddIcon(PNGIcon.New("removeh_mono", "removeh_mono.png"));

   UI.AddIcon(PNGIcon.New("removes",      "removes.png"));
   UI.AddIcon(PNGIcon.New("removes_mono", "removes_mono.png"));

   UI.AddIcon(PNGIcon.New("clear",       "clear.png"));
   UI.AddIcon(PNGIcon.New("clone",       "clone.png"));
   UI.AddIcon(PNGIcon.New("clone_mono",  "clone_mono.png"));
   UI.AddIcon(PNGIcon.New("tools",       "tools.png"));
   UI.AddIcon(PNGIcon.New("tools_mono",  "tools_mono.png"));

   // // UI.AddIcon(PNGIcon.New("add_sm",    "add_sm.png"));
   // // UI.AddIcon(PNGIcon.New("remove_sm", "remove_sm.png"));

   // // UI.AddIcon(PNGIcon.New("add_sm_mono",    "add_sm_mono.png"));
   // // UI.AddIcon(PNGIcon.New("remove_sm_mono", "remove_sm_mono.png"));

   UI.AddIcon(PNGIcon.New("stop_sm",      "stop_sm.png"));
   UI.AddIcon(PNGIcon.New("stop_sm_gray", "stop_sm_gray.png"));
   UI.AddIcon(PNGIcon.New("stop_mono",    "stop_mono.png"));

   UI.AddIcon(PNGIcon.New("exit",     "exit.png"));
   UI.AddIcon(PNGIcon.New("cancel",   "cancel.png"));

   UI.AddIcon(PNGIcon.New("chbarr_0",   "chbarr_0.png"));
   UI.AddIcon(PNGIcon.New("chbarr_0_1", "chbarr_0_1.png"));
   UI.AddIcon(PNGIcon.New("chbarr_1",   "chbarr_1.png"));
   UI.AddIcon(PNGIcon.New("chbarr_1_0", "chbarr_1_0.png"));

   UI.AddIcon(PNGIcon.New("chbarr_0_dark",   "chbarr_0_dark.png"));
   UI.AddIcon(PNGIcon.New("chbarr_0_1_dark", "chbarr_0_1_dark.png"));
   UI.AddIcon(PNGIcon.New("chbarr_1_dark",   "chbarr_1_dark.png"));
   UI.AddIcon(PNGIcon.New("chbarr_1_0_dark", "chbarr_1_0_dark.png"));

   UI.AddIcon(PNGIcon.New("project",  "project.png"));
   UI.AddIcon(PNGIcon.New("pipes",    "pipes.png"));
   UI.AddIcon(PNGIcon.New("config",   "config.png"));
   UI.AddIcon(PNGIcon.New("mapper",   "mapper.png"));
   UI.AddIcon(PNGIcon.New("monitor",  "monitor.png"));
   UI.AddIcon(PNGIcon.NewMono("sysex",    "sysex.png"));
   UI.AddIcon(PNGIcon.New("audio",    "audio.png"));
   UI.AddIcon(PNGIcon.New("presets",  "presets.png"));

   UI.AddIcon(PNGIcon.New("recorder",     "recorder.png"));
   UI.AddIcon(PNGIcon.New("subsongs",     "subsongs.png"));
   UI.AddIcon(PNGIcon.New("metronome",    "metronome.png"));
   UI.AddIcon(PNGIcon.New("morph",        "morph.png"));
   UI.AddIcon(PNGIcon.New("global",       "global.png"));
   UI.AddIcon(PNGIcon.NewMono("mididevs", "mididevs.png"));
   UI.AddIcon(PNGIcon.New("prefs",        "prefs.png"));
   UI.AddIcon(PNGIcon.New("audio_setup",  "audio_setup.png"));
   UI.AddIcon(PNGIcon.New("waveforms",    "waveforms.png"));

   UI.AddIcon(PNGIcon.New("moveup",   "moveup.png"));
   UI.AddIcon(PNGIcon.New("movedown", "movedown.png"));

   UI.AddIcon(PNGIcon.New("moveuph",   "moveuph.png"));
   UI.AddIcon(PNGIcon.New("movedownh", "movedownh.png"));

   UI.AddIcon(PNGIcon.New("moveup_mono",   "moveup_mono.png"));
   UI.AddIcon(PNGIcon.New("movedown_mono", "movedown_mono.png"));

   UI.AddIcon(PNGIcon.New("moveuph_mono",   "moveuph_mono.png"));
   UI.AddIcon(PNGIcon.New("movedownh_mono", "movedownh_mono.png"));

   UI.AddIcon(PNGIcon.New("file_browse", "file_browse.png"));

   UI.AddIcon(PNGIcon.New("pipe", "pipe.png"));
   UI.AddIcon(PNGIcon.New("pipe_translucent", "pipe_translucent.png"));

   // Nodes:
   UI.AddIcon(PNGIcon.New("node_analogrytm",      "node_analogrytm.png"));
   UI.AddIcon(PNGIcon.New("node_analogrytm_mono", "node_analogrytm_mono.png"));
   UI.AddIcon(PNGIcon.New("node_arranger",        "node_arranger.png"));
   UI.AddIcon(PNGIcon.New("node_arranger_mono",   "node_arranger_mono.png"));
   UI.AddIcon(PNGIcon.New("node_buffer",          "node_buffer.png"));
   UI.AddIcon(PNGIcon.New("node_buffer_mono",     "node_buffer_mono.png"));
   UI.AddIcon(PNGIcon.New("node_ctlmorph",        "node_ctlmorph.png"));
   UI.AddIcon(PNGIcon.New("node_ctlmorph_mono",   "node_ctlmorph_mono.png"));
   UI.AddIcon(PNGIcon.New("node_delay",           "node_delay.png"));
   UI.AddIcon(PNGIcon.New("node_delay_mono",      "node_delay_mono.png"));
   UI.AddIcon(PNGIcon.New("node_keymap",          "node_keymap.png"));
   UI.AddIcon(PNGIcon.New("node_keymap_mono",     "node_keymap_mono.png"));
   UI.AddIcon(PNGIcon.New("node_modmatrix",       "node_modmatrix.png"));
   UI.AddIcon(PNGIcon.New("node_modmatrix_mono",  "node_modmatrix_mono.png"));
   UI.AddIcon(PNGIcon.New("node_modular",         "node_modular.png"));
   UI.AddIcon(PNGIcon.New("node_modular_mono",    "node_modular_mono.png"));
   UI.AddIcon(PNGIcon.New("node_monitor",         "node_monitor.png"));
   UI.AddIcon(PNGIcon.New("node_monitor_mono",    "node_monitor_mono.png"));
   UI.AddIcon(PNGIcon.New("node_monopoly",        "node_monopoly.png"));
   UI.AddIcon(PNGIcon.New("node_monopoly_mono",   "node_monopoly_mono.png"));
   UI.AddIcon(PNGIcon.New("node_proxy",           "node_proxy.png"));
   UI.AddIcon(PNGIcon.New("node_proxy_mono",      "node_proxy_mono.png"));
   UI.AddIcon(PNGIcon.New("node_script",          "node_script.png"));
   UI.AddIcon(PNGIcon.New("node_script_mono",     "node_script_mono.png"));
   UI.AddIcon(PNGIcon.New("node_seq",             "node_seq.png"));
   UI.AddIcon(PNGIcon.New("node_seq_mono",        "node_seq_mono.png"));
   UI.AddIcon(PNGIcon.New("node_tracker",         "node_tracker.png"));
   UI.AddIcon(PNGIcon.New("node_tracker_mono",    "node_tracker_mono.png"));
   UI.AddIcon(PNGIcon.New("node_trigseq",         "node_trigseq.png"));
   UI.AddIcon(PNGIcon.New("node_trigseq_mono",    "node_trigseq_mono.png"));

   // Transport:
   UI.AddIcon(PNGIcon.NewMono("transport_marker", "transport_marker.png"));
   UI.AddIcon(PNGIcon.NewMono("transport_start", "transport_start.png"));
   UI.AddIcon(PNGIcon.NewMono("transport_end",   "transport_end.png"));

   UI.AddIcon(PNGIcon.New("transport_play",        "transport_play.png"));
   UI.AddIcon(PNGIcon.New("transport_play_mono",   "transport_play_mono.png"));

   UI.AddIcon(PNGIcon.New("transport_cycle_inactive",  "transport_cycle_inactive.png"));
   UI.AddIcon(PNGIcon.New("transport_cycle_active",    "transport_cycle_active.png"));
   UI.AddIcon(PNGIcon.New("transport_cycle_mixed",     "transport_cycle_mixed.png"));

   UI.AddIcon(NewNoteIcon("nt_note_8", "nt_note_8.png"));
   UI.AddIcon(NewNoteIcon("nt_note_4", "nt_note_4.png"));
   UI.AddIcon(NewNoteIcon("nt_note_2", "nt_note_2.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1", "nt_note_1.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_2", "nt_note_1_2.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_4", "nt_note_1_4.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_8", "nt_note_1_8.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_16", "nt_note_1_16.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_32", "nt_note_1_32.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_64", "nt_note_1_64.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_128", "nt_note_1_128.png"));
   UI.AddIcon(NewNoteIcon("nt_note_1_256", "nt_note_1_256.png"));

   UI.AddIcon(PNGIcon.New("record_0",   "record_0.png"));
   UI.AddIcon(PNGIcon.New("record_0_1", "record_0_1.png"));
   UI.AddIcon(PNGIcon.New("record_1",   "record_1.png"));
   UI.AddIcon(PNGIcon.New("record_1_0", "record_1_0.png"));

   // // UI.AddIcon(PNGIcon.New("record_0_dark",   "record_0.png"));
   // // UI.AddIcon(PNGIcon.New("record_0_1_dark", "record_0_1.png"));
   // // UI.AddIcon(PNGIcon.New("record_1_dark",   "record_1.png"));
   // // UI.AddIcon(PNGIcon.New("record_1_0_dark", "record_1_0.png"));

   UI.AddIcon(PNGIcon.New("record_0_dark",   "record_cb_mono_0.png"));
   UI.AddIcon(PNGIcon.New("record_0_1_dark", "record_cb_mono_0_1.png"));
   UI.AddIcon(PNGIcon.New("record_1_dark",   "record_cb_mono_1.png"));
   UI.AddIcon(PNGIcon.New("record_1_0_dark", "record_cb_mono_1_0.png"));

   UI.AddIcon(PNGIcon.New("record_1_mono",  "record_1_mono.png"));

   UI.AddIcon(PNGIcon.New("record_1_noicons",      "record_1_noicons.png"));
   UI.AddIcon(PNGIcon.New("record_1_noicons_mono", "record_1_noicons_mono.png"));

   UI.AddIcon(PNGIcon.NewMono("mute_0",   "mute_0.png"));
   UI.AddIcon(PNGIcon.NewMono("mute_0_1", "mute_0_1.png"));
   UI.AddIcon(PNGIcon.NewMono("mute_1",   "mute_1.png"));
   UI.AddIcon(PNGIcon.NewMono("mute_1_0", "mute_1_0.png"));

   UI.AddIcon(PNGIcon.NewMono("mute_0_dark",   "mute_0.png"));
   UI.AddIcon(PNGIcon.NewMono("mute_0_1_dark", "mute_0_1.png"));
   UI.AddIcon(PNGIcon.NewMono("mute_1_dark",   "mute_1.png"));
   UI.AddIcon(PNGIcon.NewMono("mute_1_0_dark", "mute_1_0.png"));

   UI.AddIcon(PNGIcon.New("trashcan_sm", "trashcan_sm.png"));

   UI.AddIcon(PNGIcon.New("lock_0",   "lock_0.png"));
   UI.AddIcon(PNGIcon.New("lock_0_1", "lock_0_1.png"));
   UI.AddIcon(PNGIcon.New("lock_1",   "lock_1.png"));
   UI.AddIcon(PNGIcon.New("lock_1_0", "lock_1_0.png"));

   UI.AddIcon(PNGIcon.New("lock_0_dark",   "lock_0.png"));
   UI.AddIcon(PNGIcon.New("lock_0_1_dark", "lock_0_1.png"));
   UI.AddIcon(PNGIcon.New("lock_1_dark",   "lock_1.png"));
   UI.AddIcon(PNGIcon.New("lock_1_0_dark", "lock_1_0.png"));

   UI.AddIcon(PNGIcon.New("env_pencil",      "env_pencil.png"));
   UI.AddIcon(PNGIcon.New("env_pencil_mono", "env_pencil_mono.png"));
   UI.AddIcon(PNGIcon.New("env_smoothen",    "env_smoothen.png"));
   UI.AddIcon(PNGIcon.New("env_nudge",       "env_nudge.png"));

   UI.AddIcon(PNGIcon.New("ok_sm", "ok_sm.png"));
   UI.AddIcon(PNGIcon.New("cancel_sm", "cancel_sm.png"));

   UI.AddIcon(PNGIcon.New("upload", "upload.png"));
   UI.AddIcon(PNGIcon.New("download", "download.png"));

   UI.AddIcon(PNGIcon.New("pipemap_info",      "pipemap_info.png"));
   UI.AddIcon(PNGIcon.New("pipemap_info_mono", "pipemap_info_mono.png"));

   UI.AddIcon(PNGIcon.New("pipemap_no_icons", "pipemap_no_icons.png"));

   UI.AddIcon(PNGIcon.NewMono("locator_l", "locator_l.png"));
   UI.AddIcon(PNGIcon.NewMono("locator_r", "locator_r.png"));

   UI.AddIcon(PNGIcon.NewMono("punch_in",  "punch_in.png"));
   UI.AddIcon(PNGIcon.NewMono("punch_out", "punch_out.png"));

   UI.AddIcon(PNGIcon.NewMono("star_rating_lvl_0",  "star_rating_lvl_0.png"));
   UI.AddIcon(PNGIcon.NewMono("star_rating_lvl_1",  "star_rating_lvl_1.png"));
   UI.AddIcon(PNGIcon.NewMono("star_rating_lvl_2",  "star_rating_lvl_2.png"));
   UI.AddIcon(PNGIcon.NewMono("star_rating_lvl_3",  "star_rating_lvl_3.png"));
   UI.AddIcon(PNGIcon.NewMono("star_rating_lvl_4",  "star_rating_lvl_4.png"));
   UI.AddIcon(PNGIcon.NewMono("star_rating_lvl_5",  "star_rating_lvl_5.png"));


   // ------------- fonts -------------
   FontResource *fr;
   int fsz;

   fsz = 7;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big11");

   fsz = 9;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big10");

   fsz = 14;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big9");

   fsz = 16;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big8");

   fsz = 20;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big7");

   fsz = 24;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big6");

   fsz = 32;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big5");

   fsz = 48;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big4");

   fsz = 64;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big3");

   fsz = 74;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big2");

   fsz = 84;
   fr <= FT2PakFileFontResource.New("tkui:fonts/default.ttf", "default", Font.STYLE_NORMAL, fsz);
   fr.setEnableMonochrome(false);
   UI.AddFontResource(deref fr);
   fsz = fsz * STConfig.font_scaling;
   UI.AddFontAlias("default "+fsz, "big1");
}



// (note) call SetEnableForceHighFramerate(true) and set PatternView::b_smoothscroll=true to really burn cycles!
//
// (note) disable pattern autoscroll + equalizers, call SetEnableForceHighFramerate(false) and set PatternView::b_smoothscroll=false
//         to save CPU time (roughly 50% saved)



// <event_handler.png>
// -----------------------------------------------------------------------------
//
// onSignal - Handles POSIX-style process signals
//
// -----------------------------------------------------------------------------
function onSignal(int sig) {
   Global.Debug("onSignal("+sig+")");
   if(2 == sig)
   {
      trace "[~~~] stop on signal "+sig;
      UI.Stop();
      Global.Exit();
   }
}

// <event_handler.png>
// -----------------------------------------------------------------------------
//
// onSegV - Called when a segmentation violation has occured (d'oh!)
//
// -----------------------------------------------------------------------------
function onSegV() {
   Global.CrashAutosave(true/*bHard*/);

   // Run SegVContinue
   // // return true;
}

use onSegV for TKS.onSegV;


// <event_handler.png>
// -----------------------------------------------------------------------------
//
// onClose - Called when the user tries to close the desktop window
//
// -----------------------------------------------------------------------------
function SDL_onClose() {
   Global.Debug("main::SDL_onClose() called");

   Global.HandleOnClose();

   return false;
}


// <event_handler.png>
function SDL_onJoyAxisMotion(int dev, int axis, int val) {
   // trace "[...] SDL_onJoyAxisMotion: dev="+dev+" axis="+axis+" val="+val;
   STX_JoystickMIDIInDevice inDevJS <= MIDI.joystick_in_devices.get(dev);
   if(null != inDevJS)
   {
      inDevJS.queueJoystickAxisEvent(dev, axis, val);
   }
}

// <event_handler.png>
function SDL_onJoyBallMotion(int dev, int ball, int dx, int dy) {
   // trace "[...] SDL_onJoyBallMotion: dev="+dev+" ball="+ball+" dx="+dx+" dy="+dy;
   STX_JoystickMIDIInDevice inDevJS <= MIDI.joystick_in_devices.get(dev);
   if(null != inDevJS)
   {
      inDevJS.queueJoystickBallEvent(dev, ball, dx, dy);
   }
}

// <event_handler.png>
function SDL_onJoyButton(int dev, int button, int pressed) {
   // trace "[...] SDL_onJoyButton: dev="+dev+" button="+button+" pressed="+pressed;
   STX_JoystickMIDIInDevice inDevJS <= MIDI.joystick_in_devices.get(dev);
   if(null != inDevJS)
   {
      inDevJS.queueJoystickButtonEvent(dev, button, pressed);
   }
}

// <event_handler.png>
function SDL_onJoyHatMotion(int dev, int hat, int state) {
   // trace "[...] SDL_onJoyHatMotion: dev="+dev+" hat="+hat+" state="+state;
   STX_JoystickMIDIInDevice inDevJS <= MIDI.joystick_in_devices.get(dev);
   if(null != inDevJS)
   {
      inDevJS.queueJoystickHatEvent(dev, hat, state);
   }
}


// <event_handler.png>
function onDraw_RenderTest() {
   trace "xxx onDraw_RenderTest";
   float dt = FPS.precision;
   glClearColor(0,0,0.2,1);  // RenderTest
   glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);  // RenderTest

   zglInitOrtho(1, 1);  // RenderTest
   glColor3f(0.9,0.9,0.9);  // RenderTest

   if(1)
   {
      glBegin(GL_QUADS);  // RenderTest
      glVertex2f(-1,-1);  // RenderTest
      glVertex2f( 1,-1);  // RenderTest
      glVertex2f( 1, 1);  // RenderTest
      glVertex2f(-1, 1);  // RenderTest
      glEnd();  // RenderTest
   }
}

// <debug.png>
function RenderTest() {
   use onDraw_RenderTest for SDL.onDraw;
   SDL.eventPolling = true;
   //Viewport.openWindow(320, 240);
   SDL.eventLoop();
   return;
}

// <debug.png>
function Test_MIDIFile() {
   MIDIFile smf;

   if(smf.loadLocal("f:/mProjects/recordings/sub37/funky_moog_wetbass_line-12Jan2016/Bass Sub37 02-13 Snappy Bass.mid"))
   {
      trace "[...] TestMIDIFile: load OK";
   }
   else
   {
      trace "[---] TestMIDIFile: load FAILED";
   }
}


// <function.png>
function OnDrawPostProcess() {

   int postMode;
   int postColor;

   if(Viewport.isFullScreen())
   {
      postMode  = STConfig.postfx_fs_mode;
      postColor = STConfig.postfx_fs_color;
   }
   else
   {
      postMode  = STConfig.postfx_win_mode;
      postColor = STConfig.postfx_win_color;
   }

   if(POST_SCANLINES == postMode)/// && (UI.zoom_y > 1))
   {
      // // trace "xxx OnDrawPostProcess Viewport=("+Viewport.width+";"+Viewport.height+")";

      Texture tex <= root_form.tex_scanline_pattern;

      UIRenderer.SetViewport(0, 0, Viewport.width, Viewport.height);
      UIRenderer.ProjInit2D(Viewport.width, Viewport.height);

      UIRenderer.EnableBlending();

      tex.bind();
      tex.enable();

      UIRenderer.SetColorARGB(postColor);

      float umax = float(Viewport.width) / tex.sx;
      float vmax = float(Viewport.height) / tex.sy;

      if(UIRenderer.BeginTexturedTriangleFan(4))
      {
         UIRenderer.TexCoord2f(0, 0);
         UIRenderer.Vertex2f(0, 0);

         UIRenderer.TexCoord2f(umax, 0);
         UIRenderer.Vertex2f(Viewport.width, 0);

         UIRenderer.TexCoord2f(umax, vmax);
         UIRenderer.Vertex2f(Viewport.width, Viewport.height);

         UIRenderer.TexCoord2f(0, vmax);
         UIRenderer.Vertex2f(0, Viewport.height);

         UIRenderer.End();
      }

      tex.disable();
      UIRenderer.DisableBlending();
   }
   else if(POST_SOLID == postMode)
   {
      UIRenderer.SetViewport(0, 0, Viewport.width, Viewport.height);
      UIRenderer.ProjInit2D(Viewport.width, Viewport.height);

      UIRenderer.EnableBlending();

      byte ca = (postColor >> 24)&255;
      if(ca > 200)
      {
         ca = 200;
         postColor = (postColor&0x00FFFFFF) | (ca << 24);
      }

      UIRenderer.SetColorARGB(postColor);

      if(UIRenderer.BeginFilledTriangleFan(4))
      {
         UIRenderer.Vertex2f(0,              0);
         UIRenderer.Vertex2f(Viewport.width, 0);
         UIRenderer.Vertex2f(Viewport.width, Viewport.height);
         UIRenderer.Vertex2f(0,              Viewport.height);
         UIRenderer.End();
      }

      UIRenderer.DisableBlending();
   }
}


// <function.png>
function TestTSL() {
   boolean r = true;
   Configuration.debugLevel = 1;

   int t = milliSeconds();

   r = r && Global.LazyLoadTSL("syntheditor_dsi_prophet08.tsl");
   r = r && Global.LazyLoadTSL("syntheditor_dsi_prophet12.tsl");
   r = r && Global.LazyLoadTSL("syntheditor_generic.tsl");
   r = r && Global.LazyLoadTSL("syntheditor_korg_radias.tsl");
   r = r && Global.LazyLoadTSL("syntheditor_yamaha_fs1r_montage.tsl");
   r = r && Global.LazyLoadTSL("syntheditor_oberheim_matrix1000.tsl");

   r = r && Global.LazyLoadTSL("node_analogrytm.tsl");
   r = r && Global.LazyLoadTSL("node_buffer.tsl");
   r = r && Global.LazyLoadTSL("node_ctlmorph.tsl");
   r = r && Global.LazyLoadTSL("node_delay.tsl");
   r = r && Global.LazyLoadTSL("node_keymap.tsl");
   r = r && Global.LazyLoadTSL("node_modular.tsl");
   r = r && Global.LazyLoadTSL("node_monopoly.tsl");
   r = r && Global.LazyLoadTSL("node_proxy.tsl");
   r = r && Global.LazyLoadTSL("node_script.tsl");

   t = milliSeconds() - t;
   trace "[...] TestTSL: r="+r+" ms="+t;

   return r;
}

// <function.png>
// -----------------------------------------------------------------------------
//
// main - Here be dragons!
//
// -----------------------------------------------------------------------------
function main() {

   // Test_MIDIFile();
   // exit(0);

   int tStartupBase = milliSeconds();
   int tStartup;

   STConfigBase.InitPre();

   InitUI();

   if(STConfig.b_open_prerun_window)
   {
      // (note) shader init on ATI (nb) fails (glLinkProgram()) when window is not opened before first thread is created
      // (note) the workaround is to simply open and close a window before doing anything else :^)
      Viewport.openWindow(320, 240);
      Viewport.close();
   }

   UI.SetEnableTransparentLayers(STConfig.b_transparent_layers);

   // Save current working directory
   st2::program_directory = tkfileutils_getcwd();

   if(0 == Configuration.debugLevel)
   {
      Configuration.debugLevel = STConfig.b_debug_hifreq ? 1 : 0;
   }

   Global.Debug("program_directory=\""+st2::program_directory+"\".");

   Thread.SetProcessPriorityClass(PROCESS_PRIORITY_CLASS_REALTIME);

   STConfigBase.GlobalInitPre();

   if(Global.Init())
   {
      STConfigBase.InitPost();

      UI.SetRootForm(root_form);
      Global.Debug("Opening window, size=("+STConfig.window_sx+"; "+STConfig.window_sy+")");
      UI.SetZoom(STConfig.zoom_x, STConfig.zoom_y);
      UI.SetCursorZoom(STConfig.cursor_zoom);
      UI.SetMinimumSize(960, 600);
      UI.OpenWindow(STConfig.window_sx * STConfig.zoom_x,
                    STConfig.window_sy * STConfig.zoom_y
                    );
      // // SDL.eventLoop();

      use SDL_onClose for SDL.onClose;  // (note) overrides UI.onClose

      use SDL_onJoyAxisMotion for SDL.onJoyAxisMotion;
      use SDL_onJoyBallMotion for SDL.onJoyBallMotion;
      use SDL_onJoyButton     for SDL.onJoyButton;
      use SDL_onJoyHatMotion  for SDL.onJoyHatMotion;

      // // Viewport.setEnableRedraw(false);

      // Enable/disable vsync
      Global.ConfigureVSync();

      // Fullscreen
      Global.ConfigureFullscreenDisplaySize();
      if(STConfig.b_fullscreen)
      {
         Viewport.toggleFullScreen();
      }

      replay.b_playing = false;

      Global.UpdateWindowTitle("unknown");

      use onSignal for TKS.onSignal;

      boolean bLoaded = false;

      tStartup = milliSeconds() - tStartupBase;
      Global.Profile("--------------- main: startup-time until project autoload: "+(int(100*tStartup/1000.0)/100.0)+" sec");

      if(!(STConfig.autoload_filename.isBlank()))
      {
         bLoaded = Global.cmd_file_load(STConfig.autoload_filename);
      }

      UI.DrainEventQueue();

      if(!bLoaded)
      {
         MIDI.UpdateOutDeviceNames();
         MIDI.RebuildAllCtlNames();
         root_form.updateSongWidgets();
      }

      int earlyExitCode = -1;

      try
      {
         Global.PreRun();

         root_form.moveToDefaultPosition();

         tStartup = milliSeconds() - tStartupBase;
         Global.Profile("--------------- main: time until UI.Run(): "+(int(100*tStartup/1000.0)/100.0)+" sec");

         // (note) must post-pone test until e.g. current_pipe_root has become available
         //         (otherwise the compiler can't determine its type since the template ptr has
         //          been replaced by NULL after compilation of synergy.tkp)
         if("test_tsl" == Arguments.get(0))
         {
            if(TestTSL())
               earlyExitCode = 0;
            else
               earlyExitCode = 20;
         }
         else if("test_skip_run" == Arguments.get(0))
         {
            earlyExitCode = 0;
         }

         if(earlyExitCode < 0)
         {
            UI.Run();
         }
      }
      catch(Error e)
      {
         trace "[...] caught exception e="+#(e)+"\n"+e.stackTrace;
         Global.CrashAutosave(false);
      }

      replay.b_playing = false;

      if(STConfig.b_enable_midi)
      {
         MIDI.StopMIDITimer();
      }

      Global.Exit();
      UI.Exit();

      tStartup = milliSeconds() - tStartupBase;
      Global.Profile("--------------- main: time until Exit(): "+(int(100*tStartup/1000.0)/100.0)+" sec");

      if(earlyExitCode >= 0)
         exit(earlyExitCode);
   }
   else
   {
      trace "[---] Global::init() failed.";
   }
}
