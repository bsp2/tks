// ----
// ---- file   : NAR_MapEntryTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2016 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 05Mar2016
// ---- changed: 06Mar2016, 13Apr2016
// ----
// ----
// ----

module MNAR_MapEntryTM;

use namespace ui;
use namespace st2;


class NAR_MapEntryTM : TableModel {

   define int COL_ID     = 0;
   define int COL_ENABLE = 1;
   define int COL_NAME   = 2;
   define int COL_INPUT  = 3;

   NAR_MapGroup *grp;
   NodeAnalogRytm *parent_node;

   protected CheckBox cb_active_render;
   protected CheckBox cb_active_edit;


   public virtual getNumColumns() : int {
      return 4;
   }

   public virtual getColumnCaption(int _col) : String {
      return ["ID", "Enable", "Name", "Input"][_col];
   }

   public virtual getNumRows() : int {
      if(null != grp)
      {
         return grp.entries.numElements;
      }
      else
      {
         return 0;
      }
   }

   public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
      if(null != grp)
      {
         NAR_MapEntry mapen <= grp.entries.get(_row);

         if(null != mapen)
         {
            CheckBox *cb;

            if(COL_ENABLE == _col)
            {
               if(_row != cursor_index)
               {
                  cb <= cb_active_render;
               }
               else
               {
                  // Row is possibly being edited (at least it is selected..)
                  cb <= cb_active_edit;
               }
               cb.setSelected(mapen.b_enable);
               cb.setInnerPadTop(1.0f);
               cb.setPositionX(4.0f);
               return cb;
            }
         }
      }

      if(COL_ENABLE == _col)
      {
         cb <= cb_active_render;
         cb.setInnerPadTop(1.0f);
         cb.setPositionX(4.0f);
         return cb;
      }

      Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);
      lb.setFontByName("big8");
      return lb;
   }

   public virtual getCellCaption(int _col, _row) : String {
      if(null != grp)
      {
         NAR_MapEntry mapen <= grp.entries.get(_row);

         switch(_col)
         {
            case COL_ID:
               if(null != mapen)
               {
                  return String(_row + 1);
               }
               else
               {
                  return "?";
               }

            case COL_ENABLE:
               if(null != mapen)
               {
                  return String(mapen.b_enable);
               }
               else
               {
                  return "?";
               }

            case COL_NAME:
               if(null != mapen)
               {
                  return mapen.name;
               }
               else
               {
                  return "-";
               }

            case COL_INPUT:
               if(null != mapen)
               {
                  return mapen.getInputString();
               }
               else
               {
                  return "-";
               }

         }
      }
   }

   public virtual initTableModel() {
      initCheckBox(cb_active_render);
      initCheckBox(cb_active_edit);

      TableModel::initTableModel();
   }

   public virtual getMinimumColumnWidth(int _col) : int {

      switch(_col)
      {
         case COL_ID:
            return 20;

         case COL_ENABLE:
            return 40;

         case COL_NAME:
            return 10;

         case COL_INPUT:
            return 100;
      }
   }

   public virtual getPreferredColumnWidth(int _col) : int {

      switch(_col)
      {
         case COL_ID:
            return 20;

         case COL_ENABLE:
            return 40;

         case COL_NAME:
            return 640;

         case COL_INPUT:
            return 140;
      }
   }

   public virtual handleCellOnMouse(int _col, int _row, MouseEvent _ev) : boolean {
      boolean bChanged;
      boolean bOldState;

      if(null != grp)
      {
         NAR_MapEntry mapen <= grp.entries.get(_row);

         if(null != mapen)
         {
            if(COL_ENABLE == _col)
            {
               // trace "xxx handleCellOnMouse: 1"+" _ev.current_state="+_ev.current_state+" _ev.changed_state="+_ev.changed_state;
               bOldState = cb_active_edit.isSelected();

               if(cb_active_edit.onMouse(_ev))
               {
                  bChanged = cb_active_edit.isSelected();

                  if(bOldState ^ bChanged)
                  {
                     mapen.setEnable(cb_active_edit.isSelected());

                     Global.Print((mapen.b_enable?"Enable":"Disable")+" Map Entry \""+mapen.name+"\"");
                  }

                  return true;
               }
               // ...
            }
         }
      }

      return false;
   }
}
