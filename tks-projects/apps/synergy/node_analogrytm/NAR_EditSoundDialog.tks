// ----
// ---- file   : NAR_EditSoundDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2021-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 16Jul2021
// ---- changed: 05Oct2023, 30Oct2023, 02Nov2023
// ----
// ----
// ----

module MNAR_EditSoundDialog;

use namespace ui;


// <class.png>
class NAR_EditSoundDialog extends Dialog {

   protected XMLForm *xfm;

   protected NodeAnalogRytmEditor  *editor;
   protected NAR_EditKitDialog     *kit_dialog;
   protected NodeAnalogRytm        *ar;
   protected NAR_Kit               *kit;
   protected AR_Kit                *ar_kit;
   protected int                    track_idx;
   protected AR_Sound               ar_sound;

   protected CheckBox *cb_veltovol;

   protected ComboBox *cm_chromatic;
   protected CheckBox *cb_legacyfxsend;
   protected CheckBox *cb_fltenvreset;

   protected FloatParam *fp_vel_amt_1;
   protected ComboBox   *cm_vel_dest_1;

   protected FloatParam *fp_vel_amt_2;
   protected ComboBox   *cm_vel_dest_2;

   protected FloatParam *fp_vel_amt_3;
   protected ComboBox   *cm_vel_dest_3;

   protected FloatParam *fp_vel_amt_4;
   protected ComboBox   *cm_vel_dest_4;

   protected FloatParam *fp_at_amt_1;
   protected ComboBox   *cm_at_dest_1;

   protected FloatParam *fp_at_amt_2;
   protected ComboBox   *cm_at_dest_2;

   protected FloatParam *fp_at_amt_3;
   protected ComboBox   *cm_at_dest_3;

   protected FloatParam *fp_at_amt_4;
   protected ComboBox   *cm_at_dest_4;

   protected Button *bt_close;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("NAR_EditSoundDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      initWindow(xfm,
                 "Edit Analog Rytm Sound Settings",
                 100, 100,
                 640, 240
                 );

      // (todo) create combobox bgcolor table to indicate incompatible machines (depending on track nr)

      return true;
   }

   // <method_get.png>
   public virtual isPopup() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual isModal():boolean {
      return true;
   }

   // <method_get.png>
   public virtual isResizable() : boolean {
      return false;
   }

   // <ui_show.png>
   protected virtual preShow() {

      if(!b_layer_postinit_done)
         resizeToMinimum();

      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      refocusDefault();
   }

   // <ui_show.png>
   public method showSound(NodeAnalogRytmEditor _editor,
                           NAR_EditKitDialog    _kitDialog,
                           NodeAnalogRytm       _ar,
                           NAR_Kit              _kit,
                           int                  _trackIdx,
                           String               _soundName
                           ) : boolean {

      editor     <= _editor;
      kit_dialog <= _kitDialog;
      ar         <=  _ar;
      kit        <= _kit;
      track_idx   = _trackIdx;
      ar_kit     <= kit.ar_kit;
      // // snapshot  <= editor.getEditPattern();
      ar_kit.getSoundRefByIndex(_trackIdx, ar_sound);

      local StringArray modDest;
      int numDest = AR_Sound.GetNumModDestUI();
      int listIdx = 0;
      loop(numDest)
      {
         modDest.add(ar_sound.getModDestNameByListIdx(listIdx++));
      }

      // Misc
      cm_chromatic.setSelectedOption(ar_sound.getChromaticMode());
      cb_legacyfxsend.setSelected(ar_sound.getLegacyFXSend());
      cb_fltenvreset.setSelected(ar_sound.getEnvReset() ? true : false);

      // Velocity
      cb_veltovol.setSelected(ar_sound.getVelToVol());

      cm_vel_dest_1.setOptions(modDest);
      cm_vel_dest_1.setSelectedOption(ar_sound.getVelocityModDestListIdx(0));
      fp_vel_amt_1.setValue(ar_sound.getVelocityModAmt(0));

      cm_vel_dest_2.setOptions(modDest);
      cm_vel_dest_2.setSelectedOption(ar_sound.getVelocityModDestListIdx(1));
      fp_vel_amt_2.setValue(ar_sound.getVelocityModAmt(1));

      cm_vel_dest_3.setOptions(modDest);
      cm_vel_dest_3.setSelectedOption(ar_sound.getVelocityModDestListIdx(2));
      fp_vel_amt_3.setValue(ar_sound.getVelocityModAmt(2));

      cm_vel_dest_4.setOptions(modDest);
      cm_vel_dest_4.setSelectedOption(ar_sound.getVelocityModDestListIdx(3));
      fp_vel_amt_4.setValue(ar_sound.getVelocityModAmt(3));

      // Aftertouch
      cm_at_dest_1.setOptions(modDest);
      cm_at_dest_1.setSelectedOption(ar_sound.getAftertouchModDestListIdx(0));
      fp_at_amt_1.setValue(ar_sound.getAftertouchModAmt(0));

      cm_at_dest_2.setOptions(modDest);
      cm_at_dest_2.setSelectedOption(ar_sound.getAftertouchModDestListIdx(1));
      fp_at_amt_2.setValue(ar_sound.getAftertouchModAmt(1));

      cm_at_dest_3.setOptions(modDest);
      cm_at_dest_3.setSelectedOption(ar_sound.getAftertouchModDestListIdx(2));
      fp_at_amt_3.setValue(ar_sound.getAftertouchModAmt(2));

      cm_at_dest_4.setOptions(modDest);
      cm_at_dest_4.setSelectedOption(ar_sound.getAftertouchModDestListIdx(3));
      fp_at_amt_4.setValue(ar_sound.getAftertouchModAmt(3));

      setWindowTitle("Edit Analog Rytm Sound ["+_soundName+"] Settings");

      showCenteredFirst();

      return true;
   }

   // <ui_hide.png>
   public virtual hide() {
      Dialog::hide();
   }

   // <ui_kbd.png>
   protected method refocusDefault() {
      UI.SetKeyboardFocus(bt_close);
   }

   // <ui_kbd.png>
   protected method refocusDefaultAfterAction(String _acName) {
      if(FloatParam.ACTION_VALUECHANGED == _acName)
         refocusDefault();
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      _retLayers.joinRR(_retLayers,
                        [
                           cm_chromatic,
                           cb_legacyfxsend,
                           cb_fltenvreset,

                           cb_veltovol,

                           cm_vel_dest_1,
                           fp_vel_amt_1,

                           cm_vel_dest_2,
                           fp_vel_amt_2,

                           cm_vel_dest_3,
                           fp_vel_amt_3,

                           cm_vel_dest_4,
                           fp_vel_amt_4,

                           cm_at_dest_1,
                           fp_at_amt_1,

                           cm_at_dest_2,
                           fp_at_amt_2,

                           cm_at_dest_3,
                           fp_at_amt_3,

                           cm_at_dest_4,
                           fp_at_amt_4,
                         ]
                        );
   }

   // <ui_kbd.png>
   public virtual getTabCycleOverrides() : PointerArray {
      PointerArray layers; layers.empty();
      addTabCycleOverrides(layers);
      return layers;
   }

   // <ui_handle.png>
   protected method handleChromaticModeChanged() {
      ar_sound.setChromaticMode(cm_chromatic.getSelectedOption());
      kit_dialog.queueSendSound(track_idx);
      Global.Print("Chromatic Mode is \""+cm_chromatic.getSelectedOptionName()+"\"");
   }

   // <ui_handle.png>
   protected method handleLegacyFXSendChanged() {
      ar_sound.setLegacyFXSend(cb_legacyfxsend.isSelected());
      kit_dialog.queueSendSound(track_idx);
      Global.Print("Legacy FX Send is "+Utils.GetEnableString(ar_sound.getLegacyFXSend()));
   }

   // <ui_handle.png>
   protected method handleFltEnvResetChanged() {
      ar_sound.setEnvReset(cb_fltenvreset.isSelected() ? 2 : 0);
      kit_dialog.queueSendSound(track_idx);
      Global.Print("Filter Env Reset is "+Utils.GetEnableString(ar_sound.getEnvReset()));
   }

   // <ui_handle.png>
   protected method handleVelToVolChanged() {
      ar_sound.setVelToVol(cb_veltovol.isSelected());
      kit_dialog.queueSendSound(track_idx);
      Global.Print("Velocity-to-Volume is "+Utils.GetEnableString(ar_sound.getVelToVol()));
   }

   // <ui_handle.png>
   protected method handleVelocityDestChanged(int _slotIdx, int _listIdx) {
      ar_sound.setVelocityModDestByListIdx(_slotIdx, _listIdx);
      kit_dialog.queueSendSound(track_idx);
      Global.Print("Velocity dest["+(_slotIdx+1)+"] is \""+ar_sound.getVelocityModDestName(_slotIdx)+"\"");
   }

   // <ui_handle.png>
   protected method handleVelocityAmtChanged(int _slotIdx, float _amt) {
      ar_sound.setVelocityModAmt(_slotIdx, int(_amt));
      kit_dialog.queueSendSound(track_idx);
      Global.Print("Velocity amt["+(_slotIdx+1)+"] is \""+(ar_sound.getVelocityModAmt(_slotIdx))+"\"");
   }

   // <ui_handle.png>
   protected method handleAftertouchDestChanged(int _slotIdx, int _listIdx) {
      ar_sound.setAftertouchModDestByListIdx(_slotIdx, _listIdx);
      kit_dialog.queueSendSound(track_idx);
      Global.Print("Aftertouch dest["+(_slotIdx+1)+"] is \""+ar_sound.getAftertouchModDestName(_slotIdx)+"\"");
   }

   // <ui_handle.png>
   protected method handleAftertouchAmtChanged(int _slotIdx, float _amt) {
      ar_sound.setAftertouchModAmt(_slotIdx, int(_amt));
      kit_dialog.queueSendSound(track_idx);
      Global.Print("Aftertouch amt["+(_slotIdx+1)+"] is \""+(ar_sound.getAftertouchModAmt(_slotIdx))+"\"");
   }

   // <ui_kbd.png>
   public virtual onKey(Key _key) : boolean {
      switch(_key.pressed)
      {
         case VKEY_ESCAPE:
         case 'w':
            hide();
            return true;

         default:
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      switch(@(ap))
      {
         case @(cm_chromatic):
            handleChromaticModeChanged();
            return true;

         case @(cb_legacyfxsend):
            handleLegacyFXSendChanged();
            return true;

         case @(cb_fltenvreset):
            handleFltEnvResetChanged();
            return true;

         case @(cb_veltovol):
            handleVelToVolChanged();
            return true;

         case @(cm_vel_dest_1):
            handleVelocityDestChanged(0, cm_vel_dest_1.getSelectedOption());
            return true;

         case @(fp_vel_amt_1):
            handleVelocityAmtChanged(0, fp_vel_amt_1.getFloatValue());
            refocusDefaultAfterAction(acName);
            return true;

         case @(cm_vel_dest_2):
            handleVelocityDestChanged(1, cm_vel_dest_2.getSelectedOption());
            return true;

         case @(fp_vel_amt_2):
            handleVelocityAmtChanged(1, fp_vel_amt_2.getFloatValue());
            refocusDefaultAfterAction(acName);
            return true;

         case @(cm_vel_dest_3):
            handleVelocityDestChanged(2, cm_vel_dest_3.getSelectedOption());
            return true;

         case @(fp_vel_amt_3):
            handleVelocityAmtChanged(2, fp_vel_amt_3.getFloatValue());
            refocusDefaultAfterAction(acName);
            return true;

         case @(cm_vel_dest_4):
            handleVelocityDestChanged(3, cm_vel_dest_4.getSelectedOption());
            return true;

         case @(fp_vel_amt_4):
            handleVelocityAmtChanged(3, fp_vel_amt_4.getFloatValue());
            refocusDefaultAfterAction(acName);
            return true;

         case @(cm_at_dest_1):
            handleAftertouchDestChanged(0, cm_at_dest_1.getSelectedOption());
            return true;

         case @(fp_at_amt_1):
            handleAftertouchAmtChanged(0, fp_at_amt_1.getFloatValue());
            refocusDefaultAfterAction(acName);
            return true;

         case @(cm_at_dest_2):
            handleAftertouchDestChanged(1, cm_at_dest_2.getSelectedOption());
            return true;

         case @(fp_at_amt_2):
            handleAftertouchAmtChanged(1, fp_at_amt_2.getFloatValue());
            refocusDefaultAfterAction(acName);
            return true;

         case @(cm_at_dest_3):
            handleAftertouchDestChanged(2, cm_at_dest_3.getSelectedOption());
            return true;

         case @(fp_at_amt_3):
            handleAftertouchAmtChanged(2, fp_at_amt_3.getFloatValue());
            refocusDefaultAfterAction(acName);
            return true;

         case @(cm_at_dest_4):
            handleAftertouchDestChanged(3, cm_at_dest_4.getSelectedOption());
            return true;

         case @(fp_at_amt_4):
            handleAftertouchAmtChanged(3, fp_at_amt_4.getFloatValue());
            refocusDefaultAfterAction(acName);
            return true;

         case @(bt_close):
            hide();
            return true;
      }

      return Dialog::consumeAction(_ac);
   }

}
