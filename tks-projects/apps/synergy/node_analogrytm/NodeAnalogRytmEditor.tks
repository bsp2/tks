// ----
// ---- file   : NodeAnalogRytmEditor.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2016-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 27Feb2016, 28Feb2016, 29Feb2016, 01Mar2016, 02Mar2016, 03Mar2016, 04Mar2016
// ----          05Mar2016, 06Mar2016, 07Mar2016, 08Mar2016, 09Mar2016, 24Nov2016, 19Jan2017
// ----          23Jan2017, 09Feb2017, 18Mar2017, 24Mar2017, 16Jun2017, 07Jul2017, 08Jul2017
// ----          09Jul2017, 21Aug2017, 01Sep2017, 13Oct2017, 04Jan2018, 17Jun2018, 24Nov2018
// ----          18May2019, 29Aug2019, 08Sep2019, 20Sep2019, 21Oct2019, 25Oct2019, 27Oct2019
// ----          28Oct2019, 05Nov2019, 07Nov2019, 08Nov2019, 25Nov2022, 19Feb2023, 04Mar2023
// ----          21Sep2023, 25Sep2023, 03Oct2023, 24Nov2023, 25Nov2023, 26Nov2023, 27Nov2023
// ----          01Dec2023, 22Mar2024
// ----
// ----
// ----

module MNodeAnalogRytmEditor;

use namespace ui;
use namespace st2;


// <class.png>
class NodeAnalogRytmEditor extends NodeEditor, MIDIMapEventListener, ActionProvider, MIDIMapDefs {

   define String TA_UPDATE_STATE;
   define String TA_UPDATE_PERIODIC;
   define String TA_MIDI_LEARN;

   protected TimerAction *ta_update_state;
   protected TimerAction *ta_update_periodic;
   protected TimerAction *ta_midi_learn;

   protected int ta_update_state_count;

   define int TAB_SNAPSHOT = 0;
   define int TAB_IO       = 1;
   define int TAB_KIT      = 2;
   define int TAB_PATTERN  = 3;
   define int TAB_MUTE     = 4;
   define int TAB_PERF     = 5;
   define int TAB_MAP      = 6;

   public NodeAnalogRytm *ar;

   protected TabSwitch *ts_groups;

   // Snapshot:
   protected ComboBox   *cm_snapshot_nr;
   protected Label      *lb_snapshot_nr;
   protected TextField  *tf_snapshot_name;

   protected Button    *bt_snapshot_alloc;
   protected Button    *bt_snapshot_tools;
   protected PopupMenu *pm_snapshot_tools;
   protected Button    *bt_snapshot_free;

   // IO:
   protected ComboBox *cm_in_dev;
   protected CheckBox *cb_in_en;

   protected ComboBox *cm_out_dev;
   protected CheckBox *cb_out_en;

   protected FloatParam *fp_io_patnumparts;
   protected Button     *bt_io_reset;
   protected CheckBox   *cb_io_mute_note;
   protected CheckBox   *cb_io_skip_mute;
   protected CheckBox   *cb_io_skip_perf;

   protected Button   *bt_io_trksound_all;
   protected CheckBox *cb_io_trksound_perf;
   protected CheckBox *cb_io_trksound_scene;
   protected CheckBox *cb_io_trksound_fx;

   protected CheckBox *cb_io_trksound_1;
   protected CheckBox *cb_io_trksound_2;
   protected CheckBox *cb_io_trksound_3;
   protected CheckBox *cb_io_trksound_4;
   protected CheckBox *cb_io_trksound_5;
   protected CheckBox *cb_io_trksound_6;
   protected CheckBox *cb_io_trksound_7;
   protected CheckBox *cb_io_trksound_8;
   protected CheckBox *cb_io_trksound_9;
   protected CheckBox *cb_io_trksound_10;
   protected CheckBox *cb_io_trksound_11;
   protected CheckBox *cb_io_trksound_12;

   protected ComboBox *cm_io_kit_note_redirect;
   protected CheckBox *cb_io_kiteditor_trkswitch;
   protected CheckBox *cb_io_kit_note_redirect_pressure;


   // Kit:
   protected TextField  *tf_kit_name;
   protected Label      *lb_kit_state;
   protected ComboBox   *cm_kit_track;
   protected FloatParam *fp_kit_tracklevel;
   protected Button     *bt_kit_edit;
   protected Button     *bt_kit_recv;
   protected PopupMenu  *pm_kit_recv;
   protected Button     *bt_kit_send;
   protected Button     *bt_kit_mix;
   protected CheckBox   *cb_kit_mix;
   protected NAR_KitTM  *tm_kit;
   protected TableView  *tv_kit;
   protected Button     *bt_kit_add;
   protected Button     *bt_kit_remove;
   protected Button     *bt_kit_moveup;
   protected Button     *bt_kit_movedown;
   protected Button     *bt_kit_tools;
   protected PopupMenu  *pm_kit_tools;


   // Pattern:
   protected TextField     *tf_pattern_name;
   protected Label         *lb_pattern_state;
   protected Button        *bt_pattern_recv;
   protected Button        *bt_pattern_send;
   protected NAR_PatternTM *tm_pattern;
   protected TableView     *tv_pattern;
   protected Button        *bt_pattern_add;
   protected Button        *bt_pattern_remove;
   protected Button        *bt_pattern_moveup;
   protected Button        *bt_pattern_movedown;
   protected Button        *bt_pattern_tools;
   protected PopupMenu     *pm_pattern_tools;

   // Mute State:
   protected TextField     *tf_mute_name;
   protected Button        *bt_mute_store;
   protected Button        *bt_mute_send;
   protected NAR_MuteTM    *tm_mute;
   protected TableView     *tv_mute;
   protected Button        *bt_mute_add;
   protected Button        *bt_mute_remove;
   protected Button        *bt_mute_moveup;
   protected Button        *bt_mute_movedown;
   protected Button        *bt_mute_tools;
   protected PopupMenu     *pm_mute_tools;

   // Perf State:
   protected TextField     *tf_perf_name;
   protected Button        *bt_perf_store;
   protected Button        *bt_perf_send;
   protected NAR_PerfTM    *tm_perf;
   protected TableView     *tv_perf;
   protected Button        *bt_perf_add;
   protected Button        *bt_perf_remove;
   protected Button        *bt_perf_moveup;
   protected Button        *bt_perf_movedown;
   protected Button        *bt_perf_tools;
   protected PopupMenu     *pm_perf_tools;

   // Input map:
   protected NAR_MapGroupTM  *tm_mapgrp;
   protected TableView       *tv_mapgrp;
   protected Button          *bt_mapgrp_add;
   protected Button          *bt_mapgrp_remove;
   protected Button          *bt_mapgrp_moveup;
   protected Button          *bt_mapgrp_movedown;
   protected TextField       *tf_mapgrp_name;

   protected NAR_MapEntryTM  *tm_mapen;
   protected TableView       *tv_mapen;
   protected Button          *bt_mapen_add;
   protected Button          *bt_mapen_remove;
   protected Button          *bt_mapen_moveup;
   protected Button          *bt_mapen_movedown;
   protected TextField       *tf_mapen_name;
   protected ComboBox        *cm_mapen_input_id1;
   protected ComboBox        *cm_mapen_input_id2;
   protected FloatParam      *fp_mapen_input_arg1;
   protected FloatParam      *fp_mapen_input_arg2;
   protected Button          *bt_mapen_learn;


   protected NAR_MapActionTM  *tm_mapac;
   protected TableView        *tv_mapac;
   protected Button           *bt_mapac_add;
   protected Button           *bt_mapac_remove;
   protected Button           *bt_mapac_moveup;
   protected Button           *bt_mapac_movedown;
   protected TextField        *tf_mapac_name;
   protected ComboBox         *cm_mapac_action_id;
   protected FloatParam       *fp_mapac_arg1;
   protected FloatParam       *fp_mapac_arg2;
   protected FloatParam       *fp_mapac_arg3;
   protected ComboBox         *cm_mapac_ext_dev;
   protected ComboBox         *cm_mapac_ext_ch;
   protected Button           *bt_mapac_learn;

   // // protected Button *bt_test_read_kitx;
   // // protected Button *bt_test_write_kitx;

   // // protected Button *bt_test_read_patx;
   // // protected Button *bt_test_write_patx;

   static StringArray snapshotnr_options;
   static StringArray ar_patnr_options;

   Dialog_AR_DeleteSnapshot  *dlg_deletesnapshot;
   Dialog_AR_DeleteKit       *dlg_deletekit;
   Dialog_DeletePattern      *dlg_deletepattern;
   Dialog_AR_DeleteMute      *dlg_deletemute;
   Dialog_AR_DeletePerf      *dlg_deleteperf;
   Dialog_AR_DeleteMapGroup  *dlg_deletemapgrp;
   Dialog_AR_DeleteMapEntry  *dlg_deletemapen;
   Dialog_AR_DeleteMapAction *dlg_deletemapac;

   static String kit_open_suggested_file;
   static String pattern_open_suggested_file;

   static StringArray kit_file_filter_names = [ "Kit SysEx dump (*.syx)" ];
   static StringArray kit_file_filter_strings = [ "*.syx" ];

   static StringArray pattern_file_filter_names = [ "Pattern SysEx dump (*.syx)" ];
   static StringArray pattern_file_filter_strings = [ "*.syx" ];


   define int LEARN_NONE    = 0;
   define int LEARN_INPUT   = 1;
   define int LEARN_ACTION  = 2;
   // (note) learn_mode is stored in node (needed by midi recording)

   static StringArray learn_mode_names = ["None",
                                          "Input",
                                          "Action"
                                          ];
   protected boolean b_learning; // true while scanning MIDI input
   define int LEARN_TIMEOUT = 49;  // number of ta_midi_learn timeouts (=> 50*200 = 10 sec)
   define int TINT32_LEARN = #58ef6467;
   protected int learn_timeout;

   protected int learn_input_id; // 1 or 2
   protected int learn_input_last_cc;

   static StringArray trk_options = [
      "0:--",
      "1:BD",
      "2:SD",
      "3:RS",
      "4:CP",
      "5:BT",
      "6:LT",
      "7:MT",
      "8:HT",
      "9:CH",
      "10:OH",
      "11:CY",
      "12:CB"
                                     ];

   static StringArray scene_options = [
      "- - - ",
      "Sc 1",
      "Sc 2",
      "Sc 3",
      "Sc 4",
      "Sc 5",
      "Sc 6",
      "Sc 7",
      "Sc 8",
      "Sc 9",
      "Sc 10",
      "Sc 11",
      "Sc 12"
                                     ];

   protected TextInputDialog *dlg_kit_uid_base;
   protected TextInputDialog *dlg_pat_uid_base;
   protected TextInputDialog *dlg_mute_uid_base;
   protected TextInputDialog *dlg_perf_uid_base;

   protected TextInputDialog *dlg_kit_samplenr;

   protected NAR_EditKitDialog *dlg_edit_kit;

   protected AR_Global   *ar_global;
   protected AR_Settings *ar_settings;


   // <init.png>
   public virtual init() : boolean {

      if(initPakFile("NodeAnalogRytmEditor.xfm"))
      {
         if(autoResolveIds(this))
         {
            tm_kit <= new NAR_KitTM;
            tm_kit.pat <= null;
            tm_kit.initTableModel();
            tv_kit.setTableModel(tm_kit);

            tm_pattern <= new NAR_PatternTM;
            tm_pattern.pat <= null;
            tm_pattern.initTableModel();
            tv_pattern.setTableModel(tm_pattern);

            tm_mute <= new NAR_MuteTM;
            tm_mute.pat <= null;
            tm_mute.initTableModel();
            tv_mute.setTableModel(tm_mute);

            tm_perf <= new NAR_PerfTM;
            tm_perf.pat <= null;
            tm_perf.initTableModel();
            tv_perf.setTableModel(tm_perf);

            tm_mapgrp <= new NAR_MapGroupTM;
            tm_mapgrp.pat <= null;
            tm_mapgrp.initTableModel();
            tv_mapgrp.setTableModel(tm_mapgrp);

            tm_mapen <= new NAR_MapEntryTM;
            tm_mapen.grp <= null;
            tm_mapen.initTableModel();
            tv_mapen.setTableModel(tm_mapen);

            tm_mapac <= new NAR_MapActionTM;
            tm_mapac.entry <= null;
            tm_mapac.initTableModel();
            tv_mapac.setTableModel(tm_mapac);

            genSnapshotNrOptions();
            genARPatNrOptions();
            cm_snapshot_nr.setOptions(snapshotnr_options);

            cm_mapen_input_id1.setOptions(NAR_MapEntry.input_names);
            cm_mapen_input_id2.setOptions(NAR_MapEntry.input_names);

            cm_mapac_action_id.setOptions(NAR_MapAction.action_names);

            ts_groups.setActiveTabIndex(TAB_KIT);

            initMMC();

            initTimers();

            return initDialogs();
         }
      }

      return false;
   }

   // <ui_timer.png>
   protected method initTimers() {
      ta_update_state     <= TimerAction.New(TA_UPDATE_STATE,    this, 100);
      ta_update_periodic  <= TimerAction.New(TA_UPDATE_PERIODIC, this, 100);
      ta_midi_learn       <= TimerAction.New(TA_MIDI_LEARN,      this, 200);
   }

   // <ui_init.png>
   protected method initEditKitDialog() : boolean {
      dlg_edit_kit <= new NAR_EditKitDialog;
      if(!dlg_edit_kit.init())
      {
         Global.Error("NAR_EditKitDialog::init() failed");
         return false;
      }
      return true;
   }

   // <ui_init.png>
   protected method initDialogs() : boolean {
      return initEditKitDialog();
   }

   // <midi_mmc.png>
   protected method initMMC() {

      mmcInit("NodeAnalogRytmEditor");

      // From PageNode: (so these show up in the map editor)
      root_form.pg_node.addBaseMMCTargets(this);
   }

   // <midi_mmc.png>
   public virtual mmcHandleEvent(MIDIMapEvent _ev) : boolean {
      // trace "xxx NodeAnalogRytmEditor::mmcHandleEvent";

      if(!mmcIsBindableEvent(_ev))
         return false;

      MIDIMapEvent boundEv <= mmcGetBindingByEvent(_ev);

      if(null != boundEv)
      {
         switch(boundEv.bound_target.target_name)
         {
            default:
               return root_form.pg_node.mmcHandleNodeTarget(boundEv.bound_target.target_name);
         }
      }

      return false;
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {

      layers.joinRR(layers,
                    [
                       ts_groups,
                       ]
                    );

      switch(ts_groups.getActiveTabIndex())
      {
         case TAB_SNAPSHOT:
            layers.joinRR(layers,
                          [cm_snapshot_nr,
                           tf_snapshot_name,
                           bt_snapshot_alloc,
                           bt_snapshot_tools,
                           bt_snapshot_free,
                           ]
                          );
            break;

         case TAB_IO:
            layers.joinRR(layers,
                          [
                             cm_in_dev,
                             cb_in_en,

                             cm_out_dev,
                             cb_out_en,

                             fp_io_patnumparts,

                             bt_io_reset,

                             cb_io_mute_note,
                             cb_io_skip_mute,
                             cb_io_skip_perf,

                             cm_io_kit_note_redirect,
                             cb_io_kiteditor_trkswitch,
                             cb_io_kit_note_redirect_pressure,

                             bt_io_trksound_all,
                             cb_io_trksound_perf,
                             cb_io_trksound_scene,
                             cb_io_trksound_fx,
                             cb_io_trksound_1,
                             cb_io_trksound_2,
                             cb_io_trksound_3,
                             cb_io_trksound_4,
                             cb_io_trksound_5,
                             cb_io_trksound_6,
                             cb_io_trksound_7,
                             cb_io_trksound_8,
                             cb_io_trksound_9,
                             cb_io_trksound_10,
                             cb_io_trksound_11,
                             cb_io_trksound_12,
                           ]
                          );
            break;

         case TAB_KIT:
            layers.joinRR(layers,
                          [
                             tv_kit,
                             tf_kit_name,
                             bt_kit_edit,
                             bt_kit_mix,
                             cb_kit_mix,
                             bt_kit_send,
                             bt_kit_recv,
                             bt_kit_tools,
                             bt_kit_add,
                             bt_kit_remove,
                             bt_kit_moveup,
                             bt_kit_movedown,
                           ]
                          );
            break;

         case TAB_PATTERN:
            layers.joinRR(layers,
                          [
                             tv_pattern,
                             tf_pattern_name,
                             bt_pattern_send,
                             bt_pattern_recv,
                             bt_pattern_tools,
                             bt_pattern_add,
                             bt_pattern_remove,
                             bt_pattern_moveup,
                             bt_pattern_movedown,
                           ]
                          );
            break;

         case TAB_MUTE:
            layers.joinRR(layers,
                          [
                             tv_mute,
                             tf_mute_name,
                             bt_mute_send,
                             bt_mute_store,
                             bt_mute_tools,
                             bt_mute_add,
                             bt_mute_remove,
                             bt_mute_moveup,
                             bt_mute_movedown,
                           ]
                          );
            break;

         case TAB_PERF:
            layers.joinRR(layers,
                          [
                             tv_perf,
                             tf_perf_name,
                             bt_perf_send,
                             bt_perf_store,
                             bt_perf_tools,
                             bt_perf_add,
                             bt_perf_remove,
                             bt_perf_moveup,
                             bt_perf_movedown,
                           ]
                          );
            break;

         case TAB_MAP:
            layers.joinRR(layers,
                          [
                             tv_mapgrp,
                             tf_mapgrp_name,

                             tv_mapen,
                             tf_mapen_name,
                             cm_mapen_input_id1,
                             cm_mapen_input_id2,
                             fp_mapen_input_arg1,
                             fp_mapen_input_arg2,
                             bt_mapen_learn,

                             tv_mapac,
                             tf_mapac_name,
                             cm_mapac_action_id,
                             fp_mapac_arg1,
                             fp_mapac_arg2,
                             fp_mapac_arg3,
                             cm_mapac_ext_dev,
                             cm_mapac_ext_ch,
                             bt_mapac_learn,

                             bt_mapgrp_add,
                             bt_mapgrp_remove,
                             bt_mapgrp_moveup,
                             bt_mapgrp_movedown,

                             bt_mapen_add,
                             bt_mapen_remove,
                             bt_mapen_moveup,
                             bt_mapen_movedown,

                             bt_mapac_add,
                             bt_mapac_remove,
                             bt_mapac_moveup,
                             bt_mapac_movedown,
                           ]
                          );
            break;
      }

      return layers;
   }

   // <ui_show.png>
   public virtual showNode(NodeAnalogRytm _ar) {
      ar <= _ar;

      cm_in_dev.setOptions(MIDI.out_device_names_sorted);
      cm_in_dev.setOptionBGColors(MIDI.out_device_bgcolors_sorted);

      cm_out_dev.setOptions(MIDI.out_device_names_sorted);
      cm_out_dev.setOptionBGColors(MIDI.out_device_bgcolors_sorted);

      boolean bEnable;

      bEnable = ar.b_in_en;
      cb_in_en.setSelected(bEnable);
      cm_in_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(ar.in_dev));
      cm_in_dev.setEditable(bEnable);

      bEnable = ar.b_out_en;
      cb_out_en.setSelected(bEnable);
      cm_out_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(ar.out_dev));
      cm_out_dev.setEditable(bEnable);

      fp_io_patnumparts.setValue(ar.ui_pattern_num_parts);

      cb_io_mute_note.setSelected(ar.b_mute_note);
      cb_io_skip_mute.setSelected(ar.b_skip_mute);
      cb_io_skip_perf.setSelected(ar.b_skip_perf);

      cb_io_trksound_perf.setSelected(ar.b_lock_perf);
      cb_io_trksound_scene.setSelected(ar.b_lock_scene);
      cb_io_trksound_fx.setSelected(ar.b_lock_fx);
      cb_io_trksound_1.setSelected(ar.b_lock_trk_1);
      cb_io_trksound_2.setSelected(ar.b_lock_trk_2);
      cb_io_trksound_3.setSelected(ar.b_lock_trk_3);
      cb_io_trksound_4.setSelected(ar.b_lock_trk_4);
      cb_io_trksound_5.setSelected(ar.b_lock_trk_5);
      cb_io_trksound_6.setSelected(ar.b_lock_trk_6);
      cb_io_trksound_7.setSelected(ar.b_lock_trk_7);
      cb_io_trksound_8.setSelected(ar.b_lock_trk_8);
      cb_io_trksound_9.setSelected(ar.b_lock_trk_9);
      cb_io_trksound_10.setSelected(ar.b_lock_trk_10);
      cb_io_trksound_11.setSelected(ar.b_lock_trk_11);
      cb_io_trksound_12.setSelected(ar.b_lock_trk_12);

      // IO.kit editor redirect
      cm_io_kit_note_redirect.setSelectedOption(ar.kit_note_redirect_mode);
      cb_io_kiteditor_trkswitch.setSelected(ar.b_kit_editor_trkswitch);
      cb_io_kit_note_redirect_pressure.setSelected(ar.b_note_redirect_pressure);
      updateKitTrack();


      // Pattern:
      updateSnapshotNrComboBox();
      cm_snapshot_nr.setSelectedOption(ar.nodeGetCurrentEditPatternNr());

      tv_kit.setLeadSelection(-1);
      tv_pattern.setLeadSelection(-1);
      tv_mute.setLeadSelection(-1);
      tv_perf.setLeadSelection(-1);

      cm_mapac_ext_dev.setOptions(MIDI.out_device_names_sorted);
      cm_mapac_ext_dev.setOptionBGColors(MIDI.out_device_bgcolors_sorted);

      handleSnapshotChanged(false/*bFromUI*/);

      // Set pattern for NodeTracker import
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Pattern narPattern <= pat.getCurrentNARPattern();
         if(null != narPattern)
         {
            /*NodeAnalogRytm*/Global.SetARPatternClipboard(narPattern.ar_pattern);
         }
      }

      MIDI.AddMIDIMapEventListener(this);
   }

   // <method.png>
   public virtual showNodePost() {
      // trace "xxx NodeAnalogRytmEditor::showNodePost";

      // // ta_update_state.schedule();

      refocusDefault();

      ta_update_periodic.schedule();
   }

   // <ui_focus.png>
   public virtual refocusDefault() {
      if(!NodeEditor.b_lock_kbdfocus)
      {
         UI.SetKeyboardFocus(ts_groups);
      }
   }

   // <ui_update.png>
   protected method updateSnapshotNrComboBox() {
      local StringArray patNrOptionsShort;
      local StringArray patNrOptionsLong;
      local IntArray patNrColors;
      Node.CalcPatNrOptions(ar, patNrOptionsShort, patNrOptionsLong, patNrColors);
      cm_snapshot_nr.setOptions(patNrOptionsShort);
      cm_snapshot_nr.setOptionsLong(patNrOptionsLong);
      cm_snapshot_nr.setOptionBGColors(patNrColors);
   }

   // <method_get.png>
   public method getEditPattern() : NodeAnalogRytmPattern {
      if(null != ar)
      {
         NodeAnalogRytmPattern pat <= ar.nodeGetCurrentEditPattern();
         return pat;
      }
      return null;
   }

   // <method_get.png>
   public method getSelectedNARKit() : NAR_Kit {
      if(null != ar)
      {
         NodeAnalogRytmPattern pat <= ar.nodeGetCurrentEditPattern();
         if(null != pat)
            return pat.getCurrentNARKit();
      }
      return null;
   }

   // <method_get.png>
   public method getSelectedNARPattern() : NAR_Pattern {
      if(null != ar)
      {
         NodeAnalogRytmPattern pat <= ar.nodeGetCurrentEditPattern();
         if(null != pat)
            return pat.getCurrentNARPattern();
      }
      return null;
   }

   // <method_get.png>
   public method getSelectedNARMute() : NAR_Mute {
      if(null != ar)
      {
         NodeAnalogRytmPattern pat <= ar.nodeGetCurrentEditPattern();
         if(null != pat)
            return pat.getCurrentNARMute();
      }
      return null;
   }

   // <method_get.png>
   public method getSelectedNARPerf() : NAR_Perf {
      if(null != ar)
      {
         NodeAnalogRytmPattern pat <= ar.nodeGetCurrentEditPattern();
         if(null != pat)
            return pat.getCurrentNARPerf();
      }
      return null;
   }

   // <method_get.png>
   public method getSelectedMapGroup() : NAR_MapGroup {
      if(null != ar)
      {
         NodeAnalogRytmPattern pat <= ar.nodeGetCurrentEditPattern();
         if(null != pat)
            return pat.getCurrentMapGroup();
      }
      return null;
   }

   // <method_get.png>
   public method getSelectedMapEntry() : NAR_MapEntry {
      NAR_MapGroup grp <= getSelectedMapGroup();
      if(null != grp)
         return grp.entries.get(tm_mapen.getCursorIndex());
      return null;
   }

   // <method_get.png>
   public method getSelectedMapAction() : NAR_MapAction {
      NAR_MapEntry en <= getSelectedMapEntry();
      if(null != en)
         return en.actions.get(tm_mapac.getCursorIndex());
      return null;
   }

   // <ui_handle.png>
   protected method handleSnapshotChanged(boolean _bFromUI) {
      NodeAnalogRytmPattern pat <= ar.nodeGetCurrentEditPattern();

      updateSnapshotNrLabel();

      if(!_bFromUI)
      {
         cm_snapshot_nr.setSelectedOption(ar.nodeGetCurrentEditPatternNr());
         cm_snapshot_nr.redraw();
      }

      if(null != pat)
      {
         tm_kit.pat <= pat;
         tv_kit.tableModelChanged();
         if(_bFromUI)
            tv_kit.moveCursorToRow(pat.current_kit_idx);
         else
            tv_kit.moveCursorToRowNoAction(pat.current_kit_idx);
         tv_kit.setEditable(true);

         tm_pattern.pat <= pat;
         tv_pattern.tableModelChanged();
         if(_bFromUI)
            tv_pattern.moveCursorToRow(pat.current_pattern_idx);
         else
            tv_pattern.moveCursorToRowNoAction(pat.current_pattern_idx);
         tv_pattern.setEditable(true);

         tm_mute.pat <= pat;
         tv_mute.tableModelChanged();
         if(_bFromUI)
            tv_mute.moveCursorToRow(pat.current_mute_idx);
         else
            tv_mute.moveCursorToRowNoAction(pat.current_mute_idx);
         tv_mute.setEditable(true);

         tm_perf.pat <= pat;
         tv_perf.tableModelChanged();
         if(_bFromUI)
            tv_perf.moveCursorToRow(pat.current_perf_idx);
         else
            tv_perf.moveCursorToRowNoAction(pat.current_perf_idx);
         tv_perf.setEditable(true);

         tm_mapgrp.pat <= pat;
         tv_mapgrp.tableModelChanged();
         if(_bFromUI)
            tv_mapgrp.moveCursorToRow(pat.current_group_idx);
         else
            tv_mapgrp.moveCursorToRowNoAction(pat.current_group_idx);
         tv_mapgrp.setEditable(true);

         tm_mapen.grp <= null;
         tv_mapen.tableModelChanged();
         if(_bFromUI)
            tv_mapen.moveCursorToFirstRowIfNoneSelected();
         tv_mapen.setEditable(true);

         tm_mapac.entry <= null;
         tv_mapac.tableModelChanged();
         tv_mapac.moveCursorToFirstRowIfNoneSelected();
         tv_mapac.setEditable(true);

         tf_snapshot_name.setText(pat.pat_name);
         tf_snapshot_name.setEditable(true);
      }
      else
      {
         tm_kit.pat <= null;
         tv_kit.tableModelChanged();
         tv_kit.setEditable(false);

         tm_pattern.pat <= null;
         tv_pattern.tableModelChanged();
         tv_pattern.setEditable(false);

         tm_mute.pat <= null;
         tv_mute.tableModelChanged();
         tv_mute.setEditable(false);

         tm_perf.pat <= null;
         tv_perf.tableModelChanged();
         tv_perf.setEditable(false);

         tm_mapgrp.pat <= null;
         tv_mapgrp.tableModelChanged();
         tv_mapgrp.setEditable(false);

         tm_mapen.grp <= null;
         tv_mapen.tableModelChanged();
         tv_mapen.setEditable(false);

         tm_mapac.entry <= null;
         tv_mapac.tableModelChanged();
         tv_mapac.setEditable(false);

         tf_snapshot_name.setText("");
         tf_snapshot_name.setEditable(false);
      }

      handleKitChanged(false/*bFromUI*/);
      handlePatternChanged(false/*bFromUI*/);
      handleMuteChanged(false/*bFromUI*/);
      handlePerfChanged(false/*bFromUI*/);
      handleMapGroupChanged(false/*bFromUI*/);

      setLearnMode(LEARN_NONE, true/*bQuiet*/);

      redraw();

      root_form.pg_node.handleEditPatternChanged();
   }

   // <method_get.png>
   protected method getLearnButton() : Button {
      Button *bt;

      switch(ar.learn_mode)
      {
         default:
         case LEARN_NONE:
            bt <= null;
            break;

         case LEARN_INPUT:
            bt <= bt_mapen_learn;
            break;

         case LEARN_ACTION:
            bt <= bt_mapac_learn;
            break;
      }

      return bt;
   }

   // <method_set.png>
   protected method setLearnMode(int _mode, boolean _bQuiet) {

      if(ar.learn_mode == _mode)
      {
         // Toggle off
         if(!_bQuiet)
            Global.Print("Stop learn <"+learn_mode_names.get(ar.learn_mode)+">");

         ar.learn_mode = LEARN_NONE;
      }
      else
      {
         if(!_bQuiet)
         {
            if(ar.learn_mode != LEARN_NONE)
            {
               if(LEARN_NONE == _mode)
               {
                  Global.Print("Stop learn <"+learn_mode_names.get(ar.learn_mode)+">");
               }
            }
         }

         ar.learn_mode = _mode;

         if(!_bQuiet)
         {
            if(LEARN_NONE != _mode)
            {
               learn_input_id = 1;
               learn_input_last_cc = -1;
               Global.Print("Start learn <"+learn_mode_names.get(ar.learn_mode)+">");
            }
         }
      }

      String caption = " Learn ";

      bt_mapen_learn    .setBackgroundTint(0);
      bt_mapen_learn    .setCaption(caption);
      bt_mapen_learn    .redraw();
      bt_mapac_learn    .setBackgroundTint(0);
      bt_mapac_learn    .setCaption(caption);
      bt_mapac_learn    .redraw();

      Button bt <= getLearnButton();

      if(null != bt)
      {
         bt.setCaption(" Stop ");
         bt.setBackgroundTint(TINT32_LEARN);
         bt.redraw();
         learn_timeout = LEARN_TIMEOUT;
         ta_midi_learn.schedule();
      }
      else
      {
         ta_midi_learn.cancel();
         learn_timeout = -1;
      }
   }

   // <ui_hide.png>
   public virtual leaveNode() {
      MIDI.RemoveMIDIMapEventListener(this);

      ta_update_state.cancel();
      ta_update_periodic.cancel();

      setLearnMode(LEARN_NONE, true/*bQuiet*/);
   }

   // <ui_hide.png>
   public virtual unsetNode() {
      ar <= null;
   }

   // <midi_mmt.png>
   public virtual mmtHandleGlobalValue(float _val) : boolean {
      Layer kbdLayer <= UI.GetKeyboardFocus();

      return false;
   }

   // <midi_mmt.png>
   public virtual mmtHandleGlobalValueDelta(int _delta) : boolean {
      Layer kbdLayer <= UI.GetKeyboardFocus();

      return false;
   }

   // <ui_update.png>
   protected method updateSnapshotNrLabel() {
      Integer io = ar.nodeGetCurrentEditPatternNr();
      lb_snapshot_nr.setCaption("Snapshot:\n  ("+io.printf("0x%02x")+")");
      lb_snapshot_nr.redraw();
   }

   // <ui_init.png>
   protected method genSnapshotNrOptions() {
      snapshotnr_options.empty();
      local Integer io = 1;
      local Integer ioz = 0;
      loop(32)
      {
         snapshotnr_options.add(io.printf("%02dA")+ioz.printf("/0x%02x"));
         ioz++;
         snapshotnr_options.add(io.printf("%02dB")+ioz.printf("/0x%02x"));
         ioz++;
         snapshotnr_options.add(io.printf("%02dC")+ioz.printf("/0x%02x"));
         ioz++;

         if(127 != ioz)
         {
            snapshotnr_options.add(io.printf("%02dD")+ioz.printf("/0x%02x"));
            ioz++;
            io++;
         }
      }
      snapshotnr_options.add("--/");
   }

   // <ui_init.png>
   protected method genARPatNrOptions() {
      ar_patnr_options.empty();
      int patLetter = 'A';

      loop(16)
      {
         local Integer io = 1;
         loop(16)
         {
            ar_patnr_options.add(tcchar(patLetter)+io.printf("%02d"));
            io++;
         }
         patLetter++;
      }
   }

   // <ui_handle.png>
   protected =replay= method handleSnapshotAlloc() : NodeAnalogRytmPattern {
      local NodeAnalogRytmPattern p;

      p.patInit(ar, 0/*patNr placeholder*/);

      int patIdx;

      NodeAnalogRytmPattern pat <= getEditPattern();

      if(null != pat)
      {
         patIdx = ar.findFirstUnusedPattern(ar.nodeGetCurrentEditPatternNr());

         if(-1 == patIdx)
         {
            patIdx = ar.findFirstUnusedPattern(0);
         }
      }
      else
      {
         patIdx = ar.nodeGetCurrentEditPatternNr();
      }

      // trace "xxx findFirstUnusedPattern: patIdx="+patIdx+" currentEditNr="+ar.nodeGetCurrentEditPatternNr();

      if(-1 != patIdx)
      {
         p.pat_nr = patIdx;
         ar.nodeSetPattern(patIdx, deref p);

         ar.nodeSetCurrentEditPatternNr(patIdx);

         ////if(!replay.b_playing)
         ar.nodeSetCurrentPlayPatternNr(patIdx);

         cm_snapshot_nr.setSelectedOption(patIdx);

         selectSnapshotByIdx(patIdx);

         handleSnapshotChanged(false/*bFromUI*/);

         Global.SuccessShort("New: Allocate snapshot "+cm_snapshot_nr.getSelectedOptionName()+" ("+(patIdx+1)+").");
         return p;
      }
      else
      {
         Global.Error("New: All snapshots in use.");
         return null;
      }
   }

   // <ui_show.png>
   protected method showSnapshotToolsMenu() {

      pm_snapshot_tools <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_snapshot_tools;

      NodeAnalogRytmPattern pat <= ar.nodeGetCurrentEditPattern();
      boolean bHavePat = (null != pat);

      pmb <= pm.addDefaultButton("Copy snapshot", "copy");
      pmb.setActive(bHavePat);

      pmb <= pm.addDefaultButton("Paste snapshot", "paste");
      pmb.setActive(bHavePat && null != pat.patGetClipboard());

      pmb <= pm.addDefaultButton("Clone snapshot", "clone");
      pmb.setActive(bHavePat);

      pm.resizeToMinimum();

      pm.showAboveLayer(bt_snapshot_tools);

      Global.Print("Show snapshot tools menu.");
   }

   // <ui_handle.png>
   protected method handleSnapshotCopy() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         pat.patCopyToClipboard();

         Global.Print("Snapshot copied to clipboard.");
      }
   }

   // <ui_handle.png>
   protected method handleSnapshotPaste() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null == pat)
      {
         handleSnapshotAlloc();
         pat <= getEditPattern();
      }

      if(null != pat)
      {
         if(pat.patCopyFromClipboard())
         {
            handleSnapshotChanged(false/*bFromUI*/);
            updateSnapshotNrComboBox();

            Global.SuccessShort("Clipboard pasted to snapshot.");
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleSnapshotClone() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         local NodeAnalogRytmPattern tmp;
         tmp.patInit(ar, 0);
         tmp.patCopyFrom(pat, false/*bClear*/);

         if(null != handleSnapshotAlloc())
         {
            pat <= getEditPattern();

            pat.patCopyFrom(tmp, false/*bClear*/);

            handleSnapshotChanged(false/*bFromUI*/);
            updateSnapshotNrComboBox();

            Global.SuccessShort("Snapshot cloned to "+cm_snapshot_nr.getSelectedOptionName()+".");
         }
      }
   }

   // <ui_handle.png>
   protected method handleSnapshotFree() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         dlg_deletesnapshot <= new Dialog_AR_DeleteSnapshot;
         dlg_deletesnapshot.run(this, pat.pat_name);
      }
   }

   // <ui_handle.png>
   public method handleSnapshotFree2() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         ar.nodeSetPattern(ar.edit_pattern_nr, null);

         pat <= null;

         handleSnapshotChanged(false/*bFromUI*/);
         updateSnapshotNrComboBox();

         Global.Print("Delete snapshot");
      }
   }

   // <ui_handle.png>
   protected method handleSelectSnapshot() {

      // trace "xxx cm_snapshot_nr.getSelectedOption()="+cm_snapshot_nr.getSelectedOption();

      ar.nodeSetCurrentEditPatternNr(cm_snapshot_nr.getSelectedOption());

      ar.nodeSetCurrentPlayPatternNr(cm_snapshot_nr.getSelectedOption());

      // trace "xxx AR:selectsnapshot: 1 ar.nodeGetCurrentEditPatternNr()="+ar.nodeGetCurrentEditPatternNr();

      handleSnapshotChanged(true/*bFromUI*/);

      NodeAnalogRytmPattern pat <= getEditPattern();
      // trace "xxx AR:selectsnapshot: 2 ar.nodeGetCurrentEditPatternNr()="+ar.nodeGetCurrentEditPatternNr();

      if(null != pat)
         Global.Print("Select snapshot "+cm_snapshot_nr.getSelectedOptionName()+" \""+pat.pat_name+"\".");
      else
         Global.Print("Select snapshot "+cm_snapshot_nr.getSelectedOptionName()+" <empty>.");
   }

   // <method.png>
   public virtual selectPatternByIdx(int _idx) {
      selectSnapshotByIdx(_idx);
   }

   // <method.png>
   protected method selectSnapshotByIdx(int _idx) {
      cm_snapshot_nr.setSelectedOption(_idx);

      handleSelectSnapshot();
   }

   // <ui_handle.png>
   protected =replay= method handleSelectPreviousSnapshot() {
      byte patNr = ar.nodeGetCurrentEditPatternNr();
      if(patNr > 0)
      {
         patNr--;

         ar.nodeSetCurrentEditPatternNr(patNr);
         ar.nodeSetCurrentPlayPatternNr(patNr);

         handleSnapshotChanged(false/*bFromUI*/);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleSelectNextSnapshot() {
      byte patNr = ar.nodeGetCurrentEditPatternNr();
      if(patNr < 127)
      {
         patNr++;

         ar.nodeSetCurrentEditPatternNr(patNr);
         ar.nodeSetCurrentPlayPatternNr(patNr);

         handleSnapshotChanged(false/*bFromUI*/);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleSelectPreviousUsedSnapshot() {
      byte patNr = ar.nodeGetCurrentEditPatternNr();
      patNr = ar.nodeFindPreviousPatternNrByUsedIdxWithOffset(patNr - 1, 0);
      if(patNr >= 0)
      {
         ar.nodeSetCurrentEditPatternNr(patNr);
         ar.nodeSetCurrentPlayPatternNr(patNr);

         handleSnapshotChanged(false/*bFromUI*/);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleSelectNextUsedSnapshot() {
      byte patNr = ar.nodeGetCurrentEditPatternNr();
      patNr = ar.nodeFindNextPatternNrByUsedIdxWithOffset(patNr + 1, 0);
      if(patNr >= 0)
      {
         ar.nodeSetCurrentEditPatternNr(patNr);
         ar.nodeSetCurrentPlayPatternNr(patNr);

         handleSnapshotChanged(false/*bFromUI*/);
      }
   }

   // // // <method.png>
   // // protected method playPatternByIdx(int _idx) {

   // //    selectPatternByIdx(_idx);

   // //    NMM_Pattern pat <= getEditPattern();

   // //    modmatrix.nodeSetCurrentPlayPatternNr(_idx);

   // //    Global.Print("Play pattern "+cm_snapshot_nr.getSelectedOptionName());
   // // }

   // <ui_handle.png>
   protected method handleSnapshotNameChanged() {
      NodeAnalogRytmPattern pat <= getEditPattern();

      if(null != pat)
      {
         pat.pat_name = tf_snapshot_name.getText();

         Global.Print("Snapshot name is \""+pat.pat_name+"\".");
      }
   }

   // <ui_handle.png>
   protected method handleInEnChanged() {
      boolean bEnable = cb_in_en.isSelected();
      ar.setEnableIn(bEnable);
      cm_in_dev.setEditable(bEnable);
      Global.Print("Input is "+Utils.GetEnableString(ar.b_in_en));
   }

   // <ui_handle.png>
   protected method handleInDevChanged() {
      ar.setInDev(MIDI.SortedToUnsortedDevIdx(cm_in_dev.getSelectedOption()));

      Global.Print("Input device is "+cm_in_dev.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleOutEnChanged() {
      boolean bEnable = cb_out_en.isSelected();
      ar.setEnableOut(bEnable);
      cm_out_dev.setEditable(bEnable);
      Global.Print("Output is "+Utils.GetEnableString(ar.b_out_en));
   }

   // <ui_handle.png>
   protected method handleOutDevChanged() {
      ar.setOutDev(MIDI.SortedToUnsortedDevIdx(cm_out_dev.getSelectedOption()));

      Global.Print("Output device is "+cm_out_dev.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handlePatternNumPartsChanged() {
      ar.setUIPatternNumParts(fp_io_patnumparts.getFloatValue());

      Global.Print("Pat.#parts="+ar.ui_pattern_num_parts+" ("+(15090/ar.ui_pattern_num_parts)+" bytes/part)");
   }

   // <ui_handle.png>
   protected method handleIOMuteNoteChanged() {
      ar.setEnableMuteNote(cb_io_mute_note.isSelected());

      Global.Print("Mute notes is "+Utils.GetEnableString(ar.b_mute_note));
   }

   // <ui_handle.png>
   protected method handleIOSkipMuteChanged() {
      ar.setEnableSkipMute(cb_io_skip_mute.isSelected());

      Global.Print("Skip Mute is "+Utils.GetEnableString(ar.b_skip_mute));
   }

   // <ui_handle.png>
   protected method handleIOSkipPerfChanged() {
      ar.setEnableSkipPerf(cb_io_skip_perf.isSelected());

      Global.Print("Skip Perf is "+Utils.GetEnableString(ar.b_skip_perf));
   }

   // <ui_handle.png>
   protected method handleIOReset() {
      ar.ioReset();

      Global.Print("Reset state tracker");
   }

   // // <ui_handle.png>
   // public method handleTestPatRead() {

   //    ar.runTest_PatQuery();
   // }

   // // <ui_handle.png>
   // public method handleTestPatWrite() {

   //    ar.runTest_PatSend();
   // }

   // // <ui_handle.png>
   // public method handleTestKitRead() {

   //    // ar.runTest_PatQuery();
   //    ar.runTest_KitQuery();
   // }

   // // <ui_handle.png>
   // public method handleTestKitWrite() {

   //    ar.runTest_KitSend();
   // }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSoundToggle() {
      boolean bSelectAll = !
         (cb_io_trksound_perf.isSelected()  &&
          cb_io_trksound_scene.isSelected() &&
          cb_io_trksound_fx.isSelected()    &&
          cb_io_trksound_1.isSelected()     &&
          cb_io_trksound_2.isSelected()     &&
          cb_io_trksound_3.isSelected()     &&
          cb_io_trksound_4.isSelected()     &&
          cb_io_trksound_5.isSelected()     &&
          cb_io_trksound_6.isSelected()     &&
          cb_io_trksound_7.isSelected()     &&
          cb_io_trksound_8.isSelected()     &&
          cb_io_trksound_9.isSelected()     &&
          cb_io_trksound_10.isSelected()    &&
          cb_io_trksound_11.isSelected()    &&
          cb_io_trksound_12.isSelected()
          );

      cb_io_trksound_perf .setSelected(bSelectAll);
      cb_io_trksound_scene.setSelected(bSelectAll);
      cb_io_trksound_fx   .setSelected(bSelectAll);
      cb_io_trksound_1    .setSelected(bSelectAll);
      cb_io_trksound_2    .setSelected(bSelectAll);
      cb_io_trksound_3    .setSelected(bSelectAll);
      cb_io_trksound_4    .setSelected(bSelectAll);
      cb_io_trksound_5    .setSelected(bSelectAll);
      cb_io_trksound_6    .setSelected(bSelectAll);
      cb_io_trksound_7    .setSelected(bSelectAll);
      cb_io_trksound_8    .setSelected(bSelectAll);
      cb_io_trksound_9    .setSelected(bSelectAll);
      cb_io_trksound_10   .setSelected(bSelectAll);
      cb_io_trksound_11   .setSelected(bSelectAll);
      cb_io_trksound_12   .setSelected(bSelectAll);

      ar.b_lock_perf_resetval   = cb_io_trksound_perf.isSelected();
      ar.b_lock_scene_resetval  = cb_io_trksound_scene.isSelected();
      ar.b_lock_fx_resetval     = cb_io_trksound_fx.isSelected();
      ar.b_lock_trk_1_resetval  = cb_io_trksound_1.isSelected();
      ar.b_lock_trk_2_resetval  = cb_io_trksound_2.isSelected();
      ar.b_lock_trk_3_resetval  = cb_io_trksound_3.isSelected();
      ar.b_lock_trk_4_resetval  = cb_io_trksound_4.isSelected();
      ar.b_lock_trk_5_resetval  = cb_io_trksound_5.isSelected();
      ar.b_lock_trk_6_resetval  = cb_io_trksound_6.isSelected();
      ar.b_lock_trk_7_resetval  = cb_io_trksound_7.isSelected();
      ar.b_lock_trk_8_resetval  = cb_io_trksound_8.isSelected();
      ar.b_lock_trk_9_resetval  = cb_io_trksound_9.isSelected();
      ar.b_lock_trk_10_resetval = cb_io_trksound_10.isSelected();
      ar.b_lock_trk_11_resetval = cb_io_trksound_11.isSelected();
      ar.b_lock_trk_12_resetval = cb_io_trksound_12.isSelected();

      ar.b_lock_perf   = ar.b_lock_perf_resetval;
      ar.b_lock_scene  = ar.b_lock_scene_resetval;
      ar.b_lock_fx     = ar.b_lock_fx_resetval;
      ar.b_lock_trk_1  = ar.b_lock_trk_1_resetval;
      ar.b_lock_trk_2  = ar.b_lock_trk_2_resetval;
      ar.b_lock_trk_3  = ar.b_lock_trk_3_resetval;
      ar.b_lock_trk_4  = ar.b_lock_trk_4_resetval;
      ar.b_lock_trk_5  = ar.b_lock_trk_5_resetval;
      ar.b_lock_trk_6  = ar.b_lock_trk_6_resetval;
      ar.b_lock_trk_7  = ar.b_lock_trk_7_resetval;
      ar.b_lock_trk_8  = ar.b_lock_trk_8_resetval;
      ar.b_lock_trk_9  = ar.b_lock_trk_9_resetval;
      ar.b_lock_trk_10 = ar.b_lock_trk_10_resetval;
      ar.b_lock_trk_11 = ar.b_lock_trk_11_resetval;
      ar.b_lock_trk_12 = ar.b_lock_trk_12_resetval;

      Global.Print("Select "+(bSelectAll ? "all" : "none"));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSoundPerfChanged() {
      ar.b_lock_perf_resetval   = cb_io_trksound_perf.isSelected();
      ar.b_lock_perf = ar.b_lock_perf_resetval;
      Global.Print("Lock performance ctl is "+Utils.GetEnableString(ar.b_lock_perf_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSoundSceneChanged() {
      ar.b_lock_scene_resetval  = cb_io_trksound_scene.isSelected();
      ar.b_lock_scene = ar.b_lock_scene_resetval;
      Global.Print("Lock scene ctl is "+Utils.GetEnableString(ar.b_lock_scene_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSoundFXChanged() {
      ar.b_lock_fx_resetval  = cb_io_trksound_fx.isSelected();
      ar.b_lock_fx = ar.b_lock_fx_resetval;
      Global.Print("Lock FX is "+Utils.GetEnableString(ar.b_lock_fx_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSound1Changed() {
      ar.b_lock_trk_1_resetval  = cb_io_trksound_1.isSelected();
      ar.b_lock_trk_1 = ar.b_lock_trk_1_resetval;
      Global.Print("Lock track BD 1 sound is "+Utils.GetEnableString(ar.b_lock_trk_1_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSound2Changed() {
      ar.b_lock_trk_2_resetval  = cb_io_trksound_2.isSelected();
      ar.b_lock_trk_2 = ar.b_lock_trk_2_resetval;
      Global.Print("Lock track SD 2 sound is "+Utils.GetEnableString(ar.b_lock_trk_2_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSound3Changed() {
      ar.b_lock_trk_3_resetval  = cb_io_trksound_3.isSelected();
      ar.b_lock_trk_3 = ar.b_lock_trk_3_resetval;
      Global.Print("Lock track RS 3 sound is "+Utils.GetEnableString(ar.b_lock_trk_3_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSound4Changed() {
      ar.b_lock_trk_4_resetval  = cb_io_trksound_4.isSelected();
      ar.b_lock_trk_4 = ar.b_lock_trk_4_resetval;
      Global.Print("Lock track CP 4 sound is "+Utils.GetEnableString(ar.b_lock_trk_4_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSound5Changed() {
      ar.b_lock_trk_5_resetval  = cb_io_trksound_5.isSelected();
      ar.b_lock_trk_5 = ar.b_lock_trk_5_resetval;
      Global.Print("Lock track BT 5 sound is "+Utils.GetEnableString(ar.b_lock_trk_5_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSound6Changed() {
      ar.b_lock_trk_6_resetval  = cb_io_trksound_6.isSelected();
      ar.b_lock_trk_6 = ar.b_lock_trk_6_resetval;
      Global.Print("Lock track LT 6 sound is "+Utils.GetEnableString(ar.b_lock_trk_6_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSound7Changed() {
      ar.b_lock_trk_7_resetval  = cb_io_trksound_7.isSelected();
      ar.b_lock_trk_7 = ar.b_lock_trk_7_resetval;
      Global.Print("Lock track MT 7 sound is "+Utils.GetEnableString(ar.b_lock_trk_7_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSound8Changed() {
      ar.b_lock_trk_8_resetval  = cb_io_trksound_8.isSelected();
      ar.b_lock_trk_8 = ar.b_lock_trk_8_resetval;
      Global.Print("Lock track HT 8 sound is "+Utils.GetEnableString(ar.b_lock_trk_8_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSound9Changed() {
      ar.b_lock_trk_9_resetval  = cb_io_trksound_9.isSelected();
      ar.b_lock_trk_9 = ar.b_lock_trk_9_resetval;
      Global.Print("Lock track CH 9 sound is "+Utils.GetEnableString(ar.b_lock_trk_9_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSound10Changed() {
      ar.b_lock_trk_10_resetval  = cb_io_trksound_10.isSelected();
      ar.b_lock_trk_10 = ar.b_lock_trk_10_resetval;
      Global.Print("Lock track OH 10 sound is "+Utils.GetEnableString(ar.b_lock_trk_10_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSound11Changed() {
      ar.b_lock_trk_11_resetval  = cb_io_trksound_11.isSelected();
      ar.b_lock_trk_11 = ar.b_lock_trk_11_resetval;
      Global.Print("Lock track CY 11 sound is "+Utils.GetEnableString(ar.b_lock_trk_11_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOTrkSound12Changed() {
      ar.b_lock_trk_12_resetval  = cb_io_trksound_12.isSelected();
      ar.b_lock_trk_12 = ar.b_lock_trk_12_resetval;
      Global.Print("Lock track CB 12 sound is "+Utils.GetEnableString(ar.b_lock_trk_12_resetval));
   }

   // <ui_handle.png>
   protected =replay= method handleIOKitNoteRedirectChanged() {
      ar.kit_note_redirect_mode = cm_io_kit_note_redirect.getSelectedOption();
      Global.Print("Kit Note Redirection Mode is "+cm_io_kit_note_redirect.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected =replay= method handleIOKitEditorTrkSwitchChanged() {
      ar.b_kit_editor_trkswitch = cb_io_kiteditor_trkswitch.isSelected();
      Global.Print("Kit Editor Auto-Track-Switch is "+Utils.GetEnableString(ar.b_kit_editor_trkswitch));
   }

   // <ui_handle.png>
   protected =replay= method handleIOKitNoteRedirectPressureChanged() {
      ar.b_note_redirect_pressure = cb_io_kit_note_redirect_pressure.isSelected();
      Global.Print("Redirect Channel+Poly Pressure is "+Utils.GetEnableString(ar.b_note_redirect_pressure));
   }

   // <ui_update.png>
   public method updateKitTrack() {
      cm_kit_track.setSelectedOption(ar.kit_editor_track_idx);
   }

   // <ui_update.png>
   public method selectTrackByIdx(int _trackIdx) {
      // called by NodeAnalogRytm::nodeHandleTrigSeqEdit()
      if(0 <= _trackIdx < 12)
      {
         cm_kit_track.setSelectedOption(_trackIdx);
         handleKitTrackChanged();
      }
   }

   // <ui_handle.png>
   protected =replay= method handleKitTrackChanged() {
      ar.kit_editor_track_idx = cm_kit_track.getSelectedOption();
      Global.Print("Kit Track is "+cm_kit_track.getSelectedOptionName());
      updateKitTrackLevel();
   }

   // <ui_update.png>
   public method updateKitTrackLevel() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         byte lvl = fp_kit_tracklevel.getFloatValue();
         NAR_Kit narKit <= pat.getCurrentNARKit();
         if(null != narKit)
         {
            AR_Kit arKit <= narKit.ar_kit;
            int trackIdx = cm_kit_track.getSelectedOption();
            fp_kit_tracklevel.setValue(arKit.getTrackLevel(trackIdx));
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleKitTrackLevelChanged() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         byte lvl = fp_kit_tracklevel.getFloatValue();
         NAR_Kit narKit <= pat.getCurrentNARKit();
         if(null != narKit)
         {
            AR_Kit arKit <= narKit.ar_kit;
            int trackIdx = cm_kit_track.getSelectedOption();
            arKit.setTrackLevel(trackIdx, lvl);
            Global.Print("Kit Track<"+(trackIdx+1)+":"+cm_kit_track.getSelectedOptionName()+"> Level is "+lvl);
            ar.queueKitSend(narKit.ar_kit, narKit.remote_kit_nr);
         }
      }
   }

   // <ui_handle.png>
   protected method handleKitChanged(boolean _bFromUI) {
      NodeAnalogRytmPattern pat <= getEditPattern();

      tf_kit_name.setText("");
      lb_kit_state.setCaption("-");
      tf_kit_name.setEditable(false);
      bt_kit_edit.setEditable(false);
      bt_kit_recv.setEditable(false);
      bt_kit_send.setEditable(false);
      bt_kit_mix .setEditable(false);

      if(null != pat)
      {
         if(_bFromUI)
         {
            pat.current_kit_idx = tm_kit.getCursorIndex();
         }

         NAR_Kit narKit <= pat.getCurrentNARKit();
         if(null != narKit)
         {
            tf_kit_name.setText(narKit.name);
            tf_kit_name.setEditable(true);

            lb_kit_state.setCaption(narKit.getCurrentStateName());
            bt_kit_send.setEditable(true);
            bt_kit_mix.setEditable(true);

            bt_kit_edit.setEditable(true);
            bt_kit_recv.setEditable(true);

            AR_Kit arKit <= narKit.ar_kit;
            int trackIdx = cm_kit_track.getSelectedOption();
            fp_kit_tracklevel.setValue(arKit.getTrackLevel(trackIdx));

            if(0)
               narKit.debugPrintNames();

            redraw();
         }
      }

   }

   // <ui_handle.png>
   protected method handleKitAdd() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Kit narKit <= pat.addKit(tm_kit.getCursorIndex());
         if(null != narKit)
         {
            tv_kit.tableModelChanged();
            tv_kit.moveCursorToRow(pat.getKitIdx(narKit));

            Global.Print("Add Kit");
         }
      }
   }

   // <ui_handle.png>
   protected method handleKitClone() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Kit curKit <= getSelectedNARKit();
         if(null != curKit)
         {
            NAR_Kit narKit <= pat.addKit(tm_kit.getCursorIndex());
            if(null != narKit)
            {
               narKit.copyFrom(curKit);
               // // narKit.uid = pat.allocKitUID();

               tv_kit.tableModelChanged();

               tv_kit.moveCursorToRow(pat.getKitIdx(narKit));

               Global.Print("Clone Kit");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleKitRemove() {
      NAR_Kit kit <= getSelectedNARKit();
      if(null != kit)
      {
         dlg_deletekit <= new Dialog_AR_DeleteKit;
         dlg_deletekit.run(this, kit.name);
      }
   }

   // <ui_handle.png>
   public method handleKitRemove2() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int kitNr = tm_kit.getCursorIndex();
         if(-1 != kitNr)
         {
            if((kitNr > 0) && (kitNr == (tm_kit.getNumRows() - 1)))
            {
               tv_kit.moveCursorToPreviousRow();
            }

            pat.removeKitByIdx(kitNr);

            tv_kit.tableModelChanged();

            Global.Print("Remove Kit");
         }
      }
   }

   // <ui_handle.png>
   protected method handleKitMoveUp() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int kitNr = tm_kit.getCursorIndex();
         if(-1 != kitNr)
         {
            if(pat.moveKitUp(kitNr))
            {
               tv_kit.moveCursorToPreviousRow();
               tv_kit.tableModelChanged();

               Global.Print("Move kit up");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleKitMoveDown() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int kitNr = tm_kit.getCursorIndex();
         if(-1 != kitNr)
         {
            if(pat.moveKitDown(kitNr))
            {
               tv_kit.moveCursorToNextRow();
               tv_kit.tableModelChanged();

               Global.Print("Move kit down");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleKitNameChanged() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Kit narKit <= pat.getCurrentNARKit();
         if(null != narKit)
         {
            narKit.name = tf_kit_name.getText();

            tv_kit.tableModelChanged();

            Global.Print("Kit name is \""+narKit.name+"\"");
         }
      }
   }

   // <ui_handle.png>
   public method handleKitEdit() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Kit narKit <= pat.getCurrentNARKit();
         if(null != narKit)
         {
            dlg_edit_kit.showKit(this, ar, narKit);
         }
      }
   }

   // <ui_handle.png>
   protected method handleKitRecv() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Kit narKit <= pat.getCurrentNARKit();
         if(null != narKit)
         {
            ar.queueKitQuery(narKit.ar_kit, narKit.remote_kit_nr);

            Global.Print("Receive kit");

            ta_update_state_count = 0;
            ta_update_state.schedule();
         }
      }
   }

   // <ui_handle.png>
   public method queueKitSendSoundX(int _trackIdx) {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Kit narKit <= pat.getCurrentNARKit();
         if(null != narKit)
         {
            ar.queueKitSendSoundX(narKit.ar_kit, _trackIdx);
            // // Global.Print("Send kit");
         }
      }
   }

   // <ui_handle.png>
   public method handleKitSend() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Kit narKit <= pat.getCurrentNARKit();
         if(null != narKit)
         {
            ar.queueKitSend(narKit.ar_kit, narKit.remote_kit_nr);

            Global.Print("Send kit");
         }
      }
   }

   // <ui_handle.png>
   protected method handleKitMix() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Kit narKit <= pat.getCurrentNARKit();
         if(null != narKit)
         {
            ar.queueKitMix(narKit.ar_kit);

            Global.Print("Mix kit, mask: "+ar.getLockString());
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleKitPasteState() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Kit narKit <= pat.getCurrentNARKit();
         if(null != narKit)
         {
            narKit.ar_kit = ar.current_kit_state;

            Global.Print("Paste kit state to current entry");
         }
      }
   }

   // <ui_handle.png>
   protected method handleKitMixEnableChanged() {
      Global.Print("Dbl-click row "+(cb_kit_mix.isSelected() ? "mixes" : "sends")+" kit");
   }

   // <ui_show.png>
   protected method showKitToolsMenu() {

      pm_kit_tools <= PopupMenu.New(this);
      PopupMenu pm <= pm_kit_tools;
      PopupMenuButton *pmb;

      NAR_Kit kit <= getSelectedNARKit();

      boolean bHaveKit = (null != kit);

      pmb <= pm.addDefaultButton("Re-Enumerate UIDs..", "kit_enum_uids");
      pmb.setActive(bHaveKit);

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Update track1..12 sample-nr..", "kit_samplenr");
      pmb.setActive(bHaveKit);

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Import SYX", "kit_import_syx");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Export SYX", "kit_export_syx");
      pmb.setActive(bHaveKit);

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Add Action", "kit_action");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Add Entry", "kit_entry");
      pmb.setActive(bHaveKit);

      pm.resizeToMinimum();

      pm.showAboveLayer(bt_kit_tools);

      Global.Print("Show kit tools menu.");
   }

   // <ui_show.png>
   protected method showKitRecvMenu() {

      pm_kit_recv <= PopupMenu.New(this);
      PopupMenu pm <= pm_kit_recv;
      PopupMenuButton *pmb;

      NAR_Kit kit <= getSelectedNARKit();

      boolean bHaveKit = (null != kit);

      pmb <= pm.addDefaultButton("Recv PerfCtl", "kitrecv_perf");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv SceneCtl", "kitrecv_scene");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv FX", "kitrecv_fx");
      pmb.setActive(bHaveKit);

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Recv BD 1", "kitrecv_trk_1");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv SD 2", "kitrecv_trk_2");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv RS 3", "kitrecv_trk_3");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv CP 4", "kitrecv_trk_4");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv BT 5", "kitrecv_trk_5");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv LT 6", "kitrecv_trk_6");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv MT 7", "kitrecv_trk_7");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv HT 8", "kitrecv_trk_8");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv CH 9", "kitrecv_trk_9");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv OH 10", "kitrecv_trk_10");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv CY 11", "kitrecv_trk_11");
      pmb.setActive(bHaveKit);

      pmb <= pm.addDefaultButton("Recv CB 12", "kitrecv_trk_12");
      pmb.setActive(bHaveKit);

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Reset recv state", "kitrecv_reset");
      pmb.setActive(bHaveKit);

      pm.resizeToMinimum();

      pm.showAboveLayer(bt_kit_tools);

      Global.Print("Show kit tools menu.");
   }

   // <ui_handle.png>
   protected method handleKitRecvReset() {
      ar.resetKitRecvState();

      Global.Print("Reset kit recv state");
   }

   // <ui_handle.png>
   protected method handleKitRecvPerf() {
      NAR_Kit narKit <= getSelectedNARKit();
      if(null != narKit)
      {
         ar.queueKitQueryPartial(narKit.ar_kit, NodeAnalogRytm.KIT_PARTIAL_PERF);

         Global.Print("Recv kit performance ctl mapping");
      }
   }

   // <ui_handle.png>
   protected method handleKitRecvScene() {
      NAR_Kit narKit <= getSelectedNARKit();
      if(null != narKit)
      {
         ar.queueKitQueryPartial(narKit.ar_kit, NodeAnalogRytm.KIT_PARTIAL_SCENE);

         Global.Print("Recv kit scene ctl mapping");
      }
   }

   // <ui_handle.png>
   protected method handleKitRecvFX() {
      NAR_Kit narKit <= getSelectedNARKit();
      if(null != narKit)
      {
         ar.queueKitQueryPartial(narKit.ar_kit, NodeAnalogRytm.KIT_PARTIAL_FX);

         Global.Print("Recv kit FX");
      }
   }

   // <ui_handle.png>
   protected method handleKitRecvTrk(int _trackIdx) {
      NAR_Kit narKit <= getSelectedNARKit();
      if(null != narKit)
      {
         ar.queueKitQueryPartial(narKit.ar_kit, (NodeAnalogRytm.KIT_PARTIAL_TRK_1 << _trackIdx));

         Global.Print("Recv kit track "+(NAR_Defs.track_names_short.get(_trackIdx))+" "+(_trackIdx+1));
      }
   }

   // <ui_handle.png>
   protected method handleKitAddAction(boolean _bNewEntry) {
      NAR_Kit kit <= getSelectedNARKit();
      if(null != kit)
      {
         if(_bNewEntry)
            handleMapEntryAdd();

         NAR_MapEntry mapen <= getSelectedMapEntry();

         if(null != mapen)
         {
            if(_bNewEntry)
               mapen.name = "Send "+kit.name;

            handleMapActionAdd();

            NAR_MapAction mapac <= getSelectedMapAction();

            if(null != mapac)
            {
               mapac.action_id   = NAR_MapAction.AC_KIT_SEND;
               mapac.action_arg1 = kit.uid;

               mapen.autoUpdateActionNames();

               handleMapGroupChanged(false/*bFromUI*/);

               Global.Print("Add Kit Send Entry+Action");
            }
         }
      }
   }

   // <ui_show.png>
   protected method showKitUIDBaseDialog(int _uidBase) {
      if(null == dlg_kit_uid_base)
      {
         dlg_kit_uid_base <= TextInputDialog.New("Enter kit UID base",
                                                 " Enter kit UID base",
                                                 "Re-enumerate", "Cancel",
                                                 String(_uidBase),
                                                 16, 16,
                                                 this
                                                 );

         dlg_kit_uid_base.setButtonFontByName("big3");
         dlg_kit_uid_base.setMessageFontByName("big5");
         dlg_kit_uid_base.setTextFontByName("big4");
         dlg_kit_uid_base.setButtonIcons(null/*UI.GetIcon("add")*/, UI.GetIcon("cancel"));
         dlg_kit_uid_base.invalidateSizeCaches();
         dlg_kit_uid_base.resizeToMinimum();
      }

      dlg_kit_uid_base.showCentered();
   }

   // <ui_handle.png>
   protected method handleKitReEnumerateUIDsDlg() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         showKitUIDBaseDialog(1);
      }
   }

   // <ui_handle.png>
   protected method handleKitReEnumerateUIDs2(int _uidBase) {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         if(1 <= _uidBase <= 16383)
         {
            pat.reEnumerateKitUIDs(_uidBase);

            tv_kit.tableModelChanged();

            handleSnapshotChanged(false/*bFromUI*/);

            Global.Print("Re-Enumerate kit UIDs with base="+_uidBase);
         }
         else
         {
            Global.Error("Kit UID base "+_uidBase+" is out of range (1..16383)");
         }
      }
   }

   // <ui_handle.png>
   protected method handleKitImportSYX() {
      NAR_Kit kit <= getSelectedNARKit();
      if(null != kit)
      {
         local String suggestedPath, suggestedFile;
         Utils.SplitPathname(kit_open_suggested_file, suggestedPath, suggestedFile);

         local String fileName <= UI.OpenFileDialog(suggestedPath,
                                                    suggestedFile,
                                                    "Import Kit SYX",
                                                    kit_file_filter_names, kit_file_filter_strings,
                                                    false, false
                                                    );

         Global.Debug("NodeAnalogRytmEditor::handleKitImportSYX: trying to load file \""+fileName+"\".");

         if(null != fileName)
         {
            local File f;
            fileName <= Utils.ToNativePathName(fileName);
            if(f.openLocal(fileName, IOS_IN))
            {
               if(f.size == AR_Kit.requiredSizeSyx)
               {
                  AR_Kit newKit <= new AR_Kit;

                  Buffer b;
                  if(f.readBuffer(b, 0, AR_Kit.requiredSizeSyx, true/*bResize*/))
                  {
                     if(newKit.syxToRaw(b))
                     {
                        kit.ar_kit = deref newKit;

                        Global.Success("Import kit from SYX file \""+fileName+"\"");

                        handleKitChanged(false/*bFromUI*/);

                        kit_open_suggested_file = fileName;
                     }
                     else
                     {
                        Global.Error("Kit: Import SYX: invalid SYX file");
                     }
                  }
               }
               else
               {
                  Global.Error("Kit: Import SYX: invalid file size");
               }

               f.close();
            }
            else
            {
               Global.Error("Kit: Import SYX: failed to open \""+fileName+"\" for reading.");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleKitExportSYX() {
      NAR_Kit kit <= getSelectedNARKit();
      if(null != kit)
      {
         String suggestedPath, suggestedFile;
         Utils.SplitPathname(kit_open_suggested_file, suggestedPath, suggestedFile);

         local String fileName <= UI.SaveFileDialog(suggestedPath,
                                                    suggestedFile,
                                                    "Export Kit SYX",
                                                    kit_file_filter_names, kit_file_filter_strings,
                                                    false
                                                    );

         Global.Debug("NodeAnalogRytmEditor::handleKitExportSYX: trying to save file \""+fileName+"\".");

         if(null != fileName)
         {
            local File f;
            fileName <= Utils.ToNativePathName(fileName);
            if(f.openLocal(fileName, IOS_OUT))
            {
               Buffer syx;
               syx.size = kit.ar_kit.getRequiredSizeSyx(); // need 3095 bytes
               syx.offset = 0;

               if(kit.ar_kit.sendKitX(syx, 0/*devId*/, kit.remote_kit_nr))
               {
                  f.writeBuffer(syx, 0, syx.size);

                  Global.Success("Export kit to SYX file \""+fileName+"\"");

                  kit_open_suggested_file = fileName;
               }

               f.close();
            }
            else
            {
               Global.Error("Kit: Export SYX: failed to open \""+fileName+"\" for writing.");
            }
         }
      }
   }

   // <ui_show.png>
   protected method showKitSampleNrDialog() {
      NAR_Kit narKit <= getSelectedNARKit();
      if(null != narKit)
      {
         int sampleNr = narKit.ar_kit.getTrackSampleNr(0);

         if(null == dlg_kit_samplenr)
         {
            dlg_kit_samplenr <= TextInputDialog.New("Enter kit track1..12 sample-nr",
                                                    " Enter kit track1..12 sample-nr",
                                                    "Update sample-nr", "Cancel",
                                                    "99",
                                                    16, 16,
                                                    this
                                                    );

            dlg_kit_samplenr.setButtonFontByName("big4");
            dlg_kit_samplenr.setMessageFontByName("big6");
            dlg_kit_samplenr.setTextFontByName("big5");
            dlg_kit_samplenr.setButtonIcons(null/*UI.GetIcon("add")*/, UI.GetIcon("cancel"));
            dlg_kit_samplenr.invalidateSizeCaches();
            dlg_kit_samplenr.resizeToMinimum();
         }

         dlg_kit_samplenr.setDefaultText(String(sampleNr));
         dlg_kit_samplenr.showCentered();
      }
   }

   // <ui_handle.png>
   protected method handleKitSampleNr2(int _sampleNr) {
      NAR_Kit narKit <= getSelectedNARKit();
      if(null != narKit)
      {
         if(0 <= _sampleNr <= 127)
         {
            int trackIdx = 0;
            loop(12)
               narKit.ar_kit.setTrackSampleNr(trackIdx++, _sampleNr);

            handleSnapshotChanged(false/*bFromUI*/);

            Global.Print("Update track1..12 sample-nr to "+_sampleNr+((0 == _sampleNr)?" (off)":""));
         }
         else
         {
            Global.Error("Kit sample-nr "+_sampleNr+" is out of range (0..127)");
         }
      }
   }

   // <ui_handle.png>
   public virtual nodeHandleEditPatternChanged() {
      handlePatternChanged(false/*bFromUI*/);
   }

   // <ui_handle.png>
   protected method handlePatternChanged(boolean _bFromUI) {
      NodeAnalogRytmPattern pat <= getEditPattern();

      tf_pattern_name.setText("");
      lb_pattern_state.setCaption("-");
      tf_pattern_name.setEditable(false);
      bt_pattern_recv.setEditable(false);
      bt_pattern_send.setEditable(false);

      if(null != pat)
      {
         if(_bFromUI)
            pat.current_pattern_idx = tm_pattern.getCursorIndex();

         NAR_Pattern narPattern <= pat.getCurrentNARPattern();

         if(null != narPattern)
         {
            tf_pattern_name.setText(narPattern.name);
            tf_pattern_name.setEditable(true);

            lb_pattern_state.setCaption(narPattern.getCurrentStateName());
            bt_pattern_send.setEditable(true);

            bt_pattern_recv.setEditable(true);
            bt_pattern_send.setEditable(true);

            if(_bFromUI)
            {
               /*NodeAnalogRytm*/Global.SetARPatternClipboard(narPattern.ar_pattern);
            }

            redraw();
         }
      }

   }

   // <ui_handle.png>
   protected method handlePatternAdd() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Pattern narPattern <= pat.addPattern(tm_pattern.getCursorIndex());
         if(null != narPattern)
         {
            tv_pattern.tableModelChanged();

            tv_pattern.moveCursorToRow(pat.getPatternIdx(narPattern));

            Global.Print("Add Pattern");
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatternClone() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Pattern curPattern <= getSelectedNARPattern();

         if(null != curPattern)
         {
            NAR_Pattern narPattern <= pat.addPattern(tm_pattern.getCursorIndex());

            if(null != narPattern)
            {
               narPattern.copyFrom(curPattern);
               // // narPattern.uid = pat.allocPatternUID();

               tv_pattern.tableModelChanged();

               tv_pattern.moveCursorToRow(pat.getPatternIdx(narPattern));

               Global.Print("Clone Pattern");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatternFree() {
      NAR_Pattern pattern <= getSelectedNARPattern();
      if(null != pattern)
      {
         dlg_deletepattern <= new Dialog_DeletePattern;
         dlg_deletepattern.run(this, pattern.name);
      }
   }

   // <ui_handle.png>
   public virtual handlePatternFree2() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int patternNr = tm_pattern.getCursorIndex();

         if(-1 != patternNr)
         {
            if((patternNr > 0) && (patternNr == (tm_pattern.getNumRows() - 1)))
            {
               tv_pattern.moveCursorToPreviousRow();
            }

            pat.removePatternByIdx(patternNr);

            tv_pattern.tableModelChanged();

            Global.Print("Remove Pattern");
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatternMoveUp() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int patternNr = tm_pattern.getCursorIndex();
         if(-1 != patternNr)
         {
            if(pat.movePatternUp(patternNr))
            {
               tv_pattern.moveCursorToPreviousRow();
               tv_pattern.tableModelChanged();

               Global.Print("Move pattern up");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatternMoveDown() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int patternNr = tm_pattern.getCursorIndex();
         if(-1 != patternNr)
         {
            if(pat.movePatternDown(patternNr))
            {
               tv_pattern.moveCursorToNextRow();
               tv_pattern.tableModelChanged();

               Global.Print("Move pattern down");
            }
         }
      }
   }

   // <ui_show.png>
   protected method showPatternUIDBaseDialog(int _uidBase) {
      if(null == dlg_pat_uid_base)
      {
         dlg_pat_uid_base <= TextInputDialog.New("Enter pattern UID base",
                                                 " Enter pattern UID base",
                                                 "Re-enumerate", "Cancel",
                                                 String(_uidBase),
                                                 16, 16,
                                                 this
                                                 );

         dlg_pat_uid_base.setButtonFontByName("big3");
         dlg_pat_uid_base.setMessageFontByName("big5");
         dlg_pat_uid_base.setTextFontByName("big4");
         dlg_pat_uid_base.setButtonIcons(null/*UI.GetIcon("add")*/, UI.GetIcon("cancel"));
         dlg_pat_uid_base.invalidateSizeCaches();
         dlg_pat_uid_base.resizeToMinimum();
      }

      dlg_pat_uid_base.showCentered();
   }

   // <ui_handle.png>
   protected method handlePatternReEnumerateUIDsDlg() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         showPatternUIDBaseDialog(1);
      }
   }

   // <ui_handle.png>
   protected method handlePatternReEnumerateUIDs2(int _uidBase) {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         if(1 <= _uidBase <= 16383)
         {
            pat.reEnumeratePatternUIDs(_uidBase);

            tv_kit.tableModelChanged();

            handleSnapshotChanged(false/*bFromUI*/);

            Global.Print("Re-Enumerate pattern UIDs with base="+_uidBase);
         }
         else
         {
            Global.Error("Pattern UID base "+_uidBase+" is out of range (1..16383)");
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatternNameChanged() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Pattern narPattern <= pat.getCurrentNARPattern();
         if(null != narPattern)
         {
            narPattern.name = tf_pattern_name.getText();

            tv_pattern.tableModelChanged();

            Global.Print("Pattern name is \""+narPattern.name+"\"");
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatternRecv() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Pattern narPattern <= pat.getCurrentNARPattern();
         if(null != narPattern)
         {
            ar.queuePatternQuery(narPattern.ar_pattern, narPattern.remote_pattern_nr);

            Global.Print("Receive pattern");

            ta_update_state_count = 0;
            ta_update_state.schedule();
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatternSend() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Pattern narPattern <= pat.getCurrentNARPattern();
         if(null != narPattern)
         {
            ar.queuePatternSend(narPattern.ar_pattern, narPattern.remote_pattern_nr);

            Global.Print("Send pattern");
         }
      }
   }

   // <ui_show.png>
   protected method showPatternToolsMenu() {

      pm_pattern_tools <= PopupMenu.New(this);
      PopupMenu pm <= pm_pattern_tools;
      PopupMenuButton *pmb;

      NAR_Pattern pattern <= getSelectedNARPattern();

      boolean bHavePattern = (null != pattern);

      pmb <= pm.addDefaultButton("Re-Enumerate UIDs..", "pattern_enum_uids");
      pmb.setActive(bHavePattern);

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Import SYX", "pattern_import_syx");
      pmb.setActive(bHavePattern);

      pmb <= pm.addDefaultButton("Export SYX", "pattern_export_syx");
      pmb.setActive(bHavePattern);

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Add Action", "pattern_action");
      pmb.setActive(bHavePattern);

      pmb <= pm.addDefaultButton("Add Entry", "pattern_entry");
      pmb.setActive(bHavePattern);

      pm.resizeToMinimum();

      pm.showAboveLayer(bt_pattern_tools);

      Global.Print("Show pattern tools menu.");
   }

   // <ui_handle.png>
   protected method handlePatternAddAction(boolean _bNewEntry) {
      NAR_Pattern pattern <= getSelectedNARPattern();
      if(null != pattern)
      {
         if(_bNewEntry)
            handleMapEntryAdd();

         NAR_MapEntry mapen <= getSelectedMapEntry();

         if(null != mapen)
         {
            if(_bNewEntry)
               mapen.name = "Send "+pattern.name;

            handleMapActionAdd();

            NAR_MapAction mapac <= getSelectedMapAction();

            if(null != mapac)
            {
               mapac.action_id   = NAR_MapAction.AC_PAT_SEND;
               mapac.action_arg1 = pattern.uid;

               mapen.autoUpdateActionNames();

               handleMapGroupChanged(false/*bFromUI*/);

               Global.Print("Add Pattern Send Entry+Action");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatternImportSYX() {
      NAR_Pattern pattern <= getSelectedNARPattern();
      if(null != pattern)
      {
         local String suggestedPath, suggestedFile;
         Utils.SplitPathname(pattern_open_suggested_file, suggestedPath, suggestedFile);

         local String fileName <= UI.OpenFileDialog(suggestedPath,
                                                    suggestedFile,
                                                    "Import Pattern SYX",
                                                    pattern_file_filter_names, pattern_file_filter_strings,
                                                    false, false
                                                    );

         Global.Debug("NodeAnalogRytmEditor::handlePatternImportSYX: trying to load file \""+fileName+"\".");

         if(null != fileName)
         {
            local File f;
            fileName <= Utils.ToNativePathName(fileName);
            if(f.openLocal(fileName, IOS_IN))
            {
               if(f.size == AR_Pattern.requiredSizeSyx)
               {
                  AR_Pattern newPattern <= new AR_Pattern;

                  Buffer b;
                  if(f.readBuffer(b, 0, AR_Pattern.requiredSizeSyx, true/*bResize*/))
                  {
                     if(newPattern.syxToRaw(b))
                     {
                        pattern.ar_pattern = deref newPattern;

                        Global.Success("Import pattern from SYX file \""+fileName+"\"");

                        handlePatternChanged(false/*bFromUI*/);

                        pattern_open_suggested_file = fileName;
                     }
                     else
                     {
                        Global.Error("Pattern: Import SYX: invalid SYX file");
                     }
                  }
               }
               else
               {
                  Global.Error("Pattern: Import SYX: invalid file size");
               }

               f.close();
            }
            else
            {
               Global.Error("Pattern: Import SYX: failed to open \""+fileName+"\" for reading.");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatternExportSYX() {
      NAR_Pattern pattern <= getSelectedNARPattern();
      if(null != pattern)
      {
         String suggestedPath, suggestedFile;
         Utils.SplitPathname(pattern_open_suggested_file, suggestedPath, suggestedFile);

         String fileName <= UI.SaveFileDialog(suggestedPath,
                                              suggestedFile,
                                              "Export Pattern SYX",
                                              pattern_file_filter_names, pattern_file_filter_strings,
                                              false
                                              );

         Global.Debug("NodeAnalogRytmEditor::handlePatternExportSYX: trying to save file \""+fileName+"\".");

         if(null != fileName)
         {
            local File f;
            if(f.openLocal(fileName, IOS_OUT))
            {
               Buffer syx;
               syx.size = pattern.ar_pattern.getRequiredSizeSyx(); // need 15090 bytes
               syx.offset = 0;

               if(pattern.ar_pattern.sendPattern(syx, 0/*devId*/, pattern.remote_pattern_nr, true/*bEditBuf*/))
               {
                  f.writeBuffer(syx, 0, syx.size);

                  Global.Success("Export pattern to SYX file \""+fileName+"\"");

                  pattern_open_suggested_file = fileName;
               }

               f.close();
            }
            else
            {
               Global.Error("Pattern: Export SYX: failed to open \""+fileName+"\" for writing.");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleSoundRecv() {
      // NodeAnalogRytmPattern pat <= getEditPattern();

      // if(null != pat)
      // {
      //    NAR_Kit narKit <= pat.getCurrentNARKit();

      //    if(null != narKit)
      //    {
      //       ar.queueKitQuery(narKit.ar_kit, narKit.remote_kit_nr);

      //       Global.Print("Receive kit");

      //       ta_update_state_count = 0;
      //       ta_update_state.schedule();
      //    }
      // }

      AR_Sound sound;
      ar.queueSoundQuery(sound, 0/*remoteSoundNr*/);
      Global.Print("Receive sound");
      ta_update_state_count = 0;
      ta_update_state.schedule();
   }

   // <ui_handle.png>
   protected method handleMuteChanged(boolean _bFromUI) {
      NodeAnalogRytmPattern pat <= getEditPattern();

      tf_mute_name.setText("");
      tf_mute_name.setEditable(false);
      bt_mute_store.setEditable(false);
      bt_mute_send.setEditable(false);

      if(null != pat)
      {
         if(_bFromUI)
         {
            pat.current_mute_idx = tm_mute.getCursorIndex();
         }

         NAR_Mute narMute <= pat.getCurrentNARMute();

         if(null != narMute)
         {
            tf_mute_name.setText(narMute.name);
            tf_mute_name.setEditable(true);

            bt_mute_send.setEditable(true);

            bt_mute_store.setEditable(true);
            bt_mute_send.setEditable(true);

            redraw();
         }
      }

   }

   // <ui_handle.png>
   protected method handleMuteAdd() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Mute narMute <= pat.addMute(tm_mute.getCursorIndex());
         if(null != narMute)
         {
            tv_mute.tableModelChanged();
            tv_mute.moveCursorToRow(pat.getMuteIdx(narMute));

            Global.Print("Add Mute State");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMuteClone() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Mute curMute <= getSelectedNARMute();
         if(null != curMute)
         {
            NAR_Mute narMute <= pat.addMute(tm_mute.getCursorIndex());
            if(null != narMute)
            {
               narMute.copyFrom(curMute);
               // // narMute.uid = pat.allocMuteUID();

               tv_mute.tableModelChanged();

               tv_mute.moveCursorToRow(pat.getMuteIdx(narMute));

               Global.Print("Clone Mute State");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleMuteRemove() {
      NAR_Mute mute <= getSelectedNARMute();
      if(null != mute)
      {
         dlg_deletemute <= new Dialog_AR_DeleteMute;
         dlg_deletemute.run(this, mute.name);
      }
   }

   // <ui_handle.png>
   public method handleMuteRemove2() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int muteNr = tm_mute.getCursorIndex();
         if(-1 != muteNr)
         {
            if((muteNr > 0) && (muteNr == (tm_mute.getNumRows() - 1)))
            {
               tv_mute.moveCursorToPreviousRow();
            }

            pat.removeMuteByIdx(muteNr);

            tv_mute.tableModelChanged();

            Global.Print("Remove Mute State");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMuteMoveUp() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int muteNr = tm_mute.getCursorIndex();
         if(-1 != muteNr)
         {
            if(pat.moveMuteUp(muteNr))
            {
               tv_mute.moveCursorToPreviousRow();
               tv_mute.tableModelChanged();

               Global.Print("Move mute state up");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleMuteMoveDown() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int muteNr = tm_mute.getCursorIndex();
         if(-1 != muteNr)
         {
            if(pat.moveMuteDown(muteNr))
            {
               tv_mute.moveCursorToNextRow();
               tv_mute.tableModelChanged();

               Global.Print("Move mute state down");
            }
         }
      }
   }

   // <ui_show.png>
   protected method showMuteUIDBaseDialog(int _uidBase) {
      if(null == dlg_mute_uid_base)
      {
         dlg_mute_uid_base <= TextInputDialog.New("Enter mute UID base",
                                                 " Enter mute UID base",
                                                 "Re-enumerate", "Cancel",
                                                 String(_uidBase),
                                                 16, 16,
                                                 this
                                                 );

         dlg_mute_uid_base.setButtonFontByName("big3");
         dlg_mute_uid_base.setMessageFontByName("big5");
         dlg_mute_uid_base.setTextFontByName("big4");
         dlg_mute_uid_base.setButtonIcons(null/*UI.GetIcon("add")*/, UI.GetIcon("cancel"));
         dlg_mute_uid_base.invalidateSizeCaches();
         dlg_mute_uid_base.resizeToMinimum();
      }

      dlg_mute_uid_base.showCentered();
   }

   // <ui_handle.png>
   protected method handleMuteReEnumerateUIDsDlg() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         showMuteUIDBaseDialog(1);
      }
   }

   // <ui_handle.png>
   protected method handleMuteReEnumerateUIDs2(int _uidBase) {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         if(1 <= _uidBase <= 16383)
         {
            pat.reEnumerateMuteUIDs(_uidBase);

            tv_kit.tableModelChanged();

            handleSnapshotChanged(false/*bFromUI*/);

            Global.Print("Re-Enumerate mute UIDs with base="+_uidBase);
         }
         else
         {
            Global.Error("Mute UID base "+_uidBase+" is out of range (1..16383)");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMuteNameChanged() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Mute narMute <= pat.getCurrentNARMute();
         if(null != narMute)
         {
            narMute.name = tf_mute_name.getText();

            tv_mute.tableModelChanged();

            Global.Print("Mute state name is \""+narMute.name+"\"");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMuteStore() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Mute narMute <= pat.getCurrentNARMute();
         if(null != narMute)
         {
            ar.queueMuteStore(narMute.mute_state);

            Global.Print("Store Mute State");

            ta_update_state_count = 0;
            ta_update_state.schedule();
         }
      }
   }

   // <ui_handle.png>
   protected method handleMuteSend() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Mute narMute <= pat.getCurrentNARMute();
         if(null != narMute)
         {
            ar.queueMuteSend(narMute.mute_state);

            Global.Print("Send Mute State");
         }
      }
   }

   // <ui_show.png>
   protected method showMuteToolsMenu() {

      pm_mute_tools <= PopupMenu.New(this);
      PopupMenu pm <= pm_mute_tools;
      PopupMenuButton *pmb;

      NAR_Mute mute <= getSelectedNARMute();

      boolean bHaveMute = (null != mute);

      pmb <= pm.addDefaultButton("Re-Enumerate UIDs..", "mute_enum_uids");
      pmb.setActive(bHaveMute);

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Add Action", "mute_action");
      pmb.setActive(bHaveMute);

      pmb <= pm.addDefaultButton("Add Entry", "mute_entry");
      pmb.setActive(bHaveMute);

      pm.resizeToMinimum();

      pm.showAboveLayer(bt_mute_tools);

      Global.Print("Show mute tools menu.");
   }

   // <ui_handle.png>
   protected method handleMuteAddAction(boolean _bNewEntry) {
      NAR_Mute mute <= getSelectedNARMute();
      if(null != mute)
      {
         if(_bNewEntry)
            handleMapEntryAdd();

         NAR_MapEntry mapen <= getSelectedMapEntry();
         if(null != mapen)
         {
            if(_bNewEntry)
               mapen.name = "Send "+mute.name;

            handleMapActionAdd();

            NAR_MapAction mapac <= getSelectedMapAction();

            if(null != mapac)
            {
               mapac.action_id   = NAR_MapAction.AC_MUTE_RECALL;
               mapac.action_arg1 = mute.uid;

               mapen.autoUpdateActionNames();

               handleMapGroupChanged(false/*bFromUI*/);

               Global.Print("Add Mute State Send Entry+Action");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handlePerfChanged(boolean _bFromUI) {
      NodeAnalogRytmPattern pat <= getEditPattern();

      tf_perf_name.setText("");
      tf_perf_name.setEditable(false);
      bt_perf_store.setEditable(false);
      bt_perf_send.setEditable(false);

      if(null != pat)
      {
         if(_bFromUI)
            pat.current_perf_idx = tm_perf.getCursorIndex();

         NAR_Perf narPerf <= pat.getCurrentNARPerf();

         if(null != narPerf)
         {
            tf_perf_name.setText(narPerf.name);
            tf_perf_name.setEditable(true);

            bt_perf_send.setEditable(true);

            bt_perf_store.setEditable(true);
            bt_perf_send.setEditable(true);

            redraw();
         }
      }

   }

   // <ui_handle.png>
   protected method handlePerfAdd() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Perf narPerf <= pat.addPerf(tm_perf.getCursorIndex());
         if(null != narPerf)
         {
            tv_perf.tableModelChanged();

            tv_perf.moveCursorToRow(pat.getPerfIdx(narPerf));

            Global.Print("Add Perf State");
         }
      }
   }

   // <ui_handle.png>
   protected method handlePerfClone() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Perf curPerf <= getSelectedNARPerf();
         if(null != curPerf)
         {
            NAR_Perf narPerf <= pat.addPerf(tm_perf.getCursorIndex());
            if(null != narPerf)
            {
               narPerf.copyFrom(curPerf);
               // // narPerf.uid = pat.allocPerfUID();

               tv_perf.tableModelChanged();

               tv_perf.moveCursorToRow(pat.getPerfIdx(narPerf));

               Global.Print("Clone Perf State");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handlePerfRemove() {
      NAR_Perf perf <= getSelectedNARPerf();
      if(null != perf)
      {
         dlg_deleteperf <= new Dialog_AR_DeletePerf;
         dlg_deleteperf.run(this, perf.name);
      }
   }

   // <ui_handle.png>
   public method handlePerfRemove2() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int perfNr = tm_perf.getCursorIndex();
         if(-1 != perfNr)
         {
            if((perfNr > 0) && (perfNr == (tm_perf.getNumRows() - 1)))
            {
               tv_perf.moveCursorToPreviousRow();
            }

            pat.removePerfByIdx(perfNr);

            tv_perf.tableModelChanged();

            Global.Print("Remove Perf State");
         }
      }
   }

   // <ui_handle.png>
   protected method handlePerfMoveUp() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int perfNr = tm_perf.getCursorIndex();
         if(-1 != perfNr)
         {
            if(pat.movePerfUp(perfNr))
            {
               tv_perf.moveCursorToPreviousRow();
               tv_perf.tableModelChanged();

               Global.Print("Move perf state up");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handlePerfMoveDown() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int perfNr = tm_perf.getCursorIndex();
         if(-1 != perfNr)
         {
            if(pat.movePerfDown(perfNr))
            {
               tv_perf.moveCursorToNextRow();
               tv_perf.tableModelChanged();

               Global.Print("Move perf state down");
            }
         }
      }
   }

   // <ui_show.png>
   protected method showPerfUIDBaseDialog(int _uidBase) {
      if(null == dlg_perf_uid_base)
      {
         dlg_perf_uid_base <= TextInputDialog.New("Enter perfctl UID base",
                                                 " Enter perfctl UID base",
                                                 "Re-enumerate", "Cancel",
                                                 String(_uidBase),
                                                 16, 16,
                                                 this
                                                 );

         dlg_perf_uid_base.setButtonFontByName("big3");
         dlg_perf_uid_base.setMessageFontByName("big5");
         dlg_perf_uid_base.setTextFontByName("big4");
         dlg_perf_uid_base.setButtonIcons(null/*UI.GetIcon("add")*/, UI.GetIcon("cancel"));
         dlg_perf_uid_base.invalidateSizeCaches();
         dlg_perf_uid_base.resizeToMinimum();
      }

      dlg_perf_uid_base.showCentered();
   }

   // <ui_handle.png>
   protected method handlePerfReEnumerateUIDsDlg() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
         showPerfUIDBaseDialog(1);
   }

   // <ui_handle.png>
   protected method handlePerfReEnumerateUIDs2(int _uidBase) {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         if(1 <= _uidBase <= 16383)
         {
            pat.reEnumeratePerfUIDs(_uidBase);

            tv_kit.tableModelChanged();

            handleSnapshotChanged(false/*bFromUI*/);

            Global.Print("Re-Enumerate perfctl UIDs with base="+_uidBase);
         }
         else
         {
            Global.Error("PerfCtl UID base "+_uidBase+" is out of range (1..16383)");
         }
      }
   }

   // <ui_handle.png>
   protected method handlePerfNameChanged() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Perf narPerf <= pat.getCurrentNARPerf();
         if(null != narPerf)
         {
            narPerf.name = tf_perf_name.getText();

            tv_perf.tableModelChanged();

            Global.Print("Perf state name is \""+narPerf.name+"\"");
         }
      }
   }

   // <ui_handle.png>
   protected method handlePerfStore() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Perf narPerf <= pat.getCurrentNARPerf();
         if(null != narPerf)
         {
            ar.queuePerfStore(narPerf.perf_state);

            Global.Print("Store Perf State");

            ta_update_state_count = 0;
            ta_update_state.schedule();
         }
      }
   }

   // <ui_handle.png>
   protected method handlePerfSend() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_Perf narPerf <= pat.getCurrentNARPerf();
         if(null != narPerf)
         {
            ar.queuePerfSend(narPerf.perf_state);

            Global.Print("Send Perf State");
         }
      }
   }

   // <ui_show.png>
   protected method showPerfToolsMenu() {

      pm_perf_tools <= PopupMenu.New(this);
      PopupMenu pm <= pm_perf_tools;
      PopupMenuButton *pmb;

      NAR_Perf perf <= getSelectedNARPerf();

      boolean bHavePerf = (null != perf);

      pmb <= pm.addDefaultButton("Reset tracked state", "perf_reset");

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Re-Enumerate UIDs..", "perf_enum_uids");
      pmb.setActive(bHavePerf);

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Add Action", "perf_action");
      pmb.setActive(bHavePerf);

      pmb <= pm.addDefaultButton("Add Entry", "perf_entry");
      pmb.setActive(bHavePerf);

      pm.resizeToMinimum();

      pm.showAboveLayer(bt_perf_tools);

      Global.Print("Show perf tools menu.");
   }

   // <ui_handle.png>
   protected =replay= method handlePerfReset() {
      ar.current_perf_state.fill(-1);

      Global.Print("Reset tracked perf state");
   }

   // <ui_handle.png>
   protected method handlePerfAddAction(boolean _bNewEntry) {
      NAR_Perf perf <= getSelectedNARPerf();
      if(null != perf)
      {
         if(_bNewEntry)
            handleMapEntryAdd();

         NAR_MapEntry mapen <= getSelectedMapEntry();

         if(null != mapen)
         {
            if(_bNewEntry)
               mapen.name = "Send "+perf.name;

            handleMapActionAdd();

            NAR_MapAction mapac <= getSelectedMapAction();

            if(null != mapac)
            {
               mapac.action_id   = NAR_MapAction.AC_PERF_RECALL;
               mapac.action_arg1 = perf.uid;

               mapen.autoUpdateActionNames();

               handleMapGroupChanged(false/*bFromUI*/);

               Global.Print("Add Perf State Send Entry+Action");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapGroupChanged(boolean _bFromUI) {
      NodeAnalogRytmPattern pat <= getEditPattern();

      tf_mapgrp_name.setText("");
      tf_mapgrp_name.setEditable(false);

      tm_mapen.grp <= null;

      if(null != pat)
      {
         if(_bFromUI)
            pat.current_group_idx = tm_mapgrp.getCursorIndex();

         NAR_MapGroup mapgrp <= pat.getCurrentMapGroup();

         if(null != mapgrp)
         {
            tf_mapgrp_name.setText(mapgrp.name);
            tf_mapgrp_name.setEditable(true);

            tm_mapen.grp <= mapgrp;

            tv_mapen.tableModelChanged();
            tv_mapen.moveCursorToFirstRowIfNoneSelected();

            redraw();
         }
      }
      else
      {
         tv_mapen.tableModelChanged();
      }

      setLearnMode(LEARN_NONE, true/*bQuiet*/);

      handleMapEntryChanged(false/*bFromUI*/);
   }

   // <ui_handle.png>
   protected method handleMapGroupAdd() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_MapGroup mapgrp <= pat.addMapGroup(tm_mapgrp.getCursorIndex());
         if(null != mapgrp)
         {
            tv_mapgrp.tableModelChanged();
            tv_mapgrp.moveCursorToRow(pat.getMapGroupIdx(mapgrp));

            Global.Print("Add Map Group");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapGroupClone() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_MapGroup mapgrp <= getSelectedMapGroup();
         if(null != mapgrp)
         {
            NAR_MapGroup mapgrpNew <= pat.addMapGroup(tm_mapgrp.getCursorIndex());

            if(null != mapgrpNew)
            {
               mapgrpNew.copyFrom(mapgrp);
               // // mapgrpNew.uid = pat.allocMapGroupUID();

               tv_mapgrp.tableModelChanged();
               tv_mapgrp.moveCursorToRow(pat.getMapGroupIdx(mapgrpNew));

               Global.Print("Clone Map Group");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapGroupRemove() {
      NAR_MapGroup mapgrp <= getSelectedMapGroup();
      if(null != mapgrp)
      {
         dlg_deletemapgrp <= new Dialog_AR_DeleteMapGroup;
         dlg_deletemapgrp.run(this, mapgrp.name);
      }
   }

   // <ui_handle.png>
   public method handleMapGroupRemove2() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int mapgrpNr = tm_mapgrp.getCursorIndex();
         if(-1 != mapgrpNr)
         {
            if((mapgrpNr > 0) && (mapgrpNr == (tm_mapgrp.getNumRows() - 1)))
            {
               tv_mapgrp.moveCursorToPreviousRow();
            }

            pat.removeMapGroupByIdx(mapgrpNr);

            tv_mapgrp.tableModelChanged();

            handleSnapshotChanged(false/*bFromUI*/);

            Global.Print("Remove Map Group");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapGroupMoveUp() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int mapgrpNr = tm_mapgrp.getCursorIndex();
         if(-1 != mapgrpNr)
         {
            if(pat.moveMapGroupUp(mapgrpNr))
            {
               tv_mapgrp.moveCursorToPreviousRow();
               tv_mapgrp.tableModelChanged();

               Global.Print("Move map group up");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapGroupMoveDown() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         int mapgrpNr = tm_mapgrp.getCursorIndex();
         if(-1 != mapgrpNr)
         {
            if(pat.moveMapGroupDown(mapgrpNr))
            {
               tv_mapgrp.moveCursorToNextRow();
               tv_mapgrp.tableModelChanged();

               Global.Print("Move map group down");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapGroupNameChanged() {
      NodeAnalogRytmPattern pat <= getEditPattern();
      if(null != pat)
      {
         NAR_MapGroup mapgrp <= pat.getCurrentMapGroup();
         if(null != mapgrp)
         {
            mapgrp.name = tf_mapgrp_name.getText();

            tv_mapgrp.tableModelChanged();

            Global.Print("Map group name is \""+mapgrp.name+"\"");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapEntryChanged(boolean _bFromUI) {
      NAR_MapGroup mapgrp <= getSelectedMapGroup();

      tf_mapen_name.setText("");
      tf_mapen_name.setEditable(false);

      cm_mapen_input_id1.setSelectedOption(-1);
      cm_mapen_input_id1.setEditable(false);

      cm_mapen_input_id2.setSelectedOption(-1);
      cm_mapen_input_id2.setEditable(false);

      fp_mapen_input_arg1.setEditable(false);
      fp_mapen_input_arg2.setEditable(false);

      tm_mapac.entry <= null;

      if(null != mapgrp)
      {
         // // if(_bFromUI)
         // // {
         // //    // // pat.current_group_idx = tm_mapgrp.getCursorIndex();
         // // }

         NAR_MapEntry mapen <= getSelectedMapEntry();

         if(null != mapen)
         {
            tf_mapen_name.setText(mapen.name);
            tf_mapen_name.setEditable(true);

            cm_mapen_input_id1.setSelectedOption(mapen.input_id1);
            cm_mapen_input_id1.setEditable(true);

            cm_mapen_input_id2.setSelectedOption(mapen.input_id2);
            cm_mapen_input_id2.setEditable(true);

            fp_mapen_input_arg1.setEditable(true);
            fp_mapen_input_arg2.setEditable(true);

            handleMapEntryInputId1Changed(_bFromUI); // Also sets input_arg1
            handleMapEntryInputId2Changed(_bFromUI); // Also sets input_arg2

            tm_mapac.entry <= mapen;
            tv_mapac.tableModelChanged();

            tv_mapac.moveCursorToFirstRowIfNoneSelected();

            redraw();
         }
      }
      else
      {
         tv_mapac.tableModelChanged();
      }

      setLearnMode(LEARN_NONE, true/*bQuiet*/);

      handleMapActionChanged(false/*bFromUI*/, false/*bFromLearn*/);
   }

   // <ui_handle.png>
   protected method handleMapEntryAdd() {
      NAR_MapGroup mapgrp <= getSelectedMapGroup();
      if(null != mapgrp)
      {
         NAR_MapEntry mapen <= mapgrp.addMapEntry(tm_mapen.getCursorIndex());
         if(null != mapen)
         {
            tv_mapen.tableModelChanged();
            tv_mapen.moveCursorToRow(mapgrp.getMapEntryIdx(mapen));

            Global.Print("Add Map Entry");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapEntryClone() {
      NAR_MapGroup mapgrp <= getSelectedMapGroup();
      if(null != mapgrp)
      {
         NAR_MapEntry mapen <= getSelectedMapEntry();
         if(null != mapen)
         {
            NAR_MapEntry mapenNew <= mapgrp.addMapEntry(tm_mapen.getCursorIndex());
            if(null != mapenNew)
            {
               mapenNew.copyFrom(mapen);

               tv_mapen.tableModelChanged();
               tv_mapen.moveCursorToRow(mapgrp.getMapEntryIdx(mapenNew));

               Global.Print("Clone Map Entry");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapEntryRemove() {
      NAR_MapEntry mapen <= getSelectedMapEntry();
      if(null != mapen)
      {
         dlg_deletemapen <= new Dialog_AR_DeleteMapEntry;
         dlg_deletemapen.run(this, mapen.name);
      }
   }

   // <ui_handle.png>
   public method handleMapEntryRemove2() {
      NAR_MapGroup mapgrp <= getSelectedMapGroup();
      if(null != mapgrp)
      {
         int mapenNr = tm_mapen.getCursorIndex();
         if(-1 != mapenNr)
         {
            if((mapenNr > 0) && (mapenNr == (tm_mapen.getNumRows() - 1)))
            {
               tv_mapen.moveCursorToPreviousRow();
            }

            mapgrp.removeMapEntryByIdx(mapenNr);

            tv_mapen.tableModelChanged();

            handleMapGroupChanged(false/*bFromUI*/);

            Global.Print("Remove Map Entry");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapEntryMoveUp() {
      NAR_MapGroup mapgrp <= getSelectedMapGroup();
      if(null != mapgrp)
      {
         int mapenNr = tm_mapen.getCursorIndex();
         if(-1 != mapenNr)
         {
            if(mapgrp.moveMapEntryUp(mapenNr))
            {
               tv_mapen.moveCursorToPreviousRow();
               tv_mapen.tableModelChanged();

               Global.Print("Move map entry up");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapEntryMoveDown() {
      NAR_MapGroup mapgrp <= getSelectedMapGroup();
      if(null != mapgrp)
      {
         int mapenNr = tm_mapen.getCursorIndex();
         if(-1 != mapenNr)
         {
            if(mapgrp.moveMapEntryDown(mapenNr))
            {
               tv_mapen.moveCursorToNextRow();
               tv_mapen.tableModelChanged();

               Global.Print("Move map entry down");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapEntryNameChanged() {
      NAR_MapEntry mapen <= getSelectedMapEntry();
      if(null != mapen)
      {
         mapen.name = tf_mapen_name.getText();

         mapen.autoUpdateActionNames();

         tv_mapen.tableModelChanged();

         handleMapActionChanged(false/*bFromUI*/, false/*bFromLearn*/); // update name

         Global.Print("Map entry name is \""+mapen.name+"\"");
      }
   }

   // <ui_handle.png>
   protected method handleMapEntryInputId1Changed(boolean _bFromUI) {
      NAR_MapEntry mapen <= getSelectedMapEntry();
      if(null != mapen)
      {
         mapen.setInputId1(cm_mapen_input_id1.getSelectedOption());

         switch(mapen.input_id1)
         {
            default:
               break;

            case NAR_MapEntry.IN_TRIG:
               fp_mapen_input_arg1.setMinMaxValues(1, 13); // (todo) FW should send 1..16 but only sends 1..13 ATM [06Mar2016]
               fp_mapen_input_arg1.setValue(mapen.input_arg1 + 1);
               mapen.setInputArg1FromUI(fp_mapen_input_arg1.getFloatValue());
               break;

            case NAR_MapEntry.IN_MUTE:
            case NAR_MapEntry.IN_PERF:
            case NAR_MapEntry.IN_SCENE:
               fp_mapen_input_arg1.setMinMaxValues(1, 12);
               fp_mapen_input_arg1.setValue(mapen.input_arg1 + 1);
               mapen.setInputArg1FromUI(fp_mapen_input_arg1.getFloatValue());
               break;

            case NAR_MapEntry.IN_NRPN:
               fp_mapen_input_arg1.setMinMaxValues(0, 16383);
               fp_mapen_input_arg1.setValue(mapen.input_arg1);
               mapen.setInputArg1FromUI(fp_mapen_input_arg1.getFloatValue());
               break;
         }

         tv_mapen.tableModelChanged();

         if(_bFromUI)
         {
            Global.Print("Map entry input type 1 is \""+cm_mapen_input_id1.getSelectedOptionName()+"\"");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapEntryInputId2Changed(boolean _bFromUI) {
      NAR_MapEntry mapen <= getSelectedMapEntry();
      if(null != mapen)
      {
         mapen.setInputId2(cm_mapen_input_id2.getSelectedOption());

         switch(mapen.input_id2)
         {
            default:
               fp_mapen_input_arg2.setEditable(false);
               break;

            case NAR_MapEntry.IN_TRIG:
               fp_mapen_input_arg2.setMinMaxValues(1, 13); // (todo) FW should send 1..16 but only sends 1..13 ATM [06Mar2016]
               fp_mapen_input_arg2.setValue(mapen.input_arg2 + 1);
               fp_mapen_input_arg2.setEditable(true);
               mapen.setInputArg2FromUI(fp_mapen_input_arg2.getFloatValue());
               break;

            case NAR_MapEntry.IN_MUTE:
            case NAR_MapEntry.IN_PERF:
            case NAR_MapEntry.IN_SCENE:
               fp_mapen_input_arg2.setMinMaxValues(1, 12);
               fp_mapen_input_arg2.setValue(mapen.input_arg2 + 1);
               fp_mapen_input_arg2.setEditable(true);
               mapen.setInputArg2FromUI(fp_mapen_input_arg2.getFloatValue());
               break;

            case NAR_MapEntry.IN_NRPN:
               fp_mapen_input_arg2.setMinMaxValues(0, 16383);
               fp_mapen_input_arg2.setValue(mapen.input_arg2);
               fp_mapen_input_arg2.setEditable(true);
               mapen.setInputArg2FromUI(fp_mapen_input_arg2.getFloatValue());
               break;
         }

         tv_mapen.tableModelChanged();

         if(_bFromUI)
         {
            Global.Print("Map entry input type 2 is \""+cm_mapen_input_id2.getSelectedOptionName()+"\"");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapEntryInputArg1Changed() {
      NAR_MapEntry mapen <= getSelectedMapEntry();
      if(null != mapen)
      {
         mapen.setInputArg1FromUI(fp_mapen_input_arg1.getFloatValue());

         tv_mapen.tableModelChanged();

         Global.Print("Map entry arg is \""+fp_mapen_input_arg1.getFloatValue()+"\"");
      }
   }

   // <ui_handle.png>
   protected method handleMapEntryInputArg2Changed() {
      NAR_MapEntry mapen <= getSelectedMapEntry();
      if(null != mapen)
      {
         mapen.setInputArg2FromUI(fp_mapen_input_arg2.getFloatValue());

         tv_mapen.tableModelChanged();

         Global.Print("Map entry arg 2 is \""+fp_mapen_input_arg2.getFloatValue()+"\"");
      }
   }

   // <method.png>
   protected method toggleMapEntryLearn() {
      setLearnMode(LEARN_INPUT, false/*bQuiet*/);
   }

   // <ui_handle.png>
   protected method handleMapActionChanged(boolean _bFromUI, boolean _bFromLearn) {
      NAR_MapAction mapac <= getSelectedMapAction();

      tf_mapac_name.setText("");
      tf_mapac_name.setEditable(false);

      cm_mapac_action_id.setSelectedOption(-1);
      cm_mapac_action_id.setEditable(false);

      fp_mapac_arg1.setEditable(false);
      fp_mapac_arg2.setEditable(false);
      fp_mapac_arg3.setEditable(false);

      cm_mapac_ext_dev.setSelectedOption(-1);
      cm_mapac_ext_dev.setEditable(false);

      cm_mapac_ext_ch.setSelectedOption(-1);
      cm_mapac_ext_ch.setEditable(false);

      if(null != mapac)
      {
         // // if(_bFromUI)
         // // {
         // //    // // pat.current_group_idx = tm_mapgrp.getCursorIndex();
         // // }

         tf_mapac_name.setText(mapac.name);
         tf_mapac_name.setEditable(true);

         cm_mapac_action_id.setSelectedOption(mapac.action_id);
         cm_mapac_action_id.setEditable(true);

         fp_mapac_arg1.setValue(mapac.action_arg1);
         fp_mapac_arg2.setValue(mapac.action_arg2);
         fp_mapac_arg3.setValue(mapac.action_arg3);

         fp_mapac_arg1.setEditable(true);
         fp_mapac_arg2.setEditable(true);
         fp_mapac_arg3.setEditable(true);

         cm_mapac_ext_dev.setSelectedOption(MIDI.UnsortedToSortedDevIdx(mapac.ext_dev_idx));
         cm_mapac_ext_dev.setEditable(true);

         cm_mapac_ext_ch.setSelectedOption(mapac.ext_midi_ch);
         cm_mapac_ext_ch.setEditable(true);

         handleMapActionIdChanged(false); // Update editable state dependent on action_id

         redraw();
      }

      if(!_bFromLearn)
      {
         setLearnMode(LEARN_NONE, true/*bQuiet*/);
      }
   }

   // <ui_handle.png>
   protected method handleMapActionAdd() {
      NAR_MapEntry mapen <= getSelectedMapEntry();
      if(null != mapen)
      {
         NAR_MapAction mapac <= mapen.addMapAction(tm_mapac.getCursorIndex());
         if(null != mapac)
         {
            if(1 == mapen.actions.numElements)
            {
               mapac.name = mapen.name;
            }

            tv_mapac.tableModelChanged();

            tv_mapac.moveCursorToRow(mapen.getMapActionIdx(mapac));

            Global.Print("Add Map Action");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapActionClone() {
      NAR_MapEntry mapen <= getSelectedMapEntry();
      if(null != mapen)
      {
         NAR_MapAction mapac <= getSelectedMapAction();
         if(null != mapac)
         {
            NAR_MapAction mapacNew <= mapen.addMapAction(tm_mapac.getCursorIndex());

            if(null != mapacNew)
            {
               mapacNew.copyFrom(mapac);

               tv_mapac.tableModelChanged();

               tv_mapac.moveCursorToRow(mapen.getMapActionIdx(mapacNew));

               Global.Print("Clone Map Action");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapActionRemove() {
      NAR_MapAction mapac <= getSelectedMapAction();
      if(null != mapac)
      {
         dlg_deletemapac <= new Dialog_AR_DeleteMapAction;
         dlg_deletemapac.run(this, mapac.name);
      }
   }

   // <ui_handle.png>
   public method handleMapActionRemove2() {
      NAR_MapEntry mapen <= getSelectedMapEntry();
      if(null != mapen)
      {
         int mapacNr = tm_mapac.getCursorIndex();
         if(-1 != mapacNr)
         {
            if((mapacNr > 0) && (mapacNr == (tm_mapac.getNumRows() - 1)))
            {
               tv_mapac.moveCursorToPreviousRow();
            }

            mapen.removeMapActionByIdx(mapacNr);

            tv_mapac.tableModelChanged();

            Global.Print("Remove Map Action");
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapActionMoveUp() {
      NAR_MapEntry mapen <= getSelectedMapEntry();
      if(null != mapen)
      {
         int mapacNr = tm_mapac.getCursorIndex();
         if(-1 != mapacNr)
         {
            if(mapen.moveMapActionUp(mapacNr))
            {
               tv_mapac.moveCursorToPreviousRow();
               tv_mapac.tableModelChanged();

               Global.Print("Move map action up");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapActionMoveDown() {
      NAR_MapEntry mapen <= getSelectedMapEntry();
      if(null != mapen)
      {
         int mapacNr = tm_mapac.getCursorIndex();
         if(-1 != mapacNr)
         {
            if(mapen.moveMapActionDown(mapacNr))
            {
               tv_mapac.moveCursorToNextRow();
               tv_mapac.tableModelChanged();

               Global.Print("Move map action down");
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleMapActionNameChanged() {
      NAR_MapAction mapac <= getSelectedMapAction();
      if(null != mapac)
      {
         mapac.name = tf_mapac_name.getText();
         mapac.b_name_edited = true;

         NAR_MapEntry mapen <= getSelectedMapEntry();
         if(null != mapen)
         {
            if(mapac.name == mapen.name)
            {
               mapac.b_name_edited = false;
            }
         }


         tv_mapac.tableModelChanged();

         Global.Print("Map action name is \""+mapac.name+"\"");
      }
   }

   // <ui_handle.png>
   protected method handleMapActionIdChanged(boolean _bFromUI) {
      NAR_MapAction mapac <= getSelectedMapAction();
      if(null != mapac)
      {
         mapac.setActionId(cm_mapac_action_id.getSelectedOption());

         fp_mapac_arg1.setToolTipCaption("Action arg 1");
         fp_mapac_arg2.setToolTipCaption("Action arg 2");
         fp_mapac_arg3.setToolTipCaption("Action arg 3");

         switch(mapac.action_id)
         {
            default:
               fp_mapac_arg1.setEditable(false);
               fp_mapac_arg1.setEnableMaxEditable(false);
               fp_mapac_arg1.setMaxValue(127);
               fp_mapac_arg1.setUserTable(null);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_FLOAT);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg2.setEditable(false);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(false);
               cm_mapac_ext_ch.setEditable(false);
               break;

            case NAR_MapAction.AC_SNAPSHOT_SELECT:
               fp_mapac_arg1.setToolTipCaption("Snapshot nr\n\n(note) When this is changed, the corresponding snapshot name is displayed in the status bar");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(false);
               fp_mapac_arg1.setMaxValue(127);
               fp_mapac_arg1.setUserTable(snapshotnr_options);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_USER);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg2.setEditable(false);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(false);
               cm_mapac_ext_ch.setEditable(false);
               break;

            case NAR_MapAction.AC_PAT_SELECT:
            case NAR_MapAction.AC_PAT_RECV:
            case NAR_MapAction.AC_PAT_SEND:
               fp_mapac_arg1.setToolTipCaption("Pattern UID\n\n(note) 0=recv/send currently select pattern\n\n(note) When this is changed, the corresponding pattern name is displayed in the status bar");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(true);
               fp_mapac_arg1.setMaxValueLimit(16367);
               fp_mapac_arg1.setMaxValue(127);
               fp_mapac_arg1.setUserTable(null);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_FLOAT);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg2.setEditable(false);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(false);
               cm_mapac_ext_ch.setEditable(false);
               break;

            case NAR_MapAction.AC_KIT_SELECT:
            case NAR_MapAction.AC_KIT_RECV:
            case NAR_MapAction.AC_KIT_SEND:
               fp_mapac_arg1.setToolTipCaption("Kit UID\n\n(note) 0=recv/send currently select kit\n\n(note) When this is changed, the corresponding kit name is displayed in the status bar");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(true);
               fp_mapac_arg1.setMaxValueLimit(16367);
               fp_mapac_arg1.setMaxValue(127);
               fp_mapac_arg1.setUserTable(null);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_FLOAT);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg2.setEditable(false);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(false);
               cm_mapac_ext_ch.setEditable(false);
               break;

            case NAR_MapAction.AC_MUTE_SELECT:
            case NAR_MapAction.AC_MUTE_STORE:
            case NAR_MapAction.AC_MUTE_RECALL:
               fp_mapac_arg1.setToolTipCaption("Mute State UID\n\n(note) 0=store/recall currently selected mute state\n\n(note) When this is changed, the corresponding mute state name is displayed in the status bar");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(true);
               fp_mapac_arg1.setMaxValueLimit(16367);
               fp_mapac_arg1.setMaxValue(127);
               fp_mapac_arg1.setUserTable(null);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_FLOAT);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg2.setEditable(false);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(false);
               cm_mapac_ext_ch.setEditable(false);
               break;

            case NAR_MapAction.AC_PERF_SELECT:
            case NAR_MapAction.AC_PERF_STORE:
            case NAR_MapAction.AC_PERF_RECALL:
               fp_mapac_arg1.setToolTipCaption("Perf State UID\n\n(note) 0=store/recall currently selected perf state\n\n(note) When this is changed, the corresponding perf state name is displayed in the status bar");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(true);
               fp_mapac_arg1.setMaxValueLimit(16367);
               fp_mapac_arg1.setMaxValue(127);
               fp_mapac_arg1.setUserTable(null);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_FLOAT);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg2.setEditable(false);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(false);
               cm_mapac_ext_ch.setEditable(false);
               break;

            case NAR_MapAction.AC_PERF_TRANSITION:
               fp_mapac_arg1.setToolTipCaption("Perf State UID\n\n(note) 0=transition to currently selected perf state\n\n(note) invalid UID=stop current transition");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(true);
               fp_mapac_arg1.setMaxValueLimit(16367);
               fp_mapac_arg1.setMaxValue(127);
               fp_mapac_arg1.setUserTable(null);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_FLOAT);
               fp_mapac_arg2.setToolTipCaption("Transition time (num 16th)");
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg2.setEditable(true);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(false);
               cm_mapac_ext_ch.setEditable(false);
               break;

            case NAR_MapAction.AC_GROUP_SELECT:
               fp_mapac_arg1.setToolTipCaption("Group UID\n\n(note) When this is changed, the corresponding group name is displayed in the status bar");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(false);
               fp_mapac_arg1.setMaxValue(127);
               fp_mapac_arg1.setUserTable(null);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_FLOAT);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg2.setEditable(false);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(false);
               cm_mapac_ext_ch.setEditable(false);
               break;

            case NAR_MapAction.AC_SCENE_SELECT:
               fp_mapac_arg1.setToolTipCaption("Scene Nr (1..12)");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(false);
               fp_mapac_arg1.setMaxValue(12);
               fp_mapac_arg1.setUserTable(scene_options);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_USER);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg2.setEditable(false);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(false);
               cm_mapac_ext_ch.setEditable(false);
               break;

            case NAR_MapAction.AC_MUTE:
            case NAR_MapAction.AC_UNMUTE:
            case NAR_MapAction.AC_MUTE_TOGGLE:
               fp_mapac_arg1.setToolTipCaption("Track Nr (1..12)");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(false);
               fp_mapac_arg1.setMaxValue(12);
               fp_mapac_arg1.setUserTable(trk_options);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_USER);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg2.setEditable(false);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(false);
               cm_mapac_ext_ch.setEditable(false);
               break;

            case NAR_MapAction.AC_EXT_PRGCHG:
               fp_mapac_arg1.setToolTipCaption("MIDI Program Nr (0..127)");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(false);
               fp_mapac_arg1.setMaxValue(127);
               fp_mapac_arg1.setUserTable(null);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_FLOAT);
               fp_mapac_arg2.setEditable(false);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(true);
               cm_mapac_ext_ch.setEditable(true);
               break;

            case NAR_MapAction.AC_EXT_NOTEON:
               fp_mapac_arg1.setToolTipCaption("MIDI Note Nr (0..127)");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(false);
               fp_mapac_arg1.setMaxValue(127);
               fp_mapac_arg1.setUserTable(MIDI.midi_notes);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_USER);
               fp_mapac_arg2.setToolTipCaption("MIDI Note On Velocity (0..127)");
               fp_mapac_arg2.setEditable(true);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg3.setToolTipCaption("MIDI Note On Duration (#ticks)\n\n(note) 0=infinite");
               fp_mapac_arg3.setEditable(true);
               cm_mapac_ext_dev.setEditable(true);
               cm_mapac_ext_ch.setEditable(true);
               break;

            case NAR_MapAction.AC_EXT_NOTEOFF:
               fp_mapac_arg1.setToolTipCaption("MIDI Note Nr (0..127)");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(false);
               fp_mapac_arg1.setMaxValue(127);
               fp_mapac_arg1.setUserTable(MIDI.midi_notes);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_USER);
               fp_mapac_arg2.setToolTipCaption("MIDI Note Off Velocity (0..127)");
               fp_mapac_arg2.setEditable(true);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(true);
               cm_mapac_ext_ch.setEditable(true);
               break;

            case NAR_MapAction.AC_EXT_CC:
               fp_mapac_arg1.setToolTipCaption("MIDI Continuous Controller Nr (0..127)");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(false);
               fp_mapac_arg1.setUserTable(null);
               fp_mapac_arg1.setMaxValue(127);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_FLOAT);
               fp_mapac_arg2.setToolTipCaption("MIDI Controller value (0..127)");
               fp_mapac_arg2.setEditable(true);
               fp_mapac_arg2.setMaxValue(127);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(true);
               cm_mapac_ext_ch.setEditable(true);
               break;

            case NAR_MapAction.AC_EXT_NRPN:
               fp_mapac_arg1.setToolTipCaption("MIDI Non-Registered Parameter Number (0..16383)");
               fp_mapac_arg1.setEditable(true);
               fp_mapac_arg1.setEnableMaxEditable(false);
               fp_mapac_arg1.setUserTable(null);
               fp_mapac_arg1.setDisplayType(FloatParam.DISPLAY_FLOAT);
               fp_mapac_arg1.setMaxValue(16383);
               fp_mapac_arg2.setToolTipCaption("MIDI NRPN Value (0..16383)");
               fp_mapac_arg2.setEditable(true);
               fp_mapac_arg2.setMaxValue(16383);
               fp_mapac_arg3.setEditable(false);
               cm_mapac_ext_dev.setEditable(true);
               cm_mapac_ext_ch.setEditable(true);
               break;
         }

         tv_mapac.tableModelChanged();

         if(_bFromUI)
            Global.Print("Map action is \""+cm_mapac_action_id.getSelectedOptionName()+"\"");
      }
   }

   // <ui_handle.png>
   protected method handleMapActionArg1Changed() {
      NAR_MapAction mapac <= getSelectedMapAction();
      if(null != mapac)
      {
         mapac.setActionArg1(fp_mapac_arg1.getFloatValue());

         tv_mapac.tableModelChanged();

         NodeAnalogRytmPattern pat <= ar.nodeGetCurrentEditPattern();

         String msg = "Arg1 is "+mapac.action_arg1;

         switch(mapac.action_id)
         {
            default:
               break;

            case NAR_MapAction.AC_SNAPSHOT_SELECT:
               NodeAnalogRytmPattern narSnap <= ar.nodeGetPatternByIdx(mapac.action_arg1);
               if(null != narSnap)
               {
                  msg.append(" ("+narSnap.pat_name+")");
               }
               break;

            case NAR_MapAction.AC_PAT_SELECT:
            case NAR_MapAction.AC_PAT_RECV:
            case NAR_MapAction.AC_PAT_SEND:
               NAR_Pattern narPattern <= pat.getPatternByUID(mapac.action_arg1);
               if(null != narPattern)
               {
                  msg.append(" ("+narPattern.name+")");
               }
               break;

            case NAR_MapAction.AC_KIT_SELECT:
            case NAR_MapAction.AC_KIT_RECV:
            case NAR_MapAction.AC_KIT_SEND:
               NAR_Kit narKit <= pat.getKitByUID(mapac.action_arg1);
               if(null != narKit)
               {
                  msg.append(" ("+narKit.name+")");
               }
               break;

            case NAR_MapAction.AC_MUTE_SELECT:
            case NAR_MapAction.AC_MUTE_STORE:
            case NAR_MapAction.AC_MUTE_RECALL:
               NAR_Mute narMute <= pat.getMuteByUID(mapac.action_arg1);
               if(null != narMute)
               {
                  msg.append(" ("+narMute.name+")");
               }
               break;

            case NAR_MapAction.AC_PERF_SELECT:
            case NAR_MapAction.AC_PERF_STORE:
            case NAR_MapAction.AC_PERF_RECALL:
               NAR_Perf narPerf <= pat.getPerfByUID(mapac.action_arg1);
               if(null != narPerf)
               {
                  msg.append(" ("+narPerf.name+")");
               }
               break;

            case NAR_MapAction.AC_GROUP_SELECT:
               NAR_MapGroup mapgrp <= pat.getMapGroupByUID(mapac.action_arg1);
               if(null != mapgrp)
               {
                  msg.append(" ("+mapgrp.name+")");
               }
               break;
         }

         Global.Print(msg);
      }
   }

   // <ui_handle.png>
   protected method handleMapActionArg2Changed() {
      NAR_MapAction mapac <= getSelectedMapAction();
      if(null != mapac)
      {
         mapac.setActionArg2(fp_mapac_arg2.getFloatValue());

         tv_mapac.tableModelChanged();

         Global.Print("Map action arg2 is "+mapac.action_arg2);
      }
   }

   // <ui_handle.png>
   protected method handleMapActionArg3Changed() {
      NAR_MapAction mapac <= getSelectedMapAction();
      if(null != mapac)
      {
         mapac.setActionArg3(fp_mapac_arg3.getFloatValue());

         tv_mapac.tableModelChanged();

         Global.Print("Map action arg3 is "+mapac.action_arg3);
      }
   }

   // <ui_handle.png>
   protected method handleMapActionExtDevChanged() {
      NAR_MapAction mapac <= getSelectedMapAction();
      if(null != mapac)
      {
         mapac.setExtDevIdx(MIDI.SortedToUnsortedDevIdx(cm_mapac_ext_dev.getSelectedOption()));

         tv_mapac.tableModelChanged();

         Global.Print("Map action ext dev is \""+cm_mapac_ext_dev.getSelectedOptionName()+"\"");
      }
   }

   // <ui_handle.png>
   protected method handleMapActionExtChChanged() {
      NAR_MapAction mapac <= getSelectedMapAction();
      if(null != mapac)
      {
         mapac.setExtMidiCh(cm_mapac_ext_ch.getSelectedOption());

         tv_mapac.tableModelChanged();

         Global.Print("Map action ext ch is \""+cm_mapac_ext_ch.getSelectedOptionName()+"\"");
      }
   }

   // <method.png>
   protected method toggleMapActionLearn() {
      setLearnMode(LEARN_ACTION, false/*bQuiet*/);
   }

   // <ui_handle.png>
   protected method handleGlobalRecv() {
      if(null == ar_global)
         ar_global <= new AR_Global;

      ar.resetGlobalRecvState();
      ar.queueGlobalQuery(ar_global, 0/*globalSlot*/);

      Global.Print("Receive global");

      ta_update_state_count = 0;
      ta_update_state.schedule();
   }

   // <ui_handle.png>
   protected method handleSettingsRecv() {
      if(null == ar_settings)
         ar_settings <= new AR_Settings;

      ar.resetSettingsRecvState();
      ar.queueSettingsQuery(ar_settings);

      Global.Print("Receive settings");

      ta_update_state_count = 0;
      ta_update_state.schedule();
   }

   // <method.png>
   protected method handleEntryRemove(boolean _bConfirm) {
      switch(ts_groups.getActiveTabIndex())
      {
         case TAB_SNAPSHOT:
            if(_bConfirm)
               handleSnapshotFree();
            else
               handleSnapshotFree2();
            break;

         case TAB_KIT:
            if(_bConfirm)
               handleKitRemove();
            else
               handleKitRemove2();
            break;

         case TAB_PATTERN:
            if(_bConfirm)
               handlePatternFree();
            else
               handlePatternFree2();
            break;

         case TAB_MUTE:
            if(_bConfirm)
               handleMuteRemove();
            else
               handleMuteRemove2();
            break;

         case TAB_PERF:
            if(_bConfirm)
               handlePerfRemove();
            else
               handlePerfRemove2();
            break;

         case TAB_MAP:
            if(_bConfirm)
               handleMapEntryRemove();
            else
               handleMapEntryRemove2();
            break;
      }
   }

   // <method.png>
   protected method handleEntryAdd(boolean _bClone) {
      switch(ts_groups.getActiveTabIndex())
      {
         case TAB_SNAPSHOT:
            if(_bClone)
               handleSnapshotClone();
            else
               handleSnapshotAlloc();
            break;

         case TAB_KIT:
            if(_bClone)
               handleKitClone();
            else
               handleKitAdd();
            break;

         case TAB_PATTERN:
            if(_bClone)
               handlePatternClone();
            else
               handlePatternAdd();
            break;

         case TAB_MUTE:
            if(_bClone)
               handleMuteClone();
            else
               handleMuteAdd();
            break;

         case TAB_PERF:
            if(_bClone)
               handlePerfClone();
            else
               handlePerfAdd();
            break;

         case TAB_MAP:
            if(_bClone)
               handleMapEntryClone();
            else
               handleMapEntryAdd();
            break;
      }
   }

   // <method.png>
   protected method handleEntryMove(boolean _bUp) {
      switch(ts_groups.getActiveTabIndex())
      {
         case TAB_SNAPSHOT:
            break;

         case TAB_KIT:
            if(_bUp)
               handleKitMoveUp();
            else
               handleKitMoveDown();
            break;

         case TAB_PATTERN:
            if(_bUp)
               handlePatternMoveUp();
            else
               handlePatternMoveDown();
            break;

         case TAB_MUTE:
            if(_bUp)
               handleMuteMoveUp();
            else
               handleMuteMoveDown();
            break;

         case TAB_PERF:
            if(_bUp)
               handlePerfMoveUp();
            else
               handlePerfMoveDown();
            break;

         case TAB_MAP:
            if(tv_mapgrp.hierarchyHasKeyboardFocus())
            {
               if(_bUp)
                  handleMapGroupMoveUp();
               else
                  handleMapGroupMoveDown();
            }
            else if(tv_mapac.hierarchyHasKeyboardFocus())
            {
               if(_bUp)
                  handleMapActionMoveUp();
               else
                  handleMapActionMoveDown();
            }
            else
            {
               if(_bUp)
                  handleMapEntryMoveUp();
               else
                  handleMapEntryMoveDown();
            }
            break;
      }
   }

   // <method_handle.png>
   public virtual handleStartPlaying() {
   }

   // <method_handle.png>
   public virtual handleStopPlaying(boolean _bAllowBookmark) {
   }

   // <method_handle.png>
   public virtual handleSongPosSelected() {
   }

   // <method_handle.png>
   protected method handleLearnInput(MIDIMapEvent _ev) : boolean {

      Global.Debug2("NAR::handleLearnInput");

      boolean bAuto;
      NAR_MapEntry mapen <= getSelectedMapEntry();
      if(null != mapen)
      {
         Global.Debug2("NAR::handleLearnInput ar.in_dev="+ar.in_dev+" _ev.dev.dev_idx="+(_ev.dev.dev_idx));

         if(ar.in_dev == (_ev.dev.dev_idx))
         {
            Global.Debug2("NAR::handleLearnInput _ev.type="+_ev.type);
            if(MIDIMapDefs.TYPE_NOTE_ON == _ev.type)
            {
               Global.Debug2("NAR::handleLearnInput: TYPE_NOTE_ON dev_ch="+_ev.dev_ch+" learn_input_id="+learn_input_id);

               bAuto = ((_ev.dev_ch == 13/*auto*/) && _ev.arg1 < 12);

               if((_ev.dev_ch < 13) || bAuto)
               {
                  if(1 == learn_input_id)
                  {
                     mapen.setInputId1(NAR_MapEntry.IN_TRIG);
                     mapen.setInputArg1(bAuto ? _ev.arg1 : _ev.dev_ch);

                     cm_mapen_input_id1.setSelectedOption(mapen.input_id1);
                     handleMapEntryInputId1Changed(false/*bFromUI*/); // Also sets input_arg1
                     redraw();

                     Global.Print("MIDILearn: Input type 1 is TRIG, trk="+(mapen.input_arg1+1));

                     learn_input_id++;
                  }
                  else
                  {
                     mapen.setInputId2(NAR_MapEntry.IN_TRIG);
                     mapen.setInputArg2(bAuto ? _ev.arg1 : _ev.dev_ch);

                     cm_mapen_input_id2.setSelectedOption(mapen.input_id2);
                     handleMapEntryInputId2Changed(false/*bFromUI*/); // Also sets input_arg2
                     redraw();

                     Global.Print("MIDILearn: Input type 2 is TRIG, trk="+(mapen.input_arg2+1));

                     setLearnMode(LEARN_NONE, true/*bQuiet*/);
                  }

                  return true;
               }
            }
            else if(MIDIMapDefs.TYPE_NOTE_OFF == _ev.type)
            {
               bAuto = ((_ev.dev_ch == 13/*auto*/) && _ev.arg1 < 12);

               if((_ev.dev_ch < 13) || bAuto)
               {
                  if(2 == learn_input_id)
                  {
                     mapen.setInputId2(NAR_MapEntry.IN_NONE);
                     mapen.setInputArg2(0);

                     cm_mapen_input_id2.setSelectedOption(mapen.input_id2);
                     handleMapEntryInputId2Changed(false/*bFromUI*/); // Also sets input_arg2
                     redraw();

                     setLearnMode(LEARN_NONE, true/*bQuiet*/);
                  }

                  return true;
               }
            }
            else if(MIDIMapDefs.TYPE_CC == _ev.type)
            {
               if(94 == _ev.ext_type) // Mute
               {
                  if(_ev.dev_ch < 12)
                  {
                     if(1 == learn_input_id)
                     {
                        mapen.setInputId1(NAR_MapEntry.IN_MUTE);
                        mapen.setInputArg1(_ev.dev_ch);

                        cm_mapen_input_id1.setSelectedOption(mapen.input_id1);
                        handleMapEntryInputId1Changed(false/*bFromUI*/); // Also sets input_arg1
                        redraw();

                        mapen.setInputId2(NAR_MapEntry.IN_NONE);
                        mapen.setInputArg2(0);

                        cm_mapen_input_id2.setSelectedOption(mapen.input_id2);
                        handleMapEntryInputId2Changed(false/*bFromUI*/); // Also sets input_arg2
                        redraw();

                        setLearnMode(LEARN_NONE, true/*bQuiet*/);

                        Global.Print("MIDILearn: Input type is MUTE, trk="+(mapen.input_arg1+1));
                     }
                     else
                     {
                        mapen.setInputId2(NAR_MapEntry.IN_MUTE);
                        mapen.setInputArg2(_ev.dev_ch);

                        cm_mapen_input_id2.setSelectedOption(mapen.input_id2);
                        handleMapEntryInputId2Changed(false/*bFromUI*/); // Also sets input_arg2
                        redraw();

                        setLearnMode(LEARN_NONE, true/*bQuiet*/);

                        Global.Print("MIDILearn: Input type 2 is MUTE, trk="+(mapen.input_arg2+1));
                     }

                     return true;
                  }
               }
               else if(35 <= _ev.ext_type <= 47) // PerfCtl
               {
                  if(1 == learn_input_id)
                  {
                     mapen.setInputId1(NAR_MapEntry.IN_PERF);
                     mapen.setInputArg1(_ev.ext_type - 35);

                     cm_mapen_input_id1.setSelectedOption(mapen.input_id1);
                     handleMapEntryInputId1Changed(false/*bFromUI*/); // Also sets input_arg1
                     redraw();

                     mapen.setInputId2(NAR_MapEntry.IN_NONE);
                     mapen.setInputArg2(0);

                     cm_mapen_input_id2.setSelectedOption(mapen.input_id2);
                     handleMapEntryInputId2Changed(false/*bFromUI*/); // Also sets input_arg2
                     redraw();

                     learn_input_last_cc = _ev.ext_type;
                     learn_input_id++;

                     Global.Print("MIDILearn: Input type 1 is PERF, perfctl="+(mapen.input_arg1+1));
                  }
                  else
                  {
                     if(learn_input_last_cc == _ev.ext_type)
                     {
                        if(0 == _ev.arg1) // Release
                        {
                           setLearnMode(LEARN_NONE, true/*bQuiet*/);
                        }
                     }
                     else
                     {
                        mapen.setInputId2(NAR_MapEntry.IN_PERF);
                        mapen.setInputArg2(_ev.ext_type - 35);

                        cm_mapen_input_id2.setSelectedOption(mapen.input_id2);
                        handleMapEntryInputId2Changed(false/*bFromUI*/); // Also sets input_arg2
                        redraw();

                        setLearnMode(LEARN_NONE, true/*bQuiet*/);

                        Global.Print("MIDILearn: Input type 2 is PERF, perfctl="+(mapen.input_arg2+1));
                     }
                  }

                  return true;
               }
               else if(92 == _ev.ext_type) // Scene
               {
                  if(1 <= _ev.arg1 <= 12)
                  {
                     if(1 == learn_input_id)
                     {
                        mapen.setInputId1(NAR_MapEntry.IN_SCENE);
                        mapen.setInputArg1(_ev.arg1 - 1);

                        cm_mapen_input_id1.setSelectedOption(mapen.input_id1);
                        handleMapEntryInputId1Changed(false/*bFromUI*/); // Also sets input_arg1
                        redraw();

                        mapen.setInputId2(NAR_MapEntry.IN_NONE);
                        mapen.setInputArg2(0);

                        cm_mapen_input_id2.setSelectedOption(mapen.input_id2);
                        handleMapEntryInputId2Changed(false/*bFromUI*/); // Also sets input_arg2
                        redraw();

                        setLearnMode(LEARN_NONE, true/*bQuiet*/);

                        Global.Print("MIDILearn: Input type is SCENE, nr="+(mapen.input_arg1+1));
                     }
                     else
                     {
                        mapen.setInputId2(NAR_MapEntry.IN_SCENE);
                        mapen.setInputArg2(_ev.arg1 - 1);

                        cm_mapen_input_id2.setSelectedOption(mapen.input_id2);
                        handleMapEntryInputId2Changed(false/*bFromUI*/); // Also sets input_arg2
                        redraw();

                        setLearnMode(LEARN_NONE, true/*bQuiet*/);

                        Global.Print("MIDILearn: Input type 2 is SCENE, nr="+(mapen.input_arg2+1));
                     }

                     return true;
                  }
               }
            }
         }
      }

      return false;
   }

   // <method_handle.png>
   protected method handleLearnAction(MIDIMapEvent _ev) : boolean {

      NAR_MapAction mapac <= getSelectedMapAction();

      if(null != mapac)
      {
         if(MIDIMapDefs.TYPE_NOTE_ON == _ev.type)
         {
            mapac.ext_dev_idx = _ev.dev.dev_idx;
            mapac.ext_midi_ch = _ev.dev_ch;
            mapac.action_id = NAR_MapAction.AC_EXT_NOTEON;
            mapac.action_arg1 = _ev.arg1; // Note Number
            mapac.action_arg2 = _ev.arg2; // Velocity
            mapac.action_arg3 = 1;        // Duration
            // // setLearnMode(LEARN_NONE, true/*bQuiet*/);
            handleMapActionChanged(false/*bFromUI*/, true/*bFromLearn*/);
            Global.Print("Learn EXT_NOTE_ON action");
            return true;
         }
         else if(MIDIMapDefs.TYPE_NOTE_OFF == _ev.type)
         {
            mapac.ext_dev_idx = _ev.dev.dev_idx;
            mapac.ext_midi_ch = _ev.dev_ch;
            mapac.action_id = NAR_MapAction.AC_EXT_NOTEOFF;
            mapac.action_arg1 = _ev.arg1; // Note Number
            mapac.action_arg2 = _ev.arg2; // Velocity
            // // setLearnMode(LEARN_NONE, true/*bQuiet*/);
            handleMapActionChanged(false/*bFromUI*/, true/*bFromLearn*/);
            Global.Print("Learn EXT_NOTE_OFF action");
            return true;
         }
         else if(MIDIMapDefs.TYPE_CC == _ev.type)
         {
            mapac.ext_dev_idx = _ev.dev.dev_idx;
            mapac.ext_midi_ch = _ev.dev_ch;
            mapac.action_id = NAR_MapAction.AC_EXT_CC;
            mapac.action_arg1 = _ev.ext_type; // CC Nr
            mapac.action_arg2 = _ev.arg1;     // CC Value
            // // setLearnMode(LEARN_NONE, true/*bQuiet*/);
            handleMapActionChanged(false/*bFromUI*/, true/*bFromLearn*/);
            Global.Print("Learn EXT_CC action");
            return true;
         }
         else if(MIDIMapDefs.TYPE_PROGRAM_CHANGE == _ev.type)
         {
            mapac.ext_dev_idx = _ev.dev.dev_idx;
            mapac.ext_midi_ch = _ev.dev_ch;
            mapac.action_id = NAR_MapAction.AC_EXT_PRGCHG;
            mapac.action_arg1 = _ev.arg1;     // Program Nr
            // // setLearnMode(LEARN_NONE, true/*bQuiet*/);
            handleMapActionChanged(false/*bFromUI*/, true/*bFromLearn*/);
            Global.Print("Learn EXT_PRGCHG action");
            return true;
         }
         else if(MIDIMapDefs.TYPE_NRPN == _ev.type)
         {
            mapac.ext_dev_idx = _ev.dev.dev_idx;
            mapac.ext_midi_ch = _ev.dev_ch;
            mapac.action_id = NAR_MapAction.AC_EXT_NRPN;
            mapac.action_arg1 = _ev.ext_type;     // NRPN
            mapac.action_arg2 = _ev.arg1;         // NRPN Value
            handleMapActionChanged(false/*bFromUI*/, true/*bFromLearn*/);
            Global.Print("Learn EXT_PRGCHG action");
            return true;
         }
      }

      return false;
   }

   // <midi_mml.png>
   public virtual mmlHandleEventUI(MIDIMapEvent _ev) : boolean {

      // trace "xxx nt:mmlHandleEventUI";

      if(_ev.isReservedEvent())
         return false;

      MIDIMapEvent evXForm = _ev;
      MIDIMorphScene.TransformEvent(evXForm);
      evXForm.echoTransformForced();

      switch(ar.learn_mode)
      {
         case LEARN_INPUT:
            return handleLearnInput(evXForm);

         case LEARN_ACTION:
            return handleLearnAction(evXForm);
      }

      return false;
   }

   // <ui_timer.png>
   public virtual handleReplayTimer() {
   }

   // <ui_timer.png>
   protected method handleMIDILearnTimer() {
      // trace "xxx handleMIDILearnTimer: learn_timeout="+learn_timeout+" mode="+ar.learn_mode;

      if(LEARN_NONE != ar.learn_mode)
      {
         learn_timeout--;

         if(learn_timeout <= 0)
         {
            setLearnMode(LEARN_NONE, false/*bQuiet*/);
         }
         else
         {
            Button bt <= getLearnButton();

            if(learn_timeout & 1)
               bt.setBackgroundTint(TINT32_LEARN);
            else
               bt.setBackgroundTint(0);

            if(0 == (learn_timeout & 1))
            {
               if(0 != (learn_timeout & 2))
                  bt.setCaption(" "+(learn_timeout/2)+" ");
               else
                  bt.setCaption(" Stop ");
            }

            bt.redraw();

            ta_midi_learn.schedule();
         }
      }
   }

   // <ui_cmd.png>
   public method handleCmdReadPattern(int _off) : boolean {
      NAR_Pattern npat <= getSelectedNARPattern();
      if(null != npat)
      {
         AR_Pattern pat <= npat.ar_pattern;
         if(pat.version >= 4)
         {
            if(2/*raw*/ == pat.currentDataIdx)
            {
               if(0 <= _off < pat.requiredSizeRaw)
               {
                  local Buffer buf;
                  if(pat.getRawBuffer(buf))
                  {
                     local Integer ioOff = _off;
                     local Integer io = buf.peekI8(_off);
                     Global.Debug("Read pattern byte["+_off+" (0x"+ioOff.printf("%04x")+")] : "+io+" (0x"+io.printf("%02x")+")");
                     root_form.focusStatusBar();
                     return true;
                  }
               }
            }
         }
      }
      Global.Warning("Failed to read pattern byte at offset "+_off);
      return false;
   }

   // <ui_cmd.png>
   public method handleCmdReadPatternTrig(int _stepIdx, int _trackIdx) : boolean {
      NAR_Pattern npat <= getSelectedNARPattern();
      if(null != npat)
      {
         AR_Pattern pat <= npat.ar_pattern;
         if(pat.version >= 5)
         {
            local Integer io = pat.getTrig(_trackIdx, _stepIdx);
            int note = pat.getStepNote                 (_trackIdx, _stepIdx);
            int vel  = pat.getStepVelocity             (_trackIdx, _stepIdx);
            int dur  = pat.getStepNoteLength           (_trackIdx, _stepIdx);
            int mic  = pat.getStepMicroTiming          (_trackIdx, _stepIdx);
            int rlen = pat.getStepRetrigLength         (_trackIdx, _stepIdx);
            int rrat = pat.getStepRetrigRate           (_trackIdx, _stepIdx);
            int rvel = pat.getStepRetrigVelocityOffset (_trackIdx, _stepIdx);
            int cond = pat.getStepTrigCondition        (_trackIdx, _stepIdx);
            Global.Debug("Read pattern trig @trackIdx="+_trackIdx+" stepIdx="+_stepIdx+" => flags="+io+" / 0x"+io.printf("%04x"));
            trace "[dbg] handleCmdReadPatternTrig: stepIdx="+_stepIdx+" trig=$"+io.printf("%04x")+" note="+note+"("+(note&127)+") vel="+vel+"("+(vel&127)+") dur="+dur+" mic="+mic+" rlen="+rlen+" rrat="+rrat+" rvel="+rvel+" cond="+cond;

            pat.setStepTrigCondition(_trackIdx, _stepIdx, cond);
            cond = pat.getStepTrigCondition        (_trackIdx, _stepIdx);
            trace "[dbg] handleCmdReadPatternTrig:   write + re-read cond="+cond;

            root_form.focusStatusBar();
            return true;
         }
      }
      Global.Warning("Failed to read pattern trig @trackIdx="+_trackIdx+" stepidx="+_stepIdx);
      return false;
   }

   // <ui_cmd.png>
   public method handleCmdReadKit(int _off) : boolean {
      NAR_Kit nkit <= getSelectedNARKit();
      if(null != nkit)
      {
         AR_Kit kit <= nkit.ar_kit;
         if(kit.version >= 4)
         {
            if(2/*raw*/ == kit.currentDataIdx)
            {
               if(0 <= _off < kit.requiredSizeRaw)
               {
                  local Buffer buf;
                  if(kit.getRawBuffer(buf))
                  {
                     local Integer ioOff = _off;
                     local Integer io = buf.peekI8(_off);
                     Global.Debug("Read kit byte["+_off+" (0x"+ioOff.printf("%04x")+")] : "+io+" (0x"+io.printf("%02x")+")");
                     root_form.focusStatusBar();
                     return true;
                  }
               }
            }
         }
      }
      Global.Warning("Failed to read kit byte at offset "+_off);
      return false;
   }

   // <ui_cmd.png>
   public method handleCmdRead(int _off) : boolean {
      switch(ts_groups.getActiveTabIndex())
      {
         case TAB_PATTERN:
            return handleCmdReadPattern(_off);

         case TAB_KIT:
            return handleCmdReadKit(_off);
      }
      Global.Warning("Failed to read, please change to Pattern or Kit tab");
   }

   // <ui_cmd.png>
   public method handleCmdWritePattern(int _off, byte _val) : boolean {
      NAR_Pattern npat <= getSelectedNARPattern();
      if(null != npat)
      {
         AR_Pattern pat <= npat.ar_pattern;
         if(pat.version >= 4)
         {
            if(2/*raw*/ == pat.currentDataIdx)
            {
               if(0 <= _off < pat.requiredSizeRaw)
               {
                  local Buffer buf;
                  if(pat.getRawBuffer(buf))
                  {
                     local Integer ioOff = _off;
                     local Integer io = _val;
                     Global.Debug("Set pattern byte["+_off+" (0x"+ioOff.printf("%04x")+")] = "+io+" (0x"+io.printf("%02x")+")");
                     buf.pokeI8(_off, _val);
                     root_form.focusStatusBar();
                     return true;
                  }
               }
            }
         }
      }
      Global.Warning("Failed to write pattern byte at offset "+_off);
      return false;
   }

   // <ui_cmd.png>
   public method handleCmdWritePatternTrig(int _stepIdx, short _flags, int _trackIdx) : boolean {
      NAR_Pattern npat <= getSelectedNARPattern();
      if(null != npat)
      {
         AR_Pattern pat <= npat.ar_pattern;
         if(pat.version >= 5)
         {
            local Integer io = _flags;
            pat.setTrig(_trackIdx, _stepIdx, _flags);
            Global.Debug("Write pattern trig trackIdx="+_trackIdx+" @stepIdx="+_stepIdx+" flags="+io+" / 0x"+io.printf("%04x"));
            root_form.focusStatusBar();
            return true;
         }
      }
      Global.Warning("Failed to write pattern trig @trackIdx="+_trackIdx+" stepidx="+_stepIdx+" flags="+_flags);
      return false;
   }

   // <ui_cmd.png>
   public method handleCmdWriteKit(int _off, byte _val) : boolean {
      NAR_Kit nkit <= getSelectedNARKit();
      if(null != nkit)
      {
         AR_Kit kit <= nkit.ar_kit;
         if(kit.version >= 4)
         {
            if(2/*raw*/ == kit.currentDataIdx)
            {
               if(0 <= _off < kit.requiredSizeRaw)
               {
                  local Buffer buf;
                  if(kit.getRawBuffer(buf))
                  {
                     local Integer ioOff = _off;
                     local Integer io = _val;
                     Global.Debug("Set kit byte["+_off+" (0x"+ioOff.printf("%04x")+")] = "+io+" (0x"+io.printf("%02x")+")");
                     buf.pokeI8(_off, _val);
                     root_form.focusStatusBar();
                     return true;
                  }
               }
            }
         }
      }
      Global.Warning("Failed to write kit byte at offset "+_off);
      return false;
   }

   // <ui_cmd.png>
   public method handleCmdWrite(int _off, byte _val) : boolean {
      switch(ts_groups.getActiveTabIndex())
      {
         case TAB_PATTERN:
            return handleCmdWritePattern(_off, _val);

         case TAB_KIT:
            return handleCmdWriteKit(_off, _val);
      }
      Global.Warning("Failed to read, please change to Pattern or Kit tab");
   }

   // <ui_cmd.png>
   public method handleCmdHexDumpPattern(int _off, int _num) : boolean {
      NAR_Pattern npat <= getSelectedNARPattern();
      if(null != npat)
      {
         AR_Pattern pat <= npat.ar_pattern;
         if(pat.version >= 4)
         {
            if(2/*raw*/ == pat.currentDataIdx)
            {
               local Buffer buf;
               if(pat.getRawBuffer(buf))
               {
                  if(0 <= _off < buf.size)
                  {
                     if(0 == _num)
                        _num = buf.size - _off;
                     if( (_off + _num) > buf.size )
                        _num = buf.size - _off;
                     local Integer ioOff = _off;
                     local Integer ioEnd = _off + _num - 1;
                     Global.Debug("Hexdump pattern range 0x"+ioOff.printf("%04x")+" .. 0x"+ioEnd.printf("%04x")+" (num="+_num+"):");
                     Utils.HexDump(buf, _off, _num);
                     root_form.focusStatusBar();
                     return true;
                  }
               }
            }
         }
      }
      return false;
   }

   // <ui_cmd.png>
   public method handleCmdHexDumpKit(int _off, int _num) : boolean {
      NAR_Kit nkit <= getSelectedNARKit();
      if(null != nkit)
      {
         AR_Kit kit <= nkit.ar_kit;
         if(kit.version >= 4)
         {
            if(2/*raw*/ == kit.currentDataIdx)
            {
               local Buffer buf;
               if(kit.getRawBuffer(buf))
               {
                  if(0 <= _off < buf.size)
                  {
                     if(0 == _num)
                        _num = buf.size - _off;
                     if( (_off + _num) > buf.size )
                        _num = buf.size - _off;
                     local Integer ioOff = _off;
                     local Integer ioEnd = _off + _num - 1;
                     Global.Debug("Hexdump kit range 0x"+ioOff.printf("%04x")+" .. 0x"+ioEnd.printf("%04x")+" (num="+_num+"):");
                     Utils.HexDump(buf, _off, _num);
                     root_form.focusStatusBar();
                     return true;
                  }
               }
            }
         }
      }
      return false;
   }

   // <ui_cmd.png>
   public method handleCmdHexDump(int _off, int _num) {
      switch(ts_groups.getActiveTabIndex())
      {
         case TAB_PATTERN:
            return handleCmdHexDumpPattern(_off, _num);

         case TAB_KIT:
            return handleCmdHexDumpKit(_off, _num);
      }
      Global.Warning("Failed to hex-dump, please change to Pattern or Kit tab");
   }

   // <ui_cmd.png>
   public virtual cmdGetAvailableCommands() : StringArray {
      return ["r\t<off>",
              "w\t<off> <byte>",
              "hd\t<off> <num>",
              "pr\t<off>",
              "pw\t<off> <byte>",
              "prt\t<stepidx> [<trackidx>]",
              "pwt\t<stepidx> <flags> [<trackidx>]",
              "kr\t<off>",
              "kw\t<off> <byte>",
              ];
   }

   // <ui_cmd.png>
   public virtual cmdFindArgAutoCompletions(String _cmd, int _argIdx, String _prefix) : StringArray {
      return null;
   }

   // <ui_cmd.png>
   public virtual cmdGetAvailableArgs(String _cmd, int _argIdx) : StringArray {
      switch(_cmd)
      {
         case "r":
         case "w":
         case "hd":
         case "pr":
         case "pw":
         case "prt":
         case "pwt":
         case "kr":
         case "kw":
            break;
      }
      return null;
   }

   // <ui_cmd.png>
   public virtual cmdExec(StringArray _argv) : boolean {
      Global.Debug("NodeAnalogRytmEditor::cmdExec: argv="+_argv);
      switch(_argv.get(0))
      {
         case "r":
            if(_argv.numElements > 1)
               return handleCmdRead(_argv.get(1));
            break;

         case "w":
            if(_argv.numElements > 2)
               return handleCmdWrite(_argv.get(1), _argv.get(2));
            break;

         case "hd":
            return handleCmdHexDump(int(_argv.get(1)), int(_argv.get(2)));

         case "pr":
            if(_argv.numElements > 1)
               return handleCmdReadPattern(_argv.get(1));
            break;

         case "pw":
            if(_argv.numElements > 2)
               return handleCmdWritePattern(_argv.get(1), _argv.get(2));
            break;

         case "prt":
            if(_argv.numElements > 1)
               return handleCmdReadPatternTrig(_argv.get(1)/*stepIdx*/, _argv.get(2)/*trackIdx*/);
            break;

         case "pwt":
            if(_argv.numElements > 2)
               return handleCmdWritePatternTrig(_argv.get(1)/*stepIdx*/, _argv.get(2)/*flags*/, _argv.get(3)/*trackIdx*/);
            break;

         case "kr":
            if(_argv.numElements > 1)
               return handleCmdReadKit(_argv.get(1));
            break;

         case "kw":
            if(_argv.numElements > 2)
               return handleCmdWriteKit(_argv.get(1), _argv.get(2));
            break;
      }
      return false;
   }

   // <ui_mouse.png>
   public virtual onMouse(MouseEvent _ev) : boolean {
      return NodeEditor::onMouse(_ev);
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      switch(_k.pressed)
      {
         case VKEY_DELETE:
            handleEntryRemove(!_k.modShift()/*bConfirm*/);
            return true;

         case VKEY_INSERT:
            handleEntryAdd(_k.modShift()/*bClone*/);
            return true;

         case VKEY_UP:
            if(_k.modCtrl())
            {
               handleEntryMove(true/*bUp*/);
               return true;
            }
            break;

         case VKEY_DOWN:
            if(_k.modCtrl())
            {
               handleEntryMove(false/*bUp*/);
               return true;
            }
            break;

         case VKEY_END:
            if((VMOD_LSHIFT|VMOD_LCTRL) == _k.mod)
            {
               handleSelectPreviousUsedSnapshot();
            }
            else
            {
               if(VMOD_LCTRL == _k.mod)
               {
                  handleSelectPreviousSnapshot();
                  handleSelectPreviousSnapshot();
                  handleSelectPreviousSnapshot();
               }
               handleSelectPreviousSnapshot();
            }
            return true;

         case VKEY_HOME:
            if((VMOD_LSHIFT|VMOD_LCTRL) == _k.mod)
            {
               handleSelectNextUsedSnapshot();
            }
            else
            {
               if(VMOD_LCTRL == _k.mod)
               {
                  handleSelectNextSnapshot();
                  handleSelectNextSnapshot();
                  handleSelectNextSnapshot();
               }
               handleSelectNextSnapshot();
            }
            return true;

         case 'g':
            if(_k.modCtrl())
            {
               handleGlobalRecv();
               return true;
            }
            break;

         case 'h':
            if(_k.modCtrl())
            {
               handleSettingsRecv();
               return true;
            }
            break;

         case 'k':
            // return from trigseq/nt/seq sound edit. same as lctrl-x z
            PageNode pgNode <= root_form.pg_node;
            pgNode.tryPipeNodeABSwap();
            return true;

         case '1':
            if(VMOD_LCTRL == _k.mod)
            {
               ts_groups.setActiveTabIndex(TAB_SNAPSHOT);
               UI.SetKeyboardFocus(cm_snapshot_nr);
               return true;
            }
            break;

         case '2':
            if(VMOD_LCTRL == _k.mod)
            {
               ts_groups.setActiveTabIndex(TAB_IO);
               UI.SetKeyboardFocus(bt_io_reset);
               return true;
            }
            break;

         case '3':
            if(VMOD_LCTRL == _k.mod)
            {
               ts_groups.setActiveTabIndex(TAB_KIT);
               UI.SetKeyboardFocus(tv_kit);
               return true;
            }
            break;

         case '4':
            if(VMOD_LCTRL == _k.mod)
            {
               ts_groups.setActiveTabIndex(TAB_PATTERN);
               UI.SetKeyboardFocus(tv_pattern);
               return true;
            }
            break;

         case '5':
            if(VMOD_LCTRL == _k.mod)
            {
               ts_groups.setActiveTabIndex(TAB_MUTE);
               UI.SetKeyboardFocus(tv_mute);
               return true;
            }
            break;

         case '6':
            if(VMOD_LCTRL == _k.mod)
            {
               ts_groups.setActiveTabIndex(TAB_PERF);
               UI.SetKeyboardFocus(tv_perf);
               return true;
            }
            break;

         case '7':
            if(VMOD_LCTRL == _k.mod)
            {
               ts_groups.setActiveTabIndex(TAB_MAP);
               UI.SetKeyboardFocus(tv_mapgrp);
               return true;
            }
            break;

         case 'n':
            if(_k.modShiftOnly())
            {
               ts_groups.setActiveTabIndex(TAB_SNAPSHOT);
               tf_snapshot_name.onTabFocus();
               return true;
            }
            break;
      }

      switch(_k.pressed)
      {
         case 'a':
            switch(ts_groups.getActiveTabIndex())
            {
               case TAB_KIT:
                  showKitToolsMenu();
                  break;

               case TAB_PATTERN:
                  showPatternToolsMenu();
                  break;

               case TAB_MUTE:
                  showMuteToolsMenu();
                  break;

               case TAB_PERF:
                  showPerfToolsMenu();
                  break;
            }
            return true;

         case 'u':
            // Debug
            if(_k.modCtrl())
            {
               handleSoundRecv();
               return true;
            }
            break;

         case 'e':
            if(TAB_KIT == ts_groups.getActiveTabIndex())
            {
               handleKitEdit();
               return true;
            }
            break;

         case 'f':
            if(_k.modCtrl())
            {
               cm_io_kit_note_redirect.selectNextOptionCycle();
               handleIOKitNoteRedirectChanged();
               return true;
            }
            break;
      }

      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();
      StringAction *sac;

      if(TA_UPDATE_STATE == acName)
      {
         // trace "[trc] TA_UPDATE_STATE";
         handleSnapshotChanged(false/*bFromUI*/);

         if(null != ar_global)
         {
            trace "xxx TA_UPDATE_STATE: ar_global.padDest="+ar_global.padDest;
            ar_global <= null;
         }

         if(null != ar_settings)
         {
            trace "xxx TA_UPDATE_STATE: ar_settings.enableFixedVelocity="+ar_settings.enableFixedVelocity;
            ar_settings <= null;
         }

         if(++ta_update_state_count <= 5)
         {
            ta_update_state.schedule();
         }
         return true;
      }
      else if(TA_UPDATE_PERIODIC == acName)
      {
         // trace "[trc] TA_UPDATE_PERIODIC";
         if(ar.b_ui_update_queued)
         {
            Global.Debug2("TA_UPDATE_PERIODIC: update queued");
            ar.b_ui_update_queued = false;
            handleSnapshotChanged(false/*bFromUI*/);
            redraw();
         }
         if(!ar.b_kit_editor_visible)
         {
            int newTrkIdx = ar.getQueuedKitEditorTrackIdxAndReset();
            if(-1 != newTrkIdx)
            {
               Global.Debug3("NAR: switch editor track via AR trig to newTrkIdx="+newTrkIdx);
               cm_kit_track.setSelectedOption(newTrkIdx);
            }
         }
         ta_update_periodic.schedule();
         return true;
      }
      else if(TA_MIDI_LEARN == acName)
      {
         handleMIDILearnTimer();
         return true;
      }
      else if(TextInputDialog.ACTION_TEXTINPUTDIALOGCLOSED == acName)
      {
         if(@(dlg_kit_uid_base) == @(ap))
         {
            sac <= _action;
            handleKitReEnumerateUIDs2(int(sac.getStringValue()));
            return true;
         }
         else if(@(dlg_pat_uid_base) == @(ap))
         {
            sac <= _action;
            handlePatternReEnumerateUIDs2(int(sac.getStringValue()));
            return true;
         }
         else if(@(dlg_perf_uid_base) == @(ap))
         {
            sac <= _action;
            handlePerfReEnumerateUIDs2(int(sac.getStringValue()));
            return true;
         }
         else if(@(dlg_mute_uid_base) == @(ap))
         {
            sac <= _action;
            handleMuteReEnumerateUIDs2(int(sac.getStringValue()));
            return true;
         }
         else if(@(dlg_kit_samplenr) == @(ap))
         {
            sac <= _action;
            handleKitSampleNr2(int(sac.getStringValue()));
         }
      }

      switch(@(ap))
      {
         default:
            break;

            // Snap:
         case @(ts_groups):
            Global.Print("Active tab is \""+ts_groups.getActiveViewCaption()+"\".");
            return true;

         case @(bt_snapshot_alloc):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleSnapshotClone();
            }
            else
            {
               handleSnapshotAlloc();
            }
            return true;

         case @(bt_snapshot_tools):
            showSnapshotToolsMenu();
            return true;

         case @(pm_snapshot_tools):
            Global.Debug2("pm_snapshot_tools acName="+acName);
            if(!PopupMenu.IsFocusAction(_action))
               refocusDefault();
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close snapshot tools menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "copy":
                  handleSnapshotCopy();
                  return true;

               case "paste":
                  handleSnapshotPaste();
                  return true;

               case "clone":
                  handleSnapshotClone();
                  return true;
            }
            return true;

         case @(bt_snapshot_free):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleSnapshotFree2();
            }
            else
            {
               handleSnapshotFree();
            }
            return true;

         case @(cm_snapshot_nr):
            handleSelectSnapshot();
            return true;

         case @(tf_snapshot_name):
            handleSnapshotNameChanged();
            updateSnapshotNrComboBox();
            if(TextField.ACTION_TEXTENTERED == acName)
               refocusDefault();
            return true;

            // IO:
         case @(cm_in_dev):
            handleInDevChanged();
            return true;

         case @(cb_in_en):
            handleInEnChanged();
            return true;

         case @(cm_out_dev):
            handleOutDevChanged();
            return true;

         case @(cb_out_en):
            handleOutEnChanged();
            return true;

         case @(fp_io_patnumparts):
            handlePatternNumPartsChanged();
            return true;

         case @(bt_io_reset):
            handleIOReset();
            return true;

         case @(cb_io_mute_note):
            handleIOMuteNoteChanged();
            return true;

         case @(cb_io_skip_mute):
            handleIOSkipMuteChanged();
            return true;

         case @(cb_io_skip_perf):
            handleIOSkipPerfChanged();
            return true;

         case @(bt_io_trksound_all):
            handleIOTrkSoundToggle();
            return true;

         case @(cb_io_trksound_perf):
            handleIOTrkSoundPerfChanged();
            return true;

         case @(cb_io_trksound_scene):
            handleIOTrkSoundSceneChanged();
            return true;

         case @(cb_io_trksound_fx):
            handleIOTrkSoundFXChanged();
            return true;

         case @(cb_io_trksound_1):
            handleIOTrkSound1Changed();
            return true;

         case @(cb_io_trksound_2):
            handleIOTrkSound2Changed();
            return true;

         case @(cb_io_trksound_3):
            handleIOTrkSound3Changed();
            return true;

         case @(cb_io_trksound_4):
            handleIOTrkSound4Changed();
            return true;

         case @(cb_io_trksound_5):
            handleIOTrkSound5Changed();
            return true;

         case @(cb_io_trksound_6):
            handleIOTrkSound6Changed();
            return true;

         case @(cb_io_trksound_7):
            handleIOTrkSound7Changed();
            return true;

         case @(cb_io_trksound_8):
            handleIOTrkSound8Changed();
            return true;

         case @(cb_io_trksound_9):
            handleIOTrkSound9Changed();
            return true;

         case @(cb_io_trksound_10):
            handleIOTrkSound10Changed();
            return true;

         case @(cb_io_trksound_11):
            handleIOTrkSound11Changed();
            return true;

         case @(cb_io_trksound_12):
            handleIOTrkSound12Changed();
            return true;

         case @(cm_io_kit_note_redirect):
            handleIOKitNoteRedirectChanged();
            return true;

         case @(cb_io_kiteditor_trkswitch):
            handleIOKitEditorTrkSwitchChanged();
            return true;

         case @(cb_io_kit_note_redirect_pressure):
            handleIOKitNoteRedirectPressureChanged();
            return true;

         case @(cm_kit_track):
            handleKitTrackChanged();
            return true;

         case @(fp_kit_tracklevel):
            handleKitTrackLevelChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               UI.SetKeyboardFocus(tv_kit);
            return true;


            // Kit:
         case @(tv_kit):
            if(acName == TableView.ACTION_ROWCLICKED)
            {
               Global.Print("Send Kit");
               tv_kit.setLeadSelection(tm_kit.getCursorIndex());
               if(cb_kit_mix.isSelected())
               {
                  handleKitMix();
               }
               else
               {
                  handleKitSend();
               }
            }
            else if(acName == TableView.ACTION_ROWSELECTED)
            {
               handleKitChanged(true/*bFromUI*/);
               NAR_Kit narKit <= getSelectedNARKit();
               if(null != narKit)
               {
                  Global.Print("Select Kit UID="+narKit.getUIDDecHexString());
               }
            }
            return true;

         case @(bt_kit_add):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleKitClone();
            }
            else
            {
               handleKitAdd();
            }
            return true;

         case @(bt_kit_remove):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleKitRemove2();
            }
            else
            {
               handleKitRemove();
            }
            return true;

         case @(bt_kit_moveup):
            handleKitMoveUp();
            return true;

         case @(bt_kit_movedown):
            handleKitMoveDown();
            return true;

         case @(tf_kit_name):
            handleKitNameChanged();
            return true;

         case @(bt_kit_edit):
            handleKitEdit();
            return true;

         case @(bt_kit_recv):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               showKitRecvMenu();
            }
            else
            {
               handleKitRecv();
            }
            return true;

         case @(pm_kit_recv):
            Global.Debug2("pm_kit_recv acName="+acName);
            if(!PopupMenu.IsFocusAction(_action))
               refocusDefault();
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close kit recv menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "kitrecv_reset":
                  handleKitRecvReset();
                  return true;

               case "kitrecv_perf":
                  handleKitRecvPerf();
                  return true;

               case "kitrecv_scene":
                  handleKitRecvScene();
                  return true;

               case "kitrecv_fx":
                  handleKitRecvFX();
                  return true;

               case "kitrecv_trk_1":
                  handleKitRecvTrk(0);
                  return true;

               case "kitrecv_trk_2":
                  handleKitRecvTrk(1);
                  return true;

               case "kitrecv_trk_3":
                  handleKitRecvTrk(2);
                  return true;

               case "kitrecv_trk_4":
                  handleKitRecvTrk(3);
                  return true;

               case "kitrecv_trk_5":
                  handleKitRecvTrk(4);
                  return true;

               case "kitrecv_trk_6":
                  handleKitRecvTrk(5);
                  return true;

               case "kitrecv_trk_7":
                  handleKitRecvTrk(6);
                  return true;

               case "kitrecv_trk_8":
                  handleKitRecvTrk(7);
                  return true;

               case "kitrecv_trk_9":
                  handleKitRecvTrk(8);
                  return true;

               case "kitrecv_trk_10":
                  handleKitRecvTrk(9);
                  return true;

               case "kitrecv_trk_11":
                  handleKitRecvTrk(10);
                  return true;

               case "kitrecv_trk_12":
                  handleKitRecvTrk(11);
                  return true;
            }
            return true;

         case @(bt_kit_send):
            handleKitSend();
            return true;

         case @(bt_kit_mix):
            handleKitMix();
            return true;

         case @(cb_kit_mix):
            handleKitMixEnableChanged();
            return true;

         case @(bt_kit_tools):
            showKitToolsMenu();
            return true;

         case @(pm_kit_tools):
            Global.Debug2("pm_kit_tools acName="+acName);
            if(!PopupMenu.IsFocusAction(_action))
               refocusDefault();
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close kit tools menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "kit_enum_uids":
                  handleKitReEnumerateUIDsDlg();
                  return true;

               case "kit_samplenr":
                  showKitSampleNrDialog();
                  return true;

               case "kit_import_syx":
                  handleKitImportSYX();
                  return true;

               case "kit_export_syx":
                  handleKitExportSYX();
                  return true;

               case "kit_action":
                  handleKitAddAction(false/*bNewEntry*/);
                  return true;

               case "kit_entry":
                  handleKitAddAction(true/*bNewEntry*/);
                  return true;

               case "kit_paste_state":
                  handleKitPasteState();
                  return true;

            }
            return true;


            // Pattern:
         case @(tv_pattern):
            if(acName == TableView.ACTION_ROWCLICKED)
            {
               Global.Print("Send Pattern");
               tv_pattern.setLeadSelection(tm_pattern.getCursorIndex());
               handlePatternSend();
            }
            else if(acName == TableView.ACTION_ROWSELECTED)
            {
               handlePatternChanged(true/*bFromUI*/);
               NAR_Pattern narPattern <= getSelectedNARPattern();
               if(null != narPattern)
                  Global.Print("Select Pattern UID="+narPattern.getUIDDecHexString());
            }
            return true;

         case @(bt_pattern_add):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handlePatternClone();
            }
            else
            {
               handlePatternAdd();
            }
            return true;

         case @(bt_pattern_remove):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handlePatternFree2();
            }
            else
            {
               handlePatternFree();
            }
            return true;

         case @(bt_pattern_moveup):
            handlePatternMoveUp();
            return true;

         case @(bt_pattern_movedown):
            handlePatternMoveDown();
            return true;

         case @(tf_pattern_name):
            handlePatternNameChanged();
            return true;

         case @(bt_pattern_recv):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               ar.resetPatternRecvState();
            }
            handlePatternRecv();
            return true;

         case @(bt_pattern_send):
            handlePatternSend();
            return true;

         case @(bt_pattern_tools):
            showPatternToolsMenu();
            return true;

         case @(pm_pattern_tools):
            Global.Debug2("pm_pattern_tools acName="+acName);
            if(!PopupMenu.IsFocusAction(_action))
               refocusDefault();
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close pattern tools menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "pattern_enum_uids":
                  handlePatternReEnumerateUIDsDlg();
                  return true;

               case "pattern_import_syx":
                  handlePatternImportSYX();
                  return true;

               case "pattern_export_syx":
                  handlePatternExportSYX();
                  return true;

               case "pattern_action":
                  handlePatternAddAction(false/*bNewEntry*/);
                  return true;

               case "pattern_entry":
                  handlePatternAddAction(true/*bNewEntry*/);
                  return true;
            }
            return true;



            // Mute:
         case @(tv_mute):
            if(acName == TableView.ACTION_ROWCLICKED)
            {
               Global.Print("Send Mute State");
               tv_kit.setLeadSelection(tm_mute.getCursorIndex());
               handleMuteSend();
            }
            else if(acName == TableView.ACTION_ROWSELECTED)
            {
               handleMuteChanged(true/*bFromUI*/);
               NAR_Mute narMute <= getSelectedNARMute();
               if(null != narMute)
                  Global.Print("Select Mute State UID="+narMute.getUIDDecHexString());
            }
            return true;

         case @(bt_mute_add):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleMuteClone();
            }
            else
            {
               handleMuteAdd();
            }
            return true;

         case @(bt_mute_remove):
            handleMuteRemove();
            return true;

         case @(bt_mute_moveup):
            handleMuteMoveUp();
            return true;

         case @(bt_mute_movedown):
            handleMuteMoveDown();
            return true;

         case @(tf_mute_name):
            handleMuteNameChanged();
            return true;

         case @(bt_mute_store):
            handleMuteStore();
            return true;

         case @(bt_mute_send):
            handleMuteSend();
            return true;

         case @(bt_mute_tools):
            showMuteToolsMenu();
            return true;

         case @(pm_mute_tools):
            Global.Debug2("pm_mute_tools acName="+acName);
            if(!PopupMenu.IsFocusAction(_action))
               refocusDefault();
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close mute tools menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "mute_enum_uids":
                  handleMuteReEnumerateUIDsDlg();
                  return true;

               case "mute_action":
                  handleMuteAddAction(false/*bNewEntry*/);
                  return true;

               case "mute_entry":
                  handleMuteAddAction(true/*bNewEntry*/);
                  return true;
            }
            return true;



            // Perf:
         case @(tv_perf):
            if(acName == TableView.ACTION_ROWCLICKED)
            {
               Global.Print("Send Perf State");
               tv_perf.setLeadSelection(tm_perf.getCursorIndex());
               handlePerfSend();
            }
            else if(acName == TableView.ACTION_ROWSELECTED)
            {
               handlePerfChanged(true/*bFromUI*/);
               NAR_Perf narPerf <= getSelectedNARPerf();
               if(null != narPerf)
               {
                  Global.Print("Select Perf State UID="+narPerf.getUIDDecHexString());
               }
            }
            return true;

         case @(bt_perf_add):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handlePerfClone();
            }
            else
            {
               handlePerfAdd();
            }
            return true;

         case @(bt_perf_remove):
            handlePerfRemove();
            return true;

         case @(bt_perf_moveup):
            handlePerfMoveUp();
            return true;

         case @(bt_perf_movedown):
            handlePerfMoveDown();
            return true;

         case @(tf_perf_name):
            handlePerfNameChanged();
            return true;

         case @(bt_perf_store):
            handlePerfStore();
            return true;

         case @(bt_perf_send):
            handlePerfSend();
            return true;

         case @(bt_perf_tools):
            showPerfToolsMenu();
            return true;

         case @(pm_perf_tools):
            Global.Debug2("pm_perf_tools acName="+acName);
            if(!PopupMenu.IsFocusAction(_action))
               refocusDefault();
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close perf tools menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "perf_enum_uids":
                  handlePerfReEnumerateUIDsDlg();
                  return true;

               case "perf_reset":
                  handlePerfReset();
                  return true;

               case "perf_action":
                  handlePerfAddAction(false/*bNewEntry*/);
                  return true;

               case "perf_entry":
                  handlePerfAddAction(true/*bNewEntry*/);
                  return true;
            }
            return true;



            // Input map | Map Group:
         case @(tv_mapgrp):
            if(acName == TableView.ACTION_ROWCLICKED)
            {
               // // tv_mapgrp.setLeadSelection(tm_mapgrp.getCursorIndex());
            }
            else if(acName == TableView.ACTION_ROWSELECTED)
            {
               handleMapGroupChanged(true/*bFromUI*/);
               NAR_MapGroup narMapGroup <= getSelectedMapGroup();
               if(null != narMapGroup)
                  Global.Print("Select Map Group UID="+narMapGroup.getUIDDecHexString());
            }
            return true;

         case @(bt_mapgrp_add):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleMapGroupClone();
            }
            else
            {
               handleMapGroupAdd();
            }
            return true;

         case @(bt_mapgrp_remove):
            handleMapGroupRemove();
            return true;

         case @(bt_mapgrp_moveup):
            handleMapGroupMoveUp();
            return true;

         case @(bt_mapgrp_movedown):
            handleMapGroupMoveDown();
            return true;

         case @(tf_mapgrp_name):
            handleMapGroupNameChanged();
            return true;

            // Input map | Map Entry:
         case @(tv_mapen):
            if(acName == TableView.ACTION_ROWCLICKED)
            {
               // // tv_mapen.setLeadSelection(tm_mapen.getCursorIndex());
            }
            else if(acName == TableView.ACTION_ROWSELECTED)
            {
               Global.Print("Select Map Entry");
               handleMapEntryChanged(true/*bFromUI*/);
            }
            return true;

         case @(bt_mapen_add):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleMapEntryClone();
            }
            else
            {
               handleMapEntryAdd();
            }
            return true;

         case @(bt_mapen_remove):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleMapEntryRemove2();
            }
            else
            {
               handleMapEntryRemove();
            }
            return true;

         case @(bt_mapen_moveup):
            handleMapEntryMoveUp();
            return true;

         case @(bt_mapen_movedown):
            handleMapEntryMoveDown();
            return true;

         case @(tf_mapen_name):
            handleMapEntryNameChanged();
            return true;

         case @(cm_mapen_input_id1):
            handleMapEntryInputId1Changed(true/*bFromUI*/);
            return true;

         case @(cm_mapen_input_id2):
            handleMapEntryInputId2Changed(true/*bFromUI*/);
            return true;

         case @(fp_mapen_input_arg1):
            handleMapEntryInputArg1Changed();
            return true;

         case @(fp_mapen_input_arg2):
            handleMapEntryInputArg2Changed();
            return true;

         case @(bt_mapen_learn):
            toggleMapEntryLearn();
            return true;


            // Input map | Map Action:
         case @(tv_mapac):
            if(acName == TableView.ACTION_ROWCLICKED)
            {
               // // tv_mapac.setLeadSelection(tm_mapac.getCursorIndex());
            }
            else if(acName == TableView.ACTION_ROWSELECTED)
            {
               Global.Print("Select Map Action");
               handleMapActionChanged(true/*bFromUI*/, false/*bFromLearn*/);
            }
            return true;

         case @(bt_mapac_add):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleMapActionClone();
            }
            else
            {
               handleMapActionAdd();
            }
            return true;

         case @(bt_mapac_remove):
            handleMapActionRemove();
            return true;

         case @(bt_mapac_moveup):
            handleMapActionMoveUp();
            return true;

         case @(bt_mapac_movedown):
            handleMapActionMoveDown();
            return true;

         case @(tf_mapac_name):
            handleMapActionNameChanged();
            return true;

         case @(cm_mapac_action_id):
            handleMapActionIdChanged(true/*bFromUI*/);
            return true;

         case @(fp_mapac_arg1):
            handleMapActionArg1Changed();
            return true;

         case @(fp_mapac_arg2):
            handleMapActionArg2Changed();
            return true;

         case @(fp_mapac_arg3):
            handleMapActionArg3Changed();
            return true;

         case @(cm_mapac_ext_dev):
            handleMapActionExtDevChanged();
            return true;

         case @(cm_mapac_ext_ch):
            handleMapActionExtChChanged();
            return true;

         case @(bt_mapac_learn):
            toggleMapActionLearn();
            return true;
      }

      return XMLForm::consumeAction(_action);
   }

}
