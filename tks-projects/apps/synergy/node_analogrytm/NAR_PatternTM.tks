// ----
// ---- file   : NAR_PatternTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2016-2019 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 04Mar2016
// ---- changed: 05Mar2016, 07Jul2017, 09Jul2017, 21Oct2019
// ----
// ----
// ----

module MNAR_PatternTM;

use namespace ui;
use namespace st2;


class NAR_PatternTM : TableModel {

   define int COL_UID     = 0;
   define int COL_NAME    = 1;
   define int COL_STATE   = 2;

   NodeAnalogRytmPattern *pat;
   NodeAnalogRytm *parent_node;


   public virtual getNumColumns() : int {
      return 3;
   }

   public virtual getColumnCaption(int _col) : String {
      return ["UID", "Name", "State"][_col];
   }

   public virtual getNumRows() : int {
      return (null != pat) ? pat.nar_patterns.numElements : 0;
   }

   public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {
      Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);
      lb.setFontByName("big7");
      return lb;
   }

   public virtual getCellCaption(int _col, _row) : String {
      if(null != pat)
      {
         NAR_Pattern narPattern <= pat.nar_patterns.get(_row);

         switch(_col)
         {
            case COL_UID:
               if(null != narPattern)
               {
                  return String(narPattern.uid);
               }
               return "-";

            case COL_NAME:
               if(null != narPattern)
               {
                  return narPattern.name.replace("~", "\t");
               }
               return "-";

            case COL_STATE:
               if(null != narPattern)
               {
                  return (NAR_Pattern.state_names.get(narPattern.ar_pattern.getCurrentDataIdx()))+((0 != (narPattern.ar_pattern.version)) ? " V"+(narPattern.ar_pattern.version) : "");

                  // // return NAR_Pattern.state_names.get(narPattern.ar_pattern.getCurrentDataIdx());
               }
               break;
         }
      }
   }

   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_UID:
            return 24;

         case COL_NAME:
            return 120;

         case COL_STATE:
            return 60;
      }
   }

   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_UID:
            return 24;

         case COL_NAME:
            return 700;

         case COL_STATE:
            return 60;
      }
   }

   public virtual handleCellOnMouse(int _col, int _row, MouseEvent _ev) : boolean {
      return false;
   }
}
