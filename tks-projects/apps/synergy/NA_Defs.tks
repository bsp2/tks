// ----
// ---- file   : NA_Defs.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2015-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- changed: 03Oct2015, 04Oct2015, 05Oct2015, 06Oct2015, 08Oct2015, 09Oct2015, 10Oct2015
// ----          11Oct2015, 12Oct2015, 13Oct2015, 11Nov2015, 13Nov2015, 13Mar2016, 09Apr2016
// ----          09Jul2016, 12Jul2016, 11Apr2017, 12Apr2017, 13Apr2017, 14Apr2017, 15Apr2017
// ----          16Apr2017, 17Apr2017, 18Apr2017, 19Apr2017, 20Apr2017, 14Jul2017, 15Jul2017
// ----          12Aug2017, 19Aug2017, 03Sep2017, 12Oct2017, 03Jan2018, 04Jan2018, 05Jan2018
// ----          06Jan2018, 07Mar2018, 04Apr2018, 05Apr2018, 27May2018, 17Jun2018, 18Nov2018
// ----          24Nov2018, 25Nov2018, 01Mar2019, 19Jun2019, 29Aug2019, 23Oct2019, 31Oct2019
// ----          06Nov2019, 07Nov2019, 08Nov2019, 09Nov2019, 30Oct2020, 12Nov2020, 22May2021
// ----          01Jan2022, 13Feb2022, 11Aug2022, 12Aug2022, 13Aug2022, 06Jan2023, 13Oct2023
// ----          14Oct2023, 16Nov2023, 18Nov2023, 02Feb2024, 03Feb2024, 07Jul2024, 15Nov2024
// ----          25Jan2025, 26Jan2025
// ----
// ----
// ----

module MNA_Defs;

use namespace ui;
use namespace st2;


// <class.png>
class NA_Defs {

   define int NODE_GID_MARKER     = -2;
   define int NODE_GID_AUDIO_BASE = -100;  // -100=track 1, -101=track 2, ..

   define int GRID_UNIT_TICKS = 0;
   define int GRID_UNIT_16TH  = 1;
   define int GRID_UNIT_8TH   = 2;
   define int GRID_UNIT_4TH   = 3;
   define int GRID_UNIT_HALF  = 4;
   define int GRID_UNIT_WHOLE = 5;
   define int GRID_UNIT_BEAT  = 6;
   define int GRID_UNIT_BAR   = 7;


   // <method.png>
   public static CalcTicks(local float _num, local int _unit) : float {

      local int   numTicksPerNote = current_song.ppq * 4;
      local float numTicksPerBeat = (numTicksPerNote / float(current_song.sig_notelen));
      local float numTicksPerBar  = numTicksPerBeat * current_song.sig_beats;

      switch(_unit)
      {
         case GRID_UNIT_TICKS:
            return _num;

         case GRID_UNIT_16TH:
            return (current_song.ppq * _num) / 4.0;

         case GRID_UNIT_8TH:
            return (current_song.ppq * _num) / 2.0;

         case GRID_UNIT_4TH:
            return (current_song.ppq * _num);

         case GRID_UNIT_HALF:
            return (current_song.ppq * _num) * 2.0;

         case GRID_UNIT_WHOLE:
            return (current_song.ppq * _num) * 4.0;

         case GRID_UNIT_BEAT:
            return numTicksPerBeat * _num;

         case GRID_UNIT_BAR:
            return numTicksPerBar * _num;
      }

      return 0;
   }
}
