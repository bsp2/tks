// ----
// ---- file   : PagePipeRoot.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2014-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 04Sep2014, 05Sep2014, 09Sep2014, 13Sep2014, 14Sep2014, 16Sep2014, 19Sep2014
// ----          20Sep2014, 26Sep2014, 17Feb2015, 23Feb2015, 09Mar2015, 06Apr2015, 17May2015
// ----          24Sep2015, 28Mar2016, 08Jul2016, 09Feb2017, 11Feb2017, 04Mar2017, 09Mar2017
// ----          10Mar2017, 12Mar2017, 04Jan2018, 15Apr2018, 24Jun2018, 06Mar2020, 28Apr2020
// ----          26Jan2021, 10May2021, 19Jun2021, 18Mar2023, 03Oct2023, 14Oct2023, 02Nov2023
// ----          06Oct2024
// ----
// ----
// ----

module MPagePipeRoot;

use namespace ui;
use namespace st2;


// <class.png>
class PagePipeRoot extends Page, MIDIMapContext {

   define String MMT_ADD;
   define String MMT_CLONE;
   define String MMT_REMOVE;
   define String MMT_MOVEUP;
   define String MMT_MOVEDOWN;
   define String MMT_SOLO_TOGGLE;
   define String MMT_SOLO_TOGGLE_1;
   define String MMT_SOLO_TOGGLE_2;
   define String MMT_SOLO_TOGGLE_3;
   define String MMT_SOLO_TOGGLE_4;
   define String MMT_SOLO_TOGGLE_5;
   define String MMT_SOLO_TOGGLE_6;
   define String MMT_SOLO_TOGGLE_7;
   define String MMT_SOLO_TOGGLE_8;
   define String MMT_SOLO_TOGGLE_9;
   define String MMT_SOLO_TOGGLE_10;
   define String MMT_SOLO_TOGGLE_11;
   define String MMT_SOLO_TOGGLE_12;
   define String MMT_SOLO_TOGGLE_13;
   define String MMT_SOLO_TOGGLE_14;
   define String MMT_SOLO_TOGGLE_15;
   define String MMT_SOLO_TOGGLE_16;
   define String MMT_MUTE_TOGGLE;
   define String MMT_MUTE_TOGGLE_1;
   define String MMT_MUTE_TOGGLE_2;
   define String MMT_MUTE_TOGGLE_3;
   define String MMT_MUTE_TOGGLE_4;
   define String MMT_MUTE_TOGGLE_5;
   define String MMT_MUTE_TOGGLE_6;
   define String MMT_MUTE_TOGGLE_7;
   define String MMT_MUTE_TOGGLE_8;
   define String MMT_MUTE_TOGGLE_9;
   define String MMT_MUTE_TOGGLE_10;
   define String MMT_MUTE_TOGGLE_11;
   define String MMT_MUTE_TOGGLE_12;
   define String MMT_MUTE_TOGGLE_13;
   define String MMT_MUTE_TOGGLE_14;
   define String MMT_MUTE_TOGGLE_15;
   define String MMT_MUTE_TOGGLE_16;

   protected Button *bt_parent;

   protected Button *bt_add;
   protected Button *bt_remove;

   protected Button *bt_moveup;
   protected Button *bt_movedown;

   public TableView *tv_pipes;
   protected PipesTM tm_pipes;

   protected static Dialog_DeletePipe dialog_deletepipe;
   protected TextInputDialog *dlg_new_name;
   protected TextInputDialog *dlg_clone_name;


   // <init.png>
   public method init() : boolean {

      if(!initPakFile("PagePipeRoot.xfm"))
      {
         trace "[---] failed to parse PagePipeRoot.xfm";
         return false;
      }

      autoResolveIds(this);

      tm_pipes.initTableModel();
      tv_pipes.setTableModel(tm_pipes);

      recursiveBuildTabCycleLists();

      initMMC();

      if(app_lnf.b_ascii_back_buttons)
      {
         Global.ASCIIBackButton(bt_parent);
      }

      return true;
   }

   // <method_init.png>
   protected method initMMC() {

      mmcInit("PagePipeRoot");

      mmcAddTarget(MMT_ADD,            CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_CLONE,          CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_REMOVE,         CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MOVEUP,         CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MOVEDOWN,       CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE,    CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_1,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_2,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_3,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_4,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_5,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_6,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_7,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_8,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_9,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_10, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_11, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_12, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_13, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_14, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_15, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_SOLO_TOGGLE_16, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE,    CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_1,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_2,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_3,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_4,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_5,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_6,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_7,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_8,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_9,  CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_10, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_11, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_12, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_13, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_14, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_15, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_MUTE_TOGGLE_16, CLASS_BUTTON, SYN_BUTTON_CLICK);
   }

   // <midi_mmc.png>
   public virtual mmcHandleEvent(MIDIMapEvent _ev) : boolean {

      MIDIMapEvent boundEv <= mmcGetBindingByEvent(_ev);

      if(null != boundEv)
      {
         switch(boundEv.bound_target.target_name)
         {
            case MMT_ADD:
               if(pageIsCurrent())
               {
                  handleAdd();
                  return true;
               }
               break;

            case MMT_CLONE:
               if(pageIsCurrent())
               {
                  handleClone();
                  return true;
               }
               break;

            case MMT_MOVEUP:
               handleMoveUp();
               return true;

            case MMT_MOVEDOWN:
               handleMoveDown();
               return true;

            case MMT_REMOVE:
               if(pageIsCurrent())
               {
                  if(0 == UI.GetNumModalFloatingLayers())
                  {
                     confirmDeleteSelectedPipe();
                  }
                  return true;
               }
               break;

            case MMT_MOVEUP:
               // (todo)
               return true;

            case MMT_MOVEDOWN:
               // (todo)
               return true;

            case MMT_SOLO_TOGGLE:
               handleSoloToggle(tm_pipes.getCursorIndex());
               return true;

            case MMT_SOLO_TOGGLE_1:
               handleSoloToggle(0);
               return true;

            case MMT_SOLO_TOGGLE_2:
               handleSoloToggle(1);
               return true;

            case MMT_SOLO_TOGGLE_3:
               handleSoloToggle(2);
               return true;

            case MMT_SOLO_TOGGLE_4:
               handleSoloToggle(3);
               return true;

            case MMT_SOLO_TOGGLE_5:
               handleSoloToggle(4);
               return true;

            case MMT_SOLO_TOGGLE_6:
               handleSoloToggle(5);
               return true;

            case MMT_SOLO_TOGGLE_7:
               handleSoloToggle(6);
               return true;

            case MMT_SOLO_TOGGLE_8:
               handleSoloToggle(7);
               return true;

            case MMT_SOLO_TOGGLE_9:
               handleSoloToggle(8);
               return true;

            case MMT_SOLO_TOGGLE_10:
               handleSoloToggle(9);
               return true;

            case MMT_SOLO_TOGGLE_11:
               handleSoloToggle(10);
               return true;

            case MMT_SOLO_TOGGLE_12:
               handleSoloToggle(11);
               return true;

            case MMT_SOLO_TOGGLE_13:
               handleSoloToggle(12);
               return true;

            case MMT_SOLO_TOGGLE_14:
               handleSoloToggle(13);
               return true;

            case MMT_SOLO_TOGGLE_15:
               handleSoloToggle(14);
               return true;

            case MMT_SOLO_TOGGLE_16:
               handleSoloToggle(15);
               return true;

            case MMT_MUTE_TOGGLE:
               handleMuteToggle(tm_pipes.getCursorIndex());
               return true;

            case MMT_MUTE_TOGGLE_1:
               handleMuteToggle(0);
               return true;

            case MMT_MUTE_TOGGLE_2:
               handleMuteToggle(1);
               return true;

            case MMT_MUTE_TOGGLE_3:
               handleMuteToggle(2);
               return true;

            case MMT_MUTE_TOGGLE_4:
               handleMuteToggle(3);
               return true;

            case MMT_MUTE_TOGGLE_5:
               handleMuteToggle(4);
               return true;

            case MMT_MUTE_TOGGLE_6:
               handleMuteToggle(5);
               return true;

            case MMT_MUTE_TOGGLE_7:
               handleMuteToggle(6);
               return true;

            case MMT_MUTE_TOGGLE_8:
               handleMuteToggle(7);
               return true;

            case MMT_MUTE_TOGGLE_9:
               handleMuteToggle(8);
               return true;

            case MMT_MUTE_TOGGLE_10:
               handleMuteToggle(9);
               return true;

            case MMT_MUTE_TOGGLE_11:
               handleMuteToggle(10);
               return true;

            case MMT_MUTE_TOGGLE_12:
               handleMuteToggle(11);
               return true;

            case MMT_MUTE_TOGGLE_13:
               handleMuteToggle(12);
               return true;

            case MMT_MUTE_TOGGLE_14:
               handleMuteToggle(13);
               return true;

            case MMT_MUTE_TOGGLE_15:
               handleMuteToggle(14);
               return true;

            case MMT_MUTE_TOGGLE_16:
               handleMuteToggle(15);
               return true;
         }
      }
      return false;
   }

   // <ui_page.png>
   public virtual pageGetParent() : int {
      return RootForm.PAGE_PIPEMAP;
   }

   // <ui_update.png>
   public method updateTable() {
      tv_pipes.tableModelChanged();

      int cursorIdx = tm_pipes.getCursorIndex();
      if(-1 == cursorIdx)
         selectFirstAvailablePipe();

      updateUpDownButtons();
   }

   // <ui_update.png>
   protected method updateUpDownButtons() {
      int cursorIdx = tm_pipes.getCursorIndex();
      boolean bEditable = (null != getSelectedPipe());
      bt_remove  .setEditable(bEditable);
      bt_moveup  .setEditable(bEditable && cursorIdx > 0);
      bt_movedown.setEditable(bEditable && (cursorIdx+1) < current_pipe_root.numPipes);
   }

   // <ui_page.png>
   public virtual pageEnter() {
      Page::pageEnter();

      updateTable();

      tv_pipes.makeCursorRowVisibleAlignTop();
   }

   // <ui_page.png>
   public virtual pageLeave() {
   }

   // <ui_page.png>
   public virtual pageFocusDefault() {
      UI.SetKeyboardFocus(tv_pipes);
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      _retLayers = [
         bt_add, bt_remove, bt_moveup, bt_movedown,
         tv_pipes
                              ];
   }

   // <midi_mmt.png>
   public virtual mmtHandleGlobalValue(float _val) {
      Layer kbdLayer <= UI.GetKeyboardFocus();

      if(kbdLayer instanceof Layer)
      {
         if(kbdLayer.hasParentOrIs(tv_pipes))
         {
            tv_pipes.moveCursorToRow(mmtSelectTableRow(tm_pipes, _val));
            // // tv_pipes.centerRow();
            tv_pipes.makeCursorRowVisibleAlignTop();
            return;
         }
      }

      return MMTListener::mmtHandleGlobalValue(_val);
   }

   // <midi.png>
   public virtual mmtHandleGlobalValueDelta(int _delta) {
      Layer kbdLayer <= UI.GetKeyboardFocus();

      if(kbdLayer instanceof Layer)
      {
         if(kbdLayer.hasParentOrIs(tv_pipes))
         {
            mmtSelectTableRowDelta(tv_pipes, _delta);
            tv_pipes.centerRow();
            return true;
         }
      }
      return false;
   }

   // <ui_select.png>
   protected method selectFirstAvailablePipe() {
      int pipeIdx = 0;
      loop(current_pipe_root.maxPipes)
      {
         if(null != current_pipe_root.getPipeByIdx(pipeIdx))
         {
            tv_pipes.moveCursorToRow(pipeIdx);
            return;
         }
         else
         {
            pipeIdx++;
         }
      }
      tv_pipes.moveCursorToFirstRow();
   }

   // <method_get.png>
   public method getSelectedPipe() : MIDIPipe {
      int idx = tm_pipes.getCursorIndex();
      if(-1 != idx)
      {
         MIDIPipe pipe <= current_pipe_root.getPipeByIdx(idx);
         return pipe;
      }
      return null;
   }

   // <method_get.png>
   public method getSelectedPipeIdx() : int {
      return tm_pipes.getCursorIndex();
   }

   // <method_get.png>
   public method isSelectedPipeEmpty() : boolean {
      MIDIPipe pipe <= getSelectedPipe();
      if(null != pipe)
         return (0 == pipe.numNodes);
      return false;
   }

   // <ui_select.png>
   public method selectPipeByIdx(int _idx) : boolean {

      updateTable();
      tv_pipes.moveCursorToRow(_idx);

      MIDIPipe pipe <= getSelectedPipe();

      if(null != pipe)
      {
         current_song.ui_last_selected_pipe_idx = _idx;
         root_form.pg_pipe.showPipeInt(pipe, false/*bLog*/);
         return true;
      }

      return false;
   }

   // <ui_select.png>
   public method selectPipeByUsedIdx(int _idx) : boolean {
      MIDIPipe pipe <= current_pipe_root.getPipeByUsedIdx(_idx);
      if(null != pipe)
         return selectPipeByIdx(pipe.pipeIdx);
      return false;
   }

   // <ui_select.png>
   public method selectPipeAndNodeByIdx(int _pipeIdx, int _nodeIdx) : boolean {
      if(selectPipeByIdx(_pipeIdx))
         return root_form.pg_pipe.selectNodeByIdx(_nodeIdx);
      return false;
   }

   // // // <ui_select.png>
   // // public method selectPipeAndNodeByUsedIdx(int _pipeIdx, int _nodeIdx) {
   // //    selectPipeByUsedIdx(_pipeIdx);
   // //    root_form.pg_pipe.selectNodeByIdx(_nodeIdx);
   // // }

   // <ui_handle.png>
   public method handleEditPipe(boolean _bWarn) {
      MIDIPipe pipe <= getSelectedPipe();

      if(null != pipe)
      {
         root_form.pg_pipe.showPipe(pipe, this/*listener*/, true/*bShowPage*/);
      }
      else if(_bWarn)
      {
         Global.Warning("Cannot edit non-existing pipe.");
      }
   }

   // <ui_handle.png>
   public method handleEditPipeNode() {
      // called from RootForm MMT_NAV_CURRENT_NODE and PagePipeMap
      MIDIPipe pipe <= getSelectedPipe();
      if(null != pipe)
      {
         root_form.pg_pipe.showPipe(pipe, this/*listener*/, false/*bShowPage*/);
         root_form.pg_pipe.editSelectedNode();
      }
      else
      {
         Global.Warning("Cannot edit non-existing pipe(-node).");
      }
   }

   // <ui_toggle.png>
   public method toggleSelectedPipeMuteState() {
      if(-1 != tm_pipes.getCursorIndex())
         tm_pipes.togglePipeMuteState(tm_pipes.getCursorIndex());
   }

   // <ui_toggle.png>
   public method toggleSelectedPipeSoloState() {
      if(-1 != tm_pipes.getCursorIndex())
         tm_pipes.togglePipeSoloState(tm_pipes.getCursorIndex());
   }

   // <ui_confirm.png>
   public method confirmDeleteSelectedPipe() {
      MIDIPipe p <= getSelectedPipe();
      if(null != p)
         dialog_deletepipe.run(p.name);
   }

   // <method_delete.png>
   public =replay= method deleteSelectedPipe() {
      MIDIPipe p <= getSelectedPipe();
      if(null != p)
      {
         int rowIdx = tm_pipes.getCursorIndex();
         int usedIdx = p.pipeUsedIdx;

         current_song.releaseKeyJazzLockIfHasParentPipe(p);
         root_form.pg_pipe.unsetPipeIfCurrent(p);

         int oldPipeIdx = p.pipeIdx;
         current_pipe_root.freePipe(p);
         current_pipe_root.shiftPipesUpAt(oldPipeIdx);

         updateTable();
         tv_pipes.moveCursorToRow(rowIdx);
         root_form.pg_pipemap.updateMap();
         root_form.pg_pipemap.updateMapState();

         int lastUsedIdx = current_pipe_root.findLastUsedIdx();
         // trace "xxx usedIdx="+usedIdx+" lastUsedIdx="+lastUsedIdx;
         if(usedIdx <= lastUsedIdx)
         {
            p <= current_pipe_root.getPipeByUsedIdx(usedIdx);
            if(null != p)
            {
               tv_pipes.moveCursorToRow(p.pipeIdx);
            }
            root_form.pg_pipemap.selectPipeButtonByPipeUsedIdx(usedIdx);
         }
         else
         {
            usedIdx--;
            if(usedIdx >= 0)
            {
               p <= current_pipe_root.getPipeByUsedIdx(usedIdx);
               if(null != p)
               {
                  tv_pipes.moveCursorToRow(p.pipeIdx);
               }
               root_form.pg_pipemap.selectPipeButtonByPipeUsedIdx(usedIdx);
            }
         }

         root_form.pg_pipemap.updateMapState();
      }
   }

   // <ui_handle.png>
   protected method handleSoloToggle(int _row) {
      tv_pipes.moveCursorToRow(_row);
      tm_pipes.togglePipeSoloState(_row);
      tv_pipes.redraw();
   }

   // <ui_handle.png>
   protected method handleMuteToggle(int _row) {
      tv_pipes.moveCursorToRow(_row);
      tm_pipes.togglePipeMuteState(_row);
      tv_pipes.redraw();
   }

   // <ui_handle.png>
   public method handleAdd() {
      if(null == dlg_new_name)
      {
         String newPipeName <= (0 == current_pipe_root.numPipes) ? "master" : "new pipe";
         dlg_new_name <= TextInputDialog.NewHold("Enter pipe name",
                                                 " Enter new pipe name",
                                                 "Create", "Cancel",
                                                 newPipeName, 32, 16, this
                                                 );

         dlg_new_name.setButtonFontByName("big3");
         dlg_new_name.setMessageFontByName("big5");
         dlg_new_name.setTextFontByName("big4");
         dlg_new_name.setButtonIcons(UI.GetIcon("add"), UI.GetIcon("cancel"));
         dlg_new_name.invalidateSizeCaches();
         dlg_new_name.resizeToMinimum();
         dlg_new_name.showCentered();
      }
   }

   // <method_find.png>
   protected method findPipeSlot(int pipeIdx) {
      if(null != getSelectedPipe())
      {
         // Try to place pipe directly after current pipe
         int curPipeIdx = tm_pipes.getCursorIndex();
         // // trace "xxx findPipeSlot: curPipeIdx="+curPipeIdx;
         if(current_pipe_root.canAllocPipe(curPipeIdx + 1))
            pipeIdx = curPipeIdx + 1;
         else if(current_pipe_root.shiftPipesDownAt(curPipeIdx+1))  // Try to shift pipes after current
         {
            pipeIdx = curPipeIdx + 1;
            // // trace "xxx findPipeSlot: shiftPipes="+pipeIdx;
         }
         else
         {
            pipeIdx = current_pipe_root.findFirstUnusedIdx();
            // // trace "xxx findPipeSlot: firstUnused="+pipeIdx;
         }
      }
      else if(-1 == pipeIdx)
      {
         pipeIdx = current_pipe_root.findFirstUnusedIdx();
      }
      return pipeIdx;
   }

   // <ui_handle.png>
   public =replay= method handleAdd2(String _pipeName, boolean _bEdit, boolean _bUpdatePipeMap) : MIDIPipe {
      // Called by handleAdd() and PagePipeMap::pipePasteClipboard()
      int pipeIdx = tm_pipes.getCursorIndex();

      Global.Debug("PagePipeRoot::handleAdd2: pipeIdx="+pipeIdx+" cursorIdx="+tm_pipes.getCursorIndex()+" haveSelected="+(null != getSelectedPipe()));

      pipeIdx = findPipeSlot(pipeIdx);

      MIDIPipe pipe <= current_pipe_root.allocPipe(pipeIdx);

      if(null != pipe)
      {
         pipe.name = _pipeName;

         if(null != current_pipe_root.soloPipe)
            pipe.state = MIDIPIPE_STATE_MUTE;

         if("output" == _pipeName)
            pipe.finalOutput = true;

         // // updateTable();
         // // tv_pipes.moveCursorToRow(pipeIdx);
         selectPipeByIdx(pipeIdx);

         if(_bEdit)
         {
            handleEditPipeNode();
         }
         else
         {
            if(RootForm.PAGE_PIPEROOT == root_form.getCurrentPageNr())
               UI.SetKeyboardFocus(tv_pipes);

            if(_bUpdatePipeMap)
            {
               // showPipe(pipe, this/*listener*/, false/*bShowPage*/);
               PagePipeMap pgPipeMap <= root_form.pg_pipemap;
               pgPipeMap.updateMap();
               pgPipeMap.updateMapState();
               pgPipeMap.lazyShowMasterPipeWarning();
            }
         }
      }

      return pipe;
   }

   // <ui_handle.png>
   public method handleClone() {
      if(null == dlg_clone_name)
      {
         MIDIPipe pipe <= getSelectedPipe();

         if(null != pipe)
         {
            root_form.pg_pipemap.pipeCopyToClipboard();

            dlg_clone_name <= TextInputDialog.NewHold("Enter pipe name",
                                                      " Enter cloned pipe name",
                                                      "Clone", "Cancel",
                                                      "+"+pipe.name, 32, 16, this
                                                      );

            dlg_clone_name.setButtonFontByName("big3");
            dlg_clone_name.setMessageFontByName("big5");
            dlg_clone_name.setTextFontByName("big4");
            dlg_clone_name.setButtonIcons(UI.GetIcon("add"), UI.GetIcon("cancel"));
            dlg_clone_name.invalidateSizeCaches();
            dlg_clone_name.resizeToMinimum();
            dlg_clone_name.showCentered();
         }
      }
   }

   // // // <ui_handle.png>
   // // protected method handleCloneFirstUnused() {
   // //    tm_pipes.setCursorIndex(-1); // force find first unused
   // //    handleClone();
   // // }

   // <ui_handle.png>
   public =replay= method handleClone2(String _pipeName, boolean _bEdit) : MIDIPipe {
      // Called by handleClone()
      int pipeIdx = tm_pipes.getCursorIndex();

      Global.Debug("PagePipeRoot::handleClone2: pipeIdx="+pipeIdx);

      pipeIdx = findPipeSlot(pipeIdx);

      MIDIPipe pipe <= current_pipe_root.allocPipe(pipeIdx);

      if(null != pipe)
      {
         pipe.name = _pipeName;

         if(null != current_pipe_root.soloPipe)
            pipe.state = MIDIPIPE_STATE_MUTE;

         updateTable();
         tv_pipes.moveCursorToRow(pipeIdx);

         root_form.pg_pipemap.pipePasteClipboard(false/*bNewPipe*/);

         pipe.name = _pipeName;

         updateTable();
         tv_pipes.moveCursorToRow(pipeIdx);

         if(_bEdit)
         {
            handleEditPipeNode();
         }
         else
         {
            if(RootForm.PAGE_PIPEROOT == root_form.getCurrentPageNr())
            {
               UI.SetKeyboardFocus(tv_pipes);
            }

            root_form.pg_pipemap.updateMap();
            root_form.pg_pipemap.updateMapState();
         }
      }

      return pipe;
   }

   // <ui_handle.png>
   public =replay= method handleMoveUp() {
      MIDIPipe *p <= getSelectedPipe();

      if(null != p)
      {
         if(p.moveUp())
         {
            tv_pipes.tableModelChanged();
            tv_pipes.moveCursorToPreviousRow();
         }
      }
   }

   // <ui_handle.png>
   public =replay= method handleMoveDown() {
      MIDIPipe *p <= getSelectedPipe();

      if(null != p)
      {
         if(p.moveDown())
         {
            tv_pipes.tableModelChanged();
            tv_pipes.moveCursorToNextRow();
         }
      }
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      if(_k.modNone())
      {
         switch(_k.pressed)
         {
            case VKEY_DELETE:
               confirmDeleteSelectedPipe();
               return true;

            case VKEY_INSERT:
               handleAdd();
               return true;

            case 'd':
               handleMuteToggle(tm_pipes.getCursorIndex());
               return true;

            case 's':
               handleSoloToggle(tm_pipes.getCursorIndex());
               return true;

            case 'e':
               handleEditPipe(true/*bWarn*/);
               return true;
         }
      }
      else if(_k.modShift())
      {
         switch(_k.pressed)
         {
            case VKEY_INSERT:
               handleClone();
               return true;
         }
      }
      else if(_k.modCtrl())
      {
         switch(_k.pressed)
         {
            case VKEY_UP:
               handleMoveUp();
               return true;

            case VKEY_DOWN:
               handleMoveDown();
               return true;
         }
      }

      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();
      // // trace "xxx piperoot: ap="+#(ap)+" acName="+acName;
      StringAction *sac;

      if(@(ap) == @(dlg_new_name))
      {
         if(TextInputDialog.ACTION_TEXTINPUTDIALOGCLOSED == acName)
         {
            sac <= _action;
            handleAdd2(sac.getStringValue(), false/*bEdit*/, true/*bUpdatePipeMap*/);
            dlg_new_name <= null;
            return true;
         }
         else if(TextInputDialog.ACTION_TEXTINPUTDIALOGCLOSED_HOLD == acName)
         {
            sac <= _action;
            handleAdd2(sac.getStringValue(), true/*bEdit*/, true/*bUpdatePipeMap*/);
            dlg_new_name <= null;
            return true;
         }
         else if(TextInputDialog.ACTION_TEXTINPUTDIALOGCANCELED == acName)
         {
            dlg_new_name <= null;
            return true;
         }
      }
      else if(@(ap) == @(dlg_clone_name))
      {
         if(TextInputDialog.ACTION_TEXTINPUTDIALOGCLOSED == acName)
         {
            sac <= _action;
            handleClone2(sac.getStringValue(), false/*bEdit*/);
            dlg_clone_name <= null;
            return true;
         }
         else if(TextInputDialog.ACTION_TEXTINPUTDIALOGCLOSED_HOLD == acName)
         {
            sac <= _action;
            handleClone2(sac.getStringValue(), true/*bEdit*/);
            dlg_clone_name <= null;
            return true;
         }
         else if(TextInputDialog.ACTION_TEXTINPUTDIALOGCANCELED == acName)
         {
            dlg_clone_name <= null;
            return true;
         }
      }

      switch(@(ap))
      {
         default:
            break;

         case @(tv_pipes):

            MIDIPipe *p <= getSelectedPipe();
            if(null != p)
            {
               Global.Print("Select pipe "+(p.getPipeUsedIdx() + 1) +"/"+ current_pipe_root.numPipes+" \""+p.name+"\".");
            }
            else
            {
               Global.Print("Select empty pipe slot "+(tm_pipes.getCursorIndex() + 1)+"/"+current_pipe_root.maxPipes+".");
            }

            boolean bEditable = (null != p);
            bt_remove.setEditable(bEditable);
            updateUpDownButtons();

            if(acName == TableView.ACTION_ROWCLICKED)
            {
               if(null == getSelectedPipe())
               {
                  handleAdd();
               }
               else
               {
                  handleEditPipe(true/*bWarn*/);
               }
            }
            return true;

         case @(bt_add):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleClone();
            }
            else
            {
               handleAdd();
            }
            return true;

         case @(bt_moveup):
            handleMoveUp();
            return true;

         case @(bt_movedown):
            handleMoveDown();
            return true;

         case @(bt_remove):
            confirmDeleteSelectedPipe();
            return true;

         case @(bt_parent):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               root_form.showPageParent();
            }
            else
            {
               root_form.showPagePrev();
            }
            return true;
      }

      return Page::consumeAction(_action);
   }

}
