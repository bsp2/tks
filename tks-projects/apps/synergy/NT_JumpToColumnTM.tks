// ----
// ---- file   : JumpToColumnTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2010-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 15Jan2010
// ---- changed: 16Jan2010, 12Jun2010, 26Oct2010, 28Feb2011, 09Jan2012, 06Feb2012, 03Feb2015
// ----          05Feb2015, 25Jul2016, 17Nov2018, 06Oct2023, 28Feb2025
// ----
// ----
// ----

module MNT_JumpToColumnTM;

use namespace ui;


class NT_JumpToColumnTM : TableModel {

   define int COL_ID   = 0;
   define int COL_NAME = 1;

   NT_TEL *tel;

   NT_Instrument *ins; // can be null


   virtual getNumColumns() : int {
      return 2;
   }

   virtual getColumnCaption(int _col) : String {
      return ["Id", "Controller / Param name"][_col];
   }

   virtual getNumRows() : int {
      if(null != tel)
         return tel.getNumVisibleCels();
      return 0;
   }

   virtual getCellCaption(int _col, _row) : String {
      NT_CEL cel <= tel.getVisibleCelByIdx(_row);

      if(null != cel)
      {
         switch(_col)
         {
            case COL_ID:
               return cel.ctl_id;

            case COL_NAME:
               if(cel.ctl_id >= NT_TrackPattern.CTL_USR)
               {
                  if(null != ins)
                  {
                     return "CTL_USR"+(cel.ctl_id-NT_TrackPattern.CTL_USR+1)+":"+ins.getUsrCtlParamName(cel.ctl_id - NT_TrackPattern.CTL_USR);
                  }
                  else
                  {
                     return "CTL_USR"+(cel.ctl_id-NT_TrackPattern.CTL_USR+1);
                  }
               }
               else
               {
                  return MNT_PatternView.ctl_names.get(cel.ctl_id);
               }
         }
      }
   }

   virtual getPreferredColumnWidth(int _col) : int {
      // ["Id", "Name"];
      return [30, 800][_col];
   }

   virtual getMinimumColumnWidth(int _col) : int {
      return [30, 200][_col];
   }

}
