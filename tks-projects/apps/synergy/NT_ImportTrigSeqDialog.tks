// ----
// ---- file   : NT_ImportTrigSeqDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2017-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 26Feb2017
// ---- changed: 30Nov2018, 20Oct2019, 04Oct2023, 06Oct2023, 30Oct2023
// ----
// ----
// ----

module MNT_ImportTrigSeqDialog;

use namespace ui;
use namespace st2;


// <class.png>
class NT_ImportTrigSeqDialog extends Dialog, ActionProvider, MMTListener {

   define String ACTION_TRIGSEQ_IMPORT;
   define String ACTION_TRIGSEQ_CANCEL;

   protected XMLForm *xfm;

   protected ActionConsumer *recipient;

   protected CheckBox   *cb_clear;
   protected CheckBox   *cb_length;
   protected CheckBox   *cb_empty;
   protected FloatParam *fp_numloops;

   protected Button *bt_import;
   protected Button *bt_cancel;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("NT_ImportTrigSeqDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      initWindow(xfm,
                 "Import TrigSeq Pattern",
                 100, 100,
                 640, 240
                 );

      return true;
   }

   public method setRecipient(ActionConsumer _ac) {
      recipient <= _ac;
   }

   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_TRIGSEQ_IMPORT, ACTION_TRIGSEQ_CANCEL];
   }

   public virtual isPopup() : boolean {
      return true;
   }

   public virtual isModal():boolean {
      return true;
   }

   public virtual isResizable() : boolean {
      return false;
   }

   // <ui_show.png>
   protected virtual preShow() {

      setWindowTitle("Import TrigSeq Pattern");

      if(!b_layer_postinit_done)
         resizeToMinimum();

      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      UI.SetKeyboardFocus(bt_import);
   }

   // <ui_handle.png>
   protected method handleCancel() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         Action ac <= Action.New(getProvidedActionAlias(ACTION_TRIGSEQ_CANCEL), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <ui_handle.png>
   protected method handleImport() {
      hide();

      if(recipient instanceof ActionConsumer)
      {
         Action ac <= Action.New(getProvidedActionAlias(ACTION_TRIGSEQ_IMPORT), this);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <method_get.png>
   public method doClear() : boolean {
      return cb_clear.isSelected();
   }

   // <method_get.png>
   public method doLength() : boolean {
      return cb_length.isSelected();
   }

   // <method_get.png>
   public method doEmpty() : boolean {
      return cb_empty.isSelected();
   }

   // <method_get.png>
   public method getNumLoops() : int {
      return fp_numloops.getFloatValue();
   }

   // <ui_kbd.png>
   public virtual onTriadKeyTimeout() {

      Dialogs.ShowTriadKeyHelpDialog("lctrl-x ..",
"
          c         :   Close dialog
"
                                    ,
                                    this);
      return true;
   }

   // <ui_kbd.png>
   public virtual onTriadKey(Key _k) : boolean {
      // No unicode events generated if lctrl- is still pressed
      int key = _k.pressed;
      boolean r = false;
      loop(2) // first pass for raw keycode, second pass for unicode
      {
         // US (reference) keyboard layout (raw keycodes)
         switch(key)
         {
            case 'c':
               hide();
               r = true; break;

            default:
               r = maybe; break;
         }

         if(true == r)
         {
            return true;
         }
         else if(maybe == r)
         {
            Global.Print("");
         }

         // see above
         key = _k.unicode;
      }

      return false;
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      switch(_k.pressed)
      {
         case VKEY_ESCAPE:
            handleCancel();
            return true;

         case VKEY_F8:
            if(_k.modShiftOnly())
            {
               handleCancel();
               return true;
            }
            break;

         case VKEY_RETURN:
         case VKEY_SPACE:
            handleImport();
            return true;

         default:
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String name=_ac.getActionName();

      switch(name)
      {
         case "ok":
            handleImport();
            break;

         case "cancel":
            handleCancel();
            break;
      }

      switch(@(_ac.getActionProvider()))
      {
         case @(bt_import):
             handleImport();
             return true;

         case @(bt_cancel):
             handleCancel();
             return true;
      }

      return true;
   }

}
