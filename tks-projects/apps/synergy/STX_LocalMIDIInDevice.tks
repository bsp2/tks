// ----
// ---- file   : STX_LocalMIDIInDevice.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2023 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 22Jul2023
// ---- changed: 01Aug2023
// ----          
// ----
// ----

module MSTX_LocalMIDIInDevice;


// <class.png>
class STX_LocalMIDIInDevice : STX_MIDIInDevice {
   LocalMIDI localmidi;
   String    localmidi_port_name;
   Buffer    localmidi_buffer;


   // <method.png>
   public method createLocalMIDI(local String _portName) : boolean {
      if(localmidi.create("localmidi_"+_portName, 0/*use DEF_DATA_SIZE*/))
      {
         localmidi_port_name = _portName;
         localmidi_buffer.size = 256*1024;
         localmidi_buffer.fillZero();
         if(null == midiin)
            midiin <= new MIDIIn;
         midiin.openLocalMIDI();
         return true;
      }
      else
      {
         trace "[---] STX_LocalMIDIInDevice::createLocalMIDI: failed to init portName=\""+_portName+"\"";
         return false;
      }
   }

   // <method.png>
   public method openLocalMIDI(local String _portName) : boolean {
      if(localmidi.connect("localmidi_"+_portName, 0/*use DEF_DATA_SIZE*/))
      {
         localmidi_port_name = _portName;
         localmidi_buffer.size = 256*1024;
         localmidi_buffer.fillZero();
         if(null == midiin)
            midiin <= new MIDIIn;
         midiin.openLocalMIDI();
         return true;
      }
      else
      {
         trace "[---] STX_LocalMIDIInDevice::openLocalMIDI: failed to open portName=\""+_portName+"\"";
         return false;
      }
   }

   // <method_get.png>
   public virtual isOpen() : boolean {
      return localmidi.isOpen();
   }

   // <method_get.png>
   public virtual getDeviceName() : String {
      return localmidi_port_name;
   }

   // <method_get.png>
   public virtual getGlobalAlias() : String {
      return MIDI.GetGlobalInDeviceAlias(localmidi_port_name);
   }

   // <method_get.png>
   public virtual getName() : String {
      // <alias>(<devname>) or <devname>
      return MIDI.GetFullMIDIInDeviceName(localmidi_port_name);
   }

   // <method.png>
   public virtual start() {
      // intentionally left blank
   }

   // <method.png>
   public virtual close() {
      // intentionally left blank
   }

   // <method.png>
   public virtual keepAlive() : boolean {
   }

   // <method.png>
   public virtual readLocalMIDIEvents() {
      localmidi.checkForNewConnection();
      if(localmidi.recv(localmidi_buffer))
      {
         // trace "xxx STX_LocalMIDIInDevice::readLocalMIDIEvents: recv "+localmidi_buffer.offset+" bytes";
         midiin.parseBuffer(localmidi_buffer);
      }
   }
}
