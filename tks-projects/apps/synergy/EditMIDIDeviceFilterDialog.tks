// ----
// ---- file   : EditMIDIDeviceFilterDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2012-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 13Nov2012, 07May2013, 05Jun2013, 18Aug2014, 05Sep2014, 16Sep2014, 13Jan2017
// ----          09Feb2017, 10Nov2020, 04Oct2023, 13Oct2023, 30Oct2023
// ----
// ----
// ----

module MEditMIDIDeviceFilterDialog;

use namespace ui;
use namespace st2;


// <class.png>
class EditMIDIDeviceFilterDialog extends Dialog, ActionProvider, MMTListener {

   define String ACTION_FILTER_EDITED;

   protected XMLForm   *xfm;

   protected CheckBox   *cb_flt_note_off;          // 0x8x
   protected CheckBox   *cb_flt_note_on;           // 0x9x
   protected CheckBox   *cb_flt_poly_pressure;     // 0xAx
   protected CheckBox   *cb_flt_control_change;    // 0xBx
   protected CheckBox   *cb_flt_program_change;    // 0xCx
   protected CheckBox   *cb_flt_channel_pressure;  // 0xDx
   protected CheckBox   *cb_flt_pitch_bend;        // 0xEx
   protected CheckBox   *cb_flt_sysex;             // 0xF0
   protected CheckBox   *cb_flt_cm_time_code;      // 0xF1
   protected CheckBox   *cb_flt_cm_song_position;  // 0xF2
   protected CheckBox   *cb_flt_cm_song_select;    // 0xF3
   protected CheckBox   *cb_flt_cm_tune_request;   // 0xF6
   protected CheckBox   *cb_flt_rt_timing_clock;   // 0xF8
   protected CheckBox   *cb_flt_rt_start;          // 0xFA
   protected CheckBox   *cb_flt_rt_continue;       // 0xFB;
   protected CheckBox   *cb_flt_rt_stop;           // 0xFC
   protected CheckBox   *cb_flt_rt_active_sensing; // 0xFE;
   protected CheckBox   *cb_flt_rt_system_reset;   // 0xFF;
   protected CheckBox   *cb_flt_rpn_select;        // CC#101(MSB) + CC#100(LSB)
   protected CheckBox   *cb_flt_nrpn_select;       // CC#099(MSB) + CC#098(LSB)
   protected CheckBox   *cb_flt_rpn;               // CC#006(MSB) + CC#038(LSB) (if -1 != rpn)
   protected CheckBox   *cb_flt_nrpn;              // CC#006(MSB) + CC#038(LSB) (if -1 != nrpn)


   protected Button *bt_close;
   protected Button *bt_save;

   protected STX_MIDIInDevice *in_dev;
   protected MIDIIn *midiin;

   protected ActionConsumer *listener;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("EditMIDIDeviceFilterDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      initWindow(xfm,
                 "Edit MIDI device filter",
                 100, 100,
                 640, 240
                 );

      return true;
   }

   // <method_get.png>
   public virtual isPopup() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual isModal() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual isResizable() : boolean {
      return false;
   }

   // <ui_show.png>
   public method showDevice(STX_MIDIInDevice _inDev, ActionConsumer _listener) {

      in_dev   <= _inDev;
      midiin   <= in_dev.midiin;
      listener <= _listener;

      Dialog::showCentered();
   }

   // <ui_show.png>
   public virtual preShow() {

      setWindowTitle("Edit MIDI device \""+MIDI.GetFullMIDIInDeviceName(midiin.deviceName)+"\" input filter");

      if(!b_layer_postinit_done)
         resizeToMinimum();

      Dialog::preShow();

      cb_flt_note_off          .setSelected(!midiin.fltNoteOff);
      cb_flt_note_on           .setSelected(!midiin.fltNoteOn);
      cb_flt_poly_pressure     .setSelected(!midiin.fltPolyPressure);
      cb_flt_control_change    .setSelected(!midiin.fltCC);
      cb_flt_program_change    .setSelected(!midiin.fltProgramChange);
      cb_flt_channel_pressure  .setSelected(!midiin.fltChannelPressure);
      cb_flt_pitch_bend        .setSelected(!midiin.fltPitchbend);
      cb_flt_sysex             .setSelected(!midiin.fltSysEx);
      cb_flt_cm_time_code      .setSelected(!midiin.fltSysComTimeCode);
      cb_flt_cm_song_position  .setSelected(!midiin.fltSysComSongPosition);
      cb_flt_cm_song_select    .setSelected(!midiin.fltSysComSongSelect);
      cb_flt_cm_tune_request   .setSelected(!midiin.fltSysComTuneRequest);
      cb_flt_rt_timing_clock   .setSelected(!midiin.fltSysRTTimingClock);
      cb_flt_rt_start          .setSelected(!midiin.fltSysRTStart);
      cb_flt_rt_continue       .setSelected(!midiin.fltSysRTContinue);
      cb_flt_rt_stop           .setSelected(!midiin.fltSysRTStop);
      cb_flt_rt_active_sensing .setSelected(!midiin.fltSysRTActiveSensing);
      cb_flt_rt_system_reset   .setSelected(!midiin.fltSysRTSystemReset);
      cb_flt_rpn_select        .setSelected(!midiin.fltRpnSelect);
      cb_flt_nrpn_select       .setSelected(!midiin.fltNrpnSelect);
      cb_flt_rpn               .setSelected(!midiin.fltRpn);
      cb_flt_nrpn              .setSelected(!midiin.fltNrpn);
   }

   // <ui_show.png>
   public virtual postShow() {
      Dialog::postShow();

      // Focus "Close" button
      UI.SetKeyboardFocus(bt_close);
   }

   // <midi_mmt.png>
   public method mmtHandleGlobalEvent(String _targetName) : boolean {

      if(RootForm.MMT_GLOBAL_PAGE_PARENT == _targetName)
      {
         hide();
         return true;
      }

      return false;
   }

   // <ui_kbd.png>
   public virtual getTabCycleOverrides() : PointerArray {
      return getTabCycleOverridesDef();
   }

   // <midi_mmt.png>
   public virtual mmtGetFocusLayers() : PointerArray {
      return getTabCycleOverrides();
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      _retLayers = [
         cb_flt_note_off,
         cb_flt_program_change,
         cb_flt_cm_time_code,
         cb_flt_rt_timing_clock,
         cb_flt_rt_active_sensing,
         cb_flt_rpn_select,

         cb_flt_note_on,
         cb_flt_channel_pressure,
         cb_flt_cm_song_position,
         cb_flt_rt_start,
         cb_flt_rt_system_reset,
         cb_flt_nrpn_select,

         cb_flt_poly_pressure,
         cb_flt_pitch_bend,
         cb_flt_cm_song_select,
         cb_flt_rt_continue,
         cb_flt_rpn,


         cb_flt_control_change,
         cb_flt_sysex,
         cb_flt_cm_tune_request,
         cb_flt_rt_stop,
         cb_flt_nrpn,

         bt_close
                              ];
   }

   // <ui_show.png>
   public virtual hide() {
      Dialog::hide();
   }

   // <ui_handle.png>
   protected method handleFilterEdited() {
      if(null != listener)
         listener.consumeAction(Action.New(ACTION_FILTER_EDITED, this));
   }

   // <ui_handle.png>
   protected method handleFltNoteOff() {
      midiin.fltNoteOff = cb_flt_note_off.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltNoteOn() {
      midiin.fltNoteOn = !cb_flt_note_on.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltPolyPressure() {
      midiin.fltPolyPressure = !cb_flt_poly_pressure.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltControlChange() {
      midiin.fltCC = !cb_flt_control_change.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltProgramChange() {
      midiin.fltProgramChange = !cb_flt_program_change.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltChannelPressure() {
      midiin.fltChannelPressure = !cb_flt_channel_pressure.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltPitchbend() {
      midiin.fltPitchbend = !cb_flt_pitch_bend.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltSysEx() {
      midiin.fltSysEx = !cb_flt_sysex.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltCMTimeCode() {
      midiin.fltSysComTimeCode = !cb_flt_cm_time_code.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltCMSongPosition() {
      midiin.fltSysComSongPosition = !cb_flt_cm_song_position.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltCMSongSelect() {
      midiin.fltSysComSongSelect = !cb_flt_cm_song_select.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltCMTuneRequest() {
      midiin.fltSysComTuneRequest = !cb_flt_cm_tune_request.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltRTTimingClock() {
      midiin.fltSysRTTimingClock = !cb_flt_rt_timing_clock.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltRTStart() {
      midiin.fltSysRTStart = !cb_flt_rt_start.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltRTContinue() {
      midiin.fltSysRTContinue = !cb_flt_rt_continue.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltRTStop() {
      midiin.fltSysRTStop = !cb_flt_rt_stop.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltRTActiveSensing() {
      midiin.fltSysRTActiveSensing = !cb_flt_rt_active_sensing.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltRTSystemReset() {
      midiin.fltSysRTSystemReset = !cb_flt_rt_system_reset.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltRpnSelect() {
      midiin.fltRpnSelect = !cb_flt_rpn_select.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltNrpnSelect() {
      midiin.fltNrpnSelect = !cb_flt_nrpn_select.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltRpn() {
      midiin.fltRpn = !cb_flt_rpn.isSelected();
      handleFilterEdited();
   }

   // <ui_handle.png>
   protected method handleFltNrpn() {
      midiin.fltNrpn = !cb_flt_nrpn.isSelected();
      handleFilterEdited();
   }

   // <ui_kbd.png>
   public virtual onTriadKey(Key _k) : boolean {
      switch(_k.pressed)
      {
         case 'c':
            hide();
            return true;
      }

      return false;
   }

   // <ui_kbd.png>
   public virtual onTriadKeyTimeout() {
      Dialogs.ShowTriadKeyHelpDialog("lctrl-x ..",
"
          c         :   Close dialog

"
                                    ,
                                    this);
      return true;
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      switch(_k.pressed)
      {
        case VKEY_ESCAPE:
           hide();
           return true;
      }
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      switch(@(ap))
      {
         case @(cb_flt_note_off):
            handleFltNoteOff();
            return true;

         case @(cb_flt_note_on):
            handleFltNoteOn();
            return true;

         case @(cb_flt_poly_pressure):
            handleFltPolyPressure();
            return true;

         case @(cb_flt_control_change):
            handleFltControlChange();
            return true;

         case @(cb_flt_program_change):
            handleFltProgramChange();
            return true;

         case @(cb_flt_channel_pressure):
            handleFltChannelPressure();
            return true;

         case @(cb_flt_pitch_bend):
            handleFltPitchbend();
            return true;

         case @(cb_flt_sysex):
            handleFltSysEx();
            return true;

         case @(cb_flt_cm_time_code):
            handleFltCMTimeCode();
            return true;

         case @(cb_flt_cm_song_position):
            handleFltCMSongPosition();
            return true;

         case @(cb_flt_cm_song_select):
            handleFltCMSongSelect();
            return true;

         case @(cb_flt_cm_tune_request):
            handleFltCMTuneRequest();
            return true;

         case @(cb_flt_rt_timing_clock):
            handleFltRTTimingClock();
            return true;

         case @(cb_flt_rt_start):
            handleFltRTStart();
            return true;

         case @(cb_flt_rt_continue):
            handleFltRTContinue();
            return true;

         case @(cb_flt_rt_stop):
            handleFltRTStop();
            return true;

         case @(cb_flt_rt_active_sensing):
            handleFltRTActiveSensing();
            return true;

         case @(cb_flt_rt_system_reset):
            handleFltRTSystemReset();
            return true;

         case @(cb_flt_rpn_select):
            handleFltRpnSelect();
            return true;

         case @(cb_flt_nrpn_select):
            handleFltNrpnSelect();
            return true;

         case @(cb_flt_rpn):
            handleFltRpn();
            return true;

         case @(cb_flt_nrpn):
            handleFltNrpn();
            return true;

         case @(bt_close):
            hide();
            return true;

         case @(bt_save):
            Global.cmd_config_save();
            return true;
      }

      return Dialog::consumeAction(_action);
   }

}
