// ----
// ---- file   : RootForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2010-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- changed: 02Jan2010, 21Jan2010, 15May2010, 28Feb2011, 18Apr2013, 12May2013, 04Jun2013
// ----          05Jun2013, 09Aug2014, 11Aug2014, 14Aug2014, 15Aug2014, 18Aug2014, 19Aug2014
// ----          20Aug2014, 04Sep2014, 05Sep2014, 09Sep2014, 14Sep2014, 16Sep2014, 19Sep2014
// ----          20Sep2014, 21Sep2014, 22Sep2014, 23Sep2014, 27Sep2014, 28Sep2014, 29Sep2014
// ----          16Nov2014, 25Nov2014, 30Jan2015, 01Feb2015, 21Feb2015, 04Mar2015, 06Mar2015
// ----          18Mar2015, 20Mar2015, 21Apr2015, 28Apr2015, 17May2015, 04Jul2015, 19Jul2015
// ----          24Sep2015, 25Sep2015, 27Sep2015, 29Sep2015, 10Oct2015, 12Oct2015, 23Oct2015
// ----          24Oct2015, 01Nov2015, 12Nov2015, 15Nov2015, 17Dec2015, 21Dec2015, 21Jan2016
// ----          22Jan2016, 05Feb2016, 08Apr2016, 16Sep2016, 30Sep2016, 04Dec2016, 17Jan2017
// ----          21Jan2017, 29Jan2017, 03Feb2017, 09Feb2017, 10Mar2017, 12Mar2017, 30Apr2017
// ----          09Jun2017, 16Jun2017, 17Jun2017, 23Jun2017, 02Jul2017, 17Aug2017, 25Aug2017
// ----          26Aug2017, 04Jan2018, 02May2018, 22May2018, 06Jun2018, 10Jun2018, 22Jun2018
// ----          16Sep2018, 02Dec2018, 07Dec2018, 11Jan2019, 29Jan2019, 01Mar2019, 19May2019
// ----          08Jun2019, 25Jul2019, 28Aug2019, 02Oct2019, 09Oct2019, 16Oct2019, 17Oct2019
// ----          18Oct2019, 30Oct2019, 01Nov2019, 03Nov2019, 09Feb2020, 24Apr2020, 10May2020
// ----          15May2020, 26Aug2020, 13Oct2020, 01Nov2020, 12Nov2020, 27Nov2020, 01Feb2021
// ----          13May2021, 02Jun2021, 21Jun2021, 17Jul2021, 18Jul2021, 29Sep2021, 19Dec2021
// ----          28Dec2021, 30Dec2021, 11Feb2022, 17Jun2022, 10Aug2022, 13Aug2022, 01Dec2022
// ----          04Feb2023, 09Feb2023, 12Feb2023, 19Feb2023, 23Feb2023, 31Mar2023, 01Apr2023
// ----          11Jun2023, 28Jul2023, 21Sep2023, 03Oct2023, 04Oct2023, 05Oct2023, 06Oct2023
// ----          19Oct2023, 21Oct2023, 04Nov2023, 09Nov2023, 16Nov2023, 17Nov2023, 18Nov2023
// ----          19Nov2023, 26Nov2023, 02Dec2023, 22Mar2024, 05Apr2024, 11Apr2024, 22Aug2024
// ----          23Aug2024, 05Oct2024, 06Oct2024, 13Dec2024, 23Jan2025, 31Jan2025, 29Mar2025
// ----          07Jun2025, 08Jun2025, 09Sep2025
// ----
// ----
// ----

module MRootForm;

use namespace ui;
use namespace st2;


// <class.png>
class RootForm : XMLForm, ActionProvider, MIDIMapContext, StatusBarListener {

   define String EV_SYN_KEY;

   // main pages:
   define int PAGE_START                   =  0;
   define int PAGE_CONFIG                  =  1;
   define int PAGE_MIDIMAPPER              =  2;
   define int PAGE_MIDIMON                 =  3;
   define int PAGE_SYSEX                   =  4;
   define int PAGE_PROJECT                 =  5;
   define int PAGE_PIPEROOT                =  6;
   // sub-pages:
   define int PAGE_MIDIDEVS                =  7;
   define int PAGE_SUBSONGS                =  8;
   define int PAGE_PREFS                   =  9;
   define int PAGE_EDITMIDIMAP             = 10;
   define int PAGE_EDITMIDIDEVICE          = 11;
   define int PAGE_EDITMIDIMORPH           = 12;
   define int PAGE_EDITMIDIMORPHMULTI      = 13;
   define int PAGE_PIPE                    = 14;
   define int PAGE_NODETYPE                = 15;
   define int PAGE_NODE                    = 16;
   define int PAGE_PIPEMAP                 = 17;
   define int PAGE_CTLTAG                  = 18;  // cycle through current page, ctltag, and current morphscene
   define int PAGE_AUDIOTOOL               = 19;
   define int PAGE_OUTPUTMON               = 20;

   define int NUM_PAGES                    = 21;

   define String TA_REPLAY_TIMER;
   define String TA_KEY_SPEED;
   define String TA_EXIT        = "onExitTimer";
   define String TA_REPLAYTIME  = "onReplayTimeTimer";
   define String TA_REDRAW_ALL  = "onRedrawAllTimer";
   define String TA_SCENE_OVERLAY;
   define String TA_PAGECTLTAG;
   define String TA_SHOW_BPM;

   protected TimerAction *ta_exit;
   protected TimerAction *ta_redraw_all;
   protected TimerAction *ta_replaytime;         // used to update min:sec display every second
   protected TimerAction *ta_scene_overlay;
   protected TimerAction *ta_pagectltag;
   protected TimerAction *ta_show_bpm;

   define int REDRAW_TIMEOUT_SHORT  = 33;
   define int REDRAW_TIMEOUT_MEDIUM = 100;
   define int REDRAW_TIMEOUT_LONG   = 500;

   protected TimerAction *ta_replay_timer;
   protected TimerAction *ta_key_speed;

   // View splits
   protected LayerSwitch *sw_views; // view switch

   // Status bar area
   protected PageNavBar *navbar;
   protected Button     *bt_back;
   protected StatusBar  *sb_status;
   protected ComboBoxPopup *cmdautocomplete_popup;
   protected StringArray   *cmdautocomplete_options;
   protected int            cmdautocomplete_word_idx;
   protected ComboBoxPopup *cmdhistory_popup;
   protected ComboBoxPopup  *cmdactions_popup;
   protected Button     *bt_time;  // Label button. Clicking it shows BPM while replay is running.
   protected Button     *bt_songpos;
   protected Button     *bt_transport_markers;
   protected PopupMenu  *pm_transport_markers;
   protected Button     *bt_transport_cycle;
   protected PopupMenu  *pm_transport_cycle;
   protected Button     *bt_transport_prev_marker;
   protected Button     *bt_transport_prev;
   protected Button     *bt_transport_next;
   protected Button     *bt_transport_next_marker;
   protected Button     *bt_transport_play;
   protected Button     *bt_transport_stop;
   protected PopupMenu  *pm_transport_stop;  // SMF export
   protected PopupMenuCheckButton *pmcb_transport_stop_metronome; // valid while menu is visible
   protected PopupMenuCheckButton *pmcb_transport_stop_mtc;       // valid while menu is visible
   protected PopupMenuCheckButton *pmcb_transport_stop_syx1play;  // valid while menu is visible
   protected FloatParam *fp_bpm;

   protected TextInputDialog *dlg_rename_marker;
   protected int rename_marker_idx;

   protected OpaquePanel *pn_bg;

   public    PageStart              *pg_start;
   public    PageConfig             *pg_config;
   public    PageMidiMapper         *pg_midimapper;
   public    PageMidiMon            *pg_midimon;
   public    PageMidiDevs           *pg_mididevs;  // accessed by ConfigIO
   public    PageSysEx              *pg_sysex;
   public    PageProject            *pg_project;
   public    PagePipeRoot           *pg_piperoot;
   public    PageSubSongs           *pg_subsongs;
   public    PagePrefs              *pg_prefs;
   public    PageEditMidiMap        *pg_editmidimap;
   public    PageEditMidiDevice     *pg_editmididevice;
   public    PageEditMidiMorph      *pg_editmidimorph;
   public    PageEditMidiMorphMulti *pg_editmidimorphmulti;
   public    PagePipe               *pg_pipe;
   public    PageNodeType           *pg_nodetype;
   public    PageNode               *pg_node;
   public    PagePipeMap            *pg_pipemap;
   public    PageCtlTag             *pg_ctltag;
   public    PageAudioTool          *pg_audiotool;
   public    PageOutputMon          *pg_outputmon;

   define int PAGE_HISTORY_SIZE = 8;
   protected IntArray page_history;
   protected int      current_page;
   protected boolean  b_current_page_allow_history;
   protected int      page_history_idx;

   protected IntArray page_subhistory;

   define String MMT_BPM;
   define String MMT_BPM_INV;
   define String MMT_BPM_DELTA;
   define String MMT_BPM_INC;
   define String MMT_BPM_DEC;
   define String MMT_BPM_DOUBLE;
   define String MMT_BPM_HALF;
   define String MMT_BPM_TAP;

   define String MMT_GLOBAL_YES;
   define String MMT_GLOBAL_NO;
   define String MMT_GLOBAL_LEFT;
   define String MMT_GLOBAL_RIGHT;
   define String MMT_GLOBAL_UP;
   define String MMT_GLOBAL_DOWN;

   define String MMT_GLOBAL_PAGE_PREV;
   define String MMT_GLOBAL_PAGE_NEXT;
   define String MMT_GLOBAL_PAGE_PARENT;

   define String MMT_GLOBAL_SCENE_CGRP_A;
   define String MMT_GLOBAL_SCENE_CGRP_B;
   define String MMT_GLOBAL_SCENE_CGRP_C;
   define String MMT_GLOBAL_SCENE_CGRP_D;
   define String MMT_GLOBAL_SCENE_CGRP_E;
   define String MMT_GLOBAL_SCENE_CGRP_F;
   define String MMT_GLOBAL_SCENE_CGRP_G;
   define String MMT_GLOBAL_SCENE_CGRP_H;
   define String MMT_GLOBAL_SCENE_CGRP_PREV;
   define String MMT_GLOBAL_SCENE_CGRP_NEXT;
   define String MMT_GLOBAL_SCENE_A_PREV;
   define String MMT_GLOBAL_SCENE_A_NEXT;
   define String MMT_GLOBAL_SCENE_B_PREV;
   define String MMT_GLOBAL_SCENE_B_NEXT;
   define String MMT_GLOBAL_SCENE_C_PREV;
   define String MMT_GLOBAL_SCENE_C_NEXT;
   define String MMT_GLOBAL_SCENE_D_PREV;
   define String MMT_GLOBAL_SCENE_D_NEXT;
   define String MMT_GLOBAL_SCENE_E_PREV;
   define String MMT_GLOBAL_SCENE_E_NEXT;
   define String MMT_GLOBAL_SCENE_F_PREV;
   define String MMT_GLOBAL_SCENE_F_NEXT;
   define String MMT_GLOBAL_SCENE_G_PREV;
   define String MMT_GLOBAL_SCENE_G_NEXT;
   define String MMT_GLOBAL_SCENE_H_PREV;
   define String MMT_GLOBAL_SCENE_H_NEXT;
   define String MMT_GLOBAL_SCENE_CGRP_1;
   define String MMT_GLOBAL_SCENE_A_1;
   define String MMT_GLOBAL_SCENE_B_1;
   define String MMT_GLOBAL_SCENE_C_1;
   define String MMT_GLOBAL_SCENE_D_1;
   define String MMT_GLOBAL_SCENE_E_1;
   define String MMT_GLOBAL_SCENE_F_1;
   define String MMT_GLOBAL_SCENE_G_1;
   define String MMT_GLOBAL_SCENE_H_1;
   define String MMT_GLOBAL_SCENE_CGRP_2;
   define String MMT_GLOBAL_SCENE_A_2;
   define String MMT_GLOBAL_SCENE_B_2;
   define String MMT_GLOBAL_SCENE_C_2;
   define String MMT_GLOBAL_SCENE_D_2;
   define String MMT_GLOBAL_SCENE_E_2;
   define String MMT_GLOBAL_SCENE_F_2;
   define String MMT_GLOBAL_SCENE_G_2;
   define String MMT_GLOBAL_SCENE_H_2;
   define String MMT_GLOBAL_SCENE_CGRP_3;
   define String MMT_GLOBAL_SCENE_A_3;
   define String MMT_GLOBAL_SCENE_B_3;
   define String MMT_GLOBAL_SCENE_C_3;
   define String MMT_GLOBAL_SCENE_D_3;
   define String MMT_GLOBAL_SCENE_E_3;
   define String MMT_GLOBAL_SCENE_F_3;
   define String MMT_GLOBAL_SCENE_G_3;
   define String MMT_GLOBAL_SCENE_H_3;
   define String MMT_GLOBAL_SCENE_CGRP_4;
   define String MMT_GLOBAL_SCENE_A_4;
   define String MMT_GLOBAL_SCENE_B_4;
   define String MMT_GLOBAL_SCENE_C_4;
   define String MMT_GLOBAL_SCENE_D_4;
   define String MMT_GLOBAL_SCENE_E_4;
   define String MMT_GLOBAL_SCENE_F_4;
   define String MMT_GLOBAL_SCENE_G_4;
   define String MMT_GLOBAL_SCENE_H_4;
   define String MMT_GLOBAL_SCENE_CGRP_5;
   define String MMT_GLOBAL_SCENE_A_5;
   define String MMT_GLOBAL_SCENE_B_5;
   define String MMT_GLOBAL_SCENE_C_5;
   define String MMT_GLOBAL_SCENE_D_5;
   define String MMT_GLOBAL_SCENE_E_5;
   define String MMT_GLOBAL_SCENE_F_5;
   define String MMT_GLOBAL_SCENE_G_5;
   define String MMT_GLOBAL_SCENE_H_5;
   define String MMT_GLOBAL_SCENE_CGRP_6;
   define String MMT_GLOBAL_SCENE_A_6;
   define String MMT_GLOBAL_SCENE_B_6;
   define String MMT_GLOBAL_SCENE_C_6;
   define String MMT_GLOBAL_SCENE_D_6;
   define String MMT_GLOBAL_SCENE_E_6;
   define String MMT_GLOBAL_SCENE_F_6;
   define String MMT_GLOBAL_SCENE_G_6;
   define String MMT_GLOBAL_SCENE_H_6;
   define String MMT_GLOBAL_SCENE_CGRP_7;
   define String MMT_GLOBAL_SCENE_A_7;
   define String MMT_GLOBAL_SCENE_B_7;
   define String MMT_GLOBAL_SCENE_C_7;
   define String MMT_GLOBAL_SCENE_D_7;
   define String MMT_GLOBAL_SCENE_E_7;
   define String MMT_GLOBAL_SCENE_F_7;
   define String MMT_GLOBAL_SCENE_G_7;
   define String MMT_GLOBAL_SCENE_H_7;
   define String MMT_GLOBAL_SCENE_CGRP_8;
   define String MMT_GLOBAL_SCENE_A_8;
   define String MMT_GLOBAL_SCENE_B_8;
   define String MMT_GLOBAL_SCENE_C_8;
   define String MMT_GLOBAL_SCENE_D_8;
   define String MMT_GLOBAL_SCENE_E_8;
   define String MMT_GLOBAL_SCENE_F_8;
   define String MMT_GLOBAL_SCENE_G_8;
   define String MMT_GLOBAL_SCENE_H_8;
   define String MMT_GLOBAL_SCENE_CGRP_9;
   define String MMT_GLOBAL_SCENE_A_9;
   define String MMT_GLOBAL_SCENE_B_9;
   define String MMT_GLOBAL_SCENE_C_9;
   define String MMT_GLOBAL_SCENE_D_9;
   define String MMT_GLOBAL_SCENE_E_9;
   define String MMT_GLOBAL_SCENE_F_9;
   define String MMT_GLOBAL_SCENE_G_9;
   define String MMT_GLOBAL_SCENE_H_9;
   define String MMT_GLOBAL_SCENE_CGRP_10;
   define String MMT_GLOBAL_SCENE_A_10;
   define String MMT_GLOBAL_SCENE_B_10;
   define String MMT_GLOBAL_SCENE_C_10;
   define String MMT_GLOBAL_SCENE_D_10;
   define String MMT_GLOBAL_SCENE_E_10;
   define String MMT_GLOBAL_SCENE_F_10;
   define String MMT_GLOBAL_SCENE_G_10;
   define String MMT_GLOBAL_SCENE_H_10;
   define String MMT_GLOBAL_SCENE_CGRP_11;
   define String MMT_GLOBAL_SCENE_A_11;
   define String MMT_GLOBAL_SCENE_B_11;
   define String MMT_GLOBAL_SCENE_C_11;
   define String MMT_GLOBAL_SCENE_D_11;
   define String MMT_GLOBAL_SCENE_E_11;
   define String MMT_GLOBAL_SCENE_F_11;
   define String MMT_GLOBAL_SCENE_G_11;
   define String MMT_GLOBAL_SCENE_H_11;
   define String MMT_GLOBAL_SCENE_CGRP_12;
   define String MMT_GLOBAL_SCENE_A_12;
   define String MMT_GLOBAL_SCENE_B_12;
   define String MMT_GLOBAL_SCENE_C_12;
   define String MMT_GLOBAL_SCENE_D_12;
   define String MMT_GLOBAL_SCENE_E_12;
   define String MMT_GLOBAL_SCENE_F_12;
   define String MMT_GLOBAL_SCENE_G_12;
   define String MMT_GLOBAL_SCENE_H_12;
   define String MMT_GLOBAL_SCENE_CGRP_13;
   define String MMT_GLOBAL_SCENE_A_13;
   define String MMT_GLOBAL_SCENE_B_13;
   define String MMT_GLOBAL_SCENE_C_13;
   define String MMT_GLOBAL_SCENE_D_13;
   define String MMT_GLOBAL_SCENE_E_13;
   define String MMT_GLOBAL_SCENE_F_13;
   define String MMT_GLOBAL_SCENE_G_13;
   define String MMT_GLOBAL_SCENE_H_13;
   define String MMT_GLOBAL_SCENE_CGRP_14;
   define String MMT_GLOBAL_SCENE_A_14;
   define String MMT_GLOBAL_SCENE_B_14;
   define String MMT_GLOBAL_SCENE_C_14;
   define String MMT_GLOBAL_SCENE_D_14;
   define String MMT_GLOBAL_SCENE_E_14;
   define String MMT_GLOBAL_SCENE_F_14;
   define String MMT_GLOBAL_SCENE_G_14;
   define String MMT_GLOBAL_SCENE_H_14;
   define String MMT_GLOBAL_SCENE_CGRP_15;
   define String MMT_GLOBAL_SCENE_A_15;
   define String MMT_GLOBAL_SCENE_B_15;
   define String MMT_GLOBAL_SCENE_C_15;
   define String MMT_GLOBAL_SCENE_D_15;
   define String MMT_GLOBAL_SCENE_E_15;
   define String MMT_GLOBAL_SCENE_F_15;
   define String MMT_GLOBAL_SCENE_G_15;
   define String MMT_GLOBAL_SCENE_H_15;
   define String MMT_GLOBAL_SCENE_CGRP_16;
   define String MMT_GLOBAL_SCENE_A_16;
   define String MMT_GLOBAL_SCENE_B_16;
   define String MMT_GLOBAL_SCENE_C_16;
   define String MMT_GLOBAL_SCENE_D_16;
   define String MMT_GLOBAL_SCENE_E_16;
   define String MMT_GLOBAL_SCENE_F_16;
   define String MMT_GLOBAL_SCENE_G_16;
   define String MMT_GLOBAL_SCENE_H_16;
   define String MMT_GLOBAL_SCENE_MULTI_PREV;
   define String MMT_GLOBAL_SCENE_MULTI_NEXT;
   define String MMT_GLOBAL_SCENE_MULTI_1;
   define String MMT_GLOBAL_SCENE_MULTI_2;
   define String MMT_GLOBAL_SCENE_MULTI_3;
   define String MMT_GLOBAL_SCENE_MULTI_4;
   define String MMT_GLOBAL_SCENE_MULTI_5;
   define String MMT_GLOBAL_SCENE_MULTI_6;
   define String MMT_GLOBAL_SCENE_MULTI_7;
   define String MMT_GLOBAL_SCENE_MULTI_8;
   define String MMT_GLOBAL_SCENE_MULTI_9;
   define String MMT_GLOBAL_SCENE_MULTI_10;
   define String MMT_GLOBAL_SCENE_MULTI_11;
   define String MMT_GLOBAL_SCENE_MULTI_12;
   define String MMT_GLOBAL_SCENE_MULTI_13;
   define String MMT_GLOBAL_SCENE_MULTI_14;
   define String MMT_GLOBAL_SCENE_MULTI_15;
   define String MMT_GLOBAL_SCENE_MULTI_16;

   define String MMT_GLOBAL_DISCARDCTL_COLLECT;
   define String MMT_GLOBAL_DISCARDCTL;
   define String MMT_GLOBAL_RESENDLASTCTL;
   define String MMT_GLOBAL_PUSHCTL;
   define String MMT_GLOBAL_PUSHCTL_UI;

   define String MMT_GLOBAL_FOCUS;
   define String MMT_GLOBAL_FOCUS_INV;
   define String MMT_GLOBAL_FOCUS_DELTA;
   define String MMT_GLOBAL_FOCUS_PREV;
   define String MMT_GLOBAL_FOCUS_NEXT;

   define String MMT_GLOBAL_VALUE;
   define String MMT_GLOBAL_VALUE_INV;
   define String MMT_GLOBAL_VALUE_DELTA;

   define String MMT_GLOBAL_KBDFOCUS;

   define String MMT_MMC_FORCE_GLOBAL;

   define String MMT_SHOW_LAST_HEAD_MSG;

   define String MMT_NAV_PROJECT;
   define String MMT_NAV_PROJECT_SUBSONGS;
   define String MMT_NAV_CONFIG_PREFS;
   define String MMT_NAV_CONFIG_DEVICES;
   define String MMT_NAV_INPUT_SCENES;
   define String MMT_NAV_INPUT_GLOBAL;
   define String MMT_NAV_MIDIMON;
   define String MMT_NAV_SYSEX;
   define String MMT_NAV_PIPES;
   define String MMT_NAV_PIPEMAP;
   define String MMT_NAV_CURRENT_PIPE;
   define String MMT_NAV_CURRENT_NODE;
   define String MMT_NAV_NODE_PREV;
   define String MMT_NAV_NODE_NEXT;
   define String MMT_NAV_PIPE_PREV;
   define String MMT_NAV_PIPE_NEXT;
   define String MMT_NAV_CTLTAG;

   define String MMT_TRANSPORT_PLAY;
   define String MMT_TRANSPORT_STOP;
   define String MMT_TRANSPORT_CYCLE;
   define String MMT_TRANSPORT_CYCLE_1_BEAT;
   define String MMT_TRANSPORT_CYCLE_2_BEATS;
   define String MMT_TRANSPORT_CYCLE_1_BAR;
   define String MMT_TRANSPORT_CYCLE_2_BARS;
   define String MMT_TRANSPORT_CYCLE_4_BARS;
   define String MMT_TRANSPORT_CYCLE_6_BARS;
   define String MMT_TRANSPORT_CYCLE_8_BARS;
   define String MMT_TRANSPORT_CYCLE_12_BARS;
   define String MMT_TRANSPORT_CYCLE_16_BARS;
   define String MMT_TRANSPORT_CYCLE_24_BARS;
   define String MMT_TRANSPORT_CYCLE_32_BARS;
   define String MMT_TRANSPORT_CYCLE_INC;
   define String MMT_TRANSPORT_CYCLE_DEC;
   define String MMT_TRANSPORT_CYCLE_DELTA;
   define String MMT_TRANSPORT_BEAT_PREV;
   define String MMT_TRANSPORT_BEAT_NEXT;
   define String MMT_TRANSPORT_BEAT_DELTA;
   define String MMT_TRANSPORT_BAR_PREV;
   define String MMT_TRANSPORT_BAR_NEXT;
   define String MMT_TRANSPORT_BAR_DELTA;
   define String MMT_TRANSPORT_MARKER_PREV;
   define String MMT_TRANSPORT_MARKER_NEXT;
   define String MMT_TRANSPORT_MARKER_DELTA;
   define String MMT_TRANSPORT_MARKER_SAVE_SCRATCH;
   define String MMT_TRANSPORT_MARKER_SAVE_1;
   define String MMT_TRANSPORT_MARKER_SAVE_2;
   define String MMT_TRANSPORT_MARKER_SAVE_3;
   define String MMT_TRANSPORT_MARKER_SAVE_4;
   define String MMT_TRANSPORT_MARKER_SAVE_5;
   define String MMT_TRANSPORT_MARKER_SAVE_6;
   define String MMT_TRANSPORT_MARKER_SAVE_7;
   define String MMT_TRANSPORT_MARKER_SAVE_8;
   define String MMT_TRANSPORT_MARKER_LOAD_SCRATCH;
   define String MMT_TRANSPORT_MARKER_LOAD_1;
   define String MMT_TRANSPORT_MARKER_LOAD_2;
   define String MMT_TRANSPORT_MARKER_LOAD_3;
   define String MMT_TRANSPORT_MARKER_LOAD_4;
   define String MMT_TRANSPORT_MARKER_LOAD_5;
   define String MMT_TRANSPORT_MARKER_LOAD_6;
   define String MMT_TRANSPORT_MARKER_LOAD_7;
   define String MMT_TRANSPORT_MARKER_LOAD_8;
   define String MMT_TRANSPORT_MARKER_RENAME;

   define String MMT_PUSH_MODE;
   define String MMT_PUSH_TOGGLE_KBD;

   define String MMT_ATRK_REC_REPLACE;
   define String MMT_ATRK_REC_APPEND;
   define String MMT_ATRK_REC_STOP_TRIM;
   define String MMT_ATRK_REC_STOP_TRIM_ADDSMP;
   define String MMT_ATRK_REC_STOP_TRIM_ADDSMP_RESTART;
   define String MMT_ATRK_REC_STOP_TRIM_ADDMULTISMP;
   define String MMT_ATRK_REC_STOP_TRIM_ADDMULTISMP_RESTART;
   define String MMT_ATRK_LIVEREC_CAPTURE;

   define String MMT_TOGGLE_METRONOME;

   // (note) AudioLiveRecDialog must be visible
   define String MMT_LIVERECDLG_QUERY;
   define String MMT_LIVERECDLG_INSTANCE_PREV;
   define String MMT_LIVERECDLG_INSTANCE_NEXT;
   define String MMT_LIVERECDLG_SMP_NEXT;
   define String MMT_LIVERECDLG_SMP_PREV;
   define String MMT_LIVERECDLG_SMP_CLEAR;
   define String MMT_LIVERECDLG_SMP_REC;

   PointerArray syn_key_queue;

   protected int force_kbdfocusselmode_usecount;

   protected boolean b_fix_layout;

   protected SceneOverlay f_scene_overlay;

   protected int last_marker_idx;
   protected int last_loaded_marker_idx;

   protected int replay_blink_count;

   protected int loadsave_marker_key_mode; // 0=off, 1=load marker, 2=save marker

   protected float bpm_key_speed_idx = 0;  // bpm inc/dec speed increases while key is being held down
   protected FloatArray bpm_key_speed_tbl = [0.05, 0.05, 0.05, 0.1, 0.1, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5];

   protected int songwidgets_update_count; // see handleReplayTimer()

   protected int ctltag_page_return_nr = -1;

   protected boolean b_force_show_bpm;  // true=show BPM instead of time (while replay is running)

   protected int tap_tempo_start_millisec;
   protected int tap_tempo_num_taps;

   protected ExportSMFDialog   *dlg_export_smf;
   protected ExportTinyDialog  *dlg_export_tiny;
   public AudioRecordDialog *dlg_audio_record;

   public Texture tex_scanline_pattern;

   protected TextInputDialog *dlg_bpm;

   protected int autosave_replay_timer_count;

   protected int queued_show_node_gid;
   protected boolean b_queued_show_next_arranger;
   protected boolean b_queued_pipenode_ab_swap;

   protected int queued_pipenode_button_select_pipe_idx;
   protected int queued_pipenode_button_select_node_idx;

   protected int last_replaytimelabel_songticks;

   define int CMD_HISTORY_SIZE = 32;
   protected StringArray cmd_history;

   protected StringArray cmd_actions; // valid while default actions popup is shown

   protected int last_status_message_ms;

   // // public AudioLiveRecDialog *dlg_audio_liverec;  // moved to "st2" namespace

   // true=FaderPort/MFTwister bank selected => update context sensitive faders (<editfocus>, <autodev_a>, <autodev_b>)
   protected boolean b_queue_update_bidirection_controls;

   public DelayCalculatorDialog *dlg_delaycalc;

   static SeqScriptHost *script_host;


   // <ui_init.png>
   public method init() : boolean {

      initTimers();

      autoResolveIds(this);

      sb_status.setStatusBarListener(this);

      if(initPages())
      {
         if(!f_scene_overlay.init())
         {
            trace "[---] RootForm::init: failed to init scene overlay.";
            return false;
         }

         initMMC();

         // // lnf_colors[LookAndFeel.COLOR_TABFOCUS_TEXT_BORDER] = #ff00ffff;

         queued_show_node_gid = -1;

         last_replaytimelabel_songticks = -1;

         queued_pipenode_button_select_pipe_idx = -1;

         if(app_lnf.b_ascii_back_buttons)
         {
            Global.ASCIIBackButton(bt_back);
         }

         if(UI.PreferMonoIcons())
         {
            bt_transport_play.setIcon(UI.GetIcon("transport_play_mono"));
            bt_transport_stop.setIcon(UI.GetIcon("stop_mono"));
         }

         initDialogs();

         if(UI.font_scaling == 2)
         {
            bt_songpos.setPadTop(2);
         }

         script_host <= new SeqScriptHost;
         script_host.init();

         return true;
      }
      else
      {
         return false;
      }
   }

   public method initTimers() {
      ta_replay_timer    <= TimerAction.New(TA_REPLAY_TIMER,   this, 30);
      ta_key_speed       <= TimerAction.New(TA_KEY_SPEED,      this, 400);
      ta_replaytime      <= TimerAction.New(TA_REPLAYTIME,     this, 50);
      ta_replaytime.setDefaultTicks(50/*def*/, 50/*short*/, 250/*medium*/, 250/*long*/);
      ta_redraw_all      <= TimerAction.New(TA_REDRAW_ALL,     this, REDRAW_TIMEOUT_MEDIUM); // dynamic timeout
      ta_scene_overlay   <= TimerAction.New(TA_SCENE_OVERLAY,  this, 2*400);
      ta_pagectltag      <= TimerAction.New(TA_PAGECTLTAG,     this, 700);
      ta_show_bpm        <= TimerAction.New(TA_SHOW_BPM,       this, 3000);

      ta_replaytime.scheduleLong();
   }

   protected method initDialogs() : boolean {
      if(Configuration.debugLevel >= 2)
         Global.Debug2("RootForm::initDialogs: ENTER");

      dlg_audio_liverec <= new AudioLiveRecDialog;
      if(!dlg_audio_liverec.init())
         return false;

      if(Configuration.debugLevel >= 2)
         Global.Debug2("RootForm::initDialogs: LEAVE");

      return true;
   }

   protected method initPages() : boolean {
      boolean r = true;

      page_history.alloc(PAGE_HISTORY_SIZE);
      page_history_idx = 0;

      r = r && pg_start.init();

      if(r)
      {
         r = pg_config.init();
      }

      if(r)
      {
         r = pg_midimapper.init();
      }

      if(r)
      {
         r = pg_midimon.init();
      }

      if(r)
      {
         r = pg_mididevs.init();
      }

      if(r)
      {
         r = pg_sysex.init();
      }

      if(r)
      {
         r = pg_project.init();
      }

      if(r)
      {
         r = pg_piperoot.init();
      }

      if(r)
      {
         r = pg_subsongs.init();
      }

      if(r)
      {
         r = pg_prefs.init();
      }

      if(r)
      {
         r = pg_editmidimap.init();
      }

      if(r)
      {
         r = pg_editmididevice.init();
      }

      if(r)
      {
         r = pg_editmidimorph.init();
      }

      if(r)
      {
         r = pg_editmidimorphmulti.init();
      }

      if(r)
      {
         r = pg_pipe.init();
      }

      if(r)
      {
         r = pg_nodetype.init();
      }

      if(r)
      {
         r = pg_node.init();
      }

      if(r)
      {
         r = pg_pipemap.init();
      }

      if(r)
      {
         r = pg_ctltag.init();
      }

      if(r)
      {
         r = pg_audiotool.init();
      }

      if(r)
      {
         r = pg_outputmon.init();
      }

      if(r)
      {
         // // showPage(PAGE_START, true/*bAllowHistory*/);
         showPage(PAGE_PIPEMAP, true/*bAllowHistory*/);
      }

      return r;
   }

   // <midi.png>
   protected method initMMC() {

      mmcInit("Global");

      mmcAddTargetExO(MMT_BPM,       CLASS_VALUE, SYN_NONE,
                      "BPM", "BPM",  DPY_DEFAULT, fp_bpm
                      );
      mmcAddTargetExO(MMT_BPM_INV,   CLASS_VALUE, SYN_NONE,
                      "BPM", "BPM",  DPY_DEFAULT, fp_bpm
                      );
      mmcAddTargetExO(MMT_BPM_DELTA, CLASS_DELTA, 4,
                      "BPM", "BPM",  DPY_DEFAULT, fp_bpm
                      );
      mmcAddTarget(MMT_BPM_INC,      CLASS_BUTTON, SYN_BUTTON_REPEAT);
      mmcAddTarget(MMT_BPM_DEC,      CLASS_BUTTON, SYN_BUTTON_REPEAT);
      mmcAddTarget(MMT_BPM_DOUBLE,   CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_BPM_HALF,     CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_BPM_TAP,      CLASS_BUTTON, SYN_BUTTON_CLICK);

      mmcAddTarget(MMT_GLOBAL_YES,   CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_NO,    CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_LEFT,  CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_RIGHT, CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_UP,    CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_DOWN,  CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);

      mmcAddTarget(MMT_GLOBAL_PAGE_PREV,    CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_GLOBAL_PAGE_NEXT,    CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_GLOBAL_PAGE_PARENT,  CLASS_BUTTON, SYN_BUTTON_CLICK);

      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_A,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_B,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_C,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_D,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_E,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_F,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_G,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_H,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_PREV,  CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_NEXT,  CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_PREV,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_NEXT,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_PREV,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_NEXT,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_PREV,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_NEXT,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_PREV,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_NEXT,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_PREV,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_NEXT,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_PREV,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_NEXT,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_PREV,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_NEXT,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_PREV,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_NEXT,     CLASS_BUTTON, SYN_BUTTON_KEYREPEAT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_1,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_1,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_1,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_1,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_1,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_1,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_1,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_1,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_1,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_2,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_2,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_2,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_2,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_2,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_2,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_2,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_2,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_2,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_3,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_3,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_3,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_3,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_3,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_3,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_3,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_3,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_3,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_4,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_4,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_4,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_4,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_4,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_4,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_4,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_4,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_4,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_5,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_5,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_5,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_5,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_5,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_5,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_5,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_5,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_5,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_6,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_6,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_6,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_6,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_6,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_6,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_6,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_6,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_6,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_7,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_7,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_7,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_7,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_7,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_7,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_7,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_7,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_7,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_8,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_8,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_8,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_8,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_8,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_8,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_8,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_8,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_8,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_9,     CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_9,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_9,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_9,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_9,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_9,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_9,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_9,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_9,        CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_10,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_10,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_10,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_10,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_10,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_10,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_10,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_10,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_10,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_11,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_11,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_11,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_11,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_11,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_11,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_11,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_11,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_11,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_12,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_12,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_12,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_12,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_12,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_12,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_12,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_12,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_12,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_13,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_13,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_13,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_13,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_13,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_13,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_13,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_13,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_13,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_14,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_14,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_14,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_14,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_14,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_14,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_14,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_14,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_14,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_15,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_15,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_15,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_15,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_15,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_15,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_15,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_15,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_15,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_CGRP_16,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_A_16,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_B_16,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_C_16,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_D_16,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_E_16,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_F_16,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_G_16,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_H_16,       CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_PREV, CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_NEXT, CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_1,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_2,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_3,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_4,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_5,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_6,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_7,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_8,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_9,    CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_10,   CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_11,   CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_12,   CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_13,   CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_14,   CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_15,   CLASS_BUTTON, SYN_BUTTON_SELECT);
      mmcAddTarget(MMT_GLOBAL_SCENE_MULTI_16,   CLASS_BUTTON, SYN_BUTTON_SELECT);

      mmcAddTarget(MMT_GLOBAL_DISCARDCTL_COLLECT,   CLASS_BUTTON, SYN_BUTTON_MOD);
      mmcAddTarget(MMT_GLOBAL_DISCARDCTL,   CLASS_BUTTON, SYN_BUTTON_MOD);
      mmcAddTarget(MMT_GLOBAL_RESENDLASTCTL, CLASS_BUTTON, SYN_BUTTON_MOD);

      mmcAddTarget(MMT_GLOBAL_PUSHCTL,     CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_GLOBAL_PUSHCTL_UI,  CLASS_BUTTON, SYN_BUTTON_CLICK);

      mmcAddTarget(MMT_GLOBAL_FOCUS,       CLASS_VALUE,  SYN_NONE);
      mmcAddTarget(MMT_GLOBAL_FOCUS_INV,   CLASS_VALUE,  SYN_NONE);
      mmcAddTarget(MMT_GLOBAL_FOCUS_DELTA, CLASS_DELTA,  0);
      mmcAddTarget(MMT_GLOBAL_FOCUS_PREV,  CLASS_BUTTON,  SYN_BUTTON_REPEAT);
      mmcAddTarget(MMT_GLOBAL_FOCUS_NEXT,  CLASS_BUTTON,  SYN_BUTTON_REPEAT);

      mmcAddTarget(MMT_GLOBAL_VALUE,        CLASS_VALUE,  SYN_NONE);
      mmcAddTarget(MMT_GLOBAL_VALUE_INV,    CLASS_VALUE,  SYN_NONE);
      mmcAddTarget(MMT_GLOBAL_VALUE_DELTA,  CLASS_DELTA,  4);
      // //mmcAddTarget(MMT_GLOBAL_VALUE_INC_F,  CLASS_BUTTON, SYN_BUTTON_CLICK);

      mmcAddTarget(MMT_GLOBAL_KBDFOCUS,   CLASS_BUTTON, SYN_BUTTON_MOD);

      mmcAddTarget(MMT_MMC_FORCE_GLOBAL,   CLASS_BUTTON, SYN_BUTTON_MOD);

      mmcAddTarget(MMT_SHOW_LAST_HEAD_MSG, CLASS_BUTTON, SYN_BUTTON_CLICK);

      // Global navigation
      mmcAddTargetEx(MMT_NAV_PROJECT,           CLASS_BUTTON, SYN_BUTTON_CLICK, "Project",     null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_PROJECT_SUBSONGS,  CLASS_BUTTON, SYN_BUTTON_CLICK, "Subsongs",    null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_CONFIG_PREFS,      CLASS_BUTTON, SYN_BUTTON_CLICK, "Preferences", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_CONFIG_DEVICES,    CLASS_BUTTON, SYN_BUTTON_CLICK, "Devices",     null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_INPUT_SCENES,      CLASS_BUTTON, SYN_BUTTON_CLICK, "Scenes",      null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_INPUT_GLOBAL,      CLASS_BUTTON, SYN_BUTTON_CLICK, "Global Map",  null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_MIDIMON,           CLASS_BUTTON, SYN_BUTTON_CLICK, "Monitor", "MIDI Monitor", DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_SYSEX,             CLASS_BUTTON, SYN_BUTTON_CLICK, "SysEx",   null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_PIPES,             CLASS_BUTTON, SYN_BUTTON_CLICK, "Pipes",   "Pipes", DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_PIPEMAP,           CLASS_BUTTON, SYN_BUTTON_CLICK, "PipeMap", "PipeMap", DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_CURRENT_PIPE,      CLASS_BUTTON, SYN_BUTTON_CLICK, "Pipe",    "Current Pipe", DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_CURRENT_NODE,      CLASS_BUTTON, SYN_BUTTON_CLICK, "Node",    "Current Node", DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_NODE_PREV,         CLASS_BUTTON, SYN_BUTTON_CLICK, "Prev Node", "Previous Node", DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_NODE_NEXT,         CLASS_BUTTON, SYN_BUTTON_CLICK, "Next Node", "Next Node", DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_PIPE_PREV,         CLASS_BUTTON, SYN_BUTTON_CLICK, "Prev Pipe", "Previous Pipe", DPY_DEFAULT);
      mmcAddTargetEx(MMT_NAV_PIPE_NEXT,         CLASS_BUTTON, SYN_BUTTON_CLICK, "Next Pipe", "Next Pipe", DPY_DEFAULT);

      // Transport
      mmcAddTargetEx(MMT_TRANSPORT_PLAY,         CLASS_BUTTON, SYN_BUTTON_SELECT, "Play",   null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_STOP,         CLASS_BUTTON, SYN_BUTTON_CLICK, "Stop",   null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE,        CLASS_BUTTON, SYN_BUTTON_SELECT, "Cycle", "Toggle Cycle Mode", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_1_BEAT, CLASS_BUTTON, SYN_BUTTON_SELECT, "Cy 1 Bt", "Cycle 1 Beat", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_2_BEATS, CLASS_BUTTON, SYN_BUTTON_SELECT, "Cy 2 Bt", "Cycle 2 Beats", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_1_BAR, CLASS_BUTTON, SYN_BUTTON_SELECT, "Cy 1 Br", "Cycle 1 Bar", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_2_BARS, CLASS_BUTTON, SYN_BUTTON_SELECT, "Cy 2 Br", "Cycle 2 Bars", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_4_BARS, CLASS_BUTTON, SYN_BUTTON_SELECT, "Cy 4 Br", "Cycle 4 Bars", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_6_BARS, CLASS_BUTTON, SYN_BUTTON_SELECT, "Cy 6 Br", "Cycle 6 Bars", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_8_BARS, CLASS_BUTTON, SYN_BUTTON_SELECT, "Cy 8 Br", "Cycle 8 Bars", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_12_BARS, CLASS_BUTTON, SYN_BUTTON_SELECT, "Cy 12 Br", "Cycle 12 Bars", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_16_BARS, CLASS_BUTTON, SYN_BUTTON_SELECT, "Cy 16 Br", "Cycle 16 Bars", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_24_BARS, CLASS_BUTTON, SYN_BUTTON_SELECT, "Cy 24 Br", "Cycle 24 Bars", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_32_BARS, CLASS_BUTTON, SYN_BUTTON_SELECT, "Cy 32 Br", "Cycle 32 Bars", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_INC,     CLASS_BUTTON, SYN_BUTTON_REPEAT, "Inc Cy", "Increase cycle length", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_DEC,     CLASS_BUTTON, SYN_BUTTON_REPEAT, "Dec Cy", "Decrease cycle length", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_CYCLE_DELTA,   CLASS_DELTA, 4, "CycleLen", "Cycle length", DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_BEAT_PREV,    CLASS_BUTTON, SYN_BUTTON_REPEAT, "BeatPrev", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_BEAT_NEXT,    CLASS_BUTTON, SYN_BUTTON_REPEAT, "BeatNext", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_BEAT_DELTA,   CLASS_DELTA,  4, "Beat", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_BAR_PREV,     CLASS_BUTTON, SYN_BUTTON_REPEAT, "Bar Prev", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_BAR_NEXT,     CLASS_BUTTON, SYN_BUTTON_REPEAT, "Bar Next", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_BAR_DELTA,    CLASS_DELTA,  4, "Bar", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_PREV,  CLASS_BUTTON, SYN_BUTTON_REPEAT, "Mrk Prev", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_NEXT,  CLASS_BUTTON, SYN_BUTTON_REPEAT, "Mrk Next", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_DELTA, CLASS_DELTA,  4, "Marker", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_SAVE_SCRATCH, CLASS_BUTTON, SYN_BUTTON_CLICK, "MrkSav S", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_SAVE_1,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkSav 1", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_SAVE_2,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkSav 2", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_SAVE_3,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkSav 3", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_SAVE_4,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkSav 4", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_SAVE_5,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkSav 5", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_SAVE_6,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkSav 6", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_SAVE_7,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkSav 7", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_SAVE_8,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkSav 8", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_LOAD_SCRATCH, CLASS_BUTTON, SYN_BUTTON_CLICK, "MrkLod S", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_LOAD_1,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkLod 1", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_LOAD_2,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkLod 2", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_LOAD_3,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkLod 3", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_LOAD_4,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkLod 4", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_LOAD_5,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkLod 5", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_LOAD_6,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkLod 6", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_LOAD_7,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkLod 7", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_LOAD_8,       CLASS_BUTTON, SYN_BUTTON_SELECT, "MrkLod 8", null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_TRANSPORT_MARKER_RENAME,       CLASS_BUTTON, SYN_BUTTON_CLICK, "MrkRenam", null, DPY_DEFAULT);

      // Push mode selection
      mmcAddTargetEx(MMT_PUSH_MODE,       CLASS_BUTTON, SYN_BUTTON_SELECT, "Push Mode",   null, DPY_DEFAULT);
      mmcAddTargetEx(MMT_PUSH_TOGGLE_KBD, CLASS_BUTTON, SYN_BUTTON_SELECT, "Push Toggle Kbd/MMC Mode",   null, DPY_DEFAULT);

      mmcAddTarget(MMT_GLOBAL_PUSHCTL,    CLASS_BUTTON, SYN_BUTTON_CLICK);

      mmcAddTarget(MMT_ATRK_REC_REPLACE,                       CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_ATRK_REC_APPEND,                        CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_ATRK_REC_STOP_TRIM,                     CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_ATRK_REC_STOP_TRIM_ADDSMP,              CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_ATRK_REC_STOP_TRIM_ADDSMP_RESTART,      CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_ATRK_REC_STOP_TRIM_ADDMULTISMP,         CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_ATRK_REC_STOP_TRIM_ADDMULTISMP_RESTART, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_ATRK_LIVEREC_CAPTURE,                   CLASS_BUTTON, SYN_BUTTON_CLICK);

      mmcAddTarget(MMT_TOGGLE_METRONOME,  CLASS_BUTTON, SYN_BUTTON_CLICK);

      mmcAddTarget(MMT_LIVERECDLG_QUERY,         CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_LIVERECDLG_INSTANCE_PREV, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_LIVERECDLG_INSTANCE_NEXT, CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_LIVERECDLG_SMP_PREV,      CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_LIVERECDLG_SMP_NEXT,      CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_LIVERECDLG_SMP_CLEAR,     CLASS_BUTTON, SYN_BUTTON_CLICK);
      mmcAddTarget(MMT_LIVERECDLG_SMP_REC,       CLASS_BUTTON, SYN_BUTTON_CLICK);
   }

   // <midi.png>
   public virtual mmcHandleEvent(MIDIMapEvent _ev) : boolean {

      // trace "[>>>] RootForm::mmcHandleEvent: 1 _ev.type="+_ev.type+" ext_type="+_ev.ext_type+" dev="+#(_ev.dev);

      if(!mmcIsBindableEvent(_ev))
      {
         if(push.isModeKbd())
         {
            if(push_kbd.handleEventUI(_ev))
            {
               // trace "xxx mmc: handled by push_kbd";
               return true;
            }
         }
         else
            return true;
      }

      MIDIMapContext *pgMMC <= getCurrentPageMMC();
      MMTListener mmtl <= pgMMC;

      // trace "[>>>] RootForm::mmcHandleEvent: 2 _ev.type="+_ev.type+" ext_type="+_ev.ext_type+" dev="+#(_ev.dev);

      if(! ((PAGE_EDITMIDIMAP == current_page)) )//// && (this == pg_editmidimap.mmc)) )
      {
         if((pgMMC instanceof MIDIMapContext) && !b_mmc_force_global)
         {
            MIDIMapContext m <= pgMMC.mmcProxyGet();

            if(null != m)
            {
               pgMMC <= m;
            }

            if(pgMMC.mmcHandleEvent(_ev))
            {
               return true;
            }
            else if(pgMMC.mmcFilterRepeatEvent(_ev))
            {
               return true;
            }
         }

         // trace "xxx RootForm.mmcHandleEvent 2";
         // trace "[>>>] RootForm::mmcHandleEvent 2: _ev.type="+_ev.type+" ext_type="+_ev.ext_type+" dev="+#(_ev.dev);

         MIDIMapEvent boundEv <= mmcGetBindingByEvent(_ev);

         if(null != boundEv)
         {
            String targetName <= boundEv.bound_target.target_name;

            // trace "xxx RootForm.mmcHandleEvent 2 targetName=\""+targetName+"\"";

            boolean bLiveRecVisible = IsAudioLiveRecFormVisible();

            if(targetName.startsWith("MMT_GLOBAL_SCENE_"))
            {
               switch(targetName)
               {
                  case MMT_GLOBAL_SCENE_CGRP_A:
                     selectSceneByIdx(0, MIDIMorphScene.GetCurrentSceneIdx(0));
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_B:
                     selectSceneByIdx(1, MIDIMorphScene.GetCurrentSceneIdx(1));
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_C:
                     selectSceneByIdx(2, MIDIMorphScene.GetCurrentSceneIdx(2));
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_D:
                     selectSceneByIdx(3, MIDIMorphScene.GetCurrentSceneIdx(3));
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_E:
                     selectSceneByIdx(4, MIDIMorphScene.GetCurrentSceneIdx(4));
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_F:
                     selectSceneByIdx(5, MIDIMorphScene.GetCurrentSceneIdx(5));
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_G:
                     selectSceneByIdx(6, MIDIMorphScene.GetCurrentSceneIdx(6));
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_H:
                     selectSceneByIdx(7, MIDIMorphScene.GetCurrentSceneIdx(7));
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_PREV:
                     if(_ev.class_type_ext)
                        selectScenePrev(-1);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_NEXT:
                     if(_ev.class_type_ext)
                        selectSceneNext(-1);
                     return true;

                  case MMT_GLOBAL_SCENE_A_PREV:
                     queueSynKey(VKEY_F3, 0, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_A_NEXT:
                     queueSynKey(VKEY_F4, 0, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_B_PREV:
                     queueSynKey(VKEY_F5, 0, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_B_NEXT:
                     queueSynKey(VKEY_F6, 0, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_C_PREV:
                     queueSynKey(VKEY_F7, 0, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_C_NEXT:
                     queueSynKey(VKEY_F8, 0, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_D_PREV:
                     queueSynKey(VKEY_F9, 0, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_D_NEXT:
                     queueSynKey(VKEY_F10, 0, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_E_PREV:
                     queueSynKey(VKEY_F3, VMOD_LALT, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_E_NEXT:
                     queueSynKey(VKEY_F4, VMOD_LALT, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_F_PREV:
                     queueSynKey(VKEY_F5, VMOD_LALT, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_F_NEXT:
                     queueSynKey(VKEY_F6, VMOD_LALT, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_G_PREV:
                     queueSynKey(VKEY_F7, VMOD_LALT, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_G_NEXT:
                     queueSynKey(VKEY_F8, VMOD_LALT, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_H_PREV:
                     queueSynKey(VKEY_F9, VMOD_LALT, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_H_NEXT:
                     queueSynKey(VKEY_F10, VMOD_LALT, _ev.class_type_ext);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_1:
                     selectSceneByIdx(-1, 0);
                     return true;

                  case MMT_GLOBAL_SCENE_A_1:
                     selectSceneByIdx(0, 0);
                     return true;

                  case MMT_GLOBAL_SCENE_B_1:
                     selectSceneByIdx(1, 0);
                     return true;

                  case MMT_GLOBAL_SCENE_C_1:
                     selectSceneByIdx(2, 0);
                     return true;

                  case MMT_GLOBAL_SCENE_D_1:
                     selectSceneByIdx(3, 0);
                     return true;

                  case MMT_GLOBAL_SCENE_E_1:
                     selectSceneByIdx(4, 0);
                     return true;

                  case MMT_GLOBAL_SCENE_F_1:
                     selectSceneByIdx(5, 0);
                     return true;

                  case MMT_GLOBAL_SCENE_G_1:
                     selectSceneByIdx(6, 0);
                     return true;

                  case MMT_GLOBAL_SCENE_H_1:
                     selectSceneByIdx(7, 0);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_2:
                     selectSceneByIdx(-1, 1);
                     return true;

                  case MMT_GLOBAL_SCENE_A_2:
                     selectSceneByIdx(0, 1);
                     return true;

                  case MMT_GLOBAL_SCENE_B_2:
                     selectSceneByIdx(1, 1);
                     return true;

                  case MMT_GLOBAL_SCENE_C_2:
                     selectSceneByIdx(2, 1);
                     return true;

                  case MMT_GLOBAL_SCENE_D_2:
                     selectSceneByIdx(3, 1);
                     return true;

                  case MMT_GLOBAL_SCENE_E_2:
                     selectSceneByIdx(4, 1);
                     return true;

                  case MMT_GLOBAL_SCENE_F_2:
                     selectSceneByIdx(5, 1);
                     return true;

                  case MMT_GLOBAL_SCENE_G_2:
                     selectSceneByIdx(6, 1);
                     return true;

                  case MMT_GLOBAL_SCENE_H_2:
                     selectSceneByIdx(7, 1);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_3:
                     selectSceneByIdx(-1, 2);
                     return true;

                  case MMT_GLOBAL_SCENE_A_3:
                     selectSceneByIdx(0, 2);
                     return true;

                  case MMT_GLOBAL_SCENE_B_3:
                     selectSceneByIdx(1, 2);
                     return true;

                  case MMT_GLOBAL_SCENE_C_3:
                     selectSceneByIdx(2, 2);
                     return true;

                  case MMT_GLOBAL_SCENE_D_3:
                     selectSceneByIdx(3, 2);
                     return true;

                  case MMT_GLOBAL_SCENE_E_3:
                     selectSceneByIdx(4, 2);
                     return true;

                  case MMT_GLOBAL_SCENE_F_3:
                     selectSceneByIdx(5, 2);
                     return true;

                  case MMT_GLOBAL_SCENE_G_3:
                     selectSceneByIdx(6, 2);
                     return true;

                  case MMT_GLOBAL_SCENE_H_3:
                     selectSceneByIdx(7, 2);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_4:
                     selectSceneByIdx(-1, 3);
                     return true;

                  case MMT_GLOBAL_SCENE_A_4:
                     selectSceneByIdx(0, 3);
                     return true;

                  case MMT_GLOBAL_SCENE_B_4:
                     selectSceneByIdx(1, 3);
                     return true;

                  case MMT_GLOBAL_SCENE_C_4:
                     selectSceneByIdx(2, 3);
                     return true;

                  case MMT_GLOBAL_SCENE_D_4:
                     selectSceneByIdx(3, 3);
                     return true;

                  case MMT_GLOBAL_SCENE_E_4:
                     selectSceneByIdx(4, 3);
                     return true;

                  case MMT_GLOBAL_SCENE_F_4:
                     selectSceneByIdx(5, 3);
                     return true;

                  case MMT_GLOBAL_SCENE_G_4:
                     selectSceneByIdx(6, 3);
                     return true;

                  case MMT_GLOBAL_SCENE_H_4:
                     selectSceneByIdx(7, 3);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_5:
                     selectSceneByIdx(-1, 4);
                     return true;

                  case MMT_GLOBAL_SCENE_A_5:
                     selectSceneByIdx(0, 4);
                     return true;

                  case MMT_GLOBAL_SCENE_B_5:
                     selectSceneByIdx(1, 4);
                     return true;

                  case MMT_GLOBAL_SCENE_C_5:
                     selectSceneByIdx(2, 4);
                     return true;

                  case MMT_GLOBAL_SCENE_D_5:
                     selectSceneByIdx(3, 4);
                     return true;

                  case MMT_GLOBAL_SCENE_E_5:
                     selectSceneByIdx(4, 4);
                     return true;

                  case MMT_GLOBAL_SCENE_F_5:
                     selectSceneByIdx(5, 4);
                     return true;

                  case MMT_GLOBAL_SCENE_G_5:
                     selectSceneByIdx(6, 4);
                     return true;

                  case MMT_GLOBAL_SCENE_H_5:
                     selectSceneByIdx(7, 4);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_6:
                     selectSceneByIdx(-1, 5);
                     return true;

                  case MMT_GLOBAL_SCENE_A_6:
                     selectSceneByIdx(0, 5);
                     return true;

                  case MMT_GLOBAL_SCENE_B_6:
                     selectSceneByIdx(1, 5);
                     return true;

                  case MMT_GLOBAL_SCENE_C_6:
                     selectSceneByIdx(2, 5);
                     return true;

                  case MMT_GLOBAL_SCENE_D_6:
                     selectSceneByIdx(3, 5);
                     return true;

                  case MMT_GLOBAL_SCENE_E_6:
                     selectSceneByIdx(4, 5);
                     return true;

                  case MMT_GLOBAL_SCENE_F_6:
                     selectSceneByIdx(5, 5);
                     return true;

                  case MMT_GLOBAL_SCENE_G_6:
                     selectSceneByIdx(6, 5);
                     return true;

                  case MMT_GLOBAL_SCENE_H_6:
                     selectSceneByIdx(7, 5);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_7:
                     selectSceneByIdx(-1, 6);
                     return true;

                  case MMT_GLOBAL_SCENE_A_7:
                     selectSceneByIdx(0, 6);
                     return true;

                  case MMT_GLOBAL_SCENE_B_7:
                     selectSceneByIdx(1, 6);
                     return true;

                  case MMT_GLOBAL_SCENE_C_7:
                     selectSceneByIdx(2, 6);
                     return true;

                  case MMT_GLOBAL_SCENE_D_7:
                     selectSceneByIdx(3, 6);
                     return true;

                  case MMT_GLOBAL_SCENE_E_7:
                     selectSceneByIdx(4, 6);
                     return true;

                  case MMT_GLOBAL_SCENE_F_7:
                     selectSceneByIdx(5, 6);
                     return true;

                  case MMT_GLOBAL_SCENE_G_7:
                     selectSceneByIdx(6, 6);
                     return true;

                  case MMT_GLOBAL_SCENE_H_7:
                     selectSceneByIdx(7, 6);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_8:
                     selectSceneByIdx(-1, 7);
                     return true;

                  case MMT_GLOBAL_SCENE_A_8:
                     selectSceneByIdx(0, 7);
                     return true;

                  case MMT_GLOBAL_SCENE_B_8:
                     selectSceneByIdx(1, 7);
                     return true;

                  case MMT_GLOBAL_SCENE_C_8:
                     selectSceneByIdx(2, 7);
                     return true;

                  case MMT_GLOBAL_SCENE_D_8:
                     selectSceneByIdx(3, 7);
                     return true;

                  case MMT_GLOBAL_SCENE_E_8:
                     selectSceneByIdx(4, 7);
                     return true;

                  case MMT_GLOBAL_SCENE_F_8:
                     selectSceneByIdx(5, 7);
                     return true;

                  case MMT_GLOBAL_SCENE_G_8:
                     selectSceneByIdx(6, 7);
                     return true;

                  case MMT_GLOBAL_SCENE_H_8:
                     selectSceneByIdx(7, 7);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_9:
                     selectSceneByIdx(-1, 8);
                     return true;

                  case MMT_GLOBAL_SCENE_A_9:
                     selectSceneByIdx(0, 8);
                     return true;

                  case MMT_GLOBAL_SCENE_B_9:
                     selectSceneByIdx(1, 8);
                     return true;

                  case MMT_GLOBAL_SCENE_C_9:
                     selectSceneByIdx(2, 8);
                     return true;

                  case MMT_GLOBAL_SCENE_D_9:
                     selectSceneByIdx(3, 8);
                     return true;

                  case MMT_GLOBAL_SCENE_E_9:
                     selectSceneByIdx(4, 8);
                     return true;

                  case MMT_GLOBAL_SCENE_F_9:
                     selectSceneByIdx(5, 8);
                     return true;

                  case MMT_GLOBAL_SCENE_G_9:
                     selectSceneByIdx(6, 8);
                     return true;

                  case MMT_GLOBAL_SCENE_H_9:
                     selectSceneByIdx(7, 8);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_10:
                     selectSceneByIdx(-1, 9);
                     return true;

                  case MMT_GLOBAL_SCENE_A_10:
                     selectSceneByIdx(0, 9);
                     return true;

                  case MMT_GLOBAL_SCENE_B_10:
                     selectSceneByIdx(1, 9);
                     return true;

                  case MMT_GLOBAL_SCENE_C_10:
                     selectSceneByIdx(2, 9);
                     return true;

                  case MMT_GLOBAL_SCENE_D_10:
                     selectSceneByIdx(3, 9);
                     return true;

                  case MMT_GLOBAL_SCENE_E_10:
                     selectSceneByIdx(4, 9);
                     return true;

                  case MMT_GLOBAL_SCENE_F_10:
                     selectSceneByIdx(5, 9);
                     return true;

                  case MMT_GLOBAL_SCENE_G_10:
                     selectSceneByIdx(6, 9);
                     return true;

                  case MMT_GLOBAL_SCENE_H_10:
                     selectSceneByIdx(7, 9);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_11:
                     selectSceneByIdx(-1, 10);
                     return true;

                  case MMT_GLOBAL_SCENE_A_11:
                     selectSceneByIdx(0, 10);
                     return true;

                  case MMT_GLOBAL_SCENE_B_11:
                     selectSceneByIdx(1, 10);
                     return true;

                  case MMT_GLOBAL_SCENE_C_11:
                     selectSceneByIdx(2, 10);
                     return true;

                  case MMT_GLOBAL_SCENE_D_11:
                     selectSceneByIdx(3, 10);
                     return true;

                  case MMT_GLOBAL_SCENE_E_11:
                     selectSceneByIdx(4, 10);
                     return true;

                  case MMT_GLOBAL_SCENE_F_11:
                     selectSceneByIdx(5, 10);
                     return true;

                  case MMT_GLOBAL_SCENE_G_11:
                     selectSceneByIdx(6, 10);
                     return true;

                  case MMT_GLOBAL_SCENE_H_11:
                     selectSceneByIdx(7, 10);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_12:
                     selectSceneByIdx(-1, 11);
                     return true;

                  case MMT_GLOBAL_SCENE_A_12:
                     selectSceneByIdx(0, 11);
                     return true;

                  case MMT_GLOBAL_SCENE_B_12:
                     selectSceneByIdx(1, 11);
                     return true;

                  case MMT_GLOBAL_SCENE_C_12:
                     selectSceneByIdx(2, 11);
                     return true;

                  case MMT_GLOBAL_SCENE_D_12:
                     selectSceneByIdx(3, 11);
                     return true;

                  case MMT_GLOBAL_SCENE_E_12:
                     selectSceneByIdx(4, 11);
                     return true;

                  case MMT_GLOBAL_SCENE_F_12:
                     selectSceneByIdx(5, 11);
                     return true;

                  case MMT_GLOBAL_SCENE_G_12:
                     selectSceneByIdx(6, 11);
                     return true;

                  case MMT_GLOBAL_SCENE_H_12:
                     selectSceneByIdx(7, 11);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_13:
                     selectSceneByIdx(-1, 12);
                     return true;

                  case MMT_GLOBAL_SCENE_A_13:
                     selectSceneByIdx(0, 12);
                     return true;

                  case MMT_GLOBAL_SCENE_B_13:
                     selectSceneByIdx(1, 12);
                     return true;

                  case MMT_GLOBAL_SCENE_C_13:
                     selectSceneByIdx(2, 12);
                     return true;

                  case MMT_GLOBAL_SCENE_D_13:
                     selectSceneByIdx(3, 12);
                     return true;

                  case MMT_GLOBAL_SCENE_E_13:
                     selectSceneByIdx(4, 12);
                     return true;

                  case MMT_GLOBAL_SCENE_F_13:
                     selectSceneByIdx(5, 12);
                     return true;

                  case MMT_GLOBAL_SCENE_G_13:
                     selectSceneByIdx(6, 12);
                     return true;

                  case MMT_GLOBAL_SCENE_H_13:
                     selectSceneByIdx(7, 12);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_14:
                     selectSceneByIdx(-1, 13);
                     return true;

                  case MMT_GLOBAL_SCENE_A_14:
                     selectSceneByIdx(0, 13);
                     return true;

                  case MMT_GLOBAL_SCENE_B_14:
                     selectSceneByIdx(1, 13);
                     return true;

                  case MMT_GLOBAL_SCENE_C_14:
                     selectSceneByIdx(2, 13);
                     return true;

                  case MMT_GLOBAL_SCENE_D_14:
                     selectSceneByIdx(3, 13);
                     return true;

                  case MMT_GLOBAL_SCENE_E_14:
                     selectSceneByIdx(4, 13);
                     return true;

                  case MMT_GLOBAL_SCENE_F_14:
                     selectSceneByIdx(5, 13);
                     return true;

                  case MMT_GLOBAL_SCENE_G_14:
                     selectSceneByIdx(6, 13);
                     return true;

                  case MMT_GLOBAL_SCENE_H_14:
                     selectSceneByIdx(7, 13);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_15:
                     selectSceneByIdx(-1, 14);
                     return true;

                  case MMT_GLOBAL_SCENE_A_15:
                     selectSceneByIdx(0, 14);
                     return true;

                  case MMT_GLOBAL_SCENE_B_15:
                     selectSceneByIdx(1, 14);
                     return true;

                  case MMT_GLOBAL_SCENE_C_15:
                     selectSceneByIdx(2, 14);
                     return true;

                  case MMT_GLOBAL_SCENE_D_15:
                     selectSceneByIdx(3, 14);
                     return true;

                  case MMT_GLOBAL_SCENE_E_15:
                     selectSceneByIdx(4, 14);
                     return true;

                  case MMT_GLOBAL_SCENE_F_15:
                     selectSceneByIdx(5, 14);
                     return true;

                  case MMT_GLOBAL_SCENE_G_15:
                     selectSceneByIdx(6, 14);
                     return true;

                  case MMT_GLOBAL_SCENE_H_15:
                     selectSceneByIdx(7, 14);
                     return true;

                  case MMT_GLOBAL_SCENE_CGRP_16:
                     selectSceneByIdx(-1, 15);
                     return true;

                  case MMT_GLOBAL_SCENE_A_16:
                     selectSceneByIdx(0, 15);
                     return true;

                  case MMT_GLOBAL_SCENE_B_16:
                     selectSceneByIdx(1, 15);
                     return true;

                  case MMT_GLOBAL_SCENE_C_16:
                     selectSceneByIdx(2, 15);
                     return true;

                  case MMT_GLOBAL_SCENE_D_16:
                     selectSceneByIdx(3, 15);
                     return true;

                  case MMT_GLOBAL_SCENE_E_16:
                     selectSceneByIdx(4, 15);
                     return true;

                  case MMT_GLOBAL_SCENE_F_16:
                     selectSceneByIdx(5, 15);
                     return true;

                  case MMT_GLOBAL_SCENE_G_16:
                     selectSceneByIdx(6, 15);
                     return true;

                  case MMT_GLOBAL_SCENE_H_16:
                     selectSceneByIdx(7, 15);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_PREV:
                     selectMultiSceneByDelta(-1);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_NEXT:
                     selectMultiSceneByDelta(1);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_1:
                     selectMultiSceneByIdx(0);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_2:
                     selectMultiSceneByIdx(1);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_3:
                     selectMultiSceneByIdx(2);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_4:
                     selectMultiSceneByIdx(3);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_5:
                     selectMultiSceneByIdx(4);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_6:
                     selectMultiSceneByIdx(5);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_7:
                     selectMultiSceneByIdx(6);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_8:
                     selectMultiSceneByIdx(7);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_9:
                     selectMultiSceneByIdx(8);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_10:
                     selectMultiSceneByIdx(9);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_11:
                     selectMultiSceneByIdx(10);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_12:
                     selectMultiSceneByIdx(11);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_13:
                     selectMultiSceneByIdx(12);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_14:
                     selectMultiSceneByIdx(13);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_15:
                     selectMultiSceneByIdx(14);
                     return true;

                  case MMT_GLOBAL_SCENE_MULTI_16:
                     selectMultiSceneByIdx(15);
                     return true;
               }
               return false;
            }

            if(targetName.startsWith("MMT_TRANSPORT_"))
            {
               switch(targetName)
               {
                  case MMT_TRANSPORT_PLAY:
                     handleToggleReplay(false/*bShift*/);////replay.toggleReplay();
                     return true;

                  case MMT_TRANSPORT_STOP:
                     Global.cmd_song_stop();
                     return true;

                  case MMT_TRANSPORT_CYCLE:
                     transportCycle(maybe/*toggle*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_1_BEAT:
                     setCycleLength(-1);
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_2_BEATS:
                     setCycleLength(-2);
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_1_BAR:
                     setCycleLength(1);
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_2_BARS:
                     setCycleLength(2);
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_4_BARS:
                     setCycleLength(4);
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_6_BARS:
                     setCycleLength(6);
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_8_BARS:
                     setCycleLength(8);
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_12_BARS:
                     setCycleLength(12);
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_16_BARS:
                     setCycleLength(16);
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_24_BARS:
                     setCycleLength(24);
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_32_BARS:
                     setCycleLength(32);
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_INC:
                     transportCycleLengthInc();
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_DEC:
                     transportCycleLengthDec();
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_CYCLE_DELTA:
                     transportCycleLengthDelta(_ev.getDeltaValue());
                     transportCycle(true/*bQuiet*/);
                     return true;

                  case MMT_TRANSPORT_BEAT_PREV:
                     transportPrevBeat();
                     return true;

                  case MMT_TRANSPORT_BEAT_NEXT:
                     transportNextBeat();
                     return true;

                  case MMT_TRANSPORT_BEAT_DELTA:
                     transportBeatDelta(_ev.getDeltaValue());
                     return true;

                  case MMT_TRANSPORT_BAR_PREV:
                     transportPrevBar();
                     return true;

                  case MMT_TRANSPORT_BAR_NEXT:
                     transportNextBar();
                     return true;

                  case MMT_TRANSPORT_BAR_DELTA:
                     transportBarDelta(_ev.getDeltaValue());
                     return true;

                  case MMT_TRANSPORT_MARKER_PREV:
                     transportPrevMarker();
                     return true;

                  case MMT_TRANSPORT_MARKER_NEXT:
                     transportNextMarker();
                     return true;

                  case MMT_TRANSPORT_MARKER_DELTA:
                     transportMarkerDelta(_ev.getDeltaValue());
                     return true;

                  case MMT_TRANSPORT_MARKER_SAVE_SCRATCH:
                     saveSongMarker(-1);
                     return true;

                  case MMT_TRANSPORT_MARKER_SAVE_1:
                     saveSongMarker(0);
                     return true;

                  case MMT_TRANSPORT_MARKER_SAVE_2:
                     saveSongMarker(1);
                     return true;

                  case MMT_TRANSPORT_MARKER_SAVE_3:
                     saveSongMarker(2);
                     return true;

                  case MMT_TRANSPORT_MARKER_SAVE_4:
                     saveSongMarker(3);
                     return true;

                  case MMT_TRANSPORT_MARKER_SAVE_5:
                     saveSongMarker(4);
                     return true;

                  case MMT_TRANSPORT_MARKER_SAVE_6:
                     saveSongMarker(5);
                     return true;

                  case MMT_TRANSPORT_MARKER_SAVE_7:
                     saveSongMarker(6);
                     return true;

                  case MMT_TRANSPORT_MARKER_SAVE_8:
                     saveSongMarker(7);
                     return true;

                  case MMT_TRANSPORT_MARKER_LOAD_SCRATCH:
                     loadSongMarker(-1);
                     return true;

                  case MMT_TRANSPORT_MARKER_LOAD_1:
                     loadSongMarker(0);
                     return true;

                  case MMT_TRANSPORT_MARKER_LOAD_2:
                     loadSongMarker(1);
                     return true;

                  case MMT_TRANSPORT_MARKER_LOAD_3:
                     loadSongMarker(2);
                     return true;

                  case MMT_TRANSPORT_MARKER_LOAD_4:
                     loadSongMarker(3);
                     return true;

                  case MMT_TRANSPORT_MARKER_LOAD_5:
                     loadSongMarker(4);
                     return true;

                  case MMT_TRANSPORT_MARKER_LOAD_6:
                     loadSongMarker(5);
                     return true;

                  case MMT_TRANSPORT_MARKER_LOAD_7:
                     loadSongMarker(6);
                     return true;

                  case MMT_TRANSPORT_MARKER_LOAD_8:
                     loadSongMarker(7);
                     return true;

                  case MMT_TRANSPORT_MARKER_RENAME:
                     last_marker_idx = current_song.findSongMarkerIdx();

                     if(last_marker_idx >= 0)
                     {
                        handleBeginRenameMarker(last_marker_idx);
                     }
                     else
                     {
                        Global.Warning("Cannot rename scratch marker.");
                     }
                     return true;
               }
               return false;
            }

            // trace "xxx switch targetName=\""+targetName+"\".";

            switch(targetName)
            {
               case MMT_BPM:
                  MMTListener.MMTHandleLayerEvent(fp_bpm, _ev, false/*bInv*/);
                  return true;

               case MMT_BPM_DELTA:
                  if(_ev.getDeltaValue() > 0)
                  {
                     loop(_ev.getDeltaValue())
                     {
                        bpmInc(false/*bDouble*/);
                     }
                  }
                  else
                  {
                     loop(-_ev.getDeltaValue())
                     {
                        bpmDec(false/*bHalf*/);
                     }
                  }
                  scheduleKeySpeed();
                  return true;

               case MMT_BPM_INV:
                  MMTListener.MMTHandleLayerEvent(fp_bpm, _ev, true/*bInv*/);
                  return true;

               case MMT_BPM_INC:
                  bpmInc(false/*bDouble*/);
                  scheduleKeySpeed();
                  return true;

               case MMT_BPM_DEC:
                  bpmDec(false/*bHalf*/);
                  scheduleKeySpeed();
                  return true;

               case MMT_BPM_DOUBLE:
                  bpmInc(true/*bDouble*/);
                  scheduleKeySpeed();
                  return true;

               case MMT_BPM_HALF:
                  bpmDec(true/*bHalf*/);
                  scheduleKeySpeed();
                  return true;

               case MMT_BPM_TAP:
                  handleTimeClicked(true/*bTap*/);
                  return true;

               case MMT_GLOBAL_KBDFOCUS:
                  // trace "xxx MMT_GLOBAL_KBDFOCUS ext="+_ev.class_type_ext;
                  force_kbdfocusselmode_usecount = 0;
                  queueSynKey(319, 0, _ev.class_type_ext);
                  return true;

               case MMT_GLOBAL_DISCARDCTL_COLLECT:
                  replay.setEnableDiscardCtlCollect(_ev.class_type_ext); // button up/down
                  return true;

               case MMT_GLOBAL_DISCARDCTL:
                  replay.setEnableDiscardCtl(_ev.class_type_ext); // button up/down
                  return true;

               case MMT_GLOBAL_RESENDLASTCTL:
                  replay.setEnableResendLastCtl(_ev.class_type_ext); // button up/down
                  return true;

               case MMT_GLOBAL_PUSHCTL:
                  togglePageCtlTagPush(maybe);
                  return true;

               case MMT_GLOBAL_PUSHCTL_UI:
                  togglePageCtlTagGlobalMidiMap();
                  return true;

               case MMT_GLOBAL_LEFT:
                  queueSynKeyForceKbdSelMode(VKEY_LEFT, 0, _ev.class_type_ext);
                  return true;

               case MMT_GLOBAL_UP:
                  queueSynKeyForceKbdSelMode(VKEY_UP, 0, _ev.class_type_ext);
                  return true;

               case MMT_GLOBAL_RIGHT:
                  queueSynKeyForceKbdSelMode(VKEY_RIGHT, 0, _ev.class_type_ext);
                  return true;

               case MMT_GLOBAL_DOWN:
                  queueSynKeyForceKbdSelMode(VKEY_DOWN, 0, _ev.class_type_ext);
                  return true;

               case MMT_GLOBAL_YES:
                  queueSynKey(VKEY_RETURN, 0, _ev.class_type_ext);
                  return true;

               case MMT_GLOBAL_NO:
                  queueSynKey(VKEY_ESCAPE, 0, _ev.class_type_ext);
                  return true;

               case MMT_GLOBAL_PAGE_PARENT:
                  if(tryDialogGlobalEvent(boundEv.bound_target.target_name))
                  {
                     return true;
                  }

                  showPageParent();
                  return true;

               case MMT_GLOBAL_PAGE_PREV:
                  if(tryDialogGlobalEvent(boundEv.bound_target.target_name))
                  {
                     return true;
                  }

                  showPagePrev();
                  return true;

               case MMT_GLOBAL_PAGE_NEXT:
                  if(tryDialogGlobalEvent(boundEv.bound_target.target_name))
                  {
                     return true;
                  }

                  showPageNext();
                  return true;

               case MMT_GLOBAL_VALUE:
               case MMT_GLOBAL_VALUE_DELTA:
                  handleGlobalValueByEvent(_ev, false/*bInv*/);
                  return true;

               case MMT_GLOBAL_VALUE_INV:
                  handleGlobalValueByEvent(_ev, true/*bInv*/);
                  return true;

               case MMT_GLOBAL_FOCUS:
               case MMT_GLOBAL_FOCUS_DELTA:
                  handleGlobalFocusByEvent(_ev, false/*bInv*/);
                  return true;

               case MMT_GLOBAL_FOCUS_INV:
                  handleGlobalFocusByEvent(_ev, true/*bInv*/);
                  return true;

               case MMT_GLOBAL_FOCUS_PREV:
                  handleGlobalFocusPrev();
                  return true;

               case MMT_GLOBAL_FOCUS_NEXT:
                  handleGlobalFocusNext();
                  return true;

               case MMT_MMC_FORCE_GLOBAL:
                  if(_ev.class_type_ext > 0)
                  {
                     // Press
                     mmcForceGlobalBegin();
                  }
                  else
                  {
                     // Release
                     mmcForceGlobalEnd();
                  }
                  return true;

               case MMT_SHOW_LAST_HEAD_MSG:
                  printLastHeadMessage();
                  return true;

                  // Global navigation:
               case MMT_NAV_PROJECT:
                  showPageNav(PAGE_PROJECT);
                  return true;

               case MMT_NAV_PROJECT_SUBSONGS:
                  showPageNav(PAGE_SUBSONGS);
                  return true;

               case MMT_NAV_CONFIG_PREFS:
                  showPageNav(PAGE_PREFS);
                  return true;

               case MMT_NAV_CONFIG_DEVICES:
                  showPageNav(PAGE_MIDIDEVS);
                  return true;

               case MMT_NAV_INPUT_SCENES:
                  pg_midimapper.showCurrentScene();
                  return true;

               case MMT_NAV_INPUT_GLOBAL:
                  pg_midimapper.showGlobalMidiMap();
                  return true;

               case MMT_NAV_MIDIMON:
                  showPageNav(PAGE_MIDIMON);
                  return true;

               case MMT_NAV_SYSEX:
                  showPageNav(PAGE_SYSEX);
                  return true;

               case MMT_NAV_PIPES:
                  showPageNav(PAGE_PIPEROOT);
                  return true;

               case MMT_NAV_PIPEMAP:
                  showPageNav(PAGE_PIPEMAP);
                  return true;

               case MMT_NAV_CURRENT_PIPE:
                  if(!isCurrentPageModal())
                  {
                     pg_piperoot.handleEditPipe(true/*bWarn*/);
                  }
                  return true;

               case MMT_NAV_CURRENT_NODE:
                  if(!isCurrentPageModal())
                  {
                     pg_piperoot.handleEditPipeNode();
                  }
                  return true;

               case MMT_NAV_NODE_PREV:
                  if(!isCurrentPageModal())
                  {
                     switch(getCurrentPageNr())
                     {
                        case PAGE_NODE:
                           pg_node.selectNodePrev();
                           break;

                        case PAGE_PIPEMAP:
                           pg_pipemap.selectPreviousPipeOrNode(true/*bAllowUpdatePrefX*/);
                           break;
                     }
                  }
                  return true;

               case MMT_NAV_NODE_NEXT:
                  if(!isCurrentPageModal())
                  {
                     switch(getCurrentPageNr())
                     {
                        case PAGE_NODE:
                           pg_node.selectNodeNext();
                           break;

                        case PAGE_PIPEMAP:
                           pg_pipemap.selectNextPipeOrNode(true/*bAllowUpdatePrefX*/);
                           break;
                     }
                  }
                  return true;

               case MMT_NAV_PIPE_PREV:
                  if(!isCurrentPageModal())
                  {
                     switch(getCurrentPageNr())
                     {
                        case PAGE_NODE:
                           pg_node.selectNodeUp();
                           break;

                        case PAGE_PIPEMAP:
                           pg_pipemap.selectPreviousNodeRowOrPipe();
                           break;
                     }
                  }
                  return true;

               case MMT_NAV_PIPE_NEXT:
                  if(!isCurrentPageModal())
                  {
                     switch(getCurrentPageNr())
                     {
                        case PAGE_NODE:
                           pg_node.selectNodeDown();
                           break;

                        case PAGE_PIPEMAP:
                           pg_pipemap.selectNextNodeRowOrPipe();
                           break;
                     }
                  }
                  return true;

               case MMT_PUSH_MODE:
                  push.selectNextMode();
                  return true;

               case MMT_PUSH_TOGGLE_KBD:
                  push.toggleKbdMode();
                  return true;

               case MMT_ATRK_REC_REPLACE:
                  SysEx.QueueAtrk(SysEx.SYX_MSGID_ATRK_REC_REPLACE);
                  return true;

               case MMT_ATRK_REC_APPEND:
                  SysEx.QueueAtrk(SysEx.SYX_MSGID_ATRK_REC_APPEND);
                  return true;

               case MMT_ATRK_REC_STOP_TRIM:
                  SysEx.QueueAtrk(SysEx.SYX_MSGID_ATRK_REC_STOP_TRIM);
                  return true;

               case MMT_ATRK_REC_STOP_TRIM_ADDSMP:
                  SysEx.QueueAtrk(SysEx.SYX_MSGID_ATRK_REC_STOP_TRIM_ADDSMP);
                  return true;

               case MMT_ATRK_REC_STOP_TRIM_ADDSMP_RESTART:
                  SysEx.QueueAtrk(SysEx.SYX_MSGID_ATRK_REC_STOP_TRIM_ADDSMP_RESTART);
                  return true;

               case MMT_ATRK_REC_STOP_TRIM_ADDMULTISMP:
                  SysEx.QueueAtrk(SysEx.SYX_MSGID_ATRK_REC_STOP_TRIM_ADDMULTISMP);
                  return true;

               case MMT_ATRK_REC_STOP_TRIM_ADDMULTISMP_RESTART:
                  SysEx.QueueAtrk(SysEx.SYX_MSGID_ATRK_REC_STOP_TRIM_ADDMULTISMP_RESTART);
                  return true;

               case MMT_ATRK_LIVEREC_CAPTURE:
                  SysEx.QueueAtrk(SysEx.SYX_MSGID_ATRK_LIVEREC_CAPTURE);
                  return true;

               case MMT_TOGGLE_METRONOME:
                  toggleMetronome();
                  if(PAGE_PREFS == getCurrentPageNr())
                  {
                     pg_prefs.updateMetronomeEnable();
                  }
                  return true;

               case MMT_LIVERECDLG_QUERY:
                  if(bLiveRecVisible)
                  {
                     f_audio_liverec.handleQuery();
                  }
                  return true;

               case MMT_LIVERECDLG_INSTANCE_PREV:
                  if(bLiveRecVisible)
                  {
                     f_audio_liverec.instancePrev();
                  }
                  return true;

               case MMT_LIVERECDLG_INSTANCE_NEXT:
                  if(bLiveRecVisible)
                  {
                     f_audio_liverec.instanceNext();
                  }
                  return true;

               case MMT_LIVERECDLG_SMP_PREV:
                  if(bLiveRecVisible)
                  {
                     f_audio_liverec.smpPrev();
                  }
                  return true;

               case MMT_LIVERECDLG_SMP_NEXT:
                  if(bLiveRecVisible)
                  {
                     f_audio_liverec.smpNext();
                  }
                  return true;

               case MMT_LIVERECDLG_SMP_CLEAR:
                  if(bLiveRecVisible)
                  {
                     f_audio_liverec.handleClear();
                  }
                  return true;

               case MMT_LIVERECDLG_SMP_REC:
                  if(bLiveRecVisible)
                  {
                     f_audio_liverec.handleRecord();
                  }
                  return true;
            }
         } // if boundEv

         return false;
      }
      else
      {
         return false;
      }
   }

   // <ui.png>
   public method showKbdFocusInfo() {

      Layer cfocus <= UI.GetKeyboardFocus();

      if(null != cfocus)
      {
         String idOrName = cfocus.layer_name;
         String fm;

         if(idOrName.isBlank())
         {
            // Dev fallback, each widget should have a name!
            fm = "Focus: "+cfocus.layer_id;
         }
         else
         {
            // Prefix widget type (bt, cb, tv, cm, tf, ..)
            fm = "Focus<"+(cfocus.layer_id.substring(0, cfocus.layer_id.indexOf("_", 0))) + ">: "+idOrName;
         }


         if(cfocus instanceof CheckBox)
         {
            CheckBox cb <= cfocus;
            fm.append(cb.isSelected() ? " (checked)" : " (unchecked)");
         }
         else if(cfocus instanceof ComboBox)
         {
            ComboBox cm <= cfocus;
            fm.append(" ("+cm.getSelectedOptionName()+")");
         }
         else if(cfocus instanceof TextField) // also FloatParam
         {
            TextField tf <= cfocus;
            fm.append(" ("+tf.getText()+")");
         }
         else if(cfocus instanceof TableView)
         {
            TableView tv <= cfocus;
            fm.append(" ("+(tv.getCursorRow()+1)+"/"+tv.getNumRows()+")");
         }
         else if(cfocus instanceof Label)
         {
            Label lb <= cfocus; // also Button

            if(cfocus.layer_name.isBlank())
            {
               String cap <= lb.getCaption();
               if(cap.isBlank())
               {
                  cap <= lb.getToolTipCaption();
               }
               fm.append(" ("+cap+")");
            }
         }
         else if(cfocus instanceof TabSwitch)
         {
            TabSwitch ts <= cfocus;
            fm.append(" ("+ts.getActiveViewCaption()+")");
         }

         fm.append(".");

         Global.Print(fm);
      }
   }

   // <ui_midi.png>
   protected method handleGlobalValueByEvent(MIDIMapEvent _ev, boolean _bInv) {
      MIDIMapContext pgMMC <= getCurrentPage();
      MMTListener mmtl <= pgMMC;

      if(CLASS_DELTA == _ev.class_type)
      {
         getCurrentPage().mmtHandleGlobalValueDelta(_ev.getDeltaValue());
      }
      else
      {
         float val = _ev.getNormalizedFloatValue();
         if(_bInv)
         {
            val = 1.0f - val;
         }
         getCurrentPage().mmtHandleGlobalValue(val);
      }
   }

   // <ui_midi.png>
   protected method handleGlobalFocusByEvent(MIDIMapEvent _ev, boolean _bInv) {
      MIDIMapContext pgMMC <= getCurrentPage();
      MMTListener mmtl <= pgMMC;

      if(!isDialogActive())
      {
         if(CLASS_DELTA == _ev.class_type)
         {
            getCurrentPage().mmtHandleFocusDelta(_ev.getDeltaValue());
         }
         else
         {
            float val = _ev.getNormalizedFloatValue();
            if(_bInv)
            {
               val = 1.0f - val;
            }
            getCurrentPage().mmtHandleFocus(val);
         }
      }
      else
      {
         // Redirect to dialog
         FloatingLayer *fl;
         foreach fl in UI.floating_layers
         {
            if(fl.isModal())
            {
               if(fl instanceof MMTListener)
               {
                  mmtl <= fl;

                  if(CLASS_DELTA == _ev.class_type)
                  {
                     mmtl.mmtHandleFocusDelta(_ev.getDeltaValue());
                  }
                  else
                  {
                     mmtl.mmtHandleFocus(_ev.getNormalizedFloatValue());
                  }
               }
            }
         }
      }

      showKbdFocusInfo();
   }

   // <ui_midi.png>
   public method handleGlobalFocusPrev() {
      MIDIMapContext pgMMC <= getCurrentPage();
      MMTListener mmtl <= pgMMC;

      if(!isDialogActive())
      {
         getCurrentPage().mmtHandleFocusDelta(-1);
      }
      else
      {
         // Redirect to dialog
         FloatingLayer *fl;
         foreach fl in UI.floating_layers
         {
            if(fl.isModal())
            {
               if(fl instanceof MMTListener)
               {
                  mmtl <= fl;

                  mmtl.mmtHandleFocusDelta(-1);
               }
            }
         }
      }

      showKbdFocusInfo();
   }

   // <ui_midi.png>
   public method handleGlobalFocusNext() {
      MIDIMapContext pgMMC <= getCurrentPage();
      MMTListener mmtl <= pgMMC;

      if(!isDialogActive())
      {
         getCurrentPage().mmtHandleFocusDelta(1);
      }
      else
      {
         // Redirect to dialog
         FloatingLayer *fl;
         foreach fl in UI.floating_layers
         {
            if(fl.isModal())
            {
               if(fl instanceof MMTListener)
               {
                  mmtl <= fl;

                  mmtl.mmtHandleFocusDelta(1);
               }
            }
         }
      }

      showKbdFocusInfo();
   }

   // <ui_kbd.png>
   public method queueSynKey(int _code, int _mod, boolean _bPressed) {
      local Key k;

      if(UI.b_key_swap_lalt_lmeta_mod) // macOS default
      {
         if(_mod & VMOD_LALT)
            _mod = (_mod & ~VMOD_LALT) | VMOD_LMETA;
      }

      k.mod = _mod;

      if(_bPressed)
      {
         k.pressed = _code;
      }
      else
      {
         k.released = _code;
      }

      // trace "xxx RootForm: queueSynKey: k="+k.name;
      syn_key_queue.add(#(deref k));

      Events.SendSynKey();
   }

   // <ui_kbd.png>
   public method queueSynKeyForceKbdSelMode(int _code, int _mod, boolean _bPressed) {

      Page pg <= getCurrentPage();

      if(pg.pageForceKbdFocusSelMode())
      {
         if(_bPressed)
         {
            if(0 == force_kbdfocusselmode_usecount++)
            {
               // UI.SetKbdFocusSelectionModeBehaviour(true);
               queueSynKey(319+1000/*temp hold*/, 0, true);
            }

            queueSynKey(_code, _mod, true);
         }
         else
         {
            queueSynKey(_code, _mod, false);

            if(0 == --force_kbdfocusselmode_usecount)
            {
               queueSynKey(319+1000, 0, false);
               // UI.SetKbdFocusSelectionModeBehaviour(STConfig.b_kbdfocusselectionmode_behaviour);
            }
         }
      }
      else
      {
         queueSynKey(_code, _mod, _bPressed);
      }
   }

   // <ui_kbd.png>
   public method queueSynKeyTyped(int _code, int _mod) {
      queueSynKey(_code, _mod, true);
      queueSynKey(_code, _mod, false);
   }

   // <ui_kbd.png>
   public method processSynKeyQueue() {
      Key *k;

      foreach k in syn_key_queue
      {
         // trace "xxx RootForm: processSynKeyQueue: k="+k.name;
         UI.OnKeyboard(k);
      }

      syn_key_queue.free();
   }

   // <ui_midi.png>
   public method tryDialogGlobalEvent(String _targetName) : boolean {

      FloatingLayer *fl;

      foreach fl in UI.floating_layers
      {
         if(fl.isModal())
         {
            if(fl instanceof MMTListener)
            {
               MMTListener mmtl <= fl;

               if(mmtl.mmtHandleGlobalEvent(_targetName))
               {
                  return true;
               }
            }
         }
      }

      return false;
   }

   // <ui.png>
   public method isDialogActive() : boolean {

      return (0 != UI.GetNumModalFloatingLayers());
   }

   // <ui_page.png>
   public method getCurrentPage() : Page {
      return sw_views.getChildByIdx(current_page);
   }

   // <ui_page.png>
   public method getCurrentPageMMC() : Page {
      if(b_mmc_force_ctltag_push)
         return pg_ctltag;
      else
         return getCurrentPage();
   }

   // <ui_page.png>
   public method getPageByIdx(int _idx) : Page {
      return sw_views.getChildByIdx(_idx);
   }

   // <ui_page.png>
   public method getCurrentPageNr() : int {
      return current_page;
   }

   // <ui_page.png>
   public method isCurrentPageModal() : boolean {
      if(0 == UI.GetNumModalFloatingLayers())
      {
         Page pg <= getCurrentPage();

         if(pg.pageIsModal())
         {
            Global.Print("Cannot change page, dialog sequence active.");

            return true;
         }
         else
         {
            return false;
         }
      }
      else
      {
         Global.Print("Cannot change page because of active dialog.");

         return true;
      }
   }

   // <ui_page.png>
   protected method getHistoryPage(int _idx) : int {
      if(_idx < 0)
         _idx += PAGE_HISTORY_SIZE;

      return page_history.get(_idx);
   }

   // <ui_page.png>
   protected method deleteHistoryPage(int _idx) {
      if(_idx < 0)
         _idx += PAGE_HISTORY_SIZE;
      else if(_idx >= PAGE_HISTORY_SIZE)
         _idx -= PAGE_HISTORY_SIZE;
      page_history.delete(_idx);

      if(page_history_idx >= _idx)
      {
         page_history_idx--;
         if(page_history_idx < 0)
            page_history_idx += page_history.numElements;
      }
   }

   // <method_get.png>
   public method isCurrentPageLocked() : boolean {
      Page pg <= getCurrentPage();

      return pg.isPageLocked();
   }

   // <ui_page.png>
   public method clearPageHistory() {
      // Called when PipeMap is shown (via pageEnter())
      page_history.empty();
      page_history.add(PAGE_PIPEMAP);
      page_history_idx = 0;
      page_subhistory.empty();
   }

   // <api.png>
   public method showPage(int _idx, boolean _bAllowHistory) {

      if(_idx == current_page)
         return;

      ta_replay_timer.schedule();

      // trace "xxx -----------------------------";
      Global.Debug("RootForm::showPage: idx="+_idx+" bAllowHistory="+_bAllowHistory);
      // trace "xxx beg showPage: history="+page_history.string;
      // trace "xxx beg showPage: history_idx="+page_history_idx;

      Page pg <= getCurrentPage();
      Page newPg <= getPageByIdx(_idx);

      if(null == newPg)
         return; // should not happen

      if(pg.pageIsSub())
      {
         // Returning from temporary page, don't return page to history, again.
         _bAllowHistory = false;
      }

      if(_bAllowHistory)
      {
         if(_idx != page_history.get(page_history_idx))
         {
            if(PAGE_HISTORY_SIZE == page_history.numElements)
               deleteHistoryPage(page_history_idx + PAGE_HISTORY_SIZE - 1);

            // Push new page onto stack
            page_history.insert(page_history_idx, _idx);
         }
      }

      if(newPg.pageIsSub())
      {
         // Leave temporarily, e.g. don't unset node ref. on PageNode so editing can continue
         pg.pageLeaveSub();
      }
      else
      {
         pg.pageLeave();
      }

      current_page = _idx;

      b_current_page_allow_history = _bAllowHistory;

      sw_views.switchToLayerNr(_idx);

      pg <= getCurrentPage();

      Global.PrintHead("Show page \""+pg.pageGetName()+"\".");

      pg.pageEnter();
      pg.pageFocusDefault();

      UI.RedrawAll();

      // trace "xxx end showPage: history="+page_history.string;
      // trace "xxx end showPage: history_idx="+page_history_idx;
   }

   // <ui_page.png>
   public method showPageSub(int _pageNr, boolean _bQuiet) {
      // must only be called for sub pages

      page_subhistory.add(current_page);

      Page pg <= getCurrentPage();

      pg.pageLeaveSub();

      current_page = _pageNr;

      sw_views.switchToLayerNr(_pageNr);

      pg <= getCurrentPage();

      if(!_bQuiet)
      {
         Global.PrintHead("Show sub-page \""+pg.pageGetName()+"\".");
      }

      pg.pageEnter();
      pg.pageFocusDefault();

      UI.RedrawAll();
   }

   // <ui_page.png>
   public method showPageSubPrev() : boolean {
      // Leave sub-page and return to previous page

      if(!isDialogActive())
      {
         if(page_subhistory.numElements > 0)
         {
            Page pg <= getCurrentPage();

            pg.pageLeave();

            current_page = page_subhistory.last;
            page_subhistory.numElements = page_subhistory.numElements - 1;

            sw_views.switchToLayerNr(current_page);

            pg <= getCurrentPage();

            Global.PrintHead("Return to page \""+pg.pageGetName()+"\".");

            pg.pageEnter();
            pg.pageFocusDefault();

            UI.RedrawAll();

            return true;
         }
         else
         {
            trace "[!!!] showPageSubPrev: internal error: sub history is empty";
         }
      }
      return false;
   }

   // <ui_page.png>
   public method showPageNav(int _pageNr) {
      if(!isCurrentPageModal())
      {
         showPage(_pageNr, true/*bAllowHistory*/);
      }
   }

   // <api.png>
   public method showPagePrev() {

      if(page_subhistory.numElements > 0)
      {
         return showPageSubPrev();
      }

      if(!isDialogActive())
      {
         // trace "xxx -----------------------------";
         // trace "xxx beg showPagePrev: history="+page_history.string;
         // trace "xxx beg showPagePrev: history_idx="+page_history_idx;

         int pgNr;

         if(b_current_page_allow_history)
         {
            // if( (page_history_idx + 1) < page_history.numElements )
            // {
            page_history_idx = (page_history_idx + 1) % page_history.numElements;
         }

         pgNr = page_history.get(page_history_idx);

         Page ppg <= sw_views.getChildByIdx(pgNr);

         if(null != ppg)
         {
            Page pg <= getCurrentPage();

            pg.pageLeave();

            current_page = pgNr;
            b_current_page_allow_history = true;

            sw_views.switchToLayerNr(pgNr);

            Global.PrintHead("Show previous page \""+ppg.pageGetName()+"\".");

            if(PAGE_NODE == current_page)
            {
               pg_piperoot.handleEditPipeNode();
            }
            else
            {
               ppg.pageEnter();
               ppg.pageFocusDefault();

               redraw();
            }

            // trace "xxx end showPagePrev: history="+page_history.string;
            // trace "xxx end showPagePrev: history_idx="+page_history_idx;
         }
      }
   }

   // <api.png>
   public method showPageNext() {

      if(!isCurrentPageModal())
      {
         // trace "xxx -----------------------------";
         // trace "xxx beg showPageNext: history="+page_history.string;
         // trace "xxx beg showPageNext: history_idx="+page_history_idx;

         page_history_idx--;
         if(page_history_idx < 0)
            page_history_idx += page_history.numElements;

         if(1)
         {
            int pgNr = page_history.get(page_history_idx);

            Page ppg <= sw_views.getChildByIdx(pgNr);

            if(null != ppg)
            {
               Page pg <= getCurrentPage();

               pg.pageLeave();

               current_page = pgNr;
               b_current_page_allow_history = true;

               sw_views.switchToLayerNr(pgNr);

               Global.PrintHead("Show next page \""+ppg.pageGetName()+"\".");

               ppg.pageEnter();
               ppg.pageFocusDefault();

               redraw();

               // trace "xxx end showPageNext: history="+page_history.string;
               // trace "xxx end showPageNext: history_idx="+page_history_idx;
            }
         }
      }
   }

   // <api.png>
   public method showPageParent() {

      Global.Debug("RootForm::showPageParent: page_subhistory="+#(page_subhistory));

      if(page_subhistory.numElements > 0)
      {
         return showPageSubPrev();
      }

      if(!isDialogActive())
      {
         Page pg <= getCurrentPage();

         int parIdx = pg.pageGetParent();

         // trace "xxx showPageParent: pg="+#(pg)+" parIdx="+parIdx;

         if(-1 != parIdx)
         {
            showPage(parIdx, true/*bAllowHistory*/);
         }
      }
   }

   // <api.png>
   public method showPageParentOrPrev() {

      if(-1 != ctltag_page_return_nr)
      {
         // ////showPage(ctltag_page_return_nr, false/*bAllowHistory*/);
         showPageSubPrev();
         ctltag_page_return_nr = -1;
         return;
      }

      if(!isDialogActive())
      {
         Page pg <= getCurrentPage();

         if(pg.pageIsSub())
         {
            root_form.showPageSubPrev();
         }
         else
         {
            int parIdx = pg.pageGetParent();

            if(-1 != parIdx)
            {
               showPage(parIdx, true/*bAllowHistory*/);
            }
            else
            {
               showPagePrev();
            }
         }
      }
   }

   // <ui_page.png>
   public method showPagePipeMap() {
      showPage(PAGE_PIPEMAP, false/*bAllowHistory*/);
   }

   // <ui_page.png>
   public method handlePageFocusDefault() {
      Page pg <= getCurrentPage();

      pg.pageFocusDefault();
   }

   // <api.png>
   public method selectScenePrev(int _groupIdx) {
      // (note) groupIdx=-1 ==> keep current group

      MIDIMorphScene.SelectScenePrev(_groupIdx);

      rootHandleSceneChanged(_groupIdx, true/*bOverlay*/);
   }

   // <api.png>
   public method selectSceneNext(int _groupIdx) {
      // (note) groupIdx=-1 ==> keep current group

      MIDIMorphScene.SelectSceneNext(_groupIdx);

      rootHandleSceneChanged(_groupIdx, true/*bOverlay*/);
   }

   // <api.png>
   public method selectSceneByIdx(int _groupIdx, int _sceneIdx) {
      // (note) groupIdx=-1 ==> keep current group

      MIDIMorphScene.SelectSceneByIdx(_groupIdx, _sceneIdx);

      rootHandleSceneChanged(_groupIdx, true/*bOverlay*/); // update push, ..
   }

   // <api.png>
   public method selectMultiSceneByDelta(int _delta) {
      selectMultiSceneByIdx(mathWrapi(MIDIMorphScene.last_selected_multi + _delta, 0, MIDIMorphScene.NUM_MULTIS));
   }

   // <api.png>
   public method selectMultiSceneByIdx(int _multiIdx) {

      // calls rootHandleSceneChanged()
      MIDIMorphScene.SelectMultiByIdx(_multiIdx);

      // Show overlay
      ta_scene_overlay.cancel();

      if(f_scene_overlay.isFloatingLayerVisible())
      {
         f_scene_overlay.hide();
      }

      f_scene_overlay.showMulti(_multiIdx);
      ta_scene_overlay.schedule();

      STX_MIDIOutDevice outDev <= MIDI.GetMIDIOutDeviceByAliasOrName(STConfig.midimorph_scene_selection_device_name);
      if(null != outDev)
      {
         replay.queueRPN(outDev.dev_idx,
                         STConfig.midimorph_scene_selection_device_ch,
                         Node.RPN_PRE_MULTISCENESELECT,
                         _multiIdx
                         );
      }
      else
      {
         trace "[~~~] warning: scene selection out device \""+STConfig.midimorph_scene_selection_device_name+"\" not found";
      }

      if(PAGE_EDITMIDIMORPHMULTI == current_page)
      {
         pg_editmidimorphmulti.handleActiveMultiChanged();
      }
   }

   // <ui_handle.png>
   namespace method rootHandleSceneChanged(int _groupIdx, boolean _bOverlay) {
      Page pg <= getCurrentPage();

      if(_groupIdx < 0)
         _groupIdx = MIDIMorphScene.GetCGrp();

      pg.pageSceneChanged(_groupIdx, !_bOverlay/*bMulti*/);

      // if(!pg.pageSceneChanged())
      if(_bOverlay)
      {
         // Show overlay
         ta_scene_overlay.cancel();

         if(f_scene_overlay.isFloatingLayerVisible())
         {
            f_scene_overlay.hide();
         }

         f_scene_overlay.showScene(_groupIdx);

         ta_scene_overlay.schedule();
      }

      // Queue SCENESELECT notification (RPN)
      STX_MIDIOutDevice outDev <= MIDI.GetMIDIOutDeviceByAliasOrName(STConfig.midimorph_scene_selection_device_name);
      // trace "xxx handleSceneChanged: rpn outDev="+#(outDev);
      if(null != outDev)
      {
         replay.queueRPN(outDev.dev_idx,
                         STConfig.midimorph_scene_selection_device_ch,
                         Node.RPN_PRE_SCENESELECT_A + _groupIdx,
                         MIDIMorphScene.GetCurrentSceneIdx(_groupIdx)
                         );
      }
      else
      {
         trace "[~~~] warning: scene selection out device \""+STConfig.midimorph_scene_selection_device_name+"\" not found";
      }

      // Queue SCENETARGET notification (RPN)
      //  (note) this can be used by e.g. script nodes to change their I/O port(s) (e.g. octave transpose script)
      MIDIMorphScene mms <= MIDIMorphScene.GetCurrentScene(_groupIdx);
      if(null != mms)
      {
         MIDIMapEvent mev <= mms.mms_entries.get(0);
         if(null != mev)
         {
            if(null != mev.morph_target)
            {
               mev <= mev.morph_target;
               if(null != mev.dev)
               {
                  replay.queueRPN(mev.dev.dev_idx,
                                  mev.dev_ch,
                                  Node.RPN_PRE_SCENETARGET_A + _groupIdx,
                                  MIDIMorphScene.GetCurrentSceneIdx(_groupIdx)
                                  );
               }
            }
         }
      }
   }

   // <ui_update.png>
   public method showBPM() {
      handleTimeClicked(false/*bTap*/); // Force show BPM
      updateReplayTimeLabel(true/*bForceUpdate*/);
   }

   // <ui_update.png>
   public method updateReplayTimeLabel(boolean _bForceUpdate) {
      int ms;

      if(replay.b_playing)
      {
         // Measure actual replay time
         ms = milliSeconds();
         ms = ms - replay.time_replaystart;
      }
      else
      {
         // Approximate using song position
         //  (note) 29Feb2016: do NOT synchronize to =replay=  some deadlock still lurking here (e.g. when sending long sysex)
         //          (thought this was fixed, maybe it is and I misread the VS debug thread callstacks ?!!??)
         //          (occurs with both Windows generic USB MIDI and patched Korg USB MIDI driver)
         // // int songTicks = current_song.getSongOffset();
         int songTicks = current_song.song_offset;

         // (note) BPM is normalized to 4/4 measure, regardless of actual project time signature
         // (note) also see PageProject::getBarDurationString()
         ms = 1000 * 60 * ((songTicks / current_song.ppq) / current_song.bpm);
      }

      updateReplayTimeLabelTo(ms, _bForceUpdate);
   }

   // <method.png>
   public static GetSongPosString(int songTicks) {
      int numTicksPerNote = current_song.ppq * 4;
      float numTicksPerBeat = (numTicksPerNote / float(current_song.sig_notelen));
      float numTicksPerBar = numTicksPerBeat * current_song.sig_beats;
      Integer ioBar   = 1 + int(songTicks / numTicksPerBar);
      Integer ioBeat  = 1 + (int(songTicks / numTicksPerBeat) % current_song.sig_beats);
      Integer ioTick  = 1 + int((10*songTicks) % (10*numTicksPerBeat)) / 10;

      return
         ioBar.printf("%03d-") + ioBeat.printf("%02d-") + ioTick.printf("%03d");
   }

   // <method.png>
   public static GetSongMarkerString(int beatsOrBars) {
      int numTicksPerNote = current_song.ppq * 4;
      float numTicksPerBeat = (numTicksPerNote / float(current_song.sig_notelen));
      float numTicksPerBar = numTicksPerBeat * current_song.sig_beats;

      return GetSongPosString(
         (beatsOrBars < 0) ? (-beatsOrBars * numTicksPerBeat) : (beatsOrBars * numTicksPerBar)
                              );
   }

   // <ui_update.png>
   public method updateReplayTimeLabelTo(int ms, boolean _bForceUpdate) {

      // (note) time label shows time while replay is running and BPM when it's not
      Label *lb;

      // trace "xxx RootForm::updateReplayTimeLabel: songOff="+current_song.song_offset+" songEnd="+current_song.current_end_offset;

      // SongPos
      int songTicks = current_song.getSongOffset();

      if((songTicks != last_replaytimelabel_songticks) || b_force_show_bpm || _bForceUpdate)
      {
         last_replaytimelabel_songticks = songTicks;

         int numTicksPerNote = current_song.ppq * 4;
         float numTicksPerBeat = (numTicksPerNote / float(current_song.sig_notelen));
         float numTicksPerBar = numTicksPerBeat * current_song.sig_beats;

         // trace "xxx songTicks="+songTicks+" numTicksPerBeat="+numTicksPerBeat+" ioTick="+(songTicks % numTicksPerBeat);

         float beatAnim = 1.0f - 0.1 * ((int(10*songTicks) % int(10*numTicksPerBeat)) / numTicksPerBeat);
         int lbTint;

         if(replay.b_playing)
         {
            lbTint = app_lnf.getColor(AppLookAndFeel.COLOR_STATUSBAR_TIMELABEL_TINT);
            lbTint = lbTint | (int(beatAnim * app_lnf.statusbar_timelabel_tint_alpha_scl) << 24);
         }
         else
         {
            lbTint = 0;
         }

         lb <= bt_songpos;

         lb.setCaption(GetSongPosString(songTicks));
         lb.setBackgroundTint(lbTint);
         lb.redraw();

         // Show time or BPM
         lb <= bt_time;

         // trace "xxx updateReplayTimeLabel: b_force_show_bpm="+b_force_show_bpm;

         if(replay.b_playing && !b_force_show_bpm)
         {
            // Time
            Integer ioMin = (ms/(60*1000)) %60;
            Integer ioSec = (ms/1000) % 60;
            Integer ioDec = (ms/10) % 100;

            lb.setCaption( ioMin.printf("%02d:") + ioSec.printf("%02d")  + ioDec.printf(".%02d") );
            // // lb.setTint(lbTint);
            lb.redraw();
         }
         else
         {
            // Show BPM
            Float fo = current_song.bpm;

            lb.setCaption(fo.printf("%3.2f"));
            lb.redraw();
         }
      }
   }

   // <ui_update.png>
   public method updateShowControllerStatusWindow() {
      // pmcb_track_showctlstatus.setSelected(STConfig.b_ctlstatus_view);
   }

   // <ui_update.png>
   public method updateAudioEditMetronome(boolean _bEnabled) {
      // cb_editmetro.setSelected(_bEnabled);
   }

   // <log.png>
   public method isLastStatusMessageOlderThan(int _ms) : boolean {
      return ((milliSeconds() - last_status_message_ms) > _ms);
   }

   // <log.png>
   public method pushStatusMessage(String  _msg,
                                   int     _millisec,
                                   int     _fg,
                                   int     _bg,
                                   boolean _bHead
                                   ) {
      last_status_message_ms = milliSeconds();
      sb_status.pushMessage(_msg, _millisec, _fg, _bg, _bHead);
   }

   // <log.png>
   public method endStatusMessageLock() {
      sb_status.endMessageLock();
   }

   // <log.png>
   public method printLastHeadMessage() {
      sb_status.repushLastHeadMessage();
   }

   // <ui_handle.png>
   public method handleInitNewSong() {

      updateSongWidgets();

      // updateSongLengthWidgets();

      updateReplayTimeLabelTo(0, false/*bForceUpdate*/);

      // fp_stepresolution.setValue(STConfig.DEFAULT_ZOOM);
   }

   // <ui_update.png>
   public method updateSongWidgets() {
      // trace "xxx updateSongWidgets: masterlevel="+current_song.getMasterLevel();
      fp_bpm.setValue(current_song.getBPM());
   }

   // <exit.png>
   public method beginExit() {

      //if(STConfig.b_enable_vst)
      if(false)
      {
         // (note) obsolete code

         // Hack to fix some issue with certain VST plugins (e.g. TAL reverb) causing the UI to freeze
         //  when actively waiting for the VST window to be closed
         //  (it only does that when the tracker main window message loop is running)
         // (todo) think about a cleaner solution (done?!!)
         // (todo) this is probably obsolete by now
         ta_exit <= TimerAction.New(TA_EXIT, this, 30);
         ta_exit.schedule();
      }
      else
      {
         // Quit main message loop
         UI.Stop();
      }
   }

   // <replay.png>
   public method handleStartPlaying() {
      // Called from replay thread

      ta_replaytime.cancel();
      ta_replaytime.scheduleShort();

      b_force_show_bpm = false;

      // Iterate all nodes and call handleStartRecording() if the node is armed for recording
      //  (e.g. so an undo transaction can be started)
      //  (note) when the node editor is currently visible, recording is started via handleStartPlaying()
      int pipeUsedIdx = 0;
      loop(current_pipe_root.numPipes)
      {
         MIDIPipe pipe <= current_pipe_root.getPipeByUsedIdx(pipeUsedIdx);

         int nodeIdx = 0;
         loop(pipe.numNodes)
         {
            MIDIPipeNodeScriptProxy nsp <= pipe.getNodeByIdx(nodeIdx);

            if(nsp instanceof MIDIPipeNodeScriptProxy)
            {
               Node node <= nsp.sci;

               if(!node.nodeIsEditorVisible())
               {
                  if(node.nodeIsArmedForRecording())
                  {
                     node.nodeHandleStartRecording();
                  }
               }

               node.nodeHandleStartPlaying();
            }
            nodeIdx++;
         }

         pipeUsedIdx++;
      }

      if(PAGE_NODE == current_page)
      {
         if(null != pg_node.editor)
         {
            pg_node.editor.handleStartPlaying();
         }
      }

      pg_ctltag.revertToResetVals();

      if(UI.PreferMonoIcons())
      {
         bt_transport_play.setIcon(UI.GetIcon("stop_mono"));
      }
      else
      {
         bt_transport_play.setIcon(UI.GetIcon("stop_sm_gray"));
      }
      bt_transport_play.redraw();

      queueRedrawAll();
      PagePipeMap.b_pattern_changed = true;  // queue patnr update (PipeMap::scheduleUpdateMapState())

      // Notify audio process (when connected)
      SysEx.QueueSendSeqStart();
   }

   // <replay.png>
   public method handleStopPlaying(boolean _bAllowBookmark) {
      // Called by UI thread while =replay= is locked
      ta_replaytime.cancel();
      ta_replaytime.scheduleLong();

      updateReplayTimeLabel(false/*bForceUpdate*/);

      queueRedrawAll();

      if(PAGE_NODE == current_page)
      {
         if(null != pg_node.editor)
         {
            // trace "xxx call editor.handleStopPlaying: bAllowBookmark="+_bAllowBookmark;
            pg_node.editor.handleStopPlaying(_bAllowBookmark);
         }
      }

      // Iterate all nodes and call handleStopPlaying() if the node is currently recording
      //  (e.g. so an undo transaction can be finished)
      int pipeUsedIdx = 0;
      loop(current_pipe_root.numPipes)
      {
         MIDIPipe pipe <= current_pipe_root.getPipeByUsedIdx(pipeUsedIdx);

         int nodeIdx = 0;
         loop(pipe.numNodes)
         {
            MIDIPipeNodeScriptProxy nsp <= pipe.getNodeByIdx(nodeIdx);

            if(nsp instanceof MIDIPipeNodeScriptProxy)
            {
               Node node <= nsp.sci;

               if(node.nodeIsRTRecordActive())
               {
                  // trace "xxx call handleStopPlaying";
                  node.nodeHandleStopRecording();
               }

               node.nodeHandleStopPlaying();
            }
            nodeIdx++;
         }

         pipeUsedIdx++;
      }

      bt_transport_play.setIcon(UI.GetIcon(UI.PreferMonoIcons() ? "transport_play_mono" : "transport_play"));
      bt_transport_play.redraw();

      if(null != dlg_audio_liverec && dlg_audio_liverec.isFloatingLayerVisible())
      {
         dlg_audio_liverec.handleStopPlaying();
      }

      // Notify audio process (when connected)
      SysEx.QueueSendSeqStop();
   }

   // <method_handle.png>
   public method handleSongPosSelected() {
      // called from UI thread while =replay= is locked

      if(STConfig.b_midi_send_songpos) // true or maybe
      {
         replay.sendCurrentSongPos();
      }

      if(PAGE_NODE == current_page)
      {
         if(null != pg_node.editor)
         {
            pg_node.editor.handleSongPosSelected();
         }
         pg_node.updatePipeNodeLabel(); // last_pattern_start_editor_song_offset might have changed
      }
   }

   // <ui_render.png>
   public method queueRedrawAll() {
      // Calls renderAndRedrawAll() when timer expires
      ta_redraw_all.scheduleShort();
   }

   // <ui_handle.png>
   public method handleBPMChanged(boolean _bRefocusDefault) {
      float bpm = fp_bpm.getFloatValue();
      current_song.setBPM(bpm);

      handleTimeClicked(false/*bTap*/); // Force show BPM
      root_form.updateReplayTimeLabel(false/*bForceUpdate*/);

      Global.Print("BPM is "+bpm+". "+PageProject.GetBarDurationString());

      MIDI.RestartMIDITimer();  // (note) UpdateMIDITimer() causes lags
      Events.SendBPMChanged();

      if(_bRefocusDefault)
      {
         Global.RefocusDefault();
      }
   }

   // <method.png>
   public method updatePipePages() {
      int cPageNr = current_page;
      showPage(PAGE_PIPEROOT, false/*bAllowHistory*/);
      pg_piperoot.handleEditPipe(false/*bWarn*/); // if any, selects first available node
      showPage(cPageNr, false/*bAllowHistory*/);
   }

   // <ui_timer.png>
   protected method handleExitTimerExpired() {
      UI.Stop();
   }

   // <api.png>
   public method pageEditMMC() {

      // trace "xxx pageEditMMC";

      if(!isDialogActive())
      {
         Page pg <= getCurrentPage();

         if(pg instanceof MIDIMapContext)
         {
            MIDIMapContext mmcEdit <= pg;

            // Get proxy MMC  (e.g. PageNode -> NodeEditor)
            if(null != mmcEdit.mmcProxyGet())
            {
               mmcEdit <= mmcEdit.mmcProxyGet();

               // Is alternative editor map context active ?
               MIDIMapContext mmcEdit2 <= mmcEdit.mmcProxyGet();
               if(null != mmcEdit2)
               {
                  mmcEdit <= mmcEdit2;
               }
            }

            pg_editmidimap.showMMC(mmcEdit, current_page, STConfig.b_midimap_automovecursor, false/*bGlobal*/);
            ////showPage(PAGE_EDITMIDIMAP, false/*bAllowHistory*/);
            showPageSub(PAGE_EDITMIDIMAP, false/*bQuiet*/);
         }
         else
         {
            Global.Debug("RootForm::pageEditMMC: page does not support MMC");
         }
      }
   }

   // <method.png>
   public method togglePageCtlTagGlobalMidiMap() {

      if(!isDialogActive())
      {
         if(!isCurrentPageModal())
         {
            if(b_mmc_force_ctltag_push)
            {
               return togglePageCtlTagPush(false);
            }

            if(PAGE_EDITMIDIMORPH != current_page)
            {
               if(PAGE_CTLTAG != current_page)
               {
                  ctltag_page_return_nr = current_page;
                  showPageSub(PAGE_CTLTAG, false/*bQuiet*/);

                  ta_pagectltag.schedule();
               }
               else
               {
                  if(ta_pagectltag.isScheduled())
                  {
                     ta_pagectltag.cancel();
                     pg_midimapper.showCurrentScene();
                  }
                  else
                  {
                     showPageParentOrPrev(); // return to ctltag_page_return_nr
                  }
               }
            }
            else
            {
               showPageParentOrPrev(); // return to ctltag_page_return_nr
            }
         }
      }
   }

   // <method.png>
   public method togglePageCtlTagPush(boolean _bForce) {

      if(!isDialogActive())
      {
         if(!isCurrentPageModal())
         {
            if(PAGE_CTLTAG != current_page)
            {
               if(b_mmc_force_ctltag_push || !b_mmc_force_global)
               {
                  pg_ctltag.togglePushCtlMode(_bForce);
               }

               // // if(!b_mmc_force_ctltag_push)
               // // {
               // //    Page pg <= getCurrentPage();
               // //    pg.pagePushColorizePads();
               // // }
            }
            else
            {
               togglePageCtlTagGlobalMidiMap();
            }
         }
      }
   }

   // <method.png>
   public method transportCycle(boolean _bEnable) {

      boolean bCycle = (maybe == _bEnable) /* toggle ? */
         ? (false == replay.b_cycle) ? true : (maybe == replay.b_cycle) ? false : maybe
         : _bEnable
         ;

      replay.setCycle(bCycle, (maybe != _bEnable)/*bQuiet*/);

      bt_transport_cycle.setIcon(UI.GetIcon(
                                    (true == replay.b_cycle)
                                    ? "transport_cycle_active"
                                    : (maybe == replay.b_cycle) ? "transport_cycle_mixed"
                                    : "transport_cycle_inactive"
                                            )
                                 );

      bt_transport_cycle.redraw();

      if(maybe == _bEnable)
      {
         Global.Print("Cycle is "+((true == replay.b_cycle) ? "enabled (LOOP)" : (maybe == replay.b_cycle) ? "enabled (MUTE notes at end of loop)" : "disabled"));
      }
   }

   // <ui_show.png>
   protected method showTransportCycleMenu(boolean _bFocusFirst) {

      pm_transport_cycle <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_transport_cycle;
      int c32CurTint = UI.IsDarkOrMono() ? #18ffffff : #18000000;
      int cycleLen = current_song.cycle_length;  // <0: beats  >0: bars
      int cycleLenBars;
      if(cycleLen < 0)
      {
         cycleLenBars = (-cycleLen / current_song.sig_beats);
         if(-cycleLen != (cycleLenBars * current_song.sig_beats))
            cycleLenBars = -1;
      }
      else
         cycleLenBars = cycleLen;
      PopupMenuButton pmbFocus <= null;

      pmb <= pm.addDefaultButton("Loop 16 bars", "loop_16");
      pmb.setFontByName("big8");
      if(16 == cycleLenBars)
      {
         pmb.setBackgroundTint(c32CurTint);
         pmbFocus <= pmb;
      }

      pmb <= pm.addDefaultButton("Loop 12 bars", "loop_12");
      pmb.setFontByName("big8");
      if(12 == cycleLenBars)
      {
         pmb.setBackgroundTint(c32CurTint);
         pmbFocus <= pmb;
      }

      pmb <= pm.addDefaultButton("Loop 8 bars", "loop_8");
      pmb.setFontByName("big8");
      if(8 == cycleLenBars)
      {
         pmb.setBackgroundTint(c32CurTint);
         pmbFocus <= pmb;
      }

      pmb <= pm.addDefaultButton("Loop 6 bars", "loop_6");
      pmb.setFontByName("big8");
      if(6 == cycleLenBars)
      {
         pmb.setBackgroundTint(c32CurTint);
         pmbFocus <= pmb;
      }

      pmb <= pm.addDefaultButton("Loop 4 bars", "loop_4");
      pmb.setFontByName("big8");
      if(4 == cycleLenBars)
      {
         pmb.setBackgroundTint(c32CurTint);
         pmbFocus <= pmb;
      }

      pmb <= pm.addDefaultButton("Loop 2 bars", "loop_2");
      pmb.setFontByName("big8");
      if(2 == cycleLenBars)
      {
         pmb.setBackgroundTint(c32CurTint);
         pmbFocus <= pmb;
      }

      pmb <= pm.addDefaultButton("Loop 1 bar", "loop_1");
      pmb.setFontByName("big8");
      if(1 == cycleLenBars)
      {
         pmb.setBackgroundTint(c32CurTint);
         pmbFocus <= pmb;
      }

      pmb <= pm.addDefaultButton("Loop 2 beats", "loop_-2");
      pmb.setFontByName("big8");
      if(-2 == cycleLen)
      {
         pmb.setBackgroundTint(c32CurTint);
         pmbFocus <= pmb;
      }

      pmb <= pm.addDefaultButton("Loop 1 beat", "loop_-1");
      pmb.setFontByName("big8");
      if(-1 == cycleLen)
      {
         pmb.setBackgroundTint(c32CurTint);
         pmbFocus <= pmb;
      }

      pm.resizeToMinimum();
      pm.showAboveLayer(bt_transport_cycle);
      if(_bFocusFirst)
      {
         if(null != pmbFocus)
            UI.SetKeyboardFocus(pmbFocus);
         else
            pm.focusNextMenuItem();
      }

      Global.Print("Show cycle length menu.");
   }

   // <method.png>
   public method setCycleLength(int _numBeatsOrBars) {

      current_song.setCycleLength(_numBeatsOrBars);

      int num;

      if(_numBeatsOrBars < 0)
      {
         num = -_numBeatsOrBars;

         Global.Print("Cycle length set to "+num+" beat"+(num>1?"s.":"."));
      }
      else
      {
         num = _numBeatsOrBars;

         Global.Print("Cycle length set to "+num+" bar"+(num>1?"s.":"."));
      }
   }

   // <method.png>
   public method transportCycleLengthInc() {

      if(current_song.cycle_length <  0)
      {
         // Inc #beats
         setCycleLength(current_song.cycle_length - 1);
      }
      else
      {
         // Inc #bars
         setCycleLength(current_song.cycle_length + 1);
      }
   }

   // <method.png>
   public method transportCycleLengthDec() {

      if(current_song.cycle_length <  0)
      {
         // Dec #beats
         if(current_song.cycle_length < -1)
         {
            setCycleLength(current_song.cycle_length + 1);
         }
      }
      else
      {
         // Inc #bars
         if(current_song.cycle_length > 1)
         {
            setCycleLength(current_song.cycle_length - 1);
         }
      }
   }

   // <method.png>
   public method transportCycleLengthDelta(int _delta) {
      if(_delta < 0)
      {
         loop(-_delta)
         {
            transportCycleLengthDec();
         }
      }
      else if(_delta > 0)
      {
         loop(_delta)
         {
            transportCycleLengthInc();
         }
      }
   }


   // <ui_show.png>
   protected method showTransportMarkersLoadMenu() {

      pm_transport_markers <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_transport_markers;

      int nr = ST_Song.NUM_MARKERS;

      loop(ST_Song.NUM_MARKERS)
      {
         pmb <= pm.addDefaultButton(
            "Load marker "+nr,
            "load_"+nr
                                    );

         pmb.setEnableHold(true);
         pmb.setProvidedActionAlias(PopupMenuButton.ACTION_HOLD_CLICK, "rename_"+nr);

         String t = "["+GetSongMarkerString(current_song.getSongMarker(nr - 1))+"]";
         String lb <= current_song.getSongMarkerLabel(nr - 1);

         if(!lb.isBlank())
         {
            t.append(" : ");
            t.append(lb);
         }

         pmb.setAccelerators( // fake accel string
            t,
            null
                             );
         // // pmb.b_accel_align_left = true;
         pmb.setFontByName("big8");
         nr--;
      }

      // Load scratch
      pmb <= pm.addDefaultButton(
         "Load scratch",
         "load_-1"
                                 );
      pmb.setAccelerators( // fake accel string
         null,
         "["+GetSongMarkerString(current_song.getSongMarker(-1))+"]"
                           );
      // // pmb.b_accel_align_left = true;
      pmb.setFontByName("big8");

      pm.resizeToMinimum();
      pm.showAboveLayer(bt_transport_markers);

      Global.Print("Show load markers menu.");
   }

   // <ui_show.png>
   protected method showTransportMarkersSaveMenu() {

      pm_transport_markers <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_transport_markers;

      int nr = ST_Song.NUM_MARKERS;

      loop(ST_Song.NUM_MARKERS)
      {
         pmb <= pm.addDefaultButton("Save marker "+nr, "save_"+nr);
         pmb.setFontByName("big8");

         pmb.setEnableHold(true);
         pmb.setProvidedActionAlias(PopupMenuButton.ACTION_HOLD_CLICK, "rename_"+nr);

         String t = "["+GetSongMarkerString(current_song.getSongMarker(nr - 1))+"]";

         String lb <= current_song.getSongMarkerLabel(nr - 1);

         if(!lb.isBlank())
         {
            t.append(" : ");
            t.append(lb);
         }

         pmb.setAccelerators( // fake accel string
            t,
            null
                             );
         pmb.b_accel_align_left = true;

         nr--;
      }

      // Save scratch
      pmb <= pm.addDefaultButton("Save scratch", "save_-1");
      pmb.setFontByName("big8");

      pm.resizeToMinimum();

      pm.showAboveLayer(bt_transport_markers);

      Global.Print("Show save markers menu.");
   }

   // <ui_handle.png>
   protected method handleBeginRenameMarker(int _idx) {

      if(_idx >= 0)
      {
         if(null == dlg_rename_marker)
         {
            rename_marker_idx = _idx;

            dlg_rename_marker <= TextInputDialog.New("Enter marker label",
                                                     " Enter new marker label",
                                                     "Rename", "Cancel",
                                                     current_song.getSongMarkerLabel(_idx),
                                                     16, 16,
                                                     this
                                                     );

            dlg_rename_marker.setButtonFontByName("big3");
            dlg_rename_marker.setMessageFontByName("big5");
            dlg_rename_marker.setTextFontByName("big4");
            dlg_rename_marker.setButtonIcons(null/*UI.GetIcon("add")*/, UI.GetIcon("cancel"));
            dlg_rename_marker.invalidateSizeCaches();
            dlg_rename_marker.resizeToMinimum();
            dlg_rename_marker.showCentered();
         }
      }
   }

   // <ui_handle.png>
   protected method handleFinishRenameMarker(String _name) {

      current_song.setSongMarkerLabel(rename_marker_idx, _name);

      Global.Print("Marker#"+(rename_marker_idx+1)+" name is \""+_name+"\".");

      dlg_rename_marker <= null;
   }

   // <method.png>
   public method bpmInc(boolean _bDouble) {
      float bpm;

      if(_bDouble)
      {
         bpm = current_song.bpm * 2;

         if(bpm > 500)
         {
            return;
         }
      }
      else
      {
         bpm = current_song.bpm + bpm_key_speed_tbl[bpm_key_speed_idx];

         if(bpm > 500)
         {
            bpm = 500;
         }
         else
         {
            bpm = int(bpm*20)/20.0;
         }

         bpm_key_speed_idx++;
         if(bpm_key_speed_idx >= bpm_key_speed_tbl.numElements)
            bpm_key_speed_idx = bpm_key_speed_tbl.numElements - 1;
      }

      current_song.setBPM(bpm);

      fp_bpm.setValue(bpm);

      handleTimeClicked(false/*bTap*/); // Force show BPM

      updateReplayTimeLabel(false/*bForceUpdate*/);

      Global.Print("BPM set to "+bpm+". "+PageProject.GetBarDurationString());

      MIDI.RestartMIDITimer();  // (note) UpdateMIDITimer() causes lags
      Events.SendBPMChanged();
   }

   // <method.png>
   public method bpmDec(boolean _bHalf) {
      float bpm;

      if(_bHalf)
      {
         bpm = current_song.bpm / 2;

         if(bpm < 1)
         {
            return;
         }
      }
      else
      {
         bpm = current_song.bpm - bpm_key_speed_tbl[bpm_key_speed_idx];

         if(bpm < 1)
         {
            bpm = 1.0;
         }
         else
         {
            bpm = int(bpm*20)/20.0;
         }

         bpm_key_speed_idx++;
         if(bpm_key_speed_idx >= bpm_key_speed_tbl.numElements)
            bpm_key_speed_idx = bpm_key_speed_tbl.numElements - 1;
      }

      current_song.setBPM(bpm);

      fp_bpm.setValue(bpm);

      handleTimeClicked(false/*bTap*/); // Force show BPM

      updateReplayTimeLabel(false/*bForceUpdate*/);

      Global.Print("BPM set to "+bpm+". "+PageProject.GetBarDurationString());

      MIDI.RestartMIDITimer();  // (note) UpdateMIDITimer() causes lags
      Events.SendBPMChanged();
   }

   // <method.png>
   public method transportStart() {
      current_song.seek(0);
      updateReplayTimeLabel(false/*bForceUpdate*/);

      Global.Print("Go to position "+bt_songpos.getCaption()+".");
   }

   // <method.png>
   public method transportPrevMarker() {
      last_marker_idx = current_song.seekToPrevMarker();
      if(last_marker_idx >= 0)
         last_loaded_marker_idx = last_marker_idx;
      replay.updateCycleStart();
      updateReplayTimeLabel(false/*bForceUpdate*/);

      Global.Print("Go to position "+bt_songpos.getCaption()+".");
   }

   // <method.png>
   public method transportNextMarker() {
      last_marker_idx = current_song.seekToNextMarker();
      if(last_marker_idx >= 0)
         last_loaded_marker_idx = last_marker_idx;
      replay.updateCycleStart();
      updateReplayTimeLabel(false/*bForceUpdate*/);

      Global.Print("Go to position "+bt_songpos.getCaption()+".");
   }

   // <method.png>
   public method transportMarkerDelta(int _delta) {
      if(_delta < 0)
      {
         loop(-_delta)
         {
            transportPrevMarker();
         }
      }
      else if(_delta > 0)
      {
         loop(_delta)
         {
            transportNextMarker();
         }
      }
   }

   // <method.png>
   public method saveSongMarker(int _idx) {
      current_song.saveSongMarker(_idx);
      last_marker_idx = _idx;
      last_loaded_marker_idx = last_marker_idx;
   }

   // <method.png>
   public method loadSongMarker(int _idx) {
      current_song.loadSongMarker(_idx);
      last_marker_idx = _idx;
      last_loaded_marker_idx = _idx;
      updateReplayTimeLabel(false/*bForceUpdate*/);
   }

   // <method.png>
   public method transportLastLoadedMarker() {
      Global.Debug("transportLastLoadedMarker: last_marker_idx="+last_marker_idx);
      loadSongMarker(last_loaded_marker_idx);
   }

   // <method.png>
   public method transportPrevBeat() {
      last_marker_idx = current_song.seekToPrevBeat();
      replay.updateCycleStart();
      updateReplayTimeLabel(false/*bForceUpdate*/);

      Global.Print("Go to position "+bt_songpos.getCaption()+".");
   }

   // <method.png>
   public method transportNextBeat() {
      last_marker_idx = current_song.seekToNextBeat();
      replay.updateCycleStart();
      updateReplayTimeLabel(false/*bForceUpdate*/);


      Global.Print("Go to position "+bt_songpos.getCaption()+".");
   }

   // <method.png>
   public method transportBeatDelta(int _delta) {
      if(_delta < 0)
      {
         loop(-_delta)
         {
            transportPrevBeat();
         }
      }
      else if(_delta > 0)
      {
         loop(_delta)
         {
            transportNextBeat();
         }
      }
   }

   // <method.png>
   public method transportPrevBar() {
      last_marker_idx = current_song.seekToPrevBar();
      replay.updateCycleStart();
      updateReplayTimeLabel(false/*bForceUpdate*/);

      Global.Print("Go to position "+bt_songpos.getCaption()+".");
   }

   // <method.png>
   public method transportNextBar() {
      last_marker_idx = current_song.seekToNextBar();
      replay.updateCycleStart();
      updateReplayTimeLabel(false/*bForceUpdate*/);

      Global.Print("Go to position "+bt_songpos.getCaption()+".");
   }

   // <method.png>
   public method transportBarDelta(int _delta) {
      if(_delta < 0)
      {
         loop(-_delta)
         {
            transportPrevBar();
         }
      }
      else if(_delta > 0)
      {
         loop(_delta)
         {
            transportNextBar();
         }
      }
   }

   // <method.png>
   public =replay= method transportPreviousArrangerClipStart() {
      if(@(pg_node) == @(getCurrentPage()))
      {
         Node n <= pg_node.script_node;
         if(n instanceof Node)  // should always be true
         {
            boolean bSubOffset = (n instanceof NodeTracker);

            int newTicks = NodeArrangerEditor.FindPreviousClipStartTicks(n.getNodeGID(),
                                                                         current_song.song_offset,
                                                                         bSubOffset
                                                                         );
            if(newTicks >= 0)
            {
               current_song.seek(newTicks);
               handleSongPosSelected();
               Global.Print("Go to previous clip start ("+newTicks+")");
            }
         }
      }
   }

   // <method.png>
   public =replay= method transportNextArrangerClipStart() {
      if(@(pg_node) == @(getCurrentPage()))
      {
         Node n <= pg_node.script_node;
         if(n instanceof Node)  // should always be true
         {
            boolean bSubOffset = (n instanceof NodeTracker);

            int newTicks = NodeArrangerEditor.FindNextClipStartTicks(n.getNodeGID(),
                                                                     current_song.song_offset,
                                                                     bSubOffset
                                                                     );
            if(newTicks >= 0)
            {
               current_song.seek(newTicks);
               handleSongPosSelected();
               Global.Print("Go to next clip start ("+newTicks+")");
            }
         }
      }
   }

   // <ui_show.png>
   protected method showTransportStopMenu(boolean _bFocusFirst) {

      pm_transport_stop <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_transport_stop;
      // // String fontName <= "big8";
      // // String fontName <= UIConstants.DEFAULT_FONT_NAME_LABEL;

      pmb <= pm.addDefaultButton("Start \"Eureka\" audio host", "audio_start");
      pmb.setActive(!SysEx.IsAudioConnected());

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Edit config..", "edit_config");
      pmb.setToolTipCaption("Edit \"synergy_config.tks\" in system text editor");

      pmb <= pm.addDefaultButton("Edit local config..", "edit_config_local");
      pmb.setToolTipCaption("Edit \"synergy_config_local.tks\" in system text editor");

      pm.addSeparator();

      pmb <= pm.addDefaultButton("Export Standard MIDI File (.smf)..", "export_smf");
      pmb.setAccelerators(null, "lshift-F10");

      pmb <= pm.addDefaultButton("Export Tiny Synergy Replay File (.tsr)..", "export_tiny");
      pmb.setAccelerators(null, "lshift-F11");

      pm.addSeparator();

      pmb <= pm.addCheckButton("Play Metronome", STConfig.b_midi_metronome, "metronome_toggle");
      pmb.setToolTipCaption("When checked, play MIDI metronome clicks\n\n (note) F12\n\n (note) requires metronome MIDI device (see Prefs)");
      pmb.setAccelerators(null, "F12");
      pmcb_transport_stop_metronome <= pmb;

      pmb <= pm.addCheckButton("Send MTC", STConfig.b_midi_send_mtc, "mtc_toggle");
      pmb.setToolTipCaption("When checked, send MIDI Time Code events");
      pmb.setAccelerators(null, "lctrl-lshift-F12");
      pmcb_transport_stop_mtc <= pmb;

      pmb <= pm.addCheckButton("Redirect SysEx Ch1 to Play frame", STConfig.b_sysex_out_ch1_to_play_frame, "syx1play_toggle");
      pmb.setToolTipCaption("When checked, redirect \""+STConfig.sysex_out_devicename+"\" device ch1 events to play frame\n\n (note) can be used to prioritize Eureka sampler replay\n      (i.e. don\'t transform events e.g. when node editor is visible)");
      pmb.setAccelerators(null, "F11");
      pmcb_transport_stop_syx1play <= pmb;

      pmb <= pm.addCheckButton("Redirect PageSysEx kbd events", STConfig.b_pagesysex_redirect_ev, "pagesysex_redirect");
      pmb.setToolTipCaption("When checked, redirect \""+STConfig.pagesysex_auto_devicename+"\" device events to current SysEx editor output device");

      pmb <= pm.addCheckButton("Freerun Loop", replay.b_freerun_loop, "freerun_loop");
      pmb.setToolTipCaption("When unchecked, seek all nodes when song loops");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Audio Remote Control..", "audio_record");
      pmb.setAccelerators("F1", "lshift-F1");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Audio LiveRec Control..", "audio_liverec");
      pmb.setAccelerators("F2", "lshift-F2");
      pmb.setActive(!dlg_audio_liverec.isAudioLiveRecFormVisible());

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Delay Calculator..", "delay_calc");
      pmb.setAccelerators(null, "lshift-F3");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Clear MIDI cache", "clear_midi_cache");

      pm.resizeToMinimum();
      pm.showAboveLayer(bt_transport_stop);
      if(_bFocusFirst)
         pm.focusNextMenuItem();

      Global.Print("Show export menu.");
   }

   // <method.png>
   public method togglePipeSolo() {
      PagePipeRoot pgRoot <= root_form.pg_piperoot;
      pgRoot.toggleSelectedPipeSoloState();
   }

   // <method.png>
   public method togglePipeMute() {
      PagePipeRoot pgRoot <= root_form.pg_piperoot;
      pgRoot.toggleSelectedPipeMuteState();
      pg_node.updateTextFieldNodeState();
   }

   // <method.png>
   public method toggleNodeSolo() {
      pg_pipe.toggleSelectedNodeSoloState();
      pg_node.updateTextFieldNodeState();
   }

   // <method.png>
   public method toggleNodeMute() {
      // trace "xxx RootForm::toggleNodeMute";
      pg_pipe.toggleSelectedNodeMuteState();
      pg_node.updateTextFieldNodeState();
   }

   // <method.png>
   public method togglePipeOrNodeMute() {
      // trace "xxx RootForm::togglePipeOrNodeMute";
      MIDIPipeNode n <= pg_pipe.getSelectedNode();
      if(null != n)
      {
         Node.TogglePipeOrNodeMuteStateUI(n, false/*bQuiet*/);
         pg_node.updateTextFieldNodeState();
      }
   }

   // <replay.png>
   public =replay= handleToggleReplayEx(boolean _bAllowBookmark, boolean _bSendMMC) {

      if(!replay.b_playing)
         replay.setPatternNode(null);

      if(_bSendMMC)
      {
         if(!replay.b_playing)
         {
            replay.b_send_midi_mmcrec = true;

            if(STConfig.b_mtc_studio_one_record_workaround)
            {
               replay.b_mtc_send_s1_rec = true;
            }

            // (note) send SysEx events immediately so the first ~1000 sample frames won't be skipped
            SysEx.QueueRecordArm();
            SysEx.QueueSendSeqStart();
            SysEx.SendMIDIOutputEvents();
         }
         else
         {
            replay.b_dont_send_midi_mmcstop = true;
            // (note) don't send RECORD_STOP
         }

         replay.toggleReplayEx(_bAllowBookmark, false/*bAllowPanic*/);
      }
      else
      {
         replay.b_dont_send_midi_mmcstop = false;

         if(replay.b_playing)
            SysEx.QueueRecordStop();

         replay.toggleReplayEx(_bAllowBookmark, true/*bAllowPanic*/);
      }

      if(IsAudioLiveRecFormVisible())
         f_audio_liverec.handleReplayToggled();

   }

   // <replay.png>
   public =replay= handleToggleReplay(boolean _bSendMMC) {
      handleToggleReplayEx(true/*bAllowBookmark*/, _bSendMMC);
   }

   // <method.png>
   public =replay= sendDAWUndoMessage() {
      // (note) tested with Logic Pro (undo last take)
      STX_MIDIOutDevice outDev <= MIDI.GetMIDIOutDeviceByAliasOrName(STConfig.midi_daw_remote_ctl_dev);
      if(null != outDev)
      {
         Global.Print("sendDAWUndoMessage: outDev="+outDev.getAliasOrDeviceName());
         local Buffer b;
         b.size = 3;
         b.i8 = 0x90;
         b.i8 = 0x7E;
         b.i8 = 0x7F;
         outDev.addBuffer(b);
         outDev.send(0);
      }
      else
      {
         Global.Warning("sendDAWUndoMessage: outDev \""+STConfig.midi_daw_remote_ctl_dev+"\" not present");
      }
   }

   // <ui_show.png>
   public method showExportSMFDialog() {
      if(0 == UI.GetNumModalFloatingLayers())
      {
         if(null == dlg_export_smf)
         {
            dlg_export_smf <= new ExportSMFDialog;
            dlg_export_smf.init();
         }

         dlg_export_smf.showNearMouse(-100, -40);
      }
   }

   // <ui_show.png>
   public method showExportTinyDialog() {
      if(0 == UI.GetNumModalFloatingLayers())
      {
         if(null == dlg_export_tiny)
         {
            dlg_export_tiny <= new ExportTinyDialog;
            dlg_export_tiny.init();
         }

         dlg_export_tiny.showNearMouse(-100, -40);
      }
   }

   // <ui_show.png>
   public method startAudioProcess() {
      if(!SysEx.IsRemoteAudioDevAvailable())
      {
         String msg;
         if(Utils.IsMacOS())
         {
            msg =
               "\"remote_audio\" / \"remote_seq\" MIDI loopback devices not available.\n\n"
               "Please run \"audio MIDI Setup.app\" and configure the IAC driver as described in eureka/readme.html"
               ;
         }
         else if(Utils.IsWindows())
         {
            msg =
               "\"remote_audio\" / \"remote_seq\" MIDI loopback devices not available.\n\n"
               "Please install loopMIDI and configure it as described in eureka/readme.html"
               ;
         }
         else
         {
            // Linux
            msg =
               "SysEx MIDI loopback devices (STConfig.sysex_in/out_devicename) not available.\n\n"
               "Please make sure that ALSA snd_virmidi module is loaded, e.g.\n"
               "   $ sudo modprobe snd_virmidi midi_devs=10"
               ;
         }

         InfoDialog d <= InfoDialog.New("loopback device missing",
                                        msg,
                                        "Dismiss",
                                        null/*iconName*/,
                                        null/*recipient*/
                                        );
         d.showCentered();
         return;
      }

      if(!SysEx.IsAudioConnected())
      {
         local String oldCWD = tkfileutils_getcwd();
         Process proc;
         String cmd;
         StringArray args;
         if(Utils.IsMacOS())
         {
            cmd = "/bin/sh";
            String path = st2::program_directory+"/eureka/start_eureka.sh";
            if(!Utils.CanFileBeRead(path))
            {
               // dev env
               path = "/Users/bsp/Projects/tks-projects/apps/eureka/start_eureka.sh";
            }
            args.add(path);
         }
         else if(Utils.IsWindows())
         {
            // Windows
            // // cmd = "cmd";
            // // args.add("/C");
            // // args.add( (st2::program_directory+"/eureka/start_eureka.bat").replace("/", "\\") );
            local String newCWD <= st2::program_directory+"/eureka";
            Global.Debug("RootForm::startAudioProcess: newCWD=\""+newCWD+"\"");
            tkfileutils_setcwd(newCWD);
            cmd = "..\\synergy.exe&";  // "&" will start app in bg (and show its window)
         }
         else
         {
            // (todo) Linux
         }
         if(!cmd.isBlank())
         {
            Global.Debug("proc.exec(\""+cmd+"\", \""+args+"\")");
            if(!proc.exec(cmd, args))
               Global.Error("proc.exec() failed");
         }
         else
         {
            Global.Warning("Start audio: unknown installation");
         }
         tkfileutils_setcwd(oldCWD);
      }
      else
      {
         Global.Warning("Audio process is already connected");
      }
   }

   // <ui_handle.png>
   protected method handleEditConfig() {
      if(Utils.LaunchSystemTextEditor(st2::program_directory+"/synergy_config.tks"))
         Global.Print("Edit synergy_config.tks");
   }

   // <ui_handle.png>
   protected method handleEditConfigLocal() {
      if(Utils.LaunchSystemTextEditor(ConfigIO.GetLocalConfigPathName()))
         Global.Print("Edit synergy_config_local.tks");
   }

   // <method_get.png>
   public method isTrackerEditorVisible() : boolean {
      return (PAGE_NODE == current_page) && (pg_node.editor instanceof NodeTrackerEditor);
   }

   // <method.png>
   public static IsAudioLiveRecFormVisible() : boolean {
      return (null != dlg_audio_liverec) && dlg_audio_liverec.isAudioLiveRecFormVisible();
   }

   // <ui_show.png>
   public method showAudioRecordDialog(boolean _bForce, Layer _recipient, String _namePrefixOrNull) {
      if((null != dlg_audio_record) && dlg_audio_record.isFloatingLayerVisible())
      {
         if(maybe == _bForce)
         {
            dlg_audio_record.hide();
         }
         UI.SetKeyboardFocus(dlg_audio_record);
         return;
      }

      if(maybe == _bForce) // toggle?
         _bForce = false;

      if(SysEx.b_audio_detect_ack)
      {
         if(null == dlg_audio_record)
         {
            dlg_audio_record <= new AudioRecordDialog;
            dlg_audio_record.init();
         }
         dlg_audio_record.setEnableModal(_bForce);
         dlg_audio_record.setRecipient(_recipient);
         dlg_audio_record.setNamePrefix(_namePrefixOrNull);
         dlg_audio_record.showNearMouse(-100*UI.font_scaling, -40*UI.font_scaling);
      }
      else
      {
         Global.Error("Eureka audio process is not connected");
      }
   }

   // <ui_show.png>
   public method showAudioLiveRecDialog(boolean _bForce, Layer _recipient) {
      if(IsAudioLiveRecFormVisible())
      {
         if(maybe == _bForce)
         {
            dlg_audio_liverec.hide();
         }
         UI.SetKeyboardFocus(dlg_audio_liverec);
         return;
      }

      if(maybe == _bForce) // toggle?
         _bForce = false;

      if(SysEx.b_audio_detect_ack)
      {
         dlg_audio_liverec.setEnableModal(_bForce);
         f_audio_liverec.setRecipient(_recipient);
         dlg_audio_liverec.showNearMouse(-100*UI.font_scaling, -40*UI.font_scaling);
      }
      else
      {
         Global.Error("Eureka audio process is not connected");
      }
   }

   // <ui_show.png>
   public method showDelayCalculatorDialog(boolean _bToggle) {
      if((null != dlg_delaycalc) && dlg_delaycalc.isFloatingLayerVisible())
      {
         if(_bToggle)
         {
            dlg_delaycalc.hide();
         }
         return;
      }

      if(null == dlg_delaycalc)
      {
         dlg_delaycalc <= new DelayCalculatorDialog;
         dlg_delaycalc.init();
      }
      dlg_delaycalc.showDelayCalculatorDialog();
   }

   // <ui_show.png>
   public method showBPMDialog() {
      dlg_bpm <= TextInputDialog.New("Enter Beats Per Minute", "BPM", "Ok", "Cancel", current_song.bpm, 7/*maxCols*/, 7, this/*recipient*/);
      dlg_bpm.showNearMouse(-100, -80);
   }

   // <ui_show.png>
   public =replay= method showNodeEditorFor(Node _node) {
      // warning: this may be called from the replay thread (e.g. by the Linnstrument script)
      if(null != _node)
      {
         queued_show_node_gid = _node.getNodeGID();
         Global.Debug("RootForm::showNodeEditorFor(gid="+queued_show_node_gid+")");

         Events.SendNodeEditorReplayTick();
      }
      else
      {
         queued_show_node_gid = -1;
      }
   }

   // <method.png>
   public =replay= method showNextArranger() {
      // warning: this may be called from the replay thread (e.g. by the Linnstrument script)
      b_queued_show_next_arranger = true;

      Events.SendNodeEditorReplayTick();
   }

   // <method.png>
   public =replay= method queuePipeNodeABSwap() {
      // warning: this may be called from the replay thread (e.g. by the Linnstrument script)
      b_queued_pipenode_ab_swap = true;

      Events.SendNodeEditorReplayTick();
   }

   // <method.png>
   public =replay= method queueSelectPipeNodeButtonByIndices(int _pipeIdx, int _nodeIdx) {
      // warning: this may be called from the replay thread (e.g. by the Linnstrument script)
      queued_pipenode_button_select_pipe_idx = _pipeIdx;
      queued_pipenode_button_select_node_idx = _nodeIdx;

      Events.SendNodeEditorReplayTick();
   }

   // <method.png>
   public method selectSubSongByIdxAndShowPipeMap(int _subSongIdx) {
      if(Global.SelectSubSongByIdx(_subSongIdx, true/*bSaveUI*/, true/*bViaUI*/))
      {
         showPageNav(PAGE_PROJECT);
         showPageNav(PAGE_PIPEMAP);

         Global.Print("Select sub-song #"+_subSongIdx);
      }
      else
      {
         Global.Warning("Sub-song #"+_subSongIdx+" does not exist");
      }
   }

   // <save.png>
   public method saveScreenShot() {
      local String pathName <= program_directory+"/images/screenshots/screenshot_"+Utils.GetCurrentDateTimeStringNumeric()+".png";
      if(UI.SaveScreenShotPNG(pathName, 0,0,0,0))
      {
         Global.Success("Wrote screenshot to \""+pathName+"\"");
      }
      else
      {
         Global.Error("Failed to write screenshot to \""+pathName+"\"");
      }
   }

   // <ui_handle.png>
   protected method handleTimeClicked(boolean _bTap) {
      b_force_show_bpm = true;

      if(_bTap)
      {
         tap_tempo_num_taps++;

         if(1 == tap_tempo_num_taps)
         {
            tap_tempo_start_millisec = milliSeconds();
         }
         else if(tap_tempo_num_taps >= 4)
         {
            float avgBeatMS = (milliSeconds() - tap_tempo_start_millisec) / (tap_tempo_num_taps-1);

            // trace "xxx avgBeatMS="+avgBeatMS+" #taps="+tap_tempo_num_taps;

            float avgBPM = (1000 * 60) / avgBeatMS;

            // trace "xxx avgBPM="+avgBPM;

            // if(tap_tempo_num_taps > 4)
            // {
            //    avgBPM = current_song.bpm + (avgBPM - current_song.bpm) * 0.5;
            // }

            Global.Print("Tap tempo: BPM="+avgBPM+" #taps="+tap_tempo_num_taps);

            current_song.setBPM(avgBPM);

            fp_bpm.setValue(avgBPM);

            updateReplayTimeLabel(false/*bForceUpdate*/);
         }
      }

      ta_show_bpm.reschedule();
      updateReplayTimeLabel(false/*bForceUpdate*/);
   }

   // <ui_timer.png>
   protected method handleShowBPMTimer() {
      b_force_show_bpm = false;

      if(tap_tempo_num_taps >= 4)
      {
         Global.Print("Tap tempo: final BPM="+current_song.bpm);
      }

      tap_tempo_num_taps = 0;
      updateReplayTimeLabel(false/*bForceUpdate*/);
   }

   // <midi_mmc.png>
   public method mmcForceGlobalBegin() {
      b_mmc_force_global = true;

      Global.Print("Begin force global MMC");
   }

   // <midi_mmc.png>
   public method mmcForceGlobalEnd() {
      b_mmc_force_global = false;

      if(b_mmc_force_ctltag_push)
      {
         togglePageCtlTagPush(false);
         togglePageCtlTagPush(true);
      }

      Global.Print("End force global MMC");
   }

   // <callback.png>
   protected virtual onStatusBarMessageChanged(String _msg) {
      if(!push.isModeUsr())
      {
         push.lcdStatusMessage(_msg, true/*bNew*/);
      }
   }

   // <ui_handle.png>
   public method handleAudioErrorOccured() {
      // obsolete
   }

   // <ui_init.png>
   public virtual onOpen() {

      PointerArray classes <= TKS.findClassesByPrefix(null/*nsp*/, "Node");
      Object clazz;
      foreach clazz in classes
      {
         if(clazz instanceof Node)
         {
            Value ret;
            if(TKS.evalMethodByName(clazz, "nodeGetEditor", null/*args*/, ret))
            {
               NodeEditor editor <= ret.objectValue;
               if(editor instanceof NodeEditor)
               {
                  editor.onOpen();
               }
            }
         }
      }

      tex_scanline_pattern.flags = TEX_MODULATE | TEX_REPEAT_S | TEX_REPEAT_T | TEX_ALPHA;
      tex_scanline_pattern.loadImage("scanline_pattern_1.png", 0, 0, 1);
      tex_scanline_pattern.unload();
      tex_scanline_pattern.upload();
   }

   // <ui.png>
   public virtual onCycleAppLookAndFeel() {
      setAppLookAndFeelByIdx( (STConfig.lnf_idx + 1) % 3 );
   }

   // <ui.png>
   public method setAppLookAndFeelByIdx(int _idx) {
      STConfig.lnf_idx = _idx;
      switch(STConfig.lnf_idx)
      {
         default:
         case LookAndFeel.IDX_LIGHT:
            app_lnf <= Global.app_lnf_light;
            break;

         case LookAndFeel.IDX_DARK:
            app_lnf <= Global.app_lnf_dark;
            break;

         case LookAndFeel.IDX_MONO:
            app_lnf <= Global.app_lnf_mono;
            break;
      }

      UI.SetLookAndFeelResetCustomColors(app_lnf.getName());

      UI.LayoutRootLayer();  // fix Button label clipping
      Global.Print("Toggle LookAndFeel (select \""+app_lnf.getName()+"\" theme)");
   }

   // // public virtual layoutHierarchy(local boolean _bInvalidateSizeCaches, local boolean _bLayoutFinal) {
   // //    // [19Oct2023] workaround for NodeModMatrixEditor Curve maximize layout issue
   // //    if(_bInvalidateSizeCaches)
   // //       sw_views.setRequiredSizeX(UI.viewport_width);
   // //    XMLForm::layoutHierarchy(_bInvalidateSizeCaches, _bLayoutFinal);
   // // }

   // <ui.png>
   public virtual onLookAndFeelChanged() {
      Layer::onLookAndFeelChanged();

      f_scene_overlay.recursiveOnLookAndFeelChanged();
   }

   // <ui.png>
   public virtual onScreenShot() {
      // called when lalt-PRINT/SysBrk is pressed
         // case VKEY_F1:
         // // case 316:  // sysbrk  (not received)
      saveScreenShot();
   }

   // <ui_show.png>
   public method showEurekaWindow(boolean _bFocus) {
      Global.Debug("RootForm::showEurekaWindow: switch to Eureka window: IsAudioConnected()="+SysEx.IsAudioConnected()+" bFocus="+_bFocus);
      if(SysEx.IsAudioConnected())
      {
         // // trace "[dbg] switch to Eureka window handle="+SysEx.audio_native_window_handle+" (this hwnd="+SDL.nativeWindowHandle+")";
         // // SDL.showNativeWindow(SysEx.audio_native_window_handle);
         if(Utils.IsWindows())
         {
            // Policy change in Windows 11: currently non-focused processes are not allowed to change the stacking order of their windows
            SDL.showNativeWindow(SysEx.audio_native_window_handle, _bFocus);
         }
         else
         {
            SysEx.QueueSendUIWindowShow();
         }
      }
   }

   // <ui.png>
   public virtual onRootLayerMoved(int _x, int _y) {
      // called when desktop window is moved
      Global.Debug("RootForm::onRootLayerMoved("+_x+";"+_y+")");
      if(SysEx.IsAudioConnected())
      {
         // // SDL.showOtherWindow(SysEx.audio_native_window_handle);

         // Update audio process dock position (if docked)
         SysEx.QueueSendUIWindowMoved(_x, _y, Viewport.sizeX, SDL.nativeWindowHandle);

         // // SDL.bringWindowToTop(SysEx.audio_native_window_handle);
         // // / SDL.bringWindowToTop(SDL.nativeWindowHandle);
         showEurekaWindow(false/*bFocus*/);
      }
   }

   // <ui.png>
   static int last_activated_px = -1;
   static int last_activated_py;
   static int last_activated_t;
   public virtual onRootLayerActivated() {
      // called when desktop window is activated (usually when clicked into)
      //  (note) see UI.CallOnUIActivate(), SDL.onApplicationActive

      if(Configuration.debugLevel >= 2)
         Global.Debug("RootForm::onRootLayerActivated()");

      if(SysEx.IsAudioConnected())
      {
         int x = Viewport.positionX;
         int y = Viewport.positionY;

         if(x != last_activated_px || y != last_activated_py || (milliSeconds() > (last_activated_t + 500)))
         {
            last_activated_px = x;
            last_activated_py = y;
            last_activated_t  = milliSeconds();

            // // Update audio process dock position (if docked)
            // // // // SDL.showOtherWindow(SysEx.audio_native_window_handle);
            SysEx.QueueSendUIWindowMoved(x, y, Viewport.sizeX, SDL.nativeWindowHandle);
            // // // // SysEx.QueueSendUIWindowShow();
            // // // // // SDL.bringWindowToTop(SysEx.audio_native_window_handle);
            // // showEurekaWindow(false/*bFocus*/);
         }

         // //    // SDL.showNativeWindow(SysEx.audio_native_window_handle);
         // //    // SDL.showNativeWindow(SDL.nativeWindowHandle);

         // //    // SDL.showOtherWindow(SysEx.audio_native_window_handle);
         // //    // SDL.showOtherWindow(SDL.nativeWindowHandle);

         // // // trace "xxx onRootLayerActivate: self to top";
         // // // SDL.bringWindowToTop(SDL.nativeWindowHandle);
      }
   }

   // <ui.png>
   public method moveToDefaultPosition() {
   if( (-1 != STConfig.window_x) && (-1 != STConfig.window_y) )
      Viewport.setGeometry(STConfig.window_x, STConfig.window_y, 0,0);
   }

   // <ui.png>
   public virtual onDrainEventQueue() {
      Events.ResetAllEvents();
   }

   // <ui_render.png>
   public virtual onDraw() {
      // Hack to fix status bar layout which slightly changes (width of message area) when window is re-focused..
      //  (todo) proper-fix this
      if(!b_fix_layout)
      {
         b_fix_layout = true;

         UI.LayoutRootLayer();
      }
   }

   // <ui_mouse.png>
   public virtual onMouseClick(MouseEvent _ev) : boolean {
      if(_ev.isLeftButton())
      {
         // (note) click left/top pixel (in fullscreen mode)
         if(0 == _ev.mouse_rel_x && 0 == _ev.mouse_rel_y)
         {
            Global.cmd_file_quit();
            return true;
         }
      }
      return XMLForm::onMouseClick(_ev);
   }

   // <ui_kbd.png>
   public virtual getTabCycleOverrides() : PointerArray {
      Page pg <= getCurrentPage();
      return pg.getTabCycleOverrides();
   }

   // <ui_kbd.png>
   public virtual onTriadKey(Key _k) : boolean {
      // // trace "xxx RootForm: onTriadKey: _k.code="+_k.code;
      int subSongIdx = -1;

      switch(_k.pressed)
      {
         case VKEY_ESCAPE:
            showTransportStopMenu(true/*bFocusFirst*/);
            return true;

         case VKEY_KP0:
            subSongIdx = 0;
            break;

         case VKEY_KP1:
            subSongIdx = 1;
            break;

         case VKEY_KP2:
            subSongIdx = 2;
            break;

         case VKEY_KP3:
            subSongIdx = 3;
            break;

         case VKEY_KP4:
            subSongIdx = 4;
            break;

         case VKEY_KP5:
            subSongIdx = 5;
            break;

         case VKEY_KP6:
            subSongIdx = 6;
            break;

         case VKEY_KP7:
            subSongIdx = 7;
            break;

         case VKEY_KP8:
            subSongIdx = 8;
            break;

         case VKEY_KP9:
            subSongIdx = 9;
            break;

         case VKEY_KP_PLUS:
            showBPMDialog();
            break;

         case VKEY_KP_ENTER:
         case VKEY_EQUALS:
            sendDAWUndoMessage();
            break;

         case 'x':
            if(!SysEx.IsAudioConnected())
               startAudioProcess();
            showEurekaWindow(true/*bFocus*/);
            break;
      }

      if(-1 != subSongIdx)
      {
         if(STConfig.b_lctrlx_kp_select_multimorph)
         {
            selectMultiSceneByIdx(subSongIdx);
         }
         else
         {
            if(!isCurrentPageModal())
            {
               selectSubSongByIdxAndShowPipeMap(subSongIdx);
            }

            UI.RedrawAll();
         }
      }
   }

   // <ui_kbd.png>
   public virtual wantKeyRepeat(Key _k) : boolean {
      switch(_k.code)
      {
         case 'b':
         case 'n':
         case 'q':
         case 'm':
         case 'p':
         case 'g':
         case VKEY_ESCAPE:
            return false;
      }
      return XMLForm::wantKeyRepeat(_k);
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      // trace "[>>>] RootForm: key="+_k.name+" pressed="+_k.pressed+" mod="+_k.mod;
      Page *pg;

      if(_k.modShift())
      {
         switch(_k.pressed)
         {
            case VKEY_F1:
               showAudioRecordDialog(maybe/*bForce=toggle*/, null/*recipient*/, null/*namePrefixOrNull*/);
               return true;

            case VKEY_F2:
               showAudioLiveRecDialog(maybe/*bForce=toggle*/, null/*recipient*/);
               return true;

            case VKEY_F3:
               showDelayCalculatorDialog(true/*bToggle*/);
               return true;

            case VKEY_F10:
               showExportSMFDialog();
               return true;

            case VKEY_F11:
               showExportTinyDialog();
               return true;

            case VKEY_F12:
               if(_k.modCtrl())
               {
                  toggleMTC();
                  // Sub37Debug.Run();  // xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
               }
               else
               {
                  toggleSysExOutCh1PlayFrame();
               }
               return true;

            case VKEY_PAGEUP:
               if(_k.modCtrl())
               {
                  transportNextArrangerClipStart();
                  return;
               }
               break;

            case VKEY_PAGEDOWN:
               if(_k.modCtrl())
               {
                  transportPreviousArrangerClipStart();
                  return;
               }
               break;

            case VKEY_KP1:
               if(_k.modCtrl())
               {
                  transportPreviousArrangerClipStart();
                  return true;
               }
               break;

            case VKEY_KP2:
               if(_k.modCtrl())
               {
                  transportNextArrangerClipStart();
                  return true;
               }
               break;
         }
      }

      // // trace "xxx RootForm: k.code="+_k.code+" k.pressed="+_k.pressed+" k.mod="+_k.mod+" _k.modCtrl()="+_k.modCtrl();
      if(_k.modCtrl())
      {
         switch(_k.pressed)
         {
            case VKEY_BACKQUOTE/*96*/: // '^' (ger) / '`' (us)
               focusStatusBar();
               return true;

            case VKEY_KP0:
               if(!isCurrentPageModal())
               {
                  // Show sysex
                  showPageNav(PAGE_SYSEX);
               }
               return true;

            case VKEY_KP1:
               if(!isCurrentPageModal())
               {
                  // Show pipemap
                  showPageNav(PAGE_PIPEMAP);
               }
               return true;

            case VKEY_KP2:
               if(!isCurrentPageModal())
               {
                  // show settings/prefs
                  root_form.showPage(RootForm.PAGE_PREFS, true);
               }
               return true;

            case VKEY_KP3:
               if(_k.modCtrlOnly())
               {
                  if(!isCurrentPageModal())
                  {
                     // show current node (if any)
                     pg_piperoot.handleEditPipeNode();
                  }
                  return true;
               }
               break;

            case VKEY_KP4:
               if(!isCurrentPageModal())
               {
                  // show settings/devs
                  showPage(RootForm.PAGE_MIDIDEVS, true);
               }
               return true;

            case VKEY_KP5:
               if(!isCurrentPageModal())
               {
                  // Show project
                  showPageNav(PAGE_PROJECT);
               }
               return true;

            case VKEY_KP6:
               if(!isCurrentPageModal())
               {
                  // show input/ui global
                  pg_midimapper.showGlobalMidiMap();
               }
               return true;

            case VKEY_KP7:
               if(!isCurrentPageModal())
               {
                  showPageNav(PAGE_PIPEROOT);
               }
               return true;

            case VKEY_KP8:
               if(!isCurrentPageModal())
               {
                  showPageNav(PAGE_PIPE);
               }
               return true;

            case VKEY_KP9:
               if(!isCurrentPageModal())
               {
                  showPageNav(PAGE_AUDIOTOOL);
               }
               return true;

            case VKEY_KP_ENTER:
               if(!isCurrentPageModal())
               {
                  // Show input monitor
                  showPageNav(PAGE_MIDIMON);
               }
               return true;

            case VKEY_KP_PLUS:
               if(!isCurrentPageModal())
               {
                  // Show output monitor
                  showPageNav(PAGE_OUTPUTMON);
               }
               return true;
         }
      }

      if(0 != loadsave_marker_key_mode)
      {
         if!(VKEY_KP1 <= _k.pressed <= VKEY_KP8)
         {
            if(_k.pressed)
            {
               Global.Warning("Load/Save marker: abort");
               loadsave_marker_key_mode = 0;
            }
            return true;
         }
         else
         {
            if(2 == loadsave_marker_key_mode)
            {
               saveSongMarker(_k.pressed - VKEY_KP1);
            }
            else
            {
               loadSongMarker(_k.pressed - VKEY_KP1);
            }
            loadsave_marker_key_mode = 0;
            return true;
         }
      }

      // // if(_k.pressed)
      // //    Viewport.interruptScreenSaver(); // Open Pandora workaround

      if(!XMLForm::onKey(_k))
      {
         // trace "xxx RootForm: !XMLForm::onKey  k.code="+_k.code+" k.pressed="+_k.pressed+" k.mod="+_k.mod;

         // Global keyjazz
         if(_k.modNone())
         {
            switch(_k.pressed)
            {
               case VKEY_F1:
                  // alternative fallback shortcut (w/o shift)
                  showAudioRecordDialog(maybe/*bForce=toggle*/, null/*recipient*/, null/*namePrefixOrNull*/);
                  return true;

               case VKEY_F2:
                  // alternative fallback shortcut (w/o shift)
                  showAudioLiveRecDialog(maybe/*bForce=toggle*/, null/*recipient*/);
                  return true;

               case VKEY_F3:
                  selectScenePrev(0/*A*/);
                  return true;

               case VKEY_F4:
                  selectSceneNext(0/*A*/);
                  return true;

               case VKEY_F5:
                  selectScenePrev(1/*B*/);
                  return true;

               case VKEY_F6:
                  selectSceneNext(1/*B*/);
                  return true;

               case VKEY_F7:
                  selectScenePrev(2/*C*/);
                  return true;

               case VKEY_F8:
                  selectSceneNext(2/*C*/);
                  return true;

               case VKEY_F9:
                  selectScenePrev(3/*D*/);
                  return true;

               case VKEY_F10:
                  selectSceneNext(3/*D*/);
                  return true;

               case VKEY_F9:
                  Global.cmd_song_panic();
                  return true;

               case VKEY_F11:
                  toggleSysExOutCh1PlayFrame();
                  // // MMatrix1000.Test_Matrix1000(); // xxxxxxxxxxxxxxxxxx test key
                  return true;

               case VKEY_F12:
                  toggleMetronome();
                  return true;

               case VKEY_PAUSE:
                  if(replay.b_playing)
                  {
                     replay.stopReplay(false, true/*bAllowPanic*/);
                  }
                  else
                  {
                     // pattern_view.loopCurrentPattern();
                  }
                  return true;

               case 'b':
                  showPagePrev();
                  return true;

               case 'n':
                  showPageNext();
                  return true;

               case VKEY_ESCAPE:
                  if(PAGE_NODE == current_page)
                     return  pg_node.onKey(_k);
               // // //    // else: run into next label
               // // // case 'q':
                  showPageParentOrPrev();
                  return true;

               case 'm':
                  pageEditMMC();
                  return true;

               case VKEY_KP_ENTER:
               case VKEY_EQUALS: // = on us kbd, ` on german kbd
                  handleToggleReplay(false/*bShift*/);///replay.toggleReplay();
                  return true;

               case VKEY_RALT:
                  if(STConfig.b_ralt_toggles_replay)
                  {
                     handleToggleReplay(false/*bShift*/);///replay.toggleReplay();
                     return true;
                  }
                  break;

               case 'g':
                  mmcForceGlobalBegin();
                  return true;

               case VKEY_KP1:
                  transportPrevBar();
                  return true;

               case VKEY_KP2:
                  transportNextBar();
                  return true;

               case VKEY_KP4:
                  transportPrevMarker();
                  return true;

               case VKEY_KP6:
                  transportNextMarker();
                  return true;

               case VKEY_KP7:
                  transportPrevBeat();
                  return true;

               case VKEY_KP9:
                  transportNextBeat();
                  return true;

               case VKEY_KP3:
                  transportCycle(maybe/*toggle*/);
                  return true;

               case VKEY_KP_DIVIDE:
                  transportCycleLengthDec();
                  return true;

               case VKEY_KP_MULTIPLY:
                  transportCycleLengthInc();
                  return true;

               case VKEY_KP_PERIOD:
                  saveSongMarker(-1);
                  return true;

               case VKEY_KP0:
                  loadSongMarker(-1);
                  return true;

               case VKEY_KP5:
                  loadsave_marker_key_mode = 1;
                  Global.Print("Load marker: awaiting key..");
                  return true;

               case VKEY_KP8:
                  loadsave_marker_key_mode = 2;
                  Global.Print("Save marker: awaiting key..");
                  return true;

               case VKEY_KP_MINUS:
                  bpmDec(false/*bHalf*/);
                  return true;

               case VKEY_KP_PLUS:
                  bpmInc(false/*bDouble*/);
                  return true;

               case VKEY_BACKQUOTE/*96*/: // '^' (ger) / '`' (us/uk)
                  togglePageCtlTagGlobalMidiMap();
                  return true;
            }

            switch(_k.released)
            {
               case VKEY_PAUSE:
                  // Audio.StopTempSample();
                  return true;

               case 'g':
                  mmcForceGlobalEnd();
                  return true;

               case VKEY_KP_MINUS:
               case VKEY_KP_PLUS:
                  scheduleKeySpeed();
                  return true;

            }

         } // 0==k.mod
         else
         {
            switch(_k.pressed)
            {
               case VKEY_PAUSE:
                  // if(_k.modShift())
                  // {
                  // Audio.PlayRefToneTempSample();
                  // }
                  return true;

               case VKEY_F3:
                  if(_k.modAlt())
                  {
                     selectScenePrev(4/*E*/);
                     return true;
                  }
                  break;

               case VKEY_F4:
                  if(_k.modAlt())
                  {
                     selectSceneNext(4/*E*/);
                     return true;
                  }
                  break;

               case VKEY_F5:
                  if(_k.modAlt())
                  {
                     selectScenePrev(5/*F*/);
                     return true;
                  }
                  break;

               case VKEY_F6:
                  if(_k.modAlt())
                  {
                     selectSceneNext(5/*F*/);
                     return true;
                  }
                  break;

               case VKEY_F7:
                  if(_k.modAlt())
                  {
                     selectScenePrev(6/*G*/);
                     return true;
                  }
                  break;

               case VKEY_F8:
                  if(_k.modAlt())
                  {
                     selectSceneNext(6/*G*/);
                     return true;
                  }
                  break;

               case VKEY_F9:
                  if(_k.modAlt())
                  {
                     selectScenePrev(7/*H*/);
                     return true;
                  }
                  break;

               case VKEY_F10:
                  if(_k.modAlt())
                  {
                     selectSceneNext(7/*H*/);
                     return true;
                  }
                  break;

               case 'b':
                  if(_k.modCtrl())
                  {
                     showPageParent();
                     return true;
                  }
                  break;

               case 'm':
                  if(_k.modCtrl())
                  {
                     pageEditMMC();
                     return true;
                  }
                  break;

               case 'q':
                  if(_k.modShiftOnly())
                  {
                     Global.HandleOnClose();
                  }
                  return true;

               case 's':
                  if(_k.modCtrl())
                  {
                     if(_k.modShift())
                     {
                        togglePipeMute();
                     }
                     else
                     {
                        togglePipeSolo();
                     }
                     return true;
                  }
                  break;

               case 'd':
                  if(_k.modCtrl())
                  {
                     if(_k.modShift())
                     {
                        // toggleNodeMute();
                        togglePipeOrNodeMute();
                     }
                     else
                     {
                        toggleNodeSolo();
                     }
                     return true;
                  }
                  break;

               case VKEY_KP3:
                  // (note) lshift-KP3 is already used for used-pattern selection
                  if(_k.modShift() && _k.modCtrl())
                  {
                     showTransportCycleMenu(true/*bFocusFirst*/);
                     return true;
                  }
                  break;

               case VKEY_KP_MINUS:
                  if(_k.modShift())
                  {
                     bpmDec(true/*bHalf*/);
                  }
                  else if(_k.modCtrl())
                  {
                     root_form.showPage(RootForm.PAGE_SUBSONGS, true);
                  }
                  return true;

               case VKEY_KP_PLUS:
                  if(_k.modShift())
                  {
                     bpmInc(true/*bDouble*/);
                  }
                  return true;

               case VKEY_KP_ENTER:
               case VKEY_EQUALS: // = on us kbd, Â´ on german kbd
                  handleToggleReplay(_k.modShift());
                  return true;
            }

            switch(_k.released)
            {
               case VKEY_PAUSE:
                  // Audio.StopTempSample();
                  return true;
            }
         } // _k.modNone()

         if(null == UI.keyboard_layer)
         {
            pg <= getCurrentPage();
            if(pg.onKey(_k))
            {
               return true;
            }
         }

         // Hack for cycling buttons with cursor keys, independent of tab cycle groups
         // // trace "xxx RootForm: KeyboardFocus="+#(UI.GetKeyboardFocus());
         if(_k.mod)
         {
            if(!_k.modCtrl())
            {
               switch(_k.pressed)
               {
                  case VKEY_LEFT:
                     handleGlobalFocusPrev();
                     return true;

                  case VKEY_RIGHT:
                     handleGlobalFocusNext();
                     return true;

                  case VKEY_UP:
                     handleGlobalFocusPrev();
                     return true;

                  case VKEY_DOWN:
                     handleGlobalFocusNext();
                     return true;
               }
            }
         }
         else
         {
            switch(_k.pressed)
            {
               case VKEY_LEFT:
                  pg <= getCurrentPage();
                  if(pg.pageForceKbdFocusSelMode())
                  {
                     UI.BeginKbdFocusSelectionMode();
                     UI.FindKbdFocusLeft();
                     UI.EndKbdFocusSelectionMode();
                     return true;
                  }
                  break;

               case VKEY_RIGHT:
                  pg <= getCurrentPage();
                  if(pg.pageForceKbdFocusSelMode())
                  {
                     UI.BeginKbdFocusSelectionMode();
                     UI.FindKbdFocusRight();
                     UI.EndKbdFocusSelectionMode();
                     return true;
                  }
                  break;

               case VKEY_UP:
                  pg <= getCurrentPage();
                  if(pg.pageForceKbdFocusSelMode())
                  {
                     UI.BeginKbdFocusSelectionMode();
                     UI.FindKbdFocusUp();
                     UI.EndKbdFocusSelectionMode();
                     return true;
                  }
                  break;

               case VKEY_DOWN:
                  pg <= getCurrentPage();
                  if(pg.pageForceKbdFocusSelMode())
                  {
                     UI.BeginKbdFocusSelectionMode();
                     UI.FindKbdFocusDown();
                     UI.EndKbdFocusSelectionMode();
                     return true;
                  }
                  break;
            }
         }

         //trace "xxx unhandled k.code="+_k.code+" k.mod="+_k.mod+" k.pressed="+_k.pressed;

         pg <= getCurrentPage();
         return pg.pageHandleAutoFocusKey(_k);

         // // return false;
      }
      else
      {
         // handled by form
         return true;
      }
   }

   // <ui_page.png>
   public method defaultHandleAutoFocusKey(Key _k) : boolean {
      if(0 != _k.unicode)
      {
         if(_k.modNone())
         {
            if(@(UI.GetKeyboardFocus()) != @(sb_status))
            {
               if(UI.IsAutoFocusKey(_k))
               {
                  UI.SetKeyboardFocus(sb_status);
                  sb_status.selectAll();
               }
               else
               {
                  return false;
               }
            }
            sb_status.onKey(_k);
            return true;
         }
      }
      return false;
   }

   // <method.png>
   protected method scheduleKeySpeed() {
      int ksTicks = 200 / bpm_key_speed_idx;
      if(ksTicks < 20)
         ksTicks = 20;
      ta_key_speed.scheduleTicks(ksTicks);
   }

   // <ui_timer.png>
   protected method handleReplayTimer() {
      // Periodic callback (~30 times per sec). Called from UI thread.
      Page pg <= getCurrentPage();

      SysEx.HandleQueuedRecv();

      pg.pageHandleReplayTimer();

      if(0 == (++songwidgets_update_count & 31))
      {
         updateSongWidgets();
      }

      if(IsAudioLiveRecFormVisible())
         f_audio_liverec.handleReplayTimer();

      // // if(faderport.b_connected)
      // //    faderport.handleReplayTimer();

      // // if(mf_twister.b_connected)
      // //    mf_twister.handleReplayTimer();

      BidiCtl *bidiCtl;
      foreach bidiCtl in bidi_ctls
         bidiCtl.handleReplayTimer();

      ta_replay_timer.schedule();
   }

   // <replay.png>
   public =replay= method handleReplayTick() {
      // called from replay thread

      if(RootForm.PAGE_NODE == getCurrentPageNr())
      {
         if(pg_node.isEditorVisible())
         {
            pg_node.editor.handleReplayTick();
         }
      }
   }

   // <method_handle.png>
   protected method handleQueuedShowNode() {
      if(-1 != queued_show_node_gid)
      {
         Global.Debug("RootForm::handleReplayTickUI(queued_show_node_gid="+queued_show_node_gid+")");

         if(0 == UI.GetNumModalFloatingLayers())
         {
            Node sci <= current_song.findNodeByGID(queued_show_node_gid);
            if(null != sci)
            {
               MIDIPipe     pipe  <= sci.parent_pipe;
               MIDIPipeNode node  <= sci.parent_pipenode;
               pg_piperoot.selectPipeAndNodeByIdx(pipe.pipeIdx, node.nodeIdx);
               pg_piperoot.handleEditPipeNode();
            }
         }

         queued_show_node_gid = -1;
      }
   }

   // <method_handle.png>
   public method handleReplayTickUI() {
      // called by (some) Node editors.
      //  see handleReplayTimer() for a constantly periodic callback

      // trace "xxx RootForm::handleReplayTickUI";

      if(-1 != queued_show_node_gid)
      {
         handleQueuedShowNode();
      }

      if(b_queued_show_next_arranger)
      {
         b_queued_show_next_arranger = false;
         pg_pipemap.selectNextArranger();
         pg_piperoot.handleEditPipeNode();
      }

      if(b_queued_pipenode_ab_swap)
      {
         b_queued_pipenode_ab_swap = false;
         pg_node.handlePipeNodeABSwap();
      }

      if(-1 != queued_pipenode_button_select_pipe_idx)
      {
         if(PAGE_PIPEMAP == current_page)
         {
            pg_pipemap.selectPipeNodeButtonByIndices(queued_pipenode_button_select_pipe_idx,
                                                     queued_pipenode_button_select_node_idx
                                                     );
         }
         queued_pipenode_button_select_pipe_idx = -1;
      }

      Global.HandleQueuedReplayPrints();

      if(PAGE_NODE == current_page)
      {
         if(RootForm.PAGE_NODE == getCurrentPageNr())
         {
            if(pg_node.isEditorVisible()) // 04Dec2016  after InvalidPointer exception when pressing esc in editor
            {
               pg_node.editor.handleReplayTickUI();
            }
         }
      }

   }

   // <method_handle.png>
   public method handlePlayPatChanged() {
      // Called from UI thread when EV_PLAYPAT is received
      if(PAGE_NODE == current_page)
      {
         pg_node.handlePlayPatChanged();
      }
      PagePipeMap.b_pattern_changed = true;
   }

   // <replay.png>
   public =replay= method handleRecordMidiEndSchedule() {
      // called from events

      if(PAGE_NODE == current_page)
      {
         pg_node.editor.evHandleRecordMidiEndSchedule();
      }
   }

   // <method.png>
   public method toggleMetronome() {
      replay.setEnableMetronome(!STConfig.b_midi_metronome);
      Global.Print("Metronome is "+Utils.GetEnableString(STConfig.b_midi_metronome));

      if( (null != pm_transport_stop ) && pm_transport_stop.isFloatingLayerVisible() )
      {
         pmcb_transport_stop_metronome.setSelected(STConfig.b_midi_metronome);
         pmcb_transport_stop_metronome.redraw();
      }
   }

   // <method.png>
   public =replay= method toggleMTC() {
      STConfig.b_midi_send_mtc = !STConfig.b_midi_send_mtc;
      Global.Print("MTC is "+Utils.GetEnableString(STConfig.b_midi_send_mtc));

      if( (null != pm_transport_stop ) && pm_transport_stop.isFloatingLayerVisible() )
      {
         pmcb_transport_stop_mtc.setSelected(STConfig.b_midi_send_mtc);
         pmcb_transport_stop_mtc.redraw();
      }
   }

   // <method.png>
   public =replay= method toggleSysExOutCh1PlayFrame() {
      STConfig.b_sysex_out_ch1_to_play_frame = !STConfig.b_sysex_out_ch1_to_play_frame;
      Global.Print("SysEx-Out Ch1 to Play frame is "+Utils.GetEnableString(STConfig.b_sysex_out_ch1_to_play_frame));

      if( (null != pm_transport_stop ) && pm_transport_stop.isFloatingLayerVisible() )
      {
         pmcb_transport_stop_syx1play.setSelected(STConfig.b_sysex_out_ch1_to_play_frame);
         pmcb_transport_stop_syx1play.redraw();
      }
   }

   // <method.png>
   public =replay= method togglePageSysExRedirect() {
      STConfig.b_pagesysex_redirect_ev = !STConfig.b_pagesysex_redirect_ev;
      Global.Print("PageSysEx redirect is "+Utils.GetEnableString(STConfig.b_pagesysex_redirect_ev));
   }

   // <method.png>
   public =replay= method toggleFreerunLoop() {
      replay.b_freerun_loop = !replay.b_freerun_loop;
      Global.Print("Freerun Loop is "+Utils.GetEnableString(replay.b_freerun_loop));
   }

   // <ui_handle.png>
   public =replay= method clearMIDICache() {
      current_pipe_root.clearMIDICache();
      Global.Print("Clear MIDI cache");
   }

   // <ui_handle.png>
   protected virtual recursiveOnResize() {
      PointerArray classes <= TKS.findClassesByPrefix(null/*nsp*/, "Node");
      Object clazz;
      MIDIMapContext *mmc;
      foreach clazz in classes
      {
         if(clazz instanceof Node)
         {
            Node n <= clazz;
            NodeEditor editor <= n.nodeGetEditorIfExists();
            // trace "xxx RootForm::recursiveOnResize: n="+#(n)+" editor="+#(editor);
            if(null != editor)
            {
               // Force relayout
               editor.b_layout_done = false;
            }
         }
      }

      XMLForm::recursiveOnResize();

      Events.ResetAllEvents();

      onRootLayerActivated();  // send UI_WINDOW_MOVED SysEx message to Eureka

      Global.LoadIcon();
   }

   // <ui_handle.png>
   protected method handleCmdAutoComplete() {
      int argIdx = sb_status.getWordIndexUnderCursor();
      local String word;
      local StringArray words <= sb_status.getWords();
      local String cmd;
      if(argIdx >= 0)
      {
         word = words.get(argIdx);
         Global.Debug2("RootForm::handleCmdAutoComplete: idx="+argIdx+" word=\""+word+"\"");
      }
      else
      {
         // Empty string
         argIdx = 0;
      }

      cmdautocomplete_word_idx = argIdx;

      cmd = words.get(0);

      CmdProvider cp <= getCurrentPage().cmdGetRedirect();
      local StringArray *options;

      local StringArray cmdsAvail <= cp.cmdGetAvailableCommands();
      Global.Debug2("RootForm::handleCmdAutoComplete: cmdsAvail="+#(cmdsAvail));
      if(null != cmdsAvail)
      {
         if(0 == argIdx)
         {
            if(!cmd.isBlank())
            {
               local String *acmd;
               options <= new StringArray;
               foreach acmd in cmdsAvail
               {
                  // // if(acmd <= word)  // match string start
                  if(acmd & word)  // match substring
                     options.add(acmd);
               }
            }
            else
            {
               options <= cmdsAvail;
            }
            Global.Debug2("RootForm::handleCmdAutoComplete: cmds="+#(options));
         }
         else
         {
            options <= cp.cmdFindArgAutoCompletions(cmd, argIdx - 1, word);
            if(null != options)
            {
               if(options.numElements > 0)
               {
                  Global.Debug2("RootForm::handleCmdAutoComplete: arg "+argIdx+" completions="+#(options));
               }
               else
               {
                  options <= null;
               }
            }
            if(null == options)
            {
               local StringArray argsAvail <= cp.cmdGetAvailableArgs(cmd, argIdx - 1);
               if(null != argsAvail)
               {
                  if(argsAvail.numElements > 0)
                  {
                     if(!word.isBlank())
                     {
                        options <= new StringArray;
                        local String *aarg;
                        foreach aarg in argsAvail
                        {
                           if(aarg <= word)
                              options.add(aarg);
                        }
                     }
                     else
                     {
                        options <= argsAvail;
                     }
                     Global.Debug2("RootForm::handleCmdAutoComplete: arg "+argIdx+" avail="+#(options));
                  }
                  else
                  {
                     options <= null;
                  }
               }
            }
         }
      }

      if(null != options)
      {
         if(options.numElements > 1)
         {
            cmdautocomplete_popup <= ComboBoxPopup.NewComboBoxPopup(this,
                                                                    null/*fontOrNull*/,
                                                                    options,
                                                                    null/*options_long*/,
                                                                    -1/*selected_option*/,
                                                                    sb_status.getSizeX()/*prefSx*/,
                                                                    null/*tooltip_captions*/,
                                                                    null/*option_bgcolors*/,
                                                                    null/*option_fgtints*/
                                                                    );
            cmdautocomplete_popup.showNearComboBox(sb_status);
            // // cmdautocomplete_popup.table.centerRow();
            cmdautocomplete_popup.focusFirstTabCycleMember();
            cmdautocomplete_options <= deref options;
         }
         else if(1 == options.numElements)
         {
            handleCmdAutoCompleteSelection(options.get(0));
         }
      }

   }

   // <ui_handle.png>
   protected method handleCmdHistoryComplete() {
      if(cmd_history.numElements > 0)
      {
         cmdhistory_popup <= ComboBoxPopup.NewComboBoxPopup(this,
                                                            null/*fontOrNull*/,
                                                            cmd_history,
                                                            null/*options_long*/,
                                                            cmd_history.numElements-1/*selected_option*/,
                                                            sb_status.getSizeX()/*prefSx*/,
                                                            null/*tooltip_captions*/,
                                                            null/*option_bgcolors*/,
                                                            null/*option_fgtints*/
                                                            );
         cmdhistory_popup.showNearComboBox(sb_status);
         // // cmdhistory_popup.table.centerRow();
         cmdhistory_popup.focusFirstTabCycleMember();
      }
   }

   // <ui_handle.png>
   protected method handleCmdAutoCompleteSelection(String _option) {
      local String word;
      local StringArray words <= sb_status.getWords();
      local String newText;
      int newCursorX = 0;
      local String option;

      if(0 == cmdautocomplete_word_idx)
      {
         local StringArray ta <= _option.splitSpace(true);
         option = ta.get(0);  // skip arg syntax
      }
      else
         option <= _option;

      if(cmdautocomplete_word_idx >= words.numElements)
      {
         // Append new word
         newText = (sb_status.getText().trim()) + " " + option;
         newText.trim();
         newCursorX = newText.length - 1;
      }
      else
      {
         // Replace word
         int wordIdx = 0;
         int numAppended = 0;
         loop(words.numElements)
         {
            if(numAppended++ > 0)
            {
               newText.append(" ");
            }

            if(wordIdx == cmdautocomplete_word_idx)
            {
               newText.append(option);
               newCursorX = newText.length - 1;
            }
            else
            {
               newText.append(words.get(wordIdx));
            }

            Global.Debug2("RootForm::handleCmdAutoCompleteSelection: wordIdx="+wordIdx+" newText=\""+newText+"\"");

            wordIdx++;
         }
      }

      Global.Debug2("RootForm::handleCmdAutoCompleteSelection: newText=\""+newText+"\" newCursorX="+newCursorX+" option=\""+option+"\"");

      sb_status.setText(newText);
      sb_status.setTextEditedFlag(true);

      UI.SetKeyboardFocus(sb_status);
      sb_status.onTabFocus();
      sb_status.selectNone();
      sb_status.moveCursorTo(newCursorX);
   }

   // <ui_handle.png>
   protected method handleCmdHistorySelection(String _cmd) {
      sb_status.setText(_cmd);
      sb_status.setTextEditedFlag(true);

      UI.SetKeyboardFocus(sb_status);
      sb_status.onTabFocus();
      sb_status.selectNone();
      sb_status.moveCursorEnd();
   }

   // <ui_show.png>
   protected method handleCmdShowDefaultActions() {
      CmdProvider cp <= getCurrentPage().cmdGetRedirect();
      cmd_actions <= cp.cmdGetDefaultActions();
      if(null != cmd_actions)
      {
         HashTable htToolTips <= cp.cmdGetActionToolTips();
         local StringArray *toolTipCaptions;
         if(null != htToolTips)
         {
            toolTipCaptions <= new StringArray;
            String *defAction;
            foreach defAction in cmd_actions
            {
               local StringArray ta <= defAction.splitSpace(false);
               String defCmd <= ta.get(0);
               if(htToolTips.exists(defCmd))
                  toolTipCaptions.add(htToolTips[defCmd]);
               else
                  toolTipCaptions.add(defCmd);
            }
         }

         cmdactions_popup <= ComboBoxPopup.NewComboBoxPopup(this,
                                                            null/*fontOrNull*/,
                                                            cmd_actions,
                                                            null/*options_long*/,
                                                            -1/*selected_option*/,
                                                            sb_status.getSizeX()/*prefSx*/,
                                                            deref toolTipCaptions/*tooltip_captions*/,
                                                            null/*option_bgcolors*/,
                                                            null/*option_fgtints*/
                                                            );
         cmdactions_popup.showNearComboBox(sb_status);
         cmdactions_popup.focusFirstTabCycleMember();
      }
   }

   // <ui_handle.png>
   protected method handleCmdActionsSelection(String _cmd) {
      sb_status.setText(_cmd);
      sb_status.setTextEditedFlag(true);

      UI.SetKeyboardFocus(sb_status);
      sb_status.onTabFocus();
      sb_status.selectNone();
      sb_status.moveCursorEnd();

      if(0 != UI.GetKeyMod())
         handleCmdExec();
   }

   // <ui_handle.png>
   protected method handleCmdExec() {

      // Add to history
      local String cmdText = sb_status.getText();
      boolean bAddHistory = true;

      if(cmd_history.numElements > 0)
      {
         bAddHistory = (cmd_history.last != cmdText);
      }
      if(bAddHistory)
      {
         if(cmd_history.numElements >= CMD_HISTORY_SIZE)
            cmd_history.delete(0);
         cmd_history.add(cmdText);
      }

      // Eval command
      local StringArray argv <= sb_status.getWords();
      sb_status.stopEditing(false/*bProvideAction*/, false/*bReturnKey*/, true/*bQuiet*/);
      // // sb_status.setTextEditedFlag(false); // re-enable status messages
      sb_status.setText("");
      CmdProvider cp <= getCurrentPage().cmdGetRedirect();

      // Set keyboard focus before executing the command so cmd can set a different one (e.g. refocus the statusbar)
      Page pg <= getCurrentPage();
      pg.pageFocusDefault();

      if(argv.numElements >= 1)
      {
         boolean r = cp.cmdExec(argv);
         Global.Debug2("RootForm::handleCmdExec: r="+r);
      }

   }

   // <ui_update.png>
   public =replay= method queueUpdateBidirectionalControls() {
      b_queue_update_bidirection_controls = true;
   }

   // <ui_update.png>
   public =replay= method checkResetUpdateBidirectionalControls() : boolean {
      boolean r = b_queue_update_bidirection_controls;
      b_queue_update_bidirection_controls = false;
      return r;
   }

   // <ui_kbd.png>
   public method focusStatusBar() {
      UI.SetKeyboardFocus(sb_status);
      sb_status.onTabFocus();
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();
      StringAction *sac;
      IntAction *iac;

      // // trace "xxx RootForm::consumeAction: acName=\""+acName+"\".";

      switch(@(ap))
      {
         case @(dlg_bpm):
            if(TextInputDialog.ACTION_TEXTINPUTDIALOGCLOSED == acName)
            {
               sac <= _ac;
               fp_bpm.setValue(sac.getStringValue());
               handleBPMChanged(true/*bRefocusDefault*/);
               Global.Print("BPM set to "+current_song.bpm);
            }
            return true;

         case @(dlg_rename_marker):
            if(TextInputDialog.ACTION_TEXTINPUTDIALOGCLOSED == acName)
            {
               sac <= _ac;
               handleFinishRenameMarker(sac.getStringValue());
            }
            else if(TextInputDialog.ACTION_TEXTINPUTDIALOGCANCELED == acName)
            {
               dlg_rename_marker <= null;
            }
            return true;

         case @(this):
            switch(acName)
            {
               case TA_REPLAY_TIMER:
                  // 30ms interval
                  handleReplayTimer();

                  if(0 == (++autosave_replay_timer_count & 255))
                  {
                     Global.HandleAutosave();
                  }

                  script_host.processNextRequest();

                  return true;

               case TA_KEY_SPEED:
                  if(bpm_key_speed_idx > 0)
                  {
                     if(bpm_key_speed_idx >= 4)
                     {
                        bpm_key_speed_idx /= 2;
                     }
                     else
                     {
                        bpm_key_speed_idx--;
                     }
                     if(0 != bpm_key_speed_idx)
                     {
                        ta_key_speed.schedule();
                     }
                  }
                  return true;

               case TA_EXIT:
                  handleExitTimerExpired();
                  return true;

               case TA_REDRAW_ALL:
               {
                  ////trace "xxx onRedrawAllTimer expired";
                  // redraw();//renderAndRedrawAll();
                  UI.RedrawAll();
               }
               return true;

               case TA_REPLAYTIME:
               {
                  // trace "xxx onReplayTimeTimer";
                  if(replay.b_playing) ta_replaytime.scheduleShort();
                  else ta_replaytime.scheduleLong();
                  updateReplayTimeLabel(false/*bForceUpdate*/);
               }
               return true;

               case TA_SCENE_OVERLAY:
               {
                  if(f_scene_overlay.isFloatingLayerVisible())
                  {
                     f_scene_overlay.hide();
                  }
               }
               return true;

               case TA_SHOW_BPM:
                  handleShowBPMTimer();
                  return true;
            }
            return false;

         case @(bt_back):
            if(VMOD_LCTRL == UI.GetKeyMod())
            {
               moveToDefaultPosition();
            }
            else if(Button.ACTION_HOLD_CLICK == acName)
            {
               showPageParent();
            }
            else
            {
               showPagePrev();
            }
            return true;

         case @(bt_transport_markers):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               showTransportMarkersSaveMenu();
            }
            else
            {
               showTransportMarkersLoadMenu();
            }
            return true;

         case @(pm_transport_markers):
            // trace "xxx pm_transport_markers acName="+acName;
            switch(acName)
            {
               default:
               case PopupMenu.ACTION_CANCEL:
                  Global.Print("Close markers menu.");
                  return true;

               case "load_-1":
               case "load_1":
               case "load_2":
               case "load_3":
               case "load_4":
               case "load_5":
               case "load_6":
               case "load_7":
               case "load_8":
                  loadSongMarker(int(acName.replace("load_", ""))-1);
                  return true;

               case "save_-1":
               case "save_1":
               case "save_2":
               case "save_3":
               case "save_4":
               case "save_5":
               case "save_6":
               case "save_7":
               case "save_8":
                  saveSongMarker(int(acName.replace("save_", ""))-1);
                  return true;

               case "rename_1":
               case "rename_2":
               case "rename_3":
               case "rename_4":
               case "rename_5":
               case "rename_6":
               case "rename_7":
               case "rename_8":
                  last_marker_idx = int(acName.replace("rename_", "")-1);
                  handleBeginRenameMarker(last_marker_idx);
                  return true;
            }
            return true;

         case @(bt_transport_cycle):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               showTransportCycleMenu(false/*bFocusFirst*/);
            }
            else
            {
               transportCycle(maybe/*toggle*/);
            }
            return true;

         case @(pm_transport_cycle):
            // trace "xxx pm_transport_cycle acName="+acName;
            switch(acName)
            {
               default:
               case PopupMenu.ACTION_CANCEL:
                  Global.Print("Close cycle length menu.");
                  return true;

               case "loop_-1":
               case "loop_-2":
               case "loop_1":
               case "loop_2":
               case "loop_4":
               case "loop_6":
               case "loop_8":
               case "loop_12":
               case "loop_16":
               case "loop_24":
               case "loop_32":
                  setCycleLength(acName.replace("loop_", ""));
                  if(false == replay.b_cycle)
                     transportCycle(true);
                  return true;
            }
            return true;

         case @(bt_transport_prev_marker):
            transportPrevMarker();
            return true;

         case @(bt_transport_next_marker):
            transportNextMarker();
            return true;

         case @(bt_transport_prev):
            if(UI.GetKeyMod() == VMOD_LCTRL)
            {
               transportPrevBeat();
            }
            else
            {
               transportPrevBar();
            }
            return true;

         case @(bt_transport_next):
            if(UI.GetKeyMod() == VMOD_LCTRL)
            {
               transportNextBeat();
            }
            else
            {
               transportNextBar();
            }
            return true;

         case @(bt_songpos):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               saveSongMarker(-1);
            }
            else
            {
               transportLastLoadedMarker();
            }
            return true;

         case @(bt_transport_play):
            handleToggleReplay((Button.ACTION_HOLD_CLICK == acName)/*bShift*/);
            return true;

         case @(bt_transport_stop):
            if(Button.ACTION_RIGHT_CLICK == acName)
            {
               showAudioLiveRecDialog(maybe/*bForce=toggle*/, null/*recipient*/);
            }
            else if(Button.ACTION_HOLD_CLICK == acName)
            {
               showTransportStopMenu(false/*bFocusFirst*/);
            }
            else
            {
               if(replay.b_playing)
                  Global.cmd_song_stop();
               else
                  showTransportStopMenu(false/*bFocusFirst*/);
            }
            return true;

         case @(pm_transport_stop):
            // trace "xxx pm_transport_stop acName="+acName;
            switch(acName)
            {
               default:
               case PopupMenu.ACTION_CANCEL:
                  Global.Print("Close stop menu.");
                  return true;

               case "audio_start":
                  startAudioProcess();
                  return true;

               case "edit_config":
                  handleEditConfig();
                  return true;

               case "edit_config_local":
                  handleEditConfigLocal();
                  return true;

               case "audio_record":
                  showAudioRecordDialog(false/*bForce*/, null/*recipient*/, null/*namePrefixOrNull*/);
                  return true;

               case "audio_liverec":
                  showAudioLiveRecDialog(false/*bForce*/, null/*recipient*/);
                  return true;

               case "delay_calc":
                  showDelayCalculatorDialog(false/*bToggle*/);
                  return true;

               case "export_smf":
                  showExportSMFDialog();
                  return true;

               case "export_tiny":
                  showExportTinyDialog();
                  return true;

               case "metronome_toggle":
                  toggleMetronome();
                  return true;

               case "mtc_toggle":
                  toggleMTC();
                  return true;

               case "syx1play_toggle":
                  toggleSysExOutCh1PlayFrame();
                  return true;

               case "pagesysex_redirect":
                  togglePageSysExRedirect();
                  return true;

               case "freerun_loop":
                  toggleFreerunLoop();
                  return true;

               case "clear_midi_cache":
                  clearMIDICache();
                  return true;
            }
            return true;

         case @(fp_bpm):
            switch(acName)
            {
               case FloatParam.ACTION_VALUECHANGING:
                  handleBPMChanged(false);
                  break;

               case FloatParam.ACTION_VALUECHANGED:
                  handleBPMChanged(true);
                  break;

               case FloatParam.ACTION_VALUEUNCHANGED:
                  Global.RefocusDefault();
                  break;
            }
            return true;

         case @(bt_time):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               showBPMDialog();
            }
            else if(Button.ACTION_CLICK == acName)
            {
               handleTimeClicked(true/*bTap*/);
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               bpmInc(false/*bDouble*/);
               scheduleKeySpeed();
            }
            else if(Button.ACTION_WHEEL_DOWN == acName)
            {
               bpmDec(false/*bHalf*/);
               scheduleKeySpeed();
            }
            return true;

         case @(sb_status):
            if((TextField.ACTION_TABAUTOCOMPLETE == acName) || (TextField.ACTION_CURSORDOWN == acName))
            {
               handleCmdAutoComplete();
            }
            else if(TextField.ACTION_CURSORUP == acName)
            {
               handleCmdHistoryComplete();
            }
            else if(TextField.ACTION_TEXTENTERED == acName) // return
            {
               handleCmdExec();
            }
            else if(TextField.ACTION_RIGHT_CLICK == acName)
            {
               handleCmdShowDefaultActions();
            }
            return true;

         case @(cmdautocomplete_popup)
            if(ComboBoxPopup.ACTION_OPTIONSELECTED == acName)
            {
               iac <= _ac;
               handleCmdAutoCompleteSelection(cmdautocomplete_options.get(iac.getIntValue()));
            }
            else
            {
               // ACTION_CANCEL_OPTION_SELECTION
               UI.SetKeyboardFocus(sb_status);
               sb_status.onTabFocus();
               sb_status.selectNone();
               sb_status.moveCursorEnd();
            }
            return true;

         case @(cmdhistory_popup)
            if(ComboBoxPopup.ACTION_OPTIONSELECTED == acName)
            {
               iac <= _ac;
               handleCmdHistorySelection(cmd_history.get(iac.getIntValue()));
            }
            return true;

         case @(cmdactions_popup)
            if(ComboBoxPopup.ACTION_OPTIONSELECTED == acName)
            {
               iac <= _ac;
               handleCmdActionsSelection(cmd_actions.get(iac.getIntValue()));
            }
            return true;

      }

      return false;
   }

   // <method.png>
   public method tryAutoLockKeyJazz() {
      // called when pipe/node selection has changed
      if(STConfig.b_autolock_keyjazz)
      {
         if(pg_piperoot.getSelectedPipeIdx() > 0)
         {
            Node n <= pg_pipe.getSelectedScriptNode();
            if(null != n)
            {
               if(!n.nodeIsKeyJazzLocked())
                  n.nodeToggleKeyJazzLock();
            }
            else
            {
               current_song.releaseKeyJazzLock();
            }
         }
      }
   }

}
