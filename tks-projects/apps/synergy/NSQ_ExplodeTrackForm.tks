// ----
// ---- file   : NSQ_ExplodeTrackForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 26Apr2020
// ---- changed: 01Nov2023, 28Feb2025
// ----
// ----
// ----

module MNSQ_ExplodeTrackForm;

use namespace ui;
use namespace st2;


// <class.png>
class NSQ_ExplodeTrackForm extends XMLForm, ActionProvider {

   protected NodeSeqEditor *parent_editor;
   protected NSQ_ExplodeDialog *parent_dialog;

   protected NodeSeq      *seq;
   protected NSQ_Pattern  *pat;
   protected NSQ_Track    *track;
   protected DeviceIOPort *port;

   protected Label      *lb_tracknr;
   protected TextField  *tf_name;
   protected ComboBox   *cm_cat;
   protected ComboBox   *cm_type;
   protected ComboBox   *cm_bars;
   protected CheckBox   *cb_enable;



   // <init.png>
   public method init(NSQ_ExplodeDialog _parentDialog, NodeSeqEditor _parentEditor, int _trackNr) : boolean {

      parent_dialog <= _parentDialog;
      parent_editor <= _parentEditor;

      if(!initPakFile("NSQ_ExplodeTrackForm.xfm"))
      {
         trace "[---] failed to parse \"NSQ_ExplodeTrackForm.xfm\"";
         return false;
      }

      if(!autoResolveIds(this))
         return false;

      lb_tracknr.setCaption(_trackNr+":");
      cm_type.setOptions(NSQ_Track.explode_type_names);

      recursiveBuildTabCycleLists();

      return true;
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {

      layers.joinRR(layers,
                    [
                       tf_name,
                       cm_cat,
                       cm_type,
                       cm_bars,
                       cb_enable
                     ]
                    );
   }

   // <method_set.png>
   public method showTrack(NSQ_Pattern _pat, NSQ_Track _track, StringArray _catNames) {
      seq   <= parent_editor.seq;
      pat   <= _pat;
      track <= _track;
      port  <= seq.out_ports.get(track.track_idx);

      tf_name  .setText(port.info);
      cm_type  .setSelectedOption(track.explode_node_type);
      cm_cat   .setOptions(_catNames);
      cm_cat   .setSelectedOption(track.explode_node_cat);
      cm_bars  .setSelectedOption(track.explode_bars_per_pattern - 1);
      cb_enable.setSelected(track.b_explode);
   }

   // <ui_handle.png>
   protected method handleNameChanged() {
      port.info = tf_name.getText();
      Global.Print("Track / Port Name is \""+port.info+"\"");
   }

   // <ui_handle.png>
   protected method handleTypeChanged() {
      track.explode_node_type = cm_type.getSelectedOption();
      Global.Print("Target Node Type is "+cm_type.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleCategoryChanged() {
      track.explode_node_cat = cm_cat.getSelectedOption();
      Global.Print("Target Node Category is "+cm_cat.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleNumBarsChanged() {
      track.explode_bars_per_pattern = cm_bars.getSelectedOption() + 1;
      Global.Print("Target Node Num-Bars-Per-Pattern is "+track.explode_bars_per_pattern);
   }

   // <ui_handle.png>
   protected method handleEnableChanged() {
      track.b_explode = cb_enable.isSelected();
      Global.Print("Track-Explode is "+Utils.GetEnableString(track.b_explode));
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      switch(_k.pressed)
      {
      }

      return XMLForm::onKey(_k);
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      Layer ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      StringAction *sac;

      switch(@(ap))
      {
         default:
            break;

         case @(tf_name):
            handleNameChanged();
            if(TextField.ACTION_TEXTENTERED == acName)
               parent_dialog.refocusDefault();
            return true;

         case @(cm_type):
            handleTypeChanged();
            return true;

         case @(cm_cat):
            handleCategoryChanged();
            return true;

         case @(cm_bars):
            handleNumBarsChanged();
            return true;

         case @(cb_enable):
            handleEnableChanged();
            return true;
      }

      return XMLForm::consumeAction(_action);
   }

}
