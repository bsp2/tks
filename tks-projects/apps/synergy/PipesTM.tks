// ----
// ---- file   : PipesTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2014-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 04Sep2014, 06Sep2014, 09Sep2014, 10Sep2014, 11Sep2014, 19Sep2014, 28Apr2015
// ----          14Jul2017, 02Dec2018, 19Jun2021, 22Mar2024
// ----
// ----
// ----

module MPipesTM;

use namespace ui;
use namespace st2;


class PipesTM : TableModel {

   define int COL_ID          = 0;
   define int COL_SOLO        = 1;
   define int COL_MUTE        = 2;
   define int COL_NAME        = 3;
   define int COL_NUMNODES    = 4;

   public MIDIPipe *pipe;

   protected Button bt_solo_render;
   protected Button bt_solo_edit;

   protected Button bt_mute_render;
   protected Button bt_mute_edit;

   static StringArray pipe_solo_state_names = ["", "", "Solo"];
   static StringArray pipe_mute_state_names = ["Play", "Mute", "Play"];

   static StringArray state_names = ["Play", "Mute", "Solo"];


   public virtual getNumColumns() : int {
      return 4;
   }

   public virtual getColumnCaption(int _col) : String {
      return ["Id", "Solo", "Mute", "Name", "Num Nodes"] [_col];
   }

   public virtual getNumRows() : int {
      return current_pipe_root.maxPipes;
   }

   public virtual handleCursorIndexChanged() {
      if(-1 != cursor_index)
      {
         MIDIPipe pipe <= current_pipe_root.getPipeByIdx(cursor_index);

         if(null != pipe)
         {
            bt_solo_edit.setCaption       (pipe_solo_state_names.get(pipe.state));
            bt_solo_edit.setBackgroundTint(app_lnf.tv_pipeornode_solo_state_bgtints.get(pipe.state));
            bt_solo_edit.setCaptionTint   (app_lnf.tv_pipeornode_solo_state_fgtints.get(pipe.state));

            bt_mute_edit.setCaption       (pipe_mute_state_names.get(pipe.state));
            bt_mute_edit.setBackgroundTint(app_lnf.tv_pipeornode_mute_state_bgtints.get(pipe.state));
            bt_mute_edit.setCaptionTint   (app_lnf.tv_pipeornode_mute_state_fgtints.get(pipe.state));
         }
      }
   }

   public virtual getCellRenderer(int _col, int _row, int _visibleRow) : Layer {

      MIDIPipe pipe <= current_pipe_root.getPipeByIdx(_row);

      if(null != pipe)
      {
         Button *bt;

         if(COL_SOLO == _col)
         {
            if(_row != cursor_index)
            {
               bt <= bt_mute_render;
            }
            else
            {
               // Row is possibly being edited (at least it is selected..)
               bt <= bt_mute_edit;
            }

            bt.setCaption       (pipe_solo_state_names.get(pipe.state));
            bt.setBackgroundTint(app_lnf.tv_pipeornode_solo_state_bgtints.get(pipe.state));
            bt.setCaptionTint   (app_lnf.tv_pipeornode_solo_state_fgtints.get(pipe.state));

            bt.setInnerPadTop(1.0f);
            return bt;
         }
         else if(COL_MUTE == _col)
         {
            if(_row != cursor_index)
            {
               bt <= bt_mute_render;
            }
            else
            {
               // Row is possibly being edited (at least it is selected..)
               bt <= bt_mute_edit;
            }

            bt.setCaption       (pipe_mute_state_names.get(pipe.state));
            bt.setBackgroundTint(app_lnf.tv_pipeornode_mute_state_bgtints.get(pipe.state));
            bt.setCaptionTint   (app_lnf.tv_pipeornode_mute_state_fgtints.get(pipe.state));

            bt.setInnerPadTop(1.0f);
            return bt;
         }
      }

      Label lb <= TableModel::getCellRenderer(_col, _row, _visibleRow);

      if(COL_ID == _col)
         lb.setFontByName("big6");
      else if(COL_NAME == _col)
         lb.setFontByName("big4");
      else if(COL_NUMNODES == _col)
         lb.setFontByName("big6");

      return lb;
   }

   public virtual getCellCaption(int _col, _row) : String {

      MIDIPipe pipe <= current_pipe_root.getPipeByIdx(_row);
      Integer io;

      switch(_col)
      {
         case COL_ID:
            io = (_row + 1);
            return io.printf("%2d");

         case COL_NAME:
            if(null != pipe)
            {
               if(pipe.finalOutput)
                  return "<"+pipe.name+">";
               else
                  return pipe.name;
            }
            return "-";

         case COL_NUMNODES:
            if(null != pipe)
            {
               io = pipe.numNodes;
               return io.printf("%2d");
            }
            return "-";
      }
   }

   public method togglePipeSoloState(int _row) {
      MIDIPipe pipe <= current_pipe_root.getPipeByIdx(_row);

      if(null != pipe)
      {
         Node.TogglePipeSoloState(pipe);

         MIDIPipeRoot root <= pipe.root;

         Global.Print(state_names.get(pipe.state)+" pipe "+(pipe.pipeIdx+1)+"/"+root.numPipes+" \""+pipe.name+"\".");

         bt_solo_edit.setCaption       (pipe_solo_state_names.get(pipe.state));
         bt_solo_edit.setBackgroundTint(app_lnf.tv_pipeornode_solo_state_bgtints.get(pipe.state));
         bt_solo_edit.setCaptionTint   (app_lnf.tv_pipeornode_solo_state_fgtints.get(pipe.state));

         bt_mute_edit.setCaption       (pipe_mute_state_names.get(pipe.state));
         bt_mute_edit.setBackgroundTint(app_lnf.tv_pipeornode_mute_state_bgtints.get(pipe.state));
         bt_mute_edit.setCaptionTint   (app_lnf.tv_pipeornode_mute_state_fgtints.get(pipe.state));
      }
   }

   public method togglePipeMuteState(int _row) {
      MIDIPipe pipe <= current_pipe_root.getPipeByIdx(_row);

      if(null != pipe)
      {
         Node.TogglePipeMuteState(pipe);

         MIDIPipeRoot root <= pipe.root;

         Global.Print(state_names.get(pipe.state)+" pipe "+(pipe.pipeIdx+1)+"/"+root.numPipes+" \""+pipe.name+"\".");

         bt_solo_edit.setCaption       (pipe_solo_state_names.get(pipe.state));
         bt_solo_edit.setBackgroundTint(app_lnf.tv_pipeornode_solo_state_bgtints.get(pipe.state));
         bt_solo_edit.setCaptionTint   (app_lnf.tv_pipeornode_solo_state_fgtints.get(pipe.state));

         bt_mute_edit.setCaption       (pipe_mute_state_names.get(pipe.state));
         bt_mute_edit.setBackgroundTint(app_lnf.tv_pipeornode_mute_state_bgtints.get(pipe.state));
         bt_mute_edit.setCaptionTint   (app_lnf.tv_pipeornode_mute_state_fgtints.get(pipe.state));
      }
   }

   public virtual handleCellOnMouse(int _col, int _row, MouseEvent _ev) : boolean {

      if(COL_SOLO == _col)
      {
         if(bt_solo_edit.onMouse(_ev))
         {
            if(bt_solo_edit.hasKeyboardFocus())
            {
               if(_ev.leftButtonUp())
                  togglePipeSoloState(_row);
            }

            return true;
         }
      }
      else if(COL_MUTE == _col)
      {
         if(bt_mute_edit.onMouse(_ev))
         {
            if(bt_mute_edit.hasKeyboardFocus())
            {
               if(_ev.leftButtonUp())
                  togglePipeMuteState(_row);
            }

            return true;
         }
      }

      return false;
   }

   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 60 * STConfig.font_scaling;

         case COL_SOLO:
            return 80 * STConfig.font_scaling;

         case COL_MUTE:
            return 90 * STConfig.font_scaling;

         case COL_NAME:
            return 200;

         case COL_NUMNODES:
            return 60;
      }
   }

   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 60 * STConfig.font_scaling;

         case COL_SOLO:
            return 80 * STConfig.font_scaling;

         case COL_MUTE:
            return 90 * STConfig.font_scaling;

         case COL_NAME:
            return 2000;

         case COL_NUMNODES:
            return 60;
      }
   }

   protected method initButton(Button bt) {
      bt.initButton();
      bt.setInnerPadTop(0.0f);
      bt.setPadTop(0.0f);
      bt.setPadRight(14.0f);
      bt.setFontByName("big6");
   }

   public virtual initTableModel() {

      initButton(bt_solo_render);
      initButton(bt_solo_edit);

      initButton(bt_mute_render);
      initButton(bt_mute_edit);

      TableModel::initTableModel();
   }

}
