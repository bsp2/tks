// ----
// ---- file   : PageStart.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2014-2019 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 11Aug2014
// ---- changed: 12Aug2014, 15Aug2014, 04Sep2014, 05Sep2014, 20Sep2014, 21Sep2014, 23Sep2014
// ----          23Feb2015, 05Feb2016, 16Jun2017, 11Jan2019, 28Jul2023
// ----
// ----
// ----

module MPageStart;

use namespace ui;
use namespace st2;


// <class.png>
class PageStart : Page, MIDIMapContext {
   // (note) usually not reachable, remove ?

   define String MMT_CONFIG;
   define String MMT_CONFIG_SHOW;
   define String MMT_MIDIMAP;
   define String MMT_MIDIMAP_SHOW;
   define String MMT_MIDIMON;
   define String MMT_MIDIMON_SHOW;
   define String MMT_SYSEX;
   define String MMT_SYSEX_SHOW;
   define String MMT_PROJECT;
   define String MMT_PROJECT_SHOW;
   define String MMT_PIPES;
   define String MMT_PIPES_SHOW;

   define String MMT_QUIT;

   protected Button *bt_config;
   protected Button *bt_midimon;
   protected Button *bt_midimapper;
   protected Button *bt_sysex;
   protected Button *bt_pipemap;
   protected Button *bt_project;


   // <init.png>
   public method init() : boolean {

      if(!initPakFile("PageStart.xfm"))
         return false;

      autoResolveIds(this);

      initMMC();

      recursiveSetEnableCursorKeyTabCycling(false);

      return true;
   }

   // <midi.png>
   protected method initMMC() {

      mmcInit("PageStart");

      mmcAddTargetEx(MMT_PROJECT,       CLASS_BUTTON, SYN_BUTTON_CLICK, "Project", "Project", DPY_DEFAULT);
      mmcAddTargetEx(MMT_PROJECT_SHOW,  CLASS_BUTTON, SYN_BUTTON_CLICK, "Project", "Project", DPY_DEFAULT);
      mmcAddTargetEx(MMT_CONFIG,        CLASS_BUTTON, SYN_BUTTON_CLICK, "Setup",   "Settings", DPY_DEFAULT);
      mmcAddTargetEx(MMT_CONFIG_SHOW,   CLASS_BUTTON, SYN_BUTTON_CLICK, "Setup",   "Settings", DPY_DEFAULT);
      mmcAddTargetEx(MMT_MIDIMAP,       CLASS_BUTTON, SYN_BUTTON_CLICK, "Input",   "Input", DPY_DEFAULT);
      mmcAddTargetEx(MMT_MIDIMAP_SHOW,  CLASS_BUTTON, SYN_BUTTON_CLICK, "Input",   "Input", DPY_DEFAULT);
      mmcAddTargetEx(MMT_MIDIMON,       CLASS_BUTTON, SYN_BUTTON_CLICK, "Monitor", "MIDI Monitor", DPY_DEFAULT);
      mmcAddTargetEx(MMT_MIDIMON_SHOW,  CLASS_BUTTON, SYN_BUTTON_CLICK, "Monitor", "MIDI Monitor", DPY_DEFAULT);
      mmcAddTargetEx(MMT_SYSEX,         CLASS_BUTTON, SYN_BUTTON_CLICK, "SysEx",   "SysEx", DPY_DEFAULT);
      mmcAddTargetEx(MMT_SYSEX_SHOW,    CLASS_BUTTON, SYN_BUTTON_CLICK, "SysEx",   "SysEx", DPY_DEFAULT);
      mmcAddTargetEx(MMT_PIPES,         CLASS_BUTTON, SYN_BUTTON_CLICK, "Pipes",   "Pipes", DPY_DEFAULT);
      mmcAddTargetEx(MMT_PIPES_SHOW,    CLASS_BUTTON, SYN_BUTTON_CLICK, "Pipes",   "Pipes", DPY_DEFAULT);
      mmcAddTargetEx(MMT_QUIT,     CLASS_BUTTON, SYN_BUTTON_CLICK, "Quit",    "Quit", DPY_WARN);
   }

   // <midi.png>
   public virtual mmcHandleEvent(MIDIMapEvent _ev) : boolean {

      if(!mmcIsBindableEvent(_ev))
         return false;

      MIDIMapEvent boundEv <= mmcGetBindingByEvent(_ev);

      if(null != boundEv)
      {
         trace "xxx PageStart: boundEv target="+(boundEv.bound_target.target_name);

         switch(boundEv.bound_target.target_name)
         {
            case MMT_CONFIG:
               UI.SetKeyboardFocus(bt_config);
               root_form.queueSynKey(VKEY_RETURN, 0, _ev.class_type_ext);
               return true;

            case MMT_CONFIG_SHOW:
               UI.SetKeyboardFocus(bt_config);
               root_form.queueSynKeyTyped(VKEY_RETURN, 0);
               return true;

            case MMT_MIDIMAP:
               UI.SetKeyboardFocus(bt_midimapper);
               root_form.queueSynKey(VKEY_RETURN, 0, _ev.class_type_ext);
               return true;

            case MMT_MIDIMAP_SHOW:
               UI.SetKeyboardFocus(bt_midimapper);
               root_form.queueSynKeyTyped(VKEY_RETURN, 0);
               return true;

            case MMT_MIDIMON:
               UI.SetKeyboardFocus(bt_midimon);
               root_form.queueSynKey(VKEY_RETURN, 0, _ev.class_type_ext);
               return true;

            case MMT_MIDIMON_SHOW:
               UI.SetKeyboardFocus(bt_midimon);
               root_form.queueSynKeyTyped(VKEY_RETURN, 0);
               return true;

            case MMT_SYSEX:
               UI.SetKeyboardFocus(bt_sysex);
               root_form.queueSynKey(VKEY_RETURN, 0, _ev.class_type_ext);
               return true;

            case MMT_SYSEX_SHOW:
               UI.SetKeyboardFocus(bt_sysex);
               root_form.queueSynKeyTyped(VKEY_RETURN, 0);
               return true;

            case MMT_PROJECT:
               UI.SetKeyboardFocus(bt_project);
               root_form.queueSynKey(VKEY_RETURN, 0, _ev.class_type_ext);
               return true;

            case MMT_PROJECT_SHOW:
               UI.SetKeyboardFocus(bt_project);
               root_form.queueSynKeyTyped(VKEY_RETURN, 0);
               return true;

            case MMT_PIPES:
               UI.SetKeyboardFocus(bt_pipemap);
               root_form.queueSynKey(VKEY_RETURN, 0, _ev.class_type_ext);
               return true;

            case MMT_PIPES_SHOW:
               UI.SetKeyboardFocus(bt_pipemap);
               root_form.queueSynKeyTyped(VKEY_RETURN, 0);
               return true;

            case MMT_QUIT:
               Global.HandleOnClose();
               return true;
         }
      }

      return false;
   }

   // <ui_cmd.png>
   public virtual cmdGetAvailableCommands() : StringArray {
      return ["hello\t<to>",
              "add\t<arg1> <arg2>",
              "name\t<name>"
              ];
   }

   // <ui_cmd.png>
   public virtual cmdFindArgAutoCompletions(String _cmd, int _argIdx, String _prefix) : StringArray {
      local StringArray r;
      switch(_cmd)
      {
         case "hello":
            break;

         case "add":
            break;

         case "name":
            boolean bBlank = _prefix.isBlank();
            if bBlank || (current_song.song_name <= _prefix)
               r.add(current_song.song_name);
            if bBlank || (current_song.author_name <= _prefix)
               r.add(current_song.author_name);
            return deref r;
      }
      return null;
   }

   // <ui_cmd.png>
   public virtual cmdGetAvailableArgs(String _cmd, int _argIdx) : StringArray {
      switch(_cmd)
      {
         case "hello":
            switch(_argIdx)
            {
               case 0:
                  return ["world", "there"];
            }
            break;

         case "add":
         case "name":
            break;
      }
      return null;
   }

   // <ui_cmd.png>
   public virtual cmdExec(StringArray _argv) : boolean {
      switch(_argv.get(0))
      {
         case "hello":
            if(2 == _argv.numElements)
            {
               trace "xxx PageStart::pageCmdExec: \"hello, "+_argv.get(1)+"!\"";
               return true;
            }
            break;

         case "add":
            if(3 == _argv.numElements)
            {
               trace "xxx cmd add: \""+_argv.get(1)+"\" + \""+_argv.get(2)+"\" = "+(float(_argv.get(1)) + float(_argv.get(2)));
               return true;
            }
            break;
      }
      return false;
   }

   // <ui.png>
   public virtual pageFocusDefault() {
      UI.SetKeyboardFocus(bt_pipemap);
   }

   // <ui_kbd.png>
   public virtual pageForceKbdFocusSelMode() {
      return true;
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      _retLayers = [
         bt_project, bt_midimapper,
         bt_sysex,
         bt_config, bt_midimon,
         bt_pipemap
                              ];
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {

      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      //trace "xxx PageStart::consumeAction: acName=\""+acName+"\".";

      switch(@(ap))
      {
         case @(bt_config):
            root_form.showPage(RootForm.PAGE_CONFIG, true);
            return true;

         case @(bt_midimapper):
            root_form.showPage(RootForm.PAGE_MIDIMAPPER, true);
            return true;

         case @(bt_midimon):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               root_form.showPage(RootForm.PAGE_OUTPUTMON, true);
            }
            else
            {
               root_form.showPage(RootForm.PAGE_MIDIMON, true);
            }
            return true;

         case @(bt_sysex):
            root_form.showPage(RootForm.PAGE_SYSEX, true);
            return true;

         case @(bt_project):
            root_form.showPage(RootForm.PAGE_PROJECT, true);
            return true;

         case @(bt_pipemap):
            root_form.showPage(RootForm.PAGE_PIPEMAP, true);
            return true;
      }

      return Page::consumeAction(_ac);
   }

}
