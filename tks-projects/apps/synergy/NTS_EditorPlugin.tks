// ----
// ---- file   : NTS_EditorPlugin.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2016-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- changed: 09Jul2016, 10Jul2016, 11Jul2016, 12Jul2016, 13Jul2016, 17Jul2016, 08Oct2016
// ----          09Oct2016, 11Oct2016, 15Oct2016, 16Oct2016, 11Dec2016, 12Dec2016, 19Dec2016
// ----          19Jan2017, 23Jan2017, 31Jan2017, 03Feb2017, 09Feb2017, 26Feb2017, 05Mar2017
// ----          10Mar2017, 18Mar2017, 24Mar2017, 01Jun2017, 16Jun2017, 14Jul2017, 01Sep2017
// ----          12Oct2017, 13Oct2017, 14Oct2017, 10Nov2017, 11Nov2017, 25Nov2017, 29Nov2017
// ----          30Nov2017, 02Dec2017, 04Jan2018, 12May2018, 28May2018, 10Jun2018, 17Jun2018
// ----          26Nov2018, 27Nov2018, 01Dec2018, 01Mar2019, 25Jun2019, 20Jul2019, 29Aug2019
// ----          08Sep2019, 10Sep2019, 20Sep2019, 22Sep2019, 02Oct2019, 03Oct2019, 04Oct2019
// ----          05Oct2019, 06Oct2019, 07Oct2019, 08Oct2019, 09Oct2019, 14Oct2019, 19Oct2019
// ----          24Oct2019, 25Oct2019, 30Oct2019, 01Nov2019, 02Nov2019, 08Nov2019, 28Feb2020
// ----          25Apr2020, 26Apr2020, 09May2020, 26Oct2020, 27Oct2020, 30Oct2020, 02Nov2020
// ----          06Nov2020, 13Nov2020, 26Jan2021, 13May2021, 18Jun2021, 25Jun2021, 08Apr2022
// ----          07May2022, 22Oct2022, 25Nov2022, 11Feb2023, 21Jun2023, 23Jun2023, 01Sep2023
// ----          05Sep2023, 21Sep2023, 03Oct2023, 06Oct2023, 08Oct2023, 14Oct2023, 01Nov2023
// ----          10Nov2023, 27Nov2023, 28Nov2023, 01Dec2023, 02Dec2023, 07Dec2023, 03Feb2024
// ----          22Mar2024, 24Mar2024, 05Oct2024
// ----
// ----
// ----

module MNTS_EditorPlugin;

use namespace ui;
use namespace st2;


// <class.png>
class NTS_EditorPlugin {
   explain "Base class for NodeTrigSeq hardware interfaces (e.g. Linnstrument, see NTS_Linnstrument.tks)";

   MIDISynthProfile  *msp;
   NodeTrigSeqEditor *editor;
   NTS_Grid          *grid;
   NodeTrigSeq       *seq;

   STX_MIDIInDevice  *in_dev;   // e.g. "Linnstrument"
   STX_MIDIOutDevice *out_dev;


   // <ui_show.png>
   public method init(MIDISynthProfile _msp) : boolean {
      // Called when plugin instance is created (while parsing MIDISynthProfile)
      msp <= _msp;
      Global.Debug("NTS_EditorPlugin::init: this="+#(this)+" msp="+((null != msp)?msp.midi_profile_id:"?"));
      return true;
   }

   // <ui_show.png>
   public method showNode(NodeTrigSeqEditor  _editor,
                          STX_MIDIInDevice   _inDev,
                          STX_MIDIOutDevice  _outDev
                          ) {
      editor  <= _editor;
      grid    <= _editor.grid;
      seq     <= _editor.seq;
      in_dev  <= _inDev;
      out_dev <= _outDev;

      Global.Debug("NTS_EditorPlugin::showNode: editor="+#(editor)+" inDev="+in_dev.getAliasOrDeviceName()+" outDev="+out_dev.getAliasOrDeviceName()+" seq="+#(seq)+" this="+#(this));
   }

   // <ui_hide.png>
   public method leaveNode() {
      Global.Debug("NTS_EditorPlugin::leaveNode: this="+#(this));
      if(null != seq)
      {
         seq.setEditorPlugin(null);
      }
   }

   // <ui_show.png>
   public method handlePatternChanged() {
      // Called from UI thread when edit pattern has changed
      // Global.Debug("NTS_EditorPlugin::handlePatternChanged: this="+#(this));
   }

   // <ui_handle.png>
   public method handlePatternAllocChanged() {
      // Called from UI thread when pattern allocation changed (new, clone, free, ..)
   }

   // <ui.png>
   public method handleCursorPosChanged() {
      // Called from UI thread when cursor is moved via regular UI (e.g. mouse click)
   }

   // <replay.png>
   public method handleNodeReset() {
      // Called from replay thread when node is reset
   }

   // <ui_render.png>
   public method redraw() {
      // Called when grid is redrawn
   }

   // <midi_mml.png>
   public method mmlHandleEventUI(MIDIMapEvent _ev) : boolean {
      // called from UI thread
      return false;
   }

   // <ui_timer.png>
   public method handleReplayTickUI() {
      // called from UI thread
   }

   // <replay.png>
   public method processFrame(MIDIPipeFrame _framePlay,
                              MIDIPipeFrame _frameRec,
                              MIDIPipeFrame _frameCaptureOrNull,
                              boolean       _bMuted,
                              boolean       _bPlaySeq
                              ) {
      // Called from replay thread
      //  (note) frameCaptureOrNull should receive events generated only by this node
   }

}
