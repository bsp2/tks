// ----
// ---- file   : MIDIMapDefs.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2012-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 29Feb2012
// ----
// ---- changed: 09Nov2012, 13Nov2012, 04Jan2013, 25Mar2013, 09Apr2013, 14Apr2013, 11Aug2014
// ----          13Aug2014, 14Aug2014, 15Aug2014, 21Aug2014, 15Sep2014, 29Sep2014, 25Nov2014
// ----          02Feb2016, 06Oct2019, 29Mar2021, 18Dec2021, 29Sep2022, 10Oct2022, 08Feb2023
// ----          14Oct2023
// ----
// ----
// ----

module MMIDIMapDefs;

use namespace st2;


class MIDIMapDefs {

   define int TYPE_NOTE_OFF              =  0;  // 0x8x note-off
   define int TYPE_NOTE_ON               =  1;  // 0x9x note-on
   define int TYPE_POLY_PRESSURE         =  2;  // 0xAx polyphonic key pressure
   define int TYPE_CC                    =  3;  // 0xBx continuous controller (7bit or 14bit) (or channel mode msg (local on/off, poly on/off, ..)
   define int TYPE_PROGRAM_CHANGE        =  4;  // 0xCx program change
   define int TYPE_CHANNEL_PRESSURE      =  5;  // 0xDx channel pressure
   define int TYPE_PITCHBEND             =  6;  // 0xEx pitch bend
   define int TYPE_SYSEX                 =  7;  // 0xF0 sys ex (see MIDIMapEvent.sysex_buffer)
   define int TYPE_SYSCOM_TIMECODE       =  8;  // 0xF1 MIDI quarter frame time code
   define int TYPE_SYSCOM_SONG_POSITION  =  9;  // 0xF2 song position pointer (2 bytes follow, beat LSB+MSB)
   define int TYPE_SYSCOM_SONG_SELECT    = 10;  // 0xF3 song select (1 byte follows, song nr)
   define int TYPE_SYSCOM_F4             = 11;  // 0xF4 (undefined)
   define int TYPE_SYSCOM_F5             = 12;  // 0xF5 (undefined)
   define int TYPE_SYSCOM_TUNE_REQUEST   = 13;  // 0xF6 tune request
   define int TYPE_SYSRT_TIMING_CLOCK    = 14;  // 0xF8 timing clock (24ppq)
   define int TYPE_SYSRT_F9              = 15;  // 0xF9 (undefined)
   define int TYPE_SYSRT_START           = 16;  // 0xFA start
   define int TYPE_SYSRT_CONTINUE        = 17;  // 0xFB continue
   define int TYPE_SYSRT_STOP            = 18;  // 0xFC stop
   define int TYPE_SYSRT_FD              = 19;  // 0xFD (undefined)
   define int TYPE_SYSRT_ACTIVE_SENSING  = 20;  // 0xFE active sensing
   define int TYPE_SYSRT_SYSTEM_RESET    = 21;  // 0xFF system reset
   define int TYPE_RPN                   = 22;  // registered parameter number (7bit or 14bit)
   define int TYPE_NRPN                  = 23;  // (non-)registered parameter number (7bit or 14bit)

   define int TYPEX_NOTE_NUMBER          = 64;
   define int TYPEX_NOTE_VELOCITY_MUL    = 65;
   define int TYPEX_NOTE_VELOCITY_ADD    = 66;
   define int TYPEX_NOTE_DURATION        = 67;

   define int TYPEX_CUSTOM_WIDGET        = 100;  // MSP <widget> elements


   define int FLT_OFF = 0; // disable filter
   define int FLT_CEQ = 1; // match if event.argn == flt_argn_val
   define int FLT_CNE = 2; // match if event.argn != flt_argn_val
   define int FLT_CGE = 3; // match if event.argn >= flt_argn_val
   define int FLT_CGT = 4; // match if event.argn >  flt_argn_val
   define int FLT_CLE = 5; // match if event.argn <= flt_argn_val
   define int FLT_CLT = 6; // match if event.argn <  flt_argn_val


   // for UI event classification
   define int CLASS_UNKNOWN       = 0;
   define int CLASS_BUTTON        = 1;
   define int CLASS_VALUE         = 2;  // pots
   define int CLASS_DELTA         = 3;  // rotaries (1..63=inc, 64..127=dec)
   define int CLASS_DELTA_SIGNBIT = 4;  // rotaries (1..63=inc, 1..63+bit6=dec)

   // for extended UI event classification
   define int SYN_NONE               = 0;
   define int SYN_BUTTON_CLICK       = 1;  // supports alt. hold function
   define int SYN_BUTTON_HOLD_BEGIN  = 2;
   define int SYN_BUTTON_HOLD_END    = 3;
   define int SYN_BUTTON_MOD         = 4;
   define int SYN_BUTTON_KEYREPEAT   = 5;  // press/release, no hold alt. function possible. repeat done via synkey
   define int SYN_BUTTON_REPEAT      = 6;  // via MIDI repeat timer
   define int SYN_BUTTON_SELECT      = 7;  // like CLICK but don't flash pad
   define int SYN_VALUE              = 8;  // [13Jun2023] add synthetic value type for SL_MK3 script / injectFrameTransform()


   // Morph/Transform:
   define int SRC_FLT_OFF             = 0;  // match any
   define int SRC_FLT_RANGE           = 1;  // (arg1 <= cval < arg2)
   define int SRC_FLT_RANGE_CLIP      = 2;  // (arg1 <= cval < arg2), always match, clip to arg1/arg2
   define int SRC_FLT_CLIP_MIN        = 3;  // always match, clip to arg1
   define int SRC_FLT_CLIP_MAX        = 4;  // always match, clip to arg2
   define int SRC_FLT_MATCH           = 5;  // cval == arg1
   define int SRC_FLT_SPLIT_START     = 6;  // cval >= arg1
   define int SRC_FLT_SPLIT_END       = 7;  // cval < arg2

   static StringArray morph_src_flt_names = ["Off", "Range", "Range Clip", "Clip Min", "Clip Max", "Match", "Split Start", "Split End"];

   static StringArray morph_src_flt_tooltips = ["Off: Match any.",
                                                "Range: (arg1 <= val < arg2).",
                                                "Range Clip: Always match, clip to arg1 / arg2.",
                                                "Clip Min: Always match, clip to arg1.",
                                                "Clip Max: Always match, clip to arg2.",
                                                "Match: (val == arg1).",
                                                "Split Start: (val >= arg1).",
                                                "Split End: (val < arg2)."
                                                ];

   define int DST_OP_DEFAULT             = 0;
   define int DST_OP_TRANSPOSE           = 1;  // cval += dst.arg1
   define int DST_OP_REMAP               = 2;  // (src.arg1..src.arg2) => (dst.arg1..dst.arg2)
   define int DST_OP_REPLACE             = 3;  // always replace by arg1
   define int DST_OP_DISCARD             = 4;  // discard event if src_flt matches
   define int DST_OP_DISCARD_YAMAHA_BULK = 5;  // discard Yamaha bulk sysex events (F0 43 00 ..) if src_flt matches ("hack" for Montage 7)

   static StringArray morph_dst_op_names = ["Default", "Transpose", "Remap", "Replace", "Discard", "Discard Yamaha Bulk"];

   static StringArray morph_dst_op_tooltips =  ["Default: Map val to target default range.",
                                                "Transpose: Map val to target default range and add constant value (arg1).",
                                                "Remap: Map src.arg1 .. src.arg2 range to dst.arg1 .. dst.arg2 range.",
                                                "Replace: Replacing val by arg1.",
                                                "Discard: Discard event if source filter matches."
                                                ];

   // Display types (e.g. to determine bidi-controller button/pad colors)
   define int DPY_DEFAULT  = 0;
   define int DPY_ADD      = 1;
   define int DPY_REMOVE   = 2;
   define int DPY_WARN     = 3;


   public static IsSystemEvent(int _type) : boolean {
      switch(_type)
      {
         // // case TYPE_SYSEX:
         case TYPE_SYSCOM_TIMECODE:
         case TYPE_SYSCOM_SONG_POSITION:
         case TYPE_SYSCOM_SONG_SELECT:
         case TYPE_SYSCOM_F4:
         case TYPE_SYSCOM_F5:
         case TYPE_SYSCOM_TUNE_REQUEST:
         case TYPE_SYSRT_TIMING_CLOCK:
         case TYPE_SYSRT_F9:
         case TYPE_SYSRT_START:
         case TYPE_SYSRT_CONTINUE:
         case TYPE_SYSRT_STOP:
         case TYPE_SYSRT_FD:
         case TYPE_SYSRT_ACTIVE_SENSING:
         case TYPE_SYSRT_SYSTEM_RESET:
            return true;
      }
      return false;
   }
}
