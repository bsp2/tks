// ----
// ---- file   : NSQ_TrackerState.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- created: 06Apr2020
// ---- changed: 07Apr2020, 08Apr2020, 09Apr2020, 11Apr2020, 12Apr2020, 13Apr2020, 14Apr2020
// ----          15Apr2020, 16Apr2020, 17Apr2020, 18Apr2020, 20Apr2020, 24Apr2020, 25Apr2020
// ----          26Apr2020, 06May2020, 09May2020, 13May2020, 30Oct2020, 06Nov2020, 07Nov2020
// ----          08Nov2020, 09Nov2020, 10Nov2020, 14Nov2020, 15Nov2020, 27Jan2021, 23May2021
// ----          02Jun2021, 14Jun2021, 20Jun2021, 21Jun2021, 18Jul2021, 01Jan2022, 24Feb2022
// ----          24Jun2022, 03Nov2022, 07Mar2023, 22Jun2023, 02Sep2023, 03Sep2023, 20Sep2023
// ----          13Oct2023, 14Oct2023, 15Oct2023, 06Oct2024, 28Feb2025
// ----
// ----
// ----

module MNSQ_TrackerState;

use namespace ui;
use namespace st2;


// <class.png>
class NSQ_TrackerState {
   boolean b_write_instrnr;
   boolean b_write_noteon_velocity;
   float   write_noteon_velocity;     // (todo) track settings override this
   boolean b_write_noteoff_velocity;
   float   write_noteoff_velocity;    // (todo) track settings override this
   boolean b_write_duration;
   float   write_duration;            // (todo) track settings override this
   byte    ui_last_view;
   int     pv_zoom_preset_1;
   int     pv_zoom_preset_2;
   int     pv_zoom_preset_idx;
   int     pv_step_resolution;
   boolean b_ui_timing_view;
   boolean b_ui_timing_view_move_lock;
   boolean b_ui_piano;


   // <method_init.png>
   public method init() {
      b_write_instrnr            = false;
      b_write_noteon_velocity    = true;
      write_noteon_velocity      = 0x40;
      b_write_noteoff_velocity   = false;
      write_noteoff_velocity     = 0;
      b_write_duration           = false;
      write_duration             = current_song.ppq / 4.0;
      ui_last_view               = NodeTrackerEditor.VIEW_PATTERN;
      pv_zoom_preset_1           = STConfig.node_tracker_zoom_preset_1;
      pv_zoom_preset_2           = STConfig.node_tracker_zoom_preset_2;
      pv_zoom_preset_idx         = 0;
      pv_step_resolution         = current_song.ppq / 4.0;
      b_ui_timing_view           = false;
      b_ui_timing_view_move_lock = false;
      b_ui_piano                 = false;
   }

   // <method.png>
   public method copyFrom(NodeTracker n) {
      Global.Debug2("NSQ_TrackerState: backup from n="+#(n));
      b_write_instrnr            = n.b_write_instrnr;
      b_write_noteon_velocity    = n.b_write_noteon_velocity;
      write_noteon_velocity      = n.write_noteon_velocity;
      b_write_noteoff_velocity   = n.b_write_noteoff_velocity;
      write_noteoff_velocity     = n.write_noteoff_velocity;
      b_write_duration           = n.b_write_duration;
      write_duration             = n.write_duration;
      ui_last_view               = n.ui_last_view;
      pv_zoom_preset_1           = n.pv_zoom_preset_1;
      pv_zoom_preset_2           = n.pv_zoom_preset_2;
      pv_zoom_preset_idx         = n.pv_zoom_preset_idx;
      pv_step_resolution         = n.pv_step_resolution;
      b_ui_timing_view           = n.b_ui_timing_view;
      b_ui_timing_view_move_lock = n.b_ui_timing_view_move_lock;
      b_ui_piano                 = n.b_ui_piano;
   }

   // <method.png>
   public method copyTo(NodeTracker n) {
      Global.Debug2("NSQ_TrackerState: restore to n="+#(n));
      n.b_write_instrnr            = b_write_instrnr;
      n.b_write_noteon_velocity    = b_write_noteon_velocity;
      n.write_noteon_velocity      = write_noteon_velocity;
      n.b_write_noteoff_velocity   = b_write_noteoff_velocity;
      n.write_noteoff_velocity     = write_noteoff_velocity;
      n.b_write_duration           = b_write_duration;
      n.write_duration             = write_duration;
      n.ui_last_view               = ui_last_view;
      n.pv_zoom_preset_1           = pv_zoom_preset_1;
      n.pv_zoom_preset_2           = pv_zoom_preset_2;
      n.pv_zoom_preset_idx         = pv_zoom_preset_idx;
      n.pv_step_resolution         = pv_step_resolution;
      n.b_ui_timing_view           = b_ui_timing_view;
      n.b_ui_timing_view_move_lock = b_ui_timing_view_move_lock;
      n.b_ui_piano                 = b_ui_piano;
   }

   // <save.png>
   public method saveState(Stream ofs) {
      // ver
      ofs.i16 = 1;

      ofs.i8  = b_write_instrnr;
      ofs.i8  = b_write_noteon_velocity;
      ofs.f32 = write_noteon_velocity;
      ofs.i8  = b_write_noteoff_velocity;
      ofs.f32 = write_noteoff_velocity;
      ofs.i8  = b_write_duration;
      ofs.f32 = write_duration;
      ofs.i8  = ui_last_view;
      ofs.i32 = pv_zoom_preset_1;
      ofs.i32 = pv_zoom_preset_2;
      ofs.i8  = pv_zoom_preset_idx;
      ofs.i32 = pv_step_resolution;
      ofs.i8  = b_ui_timing_view;
      ofs.i8  = b_ui_timing_view_move_lock;
      ofs.i8  = b_ui_piano;
   }

   // <load.png>
   public method loadState(Stream ifs) : boolean {
      // ver
      short ver = ifs.u16;
      if(ver >= 1)
      {
         b_write_instrnr            = ifs.i8;
         b_write_noteon_velocity    = ifs.b8;
         write_noteon_velocity      = ifs.f32;
         b_write_noteoff_velocity   = ifs.b8;
         write_noteoff_velocity     = ifs.f32;
         b_write_duration           = ifs.b8;
         write_duration             = ifs.f32;
         ui_last_view               = ifs.i8;
         pv_zoom_preset_1           = ifs.i32;
         pv_zoom_preset_2           = ifs.i32;
         pv_zoom_preset_idx         = ifs.i8;
         pv_step_resolution         = ifs.i32;
         b_ui_timing_view           = ifs.b8;
         b_ui_timing_view_move_lock = ifs.b8;
         b_ui_piano                 = ifs.b8;

         return true;
      }
      else
      {
         trace "[---] NSQ_TrackerState::loadState: invalid ver="+ver;
      }
      return false;
   }
}
