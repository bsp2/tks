// ----
// ---- file   : Montage_ElementFilterForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2022 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 27Oct2022
// ---- changed: 04Nov2022, 10Nov2022, 17Nov2022
// ----
// ----
// ----

module MMontage_ElementFilterForm;

use namespace ui;
use namespace st2;


// <class.png>
class Montage_ElementFilterForm extends Montage_ParamForm {
   // MontagePartNormalElementFilterEQLFO
   //  (note) extended LFO settings are stored in MontagePartNormalElementOscAmpPitch

   int element_idx;

   protected FloatParam *fp_filter_keyfollow;
   protected FloatParam *fp_filter_hpf_keyfollow;

   protected FloatParam *fp_feg_time_keyfollow_centernote;

   protected FloatParam *fp_cutoffscl_bp_1;
   protected FloatParam *fp_cutoffscl_bp_2;
   protected FloatParam *fp_cutoffscl_bp_3;
   protected FloatParam *fp_cutoffscl_bp_4;

   protected FloatParam *fp_eq_type;
   protected FloatParam *fp_eq_q;      // 0.7..10.3 (PEQ only)
   protected FloatParam *fp_eq1_freq;  // 50.1..2.00k (2 Band)   139.7..12.9k (P.EQ)
   protected FloatParam *fp_eq1_gain;  // -12.00dB .. +12.00dB
   protected FloatParam *fp_eq2_freq;  // 503.8 .. 10.1k  (2band only)
   protected FloatParam *fp_eq2_gain;  // -12.00dB .. +12.00dB (2band only)

   protected FloatParam *fp_lfo_ext;
   protected FloatParam *fp_lfo_speed;

   protected StringArray keyfollow_options;
   protected StringArray note_options;
   protected StringArray eq_q_options;

   static StringArray eq_freq_options = [
      // low:
      "50.1", "51.2", "52.3", "53.3", "54.4", "56.1", "58.3", "60.4", "62.5", "64.7", "66.8", "69.0", "71.1", "73.3", "75.4", "77.5", "79.7", "81.8", "84.0", "86.1", "88.2", "90.4", "92.5", "94.7", "96.8", "99.0", "101.1", "103.2", "105.4", "107.5", "109.7", "114.0", "118.2", "122.5", "126.8", "131.1", "135.4",
      // low+mid:
      "139.7", "143.9", "148.2", "152.5", "156.8", "161.1", "165.4", "169.6", "173.9", "178.2", "182.5", "186.8", "191.1", "195.3", "199.6", "203.9", "208.2", "212.5", "216.8", "222.8", "231.3", "239.9", "248.5", "257.0", "265.6", "274.2", "282.7", "291.3", "299.9", "308.4", "317.0", "325.6", "334.1", "342.7", "351.3", "359.8", "368.4", "377.0", "385.5", "394.1", "402.7", "411.3", "419.8", "428.4", "437.0", "452.4", "469.5", "486.6", "503.8", "520.9", "538.1", "555.2", "572.3", "589.5", "606.6", "623.7", "640.9", "658.0", "675.1", "692.3", "709.4", "726.5", "743.7", "760.8", "778.0", "795.1", "812.2", "829.4", "846.5", "863.6", "884.2", "918.5", "952.7", "987.0", "1.02k", "1.06k", "1.09k", "1.12k", "1.16k", "1.19k", "1.23k", "1.26k", "1.30k", "1.33k", "1.36k", "1.40k", "1.43k", "1.47k", "1.50k", "1.54k", "1.57k", "1.60k", "1.64k", "1.67k", "1.71k", "1.74k", "1.80k", "1.86k", "1.93k", "2.00k",
      // mid/high:
      "2.07k", "2.14k", "2.21k", "2.28k", "2.34k", "2.41k", "2.48k", "2.55k", "2.62k", "2.69k", "2.76k", "2.82k", "2.89k", "2.96k", "3.03k", "3.10k", "3.17k", "3.24k", "3.30k", "3.37k", "3.44k", "3.51k", "3.65k", "3.78k", "3.92k", "4.06k", "4.19k", "4.33k", "4.47k", "4.61k", "4.74k", "4.88k", "5.02k", "5.15k", "5.29k", "5.43k", "5.57k", "5.70k", "5.84k", "5.98k", "6.11k", "6.25k", "6.39k", "6.53k", "6.66k", "6.80k", "6.94k", "7.13k", "7.40k", "7.68k", "7.95k", "8.23k", "8.50k", "8.77k", "9.05k", "9.32k", "9.60k", "9.87k", "10.1k",
      // high:
      "10.4k", "10.7k", "11.0k", "11.2k", "11.5k", "11.8k", "12.1k", "12.3k", "12.6k", "12.9k", "13.2k", "13.4k", "13.7k", "14.0k"
                                            ];

   static StringArray eq1_2band_freq_options = [
      "50.1", "51.2", "52.3", "53.3", "54.4", "56.1", "58.3", "60.4", "62.5", "64.7", "66.8", "69.0", "71.1", "73.3", "75.4", "77.5", "79.7", "81.8", "84.0", "86.1", "88.2", "90.4", "92.5", "94.7", "96.8", "99.0", "101.1", "103.2", "105.4", "107.5", "109.7", "114.0", "118.2", "122.5", "126.8", "131.1", "135.4",
      "139.7", "143.9", "148.2", "152.5", "156.8", "161.1", "165.4", "169.6", "173.9", "178.2", "182.5", "186.8", "191.1", "195.3", "199.6", "203.9", "208.2", "212.5", "216.8", "222.8", "231.3", "239.9", "248.5", "257.0", "265.6", "274.2", "282.7", "291.3", "299.9", "308.4", "317.0", "325.6", "334.1", "342.7", "351.3", "359.8", "368.4", "377.0", "385.5", "394.1", "402.7", "411.3", "419.8", "428.4", "437.0", "452.4", "469.5", "486.6", "503.8", "520.9", "538.1", "555.2", "572.3", "589.5", "606.6", "623.7", "640.9", "658.0", "675.1", "692.3", "709.4", "726.5", "743.7", "760.8", "778.0", "795.1", "812.2", "829.4", "846.5", "863.6", "884.2", "918.5", "952.7", "987.0", "1.02k", "1.06k", "1.09k", "1.12k", "1.16k", "1.19k", "1.23k", "1.26k", "1.30k", "1.33k", "1.36k", "1.40k", "1.43k", "1.47k", "1.50k", "1.54k", "1.57k", "1.60k", "1.64k", "1.67k", "1.71k", "1.74k", "1.80k", "1.86k", "1.93k", "2.00k",
                                            ];

   static StringArray eq1_peq_freq_options = [
      "139.7", "143.9", "148.2", "152.5", "156.8", "161.1", "165.4", "169.6", "173.9", "178.2", "182.5", "186.8", "191.1", "195.3", "199.6", "203.9", "208.2", "212.5", "216.8", "222.8", "231.3", "239.9", "248.5", "257.0", "265.6", "274.2", "282.7", "291.3", "299.9", "308.4", "317.0", "325.6", "334.1", "342.7", "351.3", "359.8", "368.4", "377.0", "385.5", "394.1", "402.7", "411.3", "419.8", "428.4", "437.0", "452.4", "469.5", "486.6", "503.8", "520.9", "538.1", "555.2", "572.3", "589.5", "606.6", "623.7", "640.9", "658.0", "675.1", "692.3", "709.4", "726.5", "743.7", "760.8", "778.0", "795.1", "812.2", "829.4", "846.5", "863.6", "884.2", "918.5", "952.7", "987.0", "1.02k", "1.06k", "1.09k", "1.12k", "1.16k", "1.19k", "1.23k", "1.26k", "1.30k", "1.33k", "1.36k", "1.40k", "1.43k", "1.47k", "1.50k", "1.54k", "1.57k", "1.60k", "1.64k", "1.67k", "1.71k", "1.74k", "1.80k", "1.86k", "1.93k", "2.00k",
      "2.07k", "2.14k", "2.21k", "2.28k", "2.34k", "2.41k", "2.48k", "2.55k", "2.62k", "2.69k", "2.76k", "2.82k", "2.89k", "2.96k", "3.03k", "3.10k", "3.17k", "3.24k", "3.30k", "3.37k", "3.44k", "3.51k", "3.65k", "3.78k", "3.92k", "4.06k", "4.19k", "4.33k", "4.47k", "4.61k", "4.74k", "4.88k", "5.02k", "5.15k", "5.29k", "5.43k", "5.57k", "5.70k", "5.84k", "5.98k", "6.11k", "6.25k", "6.39k", "6.53k", "6.66k", "6.80k", "6.94k", "7.13k", "7.40k", "7.68k", "7.95k", "8.23k", "8.50k", "8.77k", "9.05k", "9.32k", "9.60k", "9.87k", "10.1k",
      "10.4k", "10.7k", "11.0k", "11.2k", "11.5k", "11.8k", "12.1k", "12.3k", "12.6k", "12.9k"
                                            ];

   static StringArray eq2_2band_freq_options = [
      "503.8", "520.9", "538.1", "555.2", "572.3", "589.5", "606.6", "623.7", "640.9", "658.0", "675.1", "692.3", "709.4", "726.5", "743.7", "760.8", "778.0", "795.1", "812.2", "829.4", "846.5", "863.6", "884.2", "918.5", "952.7", "987.0", "1.02k", "1.06k", "1.09k", "1.12k", "1.16k", "1.19k", "1.23k", "1.26k", "1.30k", "1.33k", "1.36k", "1.40k", "1.43k", "1.47k", "1.50k", "1.54k", "1.57k", "1.60k", "1.64k", "1.67k", "1.71k", "1.74k", "1.80k", "1.86k", "1.93k", "2.00k",
      "2.07k", "2.14k", "2.21k", "2.28k", "2.34k", "2.41k", "2.48k", "2.55k", "2.62k", "2.69k", "2.76k", "2.82k", "2.89k", "2.96k", "3.03k", "3.10k", "3.17k", "3.24k", "3.30k", "3.37k", "3.44k", "3.51k", "3.65k", "3.78k", "3.92k", "4.06k", "4.19k", "4.33k", "4.47k", "4.61k", "4.74k", "4.88k", "5.02k", "5.15k", "5.29k", "5.43k", "5.57k", "5.70k", "5.84k", "5.98k", "6.11k", "6.25k", "6.39k", "6.53k", "6.66k", "6.80k", "6.94k", "7.13k", "7.40k", "7.68k", "7.95k", "8.23k", "8.50k", "8.77k", "9.05k", "9.32k", "9.60k", "9.87k", "10.1k"
                                            ];

   static StringArray eq_gain_options = [
      "-12.00", "-11.63", "-11.25", "-10.88", "-10.50", "-10.13", "-9.75", "-9.38", "-9.00", "-8.63", "-8.25", "-7.88", "-7.50", "-7.13", "-6.75", "-6.38", "-6.00", "-5.63", "-5.25", "-4.88", "-4.50", "-4.13", "-3.75", "-3.38", "-3.00", "-2.63", "-2.25", "-1.88", "-1.50", "-1.13", "-0.75", "-0.38",
      "+0.00",
      "+0.38", "+0.75", "+1.13", "+1.50", "+1.88", "+2.25", "+2.63", "+3.00", "+3.38", "+3.75", "+4.13", "+4.50", "+4.88", "+5.25", "+5.63", "+6.00", "-6.38", "+6.75", "+7.13", "+7.50", "+7.88", "+8.25", "+8.63", "+9.00", "+9.38", "+9.75", "+10.13", "+10.50", "+10.88", "+11.25", "+11.63", "+12.00"
                                          ];


   protected int param_object_override_element_idx;


   // <method.png>
   protected method genKeyFollowOptions() {
      if(keyfollow_options.isEmpty())
      {
         int amt = -200;
         while(amt < -190)
         {
            keyfollow_options.add(amt+"%");
            amt += 1;
         }
         while(amt < -105)
         {
            keyfollow_options.add(amt+"%");
            amt += 5;
         }
         while(amt < -95)
         {
            keyfollow_options.add(amt+"%");
            amt += 1;
         }
         while(amt < -10)
         {
            keyfollow_options.add(amt+"%");
            amt += 5;
         }
         while(amt < 10)
         {
            if(amt >= 0)
               keyfollow_options.add("+"+amt+"%");
            else
               keyfollow_options.add(amt+"%");
            amt += 1;
         }
         while(amt < 95)
         {
            keyfollow_options.add("+"+amt+"%");
            amt += 5;
         }
         while(amt < 105)
         {
            keyfollow_options.add("+"+amt+"%");
            amt += 1;
         }
         while(amt < 190)
         {
            keyfollow_options.add("+"+amt+"%");
            amt += 5;
         }
         while(amt < 190)
         {
            keyfollow_options.add("+"+amt+"%");
            amt += 5;
         }
         while(amt < 192)
         {
            keyfollow_options.add("+"+amt+"%");
            amt += 2;
         }
         while(amt <= 200)
         {
            keyfollow_options.add("+"+amt+"%");
            amt += 1;
         }
      }
   }

   // <method.png>
   static StringArray octave_notes = ["C x", "C#x", "D x", "D#x", "E x", "F x", "F#x", "G x", "G#x", "A x", "A#x", "B x"];
   protected method genNoteOptions() {
      if(note_options.isEmpty())
      {
         int noteIdx = 0;
         loop(128)
         {
            note_options.add(octave_notes[noteIdx%12].replace("x", String( (noteIdx/12) -2)));
            noteIdx++;
         }
      }
   }

   // <init.png>
   public method initElementFilterForm(EditMIDISynthFormMontage _parentSynthForm, int _elementIdx) : boolean {

      element_idx = _elementIdx;

      initParamForm(_parentSynthForm);

      local String buf;
      MIDISynthProfile msp <= parent_synth_form.profile;

      String groupCaption <= "Element Filter";

      createWidgetsFromMSPGroup(buf, msp, groupCaption);
      // trace buf;
      // exit(10);

      local String bufXFM;
      bufXFM.load("Montage_ElementFilterForm.xfm", true/*bRemoveCR*/);
      bufXFM.replace("$(WIDGETS)", buf);

      if(!parseXMLForm(bufXFM))
      {
         trace "[---] failed to parse \"Montage_ElementFilterForm.xfm\"";
         return false;
      }

      if(!autoResolveIds(this))
      {
         return false;
      }

      if(!resolveWidgetsFromMSPGroup(msp, groupCaption, param_widgets))
      {
         trace "[---] Montage_ElementFilterForm: resolveWidgetsFromMSPGroup("+groupCaption+") failed.";
         return false;
      }

      genKeyFollowOptions();

      fp_filter_keyfollow.setUserTable(keyfollow_options);
      fp_filter_keyfollow.setDisplayType(FloatParam.DISPLAY_USER);

      fp_filter_hpf_keyfollow.setUserTable(keyfollow_options);
      fp_filter_hpf_keyfollow.setDisplayType(FloatParam.DISPLAY_USER);

      genNoteOptions();

      fp_feg_time_keyfollow_centernote.setUserTable(note_options);
      fp_feg_time_keyfollow_centernote.setDisplayType(FloatParam.DISPLAY_USER);

      fp_cutoffscl_bp_1.setUserTable(note_options);
      fp_cutoffscl_bp_1.setDisplayType(FloatParam.DISPLAY_USER);

      fp_cutoffscl_bp_2.setUserTable(note_options);
      fp_cutoffscl_bp_2.setDisplayType(FloatParam.DISPLAY_USER);

      fp_cutoffscl_bp_3.setUserTable(note_options);
      fp_cutoffscl_bp_3.setDisplayType(FloatParam.DISPLAY_USER);

      fp_cutoffscl_bp_4.setUserTable(note_options);
      fp_cutoffscl_bp_4.setDisplayType(FloatParam.DISPLAY_USER);

      if(eq_q_options.isEmpty())
      {
         local Float q = 0.7;
         loop(32)
         {
            eq_q_options.add(q.printf("%2.2f"));
            q += (10.3-0.7)/31;
         }
      }
      fp_eq_q.setUserTable(eq_q_options);
      fp_eq_q.setDisplayType(FloatParam.DISPLAY_USER);

      // PEQ
      fp_eq1_freq.setUserTable(eq_freq_options);
      fp_eq1_freq.setDisplayType(FloatParam.DISPLAY_USER);

      fp_eq1_gain.setUserTable(eq_gain_options);
      fp_eq1_gain.setDisplayType(FloatParam.DISPLAY_USER);

      // 2band
      fp_eq2_freq.setUserTable(eq2_2band_freq_options);
      fp_eq2_freq.setDisplayType(FloatParam.DISPLAY_USER);
      // fp_eq2_freq.setEnableUserTableStart0(true);
      // fp_eq2_freq.setFloatDisplayBias(46);

      fp_eq2_gain.setUserTable(eq_gain_options);
      fp_eq2_gain.setDisplayType(FloatParam.DISPLAY_USER);

      recursiveBuildTabCycleLists();

      return true;
   }

   // <method.png>
   public method enter() {
   }

   // <method.png>
   public method leave() {
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {
      layers.joinRR(layers, param_widgets);
   }

   // <method_get.png>
   public method getElementFilterByIdx(int _elementIdx) : MontagePartNormalElementFilterEQLFO {
      MontagePartNormal pNormal <= parent_synth_form.getEditPartNormal();
      if(null != pNormal)
      {
         MontagePartNormalElement el <= pNormal.getElementByIdx(_elementIdx);
         if(null != el)
         {
            return el.filter_eq_lfo;
         }
      }
      return null;
   }

   // <method_get.png>
   public method getElementFilter() : MontagePartNormalElementFilterEQLFO {
      return getElementFilterByIdx(element_idx);
   }

   // <method_get.png>
   public method getElementOscByIdx(int _elementIdx) : MontagePartNormalElementOscAmpPitch {
      // for Extended LFO settings
      MontagePartNormal pNormal <= parent_synth_form.getEditPartNormal();
      if(null != pNormal)
      {
         MontagePartNormalElement el <= pNormal.getElementByIdx(_elementIdx);
         if(null != el)
         {
            return el.osc_amp_pitch;
         }
      }
      return null;
   }

   // <method_get.png>
   public method getElementOsc() : MontagePartNormalElementOscAmpPitch {
      return getElementOscByIdx(element_idx);
   }

   // <method_get.png>
   protected virtual getMontageObjectOverrideForAlias(MIDISynthProfileCtlAlias _alias) : MontageObject {
      MontagePartNormalElementOscAmpPitch *elOsc;

      if("LFO Speed" == _alias.id)
      {
         elOsc <= getElementOscByIdx(param_object_override_element_idx);
         if(null != elOsc)
         {
            if(elOsc.getExtendedLFOSwitch())
            {
               return elOsc;
            }
         }
      }
      else if("Extended LFO Switch" == _alias.id)
      {
         elOsc <= getElementOscByIdx(param_object_override_element_idx);
         return elOsc;
      }
      return null;
   }

   // <method_get.png>
   protected virtual getAliasOverride(MIDISynthProfileCtlAlias _alias) : MIDISynthProfileCtlAlias {
      if("LFO Speed" == _alias.id)
      {
         MontagePartNormalElementOscAmpPitch elOsc <= getElementOsc();
         if(null != elOsc)
         {
            if(elOsc.getExtendedLFOSwitch())
            {
               MIDISynthProfile msp <= parent_synth_form.data.midi_profile;
               return msp.findAliasById("Extended LFO Speed");
            }
         }
      }
      return _alias;
   }

   // <ui_update.png>
   protected method updateEQFreqs() {
      MontagePartNormalElementFilterEQLFO c <= getElementFilter();
      if(null != c)
      {
         switch(c.getEQType())
         {
            case 0:  // 2band
               fp_eq_q.setEditable(false);
               fp_eq1_freq.setUserTable(eq_freq_options);
               // // fp_eq1_freq.setUserTable(eq1_2band_freq_options);
               // // fp_eq1_freq.setValue(c.getEQ1Frequency());
               fp_eq1_freq.setFloatDisplayBias(0);
               fp_eq1_freq.setMinValue(46);
               fp_eq1_freq.setMaxValue(182);
               fp_eq1_freq.setEditable(true);
               fp_eq1_gain.setEditable(true);
               fp_eq2_freq.setMinValue(131);// - 46);
               fp_eq2_freq.setMaxValue(241);// - 46);
               fp_eq2_freq.setEditable(true);
               fp_eq2_gain.setEditable(true);
               fp_eq1_freq.setValue(c.getEQ1Frequency());
               fp_eq2_freq.setValue(c.getEQ2Frequency());
               break;

            case 1:  // PEQ
               fp_eq_q.setEditable(true);
               fp_eq1_freq.setUserTable(eq1_peq_freq_options);
               // // fp_eq1_freq.setValue(c.getEQ1Frequency());
               // // fp_eq1_freq.setFloatDisplayBias(46-9);
               fp_eq1_freq.setMinValue(83/* - 46*/);
               fp_eq1_freq.setMaxValue(251/* - 46*/);
               fp_eq1_freq.setEditable(true);
               fp_eq1_gain.setEditable(true);
               fp_eq2_freq.setEditable(false);
               fp_eq2_gain.setEditable(false);
               fp_eq1_freq.setValue(c.getEQ1Frequency());
               break;

            default:  // boost6, boost12, boost18, thru
               fp_eq_q.setEditable(false);
               fp_eq1_freq.setEditable(false);
               fp_eq1_gain.setEditable(false);
               fp_eq2_freq.setEditable(false);
               fp_eq2_gain.setEditable(false);
               break;
         }

      }
   }

   // <ui_handle.png>
   protected method handleEQTypeChanged(boolean _bMultiEdit) {
      int elementIdx = _bMultiEdit ? 0 : element_idx;
      loop(_bMultiEdit ? 8 : 1)
      {
         MontagePartNormalElementFilterEQLFO c <= getElementFilterByIdx(elementIdx);
         if(null != c)
         {
            updateEQFreqs();

            switch(c.getEQType())
            {
               case 0:  // 2band
                  c.setEQ1Frequency(54);
                  c.setEQ2Frequency(231);
                  c.setEQ1Gain(0);
                  c.setEQ2Gain(0);
                  break;

               case 1:  // PEQ
                  c.setEQ1Frequency(157);
                  c.setEQ1Gain(0);
                  c.setEQQ(0);
                  break;

               default:  // boost6, boost12, boost18, thru
                  break;
            }

            if(elementIdx == element_idx)
            {
               updateParamWidgets(c);
               updateEQFreqs();
               // trace "xxx after EQ type change: c.getEQ2Frequency()="+c.getEQ2Frequency();
               UI.RedrawAll();
            }
         }
         elementIdx++;
      }
   }

   // <ui_handle.png>
   protected =replay= method handleLFOExtChanged(boolean _bMultiEdit) {
      MontagePerformance replayPerf <= parent_synth_form.replay_perf;
      MontagePartNormal pNormal <= replayPerf.getPartNormalByIdx(parent_synth_form.data.current_part_idx);

      int elementIdx = _bMultiEdit ? 0 : element_idx;
      loop(_bMultiEdit ? 8 : 1)
      {
         // trace "xxx handleLFOExtChanged: bMultiEdit="+_bMultiEdit+" elementIdx="+elementIdx+" pNormal="+#(pNormal);
         MontagePartNormalElement el <= pNormal.getElementByIdx(elementIdx);

         if(1 == fp_lfo_ext.getFloatValue())
         {
            fp_lfo_speed.setMaxValue(415);
            fp_lfo_speed.setToolTipCaption("Extended LFO Speed");

            MontagePartNormalElementOscAmpPitch elOsc <= el.osc_amp_pitch;
            elOsc.invalidateReplayExtendedLFOSpeed();
         }
         else
         {
            MontagePartNormalElementFilterEQLFO c <= getElementFilter();
            fp_lfo_speed.setMaxValue(63);
            fp_lfo_speed.setValue(c.getLFOSpeed());
            // trace "xxx revert to normal LFO mode: c.getLFOSpeed()="+c.getLFOSpeed();
            fp_lfo_speed.setToolTipCaption("LFO Speed");

            MontagePartNormalElementFilterEQLFO elFilter <= el.filter_eq_lfo;
            elFilter.invalidateReplayLFOSpeed();
         }

         elementIdx++;
      }
      showElementFilter();
   }

   // <ui_show.png>
   public method showElementFilter() {
      param_object_override_element_idx = element_idx;
      MontagePartNormalElementFilterEQLFO c <= getElementFilter();
      MontagePartNormalElementOscAmpPitch elOsc <= getElementOsc();
      if(null != elOsc)
      {
         if(elOsc.getExtendedLFOSwitch())
         {
            fp_lfo_speed.setMaxValue(415);
            fp_lfo_speed.setToolTipCaption("Extended LFO Speed");
         }
         else
         {
            fp_lfo_speed.setMaxValue(63);
            fp_lfo_speed.setToolTipCaption("LFO Speed");
         }
      }
      updateEQFreqs();
      updateParamWidgets(c);
      updateEQFreqs();
      // if(null != c)
      // {
      //    trace "c.getEQ1Frequency()="+c.getEQ1Frequency();
      //    trace "c.getEQ2Frequency()="+c.getEQ2Frequency();
      // }
   }

   // <method.png>
   protected method debugData() {
      MontagePartNormalElementFilterEQLFO c <= getElementFilter();
      if(null != c)
      {
         c.data.hexdump(0, c.data.size);
      }
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      if(VKEY_BACKSPACE == _k.code)
      {
         trace "xxx MontagePartNormalElementFilterEQLFO.data:";
         debugData();
         return true;
      }
      return Montage_ParamForm::onKey(_k);
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      Layer ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      StringAction *sac;

      int paramIdx = param_widgets.indexOfPointer(ap, 0);
      if(paramIdx >= 0)
      {
         boolean bMultiEdit = (VMOD_LALT == UI.GetKeyMod());
         if(bMultiEdit)
         {
            int elementIdx = 0;
            loop(8)
            {
               MontagePartNormalElementFilterEQLFO elementFilter <= getElementFilterByIdx(elementIdx++);
               param_object_override_element_idx = elementIdx;
               handleParamChanged(elementFilter, paramIdx, ap);
            }
            param_object_override_element_idx = element_idx;
         }
         else
         {
            param_object_override_element_idx = element_idx;
            handleParamChanged(getElementFilter(), paramIdx, ap);
         }

         if(@(ap) == @(fp_eq_type))
         {
            handleEQTypeChanged(bMultiEdit);
         }
         else if(@(ap) == @(fp_lfo_ext))
         {
            handleLFOExtChanged(bMultiEdit);
         }

         if(FloatParam.ACTION_VALUECHANGED == acName)
            parent_synth_form.refocusDefault();

         return true;
      }

      // switch(@(ap))
      // {
      //    default:
      //       break;
      // }
   }

}
