// ----
// ---- file   : Montage_InsertForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2022-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 05Nov2022
// ---- changed: 06Nov2022, 07Nov2022, 08Nov2022, 10Nov2022, 17Nov2022, 10Feb2023
// ----
// ----
// ----

module MMontage_InsertForm;

use namespace ui;
use namespace st2;

boolean b_debug = 0;


// <class.png>
class Montage_InsertEffectParam {
   byte         idx;          // 0..23
   String       name;
   short        min_value;
   short        max_value;
   short        ctr_value;    // dead zone
   short        bias;         // subtracted from value when converting to UI, added when converting to patch data
   float        div;          // e.g. for delay time (div=10: 1234 => 123.4)
   short        reset_value;
   String      *options;      // "a;b;c;d".. or null
   StringArray *tbl_options;  // or null
   int          tbl_idx;      // e.g. 204
   boolean      b_tbl_0;      // true=table starts at value 0. false=table starts at min_value
   String      *unit;

   public method init(byte _idx, String _name, short _min, short _max, short _ctr, float _div, short _bias, short _reset, String _optionsOrNull, StringArray _tblOptions, int _tblIdx, boolean _bTbl0, String _unitOrNull) {
      idx          = _idx;
      name         = _name;
      min_value    = _min;
      max_value    = _max;
      ctr_value    = _ctr;
      div          = _div;
      bias         = _bias;
      reset_value  = _reset;
      options     <= (null != _optionsOrNull) ? Object(_optionsOrNull) : null;
      tbl_options <= _tblOptions;
      tbl_idx      = _tblIdx;
      b_tbl_0      = _bTbl0;
      unit        <= Object(_unitOrNull);
      // trace "param options="+#(options);
   }
}

// <class.png>
class Montage_InsertEffectType {
   byte   idx;
   short  type;
   String name;
   Montage_InsertEffectParam *[] params;
   String cat_name;

   public method init(byte _idx, short _type, String _name, String _catName) {
      idx      = _idx;
      type     = _type;
      name     = _name;
      cat_name = _catName;
   }

   public method addParam(Montage_InsertEffectParam _p) {
      params.add(#(deref _p));
   }

   public method findParamByIdx(short _paramIdx) : Montage_InsertEffectParam {
      Montage_InsertEffectParam *p;
      foreach p in params
      {
         if(p.idx == _paramIdx)
            return p;
      }
      return null;
   }
}


// <class.png>
class Montage_InsertForm extends XMLForm, ActionProvider, MIDIMapDefs, MontageDefs {
   // MontageInsert

   boolean b_insert_b;  // false=insert A, true=insert B

   protected EditMIDISynthFormMontage *parent_synth_form;

   static Montage_InsertFXType *[] insert_types;

   static MontageInsert *clipboard;


   // <ui_init.png>
   protected method resolveWidgets() {
      int paramIdx = 0;
      loop(24)
      {
         Label lb <= findLayerById("lb_p_"+paramIdx);
         // trace "xxx Montage_InsertForm::resolveWidgets: paramIdx="+paramIdx+" lb="+#(lb);
         lb.setToolTipCaption("Parameter "+(paramIdx+1));
         a_lb.add(lb);

         FloatParam fp <= findLayerById("fp_p_"+paramIdx);
         // trace "xxx Montage_InsertForm::resolveWidgets: paramIdx="+paramIdx+" fp="+#(fp);
         fp.setToolTipCaption("Parameter "+(paramIdx+1));
         a_fp.add(fp);

         paramIdx++;
      }
   }

   // Table 1: LFO Frequency (128)
   static StringArray tbl_1 = [
      "0.00Hz", "0.04Hz", "0.08Hz", "0.13Hz", "0.17Hz", "0.21Hz", "0.25Hz", "0.29Hz", "0.34Hz", "0.38Hz", "0.42Hz", "0.46Hz", "0.51Hz", "0.55Hz", "0.59Hz", "0.63Hz", "0.67Hz", "0.72Hz", "0.76Hz", "0.80Hz", "0.84Hz", "0.88Hz", "0.93Hz", "0.97Hz", "1.01Hz", "1.05Hz", "1.09Hz", "1.14Hz", "1.18Hz", "1.22Hz", "1.26Hz", "1.30Hz", "1.35Hz", "1.39Hz", "1.43Hz", "1.47Hz", "1.51Hz", "1.56Hz", "1.60Hz", "1.64Hz", "1.68Hz", "1.72Hz", "1.77Hz", "1.81Hz", "1.85Hz", "1.89Hz", "1.94Hz", "1.98Hz", "2.02Hz", "2.06Hz", "2.10Hz", "2.15Hz", "2.19Hz", "2.23Hz", "2.27Hz", "2.31Hz", "2.36Hz", "2.40Hz", "2.44Hz", "2.48Hz", "2.52Hz", "2.57Hz", "2.61Hz", "2.65Hz", "2.69Hz", "2.78Hz", "2.86Hz", "2.94Hz", "3.03Hz", "3.11Hz", "3.20Hz", "3.28Hz", "3.37Hz", "3.45Hz", "3.53Hz", "3.62Hz", "3.70Hz", "3.87Hz", "4.04Hz", "4.21Hz", "4.37Hz", "4.54Hz", "4.71Hz", "4.88Hz", "5.05Hz", "5.22Hz", "5.38Hz", "5.55Hz", "5.72Hz", "6.06Hz", "6.39Hz", "6.73Hz", "7.07Hz", "7.40Hz", "7.74Hz", "8.08Hz", "8.41Hz", "8.75Hz", "9.08Hz", "9.42Hz", "9.76Hz", "10.1Hz", "10.8Hz", "11.4Hz", "12.1Hz", "12.8Hz", "13.5Hz", "14.1Hz", "14.8Hz", "15.5Hz", "16.2Hz", "16.8Hz", "17.5Hz", "18.2Hz", "19.5Hz", "20.9Hz", "22.2Hz", "23.6Hz", "24.9Hz", "26.2Hz", "27.6Hz", "28.9Hz", "30.3Hz", "31.6Hz", "33.0Hz", "34.3Hz", "37.0Hz", "39.7Hz"
                                ];

   // Table 2: Modulation Delay Offset (128)
   static StringArray tbl_2 = [
      "0.0ms", "0.1ms", "0.2ms", "0.3ms", "0.4ms", "0.5ms", "0.6ms", "0.7ms", "0.8ms", "0.9ms", "1.0ms", "1.1ms", "1.2ms", "1.3ms", "1.4ms", "1.5ms", "1.6ms", "1.7ms", "1.8ms", "1.9ms", "2.0ms", "2.1ms", "2.2ms", "2.3ms", "2.4ms", "2.5ms", "2.6ms", "2.7ms", "2.8ms", "2.9ms", "3.0ms", "3.1ms", "3.2ms", "3.3ms", "3.4ms", "3.5ms", "3.6ms", "3.7ms", "3.8ms", "3.9ms", "4.0ms", "4.1ms", "4.2ms", "4.3ms", "4.4ms", "4.5ms", "4.6ms", "4.7ms", "4.8ms", "4.9ms", "5.0ms", "5.1ms", "5.2ms", "5.3ms", "5.4ms", "5.5ms", "5.6ms", "5.7ms", "5.8ms", "5.9ms", "6.0ms", "6.1ms", "6.2ms", "6.3ms", "6.4ms", "6.5ms", "6.6ms", "6.7ms", "6.8ms", "6.9ms", "7.0ms", "7.1ms", "7.2ms", "7.3ms", "7.4ms", "7.5ms", "7.6ms", "7.7ms", "7.8ms", "7.9ms", "8.0ms", "8.1ms", "8.2ms", "8.3ms", "8.4ms", "8.5ms", "8.6ms", "8.7ms", "8.8ms", "8.9ms", "9.0ms", "9.1ms", "9.2ms", "9.3ms", "9.4ms", "9.5ms", "9.6ms", "9.7ms", "9.8ms", "9.9ms", "10.0ms", "11.1ms", "12.2ms", "13.3ms", "14.4ms", "15.5ms", "17.1ms", "18.6ms", "20.2ms", "21.8ms", "23.3ms", "24.9ms", "26.5ms", "28.0ms", "29.6ms", "31.2ms", "32.8ms", "34.3ms", "35.9ms", "37.5ms", "39.0ms", "40.6ms", "42.2ms", "43.7ms", "45.3ms", "46.9ms", "48.4ms", "50.0ms"
                                ];

   // Table 3: EQ Frequency (60)
   static StringArray tbl_3 = [
      "THRU (20Hz)", "22Hz", "25Hz", "28Hz", "32Hz", "36Hz", "40Hz", "45Hz", "50Hz", "56Hz", "63Hz", "70Hz", "80Hz", "90Hz", "100Hz", "110Hz", "125Hz", "140Hz", "160Hz", "180Hz", "200Hz", "225Hz", "250Hz", "280Hz", "315Hz", "355Hz", "400Hz", "450Hz", "500Hz", "560Hz", "630Hz", "700Hz", "800Hz", "900Hz", "1.0kHz", "1.1kHz", "1.2kHz", "1.4kHz", "1.6kHz", "1.8kHz", "2.0kHz", "2.2kHz", "2.5kHz", "2.8kHz", "3.2kHz", "3.6kHz", "4.0kHz", "4.5kHz", "5.0kHz", "5.6kHz", "6.3kHz", "7.0kHz", "8.0kHz", "9.0kHz", "10.0kHz", "11.0kHz", "12.0kHz", "14.0kHz", "16.0kHz", "18.0kHz", "THRU (20.0k)"
                                ];

   // Table 4: Reverb Time (70)
   static StringArray tbl_4 = [
      "0.3s", "0.4s", "0.5s", "0.6s", "0.7s", "0.8s", "0.9s", "1.0s", "1.1s", "1.2s", "1.3s", "1.4s", "1.5s", "1.6s", "1.7s", "1.8s", "1.9s", "2.0s", "2.1s", "2.2s", "2.3s", "2.4s", "2.5s", "2.6s", "2.7s", "2.8s", "2.9s", "3.0s", "3.1s", "3.2s", "3.3s", "3.4s", "3.5s", "3.6s", "3.7s", "3.8s", "3.9s", "4.0s", "4.1s", "4.2s", "4.3s", "4.4s", "4.5s", "4.6s", "4.7s", "4.8s", "4.9s", "5.0s", "5.5s", "6.0s", "6.5s", "7.0s", "7.5s", "8.0s", "8.5s", "9.0s", "9.5s", "10.0s", "11.0s", "12.0s", "13.0s", "14.0s", "15.0s", "16.0s", "17.0s", "18.0s", "19.0s", "20.0s", "25.0s", "30.0s"
                                ];

   // Table 5: Delay Time (0.1 - 200.0 [ms]) (128)
   static StringArray tbl_5 = [
      "0.1ms", "1.7ms", "3.2ms", "4.8ms", "6.4ms", "8.0ms", "9.5ms", "11.1ms", "12.7ms", "14.3ms", "15.8ms", "17.4ms", "19.0ms", "20.6ms", "22.1ms", "23.7ms", "25.3ms", "26.9ms", "28.4ms", "30.0ms", "31.6ms", "33.2ms", "34.7ms", "36.3ms", "37.9ms", "39.5ms", "41.0ms", "42.6ms", "44.2ms", "45.7ms", "47.3ms", "48.9ms", "50.5ms", "52.0ms", "53.6ms", "55.2ms", "56.8ms", "58.3ms", "59.9ms", "61.5ms", "63.1ms", "64.6ms", "66.2ms", "67.8ms", "69.4ms", "70.9ms", "72.5ms", "74.1ms", "75.7ms", "77.2ms", "78.8ms", "80.4ms", "81.9ms", "83.5ms", "85.1ms", "86.7ms", "88.2ms", "89.8ms", "91.4ms", "93.0ms", "94.5ms", "96.1ms", "97.7ms", "99.3ms", "100.8ms", "102.4ms", "104.0ms", "105.6ms", "107.1ms", "108.7ms", "110.3ms", "111.9ms", "113.4ms", "115.0ms", "116.6ms", "118.2ms", "119.7ms", "121.3ms", "122.9ms", "124.4ms", "126.0ms", "127.6ms", "129.2ms", "130.7ms", "132.3ms", "133.9ms", "135.5ms", "137.0ms", "138.6ms", "140.2ms", "141.8ms", "143.3ms", "144.9ms", "146.5ms", "148.1ms", "149.6ms", "151.2ms", "152.8ms", "154.4ms", "155.9ms", "157.5ms", "159.1ms", "160.6ms", "162.2ms", "163.8ms", "165.4ms", "166.9ms", "168.5ms", "170.1ms", "171.7ms", "173.2ms", "174.8ms", "176.4ms", "178.0ms", "179.5ms", "181.1ms", "182.7ms", "184.3ms", "185.8ms", "187.4ms", "189.0ms", "190.6ms", "192.1ms", "193.7ms", "195.3ms", "196.9ms", "198.4ms", "200.0ms"
                                ];

   // Table 6: Room Size (128)
   static StringArray tbl_6 = [
      "0.1", "0.3", "0.4", "0.6", "0.7", "0.9", "1.0", "1.2", "1.4", "1.5", "1.7", "1.8", "2.0", "2.1", "2.3", "2.5", "2.6", "2.8", "2.9", "3.1", "3.2", "3.4", "3.5", "3.7", "3.9", "4.0", "4.2", "4.3", "4.5", "4.6", "4.8", "5.0", "5.1", "5.3", "5.4", "5.6", "5.7", "5.9", "6.1", "6.2", "6.4", "6.5", "6.7", "6.8", "7.0", "7.2", "7.3", "7.5", "7.6", "7.8", "7.9", "8.1", "8.2", "8.4", "8.6", "8.7", "8.9", "9.0", "9.2", "9.3", "9.5", "9.7", "9.8", "10.0", "10.1", "10.3", "10.4", "10.6", "10.8", "10.9", "11.1", "11.2", "11.4", "11.5", "11.7", "11.9", "12.0", "12.2", "12.3", "12.5", "12.6", "12.8", "12.9", "13.1", "13.3", "13.4", "13.6", "13.7", "13.9", "14.0", "14.2", "14.4", "14.5", "14.7", "14.8", "15.0", "15.1", "15.3", "15.5", "15.6", "15.8", "15.9", "16.1", "16.2", "16.4", "16.6", "16.7", "16.9", "17.0", "17.2", "17.3", "17.5", "17.6", "17.8", "18.0", "18.1", "18.3", "18.4", "18.6", "18.7", "18.9", "19.1", "19.2", "19.4", "19.5", "19.7", "19.8", "20.0"
                                ];

   // Table 7: Delay Time (0.1 - 400.0 [ms]) (128)
   static StringArray tbl_7 = [
      "0.1ms", "3.2ms", "6.4ms", "9.5ms", "12.7ms", "15.8ms", "19.0ms", "22.1ms", "25.3ms", "28.4ms", "31.6ms", "34.7ms", "37.9ms", "41.0ms", "44.2ms", "47.3ms", "50.5ms", "53.6ms", "56.8ms", "59.9ms", "63.1ms", "66.2ms", "69.4ms", "72.5ms", "75.7ms", "78.8ms", "82.0ms", "85.1ms", "88.3ms", "91.4ms", "94.6ms", "97.7ms", "100.9ms", "104.0ms", "107.2ms", "110.3ms", "113.5ms", "116.6ms", "119.8ms", "122.9ms", "126.1ms", "129.2ms", "132.4ms", "135.5ms", "138.6ms", "141.8ms", "144.9ms", "148.1ms", "151.2ms", "154.4ms", "157.5ms", "160.7ms", "163.8ms", "167.0ms", "170.1ms", "173.3ms", "176.4ms", "179.6ms", "182.7ms", "185.9ms", "189.0ms", "192.2ms", "195.3ms", "198.5ms", "201.6ms", "204.8ms", "207.9ms", "211.1ms", "214.2ms", "217.4ms", "220.5ms", "223.7ms", "226.8ms", "230.0ms", "233.1ms", "236.3ms", "239.4ms", "242.6ms", "245.7ms", "248.9ms", "252.0ms", "255.2ms", "258.3ms", "261.5ms", "264.6ms", "267.7ms", "270.9ms", "274.0ms", "277.2ms", "280.3ms", "283.5ms", "286.6ms", "289.8ms", "292.9ms", "296.1ms", "299.2ms", "302.4ms", "305.5ms", "308.7ms", "311.8ms", "315.0ms", "318.1ms", "321.3ms", "324.4ms", "327.6ms", "330.7ms", "333.9ms", "337.0ms", "340.2ms", "343.3ms", "346.5ms", "349.6ms", "352.8ms", "355.9ms", "359.1ms", "362.2ms", "365.4ms", "368.5ms", "371.7ms", "374.8ms", "378.0ms", "381.1ms", "384.3ms", "387.4ms", "390.6ms", "393.7ms", "396.9ms", "400.0ms"
                                ];

   // Table 8: Compressor Attack Time (30)
   static StringArray tbl_8 = [
      "1ms", "2ms", "3ms", "4ms", "5ms", "6ms", "7ms", "8ms", "9ms", "10ms", "12ms", "14ms", "16ms", "18ms", "20ms", "23ms", "26ms", "30ms", "35ms", "40ms", "50ms", "60ms", "70ms", "80ms", "100ms", "120ms", "140ms", "160ms", "180ms", "200ms"
                                ];

   // Table 9: Compressor Release Time (24)
   static StringArray tbl_9 = [
      "10ms", "15ms", "25ms", "35ms", "45ms", "55ms", "65ms", "75ms", "85ms", "100ms", "115ms", "140ms", "170ms", "230ms", "340ms", "680ms", "850ms", "1000ms", "1200ms", "1500ms", "1700ms", "2000ms", "2400ms", "3000ms"
                                ];

   // Table 11: Reverb Width; Depth; Height (105)
   static StringArray tbl_11 = [
      "0.5", "0.8", "1.0", "1.3", "1.5", "1.8", "2.0", "2.3", "2.6", "2.8", "3.1", "3.3", "3.6", "3.9", "4.1", "4.4", "4.6", "4.9", "5.2", "5.4", "5.7", "5.9", "6.2", "6.5", "6.7", "7.0", "7.2", "7.5", "7.8", "8.0", "8.3", "8.6", "8.8", "9.1", "9.4", "9.6", "9.9", "10.2", "10.4", "10.7", "11.0", "11.2", "11.5", "11.8", "12.1", "12.3", "12.6", "12.9", "13.1", "13.4", "13.7", "14.0", "14.2", "14.5", "14.8", "15.1", "15.4", "15.6", "15.9", "16.2", "16.5", "16.8", "17.1", "17.3", "17.6", "17.9", "18.2", "18.5", "18.8", "19.1", "19.4", "19.7", "20.0", "20.2", "20.5", "20.8", "21.1", "21.4", "21.7", "22.0", "22.4", "22.7", "23.0", "23.3", "23.6", "23.9", "24.2", "24.5", "24.9", "25.2", "25.5", "25.8", "26.1", "26.5", "26.8", "27.1", "27.5", "27.8", "28.1", "28.5", "28.8", "29.2", "29.5", "29.9", "30.2"
                                 ];

   // Table 12: LO-FI Sampling Frequency Control (128)
   static StringArray tbl_12 = [
      "44.1kHz", "22.1kHz", "14.7kHz", "11.0kHz", "8.82kHz", "7.35kHz", "6.30kHz", "5.51kHz", "4.90kHz", "4.41kHz", "4.01kHz", "3.68kHz", "3.39kHz", "3.15kHz", "2.94kHz", "2.76kHz", "2.59kHz", "2.45kHz", "2.32kHz", "2.21kHz", "2.10kHz", "2.00kHz", "1.92kHz", "1.84kHz", "1.76kHz", "1.70kHz", "1.63kHz", "1.58kHz", "1.52kHz", "1.47kHz", "1.42kHz", "1.38kHz", "1.34kHz", "1.30kHz", "1.26kHz", "1.23kHz", "1.19kHz", "1.16kHz", "1.13kHz", "1.10kHz", "1.08kHz", "1.05kHz", "1.03kHz", "1.00kHz", "980.0Hz", "958.7Hz", "938.3Hz", "918.8Hz", "900.0Hz", "882.0Hz", "864.7Hz", "848.1Hz", "832.1Hz", "816.7Hz", "801.8Hz", "787.5Hz", "773.7Hz", "760.3Hz", "747.5Hz", "735.0Hz", "723.0Hz", "711.3Hz", "700.0Hz", "689.1Hz", "678.5Hz", "668.2Hz", "658.2Hz", "648.5Hz", "639.1Hz", "630.0Hz", "621.1Hz", "612.5Hz", "604.1Hz", "595.9Hz", "588.0Hz", "580.3Hz", "572.7Hz", "565.4Hz", "558.2Hz", "551.3Hz", "544.4Hz", "537.8Hz", "531.3Hz", "525.0Hz", "518.8Hz", "512.8Hz", "506.9Hz", "501.1Hz", "495.5Hz", "490.0Hz", "484.6Hz", "479.3Hz", "474.2Hz", "469.1Hz", "464.2Hz", "459.4Hz", "454.6Hz", "450.0Hz", "445.5Hz", "441.0Hz", "436.6Hz", "432.4Hz", "428.2Hz", "424.0Hz", "420.0Hz", "416.0Hz", "412.1Hz", "408.3Hz", "404.6Hz", "400.9Hz", "397.3Hz", "393.8Hz", "390.3Hz", "386.8Hz", "383.5Hz", "380.2Hz", "376.9Hz", "373.7Hz", "370.6Hz", "367.5Hz", "364.5Hz", "361.5Hz", "358.5Hz", "355.6Hz", "352.8Hz", "350.0Hz", "347.2Hz", "344.5Hz"
                                 ];

   // Table 13: Tempo (30)
   static StringArray tbl_13 = [
      "32nd/3", "64th.", "32nd", "16th/3", "32nd.", "16th", "8th/3", "16th.", "8th", "4th/3", "8th.", "4th", "2nd/3", "4th.", "2nd", "Whole/3", "2nd.", "4thX4", "4thX5", "4thX6", "4thX7", "4thX8", "4thX9", "4thX10", "4thX11", "4thX12", "4thX13", "4thX14", "4thX15", "4thX16"
                                 ];

   // Table 14: Multi Compressor Gain (dB) (56)
   static StringArray tbl_14 = [
      "-inf", "-60dB", "-57dB", "-54dB", "-51dB", "-48dB", "-45dB", "-42dB", "-39dB", "-36dB", "-33dB", "-30dB", "-27dB", "-24dB", "-23dB", "-22dB", "-21dB", "-20dB", "-19dB", "-18dB", "-17dB", "-16dB", "-15dB", "-14dB", "-13dB", "-12dB", "-11dB", "-10dB", "-9dB", "-8dB", "-7dB", "-6dB", "-5dB", "-4dB", "-3dB", "-2dB", "-1dB", "+0dB", "+1dB", "+2dB", "+3dB", "+4dB", "+5dB", "+6dB", "+7dB", "+8dB", "+9dB", "+10dB", "+11dB", "+12dB", "+13dB", "+14dB", "+15dB", "+16dB", "+17dB", "+18dB"
                                 ];

   // Table 15: Dyna Attack Time (ms) (128)
   static StringArray tbl_15 = [
      "0.3ms", "0.9ms", "1.8ms", "2.7ms", "3.6ms", "5.4ms", "7.2ms", "9.0ms", "10ms", "12ms", "14ms", "16ms", "18ms", "20ms", "21ms", "23ms", "25ms", "27ms", "29ms", "30ms", "32ms", "34ms", "36ms", "38ms", "40ms", "41ms", "43ms", "45ms", "47ms", "49ms", "50ms", "52ms", "54ms", "56ms", "58ms", "60ms", "61ms", "63ms", "65ms", "67ms", "69ms", "70ms", "72ms", "74ms", "76ms", "78ms", "80ms", "81ms", "83ms", "85ms", "87ms", "89ms", "90ms", "92ms", "94ms", "96ms", "98ms", "100ms", "101ms", "103ms", "105ms", "107ms", "109ms", "110ms", "112ms", "114ms", "116ms", "118ms", "120ms", "121ms", "123ms", "125ms", "127ms", "129ms", "130ms", "132ms", "134ms", "136ms", "138ms", "140ms", "141ms", "143ms", "145ms", "147ms", "149ms", "150ms", "152ms", "154ms", "156ms", "158ms", "160ms", "161ms", "163ms", "165ms", "167ms", "169ms", "170ms", "172ms", "174ms", "176ms", "178ms", "180ms", "181ms", "183ms", "185ms", "187ms", "189ms", "190ms", "192ms", "194ms", "196ms", "198ms", "200ms", "201ms", "203ms", "205ms", "207ms", "209ms", "210ms", "212ms", "214ms", "216ms", "218ms", "220ms", "221ms", "223ms", "225ms", "227ms"
                                 ];

   // Table 16: Dyna Release Time (ms) (128)
   static StringArray tbl_16 = [
      "2.6ms", "3.0ms", "3.4ms", "3.9ms", "4.3ms", "4.7ms", "5.2ms", "5.6ms", "6.0ms", "6.5ms", "6.9ms", "7.3ms", "7.8ms", "8.2ms", "8.6ms", "13ms", "17ms", "22ms", "26ms", "30ms", "35ms", "39ms", "43ms", "48ms", "52ms", "56ms", "61ms", "65ms", "69ms", "74ms", "78ms", "83ms", "87ms", "91ms", "96ms", "100ms", "104ms", "109ms", "113ms", "117ms", "122ms", "126ms", "130ms", "135ms", "139ms", "143ms", "148ms", "152ms", "156ms", "161ms", "165ms", "169ms", "174ms", "178ms", "182ms", "187ms", "195ms", "217ms", "239ms", "261ms", "282ms", "304ms", "326ms", "347ms", "369ms", "391ms", "413ms", "434ms", "456ms", "478ms", "499ms", "521ms", "543ms", "565ms", "586ms", "608ms", "630ms", "651ms", "673ms", "695ms", "717ms", "738ms", "760ms", "782ms", "803ms", "825ms", "847ms", "869ms", "890ms", "912ms", "934ms", "955ms", "977ms", "999ms", "1021ms", "1042ms", "1064ms", "1086ms", "1107ms", "1129ms", "1151ms", "1173ms", "1194ms", "1216ms", "1238ms", "1259ms", "1281ms", "1303ms", "1346ms", "1390ms", "1433ms", "1477ms", "1520ms", "1563ms", "1607ms", "1650ms", "1694ms", "1737ms", "1781ms", "1824ms", "1867ms", "1911ms", "1954ms", "1998ms", "2041ms", "2085ms", "2128ms", "2171ms"
                                 ];

   // Table 17: Ring Mod OSC Freq Coarse (Hz) (128)
   static StringArray tbl_17 = [
      "0.5Hz", "1.5Hz", "2.0Hz", "2.5Hz", "3.5Hz", "4.0Hz", "4.5Hz", "5.5Hz", "6.0Hz", "6.5Hz", "7.5Hz", "8.0Hz", "8.4Hz", "8.9Hz", "9.4Hz", "9.9Hz", "10.5Hz", "11.1Hz", "11.7Hz", "12.4Hz", "13.1Hz", "13.9Hz", "14.7Hz", "15.5Hz", "16.4Hz", "17.3Hz", "18.3Hz", "19.4Hz", "20.5Hz", "21.7Hz", "22.9Hz", "24.2Hz", "25.6Hz", "27.1Hz", "28.6Hz", "30.3Hz", "32.0Hz", "33.8Hz", "35.8Hz", "37.8Hz", "40.0Hz", "42.2Hz", "44.7Hz", "47.2Hz", "49.9Hz", "52.7Hz", "55.8Hz", "58.9Hz", "62.3Hz", "65.9Hz", "69.6Hz", "73.6Hz", "77.8Hz", "82.3Hz", "87.0Hz", "91.9Hz", "97.2Hz", "102Hz", "108Hz", "114Hz", "121Hz", "128Hz", "135Hz", "143Hz", "151Hz", "160Hz", "169Hz", "179Hz", "189Hz", "200Hz", "211Hz", "223Hz", "236Hz", "249Hz", "264Hz", "279Hz", "295Hz", "311Hz", "329Hz", "348Hz", "368Hz", "389Hz", "411Hz", "435Hz", "459Hz", "486Hz", "513Hz", "543Hz", "574Hz", "607Hz", "641Hz", "678Hz", "717Hz", "757Hz", "801Hz", "846Hz", "895Hz", "946Hz", "1.00kHz", "1.05kHz", "1.11kHz", "1.18kHz", "1.24kHz", "1.32kHz", "1.39kHz", "1.47kHz", "1.55kHz", "1.64kHz", "1.74kHz", "1.84kHz", "1.94kHz", "2.05kHz", "2.17kHz", "2.29kHz", "2.43kHz", "2.56kHz", "2.71kHz", "2.87kHz", "3.03kHz", "3.20kHz", "3.39kHz", "3.58kHz", "3.79kHz", "4.00kHz", "4.23kHz", "4.47kHz", "4.73kHz", "5.00kHz"
                                 ];

   // Table 18: Classic Flanger Delay Offset (140)
   static StringArray tbl_18 = [
"0.09", "0.11", "0.13", "0.15", "0.18", "0.20", "0.22", "0.24", "0.27", "0.29", "0.31", "0.34", "0.36", "0.38", "0.40", "0.42", "0.43", "0.46", "0.48", "0.51", "0.53", "0.56", "0.59", "0.62", "0.65", "0.68", "0.72", "0.76", "0.79", "0.83", "0.88", "0.92", "0.97", "1.02", "1.07", "1.12", "1.18", "1.24", "1.30", "1.37", "1.44", "1.51", "1.59", "1.67", "1.76", "1.84", "1.94", "2.04", "2.14", "2.25", "2.36", "2.48", "2.61", "2.74", "2.88", "3.03", "3.18", "3.34", "3.51", "3.69", "3.87", "4.07", "4.28", "4.49", "4.72", "4.96", "5.21", "5.47", "5.75", "6.04", "6.35", "6.67", "7.01", "7.37", "7.74", "8.13", "8.54", "8.97", "9.41", "9.85", "10.29", "10.73", "11.17", "11.61", "12.05", "12.49", "12.93", "13.37", "13.81", "14.24", "14.68", "15.12", "15.56", "16.00", "16.44", "16.88", "17.32", "17.76", "18.20", "18.64", "19.08", "19.52", "19.96", "20.40", "20.83", "21.27", "21.71", "22.15", "22.59", "23.03", "23.47", "23.91", "24.35", "24.79", "25.23", "25.66", "26.10", "26.54", "26.98", "27.42", "27.86", "28.30", "28.74", "29.18", "29.62", "30.06", "30.50", "30.94", "31.38", "31.82", "32.25", "32.69", "33.13", "33.57", "34.01", "34.45", "34.89", "35.33", "35.77", "36.21"
                                 ];

   // Table 19: Modulation Phase (17)
   static StringArray tbl_19 = [
      "-180°", "-158°", "-135°", "-113°", "-90°", "-68°", "-45°", "-23°", "0°", "23°", "45°", "68°", "90°", "113°", "135°", "158°", "180°"
                                 ];

   // Table 20: VCM Flanger Speed (236)
   static StringArray tbl_20 = [
      "0.040Hz", "0.042Hz", "0.045Hz", "0.047Hz", "0.050Hz", "0.053Hz", "0.055Hz", "0.058Hz", "0.060Hz", "0.063Hz", "0.066Hz", "0.068Hz", "0.071Hz", "0.074Hz", "0.076Hz", "0.079Hz", "0.081Hz", "0.084Hz", "0.087Hz", "0.089Hz", "0.092Hz", "0.095Hz", "0.097Hz", "0.100Hz", "0.102Hz", "0.105Hz", "0.108Hz", "0.110Hz", "0.113Hz", "0.116Hz", "0.118Hz", "0.121Hz", "0.124Hz", "0.126Hz", "0.129Hz", "0.131Hz", "0.134Hz", "0.137Hz", "0.139Hz", "0.145Hz", "0.147Hz", "0.150Hz", "0.152Hz", "0.158Hz", "0.160Hz", "0.163Hz", "0.168Hz", "0.171Hz", "0.173Hz", "0.179Hz", "0.181Hz", "0.187Hz", "0.189Hz", "0.195Hz", "0.197Hz", "0.202Hz", "0.208Hz", "0.210Hz", "0.216Hz", "0.221Hz", "0.226Hz", "0.231Hz", "0.237Hz", "0.242Hz", "0.247Hz", "0.252Hz", "0.258Hz", "0.263Hz", "0.268Hz", "0.273Hz", "0.281Hz", "0.287Hz", "0.292Hz", "0.300Hz", "0.308Hz", "0.313Hz", "0.321Hz", "0.326Hz", "0.334Hz", "0.342Hz", "0.347Hz", "0.357Hz", "0.363Hz", "0.373Hz", "0.379Hz", "0.389Hz", "0.400Hz", "0.405Hz", "0.415Hz", "0.426Hz", "0.431Hz", "0.442Hz", "0.452Hz", "0.463Hz", "0.473Hz", "0.484Hz", "0.494Hz", "0.505Hz", "0.515Hz", "0.526Hz", "0.536Hz", "0.547Hz", "0.563Hz", "0.573Hz", "0.589Hz", "0.599Hz", "0.615Hz", "0.626Hz", "0.636Hz", "0.652Hz", "0.668Hz", "0.683Hz", "0.704Hz", "0.715Hz", "0.725Hz", "0.747Hz", "0.757Hz", "0.778Hz", "0.789Hz", "0.810Hz", "0.831Hz", "0.852Hz", "0.862Hz", "0.883Hz", "0.904Hz", "0.925Hz", "0.946Hz", "0.967Hz", "0.988Hz", "1.009Hz", "1.030Hz", "1.051Hz", "1.072Hz", "1.093Hz", "1.125Hz", "1.146Hz", "1.167Hz", "1.199Hz", "1.220Hz", "1.251Hz", "1.272Hz", "1.304Hz", "1.335Hz", "1.367Hz", "1.409Hz", "1.430Hz", "1.451Hz", "1.493Hz", "1.514Hz", "1.556Hz", "1.577Hz", "1.619Hz", "1.661Hz", "1.682Hz", "1.724Hz", "1.766Hz", "1.808Hz", "1.851Hz", "1.893Hz", "1.935Hz", "1.977Hz", "2.019Hz", "2.061Hz", "2.103Hz", "2.145Hz", "2.187Hz", "2.250Hz", "2.292Hz", "2.334Hz", "2.397Hz", "2.460Hz", "2.502Hz", "2.565Hz", "2.608Hz", "2.671Hz", "2.733Hz", "2.776Hz", "2.860Hz", "2.902Hz", "2.986Hz", "3.028Hz", "3.112Hz", "3.154Hz", "3.238Hz", "3.323Hz", "3.365Hz", "3.449Hz", "3.533Hz", "3.617Hz", "3.701Hz", "3.785Hz", "3.869Hz", "3.953Hz", "4.037Hz", "4.122Hz", "4.206Hz", "4.290Hz", "4.374Hz", "4.500Hz", "4.584Hz", "4.668Hz", "4.752Hz", "4.879Hz", "5.005Hz", "5.131Hz", "5.215Hz", "5.341Hz", "5.467Hz", "5.552Hz", "5.720Hz", "5.804Hz", "5.972Hz", "6.056Hz", "6.224Hz", "6.309Hz", "6.477Hz", "6.645Hz", "6.813Hz", "6.897Hz", "7.066Hz", "7.234Hz", "7.402Hz", "7.570Hz", "7.738Hz", "7.907Hz", "8.075Hz", "8.243Hz", "8.411Hz", "8.580Hz", "8.748Hz", "9.000Hz", "9.168Hz", "9.337Hz", "9.589Hz", "9.757Hz", "10.00Hz"
                                 ];

   // Table 21: VCM Phaser Speed (253)
   static StringArray tbl_21 = [
      "0.100Hz", "0.103Hz", "0.105Hz", "0.108Hz", "0.110Hz", "0.113Hz", "0.116Hz", "0.118Hz", "0.121Hz", "0.124Hz", "0.126Hz", "0.129Hz", "0.131Hz", "0.134Hz", "0.137Hz", "0.139Hz", "0.142Hz", "0.145Hz", "0.147Hz", "0.150Hz", "0.152Hz", "0.155Hz", "0.158Hz", "0.160Hz", "0.163Hz", "0.166Hz", "0.168Hz", "0.171Hz", "0.173Hz", "0.179Hz", "0.181Hz", "0.184Hz", "0.187Hz", "0.192Hz", "0.195Hz", "0.200Hz", "0.202Hz", "0.205Hz", "0.210Hz", "0.213Hz", "0.218Hz", "0.221Hz", "0.226Hz", "0.229Hz", "0.234Hz", "0.237Hz", "0.242Hz", "0.247Hz", "0.250Hz", "0.255Hz", "0.260Hz", "0.265Hz", "0.271Hz", "0.276Hz", "0.281Hz", "0.287Hz", "0.289Hz", "0.294Hz", "0.300Hz", "0.308Hz", "0.310Hz", "0.318Hz", "0.323Hz", "0.329Hz", "0.334Hz", "0.342Hz", "0.347Hz", "0.357Hz", "0.363Hz", "0.368Hz", "0.373Hz", "0.379Hz", "0.389Hz", "0.394Hz", "0.400Hz", "0.410Hz", "0.415Hz", "0.426Hz", "0.431Hz", "0.442Hz", "0.447Hz", "0.457Hz", "0.463Hz", "0.473Hz", "0.478Hz", "0.489Hz", "0.499Hz", "0.510Hz", "0.515Hz", "0.526Hz", "0.536Hz", "0.547Hz", "0.557Hz", "0.568Hz", "0.578Hz", "0.589Hz", "0.599Hz", "0.610Hz", "0.620Hz", "0.631Hz", "0.641Hz", "0.652Hz", "0.668Hz", "0.683Hz", "0.694Hz", "0.704Hz", "0.715Hz", "0.725Hz", "0.747Hz", "0.758Hz", "0.768Hz", "0.789Hz", "0.799Hz", "0.810Hz", "0.831Hz", "0.841Hz", "0.862Hz", "0.873Hz", "0.894Hz", "0.904Hz", "0.925Hz", "0.936Hz", "0.957Hz", "0.967Hz", "0.988Hz", "1.000Hz", "1.030Hz", "1.051Hz", "1.062Hz", "1.083Hz", "1.104Hz", "1.125Hz", "1.146Hz", "1.167Hz", "1.188Hz", "1.209Hz", "1.230Hz", "1.251Hz", "1.272Hz", "1.304Hz", "1.325Hz", "1.346Hz", "1.367Hz", "1.410Hz", "1.430Hz", "1.451Hz", "1.472Hz", "1.493Hz", "1.535Hz", "1.556Hz", "1.577Hz", "1.619Hz", "1.640Hz", "1.682Hz", "1.703Hz", "1.724Hz", "1.767Hz", "1.808Hz", "1.829Hz", "1.872Hz", "1.893Hz", "1.935Hz", "1.977Hz", "2.000Hz", "2.040Hz", "2.082Hz", "2.124Hz", "2.145Hz", "2.187Hz", "2.229Hz", "2.271Hz", "2.313Hz", "2.355Hz", "2.397Hz", "2.439Hz", "2.503Hz", "2.544Hz", "2.587Hz", "2.629Hz", "2.671Hz", "2.734Hz", "2.776Hz", "2.860Hz", "2.902Hz", "2.944Hz", "2.986Hz", "3.028Hz", "3.070Hz", "3.154Hz", "3.196Hz", "3.280Hz", "3.323Hz", "3.365Hz", "3.449Hz", "3.491Hz", "3.575Hz", "3.659Hz", "3.701Hz", "3.785Hz", "3.827Hz", "3.911Hz", "3.995Hz", "4.080Hz", "4.122Hz", "4.206Hz", "4.290Hz", "4.374Hz", "4.458Hz", "4.500Hz", "4.584Hz", "4.668Hz", "4.752Hz", "4.837Hz", "4.921Hz", "5.047Hz", "5.131Hz", "5.215Hz", "5.299Hz", "5.383Hz", "5.551Hz", "5.636Hz", "5.720Hz", "5.804Hz", "5.888Hz", "6.056Hz", "6.140Hz", "6.224Hz", "6.393Hz", "6.477Hz", "6.561Hz", "6.729Hz", "6.813Hz", "6.981Hz", "7.066Hz", "7.234Hz", "7.318Hz", "7.486Hz", "7.654Hz", "7.774Hz", "7.907Hz", "8.075Hz", "8.159Hz", "8.327Hz", "8.496Hz", "8.664Hz", "8.832Hz", "9.000Hz", "9.168Hz", "9.337Hz", "9.505Hz", "9.673Hz", "9.841Hz", "10.00Hz"
                                 ];

   // Table 22: VCM Wah Speed (255)
   static StringArray tbl_22 = [
      "0.100Hz", "0.103Hz", "0.105Hz", "0.108Hz", "0.110Hz", "0.113Hz", "0.116Hz", "0.118Hz", "0.121Hz", "0.124Hz", "0.126Hz", "0.129Hz", "0.131Hz", "0.134Hz", "0.137Hz", "0.139Hz", "0.142Hz", "0.145Hz", "0.147Hz", "0.152Hz", "0.155Hz", "0.157Hz", "0.163Hz", "0.166Hz", "0.168Hz", "0.173Hz", "0.176Hz", "0.179Hz", "0.184Hz", "0.187Hz", "0.189Hz", "0.195Hz", "0.200Hz", "0.202Hz", "0.208Hz", "0.210Hz", "0.216Hz", "0.221Hz", "0.226Hz", "0.231Hz", "0.234Hz", "0.239Hz", "0.244Hz", "0.250Hz", "0.255Hz", "0.260Hz", "0.265Hz", "0.271Hz", "0.276Hz", "0.284Hz", "0.289Hz", "0.294Hz", "0.302Hz", "0.308Hz", "0.315Hz", "0.321Hz", "0.326Hz", "0.334Hz", "0.342Hz", "0.347Hz", "0.357Hz", "0.363Hz", "0.368Hz", "0.379Hz", "0.384Hz", "0.394Hz", "0.405Hz", "0.410Hz", "0.421Hz", "0.426Hz", "0.436Hz", "0.447Hz", "0.457Hz", "0.463Hz", "0.473Hz", "0.484Hz", "0.494Hz", "0.505Hz", "0.515Hz", "0.526Hz", "0.536Hz", "0.547Hz", "0.563Hz", "0.573Hz", "0.584Hz", "0.599Hz", "0.610Hz", "0.620Hz", "0.636Hz", "0.652Hz", "0.662Hz", "0.673Hz", "0.694Hz", "0.704Hz", "0.725Hz", "0.736Hz", "0.747Hz", "0.768Hz", "0.778Hz", "0.799Hz", "0.820Hz", "0.831Hz", "0.852Hz", "0.873Hz", "0.883Hz", "0.904Hz", "0.935Hz", "0.946Hz", "0.967Hz", "0.988Hz", "0.999Hz", "1.020Hz", "1.051Hz", "1.072Hz", "1.093Hz", "1.115Hz", "1.136Hz", "1.157Hz", "1.188Hz", "1.209Hz", "1.241Hz", "1.262Hz", "1.293Hz", "1.314Hz", "1.346Hz", "1.367Hz", "1.409Hz", "1.430Hz", "1.451Hz", "1.493Hz", "1.514Hz", "1.556Hz", "1.598Hz", "1.619Hz", "1.661Hz", "1.703Hz", "1.724Hz", "1.766Hz", "1.808Hz", "1.851Hz", "1.872Hz", "1.914Hz", "1.956Hz", "1.999Hz", "2.040Hz", "2.082Hz", "2.124Hz", "2.166Hz", "2.229Hz", "2.250Hz", "2.313Hz", "2.355Hz", "2.397Hz", "2.460Hz", "2.502Hz", "2.566Hz", "2.608Hz", "2.671Hz", "2.734Hz", "2.776Hz", "2.818Hz", "2.902Hz", "2.944Hz", "3.028Hz", "3.070Hz", "3.154Hz", "3.196Hz", "3.280Hz", "3.336Hz", "3.407Hz", "3.491Hz", "3.575Hz", "3.659Hz", "3.701Hz", "3.785Hz", "3.869Hz", "3.953Hz", "4.037Hz", "4.122Hz", "4.206Hz", "4.290Hz", "4.374Hz", "4.500Hz", "4.584Hz", "4.668Hz", "4.795Hz", "4.879Hz", "4.963Hz", "5.090Hz", "5.173Hz", "5.299Hz", "5.383Hz", "5.552Hz", "5.636Hz", "5.720Hz", "5.888Hz", "5.972Hz", "6.140Hz", "6.224Hz", "6.393Hz", "6.477Hz", "6.665Hz", "6.813Hz", "6.897Hz", "7.066Hz", "7.234Hz", "7.402Hz", "7.570Hz", "7.654Hz", "7.823Hz", "7.991Hz", "8.159Hz", "8.327Hz", "8.496Hz", "8.748Hz", "8.916Hz", "9.084Hz", "9.253Hz", "9.505Hz", "9.673Hz", "9.841Hz", "10.09Hz", "10.26Hz", "10.51Hz", "10.77Hz", "10.93Hz", "11.10Hz", "11.44Hz", "11.61Hz", "11.94Hz", "12.11Hz", "12.45Hz", "12.62Hz", "12.95Hz", "13.29Hz", "13.46Hz", "13.79Hz", "13.96Hz", "14.30Hz", "14.64Hz", "14.97Hz", "15.31Hz", "15.65Hz", "15.98Hz", "16.32Hz", "16.65Hz", "16.99Hz", "17.33Hz", "17.66Hz", "18.00Hz", "18.34Hz", "18.84Hz", "19.18Hz", "19.51Hz", "20.00Hz"
                                 ];

   // Table 23: Rev Hall Time (70)
   static StringArray tbl_23 = [
      "0.3s", "0.4s", "0.5s", "0.6s", "0.7s", "0.8s", "0.9s", "1.0s", "1.1s", "1.2s", "1.3s", "1.4s", "1.5s", "1.6s", "1.7s", "1.8s", "1.9s", "2.0s", "2.1s", "2.2s", "2.3s", "2.4s", "2.5s", "2.6s", "2.7s", "2.8s", "2.9s", "3.0s", "3.1s", "3.2s", "3.3s", "3.4s", "3.5s", "3.6s", "3.7s", "3.8s", "3.9s", "4.0s", "4.1s", "4.2s", "4.3s", "4.4s", "4.5s", "4.6s", "4.7s", "4.8s", "4.9s", "5.0s", "5.5s", "6.0s", "6.5s", "7.0s", "7.5s", "8.0s", "8.5s", "9.0s", "9.5s", "10.0s", "10.5s", "11.0s", "11.5s", "12.0s", "12.5s", "13.0s", "13.5s", "14.0s", "15.0s", "16.0s", "17.0s", "18.0s"
                                 ];

   // Table 24: Rev Room Time (70)
   static StringArray tbl_24 = [
      "0.3s", "0.4s", "0.5s", "0.6s", "0.7s", "0.8s", "0.9s", "1.0s", "1.1s", "1.2s", "1.3s", "1.4s", "1.5s", "1.6s", "1.7s", "1.8s", "1.9s", "2.0s", "2.1s", "2.2s", "2.3s", "2.4s", "2.5s", "2.6s", "2.7s", "2.8s", "2.9s", "3.0s", "3.1s", "3.2s", "3.3s", "3.4s", "3.5s", "3.6s", "3.7s", "3.8s", "3.9s", "4.0s", "4.1s", "4.2s", "4.3s", "4.4s", "4.5s", "4.6s", "4.7s", "4.8s", "4.9s", "5.0s", "5.1s", "5.2s", "5.3s", "5.4s", "5.5s", "5.6s", "5.7s", "5.8s", "5.9s", "6.0s", "6.1s", "6.2s", "6.3s", "6.4s", "6.5s", "6.6s", "6.7s", "6.8s", "6.9s", "7.0s", "8.0s", "10.0s"
                                 ];

   // Table 25: VCM Comp Level (201)
   static StringArray tbl_25 = [
      "-infdB", "-138.0dB", "-120.0dB", "-109.4dB", "-101.9dB", "-96.12dB", "-91.37dB", "-87.36dB", "-83.88dB", "-80.81dB", "-78.06dB", "-75.58dB", "-73.31dB", "-71.23dB", "-69.29dB", "-67.50dB", "-65.81dB", "-64.23dB", "-62.75dB", "-61.34dB", "-60.00dB", "-58.73dB", "-57.52dB", "-56.36dB", "-55.25dB", "-54.19dB", "-53.16dB", "-52.18dB", "-51.23dB", "-50.32dB", "-49.43dB", "-48.58dB", "-47.75dB", "-46.95dB", "-46.17dB", "-45.42dB", "-44.68dB", "-43.97dB", "-43.27dB", "-42.60dB", "-41.94dB", "-41.29dB", "-40.67dB", "-40.05dB", "-39.45dB", "-38.87dB", "-38.30dB", "-37.74dB", "-37.19dB", "-36.65dB", "-36.12dB", "-35.61dB", "-35.10dB", "-34.61dB", "-34.12dB", "-33.64dB", "-33.17dB", "-32.71dB", "-32.26dB", "-31.81dB", "-31.37dB", "-30.94dB", "-30.52dB", "-30.10dB", "-29.69dB", "-29.29dB", "-28.89dB", "-28.50dB", "-28.11dB", "-27.73dB", "-27.36dB", "-26.99dB", "-26.62dB", "-26.26dB", "-25.91dB", "-25.56dB", "-25.21dB", "-24.87dB", "-24.54dB", "-24.20dB", "-23.88dB", "-23.55dB", "-23.23dB", "-22.92dB", "-22.61dB", "-22.30dB", "-21.99dB", "-21.69dB", "-21.39dB", "-21.10dB", "-20.81dB", "-20.52dB", "-20.23dB", "-19.95dB", "-19.67dB", "-19.40dB", "-19.13dB", "-18.86dB", "-18.59dB", "-18.32dB", "-18.06dB", "-17.80dB", "-17.55dB", "-17.29dB", "-17.04dB", "-16.79dB", "-16.54dB", "-16.30dB", "-16.06dB", "-15.82dB", "-15.58dB", "-15.34dB", "-15.11dB", "-14.88dB", "-14.65dB", "-14.42dB", "-14.19dB", "-13.97dB", "-13.75dB", "-13.53dB", "-13.31dB", "-13.09dB", "-12.88dB", "-12.67dB", "-12.46dB", "-12.25dB", "-12.04dB", "-11.83dB", "-11.63dB", "-11.43dB", "-11.23dB", "-11.03dB", "-10.83dB", "-10.63dB", "-10.44dB", "-10.24dB", "-10.05dB", "-9.86dB", "-9.67dB", "-9.48dB", "-9.29dB", "-9.11dB", "-8.92dB", "-8.74dB", "-8.56dB", "-8.38dB", "-8.20dB", "-8.02dB", "-7.85dB", "-7.67dB", "-7.50dB", "-7.32dB", "-7.15dB", "-6.98dB", "-6.81dB", "-6.64dB", "-6.47dB", "-6.31dB", "-6.14dB", "-5.98dB", "-5.81dB", "-5.65dB", "-5.49dB", "-5.33dB", "-5.17dB", "-5.01dB", "-4.86dB", "-4.70dB", "-4.54dB", "-4.39dB", "-4.23dB", "-4.08dB", "-3.93dB", "-3.78dB", "-3.63dB", "-3.48dB", "-3.33dB", "-3.18dB", "-3.04dB", "-2.89dB", "-2.75dB", "-2.60dB", "-2.46dB", "-2.31dB", "-2.17dB", "-2.03dB", "-1.89dB", "-1.75dB", "-1.61dB", "-1.47dB", "-1.34dB", "-1.20dB", "-1.06dB", "-0.93dB", "-0.79dB", "-0.66dB", "-0.53dB", "-0.39dB", "-0.26dB", "-0.13dB", "0.00dB"
                                 ];

   // Table 26: VCM Comp Attack Time (201)
   static StringArray tbl_26 = [
      "0.022ms", "0.023ms", "0.024ms", "0.025ms", "0.026ms", "0.028ms", "0.031ms", "0.035ms", "0.039ms", "0.045ms", "0.051ms", "0.059ms", "0.068ms", "0.077ms", "0.088ms", "0.101ms", "0.114ms", "0.129ms", "0.146ms", "0.163ms", "0.182ms", "0.203ms", "0.225ms", "0.249ms", "0.274ms", "0.301ms", "0.330ms", "0.360ms", "0.393ms", "0.426ms", "0.462ms", "0.500ms", "0.539ms", "0.580ms", "0.623ms", "0.668ms", "0.716ms", "0.765ms", "0.816ms", "0.869ms", "0.924ms", "0.982ms", "1.041ms", "1.103ms", "1.167ms", "1.233ms", "1.301ms", "1.372ms", "1.444ms", "1.520ms", "1.597ms", "1.677ms", "1.759ms", "1.844ms", "1.931ms", "2.021ms", "2.113ms", "2.207ms", "2.304ms", "2.404ms", "2.506ms", "2.611ms", "2.718ms", "2.828ms", "2.941ms", "3.056ms", "3.174ms", "3.295ms", "3.418ms", "3.544ms", "3.673ms", "3.805ms", "3.940ms", "4.077ms", "4.217ms", "4.361ms", "4.507ms", "4.656ms", "4.807ms", "4.962ms", "5.120ms", "5.281ms", "5.445ms", "5.611ms", "5.781ms", "5.954ms", "6.130ms", "6.309ms", "6.491ms", "6.677ms", "6.865ms", "7.057ms", "7.252ms", "7.450ms", "7.651ms", "7.855ms", "8.063ms", "8.274ms", "8.489ms", "8.706ms", "8.927ms", "9.151ms", "9.379ms", "9.610ms", "9.844ms", "10.09ms", "10.33ms", "10.57ms", "10.82ms", "11.07ms", "11.33ms", "11.59ms", "11.85ms", "12.11ms", "12.38ms", "12.66ms", "12.93ms", "13.21ms", "13.50ms", "13.78ms", "14.07ms", "14.37ms", "14.67ms", "14.97ms", "15.27ms", "15.58ms", "15.90ms", "16.21ms", "16.53ms", "16.86ms", "17.18ms", "17.52ms", "17.85ms", "18.19ms", "18.53ms", "18.88ms", "19.23ms", "19.59ms", "19.95ms", "20.31ms", "20.68ms", "21.05ms", "21.42ms", "21.80ms", "22.18ms", "22.57ms", "22.96ms", "23.36ms", "23.75ms", "24.16ms", "24.56ms", "24.97ms", "25.39ms", "25.81ms", "26.23ms", "26.66ms", "27.09ms", "27.53ms", "27.97ms", "28.41ms", "28.86ms", "29.31ms", "29.77ms", "30.23ms", "30.70ms", "31.17ms", "31.64ms", "32.12ms", "32.60ms", "33.09ms", "33.58ms", "34.07ms", "34.57ms", "35.08ms", "35.59ms", "36.10ms", "36.62ms", "37.14ms", "37.67ms", "38.20ms", "38.73ms", "39.27ms", "39.82ms", "40.36ms", "40.92ms", "41.48ms", "42.04ms", "42.61ms", "43.18ms", "43.75ms", "44.33ms", "44.92ms", "45.51ms", "46.10ms", "46.70ms", "47.31ms", "47.91ms", "48.53ms", "49.15ms", "49.77ms", "50.40ms"
                                 ];

   // Table 27: VCM Comp Release Time (201)
   static StringArray tbl_27 = [
      "10.88ms", "10.90ms", "10.94ms", "11.00ms", "11.10ms", "11.22ms", "11.36ms", "11.54ms", "11.74ms", "11.96ms", "12.22ms", "12.50ms", "12.80ms", "13.14ms", "13.50ms", "13.88ms", "14.30ms", "14.74ms", "15.20ms", "15.70ms", "16.22ms", "16.76ms", "17.34ms", "17.94ms", "18.56ms", "19.22ms", "19.90ms", "20.60ms", "21.34ms", "22.10ms", "22.88ms", "23.70ms", "24.54ms", "25.40ms", "26.30ms", "27.22ms", "28.16ms", "29.14ms", "30.14ms", "31.16ms", "32.22ms", "33.30ms", "34.40ms", "35.54ms", "36.70ms", "37.88ms", "39.10ms", "40.34ms", "41.60ms", "42.90ms", "44.22ms", "45.56ms", "46.94ms", "48.34ms", "49.76ms", "51.22ms", "52.70ms", "54.20ms", "55.74ms", "57.30ms", "58.88ms", "60.50ms", "62.14ms", "63.80ms", "65.50ms", "67.22ms", "68.96ms", "70.74ms", "72.54ms", "74.36ms", "76.22ms", "78.10ms", "80.00ms", "81.94ms", "83.90ms", "85.88ms", "87.90ms", "89.94ms", "92.00ms", "94.10ms", "96.22ms", "98.36ms", "100.54ms", "102.74ms", "104.96ms", "107.22ms", "109.50ms", "111.80ms", "114.14ms", "116.50ms", "118.88ms", "121.30ms", "123.74ms", "126.20ms", "128.70ms", "131.22ms", "133.76ms", "136.34ms", "138.94ms", "141.56ms", "144.22ms", "146.90ms", "149.60ms", "152.34ms", "155.10ms", "157.88ms", "160.70ms", "163.54ms", "166.40ms", "169.30ms", "172.22ms", "175.16ms", "178.14ms", "181.14ms", "184.16ms", "187.22ms", "190.30ms", "193.40ms", "196.54ms", "199.70ms", "202.88ms", "206.10ms", "209.34ms", "212.60ms", "215.90ms", "219.22ms", "222.56ms", "225.94ms", "229.34ms", "232.76ms", "236.22ms", "239.70ms", "243.20ms", "246.74ms", "250.30ms", "253.88ms", "257.50ms", "261.14ms", "264.80ms", "268.50ms", "272.22ms", "275.96ms", "279.74ms", "283.54ms", "287.36ms", "291.22ms", "295.10ms", "299.00ms", "302.94ms", "306.90ms", "310.88ms", "314.90ms", "318.94ms", "323.00ms", "327.10ms", "331.22ms", "335.36ms", "339.54ms", "343.74ms", "347.96ms", "352.22ms", "356.50ms", "360.80ms", "365.14ms", "369.50ms", "373.88ms", "378.30ms", "382.74ms", "387.20ms", "391.70ms", "396.22ms", "400.76ms", "405.34ms", "409.94ms", "414.56ms", "419.22ms", "423.90ms", "428.60ms", "433.34ms", "438.10ms", "442.88ms", "447.70ms", "452.54ms", "457.40ms", "462.30ms", "467.22ms", "472.16ms", "477.14ms", "482.14ms", "487.16ms", "492.22ms", "497.30ms", "502.40ms", "507.54ms", "512.70ms", "517.88ms", "523.10ms", "528.34ms", "533.60ms", "538.90ms", "544.22ms"
                                 ];

   // Table 28: VCM EQ Frequency (137)
   static StringArray tbl_28 = [
      "16.0Hz", "17.0Hz", "18.0Hz", "19.0Hz", "20.0Hz", "21.2Hz", "22.4Hz", "23.6Hz", "25.0Hz", "26.5Hz", "28.0Hz", "30.0Hz", "31.5Hz", "33.5Hz", "35.5Hz", "37.5Hz", "40.0Hz", "42.5Hz", "45.0Hz", "47.5Hz", "50.0Hz", "53.0Hz", "56.0Hz", "60.0Hz", "63.0Hz", "67.0Hz", "71.0Hz", "75.0Hz", "80.0Hz", "85.0Hz", "90.0Hz", "95.0Hz", "100Hz", "106Hz", "112Hz", "118Hz", "125Hz", "132Hz", "140Hz", "150Hz", "160Hz", "170Hz", "180Hz", "190Hz", "200Hz", "212Hz", "224Hz", "236Hz", "250Hz", "265Hz", "280Hz", "300Hz", "315Hz", "335Hz", "355Hz", "375Hz", "400Hz", "425Hz", "450Hz", "475Hz", "500Hz", "530Hz", "560Hz", "600Hz", "630Hz", "670Hz", "710Hz", "750Hz", "800Hz", "850Hz", "900Hz", "950Hz", "1.00kHz", "1.06kHz", "1.12kHz", "1.18kHz", "1.25kHz", "1.32kHz", "1.40kHz", "1.50kHz", "1.60kHz", "1.70kHz", "1.80kHz", "1.90kHz", "2.00kHz", "2.12kHz", "2.24kHz", "2.36kHz", "2.50kHz", "2.65kHz", "2.80kHz", "3.00kHz", "3.15kHz", "3.35kHz", "3.55kHz", "3.75kHz", "4.00kHz", "4.25kHz", "4.50kHz", "4.75kHz", "5.00kHz", "5.30kHz", "5.60kHz", "6.00kHz", "6.30kHz", "6.70kHz", "7.10kHz", "7.50kHz", "8.00kHz", "8.50kHz", "9.00kHz", "9.50kHz", "10.0kHz", "10.6kHz", "11.2kHz", "11.8kHz", "12.5kHz", "13.2kHz", "14.0kHz", "15.0kHz", "16.0kHz", "17.0kHz", "18.0kHz", "19.0kHz", "20.0kHz", "21.2kHz", "22.4kHz", "23.6kHz", "25.0kHz", "26.5kHz", "28.0kHz", "30.0kHz", "31.5kHz", "33.5kHz", "35.5kHz", "37.5kHz", "40.0kHz"
                                 ];

   // Table 29: VCM EQ Q (61)
   static StringArray tbl_29 = [
      "0.50", "0.53", "0.56", "0.59", "0.63", "0.67", "0.71", "0.75", "0.79", "0.84", "0.89", "0.94", "1.00", "1.06", "1.12", "1.19", "1.26", "1.33", "1.41", "1.50", "1.59", "1.68", "1.78", "1.89", "2.00", "2.12", "2.24", "2.38", "2.52", "2.67", "2.83", "3.00", "3.17", "3.36", "3.56", "3.78", "4.00", "4.24", "4.49", "4.76", "5.04", "5.34", "5.66", "5.99", "6.35", "6.73", "7.13", "7.55", "8.00", "8.48", "8.98", "9.51", "10.08", "10.68", "11.31", "11.99", "12.70", "13.45", "14.25", "15.10", "16.00"
                                 ];

   // Table 30: Speaker Type (11)
   static StringArray tbl_30 = [
      "Off", "BS 4x12", "AC 2x12", "AC 1x12", "AC 4x10", "BC 2x12", "AM 4x12", "YC 4x12", "JC 2x12", "OC 2x12", "OC 1x8"
                                 ];

   // Table 31: Speaker Type 2 (13)
   static StringArray tbl_31 = [
      "Off", "Stack", "Twin", "Tweed", "Oldies", "Modern", "Mean", "Soft", "Small", "Dip1", "Dip2", "Metal", "Light"
                                 ];

   // Table 36: LFO Speed (128)
   static StringArray tbl_36 = [
      "0.100Hz", "0.103Hz", "0.105Hz", "0.110Hz", "0.113Hz", "0.118Hz", "0.124Hz", "0.129Hz", "0.131Hz", "0.137Hz", "0.142Hz", "0.147Hz", "0.152Hz", "0.158Hz", "0.166Hz", "0.171Hz", "0.176Hz", "0.184Hz", "0.192Hz", "0.197Hz", "0.205Hz", "0.213Hz", "0.221Hz", "0.229Hz", "0.237Hz", "0.247Hz", "0.255Hz", "0.265Hz", "0.276Hz", "0.284Hz", "0.294Hz", "0.308Hz", "0.318Hz", "0.329Hz", "0.342Hz", "0.352Hz", "0.368Hz", "0.379Hz", "0.394Hz", "0.410Hz", "0.426Hz", "0.442Hz", "0.457Hz", "0.473Hz", "0.489Hz", "0.510Hz", "0.526Hz", "0.547Hz", "0.568Hz", "0.589Hz", "0.610Hz", "0.631Hz", "0.657Hz", "0.673Hz", "0.704Hz", "0.725Hz", "0.757Hz", "0.789Hz", "0.810Hz", "0.841Hz", "0.873Hz", "0.904Hz", "0.946Hz", "0.978Hz", "1.009Hz", "1.051Hz", "1.093Hz", "1.125Hz", "1.167Hz", "1.220Hz", "1.262Hz", "1.304Hz", "1.346Hz", "1.409Hz", "1.451Hz", "1.514Hz", "1.556Hz", "1.619Hz", "1.682Hz", "1.745Hz", "1.808Hz", "1.872Hz", "1.956Hz", "2.019Hz", "2.103Hz", "2.166Hz", "2.250Hz", "2.334Hz", "2.418Hz", "2.502Hz", "2.608Hz", "2.692Hz", "2.776Hz", "2.902Hz", "2.986Hz", "3.112Hz", "3.238Hz", "3.365Hz", "3.491Hz", "3.617Hz", "3.743Hz", "3.869Hz", "4.037Hz", "4.164Hz", "4.332Hz", "4.500Hz", "4.668Hz", "4.837Hz", "5.005Hz", "5.173Hz", "5.383Hz", "5.552Hz", "5.804Hz", "5.972Hz", "6.224Hz", "6.393Hz", "6.645Hz", "6.897Hz", "7.150Hz", "7.402Hz", "7.738Hz", "7.991Hz", "8.327Hz", "8.580Hz", "8.916Hz", "9.253Hz", "9.589Hz", "9.925Hz"
                                 ];

   // Table 39: EQ Frequency (256)
   static StringArray tbl_39 = [
      "16.0Hz", "16.3Hz", "17.0Hz", "17.3Hz", "18.0Hz", "18.3Hz", "19.0Hz", "19.4Hz", "20.0Hz", "20.5Hz", "21.2Hz", "21.8Hz", "22.4Hz", "23.0Hz", "23.6Hz", "24.4Hz", "25.0Hz", "25.9Hz", "26.5Hz", "27.4Hz", "28.0Hz", "29.0Hz", "30.0Hz", "30.7Hz", "31.5Hz", "32.5Hz", "33.5Hz", "34.5Hz", "35.5Hz", "36.5Hz", "37.5Hz", "38.7Hz", "40.0Hz", "41.0Hz", "42.5Hz", "43.4Hz", "45.0Hz", "46.0Hz", "47.5Hz", "48.7Hz", "50.0Hz", "51.6Hz", "53.0Hz", "54.6Hz", "56.0Hz", "57.9Hz", "60.0Hz", "61.3Hz", "63.0Hz", "64.9Hz", "67.0Hz", "68.8Hz", "71.0Hz", "72.9Hz", "75.0Hz", "77.2Hz", "80.0Hz", "81.8Hz", "85.0Hz", "86.6Hz", "90.0Hz", "91.7Hz", "95.0Hz", "97.2Hz", "100Hz", "103Hz", "106Hz", "109Hz", "112Hz", "115Hz", "118Hz", "122Hz", "125Hz", "130Hz", "132Hz", "137Hz", "140Hz", "145Hz", "150Hz", "154Hz", "160Hz", "163Hz", "170Hz", "173Hz", "180Hz", "183Hz", "190Hz", "194Hz", "200Hz", "205Hz", "212Hz", "218Hz", "224Hz", "230Hz", "236Hz", "244Hz", "250Hz", "259Hz", "265Hz", "274Hz", "280Hz", "290Hz", "300Hz", "307Hz", "315Hz", "325Hz", "335Hz", "345Hz", "355Hz", "365Hz", "375Hz", "387Hz", "400Hz", "410Hz", "425Hz", "434Hz", "450Hz", "460Hz", "475Hz", "487Hz", "500Hz", "516Hz", "530Hz", "546Hz", "560Hz", "579Hz", "600Hz", "613Hz", "630Hz", "649Hz", "670Hz", "688Hz", "710Hz", "729Hz", "750Hz", "772Hz", "800Hz", "818Hz", "850Hz", "866Hz", "900Hz", "917Hz", "950Hz", "972Hz", "1.00kHz", "1.03kHz", "1.06kHz", "1.09kHz", "1.12kHz", "1.15kHz", "1.18kHz", "1.22kHz", "1.25kHz", "1.30kHz", "1.32kHz", "1.37kHz", "1.40kHz", "1.45kHz", "1.50kHz", "1.54kHz", "1.60kHz", "1.63kHz", "1.70kHz", "1.73kHz", "1.80kHz", "1.83kHz", "1.90kHz", "1.94kHz", "2.00kHz", "2.05kHz", "2.12kHz", "2.18kHz", "2.24kHz", "2.30kHz", "2.36kHz", "2.44kHz", "2.50kHz", "2.59kHz", "2.65kHz", "2.74kHz", "2.80kHz", "2.90kHz", "3.00kHz", "3.07kHz", "3.15kHz", "3.25kHz", "3.35kHz", "3.45kHz", "3.55kHz", "3.65kHz", "3.75kHz", "3.87kHz", "4.00kHz", "4.10kHz", "4.25kHz", "4.34kHz", "4.50kHz", "4.60kHz", "4.75kHz", "4.87kHz", "5.00kHz", "5.16kHz", "5.30kHz", "5.46kHz", "5.60kHz", "5.79kHz", "6.00kHz", "6.13kHz", "6.30kHz", "6.49kHz", "6.70kHz", "6.88kHz", "7.10kHz", "7.29kHz", "7.50kHz", "7.72kHz", "8.00kHz", "8.18kHz", "8.50kHz", "8.66kHz", "9.00kHz", "9.17kHz", "9.50kHz", "9.72kHz", "10.0kHz", "10.3kHz", "10.6kHz", "10.9kHz", "11.2kHz", "11.5kHz", "11.8kHz", "12.2kHz", "12.5kHz", "13.0kHz", "13.2kHz", "13.7kHz", "14.0kHz", "14.5kHz", "15.0kHz", "15.4kHz", "16.0kHz", "16.3kHz", "17.0kHz", "17.3kHz", "18.0kHz", "18.3kHz", "19.0kHz", "19.4kHz", "20.0kHz", "20.5kHz", "21.2kHz", "21.8kHz", "22.4kHz", "23.0kHz", "23.6kHz", "24.4kHz"
                                 ];


   // Table 40: Beat Repeat Ratio (11)
   static StringArray tbl_40 = [
      "1/32", "1/24", "1/16", "1/12", "1/8", "1/6", "1/4", "1/3", "1/2", "2/3", "1"
                                 ];


   // Table 41: Delay Time (short) (128)
   static StringArray tbl_41 = [
      "25.0ms", "25.7ms", "26.4ms", "27.1ms", "27.9ms", "28.7ms", "29.4ms", "30.3ms", "31.1ms", "32.0ms", "32.8ms", "33.8ms", "34.7ms", "35.6ms", "36.6ms", "37.6ms", "38.7ms", "39.8ms", "40.9ms", "42.0ms", "43.1ms", "44.3ms", "45.6ms", "46.8ms", "48.1ms", "49.5ms", "50.8ms", "52.2ms", "53.7ms", "55.2ms", "56.7ms", "58.3ms", "59.9ms", "61.5ms", "63.2ms", "65.0ms", "66.8ms", "68.6ms", "70.5ms", "72.5ms", "74.5ms", "76.5ms", "78.7ms", "80.8ms", "83.1ms", "85.4ms", "87.7ms", "90.1ms", "92.6ms", "95.2ms", "97.8ms", "100.5ms", "103.3ms", "106.2ms", "109.1ms", "112.1ms", "115.2ms", "118.4ms", "121.7ms", "125.1ms", "128.5ms", "132.1ms", "135.7ms", "139.5ms", "143.4ms", "147.3ms", "151.4ms", "155.6ms", "159.9ms", "164.3ms", "168.9ms", "173.5ms", "178.3ms", "183.3ms", "188.3ms", "193.6ms", "198.9ms", "204.4ms", "210.1ms", "215.9ms", "221.9ms", "228.0ms", "234.3ms", "240.8ms", "247.4ms", "254.3ms", "261.3ms", "268.6ms", "276.0ms", "283.6ms", "291.5ms", "299.5ms", "307.8ms", "316.3ms", "325.1ms", "334.1ms", "343.3ms", "352.8ms", "362.6ms", "372.6ms", "382.9ms", "393.5ms", "404.4ms", "415.6ms", "427.1ms", "438.9ms", "451.0ms", "463.5ms", "476.3ms", "489.5ms", "503.1ms", "517.0ms", "531.3ms", "546.0ms", "561.1ms", "576.6ms", "592.5ms", "608.9ms", "625.8ms", "643.1ms", "660.9ms", "679.2ms", "698.0ms", "717.3ms", "737.1ms", "757.5ms", "778.5ms", "800.0ms"
                                 ];

   // Table 42: Delay Time (long) (128)
   static StringArray tbl_42 = [
      "50.0ms", "51.2ms", "52.4ms", "53.7ms", "54.9ms", "56.3ms", "57.6ms", "59.0ms", "60.4ms", "61.8ms", "63.3ms", "64.8ms", "66.4ms", "67.9ms", "69.6ms", "71.2ms", "72.9ms", "74.7ms", "76.4ms", "78.3ms", "80.1ms", "82.1ms", "84.0ms", "86.0ms", "88.1ms", "90.2ms", "92.3ms", "94.5ms", "96.8ms", "99.1ms", "101.5ms", "103.9ms", "106.4ms", "108.9ms", "111.5ms", "114.2ms", "116.9ms", "119.7ms", "122.5ms", "125.5ms", "128.5ms", "131.5ms", "134.7ms", "137.9ms", "141.2ms", "144.5ms", "148.0ms", "151.5ms", "155.1ms", "158.8ms", "162.6ms", "166.5ms", "170.5ms", "174.5ms", "178.7ms", "183.0ms", "187.3ms", "191.8ms", "196.4ms", "201.1ms", "205.9ms", "210.8ms", "215.8ms", "221.0ms", "226.3ms", "231.7ms", "237.2ms", "242.9ms", "248.6ms", "254.6ms", "260.7ms", "266.9ms", "273.3ms", "279.8ms", "286.5ms", "293.3ms", "300.3ms", "307.5ms", "314.8ms", "322.3ms", "330.0ms", "337.9ms", "345.9ms", "354.2ms", "362.7ms", "371.3ms", "380.2ms", "389.2ms", "398.5ms", "408.1ms", "417.8ms", "427.8ms", "438.0ms", "448.4ms", "459.1ms", "470.1ms", "481.3ms", "492.8ms", "504.6ms", "516.6ms", "528.9ms", "541.6ms", "554.5ms", "567.7ms", "581.3ms", "595.1ms", "609.4ms", "623.9ms", "638.8ms", "654.0ms", "669.6ms", "685.6ms", "702.0ms", "718.8ms", "735.9ms", "753.5ms", "771.5ms", "789.9ms", "808.7ms", "828.0ms", "847.8ms", "868.0ms", "888.7ms", "910.0ms", "931.7ms", "953.9ms", "976.7ms", "1000.0ms"
                                 ];

   // Table 45: Side Chain Input Level (128)
   static StringArray tbl_45 = [
      "-infdB", "-62.0dB", "-59.0dB", "-56.0dB", "-54.0dB", "-52.0dB", "-50.0dB", "-48.0dB", "-47.0dB", "-46.0dB", "-45.0dB", "-44.0dB", "-43.0dB", "-42.0dB", "-41.0dB", "-40.0dB", "-39.0dB", "-38.0dB", "-37.0dB", "-36.0dB", "-35.0dB", "-34.0dB", "-33.0dB", "-32.0dB", "-31.0dB", "-30.0dB", "-29.0dB", "-28.0dB", "-27.0dB", "-26.0dB", "-25.0dB", "-24.0dB", "-23.5dB", "-23.0dB", "-22.5dB", "-22.0dB", "-21.5dB", "-21.0dB", "-20.5dB", "-20.0dB", "-19.5dB", "-19.0dB", "-18.5dB", "-18.0dB", "-17.5dB", "-17.0dB", "-16.5dB", "-16.0dB", "-15.5dB", "-15.0dB", "-14.5dB", "-14.0dB", "-13.5dB", "-13.0dB", "-12.5dB", "-12.0dB", "-11.5dB", "-11.0dB", "-10.5dB", "-10.0dB", "-9.5dB", "-9.0dB", "-8.5dB", "-8.0dB", "-7.5dB", "-7.0dB", "-6.5dB", "-6.0dB", "-5.5dB", "-5.0dB", "-4.5dB", "-4.0dB", "-3.5dB", "-3.0dB", "-2.5dB", "-2.0dB", "-1.5dB", "-1.0dB", "-0.5dB", "+0.0dB", "+0.5dB", "1.0dB", "+1.5dB", "+2.0dB", "+2.5dB", "+3.0dB", "+3.5dB", "+4.0dB", "+4.5dB", "+5.0dB", "+5.5dB", "+6.0dB", "+6.5dB", "+7.0dB", "+7.5dB", "+8.0dB", "+8.5dB", "+9.0dB", "+9.5dB", "+10.0dB", "+10.5dB", "+11.0dB", "+11.5dB", "+12.0dB", "+12.5dB", "+13.0dB", "+13.5dB", "+14.0dB", "+14.5dB", "+15.0dB", "+15.5dB", "+16.0dB", "+16.5dB", "+17.0dB", "+17.5dB", "+18.0dB", "+18.5dB", "+19.0dB", "+19.5dB", "+20.0dB", "+20.5dB", "+21.0dB", "+21.5dB", "+22.0dB", "+22.5dB", "+23.0dB", "+23.5dB", "+24.0dB"
                                 ];

   // Table 46: Beat Repeat Cutoff (128)
   static StringArray tbl_46 = [
      "14.1Hz", "15.0Hz", "15.8Hz", "16.8Hz", "17.8Hz", "18.8Hz", "20.0Hz", "21.1Hz", "22.4Hz", "23.7Hz", "25.1Hz", "26.6Hz", "28.2Hz", "29.9Hz", "31.6Hz", "33.5Hz", "35.5Hz", "37.6Hz", "39.8Hz", "42.2Hz", "44.7Hz", "47.3Hz", "50.1Hz", "53.1Hz", "56.2Hz", "59.6Hz", "63.1Hz", "66.8Hz", "70.8Hz", "75.0Hz", "79.4Hz", "84.1Hz", "89.1Hz", "94.4Hz", "100Hz", "106Hz", "112Hz", "119Hz", "126Hz", "133Hz", "141Hz", "150Hz", "158Hz", "168Hz", "178Hz", "188Hz", "200Hz", "211Hz", "224Hz", "237Hz", "251Hz", "266Hz", "282Hz", "299Hz", "316Hz", "335Hz", "355Hz", "376Hz", "398Hz", "422Hz", "447Hz", "473Hz", "501Hz", "531Hz", "562Hz", "596Hz", "631Hz", "668Hz", "708Hz", "750Hz", "794Hz", "841Hz", "891Hz", "944Hz", "1.00kHz", "1.06kHz", "1.12kHz", "1.19kHz", "1.26kHz", "1.33kHz", "1.41kHz", "1.50kHz", "1.58kHz", "1.68kHz", "1.78kHz", "1.88kHz", "2.00kHz", "2.11kHz", "2.24kHz", "2.37kHz", "2.51kHz", "2.66kHz", "2.82kHz", "2.99kHz", "3.16kHz", "3.35kHz", "3.55kHz", "3.76kHz", "3.98kHz", "4.22kHz", "4.47kHz", "4.73kHz", "5.01kHz", "5.31kHz", "5.62kHz", "5.96kHz", "6.31kHz", "6.68kHz", "7.08kHz", "7.50kHz", "7.94kHz", "8.41kHz", "8.91kHz", "9.44kHz", "10.0kHz", "10.6kHz", "11.2kHz", "11.9kHz", "12.6kHz", "13.3kHz", "14.1kHz", "15.0kHz", "15.8kHz", "16.8kHz", "17.8kHz", "18.8kHz", "20.0kHz", "21.1kHz"
                                 ];

   // Table 47: Beat Repeat Gain (128)
   static StringArray tbl_47 = [
      "-19.50dB", "-19.25dB", "-19.00dB", "-18.75dB", "-18.50dB", "-18.25dB", "-18.00dB", "-17.75dB", "-17.50dB", "-17.25dB", "-17.00dB", "-16.75dB", "-16.50dB", "-16.25dB", "-16.00dB", "-15.75dB", "-15.50dB", "-15.25dB", "-15.00dB", "-14.75dB", "-14.50dB", "-14.25dB", "-14.00dB", "-13.75dB", "-13.50dB", "-13.25dB", "-13.00dB", "-12.75dB", "-12.50dB", "-12.25dB", "-12.00dB", "-11.75dB", "-11.50dB", "-11.25dB", "-11.00dB", "-10.75dB", "-10.50dB", "-10.25dB", "-10.00dB", "-9.75dB", "-9.50dB", "-9.25dB", "-9.00dB", "-8.75dB", "-8.50dB", "-8.25dB", "-8.00dB", "-7.75dB", "-7.50dB", "-7.25dB", "-7.00dB", "-6.75dB", "-6.50dB", "-6.25dB", "-6.00dB", "-5.75dB", "-5.50dB", "-5.25dB", "-5.00dB", "-4.75dB", "-4.50dB", "-4.25dB", "-4.00dB", "-3.75dB", "-3.50dB", "-3.25dB", "-3.00dB", "-2.75dB", "-2.50dB", "-2.25dB", "-2.00dB", "-1.75dB", "-1.50dB", "-1.25dB", "-1.00dB", "-0.75dB", "-0.50dB", "-0.25dB", "+0.00dB", "+0.25dB", "+0.50dB", "+0.75dB", "+1.00dB", "+1.25dB", "+1.50dB", "+1.75dB", "+2.00dB", "+2.25dB", "+2.50dB", "+2.75dB", "+3.00dB", "+3.25dB", "+3.50dB", "+3.75dB", "+4.00dB", "+4.25dB", "+4.50dB", "+4.75dB", "+5.00dB", "+5.25dB", "+5.50dB", "+5.75dB", "+6.00dB", "+6.25dB", "+6.50dB", "+6.75dB", "+7.00dB", "+7.25dB", "+7.50dB", "+7.75dB", "+8.00dB", "+8.25dB", "+8.50dB", "+8.75dB", "+9.00dB", "+9.25dB", "+9.50dB", "+9.75dB", "+10.00dB", "+10.25dB", "+10.50dB", "+10.75dB", "+11.00dB", "+11.25dB", "+11.50dB", "+11.75dB", "+12.00dB"
                                 ];

   // Table 48: Beat Repeat Length (128)
   static StringArray tbl_48 = [
      "1/256.00", "1/224.00", "1/192.00", "1/172.00", "1/161.00", "1/151.00", "1/140.00", "1/128.00", "1/116.00", "1/108.00", "1/104.00", "1/96.00", "1/92.00", "1/88.00", "1/84.00", "1/80.00", "1/76.00", "1/72.00", "1/68.00", "1/64.00", "1/56.00", "1/48.00", "1/40.00", "1/36.00", "1/32.00", "1/30.00", "1/28.00", "1/26.00", "1/24.00", "1/22.00", "1/20.00", "1/19.00", "1/18.00", "1/17.00", "1/16.00", "1/15.00", "1/14.00", "1/13.50", "1/13.00", "1/12.50", "1/12.00", "1/11.50", "1/11.00", "1/10.50", "1/10.00", "1/9.50", "1/9.00", "1/8.75", "1/8.50", "1/8.25", "1/8.00", "1/7.75", "1/7.50", "1/7.25", "1/7.00", "1/6.90", "1/6.80", "1/6.70", "1/6.60", "1/6.50", "1/6.40", "1/6.30", "1/6.20", "1/6.10", "1/6.00", "1/5.90", "1/5.80", "1/5.70", "1/5.60", "1/5.50", "1/5.40", "1/5.30", "1/5.20", "1/5.10", "1/5.00", "1/4.90", "1/4.80", "1/4.70", "1/4.60", "1/4.50", "1/4.40", "1/4.30", "1/4.20", "1/4.10", "1/4.00", "1/3.90", "1/3.80", "1/3.70", "1/3.60", "1/3.50", "1/3.40", "1/3.30", "1/3.20", "1/3.10", "1/3.00", "1/2.90", "1/2.80", "1/2.70", "1/2.60", "1/2.50", "1/2.40", "1/2.30", "1/2.25", "1/2.20", "1/2.15", "1/2.10", "1/2.05", "1/2.00", "1/1.95", "1/1.90", "1/1.85", "1/1.80", "1/1.75", "1/1.70", "1/1.65", "1/1.60", "1/1.55", "1/1.50", "1/1.45", "1/1.40", "1/1.35", "1/1.30", "1/1.25", "1/1.20", "1/1.15", "1/1.10", "1/1.05", "1/1.00"
                                 ];

   // Table 49: Rotary123 Windup/down Accel (128)
   static StringArray tbl_49 = [
      "0.21", "0.22", "0.24", "0.25", "0.27", "0.29", "0.30", "0.32", "0.33", "0.35", "0.37", "0.38", "0.40", "0.41", "0.43", "0.44", "0.46", "0.48", "0.49", "0.51", "0.52", "0.54", "0.56", "0.57", "0.59", "0.60", "0.62", "0.63", "0.65", "0.67", "0.68", "0.70", "0.71", "0.73", "0.75", "0.76", "0.78", "0.79", "0.81", "0.83", "0.84", "0.86", "0.87", "0.89", "0.90", "0.92", "0.94", "0.95", "0.97", "0.98", "1.00", "1.02", "1.03", "1.05", "1.06", "1.08", "1.10", "1.11", "1.13", "1.14", "1.16", "1.17", "1.19", "1.21", "1.22", "1.24", "1.25", "1.27", "1.29", "1.30", "1.32", "1.33", "1.35", "1.37", "1.38", "1.40", "1.41", "1.43", "1.44", "1.46", "1.48", "1.49", "1.51", "1.52", "1.54", "1.56", "1.57", "1.59", "1.60", "1.62", "1.63", "1.65", "1.67", "1.68", "1.70", "1.71", "1.73", "1.75", "1.76", "1.78", "1.79", "1.81", "1.83", "1.84", "1.86", "1.87", "1.89", "1.90", "1.92", "1.94", "1.95", "1.97", "1.98", "2.00"
                                 ];

   // Table 50: Downward Comp Attack (128)
   static StringArray tbl_50 = [
      "0.010ms", "0.011ms", "0.012ms", "0.013ms", "0.014ms", "0.015ms", "0.016ms", "0.017ms", "0.018ms", "0.019ms", "0.020ms", "0.022ms", "0.023ms", "0.025ms", "0.027ms", "0.029ms", "0.031ms", "0.033ms", "0.036ms", "0.038ms", "0.041ms", "0.044ms", "0.047ms", "0.051ms", "0.055ms", "0.059ms", "0.063ms", "0.068ms", "0.073ms", "0.078ms", "0.084ms", "0.090ms", "0.096ms", "0.103ms", "0.111ms", "0.119ms", "0.128ms", "0.137ms", "0.147ms", "0.158ms", "0.170ms", "0.182ms", "0.195ms", "0.210ms", "0.225ms", "0.242ms", "0.259ms", "0.278ms", "0.299ms", "0.321ms", "0.344ms", "0.369ms", "0.396ms", "0.425ms", "0.457ms", "0.490ms", "0.526ms", "0.565ms", "0.606ms", "0.650ms", "0.698ms", "0.749ms", "0.804ms", "0.863ms", "0.927ms", "0.995ms", "1.068ms", "1.146ms", "1.230ms", "1.320ms", "1.417ms", "1.521ms", "1.632ms", "1.752ms", "1.880ms", "2.018ms", "2.166ms", "2.325ms", "2.496ms", "2.679ms", "2.875ms", "3.086ms", "3.312ms", "3.555ms", "3.816ms", "4.095ms", "4.396ms", "4.718ms", "5.064ms", "5.435ms", "5.834ms", "6.262ms", "6.721ms", "7.214ms", "7.743ms", "8.311ms", "8.920ms", "9.574ms", "10.28ms", "11.03ms", "11.84ms", "12.71ms", "13.64ms", "14.64ms", "15.71ms", "16.86ms", "18.10ms", "19.43ms", "20.85ms", "22.38ms", "24.02ms", "25.79ms", "27.68ms", "29.71ms", "31.88ms", "34.22ms", "36.73ms", "39.42ms", "42.32ms", "45.42ms", "48.75ms", "52.32ms", "56.16ms", "60.28ms", "64.70ms", "69.44ms", "74.53ms", "80.00ms"
                                 ];

   // Table 51: Downward Comp Release (128)
   static StringArray tbl_51 = [
      "6.250ms", "6.505ms", "6.770ms", "7.046ms", "7.333ms", "7.632ms", "7.943ms", "8.267ms", "8.604ms", "8.955ms", "9.320ms", "9.700ms", "10.09ms", "10.51ms", "10.93ms", "11.38ms", "11.84ms", "12.33ms", "12.83ms", "13.35ms", "13.90ms", "14.46ms", "15.05ms", "15.67ms", "16.31ms", "16.97ms", "17.66ms", "18.38ms", "19.13ms", "19.91ms", "20.72ms", "21.57ms", "22.45ms", "23.36ms", "24.31ms", "25.30ms", "26.34ms", "27.41ms", "28.53ms", "29.69ms", "30.90ms", "32.16ms", "33.47ms", "34.83ms", "36.25ms", "37.73ms", "39.27ms", "40.87ms", "42.54ms", "44.27ms", "46.08ms", "47.95ms", "49.91ms", "51.94ms", "54.06ms", "56.26ms", "58.56ms", "60.94ms", "63.43ms", "66.01ms", "68.71ms", "71.51ms", "74.42ms", "77.45ms", "80.61ms", "83.90ms", "87.32ms", "90.88ms", "94.58ms", "98.44ms", "102.4ms", "106.6ms", "111.0ms", "115.5ms", "120.2ms", "125.1ms", "130.2ms", "135.5ms", "141.0ms", "146.8ms", "152.8ms", "159.0ms", "165.5ms", "172.2ms", "179.2ms", "186.5ms", "194.2ms", "202.1ms", "210.3ms", "218.9ms", "227.8ms", "237.1ms", "246.7ms", "256.8ms", "267.3ms", "278.2ms", "289.5ms", "301.3ms", "313.6ms", "326.4ms", "339.7ms", "353.5ms", "367.9ms", "382.9ms", "398.5ms", "414.8ms", "431.7ms", "449.3ms", "467.6ms", "486.7ms", "506.5ms", "527.2ms", "548.6ms", "571.0ms", "594.3ms", "618.5ms", "643.7ms", "670.0ms", "697.3ms", "725.7ms", "755.3ms", "786.1ms", "818.1ms", "851.4ms", "886.2ms", "922.3ms", "959.9ms", "999.0ms"
                                 ];

   // Table 52: Downward Comp Ratio (128)
   static StringArray tbl_52 = [
      "1.00", "1.05", "1.10", "1.15", "1.20", "1.25", "1.30", "1.35", "1.40", "1.45", "1.50", "1.55", "1.60", "1.65", "1.70", "1.75", "1.80", "1.85", "1.90", "1.95", "2.00", "2.05", "2.10", "2.15", "2.20", "2.25", "2.30", "2.35", "2.40", "2.45", "2.50", "2.55", "2.60", "2.65", "2.70", "2.75", "2.80", "2.85", "2.90", "2.95", "3.00", "3.05", "3.10", "3.15", "3.20", "3.25", "3.30", "3.35", "3.40", "3.45", "3.50", "3.55", "3.60", "3.65", "3.70", "3.75", "3.80", "3.85", "3.90", "3.95", "4.00", "4.05", "4.10", "4.20", "4.30", "4.40", "4.50", "4.60", "4.70", "4.80", "4.90", "5.00", "5.20", "5.40", "5.60", "5.80", "6.00", "6.20", "6.40", "6.60", "6.80", "7.00", "7.50", "8.00", "8.50", "9.00", "9.50", "10.00", "10.50", "11.00", "12.00", "13.00", "14.00", "15.00", "16.00", "17.00", "18.00", "19.00", "20.00", "21.00", "22.00", "24.00", "26.00", "28.00", "30.00", "32.00", "34.00", "36.00", "38.00", "40.00", "45.00", "50.00", "55.00", "60.00", "65.00", "70.00", "75.00", "80.00", "85.00", "90.00", "95.00", "100.00", "120.00", "150.00", "200.00", "300.00", "500.00", "inf"
                                 ];

   // Table 53: Downward Comp EQ Q (127)
   static StringArray tbl_53 = [
      "0.100", "0.104", "0.108", "0.112", "0.116", "0.120", "0.125", "0.129", "0.134", "0.139", "0.144", "0.149", "0.155", "0.161", "0.167", "0.173", "0.179", "0.186", "0.193", "0.200", "0.208", "0.215", "0.223", "0.232", "0.240", "0.249", "0.259", "0.268", "0.278", "0.289", "0.299", "0.311", "0.322", "0.334", "0.346", "0.359", "0.373", "0.387", "0.401", "0.416", "0.431", "0.448", "0.464", "0.481", "0.499", "0.518", "0.537", "0.557", "0.578", "0.599", "0.622", "0.645", "0.669", "0.694", "0.720", "0.746", "0.774", "0.803", "0.833", "0.864", "0.896", "0.930", "0.964", "1.000", "1.037", "1.076", "1.116", "1.157", "1.201", "1.245", "1.292", "1.340", "1.389", "1.441", "1.495", "1.551", "1.608", "1.668", "1.730", "1.795", "1.861", "1.931", "2.003", "2.077", "2.154", "2.235", "2.318", "2.404", "2.494", "2.586", "2.683", "2.783", "2.886", "2.994", "3.105", "3.221", "3.340", "3.465", "3.594", "3.728", "3.866", "4.010", "4.160", "4.314", "4.475", "4.642", "4.814", "4.994", "5.179", "5.372", "5.572", "5.780", "5.995", "6.218", "6.449", "6.690", "6.939", "7.197", "7.465", "7.743", "8.031", "8.330", "8.640", "8.962", "9.295", "9.641", "10.00"
                                 ];

   // Table 54: Downward Comp EQ Freq (128)
   static StringArray tbl_54 = [
      "11.89Hz", "12.59Hz", "13.34Hz", "14.13Hz", "14.96Hz", "15.85Hz", "16.79Hz", "17.78Hz", "18.84Hz", "19.95Hz", "21.13Hz", "22.39Hz", "23.71Hz", "25.12Hz", "26.61Hz", "28.18Hz", "29.85Hz", "31.62Hz", "33.50Hz", "35.48Hz", "37.58Hz", "39.81Hz", "42.17Hz", "44.67Hz", "47.32Hz", "50.12Hz", "53.09Hz", "56.23Hz", "59.57Hz", "63.10Hz", "66.83Hz", "70.79Hz", "74.99Hz", "79.43Hz", "84.14Hz", "89.13Hz", "94.41Hz", "100.0Hz", "105.9Hz", "112.2Hz", "118.9Hz", "125.9Hz", "133.4Hz", "141.3Hz", "149.6Hz", "158.5Hz", "167.9Hz", "177.8Hz", "188.4Hz", "199.5Hz", "211.3Hz", "223.9Hz", "237.1Hz", "251.2Hz", "266.1Hz", "281.8Hz", "298.5Hz", "316.2Hz", "335.0Hz", "354.8Hz", "375.8Hz", "398.1Hz", "421.7Hz", "446.7Hz", "473.2Hz", "501.2Hz", "530.9Hz", "562.3Hz", "595.7Hz", "631.0Hz", "668.3Hz", "707.9Hz", "749.9Hz", "794.3Hz", "841.4Hz", "891.3Hz", "944.1Hz", "1.000kHz", "1.059kHz", "1.122kHz", "1.189kHz", "1.259kHz", "1.334kHz", "1.413kHz", "1.496kHz", "1.585kHz", "1.679kHz", "1.778kHz", "1.884kHz", "1.995kHz", "2.113kHz", "2.239kHz", "2.371kHz", "2.512kHz", "2.661kHz", "2.818kHz", "2.985kHz", "3.162kHz", "3.350kHz", "3.548kHz", "3.758kHz", "3.981kHz", "4.217kHz", "4.467kHz", "4.732kHz", "5.012kHz", "5.309kHz", "5.623kHz", "5.957kHz", "6.310kHz", "6.683kHz", "7.079kHz", "7.499kHz", "7.943kHz", "8.414kHz", "8.913kHz", "9.441kHz", "10.00kHz", "10.59kHz", "11.22kHz", "11.89kHz", "12.59kHz", "13.34kHz", "14.13kHz", "14.96kHz", "15.85kHz", "16.79kHz", "17.78kHz"
                                 ];

   // Table 55: Downward Comp Post HPF (128)
   static StringArray tbl_55 = [
      "Off", "1.04Hz", "1.07Hz", "1.11Hz", "1.15Hz", "1.19Hz", "1.23Hz", "1.27Hz", "1.32Hz", "1.36Hz", "1.41Hz", "1.46Hz", "1.51Hz", "1.57Hz", "1.62Hz", "1.68Hz", "1.74Hz", "1.80Hz", "1.86Hz", "1.93Hz", "2.00Hz", "2.07Hz", "2.14Hz", "2.21Hz", "2.29Hz", "2.37Hz", "2.45Hz", "2.54Hz", "2.63Hz", "2.72Hz", "2.82Hz", "2.92Hz", "3.02Hz", "3.13Hz", "3.24Hz", "3.35Hz", "3.47Hz", "3.59Hz", "3.72Hz", "3.85Hz", "3.98Hz", "4.12Hz", "4.27Hz", "4.42Hz", "4.57Hz", "4.73Hz", "4.90Hz", "5.07Hz", "5.25Hz", "5.43Hz", "5.62Hz", "5.82Hz", "6.03Hz", "6.24Hz", "6.46Hz", "6.68Hz", "6.92Hz", "7.16Hz", "7.41Hz", "7.67Hz", "7.94Hz", "8.22Hz", "8.51Hz", "8.81Hz", "9.12Hz", "9.44Hz", "9.77Hz", "10.12Hz", "10.47Hz", "10.84Hz", "11.22Hz", "11.61Hz", "12.02Hz", "12.45Hz", "12.88Hz", "13.34Hz", "13.80Hz", "14.29Hz", "14.79Hz", "15.31Hz", "15.85Hz", "16.41Hz", "16.98Hz", "17.58Hz", "18.20Hz", "18.84Hz", "19.50Hz", "20.18Hz", "20.89Hz", "21.63Hz", "22.39Hz", "23.17Hz", "23.99Hz", "24.83Hz", "25.70Hz", "26.61Hz", "27.54Hz", "28.51Hz", "29.51Hz", "30.55Hz", "31.62Hz", "32.73Hz", "33.88Hz", "35.08Hz", "36.31Hz", "37.58Hz", "38.90Hz", "40.27Hz", "41.69Hz", "43.15Hz", "44.67Hz", "46.24Hz", "47.86Hz", "49.55Hz", "51.29Hz", "53.09Hz", "54.95Hz", "56.89Hz", "58.88Hz", "60.95Hz", "63.10Hz", "65.31Hz", "67.61Hz", "69.98Hz", "72.44Hz", "74.99Hz", "77.62Hz", "80.35Hz"
                                 ];

   // Table 56: Rotary Speaker 2 Speed Slow Woofer (128)
   static StringArray tbl_56 = [
      "0.0rpm", "22.7rpm", "23.0rpm", "23.3rpm", "23.7rpm", "24.0rpm", "24.3rpm", "24.6rpm", "24.9rpm", "25.2rpm", "25.5rpm", "25.9rpm", "26.2rpm", "26.5rpm", "26.8rpm", "27.1rpm", "27.4rpm", "27.8rpm", "28.1rpm", "28.4rpm", "28.7rpm", "29.0rpm", "29.3rpm", "29.7rpm", "30.0rpm", "30.3rpm", "30.6rpm", "30.9rpm", "31.2rpm", "31.5rpm", "31.9rpm", "32.2rpm", "32.5rpm", "32.8rpm", "33.1rpm", "33.4rpm", "33.8rpm", "34.1rpm", "34.4rpm", "34.7rpm", "35.0rpm", "35.3rpm", "35.6rpm", "36.0rpm", "36.3rpm", "36.6rpm", "36.9rpm", "37.2rpm", "37.5rpm", "37.9rpm", "38.2rpm", "38.5rpm", "38.8rpm", "39.1rpm", "39.4rpm", "39.7rpm", "40.1rpm", "40.4rpm", "41.0rpm", "41.6rpm", "42.3rpm", "42.9rpm", "43.5rpm", "44.2rpm", "44.8rpm", "45.4rpm", "46.1rpm", "46.7rpm", "47.3rpm", "47.9rpm", "48.6rpm", "49.2rpm", "49.8rpm", "50.5rpm", "51.1rpm", "51.7rpm", "52.4rpm", "53.0rpm", "53.6rpm", "54.3rpm", "54.9rpm", "55.5rpm", "56.1rpm", "56.8rpm", "57.4rpm", "58.0rpm", "58.7rpm", "59.3rpm", "59.9rpm", "60.6rpm", "61.2rpm", "61.8rpm", "62.5rpm", "63.1rpm", "63.7rpm", "64.3rpm", "65.0rpm", "65.6rpm", "66.2rpm", "66.9rpm", "67.5rpm", "68.1rpm", "68.8rpm", "69.4rpm", "70.0rpm", "70.7rpm", "71.3rpm", "71.9rpm", "72.5rpm", "73.2rpm", "73.8rpm", "74.4rpm", "75.1rpm", "75.7rpm", "76.3rpm", "77.0rpm", "77.6rpm", "78.2rpm", "78.9rpm", "79.5rpm", "80.1rpm", "80.7rpm", "82.0rpm", "83.3rpm", "84.5rpm", "85.8rpm", "87.1rpm", "88.3rpm"
                                 ];

   // Table 57: Rotary Speaker 2 Speed Slow Horn (128)
   static StringArray tbl_57 = [
      "0.0rpm", "23.0rpm", "23.3rpm", "23.7rpm", "24.0rpm", "24.3rpm", "24.6rpm", "24.9rpm", "25.2rpm", "25.5rpm", "25.9rpm", "26.2rpm", "26.5rpm", "26.8rpm", "27.1rpm", "27.4rpm", "27.8rpm", "28.1rpm", "28.4rpm", "28.7rpm", "29.0rpm", "29.3rpm", "29.7rpm", "30.0rpm", "30.3rpm", "30.6rpm", "30.9rpm", "31.2rpm", "31.5rpm", "31.9rpm", "32.2rpm", "32.5rpm", "32.8rpm", "33.1rpm", "33.4rpm", "33.8rpm", "34.1rpm", "34.4rpm", "34.7rpm", "35.0rpm", "35.3rpm", "35.6rpm", "36.0rpm", "36.3rpm", "36.6rpm", "36.9rpm", "37.2rpm", "37.5rpm", "37.9rpm", "38.2rpm", "38.5rpm", "38.8rpm", "39.1rpm", "39.4rpm", "39.7rpm", "40.1rpm", "40.4rpm", "41.0rpm", "41.6rpm", "42.3rpm", "42.9rpm", "43.5rpm", "44.2rpm", "44.8rpm", "45.4rpm", "46.1rpm", "46.7rpm", "47.3rpm", "47.9rpm", "48.6rpm", "49.2rpm", "49.8rpm", "50.5rpm", "51.1rpm", "51.7rpm", "52.4rpm", "53.0rpm", "53.6rpm", "54.3rpm", "54.9rpm", "55.5rpm", "56.1rpm", "56.8rpm", "57.4rpm", "58.0rpm", "58.7rpm", "59.3rpm", "59.9rpm", "60.6rpm", "61.2rpm", "61.8rpm", "62.5rpm", "63.1rpm", "63.7rpm", "64.3rpm", "65.0rpm", "65.6rpm", "66.2rpm", "66.9rpm", "67.5rpm", "68.1rpm", "68.8rpm", "69.4rpm", "70.0rpm", "70.7rpm", "71.3rpm", "71.9rpm", "72.5rpm", "73.2rpm", "73.8rpm", "74.4rpm", "75.1rpm", "75.7rpm", "76.3rpm", "77.0rpm", "77.6rpm", "78.2rpm", "78.9rpm", "79.5rpm", "80.1rpm", "80.7rpm", "82.0rpm", "83.3rpm", "84.5rpm", "85.8rpm", "87.1rpm", "88.3rpm", "89.6rpm"
                                 ];

   // Table 58: Rotary Speaker 2 Speed Fast Woofer (128)
   static StringArray tbl_58 = [
      "-", "189.3rpm", "191.8rpm", "194.3rpm", "196.8rpm", "199.4rpm", "201.9rpm", "204.4rpm", "206.9rpm", "209.4rpm", "212.0rpm", "214.5rpm", "217.0rpm", "219.5rpm", "222.1rpm", "224.6rpm", "227.1rpm", "229.6rpm", "232.2rpm", "234.7rpm", "237.2rpm", "239.7rpm", "242.2rpm", "244.8rpm", "247.3rpm", "249.8rpm", "252.3rpm", "254.9rpm", "257.4rpm", "259.9rpm", "262.4rpm", "265.0rpm", "267.5rpm", "270.0rpm", "272.5rpm", "275.1rpm", "277.6rpm", "280.1rpm", "282.6rpm", "285.1rpm", "287.7rpm", "290.2rpm", "292.7rpm", "295.2rpm", "297.8rpm", "300.3rpm", "302.8rpm", "305.3rpm", "307.9rpm", "310.4rpm", "312.9rpm", "315.4rpm", "318.0rpm", "320.5rpm", "323.0rpm", "328.0rpm", "333.1rpm", "338.1rpm", "343.2rpm", "348.2rpm", "353.3rpm", "358.3rpm", "363.4rpm", "368.4rpm", "373.5rpm", "378.5rpm", "383.6rpm", "388.6rpm", "393.7rpm", "398.7rpm", "403.7rpm", "408.8rpm", "413.8rpm", "418.9rpm", "423.9rpm", "429.0rpm", "434.0rpm", "439.1rpm", "444.1rpm", "449.2rpm", "454.2rpm", "459.3rpm", "464.3rpm", "469.4rpm", "474.4rpm", "479.5rpm", "484.5rpm", "489.5rpm", "494.6rpm", "499.6rpm", "504.7rpm", "509.7rpm", "514.8rpm", "519.8rpm", "524.9rpm", "529.9rpm", "535.0rpm", "540.0rpm", "545.1rpm", "550.1rpm", "555.2rpm", "560.2rpm", "565.2rpm", "570.3rpm", "575.3rpm", "580.4rpm", "585.4rpm", "590.5rpm", "595.5rpm", "600.6rpm", "605.6rpm", "610.7rpm", "615.7rpm", "620.8rpm", "625.8rpm", "630.9rpm", "635.9rpm", "640.9rpm", "646.0rpm", "656.1rpm", "666.2rpm", "676.3rpm", "686.4rpm", "696.5rpm", "706.6rpm", "716.7rpm", "726.7rpm", "736.8rpm"
                                 ];

   // Table 59: Rotary Speaker 2 Speed Fast Horn (128)
   static StringArray tbl_59 = [
      "-", "209.4rpm", "212.0rpm", "214.5rpm", "217.0rpm", "219.5rpm", "222.1rpm", "224.6rpm", "227.1rpm", "229.6rpm", "232.2rpm", "234.7rpm", "237.2rpm", "239.7rpm", "242.2rpm", "244.8rpm", "247.3rpm", "249.8rpm", "252.3rpm", "254.9rpm", "257.4rpm", "259.9rpm", "262.4rpm", "265.0rpm", "267.5rpm", "270.0rpm", "272.5rpm", "275.1rpm", "277.6rpm", "280.1rpm", "282.6rpm", "285.1rpm", "287.7rpm", "290.2rpm", "292.7rpm", "295.2rpm", "297.8rpm", "300.3rpm", "302.8rpm", "305.3rpm", "307.9rpm", "310.4rpm", "312.9rpm", "315.4rpm", "318.0rpm", "320.5rpm", "323.0rpm", "328.0rpm", "333.1rpm", "338.1rpm", "343.2rpm", "348.2rpm", "353.3rpm", "358.3rpm", "363.4rpm", "368.4rpm", "373.5rpm", "378.5rpm", "383.6rpm", "388.6rpm", "393.7rpm", "398.7rpm", "403.7rpm", "408.8rpm", "413.8rpm", "418.9rpm", "423.9rpm", "429.0rpm", "434.0rpm", "439.1rpm", "444.1rpm", "449.2rpm", "454.2rpm", "459.3rpm", "464.3rpm", "469.4rpm", "474.4rpm", "479.5rpm", "484.5rpm", "489.5rpm", "494.6rpm", "499.6rpm", "504.7rpm", "509.7rpm", "514.8rpm", "519.8rpm", "524.9rpm", "529.9rpm", "535.0rpm", "540.0rpm", "545.1rpm", "550.1rpm", "555.2rpm", "560.2rpm", "565.2rpm", "570.3rpm", "575.3rpm", "580.4rpm", "585.4rpm", "590.5rpm", "595.5rpm", "600.6rpm", "605.6rpm", "610.7rpm", "615.7rpm", "620.8rpm", "625.8rpm", "630.9rpm", "635.9rpm", "640.9rpm", "646.0rpm", "656.1rpm", "666.2rpm", "676.3rpm", "686.4rpm", "696.5rpm", "706.6rpm", "716.7rpm", "726.7rpm", "736.8rpm", "746.9rpm", "757.0rpm", "767.1rpm", "777.2rpm", "787.3rpm", "797.4rpm", "807.5rpm", "817.6rpm"
                                 ];

   // Table 60: Reversible LFO Frequency (256)
   static StringArray tbl_60 = [
      "-", "-39.7Hz", "-37.0Hz", "-34.3Hz", "-33.0Hz", "-31.6Hz", "-30.3Hz", "-28.9Hz", "-27.6Hz", "-26.2Hz", "-24.9Hz", "-23.6Hz", "-22.2Hz", "-20.9Hz", "-19.5Hz", "-18.2Hz", "-17.5Hz", "-16.8Hz", "-16.2Hz", "-15.5Hz", "-14.8Hz", "-14.1Hz", "-13.5Hz", "-12.8Hz", "-12.1Hz", "-11.4Hz", "-10.8Hz", "-10.1Hz", "-9.76Hz", "-9.42Hz", "-9.08Hz", "-8.75Hz", "-8.41Hz", "-8.08Hz", "-7.74Hz", "-7.40Hz", "-7.07Hz", "-6.73Hz", "-6.39Hz", "-6.06Hz", "-5.72Hz", "-5.55Hz", "-5.38Hz", "-5.22Hz", "-5.05Hz", "-4.88Hz", "-4.71Hz", "-4.54Hz", "-4.37Hz", "-4.21Hz", "-4.04Hz", "-3.87Hz", "-3.70Hz", "-3.62Hz", "-3.53Hz", "-3.45Hz", "-3.37Hz", "-3.28Hz", "-3.20Hz", "-3.11Hz", "-3.03Hz", "-2.94Hz", "-2.86Hz", "-2.78Hz", "-2.69Hz", "-2.65Hz", "-2.61Hz", "-2.57Hz", "-2.52Hz", "-2.48Hz", "-2.44Hz", "-2.40Hz", "-2.36Hz", "-2.31Hz", "-2.27Hz", "-2.23Hz", "-2.19Hz", "-2.15Hz", "-2.10Hz", "-2.06Hz", "-2.02Hz", "-1.98Hz", "-1.94Hz", "-1.89Hz", "-1.85Hz", "-1.81Hz", "-1.77Hz", "-1.72Hz", "-1.68Hz", "-1.64Hz", "-1.60Hz", "-1.56Hz", "-1.51Hz", "-1.47Hz", "-1.43Hz", "-1.39Hz", "-1.35Hz", "-1.30Hz", "-1.26Hz", "-1.22Hz", "-1.18Hz", "-1.14Hz", "-1.09Hz", "-1.05Hz", "-1.01Hz", "-0.97Hz", "-0.93Hz", "-0.88Hz", "-0.84Hz", "-0.80Hz", "-0.76Hz", "-0.72Hz", "-0.67Hz", "-0.63Hz", "-0.59Hz", "-0.55Hz", "-0.51Hz", "-0.46Hz", "-0.42Hz", "-0.38Hz", "-0.34Hz", "-0.29Hz", "-0.25Hz", "-0.21Hz", "-0.17Hz", "-0.13Hz", "-0.08Hz", "-0.04Hz", "0.00Hz", "0.04Hz", "0.08Hz", "0.13Hz", "0.17Hz", "0.21Hz", "0.25Hz", "0.29Hz", "0.34Hz", "0.38Hz", "0.42Hz", "0.46Hz", "0.51Hz", "0.55Hz", "0.59Hz", "0.63Hz", "0.67Hz", "0.72Hz", "0.76Hz", "0.80Hz", "0.84Hz", "0.88Hz", "0.93Hz", "0.97Hz", "1.01Hz", "1.05Hz", "1.09Hz", "1.14Hz", "1.18Hz", "1.22Hz", "1.26Hz", "1.30Hz", "1.35Hz", "1.39Hz", "1.43Hz", "1.47Hz", "1.51Hz", "1.56Hz", "1.60Hz", "1.64Hz", "1.68Hz", "1.72Hz", "1.77Hz", "1.81Hz", "1.85Hz", "1.89Hz", "1.94Hz", "1.98Hz", "2.02Hz", "2.06Hz", "2.10Hz", "2.15Hz", "2.19Hz", "2.23Hz", "2.27Hz", "2.31Hz", "2.36Hz", "2.40Hz", "2.44Hz", "2.48Hz", "2.52Hz", "2.57Hz", "2.61Hz", "2.65Hz", "2.69Hz", "2.78Hz", "2.86Hz", "2.94Hz", "3.03Hz", "3.11Hz", "3.20Hz", "3.28Hz", "3.37Hz", "3.45Hz", "3.53Hz", "3.62Hz", "3.70Hz", "3.87Hz", "4.04Hz", "4.21Hz", "4.37Hz", "4.54Hz", "4.71Hz", "4.88Hz", "5.05Hz", "5.22Hz", "5.38Hz", "5.55Hz", "5.72Hz", "6.06Hz", "6.39Hz", "6.73Hz", "7.07Hz", "7.40Hz", "7.74Hz", "8.08Hz", "8.41Hz", "8.75Hz", "9.08Hz", "9.42Hz", "9.76Hz", "10.1Hz", "10.8Hz", "11.4Hz", "12.1Hz", "12.8Hz", "13.5Hz", "14.1Hz", "14.8Hz", "15.5Hz", "16.2Hz", "16.8Hz", "17.5Hz", "18.2Hz", "19.5Hz", "20.9Hz", "22.2Hz", "23.6Hz", "24.9Hz", "26.2Hz", "27.6Hz", "28.9Hz", "30.3Hz", "31.6Hz", "33.0Hz", "34.3Hz", "37.0Hz", "39.7Hz"
                                 ];

   // Table 61: LFO Step Transitional Rate (15)
   static StringArray tbl_61 = [
      "1/48", "3/128", "1/32", "1/24", "3/64", "1/16", "1/12", "3/32", "1/8", "1/6", "3/16", "1/4", "1/3", "3/8", "1/2"
                                 ];

   // Table 62: Wave Folder Speed (1024)
   static StringArray tbl_62 = [
      "0.0100Hz", "0.0101Hz", "0.0102Hz", "0.0104Hz", "0.0105Hz", "0.0106Hz", "0.0107Hz", "0.0108Hz", "0.0110Hz", "0.0111Hz", "0.0112Hz", "0.0114Hz", "0.0115Hz", "0.0116Hz", "0.0118Hz", "0.0119Hz", "0.0120Hz", "0.0122Hz", "0.0123Hz", "0.0125Hz", "0.0126Hz", "0.0128Hz", "0.0129Hz", "0.0131Hz", "0.0132Hz", "0.0134Hz", "0.0135Hz", "0.0137Hz", "0.0138Hz", "0.0140Hz", "0.0142Hz", "0.0143Hz", "0.0145Hz", "0.0147Hz", "0.0148Hz", "0.0150Hz", "0.0152Hz", "0.0154Hz", "0.0155Hz", "0.0157Hz", "0.0159Hz", "0.0161Hz", "0.0163Hz", "0.0165Hz", "0.0166Hz", "0.0168Hz", "0.0170Hz", "0.0172Hz", "0.0174Hz", "0.0176Hz", "0.0178Hz", "0.0181Hz", "0.0183Hz", "0.0185Hz", "0.0187Hz", "0.0189Hz", "0.0191Hz", "0.0194Hz", "0.0196Hz", "0.0198Hz", "0.0200Hz", "0.0203Hz", "0.0205Hz", "0.0207Hz", "0.0210Hz", "0.0212Hz", "0.0215Hz", "0.0217Hz", "0.0220Hz", "0.0222Hz", "0.0225Hz", "0.0228Hz", "0.0230Hz", "0.0233Hz", "0.0236Hz", "0.0238Hz", "0.0241Hz", "0.0244Hz", "0.0247Hz", "0.0250Hz", "0.0253Hz", "0.0256Hz", "0.0259Hz", "0.0262Hz", "0.0265Hz", "0.0268Hz", "0.0271Hz", "0.0274Hz", "0.0277Hz", "0.0280Hz", "0.0284Hz", "0.0287Hz", "0.0290Hz", "0.0294Hz", "0.0297Hz", "0.0301Hz", "0.0304Hz", "0.0308Hz", "0.0311Hz", "0.0315Hz", "0.0318Hz", "0.0322Hz", "0.0326Hz", "0.0330Hz", "0.0334Hz", "0.0337Hz", "0.0341Hz", "0.0345Hz", "0.0349Hz", "0.0353Hz", "0.0358Hz", "0.0362Hz", "0.0366Hz", "0.0370Hz", "0.0375Hz", "0.0379Hz", "0.0383Hz", "0.0388Hz", "0.0392Hz", "0.0397Hz", "0.0401Hz", "0.0406Hz", "0.0411Hz", "0.0416Hz", "0.0421Hz", "0.0425Hz", "0.0430Hz", "0.0435Hz", "0.0440Hz", "0.0446Hz", "0.0451Hz", "0.0456Hz", "0.0461Hz", "0.0467Hz", "0.0472Hz", "0.0478Hz", "0.0483Hz", "0.0489Hz", "0.0495Hz", "0.0500Hz", "0.0506Hz", "0.0512Hz", "0.0518Hz", "0.0524Hz", "0.0530Hz", "0.0536Hz", "0.0543Hz", "0.0549Hz", "0.0555Hz", "0.0562Hz", "0.0568Hz", "0.0575Hz", "0.0582Hz", "0.0588Hz", "0.0595Hz", "0.0602Hz", "0.0609Hz", "0.0616Hz", "0.0623Hz", "0.0631Hz", "0.0638Hz", "0.0646Hz", "0.0653Hz", "0.0661Hz", "0.0668Hz", "0.0676Hz", "0.0684Hz", "0.0692Hz", "0.0700Hz", "0.0708Hz", "0.0716Hz", "0.0725Hz", "0.0733Hz", "0.0742Hz", "0.0750Hz", "0.0759Hz", "0.0768Hz", "0.0777Hz", "0.0786Hz", "0.0795Hz", "0.0804Hz", "0.0814Hz", "0.0823Hz", "0.0833Hz", "0.0843Hz", "0.0852Hz", "0.0862Hz", "0.0872Hz", "0.0883Hz", "0.0893Hz", "0.0903Hz", "0.0914Hz", "0.0924Hz", "0.0935Hz", "0.0946Hz", "0.0957Hz", "0.0968Hz", "0.0979Hz", "0.0991Hz", "0.1002Hz", "0.1014Hz", "0.1026Hz", "0.1038Hz", "0.1050Hz", "0.1062Hz", "0.1075Hz", "0.1087Hz", "0.1100Hz", "0.1113Hz", "0.1126Hz", "0.1139Hz", "0.1152Hz", "0.1165Hz", "0.1179Hz", "0.1193Hz", "0.1207Hz", "0.1221Hz", "0.1235Hz", "0.1249Hz", "0.1264Hz", "0.1278Hz", "0.1293Hz", "0.1308Hz", "0.1324Hz", "0.1339Hz", "0.1355Hz", "0.1370Hz", "0.1386Hz", "0.1403Hz", "0.1419Hz", "0.1435Hz", "0.1452Hz", "0.1469Hz", "0.1486Hz", "0.1504Hz", "0.1521Hz", "0.1539Hz", "0.1557Hz", "0.1575Hz", "0.1593Hz", "0.1612Hz", "0.1631Hz", "0.1650Hz", "0.1669Hz", "0.1688Hz", "0.1708Hz", "0.1728Hz", "0.1748Hz", "0.1768Hz", "0.1789Hz", "0.1810Hz", "0.1831Hz", "0.1852Hz", "0.1874Hz", "0.1896Hz", "0.1918Hz", "0.1940Hz", "0.1963Hz", "0.1985Hz", "0.2009Hz", "0.2032Hz", "0.2056Hz", "0.2080Hz", "0.2104Hz", "0.2128Hz", "0.2153Hz", "0.2178Hz", "0.2204Hz", "0.2229Hz", "0.2255Hz", "0.2281Hz", "0.2308Hz", "0.2335Hz", "0.2362Hz", "0.2390Hz", "0.2418Hz", "0.2446Hz", "0.2474Hz", "0.2503Hz", "0.2532Hz", "0.2562Hz", "0.2591Hz", "0.2622Hz", "0.2652Hz", "0.2683Hz", "0.2714Hz", "0.2746Hz", "0.2778Hz", "0.2810Hz", "0.2843Hz", "0.2876Hz", "0.2910Hz", "0.2944Hz", "0.2978Hz", "0.3013Hz", "0.3048Hz", "0.3083Hz", "0.3119Hz", "0.3155Hz", "0.3192Hz", "0.3229Hz", "0.3267Hz", "0.3305Hz", "0.3344Hz", "0.3383Hz", "0.3422Hz", "0.3462Hz", "0.3502Hz", "0.3543Hz", "0.3584Hz", "0.3626Hz", "0.3668Hz", "0.3711Hz", "0.3754Hz", "0.3798Hz", "0.3842Hz", "0.3887Hz", "0.3932Hz", "0.3978Hz", "0.4024Hz", "0.4071Hz", "0.4119Hz", "0.4167Hz", "0.4215Hz", "0.4264Hz", "0.4314Hz", "0.4364Hz", "0.4415Hz", "0.4467Hz", "0.4519Hz", "0.4571Hz", "0.4625Hz", "0.4678Hz", "0.4733Hz", "0.4788Hz", "0.4844Hz", "0.4900Hz", "0.4957Hz", "0.5015Hz", "0.5074Hz", "0.5133Hz", "0.5192Hz", "0.5253Hz", "0.5314Hz", "0.5376Hz", "0.5439Hz", "0.5502Hz", "0.5566Hz", "0.5631Hz", "0.5697Hz", "0.5763Hz", "0.5830Hz", "0.5898Hz", "0.5967Hz", "0.6036Hz", "0.6107Hz", "0.6178Hz", "0.6250Hz", "0.6323Hz", "0.6396Hz", "0.6471Hz", "0.6546Hz", "0.6622Hz", "0.6700Hz", "0.6778Hz", "0.6857Hz", "0.6936Hz", "0.7017Hz", "0.7099Hz", "0.7182Hz", "0.7265Hz", "0.7350Hz", "0.7436Hz", "0.7522Hz", "0.7610Hz", "0.7699Hz", "0.7788Hz", "0.7879Hz", "0.7971Hz", "0.8064Hz", "0.8158Hz", "0.8253Hz", "0.8349Hz", "0.8446Hz", "0.8544Hz", "0.8644Hz", "0.8745Hz", "0.8847Hz", "0.8950Hz", "0.9054Hz", "0.9159Hz", "0.9266Hz", "0.9374Hz", "0.9483Hz", "0.9594Hz", "0.9706Hz", "0.9819Hz", "0.9933Hz", "1.0049Hz", "1.0166Hz", "1.0284Hz", "1.0404Hz", "1.0525Hz", "1.0648Hz", "1.0772Hz", "1.0897Hz", "1.1024Hz", "1.1153Hz", "1.1283Hz", "1.1414Hz", "1.1547Hz", "1.1682Hz", "1.1818Hz", "1.1955Hz", "1.2095Hz", "1.2236Hz", "1.2378Hz", "1.2522Hz", "1.2668Hz", "1.2816Hz", "1.2965Hz", "1.3116Hz", "1.3269Hz", "1.3424Hz", "1.3580Hz", "1.3738Hz", "1.3898Hz", "1.4060Hz", "1.4224Hz", "1.4390Hz", "1.4557Hz", "1.4727Hz", "1.4899Hz", "1.5072Hz", "1.5248Hz", "1.5425Hz", "1.5605Hz", "1.5787Hz", "1.5971Hz", "1.6157Hz", "1.6345Hz", "1.6536Hz", "1.6728Hz", "1.6923Hz", "1.7120Hz", "1.7320Hz", "1.7521Hz", "1.7726Hz", "1.7932Hz", "1.8141Hz", "1.8352Hz", "1.8566Hz", "1.8783Hz", "1.9001Hz", "1.9223Hz", "1.9447Hz", "1.9673Hz", "1.9902Hz", "2.0134Hz", "2.0369Hz", "2.0606Hz", "2.0846Hz", "2.1089Hz", "2.1335Hz", "2.1583Hz", "2.1835Hz", "2.2089Hz", "2.2347Hz", "2.2607Hz", "2.2870Hz", "2.3137Hz", "2.3406Hz", "2.3679Hz", "2.3955Hz", "2.4234Hz", "2.4516Hz", "2.4802Hz", "2.5091Hz", "2.5383Hz", "2.5679Hz", "2.5978Hz", "2.6281Hz", "2.6587Hz", "2.6897Hz", "2.7210Hz", "2.7527Hz", "2.7848Hz", "2.8172Hz", "2.8500Hz", "2.8832Hz", "2.9168Hz", "2.9508Hz", "2.9852Hz", "3.0200Hz", "3.0551Hz", "3.0907Hz", "3.1267Hz", "3.1632Hz", "3.2000Hz", "3.2373Hz", "3.2750Hz", "3.3132Hz", "3.3518Hz", "3.3908Hz", "3.4303Hz", "3.4703Hz", "3.5107Hz", "3.5516Hz", "3.5930Hz", "3.6349Hz", "3.6772Hz", "3.7201Hz", "3.7634Hz", "3.8072Hz", "3.8516Hz", "3.8965Hz", "3.9419Hz", "3.9878Hz", "4.0342Hz", "4.0812Hz", "4.1288Hz", "4.1769Hz", "4.2256Hz", "4.2748Hz", "4.3246Hz", "4.3750Hz", "4.4259Hz", "4.4775Hz", "4.5297Hz", "4.5824Hz", "4.6358Hz", "4.6898Hz", "4.7445Hz", "4.7997Hz", "4.8557Hz", "4.9122Hz", "4.9695Hz", "5.0274Hz", "5.0859Hz", "5.1452Hz", "5.2051Hz", "5.2658Hz", "5.3271Hz", "5.3892Hz", "5.4520Hz", "5.5155Hz", "5.5797Hz", "5.6447Hz", "5.7105Hz", "5.7770Hz", "5.8443Hz", "5.9124Hz", "5.9813Hz", "6.0510Hz", "6.1215Hz", "6.1928Hz", "6.2650Hz", "6.3379Hz", "6.4118Hz", "6.4865Hz", "6.5621Hz", "6.6385Hz", "6.7158Hz", "6.7941Hz", "6.8732Hz", "6.9533Hz", "7.0343Hz", "7.1163Hz", "7.1992Hz", "7.2831Hz", "7.3679Hz", "7.4537Hz", "7.5406Hz", "7.6284Hz", "7.7173Hz", "7.8072Hz", "7.8982Hz", "7.9902Hz", "8.0833Hz", "8.1775Hz", "8.2727Hz", "8.3691Hz", "8.4666Hz", "8.5652Hz", "8.6650Hz", "8.7660Hz", "8.8681Hz", "8.9714Hz", "9.0759Hz", "9.1817Hz", "9.2887Hz", "9.3969Hz", "9.5063Hz", "9.6171Hz", "9.7291Hz", "9.8425Hz", "9.9572Hz", "10.073Hz", "10.191Hz", "10.309Hz", "10.429Hz", "10.551Hz", "10.674Hz", "10.798Hz", "10.924Hz", "11.051Hz", "11.180Hz", "11.310Hz", "11.442Hz", "11.575Hz", "11.710Hz", "11.847Hz", "11.985Hz", "12.124Hz", "12.265Hz", "12.408Hz", "12.553Hz", "12.699Hz", "12.847Hz", "12.997Hz", "13.148Hz", "13.301Hz", "13.456Hz", "13.613Hz", "13.772Hz", "13.932Hz", "14.094Hz", "14.259Hz", "14.425Hz", "14.593Hz", "14.763Hz", "14.935Hz", "15.109Hz", "15.285Hz", "15.463Hz", "15.643Hz", "15.825Hz", "16.010Hz", "16.196Hz", "16.385Hz", "16.576Hz", "16.769Hz", "16.964Hz", "17.162Hz", "17.362Hz", "17.564Hz", "17.769Hz", "17.976Hz", "18.185Hz", "18.397Hz", "18.611Hz", "18.828Hz", "19.048Hz", "19.270Hz", "19.494Hz", "19.721Hz", "19.951Hz", "20.183Hz", "20.418Hz", "20.656Hz", "20.897Hz", "21.140Hz", "21.387Hz", "21.636Hz", "21.888Hz", "22.143Hz", "22.401Hz", "22.662Hz", "22.926Hz", "23.193Hz", "23.463Hz", "23.737Hz", "24.013Hz", "24.293Hz", "24.576Hz", "24.862Hz", "25.152Hz", "25.445Hz", "25.741Hz", "26.041Hz", "26.345Hz", "26.652Hz", "26.962Hz", "27.276Hz", "27.594Hz", "27.915Hz", "28.241Hz", "28.570Hz", "28.902Hz", "29.239Hz", "29.580Hz", "29.924Hz", "30.273Hz", "30.626Hz", "30.983Hz", "31.344Hz", "31.709Hz", "32.078Hz", "32.452Hz", "32.830Hz", "33.212Hz", "33.599Hz", "33.991Hz", "34.387Hz", "34.787Hz", "35.193Hz", "35.603Hz", "36.017Hz", "36.437Hz", "36.862Hz", "37.291Hz", "37.726Hz", "38.165Hz", "38.610Hz", "39.059Hz", "39.515Hz", "39.975Hz", "40.441Hz", "40.912Hz", "41.388Hz", "41.871Hz", "42.358Hz", "42.852Hz", "43.351Hz", "43.856Hz", "44.367Hz", "44.884Hz", "45.407Hz", "45.936Hz", "46.471Hz", "47.012Hz", "47.560Hz", "48.114Hz", "48.675Hz", "49.242Hz", "49.816Hz", "50.396Hz", "50.983Hz", "51.577Hz", "52.178Hz", "52.786Hz", "53.401Hz", "54.023Hz", "54.652Hz", "55.289Hz", "55.933Hz", "56.585Hz", "57.244Hz", "57.911Hz", "58.586Hz", "59.268Hz", "59.959Hz", "60.657Hz", "61.364Hz", "62.079Hz", "62.802Hz", "63.534Hz", "64.274Hz", "65.023Hz", "65.780Hz", "66.547Hz", "67.322Hz", "68.106Hz", "68.900Hz", "69.702Hz", "70.514Hz", "71.336Hz", "72.167Hz", "73.008Hz", "73.858Hz", "74.719Hz", "75.589Hz", "76.470Hz", "77.361Hz", "78.262Hz", "79.174Hz", "80.096Hz", "81.029Hz", "81.973Hz", "82.929Hz", "83.895Hz", "84.872Hz", "85.861Hz", "86.861Hz", "87.873Hz", "88.897Hz", "89.933Hz", "90.980Hz", "92.040Hz", "93.113Hz", "94.197Hz", "95.295Hz", "96.405Hz", "97.528Hz", "98.664Hz", "99.814Hz", "100.98Hz", "102.15Hz", "103.34Hz", "104.55Hz", "105.77Hz", "107.00Hz", "108.24Hz", "109.51Hz", "110.78Hz", "112.07Hz", "113.38Hz", "114.70Hz", "116.03Hz", "117.39Hz", "118.75Hz", "120.14Hz", "121.54Hz", "122.95Hz", "124.39Hz", "125.83Hz", "127.30Hz", "128.78Hz", "130.28Hz", "131.80Hz", "133.34Hz", "134.89Hz", "136.46Hz", "138.05Hz", "139.66Hz", "141.29Hz", "142.93Hz", "144.60Hz", "146.28Hz", "147.99Hz", "149.71Hz", "151.46Hz", "153.22Hz", "155.01Hz", "156.81Hz", "158.64Hz", "160.49Hz", "162.36Hz", "164.25Hz", "166.16Hz", "168.10Hz", "170.06Hz", "172.04Hz", "174.04Hz", "176.07Hz", "178.12Hz", "180.19Hz", "182.29Hz", "184.42Hz", "186.57Hz", "188.74Hz", "190.94Hz", "193.16Hz", "195.41Hz", "197.69Hz", "199.99Hz", "202.32Hz", "204.68Hz", "207.07Hz", "209.48Hz", "211.92Hz", "214.39Hz", "216.88Hz", "219.41Hz", "221.97Hz", "224.55Hz", "227.17Hz", "229.82Hz", "232.49Hz", "235.20Hz", "237.94Hz", "240.71Hz", "243.52Hz", "246.36Hz", "249.23Hz", "252.13Hz", "255.07Hz", "258.04Hz", "261.05Hz", "264.09Hz", "267.16Hz", "270.28Hz", "273.42Hz", "276.61Hz", "279.83Hz", "283.09Hz", "286.39Hz", "289.73Hz", "293.10Hz", "296.52Hz", "299.97Hz", "303.47Hz", "307.00Hz", "310.58Hz", "314.20Hz", "317.86Hz", "321.56Hz", "325.31Hz", "329.10Hz", "332.93Hz", "336.81Hz", "340.73Hz", "344.70Hz", "348.72Hz", "352.78Hz", "356.89Hz", "361.05Hz", "365.26Hz", "369.51Hz", "373.82Hz", "378.17Hz", "382.58Hz", "387.04Hz", "391.54Hz", "396.11Hz", "400.72Hz", "405.39Hz", "410.11Hz", "414.89Hz", "419.72Hz", "424.61Hz", "429.56Hz", "434.57Hz", "439.63Hz", "444.75Hz", "449.93Hz", "455.17Hz", "460.48Hz", "465.84Hz", "471.27Hz", "476.76Hz", "482.31Hz", "487.93Hz", "493.62Hz", "499.37Hz", "505.18Hz", "511.07Hz", "517.02Hz", "523.05Hz", "529.14Hz", "535.31Hz", "541.54Hz", "547.85Hz", "554.23Hz", "560.69Hz", "567.22Hz", "573.83Hz", "580.52Hz", "587.28Hz", "594.12Hz", "601.04Hz", "608.05Hz", "615.13Hz", "622.30Hz", "629.55Hz", "636.88Hz", "644.30Hz", "651.81Hz", "659.40Hz", "667.08Hz", "674.86Hz", "682.72Hz", "690.67Hz", "698.72Hz", "706.86Hz", "715.09Hz", "723.43Hz", "731.85Hz", "740.38Hz", "749.01Hz", "757.73Hz", "766.56Hz", "775.49Hz", "784.52Hz", "793.66Hz", "802.91Hz", "812.27Hz", "821.73Hz", "831.30Hz", "840.99Hz", "850.78Hz", "860.70Hz", "870.72Hz", "880.87Hz", "891.13Hz", "901.51Hz", "912.02Hz", "922.64Hz", "933.39Hz", "944.26Hz", "955.27Hz", "966.39Hz", "977.65Hz", "989.04Hz", "1000.6Hz", "1012.2Hz", "1024.0Hz", "1035.9Hz", "1048.0Hz", "1060.2Hz", "1072.6Hz", "1085.1Hz", "1097.7Hz", "1110.5Hz", "1123.4Hz", "1136.5Hz", "1149.8Hz", "1163.2Hz", "1176.7Hz", "1190.4Hz", "1204.3Hz", "1218.3Hz", "1232.5Hz", "1246.9Hz", "1261.4Hz", "1276.1Hz", "1291.0Hz", "1306.0Hz", "1321.2Hz", "1336.6Hz", "1352.2Hz", "1367.9Hz", "1383.9Hz", "1400.0Hz"
                                 ];

   // Table 63: Wave Folder Seq Speed (16)
   static StringArray tbl_63 = [
      "0.5x", "0.66x", "0.75x", "1.0x", "1.33x", "1.5x", "2.0x", "2.66x", "3.0x", "4.0x", "5.0x", "6.0x", "7.0x", "8.0x", "9.0x", "10.0x"
                                 ];

   static StringArray tbl_drywet;

   // Table 200: Comp Distortion Delay Compression (43)
   static StringArray tbl_200;

   // Table 201: Side Chain EQ Gain (121)
   static StringArray tbl_201;

   // Table 202: Uni Comp Threshold (121)
   static StringArray tbl_202;

   // Table 203: Parallel Comp Level (121)
   static StringArray tbl_203;

   // // // Table 204: Bit Crusher Sample Rate (16384)
   // // static StringArray tbl_204;

   // Table 205: Stereophonic Optimizer Subband Gain (2001)
   static StringArray tbl_205;

   // Table 206: Wave Folder Output Level (121)
   static StringArray tbl_206;

   // Table 207: VCM Mini Input Level (121)
   static StringArray tbl_207;

   // Table 208: VCM Mini Booster Gain (101)
   static StringArray tbl_208;

   // Table 209: ER/Rev Balance (128)
   static StringArray tbl_209;

   // Table 210: Noise Gate Threshold (44)
   static StringArray tbl_210;

   // Table 211: Uni Comp Make Up Gain (121)
   static StringArray tbl_211;

   // Table 212: Multi-band Comp Treshold (49)
   static StringArray tbl_212;

   // Table 213: Lo-Fi Output Level (43)
   static StringArray tbl_213;

   // Table 214: VCM Overdrive (81)
   static StringArray tbl_214;

   // Table 215: VCM Output Level (61)
   static StringArray tbl_215;

   static HashTable ht_tbl <= #[
      "0" = tbl_drywet,
      "1" = tbl_1,
      "2" = tbl_2,
      "3" = tbl_3,
      "4" = tbl_4,
      "5" = tbl_5,
      "6" = tbl_6,
      "7" = tbl_7,
      "8" = tbl_8,
      "9" = tbl_9,
      "11" = tbl_11,
      "12" = tbl_12,
      "13" = tbl_13,
      "14" = tbl_14,
      "15" = tbl_15,
      "16" = tbl_16,
      "17" = tbl_17,
      "18" = tbl_18,
      "19" = tbl_19,
      "20" = tbl_20,
      "21" = tbl_21,
      "22" = tbl_22,
      "23" = tbl_23,
      "24" = tbl_24,
      "25" = tbl_25,
      "26" = tbl_26,
      "27" = tbl_27,
      "28" = tbl_28,
      "29" = tbl_29,
      "30" = tbl_30,
      "31" = tbl_31,
      "36" = tbl_36,
      "39" = tbl_39,
      "40" = tbl_40,
      "41" = tbl_41,
      "42" = tbl_42,
      "45" = tbl_45,
      "46" = tbl_46,
      "47" = tbl_47,
      "48" = tbl_48,
      "49" = tbl_49,
      "50" = tbl_50,
      "51" = tbl_51,
      "52" = tbl_52,
      "53" = tbl_53,
      "54" = tbl_54,
      "55" = tbl_55,
      "56" = tbl_56,
      "57" = tbl_57,
      "58" = tbl_58,
      "59" = tbl_59,
      "60" = tbl_60,
      "61" = tbl_61,
      "62" = tbl_62,
      "63" = tbl_63,
      "200" = tbl_200,
      "201" = tbl_201,
      "202" = tbl_202,
      "203" = tbl_203,
      // // "204" = tbl_204,
      "205" = tbl_205,
      "206" = tbl_206,
      "207" = tbl_207,
      "208" = tbl_208,
      "209" = tbl_209,
      "210" = tbl_210,
      "211" = tbl_211,
      "212" = tbl_212,
      "213" = tbl_213,
      "214" = tbl_214,
      "215" = tbl_215,
                              ];

   static Montage_InsertEffectType *[] effect_types;
   static StringArray effect_type_options;
   static StringArray effect_type_options_long;

   protected ComboBox   *cm_type;
   protected CheckBox   *cb_enable;
   protected ComboField *cf_preset;
   protected CheckBox   *cb_preset_autoload;
   protected Button     *bt_stash;
   protected Button     *bt_copy;
   protected Button     *bt_paste;
   protected Button     *bt_reset;
   protected Button     *bt_rand;

   protected ComboBox *cm_sidechain;

   protected Label      *[] a_lb;
   protected FloatParam *[] a_fp;


   // <init.png>
   public method initInsertForm(EditMIDISynthFormMontage _parentSynthForm, boolean _bInsertB) : boolean {

      parent_synth_form <= _parentSynthForm;
      b_insert_b = _bInsertB;

      genTableDryWet();
      genTable200_Comp();
      genTable201_SideChainEQGain();
      genTable202_UniCompThreshold();
      genTable203_ParallelCompLevel();
      // // genTable204_BitCrusherRate();
      genTable205_SubbandGain();
      genTable206_WaveFolderOutputLevel();
      genTable207_VCMMiniInputLevel();
      genTable208_VCMMiniBoosterGain();
      genTable209_ERRevBalance();
      genTable210_NoiseGateThreshold();
      genTable211_UniCompMakeUpGain();
      genTable212_MultibandCompThreshold();
      genTable213_LoFiOutputLevel();
      genTable214_VCMOverdrive();
      genTable215_VCMOutputLevel();

      if(insert_types.isEmpty())
      {
         ParseInsertTypes();
      }

      local String buf;
      createWidgets(buf);
      // trace "xxx buf=\""+buf+"\"";

      local String bufXFM;
      bufXFM.load("Montage_InsertForm.xfm", true/*bRemoveCR*/);
      bufXFM.replace("$(WIDGETS)", buf);

      if(!parseXMLForm(bufXFM))
      {
         trace "[---] failed to parse \"Montage_InsertForm.xfm\"";
         return false;
      }

      if(!autoResolveIds(this))
      {
         return false;
      }

      resolveWidgets();

      cm_type.setOptions(effect_type_options);
      cm_type.setOptionsLong(effect_type_options_long);

      recursiveBuildTabCycleLists();

      return true;
   }

   // <ui_init.png>
   protected method createWidgets(String buf) {
      int paramIdx = 0;
      loop(24/4)
      {
         buf.append("\n<Panel dir=BOTTOM>\n");

         int colNr = 1;
         loop(4)
         {
            buf.append("<Label id=lb_p_"+paramIdx+" autoresolve=0 dir=RIGHT sizeGroup=sgx_pfx_lb"+colNr
                       +" textPlacement=RIGHT align=centerY fillBG=0 padLeft=10 captionSizeReserve=\"Parameter Name MMM\""
                       +" />\n"
                       );

            buf.append("<FloatParam id=fp_p_"+paramIdx+" autoresolve=0 dir=RIGHT sizeGroup=sgx_pfx_c"+colNr
                       +" value=0 min=1 max=127 reset=127 rangeEditable=0 "
                       +" cols=8 stepFine=1 stepCoarse=1 precision=0 textAlign=RIGHT align=centerY "
                       +" borders=0 font=\"default 11\" noneditabletext=\"-\""
                       +" />\n"
                       );
            colNr++;
            paramIdx++;
         }

         buf.append("\n</Panel>\n");
      }
   }

   // <method.png>
   public method enter() {
   }

   // <method.png>
   public method leave() {
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {
      layers.joinRR(layers, [cm_type,
                             cb_enable,
                             cf_preset,
                             cb_preset_autoload,
                             bt_stash,
                             bt_copy,
                             bt_paste,
                             bt_reset,
                             bt_rand,

                             cm_sidechain
                             ]);
      layers.joinRR(layers, a_fp);
   }

   // <method.png>
   protected method genTableDryWet() {
      if(tbl_drywet.isEmpty())
      {
         int v = -64;
         loop(128)
         {
            if(0 == v)
               tbl_drywet.add("D=W");
            else if(v < 0)
               tbl_drywet.add("D"+(-v)+">W");
            else
               tbl_drywet.add("D<W"+v);
            v++;
         }
      }
   }

   // <method.png>
   protected method genTable200_Comp() {
      if(tbl_200.isEmpty())
      {
         int v = -48;
         loop(121 - 79 + 1)
         {
            tbl_200.add(v+"dB");
            v++;
         }
      }
   }

   // <method.png>
   protected method genTable201_SideChainEQGain() {
      if(tbl_201.isEmpty())
      {
         local Float v = -30.0;
         loop(121)
         {
            if(v >= 0.0)
               tbl_201.add("+"+v.printf("%2.1f")+"dB");
            else
               tbl_201.add(v.printf("%2.1f")+"dB");
            v += 0.5;
         }
      }
   }

   // <method.png>
   protected method genTable202_UniCompThreshold() {
      if(tbl_202.isEmpty())
      {
         local Float v = -60.0;
         loop(121)
         {
            if(v >= 0.0)
               tbl_202.add("+"+v.printf("%2.1f")+"dB");
            else
               tbl_202.add(v.printf("%2.1f")+"dB");
            v += 0.5;
         }
      }
   }

   // <method.png>
   protected method genTable203_ParallelCompLevel() {
      if(tbl_203.isEmpty())
      {
         float v = -18.0;
         loop(121)
         {
            Float f;
            if(v >= 0.0)
            {
               f = int(v*10 + 0.5)/10.0;
               tbl_203.add("+"+f.printf("%2.1f")+"dB");
            }
            else
            {
               f = int(v*10 - 0.5)/10.0;
               tbl_203.add(f.printf("%2.1f")+"dB");
            }
            v += 0.3;
         }
      }
   }

   // // // <method.png>
   // // protected method genTable204_BitCrusherRate() {
   // //    if(tbl_204.isEmpty())
   // //    {
   // //       int idx = 0;
   // //       loop(16384)
   // //       {
   // //          float v = (100000.0 * idx) / 16383.0;
   // //          float f;
   // //          if(v < 1000.0)
   // //          {
   // //             f = int(v*100 + 0.5)/100.0;
   // //             tbl_204.add(f+"Hz");
   // //          }
   // //          else
   // //          {
   // //             f = v / 1000.0;
   // //             f = int(f*1000 + 0.5)/1000.0;
   // //             tbl_204.add(f+"kHz");
   // //          }
   // //          idx++;
   // //       }
   // //    }
   // // }

   // <function.png>
   protected static fxnTable204_BitCrusherRate_ValueToString(float _v, String _ret) {
      float v = (100000.0 * _v) / 16383.0;
      float f;
      if(v < 1000.0)
      {
         f = int(v*100 + 0.5)/100.0;
         _ret = f+"Hz";
      }
      else
      {
         f = v / 1000.0;
         f = int(f*1000 + 0.5)/1000.0;
         _ret = f+"kHz";
      }
      // trace "xxx BitCrusherRate ValueToString: v="+_v+" ret=\""+_ret+"\"";
   }

   // <function.png>
   protected static fxnTable204_BitCrusherRate_StringToValue(String _s) {
      String sOrig = _s;
      float r = 0;
      if(_s & "kHz")
      {
         _s.replace("kHz", "");
         _s.trim();
         r = _s;
         r *= 1000.0;
         r = (r / 100000.0) * 16383.0;
      }
      else
      {
         _s.replace("Hz", "");
         _s.trim();
         r = _s;
         r = (r / 100000.0) * 16383.0;
      }
      // trace "xxx BitCrusherRate StringToValue:_s=\""+sOrig+"\" r="+r;
      return r;
   }

   // <method.png>
   protected method genTable205_SubbandGain() {
      if(tbl_205.isEmpty())
      {
         int idx = 0;
         loop(2001)
         {
            float v = -14.0 + ((6.0 + 14.0) * idx) / 2000.0;
            local Float f;
            if(v >= 0.0)
            {
               f = int(v*100 + 0.5)/100.0;
               tbl_205.add("+"+f.printf("%2.1f")+"dB");
            }
            else
            {
               f = int(v*100 - 0.5)/100.0;
               tbl_205.add(f.printf("%2.1f")+"dB");
            }
            idx++;
         }
         // trace "xxx tbl_205="+tbl_205.string;
      }
   }

   // <method.png>
   protected method genTable206_WaveFolderOutputLevel() {
      if(tbl_206.isEmpty())
      {
         int idx = 0;
         loop(121)
         {
            float v = -40.0 + ((20.0 + 40.0) * idx) / 120.0;
            local Float f;
            if(v >= 0.0)
            {
               f = int(v*10 + 0.5)/10.0;
               tbl_206.add("+"+f.printf("%2.1f")+"dB");
            }
            else
            {
               f = int(v*10 - 0.5)/10.0;
               tbl_206.add(f.printf("%2.1f")+"dB");
            }
            idx++;
         }
      }
   }

   // <method.png>
   protected method genTable207_VCMMiniInputLevel() {
      if(tbl_207.isEmpty())
      {
         int idx = 0;
         loop(121)
         {
            float v = -36.0 + ((24.0 + 36.0) * idx) / 120.0;
            local Float f;
            if(v >= 0.0)
            {
               f = int(v*10 + 0.5)/10.0;
               tbl_207.add("+"+f.printf("%2.1f")+"dB");
            }
            else
            {
               f = int(v*10 - 0.5)/10.0;
               tbl_207.add(f.printf("%2.1f")+"dB");
            }
            idx++;
         }
      }
   }

   // <method.png>
   protected method genTable208_VCMMiniBoosterGain() {
      if(tbl_208.isEmpty())
      {
         int idx = 0;
         loop(101)
         {
            float v = 0.0 + ((20.0 + 0.0) * idx) / 100.0;
            local Float f;
            if(v >= 0.0)
            {
               f = int(v*10 + 0.5)/10.0;
               tbl_208.add("+"+f.printf("%2.1f")+"dB");
            }
            else
            {
               f = int(v*10 - 0.5)/10.0;
               tbl_208.add(f.printf("%2.1f")+"dB");
            }
            idx++;
         }
      }
   }

   // <method.png>
   protected method genTable209_ERRevBalance() {
      if(tbl_209.isEmpty())
      {
         int v = -64;
         loop(128)
         {
            if(0 == v)
               tbl_209.add("E=R");
            else if(v < 0)
               tbl_209.add("E"+(-v)+">R");
            else
               tbl_209.add("E<R"+v);
            v++;
         }
      }
   }

   // <method.png>
   protected method genTable210_NoiseGateThreshold() {
      if(tbl_210.isEmpty())
      {
         int idx = 0;
         loop(44)
         {
            float v = -73.0 + ((-30.0 + 73.0) * idx) / 43.0;
            local Float f;
            if(v >= 0.0)
            {
               f = int(v*10 + 0.5)/10.0;
               tbl_210.add("+"+f.printf("%2.1f")+"dB");
            }
            else
            {
               f = int(v*10 - 0.5)/10.0;
               tbl_210.add(f.printf("%2.1f")+"dB");
            }
            idx++;
         }
      }
   }

   // <method.png>
   protected method genTable211_UniCompMakeUpGain() {
      if(tbl_211.isEmpty())
      {
         int idx = 0;
         loop(121)
         {
            float v = -20.0 + ((40.0 + 20.0) * idx) / 120.0;
            local Float f;
            if(v >= 0.0)
            {
               f = int(v*10 + 0.5)/10.0;
               tbl_211.add("+"+f.printf("%2.1f")+"dB");
            }
            else
            {
               f = int(v*10 - 0.5)/10.0;
               tbl_211.add(f.printf("%2.1f")+"dB");
            }
            idx++;
         }
      }
   }

   // <method.png>
   protected method genTable212_MultibandCompThreshold() {
      if(tbl_212.isEmpty())
      {
         int idx = 0;
         loop(49)
         {
            float v = -54.0 + ((-6.0 + 54.0) * idx) / 48.0;
            local Float f;
            if(v >= 0.0)
            {
               f = int(v*10 + 0.5)/10.0;
               tbl_212.add("+"+f.printf("%2.1f")+"dB");
            }
            else
            {
               f = int(v*10 - 0.5)/10.0;
               tbl_212.add(f.printf("%2.1f")+"dB");
            }
            idx++;
         }
      }
   }

   // <method.png>
   protected method genTable213_LoFiOutputLevel() {
      if(tbl_213.isEmpty())
      {
         int idx = 0;
         loop(43)
         {
            float v = -6.0 + ((36.0 + 6.0) * idx) / 42.0;
            local Float f;
            if(v >= 0.0)
            {
               f = int(v*10 + 0.5)/10.0;
               tbl_213.add("+"+f.printf("%2.1f")+"dB");
            }
            else
            {
               f = int(v*10 - 0.5)/10.0;
               tbl_213.add(f.printf("%2.1f")+"dB");
            }
            idx++;
         }
      }
   }

   // <method.png>
   protected method genTable214_VCMOverdrive() {
      if(tbl_214.isEmpty())
      {
         int idx = 0;
         loop(81)
         {
            float v = 0.0 + ((40.0 - 0.0) * idx) / 80.0;
            local Float f;
            if(v >= 0.0)
            {
               f = int(v*10 + 0.5)/10.0;
               tbl_214.add("+"+f.printf("%2.1f")+"dB");
            }
            else
            {
               f = int(v*10 - 0.5)/10.0;
               tbl_214.add(f.printf("%2.1f")+"dB");
            }
            idx++;
         }
      }
   }

   // <method.png>
   protected method genTable215_VCMOutputLevel() {
      if(tbl_215.isEmpty())
      {
         int idx = 0;
         loop(61)
         {
            float v = -20.0 + ((10.0 + 20.0) * idx) / 60.0;
            local Float f;
            if(v >= 0.0)
            {
               f = int(v*10 + 0.5)/10.0;
               tbl_215.add("+"+f.printf("%2.1f")+"dB");
            }
            else
            {
               f = int(v*10 - 0.5)/10.0;
               tbl_215.add(f.printf("%2.1f")+"dB");
            }
            idx++;
         }
      }
   }

   // <method_parse.png>
   protected static ParseInsertTypes() {
      local String buf;
      buf.load("montage_insertfx.xml", true/*bRemoveCR*/);

      effect_types.free();
      effect_type_options.free();
      int totalNumEffects = 0;
      int totalNumParams  = 0;
      local TreeNode tnEffect <= buf.parseXML();
      local TreeNode c <= tnEffect;
      local HashTable *attr;
      local String currentCat = "";

      while(null != c)
      {
         // trace "xxx c.name=\""+c.name+"\"";

         if("cat" == c.name)
         {
            attr <= c.objectValue;

            if(attr.exists("name"))
               currentCat = attr["name"];
         }
         else if("effect" == c.name)
         {
            attr <= c.objectValue;

            if(attr.exists("type"))
            {
               int type = attr["type"];

               if(attr.exists("name"))
               {
                  String name <= attr["name"];

                  Montage_InsertEffectType effectType <= new Montage_InsertEffectType;
                  effectType.init(totalNumEffects++/*idx*/, int(attr["type"]), name, currentCat);
                  effect_types.add(#(deref effectType));
                  effect_type_options.add(name);
                  effect_type_options_long.add(name+"\t"+currentCat);

                  local TreeNode cp <= c.right;
                  int paramIdx = 0;

                  while(null != cp)
                  {
                     if("param" == cp.name)
                     {
                        attr <= cp.objectValue;

                        if(attr.exists("nr"))
                        {
                           if(attr.exists("name"))
                           {
                              totalNumParams++;

                              Montage_InsertEffectParam p <= new Montage_InsertEffectParam;
                              short  minValue    = attr.exists("min") ? int(attr["min"]) : 0;
                              short  maxValue    = attr.exists("max") ? int(attr["max"]) : 127;
                              short  ctrValue    = attr.exists("ctr") ? int(attr["ctr"]) : 0;
                              short  div         = attr.exists("div") ? int(attr["div"]) : 1;
                              short  bias        = attr.exists("bias") ? int(attr["bias"]) : 0;
                              short  resetValue  = attr.exists("reset") ? int(attr["reset"]) : 0;
                              String opt <= null;
                              StringArray tblOpt <= null;
                              int    tblIdx = -1;
                              String unit <= null;
                              if(attr.exists("tbl"))
                              {
                                 tblIdx = attr.get("tbl");
                                 tblOpt <= ht_tbl.get(String(tblIdx));
                                 if(b_debug && (null != tblOpt))
                                    trace "xxx param \""+attr["name"]+"\" tbl.num="+tblOpt.numElements;
                              }
                              boolean tbl0 = true;
                              if(attr.exists("tbl0"))
                              {
                                 tbl0 = int(attr["tbl0"]);
                              }
                              opt <= attr.exists("options") ? attr["options"] : null;

                              if(attr.exists("unit"))
                              {
                                 unit <= attr["unit"];
                              }

                              // if(null != opt)
                              //    trace "xxx opt=\""+opt+"\"";

                              p.init(int(attr["nr"])-1,
                                     attr["name"],
                                     minValue, maxValue, ctrValue, div, bias, resetValue,
                                     opt, tblOpt, tblIdx, tbl0,
                                     unit
                                     );

                              effectType.addParam(deref p);

                              if(b_debug)
                              {
                                 trace "xxx effect "+c.name+" param "+paramIdx+" nr="+attr["nr"]+" name=\""+attr["name"];
                                 totalNumParams++;
                              }

                              paramIdx++;
                           }
                        }
                     }

                     cp <= cp.left;
                  }

                  if(b_debug)
                     trace "xxx Montage_InsertForm::ParseInsertTypes: type="+type+" name=\""+name+"\"";
               }
            }
         }
         // trace "xxx c.left="+#(c.left);
         c <= c.left;
      }

      Global.Debug("Montage_InsertForm::ParseInsertTypes: found "+totalNumEffects+" effects and "+totalNumParams+" params");

      // exit(10);
   }

   // <method_get.png>
   public method getInsert() : MontageInsert {
      MontagePart p <= parent_synth_form.getEditPart();
      if(null != p)
      {
         if(b_insert_b)
            return p.insert_b;
         else
            return p.insert_a;
      }
      return null;
   }

   // <method_find.png>
   protected method findEffectTypeByType(short _type) : Montage_InsertEffectType {
      Montage_InsertEffectType *effectType;
      foreach effectType in effect_types
      {
         if(effectType.type == _type)
            return effectType;
      }
      return null;
   }

   // <ui_show.png>
   public method showInsert() {
      MontageInsert ins <= getInsert();
      Montage_InsertEffectType *effectType;
      if(null != ins)
      {
         short type = ins.getType();
         if(b_debug)
            trace "xxx Montage_InsertForm::showInsert<"+(b_insert_b?"b":"a")+">: type="+type;
         effectType <= findEffectTypeByType(type);
         if(null != effectType)
            cm_type.setSelectedOptionAndEnable(effectType.idx);

         MontagePart part <= parent_synth_form.getEditPart();
         byte sw = part.getInsertionFXSwitch();
         if(b_insert_b)
            sw = (sw >> 1) & 1;
         else
            sw = sw & 1;
         cb_enable.setSelectedAndEnable(sw);

         int sc = ins.getSideChainPart();
         if(127 == sc)
            sc = 18;
         cm_sidechain.setSelectedOptionAndEnable(sc);

         updatePresetOptions();
      }
      else
      {
         effectType <= null;
         cm_type.setSelectedOptionAndDisable(-1);
         cb_enable.setSelectedAndDisable(false);

         cm_sidechain.setSelectedOptionAndDisable(-1);
      }

      int paramIdx = 0;
      loop(24)
      {
         Label lb      <= a_lb[paramIdx];
         FloatParam fp <= a_fp[paramIdx];
         boolean bDone = false;
         if(null != effectType)
         {
            Montage_InsertEffectParam p <= effectType.findParamByIdx(paramIdx);
            if(null != p)
            {
               short v = ins.getParamByIdx(paramIdx);
               lb.setCaption(p.name);
               fp.setUserData(p);
               fp.setMinMaxValues(p.min_value / p.div, p.max_value / p.div);
               fp.setCenterValue(p.ctr_value);
               fp.setResetValue(p.reset_value / p.div);
               fp.setPrecision(log(p.div)/log(10));
               fp.setStep(1.0 / p.div);
               // if(p.name & "Sample")
               //    trace "xxx p.name=\""+p.name+"\" p.options="+#(p.options)+" p.tbl_idx="+p.tbl_idx+" p.tbl_options="+#(p.tbl_options);
               if(null != p.options)
               {
                  // trace "xxx p.name=\""+p.name+"\" options=\""+p.options+"\"";
                  fp.setDisplayType(FloatParam.DISPLAY_USER);
                  StringArray opt <= p.options.splitChar(';');
                  // trace "xxx showInsert: opt="+#(opt);
                  fp.setUserTable(deref opt);
                  fp.setEnableUserTableStart0(p.b_tbl_0);
                  fp.setUserValueToStringFxn(null);
                  fp.setUserStringToValueFxn(null);
               }
               else if(null != p.tbl_options)
               {
                  fp.setDisplayType(FloatParam.DISPLAY_USER);
                  fp.setUserTable(p.tbl_options);
                  fp.setEnableUserTableStart0(p.b_tbl_0);
                  fp.setUserValueToStringFxn(null);
                  fp.setUserStringToValueFxn(null);
               }
               else if(204 == p.tbl_idx)
               {
                  fp.setDisplayType(FloatParam.DISPLAY_USER);
                  fp.setUserValueToStringFxn(Montage_InsertForm.fxnTable204_BitCrusherRate_ValueToString);
                  fp.setUserStringToValueFxn(Montage_InsertForm.fxnTable204_BitCrusherRate_StringToValue);
               }
               else
               {
                  fp.setDisplayType(FloatParam.DISPLAY_FLOAT);
                  fp.setUserValueToStringFxn(null);
                  fp.setUserStringToValueFxn(null);
               }
               if(null != p.unit)
                  fp.setUnit(p.unit);
               else
                  fp.setUnit(null);
               fp.setValueAndEnable( (v - p.bias) / p.div );
               bDone = true;
            }
         }
         if(!bDone)
         {
            lb.setCaption("-");
            fp.setValueAndDisable(-1);
         }
         paramIdx++;
      }

      updateTypeDependentWidgets();

      relayout();
      UI.RedrawAll();
   }

   // <ui_update.png>
   protected method updateTypeDependentWidgets() {
      MontageInsert ins <= getInsert();
      if(null != ins)
      {
         boolean bEditable = (0 != ins.getType());

         bt_stash    .setEditable(bEditable);
         cf_preset   .setEditable(bEditable);
         bt_copy     .setEditable(bEditable);
         bt_paste    .setEditable(bEditable);
         bt_reset    .setEditable(bEditable);
         bt_rand     .setEditable(bEditable);
         cm_sidechain.setEditable(bEditable);
         redraw();
      }
   }

   // <ui_update.png>
   protected method updatePresetOptions() {
      MontageInsert ins <= getInsert();
      if(null != ins)
      {
         MIDISynthProfileDataMontage data <= parent_synth_form.data;
         local String typePrefix <= ins.getType()+":";
         local String presetName;
         local StringArray opt;
         opt.add("<def>");
         String *key;
         foreach key in data.ht_insert_effect_presets
         {
            if(key <= typePrefix)
            {
               key.replace(typePrefix, "") => presetName;
               if("<def>" != presetName)
                  opt.add(presetName);
            }
         }
         cf_preset.setOptions(opt);
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEnableChanged() {
      MontagePart part <= parent_synth_form.getEditPart();
      if(null != part)
      {
         byte sw = part.getInsertionFXSwitch();
         if(b_insert_b)
            sw = (sw & 1) | (cb_enable.isSelected() << 1);
         else
            sw = (sw & 2) | (cb_enable.isSelected() << 0);
         part.setInsertionFXSwitch(sw);
         parent_synth_form.handleParamEdited();
         MIDISynthProfileDataMontage data <= parent_synth_form.data;
         Global.Print("Part "+(data.current_part_idx+1)+" Insert Effect "+(b_insert_b?"B":"A")+" is "+Utils.GetEnableString(cb_enable.isSelected()));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleTypeChanged() {
      MontageInsert ins <= getInsert();
      if(null != ins)
      {
         int typeIdx = cm_type.getSelectedOption();
         Montage_InsertEffectType effectType <= effect_types.get(typeIdx);
         if(null != effectType)
         {
            ins.setType(effectType.type);
            MontagePerformance replayPerf <= parent_synth_form.replay_perf;
            MIDISynthProfileDataMontage data <= parent_synth_form.data;
            MontagePart replayPart <= replayPerf.getPartByIdx(data.current_part_idx);
            if(null != replayPart)
            {
               MontageInsert replayIns <= b_insert_b ? replayPart.insert_b : replayPart.insert_a;
               replayIns.invalidateReplayParams();
            }
            updatePresetOptions();
            cf_preset.setSelectedOption(0/*<def>*/);
            boolean bPresetLoaded = tryLoadPreset("<def>");
            parent_synth_form.handleParamEdited();
            showInsert();
            Global.Print("Effect type is \""+cm_type.getSelectedOptionName()+"\" ("+effectType.type+")"+(bPresetLoaded?" (preset loaded)":""));
         }
      }
   }

   // <ui_handle.png>
   protected method handleParamChanged(FloatParam _fp, boolean _bQuiet) {
      MontageInsert ins <= getInsert();
      if(null != ins)
      {
         Montage_InsertEffectParam p <= _fp.getUserData();
         short v = _fp.getFloatValue() * p.div + p.bias;
         ins.setParamByIdx(p.idx, v);
         if(!_bQuiet)
         {
            parent_synth_form.handleParamEdited();
            Global.Print("Param \""+p.name+"\" ("+(p.idx+1)+") is "+_fp.getDisplayedText()+" ("+v+")");
         }
      }
   }

   // <method.png>
   protected method savePreset(MontageInsert _ins, String _name) {
      MIDISynthProfileDataMontage data <= parent_synth_form.data;
      MontageInsert insPreset <= data.getOrCreateInsertEffectPreset(_ins.getType(), _name);
      insPreset.copyFrom(_ins);
   }

   // <ui_handle.png>
   protected method handleStash() {
      MontageInsert ins <= getInsert();
      if(null != ins)
      {
         savePreset(ins, "<def>");
         Global.Print("Save Insert Effect as Default");
      }
   }

   // <ui_handle.png>
   protected method tryLoadPreset(String _name) : boolean {
      MontageInsert ins <= getInsert();
      if(null != ins)
      {
         MIDISynthProfileDataMontage data <= parent_synth_form.data;
         MontageInsert insPreset <= data.getInsertEffectPreset(ins.getType(), _name);
         if(null != insPreset)
         {
            ins.copyFrom(insPreset);
            return true;
         }
      }
      return false;
   }

   // <ui_handle.png>
   protected method handlePresetSelected() {
      String presetName <= cf_preset.getSelectedOptionName();
      if(cb_preset_autoload.isSelected())
      {
         if(tryLoadPreset(presetName))
         {
            parent_synth_form.handleParamEdited();
            showInsert();
            Global.Print("Load preset \""+presetName+"\"");
         }
      }
      else
      {
         Global.Print("Preset is \""+presetName+"\"");
      }
   }

   // <ui_handle.png>
   protected method handleSavePreset(boolean _bAdd) {
      MontageInsert ins <= getInsert();
      if(null != ins)
      {
         String presetName <= cf_preset.getSelectedOptionName();
         presetName.trim();
         if(!presetName.isBlank())
         {
            savePreset(ins, presetName);
            Global.Print((_bAdd?"Add":"Save")+" preset \""+presetName+"\"");
            if(_bAdd)
            {
               updatePresetOptions();
               cf_preset.setSelectedOptionByName(presetName);
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleRemovePreset(String _presetName) {
      MontageInsert ins <= getInsert();
      if(null != ins)
      {
         if("<def>" != _presetName)
         {
            if(!_presetName.isBlank())
            {
               MIDISynthProfileDataMontage data <= parent_synth_form.data;
               if(data.removeInsertEffectPresetByKey(ins.getType()+":"+_presetName))
               {
                  Global.Print("Delete preset \""+_presetName+"\"");
                  updatePresetOptions();
                  cf_preset.setSelectedOption(0);
               }
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleCopy() {
      MontageInsert ins <= getInsert();
      if(null != ins)
      {
         if(null == clipboard)
         {
            clipboard <= new MontageInsert();
            clipboard.init(0/*partIdx*/, 0/*insertType*/);
         }
         clipboard.copyFrom(ins);

         Global.Print("Copy Insert Effect to Clipboard");
      }
   }

   // <ui_handle.png>
   protected =replay= method handlePaste() {
      if(null != clipboard)
      {
         MontageInsert ins <= getInsert();
         if(null != ins)
         {
            ins.copyFrom(clipboard);
         }

         parent_synth_form.handleParamEdited();
         showInsert();
         Global.Print("Paste Insert Effect from Clipboard");
      }
   }

   // <ui_handle.png>
   protected method handleReset() {
      MontageInsert ins <= getInsert();
      if(null != ins)
      {
         FloatParam *fp;
         foreach fp in a_fp
         {
            if(fp.isEditable())
            {
               fp.setValue(fp.getResetValue());
               handleParamChanged(fp, true/*bQuiet*/);
            }
         }
         parent_synth_form.handleParamEdited();
         Global.Print("Reset all effect parameters");
      }
   }

   // <ui_handle.png>
   protected method handleRand() {
      MontageInsert ins <= getInsert();
      if(null != ins)
      {
         FloatParam *fp;
         foreach fp in a_fp
         {
            if(fp.isEditable())
            {
               fp.setValue(fp.getMinValue() + rand(fp.getMaxValue() - fp.getMinValue()));
               handleParamChanged(fp, true/*bQuiet*/);
            }
         }
         parent_synth_form.handleParamEdited();
         Global.Print("Randomize all effect parameters");
      }
   }

   // <ui_handle.png>
   protected method handleSideChainChanged() {
      MontageInsert ins <= getInsert();
      if(null != ins)
      {
         int sc = cm_sidechain.getSelectedOption();
         if(18 == sc)
            sc = 127;
         ins.setSideChainPart(sc);
         parent_synth_form.handleParamEdited();
         Global.Print("Side Chain is \""+cm_sidechain.getSelectedOptionName()+"\" ("+sc+")");
      }
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      Layer ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      int paramIdx = a_fp.indexOfPointer(ap, 0);
      if(paramIdx >= 0)
      {
         handleParamChanged(ap, false/*bQuiet*/);
         if(FloatParam.ACTION_VALUECHANGED == acName)
            parent_synth_form.refocusDefault();
         return true;
      }

      switch(@(ap))
      {
         case @(cb_enable):
            handleEnableChanged();
            return true;

         case @(cm_type):
            handleTypeChanged();
            return true;

         case @(bt_stash):
            handleStash();
            return true;

         case @(cf_preset):
            if(ComboField.ACTION_OPTIONADDED == acName)
            {
               handleSavePreset(true/*bAdd*/);
            }
            else if(ComboField.ACTION_OPTIONSELECTED == acName)
            {
               handlePresetSelected();
            }
            else if(ComboField.ACTION_OPTIONRESELECTED == acName)
            {
               // RETURN pressed while option already exists
               handleSavePreset(false/*bAdd*/);
            }
            else if(ComboField.ACTION_OPTIONREMOVED == acName)
            {
               handleRemovePreset(cf_preset.getLastRemovedOptionName());
            }
            else
            {
               // // handleUserFltChanged(false/*bChangeFocus*/, (ComboField.ACTION_OPTIONEDITED == acName)/*bQuiet*/);
            }
            return true;

         case @(cb_preset_autoload):
            Global.Print("Preset-autoload is "+Utils.GetEnableString(cb_preset_autoload.isSelected()));
            return true;

         case @(bt_copy):
            handleCopy();
            return true;

         case @(bt_paste):
            handlePaste();
            return true;

         case @(bt_reset):
            handleReset();
            return true;

         case @(bt_rand):
            handleRand();
            return true;

         case @(cm_sidechain):
            handleSideChainChanged();
            return true;
      }
   }

}
