// ----
// ---- file   : Montage_ParamForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2022-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 21Oct2022
// ---- changed: 23Oct2022, 24Oct2022, 28Oct2022, 04Nov2022, 28Oct2023, 29Oct2023
// ----
// ----
// ----

module MMontage_ParamForm;

use namespace ui;
use namespace st2;

boolean b_debug = 0;


// <class.png>
class Montage_ParamForm extends XMLForm, ActionProvider, MIDIMapDefs, MontageDefs {
   // base class for FMForm and OpForm

   protected EditMIDISynthFormMontage *parent_synth_form;

   protected Layer *[] param_widgets;


   // <method_init.png>
   protected method initParamForm(EditMIDISynthFormMontage _parentSynthForm) {
      parent_synth_form <= _parentSynthForm;
   }

   // <method_init.png>
   protected method createWidgetsFromMSPSubGroup(String buf, MIDISynthProfile msp, int groupIdx, String subGroupCaption) {
      int subGroupIdx = msp.findSubGroupIdxByCaption(groupIdx, subGroupCaption);
      if(subGroupIdx >= 0)
      {
         local PointerArray aliases;
         msp.findDataAliasesByGroupIds(groupIdx, subGroupIdx, aliases);
         // trace "xxx Montage_ParamForm: subGroup=\""+subGroupCaption+"\" aliases="+#(aliases);

         int colNr = 1;
         // // String sPadLB = UI.IsHiDPI() ? "padTop=0 padBottom=0" : "padTop=0 padBottom=3";
         String sPadLB = "padding=0;4;0;0";
         String sPadCM = UI.IsHiDPI() ? "padding=1;0;0;0" : "padding=1;0;0;0";
         String sPadFP = UI.IsHiDPI() ? "padding=1;0;0;0" : "padding=2;0;0;0";
         // // String sPadTP = UI.IsHiDPI() ? ("padding="+((groupIdx > 0)?4:2)+";0;0;0") : "innerpadding=0;0;0;0 padding=0;0;0;0";
         String sPadTP = "padding=0;0;"+(UI.IsHiDPI()?6:4)+";0 innerpadding=0;0;0;0";
         // trace "xxx subGroupCaption=\""+subGroupCaption+"\" sPadTP=\""+sPadTP+"\"";

         buf.append("
    <TitledPanel id=g_"+groupIdx+"_"+subGroupIdx+" autoresolve=0 dir=BOTTOM
                 caption=\""+subGroupCaption+"\"
                 font=\"default bold 13\"
                 drawBorder=0
                 "+sPadTP+"
                 >
"
                    );

         MIDISynthProfileCtlAlias *alias;
         int aliasIdx = 0;
             // padLeft="+((colNr>1)?10:0)+"
         foreach alias in aliases
         {
            if(alias.b_ui)
            {
               buf.append("
      <Label dir=RIGHT
             align=top;baselineY
             caption=\""+alias.caption+":\"
             textPlacement=RIGHT
             fillBG=0
             sizeGroup=sgx_lb"+colNr+"
             "+sPadLB+"
             />
"
                          );

               if("ComboBox" == alias.ui_class)
               {
                  buf.append("
      <ComboBox name=p_"+groupIdx+"_"+subGroupIdx+"_"+aliasIdx+" dir=RIGHT
                align=top;baselineY
                "+sPadCM+"
                toolTipCaption=\""+alias.id+"\"
                borders=0
                sizeGroup=sgx_c"+colNr+"
"
                             );

                  if(null != alias.ui_id)
                     buf.append("                  id="+alias.ui_id+"\n");
                  else
                     buf.append("                  autoresolve=0\n");

                  if(null != alias.edit_options_str)
                  {
                     buf.append("                options=\""+alias.edit_options_str+"\"\n");
                  }
               }
               else
               {
                  buf.append("
      <FloatParam name=p_"+groupIdx+"_"+subGroupIdx+"_"+aliasIdx+" dir=RIGHT min="+alias.min+" max="+alias.max+" reset="+alias.reset+" rangeEditable=0
                  align=expandY;baselineY
                  "+sPadFP+"
                  cols=4
                  stepFine=1 stepCoarse=1
                  precision=0
			         textAlign=CENTER
                  toolTipCaption=\""+alias.id+"\"
                  borders=0
                  font=\"default 11\"
                  noneditabletext=\"-\"
                  sizeGroup=sgx_c"+colNr+"
"
                             );

                  if(null != alias.ui_id)
                     buf.append("                  id="+alias.ui_id+"\n");
                  else
                     buf.append("                  autoresolve=0\n");

                  if(null != alias.edit_options_str)
                  {
                     buf.append("                  userTbl=\""+alias.edit_options_str+"\"\n");
                     // if(0 != alias.bias)
                     //    buf.append("                  usertblStart0="+(alias.min)+"\n");
                     buf.append("                  display=USER\n");
                  }
                  else
                  {
                     if(0 != alias.bias)
                        buf.append("                  center="+(-alias.bias)+"\n");
                  }
               }

               buf.append("\n/>\n");
               colNr++;
               aliasIdx++;
            } // if alias.b_ui
         }

         buf.append("</TitledPanel>\n");
      }
   }

   // <method_init.png>
   protected method createWidgetsFromMSPGroup(String buf, MIDISynthProfile msp, String groupCaption) {
      buf.append("
  <Panel dir=LEFT>
    <SizeGroupX id=sgx_lb1/>
    <SizeGroupX id=sgx_c1/>

    <SizeGroupX id=sgx_lb2/>
    <SizeGroupX id=sgx_c2/>

    <SizeGroupX id=sgx_lb3/>
    <SizeGroupX id=sgx_c3/>

    <SizeGroupX id=sgx_lb4/>
    <SizeGroupX id=sgx_c4/>

    <SizeGroupX id=sgx_lb5/>
    <SizeGroupX id=sgx_c5/>

    <SizeGroupX id=sgx_lb6/>
    <SizeGroupX id=sgx_c6/>

    <SizeGroupX id=sgx_lb7/>
    <SizeGroupX id=sgx_c7/>

    <SizeGroupX id=sgx_lb8/>
    <SizeGroupX id=sgx_c8/>
"
                 );

      int groupIdx = msp.findGroupIdxByCaption(groupCaption);
      if(groupIdx >= 0)
      {
         StringArray subGroupCaptions <= msp.getSubGroupCaptionsByGroupIdx(groupIdx);
         if(null != subGroupCaptions)
         {
            String *subGroupCaption;
            foreach subGroupCaption in subGroupCaptions
            {
               createWidgetsFromMSPSubGroup(buf, msp, groupIdx, subGroupCaption);
            }
         }
      }

      buf.append("
</Panel>
"
                 );
   }

   // <method_init.png>
   protected method resolveWidgetsFromMSPGroup(MIDISynthProfile msp, String groupCaption, PointerArray ret) : boolean {
      int groupIdx = msp.findGroupIdxByCaption(groupCaption);
      if(groupIdx >= 0)
      {
         StringArray subGroupCaptions <= msp.getSubGroupCaptionsByGroupIdx(groupIdx);
         if(null != subGroupCaptions)
         {
            int subGroupIdx = 0;
            loop(subGroupCaptions.numElements)
            {
               local MIDISynthProfileCtlAlias*[] aliases;
               msp.findDataAliasesByGroupIds(groupIdx, subGroupIdx, aliases);

               local String panelId <= "g_"+groupIdx+"_"+subGroupIdx;
               if(b_debug)
                  trace "[trc] resolveWidgetsFromMSPGroup: panelId="+panelId;
               Layer pn <= findLayerById(panelId);
               if(null != pn)
               {
                  MIDISynthProfileCtlAlias *alias;
                  int aliasIdx = 0;
                  foreach alias in aliases
                  {
                     if(alias.b_ui)
                     {
                        local String widgetName <= "p_"+groupIdx+"_"+subGroupIdx+"_"+aliasIdx;
                        if(b_debug)
                           trace "[trc] resolveWidgetsFromMSPGroup: resolve param widget name="+widgetName;
                        Layer l <= pn.findChildLayerByName(widgetName);
                        if(null != l)
                        {
                           l.setUserData(alias);
                           ret.add(l);
                        }
                        else
                        {
                           trace "[---] resolveWidgetsFromMSPGroup: failed to resolve widgetName=\""+widgetName+"\" (subGroupCaption="+subGroupCaptions.get(subGroupIdx)+")";
                           return false;
                        }

                        // Next param widget
                        aliasIdx++;
                     }
                  }

                  // Next sub group
                  subGroupIdx++;
               }
               else
               {
                  trace "[---] resolveWidgetsFromMSPGroup: failed to resolve panelId=\""+panelId+"\"";
                  return false;
               }
            }
            return true;
         }
         else
         {
            trace "[---] resolveWidgetsFromMSPGroup: subgroup captions array is null (groupIdx="+groupIdx+")";
            return false;
         }
      }
      else
      {
         trace "[---] resolveWidgetsFromMSPGroup: failed to resolve groupIdx for groupCaption=\""+groupCaption+"\"";
         return false;
      }
   }

   // <method_get.png>
   protected method getMontageObjectOverrideForAlias(MIDISynthProfileCtlAlias _alias) : MontageObject {
      return null;
   }

   // <method_get.png>
   protected method getAliasOverride(MIDISynthProfileCtlAlias _alias) : MIDISynthProfileCtlAlias {
      return _alias;
   }

   // <ui_update.png>
   protected method updateParamWidgets(MontageObject _c) {
      Layer *l;
      FloatParam *fp;
      ComboBox *cm;
      foreach l in param_widgets
      {
         if(null != _c)
         {
            MIDISynthProfileCtlAlias alias <= l.getUserData();
            MontageObject c <= getMontageObjectOverrideForAlias(alias);
            if(null == c)
               c <= _c;
            alias <= getAliasOverride(alias);
            int value = c.getValueByAlias(alias);
            if(b_debug)
               trace "[trc] Montage_ParamForm::updateParamWidgets: update param id="+alias.id+" value="+value+" alias.min/max/bias="+alias.min+"/"+alias.max+"/"+alias.bias;

            if(l instanceof FloatParam)
            {
               fp <= l;
               fp.setValueAndEnable(value - alias.bias);
            }
            else if(l instanceof ComboBox)
            {
               cm <= l;
               cm.setSelectedOptionAndEnable(value - alias.bias);
            }
         }
         else
         {
            if(l instanceof FloatParam)
            {
               fp <= l;
               fp.setValueAndDisable(0);
            }
            else if(l instanceof ComboBox)
            {
               cm <= l;
               cm.setSelectedOptionAndDisable(-1);
            }
         }
      }
   }

   // <ui_handle.png>
   protected method handleParamChanged(MontageObject _c, int _paramIdx, Layer _l) {
      if(null != _c)
      {
         MIDISynthProfileCtlAlias alias <= _l.getUserData();
         MontageObject c <= getMontageObjectOverrideForAlias(alias);
         if(null == c)
            c <= _c;
         alias <= getAliasOverride(alias);
         int v;

         if(_l instanceof FloatParam)
         {
            FloatParam fp <= _l;
            v = fp.getFloatValue() + alias.bias;
            Global.PrintFast(alias.id+" is "+fp.getDisplayedText());
         }
         else if(_l instanceof ComboBox)
         {
            ComboBox cm <= _l;
            v = cm.getSelectedOption() + alias.bias;
            Global.PrintFast(alias.id+" is "+cm.getSelectedOptionName());
         }

         if(b_debug)
            trace "[trc] Montage_ParamForm::handleParamChanged: paramIdx="+_paramIdx+" alias.id="+alias.id+" v="+v;
         c.setValueByAlias(alias, v);
         parent_synth_form.handleParamEdited();
      }
   }

}
