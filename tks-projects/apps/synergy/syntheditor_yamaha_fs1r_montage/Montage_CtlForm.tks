// ----
// ---- file   : Montage_CtlForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2022 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 24Oct2022
// ---- changed: 25Oct2022, 28Oct2022, 02Nov2022, 09Nov2022
// ----
// ----
// ----

module MMontage_CtlForm;

use namespace ui;
use namespace st2;


// <class.png>
class Montage_CtlForm extends XMLForm, ActionProvider, MIDIMapDefs, MontageDefs {
   // MontageController_1_13, MontageController_14_16

   int ctl_idx;
   int local_idx;  // within MontageData object

   protected EditMIDISynthFormMontage *parent_synth_form;

   protected Label      *lb_nr;
   protected ComboBox   *cm_src;
   protected ComboBox   *cm_dst;
   protected ComboBox   *cm_bank;
   protected ComboBox   *cm_type;
   protected FloatParam *fp_param1;
   protected FloatParam *fp_param2;
   protected FloatParam *fp_polarity;
   protected FloatParam *fp_ratio;

   protected LayerSwitch *ls_op;  // 0: no switches  1:Ctl Box Switches  2:Pitch/Level values

   protected CheckBox   *[] a_sw;  // Element/Op Controller Box Switches
   protected FloatParam *[] a_fp;  // Element/Op Pitch/Level Ctl Sensitivity (-7..+7)


   static StringArray src_options_short = [
      "PitchBend",
      "ModWheel",
      "AfterTouch",
      "FootCtrl 1",
      "FootCtrl 2",
      "FootSwitch",
      "Ribbon",
      "Breath",
      "AsgnKnob 1",
      "AsgnKnob 2",
      "AsgnKnob 3",
      "AsgnKnob 4",
      "AsgnKnob 5",
      "AsgnKnob 6",
      "AsgnKnob 7",
      "AsgnKnob 8",
      "AsgnSw 1",
      "AsgnSw 2",
      "MotionSeq 1",
      "MotionSeq 2",
      "MotionSeq 3",
      "MotionSeq 4",
      "EnvFollow 1",
      "EnvFollow 2",
      "EnvFollow 3",
      "EnvFollow 4",
      "EnvFollow 5",
      "EnvFollow 6",
      "EnvFollow 7",
      "EnvFollow 8",
      "EnvFollow 9",
      "EnvFollow 10",
      "EnvFollow 11",
      "EnvFollow 12",
      "EnvFollow 13",
      "EnvFollow 14",
      "EnvFollow 15",
      "EnvFollow 16",
      "EnvFollowAD",
      "EnvFollowMst"
                                            ];

   static StringArray src_options_long = [
      "Pitch Bend",
      "Modulation Wheel",
      "After Touch",
      "Foot Controller 1",
      "Foot Controller 2",
      "Foot Switch",
      "Ribbon Controller",
      "Breath Controller",
      "Assignable Knob 1",
      "Assignable Knob 2",
      "Assignable Knob 3",
      "Assignable Knob 4",
      "Assignable Knob 5",
      "Assignable Knob 6",
      "Assignable Knob 7",
      "Assignable Knob 8",
      "Assignable Switch 1",
      "Assignable Switch 2",
      "Motion Seq 1",
      "Motion Seq 2",
      "Motion Seq 3",
      "Motion Seq 4",
      "Envelope Follower 1",
      "Envelope Follower 2",
      "Envelope Follower 3",
      "Envelope Follower 4",
      "Envelope Follower 5",
      "Envelope Follower 6",
      "Envelope Follower 7",
      "Envelope Follower 8",
      "Envelope Follower 9",
      "Envelope Follower 10",
      "Envelope Follower 11",
      "Envelope Follower 12",
      "Envelope Follower 13",
      "Envelope Follower 14",
      "Envelope Follower 15",
      "Envelope Follower 16",
      "Envelope Follower A/D",
      "Envelope Follower Master",
                                           ];

   static StringArray dst_options_short = [
      /*  0 */ "Off",
      /*  1 */ "InsA Param 1",
      /*  2 */ "InsA Param 2",
      /*  3 */ "InsA Param 3",
      /*  4 */ "InsA Param 4",
      /*  5 */ "InsA Param 5",
      /*  6 */ "InsA Param 6",
      /*  7 */ "InsA Param 7",
      /*  8 */ "InsA Param 8",
      /*  9 */ "InsA Param 9",
      /* 10 */ "InsA Param 10",
      /* 11 */ "InsA Param 11",
      /* 12 */ "InsA Param 12",
      /* 13 */ "InsA Param 13",
      /* 14 */ "InsA Param 14",
      /* 15 */ "InsA Param 15",
      /* 16 */ "InsA Param 16",
      /* 17 */ "InsA Param 17",
      /* 18 */ "InsA Param 18",
      /* 19 */ "InsA Param 19",
      /* 20 */ "InsA Param 20",
      /* 21 */ "InsA Param 21",
      /* 22 */ "InsA Param 22",
      /* 23 */ "InsA Param 23",
      /* 24 */ "InsA Param 24",
      /* 25 */ "InsB Param 1",
      /* 26 */ "InsB Param 2",
      /* 27 */ "InsB Param 3",
      /* 28 */ "InsB Param 4",
      /* 29 */ "InsB Param 5",
      /* 30 */ "InsB Param 6",
      /* 31 */ "InsB Param 7",
      /* 32 */ "InsB Param 8",
      /* 33 */ "InsB Param 9",
      /* 34 */ "InsB Param 10",
      /* 35 */ "InsB Param 11",
      /* 36 */ "InsB Param 12",
      /* 37 */ "InsB Param 13",
      /* 38 */ "InsB Param 14",
      /* 39 */ "InsB Param 15",
      /* 40 */ "InsB Param 16",
      /* 41 */ "InsB Param 17",
      /* 42 */ "InsB Param 18",
      /* 43 */ "InsB Param 19",
      /* 44 */ "InsB Param 20",
      /* 45 */ "InsB Param 21",
      /* 46 */ "InsB Param 22",
      /* 47 */ "InsB Param 23",
      /* 48 */ "InsB Param 24",
      /* 49 */ "Rev Send",
      /* 50 */ "Var Send",
      /* 51 */ "Porta Time",
      /* 52 */ "Mono / Poly",
      /* 53 */ "Pitch",
      /* 54 */ "Volume",
      /* 55 */ "P.LFO Speed",
      /* 56 */ "P.LFO Depth 1",
      /* 57 */ "P.LFO Depth 2",
      /* 58 */ "P.LFO Depth 3",
      /* 59 */ "Elem Level",
      /* 60 */ "Elem Pan",
      /* 61 */ "Elem Delay",
      /* 62 */ "E.LFO Speed",
      /* 63 */ "E.LFO PMD",
      /* 64 */ "E.LFO AMD",
      /* 65 */ "E.LFO FMD",
      /* 66 */ "Coarse",
      /* 67 */ "Fine",
      /* 68 */ "PEG Depth",
      /* 69 */ "PEG Hold",
      /* 70 */ "PEG Attack",
      /* 71 */ "PEG Decay 1",
      /* 72 */ "PEG Decay 2",
      /* 73 */ "PEG Release",
      /* 74 */ "AEG Attack",
      /* 75 */ "AEG Decay 1",
      /* 76 */ "AEG Decay 2",
      /* 77 */ "AEG Release",
      /* 78 */ "FEG Depth",
      /* 79 */ "FEG Hold",
      /* 80 */ "FEG Attack",
      /* 81 */ "FEG Decay 1",
      /* 82 */ "FEG Decay 2",
      /* 83 */ "FEG Release",
      /* 84 */ "Cutoff",
      /* 85 */ "Resonance",
      /* 86 */ "HPF Cutoff",
      /* 87 */ "Pan",
      /* 88 */ "LFO2 Speed",
      /* 89 */ "LFO2 PMD",
      /* 90 */ "LFO2 AMD",
      /* 91 */ "LFO2 FMD",
      /* 92 */ "PEG Attack",
      /* 93 */ "PEG Release",
      /* 94 */ "AEG Attack",
      /* 95 */ "AEG Decay 1&2",
      /* 96 */ "AEG Release",
      /* 97 */ "FEG Depth",
      /* 98 */ "FEG Attack",
      /* 99 */ "FEG Decay 1&2",
      /*100 */ "FEG Release",
      /*101 */ "Cutoff",
      /*102 */ "Resonance",
      /*103 */ "Feedback",
      /*104 */ "OP Freq",
      /*105 */ "OP Level",
      /*106 */ "OP Spectral",
      /*107 */ "OP Skirt",
      /*108 */ "OP Resonance",
      /*109 */ "OP Detune",
      /*110 */ "OP AEG Offset",
      /*111 */ "OP AEG Attack",
      /*112 */ "OP AEG Decay1",
      /*113 */ "OP AEG Decay2",
      /*114 */ "OP AEG Release",
      /*115 */ "OP PEG Attack",
      /*116 */ "OP PEG Decay"
                                             ];

   static StringArray dst_options_long = [
      "Off",
      "Insertion Effect A Parameter 1",
      "Insertion Effect A Parameter 2",
      "Insertion Effect A Parameter 3",
      "Insertion Effect A Parameter 4",
      "Insertion Effect A Parameter 5",
      "Insertion Effect A Parameter 6",
      "Insertion Effect A Parameter 7",
      "Insertion Effect A Parameter 8",
      "Insertion Effect A Parameter 9",
      "Insertion Effect A Parameter 10",
      "Insertion Effect A Parameter 11",
      "Insertion Effect A Parameter 12",
      "Insertion Effect A Parameter 13",
      "Insertion Effect A Parameter 14",
      "Insertion Effect A Parameter 15",
      "Insertion Effect A Parameter 16",
      "Insertion Effect A Parameter 17",
      "Insertion Effect A Parameter 18",
      "Insertion Effect A Parameter 19",
      "Insertion Effect A Parameter 20",
      "Insertion Effect A Parameter 21",
      "Insertion Effect A Parameter 22",
      "Insertion Effect A Parameter 23",
      "Insertion Effect A Parameter 24",
      "Insertion Effect B Parameter 1",
      "Insertion Effect B Parameter 2",
      "Insertion Effect B Parameter 3",
      "Insertion Effect B Parameter 4",
      "Insertion Effect B Parameter 5",
      "Insertion Effect B Parameter 6",
      "Insertion Effect B Parameter 7",
      "Insertion Effect B Parameter 8",
      "Insertion Effect B Parameter 9",
      "Insertion Effect B Parameter 10",
      "Insertion Effect B Parameter 11",
      "Insertion Effect B Parameter 12",
      "Insertion Effect B Parameter 13",
      "Insertion Effect B Parameter 14",
      "Insertion Effect B Parameter 15",
      "Insertion Effect B Parameter 16",
      "Insertion Effect B Parameter 17",
      "Insertion Effect B Parameter 18",
      "Insertion Effect B Parameter 19",
      "Insertion Effect B Parameter 20",
      "Insertion Effect B Parameter 21",
      "Insertion Effect B Parameter 22",
      "Insertion Effect B Parameter 23",
      "Insertion Effect B Parameter 24",
      "Part Reverb Send",
      "Part Variation Send",
      "Part Portamento Time",
      "Part Mono/Poly",
      "Pitch",
      "Part Volume",
      "Part LFO Speed",
      "Part LFO Destination 1 Depth",
      "Part LFO Destination 2 Depth",
      "Part LFO Destination 3 Depth",
      "AWM2: Element Level",
      "AWM2: Element Pan",
      "AWM2: Element Key On Delay Time",
      "AWM2: Element LFO Speed",
      "AWM2: Element LFO PMD",
      "AWM2: Element LFO AMD",
      "AWM2: Element LFO FMD",
      "AWM2: Element Coarse Tune",
      "AWM2: Element Fine Tune",
      "AWM2: Element PEG Depth",
      "AWM2: Element PEG Hold Time",
      "AWM2: Element PEG Attack Time",
      "AWM2: Element PEG Decay 1 Time",
      "AWM2: Element PEG Decay 2 Time",
      "AWM2: Element PEG Release Time",
      "AWM2: Element AEG Attack Time",
      "AWM2: Element AEG Decay 1 Time",
      "AWM2: Element AEG Decay 2 Time",
      "AWM2: Element AEG Release Time",
      "AWM2: Element FEG Depth",
      "AWM2: Element FEG Hold Time",
      "AWM2: Element FEG Attack Time",
      "AWM2: Element FEG Decay 1 Time",
      "AWM2: Element FEG Decay 2 Time",
      "AWM2: Element FEG Release Time",
      "AWM2: Element Cutoff Frequency",
      "AWM2: Element Resonance",
      "AWM2: Element HPF Cutoff Frequency",
      "FM-X: Pan",
      "FM-X: LFO Speed",
      "FM-X: LFO PMD",
      "FM-X: LFO AMD",
      "FM-X: LFO FMD",
      "FM-X: PEG Attack Time",
      "FM-X: PEG Release Time",
      "FM-X: AEG Attack Time",
      "FM-X: AEG Decay 1&2 Time",
      "FM-X: AEG Release Time",
      "FM-X: FEG Depth",
      "FM-X: FEG Attack Time",
      "FM-X: FEG Decay 1&2 Time",
      "FM-X: FEG Release Time",
      "FM-X: Filter Cutoff Frequency",
      "FM-X: Filter Resonance",
      "FM-X: Feedback",
      "FM-X: OP1 - 8 Frequency",
      "FM-X: OP1 - 8 Output Level",
      "FM-X: OP1 - 8 Spectral Form",
      "FM-X: OP1 - 8 Spectral Skirt",
      "FM-X: OP1 - 8 Spectral Resonance",
      "FM-X: OP1 - 8 Detune",
      "FM-X: OP1 - 8 EG Level Offset",
      "FM-X: OP1 - 8 EG Time1",
      "FM-X: OP1 - 8 EG Time2",
      "FM-X: OP1 - 8 EG Time3",
      "FM-X: OP1 - 8 EG Time4",
      "FM-X: OP1 - 8 Pitch EG Attack Time",
      "FM-X: OP1 - 8 Pitch EG Decay Time",
                                            ];

   static StringArray bank_options = [
      "Preset",
      "User",
      "Library 1",
      "Library 2",
      "Library 3",
      "Library 4",
      "Library 5",
      "Library 6",
      "Library 7",
      "Library 8",
                                       ];

   static StringArray type_options = [
      "01: Standard",
      "02: Sigmoid",
      "03: Threshold",
      "04: Bell",
      "05: Dogleg",
      "06: FM",
      "07: AM",
      "08: M",
      "09: Discrete Saw",
      "10: Smooth Saw",
      "11: Triangle",
      "12: Square",
      "13: Trapezoid",
      "14: Tilt Sine",
      "15: Bounce",
      "16: Resonance",
      "17: Sequence",
      "18: Hold",
      "19: <user>",
      "20: <user>",
      "21: <user>",
      "22: <user>",
      "23: <user>",
      "24: <user>",
      "25: <user>",
      "26: <user>",
      "27: <user>",
      "28: <user>",
      "29: <user>",
      "30: <user>",
      "31: <user>",
      "32: <user>",
                                       ];


   // <init.png>
   public method initCtlForm(EditMIDISynthFormMontage _parentSynthForm, int _ctlIdx) : boolean {

      parent_synth_form <= _parentSynthForm;
      ctl_idx = _ctlIdx;
      local_idx = (ctl_idx >= 13) ? (ctl_idx - 13) : ctl_idx;

      if(!initPakFile("Montage_CtlForm.xfm"))
      {
         trace "[---] failed to parse \"Montage_CtlForm.xfm\"";
         return false;
      }

      if(!autoResolveIds(this))
      {
         return false;
      }

      lb_nr.setCaption((ctl_idx+1)+":");

      cm_src.setOptions(src_options_short);
      cm_src.setOptionsLong(src_options_long);

      cm_dst.setOptions(dst_options_short);
      cm_dst.setOptionsLong(dst_options_long);

      cm_bank.setOptions(bank_options);

      cm_type.setOptions(type_options);

      int swIdx = 0;
      loop(8)
      {
         CheckBox cb <= findLayerById("cb_sw_"+(swIdx+1));
         a_sw.add(cb);
         FloatParam fp <= findLayerById("fp_op_"+(swIdx+1));
         a_fp.add(fp);
         swIdx++;
      }

      recursiveBuildTabCycleLists();

      return true;
   }

   // <method.png>
   public method enter() {
   }

   // <method.png>
   public method leave() {
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {
      layers.joinRR(layers,
                    [
                       cm_src,
                       cm_dst,
                       cm_bank,
                       cm_type,
                       fp_polarity,
                       fp_ratio,
                       fp_param1,
                       fp_param2,
                       ]
                    );

      switch(ls_op.getCurrentChildNr())
      {
         default:
         case 0:
            break;

         case 1:
            layers.joinRR(layers, a_sw);
            break;

         case 2:
            layers.joinRR(layers, a_fp);
            break;
      }

   }

   // <method_get.png>
   public method getPartCtlData() : Buffer {
      MontagePart p <= parent_synth_form.getEditPart();
      if(null != p)
         return (ctl_idx >= 13) ? (p.controller_14_16.data) : (p.controller_1_13.data);
      return null;
   }

   // <ui_show.png>
   public method showPartCtl() {
      Buffer b <= getPartCtlData();

      boolean bSWDone = false;
      CheckBox *cb;

      if(null != b)
      {
         int dest = MontageController_1_13.GetDestination(b, local_idx);
         if(104/*OP Freq*/ == dest)
         {
            // Ctl Pitch Sensitivity
            ls_op.switchToLayerNr(2);
         }
         else if(110/*OP AEG Offset*/ == dest)
         {
            // Ctl Level Offset
            ls_op.switchToLayerNr(2);
         }
         else if(dest < 59)
         {
            ls_op.switchToLayerNr(0);
         }
         else
         {
            // Ctl Switches
            ls_op.switchToLayerNr(1);
         }

         cm_src     .setSelectedOptionAndEnable( MontageController_1_13.GetSource          (b, local_idx) );
         cm_dst     .setSelectedOptionAndEnable( dest );
         cm_bank    .setSelectedOptionAndEnable( MontageController_1_13.GetCurveBank       (b, local_idx) );
         cm_type    .setSelectedOptionAndEnable( MontageController_1_13.GetCurveType       (b, local_idx) );
         fp_param1  .setValueAndEnable         ( MontageController_1_13.GetCurveParameter1 (b, local_idx) );
         fp_param2  .setValueAndEnable         ( MontageController_1_13.GetCurveParameter2 (b, local_idx) );
         fp_polarity.setValueAndEnable         ( MontageController_1_13.GetCurvePolarity   (b, local_idx) );
         fp_ratio   .setValueAndEnable         ( MontageController_1_13.GetCurveRatio      (b, local_idx) );

         // Op/Element Controller Box Switches
         MontagePartFM pFM <= parent_synth_form.getEditPartFM();
         if(null != pFM)
         {
            int opIdx = 0;
            loop(8)
            {
               MontagePartFMOperator op <= pFM.getOpByIdx(opIdx);
               FloatParam *fp;

               if(104/*OP Freq*/ == dest)
               {
                  // Ctl Pitch Sensitivity
                  fp <= a_fp[opIdx];
                  fp.setValue(op.getPitchControllerSensitivity());
               }
               else if(110/*OP AEG Offset*/ == dest)
               {
                  // Ctl Level Sensitivity
                  fp <= a_fp[opIdx];
                  fp.setValue(op.getLevelControllerSensitivity());
               }
               else
               {
                  // Ctl Switches
                  cb <= a_sw[opIdx];
                  cb.setSelectedAndEnable(op.getControllerSetBox(ctl_idx));
               }

               opIdx++;
            }
            bSWDone = true;
         }
         else
         {
            MontagePartNormal pNormal <= parent_synth_form.getEditPartNormal();
            if(null != pNormal)
            {
               int elementIdx = 0;
               loop(8)
               {
                  MontagePartNormalElement el <= pNormal.getElementByIdx(elementIdx);
                  MontagePartNormalElementOscAmpPitch elOsc <= el.osc_amp_pitch;
                  cb <= a_sw[elementIdx];
                  cb.setSelectedAndEnable(elOsc.getControllerSetBox(ctl_idx));
                  elementIdx++;
               }
               bSWDone = true;
            }
            // else (todo) DRUM controller box switches
         }
      }
      else
      {
         cm_src     .setSelectedOptionAndDisable(-1 );
         cm_dst     .setSelectedOptionAndDisable(-1 );
         cm_bank    .setSelectedOptionAndDisable(-1 );
         cm_type    .setSelectedOptionAndDisable(-1 );
         fp_param1  .setValueAndDisable         ( 0 );
         fp_param2  .setValueAndDisable         ( 0 );
         fp_polarity.setValueAndDisable         ( 0 );
         fp_ratio   .setValueAndDisable         ( 0 );
      }

      if(!bSWDone)
      {
         int idx = 0;
         loop(8)
         {
            cb <= a_sw[idx++];
            cb.setSelectedAndDisable(false);
         }
      }

   }

   // <ui_handle.png>
   protected =replay= method handleSrcChanged() {
      Buffer b <= getPartCtlData();
      MontageController_1_13.SetSource(b, local_idx, cm_src.getSelectedOption());
      Global.PrintFast("Ctl "+(ctl_idx+1)+" Source is "+cm_src.getSelectedOptionName()+" ("+cm_src.getSelectedOption()+")");
      MontagePart p <= parent_synth_form.getEditPart();
      p.invalidateReplayAssignableKnobValues();
      parent_synth_form.handleParamEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleDstChanged() {
      Buffer b <= getPartCtlData();
      MontageController_1_13.SetDestination(b, local_idx, cm_dst.getSelectedOption());
      Global.PrintFast("Ctl "+(ctl_idx+1)+" Destination is "+cm_dst.getSelectedOptionName()+" ("+cm_dst.getSelectedOption()+")");
      MontagePart p <= parent_synth_form.getEditPart();
      p.invalidateReplayAssignableKnobValues();
      parent_synth_form.handleParamEdited();
      showPartCtl();  // (todo) update ls_op only
   }

   // <ui_handle.png>
   protected =replay= method handleBankChanged() {
      Buffer b <= getPartCtlData();
      MontageController_1_13.SetCurveBank(b, local_idx, cm_bank.getSelectedOption());
      Global.PrintFast("Ctl "+(ctl_idx+1)+" Curve Bank is "+cm_bank.getSelectedOptionName());
      // MontagePart p <= parent_synth_form.getEditPart();
      // p.invalidateReplayAssignableKnobValues();
      parent_synth_form.handleParamEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleTypeChanged() {
      Buffer b <= getPartCtlData();
      MontageController_1_13.SetCurveType(b, local_idx, cm_type.getSelectedOption());
      Global.PrintFast("Ctl "+(ctl_idx+1)+" Curve Type is "+cm_type.getSelectedOptionName());
      // MontagePart p <= parent_synth_form.getEditPart();
      // p.invalidateReplayAssignableKnobValues();
      parent_synth_form.handleParamEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleParam1Changed() {
      Buffer b <= getPartCtlData();
      MontageController_1_13.SetCurveParameter1(b, local_idx, fp_param1.getFloatValue());
      Global.PrintFast("Ctl "+(ctl_idx+1)+" Curve Type is "+fp_param1.getDisplayedText());
      // MontagePart p <= parent_synth_form.getEditPart();
      // p.invalidateReplayAssignableKnobValues();
      parent_synth_form.handleParamEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleParam2Changed() {
      Buffer b <= getPartCtlData();
      MontageController_1_13.SetCurveParameter2(b, local_idx, fp_param2.getFloatValue());
      Global.PrintFast("Ctl "+(ctl_idx+1)+" Curve Type is "+fp_param2.getDisplayedText());
      // MontagePart p <= parent_synth_form.getEditPart();
      // p.invalidateReplayAssignableKnobValues();
      parent_synth_form.handleParamEdited();
   }

   // <ui_handle.png>
   protected =replay= method handlePolarityChanged() {
      Buffer b <= getPartCtlData();
      MontageController_1_13.SetCurvePolarity(b, local_idx, fp_polarity.getFloatValue());
      Global.PrintFast("Ctl "+(ctl_idx+1)+" Curve Polarity is "+fp_polarity.getDisplayedText());
      // MontagePart p <= parent_synth_form.getEditPart();
      // p.invalidateReplayAssignableKnobValues();
      parent_synth_form.handleParamEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleRatioChanged() {
      Buffer b <= getPartCtlData();
      MontageController_1_13.SetCurveRatio(b, local_idx, fp_ratio.getFloatValue());
      Global.PrintFast("Ctl "+(ctl_idx+1)+" Curve Ratio is "+fp_ratio.getDisplayedText());
      // MontagePart p <= parent_synth_form.getEditPart();
      // p.invalidateReplayAssignableKnobValues();
      parent_synth_form.handleParamEdited();
   }

   // <ui_handle.png>
   protected =replay= method handleSWChanged(int _idx, boolean _bQuiet) {
      CheckBox cb <= a_sw[_idx];

      // Op/Element Controller Box Switches
      MontagePart p <= parent_synth_form.getEditPart();
      MontagePartFM pFM <= parent_synth_form.getEditPartFM();
      if(null != pFM)
      {
         MontagePartFMOperator op <= pFM.getOpByIdx(_idx);
         op.setControllerSetBox(ctl_idx, cb.isSelected());
         p.invalidateReplayAssignableKnobValues();
         if(!_bQuiet)
         {
            Global.PrintFast("Ctl "+(ctl_idx+1)+" Op Switch is "+Utils.GetEnableString(cb.isSelected()));
            parent_synth_form.handleParamEdited();
         }
      }
      else
      {
         MontagePartNormal pNormal <= parent_synth_form.getEditPartNormal();
         if(null != pNormal)
         {
            MontagePartNormalElement el <= pNormal.getElementByIdx(_idx);
            MontagePartNormalElementOscAmpPitch elOsc <= el.osc_amp_pitch;
            elOsc.setControllerSetBox(ctl_idx, cb.isSelected());
            p.invalidateReplayAssignableKnobValues();
            if(!_bQuiet)
            {
               Global.PrintFast("Ctl "+(ctl_idx+1)+" Element Switch is "+Utils.GetEnableString(cb.isSelected()));
               parent_synth_form.handleParamEdited();
            }
         }
         // else (todo) DRUM controller box switches
      }
   }

   // <ui_handle.png>
   protected =replay= method handleOpPitchOrLevelChanged(int _idx) {
      Buffer b <= getPartCtlData();
      MontagePartFM pFM <= parent_synth_form.getEditPartFM();
      if(null != pFM)
      {
         MontagePartFMOperator op <= pFM.getOpByIdx(_idx);
         if(null != op)
         {
            int dest = MontageController_1_13.GetDestination(b, local_idx);
            FloatParam *fp;
            fp <= a_fp[_idx];
            byte v = fp.getFloatValue();

            if(104/*OP Freq*/ == dest)
            {
               // Ctl Pitch Sensitivity
               op.setPitchControllerSensitivity(v);
               // op.setControllerSetBox(ctl_idx, (0 != v) || (0 != op.getLevelControllerSensitivity()));
               op.setControllerSetBox(ctl_idx, true);
               Global.Print("Op "+(_idx+1)+" Pitch Ctl Sensitivity is "+op.getPitchControllerSensitivity());
               parent_synth_form.handleParamEdited();
            }
            else if(110/*OP AEG Offset*/ == dest)
            {
               // Ctl Level Sensitivity
               op.setLevelControllerSensitivity(v);
               // op.setControllerSetBox(ctl_idx, (0 != v) || (0 != op.getPitchControllerSensitivity()));
               op.setControllerSetBox(ctl_idx, true);

               Global.Print("Op "+(_idx+1)+" Level Ctl Sensitivity is "+op.getLevelControllerSensitivity());
               parent_synth_form.handleParamEdited();
            }
         }
      }
      else
      {
         // (todo) AWM2 (TBI: are there similar per-element/per-dest settings ?)
      }
   }

   // <ui_handle.png>
   protected method handleSWToggleAll() {
      boolean bAll = true;
      CheckBox *cb;
      foreach cb in a_sw
      {
         bAll = bAll && cb.isSelected();
      }

      int cbIdx = 0;

      if(bAll)
      {
         // Clear all
         foreach cb in a_sw
         {
            cb.setSelected(false);
            handleSWChanged(cbIdx++, true/*bQuiet*/);
         }
         Global.PrintFast("Disable all Op / Element Controller Switches");
      }
      else
      {
         // Enable all
         foreach cb in a_sw
         {
            cb.setSelected(true);
            handleSWChanged(cbIdx++, true/*bQuiet*/);
         }
         Global.PrintFast("Enable all Op / Element Controller Switches");
      }
      parent_synth_form.handleParamEdited();
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      Layer ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      int idx = a_sw.indexOfPointer(ap, 0);
      if(-1 != idx)
      {
         if(CheckBox.ACTION_HOLD_CLICK == acName)
            handleSWToggleAll();
         else
            handleSWChanged(idx, false/*bQuiet*/);
         return true;
      }

      idx = a_fp.indexOfPointer(ap, 0);
      if(-1 != idx)
      {
         handleOpPitchOrLevelChanged(idx);
         if(FloatParam.ACTION_VALUECHANGED == acName)
            parent_synth_form.refocusDefault();
         return true;
      }

      switch(@(ap))
      {
         case @(cm_src):
            handleSrcChanged();
            break;

         case @(cm_dst):
            handleDstChanged();
            break;

         case @(cm_bank):
            handleBankChanged();
            break;

         case @(cm_type):
            handleTypeChanged();
            break;

         case @(fp_param1):
            handleParam1Changed();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               parent_synth_form.refocusDefault();
            break;

         case @(fp_param2):
            handleParam2Changed();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               parent_synth_form.refocusDefault();
            break;

         case @(fp_polarity):
            handlePolarityChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               parent_synth_form.refocusDefault();
            break;

         case @(fp_ratio):
            handleRatioChanged();
            if(FloatParam.ACTION_VALUECHANGED == acName)
               parent_synth_form.refocusDefault();
            break;
      }
   }

}
