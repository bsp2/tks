// ----
// ---- file   : Montage.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2022-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----          derived from GenericSynthEdit+FS1R
// ----          tested with FW3.51
// ----
// ---- created: 07Oct2022
// ---- changed: 08Oct2022, 09Oct2022, 10Oct2022, 11Oct2022, 12Oct2022, 13Oct2022, 14Oct2022
// ----          21Oct2022, 22Oct2022, 23Oct2022, 24Oct2022, 25Oct2022, 26Oct2022, 27Oct2022
// ----          28Oct2022, 29Oct2022, 30Oct2022, 31Oct2022, 01Nov2022, 02Nov2022, 03Nov2022
// ----          04Nov2022, 05Nov2022, 07Nov2022, 08Nov2022, 09Nov2022, 10Nov2022, 11Nov2022
// ----          12Nov2022, 14Nov2022, 17Nov2022, 18Nov2022, 14Dec2022, 03Jan2023, 27Jan2023
// ----          20Feb2023, 01Apr2023, 21Sep2023, 25Sep2023, 03Oct2023, 08Oct2023, 21Oct2023
// ----          22Mar2024, 31Jan2025, 28Feb2025
// ----
// ----
// ----

//
// keyboard shortcuts:
//
//            lctrl - 1..9 : select part 1..8
//   lctrl - lshift - 1..9 : select part 9..16
//               lctrl - s : send patch manually
//      lctrl - lshift - s : send patch manually (clear MIDI cache + invalidate replay state)
//               lctrl - e : query / receive performance
//      lctrl - lshift - e : query / receive performance to clipboard
//                lalt - e : query / receive part
//               lctrl - f : show FM sound mixer
//               lctrl - g : show EG mixer
//               lctrl - c : copy patch to clipboard
//      lctrl - lshift - c : copy variation to clipboard
//               lctrl - v : paste patch from clipboard
//      lctrl - lshift - v : paste variation from clipboard
//              lshift - c : copy op or element to clipboard (1..8 tab) OR copy PFX (Patch tab) OR copy CTL (Part CTL tab)
//              lshift - v : paste op or element from clipboard (1..8 tab) OR paste PFX (Patch tab) OR paste CTL (Part CTL tab)
//              lshift - x : swap op or element with clipboard
//                lalt - c : copy part to clipboard
//                lalt - v : paste part from clipboard
//                lalt - x : swap part with clipboard
//             lalt - LEFT : move part left
//            lalt - RIGHT : move part right
//               lctrl - n : init patch
//             lctrl - TAB : toggle part solo
//                       q : select op or element 1
//                       w : select op or element 2
//                       e : select op or element 3
//                       r : select op or element 4
//                       t : select op or element 5
//                       y : select op or element 6
//                       u : select op or element 7
//                       i : select op or element 8
//              lshift - 1 : toggle mute op 1
//              lshift - 2 : toggle mute op 2
//              lshift - 3 : toggle mute op 3
//              lshift - 4 : toggle mute op 4
//              lshift - 5 : toggle mute op 5
//              lshift - 6 : toggle mute op 6
//              lshift - 7 : toggle mute op 7
//              lshift - 8 : toggle mute op 8
//                       1 : select tab "Patch"  (or 'a')
//                       2 : select tab "Part Mix"
//                       3 : select tab "FM Common"
//                       4 : select tab "FM Matrix" (or 'k')
//                       5 : select tab "Part LFO"
//                       6 : select tab "Insert FX"
//                       7 : select tab "Part Ctl"
//                lalt - r : reset part quick edit controls
//               lctrl - r : reset performance quick edit controls
//                    HOME : select next patch
//           lshift - HOME : select next part variation
//                     END : select previous patch
//            lshift - END : select previous part variation
//                  PAGEUP : select next part
//                PAGEDOWN : select previous part
//

// (note) general layout: 16 performances (Main+15 variations) per patch. Each part can play a different variation.
// (note) to create a performance variation, (single-)click the "Receive Edit" button (keeps all other part variations)
// (note) selecting a variation that does not exist will quietly return the Main variation
// (note) it's advised to store common/global settings (mseq, mfx, meq, ..) in the Main variation
//         (and use the "Sync global settings from Main variation" utility function after editing global settings on the synth itself when
//          (part) variations have already been added)
// (note) MFX/MEQ (perf.common settings) are only updated from part 1 variation


// (test) named variations (add variation_name to MontagePerformance)
// (done) layered parts (send multiple note-ons/CCs, see PageSysEx.transformSysExEditorKeyboardEvents()) (toggle button below part button)
// (test) edit all 16 part levels+noteshifts (currently only shows the first 4) (=> show in groups of 4 in fmmatrix view)
// (done) show part type (below part button) (-/awm2/fm-x)
// (dont) lock part (+#parts). copy patch part 1..n to target part when browsing patches. highlight patch name bg (yellow)
// (dont) show #parts in patch options
// (done) mute/solo part
// (done) part EQ1..3 presets (PartForm)
// (done) part FX presets (insert a + b) (PartForm)
// (done) master FX presets (variation + reverb + master eq+effect + adinserts) (PartForm)
// (done) copy/paste part
// (done) copy/paste 2/3/4 parts (subsequent)
// (done) change patch combobox to combofield and remove tf_patch_name
// (idea) send param diff after bulk dump to restore locked group params (+don't update replay patch data)
// (test) AWM2 view (8 elements, bank/wave/coarse/fine/level/level_vel/pan/aeg t1..t4/aeg l1..l4/flt type/flt freq/flt res/flt distance/hpf freq/flt gain/flt t1..t4/flt l1..l4/feg depth/feg vel)
// (actv) part view (16 parts, vol/pan/detune/rev/var/dry/noteshift/output +? aeg atk_t/aeg dcy_t/aeg sus_lvl/aeg rls_t/feg atk_t/feg dcy_t/feg sus_lvl/feg rls_t/feg depth/eq../)
// (done) reset part variation quick edit
// (done) reset performance quick edit
// (done) quick edit controls send sysex, must echo them back in local off mode (but must not echo bulk sysex!) (=> add "montage discard bulk" transform mode)
// (done) show part name in part button tooltip and when selecting parts (status message)
// (ignr) receive param changes + quick-edit sysex/CC (==> can't. synth does not send them)
// (test) proxy layer program changes
// (todo) separate proxy group mask (e.g. send fx via editor but not via proxy layer prgchg)
// (todo) multi-edit partmixer variations (checkbox)
// (done) add Var: combobox to partmixer
// (todo) save init performance
// (todo) save init part FM/AWM/Drum/AD
// (done) copy preset (in general):
//         + add preset "tab" and comboboxes to partmixer
//            + part patch (can be fm-x/awm2/drum)
//            + part eq
//            + part insert effects
//            + [x] all part settings (Patch toggle button)
//            + master effects+eq
//         x hide fmmatrix mix/copy titledpanel in Montage mode (part mix levels would still be useful, though..)
//         + copy patch data when combobox selection changes
// (done) add utility function that syncs PEQ settings (from Main) to variations (but maintains other part settings)
// (done) add utility function that syncs PFX settings (from Main) to variations (but maintains other part settings)
// (done) add utility function that syncs MFX settings (mfx, meq, ..) to variations (but excludes part settings)
// (idea) ?????? later remove MFX copy feature and replace by "copy all part settings" checkbox
// (done) fix pseudo-editability of fm matrix in AWM2/Drum parts (=> show red warning for now)
// (done) click "L:" to toggle part mute
// (test) add "[x] copy other patch settings" checkbox (def=off)  (e.g. copy lfo, scene, mseq, ..) (=> "Patch:" toggle button)
// (done) add "delete part variation" to partmixer part context menu
// (idea) open part context menu with 'a' (currently switches to Patch tab and opens tools menu)
// (done) add/use combobox "preview" feature to cycle through search results
// (idea) add virtual proxy RPNs for modulating certain parameters (e.g. send levels, per-voice params)
// (idea) add local off button / menu function
// (done) add output routing options to PartForm
// (done) add option to force all outputs to "Main L&R" (e.g. when synth is used standalone)
// (done) copy'n'paste pfx (in addition to partmixer ?) (=> lshift-c on Patch tab)
// (idea) copy'n'paste peq (in addition to partmixer ?)
// (done) update op tabs after fmmatrix has been edited
// (test) "Analog Delay Retro / Modern" feedback issue after patch restore (synth GUI says everything's fine) (reselecting fx OR preset type "fixes" it) (also happens when loading performance on synth itself)  WORKAROUND: never send insert fx as bulk dump
// (todo) utility fxn: swap part insert fx
// (done) "sparse" bulk send when switching part types (+ send the rest via diff)
// (done) list all valid performance parts in partmixer "copy" combobox (=> reuse sound layers) (refresh list when tab is shown)
// (todo) multi-edit element/op 1..8 param by holding LALT
// (done) envelope presets (AEG: pad, keys, perc, FEG: pad, keys, perc, PEG: transient, tom, detune) (debug-dump key + read from text file)
// (done) ElementFilterForm: EQ freq/gain option strings
// (test) ElementZoneForm: ctl box switches
// (idea) PerformanceForm (or skip this for*- now..?) (rev/var/ad_inserts/meq/mfx/arp/mseq/superknob/scene/audioin/asgn_knob/ctl1_16/..)
// (done) PartMixer tab: part name, kbdctlsw, insertfxsw, insertconnecttype, xxkeyassignmode, microtune scale+root, xxrecv fc1+2/sus/ribbon
// (done) PartLFO dest does not always line up with synth UI (e.g. AWM2 part "P.LFO Depth 3" == "Pitch") (part-dependent enum?)
// (done) copy layer flags when pasting patches
// (done) copy/paste/swap ops/element with lshift-c/v/x
// (done) swap parts with lalt-x
// (test) EG mixer: left/right presets + mix slider. save per target. randomize.
// (done) PartForm: copy_patch/peq/pfx/mfx: also list part variations
// (done) sound mixer: 4 quadrants, xy pads for common + 8 ops. save. sync edit.
// (test) FMForm: FEG break point settings
// (done) PartForm: show part type
// (done) FMSoundMixer: skip "Init" patches
// (done) add patch/part rating and add option to FMSoundMixer to only consider patched rated >= <level> ? (=> skip debug/test sounds)
// (done) lalt-LEFT/RIGHT: move part left/right
// (done) (re-)arrange parts via drag'n'drop
// (done) PartMixer: sync part variation level+pan+rev+var utility function




// (note) DX11/TX81z waves:
//         W1  Sine Wave
//         W2  Odd Partials 1,3,5,7   1:2   I=0.5  V=12
//         W3  Even Partials 1,2,4,6  1:1   I=0.5  V=12
//         W4  Partials 1,2,3         1:1   I=1.0  V=32
//         W5  Partials 1,2,3,5       1:1   I=1.5  V=65
//         W6  Partials 1,2,3,5       1:1   I=1.7  V=75
//         W7  Partials 1,3,4,5       1:1   I=3.7  V=85
//         W8  Partials 1,3,4,5       1:1   I=4.0  V=87
// [http://javelinart.com/FM_Synthesis_of_Real_Instruments.pdf, p.20]

module MMontage;

use namespace ui;
use namespace st2;

boolean b_debug = 0;
boolean b_debug2 = 0;  // hi freq
boolean b_debug_diff = 0;
boolean b_debug_io = 0;

Buffer init_perf_part;
Buffer init_voice_common;
Buffer init_voice_op_voiced;
Buffer init_voice_op_unvoiced;
Buffer init_patch;
Buffer init_perf_effect;

StringArray alg_expr;
function AlgInit() {
   local String buf;
   if(buf.load("fs1r_alg.txt", true/*bRemoveCR*/))
   {
      local StringArray lines <= buf.splitChar('\n');
      local String *line;
      int algNr = 1;
      foreach line in lines
      {
         line.trim();
         if(!line.isBlank())
         {
            if!(line <= "#")
            {
               if(b_debug)
                  trace "[dbg] fs1r: parse alg["+algNr+"]: "+line;
               alg_expr.add(line);
            }
         }
      }
      if(88 != alg_expr.numElements)
      {
         trace "[---] Montage:AlgInit: wrong alg count (have="+alg_expr.numElements+", expect 88)";
         exit(10);
      }
   }
   else
   {
      trace "[---] Montage:AlgInit: failed to load \"fs1r_alg.txt\"";
      exit(10);
   }
}
AlgInit();


// <class.png>
class Montage_VariationScene {
   int scene_idx;
   String name;
   IntArray part_variations;  // 0..15 => Main / Variation 2..15, -1=keep current variation

   // <method_init.png>
   public method init(int _sceneIdx) {
      scene_idx = _sceneIdx;
      name = "Scene "+(scene_idx+1);
      part_variations.allocAndFill(16, 0);
   }

   // <method.png>
   public method copyFrom(Montage_VariationScene _o) {
      name = _o.name;
      part_variations = _o.part_variations;
   }

   // <method_get.png>
   public method hasDefaultsPartsOnly() : boolean {
      int partIdx = 0;
      loop(16)
      {
         int varIdx = part_variations[partIdx++];
         if(varIdx >= 1)
            return false;
      }
      return true;
   }

   // <method.png>
   public method swapVariations(byte _partIdx, byte _varA, byte _varB) {
      // (note) called by swapWithMainVariation()
      int varIdx = part_variations[_partIdx];
      if(varIdx == _varA)
      {
         part_variations[_partIdx] = _varB;
      }
      else if(varIdx == _varB)
      {
         part_variations[_partIdx] = _varA;
      }
   }

   // <save.png>
   public method saveState(Stream ofs) {
      // Version
      ofs.i16 = 1;

      // Patch name
      Utils.WriteString(ofs, name);

      // Part variations
      Utils.WriteByteArray(ofs, part_variations);
   }

   // <load.png>
   public method loadState(Stream ifs) {
      // Version
      short ver = ifs.u16;

      if(ver >= 1)
      {
         // Patch name
         Utils.ReadString(ifs, name);

         // Part variations
         Utils.ReadByteArray(ifs, part_variations);

         return true;
      }
      else
      {
         trace "[---] Montage_VariationScene: invalid ver="+ver;
      }
      return false;
   }


}


// <class.png>
class Montage_Patch {

   define int NUM_VARIATIONS       = 16;
   define int MAX_SINGLE_PARAMS    = 70;  // max number of single param updates before reverting to send-entire-dump (todo) remove
   define int NUM_VARIATION_SCENES = 32;

   MIDISynthProfile *profile;

   static StringArray category_names = [
      "-",
      "Bass",
      "Lead",
      "Keys",
      "Pad",
      "Stab",
      "Bell",
      "Organ",
      "Drone",
      "FX",
      "Bassdrum",
      "Tom",
      "Snaredrum",
      "Clap",
      "Hihat",
      "Percussion",
      "Other",
      "PEQ",
      "PFX",
      "MFX",
      "Multi",
      "Init",
                                        ];

   String patch_name;     //
   int    patch_category; // see category_names

   MontagePerformance *[] performances;  // Main+15 variations. first element (Main) is always valid
   IntArray edit_part_var_indices;

   int part_layer_mask;
   IntArray multi_midi_ch;  // will be mirrored to data.multi_midi_ch when patch is selected

   Montage_VariationScene *[] variation_scenes;
   byte edit_variation_scene;


   // <method_init.png>
   public method init(EditMIDISynthFormMontage _editor, MIDISynthProfile _profile) {
      // parent_editor <= _editor;
      profile <= _profile;

      loadInitPatch();
   }

   // <method_init.png>
   public method loadInitPatch() {
      // trace "xxx loadInitPatch";
      patch_category  = 0;
      performances.alloc(16);
      MontagePerformance perfMain <= MontagePerformance.New();
      performances.add(#(deref perfMain));
      performances.useAll();
      setPatchName("<empty>");

      multi_midi_ch.allocAndFill(16, 0);
      part_layer_mask = 0;////((1 << 16) - 1) & ~(1|16|256|4096);

      edit_part_var_indices.allocAndFill(16, 0);

      int varSceneIdx = 0;
      variation_scenes.free();
      loop(NUM_VARIATION_SCENES)
      {
         Montage_VariationScene vs <= new Montage_VariationScene;
         vs.init(varSceneIdx);
         variation_scenes.add(#(deref vs));
         varSceneIdx++;
      }
      edit_variation_scene = 0;
   }

   // <method_init.png>
   public method lazyLoadInitPatch() {
      MontagePerformance perfMain <= performances.get(0);
      if( (null == perfMain) || (0 == perfMain.part_valid_mask) )
      {
         local File f;
         if(f.open("montage_init_patch.bin", IOS_IN))
         {
            load(f);
            f.close();
            Global.Debug("Montage_Patch::lazyLoadInitPatch: read \"montage_init_patch.bin\"");
         }
      }
   }

   // <method_get.png>
   public method getVariationSceneByIdx(local int _varSceneIdx) : Montage_VariationScene {
      return variation_scenes.get(_varSceneIdx);
   }

   // <method_get.png>
   public method getEditVariationScene() : Montage_VariationScene {
      return variation_scenes.get(edit_variation_scene);
   }

   // <method_update.png>
   public =replay= method updatePartMidiChFromLayerMask() {
      byte midiCh = -1;
      int bit = 1;
      int partIdx = 0;
      loop(16)
      {
         if(-1 == midiCh)
         {
            midiCh = 0;
         }
         else if(0 == (part_layer_mask & bit))
         {
            midiCh = partIdx;
         }

         multi_midi_ch[partIdx] = midiCh;

         bit = bit << 1;
         partIdx++;
      }

      // trace "xxx mask="+part_layer_mask+" multi_midi_ch="+multi_midi_ch;
   }

   // <method_set.png>
   public method setPartEditVarIdx(byte _partIdx, byte _varIdx) {
      edit_part_var_indices[_partIdx] = _varIdx;
   }

   // <method_set.png>
   public method getPartEditVarIdx(byte _partIdx) : byte {
      return edit_part_var_indices[_partIdx];
   }

   // <method_get.png>
   public method getOrCreatePerformanceVariation(int _partIdxHint, int _varIdx) : MontagePerformance {
      MontagePerformance p <= performances.get(_varIdx);
      if(null == p)
      {
         p <= new MontagePerformance;
         p.init();
         // // p.lazyInit();
         performances[_varIdx] = deref p;
         if(-1 != _partIdxHint)
            p.setPartName(_partIdxHint, "Variation "+_varIdx);
      }
      return p;
   }

   // <method_get.png>
   public method getOrCreateAndInitPerformanceVariation(int _partIdxHint, int _varIdx) : MontagePerformance {
      MontagePerformance p <= performances.get(_varIdx);
      if(null == p)
      {
         p <= new MontagePerformance;
         p.init();
         p.lazyInit();
         performances[_varIdx] = deref p;

         local File f;
         if(f.open("montage_init_performance.bin", IOS_IN))
         {
            p.loadState(f);
         }

         if(-1 != _partIdxHint)
            p.setPartName(_partIdxHint, "Variation "+_varIdx);
      }
      return p;
   }

   // <method_get.png>
   public method getPerformanceVariation(local int _varIdx) : MontagePerformance {
      local MontagePerformance p <= performances.get(_varIdx);
      // trace "xxx getPerformanceVariation("+_varIdx+") => p="+#(p)+" performances="+#(performances);
      if(null == p)  // [21Oct2022] DONT allow null to be returned, needed for var c'n'p
         p <= performances.get(0);
      return p;
   }

   // <method_get.png>
   public method getPerformanceVariationOrNull(int _varIdx) : MontagePerformance {
      MontagePerformance p <= performances.get(_varIdx);
      return p;
   }

   // <method_get.png>
   public method getOrCreateEditPerformance(int _partIdx, boolean _bLazyInit) : MontagePerformance {
      MontagePerformance p <= getOrCreatePerformanceVariation(_partIdx, edit_part_var_indices[_partIdx]);
      if(_bLazyInit)
         p.lazyInit();
      return p;
   }

   // <method_get.png>
   public method getEditPerformance(local int _partIdx) : MontagePerformance {
      // if(0 == _partIdx)
      //    trace "xxx getEditPerformance: edit_part_var_indices="+edit_part_var_indices;
      return getPerformanceVariation(edit_part_var_indices[_partIdx]);
   }

   // <method.png>
   public method copyFrom(Montage_Patch _o) {
      int varIdx = 0;
      MontagePerformance *p;
      MontagePerformance *op;
      loop(NUM_VARIATIONS)
      {
         op <= _o.performances.get(varIdx);
         if(null != op)
         {
            p <= getOrCreatePerformanceVariation(-1/*partIdxHint*/, varIdx);
            p.lazyInit();
            p.copyFrom(op);
         }
         else
         {
            if(varIdx > 0)
            {
               p <= getPerformanceVariation(varIdx);
               if(null != p)
                  performances[varIdx] = null;
            }
         }
         varIdx++;
      }
      patch_name      = _o.patch_name;
      patch_category  = _o.patch_category;
      part_layer_mask = _o.part_layer_mask;
   }

   // <method.png>
   public method copyPartVariationsFrom(int _dstPartIdx, Montage_Patch _o, int _srcPartIdx, boolean _bCopyName) : int {
      int r = 0;
      int varIdx = 0;
      loop(NUM_VARIATIONS)
      {
         MontagePerformance op <= _o.performances[varIdx];
         if(null != op)
         {
            MontagePerformance p <= getOrCreatePerformanceVariation(_dstPartIdx, varIdx);
            p.lazyInit();
            p.copyPartFrom(_dstPartIdx, op, _srcPartIdx, _bCopyName);
            r++;
         }
         // // else
         // // {
         // //    performances[varIdx] = null;  // don't, deletes variation in _all_ parts
         // // }

         varIdx++;
      }
      return r;
   }

   // <method.png>
   public =replay= method syncFromMainVariation(int     _partIdx,
                                                boolean _bLevel,
                                                boolean _bCtl,
                                                boolean _bPEQ,
                                                boolean _bPFX,
                                                boolean _bPMSEQ,
                                                boolean _bMFX
                                                ) : int {
      int numSynced = 0;
      MontagePerformance perfSrc <= performances.get(0);
      MontagePerformance *perfDst;
      foreach perfDst in performances
      {
         if(null != perfDst)
         {
            // (note) checks that perfDst is not perfSrc
            numSynced += perfDst.syncPerformance(_partIdx,
                                                 perfSrc,
                                                 _partIdx,
                                                 _bLevel,
                                                 _bCtl,
                                                 _bPEQ,
                                                 _bPFX,
                                                 _bPMSEQ,
                                                 _bMFX
                                                 );
         }
      }

      return numSynced;
   }

   // <method_set.png>
   public method setPatchName(String _name) {
      patch_name = _name;

      MontagePerformance p <= performances.get(0);
      p.setName(_name);
   }

   // <save.png>
   public method save(Stream _ofs) {

      if(b_debug_io) trace "xxx Montage_Patch::save: ofs.offset="+_ofs.offset+" patch_name=\""+patch_name+"\"";

      // Version
      _ofs.i16 = 7;

      // Chunk data size (v7+)
      //  (note) number of bytes after chunk data sz field
      int patchDataSzOffset = _ofs.offset;
      _ofs.i32 = 0;

      // Patch name
      Utils.WriteString(_ofs, patch_name);

      // Patch category
      _ofs.i8 = patch_category;

      // Part layer mask (v3+)
      _ofs.i16 = part_layer_mask;

      // Part edit variations (v4+)
      int partIdx = 0;
      loop(16)
         _ofs.i8 = edit_part_var_indices[partIdx++];

      int varIdx = 0;
      loop(NUM_VARIATIONS)
      {
         MontagePerformance p <= performances.get(varIdx);
         if(null != p)
         {
            _ofs.i8 = true;
            p.saveState(_ofs);
         }
         else
         {
            _ofs.i8 = false;
         }
         varIdx++;
      }

      // Variation scenes (v5+)
      _ofs.i8 = variation_scenes.numElements;
      Montage_VariationScene *vs;
      foreach vs in variation_scenes
      {
         vs.saveState(_ofs);
      }
      _ofs.i8 = edit_variation_scene; // v6+

      // Fix chunk size (v7+)
      int curOffset = _ofs.offset;
      _ofs.offset = patchDataSzOffset;
      _ofs.i32 = curOffset - patchDataSzOffset - 4;
      _ofs.offset = curOffset;
   }

   // <load.png>
   public method load(Stream _ifs) : boolean {
      if(b_debug_io) trace "xxx Montage_Patch::load: ifs.offset="+_ifs.offset;
      short ver = _ifs.u16;

      if(ver >= 1)
      {
         int chunkDataSz = -1;
         if(ver >= 7)
            chunkDataSz = _ifs.i32;

         int readStartOff = _ifs.offset;

         Utils.ReadString(_ifs, patch_name);
         // trace "xxx Montage:: read patch_name=\""+patch_name+"\"";

         patch_category = _ifs.u8;

         if(ver >= 3)
         {
            // Part layer mask (v3+)
            part_layer_mask = _ifs.u16;
         }

         if(ver >= 4)
         {
            // Part edit variations (v4+)
            int partIdx = 0;
            loop(16)
               edit_part_var_indices[partIdx++] = _ifs.u8;
         }
         else if(ver >= 2)
         {
            byte editVarIdx = _ifs.u8;
            edit_part_var_indices.allocAndFill(16, editVarIdx);
         }

         performances.alloc(16);
         performances.useAll();
         MontagePerformance *p;
         boolean bLoadOk = true;
         if(ver >= 2)
         {
            int varIdx = 0;
            loop(NUM_VARIATIONS)
            {
               boolean bUsed = _ifs.b8;
               if(bUsed)
               {
                  p <= getOrCreatePerformanceVariation(-1/*partIdxHint*/, varIdx);
                  bLoadOk = p.loadState(_ifs);
               }
               if(!bLoadOk)
                  break;
               varIdx++;
            }
         }
         else
         {
            // v1: main performance only
            p <= getOrCreatePerformanceVariation(-1/*partIdxHint*/, 0/*varIdx*/);
            bLoadOk = p.loadState(_ifs);
         }

         if(ver >= 5)
         {
            // Variation scenes (v5+)
            int numVarScenes = _ifs.u8;
            int varSceneIdx = 0;
            loop(numVarScenes)
            {
               Montage_VariationScene vs <= variation_scenes.get(varSceneIdx);
               boolean bVSOk = false;
               if(null != vs)
               {
                  bVSOk = vs.loadState(_ifs);
               }
               else
               {
                  // should not be reachable
                  vs <= new Montage_VariationScene;
                  vs.init(varSceneIdx);
                  bVSOk = vs.loadState(_ifs);
               }
               if(!bVSOk)
               {
                  trace "[---] Montage_Patch::load: failed to load variation scene "+(varSceneIdx+1)+"/"+numVarScenes;
                  return false;
               }
               varSceneIdx++;
            }
            if(ver >= 6)
            {
               edit_variation_scene = _ifs.u8;  // v6+
            }
         }

         if(ver >= 7)
         {
            int numRead = _ifs.offset - readStartOff;
            if(b_debug_io) trace "xxx Montage_Patch::load: numRead="+numRead+" chunkDataSz="+chunkDataSz;
            if(numRead != chunkDataSz)
               trace "[~~~] Montage_Patch::load: numRead != chunkDataSz ("+numRead+" != "+chunkDataSz+")";
         }

         updatePartMidiChFromLayerMask();

         return bLoadOk;
      }

      return false;
   }

}


// <class.png>
class MIDISynthProfileDataMontage : MIDISynthProfileData {

   define int NUM_BANKS = 16;  // A..O
   define int PROJECT_BANK_IDX = 15; // 'P'
   define int NUM_GLOBAL_PATCHES = 15*128;
   define int NUM_PATCHES = (NUM_BANKS * 128);  // 2048 patches, the last bank (1920..2047 / P001..P128) is project-specific.

   Montage_Patch *[] patches;  // Montage_Patch instances

   short current_patch_nr;
   short first_patch_nr;  // unused??
   short last_patch_nr;   // unused??

   int current_part_idx;  // 0..15

   boolean b_autosend;
   boolean b_send_diff;
   boolean b_allow_bulk;
   boolean b_proxy_reset;

   boolean b_recv_patch_names;
   boolean b_rec_ctls;

   boolean b_difflock;

   int opv_mute_mask;
   boolean b_solo_opv;  // force alg1
   boolean b_solo_part;  // force other part volume = 0

   int group_mask;  // see MontageDefs.GROUP_xxx

   IntArray replay_part_var_indices;

   define int SLIDER_MODE_VOLUME           =  0;
   define int SLIDER_MODE_ASSIGNABLE_KNOBS =  1;
   define int SLIDER_MODE_AK1_PARTS_1_8    =  2;
   define int SLIDER_MODE_AK2_PARTS_1_8    =  3;
   define int SLIDER_MODE_AK3_PARTS_1_8    =  4;
   define int SLIDER_MODE_AK4_PARTS_1_8    =  5;
   define int SLIDER_MODE_AK5_PARTS_1_8    =  6;
   define int SLIDER_MODE_AK6_PARTS_1_8    =  7;
   define int SLIDER_MODE_AK7_PARTS_1_8    =  8;
   define int SLIDER_MODE_AK8_PARTS_1_8    =  9;
   define int SLIDER_MODE_AK1_PARTS_9_16   = 10;
   define int SLIDER_MODE_AK2_PARTS_9_16   = 11;
   define int SLIDER_MODE_AK3_PARTS_9_16   = 12;
   define int SLIDER_MODE_AK4_PARTS_9_16   = 13;
   define int SLIDER_MODE_AK5_PARTS_9_16   = 14;
   define int SLIDER_MODE_AK6_PARTS_9_16   = 15;
   define int SLIDER_MODE_AK7_PARTS_9_16   = 16;
   define int SLIDER_MODE_AK8_PARTS_9_16   = 17;
   byte slider_mode;

   STX_MIDIOutDevice *out_dev;
   boolean ui_b_ctl_recorded;

   boolean b_part_var_key_select;  // true=select part/var by holding E-2/F-2 and pressing C-4..D#5
   boolean b_part_key_solo;        // true=allow solo part when selecting part twice via E-2+C-4..D#5
   boolean b_part_key_pressed;   // E-2
   boolean b_var_key_pressed;    // F-2
   boolean b_scene_key_pressed;  // F#2

   boolean b_load_select_variation_scene;  // true= immediately load variation scene when it is selected

   boolean b_redirect_ak_to_current_part;  // true=redirect assignable knobs to current part (1..16). false=use synth edit part (1..8)

   boolean b_part_label_shortnames;  // true=part buttons display short names  false=part buttons display part numbers

   define int FX_OFF = 0;
   define int FX_INS = 1;  // bit0: insert
   define int FX_MFX = 2;  // bit1: master
   define int FX_ALL = 3;
   byte fx_mode;  // 0=off, 1=insertfx, 2=var+rev+mfx, 3=insertfx + var+rev+mfx

   HashTable ht_insert_effect_presets;  // maps "<type>:<presetname>" to MontageInsert instance

   EditMIDISynthFormMontage *parent_synth_form;  // temporarily valid while editor is visible


   // <method_init.png>
   public virtual init(MIDISynthProfile _profile) {
      MIDISynthProfileData::init(_profile);

      patches.alloc(NUM_PATCHES);
      loop(NUM_PATCHES)
      {
         Montage_Patch patch <= new Montage_Patch;
         patch.init(midi_profile.edit_form, _profile);
         patches.add(#(deref patch));
      }

      current_patch_nr = 0;
      first_patch_nr = 0;
      // b_autosend = maybe;
      b_autosend = false; // xxxx

      b_recv_patch_names = true;
      b_rec_ctls = true;

      opv_mute_mask = 0;
      b_solo_opv = false;

      group_mask = MontageDefs.G_ALL;

      replay_part_var_indices.allocAndFill(16, 0);

      b_part_var_key_select = true;
      b_part_key_solo       = true;

      b_load_select_variation_scene = false;

      b_part_label_shortnames = true;

      fx_mode = FX_ALL;
      MMontagePerformance.SetFXMode(fx_mode);

      ht_insert_effect_presets.alloc(3079);
   }

   // <method_get.png>
   public virtual isMultiTimbral() : boolean {
      return true;
   }

   // <method.png>
   public method redirectToPartMIDICh() {
      forced_redirect_midi_ch = multi_midi_ch.get(current_part_idx);
   }

   // <method.png>
   public virtual transformSysExEditorKeyboardEvents(MIDIPipeFrame _frameRec) {
      if((null != out_dev) && (null != pagesysex_autodev))
      {
         Montage_Patch patch <= patches.get(current_patch_nr);
         MontagePerformance perf <= patch.getEditPerformance(current_part_idx);
         MontagePart *part;
         int inDevIdx = pagesysex_autodev.dev_idx;
         MontagePerformance replayPerf <= parent_synth_form.replay_perf;
         MIDIPipeFrame frRec; frRec.empty();
         MIDIPipeEvent pev;

         // if(_frameRec.numEventsNoteOn > 0)
         // {
         //    trace "xxx transformSysExEditorKeyboardEvents: b_part_var_key_select="+b_part_var_key_select;
         // }

         if(b_part_var_key_select)
         {
            boolean bPVKey = false;
            if(_frameRec.getNoteOnEventByFlt(pev, $1C/*E-2*/, inDevIdx, -1/*fltCh*/))
            {
               b_part_key_pressed = true;
               // trace "xxx press part_key";
               bPVKey = true;
            }
            if(_frameRec.getNoteOffEventByFlt(pev, $1C/*E-2*/, inDevIdx, -1/*fltCh*/))
            {
               b_part_key_pressed = false;
               // trace "xxx release part_key";
               bPVKey = true;
            }
            if(_frameRec.getNoteOnEventByFlt(pev, $1D/*F-2*/, inDevIdx, -1/*fltCh*/))
            {
               b_var_key_pressed = true;
               // trace "xxx press var_key";
               bPVKey = true;
            }
            if(_frameRec.getNoteOffEventByFlt(pev, $1D/*F-2*/, inDevIdx, -1/*fltCh*/))
            {
               b_var_key_pressed = false;
               // trace "xxx release var_key";
               bPVKey = true;
            }
            if(_frameRec.getNoteOnEventByFlt(pev, $1E/*F#2*/, inDevIdx, -1/*fltCh*/))
            {
               b_scene_key_pressed = true;
               // trace "xxx press scene_key";
               bPVKey = true;
            }
            if(_frameRec.getNoteOffEventByFlt(pev, $1E/*F#2*/, inDevIdx, -1/*fltCh*/))
            {
               b_scene_key_pressed = false;
               // trace "xxx release scene_key";
               bPVKey = true;
            }

            if(bPVKey)
            {
               _frameRec.deleteNoteOnsByFlt(inDevIdx, -1/*fltCh*/);
               _frameRec.deleteNoteOffsByFlt(inDevIdx, -1/*fltCh*/);
            }
            else if(b_part_key_pressed || b_var_key_pressed || b_scene_key_pressed)
            {
               _frameRec.deleteNoteOnsByFlt(inDevIdx, -1/*fltCh*/);
               // (note) NOTE_OFF is handled in UI thread (mmlHandleEventUI())
            }
         }

         byte akIdx;
         byte ccId;
         byte ch;
         byte v;

         // Record current part assignable knob values (rotary) changes to patch data
         //  (note) redirect _any_ part AK to current edit part
         if(b_redirect_ak_to_current_part)
         {
            akIdx = 0;
            loop(8)
            {
               v = _frameRec.getFilteredCC(inDevIdx, -1/*fltCh*/, 17+akIdx/*assignable knob value*/);
               if(v >= 0)
               {
                  _frameRec.deleteCCByFlt(inDevIdx, -1/*fltCh*/, 17+akIdx);
                  _frameRec.cc(true/*bSet*/, out_dev.dev_idx, current_part_idx, 17 + akIdx, v);

                  // Update part variation
                  if(null != perf)
                  {
                     part <= perf.getPartByIdx(current_part_idx);
                     if(null != part)
                     {
                        // inject synthesized assignable knob cc into next tick (seq recording)
                        frRec.cc(true/*bSet*/, out_dev.dev_idx, current_part_idx/*midiCh*/, 17 + akIdx, v);

                        if(b_rec_ctls)
                        {
                           part.setAssignableKnobValueByIdx(akIdx, v);
                           // trace "xxx AK: setAssignableKnobValueByIdx("+akIdx+", "+v+") editPartIdx="+current_part_idx;
                           ui_b_ctl_recorded = true;
                        }
                        else
                        {

                           replayPerf.invalidateReplay_PartAssignableKnobValue(current_part_idx, akIdx);
                        }
                     }
                  }
               }
               akIdx++;
            }
         }

         switch(slider_mode)
         {
            case SLIDER_MODE_ASSIGNABLE_KNOBS:
            {
               // Redirect Volume CC#7 ch 1..8 to current part assignable knob 1..8 CC#17..CC#24 and record to patch data
               ch = 0;

               loop(8)
               {
                  v = _frameRec.getFilteredCC(inDevIdx, ch/*fltCh*/, 7/*volume*/);
                  if(v >= 0)
                  {
                     _frameRec.deleteCCByFlt(inDevIdx, ch/*fltCh*/, 7/*volume*/);
                     _frameRec.cc(true/*bSet*/, out_dev.dev_idx, current_part_idx, 17 + ch, v);

                     // Update part variation
                     if(null != perf)
                     {
                        part <= perf.getPartByIdx(current_part_idx);
                        if(null != part)
                        {
                           // inject synthesized assignable knob cc into next tick (seq recording)
                           frRec.cc(true/*bSet*/, out_dev.dev_idx, current_part_idx/*midiCh*/, 17 + ch, v);

                           if(b_rec_ctls)
                           {
                              part.setAssignableKnobValueByIdx(ch, v);
                              // trace "xxx VOL: setAssignableKnobValueByIdx("+ch+", "+v+") editPartIdx="+current_part_idx;
                              ui_b_ctl_recorded = true;
                           }
                           else
                           {
                              replayPerf.invalidateReplay_PartAssignableKnobValue(current_part_idx, ch);
                           }
                        }
                     }
                  }
                  ch++;
               }
            }
            break;

            case SLIDER_MODE_AK1_PARTS_1_8:
            case SLIDER_MODE_AK2_PARTS_1_8:
            case SLIDER_MODE_AK3_PARTS_1_8:
            case SLIDER_MODE_AK4_PARTS_1_8:
            case SLIDER_MODE_AK5_PARTS_1_8:
            case SLIDER_MODE_AK6_PARTS_1_8:
            case SLIDER_MODE_AK7_PARTS_1_8:
            case SLIDER_MODE_AK8_PARTS_1_8:
            case SLIDER_MODE_AK1_PARTS_9_16:
            case SLIDER_MODE_AK2_PARTS_9_16:
            case SLIDER_MODE_AK3_PARTS_9_16:
            case SLIDER_MODE_AK4_PARTS_9_16:
            case SLIDER_MODE_AK5_PARTS_9_16:
            case SLIDER_MODE_AK6_PARTS_9_16:
            case SLIDER_MODE_AK7_PARTS_9_16:
            case SLIDER_MODE_AK8_PARTS_9_16:
               akIdx = (slider_mode - SLIDER_MODE_AK1_PARTS_1_8) & 7;
               int partIdx = 0;
               loop(8)
               {
                  v = _frameRec.getFilteredCC(inDevIdx, partIdx/*fltCh*/, 7/*volume*/);
                  if(v >= 0)
                  {
                     _frameRec.deleteCCByFlt(inDevIdx, partIdx/*fltCh*/, 7/*volume*/);
                     _frameRec.cc(true/*bSet*/, out_dev.dev_idx, partIdx, 17 + akIdx, v);

                     // Update part variation patch data
                     perf <= patch.getEditPerformance(partIdx);
                     if(null != perf)
                     {
                        part <= perf.getPartByIdx(partIdx);
                        if(null != part)
                        {
                           // inject synthesized assignable knob cc into next tick (seq recording)
                           frRec.cc(true/*bSet*/, out_dev.dev_idx, partIdx/*midiCh*/, 17 + akIdx, v);

                           if(b_rec_ctls)
                           {
                              // trace "xxx partIdx="+partIdx+" part.part_idx="+part.part_idx;
                              part.setAssignableKnobValueByIdx(akIdx, v);
                              // trace "xxx AK_parts: setAssignableKnobValueByIdx("+akIdx+", "+v+") partIdx="+partIdx;
                              ui_b_ctl_recorded = true;
                           }
                           else
                           {
                              replayPerf.invalidateReplay_PartAssignableKnobValue(partIdx, akIdx);
                           }
                        }
                     }
                  }
                  partIdx++;
               } // loop parts
               break;
         } // switch slider_mode

         // Redirect volume controls + assignable knobs to synth device so that PageSysEx won't redirect them to current edit part
         int numEventsCC = _frameRec.getNumEventsCCByFlt(inDevIdx, -1/*fltCh*/);
         // if(numEventsCC > 0)
         //    trace "xxx numEventsCC="+numEventsCC;
         int evIdx = 0;
         loop(numEventsCC)
         {
            if(_frameRec.getEventByIdxAndFlt(evIdx, pev, MIDIPIPE_EVENT_TYPE_CC, inDevIdx, -1/*fltCh*/))
            {
               ch   = pev.midiCh;
               v    = pev.ccValue;
               ccId = pev.ccId;

               perf <= patch.getEditPerformance(ch);
               if(null != perf)
                  part <= perf.getPartByIdx(ch);
               else
                  part <= null;

               if(7/*volume*/ == ccId)
               {
                  _frameRec.cc(true/*bSet*/, out_dev.dev_idx, ch, 7/*volume*/, v);

                  if(null != part)
                  {
                     frRec.cc(true/*bSet*/, out_dev.dev_idx, ch, 7/*volume*/, v);

                     if(b_rec_ctls)
                     {
                        part.setVolume(v);
                        ui_b_ctl_recorded = true;
                     }
                     else
                     {
                        // trace "xxx invalidateReplayVolume partIdx="+ch;
                        replayPerf.invalidateReplay_PartVolume(ch);
                     }
                  }
               }
               else if(17/*ak1*/ <= ccId <= 24/*ak8*/)
               {
                  // trace "xxx redirect ccId="+ccId+" ch="+ch+" v="+v;
                  _frameRec.cc(true/*bSet*/, out_dev.dev_idx, ch, ccId, v);

                  if(null != part)
                  {
                     frRec.cc(true/*bSet*/, out_dev.dev_idx, ch, ccId, v);

                     akIdx = ccId - 17/*ak1*/;

                     if(b_rec_ctls)
                     {
                        part.setAssignableKnobValueByIdx(akIdx, v);
                        ui_b_ctl_recorded = true;
                     }
                     else
                     {
                        replayPerf.invalidateReplay_PartAssignableKnobValue(ch/*partIdx*/, akIdx);
                     }
                  }
               }

            }
            evIdx++;
         }

         _frameRec.deleteCCByFlt(inDevIdx, -1/*fltCh*/, 7/*volume*/);
         ccId = 17/*ak1*/;
         loop(8)
            _frameRec.deleteCCByFlt(inDevIdx, -1/*fltCh*/, ccId++);

         // Inject into next tick frameRec (seq recording)
         replay.injectFrameRec(frRec);

      } // if out_dev
   }

   // <method_get.png>
   public =replay= method checkResetUICtlRecorded() : boolean {
      return = ui_b_ctl_recorded;
      ui_b_ctl_recorded = false;
      return;
   }

   // <method_set.png>
   public =replay= method setReplayPartVarIndices(IntArray _a) {
      replay_part_var_indices = _a;
   }

   // <method_set.png>
   public =replay= method setReplayPartVarIdx(local byte _partIdx, local byte _varIdx) {
      replay_part_var_indices[_partIdx] = _varIdx;
   }

   // <method_set.png>
   public =replay= method getReplayPartVarIdx(local byte _partIdx) : byte {
      return replay_part_var_indices.get(_partIdx);
   }

   // <method_get.png>
   public method getInsertEffectPreset(int _type, String _name) : MontageInsert {
      return ht_insert_effect_presets.get(_type+":"+_name);
   }

   // <method_get.png>
   public method getOrCreateInsertEffectPresetByKey(String _key) : MontageInsert {
      if(!ht_insert_effect_presets.exists(_key))
      {
         MontageInsert ins <= new MontageInsert();
         ins.init(0/*partIdx*/, 0/*insertType*/);
         ht_insert_effect_presets[_key] = deref ins;
      }
      return ht_insert_effect_presets.get(_key);
   }

   // <method_get.png>
   public method getOrCreateInsertEffectPreset(int _type, String _name) : MontageInsert {
      local String key <= _type+":"+_name;
      return getOrCreateInsertEffectPresetByKey(deref key);
   }

   // <method_remove.png>
   public method removeInsertEffectPresetByKey(String _key) : boolean {
      if(ht_insert_effect_presets.exists(_key))
      {
         ht_insert_effect_presets.delete(_key);
         return true;
      }
      return false;
   }

   // <save.png>
   public virtual saveMIDIProfileData(Stream _ofs) {
      // Version
      _ofs.i16 = 10;

      _ofs.i16 = current_patch_nr;
      _ofs.i16 = first_patch_nr;
      _ofs.i16 = last_patch_nr;
      _ofs.i8  = b_autosend;
      _ofs.i8  = b_send_diff;
      _ofs.i8  = b_proxy_reset;
      _ofs.i8  = b_recv_patch_names;
      _ofs.i8  = b_rec_ctls;
      _ofs.i8  = b_allow_bulk;
      _ofs.i8  = current_part_idx;
      _ofs.i32 = group_mask;   // v2+
      _ofs.i8  = slider_mode;  // v3+
      _ofs.i8  = b_part_var_key_select;  // v4+
      _ofs.i8  = b_part_key_solo;        // v5+
      _ofs.i8  = b_load_select_variation_scene;  // v6+
      _ofs.i8  = b_redirect_ak_to_current_part;  // v7+
      _ofs.i8  = b_part_label_shortnames;  // v10+
      _ofs.i8  = fx_mode;  // v9+

      // MIDISynthProfile id
      Utils.WriteString(_ofs, midi_profile.midi_profile_id);  // "yamaha_montage"

      int patchIdx = 0;
      loop(NUM_GLOBAL_PATCHES)
      {
         Montage_Patch p <= patches.get(patchIdx);
         p.save(_ofs);
         patchIdx++;
      }

      if(b_debug_io) trace "xxx MIDISynthProfileDataMontage::saveMIDIProfileData: global patch saving finished at ofs.offset="+_ofs.offset;

      // Insert Effect Presets (v8+)
      if(b_debug_io) trace "xxx MIDISynthProfileDataMontage::saveMIDIProfileData: numInsertPresets="+ht_insert_effect_presets.numElements;
      _ofs.i16 = ht_insert_effect_presets.numElements;
      String *key;
      foreach key in ht_insert_effect_presets
      {
         if(b_debug_io) trace "xxx MIDISynthProfileDataMontage::saveMIDIProfileData: insPreset.key ofs.offset="+_ofs.offset+" key=\""+key+"\"";
         Utils.WriteString(_ofs, key);
         MontageInsert insPreset <= ht_insert_effect_presets[key];
         if(b_debug_io) trace "xxx MIDISynthProfileDataMontage::saveMIDIProfileData: insPreset ofs.offset="+_ofs.offset;
         insPreset.saveState(_ofs);
      }

      if(b_debug_io) trace "xxx MIDISynthProfileDataMontage::saveMIDIProfileData: final ofs.offset="+_ofs.offset;
   }

   // <load.png>
   public virtual loadMIDIProfileData(Stream _ifs, boolean _bFromUI) : boolean {
      short ver = _ifs.u16;

      if(b_debug_io) trace "xxx Montage::loadMIDIProfileData: ifs.offset="+_ifs.offset;

      if(ver >= 1)
      {
         if(!_bFromUI)
         {
            current_patch_nr = _ifs.u16;
         }
         else
         {
            int skip0 = _ifs.u16;
         }

         first_patch_nr     = _ifs.u16;
         last_patch_nr      = _ifs.u16;
         b_autosend         = _ifs.s8;  // mixed
         b_send_diff        = _ifs.b8;
         b_proxy_reset      = _ifs.b8;
         b_recv_patch_names = _ifs.b8;
         b_rec_ctls         = _ifs.b8;
         b_allow_bulk       = _ifs.b8;
         current_part_idx   = _ifs.i8;
         if(ver >= 2)
         {
            group_mask = _ifs.i32;  // v2+
         }
         if(ver >= 3)
         {
            slider_mode = _ifs.u8;  // v3+
         }
         if(ver >= 4)
         {
            b_part_var_key_select = _ifs.b8;  // v4+
         }
         if(ver >= 5)
         {
            b_part_key_solo = _ifs.b8;    // v5+
         }
         if(ver >= 6)
         {
            b_load_select_variation_scene = _ifs.b8;  // v6+
         }
         if(ver >= 7)
         {
            b_redirect_ak_to_current_part = _ifs.b8;  // v7+
         }
         if(ver >= 10)
         {
            b_part_label_shortnames = _ifs.b8;  // v10+
         }
         if(ver >= 9)
         {
            fx_mode = _ifs.u8;  // v9+
            MMontagePerformance.SetFXMode(fx_mode);
         }

         // MIDISynthProfile id
         local String profileId;
         Utils.ReadString(_ifs, profileId);

         midi_profile <= MIDI.GetMIDISynthProfileById(profileId);
         if(null == midi_profile)
         {
            trace "[---] MIDISynthProfileDataMontage::loadMIDIProfileData: unknown synth profile \""+profileId+"\"";
            return false;
         }

         local Montage_Patch pDummy;
         pDummy.init(midi_profile.edit_form, midi_profile);

         int patchIdx = 0;
         loop(NUM_GLOBAL_PATCHES)
         {
            Montage_Patch p <= patches.get(patchIdx);
            if(!p.load(_ifs))
            {
               trace "[---] failed to load Montage_Patch "+patchIdx+" (profile_id="+midi_profile.midi_profile_id+")";
               p.loadInitPatch();
               return false;
            }
            patchIdx++;
         }

         if(b_debug_io) trace "xxx MIDISynthProfileDataMontage::loadMIDIProfileData: global patch loading finished at ifs.offset="+_ifs.offset;

         if(ver >= 8)
         {
            // Insert Effect Presets (v8+)
            ht_insert_effect_presets.alloc(3079);
            int numInsertPresets = _ifs.u16;
            if(b_debug_io) trace "xxx MIDISynthProfileDataMontage::loadMIDIProfileData: numInsertPresets="+numInsertPresets;
            loop(numInsertPresets)
            {
               if(b_debug_io) trace "xxx MIDISynthProfileDataMontage::loadMIDIProfileData: insPreset.key ifs.offset="+_ifs.offset;
               String key;
               Utils.ReadString(_ifs, key);
               if(b_debug_io) trace "xxx MIDISynthProfileDataMontage::loadMIDIProfileData:    => key=\""+key+"\"";
               MontageInsert insPreset <= getOrCreateInsertEffectPresetByKey(key);
               if(b_debug_io) trace "xxx MIDISynthProfileDataMontage::loadMIDIProfileData: insPreset ifs.offset="+_ifs.offset;
               insPreset.loadState(_ifs);
            }
         }

         if(b_debug_io) trace "xxx MIDISynthProfileDataMontage::loadMIDIProfileData: final ifs.offset="+_ifs.offset;

         return true;
      }

      return false;
   }

   // <save.png>
   public virtual saveProjectMIDIProfileData(Stream _ofs) {
      // Version
      _ofs.i16 = 1;

      _ofs.i16 = current_patch_nr;
      _ofs.i8 = forced_redirect_midi_ch;

      // MIDISynthProfile id
      Utils.WriteString(_ofs, midi_profile.midi_profile_id);

      int patchIdx = (PROJECT_BANK_IDX * 128);
      loop(128)
      {
         Montage_Patch p <= patches.get(patchIdx);
         p.save(_ofs);
         patchIdx++;
      }

   }

   // <load.png>
   public virtual loadProjectMIDIProfileData(Stream _ifs) : boolean {
      short ver = _ifs.u16;

      if(b_debug_io) trace "xxx Montage::loadProjectMIDIProfileData: ifs.offset="+_ifs.offset;

      if(ver >= 1)
      {
         current_patch_nr = _ifs.u16;
         forced_redirect_midi_ch = _ifs.s8;

         // MIDISynthProfile id
         local String profileId;
         Utils.ReadString(_ifs, profileId);

         Montage_Patch *p;
         int patchIdx = (PROJECT_BANK_IDX * 128);

         if(midi_profile.midi_profile_id == profileId)
         {
            loop(128)
            {
               p <= patches.get(patchIdx);
               if(!p.load(_ifs))
               {
                  trace "[~~] failed to load project-specific Montage_Patch "+patchIdx+" (profile_id="+midi_profile.midi_profile_id+"), loading init() instead.";
                  p.loadInitPatch();
                  return false;
               }
               patchIdx++;
            }

            return true;
         }
         else
         {
            trace "[---] Montage::loadProjectMIDIProfileData: midi_profile_id=\""+midi_profile.midi_profile_id+"\" mismatch, skipping..";
            loop(128)
            {
               p <= patches.get(patchIdx);
               p.loadInitPatch();
               patchIdx++;
            }
         }
      }

      return false;
   }
}


// <class.png>
class Montage_PartButton : Button {
   EditMIDISynthFormMontage *parent_synth_form;
   int part_idx;

   public virtual onMouseBeginDrag(MouseEvent _dragStart, MouseEvent _ev) : boolean {
      UI.ShowCursor(UIConstants.CURSOR_MOVE);
      return true;
   }

   public virtual onMouseDrag(MouseEvent _lastEv, MouseEvent _currentEv) : boolean {
      UI.RevertCursor();

      Layer dropTarget <= UI.FindLayerAtXY(_currentEv.mouse_abs_x, _currentEv.mouse_abs_y);

      if(dropTarget instanceof Montage_PartButton)
      {
         Montage_PartButton c <= dropTarget;

         // // Point2f p;
         // // c.calcAbsolutePosition(p);
         // // MouseEvent ev = _currentEv;
         // // ev.mouse_rel_x = ev.mouse_abs_x - p.x;
         // // ev.mouse_rel_y = ev.mouse_abs_y - p.y;

         UI.ShowCursor(UIConstants.CURSOR_MOVE);
      }
      else
         UI.ShowCursor(UIConstants.CURSOR_DENIED);

      return true;
   }

   public virtual onMouseEndDrag(MouseEvent _ev) {

      Layer dropTarget <= UI.FindLayerAtXY(_ev.mouse_abs_x, _ev.mouse_abs_y);

      // trace "xxx Montage_PartButton::onMouseEndDrag: dropTarget="+#(dropTarget);

      if(dropTarget instanceof Montage_PartButton)
      {
         Montage_PartButton c <= dropTarget;

         Point2f p;
         c.calcAbsolutePosition(p);
         MouseEvent ev = _ev;
         ev.mouse_rel_x = ev.mouse_abs_x - p.x;
         ev.mouse_rel_y = ev.mouse_abs_y - p.y;

         if(c.onDropObject(this, ev))
         {
         }
      }

      UI.RevertCursor();
   }

   public virtual canDropObject(Object _o, MouseEvent _ev) : boolean {
      if(_o instanceof Montage_PartButton)
         return true;
      return false;
   }

   public virtual onDropObject(Object _o, MouseEvent _ev) : boolean {
      // trace "xxx Montage_PartButton::onDropObject: this="+#(this)+" o="+#(_o);
      if(_o instanceof Montage_PartButton)
      {
         Montage_PartButton pbt <= _o;
         parent_synth_form.swapParts(part_idx, pbt.part_idx);
         parent_synth_form.selectPart(part_idx, false/*bAllowSolo*/, true/*bQuiet*/);
         return true;
      }
      return false;
   }

   public virtual onMouseClick(MouseEvent _ev) : boolean {
      if(_ev.isRightButton())
      {
         parent_synth_form.selectPart(part_idx, false/*bAllowSolo*/, true/*bQuiet*/);
         parent_synth_form.showPartContextMenu();
         return true;
      }
      return Button::onMouseClick(_ev);
   }

}


// <class.png>
class EditMIDISynthFormMontage : EditMIDISynthForm, ActionProvider, MIDIMapEventListener, MontageDefs {

   // used by swapVoicedOps*():
   define int PARAMSET_OP_OSC       = (1 << 0);
   define int PARAMSET_OP_FREQ      = (1 << 1);
   define int PARAMSET_OP_PEG       = (1 << 2);
   define int PARAMSET_OP_AEG_LEVEL = (1 << 3);
   define int PARAMSET_OP_AEG_TIME  = (1 << 4);
   define int PARAMSET_OP_LEVELSCL  = (1 << 5);
   define int PARAMSET_OP_SENSE     = (1 << 6);
   define int PARAMSET_OP_ALL       = 127;

   MIDISynthProfile *profile;

   MIDISynthProfileDataMontage *data;
   Montage_Patch *patch;

   STX_MIDIInDevice  *in_dev;
   STX_MIDIOutDevice *out_dev;
   byte midi_ch;

   Buffer *[] sysex_buffer_queue;  // Incoming sysex data

   Buffer param_sysex_buffer;
   Buffer patch_sysex_buffer;

   protected boolean b_patch_proxy_follow;
   protected boolean b_patch_proxy_lock;

   define int TAB_PATCH    = 0;
   define int TAB_PARTMIX  = 1;
   define int TAB_FMCOMMON = 2;
   define int TAB_FMMATRIX = 3;
   define int TAB_V1       = 4 + 0;
   define int TAB_V2       = 4 + 1;
   define int TAB_V3       = 4 + 2;
   define int TAB_V4       = 4 + 3;
   define int TAB_V5       = 4 + 4;
   define int TAB_V6       = 4 + 5;
   define int TAB_V7       = 4 + 6;
   define int TAB_V8       = 4 + 7;
   define int TAB_PARTLFO  = 12;
   define int TAB_PARTFX   = 13;
   define int TAB_PARTCTL  = 14;

   TabSwitch *ts_groups;

   protected PopupMenu *pm_part_contextmenu;
   CheckBox  *cb_part_name;
   Button *[] part_buttons;
   Button *[] partlayer_buttons;
   Label *[]  part_labels;

   ComboBox *cm_partmixer_var;
   Button *bt_partmixer_sync_level;
   Button *bt_partmixer_sync_ctl;
   Button *bt_partmixer_sync_peq;
   Button *bt_partmixer_sync_pfx;
   Button *bt_partmixer_sync_mseq;
   Button *bt_partmixer_sync_mfx;

   Button *bt_partmixer_name;
   Button *bt_partmixer_copy;
   Button *bt_partmixer_eq;
   Button *bt_partmixer_zone;
   Button *bt_partmixer_eg;
   Button *bt_partmixer_knob;
   Montage_PartForm *[] part_forms;
   int part_forms_mode;

   Button   *bt_partmixer_egmixer;
   Button   *bt_partmixer_soundmixer;
   ComboBox *cm_partmixer_star;

   CheckBox  *cb_patch_autosend;
   CheckBox  *cb_patch_diff;
   CheckBox  *cb_patch_bulk;

   CheckBox  *cb_patch_recv_names;
   CheckBox  *cb_patch_rec_ctls;
   // CheckBox  *cb_patch_part_midi;

   CheckBox *[] sf_checkboxes;

   // // CheckBox  *cb_patch_proxy_follow;
   CheckBox  *cb_patch_proxy_lock;
   CheckBox  *cb_patch_proxy_reset;

   Button     *bt_patch_project;
   ComboField *cf_patch_nr;
   ComboField *cf_part_var;
   Button     *bt_find_catnext;
   Button     *bt_find_catbrowse;
   protected  ComboBoxPopup *cmp_find_catbrowse;
   Button     *bt_find_catprev;
   TextField  *tf_find_name;
   ComboBox   *cm_find_category;
   ComboBox   *cm_patch_category;
   Button     *bt_star;

   Button    *bt_patch_tools;
   protected PopupMenu *pm_tools;
   Button    *bt_patch_copy;
   Button    *bt_patch_paste;
   Button    *bt_patch_init;
   Button    *bt_patch_swap;

   Button    *bt_patch_receive_edit;
   Button    *bt_patch_receive_edit_to_clipboard;
   Button    *bt_patch_send;

   define String TA_MIDISEND;
   protected TimerAction *ta_midisend;
   boolean b_queued_midi_send_patch;

   define String TA_MIDISEND_PARAM;
   protected TimerAction *ta_midisend_param;

   define String TA_FMMATRIX;
   protected TimerAction *ta_fmmatrix;

   define String TA_PARTFORMS;
   protected TimerAction *ta_partforms;

   define String TA_DIFF;
   protected TimerAction *ta_diff;
   protected boolean b_diff_sound;

   Montage_Patch *patch_clipboard;
   MontagePerformance *perf_recv;
   MontagePerformance *var_clipboard;
   Montage_Patch *part_clipboard;
   int part_clipboard_part_idx;
   MontagePart *pfx_clipboard;
   MontagePerformance *pctl_clipboard;

   MontagePartFMOperator    *voiced_op_clipboard;  // FM-X
   MontagePartNormalElement *element_clipboard;    // AWM2

   PointerArray param_widgets;     // ComboBox, FloatParam, or CheckBox refs (or null)
   IntArray     param_widget_alias_indices;  // used to look up aliases after parsing XFM
   PointerArray param_widget_aliases;  // MIDISynthProfileCtlAlias refs (or null)

   Montage_Patch      *replay_patch;  // to be synced with synth state
   MontagePerformance *soundmix_perf; // last soundmix result (restored before AEG scaling)
   MontagePerformance *replay_perf;   // as seen by synth
   boolean b_first_midi_send_patch;
   boolean b_force_send_all;

   // Montage_Patch *orig_replay_patch;   // patch state when entering editor

   protected boolean b_first_rebuild_patch_names;

   static SysExMultiPatchDialog *dlg_multipatch;

   protected boolean b_first_proxy_prgchg;

   protected ComboBox *cm_param_alg;  // "d_vcom_alg" ref

   FMMatrix *fm_matrix;  // <widget id=fm_matrix uiClass=FMMatrix/>

   Montage_FMForm *fm_common;

   Montage_ElementForm *[] element_forms;

   Montage_LFOForm *f_lfo;

   ComboBox *cm_ctl_var;
   Button   *bt_ctl_copy;
   Button   *bt_ctl_paste;
   Montage_CtlForm *[] ctl_forms;

   Button             *bt_pfx_copy;
   Button             *bt_pfx_paste;
   Button             *bt_pfx_swap;
   ComboBox           *cm_pfx_var;
   Montage_InsertForm *f_insert_a;
   Montage_InsertForm *f_insert_b;

   int last_perf_ms;
   Buffer last_perf;

   MontagePerformance *[] proxy_layer_diff_performances;
   int proxy_layer_diff_part_mask;
   boolean b_proxy_layer_diff_sound;

   StringArray midi_patch_names;      // all patch names (unfiltered short opt)
   StringArray midi_patch_names_cat;  // all patch names (unfiltered long opt)

   StringArray partmix_copy_names_short;
   StringArray partmix_copy_names_long;
   IntArray    partmix_copy_patch_indices;
   IntArray    partmix_copy_part_indices;
   IntArray    partmix_copy_variation_indices;

   ComboField  *cf_varscene;
   CheckBox    *cb_varscene_load;
   Button      *bt_varscene_load;
   Button      *bt_varscene_save;
   ComboBox *[] a_varscenes;

   ComboBox *cm_fx_mode;
   ComboBox *cm_forced_part_output;
   ComboBox *cm_slider_mode;
   CheckBox *cb_part_var_key;
   CheckBox *cb_part_key_solo;
   CheckBox *cb_redirect_ak;
   ComboBox *cm_model;

   public int  inject_frame_rec_dev_idx;
   public byte inject_frame_rec_midi_ch;


   // <method_init.png>
   public virtual init(MIDISynthProfile _profile) : boolean {

      trace "xxx EditMIDISynthFormMontage::init: ENTER";

      int tInit = milliSeconds();

      // Called from MIDISynthProfile::parse()
      EditMIDISynthForm::init(_profile);

      trace "xxx EditMIDISynthFormMontage::init: 2";

      profile <= _profile;

      // Read by NodeProxy when generating multimorph bank select
      proxy_multimorph_bank = MIDISynthProfileDataMontage.PROJECT_BANK_IDX/*15*/ + 1;
      num_programs_per_bank = 128;
      num_banks             = MIDISynthProfileDataMontage.NUM_BANKS;

      inject_frame_rec_dev_idx = -1;
      inject_frame_rec_midi_ch = -1;

      local String xfmSrc;
      if(xfmSrc.load("Montage.xfm", true/*bRemoveCR*/))
      {
         trace "xxx EditMIDISynthFormMontage::init: 3";
         createParamWidgets(xfmSrc);

         // // trace "xxx 3 xfmSrc.length="+xfmSrc.length+"  lastChar="+xfmSrc.getc(xfmSrc.length-1);
         // // xfmSrc.saveLocal("t.txt");
         trace "xxx EditMIDISynthFormMontage::init: 4";

         if(parseXMLForm(xfmSrc))
         {
            trace "xxx EditMIDISynthFormMontage::init: 5";
            if(autoResolveIds(this))
            {
               trace "xxx EditMIDISynthFormMontage::init: 6";
               fm_matrix.initFMMatrix(null/*fs1r*/, this);
               trace "xxx EditMIDISynthFormMontage::init: 7";

               fm_common.initFMForm(this);

               trace "xxx EditMIDISynthFormMontage::init: 8";

               int elementNr = 1;
               loop(8)
               {
                  Montage_ElementForm fElement <= findLayerById("f_element_"+elementNr);
                  fElement.initElementForm(this, elementNr-1);
                  element_forms.add(fElement);
                  elementNr++;
               }

               trace "xxx EditMIDISynthFormMontage::init: 9";

               f_lfo.initLFOForm(this);

               trace "xxx EditMIDISynthFormMontage::init: 10";

               int ctlNr = 1;
               loop(16)
               {
                  Montage_CtlForm fCtl <= findLayerById("f_ctl_"+ctlNr);
                  fCtl.initCtlForm(this, ctlNr - 1);
                  ctl_forms.add(fCtl);
                  ctlNr++;
               }

               f_insert_a.initInsertForm(this, false/*bInsertB*/);
               f_insert_b.initInsertForm(this, true/*bInsertB*/);

               int sfIdx = 0;
               loop(24)
               {
                  sf_checkboxes.add(findLayerById("cb_sf_"+sfIdx));
                  sfIdx++;
               }

               resolveParamWidgets();

               int partNr = 1;
               loop(16)
               {
                  Montage_PartButton btPart <= findLayerById("bt_part"+partNr);
                  btPart.setUserData(Object(btPart.getToolTipCaption()));
                  btPart.part_idx = partNr - 1;
                  btPart.parent_synth_form <= this;
                  part_buttons     .add(btPart);
                  partlayer_buttons.add(findLayerById("bt_partlayer"+partNr));
                  part_labels      .add(findLayerById("lb_part"+partNr));

                  Montage_PartForm fPart <= findLayerById("f_part_"+partNr);
                  fPart.init(this, partNr-1);
                  part_forms.add(fPart);

                  partNr++;
               }
               setPartFormsMode(0);

               initMMC();
               initTimers();

               patch_clipboard <= new Montage_Patch;
               patch_clipboard.init(this, profile);

               perf_recv <= new MontagePerformance;
               perf_recv.init();
               perf_recv.lazyInit();

               replay_patch <= new Montage_Patch;
               replay_patch.init(this, profile);

               replay_perf <= new MontagePerformance;
               replay_perf.init();
               replay_perf.lazyInit();
               replay_perf.invalidateReplay();  // (note) redundant, already invalidated..?

               soundmix_perf <= new MontagePerformance;
               soundmix_perf.init();
               soundmix_perf.lazyInit();

               // // orig_replay_patch <= new Montage_Patch;
               // // orig_replay_patch.init(this, profile);

               cm_patch_category.setOptions(Montage_Patch.category_names);
               StringArray fltCat; fltCat.join(["*"], Montage_Patch.category_names);
               cm_find_category.setOptions(fltCat);

               b_first_midi_send_patch = true;
               b_force_send_all        = true;
               b_first_rebuild_patch_names = true;

               dlg_multipatch <= new SysExMultiPatchDialog;
               if(!dlg_multipatch.init())
               {
                  trace "[---] failed to init SysExMultiPatchDialog";
                  return false;
               }

               b_first_proxy_prgchg = true;

               param_sysex_buffer.size = 10;  // single param updates
               patch_sysex_buffer.size = 1024;  // multi param updates

               bt_star.setInnerPadTop(1);

               int varScenePartNr = 1;
               loop(16)
               {
                  ComboBox cmVarScenePart <= findLayerById("cm_varscene_"+varScenePartNr);
                  a_varscenes.add(cmVarScenePart);
                  varScenePartNr++;
               }

               if(STConfig.b_debug_profile)
               {
                  tInit = milliSeconds() - tInit;
                  Global.Profile("EditMIDISynthFormMontage::init() took "+tInit+" milliseconds");
               }

               return true;
            }
         }
      }
      return false;
   }

   // <ui_timer.png>
   protected method initTimers() {
      ta_midisend       <= TimerAction.New(TA_MIDISEND,       this, 75);
      ta_midisend_param <= TimerAction.New(TA_MIDISEND_PARAM, this, 1);
      ta_fmmatrix       <= TimerAction.New(TA_FMMATRIX,       this, 100);
      ta_partforms      <= TimerAction.New(TA_PARTFORMS,      this, 200);
      ta_diff           <= TimerAction.New(TA_DIFF,           this, 1);
      ta_diff.setDefaultTicks(1/*def*/, 1/*short*/, 10/*medium*/, 2000/*long*/);
   }

   // <midi_mmc.png>
   protected method initMMC() {

      mmcInit("EditMIDISynthFormMontage");

      ////addBaseMMCTargets(this);
   }

   // <ui_init.png>
   protected method createParamWidgets(String _xfmSrc) {
      int curEditGroupIdx = -1;
      int curEditSubGroupIdx = -1;

      local String sAllGroups;
      local String sGroup;

      FloatParam *fp;
      CheckBox *cb;
      ComboBox *cm;
      boolean bTitledPanel = false;
      int numTitledPanelsPerRow = 0;

      MIDISynthProfileCtlAlias *alias;
      int aliasIdx = 0;
      foreach alias in profile.all_aliases
      {
         if( (-1 != alias.syx_off) || alias.b_ui_custom_widget )
         {
            if(alias.b_ui && (-1 == alias.syx_off_hi))
            {
               if(-1 != alias.editgroup_idx)
               {
                  if(alias.editgroup_idx != curEditGroupIdx)
                  {
                     // Close current group
                     if(-1 != curEditGroupIdx)
                     {
                        if(bTitledPanel)
                           sGroup.append("</TitledPanel></Panel>\n");
                        sGroup.append(
                           "            </Panel></Panel>\n"
                           "          </ScrollPane>\n"
                           "        </Panel></Panel>\n"
                           "      </View>\n"
                                      );
                     }
                     sAllGroups.append(sGroup);

                     // Start new group
                     curEditGroupIdx = alias.editgroup_idx;

                     sGroup =
                        "      <View caption=\""+profile.getEditGroupNameByIdx(curEditGroupIdx)+"\">\n"
                        "        <Panel align=expand><Panel align=expand padLeft=10>\n"
                        "          <ScrollPane id=sp_"+curEditGroupIdx+"\n"
                        "                      style=flat\n"
                        "                      dir=CENTER\n"
                        "                      align=expand\n"
                        "                      adaptiveViewSize=1\n"
                        "                      autoresolve=0\n"
                        "                      >\n"
                        "            <Panel><Panel dir=TOP align=expandx padding=16;2;0;21>\n"
                        "              <SizeGroupX id=sgx_lb_"+curEditGroupIdx+"/>\n"
                        "              <SizeGroupX id=sgx_ctl_"+curEditGroupIdx+"/>\n"
                        ;

                     curEditSubGroupIdx = -1;
                     bTitledPanel = false;
                     numTitledPanelsPerRow = 0;
                  }

                  if(alias.editsubgroup_idx != curEditSubGroupIdx)
                  {
                     if(bTitledPanel)
                        sGroup.append("</TitledPanel>\n");

                     curEditSubGroupIdx = alias.editsubgroup_idx;

                     if(4 == numTitledPanelsPerRow)
                     {
                        sGroup.append("</Panel>\n");
                        numTitledPanelsPerRow = 0;
                     }

                     if(0 == numTitledPanelsPerRow)
                        sGroup.append("<Panel dir=BOTTOM>\n");

                     numTitledPanelsPerRow++;

                     sGroup.append("<TitledPanel dir=RIGHT padLeft=10 caption=\""+profile.getEditSubGroupNameByIdx(curEditGroupIdx, curEditSubGroupIdx)+"\">\n");
                     bTitledPanel = true;
                  }


                  sGroup.append("<!-- "+alias.caption+" -->\n");
                  sGroup.append("<Panel dir=BOTTOM >\n");

                  String aliasCaption = alias.caption;

                  if(alias.b_ui_custom_widget)
                  {
                     // User-defined custom widget
                     sGroup.append("<"+alias.ui_class+" id="+alias.id+" autoresolve=1 dir=CENTER align=centerY />\n");
                     Global.Debug("Montage::createParamWidget: add custom XFM element id=\""+alias.id+"\" uiClass=\""+alias.ui_class+"\"");
                  }
                  else if(null != alias.edit_options_str)
                  {
                     // ComboBox
                     sGroup.append("<ComboBox id=param_"+aliasIdx+" autoresolve=0 dir=LEFT\n"
                                   "          align=centerY\n"
                                   "          options=\""+alias.edit_options_str+"\"\n"
                                   "          sizeGroup=sgx_ctl_"+curEditGroupIdx+"\n"
                                   );
                     if!(alias.info.isBlank())
                     {
                        sGroup.append("            toolTipCaption=\""+alias.info+"\"\n");
                     }
                     sGroup.append("          />\n");
                  }
                  else if((0 == alias.min) && (1 == alias.max))
                  {
                     // CheckBox
                     sGroup.append("<CheckBox id=param_"+aliasIdx+" autoresolve=0 dir=LEFT\n"
                                   "          caption=\"Enable\"\n"
                                   "          padLeft=0\n"
                                   "          align=centerY\n"
                                   "          sizeGroup=sgx_ctl_"+curEditGroupIdx+"\n"
                                   );
                     if!(alias.info.isBlank())
                     {
                        sGroup.append("            toolTipCaption=\""+alias.info+"\"\n");
                     }
                     sGroup.append("          />\n");
                  }
                  else
                  {
                     // FloatParam
                     sGroup.append("<FloatParam id=param_"+aliasIdx+" autoresolve=0 dir=LEFT\n");

                     if(aliasCaption >= " MSB")
                        aliasCaption.replace(" MSB", "");

                     switch(alias.cel_range)
                     {
                        default:
                           sGroup.append("            min="+(alias.min - alias.bias)+" max="+(alias.max - alias.bias)+"\n");
                           break;

                        case NT_CEL.RANGE_M128_P127:
                           sGroup.append("            min="+(alias.min-128)+" max="+(alias.max-128)+"\n");
                           break;

                        case NT_CEL.RANGE_M64_P63:
                           sGroup.append("            min="+(alias.min-64)+" max="+(alias.max-64)+"\n");
                           break;
                     }

                     sGroup.append("            precision=0 stepFine=1 stepCoarse=1 cols=3\n"
                                   "            textAlign=RIGHT\n"
                                   "            provideUnchanged=0\n"
                                   "            align=centerY\n"
                                   "            sizeGroup=sgx_ctl_"+curEditGroupIdx+"\n"
                                   );
                     if!(alias.info.isBlank())
                     {
                        sGroup.append("            toolTipCaption=\""+alias.info+"\"\n");
                     }
                     sGroup.append("            />\n");
                  }

                  if(!alias.b_ui_custom_widget)
                  {
                     sGroup.append("<Label dir=LEFT sizeGroup=sgx_lb_"+curEditGroupIdx+" caption=\""+aliasCaption+":\"\n");
                     sGroup.append("       textPlacement=RIGHT\n");
                     sGroup.append("       align=centerY\n");
                     sGroup.append("       fillBG=0\n");
                     sGroup.append("       />\n");

                     param_widget_alias_indices.add(aliasIdx);
                     param_widget_aliases.add(alias);
                  }

                  sGroup.append("</Panel>\n");


               }  // if editgroup_idx
            }
         }  // if alias.syx_off

         aliasIdx++;
      } // foreach alias

      // Close current group
      if(-1 != curEditGroupIdx)
      {
         if(bTitledPanel)
            sGroup.append("</TitledPanel></Panel>\n");

         sGroup.append(
            "            </Panel></Panel>\n"
            "          </ScrollPane>\n"
            "        </Panel></Panel>\n"
            "      </View>\n"
                       );
      }
      sAllGroups.append(sGroup);

      // trace "xxx sAllGroups=\n"+sAllGroups;

      _xfmSrc.replace("$(PARAM_WIDGETS)", sAllGroups);
   }

   // <ui_init.png>
   protected method resolveParamWidgets() {
      int aliasIdx;
      int idx = 0;
      foreach aliasIdx in param_widget_alias_indices
      {
         Layer l <= findLayerById("param_"+aliasIdx);
         param_widgets.add(l);

         MIDISynthProfileCtlAlias alias <= param_widget_aliases.get(idx);
         if("d_vcom_alg" == alias.id)
         {
            cm_param_alg <= l;
         }

         idx++;
      }

      // Update algorithm combobox
      local StringArray algOpt;
      int algNr = 1;
      loop(88)
      {
         algOpt.add(algNr+"\t"+alg_expr.get(algNr-1)+" ");
         algNr++;
      }
      if(null != cm_param_alg)
      {
         cm_param_alg.setOptions(algOpt);
         cm_param_alg.setFontByName(UIConstants.DEFAULT_FONT_NAME_FIXED_LARGE);
         cm_param_alg.setSizeGroup(null);
      }
   }

   // <midi.png>
   protected method sendParamUpdate_Montage(local MIDIPipeFrame _frOrNull,
                                            local MIDISynthProfileCtlAlias _alias,
                                            local int _value,
                                            local int _partIdx
                                            ) {
      // (todo) remove, not used by Montage editor
      local int partIdx = _partIdx; /////////data.current_part_idx;

      if(null == _frOrNull)
         Global.Debug2("sendParamUpdate_Montage: nr="+_alias.nr+" off="+_alias.syx_off+" value="+_value);

      // trace "xxx sendParamUpdate_Montage: partIdx="+_partIdx+" nr="+_alias.nr+" off="+_alias.syx_off+" value="+_value;

      // (todo) collect up to 16 param updates and bulk-send after timeout

      // if(500 <= _alias.nr < 1000)
      // {
      //    // Performance part
      //    local boolean bSend = true;

      //    if(!data.b_send_part_midi)
      //    {
      //       // Sending bank/prg params changes the synth patch and overwrites the edit buffer
      //       bSend = (_alias.syx_off < 0x01) || (_alias.syx_off > 0x04);
      //       bSend = bSend && (_alias.syx_off != 0x2d);
      //    }

      //    if(bSend)
      //    {
      //       fs1rEncodeParam3(param_sysex_buffer, _value, 0x30 + partIdx, 0x00, _alias.syx_off);
      //       if(null != _frOrNull)
      //          _frOrNull.sysex(true/*bset*/, out_dev.dev_idx, param_sysex_buffer);
      //       else
      //       {
      //          out_dev.addBuffer(param_sysex_buffer);
      //          out_dev.send(milliSeconds());
      //       }
      //    }
      // }

      // if(1000 <= _alias.nr < 2000)
      // {
      //    // Voice common
      //    fs1rEncodeParam3(param_sysex_buffer, _value, 0x40 + partIdx, 0x00, _alias.syx_off - 52);
      //    if(null != _frOrNull)
      //       _frOrNull.sysex(true/*bset*/, out_dev.dev_idx, param_sysex_buffer);
      //    else
      //    {
      //       out_dev.addBuffer(param_sysex_buffer);
      //       out_dev.send(milliSeconds());
      //    }
      // }
      // else if(2000 <= _alias.nr < 3600)
      // {
      //    // Voice op
      //    local int opIdx = (_alias.nr - 2000) / 200;
      //    fs1rEncodeParam3(param_sysex_buffer, _value, 0x60 + partIdx, opIdx, _alias.syx_off - 52 - 112 - (opIdx*(35+27)));
      //    if(null != _frOrNull)
      //       _frOrNull.sysex(true/*bset*/, out_dev.dev_idx, param_sysex_buffer);
      //    else
      //    {
      //       out_dev.addBuffer(param_sysex_buffer);
      //       out_dev.send(milliSeconds());
      //    }
      // }

      // // TKS.sleep(10);
   }

   // <midi.png>
   public =replay= method sendParamUpdate(MIDISynthProfileCtlAlias _alias, int _value) {

      if(1)
      {
         sendParamUpdate_Montage(null/*frOrNull*/, _alias, _value, data.current_part_idx);
      }
      else
      {
         // Called from UI thread after editing a parameter
         switch(_alias.type)
         {
            default:
               if(data.b_autosend)
               {
                  scheduleMIDISendPatch();
               }
               break;

            case MIDIMapDefs.TYPE_CC:
               out_dev.ctlChange(midi_ch, _alias.nr, _value);
               out_dev.send(milliSeconds());
               break;

            case MIDIMapDefs.TYPE_NRPN:
               out_dev.nrpn(midi_ch, _alias.nr, _value);
               out_dev.send(milliSeconds());
               break;
         }
      }
   }

   // <method_find.png>
   public method findParamWidgetByAliasId(String _id) : Layer {
      MIDISynthProfileCtlAlias *alias;
      int widgetIdx = 0;
      foreach alias in param_widget_aliases
      {
         if(alias.id == _id)
         {
            return param_widgets.get(widgetIdx);
         }
         widgetIdx++;
      }
      return null;
   }

   // <ui_handle.png>
   public =replay= method handleParamWidgetChanged(Layer _l, boolean _bUpdateFMMatrix, boolean _bQuiet) : boolean {
      // (todo) remove, not used by Montage editor
      int multiCurOpIdx;
      int multiNr;
      int ivalNew;
      int multiOpIdx;
      int multiWidgetIdx;

      int widgetIdx = param_widgets.indexOfPointer(_l, 0);
      // Buffer pd <= patch.patch_data;
      // Buffer pdReplay <= replay_patches[data.current_part_idx].patch_data;
      int ival;
      if(-1 != widgetIdx)
      {
         MIDISynthProfileCtlAlias alias <= param_widget_aliases.get(widgetIdx);
         // trace "xxx handleParamWidgetChanged: widgetIdx="+widgetIdx+" alias.caption=\""+alias.caption+"\" alias.syx_off="+alias.syx_off;
         if(_l instanceof CheckBox)
         {
            CheckBox cb <= _l;
            ival = cb.isSelected();

            if(!_bQuiet)
               Global.PrintFast("Param "+alias.id+" is "+Utils.GetEnableString(ival));

            if(VMOD_LALT == UI.GetKeyMod())
            {
               if(alias.nr >= 2000)
               {
                  multiCurOpIdx = (alias.nr - 2000) / 200;
                  multiNr = (((alias.nr - 2000) / 100)&1) ? 2100 : 2000;
                  multiNr += (alias.nr - 2000) % 100;
                  ivalNew = ival;
                  multiOpIdx = 0;
                  loop(8)
                  {
                     alias <= profile.getRPNAliasByNr(multiNr);
                     if(null != alias)
                     {
                        // // (todo)
                        // // if(alias.syx_bit_num > 0)
                        // // {
                        // //    ival =
                        // //       (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
                        // //       | (ivalNew << alias.syx_bit_off);
                        // // }
                        // // else
                        // //    ival = ivalNew;

                        // // // pd.pokeI8(alias.syx_off, ival & 127);
                        // // // pdReplay.pokeI8(alias.syx_off, ival & 127);

                        sendParamUpdate(alias, ival);

                        if(multiOpIdx != multiCurOpIdx)
                        {
                           multiWidgetIdx = param_widget_aliases.indexOfPointer(alias, 0);
                           if(-1 != multiWidgetIdx)
                           {
                              CheckBox cbMulti <= param_widgets.get(multiWidgetIdx);
                              updateParamWidgetFromPerformance(patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/), cbMulti, alias);
                           }
                        }
                     }
                     // Next op
                     multiNr += 200;
                     multiOpIdx++;
                  }
               }
            }
            else
            {
               // if(alias.syx_bit_num > 0)
               // {
               //    ival =
               //       (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
               //       | (ival << alias.syx_bit_off);
               // }
               // pd.pokeI8(alias.syx_off, ival);
               // pdReplay.pokeI8(alias.syx_off, ival);
               sendParamUpdate(alias, ival);
            }
         }
         else if(_l instanceof ComboBox)
         {
            ComboBox cm <= _l;
            ival = cm.getSelectedOption() + alias.min;
            ival = (ival + alias.bias) & 127;

            if(!_bQuiet)
               Global.PrintFast("Param "+alias.id+" is "+cm.getSelectedOptionName());

            if(VMOD_LALT == UI.GetKeyMod())
            {
               if(alias.nr >= 2000)
               {
                  multiCurOpIdx = (alias.nr - 2000) / 200;
                  multiNr = (((alias.nr - 2000) / 100)&1) ? 2100 : 2000;
                  multiNr += (alias.nr - 2000) % 100;
                  ivalNew = ival;
                  multiOpIdx = 0;
                  loop(8)
                  {
                     // // // alias <= profile.getAliasByDataNr(multiNr);
                     // // alias <= profile.getAliasByRPN(multiNr);
                     alias <= profile.getRPNAliasByNr(multiNr);
                     if(null != alias)
                     {
                        // if(alias.syx_bit_num > 0)
                        // {
                        //    ival =
                        //       (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
                        //       | (ivalNew << alias.syx_bit_off);
                        // }
                        // else
                        //    ival = ivalNew;
                        // pd.pokeI8(alias.syx_off, ival & 127);
                        // pdReplay.pokeI8(alias.syx_off, ival & 127);
                        sendParamUpdate(alias, ival);

                        if(multiOpIdx != multiCurOpIdx)
                        {
                           multiWidgetIdx = param_widget_aliases.indexOfPointer(alias, 0);
                           if(-1 != multiWidgetIdx)
                           {
                              ComboBox cmMulti <= param_widgets.get(multiWidgetIdx);
                              updateParamWidgetFromPerformance(patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/), cmMulti, alias);
                           }
                        }
                     }
                     // Next op
                     multiNr += 200;
                     multiOpIdx++;
                  }
               }
            }
            else
            {
               // if(alias.syx_bit_num > 0)
               // {
               //    ival =
               //       (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
               //       | (ival << alias.syx_bit_off);
               // }
               // pd.pokeI8(alias.syx_off, ival);
               // pdReplay.pokeI8(alias.syx_off, ival);
               sendParamUpdate(alias, ival);
            }
         }
         else if(_l instanceof FloatParam)
         {
            FloatParam fp <= _l;
            ival = fp.getFloatValue();

            if(!_bQuiet)
               Global.PrintFast("Param "+alias.id+" is "+ival);

            switch(alias.cel_range)
            {
               default:
                  // sGroup.append("            min="+alias.min+" max="+alias.max+"\n");
                  break;

               case NT_CEL.RANGE_M128_P127:
                  // sGroup.append("            min="+(alias.min-128)+" max="+(alias.max-128)+"\n");
                  ival += 128;
                  break;

               case NT_CEL.RANGE_M64_P63:
                  // sGroup.append("            min="+(alias.min-64)+" max="+(alias.max-64)+"\n");
                  ival += 64;
                  break;
            }

            int ivalMSB;
            int ivalLSB;
            if(alias.nr_lo > 0)
            {
               // Full 14bit range
               //  (todo) remove, not used by Montage
               ivalMSB = (ival >> 7);
               ivalLSB = (ival & 127);

               // (todo)
               // pd.pokeI8(alias.syx_off, ivalMSB);
               // pd.pokeI8(alias.syx_off_lo, ivalLSB);

               // pdReplay.pokeI8(alias.syx_off, ivalMSB);
               // pdReplay.pokeI8(alias.syx_off_lo, ivalLSB);

               sendParamUpdate(alias, ivalMSB);
               // trace "xxx alias nr="+alias.nr+" nr_lo="+alias.nr_lo+" alias.nr_lo_alias="+#(alias.nr_lo_alias);
               sendParamUpdate(alias.nr_lo_alias, ivalLSB);
            }
            else
            {
               ival = (ival + alias.bias) & 127;

               if(VMOD_LALT == UI.GetKeyMod())
               {
                  if(alias.nr >= 2000)
                  {
                     multiCurOpIdx = (alias.nr - 2000) / 200;
                     multiNr = (((alias.nr - 2000) / 100)&1) ? 2100 : 2000;
                     multiNr += (alias.nr - 2000) % 100;
                     ivalNew = ival;
                     multiOpIdx = 0;
                     loop(8)
                     {
                        // // // alias <= profile.getAliasByDataNr(multiNr);
                        // // alias <= profile.getAliasByRPN(multiNr);
                        alias <= profile.getRPNAliasByNr(multiNr);
                        if(null != alias)
                        {
                           // (todo)
                           // if(alias.syx_bit_num > 0)
                           // {
                           //    ival =
                           //       (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
                           //       | (ivalNew << alias.syx_bit_off);
                           // }
                           // else
                           //    ival = ivalNew;
                           // pd.pokeI8(alias.syx_off, ival & 127);
                           // pdReplay.pokeI8(alias.syx_off, ival & 127);
                           sendParamUpdate(alias, ival);

                           if(multiOpIdx != multiCurOpIdx)
                           {
                              multiWidgetIdx = param_widget_aliases.indexOfPointer(alias, 0);
                              if(-1 != multiWidgetIdx)
                              {
                                 FloatParam fpMulti <= param_widgets.get(multiWidgetIdx);
                                 updateParamWidgetFromPerformance(patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/), fpMulti, alias);
                              }
                           }
                        }
                        // Next op
                        multiNr += 200;
                        multiOpIdx++;
                     }
                  }
               }
               else
               {
                  // // (todo)
                  // // if(alias.syx_bit_num > 0)
                  // // {
                  // //    ival =
                  // //       (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
                  // //       | (ival << alias.syx_bit_off);
                  // // }
                  // // pd.pokeI8(alias.syx_off, ival & 127);
                  // // pdReplay.pokeI8(alias.syx_off, ival & 127);
                  sendParamUpdate(alias, ival);
               }
            }
         }

         if(_bUpdateFMMatrix)
            ta_fmmatrix.reschedule();

         return true;
      }
      return false;
   }

   // <ui_show.png>
   public =replay= virtual showDataStatic(MIDISynthProfileDataMontage _data,
                                          STX_MIDIInDevice  _inDev,
                                          STX_MIDIOutDevice _outDev,
                                          byte              _midiCh
                                          ) {
      // // boolean bFirst = (@(data) == @(null));

      data    <= _data;
      in_dev  <= _inDev;
      out_dev <= _outDev;
      data.out_dev <= _outDev;
      midi_ch  = _midiCh;

      // trace "xxx Montage::showDataStatic: in_dev="+#(in_dev);
      // trace "xxx Montage::showDataStatic: out_dev="+#(out_dev);

      patch <= _data.patches.get(_data.current_patch_nr);

      // trace "xxx showDataStatic: patch="+#(patch);
      // trace "xxx showDataStatic: patches="+#(_data.patches);

      if(null == patch)
      {
         // when migrating to new AlphaJuno editor and old editor state could not be loaded
         patch <= _data.patches.get(0);
         _data.current_patch_nr = 0;
      }

      copyToReplayPatch();
   }

   // <ui_show.png>
   public /*=replay=*/ virtual showData(MIDISynthProfileDataMontage _data,
                                        STX_MIDIInDevice  _inDev,
                                        STX_MIDIOutDevice _outDev,
                                        byte              _midiCh
                                        ) {

      // _= orig_replay_patch.performances.get(0).copyFrom(replay_perf);

      showDataStatic(_data, _inDev, _outDev, _midiCh);
      data.parent_synth_form <= this;

      if(true == data.b_autosend)  // maybe=not when editor is entered
      {
         scheduleMIDISendPatch();
      }

      updatePartButtons();
      updateGroupMask();

      fm_matrix.enter();
      fm_common.enter();

      data.b_part_key_pressed  = false;
      data.b_var_key_pressed   = false;
      data.b_scene_key_pressed = false;

      data.setMultiMIDICh(patch.multi_midi_ch);
      data.redirectToPartMIDICh();
      data.setReplayPartVarIndices(patch.edit_part_var_indices);

      StringArray midiNotes <= MIDI.midi_notes;
      cb_part_key_solo.setToolTipCaption("When checked, allow toggle-part-solo when selecting part twice via "+midiNotes.get(2*12+4/*E-2*/)+" + "+midiNotes.get(4*12/*C-4*/)+".."+midiNotes.get(5*12+3/*D#5*/));

      cb_part_var_key.setToolTipCaption("When checked, select part / variation by holding "+midiNotes.get(2*12+4/*E-2*/)+" / "+midiNotes.get(2*12+5/*F-2*/)+" key + pressing "+midiNotes.get(4*12/*C-4*/)+".."+midiNotes.get(5*12+3/*D#5*/)+"\n\n (note) "+midiNotes.get(3*12+4/*E-3*/)+" + "+midiNotes.get(3*12+11/*B-3*/)+" selects Assignable Knobs slider mode\n\n (note) "+midiNotes.get(2*12+5/*F-2*/)+" + "+midiNotes.get(3*12+11/*B-3*/)+" selects VOLUME slider mode\n\n (note) "+midiNotes.get(2*12+4/*E-2*/)+" + "+midiNotes.get(3*12/*C-3*/)+".."+midiNotes.get(3*12+7/*G-3*/)+" selects Assignable Knob 1..8 Parts 1..8 slider mode\n (note) "+midiNotes.get(2*12+5/*F-2*/)+" + "+midiNotes.get(3*12/*C-3*/)+".."+midiNotes.get(3*12+7/*G-3*/)+" selects Assignable Knob 1..8 Parts 9..16 slider mode\n\n (note) "+midiNotes.get(2*12+6/*F#2*/)+" + "+midiNotes.get(4*12/*C-4*/)+".."+midiNotes.get(6*12+7/*G-6*/)+" selects variation scene 1..32\n\n (note) proxy (layer) program change RPNs will be injected back into the NodeProxy automation port frameRec (seq recording)");

      cf_part_var.setToolTipCaption("Part variation\n\n (note) lctrl-lshift-c: copy variation\n (note) lctrl-lshift-v: paste variation\n\n (note) lshift-HOME: select next variation\n (note) lshift-END: select previous variation\n\n (note) hold LALT to switch variations on all parts\n\n (note) can be sequenced via NodeProxy RPN_PROXY_LAYER_[1..16]_PRGCHG\n\n (note) can be recorded into sequencer when changed via synth keyboard "+midiNotes.get(2*12+5/*F-2*/)+"+"+midiNotes.get(4*12/*C-4*/)+".."+midiNotes.get(5*12+3/*D#5*/)+" key combo");

      cf_varscene.setToolTipCaption("Current part variation scene\n\n (note) can be sequenced via NodeProxy RPN_PROXY_PROGRAMCHANGE\n\n (note) can be recorded into sequencer when changed via synth keyboard "+midiNotes.get(2*12+6/*F#2*/)+"+"+midiNotes.get(4*12/*C-4*/)+".."+midiNotes.get(6*12+7/*G-6*/)+" key combo");

      cm_fx_mode      .setSelectedOption(data.fx_mode);
      cm_slider_mode  .setSelectedOption(data.slider_mode);
      cb_part_var_key .setSelected(data.b_part_var_key_select);
      cb_part_key_solo.setSelected(data.b_part_key_solo);
      cb_redirect_ak  .setSelected(data.b_redirect_ak_to_current_part);
      cm_model        .setSelectedOption(STConfig.b_pagesysex_modx);

      cb_varscene_load.setSelected(data.b_load_select_variation_scene);

      updateUIFromPatch();

      if(null == in_dev)
      {
         Global.Error("Montage: input device not configured or found");
      }

      if(null == out_dev)
      {
         Global.Error("Montage: output device not configured or found");
      }
      else
      {
         // if(-1 == current_midi_patch_nr)
         // {
         //    if(b_patch_midi_follow)
         //    {
         //       midiSelectPatch(0);
         //    }
         // }
      }

      // // fp_prg_menu_multioff.setValue(data.multiedit_off + 1);
      // // fp_prg_menu_multinum.setValue(data.multiedit_num);
      // // cb_prg_menu_multiedit.setSelected(data.b_multiedit);
      // // handleMultiEditEnableChanged(true/*bQuiet*/); // update bgtint

   }

   // <method_set.png>
   public virtual setInjectFrameRecDevChHint(int _devIdx, byte _midiCh) {
      inject_frame_rec_dev_idx = _devIdx;
      inject_frame_rec_midi_ch = (_midiCh < 0) ? 0 : _midiCh & 15;
   }

   // <ui_show.png>
   public virtual enter() {
      // // b_queued_midi_send_patch = false;
      // // ta_updatemidi.schedule();
      MIDI.AddMIDIMapEventListener(this);
   }

   // <ui_show.png>
   public virtual leave() {
      b_queued_midi_send_patch = false;
      MIDI.RemoveMIDIMapEventListener(this);

      ta_midisend.cancel();
      ta_midisend_param.cancel();
      ta_fmmatrix.cancel();
      fm_matrix.leave();
      fm_common.leave();
      ta_diff.cancel();
   }

   // <ui_focus.png>
   public virtual refocusDefault() {
      UI.SetKeyboardFocus(ts_groups);
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {

      switch(ts_groups.getActiveTabIndex())
      {
         case TAB_PATCH:
            _retLayers.joinRR(_retLayers,
                              [
                                 ts_groups,

                                 bt_patch_project,
                                 cf_patch_nr,
                                 cf_part_var,
                                 cm_patch_category,
                                 cm_find_category,
                                 tf_find_name,
                                 bt_find_catprev,
                                 bt_find_catbrowse,
                                 bt_find_catnext,
                                 ]
                              );

            _retLayers.joinRR(_retLayers, part_buttons);

            _retLayers.joinRR(_retLayers,
                              [
                                 cb_patch_autosend,
                                 cb_patch_diff,
                                 cb_patch_bulk,

                                 cb_patch_recv_names,
                                 cb_patch_rec_ctls,
                                 // // cb_patch_part_midi,

                                 // // cb_patch_proxy_follow,
                                 cb_patch_proxy_lock,
                                 cb_patch_proxy_reset,

                                 bt_patch_send,
                                 bt_patch_receive_edit,
                                 bt_patch_receive_edit_to_clipboard,

                                 bt_patch_tools,

                                 bt_patch_copy,
                                 bt_patch_paste,
                                 bt_patch_swap,
                                 bt_patch_init,
                               ]
                              );
            _retLayers.joinRR(_retLayers, sf_checkboxes);
            _retLayers.joinRR(_retLayers,
                              [
                                 cf_varscene,
                                 cb_varscene_load,
                                 bt_varscene_load,
                                 bt_varscene_save
                               ]
                              );
            _retLayers.joinRR(_retLayers, a_varscenes);
            _retLayers.joinRR(_retLayers,
                              [
                                 cm_fx_mode,
                                 cm_forced_part_output,
                                 cm_slider_mode,
                                 cb_part_var_key,
                                 cb_part_key_solo,
                                 cb_redirect_ak,
                                 cm_model,
                               ]
                              );
            break;

         case TAB_PARTMIX:
            _retLayers.add(bt_partmixer_sync_level);
            _retLayers.add(bt_partmixer_sync_ctl);
            _retLayers.add(bt_partmixer_sync_peq);
            _retLayers.add(bt_partmixer_sync_pfx);
            _retLayers.add(bt_partmixer_sync_mseq);
            _retLayers.add(bt_partmixer_sync_mfx);
            _retLayers.add(cm_partmixer_var);
            _retLayers.add(bt_partmixer_name);
            _retLayers.add(bt_partmixer_copy);
            _retLayers.add(bt_partmixer_eq);
            _retLayers.add(bt_partmixer_zone);
            _retLayers.add(bt_partmixer_eg);
            _retLayers.add(bt_partmixer_knob);
            Montage_PartForm *fPart;
            foreach fPart in part_forms
               fPart.addTabCycleOverrides(_retLayers);
            _retLayers.add(bt_partmixer_egmixer);
            _retLayers.add(bt_partmixer_soundmixer);
            _retLayers.add(cm_partmixer_star);
            break;

         case TAB_FMCOMMON:
            fm_common.addTabCycleOverrides(_retLayers);
            break;

         case TAB_FMMATRIX:
            fm_matrix.addTabCycleOverrides(_retLayers);
            break;

         case TAB_PARTLFO:
            f_lfo.addTabCycleOverrides(_retLayers);
            break;

         case TAB_PARTFX:
            _retLayers.add(cm_pfx_var);
            _retLayers.add(bt_pfx_copy);
            _retLayers.add(bt_pfx_paste);
            _retLayers.add(bt_pfx_swap);
            f_insert_a.addTabCycleOverrides(_retLayers);
            f_insert_b.addTabCycleOverrides(_retLayers);
            break;

         case TAB_PARTCTL:
            _retLayers.add(cm_ctl_var);
            _retLayers.add(bt_ctl_copy);
            _retLayers.add(bt_ctl_paste);
            Montage_CtlForm *fCtl;
            foreach fCtl in ctl_forms
               fCtl.addTabCycleOverrides(_retLayers);
            break;
      }

   }

   // <method_get.png>
   public method getPartName(int _partIdx) : String {
      int editPartVarIdx = patch.getPartEditVarIdx(data.current_part_idx);
      MontagePerformance perf <= patch.getPerformanceVariation(editPartVarIdx);
      if(null != perf)
      {
         return perf.getPartName(_partIdx);
      }
      return "-";
   }

   // <method_get.png>
   public method getPartTypeName(int _partIdx) : String {
      int editPartVarIdx = patch.getPartEditVarIdx(data.current_part_idx);
      MontagePerformance perf <= patch.getPerformanceVariation(editPartVarIdx);
      if(null != perf)
      {
         return perf.getPartTypeName(_partIdx);
      }
      return "-";
   }

   // <method.png>
   protected method buildNameFiltersFromString(StringArray nameFilters, String _nameFilterOrNull) {
      String *fltStr;

      if(null != _nameFilterOrNull)
      {
         if(!_nameFilterOrNull.isBlank())
         {
            nameFilters = _nameFilterOrNull.splitChar(' ');

            foreach fltStr in nameFilters
            {
               fltStr.trim();
               fltStr.toLower();
            }
         }
         else
         {
            nameFilters.empty();
         }
      }
      else
      {
         nameFilters.empty();
      }
   }

   // <method.png>
   protected method matchNameFilters(Montage_Patch _patch, StringArray _nameFilters) {
      String *fltStr;
      boolean ret;

      if(0 != _nameFilters.numElements)
      {
         ret = false;

         // Try patch name
         foreach fltStr in _nameFilters
         {
            if(((_patch.patch_name).toLower()) & fltStr)
            {
               ret = true;
               break;
            }
         }
      }
      else
      {
         ret = true;
      }

      return ret;
   }

   // <method.png>
   protected method buildFilteredPatchNames(StringArray midiPatchNames,
                                            StringArray midiPatchNamesCat,
                                            IntArray    fltPatchIndices,
                                            int         _catFilter,
                                            String      _nameFilterOrNull
                                            ) {
      local String bankName;
      midiPatchNames.empty();
      midiPatchNamesCat.empty();
      if(null != fltPatchIndices)
         fltPatchIndices.empty();
      int bankIdx = 0;
      int patchIdx = 0;
      local String patchName;
      Montage_Patch *p;

      local StringArray nameFilters;
      buildNameFiltersFromString(nameFilters, _nameFilterOrNull);

      int fltCurPatchNr = -1;
      int fltPatchIdx = 0;

      loop(MIDISynthProfileDataMontage.NUM_BANKS)
      {
         bankName = tcchar('A'+bankIdx);
         Integer prgNr = 1;
         loop(128)
         {
            p <= data.patches.get(patchIdx);

            if( (-1 == _catFilter) || (_catFilter == p.patch_category) )
            {
               if(matchNameFilters(p, nameFilters))
               {
                  if(patchIdx == data.current_patch_nr)
                  {
                     fltCurPatchNr = fltPatchIdx;
                  }

                  if(null != fltPatchIndices)
                     fltPatchIndices.add(patchIdx);

                  patchName = bankName+prgNr.printf("%03d")+": "+p.patch_name;
                  // if(p.multi_mode == Montage_Patch.MULTI_MODE_CH1)
                  //    patchName.append(".");
                  // else if(p.multi_mode > Montage_Patch.MULTI_MODE_CH1)
                  //    patchName.append("*");
                  midiPatchNames.add(patchName);
                  if(0 != p.patch_category)
                  {
                     patchName.append("\t["+(Montage_Patch.category_names.get(p.patch_category))+"]");  // \t = start right align
                  }
                  midiPatchNamesCat.add(patchName);

                  fltPatchIdx++;
               }
            }

            prgNr++;
            patchIdx++;
         }

         bankIdx++;
      }

      return fltCurPatchNr;
   }

   // <method.png>
   protected method rebuildPatchNames() {

      b_first_rebuild_patch_names = false;

      midi_patch_names.empty();
      midi_patch_names_cat.empty();

      buildFilteredPatchNames(midi_patch_names, midi_patch_names_cat, null/*fltPatchIndices*/, -1, null/*nameFilterOrNull*/);

      cf_patch_nr.setOptions(midi_patch_names);
      cf_patch_nr.setOptionsLong(midi_patch_names_cat);
   }

   // <method_update.png>
   public method updatePartMixCopyOptions() {
      // used by Montage_PartForm
      partmix_copy_names_short.empty();
      partmix_copy_names_long.empty();
      partmix_copy_patch_indices.empty();
      partmix_copy_part_indices.empty();
      partmix_copy_variation_indices.empty();

      local String bankName;
      int bankIdx = 0;
      int patchIdx = 0;
      local String patchNamePrefix;
      Montage_Patch *p;

      byte minStarRating = cm_partmixer_star.getSelectedOption();

      loop(MIDISynthProfileDataMontage.NUM_BANKS)
      {
         bankName = tcchar('A'+bankIdx);
         Integer prgNr = 1;
         loop(128)
         {
            p <= data.patches.get(patchIdx);

            patchNamePrefix = bankName+prgNr.printf("%03d")+":";

            int partIdx = 0;
            loop(16)
            {
               int varIdx = 0;
               loop(16)
               {
                  MontagePerformance perf <= p.getPerformanceVariationOrNull(varIdx);
                  if(null != perf)
                  {
                     MontagePart part <= perf.getPartByIdx(partIdx);
                     if(null != part)
                     {
                        if(part.star_rating >= minStarRating)
                        {
                           String sFav = "";
                           sFav.appendRepeat("*", part.star_rating);
                           local String patchName <= p.patch_name.trim();
                           local String partName  <= part.getName().trim();
                           if(null != perf.getPartFMByIdx(partIdx))
                           {
                              partmix_copy_names_short.add(patchNamePrefix+(partIdx+1)+":"+((varIdx>0)?((varIdx+1)+":"):"")+patchName);
                              partmix_copy_names_long .add(patchNamePrefix+(partIdx+1)+":"+((varIdx>0)?((varIdx+1)+":"):"")+patchName+":"+partName+"\t"+sFav+"[FM-X]");
                              partmix_copy_patch_indices.add(patchIdx);
                              partmix_copy_part_indices.add(partIdx);
                              partmix_copy_variation_indices.add(varIdx);
                           }
                           else if(null != perf.getPartNormalByIdx(partIdx))
                           {
                              partmix_copy_names_short.add(patchNamePrefix+(partIdx+1)+":"+((varIdx>0)?((varIdx+1)+":"):"")+patchName);
                              partmix_copy_names_long .add(patchNamePrefix+(partIdx+1)+":"+((varIdx>0)?((varIdx+1)+":"):"")+patchName+":"+partName+"\t"+sFav+"[AWM2]");
                              partmix_copy_patch_indices.add(patchIdx);
                              partmix_copy_part_indices.add(partIdx);
                              partmix_copy_variation_indices.add(varIdx);
                           }
                           else if(null != perf.getPartDrumByIdx(partIdx))
                           {
                              partmix_copy_names_short.add(patchNamePrefix+(partIdx+1)+":"+((varIdx>0)?((varIdx+1)+":"):"")+patchName);
                              partmix_copy_names_long .add(patchNamePrefix+(partIdx+1)+":"+((varIdx>0)?((varIdx+1)+":"):"")+patchName+":"+partName+"\t"+sFav+"[DRUM]");
                              partmix_copy_patch_indices.add(patchIdx);
                              partmix_copy_part_indices.add(partIdx);
                              partmix_copy_variation_indices.add(varIdx);
                           }
                        }
                     }
                  }
                  varIdx++;
               }
               partIdx++;
            }

            prgNr++;
            patchIdx++;
         }
         bankIdx++;
      }
   }

   // <method_find.png>
   public method findCurrentPartMixCopyPatchIdx() : int {
      Montage_Patch *[] patches <= data.patches;
      int patchIdx = patches.indexOfPointer(patch, 0);
      int copyPatchIdx = partmix_copy_patch_indices.indexOf(patchIdx, 0);
      if(copyPatchIdx >= 0)
      {
         copyPatchIdx = partmix_copy_part_indices.indexOf(data.current_part_idx, copyPatchIdx);
         if(copyPatchIdx >= 0)
         {
            if(partmix_copy_patch_indices[copyPatchIdx] == patchIdx)
            {
               int editVarIdx = patch.edit_part_var_indices[data.current_part_idx];
               copyPatchIdx = partmix_copy_variation_indices.indexOf(editVarIdx, copyPatchIdx);
               if(copyPatchIdx >= 0)
               {
                  if(partmix_copy_patch_indices[copyPatchIdx] == patchIdx)
                  {
                     if(partmix_copy_part_indices[copyPatchIdx] == data.current_part_idx)
                     {
                        return copyPatchIdx;
                     }
                  }
               }
            }
         }
      }
      return -1;
   }

   // <ui_update.png>
   protected method updatePartVarOptions() {
      local StringArray opt;
      PointerArray ap <= patch.performances;
      int varIdx = 1;
      boolean bSingleVar = true;
      MontagePerformance *p;
      loop(16)
      {
         p <= ap.get(varIdx++);
         if(null != p)
            bSingleVar = bSingleVar && ("-" == p.getPartTypeName(data.current_part_idx));
      }

      varIdx = 0;
      loop(16)
      {
         p <= ap.get(varIdx);
         local String *sOpt;
         if(null != p)
         {
            sOpt <= (bSingleVar?"-":String(varIdx+1))+": "+p.getPartName(data.current_part_idx);
            // trace "xxx updatePartVarOptions: varIdx="+varIdx+" p.getPartName(data.current_part_idx)=\""+p.getPartName(data.current_part_idx)+"\"";
         }
         else
         {
            sOpt <= (varIdx+1)+": -";
         }
         opt.add(sOpt);

         varIdx++;
      }
      cf_part_var.setOptions(opt);
      cf_part_var.setSelectedOption(patch.getPartEditVarIdx(data.current_part_idx));
      cm_partmixer_var.setOptionsLong(cf_part_var.getOptions());
      cm_ctl_var.setOptionsLong(cf_part_var.getOptions());
      cm_pfx_var.setOptionsLong(cf_part_var.getOptions());

      updatePartButtonLabels();
   }

   // <ui_update.png>
   protected method updatePartButtonLabels() {
      int partIdx = 0;
      Font *font;

      if(data.b_part_label_shortnames)
      {
         font <= UI.GetFontByName(UIConstants.DEFAULT_FONT_NAME_LABEL);
      }
      else
      {
         font <= UI.GetFontByName("big9");
      }

      loop(16)
      {
         Button bt <= part_buttons[partIdx];
         bt.setFont(font);
         if(data.b_part_label_shortnames)
         {
            local String sPartName <= getPartName(partIdx);
            local StringArray a <= sPartName.splitCharset(" .,-_/;#~+()[]{}^=?!$§%&<>|");
            String *w1;
            String *w2;
            String *w3;
            if(a.numElements > 2)
            {
               w1 <= a[0];
               w2 <= a[1];
               w3 <= a[2];
               if(w3.numChars > 1)
               {
                  // "dark pad 1o2" => "dp12"
                  bt.setCaption(tcchar(w1.getc(0))+tcchar(w2.getc(0))+tcchar(w3.getc(0))+tcchar(w3.getc(w3.numChars-1)));
               }
               else
               {
                  // "dark pad 2" => "dap2"
                  bt.setCaption(w1.substring(0,2)+tcchar(w2.getc(0))+tcchar(w3.getc(0)));
               }
            }
            else if(a.numElements > 1)
            {
               w1 <= a[0];
               w2 <= a[1];
               if(w2.numChars > 1)
               {
                  // "some pad"   => "sopd"
                  // "deep bass5" => "deb5"
                  // "drum kit"   => "drkt"
                  // "hh 10"      => "hh10"
                  bt.setCaption(w1.substring(0,2)+tcchar(w2.getc(0))+tcchar(w2.getc(w2.numChars-1)));
               }
               else
               {
                  // "pad 3"  => "pad3"
                  // "bass 5" => "bas5"
                  bt.setCaption(w1.substring(0,3)+tcchar(w2.getc(0)));
               }
            }
            else if(a.numElements > 0)
            {
               // "keys2"  => "keys"
               // "guitar" => "guit"
               // "piano"  => "pian"
               // "bd 5b"  => "bd5b"
               w1 <= a[0];
               // // bt.setCaption(w1.substring(0,3)+tcchar(w1.getc(w2.numChars-1));
               bt.setCaption(w1.substring(0,4));
            }
            else
            {
               // no name, fall back to part number
               bt.setCaption(String(partIdx+1));
            }
         }
         else
         {
            // part number
            bt.setCaption(String(partIdx+1));
         }
         bt.redraw();

         partIdx++;
      }
   }

   // <ui_update.png>
   public method updateUIFromPatchEx(boolean _bPatchNames, boolean _bFMMatrix, boolean _bPartMixCopyOptions) {
      // trace "xxx updateUIFromPatchEx: bPatchNames="+_bPatchNames+" bFMMatrix="+_bFMMatrix;

      if(b_debug)
         Global.Debug2("Montage::updateUIFromPatch: patch_nr="+data.current_patch_nr+" patch="+#(patch));

      if(_bPatchNames)
         rebuildPatchNames();

      cb_part_name.setSelected(data.b_part_label_shortnames);

      cf_patch_nr       .setSelectedOption(data.current_patch_nr);
      cb_patch_autosend .setSelected(      data.b_autosend);
      cb_patch_diff     .setSelected(      data.b_send_diff);
      cb_patch_bulk     .setSelected(      data.b_allow_bulk);
      cm_patch_category .setSelectedOption(patch.patch_category);
      // // cb_patch_proxy_follow .setSelected (b_patch_proxy_follow);
      cb_patch_proxy_lock   .setSelected (b_patch_proxy_lock);
      cb_patch_proxy_reset  .setSelected (data.b_proxy_reset);

      cb_patch_recv_names.setSelected(data.b_recv_patch_names);
      cb_patch_rec_ctls  .setSelected(data.b_rec_ctls);
      // cb_patch_part_midi.setSelected(data.b_send_part_midi);

      updatePartVarOptions();
      cf_part_var.setSelectedOption(patch.getPartEditVarIdx(data.current_part_idx));
      cm_partmixer_var.setSelectedOption(patch.getPartEditVarIdx(data.current_part_idx));

      updateVarSceneOptions();
      cf_varscene.setSelectedOption(patch.edit_variation_scene);
      updateVarScenePartOptions();

      // Update params from patch data
      //  (todo) remove
      MIDISynthProfileCtlAlias *alias;
      int widgetIdx = 0;
      foreach alias in param_widget_aliases
      {
         Layer l <= param_widgets.get(widgetIdx);
         updateParamWidgetFromPerformance(patch.getEditPerformance(data.current_part_idx), l, alias);

         // Next param / widget
         widgetIdx++;
      }

      // if(_bFX)
      //    updateUIFX();

      if(_bFMMatrix)
         updateFMMatrix();

      updatePartButtons();

      if(_bPartMixCopyOptions)
         updatePartMixCopyOptions();

      if(TAB_PARTMIX == ts_groups.getActiveTabIndex())
         updatePartForms(false/*bMixCopyOptions*/);

      if(TAB_FMCOMMON == ts_groups.getActiveTabIndex())
         fm_common.showPartFMCommon();

      if(TAB_V1 <= ts_groups.getActiveTabIndex() <= TAB_V8)
      {
         Montage_ElementForm *fElement;
         foreach fElement in element_forms
            fElement.showElement();
      }

      if(TAB_PARTLFO == ts_groups.getActiveTabIndex())
         f_lfo.showPartLFO();

      if(TAB_PARTCTL == ts_groups.getActiveTabIndex())
         updatePartCtlForms();

      if(TAB_PARTFX == ts_groups.getActiveTabIndex())
         updatePartFXForms();

      MontagePart p <= getEditPart();
      if(null != p)
      {
         bt_star.setIcon(UI.GetIcon("star_rating_lvl_"+p.star_rating));
      }
      else
      {
         bt_star.setIcon(UI.GetIcon("star_rating_lvl_0"));
      }

      updatePageSysExMIDIChComboBox();

      redraw();
   }

   // <ui_update.png>
   public method updatePageSysExMIDIChComboBox() {
      PageSysEx pgSysEx <= root_form.getPageByIdx(RootForm.PAGE_SYSEX);
      ComboBox cmMidiCh <= pgSysEx.getMIDIChComboBox();
      cmMidiCh.setSelectedOption(data.current_part_idx + 1);

      local StringArray opt;
      opt.add("-");  // no forced midich (not a valid option in Montage editor)
      int partIdx = 0;
      loop(16)
      {
         MontagePart part <= getPartByIdx(partIdx);
         local String s <= (partIdx+1)+": ";
         if(null != part)
         {
            s.append(part.getName());

            MontagePartFM partFM <= getPartFMByIdx(partIdx);
            if(null != partFM)
            {
               s.append("\t[FM-X]");
            }
            else
            {
               MontagePartNormal partNormal <= getPartNormalByIdx(partIdx);
               if(null != partNormal)
               {
                     s.append("\t[AWM2]");
               }
               else
               {
                  MontagePartDrum partDrum <= getPartDrumByIdx(partIdx);
                  if(null != partDrum)
                  {
                     s.append("\t[Drum]");
                  }
                  else
                  {
                     s.append("\t[???]");
                  }
               }
            }

         }
         else
         {
            s.append("-");
         }
         opt.add(s);

         partIdx++;
      }

      cmMidiCh.setOptionsLong(opt);
   }

   // <ui_update.png>
   public method updateUIFromPatch() {
      updateUIFromPatchEx(true/*bPatchNames*/, true/*bFMMatrix*/, true/*bPartMixCopyOptions*/);
   }

   // <ui_update.png>
   public method updatePartCtlForms() {
      cm_ctl_var.setSelectedOption(patch.getPartEditVarIdx(data.current_part_idx));
      bt_ctl_paste.setEditable(null != pctl_clipboard);
      Montage_CtlForm *fCtl;
      foreach fCtl in ctl_forms
         fCtl.showPartCtl();
   }

   // <ui_update.png>
   public method updatePartFXForms() {
      cm_pfx_var.setSelectedOption(patch.getPartEditVarIdx(data.current_part_idx));
      bt_pfx_paste.setEditable(null != pfx_clipboard);
      f_insert_a.showInsert();
      f_insert_b.showInsert();
   }

   // <ui_update.png>
   protected method updateParamWidgetFromPerformance(MontagePerformance perf, Layer l, MIDISynthProfileCtlAlias alias) {
      int ival;

      if(l instanceof ComboBox)
      {
         ComboBox cm <= l;

         // (todo)
         // ival = pd.peekI8(alias.syx_off);

         if(alias.syx_bit_num > 0)
         {
            ival = (ival >> alias.syx_bit_off) & ((1 << alias.syx_bit_num)-1);
         }

         ival -= alias.min;

         if(alias.syx_off_lo <= 0)
            ival = (ival - alias.bias) & 127;

         cm.setSelectedOption(ival);
      }
      else if(l instanceof FloatParam)
      {
         FloatParam fp <= l;
         int ivalMSB;
         int ivalLSB;

         if(alias.syx_off_lo > 0)
         {
            // (todo)
            // ivalMSB = pd.peekI8(alias.syx_off);
            // ivalLSB = pd.peekI8(alias.nr_lo_alias.syx_off);

            // Full 14bit range
            ival = (ivalMSB << 7) | ivalLSB;
         }
         else
         {
            // (todo)
            // ival = pd.peekI8(alias.syx_off);

            if(alias.syx_bit_num > 0)
            {
               ival = (ival >> alias.syx_bit_off) & ((1 << alias.syx_bit_num)-1);
            }
         }

         if(alias.syx_off_lo <= 0)
            ival = (ival - alias.bias);  //  & 127

         switch(alias.cel_range)
         {
            default:
               break;

            case NT_CEL.RANGE_M128_P127:
               ival -= 128;
               break;

            case NT_CEL.RANGE_M64_P63:
               ival -= 64;
               break;
         }

         fp.setValue(ival);
      }
      else if(l instanceof CheckBox)
      {
         CheckBox cb <= l;

         // (todo)
         // ival = pd.peekI8(alias.syx_off);

         if(alias.syx_bit_num > 0)
         {
            ival = (ival >> alias.syx_bit_off) & ((1 << alias.syx_bit_num)-1);
         }

         cb.setSelected(ival > 0);
      }
   }

   // <ui_update.png>
   protected method updateUIAndPatchDataFromMIDIEvent(MIDIMapEvent ev) : boolean {
      MIDISynthProfileCtlAlias *alias;
      int widgetIdx = 0;
      int ival = ev.arg1;  // 7bit CC value or 14bit NRPN value
      foreach alias in param_widget_aliases
      {
         boolean bMatch = false;
         if(alias.type == ev.type)
         {
            if(MIDIMapEventType.TYPE_CC == ev.type)
            {
               if(alias.nr_lo > 0)
               {
                  if(alias.nr_lo == ev.ext_type)
                  {
                     // LSB changed
                     bMatch = true;
                     // pd.pokeI8(alias.syx_off_lo, ival);
                  }
                  else if(alias.nr == ev.ext_type)
                  {
                     // MSB or single byte param changed
                     bMatch = true;
                     // pd.pokeI8(alias.syx_off, ival);
                  }
               }
               else if(alias.nr == ev.ext_type)
               {
                  // Single byte param changed
                  bMatch = true;
                  // pd.pokeI8(alias.syx_off, ival);
               }
            }
            else if(MIDIMapEventType.TYPE_NRPN == ev.type)
            {
               if(alias.nr == ev.ext_type)
               {
                  if(alias.syx_off_lo > 0)
                  {
                     // Multi byte param changed (MSB+LSB)
                     // pd.pokeI8(alias.syx_off, ival >> 7);
                     // pd.pokeI8(alias.syx_off_lo, ival & 127);
                     bMatch = true;
                  }
                  else
                  {
                     // Single byte param changed
                     // pd.pokeI8(alias.syx_off, ival);
                     bMatch = true;
                  }
               }
            }
         }

         if(bMatch)
         {
            Layer l <= param_widgets.get(widgetIdx);
            // trace "xxx bMatch, widgetIdx="+widgetIdx+" l="+#(l);
            updateParamWidgetFromPerformance(patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/), l, alias);
            l.redraw();
            return true;
         }

         widgetIdx++;

      } // foreach alias
      return false;
   }

   // <ui_update.png>
   protected method updateGroupMask() {
      int bitIdx = 0;
      loop(24)
      {
         CheckBox cb <= sf_checkboxes.get(bitIdx);
         cb.setSelected( (data.group_mask & (1 << bitIdx)) );
         bitIdx++;
      }
   }

   // <ui_handle.png>
   protected method handleGroupMaskChanged(boolean _bToggleAll) {

      if(_bToggleAll)
      {
         if(MontageDefs.G_ALL == data.group_mask)
            data.group_mask = 0;
         else
            data.group_mask = MontageDefs.G_ALL;
         updateGroupMask();
      }

      int bitIdx = 0;
      int m = 0;
      local String s = "";
      loop(24)
      {
         CheckBox cb <= sf_checkboxes.get(bitIdx);
         if(cb.isSelected())
         {
            m |= (1 << bitIdx);
            s.insert(0, "x");
         }
         else
         {
            s.insert(0, "-");
         }
         bitIdx++;
      }
      data.group_mask = m;
      Global.Print("Group mask is "+s);
   }

   // <ui_update.png>
   protected method updatePartButtons() {
      int partIdx = 0;
      loop(16)
      {
         MontagePerformance perf <= patch.getEditPerformance(partIdx);

         Button bt      <= part_buttons[partIdx];
         Button btLayer <= partlayer_buttons[partIdx];
         Label  lb      <= part_labels[partIdx];

         if(partIdx == data.current_part_idx)
         {
            bt.setToggleState(true);
            if(data.b_solo_part)
               bt.setBackgroundTint(#b0ffff00);  // (todo) move color to AppLookAndFeel
            else
               bt.setBackgroundTint(#1800ff00);
         }
         else
         {
            bt.setToggleState(false);
            bt.setBackgroundTint(0);
         }

         bt.redraw();
         bt.setToolTipCaption(bt.getUserData() + "\n\nName: "+getPartName(partIdx));

         btLayer.setToggleState(0 != (patch.part_layer_mask & (1 << partIdx)));

         if(null != perf)
            lb.setCaption(perf.getPartTypeName(partIdx));
         else
            lb.setCaption("-");

         partIdx++;
      }
   }

   // <ui_update.png>
   protected method updatePartForms(boolean _bMixCopyOptions) {
      // int t = milliSeconds();
      int partIdx = 0;
      if(_bMixCopyOptions)
         updatePartMixCopyOptions();
      loop(16)
      {
         Montage_PartForm f <= part_forms[partIdx];
         f.showPart();
         partIdx++;
      }
      // t = milliSeconds() - t;
      // trace "xxx updatePartForms() took "+t+" milliseconds bMixCopyOptions="+_bMixCopyOptions;
   }

   // <ui_update.png>
   protected method setPartFormsMode(int _mode) {
      // 0=name, 1=copy preset, 2=eq, 3=zone, 4=eg, 5=assignable knobs
      _mode = mathClampi(_mode, 0, 5);
      part_forms_mode = _mode;
      Montage_PartForm *f;
      foreach f in part_forms
      {
         f.setMode(_mode);
      }
      int c32 = #10000000;

      switch(_mode)
      {
         case 0:  // Name
            bt_partmixer_eq  .setBackgroundTint(0);
            bt_partmixer_zone.setBackgroundTint(0);
            bt_partmixer_eg  .setBackgroundTint(0);
            bt_partmixer_knob.setBackgroundTint(0);
            bt_partmixer_copy.setBackgroundTint(0);
            bt_partmixer_name.setBackgroundTint(c32);
            break;

         case 1:  // Copy preset
            bt_partmixer_eq  .setBackgroundTint(0);
            bt_partmixer_zone.setBackgroundTint(0);
            bt_partmixer_eg  .setBackgroundTint(0);
            bt_partmixer_knob.setBackgroundTint(0);
            bt_partmixer_copy.setBackgroundTint(c32);
            bt_partmixer_name.setBackgroundTint(0);
            break;

         case 2:  // EQ 1-3
            bt_partmixer_eq  .setBackgroundTint(c32);
            bt_partmixer_zone.setBackgroundTint(0);
            bt_partmixer_eg  .setBackgroundTint(0);
            bt_partmixer_knob.setBackgroundTint(0);
            bt_partmixer_copy.setBackgroundTint(0);
            bt_partmixer_name.setBackgroundTint(0);
            break;

         case 3:  // Zone / Vel / PB / Poly
            bt_partmixer_eq  .setBackgroundTint(0);
            bt_partmixer_zone.setBackgroundTint(c32);
            bt_partmixer_eg  .setBackgroundTint(0);
            bt_partmixer_knob.setBackgroundTint(0);
            bt_partmixer_copy.setBackgroundTint(0);
            bt_partmixer_name.setBackgroundTint(0);
            break;

         case 4:  // AEG / FEG / Filter
            bt_partmixer_eq  .setBackgroundTint(0);
            bt_partmixer_zone.setBackgroundTint(0);
            bt_partmixer_eg  .setBackgroundTint(c32);
            bt_partmixer_knob.setBackgroundTint(0);
            bt_partmixer_copy.setBackgroundTint(0);
            bt_partmixer_name.setBackgroundTint(0);
            break;

         case 5:  // Assignable Knobs
            bt_partmixer_eq  .setBackgroundTint(0);
            bt_partmixer_zone.setBackgroundTint(0);
            bt_partmixer_eg  .setBackgroundTint(0);
            bt_partmixer_knob.setBackgroundTint(c32);
            bt_partmixer_copy.setBackgroundTint(0);
            bt_partmixer_name.setBackgroundTint(0);
            break;
      }

      bt_partmixer_eq  .redraw();
      bt_partmixer_zone.redraw();
      bt_partmixer_eg  .redraw();
      bt_partmixer_knob.redraw();
      bt_partmixer_copy.redraw();
      bt_partmixer_name.redraw();
   }

   // <ui_handle.png>
   public method selectPart(int _partIdx, boolean _bAllowSolo, boolean _bQuiet) {
      boolean bSoloChanged = false;
      if(_partIdx == data.current_part_idx)
      {
         if(_bAllowSolo)
         {
            data.b_solo_part = !data.b_solo_part;
            bSoloChanged = true;
            Button btPart <= part_buttons.get(_partIdx);
            btPart.setToggleState(true);
            btPart.redraw();
         }
      }
      else
      {
         data.current_part_idx = _partIdx;
         bSoloChanged = data.b_solo_part;

         // // Global.Debug2("Montage::selectPart: data.part_patch_nr="+#(data.part_patch_nr));
         // // cm_patch_nr.setSelectedOption(mathMaxi(0, data.part_patch_nr[_partIdx]));
         // // handlePatchNrChanged(false/*bMIDIFollow*/, false/*bAllowAutosend*/);
      }

      updateUIFromPatchEx(false/*bPatchNames*/, true/*bFMMatrix*/, false/*bPartMixCopyOptions*/);

      data.redirectToPartMIDICh();

      if(bSoloChanged)
      {
         scheduleMIDISendPatchWhenEnabled();
      }

      if(!_bQuiet)
         Global.Print("Select part "+(_partIdx+1)+(data.b_solo_part?" (solo)":"")+" \""+(getPartName(_partIdx).trim())+"\"");
   }

   // <ui_handle.png>
   public virtual handlePageSysExMIDIChChanged(ComboBox _cmMidiCh) : boolean {
      byte partIdx = _cmMidiCh.getSelectedOption() - 1;
      if(partIdx >= 0)  // skip "-"
      {
         selectPart(partIdx, false/*bAllowSolo*/, false/*bQuiet*/);
      }
      return true;
   }

   // <ui_handle.png>
   protected method selectPartDelta(int _delta) {
      selectPart(mathWrapi(data.current_part_idx + _delta, 0, 4), false/*bAllowSolo*/, false/*bQuiet*/);
   }

   // <ui_handle.png>
   protected method handlePartLayerChanged(int _partIdx) {
      Button bt <= partlayer_buttons.get(_partIdx);
      boolean bLayer = bt.getToggleState();
      if(bLayer)
         patch.part_layer_mask = (patch.part_layer_mask | (1 << _partIdx));
      else
         patch.part_layer_mask = (patch.part_layer_mask & ~(1 << _partIdx));
      patch.updatePartMidiChFromLayerMask();
      data.setMultiMIDICh(patch.multi_midi_ch);
      data.redirectToPartMIDICh();
      Global.Print("Part "+(_partIdx+1)+" layer is "+Utils.GetEnableString(bLayer));
   }

   // <ui_handle.png>
   protected method handlePatchAutosendChanged() {
      data.b_autosend = cb_patch_autosend.isSelected();
      Global.PrintFast("Autosend is "+((maybe == data.b_autosend) ? " enabled (when patch is selected)" : Utils.GetEnableString(data.b_autosend)));

      clearMIDICache();

      if(true == data.b_autosend)
      {
         scheduleMIDISendPatch();
      }
   }

   // <ui_handle.png>
   protected method handlePatchDiffChanged() {
      data.b_send_diff = cb_patch_diff.isSelected();
      Global.Print("Send "+(data.b_send_diff ? "patch differences" : "entire patch"));

      clearMIDICache();

      if(false == data.b_send_diff)
      {
         scheduleMIDISendPatch();
      }
   }

   // <ui_handle.png>
   protected method handlePatchBulkChanged() {
      data.b_allow_bulk = cb_patch_bulk.isSelected();
      Global.Print((data.b_allow_bulk ? "Auto-send" : "Never send")+" entire performance");
   }

   // <ui_handle.png>
   protected method handleGoToNextBank() {
      cf_patch_nr.setSelectedOption(  (((data.current_patch_nr/128)+1)%MIDISynthProfileDataMontage.NUM_BANKS)*128 );
      if(replay.b_playing)
         b_force_send_all = true;
      handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
   }

   // <ui_handle.png>
   protected method handleGoToFirstProjectPatch() {
      cf_patch_nr.setSelectedOption(MIDISynthProfileDataMontage.PROJECT_BANK_IDX*128);
      if(replay.b_playing)
         b_force_send_all = true;
      handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
      Global.Print("Select first project-specific patch (P001)");
   }

   // <ui_handle.png>
   public method selectNextPatch() {
      cf_patch_nr.setSelectedOption(mathWrapi(data.current_patch_nr+1, 0, MIDISynthProfileDataMontage.NUM_PATCHES));
      if(replay.b_playing)
         b_force_send_all = true;
      handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
   }

   // <ui_handle.png>
   public method selectPreviousPatch() {
      cf_patch_nr.setSelectedOption(mathWrapi(data.current_patch_nr-1, 0, MIDISynthProfileDataMontage.NUM_PATCHES));
      if(replay.b_playing)
         b_force_send_all = true;
      handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
   }

   // <ui_handle.png>
   public method selectNextVariation() {
      cf_part_var.selectNextOptionAction();
   }

   // <ui_handle.png>
   public method selectPreviousVariation() {
      cf_part_var.selectPreviousOptionAction();
   }

   // <ui_handle.png>
   public method selectVariationEx(int _varIdx, boolean _bAllParts, boolean _bWhenAvailable) : boolean {

      boolean bAvailable = true;
      MontagePerformance perf <= patch.getPerformanceVariationOrNull(_varIdx);
      if(null == perf)
         bAvailable = false;
      else if(!perf.b_init)
         bAvailable = false;
      else
      {
         MontagePart p <= perf.getPartByIdx(data.current_part_idx);
         if(null == p)
            bAvailable = false;
      }

      if(_bWhenAvailable)
      {
         // (note) when called via synth key sequence
         if(!bAvailable)
            return false;
      }

      cf_part_var.setSelectedOption(_varIdx);
      cm_ctl_var.setSelectedOption(_varIdx);
      cm_pfx_var.setSelectedOption(_varIdx);
      handlePartVarChanged(_bAllParts);
      return true;
   }

   // <ui_handle.png>
   public method selectVariation(int _varIdx, boolean _bAllParts) : boolean {
      return selectVariationEx(_varIdx, _bAllParts, false/*bWhenAvailable*/);
   }

   // // <method_get.png>
   // public method getPerformanceByPatchIdx(byte _patchIdx) : MontagePerformance {
   //    Montage_Patch p <= data.patches.get(_patchIdx);
   //    if(null != p)
   //       return p.performance;
   //    return null;
   // }

   // <ui_handle.png>
   protected =replay= method handlePatchNrChanged_replay(boolean _bMIDIFollow, boolean _bAllowAutosend) {

      int lastPatchNr = data.current_patch_nr;

      data.current_patch_nr = cf_patch_nr.getSelectedOption();
      // // data.part_patch_nr.set(data.current_part_idx, data.current_patch_nr);
      patch <= data.patches.get(data.current_patch_nr);

      copyToReplayPatch();

      proxy_bank    = data.current_patch_nr / 128;
      proxy_program = data.current_patch_nr & 127;

      data.setMultiMIDICh(patch.multi_midi_ch);
      data.redirectToPartMIDICh();
      data.setReplayPartVarIndices(patch.edit_part_var_indices);

      if(_bAllowAutosend)
      {
         local MontagePerformance *[] performances;
         getReplayPerformances(performances);
         MontagePerformance.InvalidateReplayForUnusedParts(performances,
                                                           replay_perf
                                                           );
         scheduleMIDISendPatchWhenEnabled();
      }

   }

   // <ui_handle.png>
   module method handlePatchNrChanged(boolean _bMIDIFollow, boolean _bAllowAutosend) {
      handlePatchNrChanged_replay(_bMIDIFollow, _bAllowAutosend);
      updateUIFromPatchEx(false/*bPatchNames*/, true/*bFMMatrix*/, true/*bPartMixCopyOptions*/);
      printCurrentPatchNrInfo(data.current_patch_nr, patch.patch_name);
   }

   // <method.png>
   public virtual handlePostReload() {

      clearMIDICache();

      if(data.b_autosend)
      {
         // trace "xxx reload: call handlePatchNrChanged()";
         handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
      }

   }

   // <ui_handle.png>
   protected method handlePatchNameChanged() {

      // Sanitize ComboField text / option name
      local String sOpt <= cf_patch_nr.getSelectedOptionName();
      local String s;
      int idx = sOpt.indexOf(":", 0);
      boolean bFind = true;
      if( (idx < 0) || (idx > 0) )
      {
         // "my patch" or "A001: my patch"
         sOpt.substring(idx+1, 99) => s;
         s.trim();
         if(!s.isBlank())
         {
            patch.setPatchName(s);
            copyToReplayPatch();
            rebuildPatchNames();
            Global.Print("Patch name is \""+patch.patch_name+"\"");
            bFind = false;
            scheduleMIDISendPatchWhenEnabled();  // send new performance name
         }
      }

      if(bFind)
      {
         // Select patch by case-insensitive substring, e.g. "A001" or "glass"
         if(0 == idx)
            sOpt.substring(1, 99);  // ":my patch" (find)
         sOpt.toLower();
         sOpt.trim();
         int patchIdx = Utils.FindOptionIdxByFilterWords(midi_patch_names_cat, sOpt.splitSpace(true));
         // trace "xxx find sOpt=\""+sOpt+"\" => patchIdx="+patchIdx;
         if(-1 != patchIdx)
         {
            cf_patch_nr.setSelectedOptionAction(patchIdx);
         }
         else
         {
            // Restore current patch name
            rebuildPatchNames();
         }
      }
   }

   // <ui_handle.png>
   protected method handlePartVarChanged(boolean _bAllParts) {

      int varIdx = cf_part_var.getSelectedOption();

      boolean bAvailable;
      MontagePerformance *perf;
      MontagePart *p;

      MIDIPipeFrame frRec; frRec.empty();

      if(_bAllParts)
      {
         int partIdx = 0;
         loop(16)
         {
            patch.setPartEditVarIdx(partIdx, varIdx);

            if(-1 != inject_frame_rec_dev_idx)
            {
               bAvailable = true;
               perf <= patch.getPerformanceVariationOrNull(varIdx);
               if(null == perf)
                  bAvailable = false;
               else if(!perf.b_init)
                  bAvailable = false;
               else
               {
                  p <= perf.getPartByIdx(partIdx);
                  if(null == p)
                     bAvailable = false;
               }

               if(bAvailable)
               {
                  frRec.rpn(true/*bSet*/,
                            inject_frame_rec_dev_idx,
                            inject_frame_rec_midi_ch,
                            /*NodeProxy*/Node.RPN_PROXY_LAYER_1_PRGCHG + partIdx,
                            1 + varIdx
                            );
               }
            }

            partIdx++;
         }
      }
      else
      {
         patch.setPartEditVarIdx(data.current_part_idx, varIdx);

         if(-1 != inject_frame_rec_dev_idx)
         {
            bAvailable = true;
            perf <= patch.getPerformanceVariationOrNull(varIdx);
            if(null == perf)
               bAvailable = false;
            else if(!perf.b_init)
               bAvailable = false;
            else
            {
               p <= perf.getPartByIdx(data.current_part_idx);
               if(null == p)
                  bAvailable = false;
            }

            if(bAvailable)
            {
               frRec.rpn(true/*bSet*/,
                         inject_frame_rec_dev_idx,
                         inject_frame_rec_midi_ch,
                         /*NodeProxy*/Node.RPN_PROXY_LAYER_1_PRGCHG + data.current_part_idx,
                         1 + varIdx
                         );
            }
         }
      }

      replay.injectFrameRec(frRec);

      data.setReplayPartVarIndices(patch.edit_part_var_indices);

      // Sanitize ComboField text / option name
      int editPartVarIdx = patch.getPartEditVarIdx(data.current_part_idx);
      perf <= patch.performances.get(editPartVarIdx);
      if(null != perf)
      {
         local String s <= cf_part_var.getSelectedOptionName();
         int idx = s.indexOf(":", 0);
         if(-1 != idx)
            s.substring(idx+1, 99);
         s.trim();
         perf.setPartName(data.current_part_idx, s);
         cf_part_var.setSelectedOptionName(editPartVarIdx+": "+s);
      }

      handlePatchNrChanged(false/*bMIDIFollow*/, true/*bAllowAutosend*/);

      Global.Print( (_bAllParts?"All parts":"Part")+" variation is \""+cf_part_var.getSelectedOptionName()+"\" ("+getPartTypeName(data.current_part_idx)+")");
   }

   // <ui_handle.png>
   protected method handleSyncLevel(boolean _bAllParts) {
      if(_bAllParts)
      {
         int partIdx = 0;
         loop(16)
         {
            patch.syncFromMainVariation(partIdx,
                                        true/*bLevel*/,
                                        false/*bCtl*/,
                                        false/*bPEQ*/,
                                        false/*bPFX*/,
                                        false/*bPMSEQ*/,
                                        false/*bMFX*/
                                        );
            partIdx++;
         }
         Global.Print("Sync Levels from Main variations (all parts)");
      }
      else
      {
         patch.syncFromMainVariation(data.current_part_idx,
                                     true/*bLevel*/,
                                     false/*bCtl*/,
                                     false/*bPEQ*/,
                                     false/*bPFX*/,
                                     false/*bPMSEQ*/,
                                     false/*bMFX*/
                                     );
         Global.Print("Sync Levels from current part Main variation");
      }
      copyToReplayPatch();
      updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
      scheduleMIDISendPatchWhenEnabled();
   }

   // <ui_handle.png>
   protected method handleSyncCtl(boolean _bAllParts) {
      if(_bAllParts)
      {
         int partIdx = 0;
         loop(16)
         {
            patch.syncFromMainVariation(partIdx,
                                        false/*bLevel*/,
                                        true/*bCtl*/,
                                        false/*bPEQ*/,
                                        false/*bPFX*/,
                                        false/*bPMSEQ*/,
                                        false/*bMFX*/
                                        );
            partIdx++;
         }
         Global.Print("Sync CTLs from Main variations (all parts)");
      }
      else
      {
         patch.syncFromMainVariation(data.current_part_idx,
                                     false/*bLevel*/,
                                     true/*bCtl*/,
                                     false/*bPEQ*/,
                                     false/*bPFX*/,
                                     false/*bPMSEQ*/,
                                     false/*bMFX*/
                                     );
         Global.Print("Sync CTLs from current part Main variation");
      }
      copyToReplayPatch();
      updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
      scheduleMIDISendPatchWhenEnabled();
   }

   // <ui_handle.png>
   protected method handleSyncPEQ(boolean _bAllParts) {
      if(_bAllParts)
      {
         int partIdx = 0;
         loop(16)
         {
            patch.syncFromMainVariation(partIdx,
                                        false/*bLevel*/,
                                        false/*bCtl*/,
                                        true/*bPEQ*/,
                                        false/*bPFX*/,
                                        false/*bPMSEQ*/,
                                        false/*bMFX*/
                                        );
            partIdx++;
         }
         Global.Print("Sync PEQs from Main variations (all parts)");
      }
      else
      {
         patch.syncFromMainVariation(data.current_part_idx,
                                     false/*bLevel*/,
                                     false/*bCtl*/,
                                     true/*bPEQ*/,
                                     false/*bPFX*/,
                                     false/*bPMSEQ*/,
                                     false/*bMFX*/
                                     );
         Global.Print("Sync PEQ from current part Main variation");
      }
      copyToReplayPatch();
      updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
      scheduleMIDISendPatchWhenEnabled();
   }

   // <ui_handle.png>
   protected =replay= method handleSyncPFX(boolean _bAllParts) {
      if(_bAllParts)
      {
         int partIdx = 0;
         loop(16)
         {
            patch.syncFromMainVariation(partIdx,
                                        false/*bLevel*/,
                                        false/*bCtl*/,
                                        false/*bPEQ*/,
                                        true/*bPFX*/,
                                        false/*bPMSEQ*/,
                                        false/*bMFX*/
                                        );
            partIdx++;
         }
         Global.Print("Sync PFX from Main variations (all parts)");
      }
      else
      {
         patch.syncFromMainVariation(data.current_part_idx,
                                     false/*bLevel*/,
                                     false/*bCtl*/,
                                     false/*bPEQ*/,
                                     true/*bPFX*/,
                                     false/*bPMSEQ*/,
                                     false/*bMFX*/
                                     );
         Global.Print("Sync PFX from current part Main variation");
      }
      copyToReplayPatch();
      updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
      scheduleMIDISendPatchWhenEnabled();
   }

   // <ui_handle.png>
   protected =replay= method handleSyncPMSEQ(boolean _bAllParts) {
      if(_bAllParts)
      {
         int partIdx = 0;
         loop(16)
         {
            patch.syncFromMainVariation(partIdx,
                                        false/*bLevel*/,
                                        false/*bCtl*/,
                                        false/*bPEQ*/,
                                        false/*bPFX*/,
                                        true/*bPMSEQ*/,
                                        false/*bMFX*/
                                        );
            partIdx++;
         }
         Global.Print("Sync MSEQ from Main variations (all parts)");
      }
      else
      {
         patch.syncFromMainVariation(data.current_part_idx,
                                     false/*bLevel*/,
                                     false/*bCtl*/,
                                     false/*bPEQ*/,
                                     false/*bPFX*/,
                                     true/*bPMSEQ*/,
                                     false/*bMFX*/
                                     );
         Global.Print("Sync MSEQ from current part Main variation");
      }
      copyToReplayPatch();
      updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
      scheduleMIDISendPatchWhenEnabled();
   }

   // <ui_handle.png>
   protected =replay= method handleSyncMFX() {
      patch.syncFromMainVariation(data.current_part_idx/*ignored*/,
                                  false/*bLevel*/,
                                  false/*bCtl*/,
                                  false/*bPEQ*/,
                                  false/*bPFX*/,
                                  false/*bPMSEQ*/,
                                  true/*bMFX*/
                                  );
      Global.Print("Sync MFX from Main variation");
      copyToReplayPatch();
      updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
      scheduleMIDISendPatchWhenEnabled();
   }

   // <ui_handle.png>
   protected method handlePatchCategoryChanged() {
      patch.patch_category = cm_patch_category.getSelectedOption();

      cm_find_category.setSelectedOption(patch.patch_category + 1);
      cm_find_category.redraw();

      Global.Print("Patch category is \""+cm_patch_category.getSelectedOptionName()+"\"");

      rebuildPatchNames();
   }

   // <ui_handle.png>
   protected method handleStarRatingChanged(boolean _bDec) {

      MontagePart p <= getEditPart();
      if(null != p)
      {
         if(_bDec)
            p.star_rating = (p.star_rating + 5) % 6;
         else
            p.star_rating = (p.star_rating + 1) % 6;
         bt_star.setIcon(UI.GetIcon("star_rating_lvl_"+p.star_rating));
         bt_star.redraw();

         if(p.star_rating >= 1)
            Global.Print("Part variation rating is "+p.star_rating);
         else
            Global.Print("Clear part variation rating");

         rebuildPatchNames();
         updatePartMixCopyOptions();
      }
   }

   // <ui_handle.png>
   protected method handleFindCategoryChanged() {

      int catIdx = cm_find_category.getSelectedOption() - 1;

      int patchIdx = 0;
      int res = 0;

      loop(MIDISynthProfileDataMontage.NUM_PATCHES)
      {
         Montage_Patch p <= data.patches.get(patchIdx++);

         if( (-1 == catIdx) || (p.patch_category == catIdx) )
         {
            res++;
         }
      }

      Global.Print("Find category is \""+cm_find_category.getSelectedOptionName()+"\" ("+res+" patch(es))");
   }

   // <ui_handle.png>
   protected method handleFindCategoryPrev() {

      if(data.current_patch_nr > 0)
      {
         int patchIdx = data.current_patch_nr - 1;

         int catIdx = cm_find_category.getSelectedOption() - 1;

         local StringArray nameFilters;
         buildNameFiltersFromString(nameFilters, tf_find_name.getText());

         while(patchIdx >= 0)
         {
            Montage_Patch p <= data.patches.get(patchIdx);

            if( (-1 == catIdx) || (p.patch_category == catIdx) )
            {
               if(matchNameFilters(p, nameFilters))
               {
                  cf_patch_nr.setSelectedOption(patchIdx);
                  handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
                  return;
               }
            }

            patchIdx--;
         }
      }

   }

   // <ui_handle.png>
   protected method handleFindCategoryBrowse() {

      local StringArray midiPatchNames;
      StringArray midiPatchNamesCat;  // ref'd by ComboBoxPopup

      int fltCurPatchNr = buildFilteredPatchNames(midiPatchNames,
                                                  midiPatchNamesCat,
                                                  null/*fltPatchIndices*/,
                                                  cm_find_category.getSelectedOption() - 1,
                                                  tf_find_name.getText()
                                                  );

      if(midiPatchNamesCat.numElements > 0)
      {
         Global.Print("Found "+(midiPatchNamesCat.numElements)+" matching patches");

         cmp_find_catbrowse <= ComboBoxPopup.NewComboBoxPopup(this,
                                                              null/*fontOrNull*/,
                                                              midiPatchNamesCat,
                                                              null/*optionsLongOrNull*/,
                                                              fltCurPatchNr,
                                                              280*UI.font_scaling/*prefSx*/,
                                                              null/*toolTipCaptions*/,
                                                              null/*optionBGColors*/,
                                                              null/*option_fgtints*/
                                                              );

         cmp_find_catbrowse.showAboveLayer(bt_find_catbrowse);
         cmp_find_catbrowse.centerRow();
         cmp_find_catbrowse.focusFirstTabCycleMember();
      }
      else
      {
         Global.Print("No matching patches found");
      }
   }

   // <ui_handle.png>
   protected method handleFindCategoryBrowseOptionSelected(IntAction _ac) {
      int selOpt = _ac.getIntValue();

      if(-1 != selOpt)
      {
         local StringArray midiPatchNames;
         local StringArray midiPatchNamesCat;
         local IntArray fltPatchIndices;

         buildFilteredPatchNames(midiPatchNames,
                                 midiPatchNamesCat,
                                 fltPatchIndices,
                                 cm_find_category.getSelectedOption() - 1,
                                 tf_find_name.getText()
                                 );

         cf_patch_nr.setSelectedOption(fltPatchIndices.get(selOpt));
         cf_patch_nr.redraw();
         handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
      }

      refocusDefault();
   }

   // <ui_handle.png>
   protected method handleFindCategoryNext() {

      if(data.current_patch_nr < MIDISynthProfileDataMontage.NUM_PATCHES)
      {
         int patchIdx = data.current_patch_nr + 1;

         int catIdx = cm_find_category.getSelectedOption() - 1;

         local StringArray nameFilters;
         buildNameFiltersFromString(nameFilters, tf_find_name.getText());

         while(patchIdx < MIDISynthProfileDataMontage.NUM_PATCHES)
         {
            Montage_Patch p <= data.patches.get(patchIdx);

            if( (-1 == catIdx) || (p.patch_category == catIdx) )
            {
               if(matchNameFilters(p, nameFilters))
               {
                  cf_patch_nr.setSelectedOption(patchIdx);
                  handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
                  return;
               }
            }

            patchIdx++;
         }
      }

   }

   // <ui_handle.png>
   protected method handleCopyFromReplayPerformance() {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      p.copyFrom(replay_perf);

      copyToReplayPatch();
      updateUIFromPatch();
      scheduleMIDISendPatchWhenEnabled();

      Global.Print("Copy from replay performance");
   }

   // <ui_handle.png>
   protected method handleMultiCopyPatchesToProjectBank1() {
      dlg_multipatch.showPatches(this, data.current_patch_nr);
      Global.Print("Show MultiPatch dialog");
   }

   // <ui_handle.png>
   protected method handleMultiCopyPatchesToProjectBank2() {
      local IntArray patchIndices <= dlg_multipatch.getSelectedPatchIndices();
      int numPatches = patchIndices.numElements;
      int dstPrgIdx = dlg_multipatch.getDestinationProgramIndex();
      Global.Debug("Montage::handleMultiCopyPatchesToProjectBank2: dstPrgIdx="+dstPrgIdx+" patchIndices="+#(patchIndices));
      if((numPatches + dstPrgIdx) <= 128)
      {
         int patchIdx = 0;
         int dstPatchIdx = dstPrgIdx + (num_programs_per_bank * MIDISynthProfileDataMontage.PROJECT_BANK_IDX);

         loop(numPatches)
         {
            Montage_Patch pSrc <= data.patches.get(patchIndices[patchIdx]);
            Montage_Patch pDst <= data.patches.get(dstPatchIdx);

            pDst.copyFrom(pSrc);

            patchIdx++;
            dstPatchIdx++;
         }

         copyToReplayPatch();
         updateUIFromPatch();
         Global.Print(numPatches+" "+Utils.GetPluralStringEx(numPatches, "patch", "pathches")+" copied to project bank");
      }
      else
      {
         Global.Error("Selected patches won't fit into project bank");
      }
   }

   // <ui_show.png>
   protected method showToolsMenu() {

      pm_tools <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_tools;

      MontagePart p <= getEditPart();
      boolean bHavePart = (null != p);

      pmb <= pm.addDefaultButton("Copy Part to Clipboard", "copy_part");
      pmb.setAccelerators("lalt-c", "");
      pmb.setActive(bHavePart);
      pmb <= pm.addDefaultButton("Copy 2 subsequent Parts to Clipboard", "copy_parts_2");
      pmb.setActive(bHavePart);
      pmb <= pm.addDefaultButton("Copy 3 subsequent Parts to Clipboard", "copy_parts_3");
      pmb.setActive(bHavePart);
      pmb <= pm.addDefaultButton("Copy 4 subsequent Parts to Clipboard", "copy_parts_4");
      pmb.setActive(bHavePart);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Paste Part from Clipboard", "paste_part");
      pmb.setAccelerators("lalt-v", "");
      pmb <= pm.addDefaultButton("Paste 2 subsequent Parts from Clipboard", "paste_parts_2");
      pmb <= pm.addDefaultButton("Paste 3 subsequent Parts from Clipboard", "paste_parts_3");
      pmb <= pm.addDefaultButton("Paste 4 subsequent Parts from Clipboard", "paste_parts_4");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Swap with Main Variation", "var_swap_main");
      pmb.setActive(bHavePart);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy Part Variation to Clipboard", "copy_part_var");
      pmb.setAccelerators("lctrl-lshift-c", "");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("Paste Part Variation from Clipboard", "paste_part_var");
      pmb.setAccelerators("lctrl-lshift-v", "");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy Part Variation FX to Clipboard", "copy_part_fx");
      pmb.setAccelerators("lshift-c", "");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("Paste Part Variation FX from Clipboard", "paste_part_fx");
      pmb.setAccelerators("lshift-v", "");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy Part Variation CTL to Clipboard", "copy_part_ctl");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("Paste Part Variation CTL from Clipboard", "paste_part_ctl");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Reset KbdCtl (all parts, all variations)", "perf_all_kbdctl");
      pmb <= pm.addDefaultButton("Reset Part Variation Quick-Edit Controls", "part_reset_qe");
      pmb.setAccelerators("lalt-r", "");
      pmb <= pm.addDefaultButton("Reset Performance Quick-Edit Controls", "perf_reset_qe");
      pmb.setAccelerators("lctrl-r", "");
      pmb <= pm.addDefaultButton("Disable Vol/Exp (all parts / all variations)", "perf_volexp_off");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Multi-Copy Patches to Project Bank..", "multicopy");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy From Replay Performance", "copy_from_replay_perf");

      pm.resizeToMinimum();
      pm.showNearMouse(-30, 0);

      Global.Print("Show Tools menu.");
   }

   // <ui_show.png>
   public method showPartContextMenu() {
      MontagePart p <= getEditPart();
      boolean bHavePart = (null != p);
      boolean bHavePartCB = (null != part_clipboard);
      boolean bHaveVarCB  = (null != var_clipboard);
      boolean bHavePFXCB  = (null != pfx_clipboard);
      boolean bHavePCtlCB = (null != pctl_clipboard);

      pm_part_contextmenu <= PopupMenu.New(this);
      PopupMenu pm <= pm_part_contextmenu;
      PopupMenuButton *pmb;
      PopupMenu *spm;

      spm <= PopupMenu.New(pm);
      pmb <= pm.addMenu("Init Part..", deref spm);
      pmb <= spm.addDefaultButton("Init Part FM-X", "init_part_fmx");
      pmb.setActive(!bHavePart);
      pmb <= spm.addDefaultButton("Init Part AWM2", "init_part_awm2");
      pmb.setActive(!bHavePart);
      pmb <= spm.addDefaultButton("Init Part Drum", "init_part_drum");
      pmb.setActive(!bHavePart);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("EG Mixer..", "eg_mixer");
      pmb.setAccelerators("lctrl-g", "");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("FM Sound Mixer..", "fm_sound_mixer");
      pmb.setAccelerators("lctrl-f", "");
      pmb.setActive(bHavePart);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Swap with Main Variation", "var_swap_main");
      pmb.setActive(bHavePart);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy Part (all variations)", "copy");
      pmb.setAccelerators("lalt-c", "");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("Paste Part (all variations)", "paste");
      pmb.setAccelerators("lalt-v", "");
      pmb.setActive(bHavePartCB);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy Part Variation", "var_copy");
      pmb.setAccelerators("lctrl-lshift-c", "");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("Paste Part Variation", "var_paste");
      pmb.setAccelerators("lctrl-lshift-v", "");
      pmb.setActive(bHaveVarCB);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy Part Variation FX", "pfx_copy");
      // pmb.setAccelerators("lctrl-lshift-c", "");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("Paste Part Variation FX", "pfx_paste");
      // pmb.setAccelerators("lctrl-lshift-v", "");
      pmb.setActive(bHavePFXCB);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy Part Variation CTL", "pctl_copy");
      // pmb.setAccelerators("lctrl-lshift-c", "");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("Paste Part Variation CTL", "pctl_paste");
      // pmb.setAccelerators("lctrl-lshift-v", "");
      pmb.setActive(bHavePCtlCB);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Delete Part Variation", "var_delete");
      pmb.setActive(bHavePart);

      pm.resizeToMinimum();
      pm.showNearMouse(-30, 0);

      Global.Print("Show Part context menu.");
   }

   // <method.png>
   protected static CalcMuteString(String _s, int _mask) {
      int bit = 1;
      int nr = 1;
      loop(8)
      {
         if(_mask & bit)
            _s.append("-");
         else
            _s.append(String(nr));
         bit = (bit << 1);
         nr++;
      }
   }

   // <method.png>
   public method toggleSoloPart() {
      data.b_solo_part = !data.b_solo_part;

      scheduleMIDISendPatchWhenEnabled();

      updatePartButtons();

      Global.PrintFast("Solo part "+(data.current_part_idx+1)+" is "+Utils.GetEnableString(data.b_solo_part));
   }

   // <method.png>
   public method toggleOpVMute(int _opIdx) {
      data.opv_mute_mask ^= (1 << _opIdx);
      scheduleMIDISendPatchWhenEnabled();
      local String muteStr; CalcMuteString(muteStr, data.opv_mute_mask);
      Global.PrintFast("OpV mute mask is "+muteStr+" ("+((data.opv_mute_mask & (1<<_opIdx)) ? "Mute" : "Umute")+" OpV "+(_opIdx+1)+")");
   }

   // // <method.png>
   // protected method toggleMuteOrSoloCurrentOp(boolean _bSolo) {
   //    int tabIdx = ts_groups.getActiveTabIndex();
   //    int opIdx;
   //    local String muteStr;
   //    if(TAB_V1 <= tabIdx <= TAB_V8)
   //    {
   //       opIdx = tabIdx - TAB_V1;
   //       if(_bSolo)
   //       {
   //          if(data.opv_mute_mask == (~(1<<opIdx) & 255))  // is solo ?
   //          {
   //             data.opv_mute_mask = 0;
   //             data.b_solo_opv = false;
   //             CalcMuteString(muteStr, data.opv_mute_mask);
   //             Global.PrintFast("OpV mute mask is "+muteStr+" (un-solo OpV "+(opIdx+1)+")");
   //          }
   //          else
   //          {
   //             data.opv_mute_mask = ~(1<<opIdx) & 255;
   //             data.b_solo_opv = true;
   //             CalcMuteString(muteStr, data.opv_mute_mask);
   //             Global.PrintFast("OpV mute mask is "+muteStr+" (solo OpV "+(opIdx+1)+")");
   //          }
   //          if(false != data.b_autosend)
   //          {
   //             scheduleMIDISendPatch();
   //          }
   //       }
   //       else
   //          toggleOpVMute(opIdx);
   //    }
   // }

   // <ui_timer.png>
   public method scheduleMIDISendPatch() {
      // trace "xxx Montage::scheduleMIDISendPatch:";
      b_queued_midi_send_patch = true;
      ta_midisend.reschedule();
   }

   // <ui_timer.png>
   public method scheduleMIDISendPatchWhenEnabled() {
      if(false != data.b_autosend)
      {
         scheduleMIDISendPatch();
      }
   }

   // <ui_timer.png>
   public method scheduleMIDISendParam() {
      // trace "xxx Montage::scheduleMIDISendParam:";
      b_queued_midi_send_patch = true;
      ta_midisend_param.reschedule();
   }

   // <method.png>
   protected =replay= method copyToReplayPatch() {
      // trace "xxx copyToReplayPatch "+rand(9999);
      replay_patch.copyFrom(patch);
      soundmix_perf.invalidateSoundMixParts();
   }

   // <method.png>
   public method handleParamEdited() {

      if(TAB_FMMATRIX != ts_groups.getActiveTabIndex())
         fm_matrix.updateFromPatchData_Editor(false/*bTabVisible*/);

      if(false != data.b_autosend)
         scheduleMIDISendParam();
   }

   // <method_get.png>
   public method getReplayPerformances(local PointerArray  _ret) {
      _ret.empty();
      local int partIdx = 0;
      local IntArray partVarIndices <= data.replay_part_var_indices;
      loop(16)
      {
         local int replayPartVarIdx = partVarIndices.get(partIdx);
         local MontagePerformance perf <= replay_patch.getPerformanceVariation(replayPartVarIdx);
         local MontagePart part <= perf.getPartByIdx(partIdx);
         if(null == part)
         {
            // Part does not exist in selected variation => Use Main variation
            perf <= replay_patch.getPerformanceVariation(0);
         }
         _ret.add(perf);
         partIdx++;
      }
   }

   // <method.png>
   protected method sendPatch(boolean _bForceDiff) {
      if(b_debug_diff)
      {
         trace "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
         trace "~                                                            ~";
         trace "~                                                            ~";
         trace "~  sendPatch bForceDiff="+_bForceDiff;
         trace "~                                                            ~";
         trace "~                                                            ~";
         trace "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
      }

      if(null != out_dev)
      {
         boolean bSendAll = !data.b_send_diff && !_bForceDiff;
         bSendAll |= b_force_send_all;

         if(bSendAll)
         {
            replay_perf.invalidateReplay();
         }

         boolean bSendDiff = !b_force_send_all && (data.b_send_diff | _bForceDiff);

         local MIDIPipeFrame frOut;
         frOut.empty();
         frOut.setRoot(current_pipe_root);

         int partMask = 65535;

         if(b_debug_diff)
         {
            trace "xxx sendPatch: data.replay_part_var_indices="+data.replay_part_var_indices;
            trace "xxx sendPatch: patch.edit_part_var_indices="+patch.edit_part_var_indices;
         }

         local MontagePerformance *[] performances;
         getReplayPerformances(performances);
         // trace "xxx sendPatch: performances="+#(performances);

         boolean bCanSendDiff = data.b_send_diff && MontagePerformance.CanSendDiffIndexed(performances, replay_perf);
         if(b_debug_diff)
            trace "[trc] Montage::sendPatch: bCanSendDiff="+bCanSendDiff;

         if(!data.b_allow_bulk)
         {
            // "safe" way (never send bulk dump while Diff mode is enabled)
            bSendDiff = data.b_send_diff;  // ignore bCanSendDiff
            if(!bCanSendDiff)
            {
               trace "[~~~] Montage::sendPatch: cannot send diff, part types will not be updated (toggle Diff checkbox!)";
            }
         }
         else
         {
            // auto-send bulk dump when Diff is not possible
            bSendAll |= !bCanSendDiff;
            bSendDiff = bSendDiff && bCanSendDiff && !bSendAll;
         }

         if(bSendDiff)
         {
            debug_diff_count = 0;
            b_diff_sound = true;
            // b_diff_sound = false;  // param order matters after performance change ??!!!!
            ta_diff.reschedule();
         }
         else if(data.b_allow_bulk)
         {
            int groupMask = data.group_mask | ((0 && data.b_send_diff) ? MontageDefs.G_SPARSE : 0);
            MontagePerformance.SendPerformanceIndexed(performances,
                                                      replay_perf,
                                                      true/*bHeader*/,
                                                      out_dev,
                                                      bSendAll,
                                                      partMask,
                                                      groupMask,
                                                      data.current_part_idx,
                                                      data.opv_mute_mask,
                                                      data.b_solo_part,
                                                      null/*fr*/,
                                                      0/*numDiffsLeft*/
                                                      );

            // workaround for FW3.51 INSERT FX restore issue
            //  - delay retro+modern infinite feedback after bulk dump or loading performance on synth
            //  => always send insert fx as diff
            if(data.b_send_diff)
            {
               debug_diff_count = 0;
               b_diff_sound = true;
               ta_diff.scheduleLong();
            }
            else
            {
               b_force_send_all = false;
               b_first_midi_send_patch = false;
            }

         }
      } // if out_dev

   }

   static int debug_diff_count;

   // <method.png>
   protected =replay= method sendNextDiffs() {
      local MIDIPipeFrame frOut;
      frOut.empty();
      frOut.setRoot(current_pipe_root);

      int partMask = 65535;
      int flags;
      int numDiffsLeft =
      replay.b_playing
         ? STConfig.pagesysex_montage_max_diffs_replay
         : STConfig.pagesysex_montage_max_diffs_idle/*numDiffsLeft*/
         ;

      if(b_diff_sound && (data.group_mask & MontageDefs.G_SOUND))
      {
         flags = MontageDefs.G_SOUND;
      }
      else
      {
         flags = data.group_mask;
      }

      if(replay.b_playing && !b_force_send_all)
         flags &= ~(G_SYSTEM|G_SEQSETUP|G_MICROTUNE|G_NAME|G_MSEQ|G_ARP|G_SUPERKNOB|G_KNOBNAME|G_SCENE|G_AUDIO|G_AUDITION|G_MEQ|G_MFX|G_TEMPO);

      if(b_debug_diff)
      {
         debug_diff_count += numDiffsLeft;
         trace "xxx sendNextDiffs: debug_diff_count="+debug_diff_count+" b_diff_sound="+b_diff_sound+" flags="+flags;
      }

      local MontagePerformance *[] performances;
      getReplayPerformances(performances);
      numDiffsLeft = MontagePerformance.SendPerformanceIndexed(performances,
                                                               replay_perf,
                                                               false/*bHeader*/,
                                                               out_dev,
                                                               false/*bSendAll*/,
                                                               partMask,
                                                               flags/*groupMask*/,
                                                               data.current_part_idx,
                                                               data.opv_mute_mask,
                                                               data.b_solo_part,
                                                               frOut,
                                                               numDiffsLeft
                                                               );

      int frNumEvents = frOut.numEvents;
      // trace "xxx sendNextDiffs: frNumEvents="+frNumEvents;

      if(frNumEvents > 0)
      {
         if(b_debug_diff)
            trace "[trc] Montage::sendNextDiffs: send "+frOut.numEvents+" param changes. numDiffsLeft="+numDiffsLeft;

         out_dev.begin();
         frOut.emit();
         out_dev.send(milliSeconds());

         ta_diff.reschedule();
      }
      else if(b_diff_sound)
      {
         b_diff_sound = false;
         ta_diff.reschedule();
      }
      else
      {
         MontagePerformance.HandleSendFinishedIndexed(performances, replay_perf);
         b_first_midi_send_patch = false;
         b_force_send_all        = false;
      }
   }

   // <ui_timer.png>
   protected =replay= method handleMIDISendTimer(boolean _bForceDiff) {

      if(b_queued_midi_send_patch)
      {
         b_queued_midi_send_patch = false;
         b_force_send_all |= b_first_midi_send_patch;

         copyToReplayPatch();  // (todo) optimize (currently copies entire patch)

         sendPatch(_bForceDiff);

      } // if b_queued_midi_send_patch
   }

   // <ui_update.png>
   protected method updateFMMatrix() {
      boolean bTabVisible = (TAB_FMMATRIX == ts_groups.getActiveTabIndex());
      fm_matrix.updateFromPatchData_Editor(bTabVisible);
   }

   // <ui_timer.png>
   protected method handleFMMatrixTimer() {
      updateFMMatrix();
   }

   // <midi.png>
   protected morph(local Montage_Patch _dest,
                   local Montage_Patch _srcA,
                   local Montage_Patch _srcB,
                   float _amtB
                   ) {
      // (todo) implement or delete

      // local Buffer pdD <= _dest.patch_data;
      // local Buffer pdA <= _srcA.patch_data;
      // local Buffer pdB <= _srcB.patch_data;

      // local MIDISynthProfileCtlAlias *alias;
      // int ival;
      // foreach alias in param_widget_aliases
      // {
      //    int ivalA = pdA.peekI8(alias.syx_off);
      //    int ivalB = pdB.peekI8(alias.syx_off);

      //    if(alias.syx_off_lo > 0)
      //    {
      //       ivalA = ivalA << 7;
      //       ivalB = ivalB << 7;
      //       ivalA |= pdA.peekI8(alias.syx_off_lo);
      //       ivalB |= pdB.peekI8(alias.syx_off_lo);

      //       ival = 0.5 + ivalA + (ivalB - ivalA) * _amtB;

      //       pdD.pokeI8(alias.syx_off, ival >> 7);
      //       pdD.pokeI8(alias.syx_off_lo, ival & 127);
      //    }
      //    else
      //    {
      //       ival = 0.5 + ivalA + (ivalB - ivalA) * _amtB;
      //       // trace "xxx syx_off="+alias.syx_off+" ivalA="+ivalA+" ivalB="+ivalB+" amtB="+_amtB+" => ival="+ival;
      //       pdD.pokeI8(alias.syx_off, ival);
      //    }
      // }
   }

   // <replay.png>
   public virtual handleProxyReset(byte _midiCh, MIDIPipeFrame _frame) {
      // trace "xxx Montage::handleProxyReset: ENTER: out_dev="+#(out_dev)+" data.b_proxy_reset="+data.b_proxy_reset;

      // Called from replay thread
      if(null != out_dev)
      {
         if(data.b_proxy_reset)
         {
            // Reset to original patch state
            proxy_bank    = data.current_patch_nr / 128;
            proxy_program = data.current_patch_nr & 127;

            Global.Debug2("Montage::handleProxyReset: current_patch_nr="+data.current_patch_nr+" => proxy_bank="+proxy_bank+" proxy_program="+proxy_program);

            // // Montage_Patch patch <= data.patches.get(data.current_patch_nr);
            // // if(null != patch)
            // // {
            // //    Montage_VariationScene
            // // }

            if(true != b_patch_proxy_lock)
            {
               Montage_Patch proxyPatch <= data.patches.get(data.current_patch_nr);
               // emitPatchDiff(_frame, proxyPatch, false/*bForceSendAll*/, _midiCh&3/*partIdx*/);
            }

            copyToReplayPatch();
            // // soundmix_perf.invalidateSoundMixParts();  // done by copyToReplayPatch()
            replay_perf.replayResetAEGScaling();
            b_queued_emit_diff = true;
            proxy_layer_diff_part_mask = 65535;
            // trace "xxx Montage::handleProxyReset: queue emit";
         }
      }

   }

   // <replay.png>
   public virtual handleProxyBankSelect(byte _midiCh, short _bankNr) {
      // Called from replay thread
      // trace "xxx Montage: handleProxyBankSelect("+_bankNr+")";
      proxy_bank = mathClampi(_bankNr, 1, MIDISynthProfileDataMontage.NUM_BANKS) - 1;
   }

   // <replay.png>
   public virtual handleProxyProgramChange(byte          _midiCh,
                                           short         _programNr,
                                           MIDIPipeFrame _frameOut,
                                           boolean       _bMorphFollows
                                           ) {
      // Called from replay thread
      if(!b_patch_proxy_lock)
      {
         // // proxy_program = mathClampi(_programNr, 1, 128) - 1;
         // // Global.Debug3("Montage::handleProxyProgramChange: proxy_program="+proxy_program+" (bank "+proxy_bank+", current_patch_nr="+data.current_patch_nr+")");

         // // if(null != data)
         // // {
         // //    if(!_bMorphFollows)
         // //    {
         // //       Montage_Patch *proxyPatch <= data.patches.get((proxy_bank * 128) + proxy_program);

         // //       // emitPatchDiff(_frameOut, proxyPatch, b_first_proxy_prgchg/*bForceSendAll*/, _midiCh&3/*partIdx*/);
         // //       b_first_proxy_prgchg = false;
         // //    }

         // //    if(b_patch_proxy_follow)
         // //    {
         // //       data.current_patch_nr = proxy_bank * 128 + proxy_program;
         // //    }
         // // }


         // Select variation scene
         if(0 < _programNr <= Montage_Patch.NUM_VARIATION_SCENES)
         {
            int varSceneIdx = (_programNr -1);
            Montage_VariationScene vs <= patch.getVariationSceneByIdx(varSceneIdx);
            IntArray partVariations <= vs.part_variations;
            int partIdx = 0;
            boolean bChanged = false;
            loop(16)
            {
               int varIdx = partVariations[partIdx];
               if(varIdx >= 0)
               {
                  varIdx &= 15;
                  if(data.getReplayPartVarIdx(partIdx) != varIdx)
                  {
                     data.setReplayPartVarIdx(partIdx, varIdx);
                     proxy_layer_diff_part_mask |= (1 << partIdx);
                     bChanged = true;
                  }
               }
               partIdx++;
            }

            if(bChanged)
            {
               getReplayPerformances(proxy_layer_diff_performances);
               b_proxy_layer_diff_sound = true;
            }
         }
      }
   }

   // <replay.png>
   public virtual handleProxyBankSelectDst(byte _midiCh, short _bankNr) {
      // Called from replay thread
      proxy_bank_dst = mathClampi(_bankNr, 1, MIDISynthProfileDataMontage.NUM_BANKS) - 1;
   }

   // <replay.png>
   public virtual handleProxyProgramChangeDst(byte _midiCh, short _programNr) {
      // Called from replay thread
      proxy_program_dst = mathClampi(_programNr, 1, 128) - 1;
   }

   // <replay.png>
   public virtual handleProxyAmountDst(byte _midiCh, float _amount) {
      // Called from replay thread
      proxy_amount_dst = _amount;
   }

   // <replay.png>
   public virtual handleProxyMorph(byte _midiCh, MIDIPipeFrame _frameOut) {
      // (todo)
      // Montage_Patch patchA <= data.patches.get(proxy_bank * 128 + proxy_program);
      // Montage_Patch patchB <= data.patches.get(proxy_bank_dst * 128 + proxy_program_dst);

      // morph(morph_patch, patchA, patchB, proxy_amount_dst);

      // if(true != b_patch_proxy_lock)
      // {
      //    emitPatchDiff(_frameOut, morph_patch, b_first_proxy_prgchg/*bForceSendAll*/, _midiCh&3/*partIdx*/);
      //    b_first_proxy_prgchg = false;
      // }
   }

   // <ui_midi.png>
   protected method waitForSysEx() : boolean {
      if(sysex_buffer_queue.isEmpty())
      {
         if(b_debug)
            Global.Debug("EditMIDISynthFormMontage<"+profile.midi_profile_id+">::waitForSysEx: in_dev="+#(in_dev));

         if(null != in_dev)
         {
            if(b_debug)
               Global.Debug("EditMIDISynthFormMontage<"+profile.midi_profile_id+">::waitForSysEx: in_dev.aliasOrDevName=\""+in_dev.getAliasOrDeviceName()+"\"");

            // 5 second timeout
            loop(50)
            {
               replay.processMidiMapUIEventQueue();

               if(!sysex_buffer_queue.isEmpty())
               {
                  break;
               }

               TKS.sleep(100);
            }

            if(sysex_buffer_queue.isEmpty())
               Global.Error("EditMIDISynthFormMontage<"+profile.midi_profile_id+">: waitForSysEx: Timeout");
         }
      }
      return !sysex_buffer_queue.isEmpty();
   }

   // <method.png>
   public method requestAddr(Buffer buf, byte ah, byte am, byte al) {
      // F0 43 2n 7F 1C 07 ah am al F7
      buf.size = 10;
      buf.i8 = 0xF0;
      buf.i8 = 0x43;
      buf.i8 = 0x20;
      buf.i8 = 0x7F;
      buf.i8 = 0x1C;
      buf.i8 = 0x02;
      buf.i8 = ah & 127;
      buf.i8 = am & 127;
      buf.i8 = al & 127;
      buf.i8 = 0xF7;
      // buf.hexdump(0, buf.offset);
   }

   // <method.png>
   public method identityRequest(Buffer buf) {
      // F0H 7EH 0nH 06H 01H F7H
      buf.size = 6;
      buf.i8 = 0xF0;
      buf.i8 = 0x7E;
      buf.i8 = 0x00;
      buf.i8 = 0x06;
      buf.i8 = 0x01;
      buf.i8 = 0xF7;
   }

   // <method.png>
   public method sendBuffer(Buffer buf) {
      if(null != out_dev)
      {
         out_dev.sysExRaw(buf);
         out_dev.send(milliSeconds());
      }
   }

   // <method.png>
   public method recvBulkNext(MontagePerformance _perf, boolean _bVerbose) {
      if(waitForSysEx())
      {
         Buffer bufRecv <= sysex_buffer_queue.getDeref(0);
         sysex_buffer_queue.delete(0);
         if(_bVerbose)
         {
            trace "[trc] Montage::recvBulkNext: got "+bufRecv.offset+" bytes (w/o F0/F7 marker):";
            // bufRecv.hexdump(0, bufRecv.offset);
         }

         if(MMontagePerformance.b_recv_verbose && bufRecv.offset > 0)
         {
            Integer ioH = bufRecv.peekI8(7);
            Integer ioM = bufRecv.peekI8(8);
            Integer ioL = bufRecv.peekI8(9);
            Integer ioSz = bufRecv.offset - 10 -1;
            Integer ioChecksumExpect = bufRecv.peekI8(bufRecv.offset-1);
            Integer ioChecksumCalc = 0;//ioSz + ioH + ioM + ioL;
            int idx = 0;
            loop(ioSz + 4)
            {
               byte c = bufRecv.peekI8(6 + idx);
               ioChecksumCalc += c;
               idx++;
            }
            ioChecksumCalc = (256 - ioChecksumCalc&127) & 127;
            trace "[trc] Montage::recvBulkNext: addr="+ioH.printf("%02x")+" "+ioM.printf("%02x")+" "+ioL.printf("%02x")+" ioSz="+ioSz+" checksumExpect="+ioChecksumExpect.printf("0x%02x")+" checksumCalc="+ioChecksumCalc.printf("0x%02x");
         }

         return _perf.queryNext(bufRecv);
      }
      else
         trace "[~~~] Montage::recvBulkNext: timeout";
      return false;
   }

   // <ui_handle.png>
   protected method handlePatchOrPartReceive(boolean _bEdit, boolean _bClipboard, boolean _bPart) {
      if(null == out_dev)
         return;
      if(null == in_dev)
         return;

      local Buffer bufReq;
      requestAddr(bufReq, 0x0E, 0x25, 0x00);  // Performance Bulk Header: Performance Edit Buffer
      sendBuffer(bufReq);

      Montage_Patch p <= _bClipboard ? patch_clipboard : patch;
      MontagePerformance perf <= p.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);

      perf_recv.queryBegin();
      while(recvBulkNext(perf_recv, false/*bVerbose*/))
      {
      }
      perf_recv.queryEnd();

      replay_perf.copyFrom(perf_recv);

      if(_bPart)
      {
         // Copy single part from receive buffer
         perf.lazyInit();
         perf.copyPartFrom(data.current_part_idx, perf_recv, data.current_part_idx, data.b_recv_patch_names/*bCopyName*/);

         int partEditVarIdx = p.getPartEditVarIdx(data.current_part_idx);

         if(data.b_recv_patch_names)
         {
            if(0 != partEditVarIdx)
            {
               // Override part name
               perf.setPartName(data.current_part_idx, "Variation "+partEditVarIdx);
            }
         }

         if(partEditVarIdx > 0)
            Global.Print("Receive part "+(data.current_part_idx+1)+" variation "+partEditVarIdx);
         else
            Global.Print("Receive part "+(data.current_part_idx+1)+" main variation");
      }
      else
      {
         // Select main variation on all parts
         int partIdx = 0;
         loop(16)
            p.setPartEditVarIdx(partIdx++, 0);

         // Copy all parts from receive buffer
         perf <= p.getOrCreatePerformanceVariation(-1/*partIdxHint*/, 0/*varIdx*/);
         perf.copyFrom(perf_recv);

         if(data.b_recv_patch_names)
         {
            p.patch_name = perf_recv.getName();
         }
      }

      updateUIFromPatch();
   }

   // <ui_handle.png>
   protected method handlePatchSend(boolean _bForceResendAll) {
      if(_bForceResendAll)
      {
         clearMIDICache();
         replay_perf.invalidateReplay();
         copyToReplayPatch();
         b_force_send_all = true;
      }
      scheduleMIDISendPatch();
   }

   // <ui_handle.png>
   protected method handlePatchCopy() {

      // trace "xxx handlePatchCopy patch="+#(patch);
      patch_clipboard.copyFrom(patch);

      Global.Print("Copy patch to clipboard");
   }

   // <ui_handle.png>
   protected =replay= method handlePatchPaste_replay() {
      patch.copyFrom(patch_clipboard);

      copyToReplayPatch();

      data.setReplayPartVarIndices(patch.edit_part_var_indices);
      patch.updatePartMidiChFromLayerMask();
      data.setMultiMIDICh(patch.multi_midi_ch);
      data.redirectToPartMIDICh();
   }

   // <ui_handle.png>
   protected method handlePatchPaste() {

      handlePatchPaste_replay();

      updateUIFromPatch();

      b_force_send_all = true;
      scheduleMIDISendPatchWhenEnabled();

      Global.Print("Paste patch from clipboard");
   }

   // <ui_handle.png>
   protected =replay= method handlePatchSwap_replay() {
      local Montage_Patch t;
      t.init(this, profile);

      t.copyFrom(patch);
      patch.copyFrom(patch_clipboard);
      patch_clipboard.copyFrom(t);

      copyToReplayPatch();
   }

   // <ui_handle.png>
   protected method handlePatchSwap() {

      handlePatchSwap_replay();

      updateUIFromPatch();

      b_force_send_all = true;
      scheduleMIDISendPatchWhenEnabled();

      Global.Print("Swap patch with clipboard");
   }

   // <ui_handle.png>
   public method handleVariationCopy() {

      if(null == var_clipboard)
      {
         var_clipboard <= new MontagePerformance;
         var_clipboard.init();
         var_clipboard.lazyInit();
      }

      MontagePerformance p <= patch.getEditPerformance(data.current_part_idx);
      var_clipboard.copyPartFrom(0, p, data.current_part_idx, true/*bCopyName*/);

      Global.Print("Copy part variation to clipboard");
   }

   // <ui_handle.png>
   public =replay= method handleVariationPaste() {

      if(null != var_clipboard)
      {
         MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
         b_force_send_all = p.doesPartTypeDiffer(data.current_part_idx, var_clipboard, 0);
         // trace "xxx handleVariationPaste: b_force_send_all="+b_force_send_all;

         p.copyPartFrom(data.current_part_idx, var_clipboard, 0, true/*bCopyName*/);

         copyToReplayPatch();
         updateUIFromPatchEx(false/*bPatchNames*/, true/*bFMMatrix*/, true/*bPartMixCopyOptions*/);
         scheduleMIDISendPatchWhenEnabled();

         Global.Print("Paste part variation from clipboard");
      }

   }

   // <ui_handle.png>
   public =replay= method swapWithMainVariation() {

      MontagePerformance perfSrc <= patch.getEditPerformance(data.current_part_idx);
      if(null != perfSrc)
      {
         MontagePerformance perfDst <= patch.getPerformanceVariationOrNull(0/*varIdx=Main*/);
         if(null != perfDst)
         {
            if(@(perfSrc) != @(perfDst))
            {
               local MontagePerformance perfTmp;
               perfTmp.init();
               perfTmp.lazyInit();
               perfTmp.copyPartFrom(0/*dstPartIdx*/, perfSrc, data.current_part_idx, true/*bCopyName*/);

               b_force_send_all = perfSrc.doesPartTypeDiffer(data.current_part_idx, perfDst, data.current_part_idx);

               IntArray editPartVarIndices <= patch.edit_part_var_indices;
               int varSrc = editPartVarIndices.get(data.current_part_idx);

               // MontagePart p <= perfTmp.getPartByIdx(data.current_part_idx);
               // trace "xxx src p.name=\""+p.getName()+"\"";

               perfSrc.copyPartFrom(data.current_part_idx, perfDst, data.current_part_idx, true/*bCopyName*/);
               perfDst.copyPartFrom(data.current_part_idx, perfTmp, 0, true/*bCopyName*/);

               // trace "xxx perfDst="+#(perfDst)+" partName="+perfDst.getPartName(data.current_part_idx);

               // p <= perfDst.getPartByIdx(data.current_part_idx);
               // trace "xxx dst copied p.name=\""+p.getName()+"\"";

               updatePartVarOptions();
               selectVariation(0/*Main*/, false/*bAllParts*/);

               // MontagePerformance editPerf <= patch.getEditPerformance(data.current_part_idx);
               // trace "xxx editPerf="+#(editPerf)+" partName="+editPerf.getPartName(data.current_part_idx);

               // Update variation scenes
               Montage_VariationScene *vs;
               foreach vs in patch.variation_scenes
                  vs.swapVariations(data.current_part_idx, 0, varSrc);

               copyToReplayPatch();
               updateUIFromPatchEx(false/*bPatchNames*/, true/*bFMMatrix*/, true/*bPartMixCopyOptions*/);
               scheduleMIDISendPatchWhenEnabled();

               Global.Print("Swap current with Main variation");
            }
            else
               Global.Warning("can't swap Main variation with itself");
         }
      }
   }

   // <ui_handle.png>
   public method handlePartCopy(int _numParts) {

      if(null == part_clipboard)
      {
         part_clipboard <= new Montage_Patch;
         part_clipboard.init(this, profile);
      }

      // trace "xxx handlePatchCopy patch="+#(patch);
      part_clipboard.copyFrom(patch);
      part_clipboard_part_idx = data.current_part_idx;

      int minPart = data.current_part_idx;
      int maxPart = mathMini(data.current_part_idx + _numParts - 1, 15);

      Global.Debug("Montage::handlePartCopy: numParts="+_numParts+" minPart="+minPart+" maxPart="+maxPart);

      if(minPart == maxPart)
         Global.Print("Copy part "+(data.current_part_idx+1)+" to clipboard");
      else
         Global.Print("Copy parts "+(minPart+1)+".."+(maxPart+1)+" to clipboard");
   }

   // <ui_handle.png>
   public =replay= method handlePartPaste(int _numParts) {

      if(null != part_clipboard)
      {
         Global.Debug("Montage::handlePartPaste: dstPart="+data.current_part_idx+" srcPart="+part_clipboard_part_idx+" numParts="+_numParts);

         int minPart = data.current_part_idx;
         int maxPart = mathMini(data.current_part_idx + _numParts - 1, 15);

         int numVar = 0;
         int idx = 0;
         loop(maxPart - minPart + 1)
         {
            numVar += patch.copyPartVariationsFrom(data.current_part_idx + idx, part_clipboard, part_clipboard_part_idx + idx, true/*bName*/);
            idx++;
         }

         b_force_send_all = true;
         copyToReplayPatch();
         updateUIFromPatch();
         scheduleMIDISendPatchWhenEnabled();

         if(minPart == maxPart)
            Global.Print("Paste part "+(data.current_part_idx+1)+" from clipboard ("+numVar+" variation"+Utils.GetPluralString(numVar)+")");
         else
            Global.Print("Paste parts "+(minPart+1)+".."+(maxPart+1)+" from clipboard ("+numVar+" variation"+Utils.GetPluralString(numVar)+")");
      }

   }

   // <ui_handle.png>
   public =replay= method handlePartSwapWithClipboard(int _numParts) {

      if(null != part_clipboard)
      {
         Global.Debug("Montage::handlePartSwapWithClipboard: dstPart="+data.current_part_idx+" srcPart="+part_clipboard_part_idx+" numParts="+_numParts);

         int minPart = data.current_part_idx;
         int maxPart = mathMini(data.current_part_idx + _numParts - 1, 15);

         local Montage_Patch pTemp <= new Montage_Patch;
         pTemp.init(this, profile);
         pTemp.copyFrom(patch);  // init

         // Copy patch part(s) to temp
         int numVar = 0;
         int idx = 0;
         loop(maxPart - minPart + 1)
         {
            numVar += pTemp.copyPartVariationsFrom(data.current_part_idx + idx, part_clipboard, data.current_part_idx + idx, true/*bName*/);
            idx++;
         }

         // Copy clipboard part(s) to patch + temp parts to clipboard
         idx = 0;
         loop(maxPart - minPart + 1)
         {
            patch.copyPartVariationsFrom(data.current_part_idx + idx, part_clipboard, part_clipboard_part_idx + idx, true/*bName*/);
            part_clipboard.copyPartVariationsFrom(part_clipboard_part_idx + idx, pTemp, data.current_part_idx + idx, true/*bName*/);
            idx++;
         }

         b_force_send_all = true;
         copyToReplayPatch();
         updateUIFromPatch();
         scheduleMIDISendPatchWhenEnabled();

         if(minPart == maxPart)
            Global.Print("Swap part "+(data.current_part_idx+1)+" with clipboard ("+numVar+" variation"+Utils.GetPluralString(numVar)+")");
         else
            Global.Print("Swap parts "+(minPart+1)+".."+(maxPart+1)+" with clipboard ("+numVar+" variation"+Utils.GetPluralString(numVar)+")");
      }

   }

   // <ui_handle.png>
   public =replay= method handleVariationDelete(int _partIdx) {
      MontagePerformance perfDst <= patch.getEditPerformance(_partIdx);
      if(null != perfDst)
      {
         perfDst.deletePartByIdx(_partIdx);
         Global.Print("Delete part variation "+(_partIdx+1));

         b_force_send_all = true;
         copyToReplayPatch();
         updateUIFromPatchEx(false/*bPatchNames*/, true/*bFMMatrix*/, true/*bPartMixCopyOptions*/);
         scheduleMIDISendPatchWhenEnabled();
      }
   }

   // <ui_handle.png>
   public =replay= method handleInitPartFMX() {
      patch.lazyLoadInitPatch();
      patch.setPartEditVarIdx(data.current_part_idx, 0/*varIdx=Main*/);
      MontagePerformance perf <= patch.getOrCreateAndInitPerformanceVariation(data.current_part_idx, 0/*varIdx=Main*/);
      if(null != perf)
      {
         MontagePart part <= perf.getOrCreatePartByIdx(data.current_part_idx);
         MontagePartFM partFM <= perf.getOrCreatePartFMByIdx(data.current_part_idx);

         local File f;
         if(f.open("montage_init_part_fmx.bin", IOS_IN))
         {
            part.loadState(f);
            partFM.loadState(f);
            f.close();
         }

         b_force_send_all = true;
         copyToReplayPatch();
         updateUIFromPatchEx(false/*bPatchNames*/, true/*bFMMatrix*/, true/*bPartMixCopyOptions*/);
         scheduleMIDISendPatchWhenEnabled();
         Global.Print("Init FM-X part "+(data.current_part_idx+1));
      }
   }

   // <ui_handle.png>
   public =replay= method handleInitPartAWM2() {
      patch.lazyLoadInitPatch();
      patch.setPartEditVarIdx(data.current_part_idx, 0/*varIdx=Main*/);
      MontagePerformance perf <= patch.getOrCreateAndInitPerformanceVariation(data.current_part_idx, 0/*varIdx=Main*/);
      if(null != perf)
      {
         MontagePart part <= perf.getOrCreatePartByIdx(data.current_part_idx);
         MontagePartNormal partNormal <= perf.getOrCreatePartNormalByIdx(data.current_part_idx);

         local File f;
         if(f.open("montage_init_part_awm2.bin", IOS_IN))
         {
            part.loadState(f);
            partNormal.loadState(f);
            f.close();
         }

         b_force_send_all = true;
         copyToReplayPatch();
         updateUIFromPatchEx(false/*bPatchNames*/, true/*bFMMatrix*/, true/*bPartMixCopyOptions*/);
         scheduleMIDISendPatchWhenEnabled();
         Global.Print("Init AWM2 part "+(data.current_part_idx+1));
      }
   }

   // <ui_handle.png>
   public =replay= method handleInitPartDrum() {
      patch.lazyLoadInitPatch();
      patch.setPartEditVarIdx(data.current_part_idx, 0/*varIdx=Main*/);
      MontagePerformance perf <= patch.getOrCreateAndInitPerformanceVariation(data.current_part_idx, 0/*varIdx=Main*/);
      if(null != perf)
      {
         MontagePart part <= perf.getOrCreatePartByIdx(data.current_part_idx);
         MontagePartDrum partDrum <= perf.getOrCreatePartDrumByIdx(data.current_part_idx);

         local File f;
         if(f.open("montage_init_part_drum.bin", IOS_IN))
         {
            part.loadState(f);
            partDrum.loadState(f);
            f.close();
         }

         b_force_send_all = true;
         copyToReplayPatch();
         updateUIFromPatchEx(false/*bPatchNames*/, true/*bFMMatrix*/, true/*bPartMixCopyOptions*/);
         scheduleMIDISendPatchWhenEnabled();
         Global.Print("Init Drum part "+(data.current_part_idx+1));
      }
   }

   // <ui_handle.png>
   public method swapParts(int _partIdxA, _partIdxB) {
      if(_partIdxA != _partIdxB)
      {
         int origPartIdx = data.current_part_idx;
         data.current_part_idx = _partIdxA;
         handlePartCopy(1);
         data.current_part_idx = _partIdxB;
         handlePartSwapWithClipboard(1);
         data.current_part_idx = _partIdxA;
         handlePartSwapWithClipboard(1);
         data.current_part_idx = origPartIdx;
         Global.Print("Swap parts "+(_partIdxA+1)+" and "+(_partIdxB+1));
      }
   }

   // <ui_handle.png>
   public method movePartLeft() {
      if(data.current_part_idx > 0)
      {
         handlePartCopy(1);
         data.current_part_idx--;
         handlePartSwapWithClipboard(1);
         data.current_part_idx++;
         handlePartSwapWithClipboard(1);
         selectPart(data.current_part_idx - 1, false/*bAllowSolo*/, true/*bQuiet*/);
         Global.Print("Move part left");
      }
   }

   // <ui_handle.png>
   public method movePartRight() {
      if(data.current_part_idx < 15)
      {
         handlePartCopy(1);
         data.current_part_idx++;
         handlePartSwapWithClipboard(1);
         data.current_part_idx--;
         handlePartSwapWithClipboard(1);
         selectPart(data.current_part_idx + 1, false/*bAllowSolo*/, true/*bQuiet*/);
         Global.Print("Move part right");
      }
   }

   // <method.png>
   public =replay= method swapVoicedOps(int _opA, int _opB, int _paramSetMask, boolean _bSwapOpLevel) {
      Global.Debug2("EditMIDISynthFormMontage::swapVoicedOps: opA="+_opA+" opB="+_opB+" paramSetMask="+_paramSetMask+" bSwapOpLevel="+_bSwapOpLevel);

      MontagePartFMOperator opA <= getOpByIdx(_opA);
      MontagePartFMOperator opB <= getOpByIdx(_opB);

      // int bytesPerOp = (226 - 164);
      // int syxOffA = 164/*voiced op 1*/ + bytesPerOp * _opA;
      // int syxOffB = 164/*voiced op 1*/ + bytesPerOp * _opB;

      if(_paramSetMask & PARAMSET_OP_OSC)
      {
         opA.swapDataByte(opB, $09);  // spectral form
         opA.swapDataByte(opB, $01);  // keysync
         opA.swapDataByte(opB, $0A);  // frmt skirt
         opA.swapDataByte(opB, $0B);  // res
      }

      if(_paramSetMask & PARAMSET_OP_FREQ)
      {
         opA.swapDataByte(opB, $03);  // mode (fixed freq switch)
         opA.swapDataByte(opB, $04);  // freq_coarse
         opA.swapDataByte(opB, $05);  // freq_fine
         opA.swapDataByte(opB, $07);  // freq_notescl
         opA.swapDataByte(opB, $06);  // detune
      }

      if(_paramSetMask & PARAMSET_OP_PEG)
      {
         opA.swapDataByte(opB, $0C);  // feg_init_val
         opA.swapDataByte(opB, $0D);  // feg_atk_val
         opA.swapDataByte(opB, $0E);  // feg_atk_time
         opA.swapDataByte(opB, $0F);  // feg_dcy_time
      }

      if(_paramSetMask & PARAMSET_OP_AEG_LEVEL)
      {
         opA.swapDataByte(opB, $10);  // eg_l1
         opA.swapDataByte(opB, $11);  // eg_l2
         opA.swapDataByte(opB, $12);  // eg_l3
         opA.swapDataByte(opB, $13);  // eg_l4
      }

      if(_paramSetMask & PARAMSET_OP_AEG_TIME)
      {
         opA.swapDataByte(opB, $14);  // eg_t1
         opA.swapDataByte(opB, $15);  // eg_t2
         opA.swapDataByte(opB, $16);  // eg_t3
         opA.swapDataByte(opB, $17);  // eg_t4
         opA.swapDataByte(opB, $18);  // eg_hold_time
         opA.swapDataByte(opB, $19);  // eg_timescl
      }

      if(_paramSetMask & PARAMSET_OP_LEVELSCL)
      {
         if(_bSwapOpLevel)
            opA.swapDataByte(opB, $1A);         // lvlscl_total (op level)
         opA.swapDataByte(opB, $1B);       // lvlscl_breakpoint
         opA.swapDataByte(opB, $1C);       // lvlscl_left_depth
         opA.swapDataByte(opB, $1D);       // lvlscl_right_depth
         opA.swapDataByte(opB, $1E);       // lvlscl_left_curve
         opA.swapDataByte(opB, $1F);       // lvlscl_right_curve
      }

      if(_paramSetMask & PARAMSET_OP_SENSE)
      {
         // opA.swapDataByte(opB, $1F);  // freq_bias_sense
         opA.swapDataByte(opB, $23);  // pitch_mod_sense
         opA.swapDataByte(opB, $21);  // freq_mod_sense
         opA.swapDataByte(opB, $1F);  // freq_vel_sense
         opA.swapDataByte(opB, $24);  // amp_mod_sense
         opA.swapDataByte(opB, $20);  // amp_vel_sense
         // opA.swapDataByte(opB, $1F);  // eg_bias_sense
      }

      copyToReplayPatch();
      scheduleMIDISendPatchWhenEnabled();
   }

   // <method.png>
   public method swapVoicedOpsByArray(IntArray _mapOld, IntArray _mapNew, IntArray _opMapFPToOp, int _paramSetMask, boolean _bSwapOpLevel) {
      Global.Debug2("EditMIDISynthFormMontage::swapVoicedOpsByArray: mapOld="+_mapOld+" mapNew="+_mapNew+" paramSetMask="+_paramSetMask);
      if(_mapOld.numElements == _mapNew.numElements)
      {
         int idx = 0;
         loop(_mapNew.numElements)
         {
            int opCur = _mapOld[idx];
            int opNew = _mapNew[idx];
            // trace "xxx idx="+idx+" opCur="+opCur+" opNew="+opNew;
            int idxOpCur;
            int idxOpNew;
            if(opCur != opNew)
            {
               // Swap op
               swapVoicedOps(opCur, opNew, _paramSetMask, _bSwapOpLevel);

               if(null != _opMapFPToOp)
               {
                  idxOpCur = _opMapFPToOp.indexOf(opCur, 0);
                  idxOpNew = _opMapFPToOp.indexOf(opNew, 0);
                  _opMapFPToOp[idxOpCur] = opNew;
                  _opMapFPToOp[idxOpNew] = opCur;
               }

               idxOpNew = _mapOld.indexOf(opNew, 0);
               if(-1 != idxOpNew)
               {
                  _mapOld[idxOpNew] = opCur;
               }
               _mapOld[idx] = opNew;

               // trace "    mapOld="+_mapOld;
               // trace "    mapNew="+_mapNew;
            }

            idx++;
         }
      }

      copyToReplayPatch();
   }

   // <ui_handle.png>
   protected method handlePatchCopyFX() {

      patch_clipboard.copyFrom(patch);

      Global.Print("Copy patch FX to clipboard");
   }

   // <ui_handle.png>
   protected =replay= method handlePatchPasteFX() {

      patch.copyFrom(patch_clipboard);

      copyToReplayPatch();
      updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
      scheduleMIDISendPatchWhenEnabled();

      Global.Print("Paste patch FX from clipboard");
   }

   // <ui_handle.png>
   protected =replay= method handleResetPartQuickEdit() {
      MontagePerformance perf <= patch.getEditPerformance(data.current_part_idx);
      if(null != perf)
      {
         if(perf.b_init)
         {
            MontagePart p <= perf.getPartByIdx(data.current_part_idx);
            if(null != p)
            {
               p.resetQuickEdit();

               copyToReplayPatch();
               scheduleMIDISendPatchWhenEnabled();
               updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);

               Global.Print("Reset current part variation quick-edit controls");
            }
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleResetPerformanceQuickEdit() {
      int varIdx = 0;
      loop(16)
      {
         MontagePerformance perf <= patch.performances.get(varIdx);
         if(null != perf)
         {
            if(perf.b_init)
            {
               perf.common.resetQuickEdit();
            }
         }
         varIdx++;
      }

      copyToReplayPatch();
      updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
      scheduleMIDISendPatchWhenEnabled();

      Global.Print("Reset performance quick-edit controls");
   }

   // <ui_handle.png>
   protected =replay= method handleResetAllKbdCtl() {
      int varIdx = 0;
      loop(16)
      {
         MontagePerformance perf <= patch.performances.get(varIdx);
         if(null != perf)
         {
            if(perf.b_init)
            {
               perf.resetAllKbdCtl();
            }
         }
         varIdx++;
      }

      copyToReplayPatch();
      updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
      scheduleMIDISendPatchWhenEnabled();

      Global.Print("Reset kbdctl (all parts, all variations)");
   }

   // <ui_handle.png>
   protected =replay= method handleAllPartsVolExpOff() {
      int varIdx = 0;
      loop(16)
      {
         MontagePerformance perf <= patch.performances.get(varIdx);
         if(null != perf)
         {
            if(perf.b_init)
            {
               perf.allPartsVolExpOff();
            }
         }
         varIdx++;
      }

      copyToReplayPatch();
      scheduleMIDISendPatchWhenEnabled();
      updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);

      Global.Print("Disable Vol/Exp (all parts, all variations)");
   }

   // <ui_handle.png>
   protected =replay= method handlePatchInit() {

      patch.loadInitPatch();

      copyToReplayPatch();
      updateUIFromPatch();

      if(replay.b_playing)
         b_force_send_all = true;
      clearMIDICache();

      TKS.sleep(30);

      scheduleMIDISendPatchWhenEnabled();

      Global.Print("Initialize patch");
   }

   // <method.png>
   public virtual initBank(int _idx) {
      // called via PageSysEx::handlePageCmdInitBank()
      if(0 <= _idx <= num_banks)
      {
         int patchIdx = _idx * num_programs_per_bank;
         loop(num_programs_per_bank)
         {
            Montage_Patch p <= data.patches.get(patchIdx);
            p.loadInitPatch();
            patchIdx++;
         }
         copyToReplayPatch();
         updateUIFromPatch();
      }
   }

   // // // <ui_handle.png>
   // // protected method handlePatchProxyFollowChanged() {
   // //    b_patch_proxy_follow = cb_patch_proxy_follow.isSelected();
   // //    Global.PrintFast("Proxy follow is "+Utils.GetEnableString(b_patch_proxy_follow));

   // //    if(b_patch_proxy_follow)
   // //    {
   // //       // // queued_midi_patch_nr = proxy_bank * 128 + proxy_program;
   // //       // scheduleMIDISend();
   // //    }
   // // }

   // <ui_handle.png>
   protected method handlePatchProxyLockChanged() {
      b_patch_proxy_lock = cb_patch_proxy_lock.isSelected();
      Global.PrintFast("Proxy lock is "+Utils.GetEnableString(false != b_patch_proxy_lock)+((maybe == b_patch_proxy_lock) ? " (edit proxy patch only)":""));
   }

   // <ui_handle.png>
   protected =replay= method handlePatchProxyResetChanged() {
      data.b_proxy_reset = cb_patch_proxy_reset.isSelected();
      Global.PrintFast("Proxy reset is "+Utils.GetEnableString(data.b_proxy_reset));
   }

   // <replay.png>
   public method handleProxyLayerPrgChg(byte          _midiCh,
                                        IntArray      _layerPrgChg/*16 elements*/,
                                        MIDIPipeFrame _frameOut
                                        ) {

      if(!b_patch_proxy_lock)
      {
         int partIdx = 0;
         boolean bChanged = false;
         loop(16)
         {
            int varIdx = _layerPrgChg.get(partIdx);
            if(-1 != varIdx)
            {
               varIdx &= 15;
               if(data.getReplayPartVarIdx(partIdx) != varIdx)
               {
                  data.setReplayPartVarIdx(partIdx, varIdx & 15);
                  proxy_layer_diff_part_mask |= (1 << partIdx);
                  bChanged = true;
               }
            }
            partIdx++;
         }

         if(bChanged)
         {
            getReplayPerformances(proxy_layer_diff_performances);
            b_proxy_layer_diff_sound = true;
            // trace "xxx layer1 perf="+#(proxy_layer_diff_performances.get(0));
         }
      }
   }

   // <replay.png>
   boolean b_queued_emit_diff;
   public virtual handleProxyEvents(byte          _midiCh,
                                    MIDIPipeFrame _frameIn,
                                    boolean       _bFrameRec,
                                    int           _inDev,
                                    byte          _inCh,
                                    MIDIPipeFrame _frameOut
                                    ) {
      // Called from replay thread (at end of NodeProxy tick)
      byte midiCh;
      MontagePerformance *replayPerf;
      MontagePerformance *patchPerf;
      MontagePartFM *replayPartFM;
      MontagePartFM *patchPartFM;
      MontagePartFM *morphPartFM;
      byte varIdx;
      boolean bChanged = false;

      // Virtual RPNs: fm_aeg_scl
      if(_frameIn.getNumEventsRPNByFlt(_inDev, -1) > 0)
      {
         // trace "xxx Montage: have RPN "+rand(9999);
         midiCh = 0;
         IntArray replayPartVarIndices <= data.replay_part_var_indices;
         loop(16)
         {
            varIdx = replayPartVarIndices.get(midiCh);
            replayPerf <= replay_patch.getPerformanceVariation(varIdx);
            patchPerf  <= patch.getPerformanceVariation(varIdx);
            if(null != replayPerf && null != patchPerf)
            {
               replayPartFM <= replayPerf.getPartFMByIdx(midiCh);
               patchPartFM  <= patchPerf.getPartFMByIdx(midiCh);
               if(null != replayPartFM && null != patchPartFM)
               {
                  morphPartFM  <= soundmix_perf.parts_fm.get(midiCh);
                  boolean bMorph = false;

                  // AEG Scaling (RPN#1000)
                  float fmAEGScl = _frameIn.getFilteredRPN(_inDev, midiCh, 1000/*fm_aeg_scl*/);

                  // FM SoundMix (RPN#1001 + RPN#1002)
                  float fmSoundX = _frameIn.getFilteredRPN(_inDev, midiCh, 1001/*fm_soundmix_x*/);
                  float fmSoundY = _frameIn.getFilteredRPN(_inDev, midiCh, 1002/*fm_soundmix_y*/);

                  if(fmSoundX >= 0.0f)
                  {
                     // trace "xxx fmSoundX="+fmSoundX+" "+rand(9999);
                     replayPartFM.replay_soundmix_x = mathClampf(fmSoundX / 127.0, 0.0f, 1.0f);
                  }

                  if(fmSoundY >= 0.0f)
                     replayPartFM.replay_soundmix_y = mathClampf(fmSoundY / 127.0, 0.0f, 1.0f);

                  if( (replayPartFM.replay_soundmix_x_last != replayPartFM.replay_soundmix_x) ||
                      (replayPartFM.replay_soundmix_y_last != replayPartFM.replay_soundmix_y)
                      )
                  {
                     replayPartFM.replay_soundmix_x_last = replayPartFM.replay_soundmix_x;
                     replayPartFM.replay_soundmix_y_last = replayPartFM.replay_soundmix_y;

                     if(morphPartFM.realtimeFMSoundMix(patch.getPerformanceVariation(0)/*lt*/,
                                                       patch.getPerformanceVariation(1)/*rt*/,
                                                       patch.getPerformanceVariation(2)/*rb*/,
                                                       patch.getPerformanceVariation(3)/*lb*/,
                                                       replayPartFM.replay_soundmix_x,
                                                       replayPartFM.replay_soundmix_y
                                                       ))
                     {
                        proxy_layer_diff_part_mask |= (1 << midiCh);
                        bChanged = true;
                        morphPartFM.b_soundmix_cache_valid = true;  // will be reset in handleProxyReset()
                        morphPartFM.op_valid_mask = 255;
                        bMorph = true;
                     }
                  }

                  if(fmAEGScl >= 0.0f)
                  {
                     MontagePartFM aegSclInputPartFM <= morphPartFM.b_soundmix_cache_valid ? morphPartFM : patchPartFM;

                     // 0..255 => -9..9
                     replayPartFM.replaySetAEGScale( (9.0f * (fmAEGScl - 128)) / 127.0f );  // 0..255 => -9..9

                     // // if(replayPartFM.replayApplyAEGScale(patchPartFM))
                     if(bMorph || (replayPartFM.replay_aeg_scl != replayPartFM.replay_aeg_scl_last))
                     {
                        replayPartFM.replayApplyAEGScale(aegSclInputPartFM, replayPartFM.replay_aeg_scl, replayPartFM.aeg_scl_exp);
                        replayPartFM.replay_aeg_scl_last = replayPartFM.replay_aeg_scl;
                        proxy_layer_diff_part_mask |= (1 << midiCh);
                        bChanged = true;
                        // trace "xxx handleProxyEvents: part "+(midiCh+1)+" morphPartFM.b_soundmix_cache_valid="+morphPartFM.b_soundmix_cache_valid+" fmAEGScl="+replayPartFM.replay_aeg_scl;
                     }
                  }
                  else if(bMorph)
                  {
                     // copy morph result to replayPart
                     replayPartFM.copyFromEx(morphPartFM, false/*bCopyLastSoundMix*/);

                     if(replayPartFM.replay_aeg_scl != 0.0f)
                     {
                        // Re-apply AEG scaling
                        replayPartFM.replayApplyAEGScale(morphPartFM, replayPartFM.replay_aeg_scl, replayPartFM.aeg_scl_exp);
                        // trace "xxx handleProxyEvents: part "+(midiCh+1)+" reapply fmAEGScl="+replayPartFM.replay_aeg_scl+" fmAEGSclExp="+replayPartFM.aeg_scl_exp;
                     }
                  }
               }
            }

            midiCh++;
         }
      }

      b_queued_emit_diff |= bChanged;

      // (note) NodeProxy calls this method twice: first for framePlay, then for frameRec
      //         => emit diff only in second call
      if(_bFrameRec)
      {
         if(b_queued_emit_diff)
         {
            b_queued_emit_diff = false;
            getReplayPerformances(proxy_layer_diff_performances);
            b_proxy_layer_diff_sound = true;
         }

         // Send update
         if((0 != proxy_layer_diff_part_mask) && (null != out_dev))
         {
            MIDIPipeFrame frOut;
            frOut.empty();
            int flags = b_proxy_layer_diff_sound
               ? G_SOUND
               : (data.group_mask & ~(G_SYSTEM|G_SEQSETUP|G_MICROTUNE|G_NAME|G_MSEQ|G_ARP|G_SUPERKNOB|G_KNOBNAME|G_SCENE|G_AUDIO|G_AUDITION|G_MEQ|G_MFX|G_TEMPO));
            int numDiffsLeft = MontagePerformance.SendPerformanceIndexed(proxy_layer_diff_performances,
                                                                         replay_perf,
                                                                         false/*bHeader*/,
                                                                         out_dev,
                                                                         false/*bSendAll*/,
                                                                         proxy_layer_diff_part_mask,
                                                                         flags/*groupMask*/,
                                                                         data.current_part_idx,
                                                                         data.opv_mute_mask,
                                                                         data.b_solo_part,
                                                                         frOut,
                                                                         replay.b_playing
                                                                            ? STConfig.pagesysex_montage_max_diffs_replay
                                                                            : STConfig.pagesysex_montage_max_diffs_idle/*numDiffsLeft*/
                                                                         );
            // trace "xxx handleProxyEvents: numDiffsLeft="+numDiffsLeft+" frOut.numEvents="+frOut.numEvents;
            if(!frOut.hasEvents())
            {
               if(b_proxy_layer_diff_sound)
               {
                  b_proxy_layer_diff_sound = false;
                  // now send remaining (lower priority) groups (if any are selected)
               }
               else
               {
                  proxy_layer_diff_part_mask = 0;
               }
            }
            else
            {
               _frameOut.mergeFrame(frOut);
            }

         } // if proxy_layer_diff_part_mask
      } // if bFrameRec
   }

   // <replay.png>
   public virtual handleProxyNotes(int _autoDevFlt, int _autoChFlt, MIDIPipeFrame _frame, boolean _bMuted) {
      // Forward events to actual synth device
      //  (note) all types except for RPN
      if(_frame.numEvents > 0)
      {
         IntArray mch <= data.multi_midi_ch;
         if(!mch.isEmpty() && (null != out_dev))
         {
            MIDIPipeFrame frOut; frOut.empty();
            byte partCh;
            byte layerCh;
            partCh = 0;
            loop(mch.numElements)
            {
               layerCh = mch.get(partCh);
               // (note) merge notes + CC
               frOut.mergeFrameFltDst(_frame,
                                      _autoDevFlt/*fltDev*/,
                                      layerCh/*fltCh*/,
                                      out_dev.dev_idx/*dstDev*/,
                                      partCh/*dstCh*/,
                                      true/*bMergeNotes*/,
                                      false/*bMergeRPN*/
                                      );
               // trace "xxx mirror layerCh="+layerCh+" to partCh="+partCh+" => frOut.numEvents="+frOut.numEvents;
               partCh++;
            }

            if(_bMuted)
            {
               frOut.deleteNoteOnsByFlt(-1, -1);
            }
            // trace "xxx bMuted="+_bMuted+" frOut.numEvents="+frOut.numEvents;
            _frame.mergeFrame(frOut);

         }
      }
   }

   // <midi.png>
   public =replay= method clearMIDICache() {
      if(null != out_dev)
      {
         current_pipe_root.clearMIDICacheForDev(out_dev.dev_idx);
         Global.Debug2("Montage::clearMIDICache");
      }
   }

   // <method_get.png>
   public virtual getBankNames() : StringArray {
      // overwrites EditMIDISynthForm::getBankNames()
      local StringArray ret;
      int bankNr = 1;
      loop(num_banks - 1)
      {
         ret.add("Bank "+(bankNr++));
      }
      ret.add("Project Bank 16");
      return deref ret;
   }

   // <method_get.png>
   public virtual getProgramNames(int _bankIdx) : StringArray {
      if(b_first_rebuild_patch_names)
         rebuildPatchNames();
      // overwrites EditMIDISynthForm::getProgramNames()
      StringArray allPatchNames <= cf_patch_nr.getOptions();
      local StringArray ret;
      int patchIdx = _bankIdx * 128;
      loop(128)
      {
         ret.add(allPatchNames.get(patchIdx++));
      }
      return deref ret;
   }

   // <method_get.png>
   public method isEditPartFM() : boolean {
      MontagePerformance perf <= patch.getEditPerformance(data.current_part_idx);
      if(null != perf)
      {
         MontagePartFM partFM <= perf.getPartFMByIdx(data.current_part_idx);
         return (null != partFM);
      }
      return false;
   }

   // <method.png>
   public /*=replay=*/ method copyOpVToClipboard(int _opIdx) {

      MontagePerformance perf <= patch.getEditPerformance(data.current_part_idx);
      if(null != perf)
      {
         MontagePartFM partFM <= getEditPartFM();
         if(null != partFM)
         {
            if(null == voiced_op_clipboard)
            {
               voiced_op_clipboard <= new MontagePartFMOperator;
               voiced_op_clipboard.init(0/*partIdx*/, 0);
            }

            MontagePartFMOperator op <= partFM.getOpByIdx(_opIdx);
            voiced_op_clipboard.copyFrom(op);

            Global.Print("Copy voiced op "+(_opIdx+1)+" to clipboard");
            return true;
         }
      }

      voiced_op_clipboard <= null;
   }

   // <method.png>
   public =replay= method pasteOpVClipboard(int _opIdx) : boolean {
      if(null != voiced_op_clipboard)
      {
         MontagePerformance perf <= patch.getEditPerformance(data.current_part_idx);
         if(null != perf)
         {
            MontagePartFM partFM <= getEditPartFM();
            if(null != partFM)
            {
               MontagePartFMOperator op <= partFM.getOpByIdx(_opIdx);
               op.copyFrom(voiced_op_clipboard);

               copyToReplayPatch();
               updateUIFromPatchEx(false/*bPatchNames*/, true/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
               scheduleMIDISendPatchWhenEnabled();

               Global.Print("Paste clipboard to Op "+(_opIdx+1));
               return true;
            }
         }
      }
      return false;
   }

   // <method.png>
   protected =replay= method swapOpVWithClipboard(int _opIdx) {
      if(null != voiced_op_clipboard)
      {
         MontagePerformance perf <= patch.getEditPerformance(data.current_part_idx);
         if(null != perf)
         {
            MontagePartFM partFM <= getEditPartFM();
            if(null != partFM)
            {
               MontagePartFMOperator t <= new MontagePartFMOperator;
               t.init(0/*partIdx*/, 0/*opIdx*/);

               MontagePartFMOperator op <= partFM.getOpByIdx(_opIdx);
               t.copyFrom(op);
               op.copyFrom(voiced_op_clipboard);
               voiced_op_clipboard.copyFrom(t);

               copyToReplayPatch();
               updateUIFromPatchEx(false/*bPatchNames*/, true/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
               scheduleMIDISendPatchWhenEnabled();

               Global.Print("Swap clipboard and Op "+(_opIdx+1));
               return true;
            }
         }
      }
      return false;
   }

   // <method.png>
   public /*=replay=*/ method copyElementToClipboard(int _elementIdx) {

      MontagePerformance perf <= patch.getEditPerformance(data.current_part_idx);
      if(null != perf)
      {
         MontagePartNormal partNormal <= getEditPartNormal();
         if(null != partNormal)
         {
            if(null == element_clipboard)
            {
               element_clipboard <= new MontagePartNormalElement;
               element_clipboard.init(0/*partIdx*/, 0/*elementIdx*/);
            }

            MontagePartNormalElement el <= partNormal.getElementByIdx(_elementIdx);
            element_clipboard.copyFrom(el);

            Global.Print("Copy element "+(_elementIdx+1)+" to clipboard");
            return true;
         }
      }

      element_clipboard <= null;
   }

   // <method.png>
   public =replay= method pasteElementClipboard(int _elementIdx) : boolean {
      if(null != element_clipboard)
      {
         MontagePerformance perf <= patch.getEditPerformance(data.current_part_idx);
         if(null != perf)
         {
            MontagePartNormal partNormal <= getEditPartNormal();
            if(null != partNormal)
            {
               MontagePartNormalElement el <= partNormal.getElementByIdx(_elementIdx);
               el.copyFrom(element_clipboard);

               copyToReplayPatch();
               updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
               scheduleMIDISendPatchWhenEnabled();

               Global.Print("Paste clipboard to Element "+(_elementIdx+1));
               return true;
            }
         }
      }
      return false;
   }

   // <method.png>
   protected =replay= method swapElementWithClipboard(int _elementIdx) {
      if(null != element_clipboard)
      {
         MontagePerformance perf <= patch.getEditPerformance(data.current_part_idx);
         if(null != perf)
         {
            MontagePartNormal partNormal <= getEditPartNormal();
            if(null != partNormal)
            {
               MontagePartNormalElement t <= new MontagePartNormalElement;
               t.init(0/*partIdx*/, 0/*elementIdx*/);

               MontagePartNormalElement el <= partNormal.getElementByIdx(_elementIdx);
               t.copyFrom(el);
               el.copyFrom(element_clipboard);
               element_clipboard.copyFrom(t);

               copyToReplayPatch();
               updateUIFromPatchEx(false/*bPatchNames*/, false/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
               scheduleMIDISendPatchWhenEnabled();

               Global.Print("Swap clipboard and Element "+(_elementIdx+1));
               return true;
            }
         }
      }
      return false;
   }

   // <method.png>
   protected method copyOpOrElementToClipboard() {
      int tabIdx = ts_groups.getActiveTabIndex();
      int off;
      int idx;
      if(TAB_V1 <= tabIdx <= TAB_V8)
      {
         idx = tabIdx - TAB_V1;
         if(null != getEditPartFM())
         {
            copyOpVToClipboard(idx);
         }
         else if(null != getEditPartNormal())
         {
            copyElementToClipboard(idx);
         }
      }
   }

   // <method.png>
   protected =replay= method pasteOpOrElementClipboard() {
      int tabIdx = ts_groups.getActiveTabIndex();
      int off;
      int idx;
      if(TAB_V1 <= tabIdx <= TAB_V8)
      {
         idx = tabIdx - TAB_V1;
         if(null != getEditPartFM())
         {
            pasteOpVClipboard(idx);
         }
         else if(null != getEditPartNormal())
         {
            pasteElementClipboard(idx);
         }
      }
   }

   // <method.png>
   protected =replay= method swapOpOrElementWithClipboard() {
      int tabIdx = ts_groups.getActiveTabIndex();
      int off;
      int idx;
      if(TAB_V1 <= tabIdx <= TAB_V8)
      {
         idx = tabIdx - TAB_V1;
         if(null != getEditPartFM())
         {
            swapOpVWithClipboard(idx);
         }
         else if(null != getEditPartNormal())
         {
            swapElementWithClipboard(idx);
         }
      }
   }

   // <method.png>
   public method copyPFXToClipboard() {
      MontagePart p <= getEditPart();
      if(null != p)
      {
         pfx_clipboard <= MontagePart.New(0/*partIdx,ignored*/);
         pfx_clipboard.copyFrom(p);

         Global.Print("Copy part variation FX to clipboard");
      }
   }

   // <method.png>
   public =replay= method pastePFXFromClipboard() {
      if(null != pfx_clipboard)
      {
         MontagePart p <= getEditPart();
         if(null != p)
         {
            p.copyPFX(pfx_clipboard);
            p.copyDataEx(pfx_clipboard.data, MontageDefs.G_PFX);

            copyToReplayPatch();
            scheduleMIDISendPatchWhenEnabled();

            f_insert_a.showInsert();
            f_insert_b.showInsert();

            Global.Print("Paste part variation FX from clipboard");
         }
      }
   }

   // <method.png>
   public =replay= method swapPFX() {
      MontagePart p <= getEditPart();
      if(null != p)
      {
         p.swapPFX();

         copyToReplayPatch();
         scheduleMIDISendPatchWhenEnabled();

         f_insert_a.showInsert();
         f_insert_b.showInsert();

         Global.Print("Swap part variation FX");
      }
   }

   // <ui_handle.png>
   protected method handleCtlVarChanged(boolean _bAllParts) {
      selectVariation(cm_ctl_var.getSelectedOption(), _bAllParts);
   }

   // <method.png>
   public method copyPCtlToClipboard() {
      MontagePerformance p <= patch.getEditPerformance(data.current_part_idx);
      if(null != p)
      {
         pctl_clipboard <= MontagePerformance.New();
         pctl_clipboard.copyFrom(p);

         if(0 != data.current_part_idx)
         {
            // Copy pctl settings to first part
            pctl_clipboard.syncPerformance(0/*partIdx*/,
                                           pctl_clipboard,
                                           data.current_part_idx/*srcPartIdx*/,
                                           false/*bLevel*/,
                                           true/*bCtl*/,
                                           false/*bPEQ*/,
                                           false/*bPFX*/,
                                           false/*bPMSEQ*/,
                                           false/*bMFX*/
                                           );
         }

         Global.Print("Copy part variation CTL to clipboard");
      }
   }

   // <method.png>
   public =replay= method pastePCtlFromClipboard() {
      if(null != pctl_clipboard)
      {
         MontagePerformance p <= patch.getEditPerformance(data.current_part_idx);
         if(null != p)
         {
            p.syncPerformance(data.current_part_idx,
                              pctl_clipboard,
                              0/*srcPartIdx*/,
                              false/*bLevel*/,
                              true/*bCtl*/,
                              false/*bPEQ*/,
                              false/*bPFX*/,
                              false/*bPMSEQ*/,
                              false/*bMFX*/
                              );

            copyToReplayPatch();
            updatePartCtlForms();
            scheduleMIDISendPatchWhenEnabled();

            Global.Print("Paste part variation CTL from clipboard");
         }
      }
   }

   // <method_get.png>
   public method getPartByIdx(int _partIdx) : MontagePart {
      MontagePerformance perf <= patch.getEditPerformance(_partIdx);
      if(null != perf)
      {
         MontagePart part <= perf.getPartByIdx(_partIdx);
         return part;
      }
      return null;
   }

   // <method_get.png>
   public method getEditPart() : MontagePart {
      return getPartByIdx(data.current_part_idx);
   }

   // <method_get.png>
   public method getPartFMByIdx(int _partIdx) : MontagePartFM {
      MontagePerformance perf <= patch.getEditPerformance(_partIdx);
      if(null != perf)
      {
         MontagePartFM partFM <= perf.getPartFMByIdx(_partIdx);
         return partFM;
      }
      return null;
   }

   // <method_get.png>
   public method getPartNormalByIdx(int _partIdx) : MontagePartNormal {
      MontagePerformance perf <= patch.getEditPerformance(_partIdx);
      if(null != perf)
      {
         MontagePartNormal partNormal <= perf.getPartNormalByIdx(_partIdx);
         return partNormal;
      }
      return null;
   }

   // <method_get.png>
   public method getPartDrumByIdx(int _partIdx) : MontagePartDrum {
      MontagePerformance perf <= patch.getEditPerformance(_partIdx);
      if(null != perf)
      {
         MontagePartDrum partDrum <= perf.getPartDrumByIdx(_partIdx);
         return partDrum;
      }
      return null;
   }

   // <method_get.png>
   public method getEditPartFM() : MontagePartFM {
      return getPartFMByIdx(data.current_part_idx);
   }

   // <method_get.png>
   public method getEditPartNormal() : MontagePartNormal {
      return getPartNormalByIdx(data.current_part_idx);
   }

   // <method_get.png>
   public method getEditPartDrum() : MontagePartDrum {
      return getPartDrumByIdx(data.current_part_idx);
   }

   // <method_get.png>
   public method getPerformanceByPatchAndVariation(int _patchIdx, int _varIdx) : MontagePerformance {
      Montage_Patch p <= data.patches.get(_patchIdx);
      if(null != p)
      {
         MontagePerformance perf <= p.getPerformanceVariation(_varIdx);
         return perf;
      }
      return p;
   }

   // <method_set.png>
   public method setPartVolume(byte _partIdx, byte _vol) {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePart part <= p.getPartByIdx(_partIdx);
      if(null != part)
      {
         part.setVolume(_vol);
      }
   }

   // <method_get.png>
   public method getPartVolume(byte _partIdx) : byte {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePart part <= p.getPartByIdx(_partIdx);
      if(null != part)
      {
         return part.getVolume();
      }
      return 0;
   }

   // <method_set.png>
   public method setPartNoteShift(byte _partIdx, byte _noteShift) {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePart part <= p.getPartByIdx(_partIdx);
      if(null != part)
      {
         part.setNoteShift(_noteShift);
      }
   }

   // <method_get.png>
   public method getPartNoteShift(byte _partIdx) : byte {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePart part <= p.getPartByIdx(_partIdx);
      if(null != part)
      {
         return part.getNoteShift();
      }
      return 0;
   }

   // <method_set.png>
   public method setAlgorithm(int _algorithm) {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePartFM partFM <= p.getPartFMByIdx(data.current_part_idx);
      if(null != partFM)
      {
         partFM.setAlgorithm(_algorithm);
         handleParamEdited();
      }
   }

   // <method_get.png>
   public method getAlgorithm() : byte {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePartFM partFM <= p.getPartFMByIdx(data.current_part_idx);
      if(null != partFM)
      {
         return partFM.getAlgorithm();
      }
      return 0;
   }

   // <method_set.png>
   public method setFeedback(int _fb) {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePartFM partFM <= p.getPartFMByIdx(data.current_part_idx);
      if(null != partFM)
      {
         partFM.setFeedback(_fb);
         handleParamEdited();
      }
   }

   // <method_get.png>
   public method getFeedback() : byte {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePartFM partFM <= p.getPartFMByIdx(data.current_part_idx);
      if(null != partFM)
      {
         return partFM.getFeedback();
      }
      return 0;
   }

   // <method_get.png>
   public method getOpByIdx(int _opIdx) : MontagePartFMOperator {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePartFM partFM <= p.getPartFMByIdx(data.current_part_idx);
      if(null != partFM)
      {
         MontagePartFMOperator op <= partFM.getOpByIdx(_opIdx);
         return op;
      }
      return null;
   }

   // <method_set.png>
   public method setOpLevel(int _opIdx, byte _lvl) {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePartFM partFM <= p.getPartFMByIdx(data.current_part_idx);
      if(null != partFM)
      {
         MontagePartFMOperator op <= partFM.getOpByIdx(_opIdx);
         op.setLevel(_lvl);
         handleParamEdited();
      }
   }

   // <method_get.png>
   public method getOpLevel(int _opIdx) : byte {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePartFM partFM <= p.getPartFMByIdx(data.current_part_idx);
      if(null != partFM)
      {
         MontagePartFMOperator op <= partFM.getOpByIdx(_opIdx);
         return op.getLevel();
      }
      return 0;
   }

   // <method_set.png>
   public method setAEGSclExp(float _exp) {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePartFM partFM <= p.getPartFMByIdx(data.current_part_idx);
      if(null != partFM)
      {
         partFM.setAEGSclExp(_exp);

         copyToReplayPatch();  // (todo) optimize (currently copies entire patch)
      }
   }

   // <method_get.png>
   public method getAEGSclExp() : float {
      MontagePerformance p <= patch.getOrCreateEditPerformance(data.current_part_idx, true/*bLazyInit*/);
      MontagePartFM partFM <= p.getPartFMByIdx(data.current_part_idx);
      if(null != partFM)
      {
         return partFM.getAEGSclExp();
      }
      return 20.0f;
   }

   // <ui_show.png>
   public method showEGMixer() {
      Montage_PartForm fPart <= part_forms[data.current_part_idx];
      fPart.showEGPresetDialog();
   }

   // <ui_show.png>
   public method showFMSoundMixer() {
      Montage_PartForm fPart <= part_forms[data.current_part_idx];
      fPart.showFMSoundMixerDialog();
   }

   // <ui_handle.png>
   protected =replay= method handleForcedPartOutputChanged() {
      byte opt = cm_forced_part_output.getSelectedOption() - 1;
      if(1 == opt)
         opt = 8;
      MMontagePerformance.SetForcedPartOutput(opt);
      Global.Print("Forced part output is "+cm_forced_part_output.getSelectedOptionName());
      scheduleMIDISendPatchWhenEnabled();
   }

   // <ui_handle.png>
   protected =replay= method handleSliderModeChanged() {
      data.slider_mode = cm_slider_mode.getSelectedOption();
      Global.Print("Slider Mode is "+cm_slider_mode.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected =replay= method handlePartVarKeySelectChanged() {
      data.b_part_var_key_select = cb_part_var_key.isSelected();
      Global.Print("Part / Variation Key Select is "+Utils.GetEnableString(data.b_part_var_key_select));
   }

   // <ui_handle.png>
   protected =replay= method handlePartKeySoloChanged() {
      data.b_part_key_solo = cb_part_key_solo.isSelected();
      Global.Print("Part Key Allow Solo is "+Utils.GetEnableString(data.b_part_key_solo));
   }

   // <ui_handle.png>
   protected =replay= method handleRedirectAKChanged() {
      data.b_redirect_ak_to_current_part = cb_redirect_ak.isSelected();
      Global.Print("Redirect Assignable Knobs to SW edit part is "+Utils.GetEnableString(data.b_redirect_ak_to_current_part));
   }

   // <ui_handle.png>
   protected =replay= method handleModelChanged() {
      STConfig.b_pagesysex_modx = cm_model.getSelectedOption();
      Global.Print("Model is "+cm_model.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected =replay= method handleFXModeChanged() {
      data.fx_mode = cm_fx_mode.getSelectedOption();
      MMontagePerformance.SetFXMode(data.fx_mode);
      scheduleMIDISendPatchWhenEnabled();
      Global.Print("FX mode is \""+cm_fx_mode.getSelectedOptionName()+"\"");
   }

   // <ui_update.png>
   protected method updateVarSceneOptions() {
      int varSceneNr = 1;
      Montage_VariationScene *vs;
      local StringArray opt;
      local StringArray optLong;
      foreach vs in patch.variation_scenes
      {
         opt.add(varSceneNr+": "+vs.name);
         if(vs.hasDefaultsPartsOnly())
         {
            optLong.add(varSceneNr+": "+vs.name+"\t<def>");
         }
         else
         {
            optLong.add(varSceneNr+": "+vs.name);
         }

         varSceneNr++;
      }
      cf_varscene.setOptions(opt);
      cf_varscene.setOptionsLong(optLong);
   }

   // <ui_update.png>
   protected method updateVarScenePartOptions() {
      local StringArray opt;
      int partIdx = 0;
      Montage_VariationScene vs <= patch.getEditVariationScene();
      IntArray vsParts <= vs.part_variations;
      loop(16)
      {
         ComboBox cmPart <= a_varscenes[partIdx];
         int varIdx = 0;
         opt.empty();
         opt.add("<keep>");
         loop(16)
         {
            MontagePerformance perf <= patch.getPerformanceVariationOrNull(varIdx);
            if(null != perf)
            {
               MontagePart p <= perf.getPartByIdx(partIdx);
               if(null != p)
               {
                  opt.add((varIdx+1)+": "+p.getName());
               }
               else
               {
                  opt.add((varIdx+1)+": -");
               }
            }
            else
            {
               opt.add((varIdx+1)+": -");
            }

            varIdx++;
         }

         cmPart.setOptionsLong(opt);
         cmPart.setSelectedOption(vsParts.get(partIdx) + 1);

         partIdx++;
      }
   }

   // <ui_handle.png>
   protected method handleVarSceneNameChanged() {

      // Sanitize ComboField text / option name
      Montage_VariationScene vs <= patch.getEditVariationScene();
      local String sOpt <= cf_varscene.getSelectedOptionName();
      local String s;
      int idx = sOpt.indexOf(":", 0);
      boolean bFind = true;
      if(idx >= 0)
      {
         // "12: my scene"
         sOpt.substring(idx+1, 12) => s;
         s.trim();
         if(!s.isBlank())
         {
            vs.name = s;
            updateVarSceneOptions();
            Global.Print("Variation Scene "+(vs.scene_idx+1)+" name is \""+vs.name+"\"");
         }
      }
      else
      {
         sOpt.trim();
         vs.name = s;
         updateVarSceneOptions();
         Global.Print("Variation Scene "+(vs.scene_idx+1)+" name is \""+vs.name+"\"");
      }
   }

   // <ui_handle.png>
   protected method handleVarSceneChanged() {

      patch.edit_variation_scene = cf_varscene.getSelectedOption();

      if(-1 != inject_frame_rec_dev_idx)
      {
         MIDIPipeFrame frRec; frRec.empty();
         frRec.rpn(true/*bSet*/,
                   inject_frame_rec_dev_idx,
                   inject_frame_rec_midi_ch,
                   /*NodeProxy*/Node.RPN_PROXY_PROGRAMCHANGE,
                   1 + patch.edit_variation_scene
                   );
         replay.injectFrameRec(frRec);
      }

      if(data.b_load_select_variation_scene)
      {
         loadEditVariationScene();
      }
      updateVarScenePartOptions();
      Global.Print( (data.b_load_select_variation_scene?"Select + Load ":"Select ")+"Edit Variation Scene is \""+cf_varscene.getSelectedOptionName()+"\"");
   }

   // <ui_handle.png>
   protected method handleVarSceneLoadChanged() {
      data.b_load_select_variation_scene = cb_varscene_load.isSelected();
      Global.Print("Load-Select Variation Scene is "+Utils.GetEnableString(data.b_load_select_variation_scene));
   }

   // <method.png>
   protected method loadEditVariationScene() {
      Montage_VariationScene vs <= patch.getEditVariationScene();
      IntArray vsParts <= vs.part_variations;
      IntArray editParts <= patch.edit_part_var_indices;
      int partIdx = 0;
      loop(16)
      {
         int varIdx = vsParts[partIdx];
         if(varIdx >= 0)
            editParts[partIdx] = varIdx;
         partIdx++;
      }
      data.setReplayPartVarIndices(patch.edit_part_var_indices);
      updateUIFromPatchEx(false/*bPatchNames*/, true/*bFMMatrix*/, false/*bPartMixCopyOptions*/);
      scheduleMIDISendPatchWhenEnabled();
   }

   // <method.png>
   protected method saveEditVariationScene() {
      Montage_VariationScene vs <= patch.getEditVariationScene();
      IntArray vsParts <= vs.part_variations;
      vsParts = patch.edit_part_var_indices;
      updateVarScenePartOptions();
   }

   // <ui_handle.png>
   protected method handleVarScenePartChanged(int _partIdx) {
      Montage_VariationScene vs <= patch.getEditVariationScene();
      IntArray vsParts <= vs.part_variations;
      ComboBox cmPart <= a_varscenes.get(_partIdx);
      vsParts[_partIdx] = cmPart.getSelectedOption() - 1;
      if(data.b_load_select_variation_scene)
      {
         loadEditVariationScene();
      }
      Global.Print("Variation Scene Part "+(_partIdx+1)+" variation is "+cmPart.getSelectedOptionName());
   }

   // <ui_handle.png>
   protected method handleVarSceneLoad() {
      loadEditVariationScene();
      Global.Print("Load Variation Scene \""+cf_varscene.getSelectedOptionName()+"\"");
   }

   // <ui_handle.png>
   protected method handleVarSceneSave() {
      saveEditVariationScene();
      Global.Print("Save Variation Scene \""+cf_varscene.getSelectedOptionName()+"\"");
   }

   // <ui_handle.png>
   protected method handlePFXVarChanged(boolean _bAllParts) {
      selectVariation(cm_pfx_var.getSelectedOption(), _bAllParts);
   }

   // <ui_handle.png>
   protected method handleTabChanged() {
      int ati = ts_groups.getActiveTabIndex();
      fm_matrix.setVisible(TAB_FMMATRIX == ati);
      switch(ati)
      {
         case TAB_PARTMIX:
            // trace "xxx handleTabChanged: TAB_PARTMIX";
            updatePartForms(false/*bMixCopyOptions*/);
            break;

         case TAB_FMCOMMON:
            fm_common.showPartFMCommon();
            break;

         case TAB_FMMATRIX:
            break;

         case TAB_V1:
         case TAB_V2:
         case TAB_V3:
         case TAB_V4:
         case TAB_V5:
         case TAB_V6:
         case TAB_V7:
         case TAB_V8:
            Montage_ElementForm fElement <= element_forms[ati - TAB_V1];
            fElement.showElement();
            fElement.refocusDefault();
            break;

         case TAB_PARTLFO:
            f_lfo.showPartLFO();
            break;

         case TAB_PARTCTL:
            updatePartCtlForms();
            break;

         case TAB_PARTFX:
            updatePartFXForms();
            break;
      }
   }

   // <ui_midi.png>
   public virtual mmlHandleEventUI(MIDIMapEvent _ev) : boolean {
      // trace "[trc] Montage::mmlHandleEventUI: data.ui_b_ctl_recorded="+data.ui_b_ctl_recorded;
      if(null == out_dev)
         return false;

      if(data.checkResetUICtlRecorded())
      {
         updatePartForms(false/*bMixCopyOptions*/); // (todo) only update assignable knob value and volume widgets
         cm_slider_mode.setSelectedOption(data.slider_mode);
      }

      if(_ev.isReservedEvent())
         return false;

      // if(null != in_dev)
      //    trace "xxx mmlHandleEventUI: _ev.dev="+#(_ev.dev)+" ("+(_ev.dev.getAliasOrDeviceName())+") in_dev="+#(in_dev)+" ("+in_dev.getAliasOrDeviceName()+")";
      if(@(_ev.dev) == @(in_dev))
      {
         // trace "xxx in_dev event";
         if(MIDIMapDefs.TYPE_SYSEX == _ev.type)
         {
            local Buffer syx = _ev.sysex_buffer;

            // trace "xxx recv syx:";
            // syx.hexdump(0, syx.offset);

            sysex_buffer_queue.add(#(deref syx));
            return true;
         }
         else if(MIDIMapDefs.TYPE_NOTE_OFF == _ev.type)
         {
            int keyIdx;
            if(4*12 <= _ev.arg1 < (4*12+16))
            {
               keyIdx = _ev.arg1 - 4*12;
               if(data.b_part_key_pressed)
               {
                  selectPart(keyIdx, data.b_part_key_solo/*bAllowSolo*/, false/*bQuiet*/);
               }
               if(data.b_var_key_pressed)
               {
                  selectVariationEx(keyIdx, false/*bAllParts*/, true/*bWhenAvailable*/);
               }
            }
            if(3*12 <= _ev.arg1 < (3*12+8))  // C-3..G-3
            {
               keyIdx = _ev.arg1 - 3*12;
               if(data.b_part_key_pressed)
               {
                  // Assignable Knob 1..8 => Parts 1..8
                  data.slider_mode = MIDISynthProfileDataMontage.SLIDER_MODE_AK1_PARTS_1_8 + keyIdx;
                  cm_slider_mode.setSelectedOption(data.slider_mode);
                  Global.Print("Slider Mode is "+cm_slider_mode.getSelectedOptionName());
               }
               else if(data.b_var_key_pressed)
               {
                  // Assignable Knob 1..8 => Parts 9..16
                  data.slider_mode = MIDISynthProfileDataMontage.SLIDER_MODE_AK1_PARTS_9_16 + keyIdx;
                  cm_slider_mode.setSelectedOption(data.slider_mode);
                  Global.Print("Slider Mode is "+cm_slider_mode.getSelectedOptionName());
               }
            }
            if( (4*12) <= _ev.arg1 < (4*12+32) )
            {
               keyIdx = _ev.arg1 - 4*12;
               // trace "xxx varscene keyIdx="+keyIdx+" data.b_scene_key_pressed="+data.b_scene_key_pressed;
               if(data.b_scene_key_pressed)
               {
                  cf_varscene.setSelectedOption(keyIdx);
                  handleVarSceneChanged();
               }
            }
            if( (3*12+11)/*B-3*/ == _ev.arg1)
            {
               if(data.b_part_key_pressed)
               {
                  // Current part assignable knobs 1..8
                  data.slider_mode = MIDISynthProfileDataMontage.SLIDER_MODE_ASSIGNABLE_KNOBS;
                  cm_slider_mode.setSelectedOption(data.slider_mode);
                  Global.Print("Slider Mode is "+cm_slider_mode.getSelectedOptionName());
               }
               else if(data.b_var_key_pressed)
               {
                  // Volume control
                  data.slider_mode = MIDISynthProfileDataMontage.SLIDER_MODE_VOLUME;
                  cm_slider_mode.setSelectedOption(data.slider_mode);
                  Global.Print("Slider Mode is "+cm_slider_mode.getSelectedOptionName());
               }
            }
         }
      }

      // Transform event so other MIDI controllers can be used to edit the synth
      MIDIMapEvent evXForm = _ev;
      MIDIMorphScene.TransformEvent(evXForm);
      evXForm.echoTransformForced();

      if(@(evXForm.dev) == @(out_dev))
      {
         // trace "[trc] Montage::mmlHandleEventUI: is out_dev";

         if(MIDIMapDefs.TYPE_NRPN == evXForm.type)
         {
            if(data.b_rec_ctls)
            {
               updateUIAndPatchDataFromMIDIEvent(evXForm);
            }
         }
         else if(MIDIMapDefs.TYPE_CC == evXForm.type)
         {
            // trace "xxx Montage: CC "+evXForm.ext_type+" value="+evXForm.arg1;
            if(data.b_rec_ctls)
            {
               updateUIAndPatchDataFromMIDIEvent(evXForm);
            }
         }
         return true;
      }
      return false;
   }

   // <ui_kbd.png>
   protected method handlePatternKeyHome(boolean _bShift) {
      if(_bShift)
      {
         selectNextVariation();
      }
      else
      {
         selectNextPatch();
      }
   }

   // <ui_kbd.png>
   protected method handlePatternKeyEnd(boolean _bShift) {
      if(_bShift)
      {
         selectPreviousVariation();
      }
      else
      {
         selectPreviousPatch();
      }
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      // trace "[>>>] Montage::onKey: code="+_k.code+" pressed="+_k.pressed+" mod="+_k.mod;

      if(_k.modCtrl())
      {
         switch(_k.pressed)
         {
            case '1':
               if(_k.modShift())
                  selectPart(8, true/*bAllowSolo*/, false/*bQuiet*/);
               else
                  selectPart(0, true/*bAllowSolo*/, false/*bQuiet*/);
               return true;

            case '2':
               if(_k.modShift())
                  selectPart(9, true/*bAllowSolo*/, false/*bQuiet*/);
               else
                  selectPart(1, true/*bAllowSolo*/, false/*bQuiet*/);
               return true;

            case '3':
               if(_k.modShift())
                  selectPart(10, true/*bAllowSolo*/, false/*bQuiet*/);
               else
                  selectPart(2, true/*bAllowSolo*/, false/*bQuiet*/);
               return true;

            case '4':
               if(_k.modShift())
                  selectPart(11, true/*bAllowSolo*/, false/*bQuiet*/);
               else
                  selectPart(3, true/*bAllowSolo*/, false/*bQuiet*/);
               return true;

            case '5':
               if(_k.modShift())
                  selectPart(12, true/*bAllowSolo*/, false/*bQuiet*/);
               else
                  selectPart(4, true/*bAllowSolo*/, false/*bQuiet*/);
               return true;

            case '6':
               if(_k.modShift())
                  selectPart(13, true/*bAllowSolo*/, false/*bQuiet*/);
               else
                  selectPart(5, true/*bAllowSolo*/, false/*bQuiet*/);
               return true;

            case '7':
               if(_k.modShift())
                  selectPart(14, true/*bAllowSolo*/, false/*bQuiet*/);
               else
                  selectPart(6, true/*bAllowSolo*/, false/*bQuiet*/);
               return true;

            case '8':
               if(_k.modShift())
                  selectPart(15, true/*bAllowSolo*/, false/*bQuiet*/);
               else
                  selectPart(7, true/*bAllowSolo*/, false/*bQuiet*/);
               return true;

            case 's':
               if(_k.modShift())
               {
                  clearMIDICache();
                  replay_perf.invalidateReplay();
                  b_force_send_all = true;
                  Global.Print("Send patch manually (clear MIDICache + invalidate replay state)");
               }
               else
               {
                  Global.Print("Send patch manually");
               }
               scheduleMIDISendPatch();
               return true;

            case 'e':
               handlePatchOrPartReceive(true/*bEdit*/, _k.modShift()/*bClipboard*/, false/*bPart*/);
               _k.pressed = 0;  // don't allow keyrepeat
               return true;

            case 'f':
               showFMSoundMixer();
               return true;

            case 'g':
               showEGMixer();
               return true;

            case 'c':
               if(_k.modShift())
               {
                  handleVariationCopy();
               }
               else
               {
                  handlePatchCopy();
               }
               return true;

            // case 'd':
            //    toggleMuteOrSoloCurrentOp(_k.modShift()/*bSolo*/);
            //    return true;

            case 'v':
               if(_k.modShift())
               {
                  handleVariationPaste();
               }
               else
               {
                  handlePatchPaste();
               }
               _k.pressed = 0;  // don't allow keyrepeat
               return true;

            case 'n':
               handlePatchInit();
               _k.pressed = 0;  // don't allow keyrepeat
               return true;

            case VKEY_TAB:
               toggleSoloPart();
               return true;
         }
      }

      if(_k.modNone())
      {
         switch(_k.pressed)
         {
            case 'q':
               ts_groups.setActiveTabIndex(TAB_V1);
               handleTabChanged();
               return true;

            case 'w':
               ts_groups.setActiveTabIndex(TAB_V2);
               handleTabChanged();
               return true;

            case 'e':
               ts_groups.setActiveTabIndex(TAB_V3);
               handleTabChanged();
               return true;

            case 'r':
               ts_groups.setActiveTabIndex(TAB_V4);
               handleTabChanged();
               return true;

            case 't':
               ts_groups.setActiveTabIndex(TAB_V5);
               handleTabChanged();
               return true;

            case 'y':
            case 'z':
               ts_groups.setActiveTabIndex(TAB_V6);
               handleTabChanged();
               return true;

            case 'u':
               ts_groups.setActiveTabIndex(TAB_V7);
               handleTabChanged();
               return true;

            case 'i':
               ts_groups.setActiveTabIndex(TAB_V8);
               handleTabChanged();
               return true;
         }
      }


      switch(_k.pressed)
      {
         case VKEY_ESCAPE:
            if(ts_groups.getActiveTabIndex() > 0)
            {
               ts_groups.setActiveTabIndex(TAB_PATCH);
               UI.SetKeyboardFocus(ts_groups);
               redraw();
               return true;
            }
            break;

         case 'c':
            if(_k.modShift())
            {
               if(TAB_PATCH == ts_groups.getActiveTabIndex())
               {
                  copyPFXToClipboard();
               }
               else if(TAB_PARTCTL == ts_groups.getActiveTabIndex())
               {
                  copyPCtlToClipboard();
               }
               else if(TAB_PARTFX == ts_groups.getActiveTabIndex())
               {
                  copyPFXToClipboard();
               }
               else
               {
                  copyOpOrElementToClipboard();
               }
               return true;
            }
            else if(_k.modAlt())
            {
               handlePartCopy(1);
               return true;
            }
            break;

         case 'e':
            if(_k.modAlt())
            {
               handlePatchOrPartReceive(true/*bEdit*/, _k.modShift()/*bClipboard*/, true/*bPart*/);
               _k.pressed = 0;  // don't allow keyrepeat
               return true;
            }
            break;

         case 'v':
            if(_k.modShift())
            {
               if(TAB_PATCH == ts_groups.getActiveTabIndex())
               {
                  pastePFXFromClipboard();
               }
               else if(TAB_PARTCTL == ts_groups.getActiveTabIndex())
               {
                  pastePCtlFromClipboard();
               }
               else if(TAB_PARTFX == ts_groups.getActiveTabIndex())
               {
                  pastePFXFromClipboard();
                  updatePartFXForms();
               }
               else
               {
                  pasteOpOrElementClipboard();
               }
               _k.pressed = 0;  // don't allow keyrepeat
               return true;
            }
            else if(_k.modAlt())
            {
               handlePartPaste(1);
               _k.pressed = 0;  // don't allow keyrepeat
               return true;
            }
            break;

         case 'x':
            if(_k.modAlt())
            {
               handlePartSwapWithClipboard(1/*numParts*/);
               _k.pressed = 0;  // don't allow keyrepeat
               return true;
            }
            else if(_k.modShift())
            {
               swapOpOrElementWithClipboard();
               _k.pressed = 0;  // don't allow keyrepeat
               return true;
            }
            break;

            // voiced select:
         case '1':
            if(_k.modShift())
            {
               toggleOpVMute(0);
            }
            else
            {
               ts_groups.setActiveTabIndex(TAB_PATCH);
               refocusDefault();
            }
            return true;

         case '2':
            if(_k.modShift())
            {
               toggleOpVMute(1);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_PARTMIX);
               refocusDefault();
            }
            return true;

         case '3':
            if(_k.modShift())
            {
               toggleOpVMute(2);
            }
            else
            {
               ts_groups.setActiveTabIndex(TAB_FMCOMMON);
               refocusDefault();
            }
            return true;

         case '4':
            if(_k.modShift())
            {
               toggleOpVMute(3);
            }
            else
            {
               ts_groups.setActiveTabIndex(TAB_FMMATRIX);
               refocusDefault();
            }
            return true;

         case '5':
            if(_k.modShift())
            {
               toggleOpVMute(4);
            }
            else
            {
               ts_groups.setActiveTabIndex(TAB_PARTLFO);
               refocusDefault();
            }
            return true;

         case '6':
            if(_k.modShift())
            {
               toggleOpVMute(5);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_PARTFX);
               refocusDefault();
            }
            return true;

         case '7':
            if(_k.modShift())
            {
               toggleOpVMute(6);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_PARTCTL);
               refocusDefault();
            }
            return true;

         case '8':
            if(_k.modShift())
            {
               toggleOpVMute(7);
            }
            else if(_k.modNone())
            {
               // // ts_groups.setActiveTabIndex(TAB_V8);
            }
            return true;

            // patch/fx/part/voice/filter/formant/fm tabs:
         case 'a':
            if(TAB_PATCH == ts_groups.getActiveTabIndex())
            {
               // already selected, show menu
               showToolsMenu();
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_PATCH);
            }
            return true;

         case 'k':
            ts_groups.setActiveTabIndex(TAB_FMMATRIX);
            return true;

         // // case 'o':
         // //    toggleMuteOrSoloCurrentOp(false/*bSolo*/);
         // //    return true;

         // // case 'p':
         // //    toggleMuteOrSoloCurrentOp(true/*bSolo*/);
         // //    return true;

         case 'r':
            if(_k.modAltOnly())
            {
               handleResetPartQuickEdit();
               return true;
            }
            else if(_k.modCtrlOnly())
            {
               handleResetPerformanceQuickEdit();
               return true;
            }
            break;

         case VKEY_HOME:
            if(STConfig.b_key_swap_pattern_home_end)
               handlePatternKeyEnd(_k.modShift());
            else
               handlePatternKeyHome(_k.modShift());
            _k.pressed = 0;  // don't allow keyrepeat
            return true;

         case VKEY_END:
            if(STConfig.b_key_swap_pattern_home_end)
               handlePatternKeyHome(_k.modShift());
            else
               handlePatternKeyEnd(_k.modShift());
            _k.pressed = 0;  // don't allow keyrepeat
            return true;

         case VKEY_PAGEUP:
            selectPartDelta(1);
            return true;

         case VKEY_PAGEDOWN:
            selectPartDelta(-1);
            return true;

         case VKEY_BACKSPACE:  // xxxxxxxxxxxxxxxxxxxxxxxxx debug
            UI.RedrawAll();
            debugPartData();
            return true;

         case VKEY_LEFT:
            if(_k.modAltOnly())
            {
               movePartLeft();
               return true;
            }
            break;

         case VKEY_RIGHT:
            if(_k.modAltOnly())
            {
               movePartRight();
               return true;
            }
            break;
      }

      return false;
   }

   protected method debugPartData() {
      MontagePart p <= getEditPart();
      if(null != p)
      {
         trace "xxx MontagePart.data:";
         p.data.hexdump(0, p.data.size);

         MontageInsert ins <= p.insert_a;
         trace "xxx insert_a.type="+ins.getType();

         if(0)
         {
            local File f;
            if(0)
            {
               MontagePartFM partFM <= getEditPartFM();
               if(f.openLocal("montage_init_part_fmx.bin", IOS_OUT))
               {
                  p.saveState(f);
                  partFM.saveState(f);
                  f.close();
                  trace "xxx debugPartData: wrote \"montage_init_part_fmx.bin\"";
               }
            }
            else if(0)
            {
               MontagePartNormal partNormal <= getEditPartNormal();
               if(f.openLocal("montage_init_part_awm2.bin", IOS_OUT))
               {
                  p.saveState(f);
                  partNormal.saveState(f);
                  f.close();
                  trace "xxx debugPartData: wrote \"montage_init_part_awm2.bin\"";
               }
            }
            else if(0)
            {
               MontagePartDrum partDrum <= getEditPartDrum();
               if(f.openLocal("montage_init_part_drum.bin", IOS_OUT))
               {
                  p.saveState(f);
                  partDrum.saveState(f);
                  f.close();
                  trace "xxx debugPartData: wrote \"montage_init_part_drum.bin\"";
               }
            }
            else if(0)
            {
               MontagePerformance perf <= patch.getEditPerformance(data.current_part_idx);
               if(f.openLocal("montage_init_performance.bin", IOS_OUT))
               {
                  perf.saveState(f);
                  f.close();
                  trace "xxx debugPartData: wrote \"montage_init_performance.bin\"";
               }
            }
            else
            {
               if(f.openLocal("montage_init_patch.bin", IOS_OUT))
               {
                  patch.save(f);
                  f.close();
                  trace "xxx debugPartData: wrote \"montage_init_patch.bin\"";
               }
            }
         }
      }
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();
      int partIdx;

      // trace "[>>>] Montage::consumeAction: acName="+acName+" ap="+#(ap)+" cf_part_var="+#(cf_part_var);

      partIdx = a_varscenes.indexOfPointer(ap, 0);
      if(-1 != partIdx)
      {
         handleVarScenePartChanged(partIdx);
         return true;
      }

      switch(acName)
      {
         case TA_MIDISEND:
            handleMIDISendTimer(false/*bForceDiff*/);
            return true;

         case TA_MIDISEND_PARAM:
            handleMIDISendTimer(true/*bForceDiff*/);
            return true;

         case TA_FMMATRIX:
            handleFMMatrixTimer();
            return true;

         case TA_PARTFORMS:
            updatePartForms(true/*bMixCopyOptions*/);
            return true;

         case TA_DIFF:
            sendNextDiffs();
            return true;

         case ComboBoxPopup.ACTION_OPTIONSELECTED:
            if(@(ap) == @(cmp_find_catbrowse))
            {
               handleFindCategoryBrowseOptionSelected(_action);
               return true;
            }
            break;
      }

      switch(@(ap))
      {
         default:
            partIdx = part_buttons.indexOfPointer(ap, 0);
            if(-1 != partIdx)
            {
               selectPart(partIdx, true/*bAllowSolo*/, false/*bQuiet*/);
               UI.SetKeyboardFocus(cf_patch_nr);
               return true;
            }
            partIdx = partlayer_buttons.indexOfPointer(ap, 0);
            if(-1 != partIdx)
            {
               handlePartLayerChanged(partIdx);
               UI.SetKeyboardFocus(cf_patch_nr);
               return true;
            }
            if(-1 != sf_checkboxes.indexOfPointer(ap, 0))
            {
               handleGroupMaskChanged((CheckBox.ACTION_HOLD_CLICK == acName)/*bToggleAll*/);
               return true;
            }
            return handleParamWidgetChanged(ap, true/*bUpdateFMMatrix*/, false/*bQuiet*/);

         case @(dlg_multipatch):
            if(SysExMultiPatchDialog.ACTION_COPY == acName)
            {
               handleMultiCopyPatchesToProjectBank2();
            }
            refocusDefault();
            return true;

         case @(ts_groups):
            handleTabChanged();
            return true;

         case @(cb_part_name):
            data.b_part_label_shortnames = cb_part_name.isSelected();
            Global.Print("Part button short names are "+Utils.GetEnableString(data.b_part_label_shortnames));
            updatePartVarOptions();
            return true;

         // Patch:
         case @(cb_patch_autosend):
            handlePatchAutosendChanged();
            return true;

         case @(cb_patch_diff):
            handlePatchDiffChanged();
            return true;

         case @(cb_patch_bulk):
            handlePatchBulkChanged();
            return true;

         case @(bt_patch_project):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleGoToFirstProjectPatch();
            }
            else
            {
               handleGoToNextBank();
            }
            return true;

         case @(cf_patch_nr):
            // trace "xxx cf_patch_nr acName="+acName;
            if(ComboField.ACTION_OPTIONRENAMED == acName)
            {
               handlePatchNameChanged();
            }
            else if(ComboField.ACTION_OPTIONRESELECTED == acName)
            {
               // // refocusDefault();
            }
            else if(ComboField.ACTION_OPTIONSELECTED == acName)
            {
               if(replay.b_playing)
                  b_force_send_all = true;
               handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/);
            }
            return true;

         case @(cf_part_var):
            handlePartVarChanged((VMOD_LALT == UI.GetKeyMod())/*bAllParts*/);
            return true;

         case @(cm_partmixer_var):
            cf_part_var.setSelectedOption(cm_partmixer_var.getSelectedOption());
            handlePartVarChanged((VMOD_LALT == UI.GetKeyMod())/*bAllParts*/);
            return true;

         case @(bt_partmixer_sync_level):
            handleSyncLevel((Button.ACTION_HOLD_CLICK == acName)/*bAllParts*/);
            return true;

         case @(bt_partmixer_sync_ctl):
            handleSyncCtl((Button.ACTION_HOLD_CLICK == acName)/*bAllParts*/);
            return true;

         case @(bt_partmixer_sync_peq):
            handleSyncPEQ((Button.ACTION_HOLD_CLICK == acName)/*bAllParts*/);
            return true;

         case @(bt_partmixer_sync_pfx):
            handleSyncPFX((Button.ACTION_HOLD_CLICK == acName)/*bAllParts*/);
            return true;

         case @(bt_partmixer_sync_mseq):
            handleSyncPMSEQ((Button.ACTION_HOLD_CLICK == acName)/*bAllParts*/);
            return true;

         case @(bt_partmixer_sync_mfx):
            handleSyncMFX();
            return true;

         case @(cb_patch_recv_names):
            data.b_recv_patch_names = cb_patch_recv_names.isSelected();
            Global.PrintFast("Recv Patch Names is "+Utils.GetEnableString(data.b_recv_patch_names));
            return true;

         case @(cb_patch_rec_ctls):
            data.b_rec_ctls = cb_patch_rec_ctls.isSelected();
            Global.PrintFast("Controller-Recording is "+Utils.GetEnableString(data.b_rec_ctls));
            return true;

         // // case @(cb_patch_part_midi):
         // //    data.b_send_part_midi = cb_patch_part_midi.isSelected();
         // //    Global.PrintFast("Send Part.MIDI (Bank / Prg / Ch / ..) params is "+Utils.GetEnableString(data.b_send_part_midi));
         // //    return true;

         case @(cm_patch_category):
            handlePatchCategoryChanged();
            return true;

         case @(bt_star):
            handleStarRatingChanged((Button.ACTION_RIGHT_CLICK == acName)/*bDec*/);
            return true;

         case @(cm_find_category):
            handleFindCategoryChanged();
            return true;

         case @(bt_find_catprev):
            handleFindCategoryPrev();
            return true;

         case @(bt_find_catbrowse):
            handleFindCategoryBrowse();
            return true;

         case @(bt_find_catnext):
            handleFindCategoryNext();
            return true;

         case @(bt_patch_receive_edit):
            handlePatchOrPartReceive(true/*bEdit*/, false/*bClipboard*/, (Button.ACTION_HOLD_CLICK != acName)/*bPart*/);
            return true;

         case @(bt_patch_receive_edit_to_clipboard):
            handlePatchOrPartReceive(true/*bEdit*/, true/*bClipboard*/, (Button.ACTION_HOLD_CLICK != acName)/*bPart*/);
            return true;

         case @(bt_patch_send):
            handlePatchSend((Button.ACTION_HOLD_CLICK == acName)/*bForceResendAll*/);
            return true;

         case @(bt_patch_copy):
            handlePatchCopy();
            return true;

         case @(bt_patch_paste):
            handlePatchPaste();
            return true;

         case @(bt_patch_init):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handlePatchInit();
            }
            else
               Global.Warning("hold-click to initialize patch");
            return true;

         // // case @(cb_patch_proxy_follow):
         // //    handlePatchProxyFollowChanged();
         // //    return true;

         case @(cb_patch_proxy_lock):
            handlePatchProxyLockChanged();
            return true;

         case @(cb_patch_proxy_reset):
            handlePatchProxyResetChanged();
            return true;

         case @(bt_patch_swap):
            handlePatchSwap();
            return true;

         case @(bt_patch_tools):
            showToolsMenu();
            return true;

         case @(pm_tools):
            Global.Debug2("p12: pm_tools acName="+acName);
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close tools menu.");
                  refocusDefault();
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "copy_from_replay_perf":
                  handleCopyFromReplayPerformance();
                  refocusDefault();
                  return true;

               case "part_reset_qe":
                  handleResetPartQuickEdit();
                  refocusDefault();
                  return true;

               case "perf_reset_qe":
                  handleResetPerformanceQuickEdit();
                  refocusDefault();
                  return true;

               case "perf_all_kbdctl":
                  handleResetAllKbdCtl();
                  refocusDefault();
                  return true;

               case "perf_volexp_off":
                  handleAllPartsVolExpOff();
                  refocusDefault();
                  return true;

               case "multicopy":
                  handleMultiCopyPatchesToProjectBank1();
                  return true;

               case "copy_part":
                  handlePartCopy(1);
                  refocusDefault();
                  return true;

               case "copy_parts_2":
                  handlePartCopy(2);
                  refocusDefault();
                  return true;

               case "copy_parts_3":
                  handlePartCopy(3);
                  refocusDefault();
                  return true;

               case "copy_parts_2":
                  handlePartCopy(4);
                  refocusDefault();
                  return true;

               case "paste_part":
                  handlePartPaste(1);
                  refocusDefault();
                  return true;

               case "paste_parts_2":
                  handlePartPaste(2);
                  refocusDefault();
                  return true;

               case "paste_parts_3":
                  handlePartPaste(3);
                  refocusDefault();
                  return true;

               case "paste_parts_3":
                  handlePartPaste(4);
                  refocusDefault();
                  return true;

               case "var_swap_main":
                  swapWithMainVariation();
                  refocusDefault();
                  return true;

               case "copy_part_var":
                  handleVariationCopy();
                  refocusDefault();
                  return true;

               case "paste_part_var":
                  handleVariationPaste();
                  refocusDefault();
                  return true;

               case "copy_part_fx":
                  copyPFXToClipboard();
                  refocusDefault();
                  return true;

               case "paste_part_fx":
                  pastePFXFromClipboard();
                  refocusDefault();
                  return true;

               case "copy_part_ctl":
                  copyPCtlToClipboard();
                  refocusDefault();
                  return true;

               case "paste_part_ctl":
                  pastePCtlFromClipboard();
                  refocusDefault();
                  return true;
            }
            return true;

         case @(pm_part_contextmenu):
            Global.Debug2("Montage: pm_part_contextmenu acName="+acName);
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close Part context menu.");
                  refocusDefault();
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "eg_mixer":
                  showEGMixer();
                  return true;

               case "fm_sound_mixer":
                  showFMSoundMixer();
                  return true;

               case "var_swap_main":
                  swapWithMainVariation();
                  return true;

               case "copy":
                  handlePartCopy(1);
                  return true;

               case "paste":
                  handlePartPaste(1);
                  return true;

               case "var_copy":
                  handleVariationCopy();
                  return true;

               case "var_paste":
                  handleVariationPaste();
                  return true;

               case "pfx_copy":
                  copyPFXToClipboard();
                  return true;

               case "pfx_paste":
                  pastePFXFromClipboard();
                  return true;

               case "pctl_copy":
                  copyPCtlToClipboard();
                  return true;

               case "pctl_paste":
                  pastePCtlFromClipboard();
                  return true;

               case "var_delete":
                  handleVariationDelete(data.current_part_idx);
                  return true;

               case "init_part_fmx":
                  handleInitPartFMX();
                  return true;

               case "init_part_awm2":
                  handleInitPartAWM2();
                  return true;

               case "init_part_drum":
                  handleInitPartDrum();
                  return true;
            }
            return true;

         case @(cm_ctl_var):
            handleCtlVarChanged((VMOD_LALT == UI.GetKeyMod())/*bAllParts*/);
            return true;

         case @(bt_ctl_copy):
            copyPCtlToClipboard();
            return true;

         case @(bt_ctl_paste):
            pastePCtlFromClipboard();
            return true;

         case @(cm_pfx_var):
            handlePFXVarChanged((VMOD_LALT == UI.GetKeyMod())/*bAllParts*/);
            return true;

         case @(bt_pfx_copy):
            copyPFXToClipboard();
            return true;

         case @(bt_pfx_paste):
            pastePFXFromClipboard();
            return true;

         case @(bt_pfx_swap):
            swapPFX();
            return true;

         case @(bt_partmixer_name):
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               setPartFormsMode(part_forms_mode + 1);
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               setPartFormsMode(part_forms_mode - 1);
            }
            else
            {
               setPartFormsMode(0);
            }
            Global.Print("Select Name / InsertFX / Microtune settings");
            return true;

         case @(bt_partmixer_copy):
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               setPartFormsMode(part_forms_mode + 1);
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               setPartFormsMode(part_forms_mode - 1);
            }
            else
            {
               setPartFormsMode(1);
            }
            Global.Print("Select Copy Preset settings");
            return true;

         case @(bt_partmixer_eq):
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               setPartFormsMode(part_forms_mode + 1);
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               setPartFormsMode(part_forms_mode - 1);
            }
            else
            {
               setPartFormsMode(2);
            }
            Global.Print("Select EQ settings");
            return true;

         case @(bt_partmixer_zone):
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               setPartFormsMode(part_forms_mode + 1);
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               setPartFormsMode(part_forms_mode - 1);
            }
            else
            {
               setPartFormsMode(3);
            }
            Global.Print("Select Velocity+Note Limit and Velocity Sensitivity settings");
            return true;

         case @(bt_partmixer_eg):
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               setPartFormsMode(part_forms_mode + 1);
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               setPartFormsMode(part_forms_mode - 1);
            }
            else
            {
               setPartFormsMode(4);
            }
            Global.Print("Select AEG+FEG+Filter settings");
            return true;

         case @(bt_partmixer_knob):
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               setPartFormsMode(part_forms_mode + 1);
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               setPartFormsMode(part_forms_mode - 1);
            }
            else
            {
               setPartFormsMode(5);
            }
            Global.Print("Select Assignable Knob + Envelope Follower settings");
            return true;

         case @(bt_partmixer_egmixer):
            showEGMixer();
            return true;

         case @(bt_partmixer_soundmixer):
            showFMSoundMixer();
            return true;

         case @(cm_partmixer_star):
            Global.Print("Part variation minimum star rating filter is "+cm_partmixer_star.getSelectedOptionName());
            ta_partforms.reschedule();
            return true;

         case @(cm_fx_mode):
            handleFXModeChanged();
            return true;

         case @(cm_forced_part_output):
            handleForcedPartOutputChanged();
            return true;

         case @(cm_slider_mode):
            handleSliderModeChanged();
            return true;

         case @(cb_part_var_key):
            handlePartVarKeySelectChanged();
            return true;

         case @(cb_part_key_solo):
            handlePartKeySoloChanged();
            return true;

         case @(cb_redirect_ak):
            handleRedirectAKChanged();
            return true;

         case @(cm_model):
            handleModelChanged();
            return true;

         case @(cf_varscene):
            if(ComboField.ACTION_OPTIONRENAMED == acName)
            {
               handleVarSceneNameChanged();
            }
            else if(ComboField.ACTION_OPTIONRESELECTED == acName)
            {
               // // refocusDefault();
            }
            else if(ComboField.ACTION_OPTIONSELECTED == acName)
            {
               handleVarSceneChanged();
            }
            return true;

         case @(cb_varscene_load):
            handleVarSceneLoadChanged();
            return true;

         case @(bt_varscene_load):
            handleVarSceneLoad();
            return true;

         case @(bt_varscene_save):
            handleVarSceneSave();
            return true;

      }
   }

}
