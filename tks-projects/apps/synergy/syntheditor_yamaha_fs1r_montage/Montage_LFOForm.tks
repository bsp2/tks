// ----
// ---- file   : Montage_LFOForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2022-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 24Oct2022
// ---- changed: 25Oct2022, 17Nov2022, 22Mar2024
// ----
// ----
// ----

module MMontage_LFOForm;

use namespace ui;
use namespace st2;


// <class.png>
class Montage_LFOForm extends Montage_ParamForm {
   // MontagePartLFO

   protected FloatParam *fp_hold;

   protected ComboBox *cm_dest_1;
   protected ComboBox *cm_dest_2;
   protected ComboBox *cm_dest_3;

   protected Button *bt_user_rotl;
   protected Button *bt_user_rotr;

   protected Button *bt_user_norm;
   protected Button *bt_user_rand;
   protected Button *bt_user_noise;
   protected Button *bt_user_boost;
   protected Button *bt_user_smooth;
   protected Button *bt_user_sinewin;
   protected Button *bt_user_rampwin;
   protected Button *bt_user_flipy;
   protected Button *bt_user_flipx;

   protected Button *bt_user_init_sin;
   protected Button *bt_user_init_tri;
   protected Button *bt_user_init_saw;

   static StringArray dest_options_short = [
      "InsA Param 1",
      "InsA Param 2",
      "InsA Param 3",
      "InsA Param 4",
      "InsA Param 5",
      "InsA Param 6",
      "InsA Param 7",
      "InsA Param 8",
      "InsA Param 9",
      "InsA Param 10",
      "InsA Param 11",
      "InsA Param 12",
      "InsA Param 13",
      "InsA Param 14",
      "InsA Param 15",
      "InsA Param 16",
      "InsA Param 17",
      "InsA Param 18",
      "InsA Param 19",
      "InsA Param 20",
      "InsA Param 21",
      "InsA Param 22",
      "InsA Param 23",
      "InsA Param 24",
      "? 25",
      "? 26",
      "? 27",
      "? 28",
      "? 29",
      "? 30",
      "? 31",
      "? 32",
      "InsB Param 1",  // 32
      "InsB Param 2",
      "InsB Param 3",
      "InsB Param 4",
      "InsB Param 5",
      "InsB Param 6",
      "InsB Param 7",
      "InsB Param 8",
      "InsB Param 9",
      "InsB Param 10",
      "InsB Param 11",
      "InsB Param 12",
      "InsB Param 13",
      "InsB Param 14",
      "InsB Param 15",
      "InsB Param 16",
      "InsB Param 17",
      "InsB Param 18",
      "InsB Param 19",
      "InsB Param 20",
      "InsB Param 21",
      "InsB Param 22",
      "InsB Param 23",
      "InsB Param 24",
      "? 25",
      "? 26",
      "? 27",
      "? 28",
      "? 29",
      "? 30",
      "? 31",
      "? 32",
      "Level",
      "Pitch",
      "Cutoff",
      "Resonance",
      "Pan",
      "E.LFO Speed",
                                             ];

   static StringArray dest_options_long = [
      "Insertion Effect A Parameter 1",
      "Insertion Effect A Parameter 2",
      "Insertion Effect A Parameter 3",
      "Insertion Effect A Parameter 4",
      "Insertion Effect A Parameter 5",
      "Insertion Effect A Parameter 6",
      "Insertion Effect A Parameter 7",
      "Insertion Effect A Parameter 8",
      "Insertion Effect A Parameter 9",
      "Insertion Effect A Parameter 10",
      "Insertion Effect A Parameter 11",
      "Insertion Effect A Parameter 12",
      "Insertion Effect A Parameter 13",
      "Insertion Effect A Parameter 14",
      "Insertion Effect A Parameter 15",
      "Insertion Effect A Parameter 16",
      "Insertion Effect A Parameter 17",
      "Insertion Effect A Parameter 18",
      "Insertion Effect A Parameter 19",
      "Insertion Effect A Parameter 20",
      "Insertion Effect A Parameter 21",
      "Insertion Effect A Parameter 22",
      "Insertion Effect A Parameter 23",
      "Insertion Effect A Parameter 24",
      "? 25",
      "? 26",
      "? 27",
      "? 28",
      "? 29",
      "? 30",
      "? 31",
      "? 32",
      "Insertion Effect B Parameter 1",
      "Insertion Effect B Parameter 2",
      "Insertion Effect B Parameter 3",
      "Insertion Effect B Parameter 4",
      "Insertion Effect B Parameter 5",
      "Insertion Effect B Parameter 6",
      "Insertion Effect B Parameter 7",
      "Insertion Effect B Parameter 8",
      "Insertion Effect B Parameter 9",
      "Insertion Effect B Parameter 10",
      "Insertion Effect B Parameter 11",
      "Insertion Effect B Parameter 12",
      "Insertion Effect B Parameter 13",
      "Insertion Effect B Parameter 14",
      "Insertion Effect B Parameter 15",
      "Insertion Effect B Parameter 16",
      "Insertion Effect B Parameter 17",
      "Insertion Effect B Parameter 18",
      "Insertion Effect B Parameter 19",
      "Insertion Effect B Parameter 20",
      "Insertion Effect B Parameter 21",
      "Insertion Effect B Parameter 22",
      "Insertion Effect B Parameter 23",
      "Insertion Effect B Parameter 24",
      "? 25",
      "? 26",
      "? 27",
      "? 28",
      "? 29",
      "? 30",
      "? 31",
      "? 32",
      "AWM2: Element Level",
      "AWM2: Element Pitch",
      "AWM2: Element Filter Cutoff",
      "AWM2: Element Filter Resonance / Width",
      "AWM2: Element Pan",
      "AWM2: Element LFO Speed",
                                            ];

   protected FloatArray uw;  // temporary


   // <init.png>
   public method initLFOForm(EditMIDISynthFormMontage _parentSynthForm) : boolean {

      initParamForm(_parentSynthForm);

      local String buf;
      MIDISynthProfile msp <= parent_synth_form.profile;

      String groupCaption <= "Part LFO";
      createWidgetsFromMSPGroup(buf, msp, groupCaption);

      local String bufXFM;
      bufXFM.load("Montage_LFOForm.xfm", true/*bRemoveCR*/);
      bufXFM.replace("$(WIDGETS)", buf);

      if(!parseXMLForm(bufXFM))
      {
         trace "[---] failed to parse \"Montage_LFOForm.xfm\"";
         return false;
      }

      if(!autoResolveIds(this))
      {
         return false;
      }

      local StringArray optHold;
      int holdIdx = 0;
      loop(127)
         optHold.add(String(holdIdx++));
      optHold.add("hold");
      fp_hold.setUserTable(deref optHold);
      fp_hold.setDisplayType(FloatParam.DISPLAY_USER);

      cm_dest_1.setOptions(dest_options_short);
      cm_dest_2.setOptions(dest_options_short);
      cm_dest_3.setOptions(dest_options_short);

      cm_dest_1.setOptionsLong(dest_options_long);
      cm_dest_2.setOptionsLong(dest_options_long);
      cm_dest_3.setOptionsLong(dest_options_long);

      if(!resolveWidgetsFromMSPGroup(msp, groupCaption, param_widgets))
      {
         trace "[---] Montage_LFOForm: resolveWidgetsFromMSPGroup("+groupCaption+") failed.";
         return false;
      }

      recursiveBuildTabCycleLists();

      return true;
   }

   // <method.png>
   public method enter() {
   }

   // <method.png>
   public method leave() {
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {
      layers.joinRR(layers, param_widgets);
   }

   // <method_get.png>
   public method getPartLFO() : MontagePartLFO {
      MontagePart p <= parent_synth_form.getEditPart();
      if(null != p)
         return p.lfo;
      return null;
   }

   // <ui_show.png>
   public method showPartLFO() {
      MontagePartLFO c <= getPartLFO();
      updateParamWidgets(c);
   }

   // <method.png>
   protected method readUserWave() {
      uw.allocAndFill(16, 0);
      MontagePartLFO c <= getPartLFO();
      if(null != c)
      {
         int idx = 0;
         loop(16)
         {
            uw[idx] = c.getUserLFOStepValue(idx) / 64.0;
            idx++;
         }
      }
   }

   // <method.png>
   protected method writeUserWave() {
      MontagePartLFO c <= getPartLFO();
      if(null != c)
      {
         int idx = 0;
         loop(16)
         {
            byte v = mathClampf(uw.get(idx) * 64.0, -64.0f, 63.0f);
            c.setUserLFOStepValue(idx, v);
            idx++;
         }
      }

      parent_synth_form.handleParamEdited();
      showPartLFO();
   }

   // <ui_handle.png>
   protected =replay= method handleUserRotL() {
      readUserWave();

      float first = uw.first;
      int idx = 0;
      loop(15)
      {
         uw[idx] = uw[idx+1];
         idx++;
      }
      uw[15] = first;

      writeUserWave();
      Global.Print("Left-Rotate User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserRotR() {
      readUserWave();

      float last = uw.last;
      int idx = 15;
      loop(15)
      {
         uw[idx] = uw[idx-1];
         idx--;
      }
      uw[0] = last;

      writeUserWave();
      Global.Print("Right-Rotate User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserNorm() {
      readUserWave();

      int idx = 0;
      float s = 1.0 / uw.absMax;
      loop(16)
      {
         uw[idx] = uw[idx] * s;
         idx++;
      }

      writeUserWave();
      Global.Print("Normalize User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserRand() {
      readUserWave();

      int idx = 0;
      loop(16)
      {
         float c = uw[idx];
         float n = rand(2.0f) - 1.0f;
         uw[idx] = c + (n - c)*0.5;
         idx++;
      }

      writeUserWave();
      Global.Print("Randomize User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserNoise() {
      readUserWave();

      int idx = 0;
      loop(16)
      {
         float c = uw[idx];
         float n = rand(2.0f) - 1.0f;
         uw[idx] = c + n * 0.05;
         idx++;
      }

      writeUserWave();
      Global.Print("Add Noise to User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserSmooth() {
      readUserWave();

      int idx = 0;
      loop(16)
      {
         float c = uw[idx];
         float n = uw[(idx + 1) & 15];
         uw[idx] = c + (n - c)*0.05;
         idx++;
      }

      writeUserWave();
      Global.Print("Smooth User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserBoost() {
      readUserWave();

      int idx = 0;
      loop(16)
      {
         float c = uw[idx];
         float n = uw[(idx + 1) & 15];
         uw[idx] = c + (n - c)*1.05;
         idx++;
      }

      writeUserWave();
      Global.Print("Boost User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserSineWin() {
      readUserWave();

      float a = 0.0;
      float w = 2PI/16.0;
      int idx = 0;
      loop(16)
      {
         float c = uw[idx];
         float n = sin(a);
         uw[idx] = c + (n - c)*0.05;
         idx++;
         a += w;
      }

      writeUserWave();
      Global.Print("Sine-Win User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserRampWin() {
      readUserWave();

      float a = 0.0;
      float w = 1/15.0;
      int idx = 0;
      loop(16)
      {
         float c = uw[idx];
         // uw[idx] = c + ((c*a*2) - c)*0.25;
         uw[idx] = c * a;
         idx++;
         a += w;
      }

      writeUserWave();
      Global.Print("Ramp-Win User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserFlipY() {
      readUserWave();

      int idx = 0;
      loop(16)
      {
         uw[idx] = -uw[idx];
         idx++;
      }

      writeUserWave();
      Global.Print("Y-Flip User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserFlipX() {
      readUserWave();
      uw.reverse();
      writeUserWave();
      Global.Print("X-Flip User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserInitSin() {
      readUserWave();

      float a = 0.0;
      float w = 2PI/16.0;
      int idx = 0;
      loop(16)
      {
         uw[idx++] = sin(a);
         a += w;
      }

      writeUserWave();
      Global.Print("Init Sine User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserInitTri() {
      readUserWave();

      float a = -1.0;
      float w = 4/15.0;
      int idx = 0;
      loop(16)
      {
         uw[idx++] = (a > 1.0) ? (2.0 - a) : a;
         a += w;
      }

      writeUserWave();
      Global.Print("Init Tri User Wave");
   }

   // <ui_handle.png>
   protected =replay= method handleUserInitSaw() {
      readUserWave();

      float a = -1.0;
      float w = 2/15.0;
      int idx = 0;
      loop(16)
      {
         uw[idx++] = a;
         a += w;
      }

      writeUserWave();
      Global.Print("Init Saw User Wave");
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      Layer ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      StringAction *sac;

      int paramIdx = param_widgets.indexOfPointer(ap, 0);
      if(paramIdx >= 0)
      {
         handleParamChanged(getPartLFO(), paramIdx, ap);

         if(FloatParam.ACTION_VALUECHANGED == acName)
            parent_synth_form.refocusDefault();

         return true;
      }

      switch(@(ap))
      {
         case @(bt_user_rotl):
            handleUserRotL();
            return true;

         case @(bt_user_rotr):
            handleUserRotR();
            return true;

         case @(bt_user_norm):
            handleUserNorm();
            return true;

         case @(bt_user_rand):
            handleUserRand();
            return true;

         case @(bt_user_noise):
            handleUserNoise();
            return true;

         case @(bt_user_smooth):
            handleUserSmooth();
            return true;

         case @(bt_user_boost):
            handleUserBoost();
            return true;

         case @(bt_user_sinewin):
            handleUserSineWin();
            return true;

         case @(bt_user_rampwin):
            handleUserRampWin();
            return true;

         case @(bt_user_flipy):
            handleUserFlipY();
            return true;

         case @(bt_user_flipx):
            handleUserFlipX();
            return true;

         case @(bt_user_init_sin):
            handleUserInitSin();
            return true;

         case @(bt_user_init_tri):
            handleUserInitTri();
            return true;

         case @(bt_user_init_saw):
            handleUserInitSaw();
            return true;
      }
   }

}
