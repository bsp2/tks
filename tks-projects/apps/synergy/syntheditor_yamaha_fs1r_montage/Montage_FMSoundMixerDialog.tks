// ----
// ---- file   : Montage_FMSoundMixerDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2022-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 29Oct2022
// ---- changed: 09Nov2022, 10Nov2022, 08Oct2023, 30Oct2023
// ----
// ----
// ----

module MMontage_FMSoundMixerDialog;

use namespace ui;


// <class.png>
class Montage_FMSoundMixerDialog extends Dialog, ActionProvider {
   protected EditMIDISynthFormMontage *parent_synth_form;

   protected byte part_idx;     // 0..15

   protected XMLForm *xfm;

   protected Button   *bt_revert;
   protected CheckBox *cb_current;

   protected Button *bt_rand_sounds;
   protected Button *bt_rand_common;
   protected Button *bt_rand_ops;

   CheckBox *cb_multi;

   protected ComboBox *cm_sound_lt;
   protected ComboBox *cm_sound_rt;
   protected ComboBox *cm_sound_rb;
   protected ComboBox *cm_sound_lb;

   protected XYPad *xy_common;
   protected XYPad *xy_op_1;
   protected XYPad *xy_op_2;
   protected XYPad *xy_op_3;
   protected XYPad *xy_op_4;
   protected XYPad *xy_op_5;
   protected XYPad *xy_op_6;
   protected XYPad *xy_op_7;
   protected XYPad *xy_op_8;

   protected CheckBox *[] a_mixg_cb;
   protected CheckBox *cb_active_op;

   protected int last_copy_patch_idx;
   protected int last_copy_part_idx;
   protected int last_copy_var_idx;

   static Montage_FMSoundMixerDialog *dlg_preset;

   static boolean b_multi;

   protected MontagePartFM *partfm_orig;
   protected MontagePartFM *partfm_cur;  // ref to edit part variation


   // <ui_init.png>
   public method initFMSoundMixerDialog(EditMIDISynthFormMontage _parentSynthForm, int _partIdx) : boolean {

      parent_synth_form <= _parentSynthForm;
      part_idx = _partIdx;

      initDialog();

      xfm <= XMLForm.New_PakFile("Montage_FMSoundMixerDialog.xfm");
      if(null == xfm)
      {
         trace "[---] failed to parse \"Montage_FMSoundMixerDialog.xfm\"";
         return false;
      }

      xfm.autoResolveIds(this);

      cb_multi.setSelected(b_multi);

      cm_sound_lt .setOptions    (parent_synth_form.partmix_copy_names_short);
      cm_sound_lt .setOptionsLong(parent_synth_form.partmix_copy_names_long);

      cm_sound_rt .setOptions    (parent_synth_form.partmix_copy_names_short);
      cm_sound_rt .setOptionsLong(parent_synth_form.partmix_copy_names_long);

      cm_sound_rb .setOptions    (parent_synth_form.partmix_copy_names_short);
      cm_sound_rb .setOptionsLong(parent_synth_form.partmix_copy_names_long);

      cm_sound_lb .setOptions    (parent_synth_form.partmix_copy_names_short);
      cm_sound_lb .setOptionsLong(parent_synth_form.partmix_copy_names_long);

      int grpNr = 1;
      loop(20)
      {
         CheckBox cb <= xfm.findLayerById("cb_grp_"+grpNr);
         a_mixg_cb.add(cb);
         grpNr++;
      }

      MontagePartFM partFM <= parent_synth_form.getEditPartFM();
      if(null != partFM)
      {
         updateWidgets(partFM);

         initWindow(xfm,
                    "FM Sound Mixer",
                    100, 100,
                    640, 240
                    );

         resizeToMinimum();

         partfm_orig <= MontagePartFM.New(part_idx);
         partfm_orig.copyFrom(partFM);
         partfm_cur <= partFM;
      }

      return true;
   }

   // <ui_update.png>
   protected method updateWidgets(MontagePartFM partFM) {
      IntArray patchIndices <= parent_synth_form.partmix_copy_patch_indices;
      IntArray partIndices  <= parent_synth_form.partmix_copy_part_indices;
      IntArray varIndices   <= parent_synth_form.partmix_copy_variation_indices;

      cb_current.setSelected(partFM.b_last_soundmix_lt_current);

      cm_sound_lt.setSelectedOptionAndEnable(varIndices.indexOf(partFM.last_soundmix_var_idx_lt, partIndices.indexOf(partFM.last_soundmix_part_idx_lt, patchIndices.indexOf(partFM.last_soundmix_patch_idx_lt, 0))));
      cm_sound_rt.setSelectedOptionAndEnable(varIndices.indexOf(partFM.last_soundmix_var_idx_rt, partIndices.indexOf(partFM.last_soundmix_part_idx_rt, patchIndices.indexOf(partFM.last_soundmix_patch_idx_rt, 0))));
      cm_sound_rb.setSelectedOptionAndEnable(varIndices.indexOf(partFM.last_soundmix_var_idx_rb, partIndices.indexOf(partFM.last_soundmix_part_idx_rb, patchIndices.indexOf(partFM.last_soundmix_patch_idx_rb, 0))));
      cm_sound_lb.setSelectedOptionAndEnable(varIndices.indexOf(partFM.last_soundmix_var_idx_lb, partIndices.indexOf(partFM.last_soundmix_part_idx_lb, patchIndices.indexOf(partFM.last_soundmix_patch_idx_lb, 0))));

      xy_common.setValues(partFM.last_soundmix_common_x, partFM.last_soundmix_common_y);
      xy_op_1.setValues(partFM.last_soundmix_op_1_x, partFM.last_soundmix_op_1_y);
      xy_op_2.setValues(partFM.last_soundmix_op_2_x, partFM.last_soundmix_op_2_y);
      xy_op_3.setValues(partFM.last_soundmix_op_3_x, partFM.last_soundmix_op_3_y);
      xy_op_4.setValues(partFM.last_soundmix_op_4_x, partFM.last_soundmix_op_4_y);
      xy_op_5.setValues(partFM.last_soundmix_op_5_x, partFM.last_soundmix_op_5_y);
      xy_op_6.setValues(partFM.last_soundmix_op_6_x, partFM.last_soundmix_op_6_y);
      xy_op_7.setValues(partFM.last_soundmix_op_7_x, partFM.last_soundmix_op_7_y);
      xy_op_8.setValues(partFM.last_soundmix_op_8_x, partFM.last_soundmix_op_8_y);

      cb_active_op.setSelected(partFM.b_last_soundmix_active_op_only);

      updateMixGroupFlags(partFM);
   }

   // <ui_update.png>
   protected method updateMixGroupFlags(MontagePartFM partFM) {
      int grpIdx = 0;
      int flags = partFM.last_soundmix_mixg_flags;
      loop(20)
      {
         CheckBox cb <= a_mixg_cb[grpIdx];
         cb.setSelected(0 != (flags & (1 << grpIdx)));
         grpIdx++;
      }
   }

   // <method_get.png>
   public virtual isPopup() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual isModal():boolean {
      return true;
   }

   // <method_get.png>
   public virtual isResizable() : boolean {
      return false;
   }

   // <ui_kbd.png>
   public virtual getTabCycleOverrides() : PointerArray {
      return getTabCycleOverridesDef();
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      _retLayers.joinRR(_retLayers, [
                           bt_revert,

                           bt_rand_sounds,
                           bt_rand_common,
                           bt_rand_ops,

                           cm_sound_lt,
                           cm_sound_rt,
                           cm_sound_rb,
                           cm_sound_lb,

                                     ]
                        );

      _retLayers.joinRR(_retLayers, a_mixg_cb);
   }

   // <ui_show.png>
   public method showFMSoundMixerDialog() {
      resizeToMinimum();
      showNearMouse(0, 0);
   }

   // <ui_show.png>
   public static ShowFMSoundMixerDialog(EditMIDISynthFormMontage _parentSynthForm, int _partIdx) {
      MontagePartFM partFM <= _parentSynthForm.getEditPartFM();
      if(null != partFM)
      {
         dlg_preset <= new Montage_FMSoundMixerDialog;
         dlg_preset.initFMSoundMixerDialog(_parentSynthForm, _partIdx);
         dlg_preset.showFMSoundMixerDialog();
      }
      else
      {
         Global.Warning("FMSoundMixer: not an FM part");
      }
   }

   // <ui_focus.png>
   protected method refocusDefault() {
      UI.SetKeyboardFocus(cm_sound_lt);
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      refocusDefault();
   }

   // <ui_handle.png>
   protected method handleRevert() {
      MontagePartFM partFM <= parent_synth_form.getEditPartFM();
      if(null != partFM)
      {
         partFM.copyFrom(partfm_orig);
         parent_synth_form.handleParamEdited();
         updateWidgets(partFM);
         Global.Print("Revert Common + Ops");
      }
   }

   // <method.png>
   protected method setLeftTopToCurrent() : boolean {
      int copyPatchIdx = parent_synth_form.findCurrentPartMixCopyPatchIdx();
      if(copyPatchIdx >= 0)
      {
         cm_sound_lt.setSelectedOption(copyPatchIdx);
      }
   }

   // <ui_handle.png>
   protected method handleCurrentChanged() {
      MontagePartFM partFM <= parent_synth_form.getEditPartFM();
      if(null != partFM)
      {
         partFM.b_last_soundmix_lt_current = cb_current.isSelected();
         if(cb_current.isSelected())
         {
            if(setLeftTopToCurrent())
            {
               recalc();
               redraw();
               Global.Print("Force Left-Top to current is "+Utils.GetEnableString(cb_current.isSelected())+" (update LT)");
               return true;
            }
         }
         Global.Print("Force Left-Top to current is "+Utils.GetEnableString(cb_current.isSelected()));
      }
   }

   // <method_get.png>
   protected method getFMPart(int copyOpt) : MontagePartFM {
      int copyPatchIdx = parent_synth_form.partmix_copy_patch_indices.get(copyOpt);
      int copyPartIdx  = parent_synth_form.partmix_copy_part_indices.get(copyOpt);
      int copyVarIdx   = parent_synth_form.partmix_copy_variation_indices.get(copyOpt);

      last_copy_patch_idx = copyPatchIdx;
      last_copy_part_idx  = copyPartIdx;
      last_copy_var_idx   = copyVarIdx;

      MontagePerformance perfSrc <= parent_synth_form.getPerformanceByPatchAndVariation(copyPatchIdx, copyVarIdx);
      if(null != perfSrc)
      {
         MontagePart pSrc <= perfSrc.getPartByIdx(copyPartIdx);
         if(null != pSrc)
         {
            MontagePartFM pFMSrc <= perfSrc.getPartFMByIdx(copyPartIdx);
            return pFMSrc;
         }
      }
      return null;
   }

   // <ui_handle.png>
   protected =replay= method recalc() {
      MontagePartFM partFM <= parent_synth_form.getEditPartFM();
      if(null != partFM)
      {
         boolean bSelf = false;
         MontagePartFM partLT <= getFMPart(cm_sound_lt.getSelectedOption());
         if(null != partLT)
         {
            partFM.last_soundmix_patch_idx_lt = last_copy_patch_idx;
            partFM.last_soundmix_part_idx_lt  = last_copy_part_idx;
            partFM.last_soundmix_var_idx_lt   = last_copy_var_idx;
            bSelf |= (@(partFM) == @(partfm_cur));
         }

         MontagePartFM partRT <= getFMPart(cm_sound_rt.getSelectedOption());
         if(null != partRT)
         {
            partFM.last_soundmix_patch_idx_rt = last_copy_patch_idx;
            partFM.last_soundmix_part_idx_rt  = last_copy_part_idx;
            partFM.last_soundmix_var_idx_rt   = last_copy_var_idx;
            bSelf |= (@(partFM) == @(partfm_cur));
         }

         MontagePartFM partRB <= getFMPart(cm_sound_rb.getSelectedOption());
         if(null != partRB)
         {
            partFM.last_soundmix_patch_idx_rb = last_copy_patch_idx;
            partFM.last_soundmix_part_idx_rb  = last_copy_part_idx;
            partFM.last_soundmix_var_idx_rb   = last_copy_var_idx;
            bSelf |= (@(partFM) == @(partfm_cur));
         }

         MontagePartFM partLB <= getFMPart(cm_sound_lb.getSelectedOption());
         if(null != partLB)
         {
            partFM.last_soundmix_patch_idx_lb = last_copy_patch_idx;
            partFM.last_soundmix_part_idx_lb  = last_copy_part_idx;
            partFM.last_soundmix_var_idx_lb   = last_copy_var_idx;
            bSelf |= (@(partFM) == @(partfm_cur));
         }

         if( (null != partLT) &&
             (null != partRT) &&
             (null != partRB) &&
             (null != partLB)
             )
         {
            int mixGroupFlags = partfm_cur.last_soundmix_mixg_flags;
            boolean bActiveOpOnly = partFM.b_last_soundmix_active_op_only;

            if(bSelf || (MontageDefs.MIXG_ALL != mixGroupFlags) || bActiveOpOnly)
               partfm_cur.copyFromEx(partfm_orig, false/*bCopyLastSoundMix*/);  // revert

            partFM.last_soundmix_common_x = xy_common.getValueX();
            partFM.last_soundmix_common_y = xy_common.getValueY();

            partFM.last_soundmix_op_1_x = xy_op_1.getValueX();
            partFM.last_soundmix_op_1_y = xy_op_1.getValueY();

            partFM.last_soundmix_op_2_x = xy_op_2.getValueX();
            partFM.last_soundmix_op_2_y = xy_op_2.getValueY();

            partFM.last_soundmix_op_3_x = xy_op_3.getValueX();
            partFM.last_soundmix_op_3_y = xy_op_3.getValueY();

            partFM.last_soundmix_op_4_x = xy_op_4.getValueX();
            partFM.last_soundmix_op_4_y = xy_op_4.getValueY();

            partFM.last_soundmix_op_5_x = xy_op_5.getValueX();
            partFM.last_soundmix_op_5_y = xy_op_5.getValueY();

            partFM.last_soundmix_op_6_x = xy_op_6.getValueX();
            partFM.last_soundmix_op_6_y = xy_op_6.getValueY();

            partFM.last_soundmix_op_7_x = xy_op_7.getValueX();
            partFM.last_soundmix_op_7_y = xy_op_7.getValueY();

            partFM.last_soundmix_op_8_x = xy_op_8.getValueX();
            partFM.last_soundmix_op_8_y = xy_op_8.getValueY();

            MontagePartFMCommon comDst <= partFM.common;
            local MontagePartFMCommon comMixT <= MontagePartFMCommon.New(part_idx);
            local MontagePartFMCommon comMixB <= MontagePartFMCommon.New(part_idx);
            comMixT.mixSounds(partLT.common, partRT.common, xy_common.getValueX(), mixGroupFlags);
            comMixB.mixSounds(partLB.common, partRB.common, xy_common.getValueX(), mixGroupFlags);
            comDst.mixSounds(comMixT, comMixB, xy_common.getValueY(), mixGroupFlags);

            local MontagePartFMOperator opMixT <= MontagePartFMOperator.New(part_idx, 0/*opIdx*/);
            local MontagePartFMOperator opMixB <= MontagePartFMOperator.New(part_idx, 0/*opIdx*/);
            int opIdx = 0;
            XYPad *xyOp;
            MontagePartFMOperator *opLT;
            MontagePartFMOperator *opRT;
            MontagePartFMOperator *opRB;
            MontagePartFMOperator *opLB;
            MontagePartFMOperator *opDst;
            foreach xyOp in [xy_op_1, xy_op_2, xy_op_3, xy_op_4, xy_op_5, xy_op_6, xy_op_7, xy_op_8]
            {
               if(bActiveOpOnly)
               {
                  opLT  <= partLT.getActiveOpByIdx(opIdx);
                  opRT  <= partRT.getActiveOpByIdx(opIdx);
                  opRB  <= partRB.getActiveOpByIdx(opIdx);
                  opLB  <= partLB.getActiveOpByIdx(opIdx);
                  opDst <= partFM.getActiveOpByIdx(opIdx);
                  if(null != opDst)
                  {
                     if(null != opLT && null != opRT)
                        opMixT.mixSounds(opLT, opRT, xyOp.getValueX(), mixGroupFlags);
                     else
                        opMixT.copyFrom(opDst);

                     if(null != opLB && null != opRB)
                        opMixB.mixSounds(opLB, opRB, xyOp.getValueX(), mixGroupFlags);
                     else
                        opMixB.copyFrom(opDst);

                     opDst.mixSounds(opMixT, opMixB, xyOp.getValueY(), mixGroupFlags);
                  }
               }
               else
               {
                  opLT  <= partLT.getOpByIdx(opIdx);
                  opRT  <= partRT.getOpByIdx(opIdx);
                  opRB  <= partRB.getOpByIdx(opIdx);
                  opLB  <= partLB.getOpByIdx(opIdx);
                  opDst <= partFM.getOpByIdx(opIdx);
                  opMixT.mixSounds(opLT, opRT, xyOp.getValueX(), mixGroupFlags);
                  opMixB.mixSounds(opLB, opRB, xyOp.getValueX(), mixGroupFlags);
                  opDst.mixSounds(opMixT, opMixB, xyOp.getValueY(), mixGroupFlags);
               }
               opIdx++;
            }

            parent_synth_form.handleParamEdited();
            // // Global.PrintFast("Mix com="+xy_common.getValueString()+" op1="+xy_op_1.getValueString()+" op2="+xy_op_2.getValueString()+" op3="+xy_op_3.getValueString()+" op4="+xy_op_4.getValueString()+" op5="+xy_op_5.getValueString()+" op6="+xy_op_6.getValueString()+" op7="+xy_op_7.getValueString()+" op8="+xy_op_8.getValueString());
         }
      }
   }

   // <method.png>
   protected method syncXY(XYPad _this) {
      XYPad *xy;
      foreach xy in
      (maybe == b_multi) ?
      [xy_op_1, xy_op_2, xy_op_3, xy_op_4, xy_op_5, xy_op_6, xy_op_7, xy_op_8] :
      [xy_common, xy_op_1, xy_op_2, xy_op_3, xy_op_4, xy_op_5, xy_op_6, xy_op_7, xy_op_8]
      {
         if(@(xy) != @(_this))
         {
            xy.setValues(_this.getValueX(), _this.getValueY());
         }
      }
   }

   // <ui_handle.png>
   protected method handleRandSounds() {
      StringArray opt <= parent_synth_form.partmix_copy_names_short;
      local IntArray optFM;
      int catRand = Montage_Patch.category_names.indexOfObject("Init", 0);
      Montage_Patch *[] patches <= parent_synth_form.data.patches;
      int optIdx = 0;
      String *s;
      foreach s in opt
      {
         MontagePartFM pFM <= getFMPart(optIdx);
         if(null != pFM)
         {
            Montage_Patch patch <= patches.get(last_copy_patch_idx);
            if(patch.patch_category != catRand)
            {
               optFM.add(optIdx);
            }
         }
         optIdx++;
      }

      if(optFM.numElements > 0)
      {
         if(cb_current.isSelected())
            setLeftTopToCurrent();
         else
            cm_sound_lt.setSelectedOption(optFM.get(rand(optFM.numElements-1)));
         cm_sound_rt.setSelectedOption(optFM.get(rand(optFM.numElements-1)));
         cm_sound_rb.setSelectedOption(optFM.get(rand(optFM.numElements-1)));
         cm_sound_lb.setSelectedOption(optFM.get(rand(optFM.numElements-1)));
         recalc();
         redraw();
         Global.Print("Randomize Sounds");
      }
      else
      {
         Global.Warning("No FM sounds found !");
      }
   }

   // <ui_handle.png>
   protected method handleRandSoundsFromCurrentPatch() {
      Montage_Patch patch <= parent_synth_form.patch;
      Montage_Patch *[] patches <= parent_synth_form.data.patches;
      StringArray opt <= parent_synth_form.partmix_copy_names_short;
      int patchIdx = patches.indexOfPointer(patch, 0);
      IntArray copyPatchIndices <= parent_synth_form.partmix_copy_patch_indices;
      int copyPatchIdx = copyPatchIndices.indexOf(patchIdx, 0);
      local IntArray optCur;
      if(-1 != copyPatchIdx)
      {
         int idx = copyPatchIdx;
         loop(50000)
         {
            if(copyPatchIndices.get(idx) != patchIdx)
               break;
            optCur.add(idx++);
         }
      }

      if(optCur.numElements > 0)
      {
         if(cb_current.isSelected())
            setLeftTopToCurrent();
         else
            cm_sound_lt.setSelectedOption(optCur.get(rand(optCur.numElements-1)));
         cm_sound_rt.setSelectedOption(optCur.get(rand(optCur.numElements-1)));
         cm_sound_rb.setSelectedOption(optCur.get(rand(optCur.numElements-1)));
         cm_sound_lb.setSelectedOption(optCur.get(rand(optCur.numElements-1)));
         recalc();
         redraw();
         Global.Print("Randomize Sounds (current patch only)");
      }
   }

   // <ui_handle.png>
   protected method handleRandCommon() {
      xy_common.setValues(rand(1.0), rand(1.0));
      recalc();
      redraw();
      Global.Print("Randomize XY Common");
   }

   // <ui_handle.png>
   protected method handleRandOps() {
      XYPad *xy;
      foreach xy in [xy_op_1, xy_op_2, xy_op_3, xy_op_4, xy_op_5, xy_op_6, xy_op_7, xy_op_8]
      {
         xy.setValues(rand(1.0), rand(1.0));
      }
      recalc();
      redraw();
      Global.Print("Randomize XY Ops");
   }

   // <ui_handle.png>
   protected method handleMixGroupFlagChanged(CheckBox _cb, int _grpIdx) {
      MontagePartFM partFM <= parent_synth_form.getEditPartFM();
      if(null != partFM)
      {
         partFM.last_soundmix_mixg_flags = (partFM.last_soundmix_mixg_flags & ~(1 << _grpIdx)) | (_cb.isSelected() << _grpIdx);

         if(_cb.isSelected())
         {
            // Mutual exclusive PITCH_B / PITCH_S
            CheckBox *cbOther;
            if((1 << _grpIdx) == MontageDefs.MIXG_OP_PITCH_B)
            {
               cbOther <= a_mixg_cb.get(12);
               cbOther.setSelected(false);
               partFM.last_soundmix_mixg_flags &= ~(MontageDefs.MIXG_OP_PITCH_S);
            }
            else if((1 << _grpIdx) == MontageDefs.MIXG_OP_PITCH_S)
            {
               cbOther <= a_mixg_cb.get(13);
               cbOther.setSelected(false);
               partFM.last_soundmix_mixg_flags &= ~(MontageDefs.MIXG_OP_PITCH_B);
            }
         }

         recalc();
         Global.Print("Mix Group \""+_cb.getCaption()+"\" is "+Utils.GetEnableString(_cb.isSelected()));
      }
   }

   // <ui_handle.png>
   protected method toggleMixGroupFlags() {
      MontagePartFM partFM <= parent_synth_form.getEditPartFM();
      if(null != partFM)
      {
         if(partFM.last_soundmix_mixg_flags == MontageDefs.MIXG_ALL)
         {
            partFM.last_soundmix_mixg_flags = 0;
            Global.Print("Mix Groups: Select None");
         }
         else
         {
            partFM.last_soundmix_mixg_flags = MontageDefs.MIXG_ALL;
            Global.Print("Mix Groups: Select All");
         }
         updateMixGroupFlags(partFM);
         recalc();
      }
   }

   // <ui_handle.png>
   protected method handleActiveOpOnlyChanged() {
      MontagePartFM partFM <= parent_synth_form.getEditPartFM();
      if(null != partFM)
      {
         partFM.b_last_soundmix_active_op_only = cb_active_op.isSelected();
         recalc();

         Global.Print("Active-Op-only is "+Utils.GetEnableString(partFM.b_last_soundmix_active_op_only));
      }
   }

   // <ui.png>
   public virtual hide() {
      Dialog::hide();
   }

   // <ui_kbd.png>
   public virtual onKey(Key _key) : boolean {
      switch(_key.pressed)
      {
         case VKEY_ESCAPE:
            hide();
            return true;

         default:
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      Layer ap <= _ac.getActionProvider();
      // trace "xxx Montage_FMSoundMixerDialog: acName="+name;

      if(b_multi && (ap instanceof XYPad))
      {
         if( (maybe != b_multi) || (@(ap) != @(xy_common)) )
            syncXY(ap);
      }

      int grpIdx = a_mixg_cb.indexOfPointer(ap, 0);
      if(grpIdx >= 0)
      {
         if(CheckBox.ACTION_HOLD_CLICK == acName)
         {
            toggleMixGroupFlags();
            return true;
         }
         handleMixGroupFlagChanged(ap, grpIdx);
         return true;
      }

      switch(@(ap))
      {
         case @(bt_revert):
            handleRevert();
            return true;

         case @(cb_current):
            handleCurrentChanged();
            return true;

         case @(cb_active_op):
            handleActiveOpOnlyChanged();
            return true;

         case @(cm_sound_lt):
            Global.Print("Left-Top Patch is "+cm_sound_lt.getSelectedOptionName());
            recalc();
            return true;

         case @(cm_sound_rt):
            Global.Print("Right-Top Patch is "+cm_sound_rt.getSelectedOptionName());
            recalc();
            return true;

         case @(cm_sound_rb):
            Global.Print("Right-Bottom Patch is "+cm_sound_rb.getSelectedOptionName());
            recalc();
            return true;

         case @(cm_sound_lb):
            Global.Print("Left-Bottom Patch is "+cm_sound_lb.getSelectedOptionName());
            recalc();
            return true;

         case @(xy_common):
            Global.PrintFast("XY Common pos is "+xy_common.getValueString());
            recalc();
            return true;

         case @(xy_op_1):
            Global.PrintFast("XY Op 1 pos is "+xy_op_1.getValueString());
            recalc();
            return true;

         case @(xy_op_2):
            Global.PrintFast("XY Op 1 pos is "+xy_op_2.getValueString());
            recalc();
            return true;

         case @(xy_op_3):
            Global.PrintFast("XY Op 1 pos is "+xy_op_3.getValueString());
            recalc();
            return true;

         case @(xy_op_4):
            Global.PrintFast("XY Op 1 pos is "+xy_op_4.getValueString());
            recalc();
            return true;

         case @(xy_op_5):
            Global.PrintFast("XY Op 1 pos is "+xy_op_5.getValueString());
            recalc();
            return true;

         case @(xy_op_6):
            Global.PrintFast("XY Op 1 pos is "+xy_op_6.getValueString());
            recalc();
            return true;

         case @(xy_op_7):
            Global.PrintFast("XY Op 1 pos is "+xy_op_7.getValueString());
            recalc();
            return true;

         case @(xy_op_8):
            Global.PrintFast("XY Op 1 pos is "+xy_op_8.getValueString());
            recalc();
            return true;

         case @(cb_multi):
            b_multi = cb_multi.isSelected();
            Global.Print("XY Multi is "+Utils.GetEnableString(b_multi));
            return true;

         case @(bt_rand_sounds):
            if(Button.ACTION_HOLD_CLICK == acName)
               handleRandSoundsFromCurrentPatch();
            else
               handleRandSounds();
            return true;

         case @(bt_rand_common):
            handleRandCommon();
            return true;

         case @(bt_rand_ops):
            handleRandOps();
            return true;

      }

      return Dialog::consumeAction(_ac);
   }

}
