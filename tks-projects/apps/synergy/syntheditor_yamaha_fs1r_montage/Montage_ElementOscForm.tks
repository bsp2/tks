// ----
// ---- file   : Montage_ElementOscForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2022 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 27Oct2022
// ---- changed: 04Nov2022, 10Nov2022, 17Nov2022
// ----
// ----
// ----

module MMontage_ElementOscForm;

use namespace ui;
use namespace st2;


// <class.png>
class Montage_ElementOscForm extends Montage_ParamForm {
   // MontagePartNormalElementOscAmpPitch

   int element_idx;

   protected ComboBox *cm_bank;
   protected ComboBox *cm_wave;

   protected FloatParam *fp_pan;
   protected FloatParam *fp_pan_alt;

   protected FloatParam *fp_pitch_keyfollow_centernote;
   protected FloatParam *fp_pitch_keyfollow;

   protected FloatParam *fp_peg_tkf_center_note;

   protected FloatParam *fp_aeg_tkf_center_note;

   static StringArray preset_waveforms_short;  // 1..6347
   static StringArray preset_waveforms_long;  // 1..6347

   static StringArray user_waveforms_short;  // 1..2048
   static StringArray user_waveforms_long;   // 1..2048

   protected StringArray pan_options;
   protected StringArray note_options;
   protected StringArray keyfollow_options;


   // <method.png>
   protected method genPanOptions() {
      if(pan_options.isEmpty())
      {
         int pan = -64;
         loop(128)
         {
            if(0 == pan)
               pan_options.add("C");
            else if(pan < 0)
               pan_options.add("L"+(-pan));
            else
               pan_options.add("R"+pan);
            pan++;
         }
      }
   }

   // <method.png>
   static StringArray octave_notes = ["C x", "C#x", "D x", "D#x", "E x", "F x", "F#x", "G x", "G#x", "A x", "A#x", "B x"];
   protected method genNoteOptions() {
      if(note_options.isEmpty())
      {
         int noteIdx = 0;
         loop(128)
         {
            note_options.add(octave_notes[noteIdx%12].replace("x", String( (noteIdx/12) -2)));
            noteIdx++;
         }
      }
   }

   // <method.png>
   protected method genKeyFollowOptions() {
      if(keyfollow_options.isEmpty())
      {
         int amt = -200;
         while(amt < -190)
         {
            keyfollow_options.add(amt+"%");
            amt += 1;
         }
         while(amt < -105)
         {
            keyfollow_options.add(amt+"%");
            amt += 5;
         }
         while(amt < -95)
         {
            keyfollow_options.add(amt+"%");
            amt += 1;
         }
         while(amt < -10)
         {
            keyfollow_options.add(amt+"%");
            amt += 5;
         }
         while(amt < 10)
         {
            if(amt >= 0)
               keyfollow_options.add("+"+amt+"%");
            else
               keyfollow_options.add(amt+"%");
            amt += 1;
         }
         while(amt < 95)
         {
            keyfollow_options.add("+"+amt+"%");
            amt += 5;
         }
         while(amt < 105)
         {
            keyfollow_options.add("+"+amt+"%");
            amt += 1;
         }
         while(amt < 190)
         {
            keyfollow_options.add("+"+amt+"%");
            amt += 5;
         }
         while(amt < 190)
         {
            keyfollow_options.add("+"+amt+"%");
            amt += 5;
         }
         while(amt < 192)
         {
            keyfollow_options.add("+"+amt+"%");
            amt += 2;
         }
         while(amt <= 200)
         {
            keyfollow_options.add("+"+amt+"%");
            amt += 1;
         }
      }
   }

   // <init.png>
   public method initElementOscForm(EditMIDISynthFormMontage _parentSynthForm, int _elementIdx) : boolean {

      initParamForm(_parentSynthForm);

      element_idx = _elementIdx;

      local String buf;
      MIDISynthProfile msp <= parent_synth_form.profile;

      String groupCaption <= "Element Osc";

      createWidgetsFromMSPGroup(buf, msp, groupCaption);
      // trace buf;
      // exit(10);

      local String bufXFM;
      bufXFM.load("Montage_ElementOscForm.xfm", true/*bRemoveCR*/);
      bufXFM.replace("$(WIDGETS)", buf);

      if(!parseXMLForm(bufXFM))
      {
         trace "[---] failed to parse \"Montage_ElementOscForm.xfm\"";
         return false;
      }

      if(!autoResolveIds(this))
      {
         return false;
      }

      if(!resolveWidgetsFromMSPGroup(msp, groupCaption, param_widgets))
      {
         trace "[---] Montage_ElementOscForm: resolveWidgetsFromMSPGroup("+groupCaption+") failed.";
         return false;
      }

      cm_wave.setEnablePreview(true);

      genNoteOptions();

      genPanOptions();
      fp_pan.setUserTable(pan_options);
      fp_pan.setDisplayType(FloatParam.DISPLAY_USER);

      fp_pan_alt.setUserTable(pan_options);
      fp_pan_alt.setDisplayType(FloatParam.DISPLAY_USER);

      fp_peg_tkf_center_note.setUserTable(note_options);
      fp_peg_tkf_center_note.setDisplayType(FloatParam.DISPLAY_USER);

      fp_aeg_tkf_center_note.setUserTable(note_options);
      fp_aeg_tkf_center_note.setDisplayType(FloatParam.DISPLAY_USER);

      genKeyFollowOptions();
      fp_pitch_keyfollow.setUserTable(keyfollow_options);
      fp_pitch_keyfollow.setDisplayType(FloatParam.DISPLAY_USER);

      fp_pitch_keyfollow_centernote.setUserTable(note_options);
      fp_pitch_keyfollow_centernote.setDisplayType(FloatParam.DISPLAY_USER);


      // trace "xxx param_widgets="+#(param_widgets);
      // exit(10);

      // genBPNoteOptions();

      // fp_bp.setUserTable(bp_note_options);
      // fp_bp.setDisplayType(FloatParam.DISPLAY_USER);

      if(preset_waveforms_short.isEmpty())
      {
         int tParse = milliSeconds();
         parseWaveforms("montage_preset_waveforms.txt", preset_waveforms_short, preset_waveforms_long, 6347);
         parseWaveforms("montage_user_waveforms.txt",   user_waveforms_short,   user_waveforms_long,   2048);
         if(STConfig.b_debug_profile)
         {
            tParse = milliSeconds() - tParse;
            Global.Profile("Montage_ElementOscForm::init: parseWaveforms() took "+tParse+" milliseconds");
         }
      }

      cm_wave.setOptions(preset_waveforms_short);

      recursiveBuildTabCycleLists();

      return true;
   }

   // <method_init.png>
   protected method parseWaveforms(String _fileName, StringArray _optShort, StringArray _optLong, int _num) {
      _optShort.empty();
      _optLong .empty();
      _optShort.add("0: -");
      _optLong.add("0: -");
      local String pathName <= Utils.ToNativePathName("$(ROOT)/"+_fileName);
      local String buf;
      int waveNr = 1;
      if(buf.loadLocal(pathName, true/*bRemoveCR*/))
      {
         local StringArray lines <= buf.splitChar('\n');
         local String *line;
         int lineNr = 1;
         foreach line in lines
         {
            line.trim();
            if(!(line <= "#") && !line.isBlank())
            {
               // nr <name> <cat> <subcat>
               local StringArray words <= line.splitSpace(true);
               if(words.numElements >= 2)
               {
                  int waveNrTxt = words.get(0);
                  if(waveNrTxt == waveNr)
                  {
                     String *cat;
                     String *subcat;
                     int wordNameIdxLast = words.numElements-1;

                     if(words.numElements >= 3)
                     {
                        cat <= words.get(words.numElements-2);
                        wordNameIdxLast--;

                        if(words.numElements >= 4)
                        {
                           subcat <= words.get(words.numElements-1);
                           wordNameIdxLast--;
                        }
                        else
                        {
                           subcat <= "?";
                        }
                     }
                     else
                     {
                        cat    <= "?";
                        subcat <= "?";
                     }

                     local String name;
                     name.empty();
                     int wordIdx = 1;
                     while(wordIdx <= wordNameIdxLast)
                     {
                        name.append(words.get(wordIdx++));
                        if(wordIdx <= wordNameIdxLast)
                           name.append(" ");
                     }

                     _optShort.add(waveNr+": "+name.abbrev(7));
                     _optLong .add(waveNr+": "+name+"\t["+cat+","+subcat+"]");

                     // Next wave
                     waveNr++;

                     if(waveNr > _num)
                        break;
                  }
                  else
                  {
                     trace "[~~~] Montage_ElementOscForm::parseWaveforms: "+_fileName+":"+lineNr+": expected waveNr="+waveNr+", have="+waveNrTxt+" (skipping..)";
                  }
               } // if >= 2 words
            }  // if ! comment

            lineNr++;
         } // foreach line

         waveNr--;
         Global.Debug("Montage_ElementOscForm::parseWaveforms: parsed "+waveNr+" waveforms from \""+_fileName+"\"");
         waveNr++;

         // Fill in undeclared waveforms
         while(waveNr <= _num)
         {
            _optShort.add(waveNr+": -");
            _optLong .add(waveNr+": -");
            waveNr++;
         }
      }
      else
      {
         trace "[~~~] Montage_ElementOscForm::parseWaveforms: failed to load \""+pathName+"\"";
      }
   }

   // <method.png>
   public method enter() {
   }

   // <method.png>
   public method leave() {
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {
      layers.joinRR(layers, param_widgets);
   }

   // <method_get.png>
   public method getElementOscByIdx(int _elementIdx) : MontagePartNormalElementOscAmpPitch {
      MontagePartNormal pNormal <= parent_synth_form.getEditPartNormal();
      if(null != pNormal)
      {
         MontagePartNormalElement el <= pNormal.getElementByIdx(_elementIdx);
         if(null != el)
         {
            return el.osc_amp_pitch;
         }
      }
      return null;
   }

   // <method_get.png>
   public method getElementOsc() : MontagePartNormalElementOscAmpPitch {
      return getElementOscByIdx(element_idx);
   }

   // <ui_show.png>
   public method updateBankWaveforms() {
      MontagePartNormalElementOscAmpPitch c <= getElementOsc();

      if(null != c)
      {
         if(0 == c.getWaveSelect())
         {
            cm_wave.setOptions(preset_waveforms_short);
            cm_wave.setOptionsLong(preset_waveforms_long);
         }
         else
         {
            cm_wave.setOptions(user_waveforms_short);
            cm_wave.setOptionsLong(user_waveforms_long);
         }
      }
   }

   // <ui_show.png>
   public method showElementOsc() {
      MontagePartNormalElementOscAmpPitch c <= getElementOsc();
      updateBankWaveforms();
      updateParamWidgets(c);
   }

   // <method.png>
   protected method debugData() {
      MontagePartNormalElementOscAmpPitch c <= getElementOsc();
      if(null != c)
      {
         trace "xxx MontagePartNormalElementOscAmpPitch.data:";
         c.data.hexdump(0, c.data.size);
      }
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      if(VKEY_BACKSPACE == _k.code)
      {
         debugData();
         return true;
      }
      return Montage_ParamForm::onKey(_k);
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      Layer ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      int paramIdx = param_widgets.indexOfPointer(ap, 0);
      if(paramIdx >= 0)
      {
         if(VMOD_LALT == UI.GetKeyMod())
         {
            int elementIdx = 0;
            loop(8)
            {
               MontagePartNormalElementOscAmpPitch elementOsc <= getElementOscByIdx(elementIdx++);
               handleParamChanged(elementOsc, paramIdx, ap);
            }
         }
         else
         {
            handleParamChanged(getElementOsc(), paramIdx, ap);
         }

         if(@(ap) == @(cm_bank))
            updateBankWaveforms();

         if(FloatParam.ACTION_VALUECHANGED == acName)
            parent_synth_form.refocusDefault();

         return true;
      }

      // switch(@(ap))
      // {
      //    default:
      //       break;
      // }
   }

}
