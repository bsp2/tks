// ----
// ---- file   : Montage_PartForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2022-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 11Oct2022
// ---- changed: 12Oct2022, 21Oct2022, 22Oct2022, 24Oct2022, 26Oct2022, 28Oct2022, 29Oct2022
// ----          02Nov2022, 07Nov2022, 08Nov2022, 09Nov2022, 10Nov2022, 17Nov2022, 21Sep2023
// ----          22Mar2024
// ----
// ----
// ----

module MMontage_PartForm;

use namespace ui;
use namespace st2;


// <class.png>
class Montage_PartForm extends XMLForm, ActionProvider, MIDIMapDefs, MontageDefs, Montage_EGPresetListener {

   protected EditMIDISynthFormMontage *parent_synth_form;

   protected byte part_idx;     // 0..15

   protected LayerSwitch *ls_mode;

   protected Button     *bt_part;
   protected Button     *bt_t;
   protected FloatParam *fp_noteshift;
   protected FloatParam *fp_detune;
   protected Button     *bt_l;
   protected FloatParam *fp_vol;
   protected FloatParam *fp_pan;
   protected Button     *bt_s;
   protected FloatParam *fp_rev;
   protected FloatParam *fp_var;
   protected FloatParam *fp_dry;

   protected Button     *bt_name;
   protected TextField  *tf_name;
   protected CheckBox   *cb_name_kbdsw;
   protected CheckBox   *cb_name_volexpsw;
   protected CheckBox   *cb_name_fxa;
   protected CheckBox   *cb_name_fxb;
   protected FloatParam *fp_name_fxconn;
   protected Button     *bt_name_microtune;
   protected ComboBox   *cm_name_microtune_scale;
   protected FloatParam *fp_name_microtune_root;

   protected Button     *bt_eq1;
   protected FloatParam *fp_eq1_type;
   protected FloatParam *fp_eq1_freq;
   protected FloatParam *fp_eq1_gain;
   protected FloatParam *fp_eq1_q;
   protected Button     *bt_eq2;
   protected FloatParam *fp_eq2_type;
   protected FloatParam *fp_eq2_freq;
   protected FloatParam *fp_eq2_gain;
   protected FloatParam *fp_eq2_q;
   protected Button     *bt_eq3;
   protected FloatParam *fp_eq3_l_freq;
   protected FloatParam *fp_eq3_l_gain;
   protected FloatParam *fp_eq3_m_freq;
   protected FloatParam *fp_eq3_m_q;
   protected FloatParam *fp_eq3_m_gain;
   protected FloatParam *fp_eq3_h_freq;
   protected FloatParam *fp_eq3_h_gain;

   protected Button     *bt_zone_note;
   protected FloatParam *fp_zone_note_limit_low;
   protected FloatParam *fp_zone_note_limit_high;
   protected Button     *bt_zone_vel;
   protected FloatParam *fp_zone_vel_limit_low;
   protected FloatParam *fp_zone_vel_limit_high;
   protected Button     *bt_zone_vel_sens;
   protected FloatParam *fp_zone_vel_sens_offset;
   protected FloatParam *fp_zone_vel_sens_depth;
   protected Button     *bt_zone_pb;
   protected FloatParam *fp_zone_pb_range_lower;
   protected FloatParam *fp_zone_pb_range_upper;
   protected Button     *bt_zone_porta;
   protected CheckBox   *cb_zone_porta_sw;
   protected FloatParam *fp_zone_porta_time;
   protected FloatParam *fp_zone_porta_mode;
   protected FloatParam *fp_zone_porta_time_mode;
   protected CheckBox   *cb_zone_poly;

   protected Button     *bt_eg_aeg;
   protected FloatParam *fp_eg_aeg_a_time;
   protected FloatParam *fp_eg_aeg_d_time;
   protected FloatParam *fp_eg_aeg_s_level;
   protected FloatParam *fp_eg_aeg_r_time;
   protected Button     *bt_eg_feg;
   protected FloatParam *fp_eg_feg_a_time;
   protected FloatParam *fp_eg_feg_d_time;
   protected FloatParam *fp_eg_feg_s_level;
   protected FloatParam *fp_eg_feg_r_time;
   protected FloatParam *fp_eg_feg_depth;
   protected Button     *bt_eg_flt;
   protected FloatParam *fp_eg_flt_cutoff;
   protected FloatParam *fp_eg_flt_res;

   protected Button     *bt_knob;
   protected FloatParam *fp_knob_1;
   protected FloatParam *fp_knob_2;
   protected FloatParam *fp_knob_3;
   protected FloatParam *fp_knob_4;
   protected FloatParam *fp_knob_5;
   protected FloatParam *fp_knob_6;
   protected FloatParam *fp_knob_7;
   protected FloatParam *fp_knob_8;
   protected Button     *bt_knob_ef;
   protected FloatParam *fp_knob_ef_gain;
   protected FloatParam *fp_knob_ef_a;
   protected FloatParam *fp_knob_ef_r;
   protected Button     *bt_knob_out;
   protected ComboBox   *cm_knob_out;

   protected Button     *bt_copy_patch;
   protected ComboBox   *cm_copy_patch;
   protected Button     *bt_copy_peq;
   protected ComboBox   *cm_copy_peq;
   protected Button     *bt_copy_pfx;
   protected ComboBox   *cm_copy_pfx;
   protected Button     *bt_copy_mfx;
   protected ComboBox   *cm_copy_mfx;

   protected PopupMenu *pm_context;

   // protected static Prophet12_LFO lfo_clipboard;

   static StringArray pan_options;

   static StringArray eq12_freq_options = [
      "16.0", "16.3", "17.0", "17.3", "18.0", "18.3", "19.0", "19.4", "20.0", "20.5", "21.2", "21.8", "22.4", "23.0", "23.6", "24.4", "25.0", "25.9", "26.5", "27.4", "28.0", "29.0", "30.0", "30.7", "31.5", "32.5", "33.5", "34.5", "35.5", "36.5", "37.5", "38.7", "40.0", "41.0", "42.5", "43.4", "45.0", "46.0", "47.5", "48.7", "50.0", "51.6", "53.0", "54.6", "56.0", "57.9", "60.0", "61.3", "63.0", "64.9", "67.0", "68.8", "71.0", "72.9", "75.0", "77.2", "80.0", "81.8", "85.0", "86.6", "90.0", "91.7", "95.0", "97.2", "100", "103", "106", "109", "112", "115", "118", "122", "125", "130", "132", "137", "140", "145", "150", "154", "160", "163", "170", "173", "180", "183", "190", "194", "200", "205", "212", "218", "224", "230", "236", "244", "250", "259", "265", "274", "280", "290", "300", "307", "315", "325", "335", "345", "355", "365", "375", "387", "400", "410", "425", "434", "450", "460", "475", "487", "500", "516", "530", "546", "560", "579", "600", "613", "630", "649", "670", "688", "710", "729", "750", "772", "800", "818", "850", "866", "900", "917", "950", "972", "1.00k", "1.03k", "1.06k", "1.09k", "1.12k", "1.15k", "1.18k", "1.22k", "1.25k", "1.30k", "1.32k", "1.37k", "1.40k", "1.45k", "1.50k", "1.54k", "1.60k", "1.63k", "1.70k", "1.73k", "1.80k", "1.83k", "1.90k", "1.94k", "2.00k", "2.05k", "2.12k", "2.18k", "2.24k", "2.30k", "2.36k", "2.44k", "2.50k", "2.59k", "2.65k", "2.74k", "2.80k", "2.90k", "3.00k", "3.07k", "3.15k", "3.25k", "3.35k", "3.45k", "3.55k", "3.65k", "3.75k", "3.87k", "4.00k", "4.10k", "4.25k", "4.34k", "4.50k", "4.60k", "4.75k", "4.87k", "5.00k", "5.16k", "5.30k", "5.46k", "5.60k", "5.79k", "6.00k", "6.13k", "6.30k", "6.49k", "6.70k", "6.88k", "7.10k", "7.29k", "7.50k", "7.72k", "8.00k", "8.18k", "8.50k", "8.66k", "9.00k", "9.17k", "9.50k", "9.72k", "10.0k", "10.3k", "10.6k", "10.9k", "11.2k", "11.5k", "11.8k", "12.2k", "12.5k", "13.0k", "13.2k", "13.7k", "14.0k", "14.5k", "15.0k", "15.4k", "16.0k", "16.3k", "17.0k", "17.3k", "18.0k", "18.3k", "19.0k", "19.4k", "20.0k", "20.5k", "21.2k", "21.8k", "22.4k", "23.0k", "23.6k", "24.4k"
                                         ];

   static StringArray eq12_gain_options;

   static StringArray eq3_freq_options = [
      // low:
      "50.1", "51.2", "52.3", "53.3", "54.4", "56.1", "58.3", "60.4", "62.5", "64.7", "66.8", "69.0", "71.1", "73.3", "75.4", "77.5", "79.7", "81.8", "84.0", "86.1", "88.2", "90.4", "92.5", "94.7", "96.8", "99.0", "101.1", "103.2", "105.4", "107.5", "109.7", "114.0", "118.2", "122.5", "126.8", "131.1", "135.4",
      // low+mid:
      "139.7", "143.9", "148.2", "152.5", "156.8", "161.1", "165.4", "169.6", "173.9", "178.2", "182.5", "186.8", "191.1", "195.3", "199.6", "203.9", "208.2", "212.5", "216.8", "222.8", "231.3", "239.9", "248.5", "257.0", "265.6", "274.2", "282.7", "291.3", "299.9", "308.4", "317.0", "325.6", "334.1", "342.7", "351.3", "359.8", "368.4", "377.0", "385.5", "394.1", "402.7", "411.3", "419.8", "428.4", "437.0", "452.4", "469.5", "486.6", "503.8", "520.9", "538.1", "555.2", "572.3", "589.5", "606.6", "623.7", "640.9", "658.0", "675.1", "692.3", "709.4", "726.5", "743.7", "760.8", "778.0", "795.1", "812.2", "829.4", "846.5", "863.6", "884.2", "918.5", "952.7", "987.0", "1.02k", "1.06k", "1.09k", "1.12k", "1.16k", "1.19k", "1.23k", "1.26k", "1.30k", "1.33k", "1.36k", "1.40k", "1.43k", "1.47k", "1.50k", "1.54k", "1.57k", "1.60k", "1.64k", "1.67k", "1.71k", "1.74k", "1.80k", "1.86k", "1.93k", "2.00k",
      // mid/high:
      "2.07k", "2.14k", "2.21k", "2.28k", "2.34k", "2.41k", "2.48k", "2.55k", "2.62k", "2.69k", "2.76k", "2.82k", "2.89k", "2.96k", "3.03k", "3.10k", "3.17k", "3.24k", "3.30k", "3.37k", "3.44k", "3.51k", "3.65k", "3.78k", "3.92k", "4.06k", "4.19k", "4.33k", "4.47k", "4.61k", "4.74k", "4.88k", "5.02k", "5.15k", "5.29k", "5.43k", "5.57k", "5.70k", "5.84k", "5.98k", "6.11k", "6.25k", "6.39k", "6.53k", "6.66k", "6.80k", "6.94k", "7.13k", "7.40k", "7.68k", "7.95k", "8.23k", "8.50k", "8.77k", "9.05k", "9.32k", "9.60k", "9.87k", "10.1k",
      // high:
      "10.4k", "10.7k", "11.0k", "11.2k", "11.5k", "11.8k", "12.1k", "12.3k", "12.6k", "12.9k", "13.2k", "13.4k", "13.7k", "14.0k"
                                            ];

   static StringArray eq3_gain_options = [
      "-12.00", "-11.63", "-11.25", "-10.88", "-10.50", "-10.13", "-9.75", "-9.38", "-9.00", "-8.63", "-8.25", "-7.88", "-7.50", "-7.13", "-6.75", "-6.38", "-6.00", "-5.63", "-5.25", "-4.88", "-4.50", "-4.13", "-3.75", "-3.38", "-3.00", "-2.63", "-2.25", "-1.88", "-1.50", "-1.13", "-0.75", "-0.38",
      "+0.00",
      "+0.38", "+0.75", "+1.13", "+1.50", "+1.88", "+2.25", "+2.63", "+3.00", "+3.38", "+3.75", "+4.13", "+4.50", "+4.88", "+5.25", "+5.63", "+6.00", "+6.38", "+6.75", "+7.13", "+7.50", "+7.88", "+8.25", "+8.63", "+9.00", "+9.38", "+9.75", "+10.13", "+10.50", "+10.88", "+11.25", "+11.63", "+12.00"
                                          ];
   static StringArray eq3_mid_q_options;

   static StringArray ef_gain_options;

   static StringArray ef_a_options = [ "1ms", "2ms", "3ms", "4ms", "5ms", "6ms", "7ms", "8ms", "9ms", "10ms", "12ms", "14ms", "16ms", "18ms", "20ms", "23ms", "26ms", "30ms", "35ms", "40ms" ];

   static StringArray ef_r_options = [ "10ms", "15ms", "25ms", "35ms", "45ms", "55ms", "65ms", "75ms", "85ms", "100ms", "115ms", "140ms", "170ms", "230ms", "340ms", "680ms" ];

   static StringArray out_options = [
      "Main L&R",
      "Asgn L&R", // 1=>8
      "USB 1&2",  // 2=>9
      "USB 3&4",
      "USB 5&6",
      "USB 7&8",
      "USB 9&10",
      "USB 11&12",
      "USB 13&14",
      "USB 15&16",
      "USB 17&18",
      "USB 19&20",
      "USB 21&22",
      "USB 23&24",
      "USB 25&26",
      "USB 27&28",
      "USB 29&30",
      "Asgn L",  // 17=>64
      "Asgn R",  // 18=>65
      "USB 1",
      "USB 2",
      "USB 3",
      "USB 4",
      "USB 5",
      "USB 6",
      "USB 7",
      "USB 8",
      "USB 9",
      "USB 10",
      "USB 11",
      "USB 12",
      "USB 13",
      "USB 14",
      "USB 15",
      "USB 16",
      "USB 17",
      "USB 18",
      "USB 19",
      "USB 20",
      "USB 21",
      "USB 22",
      "USB 23",
      "USB 24",
      "USB 25",
      "USB 26",
      "USB 27",
      "USB 28",
      "USB 29",
      "USB 30",
      "Off",    // 49=>125
      "Drum"    // 50=>127
                          ];
   static IntArray out_to_cm;

   static StringArray microtune_scale_options = [
      "Equal Temperament",
      "Pure Major",
      "Pure Minor",
      "Werckmeister",
      "Kirnberger",
      "Valloti&Young",
      "1/4 Shift",
      "1/4 tone",
      "1/8 tone",
      "Indian",
      "Arabic 1",
      "Arabic 2",
      "Arabic 3",
      "User 1",
      "User 2",
      "User 3",
      "User 4",
      "User 5",
      "User 6",
      "User 7",
      "User 8",
      "Library 1",
      "Library 2",
      "Library 3",
      "Library 4",
      "Library 5",
      "Library 6",
      "Library 7",
      "Library 8",
      "Library 9",
      "Library 10",
      "Library 11",
      "Library 12",
      "Library 13",
      "Library 14",
      "Library 15",
      "Library 16",
      "Library 17",
      "Library 18",
      "Library 19",
      "Library 20",
      "Library 21",
      "Library 22",
      "Library 23",
      "Library 24",
                                                  ];

   boolean b_copy_other_part_settings;


   // <init.png>
   protected method genOutLUT() {
      out_to_cm.allocAndFill(128,0);
      out_to_cm.empty();

      int cmIdx = 0;
      loop(8)
         out_to_cm.add(cmIdx);

      cmIdx = 1;
      loop(16)
         out_to_cm.add(cmIdx++);

      cmIdx = 16;
      loop(64-24)
         out_to_cm.add(cmIdx);

      cmIdx = 17;
      loop(2+30)
         out_to_cm.add(cmIdx++);

      cmIdx--;
      loop(125-96)
         out_to_cm.add(cmIdx);

      out_to_cm.add(49);
      out_to_cm.add(49);
      out_to_cm.add(50);
   }

   // <init.png>
   public method init(EditMIDISynthFormMontage _parentSynthForm, int _partIdx) : boolean {

      parent_synth_form <= _parentSynthForm;
      part_idx = _partIdx;

      if(!initPakFile("Montage_PartForm.xfm"))
      {
         trace "[---] failed to parse \"Montage_PartForm.xfm\"";
         return false;
      }

      if(!autoResolveIds(this))
      {
         return false;
      }

      bt_part.setCaption((part_idx+1)+": ");

      cm_name_microtune_scale.setOptions(microtune_scale_options);
      cm_name_microtune_scale.setOptionsLong(microtune_scale_options);

      fp_eq1_freq.setUserTable(eq12_freq_options);
      fp_eq1_freq.setDisplayType(FloatParam.DISPLAY_USER);

      local Float gain;

      if(eq12_gain_options.isEmpty())
      {
         gain = -12.0;
         loop(49)
         {
            if(gain >= 0.0)
               eq12_gain_options.add(gain.printf("+%2.1f"));
            else
               eq12_gain_options.add(gain.printf("%2.1f"));
            gain += 0.5;
         }
      }

      fp_eq1_gain.setUserTable(eq12_gain_options);
      fp_eq1_gain.setDisplayType(FloatParam.DISPLAY_USER);

      fp_eq2_freq.setUserTable(eq12_freq_options);
      fp_eq2_freq.setDisplayType(FloatParam.DISPLAY_USER);

      fp_eq2_gain.setUserTable(eq12_gain_options);
      fp_eq2_gain.setDisplayType(FloatParam.DISPLAY_USER);

      if(pan_options.isEmpty())
      {
         int pan = -63;
         loop(127)
         {
            if(0 == pan)
               pan_options.add("C");
            else if(pan < 0)
               pan_options.add("L"+(-pan));
            else
               pan_options.add("R"+pan);
            pan++;
         }
      }
      fp_pan.setUserTable(pan_options);
      fp_pan.setDisplayType(FloatParam.DISPLAY_USER);

      // trace "xxx eq3_freq_options.num="+eq3_freq_options.numElements+" a="+eq3_freq_options;  // num=210
      // trace "xxx eq3_freq_options.num="+eq3_freq_options.numElements+" idxMidStart="+eq3_freq_options.indexOfObject("139.7", 0)+" idxMid="+eq3_freq_options.indexOfObject("10.1k", 0)+" idxHiStart="+eq3_freq_options.indexOfObject("503.8", 0)+" idxHi="+eq3_freq_options.indexOfObject("14.0k", 0);

      fp_eq3_l_freq.setUserTable(eq3_freq_options);
      fp_eq3_l_freq.setEnableUserTableStart0(true);
      fp_eq3_l_freq.setDisplayType(FloatParam.DISPLAY_USER);
      fp_eq3_m_freq.setUserTable(eq3_freq_options);
      fp_eq3_m_freq.setEnableUserTableStart0(true);
      fp_eq3_m_freq.setDisplayType(FloatParam.DISPLAY_USER);
      fp_eq3_h_freq.setUserTable(eq3_freq_options);
      fp_eq3_h_freq.setEnableUserTableStart0(true);
      fp_eq3_h_freq.setDisplayType(FloatParam.DISPLAY_USER);

      fp_eq3_l_gain.setUserTable(eq3_gain_options);
      fp_eq3_l_gain.setDisplayType(FloatParam.DISPLAY_USER);
      fp_eq3_m_gain.setUserTable(eq3_gain_options);
      fp_eq3_m_gain.setDisplayType(FloatParam.DISPLAY_USER);
      fp_eq3_h_gain.setUserTable(eq3_gain_options);
      fp_eq3_h_gain.setDisplayType(FloatParam.DISPLAY_USER);

      if(eq3_mid_q_options.isEmpty())
      {
         local Float q = 0.7;
         loop(32)
         {
            eq3_mid_q_options.add(q.printf("%2.2f"));
            q += (10.3-0.7)/31;
         }
      }
      fp_eq3_m_q.setUserTable(eq3_mid_q_options);
      fp_eq3_m_q.setDisplayType(FloatParam.DISPLAY_USER);

      if(ef_gain_options.isEmpty())
      {
         gain = -24.0;
         loop(97)
         {
            if(gain >= 0.0)
               ef_gain_options.add(gain.printf("+%2.1f"));
            else
               ef_gain_options.add(gain.printf("%2.1f"));
            gain += 0.5;
         }

      }

      fp_knob_ef_gain.setUserTable(ef_gain_options);
      fp_knob_ef_gain.setDisplayType(FloatParam.DISPLAY_USER);

      fp_knob_ef_a.setUserTable(ef_a_options);
      fp_knob_ef_a.setDisplayType(FloatParam.DISPLAY_USER);

      fp_knob_ef_r.setUserTable(ef_r_options);
      fp_knob_ef_r.setDisplayType(FloatParam.DISPLAY_USER);

      genOutLUT();
      cm_knob_out.setOptions(out_options);


      Layer *l;
      foreach l in [bt_part,

                    fp_noteshift,
                    fp_detune,
                    fp_vol,
                    fp_pan,
                    fp_rev,
                    fp_var,
                    fp_dry,

                    bt_name,
                    tf_name,
                    cb_name_kbdsw,
                    cb_name_volexpsw,
                    cb_name_fxa,
                    cb_name_fxb,
                    fp_name_fxconn,
                    bt_name_microtune,
                    cm_name_microtune_scale,
                    fp_name_microtune_root,

                    fp_eq1_type,
                    fp_eq1_freq,
                    fp_eq1_gain,
                    fp_eq1_q,
                    fp_eq2_type,
                    fp_eq2_freq,
                    fp_eq2_gain,
                    fp_eq2_q,
                    fp_eq3_l_freq,
                    fp_eq3_l_gain,
                    fp_eq3_m_freq,
                    fp_eq3_m_q,
                    fp_eq3_m_gain,
                    fp_eq3_h_freq,
                    fp_eq3_h_gain,

                    bt_zone_note,
                    fp_zone_note_limit_low,
                    fp_zone_note_limit_high,
                    bt_zone_vel,
                    fp_zone_vel_limit_low,
                    fp_zone_vel_limit_high,
                    bt_zone_vel_sens,
                    fp_zone_vel_sens_offset,
                    fp_zone_vel_sens_depth,
                    bt_zone_pb,
                    fp_zone_pb_range_lower,
                    fp_zone_pb_range_upper,
                    bt_zone_porta,
                    cb_zone_porta_sw,
                    fp_zone_porta_time,
                    fp_zone_porta_mode,
                    fp_zone_porta_time_mode,
                    cb_zone_poly,

                    bt_eg_aeg,
                    fp_eg_aeg_a_time,
                    fp_eg_aeg_d_time,
                    fp_eg_aeg_s_level,
                    fp_eg_aeg_r_time,
                    bt_eg_feg,
                    fp_eg_feg_a_time,
                    fp_eg_feg_d_time,
                    fp_eg_feg_s_level,
                    fp_eg_feg_r_time,
                    fp_eg_feg_depth,
                    bt_eg_flt,
                    fp_eg_flt_cutoff,
                    fp_eg_flt_res,

                    bt_knob,
                    fp_knob_1,
                    fp_knob_2,
                    fp_knob_3,
                    fp_knob_4,
                    fp_knob_5,
                    fp_knob_6,
                    fp_knob_7,
                    fp_knob_8,
                    bt_knob_ef,
                    fp_knob_ef_gain,
                    fp_knob_ef_a,
                    fp_knob_ef_r,
                    bt_knob_out,
                    cm_knob_out,

                    bt_copy_patch,
                    cm_copy_patch,
                    bt_copy_peq,
                    cm_copy_peq,
                    bt_copy_pfx,
                    cm_copy_pfx,
                    bt_copy_mfx,
                    cm_copy_mfx,
                    ]
         initPartToolTipCaption(l);


      recursiveBuildTabCycleLists();

      return true;
   }

   // <method_init.png>
   protected method initPartToolTipCaption(Layer _l) {
      _l.setUserData(Object(_l.getToolTipCaption()));
   }

   // <method_update.png>
   protected method updatePartToolTipCaption(Layer _l, String _sPart, String _sName, String _sType) {
      String s = _l.getUserData();
      s.replace("$P", _sPart);
      s.replace("$N", _sName);
      s.replace("$T", _sType);
      _l.setToolTipCaption(s);
   }

   // <method_update.png>
   protected method updatePartToolTipCaptions() {
      local String sPart <= String(part_idx+1);
      local String sName <= parent_synth_form.getPartName(part_idx);
      sName.trim();
      local String sType <= parent_synth_form.getPartTypeName(part_idx);

      Layer *l;
      foreach l in [bt_part,
                    fp_noteshift,
                    fp_detune,
                    fp_vol,
                    fp_pan,
                    fp_rev,
                    fp_var,
                    fp_dry,

                    bt_name,
                    tf_name,
                    cb_name_kbdsw,
                    cb_name_volexpsw,
                    cb_name_fxa,
                    cb_name_fxb,
                    fp_name_fxconn,
                    bt_name_microtune,
                    cm_name_microtune_scale,
                    fp_name_microtune_root,

                    fp_eq1_type,
                    fp_eq1_freq,
                    fp_eq1_gain,
                    fp_eq1_q,
                    fp_eq2_type,
                    fp_eq2_freq,
                    fp_eq2_gain,
                    fp_eq2_q,
                    fp_eq3_l_freq,
                    fp_eq3_l_gain,
                    fp_eq3_m_freq,
                    fp_eq3_m_q,
                    fp_eq3_m_gain,
                    fp_eq3_h_freq,
                    fp_eq3_h_gain,

                    bt_zone_note,
                    fp_zone_note_limit_low,
                    fp_zone_note_limit_high,
                    bt_zone_vel,
                    fp_zone_vel_limit_low,
                    fp_zone_vel_limit_high,
                    bt_zone_vel_sens,
                    fp_zone_vel_sens_offset,
                    fp_zone_vel_sens_depth,
                    bt_zone_pb,
                    fp_zone_pb_range_lower,
                    fp_zone_pb_range_upper,
                    bt_zone_porta,
                    cb_zone_porta_sw,
                    fp_zone_porta_time,
                    fp_zone_porta_mode,
                    fp_zone_porta_time_mode,
                    cb_zone_poly,

                    bt_eg_aeg,
                    fp_eg_aeg_a_time,
                    fp_eg_aeg_d_time,
                    fp_eg_aeg_s_level,
                    fp_eg_aeg_r_time,
                    bt_eg_feg,
                    fp_eg_feg_a_time,
                    fp_eg_feg_d_time,
                    fp_eg_feg_s_level,
                    fp_eg_feg_r_time,
                    fp_eg_feg_depth,
                    bt_eg_flt,
                    fp_eg_flt_cutoff,
                    fp_eg_flt_res,

                    bt_knob,
                    fp_knob_1,
                    fp_knob_2,
                    fp_knob_3,
                    fp_knob_4,
                    fp_knob_5,
                    fp_knob_6,
                    fp_knob_7,
                    fp_knob_8,
                    bt_knob_ef,
                    fp_knob_ef_gain,
                    fp_knob_ef_a,
                    fp_knob_ef_r,
                    bt_knob_out,
                    cm_knob_out,

                    bt_copy_patch,
                    cm_copy_patch,
                    bt_copy_peq,
                    cm_copy_peq,
                    bt_copy_pfx,
                    cm_copy_pfx,
                    bt_copy_mfx,
                    cm_copy_mfx,
                    ]
         updatePartToolTipCaption(l, sPart, sName, sType);
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {
      // (todo) mode switch
      layers.joinRR(layers,
                    [
                       fp_noteshift,
                       fp_detune,
                       fp_vol,
                       fp_pan,
                       fp_rev,
                       fp_var,
                       fp_dry,
                     ]);

      switch(ls_mode.getCurrentChildNr())
      {
         default:
         case 0:
            layers.joinRR(layers,
                          [
                             bt_name,
                             tf_name,
                             cb_name_kbdsw,
                             cb_name_volexpsw,
                             cb_name_fxa,
                             cb_name_fxb,
                             fp_name_fxconn,
                             bt_name_microtune,
                             cm_name_microtune_scale,
                             fp_name_microtune_root,
                           ]);
            break;

                    //    // too dangerous for tab-cycling:
                    //    // bt_copy_patch,
                    //    // cm_copy_patch,
                    //    // bt_copy_peq,
                    //    // cm_copy_peq,
                    //    // bt_copy_pfx,
                    //    // cm_copy_pfx,
                    //    // bt_copy_mfx,
                    //    // cm_copy_mfx,
                    //  ]
                    // );

         case 2:
            layers.joinRR(layers,
                          [
                             fp_eq1_type,
                             fp_eq1_freq,
                             fp_eq1_gain,
                             fp_eq1_q,
                             fp_eq2_type,
                             fp_eq2_freq,
                             fp_eq2_gain,
                             fp_eq2_q,
                             fp_eq3_l_freq,
                             fp_eq3_l_gain,
                             fp_eq3_m_freq,
                             fp_eq3_m_q,
                             fp_eq3_m_gain,
                             fp_eq3_h_freq,
                             fp_eq3_h_gain,
                           ]);
            break;

         case 3:
            layers.joinRR(layers,
                          [
                             bt_zone_note,
                             fp_zone_note_limit_low,
                             fp_zone_note_limit_high,
                             bt_zone_vel,
                             fp_zone_vel_limit_low,
                             fp_zone_vel_limit_high,
                             bt_zone_vel_sens,
                             fp_zone_vel_sens_offset,
                             fp_zone_vel_sens_depth,
                             bt_zone_pb,
                             fp_zone_pb_range_lower,
                             fp_zone_pb_range_upper,
                             bt_zone_porta,
                             cb_zone_porta_sw,
                             fp_zone_porta_time,
                             fp_zone_porta_mode,
                             fp_zone_porta_time_mode,
                             cb_zone_poly,
                           ]);
            break;

         case 4:
            layers.joinRR(layers,
                          [
                             bt_eg_aeg,
                             fp_eg_aeg_a_time,
                             fp_eg_aeg_d_time,
                             fp_eg_aeg_s_level,
                             fp_eg_aeg_r_time,
                             bt_eg_feg,
                             fp_eg_feg_a_time,
                             fp_eg_feg_d_time,
                             fp_eg_feg_s_level,
                             fp_eg_feg_r_time,
                             fp_eg_feg_depth,
                             bt_eg_flt,
                             fp_eg_flt_cutoff,
                             fp_eg_flt_res,
                           ]);
            break;

         case 5:
            layers.joinRR(layers,
                          [
                             bt_knob,
                             fp_knob_1,
                             fp_knob_2,
                             fp_knob_3,
                             fp_knob_4,
                             fp_knob_5,
                             fp_knob_6,
                             fp_knob_7,
                             fp_knob_8,
                             bt_knob_ef,
                             fp_knob_ef_gain,
                             fp_knob_ef_a,
                             fp_knob_ef_r,

                             bt_knob_out,
                             cm_knob_out,
                           ]);
            break;
      }
   }

   // <method_get.png>
   public method getPart() : MontagePart {
      MontagePart p <= parent_synth_form.getPartByIdx(part_idx);
      return p;
   }

   // <ui_show.png>
   public method showPart() {
      // (note) takes 0..1 milliseconds
      MontagePart p <= getPart();
      if(null != p)
      {
         // if(0 == part_idx)
         //    trace "xxx PartForm::showPart: p="+#(p);

         fp_noteshift .setValueAndEnable(p.getNoteShift());
         fp_detune    .setValueAndEnable(p.getDetune());
         fp_vol       .setValueAndEnable(p.getVolume());
         fp_pan       .setValueAndEnable(p.getPan() + 63);
         fp_rev       .setValueAndEnable(p.getReverbSend());
         fp_var       .setValueAndEnable(p.getVariationSend());
         fp_dry       .setValueAndEnable(p.getDryLevel());

         MontagePartFM     pFM     <= parent_synth_form.getPartFMByIdx(part_idx);
         MontagePartNormal pNormal <= parent_synth_form.getPartNormalByIdx(part_idx);
         MontagePartDrum   pDrum   <= parent_synth_form.getPartDrumByIdx(part_idx);
         if(null != pFM)
            bt_name.setCaption(" FM-X     Name:");
         else if(null != pNormal)
            bt_name.setCaption(" AWM2     Name:");
         else if(null != pDrum)
            bt_name.setCaption(" DRUM     Name:");
         else if(null != pDrum)
            bt_name.setCaption(" ????     Name:");

         tf_name.setText(p.getName().trim());
         tf_name.setEditable(true);

         cb_name_kbdsw          .setSelectedAndEnable(p.getKeyboardControlSwitch());
         cb_name_volexpsw       .setSelectedAndEnable(p.getEnableVolExp());
         cb_name_fxa            .setSelectedAndEnable(p.getInsertionFXSwitch()&1);
         cb_name_fxb            .setSelectedAndEnable((p.getInsertionFXSwitch()>>1)&1);
         fp_name_fxconn         .setValueAndEnable(p.getInsertionConnectionType());
         cm_name_microtune_scale.setSelectedOptionAndEnable(p.getMicroTuningScale());
         fp_name_microtune_root .setValueAndEnable(p.getMicroTuningRoot());

         fp_eq1_type  .setValueAndEnable(p.getEQ1Type());
         fp_eq1_freq  .setValueAndEnable(p.getEQ1Freq());
         fp_eq1_gain  .setValueAndEnable(p.getEQ1Gain() + 24);
         fp_eq1_q     .setValueAndEnable(p.getEQ1Q() / 10.0);
         fp_eq2_type  .setValueAndEnable(p.getEQ2Type());
         fp_eq2_freq  .setValueAndEnable(p.getEQ2Freq());
         fp_eq2_gain  .setValueAndEnable(p.getEQ2Gain() + 24);
         fp_eq2_q     .setValueAndEnable(p.getEQ2Q() / 10.0);
         fp_eq3_l_freq.setValueAndEnable(p.getEQ3LowFreq() - 46);
         fp_eq3_l_gain.setValueAndEnable(p.getEQ3LowGain() - 32);
         fp_eq3_m_freq.setValueAndEnable(p.getEQ3MidFreq() - 46);//- 1 - 46 - 46 - 36 - 37);
         fp_eq3_m_q   .setValueAndEnable(p.getEQ3MidQ());
         fp_eq3_m_gain.setValueAndEnable(p.getEQ3MidGain() - 32);
         fp_eq3_h_freq.setValueAndEnable(p.getEQ3HighFreq() - 46);
         fp_eq3_h_gain.setValueAndEnable(p.getEQ3HighGain() - 32);

         fp_zone_note_limit_low  .setValueAndEnable(p.getNoteLimitLow());
         fp_zone_note_limit_high .setValueAndEnable(p.getNoteLimitHigh());
         fp_zone_vel_limit_low   .setValueAndEnable(p.getVelocityLimitLow());
         fp_zone_vel_limit_high  .setValueAndEnable(p.getVelocityLimitHigh());
         fp_zone_vel_sens_offset .setValueAndEnable(p.getVelocitySenseOffset());
         fp_zone_vel_sens_depth  .setValueAndEnable(p.getVelocitySenseDepth());
         fp_zone_pb_range_lower  .setValueAndEnable(p.getPitchBendRangeLower());
         fp_zone_pb_range_upper  .setValueAndEnable(p.getPitchBendRangeUpper());
         cb_zone_porta_sw        .setSelectedAndEnable(p.getPortamentoSwitch());
         fp_zone_porta_time      .setValueAndEnable(p.getPortamentoTime());
         fp_zone_porta_mode      .setValueAndEnable(p.getPortamentoMode());
         fp_zone_porta_time_mode .setValueAndEnable(p.getPortamentoTimeMode());
         cb_zone_poly            .setSelectedAndEnable(p.getPolySwitch());

         fp_eg_aeg_a_time .setValueAndEnable(p.getAEGAttackTime());
         fp_eg_aeg_d_time .setValueAndEnable(p.getAEGDecayTime());
         fp_eg_aeg_s_level.setValueAndEnable(p.getAEGSustainLevel());
         fp_eg_aeg_r_time .setValueAndEnable(p.getAEGReleaseTime());
         fp_eg_feg_a_time .setValueAndEnable(p.getFEGAttackTime());
         fp_eg_feg_d_time .setValueAndEnable(p.getFEGDecayTime());
         fp_eg_feg_s_level.setValueAndEnable(p.getFEGSustainLevel());
         fp_eg_feg_r_time .setValueAndEnable(p.getFEGReleaseTime());
         fp_eg_feg_depth  .setValueAndEnable(p.getFEGDepth());
         fp_eg_flt_cutoff .setValueAndEnable(p.getFilterCutoff());
         fp_eg_flt_res    .setValueAndEnable(p.getFilterRes());

         fp_knob_1.setValueAndEnable(p.getAssignableKnobValueByIdx(0));
         fp_knob_2.setValueAndEnable(p.getAssignableKnobValueByIdx(1));
         fp_knob_3.setValueAndEnable(p.getAssignableKnobValueByIdx(2));
         fp_knob_4.setValueAndEnable(p.getAssignableKnobValueByIdx(3));
         fp_knob_5.setValueAndEnable(p.getAssignableKnobValueByIdx(4));
         fp_knob_6.setValueAndEnable(p.getAssignableKnobValueByIdx(5));
         fp_knob_7.setValueAndEnable(p.getAssignableKnobValueByIdx(6));
         fp_knob_8.setValueAndEnable(p.getAssignableKnobValueByIdx(7));
         fp_knob_ef_gain.setValueAndEnable(p.getEnvelopeFollowerGain());
         fp_knob_ef_a   .setValueAndEnable(p.getEnvelopeFollowerAttack());
         fp_knob_ef_r   .setValueAndEnable(p.getEnvelopeFollowerRelease());
         cm_knob_out.setSelectedOptionAndEnable(out_to_cm.get(p.getOutput()));

         cm_copy_patch .setOptions(parent_synth_form.partmix_copy_names_short);
         cm_copy_patch .setOptionsLong(parent_synth_form.partmix_copy_names_long);

         cm_copy_peq   .setOptions(parent_synth_form.partmix_copy_names_short);
         cm_copy_peq   .setOptionsLong(parent_synth_form.partmix_copy_names_long);

         cm_copy_pfx   .setOptions(parent_synth_form.partmix_copy_names_short);
         cm_copy_pfx   .setOptionsLong(parent_synth_form.partmix_copy_names_long);

         cm_copy_mfx   .setOptions(parent_synth_form.partmix_copy_names_short);
         cm_copy_mfx   .setOptionsLong(parent_synth_form.partmix_copy_names_long);

         IntArray patchIndices <= parent_synth_form.partmix_copy_patch_indices;
         IntArray partIndices  <= parent_synth_form.partmix_copy_part_indices;
         IntArray varIndices   <= parent_synth_form.partmix_copy_variation_indices;

         // trace "xxx partIndices.indexOf("+p.last_copied_patch_part_idx+", patchIndices.indexOf("+p.last_copied_patch_idx+",   0)="+(partIndices.indexOf(p.last_copied_patch_part_idx, patchIndices.indexOf(p.last_copied_patch_idx,   0)));
         cm_copy_patch .setSelectedOptionAndEnable(varIndices.indexOf(p.last_copied_patch_var_idx, partIndices.indexOf(p.last_copied_patch_part_idx, patchIndices.indexOf(p.last_copied_patch_idx,   0))));
         cm_copy_peq   .setSelectedOptionAndEnable(varIndices.indexOf(p.last_copied_peq_var_idx, partIndices.indexOf(p.last_copied_peq_part_idx, patchIndices.indexOf(p.last_copied_peq_idx,   0))));
         cm_copy_pfx   .setSelectedOptionAndEnable(varIndices.indexOf(p.last_copied_pfx_var_idx, partIndices.indexOf(p.last_copied_pfx_part_idx, patchIndices.indexOf(p.last_copied_pfx_idx,   0))));
         cm_copy_mfx   .setSelectedOptionAndEnable(patchIndices.indexOf(p.last_copied_mfx_idx,   0));

         updateEQ1QAndGain();
         updateEQ2QAndGain();

         fp_vol.setBackgroundTint(#19000000);
      }
      else
      {
         fp_noteshift .setValueAndDisable(0);
         fp_detune    .setValueAndDisable(0);
         fp_vol       .setValueAndDisable(0);
         fp_pan       .setValueAndDisable(0);
         fp_rev       .setValueAndDisable(0);
         fp_var       .setValueAndDisable(0);
         fp_dry       .setValueAndDisable(0);

         bt_name.setCaption("-     Name:");

         tf_name.setText("-");
         tf_name.setEditable(false);

         cb_name_kbdsw          .setSelectedAndDisable(false);
         cb_name_volexpsw       .setSelectedAndDisable(false);
         cb_name_fxa            .setSelectedAndDisable(false);
         cb_name_fxb            .setSelectedAndDisable(false);
         fp_name_fxconn         .setValueAndDisable(0);
         cm_name_microtune_scale.setSelectedOptionAndDisable(-1);
         fp_name_microtune_root .setValueAndDisable(0);

         fp_eq1_type  .setValueAndDisable(0);
         fp_eq1_freq  .setValueAndDisable(0);
         fp_eq1_gain  .setValueAndDisable(0);
         fp_eq1_q     .setValueAndDisable(0);
         fp_eq2_type  .setValueAndDisable(0);
         fp_eq2_freq  .setValueAndDisable(0);
         fp_eq2_gain  .setValueAndDisable(0);
         fp_eq2_q     .setValueAndDisable(0);
         fp_eq3_l_freq.setValueAndDisable(0);
         fp_eq3_l_gain.setValueAndDisable(0);
         fp_eq3_m_freq.setValueAndDisable(0);
         fp_eq3_m_q   .setValueAndDisable(0);
         fp_eq3_m_gain.setValueAndDisable(0);
         fp_eq3_h_freq.setValueAndDisable(0);
         fp_eq3_h_gain.setValueAndDisable(0);

         fp_zone_note_limit_low  .setValueAndDisable(0);
         fp_zone_note_limit_high .setValueAndDisable(0);
         fp_zone_vel_limit_low   .setValueAndDisable(0);
         fp_zone_vel_limit_high  .setValueAndDisable(0);
         fp_zone_vel_sens_offset .setValueAndDisable(0);
         fp_zone_vel_sens_depth  .setValueAndDisable(0);
         fp_zone_pb_range_lower  .setValueAndDisable(0);
         fp_zone_pb_range_upper  .setValueAndDisable(0);
         cb_zone_porta_sw        .setSelectedAndDisable(false);
         fp_zone_porta_time      .setValueAndDisable(0);
         fp_zone_porta_mode      .setValueAndDisable(0);
         fp_zone_porta_time_mode .setValueAndDisable(0);
         cb_zone_poly            .setSelectedAndDisable(false);

         fp_eg_aeg_a_time .setValueAndDisable(0);
         fp_eg_aeg_d_time .setValueAndDisable(0);
         fp_eg_aeg_s_level.setValueAndDisable(0);
         fp_eg_aeg_r_time .setValueAndDisable(0);
         fp_eg_feg_a_time .setValueAndDisable(0);
         fp_eg_feg_d_time .setValueAndDisable(0);
         fp_eg_feg_s_level.setValueAndDisable(0);
         fp_eg_feg_r_time .setValueAndDisable(0);
         fp_eg_feg_depth  .setValueAndDisable(0);
         fp_eg_flt_cutoff .setValueAndDisable(0);
         fp_eg_flt_res    .setValueAndDisable(0);

         fp_knob_1.setValueAndDisable(0);
         fp_knob_2.setValueAndDisable(0);
         fp_knob_3.setValueAndDisable(0);
         fp_knob_4.setValueAndDisable(0);
         fp_knob_5.setValueAndDisable(0);
         fp_knob_6.setValueAndDisable(0);
         fp_knob_7.setValueAndDisable(0);
         fp_knob_8.setValueAndDisable(0);
         fp_knob_ef_gain.setValueAndDisable(0);
         fp_knob_ef_a   .setValueAndDisable(0);
         fp_knob_ef_r   .setValueAndDisable(0);
         cm_knob_out.setSelectedOptionAndDisable(-1);

         cm_copy_patch . setSelectedOptionAndDisable(-1);
         cm_copy_peq   . setSelectedOptionAndDisable(-1);
         cm_copy_pfx   . setSelectedOptionAndDisable(-1);
         cm_copy_mfx   . setSelectedOptionAndDisable(-1);

         fp_vol.setBackgroundTint(0);
      }

      MIDISynthProfileDataMontage data <= parent_synth_form.data;
      if(data.current_part_idx == part_idx )
      {
         if(data.b_solo_part)
            bt_part.setBackgroundTint(#b0ffff00);  // (todo) move color to AppLookAndFeel
         else
            bt_part.setBackgroundTint(#1800ff00);
      }
      else
      {
         bt_part.setBackgroundTint(0);
      }
      bt_part.redraw();

      updatePartToolTipCaptions();
   }

   // <ui_show.png>
   public method reshowPart() {
      showPart();
   }

   // <method_set.png>
   public method setMode(int _mode) {
      ls_mode.switchToLayerNr(_mode);
      redraw();
   }

   // <ui_update.png>
   protected method updateEQ1QAndGain() {
      switch(fp_eq1_type.getFloatValue())
      {
         case 0:  // thru
            fp_eq1_freq.setEditable(false);
            fp_eq1_gain.setEditable(false);
            fp_eq1_q   .setEditable(false);
            break;

         case 1:  // LPF
         case 2:  // HPF
            fp_eq1_freq.setEditable(true);
            fp_eq1_gain.setEditable(false);
            fp_eq1_q   .setEditable(false);
            break;

         case 3:  // Low shelf
         case 4:  // High shelf
            fp_eq1_freq.setEditable(true);
            fp_eq1_gain.setEditable(true);
            fp_eq1_q   .setEditable(false);
            break;

         case 5:  // Peak / Dip
            fp_eq1_freq.setEditable(true);
            fp_eq1_gain.setEditable(true);
            fp_eq1_q   .setEditable(true);
            break;
      }

      // workaround for redraw issue after toggling edit state
      //  (todo) fix me
      fp_eq1_freq.setValue(fp_eq1_freq.getValue());
      fp_eq1_gain.setValue(fp_eq1_gain.getValue());
      fp_eq1_q   .setValue(fp_eq1_q   .getValue());
   }

   // <ui_update.png>
   protected method updateEQ2QAndGain() {
      switch(fp_eq2_type.getFloatValue())
      {
         case 0:  // thru
            fp_eq2_freq.setEditable(false);
            fp_eq2_gain.setEditable(false);
            fp_eq2_q   .setEditable(false);
            break;

         case 1:  // LPF
         case 2:  // HPF
            fp_eq2_freq.setEditable(true);
            fp_eq2_gain.setEditable(false);
            fp_eq2_q   .setEditable(false);
            break;

         case 3:  // Low shelf
         case 4:  // High shelf
            fp_eq2_freq.setEditable(true);
            fp_eq2_gain.setEditable(true);
            fp_eq2_q   .setEditable(false);
            break;

         case 5:  // Peak / Dip
            fp_eq2_freq.setEditable(true);
            fp_eq2_gain.setEditable(true);
            fp_eq2_q   .setEditable(true);
            break;
      }

      // workaround for redraw issue after toggling edit state
      //  (todo) fix me
      fp_eq2_freq.setValue(fp_eq2_freq.getValue());
      fp_eq2_gain.setValue(fp_eq2_gain.getValue());
      fp_eq2_q   .setValue(fp_eq2_q   .getValue());
   }

   // <ui_handle.png>
   protected =replay= method handleNoteShiftChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setNoteShift(fp_noteshift.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Note Shift is "+p.getNoteShift());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleDetuneChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setDetune(fp_detune.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Detune is "+(p.getDetune()/10.0)+"Hz");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleToggleMuteSwitch() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setMuteSwitch(bt_l.getToggleState());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" is "+(p.getMuteSwitch()?"muted":"unmuted"));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleVolChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setVolume(fp_vol.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Volume is "+p.getVolume());
      }
   }

   // <ui_handle.png>
   protected =replay= method handlePanChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setPan(fp_pan.getFloatValue() - 63);
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Pan / Balance is "+p.getPan());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleRevChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setReverbSend(fp_rev.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Reverb Send is "+p.getReverbSend());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleVarChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setVariationSend(fp_var.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Variation Send is "+p.getVariationSend());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleDryChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setDryLevel(fp_dry.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Dry Level is "+p.getDryLevel());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleNameChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setName(tf_name.getText());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Name is "+p.getName());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleKbdSWChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setKeyboardControlSwitch(cb_name_kbdsw.isSelected());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Keyboard Control Switch is "+Utils.GetEnableString(p.getKeyboardControlSwitch()));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleVolExpSWChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEnableVolExp(cb_name_volexpsw.isSelected());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Volume/Expr Switch is "+Utils.GetEnableString(p.getEnableVolExp()));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleFXASWChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setInsertionFXSwitch( (p.getInsertionFXSwitch()&~1) | cb_name_fxa.isSelected());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Insertion FX Switch A is "+Utils.GetEnableString(p.getInsertionFXSwitch()&1));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleFXBSWChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setInsertionFXSwitch( (p.getInsertionFXSwitch()&~2) | (cb_name_fxb.isSelected()<<1));
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Insertion FX Switch B is "+Utils.GetEnableString( (p.getInsertionFXSwitch()>>1)&1 ));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleFXConnChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setInsertionConnectionType(fp_name_fxconn.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Insertion Connection Type is "+fp_name_fxconn.getDisplayedText());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleMicroTuningScaleChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setMicroTuningScale(cm_name_microtune_scale.getSelectedOption());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Micro Tuning Scale is "+cm_name_microtune_scale.getSelectedOptionName());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleMicroTuningRootChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setMicroTuningRoot(fp_name_microtune_root.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Micro Tuning Root is "+fp_name_microtune_root.getDisplayedText());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ1TypeChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ1Type(fp_eq1_type.getFloatValue());
         updateEQ1QAndGain();
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ1 Type is "+fp_eq1_type.getDisplayedText());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ1FreqChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ1Freq(fp_eq1_freq.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ1 Freq is "+fp_eq1_freq.getDisplayedText()+"Hz");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ1GainChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ1Gain(fp_eq1_gain.getFloatValue() - 24);
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ1 Gain is "+p.getEQ1Gain()+"dB");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ1QChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ1Q(fp_eq1_q.getFloatValue() * 10);
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ1 Q is "+(p.getEQ1Q()/10.0));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ2TypeChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ2Type(fp_eq2_type.getFloatValue());
         updateEQ2QAndGain();
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ2 Type is "+fp_eq2_type.getDisplayedText());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ2FreqChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ2Freq(fp_eq2_freq.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ2 Freq is "+fp_eq2_freq.getDisplayedText()+"Hz");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ2GainChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ2Gain(fp_eq2_gain.getFloatValue() - 24);
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ2 Gain is "+p.getEQ2Gain()+"dB");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ2QChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ2Q(fp_eq2_q.getFloatValue() * 10);
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ2 Q is "+(p.getEQ2Q()/10.0));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ3LowFreqChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ3LowFreq(fp_eq3_l_freq.getFloatValue() + 46);
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ3 Low Freq is "+fp_eq3_l_freq.getDisplayedText()+"Hz");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ3LowGainChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ3LowGain(fp_eq3_l_gain.getFloatValue() + 32);
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ3 Low Gain is "+fp_eq3_l_gain.getDisplayedText()+"dB");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ3MidFreqChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ3MidFreq(fp_eq3_m_freq.getFloatValue() + 46);
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ3 Mid Freq is "+fp_eq3_m_freq.getDisplayedText()+"Hz");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ3MidGainChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ3MidGain(fp_eq3_m_gain.getFloatValue() + 32);
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ3 Mid Gain is "+fp_eq3_m_gain.getDisplayedText()+"dB");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ3MidQChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ3MidQ(fp_eq3_m_q.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ3 Mid Q is "+fp_eq3_m_q.getDisplayedText());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ3HighFreqChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ3HighFreq(fp_eq3_h_freq.getFloatValue() + 46);
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ3 High Freq is "+fp_eq3_h_freq.getDisplayedText()+"Hz");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEQ3HighGainChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEQ3HighGain(fp_eq3_h_gain.getFloatValue() + 32);
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" EQ3 High Gain is "+fp_eq3_h_gain.getDisplayedText()+"dB");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneNoteLimitLowChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setNoteLimitLow(fp_zone_note_limit_low.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Note Limit Low is "+p.getNoteLimitLow());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneNoteLimitHighChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setNoteLimitHigh(fp_zone_note_limit_high.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Note Limit High is "+p.getNoteLimitHigh());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVelLimitLowChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setVelocityLimitLow(fp_zone_vel_limit_low.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Velocity Limit Low is "+p.getVelocityLimitLow());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVelLimitHighChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setVelocityLimitHigh(fp_zone_vel_limit_high.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Velocity Limit High is "+p.getVelocityLimitHigh());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVelSensOffsetChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setVelocitySenseOffset(fp_zone_vel_sens_offset.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Velocity Sensitivity Offset is "+p.getVelocitySenseOffset());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZoneVelSensDepthChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setVelocitySenseDepth(fp_zone_vel_sens_depth.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Velocity Sensitivity Depth is "+p.getVelocitySenseDepth());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePBRangeLowerChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setPitchBendRangeLower(fp_zone_pb_range_lower.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Pitch Bend Range Lower is "+p.getPitchBendRangeLower());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePBRangeUpperChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setPitchBendRangeUpper(fp_zone_pb_range_upper.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Pitch Bend Range Upper is "+p.getPitchBendRangeUpper());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePortaSWChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setPortamentoSwitch(cb_zone_porta_sw.isSelected());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Portamento Switch is "+Utils.GetEnableString(p.getPortamentoSwitch()));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePortaTimeChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setPortamentoTime(fp_zone_porta_time.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Portamento Time is "+p.getPortamentoTime());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePortaModeChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setPortamentoMode(fp_zone_porta_mode.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Portamento Mode is "+fp_zone_porta_mode.getDisplayedText());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePortaTimeModeChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setPortamentoTimeMode(fp_zone_porta_time_mode.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Portamento Time Mode is "+fp_zone_porta_time_mode.getDisplayedText());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleZonePolyChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setPolySwitch(cb_zone_poly.isSelected());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Poly Switch is "+Utils.GetEnableString(p.getPolySwitch()));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleAEGAttackTimeChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setAEGAttackTime(fp_eg_aeg_a_time.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" AEG Attack Time is "+p.getAEGAttackTime());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleAEGDecayTimeChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setAEGDecayTime(fp_eg_aeg_d_time.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" AEG Decay Time is "+p.getAEGDecayTime());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleAEGSustainLevelChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setAEGSustainLevel(fp_eg_aeg_s_level.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" AEG Sustain Level is "+p.getAEGSustainLevel());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleAEGReleaseTimeChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setAEGReleaseTime(fp_eg_aeg_r_time.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" AEG Release Time is "+p.getAEGReleaseTime());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleFEGAttackTimeChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setFEGAttackTime(fp_eg_feg_a_time.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" FEG Attack Time is "+p.getFEGAttackTime());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleFEGDecayTimeChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setFEGDecayTime(fp_eg_feg_d_time.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" FEG Decay Time is "+p.getFEGDecayTime());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleFEGSustainLevelChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setFEGSustainLevel(fp_eg_feg_s_level.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" FEG Sustain Level is "+p.getFEGSustainLevel());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleFEGReleaseTimeChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setFEGReleaseTime(fp_eg_feg_r_time.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" FEG Release Time is "+p.getFEGReleaseTime());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleFEGDepthChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setFEGDepth(fp_eg_feg_depth.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" FEG Depth is "+p.getFEGDepth());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleFilterCutoffChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setFilterCutoff(fp_eg_flt_cutoff.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Filter Cutoff is "+p.getFilterCutoff());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleFilterResChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setFilterRes(fp_eg_flt_res.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Filter Resonance is "+p.getFilterRes());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleAssignableKnobValueChanged(byte _knobIdx, byte _val) {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setAssignableKnobValueByIdx(_knobIdx, _val);
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Assignable Knob "+(_knobIdx+1)+" Value is "+p.getAssignableKnobValueByIdx(_knobIdx));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEnvelopeFollowerGainChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEnvelopeFollowerGain(fp_knob_ef_gain.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Envelope Follower Gain is "+fp_knob_ef_gain.getDisplayedText()+"dB");
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEnvelopeFollowerAttackChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEnvelopeFollowerAttack(fp_knob_ef_a.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Envelope Follower Attack is "+fp_knob_ef_a.getDisplayedText());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleEnvelopeFollowerReleaseChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setEnvelopeFollowerRelease(fp_knob_ef_r.getFloatValue());
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Envelope Follower Attack is "+fp_knob_ef_r.getDisplayedText());
      }
   }

   // <ui_handle.png>
   protected =replay= method handleOutputChanged() {
      MontagePart p <= getPart();
      if(null != p)
      {
         p.setOutput( out_to_cm.indexOf(cm_knob_out.getSelectedOption(), 0) );
         parent_synth_form.handleParamEdited();
         Global.Print("Part "+(part_idx+1)+" Output is "+cm_knob_out.getSelectedOptionName());
      }
   }

   // <ui_handle.png>
   protected method handleCopyPatchAllChanged() {
      b_copy_other_part_settings = bt_copy_patch.getToggleState();
      Global.Print("Copy-other-part-settings is "+Utils.GetEnableString(b_copy_other_part_settings));
   }

   // <ui_handle.png>
   protected =replay= method handleCopyPatch(boolean _bSelect) {
      Montage_Patch patchDst <= parent_synth_form.patch;
      MontagePerformance perfDst <= patchDst.getEditPerformance(part_idx);
      if(null != perfDst)
      {
         MontagePart pDst <= perfDst.getOrCreatePartByIdx(part_idx);
         int copyOpt = cm_copy_patch.getSelectedOption();
         int copyPatchIdx = parent_synth_form.partmix_copy_patch_indices.get(copyOpt);
         int copyPartIdx  = parent_synth_form.partmix_copy_part_indices.get(copyOpt);
         int copyVarIdx   = parent_synth_form.partmix_copy_variation_indices.get(copyOpt);
         // trace "xxx set last_copied patch="+copyPatchIdx+" part="+copyPartIdx;

         MontagePerformance perfSrc <= parent_synth_form.getPerformanceByPatchAndVariation(copyPatchIdx, copyVarIdx);
         if(null != perfSrc)
         {
            // trace "xxx perfDst="+#(perfDst)+" perfSrc="+#(perfSrc);

            MontagePart pSrc <= perfSrc.getPartByIdx(copyPartIdx);
            if(null != pSrc)
            {
               local String *sOther;
               if(b_copy_other_part_settings)
               {
                  pDst.copyFromEx(pSrc,
                                  false/*bCopyFX*/,
                                  false/*bCopyEQ*/
                                  );
                  sOther <= " (with LFO/ZONE/CTL/ARP/MSEQ/SCENE)";
               }

               pDst.last_copied_patch_idx      = copyPatchIdx;
               pDst.last_copied_patch_part_idx = copyPartIdx;
               pDst.last_copied_patch_var_idx  = copyVarIdx;

               parent_synth_form.b_force_send_all = perfDst.doesPartTypeDiffer(part_idx, perfSrc, copyPartIdx);

               MontagePartNormal pNormalSrc <= perfSrc.getPartNormalByIdx(copyPartIdx);
               if(null != pNormalSrc)
               {
                  MontagePartNormal pNormalDst <= perfDst.getOrCreatePartNormalByIdx(part_idx);
                  pNormalDst.copyFrom(pNormalSrc);
                  Global.Print("Copy preset part "+(copyPartIdx+1)+" to AWM2 part "+(part_idx+1)+sOther);
               }
               else
               {
                  MontagePartFM pFMSrc <= perfSrc.getPartFMByIdx(copyPartIdx);
                  if(null != pFMSrc)
                  {
                     MontagePartFM pFMDst <= perfDst.getOrCreatePartFMByIdx(part_idx);
                     pFMDst.copyFrom(pFMSrc);
                     Global.Print("Copy preset part "+(copyPartIdx+1)+" to FM-X part "+(part_idx+1)+sOther);
                  }
                  else
                  {
                     MontagePartDrum pDrumSrc <= perfSrc.getPartDrumByIdx(copyPartIdx);
                     if(null != pDrumSrc)
                     {
                        MontagePartDrum pDrumDst <= perfDst.getOrCreatePartDrumByIdx(part_idx);
                        pDrumDst.copyFrom(pDrumSrc);
                        Global.Print("Copy preset part "+(copyPartIdx+1)+" to Drum part "+(part_idx+1)+sOther);
                     }
                  }
               }
            }
            else
            {
               // Part is now unused (also deletes Normal/FM/Drum parts)
               perfDst.deletePartByIdx(part_idx);
               Global.Print("Delete part variation "+(part_idx+1));
            }

            parent_synth_form.scheduleMIDISendPatchWhenEnabled();
            UI.RedrawAll();  // workaround for combobox clipping issue
            if(_bSelect)
               reshowPart();
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleCopyPEQ(boolean _bSelect) {
      Montage_Patch patchDst <= parent_synth_form.patch;
      MontagePerformance perfDst <= patchDst.getEditPerformance(part_idx);
      if(null != perfDst)
      {
         MontagePart pDst <= perfDst.getOrCreatePartByIdx(part_idx);
         int copyOpt = cm_copy_peq.getSelectedOption();
         int copyPatchIdx = parent_synth_form.partmix_copy_patch_indices.get(copyOpt);
         int copyPartIdx  = parent_synth_form.partmix_copy_part_indices.get(copyOpt);
         int copyVarIdx   = parent_synth_form.partmix_copy_variation_indices.get(copyOpt);
         pDst.last_copied_peq_idx      = copyPatchIdx;
         pDst.last_copied_peq_part_idx = copyPartIdx;
         pDst.last_copied_peq_var_idx  = copyVarIdx;

         MontagePerformance perfSrc <= parent_synth_form.getPerformanceByPatchAndVariation(copyPatchIdx, copyVarIdx);
         if(null != perfSrc)
         {
            MontagePart pSrc <= perfSrc.getPartByIdx(copyPartIdx);
            if(null != pSrc)
            {
               pDst.copyDataEx(pSrc.data, MontageDefs.G_PEQ);
               Global.Print("Copy preset part "+(copyPartIdx+1)+" PEQ to part "+(part_idx+1));

               parent_synth_form.scheduleMIDISendPatchWhenEnabled();
               UI.RedrawAll();  // workaround for combobox clipping issue
               if(_bSelect)
                  reshowPart();
            }
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleCopyPFX(boolean _bSelect) {
      Montage_Patch patchDst <= parent_synth_form.patch;
      MontagePerformance perfDst <= patchDst.getEditPerformance(part_idx);
      if(null != perfDst)
      {
         MontagePart pDst <= perfDst.getOrCreatePartByIdx(part_idx);
         int copyOpt = cm_copy_peq.getSelectedOption();
         int copyPatchIdx = parent_synth_form.partmix_copy_patch_indices.get(copyOpt);
         int copyPartIdx  = parent_synth_form.partmix_copy_part_indices.get(copyOpt);
         int copyVarIdx   = parent_synth_form.partmix_copy_variation_indices.get(copyOpt);
         pDst.last_copied_pfx_idx      = copyPatchIdx;
         pDst.last_copied_pfx_part_idx = copyPartIdx;
         pDst.last_copied_pfx_var_idx  = copyVarIdx;

         MontagePerformance perfSrc <= parent_synth_form.getPerformanceByPatchAndVariation(copyPatchIdx, copyVarIdx);
         if(null != perfSrc)
         {
            MontagePart pSrc <= perfSrc.getPartByIdx(copyPartIdx);
            if(null != pSrc)
            {
               pDst.copyPFX(pSrc);
               Global.Print("Copy preset part "+(copyPartIdx+1)+" PFX to part "+(part_idx+1));

               parent_synth_form.scheduleMIDISendPatchWhenEnabled();
               UI.RedrawAll();  // workaround for combobox clipping issue
               if(_bSelect)
                  reshowPart();
            }
         }
      }
   }

   // <ui_handle.png>
   protected =replay= method handleCopyMFX(boolean _bSelect) {
      Montage_Patch patchDst <= parent_synth_form.patch;
      MontagePerformance perfDst <= patchDst.getEditPerformance(part_idx);
      if(null != perfDst)
      {
         MontagePart pDst <= perfDst.getOrCreatePartByIdx(part_idx);
         int copyOpt = cm_copy_peq.getSelectedOption();
         int copyPatchIdx = parent_synth_form.partmix_copy_patch_indices.get(copyOpt);
         // // int copyPartIdx = parent_synth_form.partmix_copy_part_indices.get(copyOpt);
         pDst.last_copied_mfx_idx = copyPatchIdx;

         MontagePerformance perfSrc <= parent_synth_form.getPerformanceByPatchAndVariation(copyPatchIdx, 0/*varIdx*/);
         if(null != perfSrc)
         {
            perfDst.copyMFX(perfSrc);
            Global.Print("Copy MFX (REV / VAR / MFX / MEQ / ADINSERTS)");

            parent_synth_form.scheduleMIDISendPatchWhenEnabled();
            UI.RedrawAll();  // workaround for combobox clipping issue
            if(_bSelect)
               reshowPart();
         }
      }
   }

   // <ui_handle.png>
   protected method handleCopy() {
      parent_synth_form.handlePartCopy(1);
   }

   // <ui_handle.png>
   protected =replay= method handlePaste() {
      parent_synth_form.handlePartPaste(1);
   }

   // <ui_handle.png>
   protected method handleCopyVar() {
      parent_synth_form.handleVariationCopy();
   }

   // <ui_handle.png>
   protected method handlePasteVar() {
      parent_synth_form.handleVariationPaste();
   }

   // <ui_handle.png>
   protected =replay= method handleDeleteVar() {
      parent_synth_form.handleVariationDelete(part_idx);
   }

   // <ui_show.png>
   protected method showContextMenu() {
      MontagePart p <= getPart();
      boolean bHavePart   = (null != p);
      boolean bHavePartCB = (null != parent_synth_form.part_clipboard);
      boolean bHaveVarCB  = (null != parent_synth_form.var_clipboard);
      boolean bHavePFXCB  = (null != parent_synth_form.pfx_clipboard);
      boolean bHavePCtlCB = (null != parent_synth_form.pctl_clipboard);

      pm_context <= PopupMenu.New(this);
      PopupMenu pm <= pm_context;
      PopupMenuButton *pmb;
      PopupMenu *spm;

      spm <= PopupMenu.New(pm);
      pmb <= pm.addMenu("Init Part..", deref spm);
      pmb <= spm.addDefaultButton("Init Part FM-X", "init_part_fmx");
      pmb.setActive(!bHavePart);
      pmb <= spm.addDefaultButton("Init Part AWM2", "init_part_awm2");
      pmb.setActive(!bHavePart);
      pmb <= spm.addDefaultButton("Init Part Drum", "init_part_drum");
      pmb.setActive(!bHavePart);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("EG Mixer..", "eg_mixer");
      pmb.setAccelerators("lctrl-g", "");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("FM Sound Mixer..", "fm_sound_mixer");
      pmb.setAccelerators("lctrl-f", "");
      pmb.setActive(bHavePart);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Swap with Main Variation", "var_swap_main");
      pmb.setActive(bHavePart);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy Part (all variations)", "copy");
      pmb.setAccelerators("lalt-c", "");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("Paste Part (all variations)", "paste");
      pmb.setAccelerators("lalt-v", "");
      pmb.setActive(bHavePartCB);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy Part Variation", "var_copy");
      pmb.setAccelerators("lctrl-lshift-c", "");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("Paste Part Variation", "var_paste");
      pmb.setAccelerators("lctrl-lshift-v", "");
      pmb.setActive(bHaveVarCB);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy Part Variation FX", "pfx_copy");
      // pmb.setAccelerators("lctrl-lshift-c", "");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("Paste Part Variation FX", "pfx_paste");
      // pmb.setAccelerators("lctrl-lshift-v", "");
      pmb.setActive(bHavePFXCB);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy Part Variation CTL", "pctl_copy");
      // pmb.setAccelerators("lctrl-lshift-c", "");
      pmb.setActive(bHavePart);

      pmb <= pm.addDefaultButton("Paste Part Variation CTL", "pctl_paste");
      // pmb.setAccelerators("lctrl-lshift-v", "");
      pmb.setActive(bHavePCtlCB);

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Delete Part Variation", "var_delete");
      pmb.setActive(bHavePart);

      pm.resizeToMinimum();
      pm.showNearMouse(-30, 0);

      Global.Print("Show Part context menu.");
   }

   // <method.png>
   protected method lazySelectPart() {
      parent_synth_form.selectPart(part_idx, false/*bAllowSolo*/, true/*bQuiet*/);
   }

   // <method.png>
   protected method dumpEGSettings(PointerArray _currentEGSettings) {
      MontagePartFM     pFM     <= parent_synth_form.getEditPartFM();
      MontagePartNormal pNormal <= parent_synth_form.getEditPartNormal();
      if(null != pFM)
      {
         /// "FM peg"
         /// "FM feg"
         MontagePartFMCommon fmCommon <= pFM.common;
         fmCommon.dumpEGSettings(_currentEGSettings);

         // "FM op <1..8> peg"
         // "FM op <1..8> aeg"
         pFM.dumpEGSettings(_currentEGSettings, -1/*opFilter=all*/);
      }
      else if(null != pNormal)
      {
         // "AWM2 element <1..8> peg"
         // "AWM2 element <1..8> aeg"
         // "AWM2 element <1..8> feg"
         pNormal.dumpEGSettings(_currentEGSettings, -1/*elementFilter=all*/);
      }
   }

   // <ui_handle.png>
   public virtual =replay= loadEGPreset(Montage_EGPreset _preset, String _typeName) {
      Global.Debug("Montage_PartForm::loadEGPreset: typeName="+_typeName+" preset.name="+_preset.name);
      MontagePartFM     pFM     <= parent_synth_form.getEditPartFM();
      MontagePartNormal pNormal <= parent_synth_form.getEditPartNormal();
      if(null != pFM)
      {
         // (todo) move to MontagePartFM
         MontagePartFMOperator *op;
         MontagePartFMCommon fmCommon <= pFM.common;
         switch(_typeName)
         {
            case "FM peg":
               fmCommon.loadPEGPreset(_preset);
               break;

            case "FM feg":
               fmCommon.loadFEGPreset(_preset);
               break;

            case "FM op 1 peg":
               op <= pFM.getOpByIdx(0);
               op.loadPEGPreset(_preset);
               break;

            case "FM op 1 aeg":
               op <= pFM.getOpByIdx(0);
               op.loadAEGPreset(_preset);
               break;

            case "FM op 2 peg":
               op <= pFM.getOpByIdx(1);
               op.loadPEGPreset(_preset);
               break;

            case "FM op 2 aeg":
               op <= pFM.getOpByIdx(1);
               op.loadAEGPreset(_preset);
               break;

            case "FM op 3 peg":
               op <= pFM.getOpByIdx(2);
               op.loadPEGPreset(_preset);
               break;

            case "FM op 3 aeg":
               op <= pFM.getOpByIdx(2);
               op.loadAEGPreset(_preset);
               break;

            case "FM op 4 peg":
               op <= pFM.getOpByIdx(3);
               op.loadPEGPreset(_preset);
               break;

            case "FM op 4 aeg":
               op <= pFM.getOpByIdx(3);
               op.loadAEGPreset(_preset);
               break;

            case "FM op 5 peg":
               op <= pFM.getOpByIdx(4);
               op.loadPEGPreset(_preset);
               break;

            case "FM op 5 aeg":
               op <= pFM.getOpByIdx(4);
               op.loadAEGPreset(_preset);
               break;

            case "FM op 6 peg":
               op <= pFM.getOpByIdx(5);
               op.loadPEGPreset(_preset);
               break;

            case "FM op 6 aeg":
               op <= pFM.getOpByIdx(5);
               op.loadAEGPreset(_preset);
               break;

            case "FM op 7 peg":
               op <= pFM.getOpByIdx(6);
               op.loadPEGPreset(_preset);
               break;

            case "FM op 7 aeg":
               op <= pFM.getOpByIdx(6);
               op.loadAEGPreset(_preset);
               break;

            case "FM op 8 peg":
               op <= pFM.getOpByIdx(7);
               op.loadPEGPreset(_preset);
               break;

            case "FM op 8 aeg":
               op <= pFM.getOpByIdx(7);
               op.loadAEGPreset(_preset);
               break;
         }

         parent_synth_form.handleParamEdited();
         Global.Print("Load EG Preset \""+_typeName+"\"");
      }
      else if(null != pNormal)
      {
         // (todo) move to MontagePartNormal
         MontagePartNormalElement *el;
         MontagePartNormalElementOscAmpPitch *elOsc;
         MontagePartNormalElementFilterEQLFO *elFilter;
         switch(_typeName)
         {
            case "AWM2 element 1 peg":
               el <= pNormal.getElementByIdx(0);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadPEGPreset(_preset);
               break;

            case "AWM2 element 1 aeg":
               el <= pNormal.getElementByIdx(0);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadAEGPreset(_preset);
               break;

            case "AWM2 element 1 feg":
               el <= pNormal.getElementByIdx(0);
               elFilter <= el.filter_eq_lfo;
               elFilter.loadFEGPreset(_preset);
               break;

            case "AWM2 element 2 peg":
               el <= pNormal.getElementByIdx(1);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadPEGPreset(_preset);
               break;

            case "AWM2 element 2 aeg":
               el <= pNormal.getElementByIdx(1);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadAEGPreset(_preset);
               break;

            case "AWM2 element 2 feg":
               el <= pNormal.getElementByIdx(1);
               elFilter <= el.filter_eq_lfo;
               elFilter.loadFEGPreset(_preset);
               break;

            case "AWM2 element 3 peg":
               el <= pNormal.getElementByIdx(2);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadPEGPreset(_preset);
               break;

            case "AWM2 element 3 aeg":
               el <= pNormal.getElementByIdx(2);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadAEGPreset(_preset);
               break;

            case "AWM2 element 3 feg":
               el <= pNormal.getElementByIdx(2);
               elFilter <= el.filter_eq_lfo;
               elFilter.loadFEGPreset(_preset);
               break;

            case "AWM2 element 4 peg":
               el <= pNormal.getElementByIdx(3);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadPEGPreset(_preset);
               break;

            case "AWM2 element 4 aeg":
               el <= pNormal.getElementByIdx(3);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadAEGPreset(_preset);
               break;

            case "AWM2 element 4 feg":
               el <= pNormal.getElementByIdx(3);
               elFilter <= el.filter_eq_lfo;
               elFilter.loadFEGPreset(_preset);
               break;

            case "AWM2 element 5 peg":
               el <= pNormal.getElementByIdx(4);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadPEGPreset(_preset);
               break;

            case "AWM2 element 5 aeg":
               el <= pNormal.getElementByIdx(4);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadAEGPreset(_preset);
               break;

            case "AWM2 element 5 feg":
               el <= pNormal.getElementByIdx(4);
               elFilter <= el.filter_eq_lfo;
               elFilter.loadFEGPreset(_preset);
               break;

            case "AWM2 element 6 peg":
               el <= pNormal.getElementByIdx(5);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadPEGPreset(_preset);
               break;

            case "AWM2 element 6 aeg":
               el <= pNormal.getElementByIdx(5);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadAEGPreset(_preset);
               break;

            case "AWM2 element 6 feg":
               el <= pNormal.getElementByIdx(5);
               elFilter <= el.filter_eq_lfo;
               elFilter.loadFEGPreset(_preset);
               break;

            case "AWM2 element 7 peg":
               el <= pNormal.getElementByIdx(6);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadPEGPreset(_preset);
               break;

            case "AWM2 element 7 aeg":
               el <= pNormal.getElementByIdx(6);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadAEGPreset(_preset);
               break;

            case "AWM2 element 7 feg":
               el <= pNormal.getElementByIdx(6);
               elFilter <= el.filter_eq_lfo;
               elFilter.loadFEGPreset(_preset);
               break;

            case "AWM2 element 8 peg":
               el <= pNormal.getElementByIdx(7);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadPEGPreset(_preset);
               break;

            case "AWM2 element 8 aeg":
               el <= pNormal.getElementByIdx(7);
               elOsc <= el.osc_amp_pitch;
               elOsc.loadAEGPreset(_preset);
               break;

            case "AWM2 element 8 feg":
               el <= pNormal.getElementByIdx(7);
               elFilter <= el.filter_eq_lfo;
               elFilter.loadFEGPreset(_preset);
               break;
         }

         parent_synth_form.handleParamEdited();
         Global.Print("Load EG Preset \""+_typeName+"\"");
      }
   }

   // <ui_show.png>
   public method showEGPresetDialog() {

      local PointerArray currentEGSettings;
      dumpEGSettings(currentEGSettings);

      Montage_EGPresetDialog.ShowEGPresetDialog(this, deref currentEGSettings);
   }

   // <ui_show.png>
   public method showFMSoundMixerDialog() {
      Montage_FMSoundMixerDialog.ShowFMSoundMixerDialog(parent_synth_form, part_idx);
   }

   // <ui_handle.png>
   public method swapWithMainVariation() {
      parent_synth_form.swapWithMainVariation();
      lazySelectPart();
   }

   // <ui_mouse.png>
   public virtual onMouseClick(MouseEvent _ev) : boolean {
      if(_ev.isRightButton())
      {
         lazySelectPart();
         showContextMenu();
      }
      return false;
   }

   // // <midi_mml.png>
   // public method mmlHandleEventUI(MIDIMapEvent _ev) : boolean {

   //    if(null == lfo)
   //    {
   //       // Ooops
   //       return false;
   //    }

   //    return false;
   // }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      Layer ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      // trace "xxx Montage_PartForm::consumeAction: ap="+#(ap)+" acName="+acName;

      switch(@(ap))
      {
         default:
            break;

         case @(pm_context):
            Global.Debug2("Montage_PartForm: pm_context acName="+acName);
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close context menu.");
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "eg_mixer":
                  showEGPresetDialog();
                  return true;

               case "fm_sound_mixer":
                  showFMSoundMixerDialog();
                  return true;

               case "var_swap_main":
                  swapWithMainVariation();
                  return true;

               case "copy":
                  handleCopy();
                  return true;

               case "paste":
                  handlePaste();
                  return true;

               case "var_copy":
                  handleCopyVar();
                  return true;

               case "var_paste":
                  handlePasteVar();
                  return true;

               case "pfx_copy":
                  parent_synth_form.copyPFXToClipboard();
                  return true;

               case "pfx_paste":
                  parent_synth_form.pastePFXFromClipboard();
                  return true;

               case "pctl_copy":
                  parent_synth_form.copyPCtlToClipboard();
                  return true;

               case "pctl_paste":
                  parent_synth_form.pastePCtlFromClipboard();
                  return true;

               case "var_delete":
                  handleDeleteVar();
                  return true;

               case "init_part_fmx":
                  parent_synth_form.handleInitPartFMX();
                  return true;

               case "init_part_awm2":
                  parent_synth_form.handleInitPartAWM2();
                  return true;

               case "init_part_drum":
                  parent_synth_form.handleInitPartDrum();
                  return true;
            }
            return true;

         case @(bt_part):
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               lazySelectPart();
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               lazySelectPart();
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
               parent_synth_form.selectPart(part_idx, true/*bAllowSolo*/, false/*bQuiet*/);
            }
            reshowPart();
            return true;

         case @(bt_t):
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               lazySelectPart();
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               lazySelectPart();
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
               parent_synth_form.selectPart(part_idx, true/*bAllowSolo*/, false/*bQuiet*/);
            }
            reshowPart();
            return true;

         case @(fp_noteshift):
            handleNoteShiftChanged();
            return true;

         case @(fp_detune):
            handleDetuneChanged();
            return true;

         case @(bt_l):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
               handleToggleMuteSwitch();
            }
            reshowPart();
            return true;

         case @(fp_vol):
            handleVolChanged();
            //    parent_editor.tryMultiEditLFO(lfo_nr, ap.layer_id, fp_freq.getFloatValue(), false/*bExt*/);
            return true;

         case @(fp_pan):
            handlePanChanged();
            return true;

         case @(bt_s):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_rev):
            handleRevChanged();
            return true;

         case @(fp_var):
            handleVarChanged();
            return true;

         case @(fp_dry):
            handleDryChanged();
            return true;

         case @(bt_name):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(tf_name):
            handleNameChanged();
            return true;

         case @(cb_name_kbdsw):
            handleKbdSWChanged();
            return true;

         case @(cb_name_volexpsw):
            handleVolExpSWChanged();
            return true;

         case @(cb_name_fxa):
            handleFXASWChanged();
            return true;

         case @(cb_name_fxb):
            handleFXBSWChanged();
            return true;

         case @(fp_name_fxconn):
            handleFXConnChanged();
            return true;

         case @(bt_name_microtune):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(cm_name_microtune_scale):
            handleMicroTuningScaleChanged();
            return true;

         case @(fp_name_microtune_root):
            handleMicroTuningRootChanged();
            return true;

         case @(bt_eq1):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_eq1_type):
            handleEQ1TypeChanged();
            return true;

         case @(fp_eq1_freq):
            handleEQ1FreqChanged();
            return true;

         case @(fp_eq1_q):
            handleEQ1QChanged();
            return true;

         case @(fp_eq1_gain):
            handleEQ1GainChanged();
            return true;

         case @(bt_eq2):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_eq2_type):
            handleEQ2TypeChanged();
            return true;

         case @(fp_eq2_freq):
            handleEQ2FreqChanged();
            return true;

         case @(fp_eq2_q):
            handleEQ2QChanged();
            return true;

         case @(fp_eq2_gain):
            handleEQ2GainChanged();
            return true;

         case @(bt_eq3):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_eq3_l_freq):
            handleEQ3LowFreqChanged();
            return true;

         case @(fp_eq3_l_gain):
            handleEQ3LowGainChanged();
            return true;

         case @(fp_eq3_m_freq):
            handleEQ3MidFreqChanged();
            return true;

         case @(fp_eq3_m_gain):
            handleEQ3MidGainChanged();
            return true;

         case @(fp_eq3_m_q):
            handleEQ3MidQChanged();
            return true;

         case @(fp_eq3_h_freq):
            handleEQ3HighFreqChanged();
            return true;

         case @(fp_eq3_h_gain):
            handleEQ3HighGainChanged();
            return true;

            // Zone+Vel
         case @(bt_zone_note):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_zone_note_limit_low):
            handleZoneNoteLimitLowChanged();
            return true;

         case @(fp_zone_note_limit_high):
            handleZoneNoteLimitHighChanged();
            return true;

         case @(bt_zone_vel):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_zone_vel_limit_low):
            handleZoneVelLimitLowChanged();
            return true;

         case @(fp_zone_vel_limit_high):
            handleZoneVelLimitHighChanged();
            return true;

         case @(bt_zone_vel_sens):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_zone_vel_sens_offset):
            handleZoneVelSensOffsetChanged();
            return true;

         case @(fp_zone_vel_sens_depth):
            handleZoneVelSensDepthChanged();
            return true;

         case @(bt_zone_pb):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_zone_pb_range_lower):
            handleZonePBRangeLowerChanged();
            return true;

         case @(fp_zone_pb_range_upper):
            handleZonePBRangeUpperChanged();
            return true;

         case @(bt_zone_porta):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(cb_zone_porta_sw):
            handleZonePortaSWChanged();
            return true;

         case @(fp_zone_porta_time):
            handleZonePortaTimeChanged();
            return true;

         case @(fp_zone_porta_mode):
            handleZonePortaModeChanged();
            return true;

         case @(fp_zone_porta_time_mode):
            handleZonePortaTimeModeChanged();
            return true;

         case @(cb_zone_poly):
            handleZonePolyChanged();
            return true;

            // EG
         case @(bt_eg_aeg):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_eg_aeg_a_time):
            handleAEGAttackTimeChanged();
            return true;

         case @(fp_eg_aeg_d_time):
            handleAEGDecayTimeChanged();
            return true;

         case @(fp_eg_aeg_s_level):
            handleAEGSustainLevelChanged();
            return true;

         case @(fp_eg_aeg_r_time):
            handleAEGReleaseTimeChanged();
            return true;

         case @(bt_eg_feg):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_eg_feg_a_time):
            handleFEGAttackTimeChanged();
            return true;

         case @(fp_eg_feg_d_time):
            handleFEGDecayTimeChanged();
            return true;

         case @(fp_eg_feg_s_level):
            handleAEGSustainLevelChanged();
            return true;

         case @(fp_eg_feg_r_time):
            handleFEGReleaseTimeChanged();
            return true;

         case @(fp_eg_feg_depth):
            handleFEGDepthChanged();
            return true;

         case @(bt_eg_flt):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_eg_flt_cutoff):
            handleFilterCutoffChanged();
            return true;

         case @(fp_eg_flt_res):
            handleFilterResChanged();
            return true;

            // Assignable Knobs
         case @(bt_knob):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_knob_1):
            handleAssignableKnobValueChanged(0, fp_knob_1.getFloatValue());
            return true;

         case @(fp_knob_2):
            handleAssignableKnobValueChanged(1, fp_knob_2.getFloatValue());
            return true;

         case @(fp_knob_3):
            handleAssignableKnobValueChanged(2, fp_knob_3.getFloatValue());
            return true;

         case @(fp_knob_4):
            handleAssignableKnobValueChanged(3, fp_knob_4.getFloatValue());
            return true;

         case @(fp_knob_5):
            handleAssignableKnobValueChanged(4, fp_knob_5.getFloatValue());
            return true;

         case @(fp_knob_6):
            handleAssignableKnobValueChanged(5, fp_knob_6.getFloatValue());
            return true;

         case @(fp_knob_7):
            handleAssignableKnobValueChanged(6, fp_knob_7.getFloatValue());
            return true;

         case @(fp_knob_8):
            handleAssignableKnobValueChanged(7, fp_knob_8.getFloatValue());
            return true;

         case @(bt_knob_ef):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(fp_knob_ef_gain):
            handleEnvelopeFollowerGainChanged();
            return true;

         case @(fp_knob_ef_a):
            handleEnvelopeFollowerAttackChanged();
            return true;

         case @(fp_knob_ef_r):
            handleEnvelopeFollowerReleaseChanged();
            return true;

         case @(bt_knob_out):
            lazySelectPart();
            if(Button.ACTION_WHEEL_DOWN == acName)
            {
               parent_synth_form.selectNextVariation();
            }
            else if(Button.ACTION_WHEEL_UP == acName)
            {
               parent_synth_form.selectPreviousVariation();
            }
            else
            {
            }
            reshowPart();
            return true;

         case @(cm_knob_out):
            handleOutputChanged();
            return true;

         case @(bt_copy_patch):
            lazySelectPart();
            handleCopyPatchAllChanged();
            return true;

         case @(cm_copy_patch):
            handleCopyPatch((ComboBox.ACTION_OPTIONSELECTED == acName));
            return true;

         case @(bt_copy_peq):
            lazySelectPart();
            return true;

         case @(cm_copy_peq):
            handleCopyPEQ((ComboBox.ACTION_OPTIONSELECTED == acName));
            return true;

         case @(bt_copy_pfx):
            lazySelectPart();
            return true;

         case @(cm_copy_pfx):
            handleCopyPFX((ComboBox.ACTION_OPTIONSELECTED == acName));
            return true;

         case @(bt_copy_mfx):
            lazySelectPart();
            return true;

         case @(cm_copy_mfx):
            handleCopyMFX((ComboBox.ACTION_OPTIONSELECTED == acName));
            return true;

      }
   }

}
