// ----
// ---- file   : MontagePerformance.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2022-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- created: 06Oct2022
// ---- changed: 07Oct2022, 08Oct2022, 09Oct2022, 10Oct2022, 11Oct2022, 12Oct2022, 13Oct2022
// ----          14Oct2022, 21Oct2022, 22Oct2022, 23Oct2022, 24Oct2022, 25Oct2022, 26Oct2022
// ----          27Oct2022, 28Oct2022, 29Oct2022, 30Oct2022, 31Oct2022, 01Nov2022, 02Nov2022
// ----          03Nov2022, 04Nov2022, 05Nov2022, 06Nov2022, 07Nov2022, 08Nov2022, 09Nov2022
// ----          10Nov2022, 12Nov2022, 14Nov2022, 17Nov2022, 18Nov2022, 14Dec2022, 27Jan2023
// ----          31Mar2023
// ----
// ----
// ----

// (test) drum keys
// (actv) group flags (send mseq, send superknob, send fx, ..)
// (test) diff / MIDIPipeFrame
// (done) prioritize diffs. send G_SOUND first.
// (done) patch variations
// (note) changing multi params with one message does not work
// (todo) dont sendDiff() when object is still uninitialized, i.e. data all 0

module MMontagePerformance;

use namespace ui;
use namespace st2;

boolean b_debug = 0;
boolean b_recv_verbose = 0;
boolean b_send = 1;
boolean b_compare_syx = 0;
boolean b_debug_diff = 0;

// // boolean b_modx;  // true=MODX Model Id=0x07 , false=MONTAGE Model Id=0x02

Buffer sendData;
sendData.size = 1024;

Buffer sendBuf;
sendBuf.size = 1024;

int debug_send_idx = 0;

// valid during SendPerformanceIndexed()
int     tmp_op_mute_mask;
boolean b_tmp_mute_part;

byte g_forced_part_output = -1;  // 0="Main L&R", 1="Asgn L&R", ..  -1=use part settings

byte g_fx_mode = MIDISynthProfileDataMontage.FX_ALL;


// <function.png>
function SetForcedPartOutput(byte _out) {
   g_forced_part_output = _out;
}

// <function.png>
function GetForcedPartOutput() {
   return g_forced_part_output;
}

// <function.png>
function SetFXMode(byte _mode) {
   g_fx_mode = _mode;
}


// <class.png>
class MontageDefs {
   // group flags
   define int G_SYSTEM      = (1 <<  0);
   define int G_SEQSETUP    = (1 <<  1);
   define int G_MICROTUNE   = (1 <<  2);  // microtuning tables
   define int G_NAME        = (1 <<  3);  // perf/part names
   define int G_MSEQ        = (1 <<  4);  // Motion Sequences+Settings
   define int G_ARP         = (1 <<  5);
   define int G_SUPERKNOB   = (1 <<  6);  // Superknob Sequences+Settings
   define int G_CTL         = (1 <<  7);  // Controller assignments + values
   define int G_KNOBNAME    = (1 <<  8);
   define int G_SCENE       = (1 <<  9);
   define int G_AUDIO       = (1 << 10);
   define int G_AUDITION    = (1 << 11);
   define int G_LFO         = (1 << 12);  // Part+element LFOs
   define int G_PEQ         = (1 << 13);  // Part EQ
   define int G_PFX         = (1 << 14);  // Part FX
   define int G_MEQ         = (1 << 15);  // Master EQ
   define int G_MFX         = (1 << 16);  // Master FX
   define int G_QUICK       = (1 << 17);  // Performance quick edit
   define int G_TEMPO       = (1 << 18);  // Tempo/Swing
   define int G_PORTAMENTO  = (1 << 19);  // Slide
   define int G_SOUND       = (1 << 20);  // high-prio sound settings
   define int G_ENVFOLLOW   = (1 << 21);  // envelope follower settings
   define int G_COMMON_PERF = (1 << 22);  // "meta" group: any perfcommon settings
   define int G_COMMON_PART = (1 << 23);  // "meta" group: any partcommon settings
   define int G_ALL         = (1 << 24)-1;

   define int G_SPARSE = (1 << 30);  // *experimental* part-type changes only


   // FMSoundMixer Mix group flags
   define int MIXG_COM_KEYON   = (1 <<  0);  // 1
   define int MIXG_COM_PAN     = (1 <<  1);  // 2
   define int MIXG_COM_PITCH   = (1 <<  2);  // 3
   define int MIXG_COM_FILTER  = (1 <<  3);  // 4
   define int MIXG_COM_FEG_L   = (1 <<  4);  // 5
   define int MIXG_COM_FEG_T   = (1 <<  5);  // 6
   define int MIXG_COM_PEG_L   = (1 <<  6);  // 7
   define int MIXG_COM_PEG_T   = (1 <<  7);  // 8
   define int MIXG_COM_LFO2    = (1 <<  8);  // 9
   define int MIXG_COM_ALGFB   = (1 <<  9);  // 10
   define int MIXG_OP_OSC      = (1 << 10);  // 11
   define int MIXG_OP_LEVEL    = (1 << 11);  // 12
   define int MIXG_OP_PITCH_S  = (1 << 12);  // 13  (smooth interpolation)
   define int MIXG_OP_PITCH_B  = (1 << 13);  // 14  (boolean either/or selection)
   define int MIXG_OP_AEG_L    = (1 << 14);  // 15
   define int MIXG_OP_AEG_T    = (1 << 15);  // 16
   define int MIXG_OP_PEG_L    = (1 << 16);  // 17
   define int MIXG_OP_PEG_T    = (1 << 17);  // 18
   define int MIXG_OP_MOD      = (1 << 18);  // 19
   define int MIXG_OP_CTLSW    = (1 << 19);  // 20
   define int MIXG_ALL         = (1 << 20)-1;

   // Part types
   define int PART_TYPE_NONE = 0;
   define int PART_TYPE_AWM2 = 1;
   define int PART_TYPE_FMX  = 2;
   define int PART_TYPE_DRUM = 3;
   static StringArray part_type_names = [
      "-",
      "AWM2",
      "FM-X",
      "Drum"
                                         ];

   // <method_get.png>
   public static GetAddrName(byte h, byte m, byte l) {
      switch(h)
      {
         default:
            if($50 <= h <= $5F)
            {
               return "Part "+(h&15)+"/15 Key "+m+"/72 Drum Part Key Group 1";
            }
            break;

         case $00:
            switch(m)
            {
               case $00: return "System";
               case $05: return "Sequencer Setup";
               case $30: return "Micro Tuning User Table 0/7";
               case $31: return "Micro Tuning User Table 1/7";
               case $32: return "Micro Tuning User Table 2/7";
               case $33: return "Micro Tuning User Table 3/7";
               case $34: return "Micro Tuning User Table 4/7";
               case $35: return "Micro Tuning User Table 5/7";
               case $36: return "Micro Tuning User Table 6/7";
               case $37: return "Micro Tuning User Table 7/7";
            }
            break;

         case $01:
            return "Curve User Table "+m;

         case $02:
            return "Live Set Bank Name";

         case $03:
            return "Live Set Page Name "+m+"/15";

         case $04:
            return "Live Set Page "+((m>>4)&15)+"/15 Slot "+(m&15)+" Table";

         case $05:
            return "Live Set Page "+(((m>>4)&15)+8)+"/15 Slot "+(m&15)+" Table";

         case $0E:
            return "Bulk Header m="+m+" l="+l;

         case $0F:
            return "Bulk Footer m="+m+" l="+l;

         case $30:
            switch(m)
            {
               default:
                  if(m < $40)
                  {
                     return "Motion Seq AD Part Lane Sequence: Lane="+((m>>4)&15)+"/3 Seq="+((m&15))+"/7";
                  }
                  else if($60 <= m <= $67)
                     return "Super Knob Sequence "+(m&15)+"/7";
                  break;
               case $40: return "Performance Common";
               case $41: return "Reverb";
               case $42: return "Variation";
               case $43: return "Insertion A for A/D";
               case $44: return "Insertion B for A/D";
               case $45: return "Master EQ";
               case $46: return "Master Effect";
               case $47: return "Arpeggio Common";
               case $48: return "Motion Seq Common Settings";
               case $49: return "Motion Seq AD Part Lane Settings";
               case $4A: return "Super Knob Lane Settings";
               case $4B: return "Super Knob Settings";
               case $4C: return "Scene Common";
               case $4D: return "Audition";
               case $4E: return "Audio In Part1 (A/D)";
               case $4F: return "Audio In Part2 (USB)";
               case $50: return "Assignable Knob Name";
               case $51: return "Common/AD Controller 1 - 13";
               case $52: return "Common/AD Controller 14 - 16";
            }
            break;

         case $31:
            switch(m & 0xF0)
            {
               case $00: return "Part "+(m&15)+"/15 Performance Part";
               case $10: return "Part "+(m&15)+"/15 Motion Seq Part/Lane Settings";
               case $20: return "Part "+(m&15)+"/15 Insertion A";
               case $30: return "Part "+(m&15)+"/15 Insertion B";
               case $40: return "Part "+(m&15)+"/15 LFO";
               case $50: return "Part "+(m&15)+"/15 Zone Setting";
               case $60: return "Part "+(m&15)+"/15 Arpeggio Part";
            }
            break;

         case $32:
            return "Part "+(m&15)+"/15 Seq "+((m>>4)&15)+"/7 Motion Seq Lane 1 Sequence";

         case $33:
            return "Part "+(m&15)+"/15 Seq "+((m>>4)&15)+"/7 Motion Seq Lane 2 Sequence";

         case $34:
            return "Part "+(m&15)+"/15 Seq "+((m>>4)&15)+"/7 Motion Seq Lane 3 Sequence";

         case $35:
            return "Part "+(m&15)+"/15 Seq "+((m>>4)&15)+"/7 Motion Seq Lane 4 Sequence";

         case $36:
            return "Part "+(m&15)+"/15 Scene "+((m>>4)&15)+"/7 Scene Part";

         case $37:
            return "Part "+(m&15)+"/15 Assignable Knob Name";

         case $38:
            if(0 == m)
               return "Part "+(m&15)+"/15 Controller 1 - 13";
            else
               return "Part "+(m&15)+"/15 Controller 14 - 16";

         case $41:
            return "Part "+(m&15)+"/15 Element "+((m>>4)&15)+"/7 Normal Part Element Group 1";

         case $42:
            return "Part "+(m&15)+"/15 Element "+((m>>4)&15)+"/7 Normal Part Element Group 2";

         case $48:
            return "Part "+(m&15)+"/15 FM Part Common";

         case $49:
            return "Part "+(m&15)+"/15 Op "+((m>>4)&15)+"/7 FM Part Operator";
      }
      return "<unknown>";
   }
}

function GetAddrString(byte h, byte m, byte l) {
   Integer ioH = h;
   Integer ioM = m;
   Integer ioL = l;
   return ioH.printf("%02x")+","+ioM.printf("%02x")+","+ioL.printf("%02x");
}


function SendData(Buffer data, byte h, byte m, byte l, STX_MIDIOutDevice _outDev) {
   if(b_debug_diff)
      trace "xxx SendData addr="+GetAddrString(h, m, l)+" name="+MontageDefs.GetAddrName(h, m, l);
   if(!b_send)
   {
      trace "[trc] dry-run: send data h="+h+" m="+m+" l="+l+":";
      if(data.offset > 0)
      {
         data.hexdump(0, data.offset);
      }
      return;
   }
   sendBuf.offset = 0;
   sendBuf.i8 = $F0;
   sendBuf.i8 = $43;
   sendBuf.i8 = $00;  // LSB: device id
   sendBuf.i8 = $7F;
   sendBuf.i8 = $1C;
   short byteCount = data.offset + 1/*model_id=0x02*/ + 3/*addr*/;
   sendBuf.i8 = (byteCount >> 7) & 127;
   sendBuf.i8 = byteCount & 127;
   sendBuf.i8 = STConfig.b_pagesysex_modx ? $07 : $02;  // model id
   sendBuf.i8 = h & 127;
   sendBuf.i8 = m & 127;
   sendBuf.i8 = l & 127;
   byte checksum = 0;
   // byte checksum = byteCount + h + m + l;
   int idx = 7;
   loop(4)
      checksum += sendBuf.peekI8(idx++);  // model id + addr bytes
   idx = 0;
   loop(data.offset)
   {
      byte c = data.peekI8(idx++);
      sendBuf.i8 = c & 127;
      checksum += c;
   }
   checksum = (256 - checksum&127) & 127;
   sendBuf.i8 = checksum;
   sendBuf.i8 = $F7;

   if(b_debug)
   {
      Integer ioH = h;
      Integer ioM = m;
      Integer ioL = l;
      Integer ioChecksum = checksum;
      trace "[dbg] SendData["+debug_send_idx+"]: addr="+ioH.printf("%02x")+" "+ioM.printf("%02x")+" "+ioL.printf("%02x")+" sz="+data.offset+" checksum="+ioChecksum.printf("0x%02x");
      sendBuf.hexdump(0, sendBuf.offset);
   }

   _outDev.sysExRaw(sendBuf);
   _outDev.send(milliSeconds());

}

function SendBulkHeader(byte m, byte l, STX_MIDIOutDevice _outDev) {
   sendData.offset = 0;
   SendData(sendData, $0E, m, l, _outDev);
}

function SendBulkFooter(byte m, byte l, STX_MIDIOutDevice _outDev) {
   sendData.offset = 0;
   SendData(sendData, $0F, m, l, _outDev);
}


// <class.png>
class Montage_EGMixerSettings : MontageDefs {
   String preset_name_l;  // "" == current
   String preset_name_r;
   float mix_amt;       // 0..1

   // <save.png>
   public method saveState(Stream ofs) {
      ofs.i16 = 2; // ver

      // // ofs.i16 = preset_idx_l;
      // // ofs.i16 = preset_idx_r;
      if("<current>" == preset_name_l)
         Utils.WriteString(ofs, "");  // v2+
      else
         Utils.WriteString(ofs, preset_name_l);  // v2+

      if("<current>" == preset_name_r)
         Utils.WriteString(ofs, "");  // v2+
      else
         Utils.WriteString(ofs, preset_name_r);  // v2+

      ofs.f32 = mix_amt;
   }

   // <load.png>
   public method loadState(Stream ifs) : boolean {
      short ver = ifs.u16;
      if(ver >= 1)
      {
         if(1 == ver)
         {
            // v1: preset indices
            int presetIdxL = ifs.s16;
            int presetIdxR = ifs.s16;
            preset_name_l = "<current>";
            preset_name_r = "<current>";
         }
         else
         {
            // v2: preset names
            Utils.ReadString(ifs, preset_name_l);
            Utils.ReadString(ifs, preset_name_r);

            if(preset_name_l.isBlank())
               preset_name_l = "<current>";

            if(preset_name_r.isBlank())
               preset_name_r = "<current>";
         }
         mix_amt      = ifs.f32;
      }
      else
      {
         trace "[---] Montage_EGMixerSettings::loadState: invalid ver="+ver;
      }

      return true;
   }
}


// <class.png>
class MontageObject : MontageDefs {

   public static sendBulkHeader(STX_MIDIOutDevice _outDev) {
      SendBulkHeader($25, $00, _outDev);
   }

   public static sendBulkFooter(STX_MIDIOutDevice _outDev) {
      SendBulkFooter($25, $00, _outDev);
   }

   public method send(MontageObject _replayObject, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      return _numDiffsLeft;
   }

   // <method_get.png>
   public method getValueByAlias(MIDISynthProfileCtlAlias _alias) : int {
      // e.g. "Random Pan Depth" => "getRandomPanDepth"
      Value ret; ret.initVoid();
      local String aliasId = _alias.id;
      aliasId.replace(" ", "");
      local String methodName <= "get"+aliasId;
      methodName.replace("/", "");
      TKS.evalMethodByName(this, methodName, [], ret);
      return ret.value;
   }

   // <method_get.png>
   public method setValueByAlias(MIDISynthProfileCtlAlias _alias, int _v) {
      // e.g. "Random Pan Depth" => "getRandomPanDepth"
      // trace "xxx setValueByAlias: alias="+#(_alias);
      local String aliasId = _alias.id;
      aliasId.replace(" ", "");
      local String methodName <= "set"+aliasId;
      methodName.replace("/", "");
      TKS.evalMethodByName(this, methodName, {_v}, null/*ret*/);
   }

   // <save.png>
   public method saveState(Stream ofs) {
   }

   // <load.png>
   public method loadState(Stream ifs) : boolean {
      return true;
   }
}


// <class.png>
class MontageData : MontageObject {
   Buffer data;  // *without* $02, <addr_h>, <addr_m>, <addr_l> header
   IntArray diff_tbl;

   boolean b_replay_valid;  // true=replay data has been sent and can be used for diffs
   Buffer replay_data_valid;


   // <method.png>
   public method invalidateReplay() {
      b_replay_valid = false;
      replay_data_valid.fillZero();
   }

   // <method.png>
   public method allocData(int _sz, IntArray _diffTbl) {
      data.size   = _sz;
      data.offset = data.size;
      data.fillZero();
      diff_tbl = _diffTbl;

      replay_data_valid.size   = _sz;
      replay_data_valid.offset = replay_data_valid.size;
      replay_data_valid.fillZero();
   }

   // <method.png>
   public method replayDiffers(MontageData _replay) : boolean {
      return !_replay.b_replay_valid || (data != _replay.data);
   }

   // <method.png>
   public method copyToReplay(MontageData _o) {
      _o.data = data;
      _o.b_replay_valid = true;
      _o.replay_data_valid.fillI8(true);
   }

   // <method.png>
   public method copyDataEx(Buffer _od, int _groupMask) {
      int i = 0;
      loop(diff_tbl.numElements / 3)
      {
         int grp = diff_tbl[i + 2];

         if(0 != (grp & _groupMask))
         {
            int off = diff_tbl[i + 0];
            int sz  = diff_tbl[i + 1];

            loop(sz)
            {
               data.pokeI8(off, _od.peekI8(off));
               off++;
            }
         }

         i += 3;
      }
   }

   public method initFromSyx(Buffer b) {
      // 'b' w/o F0..F7 but with $02 <addr> header (4 bytes)
      int dataSz = b.offset - 10 - 1;

      if(b_compare_syx)
      {
         trace "xxx "+yacMetaClassName()+"::initFromSyx: dataSzOld="+data.size+" data.offsetOld="+data.offset+" dataSzNew="+dataSz;
         trace "xxx "+yacMetaClassName()+"::initFromSyx: b:";
         b.hexdump(0, b.offset);
      }

      b.offset = 10;

      if(b_compare_syx)
      {
         trace "xxx "+yacMetaClassName()+"::initFromSyx: dataOld:";
         data.hexdump(0, data.offset);
         local Buffer dataNew; // xxxxx
         b.readBuffer(dataNew, 0, dataSz, true/*bResize*/);
         Utils.BufferDiff(data, dataNew, true/*bVerbose*/); // xxxx
         data.offset = dataSz;
         trace "xxx "+yacMetaClassName()+"::initFromSyx: got "+data.offset+" bytes (b.offset="+b.offset+")";
         data = dataNew; // xxxx
         data.hexdump(0, dataSz);
      }
      else
      {
         b.readBuffer(data, 0, dataSz, false/*bResize*/);
      }

   }

   public method copyFrom(MontageData _o) {
      data = _o.data;
   }

   public method setDataByte(int _idx, byte _val) {
      data.pokeI8(_idx, _val);
   }

   public method getDataByte(int _idx) {
      return data.peekI8(_idx);
   }

   public method swapDataByte(MontageData _o, byte _off) {
      Buffer od <= _o.data;
      byte c = data.peekI8(_off);
      data.pokeI8(_off, od.peekI8(_off));
      od.pokeI8(_off, c);
   }

   public method sendData(byte h, byte m, byte l, STX_MIDIOutDevice _outDev) {
      if(!b_send)
      {
         trace "[trc] dry-run: send data "+yacMetaClassName()+":";
         data.hexdump(0, data.offset);
         return;
      }
      // if(debug_send_idx < 170)
         SendData(data, h, m, l, _outDev);
      debug_send_idx++;
   }

   public method sendParam1(byte _h, byte _m, byte _l,
                            STX_MIDIOutDevice _outDev, MIDIPipeFrame _fr,
                            byte _1
                            ) {
      sendData.offset = 0;
      sendData.i8 = 0xF0;
      sendData.i8 = 0x43;
      sendData.i8 = 0x10;  // LSB=devnr
      sendData.i8 = 0x7F;
      sendData.i8 = 0x1C;
      sendData.i8 = 0x02;
      sendData.i8 = _h;
      sendData.i8 = _m;
      sendData.i8 = _l;
      sendData.i8 = _1;
      sendData.i8 = 0xF7;
      if(b_send)
         _fr.sysex(true/*bSet*/, _outDev.dev_idx, sendData);
   }

   public method sendParam2(byte _h, byte _m, byte _l,
                            STX_MIDIOutDevice _outDev, MIDIPipeFrame _fr,
                            byte _1, byte _2
                            ) {
      sendData.offset = 0;
      sendData.i8 = 0xF0;
      sendData.i8 = 0x43;
      sendData.i8 = 0x10;  // LSB=devnr
      sendData.i8 = 0x7F;
      sendData.i8 = 0x1C;
      sendData.i8 = 0x02;
      sendData.i8 = _h;
      sendData.i8 = _m;
      sendData.i8 = _l;
      sendData.i8 = _1;
      sendData.i8 = _2;
      sendData.i8 = 0xF7;
      if(b_send)
         _fr.sysex(true/*bSet*/, _outDev.dev_idx, sendData);
   }

   public method sendParam5(byte _h, byte _m, byte _l,
                            STX_MIDIOutDevice _outDev, MIDIPipeFrame _fr,
                            byte _1, byte _2, byte _3, byte _4, byte _5
                            ) {
      sendData.offset = 0;
      sendData.i8 = 0xF0;
      sendData.i8 = 0x43;
      sendData.i8 = 0x10;  // LSB=devnr
      sendData.i8 = 0x7F;
      sendData.i8 = 0x1C;
      sendData.i8 = 0x02;
      sendData.i8 = _h;
      sendData.i8 = _m;
      sendData.i8 = _l;
      sendData.i8 = _1;
      sendData.i8 = _2;
      sendData.i8 = _3;
      sendData.i8 = _4;
      sendData.i8 = _5;
      sendData.i8 = 0xF7;
      if(b_send)
         _fr.sysex(true/*bSet*/, _outDev.dev_idx, sendData);
   }

   protected method sendDiffEx(byte _h, byte _m, MontageData _replay, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft, IntArray _diffTbl) : int {
      Buffer od <= _replay.data;
      Buffer vd <= _replay.replay_data_valid;

      if(0 == vd.offset)
         trace "xxx sendDiff: "+GetAddrString(_h, _m, 0)+" vd.offset==0 !!!!";

      if(_numDiffsLeft <= 0)
         return 0;

      int numSkipped = 0;

      int idx = 0;
      loop(_diffTbl.numElements /3)
      {
         int g = _diffTbl[idx+2];

         if(g & _flags)
         {
            int l = _diffTbl[idx];
            int n = _diffTbl[idx+1];

            byte a1 = od.peekI8(l)    & 127;
            byte b1 = data.peekI8(l)  & 127;
            byte a2;
            byte b2;
            boolean bVD = vd.peekI8(l);
            // // if(l == $3D)
            // //    trace "xxx sendDiffEx: $3D bVD="+bVD+" vd="+#(vd);
            boolean bDebugDiff = b_debug_diff;// && (_h == $30 && _m == $40);

            if(bDebugDiff)  // perfcommon (name)
               trace "xxx sendDiff perfcommon: l="+l+" bVD="+bVD+" a1="+a1+" b1="+b1;

            Integer ioH;
            Integer ioM;
            Integer ioL;
            Integer ioA1;
            Integer ioB1;

            if(1 == n)
            {
               if(!bVD || _bSendAll || (a1 != b1))
               {
                  // if( ($31==_h && 1==_m && $24==l) || bDebugDiff)
                  if(bDebugDiff)
                  {
                     ioH = _h;
                     ioM = _m;
                     ioL = l;
                     ioA1 = a1;
                     ioB1 = b1;

                     trace "xxx sendParam1 addr="+ioH.printf("%02x")+","+ioM.printf("%02x")+","+ioL.printf("%02x")+" a1="+a1+"("+ioA1.printf("%02x")+") b1="+b1+" ("+ioB1.printf("%02x")+") "+((b1>=32)?("\'"+tcchar(b1)+"\'"):"");
                  }

                  sendParam1(_h, _m, l, _outDev, _fr, b1);

                  od.pokeI8(l, b1);
                  vd.pokeI8(l, true);

                  _numDiffsLeft--;
               }
            }
            else if(2 == n)
            {
               a2 = od.peekI8(l + 1)    & 127;
               b2 = data.peekI8(l + 1)  & 127;

               if(!bVD || _bSendAll || (a1 != b1) || (a2 != b2))
               {
                  if(bDebugDiff)
                  {
                     ioH = _h;
                     ioM = _m;
                     ioL = l;
                     trace "xxx sendParam2 addr="+ioH.printf("%02x")+","+ioM.printf("%02x")+","+ioL.printf("%02x")+" a1="+a1+" b1="+b1+" a2="+a2+" b2="+b2;
                  }

                  sendParam2(_h, _m, l, _outDev, _fr, b1, b2);

                  od.pokeI8(l,   b1);
                  od.pokeI8(l+1, b2);

                  vd.pokeI8(l, true);

                  _numDiffsLeft--;
               }
            }
            else if(5 == n)
            {
               a2 = od.peekI8(l + 1)    & 127;
               b2 = data.peekI8(l + 1)  & 127;
               byte a3 = od.peekI8(l + 2)    & 127;
               byte b3 = data.peekI8(l + 2)  & 127;
               byte a4 = od.peekI8(l + 3)    & 127;
               byte b4 = data.peekI8(l + 3)  & 127;
               byte a5 = od.peekI8(l + 4)    & 127;
               byte b5 = data.peekI8(l + 4)  & 127;

               if(!bVD || _bSendAll || (a1 != b1) || (a2 != b2) || (a3 != b3) || (a4 != b4) || (a5 != b5))
               {
                  if(bDebugDiff)
                  {
                     ioH = _h;
                     ioM = _m;
                     ioL = l;
                     trace "xxx sendParam2 addr="+ioH.printf("%02x")+","+ioM.printf("%02x")+","+ioL.printf("%02x")+" a1="+a1+" b1="+b1+" a2="+a2+" b2="+b2;
                  }

                  sendParam5(_h, _m, l, _outDev, _fr, b1, b2, b3, b4, b5);

                  od.pokeI8(l,   b1);
                  od.pokeI8(l+1, b2);
                  od.pokeI8(l+2, b3);
                  od.pokeI8(l+3, b4);
                  od.pokeI8(l+4, b5);

                  vd.pokeI8(l, true);

                  _numDiffsLeft--;
               }
            }

         } // if g & flags
         else
         {
            // trace "xxx skip param "+(idx/3)+" g="+g+" flags="+_flags;
            numSkipped++;
         }

         if(_numDiffsLeft <= 0)
            return 0;

         idx += 3;
      }

      _replay.b_replay_valid = true;

      if(0 == numSkipped)
         copyToReplay(_replay); // fill in remaining (unknown) bytes (few but they exist, e.g. 0x18 in PerformanceCommon)

      return _numDiffsLeft;
   }

   protected method sendDiff(byte _h, byte _m, MontageData _replay, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      return sendDiffEx(_h, _m, _replay, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft, diff_tbl);
   }

   // <save.png>
   public method saveStateData(Stream ofs) {
      ofs.i8 = data.offset;
      ofs.writeBuffer(data, 0, data.offset);
   }

   // <load.png>
   public method loadStateData(Stream ifs) : boolean {
      int sz = ifs.u8;
      if(b_debug)
         trace "xxx loadState<"+yacMetaClassName()+">: data.offset="+data.offset+" sz="+sz;
      if(sz != data.offset)
         trace "[~~~] loadState<"+yacMetaClassName()+">: WRONG data size (read sz="+sz+", expect data.offset="+data.offset+")";
      ifs.readBuffer(data, 0, data.offset, false/*bResize*/);
      return true;
   }

   // <save.png>
   public virtual saveState(Stream ofs) {
      ofs.i16 = 1; // ver
      saveStateData(ofs);
   }

   // <load.png>
   public virtual loadState(Stream ifs) : boolean {
      if(MMontage.b_debug_io) trace "xxx MontageData::loadState: ifs.offset="+ifs.offset;
      short ver = ifs.u16;
      if(ver >= 1)
      {
         return loadStateData(ifs);
      }
      else
      {
         trace "[---] "+yacMetaClassName()+"::loadState: invalid ver="+ver;
      }
      return false;
   }

}


// <class.png>
class MontageUnknown_00_7F_00 : MontageData {
   // received after Bulk Header

   public static New() {
      local MontageUnknown_00_7F_00 r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(4,
                [0, 0, 0
                 ]
                );
   }

   public virtual send(MontageUnknown_00_7F_00 _replay, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replay))
      {
         if(null != _fr)
         {
            // (todo) sendDiff
            // _numDiffsLeft = sendDiff($00, $7F, _replay, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($00, $7F, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replay);
         }

      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageUnknown_30_70_00 : MontageData {
   // recvd after Super Knob Sequence 7/7

   public static New() {
      local MontageUnknown_30_70_00 r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(4,
                [0, 0, 0
                 ]
                );
   }

   public virtual send(MontageUnknown_30_70_00 _replay, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replay))
      {
         if(null != _fr)
         {
            // (todo) sendDiff
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $70, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replay);
         }
      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageUnknown_30_71_00 : MontageData {
   // recvd after Super Knob Sequence 7/7

   public static New() {
      local MontageUnknown_30_71_00 r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(4,
                [0, 0, 0
                 ]
                );
   }

   public virtual send(MontageUnknown_30_71_00 _replay, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replay))
      {
         if(null != _fr)
         {
            // (todo) sendDiff
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $71, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replay);
         }

      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageReverb : MontageData {

   public static New() {
      local MontageReverb r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(71,  // $47
                [$00, 2, G_MFX,   // Reverb Type
                 $02, 1, G_MFX,   // Reverb Preset Number
                 $03, 2, G_MFX,   // Reverb Parameter 1
                 $05, 2, G_MFX,   // Reverb Parameter 2
                 $07, 2, G_MFX,   // Reverb Parameter 3
                 $09, 2, G_MFX,   // Reverb Parameter 4
                 $0B, 2, G_MFX,   // Reverb Parameter 5
                 $0D, 2, G_MFX,   // Reverb Parameter 6
                 $0F, 2, G_MFX,   // Reverb Parameter 7
                 $11, 2, G_MFX,   // Reverb Parameter 8
                 $13, 2, G_MFX,   // Reverb Parameter 9
                 $15, 2, G_MFX,   // Reverb Parameter 10
                 $17, 2, G_MFX,   // Reverb Parameter 11
                 $19, 2, G_MFX,   // Reverb Parameter 12
                 $1B, 2, G_MFX,   // Reverb Parameter 13
                 $1D, 2, G_MFX,   // Reverb Parameter 14
                 $1F, 2, G_MFX,   // Reverb Parameter 15
                 $21, 2, G_MFX,   // Reverb Parameter 16
                 $23, 2, G_MFX,   // Reverb Parameter 17
                 $25, 2, G_MFX,   // Reverb Parameter 18
                 $27, 2, G_MFX,   // Reverb Parameter 19
                 $29, 2, G_MFX,   // Reverb Parameter 20
                 $2B, 2, G_MFX,   // Reverb Parameter 21
                 $2D, 2, G_MFX,   // Reverb Parameter 22
                 $2F, 2, G_MFX,   // Reverb Parameter 23
                 $31, 2, G_MFX,   // Reverb Parameter 24
                 $44, 1, G_MFX,   // Reverb Return
                 $45, 1, G_MFX,   // Reverb Pan
                 $46, 1, G_MFX,   // Reverb Switch
                 ]
                );
   }

   public virtual send(MontageReverb _replayReverb, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      short origSW;
      if(0 == (g_fx_mode & 2))
      {
         origSW = getSwitch();
         setSwitch(0);
      }

      if(_bSendAll || replayDiffers(_replayReverb))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($30, $41, _replayReverb, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $41, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayReverb);
         }

      }

      if(0 == (g_fx_mode & 2))
         setSwitch(origSW);

      return _numDiffsLeft;
   }

   public method setSwitch(byte _v) {
      data.pokeI8($46, _v);
   }

   public method getSwitch() : byte {
      return data.peekI8($46);
   }

}


// <class.png>
class MontageVariation : MontageData {

   public static New() {
      local MontageVariation r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(72, // $48
                [$00, 2, G_PFX,   // Variation Type
                 $02, 1, G_PFX,   // Variation Preset Number
                 $03, 2, G_PFX,   // Variation Parameter 1
                 $05, 2, G_PFX,   // Variation Parameter 2
                 $07, 2, G_PFX,   // Variation Parameter 3
                 $09, 2, G_PFX,   // Variation Parameter 4
                 $0B, 2, G_PFX,   // Variation Parameter 5
                 $0D, 2, G_PFX,   // Variation Parameter 6
                 $0F, 2, G_PFX,   // Variation Parameter 7
                 $11, 2, G_PFX,   // Variation Parameter 8
                 $13, 2, G_PFX,   // Variation Parameter 9
                 $15, 2, G_PFX,   // Variation Parameter 10
                 $17, 2, G_PFX,   // Variation Parameter 11
                 $19, 2, G_PFX,   // Variation Parameter 12
                 $1B, 2, G_PFX,   // Variation Parameter 13
                 $1D, 2, G_PFX,   // Variation Parameter 14
                 $1F, 2, G_PFX,   // Variation Parameter 15
                 $21, 2, G_PFX,   // Variation Parameter 16
                 $23, 2, G_PFX,   // Variation Parameter 17
                 $25, 2, G_PFX,   // Variation Parameter 18
                 $27, 2, G_PFX,   // Variation Parameter 19
                 $29, 2, G_PFX,   // Variation Parameter 20
                 $2B, 2, G_PFX,   // Variation Parameter 21
                 $2D, 2, G_PFX,   // Variation Parameter 22
                 $2F, 2, G_PFX,   // Variation Parameter 23
                 $31, 2, G_PFX,   // Variation Parameter 24
                 $43, 1, G_PFX,   // Variation Side Chain Part (0: Part 1, 1: Part 2 - 15: Part 16, 16: A/D, 17: Master, 127: Off)
                 $44, 1, G_PFX,   // Variation Return
                 $45, 1, G_PFX,   // Variation Pan
                 $46, 1, G_PFX,   // Send Variation To Reverb
                 $47, 1, G_PFX,   // Variation Switch
                 ]
                );
   }

   public virtual send(MontageVariation _replayVariation, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      byte origSW;
      if(0 == (g_fx_mode & 2))
      {
         origSW = getSwitch();
         setSwitch(0);
      }

      if(_bSendAll || replayDiffers(_replayVariation))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($30, $42, _replayVariation, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $42, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayVariation);
         }
      }

      if(0 == (g_fx_mode & 2))
         setSwitch(origSW);

      return _numDiffsLeft;
   }

   public method setType(short _v) {
      data.pokeI8($00, (_v >> 7));
      data.pokeI8($01, (_v&127));
   }

   public method getType() : short {
      return (data.peekI8($00)<<7) | (data.peekI8($01)&127);
   }

   public method setSwitch(byte _v) {
      data.pokeI8($47, _v);
   }

   public method getSwitch() : byte {
      return data.peekI8($47);
   }

}


// <class.png>
class MontageMasterEQ : MontageData {

   public static New() {
      local MontageMasterEQ r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(21,  // $15
                [$00, 1, G_MEQ,  // Master EQ Low Gain
                 $01, 1, G_MEQ,  // Master EQ Low Frequency
                 $02, 1, G_MEQ,  // Master EQ Low Q
                 $03, 1, G_MEQ,  // Master EQ Low Shape
                 $04, 1, G_MEQ,  // Master EQ Low Mid Gain
                 $05, 1, G_MEQ,  // Master EQ Low Mid Frequency
                 $06, 1, G_MEQ,  // Master EQ Low Mid Q
                 $08, 1, G_MEQ,  // Master EQ Mid Gain
                 $09, 1, G_MEQ,  // Master EQ Mid Frequency
                 $0A, 1, G_MEQ,  // Master EQ Mid Q
                 $0C, 1, G_MEQ,  // Master EQ High Mid Gain
                 $0D, 1, G_MEQ,  // Master EQ High Mid Frequency
                 $0E, 1, G_MEQ,  // Master EQ High Mid Q
                 $10, 1, G_MEQ,  // Master EQ High Gain
                 $11, 1, G_MEQ,  // Master EQ High Frequency
                 $12, 1, G_MEQ,  // Master EQ High Q
                 $13, 1, G_MEQ,  // Master EQ High Shape
                 $14, 1, G_MEQ,  // Master EQ Switch
                 ]
                );
   }

   public virtual send(MontageMasterEQ _replayMasterEQ, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayMasterEQ))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($30, $45, _replayMasterEQ, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $45, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayMasterEQ);
         }
      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageMasterEffect : MontageData {

   public static New() {
      local MontageMasterEffect r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(72,  // $48
                [$00, 2, G_MFX,   // Master Effect Type
                 $02, 1, G_MFX,   // Master Effect Preset Number
                 $03, 2, G_MFX,   // Master Effect Parameter 1
                 $05, 2, G_MFX,   // Master Effect Parameter 2
                 $07, 2, G_MFX,   // Master Effect Parameter 3
                 $09, 2, G_MFX,   // Master Effect Parameter 4
                 $0B, 2, G_MFX,   // Master Effect Parameter 5
                 $0D, 2, G_MFX,   // Master Effect Parameter 6
                 $0F, 2, G_MFX,   // Master Effect Parameter 7
                 $11, 2, G_MFX,   // Master Effect Parameter 8
                 $13, 2, G_MFX,   // Master Effect Parameter 9
                 $15, 2, G_MFX,   // Master Effect Parameter 10
                 $17, 2, G_MFX,   // Master Effect Parameter 11
                 $19, 2, G_MFX,   // Master Effect Parameter 12
                 $1B, 2, G_MFX,   // Master Effect Parameter 13
                 $1D, 2, G_MFX,   // Master Effect Parameter 14
                 $1F, 2, G_MFX,   // Master Effect Parameter 15
                 $21, 2, G_MFX,   // Master Effect Parameter 16
                 $23, 2, G_MFX,   // Master Effect Parameter 17
                 $25, 2, G_MFX,   // Master Effect Parameter 18
                 $27, 2, G_MFX,   // Master Effect Parameter 19
                 $29, 2, G_MFX,   // Master Effect Parameter 20
                 $2B, 2, G_MFX,   // Master Effect Parameter 21
                 $2D, 2, G_MFX,   // Master Effect Parameter 22
                 $2F, 2, G_MFX,   // Master Effect Parameter 23
                 $31, 2, G_MFX,   // Master Effect Parameter 24
                 $43, 1, G_MFX,   // Master Effect Side Chain Part (0: Part 1, 1: Part 2 - 15: Part 16, 16: A/D, 17: Master, 127: Off)
                 $44, 1, G_MFX,   // Master Effect Envelope Follower Gain
                 $45, 1, G_MFX,   // Master Effect Envelope Follower Attack
                 $46, 1, G_MFX,   // Master Effect Envelope Follower Release
                 $47, 1, G_MFX,   // Master Effect Switch
                 ]
                );
   }

   public virtual send(MontageMasterEffect _replayMasterEffect, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      byte origSW;
      if(0 == (g_fx_mode & 2))
      {
         origSW = getSwitch();
         setSwitch(0);
      }

      if(_bSendAll || replayDiffers(_replayMasterEffect))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($30, $46, _replayMasterEffect, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $46, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayMasterEffect);
         }

      }

      if(0 == (g_fx_mode & 2))
         setSwitch(origSW);

      return _numDiffsLeft;
   }

   public method setType(short _v) {
      data.pokeI8($00, (_v >> 7));
      data.pokeI8($01, (_v&127));
   }

   public method getType() : short {
      return (data.peekI8($00)<<7) | (data.peekI8($01)&127);
   }

   public method setSwitch(byte _v) {
      data.pokeI8($47, _v);
   }

   public method getSwitch() : byte {
      return data.peekI8($47);
   }


}


// <class.png>
class MontageArpeggioCommon : MontageData {

   public static New() {
      local MontageArpeggioCommon r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(13,  // $D
                [$00, 1, G_ARP,  // Arpeggio Select
                 $03, 1, G_ARP,  // Master Switch
                 $04, 1, G_ARP,  // Synchro Quantize Value
                 $07, 2, G_ARP,  // Arpeggio Gate Time Rate Offset
                 $09, 2, G_ARP,  // Arpeggio Velocity Rate Offset
                 ]
                );
   }

   public virtual send(MontageArpeggioCommon _replayArpeggioCommon, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayArpeggioCommon))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($30, $47, _replayArpeggioCommon, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $47, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayArpeggioCommon);
         }

      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageSuperKnobLaneSettings : MontageData {
   int part_idx;  // -1=perf common

   public static New() {
      local MontageSuperKnobLaneSettings r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(15,  // $0F
                [$00, 1, G_SUPERKNOB,  // Motion Seq Switch
                 $01, 1, G_SUPERKNOB,  // Motion Seq FX Receive
                 $02, 1, G_SUPERKNOB,  // Motion Seq Trigger Receive
                 $03, 1, G_SUPERKNOB,  // Motion Seq Sync
                 $04, 1, G_SUPERKNOB,  // Motion Seq Speed
                 $05, 1, G_SUPERKNOB,  // Motion Seq Unit Multiply
                 $06, 1, G_SUPERKNOB,  // Motion Seq Key On Reset
                 $07, 1, G_SUPERKNOB,  // Motion Seq Loop
                 $08, 1, G_SUPERKNOB,  // Motion Seq Velocity Limit Low
                 $09, 1, G_SUPERKNOB,  // Motion Seq Velocity Limit High
                 ]
                );
   }

   public virtual send(MontageSuperKnobLaneSettings _replaySuperKnobLaneSettings, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replaySuperKnobLaneSettings))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($30, $4A, _replaySuperKnobLaneSettings, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $4A, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replaySuperKnobLaneSettings);
         }
      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageSuperKnobSettings : MontageData {

   public static New() {
      local MontageSuperKnobSettings r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(28, // $1C
                [$00, 1, G_SUPERKNOB,   // Super Knob Value
                 $01, 1, G_SUPERKNOB,   // Assignable Knob 1 Destination Value 1
                 $02, 1, G_SUPERKNOB,   // Assignable Knob 1 Destination Value 2
                 $03, 1, G_SUPERKNOB,   // Assignable Knob 2 Destination Value 1
                 $04, 1, G_SUPERKNOB,   // Assignable Knob 2 Destination Value 2
                 $05, 1, G_SUPERKNOB,   // Assignable Knob 3 Destination Value 1
                 $06, 1, G_SUPERKNOB,   // Assignable Knob 3 Destination Value 2
                 $07, 1, G_SUPERKNOB,   // Assignable Knob 4 Destination Value 1
                 $08, 1, G_SUPERKNOB,   // Assignable Knob 4 Destination Value 2
                 $09, 1, G_SUPERKNOB,   // Assignable Knob 5 Destination Value 1
                 $0A, 1, G_SUPERKNOB,   // Assignable Knob 5 Destination Value 2
                 $0B, 1, G_SUPERKNOB,   // Assignable Knob 6 Destination Value 1
                 $0C, 1, G_SUPERKNOB,   // Assignable Knob 6 Destination Value 2
                 $0D, 1, G_SUPERKNOB,   // Assignable Knob 7 Destination Value 1
                 $0E, 1, G_SUPERKNOB,   // Assignable Knob 7 Destination Value 2
                 $0F, 1, G_SUPERKNOB,   // Assignable Knob 8 Destination Value 1
                 $10, 1, G_SUPERKNOB,   // Assignable Knob 8 Destination Value 2
                 $11, 1, G_SUPERKNOB,   // Super Knob LED Pattern
                 $12, 1, G_SUPERKNOB,   // Super Knob / Common Motion Seq Sync Part (0..15 => Part 1..16)
                 $13, 1, G_SUPERKNOB,   // Asssignable Knob 1 Independent Switch
                 $14, 1, G_SUPERKNOB,   // Asssignable Knob 2 Independent Switch
                 $15, 1, G_SUPERKNOB,   // Asssignable Knob 3 Independent Switch
                 $16, 1, G_SUPERKNOB,   // Asssignable Knob 4 Independent Switch
                 $17, 1, G_SUPERKNOB,   // Asssignable Knob 5 Independent Switch
                 $18, 1, G_SUPERKNOB,   // Asssignable Knob 6 Independent Switch
                 $19, 1, G_SUPERKNOB,   // Asssignable Knob 7 Independent Switch
                 $1A, 1, G_SUPERKNOB,   // Asssignable Knob 8 Independent Switch
                 $1B, 1, G_SUPERKNOB,   // Super Knob Motion Seq Random (0-127)
                 ]
                );
   }

   public virtual send(MontageSuperKnobSettings _replaySuperKnobSettings, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replaySuperKnobSettings))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($30, $4B, _replaySuperKnobSettings, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $4B, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replaySuperKnobSettings);
         }
      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageSceneCommon : MontageData {

   public static New() {
      local MontageSceneCommon r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(128,  // $80
                [$00, 1, G_SCENE,  // Scene Select
                 $01, 1, G_SCENE,  // Scene 1 Arpeggio Select
                 $02, 1, G_SCENE,  // Scene 1 Motion Seq Select
                 $03, 1, G_SCENE,  // Scene 1 Arpeggio Master Switch
                 $04, 1, G_SCENE,  // Scene 1 Motion Seq Master Switch
                 $05, 1, G_SCENE,  // Scene 1 Arpeggio Memorize Switch
                 $06, 1, G_SCENE,  // Scene 1 Motion Seq Memorize Switch
                 $07, 1, G_SCENE,  // Scene 1 Super Knob Memorize Switch
                 $08, 1, G_SCENE,  // Scene 1 Mixing Memorize Switch
                 $09, 1, G_SCENE,  // Scene 1 AEG Memorize Switch
                 $0A, 1, G_SCENE,  // Scene 1 Arp/MS FX Memorize Switch
                 $0B, 1, G_SCENE,  // Scene 1 Super Knob Value
                 $11, 1, G_SCENE,  // Scene 2 Arpeggio Select
                 $12, 1, G_SCENE,  // Scene 2 Motion Seq Select
                 $13, 1, G_SCENE,  // Scene 2 Arpeggio Master Switch
                 $14, 1, G_SCENE,  // Scene 2 Motion Seq Master Switch
                 $15, 1, G_SCENE,  // Scene 2 Arpeggio Memorize Switch
                 $16, 1, G_SCENE,  // Scene 2 Motion Seq Memorize Switch
                 $17, 1, G_SCENE,  // Scene 2 Super Knob Memorize Switch
                 $18, 1, G_SCENE,  // Scene 2 Mixing Memorize Switch
                 $19, 1, G_SCENE,  // Scene 2 AEG Memorize Switch
                 $1A, 1, G_SCENE,  // Scene 2 Arp/MS FX Memorize Switch
                 $1B, 1, G_SCENE,  // Scene 2 Super Knob Value
                 $21, 1, G_SCENE,  // Scene 3 Arpeggio Select
                 $22, 1, G_SCENE,  // Scene 3 Motion Seq Select
                 $23, 1, G_SCENE,  // Scene 3 Arpeggio Master Switch
                 $24, 1, G_SCENE,  // Scene 3 Motion Seq Master Switch
                 $25, 1, G_SCENE,  // Scene 3 Arpeggio Memorize Switch
                 $26, 1, G_SCENE,  // Scene 3 Motion Seq Memorize Switch
                 $27, 1, G_SCENE,  // Scene 3 Super Knob Memorize Switch
                 $28, 1, G_SCENE,  // Scene 3 Mixing Memorize Switch
                 $29, 1, G_SCENE,  // Scene 3 AEG Memorize Switch
                 $2A, 1, G_SCENE,  // Scene 3 Arp/MS FX Memorize Switch
                 $2B, 1, G_SCENE,  // Scene 3 Super Knob Value
                 $31, 1, G_SCENE,  // Scene 4 Arpeggio Select
                 $32, 1, G_SCENE,  // Scene 4 Motion Seq Select
                 $33, 1, G_SCENE,  // Scene 4 Arpeggio Master Switch
                 $34, 1, G_SCENE,  // Scene 4 Motion Seq Master Switch
                 $35, 1, G_SCENE,  // Scene 4 Arpeggio Memorize Switch
                 $36, 1, G_SCENE,  // Scene 4 Motion Seq Memorize Switch
                 $37, 1, G_SCENE,  // Scene 4 Super Knob Memorize Switch
                 $38, 1, G_SCENE,  // Scene 4 Mixing Memorize Switch
                 $39, 1, G_SCENE,  // Scene 4 AEG Memorize Switch
                 $3A, 1, G_SCENE,  // Scene 4 Arp/MS FX Memorize Switch
                 $3B, 1, G_SCENE,  // Scene 4 Super Knob Value
                 $41, 1, G_SCENE,  // Scene 5 Arpeggio Select
                 $42, 1, G_SCENE,  // Scene 5 Motion Seq Select
                 $43, 1, G_SCENE,  // Scene 5 Arpeggio Master Switch
                 $44, 1, G_SCENE,  // Scene 5 Motion Seq Master Switch
                 $45, 1, G_SCENE,  // Scene 5 Arpeggio Memorize Switch
                 $46, 1, G_SCENE,  // Scene 5 Motion Seq Memorize Switch
                 $47, 1, G_SCENE,  // Scene 5 Super Knob Memorize Switch
                 $48, 1, G_SCENE,  // Scene 5 Mixing Memorize Switch
                 $49, 1, G_SCENE,  // Scene 5 AEG Memorize Switch
                 $4A, 1, G_SCENE,  // Scene 5 Arp/MS FX Memorize Switch
                 $4B, 1, G_SCENE,  // Scene 5 Super Knob Value
                 $51, 1, G_SCENE,  // Scene 6 Arpeggio Select
                 $52, 1, G_SCENE,  // Scene 6 Motion Seq Select
                 $53, 1, G_SCENE,  // Scene 6 Arpeggio Master Switch
                 $54, 1, G_SCENE,  // Scene 6 Motion Seq Master Switch
                 $55, 1, G_SCENE,  // Scene 6 Arpeggio Memorize Switch
                 $56, 1, G_SCENE,  // Scene 6 Motion Seq Memorize Switch
                 $57, 1, G_SCENE,  // Scene 6 Super Knob Memorize Switch
                 $58, 1, G_SCENE,  // Scene 6 Mixing Memorize Switch
                 $59, 1, G_SCENE,  // Scene 6 AEG Memorize Switch
                 $5A, 1, G_SCENE,  // Scene 6 Arp/MS FX Memorize Switch
                 $5B, 1, G_SCENE,  // Scene 6 Super Knob Value
                 $61, 1, G_SCENE,  // Scene 7 Arpeggio Select
                 $62, 1, G_SCENE,  // Scene 7 Motion Seq Select
                 $63, 1, G_SCENE,  // Scene 7 Arpeggio Master Switch
                 $64, 1, G_SCENE,  // Scene 7 Motion Seq Master Switch
                 $65, 1, G_SCENE,  // Scene 7 Arpeggio Memorize Switch
                 $66, 1, G_SCENE,  // Scene 7 Motion Seq Memorize Switch
                 $67, 1, G_SCENE,  // Scene 7 Super Knob Memorize Switch
                 $68, 1, G_SCENE,  // Scene 7 Mixing Memorize Switch
                 $69, 1, G_SCENE,  // Scene 7 AEG Memorize Switch
                 $6A, 1, G_SCENE,  // Scene 7 Arp/MS FX Memorize Switch
                 $6B, 1, G_SCENE,  // Scene 7 Super Knob Value
                 $71, 1, G_SCENE,  // Scene 8 Arpeggio Select
                 $72, 1, G_SCENE,  // Scene 8 Motion Seq Select
                 $73, 1, G_SCENE,  // Scene 8 Arpeggio Master Switch
                 $74, 1, G_SCENE,  // Scene 8 Motion Seq Master Switch
                 $75, 1, G_SCENE,  // Scene 8 Arpeggio Memorize Switch
                 $76, 1, G_SCENE,  // Scene 8 Motion Seq Memorize Switch
                 $77, 1, G_SCENE,  // Scene 8 Super Knob Memorize Switch
                 $78, 1, G_SCENE,  // Scene 8 Mixing Memorize Switch
                 $79, 1, G_SCENE,  // Scene 8 AEG Memorize Switch
                 $7A, 1, G_SCENE,  // Scene 8 Arp/MS FX Memorize Switch
                 $7B, 1, G_SCENE,  // Scene 8 Super Knob Value
                 ]
                );
   }

   public virtual send(MontageSceneCommon _replaySceneCommon, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replaySceneCommon))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($30, $4C, _replaySceneCommon, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $4C, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replaySceneCommon);
         }
      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageAudition : MontageData {

   public static New() {
      local MontageAudition r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(4,
                [$00, 1, G_AUDITION,  // Phrase Number
                 $02, 1, G_AUDITION,  // Note Shift
                 $03, 1, G_AUDITION,  // Velocity Shift
                 ]
                );
   }

   public virtual send(MontageAudition _replayAudition, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayAudition))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($30, $4D, _replayAudition, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $4D, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayAudition);
         }

      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageAudioInPartAD : MontageData {

   public static New() {
      local MontageAudioInPartAD r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(28,  // $1C
                [$00, 1, G_AUDIO,  // A/D Part Input Mode   (0..3 => L Mono, R Mono, L+R Mono, Stereo)
                 $01, 1, G_AUDIO,  // A/D Part Volume
                 $02, 1, G_AUDIO,  // A/D Part Pan
                 $03, 1, G_AUDIO,  // A/D Part Reverb Send
                 $04, 1, G_AUDIO,  // A/D Part Variation Send
                 $05, 1, G_AUDIO,  // A/D Part Insert Connect Switch
                 $06, 1, G_AUDIO,  // A/D Part Insert FX Switch
                 $07, 1, G_AUDIO,  // A/D Part Dry Level
                 $08, 1, G_AUDIO,  // A/D Part Envelope Follower Gain
                 $09, 1, G_AUDIO,  // A/D Part Envelope Follower Attack
                 $0A, 1, G_AUDIO,  // A/D Part Envelope Follower Release
                 $0B, 1, G_AUDIO,  // A/D Part 2-band EQ 1 Type
                 $0C, 2, G_AUDIO,  // A/D Part 2-band EQ 1 Frequency
                 $0E, 1, G_AUDIO,  // A/D Part 2-band EQ 1 Gain
                 $0F, 1, G_AUDIO,  // A/D Part 2-band EQ 1 Q
                 $10, 1, G_AUDIO,  // A/D Part 2-band EQ 2 Type
                 $11, 2, G_AUDIO,  // A/D Part 2-band EQ 2 Frequency
                 $13, 1, G_AUDIO,  // A/D Part 2-band EQ 2 Gain
                 $14, 1, G_AUDIO,  // A/D Part 2-band EQ 2 Q
                 $16, 1, G_AUDIO,  // A/D Part Output Select
                 $17, 1, G_AUDIO,  // A/D Part Motion Seq Part Switch
                 $1B, 1, G_AUDIO,  // A/D Part Motion Seq Random
                 ]
                );
   }

   public virtual send(MontageAudioInPartAD _replayAudioInPartAD, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      byte origSW;
      if(0 == (g_fx_mode & 1))
      {
         origSW = getInsertionFXSwitch();
         setInsertionFXSwitch(0);
      }

      if(_bSendAll || replayDiffers(_replayAudioInPartAD))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($30, $4E, _replayAudioInPartAD, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $4E, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayAudioInPartAD);
         }

      }

      if(0 == (g_fx_mode & 1))
      {
         setInsertionFXSwitch(origSW);
      }

      return _numDiffsLeft;
   }

   public method setInsertionFXSwitch(byte _v) {
      data.pokeI8($06, _v);
   }

   public method getInsertionFXSwitch() : byte {
      return data.peekI8($06);
   }

}


// <class.png>
class MontageAudioInPartUSB : MontageData {

   public static New() {
      local MontageAudioInPartUSB r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(23,  // $17
                [$00, 1, G_AUDIO,  // Input Mode
                 $01, 1, G_AUDIO,  // Volume
                 $02, 1, G_AUDIO,  // Pan
                 $03, 1, G_AUDIO,  // Reverb Send
                 $04, 1, G_AUDIO,  // Variation Send
                 $07, 1, G_AUDIO,  // Dry Level
                 $16, 1, G_AUDIO,  // Output Select
                 ]
                );
   }

   public virtual send(MontageAudioInPartUSB _replayAudioInPartUSB, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayAudioInPartUSB))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($30, $4F, _replayAudioInPartUSB, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $4F, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayAudioInPartUSB);
         }
      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageAssignableKnobName : MontageData {
   int part_idx;  // -1=perf common

   public static New(int _partIdx) {
      local MontageAssignableKnobName r;
      r.init(_partIdx);
      return deref r;
   }

   public method init(int _partIdx) {
      part_idx = _partIdx;
      allocData(128,
                [$00, 1, G_KNOBNAME,  // Assignable Knob 1 Name 1
                 $01, 1, G_KNOBNAME,  // Assignable Knob 1 Name 2
                 $02, 1, G_KNOBNAME,  // Assignable Knob 1 Name 3
                 $03, 1, G_KNOBNAME,  // Assignable Knob 1 Name 4
                 $04, 1, G_KNOBNAME,  // Assignable Knob 1 Name 5
                 $05, 1, G_KNOBNAME,  // Assignable Knob 1 Name 6
                 $06, 1, G_KNOBNAME,  // Assignable Knob 1 Name 7
                 $07, 1, G_KNOBNAME,  // Assignable Knob 1 Name 8
                 $08, 1, G_KNOBNAME,  // Assignable Knob 1 Name 9
                 $09, 1, G_KNOBNAME,  // Assignable Knob 1 Name 10
                 $0A, 1, G_KNOBNAME,  // Assignable Knob 1 Name 11
                 $0B, 1, G_KNOBNAME,  // Assignable Knob 1 Name 12
                 $0C, 1, G_KNOBNAME,  // Assignable Knob 1 Name 13
                 $0D, 1, G_KNOBNAME,  // Assignable Knob 1 Name 14
                 $0E, 1, G_KNOBNAME,  // Assignable Knob 1 Name 15
                 $0F, 1, G_KNOBNAME,  // Assignable Knob 1 Name 16
                 $10, 1, G_KNOBNAME,  // Assignable Knob 2 Name 1
                 $11, 1, G_KNOBNAME,  // Assignable Knob 2 Name 2
                 $12, 1, G_KNOBNAME,  // Assignable Knob 2 Name 3
                 $13, 1, G_KNOBNAME,  // Assignable Knob 2 Name 4
                 $14, 1, G_KNOBNAME,  // Assignable Knob 2 Name 5
                 $15, 1, G_KNOBNAME,  // Assignable Knob 2 Name 6
                 $16, 1, G_KNOBNAME,  // Assignable Knob 2 Name 7
                 $17, 1, G_KNOBNAME,  // Assignable Knob 2 Name 8
                 $18, 1, G_KNOBNAME,  // Assignable Knob 2 Name 9
                 $19, 1, G_KNOBNAME,  // Assignable Knob 2 Name 10
                 $1A, 1, G_KNOBNAME,  // Assignable Knob 2 Name 11
                 $1B, 1, G_KNOBNAME,  // Assignable Knob 2 Name 12
                 $1C, 1, G_KNOBNAME,  // Assignable Knob 2 Name 13
                 $1D, 1, G_KNOBNAME,  // Assignable Knob 2 Name 14
                 $1E, 1, G_KNOBNAME,  // Assignable Knob 2 Name 15
                 $1F, 1, G_KNOBNAME,  // Assignable Knob 2 Name 16
                 $20, 1, G_KNOBNAME,  // Assignable Knob 3 Name 1
                 $21, 1, G_KNOBNAME,  // Assignable Knob 3 Name 2
                 $22, 1, G_KNOBNAME,  // Assignable Knob 3 Name 3
                 $23, 1, G_KNOBNAME,  // Assignable Knob 3 Name 4
                 $24, 1, G_KNOBNAME,  // Assignable Knob 3 Name 5
                 $25, 1, G_KNOBNAME,  // Assignable Knob 3 Name 6
                 $26, 1, G_KNOBNAME,  // Assignable Knob 3 Name 7
                 $27, 1, G_KNOBNAME,  // Assignable Knob 3 Name 8
                 $28, 1, G_KNOBNAME,  // Assignable Knob 3 Name 9
                 $29, 1, G_KNOBNAME,  // Assignable Knob 3 Name 10
                 $2A, 1, G_KNOBNAME,  // Assignable Knob 3 Name 11
                 $2B, 1, G_KNOBNAME,  // Assignable Knob 3 Name 12
                 $2C, 1, G_KNOBNAME,  // Assignable Knob 3 Name 13
                 $2D, 1, G_KNOBNAME,  // Assignable Knob 3 Name 14
                 $2E, 1, G_KNOBNAME,  // Assignable Knob 3 Name 15
                 $2F, 1, G_KNOBNAME,  // Assignable Knob 3 Name 16
                 $30, 1, G_KNOBNAME,  // Assignable Knob 4 Name 1
                 $31, 1, G_KNOBNAME,  // Assignable Knob 4 Name 2
                 $32, 1, G_KNOBNAME,  // Assignable Knob 4 Name 3
                 $33, 1, G_KNOBNAME,  // Assignable Knob 4 Name 4
                 $34, 1, G_KNOBNAME,  // Assignable Knob 4 Name 5
                 $35, 1, G_KNOBNAME,  // Assignable Knob 4 Name 6
                 $36, 1, G_KNOBNAME,  // Assignable Knob 4 Name 7
                 $37, 1, G_KNOBNAME,  // Assignable Knob 4 Name 8
                 $38, 1, G_KNOBNAME,  // Assignable Knob 4 Name 9
                 $39, 1, G_KNOBNAME,  // Assignable Knob 4 Name 10
                 $3A, 1, G_KNOBNAME,  // Assignable Knob 4 Name 11
                 $3B, 1, G_KNOBNAME,  // Assignable Knob 4 Name 12
                 $3C, 1, G_KNOBNAME,  // Assignable Knob 4 Name 13
                 $3D, 1, G_KNOBNAME,  // Assignable Knob 4 Name 14
                 $3E, 1, G_KNOBNAME,  // Assignable Knob 4 Name 15
                 $3F, 1, G_KNOBNAME,  // Assignable Knob 4 Name 16
                 $40, 1, G_KNOBNAME,  // Assignable Knob 5 Name 1
                 $41, 1, G_KNOBNAME,  // Assignable Knob 5 Name 2
                 $42, 1, G_KNOBNAME,  // Assignable Knob 5 Name 3
                 $43, 1, G_KNOBNAME,  // Assignable Knob 5 Name 4
                 $44, 1, G_KNOBNAME,  // Assignable Knob 5 Name 5
                 $45, 1, G_KNOBNAME,  // Assignable Knob 5 Name 6
                 $46, 1, G_KNOBNAME,  // Assignable Knob 5 Name 7
                 $47, 1, G_KNOBNAME,  // Assignable Knob 5 Name 8
                 $48, 1, G_KNOBNAME,  // Assignable Knob 5 Name 9
                 $49, 1, G_KNOBNAME,  // Assignable Knob 5 Name 10
                 $4A, 1, G_KNOBNAME,  // Assignable Knob 5 Name 11
                 $4B, 1, G_KNOBNAME,  // Assignable Knob 5 Name 12
                 $4C, 1, G_KNOBNAME,  // Assignable Knob 5 Name 13
                 $4D, 1, G_KNOBNAME,  // Assignable Knob 5 Name 14
                 $4E, 1, G_KNOBNAME,  // Assignable Knob 5 Name 15
                 $4F, 1, G_KNOBNAME,  // Assignable Knob 5 Name 16
                 $50, 1, G_KNOBNAME,  // Assignable Knob 6 Name 1
                 $51, 1, G_KNOBNAME,  // Assignable Knob 6 Name 2
                 $52, 1, G_KNOBNAME,  // Assignable Knob 6 Name 3
                 $53, 1, G_KNOBNAME,  // Assignable Knob 6 Name 4
                 $54, 1, G_KNOBNAME,  // Assignable Knob 6 Name 5
                 $55, 1, G_KNOBNAME,  // Assignable Knob 6 Name 6
                 $56, 1, G_KNOBNAME,  // Assignable Knob 6 Name 7
                 $57, 1, G_KNOBNAME,  // Assignable Knob 6 Name 8
                 $58, 1, G_KNOBNAME,  // Assignable Knob 6 Name 9
                 $59, 1, G_KNOBNAME,  // Assignable Knob 6 Name 10
                 $5A, 1, G_KNOBNAME,  // Assignable Knob 6 Name 11
                 $5B, 1, G_KNOBNAME,  // Assignable Knob 6 Name 12
                 $5C, 1, G_KNOBNAME,  // Assignable Knob 6 Name 13
                 $5D, 1, G_KNOBNAME,  // Assignable Knob 6 Name 14
                 $5E, 1, G_KNOBNAME,  // Assignable Knob 6 Name 15
                 $5F, 1, G_KNOBNAME,  // Assignable Knob 6 Name 16
                 $60, 1, G_KNOBNAME,  // Assignable Knob 7 Name 1
                 $61, 1, G_KNOBNAME,  // Assignable Knob 7 Name 2
                 $62, 1, G_KNOBNAME,  // Assignable Knob 7 Name 3
                 $63, 1, G_KNOBNAME,  // Assignable Knob 7 Name 4
                 $64, 1, G_KNOBNAME,  // Assignable Knob 7 Name 5
                 $65, 1, G_KNOBNAME,  // Assignable Knob 7 Name 6
                 $66, 1, G_KNOBNAME,  // Assignable Knob 7 Name 7
                 $67, 1, G_KNOBNAME,  // Assignable Knob 7 Name 8
                 $68, 1, G_KNOBNAME,  // Assignable Knob 7 Name 9
                 $69, 1, G_KNOBNAME,  // Assignable Knob 7 Name 10
                 $6A, 1, G_KNOBNAME,  // Assignable Knob 7 Name 11
                 $6B, 1, G_KNOBNAME,  // Assignable Knob 7 Name 12
                 $6C, 1, G_KNOBNAME,  // Assignable Knob 7 Name 13
                 $6D, 1, G_KNOBNAME,  // Assignable Knob 7 Name 14
                 $6E, 1, G_KNOBNAME,  // Assignable Knob 7 Name 15
                 $6F, 1, G_KNOBNAME,  // Assignable Knob 7 Name 16
                 $70, 1, G_KNOBNAME,  // Assignable Knob 8 Name 1
                 $71, 1, G_KNOBNAME,  // Assignable Knob 8 Name 2
                 $72, 1, G_KNOBNAME,  // Assignable Knob 8 Name 3
                 $73, 1, G_KNOBNAME,  // Assignable Knob 8 Name 4
                 $74, 1, G_KNOBNAME,  // Assignable Knob 8 Name 5
                 $75, 1, G_KNOBNAME,  // Assignable Knob 8 Name 6
                 $76, 1, G_KNOBNAME,  // Assignable Knob 8 Name 7
                 $77, 1, G_KNOBNAME,  // Assignable Knob 8 Name 8
                 $78, 1, G_KNOBNAME,  // Assignable Knob 8 Name 9
                 $79, 1, G_KNOBNAME,  // Assignable Knob 8 Name 10
                 $7A, 1, G_KNOBNAME,  // Assignable Knob 8 Name 11
                 $7B, 1, G_KNOBNAME,  // Assignable Knob 8 Name 12
                 $7C, 1, G_KNOBNAME,  // Assignable Knob 8 Name 13
                 $7D, 1, G_KNOBNAME,  // Assignable Knob 8 Name 14
                 $7E, 1, G_KNOBNAME,  // Assignable Knob 8 Name 15
                 $7F, 1, G_KNOBNAME,  // Assignable Knob 8 Name 16
                 ]
                );
   }

   public virtual send(MontageAssignableKnobName _replayAssignableKnobName, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayAssignableKnobName))
      {
         if(null != _fr)
         {
            if(-1 == part_idx)
               _numDiffsLeft = sendDiff($30, $50, _replayAssignableKnobName, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
            else
               _numDiffsLeft = sendDiff($37, part_idx, _replayAssignableKnobName, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            if(-1 == part_idx)
               sendData($30, $50, $00, _outDev);
            else
               sendData($37, part_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayAssignableKnobName);
         }
      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageController_1_13 : MontageData {
   // p.208
   // p.182 (src+dst)

   int part_idx;  // -1=perf common

   public static New(int _partIdx) {
      local MontageController_1_13 r;
      r.init(_partIdx);
      return deref r;
   }

   public method init(int _partIdx) {
      part_idx = _partIdx;
      allocData(117,
                [$00, 1, G_CTL,  // Controller Set 1 Source
                 $01, 2, G_CTL,  // Controller Set 1 Destination
                 $03, 1, G_CTL,  // Controller Set 1 Curve Bank
                 $04, 1, G_CTL,  // Controller Set 1 Curve Type
                 $05, 1, G_CTL,  // Controller Set 1 Curve Parameter 1
                 $06, 1, G_CTL,  // Controller Set 1 Curve Parameter 2
                 $07, 1, G_CTL,  // Controller Set 1 Curve Polarity
                 $08, 1, G_CTL,  // Controller Set 1 Curve Ratio
                 $09, 1, G_CTL,  // Controller Set 2 Source
                 $0A, 2, G_CTL,  // Controller Set 2 Destination
                 $0C, 1, G_CTL,  // Controller Set 2 Curve Bank
                 $0D, 1, G_CTL,  // Controller Set 2 Curve Type
                 $0E, 1, G_CTL,  // Controller Set 2 Curve Parameter 1
                 $0F, 1, G_CTL,  // Controller Set 2 Curve Parameter 2
                 $10, 1, G_CTL,  // Controller Set 2 Curve Polarity
                 $11, 1, G_CTL,  // Controller Set 2 Curve Ratio
                 $12, 1, G_CTL,  // Controller Set 3 Source
                 $13, 2, G_CTL,  // Controller Set 3 Destination
                 $15, 1, G_CTL,  // Controller Set 3 Curve Bank
                 $16, 1, G_CTL,  // Controller Set 3 Curve Type
                 $17, 1, G_CTL,  // Controller Set 3 Curve Parameter 1
                 $18, 1, G_CTL,  // Controller Set 3 Curve Parameter 2
                 $19, 1, G_CTL,  // Controller Set 3 Curve Polarity
                 $1A, 1, G_CTL,  // Controller Set 3 Curve Ratio
                 $1B, 1, G_CTL,  // Controller Set 4 Source
                 $1C, 2, G_CTL,  // Controller Set 4 Destination
                 $1E, 1, G_CTL,  // Controller Set 4 Curve Bank
                 $1F, 1, G_CTL,  // Controller Set 4 Curve Type
                 $20, 1, G_CTL,  // Controller Set 4 Curve Parameter 1
                 $21, 1, G_CTL,  // Controller Set 4 Curve Parameter 2
                 $22, 1, G_CTL,  // Controller Set 4 Curve Polarity
                 $23, 1, G_CTL,  // Controller Set 4 Curve Ratio
                 $24, 1, G_CTL,  // Controller Set 5 Source
                 $25, 2, G_CTL,  // Controller Set 5 Destination
                 $27, 1, G_CTL,  // Controller Set 5 Curve Bank
                 $28, 1, G_CTL,  // Controller Set 5 Curve Type
                 $29, 1, G_CTL,  // Controller Set 5 Curve Parameter 1
                 $2A, 1, G_CTL,  // Controller Set 5 Curve Parameter 2
                 $2B, 1, G_CTL,  // Controller Set 5 Curve Polarity
                 $2C, 1, G_CTL,  // Controller Set 5 Curve Ratio
                 $2D, 1, G_CTL,  // Controller Set 6 Source
                 $2E, 2, G_CTL,  // Controller Set 6 Destination
                 $30, 1, G_CTL,  // Controller Set 6 Curve Bank
                 $31, 1, G_CTL,  // Controller Set 6 Curve Type
                 $32, 1, G_CTL,  // Controller Set 6 Curve Parameter 1
                 $33, 1, G_CTL,  // Controller Set 6 Curve Parameter 2
                 $34, 1, G_CTL,  // Controller Set 6 Curve Polarity
                 $35, 1, G_CTL,  // Controller Set 6 Curve Ratio
                 $36, 1, G_CTL,  // Controller Set 7 Source
                 $37, 2, G_CTL,  // Controller Set 7 Destination
                 $39, 1, G_CTL,  // Controller Set 7 Curve Bank
                 $3A, 1, G_CTL,  // Controller Set 7 Curve Type
                 $3B, 1, G_CTL,  // Controller Set 7 Curve Parameter 1
                 $3C, 1, G_CTL,  // Controller Set 7 Curve Parameter 2
                 $3D, 1, G_CTL,  // Controller Set 7 Curve Polarity
                 $3E, 1, G_CTL,  // Controller Set 7 Curve Ratio
                 $3F, 1, G_CTL,  // Controller Set 8 Source
                 $40, 2, G_CTL,  // Controller Set 8 Destination
                 $42, 1, G_CTL,  // Controller Set 8 Curve Bank
                 $43, 1, G_CTL,  // Controller Set 8 Curve Type
                 $44, 1, G_CTL,  // Controller Set 8 Curve Parameter 1
                 $45, 1, G_CTL,  // Controller Set 8 Curve Parameter 2
                 $46, 1, G_CTL,  // Controller Set 8 Curve Polarity
                 $47, 1, G_CTL,  // Controller Set 8 Curve Ratio
                 $48, 1, G_CTL,  // Controller Set 9 Source
                 $49, 2, G_CTL,  // Controller Set 9 Destination
                 $4B, 1, G_CTL,  // Controller Set 9 Curve Bank
                 $4C, 1, G_CTL,  // Controller Set 9 Curve Type
                 $4D, 1, G_CTL,  // Controller Set 9 Curve Parameter 1
                 $4E, 1, G_CTL,  // Controller Set 9 Curve Parameter 2
                 $4F, 1, G_CTL,  // Controller Set 9 Curve Polarity
                 $50, 1, G_CTL,  // Controller Set 9 Curve Ratio
                 $51, 1, G_CTL,  // Controller Set 10 Source
                 $52, 2, G_CTL,  // Controller Set 10 Destination
                 $54, 1, G_CTL,  // Controller Set 10 Curve Bank
                 $55, 1, G_CTL,  // Controller Set 10 Curve Type
                 $56, 1, G_CTL,  // Controller Set 10 Curve Parameter 1
                 $57, 1, G_CTL,  // Controller Set 10 Curve Parameter 2
                 $58, 1, G_CTL,  // Controller Set 10 Curve Polarity
                 $59, 1, G_CTL,  // Controller Set 10 Curve Ratio
                 $5A, 1, G_CTL,  // Controller Set 11 Source
                 $5B, 2, G_CTL,  // Controller Set 11 Destination
                 $5D, 1, G_CTL,  // Controller Set 11 Curve Bank
                 $5E, 1, G_CTL,  // Controller Set 11 Curve Type
                 $5F, 1, G_CTL,  // Controller Set 11 Curve Parameter 1
                 $60, 1, G_CTL,  // Controller Set 11 Curve Parameter 2
                 $61, 1, G_CTL,  // Controller Set 11 Curve Polarity
                 $62, 1, G_CTL,  // Controller Set 11 Curve Ratio
                 $63, 1, G_CTL,  // Controller Set 12 Source
                 $64, 2, G_CTL,  // Controller Set 12 Destination
                 $66, 1, G_CTL,  // Controller Set 12 Curve Bank
                 $67, 1, G_CTL,  // Controller Set 12 Curve Type
                 $68, 1, G_CTL,  // Controller Set 12 Curve Parameter 1
                 $69, 1, G_CTL,  // Controller Set 12 Curve Parameter 2
                 $6A, 1, G_CTL,  // Controller Set 12 Curve Polarity
                 $6B, 1, G_CTL,  // Controller Set 12 Curve Ratio
                 $6C, 1, G_CTL,  // Controller Set 13 Source
                 $6D, 2, G_CTL,  // Controller Set 13 Destination
                 $6F, 1, G_CTL,  // Controller Set 13 Curve Bank
                 $70, 1, G_CTL,  // Controller Set 13 Curve Type
                 $71, 1, G_CTL,  // Controller Set 13 Curve Parameter 1
                 $72, 1, G_CTL,  // Controller Set 13 Curve Parameter 2
                 $73, 1, G_CTL,  // Controller Set 13 Curve Polarity
                 $74, 1, G_CTL,  // Controller Set 13 Curve Ratio
                 ]
                );
   }

   public virtual send(MontageController_1_13 _replayController_1_13, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayController_1_13))
      {
         if(null != _fr)
         {
            if(-1 == part_idx)
               _numDiffsLeft = sendDiff($30, $51, _replayController_1_13, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
            else
               _numDiffsLeft = sendDiff($38, 0x00 | part_idx, _replayController_1_13, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            if(-1 == part_idx)
               sendData($30, $51, $00, _outDev);
            else
               sendData($38, 0x00 | part_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayController_1_13);
         }
      }

      return _numDiffsLeft;
   }

   public static SetSource(Buffer data, int idx, byte _v) {
      data.pokeI8(9*idx + 0, _v);
   }

   public static GetSource(Buffer data, int idx) : byte {
      return data.peekI8(9*idx + 0);
   }

   public static SetDestination(Buffer data, int idx, byte _v) {
      data.pokeI8(9*idx + 1, (_v>>7));
      data.pokeI8(9*idx + 2, (_v & 127));
   }

   public static GetDestination(Buffer data, int idx) : short {
      return (data.peekI8(9*idx + 1) << 7) | data.peekI8(9*idx + 2);
   }

   public static SetCurveBank(Buffer data, int idx, byte _v) {
      // 0..9 => 0 = Preset, 1 = User, 2 = Library1, ... 9 = Library8
      data.pokeI8(9*idx + 3, _v);
   }

   public static GetCurveBank(Buffer data, int idx) : byte {
      return data.peekI8(9*idx + 3);
   }

   public static SetCurveType(Buffer data, int idx, byte _v) {
      // 0 - 31 (0 - 17 when Bank is set to Preset)
      data.pokeI8(9*idx + 4, _v);
   }

   public static GetCurveType(Buffer data, int idx) : byte {
      return data.peekI8(9*idx + 4);
   }

   public static SetCurveParameter1(Buffer data, int idx, byte _v) {
      data.pokeI8(9*idx + 5, _v);
   }

   public static GetCurveParameter1(Buffer data, int idx) : byte {
      return data.peekI8(9*idx + 5);
   }

   public static SetCurveParameter2(Buffer data, int idx, byte _v) {
      data.pokeI8(9*idx + 6, _v);
   }

   public static GetCurveParameter2(Buffer data, int idx) : byte {
      return data.peekI8(9*idx + 6);
   }

   public static SetCurvePolarity(Buffer data, int idx, byte _v) {
      // 0=uni, 1=bi
      data.pokeI8(9*idx + 7, _v);
   }

   public static GetCurvePolarity(Buffer data, int idx) : byte {
      return data.peekI8(9*idx + 7);
   }

   public static SetCurveRatio(Buffer data, int idx, byte _v) {
      // def=32 ($60)
      _v += 64;
      data.pokeI8(9*idx + 8, _v);
   }

   public static GetCurveRatio(Buffer data, int idx) : byte {
      return data.peekI8(9*idx + 8) - 64;
   }

}


// <class.png>
class MontageController_14_16 : MontageData {
   int part_idx;  // -1=perf common

   public static New(int _partIdx) {
      local MontageController_14_16 r;
      r.init(_partIdx);
      return deref r;
   }

   public method init(int _partIdx) {
      part_idx = _partIdx;
      allocData(27,  // $1B
                [$00, 1, G_CTL,  // Controller Set 14 Source
                 $01, 2, G_CTL,  // Controller Set 14 Destination
                 $03, 1, G_CTL,  // Controller Set 14 Curve Bank
                 $04, 1, G_CTL,  // Controller Set 14 Curve Type
                 $05, 1, G_CTL,  // Controller Set 14 Curve Parameter 1
                 $06, 1, G_CTL,  // Controller Set 14 Curve Parameter 2
                 $07, 1, G_CTL,  // Controller Set 14 Curve Polarity
                 $08, 1, G_CTL,  // Controller Set 14 Curve Ratio
                 $09, 1, G_CTL,  // Controller Set 15 Source
                 $0A, 2, G_CTL,  // Controller Set 15 Destination
                 $0C, 1, G_CTL,  // Controller Set 15 Curve Bank
                 $0D, 1, G_CTL,  // Controller Set 15 Curve Type
                 $0E, 1, G_CTL,  // Controller Set 15 Curve Parameter 1
                 $0F, 1, G_CTL,  // Controller Set 15 Curve Parameter 2
                 $10, 1, G_CTL,  // Controller Set 15 Curve Polarity
                 $11, 1, G_CTL,  // Controller Set 15 Curve Ratio
                 $12, 1, G_CTL,  // Controller Set 16 Source
                 $13, 2, G_CTL,  // Controller Set 16 Destination
                 $15, 1, G_CTL,  // Controller Set 16 Curve Bank
                 $16, 1, G_CTL,  // Controller Set 16 Curve Type
                 $17, 1, G_CTL,  // Controller Set 16 Curve Parameter 1
                 $18, 1, G_CTL,  // Controller Set 16 Curve Parameter 2
                 $19, 1, G_CTL,  // Controller Set 16 Curve Polarity
                 $1A, 1, G_CTL,  // Controller Set 16 Curve Ratio
                 ]
                );
   }

   public virtual send(MontageController_14_16 _replayController_14_16, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayController_14_16))
      {
         if(null != _fr)
         {
            if(-1 == part_idx)
               _numDiffsLeft = sendDiff($30, $52, _replayController_14_16, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
            else
               _numDiffsLeft = sendDiff($38, 0x10 | part_idx, _replayController_14_16, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            if(-1 == part_idx)
               sendData($30, $52, $00, _outDev);
            else
               sendData($38, 0x10 | part_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayController_14_16);
         }
      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageInsert : MontageData {
   // p.213
   // p.152: delay retro

   /// (note)                    Thru: type= 0   ($000)
   /// (note)                SPX Hall: type= 130 ($082)
   /// (note)                SPX Room: type= 146 ($092)
   /// (note)               SPX Stage: type= 176 ($0B0)
   /// (note)            Gated Reverb: type= 208 ($0D0)
   /// (note)          Reverse Reverb: type= 216 ($0D8)
   /// (note)             Cross Delay: type= 256 ($100)
   /// (note)       Tempo Cross Delay: type= 272 ($110)
   /// (note)        Tempo Delay Mono: type= 288 ($120)
   /// (note)      Tempo Delay Stereo: type= 296 ($128)
   /// (note)           Control Delay: type= 304 ($130)
   /// (note)                Delay LR: type= 320 ($140)
   /// (note)               Delay LCR: type= 336 ($150)
   /// (note)      Analog Delay Retro: type= 352 ($160)
   /// (note)     Analog Delay Modern: type= 360 ($168)
   /// (note)                G Chorus: type= 384 ($180)
   /// (note)             2 Modulator: type= 400 ($190)
   /// (note)              SPX Chorus: type= 416 ($1A0)
   /// (note)               Symphonic: type= 432 ($1B0)
   /// (note)         Ensemble Detune: type= 448 ($1C0)
   /// (note)             VCM Flanger: type= 512 ($200)
   /// (note)         Classic Flanger: type= 528 ($210)
   /// (note)           Tempo Flanger: type= 544 ($220)
   /// (note)         Dynamic Flanger: type= 560 ($230)
   /// (note)         Control Flanger: type= 520 ($208)
   /// (note)         VCM Phaser Mono: type= 640 ($280)
   /// (note)       VCM Phaser Stereo: type= 656 ($290)
   /// (note)            Tempo Phaser: type= 672 ($2A0)
   /// (note)          Dynamic Phaser: type= 688 ($2B0)
   /// (note)          Control Phaser: type= 664 ($298)
   /// (note)                Auto Pan: type= 768 ($300)
   /// (note)                 Tremolo: type= 784 ($310)
   /// (note)        Rotary Speaker 1: type= 800 ($320)
   /// (note)        Rotary Speaker 2: type= 816 ($330)
   /// (note)         Amp Simulator 1: type= 896 ($380)
   /// (note)         Amp Simulator 2: type= 912 ($390)
   /// (note)         Comp Distortion: type= 928 ($3A0)
   /// (note)   Comp Distortion Delay: type= 944 ($3B0)
   /// (note)              U.S. Combo: type= 960 ($3C0)
   /// (note)              Jazz Combo: type= 961 ($3C1)
   /// (note)          U.S. High Gain: type= 962 ($3C2)
   /// (note)            British Lead: type= 963 ($3C3)
   /// (note)                Multi FX: type= 964 ($3C4)
   /// (note)            Small Stereo: type= 965 ($3C5)
   /// (note)           British Combo: type= 966 ($3C6)
   /// (note)          British Legend: type= 967 ($3C7)
   /// (note)      VCM Compressor 376: type=1024 ($400)
   /// (note)      Classic Compressor: type=1040 ($410)
   /// (note)         Multi-band Comp: type=1056 ($420)
   /// (note)           Uni Comp Down: type=1072 ($430)
   /// (note)             Uni Comp Up: type=1080 ($438)
   /// (note)           Parallel Comp: type=1088 ($440)
   /// (note)            VCM Auto Wah: type=1280 ($500)
   /// (note)           VCM Touch Wah: type=1296 ($510)
   /// (note)           VCM Pedal Wah: type=1312 ($520)
   /// (note)                   Lo-Fi: type=1408 ($580)
   /// (note)                   Noisy: type=1424 ($590)
   /// (note)       Digital Turntable: type=1440 ($5A0)
   /// (note)             Bit Crusher: type=1456 ($5B0)
   /// (note)          Ring Modulator: type=1536 ($600)
   /// (note)  Dynamic Ring Modulator: type=1552 ($610)
   /// (note)          Dynamic Filter: type=1568 ($620)
   /// (note)              Auto Synth: type=1584 ($630)
   /// (note)            Spiralizer P: type=1592 ($638)
   /// (note)      Tempo Spiralizer P: type=1593 ($639)
   /// (note)            Spiralizer F: type=1594 ($63A)
   /// (note)      Tempo Spiralizer F: type=1595 ($63B)
   /// (note)                Isolator: type=1600 ($640)
   /// (note)                   Slice: type=1616 ($650)
   /// (note)         Tech Modulation: type=1632 ($660)
   /// (note)          Control Filter: type=1576 ($628)
   /// (note)             Vinyl Break: type=1648 ($670)
   /// (note)      Beat Repeat (even): type=1656 ($678)
   /// (note)    Beat Repeat (triple): type=1657 ($679)
   /// (note) Beat Repeat (even+tri.): type=1658 ($67A)
   /// (note)      Beat Repeat (free): type=1659 ($67B)
   /// (note)              VCM EQ 501: type=1664 ($680)
   /// (note)                Presence: type=1672 ($688)
   /// (note)       Harmonic Enhancer: type=1680 ($690)
   /// (note)  Stereophonic Optimizer: type=1688 ($698)
   /// (note)       Talking Modulator: type=1696 ($6A0)
   /// (note)             Wave Folder: type=1704 ($6A8)
   /// (note)         VCM Mini Filter: type=1705 ($6A9)
   /// (note)        VCM Mini Booster: type=1706 ($6AA)
   /// (note)        Damper Resonance: type=1712 ($6B0)
   /// (note)            Pitch Change: type=1728 ($6C0)
   /// (note)        Early Reflection: type=1744 ($6D0)
   /// (note)                 Vocoder: type=1760 ($6E0)
   /// (note)   NoiseGate + Comp + Eq: type=1776 ($6F0)

   int part_idx;

   define int INSERT_TYPE_AD_A   = 0;  // perf common A/D insert A
   define int INSERT_TYPE_AD_B   = 1;  // perf common A/D insert B
   define int INSERT_TYPE_PART_A = 2;  // part insert A
   define int INSERT_TYPE_PART_B = 3;  // part insert B
   int insert_type;

   public static New(int _partIdx, int _insertType) {
      local MontageInsert r;
      r.init(_partIdx, _insertType);
      return deref r;
   }

   public method init(int _partIdx, int _insertType) {
      part_idx = _partIdx;
      insert_type = _insertType;
      allocData(68,  // $44
                [$00, 2, G_PFX,   // Type
                 $02, 1, G_PFX,   // Preset Number
                 $03, 2, G_PFX,   // Parameter 1
                 $05, 2, G_PFX,   // Parameter 2
                 $07, 2, G_PFX,   // Parameter 3
                 $09, 2, G_PFX,   // Parameter 4
                 $0B, 2, G_PFX,   // Parameter 5
                 $0D, 2, G_PFX,   // Parameter 6
                 $0F, 2, G_PFX,   // Parameter 7
                 $11, 2, G_PFX,   // Parameter 8
                 $13, 2, G_PFX,   // Parameter 9
                 $15, 2, G_PFX,   // Parameter 10
                 $17, 2, G_PFX,   // Parameter 11
                 $19, 2, G_PFX,   // Parameter 12
                 $1B, 2, G_PFX,   // Parameter 13
                 $1D, 2, G_PFX,   // Parameter 14
                 $1F, 2, G_PFX,   // Parameter 15
                 $21, 2, G_PFX,   // Parameter 16
                 $23, 2, G_PFX,   // Parameter 17
                 $25, 2, G_PFX,   // Parameter 18
                 $27, 2, G_PFX,   // Parameter 19
                 $29, 2, G_PFX,   // Parameter 20
                 $2B, 2, G_PFX,   // Parameter 21
                 $2D, 2, G_PFX,   // Parameter 22
                 $2F, 2, G_PFX,   // Parameter 23
                 $31, 2, G_PFX,   // Parameter 24
                 // $33, 2, G_PFX,   // reserved 1
                 // $35, 2, G_PFX,   // reserved 2
                 // $37, 2, G_PFX,   // reserved 3
                 // $39, 2, G_PFX,   // reserved 4
                 // $3B, 2, G_PFX,   // reserved 5
                 // $3D, 2, G_PFX,   // reserved 6
                 // $3F, 2, G_PFX,   // reserved 7
                 // $41, 2, G_PFX,   // reserved 8
                 $43, 1, G_PFX,   // Side Chain Part (0: Part 1, 1: Part 2 - 15: Part 16, 16: A/D, 17: Master, 127: Off)
                 ]
                );
   }

   static IntArray diff_tbl_analog_delay = [
      $00, 2, G_PFX,   // Type
      $02, 1, G_PFX,   // Preset Number
      $03, 2, G_PFX,   // Parameter 1   delay time
      $05, 2, G_PFX,   // Parameter 2   feedback level
      $07, 2, G_PFX,   // Parameter 3   delay input level
      $09, 2, G_PFX,   // Parameter 4   type (Mellow, Dub, Narrow, Soft, Dark)
      $15, 2, G_PFX,   // Parameter 10  wet dry (D63>W .. D=W .. D<W63)
                                             ];

   public virtual send(MontageInsert _replayInsert, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      if(_bSendAll || replayDiffers(_replayInsert))
      {
         byte h;
         byte m;

         switch(insert_type)
         {
            default:
            case INSERT_TYPE_AD_A:
               h = $30; m = $43;
               break;

            case INSERT_TYPE_AD_B:
               h = $30; m = $44;
               break;

            case INSERT_TYPE_PART_A:
               // trace "xxx part "+part_idx+" insert_a sendDiff: type="+getType();//data.peekI8(0)+","+data.peekI8(1);
               h = $31; m = $20 | part_idx;
               // if(0 == part_idx)
               //    data.hexdump(0, $44);
               break;

            case INSERT_TYPE_PART_B:
               h = $31; m = $30 | part_idx;
               break;
         }

         if(null != _fr)
         {
            int type = getType();
            IntArray diffTbl <= diff_tbl;
            switch(type)
            {
               case 352: // analog delay retro
                  diffTbl <= diff_tbl_analog_delay;
                  break;

               case 360: // analog delay modern
                  diffTbl <= diff_tbl_analog_delay;
                  break;
            }

            _numDiffsLeft = sendDiffEx(h, m, _replayInsert, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft, diffTbl);
         }
         else if(0) // xxxxxxxxxxxxxxxxxxxxxxxxxxxxx delay retro feedback bug workaround [26Oct2022] => MUST send as Diff
         {
            // (note) not sending bulk dump causes parts to lose insert fx when changing variation on another part
            //         ==> revert to Main variation part when part does not exist in selected variation (see getReplayPerformances())
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData(h, m, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayInsert);
         }
      }

      return _numDiffsLeft;
   }

   public method setType(short _v) {
      data.pokeI8($00, (_v >> 7));
      data.pokeI8($01, (_v&127));
   }

   public method getType() : short {
      return (data.peekI8($00)<<7) | (data.peekI8($01)&127);
   }

   public =replay= method setParamByIdx(byte _idx, short _v) {
      if(0 <= _idx < 24)
      {
         byte addr = $03 + 2*_idx;
         data.pokeI8(addr+0, (_v >> 7));
         data.pokeI8(addr+1, (_v&127));
         // trace "xxx MontageInsert::setParamByIdx: idx="+_idx+" addr="+addr+" v="+_v;
      }
   }

   public =replay= method invalidateReplayParams() {
      byte addr = $03;
      loop(24)
      {
         replay_data_valid.pokeI8(addr, false);
         addr += 2;
      }
   }

   public method getParamByIdx(byte _idx) : short {
      if(0 <= _idx < 24)
      {
         byte addr = $03 + 2*_idx;
         return (data.peekI8(addr)<<7) | (data.peekI8(addr+1)&127);
      }
      return 0;
   }

   public method setSideChainPart(byte _v) {
      data.pokeI8($43, _v);
   }

   public method invalidateSideChainPart() {
      replay_data_valid.pokeI8($43, false);
      b_replay_valid = false;
   }

   public method getSideChainPart() : byte {
      return data.peekI8($43);
   }

}


// <class.png>
class MontageMotionSeqCommon : MontageData {

   public static New() {
      local MontageMotionSeqCommon r;
      r.init();
      return deref r;
   }

   public method init() {
      allocData(6,
                [$00, 1, G_MSEQ,  // Motion Seq Master Switch
                 $01, 1, G_MSEQ,  // Motion Seq Select
                 $02, 1, G_MSEQ,  // Motion Seq Amplitude Performance Offset
                 $03, 1, G_MSEQ,  // Motion Seq Pulse Shape Performance Offset
                 $04, 1, G_MSEQ,  // Motion Seq Smoothness Performance Offset
                 $05, 1, G_MSEQ,  // Motion Seq Random Performance Offset
                 ]
                );
   }

   public virtual send(MontageMotionSeqCommon _replayMotionSeqCommon, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayMotionSeqCommon))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($30, $48, _replayMotionSeqCommon, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($30, $48, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayMotionSeqCommon);
         }
      }
      return _numDiffsLeft;
   }

}


// <class.png>
class MontageMotionSeqLaneSettings : MontageData {
   // p.212

   int part_idx;  // -1=perf common

   public static New(int _partIdx) {
      local MontageMotionSeqLaneSettings r;
      r.init(_partIdx);
      return deref r;
   }

   public method init(int _partIdx) {
      part_idx = _partIdx;
      allocData(64,
                [$00, 1, G_MSEQ,   // Lane 1 Switch
                 $01, 1, G_MSEQ,   // Lane 1 FX Receive
                 $02, 1, G_MSEQ,   // Lane 1 Trigger Receive
                 $03, 1, G_MSEQ,   // Lane 1 Sync
                 $04, 1, G_MSEQ,   // Lane 1 Speed
                 $05, 1, G_MSEQ,   // Lane 1 Unit
                 $06, 1, G_MSEQ,   // Lane 1 Key On Reset
                 $07, 1, G_MSEQ,   // Lane 1 Loop
                 $08, 1, G_MSEQ,   // Lane 1 Velocity Limit Low
                 $09, 1, G_MSEQ,   // Lane 1 Velocity Limit High
                 $10, 1, G_MSEQ,   // Lane 2 Switch
                 $11, 1, G_MSEQ,   // Lane 2 FX Receive
                 $12, 1, G_MSEQ,   // Lane 2 Trigger Receive
                 $13, 1, G_MSEQ,   // Lane 2 Sync
                 $14, 1, G_MSEQ,   // Lane 2 Speed
                 $15, 1, G_MSEQ,   // Lane 2 Unit
                 $16, 1, G_MSEQ,   // Lane 2 Key On Reset
                 $17, 1, G_MSEQ,   // Lane 2 Loop
                 $18, 1, G_MSEQ,   // Lane 2 Velocity Limit Low
                 $19, 1, G_MSEQ,   // Lane 2 Velocity Limit High
                 $20, 1, G_MSEQ,   // Lane 3 Switch
                 $21, 1, G_MSEQ,   // Lane 3 FX Receive
                 $22, 1, G_MSEQ,   // Lane 3 Trigger Receive
                 $23, 1, G_MSEQ,   // Lane 3 Sync
                 $24, 1, G_MSEQ,   // Lane 3 Speed
                 $25, 1, G_MSEQ,   // Lane 3 Unit
                 $26, 1, G_MSEQ,   // Lane 3 Key On Reset
                 $27, 1, G_MSEQ,   // Lane 3 Loop
                 $28, 1, G_MSEQ,   // Lane 3 Velocity Limit Low
                 $29, 1, G_MSEQ,   // Lane 3 Velocity Limit High
                 $30, 1, G_MSEQ,   // Lane 4 Switch
                 $31, 1, G_MSEQ,   // Lane 4 FX Receive
                 $32, 1, G_MSEQ,   // Lane 4 Trigger Receive
                 $33, 1, G_MSEQ,   // Lane 4 Sync
                 $34, 1, G_MSEQ,   // Lane 4 Speed
                 $35, 1, G_MSEQ,   // Lane 4 Unit
                 $36, 1, G_MSEQ,   // Lane 4 Key On Reset
                 $37, 1, G_MSEQ,   // Lane 4 Loop
                 $38, 1, G_MSEQ,   // Lane 4 Velocity Limit Low
                 $39, 1, G_MSEQ,   // Lane 4 Velocity Limit High
                 ]
                );
   }

   public virtual send(MontageMotionSeqLaneSettings _replayMotionSeqLaneSettings, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayMotionSeqLaneSettings))
      {
         if(null != _fr)
         {
            if(-1 == part_idx)
               _numDiffsLeft = sendDiff($30, $49, _replayMotionSeqLaneSettings, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
            else
               _numDiffsLeft = sendDiff($31, $10 | part_idx, _replayMotionSeqLaneSettings, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            if(-1 == part_idx)
               sendData($30, $49, $00, _outDev);  // AD Part Lane Settings
            else
               sendData($31, $10 | part_idx, $00, _outDev);  // Part Lane Settings

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayMotionSeqLaneSettings);
         }
      }
      return _numDiffsLeft;
   }

}


// <class.png>
class MontageMotionSeqLaneSequence : MontageData {
   // p.215

   int part_idx;  // -1=perf common
   int lane_idx;  // 0..3, -1=superknob
   int seq_idx;   // 0..7

   public static New(int _partIdx, int _laneIdx, int _seqIdx) {
      local MontageMotionSeqLaneSequence r;
      r.init(_partIdx, _laneIdx, _seqIdx);
      return deref r;
   }

   public method init(int _partIdx, int _laneIdx, int _seqIdx) {
      part_idx = _partIdx;
      lane_idx = _laneIdx;
      seq_idx  = _seqIdx;
      allocData(50,
                [$00, 1, G_MSEQ,   // Amplitude                        (0..127)
                 $01, 1, G_MSEQ,   // Smoothness                       (0..127)
                 $02, 1, G_MSEQ,   // Cycle                            (1..16)
                 $03, 1, G_MSEQ,   // Polarity                         (0=Unipolar, 1=Bipolar)
                 $04, 1, G_MSEQ,   // Step 1 Value                     (0..127)
                 $05, 1, G_MSEQ,   // Step 2 Value
                 $06, 1, G_MSEQ,   // Step 3 Value
                 $07, 1, G_MSEQ,   // Step 4 Value
                 $08, 1, G_MSEQ,   // Step 5 Value
                 $09, 1, G_MSEQ,   // Step 6 Value
                 $0A, 1, G_MSEQ,   // Step 7 Value
                 $0B, 1, G_MSEQ,   // Step 8 Value
                 $0C, 1, G_MSEQ,   // Step 9 Value
                 $0D, 1, G_MSEQ,   // Step 10 Value
                 $0E, 1, G_MSEQ,   // Step 11 Value
                 $0F, 1, G_MSEQ,   // Step 12 Value
                 $10, 1, G_MSEQ,   // Step 13 Value
                 $11, 1, G_MSEQ,   // Step 14 Value
                 $12, 1, G_MSEQ,   // Step 15 Value
                 $13, 1, G_MSEQ,   // Step 16 Value
                 $14, 1, G_MSEQ,   // Step 1 Type                      (0=A, 1=B)
                 $15, 1, G_MSEQ,   // Step 2 Type
                 $16, 1, G_MSEQ,   // Step 3 Type
                 $17, 1, G_MSEQ,   // Step 4 Type
                 $18, 1, G_MSEQ,   // Step 5 Type
                 $19, 1, G_MSEQ,   // Step 6 Type
                 $1A, 1, G_MSEQ,   // Step 7 Type
                 $1B, 1, G_MSEQ,   // Step 8 Type
                 $1C, 1, G_MSEQ,   // Step 9 Type
                 $1D, 1, G_MSEQ,   // Step 10 Type
                 $1E, 1, G_MSEQ,   // Step 11 Type
                 $1F, 1, G_MSEQ,   // Step 12 Type
                 $20, 1, G_MSEQ,   // Step 13 Type
                 $21, 1, G_MSEQ,   // Step 14 Type
                 $22, 1, G_MSEQ,   // Step 15 Type
                 $23, 1, G_MSEQ,   // Step 16 Type
                 $24, 1, G_MSEQ,   // Step Curve A Bank                (0 = Preset, 1 = User, 2 = Library 1...9 = Library 8)
                 $25, 1, G_MSEQ,   // Step Curve A Type                (0..31; 0..17 when Bank is set to Preset)
                 $26, 1, G_MSEQ,   // Step Curve A Parameter 1         (0..127)
                 $27, 1, G_MSEQ,   // Step Curve A Parameter 2         (0..127)
                 $28, 1, G_MSEQ,   // Step Curve A Shape Control SW1
                 $29, 1, G_MSEQ,   // Step Curve A Shape Control SW2
                 $2A, 1, G_MSEQ,   // Step Curve A Direction           (0=Forward, 1=Reverse)
                 $2B, 1, G_MSEQ,   // Step Curve B Bank
                 $2C, 1, G_MSEQ,   // Step Curve B Type
                 $2D, 1, G_MSEQ,   // Step Curve B Parameter 1
                 $2E, 1, G_MSEQ,   // Step Curve B Parameter 2
                 $2F, 1, G_MSEQ,   // Step Curve B Shape Control SW1
                 $30, 1, G_MSEQ,   // Step Curve B Shape Control SW2
                 $31, 1, G_MSEQ,   // Step Curve B Direction
                 ]
                );
   }

   public virtual send(MontageMotionSeqLaneSequence _replayMotionSeqLaneSequence, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayMotionSeqLaneSequence))
      {
         if(null != _fr)
         {
            if(-1 == part_idx)
            {
               if(-1 == lane_idx)
                  _numDiffsLeft = sendDiff($30, $60 | seq_idx, _replayMotionSeqLaneSequence, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);  // superknob sequence
               else
                  _numDiffsLeft = sendDiff($30, (lane_idx<<4) | seq_idx, _replayMotionSeqLaneSequence, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);  // AD part lane sequence
            }
            else
               _numDiffsLeft = sendDiff($32 + lane_idx, (seq_idx << 4) | part_idx, _replayMotionSeqLaneSequence, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            if(-1 == part_idx)
            {
               if(-1 == lane_idx)
                  sendData($30, $60 | seq_idx, $00, _outDev);  // superknob sequence
               else
                  sendData($30, (lane_idx<<4) | seq_idx, $00, _outDev);  // AD part lane sequence
            }
            else
               sendData($32 + lane_idx, (seq_idx << 4) | part_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayMotionSeqLaneSequence);
         }
      }
      return _numDiffsLeft;
   }

}


// <class.png>
class MontagePerformanceCommon : MontageData {

   MontageUnknown_00_7F_00      unknown_00_7F_00;
   MontageReverb                reverb;
   MontageVariation             variation;
   MontageInsert                ad_insert_a;
   MontageInsert                ad_insert_b;
   MontageMasterEQ              master_eq;
   MontageMasterEffect          master_effect;
   MontageArpeggioCommon        arpeggio_common;
   MontageMotionSeqCommon           motionseq_common;
   MontageMotionSeqLaneSettings     motionseq_ad_lane_settings;
   MontageMotionSeqLaneSequence *[] motionseq_ad_lane_sequences;  // (lane_idx*8) + seq_idx  (4 lanes * 8 sequences = 32 sequences)
   MontageSuperKnobLaneSettings     superknob_lane_settings;
   MontageMotionSeqLaneSequence *[] superknob_sequences;  // seq_idx
   MontageUnknown_30_70_00      unknown_30_70_00;
   MontageUnknown_30_71_00      unknown_30_71_00;
   MontageSuperKnobSettings     superknob_settings;
   MontageSceneCommon           scene_common;
   MontageAudition              audition;
   MontageAudioInPartAD         audio_in_part_ad;
   MontageAudioInPartUSB        audio_in_part_usb;
   MontageAssignableKnobName    assignable_knob_name;
   MontageController_1_13       controller_1_13;
   MontageController_14_16      controller_14_16;


   public method init() {
      allocData(94,
                [$00, 1,  G_NAME,       // Performance Name
                 $01, 1,  G_NAME,       //
                 $02, 1,  G_NAME,       //
                 $03, 1,  G_NAME,       //
                 $04, 1,  G_NAME,       //
                 $05, 1,  G_NAME,       //
                 $06, 1,  G_NAME,       //
                 $07, 1,  G_NAME,       //
                 $08, 1,  G_NAME,       //
                 $09, 1,  G_NAME,       //
                 $0A, 1,  G_NAME,       //
                 $0B, 1,  G_NAME,       //
                 $0C, 1,  G_NAME,       //
                 $0D, 1,  G_NAME,       //
                 $0E, 1,  G_NAME,       //
                 $0F, 1,  G_NAME,       //
                 $10, 1,  G_NAME,       //
                 $11, 1,  G_NAME,       //
                 $12, 1,  G_NAME,       //
                 $13, 1,  G_NAME,       //
                 // $18 ?  diff at off=24 (0x18) a=0x01 b=0x00
                 $1E, 1,  G_CTL,        // Knob Function Select
                 $1F, 1,  G_QUICK,      // Performance Pan
                 $20, 1,  G_CTL,        // Control Function Select
                 $21, 1,  G_QUICK,      // AEG Attack Time
                 $22, 1,  G_QUICK,      // AEG Decay Time
                 $23, 1,  G_QUICK,      // AEG Sustain Level
                 $24, 1,  G_QUICK,      // AEG Release Time
                 $25, 1,  G_QUICK,      // FEG Attack Time
                 $26, 1,  G_QUICK,      // FEG Decay Time
                 $28, 1,  G_QUICK,      // FEG Release Time
                 $29, 1,  G_QUICK,      // FEG Depth
                 $2A, 1,  G_QUICK,      // Cutoff Frequency
                 $2B, 1,  G_QUICK,      // Resonance
                 $2C, 2,  G_TEMPO,      // Tempo
                 $38, 1,  G_QUICK,      // Performance Volume
                 $39, 1,  G_PORTAMENTO, // Portamento Time
                 $3A, 1,  G_PORTAMENTO, // Portamento Switch
                 $3B, 1,  G_AUDIO,      // USB Main Monitor Volume
                 $3C, 1,  G_AUDIO,      // USB Assign Monitor Volume
                 $3D, 1,  G_CTL,        // Assignable Switch 1 Mode
                 $3E, 1,  G_CTL,        // Assignable Switch 2 Mode
                 $3F, 1,  G_CTL,        // Motion Seq Hold Switch Mode
                 $41, 1,  G_CTL,        // Ribbon Controller Mode
                 $43, 1,  G_CTL,        // Ribbon Controller Control Number
                 $44, 1,  G_CTL,        // Breath Controller Control Number
                 $45, 1,  G_CTL,        // Foot Controller 1 Control Number
                 $46, 1,  G_CTL,        // Foot Controller 2 Control Number
                 $47, 1,  G_CTL,        // Assignable Switch 1 Control Number
                 $48, 1,  G_CTL,        // Assignable Switch 2 Control Number
                 $49, 1,  G_CTL,        // Motion Seq Hold Control Number
                 $4A, 1,  G_CTL,        // Motion Seq Trigger Control Number
                 $4B, 1,  G_CTL,        // Assignable Knob 1 Control Number
                 $4C, 1,  G_CTL,        // Assignable Knob 2 Control Number
                 $4D, 1,  G_CTL,        // Assignable Knob 3 Control Number
                 $4E, 1,  G_CTL,        // Assignable Knob 4 Control Number
                 $4F, 1,  G_CTL,        // Assignable Knob 5 Control Number
                 $50, 1,  G_CTL,        // Assignable Knob 6 Control Number
                 $51, 1,  G_CTL,        // Assignable Knob 7 Control Number
                 $52, 1,  G_CTL,        // Assignable Knob 8 Control Number
                 $53, 1,  G_CTL,        // Assignable Knob 1 Value
                 $54, 1,  G_CTL,        // Assignable Knob 2 Value
                 $55, 1,  G_CTL,        // Assignable Knob 3 Value
                 $56, 1,  G_CTL,        // Assignable Knob 4 Value
                 $57, 1,  G_CTL,        // Assignable Knob 5 Value
                 $58, 1,  G_CTL,        // Assignable Knob 6 Value
                 $59, 1,  G_CTL,        // Assignable Knob 7 Value
                 $5A, 1,  G_CTL,        // Assignable Knob 8 Value
                 $5B, 2,  G_TEMPO,      // Swing Offset
                 $5D, 1,  G_TEMPO,      // Unit Multiply
                 ]
                );

      unknown_00_7F_00          .init();
      reverb                    .init();
      variation                 .init();
      ad_insert_a               .init(0/*partIdx*/, MontageInsert.INSERT_TYPE_AD_A);
      ad_insert_b               .init(0/*partIdx*/, MontageInsert.INSERT_TYPE_AD_B);
      master_eq                 .init();
      master_effect             .init();
      arpeggio_common           .init();
      motionseq_common          .init();
      motionseq_ad_lane_settings.init(-1/*partIdx*/);
      int laneIdx = 0;
      int seqIdx;
      loop(4)
      {
         seqIdx = 0;
         loop(8)
            motionseq_ad_lane_sequences.add(#(MontageMotionSeqLaneSequence.New(-1/*part_idx*/, laneIdx, seqIdx++)));
         laneIdx++;
      }
      superknob_lane_settings.init();
      seqIdx = 0;
      loop(8)
         superknob_sequences.add(#(MontageMotionSeqLaneSequence.New(-1/*partIdx*/, -1/*laneIdx*/, seqIdx++)));
      unknown_30_70_00       .init();
      unknown_30_71_00       .init();
      superknob_settings     .init();
      scene_common           .init();
      audition               .init();
      audio_in_part_ad       .init();
      audio_in_part_usb      .init();
      assignable_knob_name   .init(-1/*partIdx*/);
      controller_1_13        .init(-1/*partIdx*/);
      controller_14_16       .init(-1/*partIdx*/);
   }

   // <method.png>
   public method invalidateReplay() {
      MontageData::invalidateReplay();
      unknown_00_7F_00          .invalidateReplay();
      reverb                    .invalidateReplay();
      variation                 .invalidateReplay();
      ad_insert_a               .invalidateReplay();
      ad_insert_b               .invalidateReplay();
      master_eq                 .invalidateReplay();
      master_effect             .invalidateReplay();
      arpeggio_common           .invalidateReplay();
      motionseq_common          .invalidateReplay();
      motionseq_ad_lane_settings.invalidateReplay();
      MontageMotionSeqLaneSequence *seq;
      foreach seq in motionseq_ad_lane_sequences
         seq.invalidateReplay();
      superknob_lane_settings.invalidateReplay();
      foreach seq in superknob_sequences
         seq.invalidateReplay();
      unknown_30_70_00       .invalidateReplay();
      unknown_30_71_00       .invalidateReplay();
      superknob_settings     .invalidateReplay();
      scene_common           .invalidateReplay();
      audition               .invalidateReplay();
      audio_in_part_ad       .invalidateReplay();
      audio_in_part_usb      .invalidateReplay();
      assignable_knob_name   .invalidateReplay();
      controller_1_13        .invalidateReplay();
      controller_14_16       .invalidateReplay();
   }

   public virtual send(MontagePerformanceCommon _replayPerformanceCommon, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      if(_bHeader && (null == _fr))
         sendBulkHeader(_outDev);

      if(_bSendAll || replayDiffers(_replayPerformanceCommon))
      {
         if(null != _fr)
         {
            // trace "xxx MontagePerformanceCommon: replay diff PRE:";
            // data.hexdump(0, data.offset);
            // Utils.BufferDiff(data, _replayPerformanceCommon.data, true/*bVerbose*/);
            _numDiffsLeft = sendDiff($30, $40, _replayPerformanceCommon, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
            // trace "xxx MontagePerformanceCommon: replay diff POST:";
            // Utils.BufferDiff(data, _replayPerformanceCommon.data, true/*bVerbose*/);
         }
         else
         {
            sendData($30, $40, $00, _outDev);
            copyToReplay(_replayPerformanceCommon);
         }
      }

      _numDiffsLeft = unknown_00_7F_00    .send(_replayPerformanceCommon.unknown_00_7F_00  ,   false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);

      if(_flags & MontageDefs.G_MFX)
      {
         _numDiffsLeft = reverb              .send(_replayPerformanceCommon.reverb,               false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         _numDiffsLeft = variation           .send(_replayPerformanceCommon.variation,            false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         _numDiffsLeft = ad_insert_a         .send(_replayPerformanceCommon.ad_insert_a,          false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         _numDiffsLeft = ad_insert_b         .send(_replayPerformanceCommon.ad_insert_b,          false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
      }

      if(_flags & MontageDefs.G_MEQ)
      {
         _numDiffsLeft = master_eq           .send(_replayPerformanceCommon.master_eq,            false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
      }

      if(_flags & MontageDefs.G_MFX)
      {
         _numDiffsLeft = master_effect       .send(_replayPerformanceCommon.master_effect,        false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
      }

      if(_flags & MontageDefs.G_ARP)
      {
         _numDiffsLeft = arpeggio_common     .send(_replayPerformanceCommon.arpeggio_common,      false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
      }

      if(_flags & MontageDefs.G_MSEQ)
      {
         _numDiffsLeft = motionseq_common          .send(_replayPerformanceCommon.motionseq_common,           false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         _numDiffsLeft = motionseq_ad_lane_settings.send(_replayPerformanceCommon.motionseq_ad_lane_settings, false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         int laneIdx = 0;
         int seqIdx;
         MontageMotionSeqLaneSequence *mseq;
         loop(4)
         {
            seqIdx = 0;
            loop(8)
            {
               mseq  <= motionseq_ad_lane_sequences.get(laneIdx*8 + seqIdx);
               _numDiffsLeft = mseq.send(_replayPerformanceCommon.motionseq_ad_lane_sequences.get(laneIdx*8 + seqIdx), false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
               seqIdx++;
            }
            laneIdx++;
         }
         _numDiffsLeft = superknob_lane_settings.send(_replayPerformanceCommon.superknob_lane_settings, false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         seqIdx = 0;
         loop(8)
         {
            mseq  <= superknob_sequences.get(seqIdx);
            _numDiffsLeft = mseq.send(_replayPerformanceCommon.superknob_sequences.get(seqIdx), false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
            seqIdx++;
         }
      }

      _numDiffsLeft = unknown_30_70_00    .send(_replayPerformanceCommon.unknown_30_70_00  ,   false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
      _numDiffsLeft = unknown_30_71_00    .send(_replayPerformanceCommon.unknown_30_71_00  ,   false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);

      if(_flags & MontageDefs.G_SUPERKNOB)
      {
         _numDiffsLeft = superknob_settings  .send(_replayPerformanceCommon.superknob_settings,   false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
      }

      if(_flags & MontageDefs.G_SCENE)
      {
         _numDiffsLeft = scene_common        .send(_replayPerformanceCommon.scene_common,         false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
      }

      if(_flags & MontageDefs.G_AUDITION)
      {
         _numDiffsLeft = audition            .send(_replayPerformanceCommon.audition,             false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
      }

      if(_flags & MontageDefs.G_AUDIO)
      {
         _numDiffsLeft = audio_in_part_ad    .send(_replayPerformanceCommon.audio_in_part_ad,     false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         _numDiffsLeft = audio_in_part_usb   .send(_replayPerformanceCommon.audio_in_part_usb,    false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
      }

      if(_flags & MontageDefs.G_KNOBNAME)
      {
         _numDiffsLeft = assignable_knob_name.send(_replayPerformanceCommon.assignable_knob_name, false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
      }

      if(_flags & MontageDefs.G_CTL)
      {
         _numDiffsLeft = controller_1_13     .send(_replayPerformanceCommon.controller_1_13,      false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         _numDiffsLeft = controller_14_16    .send(_replayPerformanceCommon.controller_14_16,     false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
      }

      if(_bHeader && (null == _fr))
         sendBulkFooter(_outDev);

      return _numDiffsLeft;
   }

   public virtual copyFrom(MontagePerformanceCommon _o) {
      data = _o.data;
      unknown_00_7F_00    .copyFrom(_o.unknown_00_7F_00);
      reverb              .copyFrom(_o.reverb);
      variation           .copyFrom(_o.variation);
      ad_insert_a         .copyFrom(_o.ad_insert_a);
      ad_insert_b         .copyFrom(_o.ad_insert_b);
      master_eq           .copyFrom(_o.master_eq);
      master_effect       .copyFrom(_o.master_effect);
      arpeggio_common     .copyFrom(_o.arpeggio_common);
      motionseq_common          .copyFrom(_o.motionseq_common);
      motionseq_ad_lane_settings.copyFrom(_o.motionseq_ad_lane_settings);
      int laneIdx = 0;
      int seqIdx;
      MontageMotionSeqLaneSequence *mseq;
      MontageMotionSeqLaneSequence *omseq;
      loop(4)
      {
         seqIdx = 0;
         loop(8)
         {
            mseq  <= motionseq_ad_lane_sequences.get(laneIdx*8 + seqIdx);
            omseq <= _o.motionseq_ad_lane_sequences.get(laneIdx*8 + seqIdx);
            mseq.copyFrom(omseq);
            seqIdx++;
         }
         laneIdx++;
      }
      seqIdx = 0;
      loop(8)
      {
         mseq  <= superknob_sequences.get(seqIdx);
         omseq <= _o.superknob_sequences.get(seqIdx);
         mseq.copyFrom(omseq);
         seqIdx++;
      }
      superknob_lane_settings.copyFrom(_o.superknob_lane_settings);
      unknown_30_70_00       .copyFrom(_o.unknown_30_70_00       );
      unknown_30_71_00       .copyFrom(_o.unknown_30_71_00       );
      superknob_settings     .copyFrom(_o.superknob_settings     );
      scene_common           .copyFrom(_o.scene_common           );
      audition               .copyFrom(_o.audition               );
      audio_in_part_ad       .copyFrom(_o.audio_in_part_ad       );
      audio_in_part_usb      .copyFrom(_o.audio_in_part_usb      );
      assignable_knob_name   .copyFrom(_o.assignable_knob_name   );
      controller_1_13        .copyFrom(_o.controller_1_13        );
      controller_14_16       .copyFrom(_o.controller_14_16       );
   }

   // <method.png>
   public method copyMFX(MontagePerformanceCommon _o) {
      copyDataEx(_o.data, G_MFX | G_AUDIO/*levels*/);

      reverb              .copyFrom(_o.reverb);
      variation           .copyFrom(_o.variation);
      ad_insert_a         .copyFrom(_o.ad_insert_a);
      ad_insert_b         .copyFrom(_o.ad_insert_b);
      master_eq           .copyFrom(_o.master_eq);
      master_effect       .copyFrom(_o.master_effect);

      // // audio_in_part_ad       .copyFrom(_o.audio_in_part_ad       );
      // // audio_in_part_usb      .copyFrom(_o.audio_in_part_usb      );
   }

   public method resetQuickEdit() {
      Global.Debug("MontagePerformanceCommon:resetQuickEdit()");
      data.pokeI8($21, 64);  // AEG Attack Time
      data.pokeI8($22, 64);  // AEG Decay Time
      data.pokeI8($23, 64);  // AEG Sustain Level
      data.pokeI8($24, 64);  // AEG Release Time
      data.pokeI8($25, 64);  // FEG Attack Time
      data.pokeI8($26, 64);  // FEG Decay Time
      data.pokeI8($28, 64);  // FEG Release Time
      data.pokeI8($29, 64);  // FEG Depth
      data.pokeI8($2A, 64);  // Filter Cutoff Frequency
      data.pokeI8($2B, 64);  // Filter Resonance/Width
      data.pokeI8($53, 64);  // Assignable Knob 1 Value
      data.pokeI8($54, 64);  // Assignable Knob 2 Value
      data.pokeI8($55, 64);  // Assignable Knob 3 Value
      data.pokeI8($56, 64);  // Assignable Knob 4 Value
      data.pokeI8($57, 64);  // Assignable Knob 5 Value
      data.pokeI8($58, 64);  // Assignable Knob 6 Value
      data.pokeI8($59, 64);  // Assignable Knob 7 Value
      data.pokeI8($5A, 64);  // Assignable Knob 8 Value
   }

   public method setName(String _s) {
      // trace "\n\n\n\n\n\n\nxxx MontagePerformance::setName: s=\""+_s+"\"";
      int numChars = mathMini(20, _s.numChars);
      int idx = 0;
      loop(numChars)
      {
         data.pokeI8(idx, _s.getc(idx));
         idx++;
      }
      loop(20 - numChars)
         data.pokeI8(idx++, ' ');
   }

   public method getName() : String {
      local String r;
      r.alloc(20+1);
      int idx = 0;
      // trace "xxx getName. data=";
      // data.hexdump(0, data.offset);
      loop(20)
      {
         r[idx] = data.peekI8(idx);
         idx++;
      }
      r.putc(idx, 0);
      r.fixLength();
      return deref r;
   }

   public method initFromSyxUnknown_00_7F_00(Buffer _bufRecv) {
      unknown_00_7F_00.initFromSyx(_bufRecv);
   }

   public method initFromSyxReverb(Buffer _bufRecv) {
      reverb.initFromSyx(_bufRecv);
   }

   public method initFromSyxVariation(Buffer _bufRecv) {
      variation.initFromSyx(_bufRecv);
   }

   public method initFromSyxADInsertA(Buffer _bufRecv) {
      ad_insert_a.initFromSyx(_bufRecv);
   }

   public method initFromSyxADInsertB(Buffer _bufRecv) {
      ad_insert_b.initFromSyx(_bufRecv);
   }

   public method initFromSyxMasterEQ(Buffer _bufRecv) {
      master_eq.initFromSyx(_bufRecv);
   }

   public method initFromSyxMasterEffect(Buffer _bufRecv) {
      master_effect.initFromSyx(_bufRecv);
   }

   public method initFromSyxArpeggioCommon(Buffer _bufRecv) {
      arpeggio_common.initFromSyx(_bufRecv);
   }

   public method initFromSyxMotionSeqCommon(Buffer _bufRecv) {
      motionseq_common.initFromSyx(_bufRecv);
   }

   public method initFromSyxMotionSeqADLaneSettings(Buffer _bufRecv) {
      motionseq_ad_lane_settings.initFromSyx(_bufRecv);
   }

   public method initFromSyxMotionSeqADLaneSequence(Buffer _bufRecv, int _laneIdx, int _seqIdx) {
      MontageMotionSeqLaneSequence mseq <= motionseq_ad_lane_sequences.get(_laneIdx*8 + _seqIdx);
      mseq.initFromSyx(_bufRecv);
   }

   public method initFromSyxSuperknobLaneSettings(Buffer _bufRecv) {
      superknob_lane_settings.initFromSyx(_bufRecv);
   }

   public method initFromSyxSuperknobSequence(Buffer _bufRecv, int _seqIdx) {
      MontageMotionSeqLaneSequence mseq <= superknob_sequences.get(_seqIdx);
      mseq.initFromSyx(_bufRecv);
   }

   public method initFromSyxUnknown_30_70_00(Buffer _bufRecv) {
      unknown_30_70_00.initFromSyx(_bufRecv);
   }

   public method initFromSyxUnknown_30_71_00(Buffer _bufRecv) {
      unknown_30_71_00.initFromSyx(_bufRecv);
   }

   public method initFromSyxSuperknobSettings(Buffer _bufRecv) {
      superknob_settings.initFromSyx(_bufRecv);
   }

   public method initFromSyxSceneCommon(Buffer _bufRecv) {
      scene_common.initFromSyx(_bufRecv);
   }

   public method initFromSyxAudition(Buffer _bufRecv) {
      audition.initFromSyx(_bufRecv);
   }

   public method initFromSyxAudioInPartAD(Buffer _bufRecv) {
      audio_in_part_ad.initFromSyx(_bufRecv);
   }

   public method initFromSyxAudioInPartUSB(Buffer _bufRecv) {
      audio_in_part_usb.initFromSyx(_bufRecv);
   }

   public method initFromSyxAssignableKnobName(Buffer _bufRecv) {
      assignable_knob_name.initFromSyx(_bufRecv);
   }

   public method initFromSyxController_1_13(Buffer _bufRecv) {
      controller_1_13.initFromSyx(_bufRecv);
   }

   public method initFromSyxController_14_16(Buffer _bufRecv) {
      controller_14_16.initFromSyx(_bufRecv);
   }

   // <save.png>
   public virtual saveState(Stream ofs) {
      ofs.i16 = 1; // ver
      ofs.writeBuffer(data, 0, data.offset);

      unknown_00_7F_00    .saveState(ofs);
      reverb              .saveState(ofs);
      variation           .saveState(ofs);
      ad_insert_a         .saveState(ofs);
      ad_insert_b         .saveState(ofs);
      master_eq           .saveState(ofs);
      master_effect       .saveState(ofs);
      arpeggio_common     .saveState(ofs);
      motionseq_common          .saveState(ofs);
      motionseq_ad_lane_settings.saveState(ofs);
      int laneIdx = 0;
      int seqIdx;
      MontageMotionSeqLaneSequence *mseq;
      loop(4)
      {
         seqIdx = 0;
         loop(8)
         {
            mseq  <= motionseq_ad_lane_sequences.get(laneIdx*8 + seqIdx);
            mseq.saveState(ofs);
            seqIdx++;
         }
         laneIdx++;
      }
      seqIdx = 0;
      loop(8)
      {
         mseq  <= superknob_sequences.get(seqIdx);
         mseq.saveState(ofs);
         seqIdx++;
      }
      superknob_lane_settings.saveState(ofs);
      unknown_30_70_00       .saveState(ofs);
      unknown_30_71_00       .saveState(ofs);
      superknob_settings     .saveState(ofs);
      scene_common           .saveState(ofs);
      audition               .saveState(ofs);
      audio_in_part_ad       .saveState(ofs);
      audio_in_part_usb      .saveState(ofs);
      assignable_knob_name   .saveState(ofs);
      controller_1_13        .saveState(ofs);
      controller_14_16       .saveState(ofs);
   }

   // <load.png>
   public virtual loadState(Stream ifs) : boolean {
      short ver = ifs.u16;
      if(ver >= 1)
      {
         ifs.readBuffer(data, 0, data.offset, false/*bResize*/);

         if(!unknown_00_7F_00    .loadState(ifs))
            return false;
         if(!reverb              .loadState(ifs))
            return false;
         if(!variation           .loadState(ifs))
            return false;
         if(!ad_insert_a         .loadState(ifs))
            return false;
         if(!ad_insert_b         .loadState(ifs))
            return false;
         if(!master_eq           .loadState(ifs))
            return false;
         if(!master_effect       .loadState(ifs))
            return false;
         if(!arpeggio_common     .loadState(ifs))
            return false;
         if(!motionseq_common          .loadState(ifs))
            return false;
         if(!motionseq_ad_lane_settings.loadState(ifs))
            return false;
         int laneIdx = 0;
         int seqIdx;
         MontageMotionSeqLaneSequence *mseq;
         loop(4)
         {
            seqIdx = 0;
            loop(8)
            {
               mseq  <= motionseq_ad_lane_sequences.get(laneIdx*8 + seqIdx);
               if(!mseq.loadState(ifs))
                  return false;
               seqIdx++;
            }
            laneIdx++;
         }
         seqIdx = 0;
         loop(8)
         {
            mseq  <= superknob_sequences.get(seqIdx);
            if(!mseq.loadState(ifs))
               return false;
            seqIdx++;
         }
         if(!superknob_lane_settings.loadState(ifs))
            return false;
         if(!unknown_30_70_00       .loadState(ifs))
            return false;
         if(!unknown_30_71_00       .loadState(ifs))
            return false;
         if(!superknob_settings     .loadState(ifs))
            return false;
         if(!scene_common           .loadState(ifs))
            return false;
         if(!audition               .loadState(ifs))
            return false;
         if(!audio_in_part_ad       .loadState(ifs))
            return false;
         if(!audio_in_part_usb      .loadState(ifs))
            return false;
         if(!assignable_knob_name   .loadState(ifs))
            return false;
         if(!controller_1_13        .loadState(ifs))
            return false;
         if(!controller_14_16       .loadState(ifs))
            return false;
         return true;
      }
      else
      {
         trace "[---] "+yacMetaClassName()+"::loadState: invalid ver="+ver;
      }
      return false;
   }

}


// <class.png>
class MontagePartLFO : MontageData {
   // p.214
   // p.185 (LFO Box Destination)
   int part_idx;

   public static New(int _partIdx) {
      local MontagePartLFO r;
      r.init(_partIdx);
      return deref r;
   }

   public method init(int _partIdx) {
      part_idx = _partIdx;
      allocData(39, // $27
                [$00, 1, G_LFO,    // LFO Phase
                 $01, 1, G_LFO,    // LFO Wave
                 $02, 1, G_LFO,    // LFO Speed
                 $03, 1, G_LFO,    // LFO Tempo Speed
                 $04, 1, G_LFO,    // LFO Tempo Sync
                 $05, 1, G_LFO,    // LFO Delay Time
                 $06, 1, G_LFO,    // LFO Fade In Time
                 $07, 1, G_LFO,    // LFO Hold Time
                 $08, 1, G_LFO,    // LFO Fade Out Time
                 $09, 1, G_LFO,    // LFO Key On Reset
                 $0A, 1, G_LFO,    // LFO Loop Switch
                 $0B, 1, G_LFO,    // LFO Destination 1
                 $0C, 1, G_LFO,    // LFO Depth 1
                 $0E, 1, G_LFO,    // LFO Destination 2
                 $0F, 1, G_LFO,    // LFO Depth 2
                 $11, 1, G_LFO,    // LFO Destination 3
                 $12, 1, G_LFO,    // LFO Depth 3
                 $14, 1, G_LFO,    // User LFO Cycle
                 $15, 1, G_LFO,    // User LFO Slope
                 $16, 1, G_LFO,    // User LFO Step Value 1
                 $17, 1, G_LFO,    // User LFO Step Value 2
                 $18, 1, G_LFO,    // User LFO Step Value 3
                 $19, 1, G_LFO,    // User LFO Step Value 4
                 $1A, 1, G_LFO,    // User LFO Step Value 5
                 $1B, 1, G_LFO,    // User LFO Step Value 6
                 $1C, 1, G_LFO,    // User LFO Step Value 7
                 $1D, 1, G_LFO,    // User LFO Step Value 8
                 $1E, 1, G_LFO,    // User LFO Step Value 9
                 $1F, 1, G_LFO,    // User LFO Step Value 10
                 $20, 1, G_LFO,    // User LFO Step Value 11
                 $21, 1, G_LFO,    // User LFO Step Value 12
                 $22, 1, G_LFO,    // User LFO Step Value 13
                 $23, 1, G_LFO,    // User LFO Step Value 14
                 $24, 1, G_LFO,    // User LFO Step Value 15
                 $25, 1, G_LFO,    // User LFO Step Value 16
                 $26, 1, G_LFO,    // Part LFO Random Speed Depth (only when temposync is off)
                 ]
                );
   }

   public virtual send(MontagePartLFO _replayPartLFO, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayPartLFO))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($31, $40 | part_idx, _replayPartLFO, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData(0x31, 0x40 | part_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayPartLFO);
         }
      }

      return _numDiffsLeft;
   }

   public method setLFOPhase(byte _v) {
      // 0..5 => 0, 90, 120, 180, 240, 270
      data.pokeI8($00, _v);
   }

   public method getLFOPhase() : byte {
      return data.peekI8($00);
   }

   public method setLFOWave(byte _v) {
      // 0..12 => Triangle, Triangle+, Saw Up, Saw Down, Squ1/4, Squ1/3, Square, Squ2/3, Squ3/4, Trapezoid, S/H1, S/H2, User
      data.pokeI8($01, _v);
   }

   public method getLFOWave() : byte {
      return data.peekI8($01);
   }

   public method setLFOSpeed(byte _v) {
      // 0..63
      data.pokeI8($02, _v);
   }

   public method getLFOSpeed() : byte {
      return data.peekI8($02);
   }

   public method setLFOTempoSpeed(byte _v) {
      // $5..$18  (16th, 8th/3, 16th., 8th, 4th/3, 8th., 4th, 2th/3, 4th., 2nd, Whole/3, 2nd., 4thX4, 4thX5, 4thX6, 4thX7, 4thX8, 4thX16, 4thX32, 4thX64)
      data.pokeI8($03, _v);
   }

   public method getLFOTempoSpeed() : byte {
      return data.peekI8($03);
   }

   public method setLFOTempoSync(byte _v) {
      data.pokeI8($04, _v);
   }

   public method getLFOTempoSync() : byte {
      return data.peekI8($04);
   }

   public method setLFODelayTime(byte _v) {
      data.pokeI8($05, _v);
   }

   public method getLFODelayTime() : byte {
      return data.peekI8($05);
   }

   public method setLFOFadeInTime(byte _v) {
      data.pokeI8($06, _v);
   }

   public method getLFOFadeInTime() : byte {
      return data.peekI8($06);
   }

   public method setLFOHoldTime(byte _v) {
      // 0..126,hold
      data.pokeI8($07, _v);
   }

   public method getLFOHoldTime() : byte {
      return data.peekI8($07);
   }

   public method setLFOFadeOutTime(byte _v) {
      data.pokeI8($08, _v);
   }

   public method getLFOFadeOutTime() : byte {
      return data.peekI8($08);
   }

   public method setLFOKeyOnReset(byte _v) {
      // 0..2 => Off, Each-On,1st-On
      data.pokeI8($09, _v);
   }

   public method getLFOKeyOnReset() : byte {
      return data.peekI8($09);
   }

   public method setLFOLoopSwitch(byte _v) {
      data.pokeI8($0A, _v);
   }

   public method getLFOLoopSwitch() : byte {
      return data.peekI8($0A);
   }

   public method setLFODestination1(byte _v) {
      data.pokeI8($0B, _v);
   }

   public method getLFODestination1() : byte {
      return data.peekI8($0B);
   }

   public method setLFODepth1(byte _v) {
      data.pokeI8($0C, _v);
   }

   public method getLFODepth1() : byte {
      return data.peekI8($0C);
   }

   public method setLFODestination2(byte _v) {
      data.pokeI8($0E, _v);
   }

   public method getLFODestination2() : byte {
      return data.peekI8($0E);
   }

   public method setLFODepth2(byte _v) {
      data.pokeI8($0F, _v);
   }

   public method getLFODepth2() : byte {
      return data.peekI8($0F);
   }

   public method setLFODestination3(byte _v) {
      data.pokeI8($11, _v);
   }

   public method getLFODestination3() : byte {
      return data.peekI8($11);
   }

   public method setLFODepth3(byte _v) {
      data.pokeI8($12, _v);
   }

   public method getLFODepth3() : byte {
      return data.peekI8($12);
   }

   public method setUserLFOCycle(byte _v) {
      // 0..6 => 2 steps, 3 steps, 4 steps, 6 steps, 8 steps, 12 steps, 16 steps
      data.pokeI8($14, _v);
   }

   public method getUserLFOCycle() : byte {
      return data.peekI8($14);
   }

   public method setUserLFOSlope(byte _v) {
      // 0..3 => Off, Up, Down, Up&Down
      data.pokeI8($15, _v);
   }

   public method getUserLFOSlope() : byte {
      return data.peekI8($15);
   }

   public method setUserLFOStepValue(byte _idx, byte _v) {
      data.pokeI8($16 + (_idx&15), _v  + 64);
   }

   public method getUserLFOStepValue(byte _idx) : byte {
      return data.peekI8($16 + (_idx&15)) - 64;
   }

   public method setUserLFOStepValue1(byte _v) {        setUserLFOStepValue(0, _v); }
   public method getUserLFOStepValue1() : byte { return getUserLFOStepValue(0);     }

   public method setUserLFOStepValue2(byte _v) {        setUserLFOStepValue(1, _v); }
   public method getUserLFOStepValue2() : byte { return getUserLFOStepValue(1);     }

   public method setUserLFOStepValue3(byte _v) {        setUserLFOStepValue(2, _v); }
   public method getUserLFOStepValue3() : byte { return getUserLFOStepValue(2);     }

   public method setUserLFOStepValue4(byte _v) {        setUserLFOStepValue(3, _v); }
   public method getUserLFOStepValue4() : byte { return getUserLFOStepValue(3);     }

   public method setUserLFOStepValue5(byte _v) {        setUserLFOStepValue(4, _v); }
   public method getUserLFOStepValue5() : byte { return getUserLFOStepValue(4);     }

   public method setUserLFOStepValue6(byte _v) {        setUserLFOStepValue(5, _v); }
   public method getUserLFOStepValue6() : byte { return getUserLFOStepValue(5);     }

   public method setUserLFOStepValue7(byte _v) {        setUserLFOStepValue(6, _v); }
   public method getUserLFOStepValue7() : byte { return getUserLFOStepValue(6);     }

   public method setUserLFOStepValue8(byte _v) {        setUserLFOStepValue(7, _v); }
   public method getUserLFOStepValue8() : byte { return getUserLFOStepValue(7);     }

   public method setUserLFOStepValue9(byte _v) {        setUserLFOStepValue(8, _v); }
   public method getUserLFOStepValue9() : byte { return getUserLFOStepValue(8);     }

   public method setUserLFOStepValue10(byte _v) {        setUserLFOStepValue(9, _v); }
   public method getUserLFOStepValue10() : byte { return getUserLFOStepValue(9);     }

   public method setUserLFOStepValue11(byte _v) {        setUserLFOStepValue(10, _v); }
   public method getUserLFOStepValue11() : byte { return getUserLFOStepValue(10);     }

   public method setUserLFOStepValue12(byte _v) {        setUserLFOStepValue(11, _v); }
   public method getUserLFOStepValue12() : byte { return getUserLFOStepValue(11);     }

   public method setUserLFOStepValue13(byte _v) {        setUserLFOStepValue(12, _v); }
   public method getUserLFOStepValue13() : byte { return getUserLFOStepValue(12);     }

   public method setUserLFOStepValue14(byte _v) {        setUserLFOStepValue(13, _v); }
   public method getUserLFOStepValue14() : byte { return getUserLFOStepValue(13);     }

   public method setUserLFOStepValue15(byte _v) {        setUserLFOStepValue(14, _v); }
   public method getUserLFOStepValue15() : byte { return getUserLFOStepValue(14);     }

   public method setUserLFOStepValue16(byte _v) {        setUserLFOStepValue(15, _v); }
   public method getUserLFOStepValue16() : byte { return getUserLFOStepValue(15);     }

   public method setPartLFORandomSpeedDepth(byte _v) {
      data.pokeI8($26, _v);
   }

   public method getPartLFORandomSpeedDepth() : byte {
      return data.peekI8($26);
   }

}


// <class.png>
class MontagePartZoneSetting : MontageData {
   int part_idx;

   public static New(int _partIdx) {
      local MontagePartZoneSetting r;
      r.init(_partIdx);
      return deref r;
   }

   public method init(int _partIdx) {
      part_idx = _partIdx;
      allocData(17,  // $11
                [$00, 1, G_SOUND,   // Zone Switch
                 $01, 1, G_SOUND,   // MIDI Transmit Channel
                 $02, 1, G_SOUND,   // Zone Octave Shift
                 $03, 1, G_SOUND,   // Zone Transpose
                 $04, 1, G_SOUND,   // Note Limit Low
                 $05, 1, G_SOUND,   // Note Limit High
                 $06, 1, G_SOUND,   // Zone Internal Switch
                 $07, 1, G_CTL,     // MIDI Volume
                 $08, 1, G_CTL,     // MIDI Pan
                 $09, 1, G_CTL,     // MIDI Bank MSB
                 $0A, 1, G_CTL,     // MIDI Bank LSB
                 $0B, 1, G_CTL,     // MIDI Program Number
                 $0C, 1, G_CTL,     // Transmit PB/AT/PC/BS/CC
                 $0D, 1, G_CTL,     // Transmit Assignable Knob 8..2
                 $0E, 1, G_CTL,     // Transmit Assignable Knob 1, FC2, FC1, MW, SUS/SOS, Pan, Vol/Expr
                 $0F, 1, G_CTL,     // Transmit Ribbon Controller, Breath Controller, Foot Switch
                 $10, 1, G_CTL,     // Transmit Motion Seq Trigger+Hold, Assignable Function 1+2
                 ]
                );
   }

   public virtual send(MontagePartZoneSetting _replayPartZoneSetting, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayPartZoneSetting))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($31, $50 | part_idx, _replayPartZoneSetting, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData(0x31, 0x50 | part_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayPartZoneSetting);
         }
      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageArpeggioPart : MontageData {
   int part_idx;

   public static New(int _partIdx) {
      local MontageArpeggioPart r;
      r.init(_partIdx);
      return deref r;
   }

   public method init(int _partIdx) {
      part_idx = _partIdx;
      allocData(92,  // $5C
                [$00, 1, G_ARP,  // Part Arp Switch
                 $03, 1, G_ARP,  // Arp Play Only
                 $04, 1, G_ARP,  // Arp Fixed BD/SD
                 $06, 1, G_ARP,  // Arp Loop
                 $07, 1, G_ARP,  // Arp Hold
                 $08, 1, G_ARP,  // Part Unit Multiply
                 $09, 1, G_ARP,  // Arp Note Limit Low
                 $0A, 1, G_ARP,  // Arp Note Limit High
                 $0B, 1, G_ARP,  // Arp Velocity Limit Low
                 $0C, 1, G_ARP,  // Arp Velocity Limit High
                 $0D, 1, G_ARP,  // Arp Key Mode
                 $0E, 1, G_ARP,  // Arp Velocity Mode (Original, Thru)
                 $0F, 1, G_ARP,  // Arp Change Timing (Real-time, Measure)
                 $10, 1, G_ARP,  // Arp / Motion Seq Gird (1..7 => 60, 80, 120, 160, 240, 320, 480)
                 $11, 1, G_ARP,  // Arp Quantize Strength
                 $12, 2, G_ARP,  // Arp Velocity Rate
                 $14, 2, G_ARP,  // Arp Gate Time Rate
                 $1C, 1, G_ARP,  // Arp Accent Velocity Threshold
                 $1D, 1, G_ARP,  // Arp Accent Start Quantize
                 $1E, 1, G_ARP,  // Arp Octave Range
                 $1F, 1, G_ARP,  // Arp Output Octave Shift
                 $20, 1, G_ARP,  // Arp Trigger Mode
                 $21, 1, G_ARP,  // Arp Random SFX
                 $22, 1, G_ARP,  // Arp Random SFX Key On Control
                 $23, 1, G_ARP,  // Arp Random SFX Velocity Offset
                 $24, 2, G_ARP,  // Arp 1 Velocity Rate Offset
                 $26, 2, G_ARP,  // Arp 1 Velocity Gate Time Rate Offset
                 $28, 2, G_ARP,  // Arp 2 Velocity Rate Offset
                 $2A, 2, G_ARP,  // Arp 2 Velocity Gate Time Rate Offset
                 $2C, 2, G_ARP,  // Arp 3 Velocity Rate Offset
                 $2E, 2, G_ARP,  // Arp 3 Velocity Gate Time Rate Offset
                 $30, 2, G_ARP,  // Arp 4 Velocity Rate Offset
                 $32, 2, G_ARP,  // Arp 4 Velocity Gate Time Rate Offset
                 $34, 2, G_ARP,  // Arp 5 Velocity Rate Offset
                 $36, 2, G_ARP,  // Arp 5 Velocity Gate Time Rate Offset
                 $38, 2, G_ARP,  // Arp 6 Velocity Rate Offset
                 $3A, 2, G_ARP,  // Arp 6 Velocity Gate Time Rate Offset
                 $3C, 2, G_ARP,  // Arp 7 Velocity Rate Offset
                 $3E, 2, G_ARP,  // Arp 7 Velocity Gate Time Rate Offset
                 $40, 2, G_ARP,  // Arp 8 Velocity Rate Offset
                 $42, 2, G_ARP,  // Arp 8 Velocity Gate Time Rate Offset
                 $45, 2, G_ARP,  // Arp 1 Number
                 $48, 2, G_ARP,  // Arp 2 Number
                 $4B, 2, G_ARP,  // Arp 3 Number
                 $4E, 2, G_ARP,  // Arp 4 Number
                 $51, 2, G_ARP,  // Arp 5 Number
                 $54, 2, G_ARP,  // Arp 6 Number
                 $57, 2, G_ARP,  // Arp 7 Number
                 $5A, 2, G_ARP,  // Arp 8 Number
                 ]
                );
   }

   public virtual send(MontageArpeggioPart _replayArpeggioPart, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayArpeggioPart))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff(0x31, 0x60 | part_idx, _replayArpeggioPart, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData(0x31, 0x60 | part_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayArpeggioPart);
         }
      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontageScenePart : MontageData {
   int part_idx;
   int scene_idx;

   public static New(int _partIdx, int _sceneIdx) {
      local MontageScenePart r;
      r.init(_partIdx, _sceneIdx);
      return deref r;
   }

   public method init(int _partIdx, int _sceneIdx) {
      part_idx = _partIdx;
      scene_idx = _sceneIdx;
      allocData(26,  // $1A
                [$00, 1, G_SOUND,  // Part Mute
                 $01, 1, G_SOUND,  // Volume
                 $02, 1, G_SOUND,  // Pan
                 $03, 1, G_SOUND,  // Reverb Send
                 $04, 1, G_SOUND,  // Variation Send
                 $05, 1, G_SOUND,  // Dry Level
                 $06, 1, G_SOUND,  // Filter Cutoff Frequency
                 $07, 1, G_SOUND,  // Filter Resonance
                 $08, 1, G_SOUND,  // FEG Depth
                 $09, 1, G_SOUND,  // AEG Attack Time
                 $0A, 1, G_SOUND,  // AEG Decay Time
                 $0B, 1, G_SOUND,  // AEG Sustain Level
                 $0C, 1, G_SOUND,  // AEG Release Time
                 $0F, 2, G_TEMPO,  // Swing
                 $11, 1, G_TEMPO,  // Unit Multiply
                 $12, 2, G_ARP,    // Arp Gate Time Rate
                 $14, 2, G_ARP,    // Arp Velocity Rate
                 $16, 1, G_MSEQ,   // Motion Seq Amplitude Part Offset
                 $17, 1, G_MSEQ,   // Motion Seq Pulse Shape Part Offset
                 $18, 1, G_MSEQ,   // Motion Seq Smoothness Part Offset
                 $19, 1, G_MSEQ,   // Motion Seq Random (0-127)
                 ]
                );
   }

   public virtual send(MontageScenePart _replayScenePart, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bSendAll || replayDiffers(_replayScenePart))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff(0x36, (scene_idx << 4) | part_idx, _replayScenePart, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData(0x36, (scene_idx << 4) | part_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayScenePart);
         }
      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontagePart : MontageData {
   // p.211
   int part_idx;

   MontageInsert                    insert_a;
   MontageInsert                    insert_b;
   MontagePartLFO                   lfo;
   MontagePartZoneSetting           zone_setting;
   MontageAssignableKnobName        assignable_knob_name;
   MontageController_1_13           controller_1_13;
   MontageController_14_16          controller_14_16;
   MontageArpeggioPart              arpeggio_part;
   MontageMotionSeqLaneSettings     motionseq_lane_settings;
   MontageMotionSeqLaneSequence *[] motionseq_lane_sequences;  // (lane_idx*8) + seq_idx  (4 lanes * 8 sequences = 32 sequences)
   MontageScenePart*[]              scene_parts;

   int last_copied_patch_idx;       // -1=none, A001..
   int last_copied_patch_part_idx;  // -1=none, 0..15
   int last_copied_patch_var_idx;   // -1=none, 0..15
   int last_copied_peq_idx;         // -1=none, A001..
   int last_copied_peq_part_idx;    // -1=none, 0..15
   int last_copied_peq_var_idx;     // -1=none, 0..15
   int last_copied_pfx_idx;         // -1=none, A001..
   int last_copied_pfx_part_idx;    // -1=none, 0..15
   int last_copied_pfx_var_idx;     // -1=none, 0..15
   int last_copied_mfx_idx;         // -1=none, A001..

   boolean star_rating;


   public static New(int _partIdx) {
      local MontagePart r;
      r.init(_partIdx);
      return deref r;
   }

   public method init(int _partIdx) {
      part_idx = _partIdx;
      allocData(121,  // $79
                [$00, 1,  G_NAME,       // Part Name
                 $01, 1,  G_NAME,       //
                 $02, 1,  G_NAME,       //
                 $03, 1,  G_NAME,       //
                 $04, 1,  G_NAME,       //
                 $05, 1,  G_NAME,       //
                 $06, 1,  G_NAME,       //
                 $07, 1,  G_NAME,       //
                 $08, 1,  G_NAME,       //
                 $09, 1,  G_NAME,       //
                 $0A, 1,  G_NAME,       //
                 $0B, 1,  G_NAME,       //
                 $0C, 1,  G_NAME,       //
                 $0D, 1,  G_NAME,       //
                 $0E, 1,  G_NAME,       //
                 $0F, 1,  G_NAME,       //
                 $10, 1,  G_NAME,       //
                 $11, 1,  G_NAME,       //
                 $12, 1,  G_NAME,       //
                 $13, 1,  G_NAME,       //
                 $14, 1,  G_NAME,       // Part Main Category
                 $15, 1,  G_NAME,       // Part Sub Category
                 $16, 1,  G_SOUND,      // Part Switch
                 $17, 1,  G_SOUND,      // Keyboard Control Switch
                 $18, 1,  G_SOUND,      // Mute Switch
                 // $19 ? (0 in both FM-X and AWM2 parts)
                 // $1A ? (0 in both FM-X and AWM2 parts)
                 // $1B ? (0 in both FM-X and AWM2 parts)
                 $1C, 1,  G_SOUND,      // Velocity Limit Low
                 $1D, 1,  G_SOUND,      // Velocity Limit High
                 $1E, 1,  G_SOUND,      // Note Limit Low
                 $1F, 1,  G_SOUND,      // Note Limit High
                 $20, 1,  G_SOUND,      // Pitch Bend Range Upper
                 $21, 1,  G_SOUND,      // Pitch Bend Range Lower
                 $22, 1,  G_SOUND,      // Velocity Sensitivity Depth
                 $23, 1,  G_SOUND,      // Velocity Sensitivity Offset
                 $24, 1,  G_SOUND,      // Volume
                 $25, 1,  G_SOUND,      // Pan
                 $26, 1,  G_PFX,        // Insertion FX Switch
                 $27, 2,  G_SOUND,      // Detune
                 $29, 1,  G_SOUND,      // Reverb Send
                 $2A, 1,  G_SOUND,      // Variation Send
                 // $2B ? (0 in both FM-X and AWM2 parts)
                 $2C, 1,  G_SOUND,      // Dry Level
                 $2D, 1,  G_SOUND,      // Note Shift
                 $2E, 1,  G_ENVFOLLOW,  // Envelope Follower Gain
                 $2F, 1,  G_ENVFOLLOW,  // Envelope Follower Attack
                 $30, 1,  G_ENVFOLLOW,  // Envelope Follower Release
                 $31, 1,  G_PORTAMENTO, // Portamento Switch
                 $32, 1,  G_PORTAMENTO, // Portamento Time
                 $33, 1,  G_PORTAMENTO, // Portamento Mode
                 $34, 1,  G_PORTAMENTO, // Portamento Time Mode
                 $35, 1,  G_SOUND,      // Key Assign Mode
                 $36, 1,  G_SOUND,      // Mono/Poly Mode
                 $37, 2,  G_SOUND,      // Micro Tuning Scale (why two bytes?)
                 $39, 1,  G_SOUND,      // Micro Tuning Root
                 $3A, 1,  G_SOUND,      // Legato Slope
                 $3B, 1,  G_PFX,        // Insertion Connection Type
                 $3C, 1,  G_PFX,        // Insertion to Reverb Send Level
                 $3D, 1,  G_PFX,        // Insertion to Variation Send Level
                 // $3E ? (0 in both FM-X and AWM2 parts)
                 $3F, 1,  G_AUDIO,      // Part Output Select
                 $40, 1,  G_CTL,        // Receive Flags (PB, AT, PC, BS, CC)
                 $41, 1,  G_CTL,        // Receive Assignable Knob 2..8
                 $42, 1,  G_CTL,        // Receive Assignable Knob 1, FC2, FC1, MW, SUS/SOS, Pan, Vol/Expr
                 $43, 1,  G_CTL,        // Receive Ribbon Controller, Breath Controller, Foot Switch
                 $44, 1,  G_CTL,        // Receive MSeq Trigger+Hold, Assignable Function 2+1
                 $45, 1,  G_SOUND,      // Element Pan Switch
                 $46, 1,  G_QUICK,      // AEG Attack Time
                 $47, 1,  G_QUICK,      // AEG Decay Time
                 $48, 1,  G_QUICK,      // AEG Sustain Level
                 $49, 1,  G_QUICK,      // AEG Release Time
                 $4A, 1,  G_QUICK,      // FEG Attack Time
                 $4B, 1,  G_QUICK,      // FEG Decay Time
                 $4C, 1,  G_QUICK,      // FEG Sustain Level
                 $4D, 1,  G_QUICK,      // FEG Release Time
                 $4E, 1,  G_QUICK,      // FEG Depth
                 // $4F ? (0 in both FM-X and AWM2 parts)
                 $50, 1,  G_QUICK,      // Filter Cutoff Frequency
                 $51, 1,  G_QUICK,      // Filter Resonance/Width
                 // $52 ? (0 in both FM-X and AWM2 parts)
                 $53, 2,  G_PEQ,        // 3-band EQ Low Frequency
                 $55, 1,  G_PEQ,        // 3-band EQ Low Gain
                 // $56 ? (0 in both FM-X and AWM2 parts)
                 $57, 2,  G_PEQ,        // 3-band EQ Mid Frequency
                 $59, 1,  G_PEQ,        // 3-band EQ Mid Gain
                 $5A, 1,  G_PEQ,        // 3-band EQ Mid Q
                 $5B, 2,  G_PEQ,        // 3-band EQ High Frequency
                 $5D, 1,  G_PEQ,        // 3-band EQ High Gain
                 // $5E ? (0 in both FM-X and AWM2 parts)
                 $5F, 1,  G_PEQ,        // 2-band EQ 1 Type
                 $60, 2,  G_PEQ,        // 2-band EQ 1 Frequency
                 $62, 1,  G_PEQ,        // 2-band EQ 1 Gain
                 $63, 1,  G_PEQ,        // 2-band EQ 1 Q
                 $64, 1,  G_PEQ,        // 2-band EQ 2 Type
                 $65, 2,  G_PEQ,        // 2-band EQ 2 Frequency
                 $67, 1,  G_PEQ,        // 2-band EQ 2 Gain
                 $68, 1,  G_PEQ,        // 2-band EQ 2 Q
                 $69, 1,  G_PEQ,        // 2-band EQ 2 Output Gain
                 $6A, 1,  G_QUICK,      // Assignable Knob 1 Value
                 $6B, 1,  G_QUICK,      // Assignable Knob 2 Value
                 $6C, 1,  G_QUICK,      // Assignable Knob 3 Value
                 $6D, 1,  G_QUICK,      // Assignable Knob 4 Value
                 $6E, 1,  G_QUICK,      // Assignable Knob 5 Value
                 $6F, 1,  G_QUICK,      // Assignable Knob 6 Value
                 $70, 1,  G_QUICK,      // Assignable Knob 7 Value
                 $71, 1,  G_QUICK,      // Assignable Knob 8 Value
                 $72, 2,  G_TEMPO,      // Swing
                 $74, 1,  G_MSEQ,       // Motion Seq Part Switch
                 $75, 1,  G_MSEQ,       // Motion Seq Amplitude
                 $76, 1,  G_MSEQ,       // Motion Seq Pulse Shape
                 $77, 1,  G_MSEQ,       // Motion Seq Smooth
                 $78, 1,  G_MSEQ,       // Motion Seq Random
                 ]
                );

      insert_a            .init(_partIdx, MontageInsert.INSERT_TYPE_PART_A);
      insert_b            .init(_partIdx, MontageInsert.INSERT_TYPE_PART_B);
      lfo                 .init(_partIdx);
      zone_setting        .init(_partIdx);
      assignable_knob_name.init(_partIdx);
      controller_1_13     .init(_partIdx);
      controller_14_16    .init(_partIdx);
      arpeggio_part       .init(_partIdx);
      motionseq_lane_settings.init(part_idx);
      int laneIdx = 0;
      loop(4)
      {
         int seqIdx = 0;
         loop(8)
            motionseq_lane_sequences.add(#(MontageMotionSeqLaneSequence.New(part_idx, laneIdx, seqIdx++)));
         laneIdx++;
      }
      int sceneIdx = 0;
      loop(8)
         scene_parts.add(#(MontageScenePart.New(part_idx, sceneIdx++)));

      last_copied_patch_idx      = -1;
      last_copied_patch_part_idx =  0;
      last_copied_patch_var_idx  =  0;
      last_copied_peq_idx        = -1;
      last_copied_peq_part_idx   =  0;
      last_copied_peq_var_idx    =  0;
      last_copied_pfx_idx        = -1;
      last_copied_pfx_part_idx   =  0;
      last_copied_pfx_var_idx    =  0;
      last_copied_mfx_idx        = -1;
   }

   // <method.png>
   public method invalidateReplay() {
      MontageData::invalidateReplay();
      insert_a            .invalidateReplay();
      insert_b            .invalidateReplay();
      lfo                 .invalidateReplay();
      zone_setting        .invalidateReplay();
      assignable_knob_name.invalidateReplay();
      controller_1_13     .invalidateReplay();
      controller_14_16    .invalidateReplay();
      arpeggio_part       .invalidateReplay();
      motionseq_lane_settings.invalidateReplay();
      MontageMotionSeqLaneSequence *seq;
      foreach seq in motionseq_lane_sequences
         seq.invalidateReplay();
      MontageScenePart *sp;
      foreach sp in scene_parts
         sp.invalidateReplay();
   }

   public virtual send(MontagePart _replayPart, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      byte origVol;
      if(b_tmp_mute_part)
      {
         origVol = getVolume();
         setVolume(0);
      }

      byte origOut;
      if(-1 != g_forced_part_output)
      {
         origOut = getOutput();
         setOutput(g_forced_part_output);
      }

      byte origSW;
      if(0 == (g_fx_mode & 1))
      {
         origSW = getInsertionFXSwitch();
         setInsertionFXSwitch(0);
      }

      if(_bHeader && (null == _fr))
         sendBulkHeader(_outDev);

      if(_flags & G_COMMON_PART)
      {
         // trace "xxx send part "+(part_idx+1)+" common";
         if(_bSendAll || replayDiffers(_replayPart))
         {
            // Utils.BufferDiff(data, _replayPart.data, true/*bVerbose*/);
            if(null != _fr)
            {
               _numDiffsLeft = sendDiff($31, part_idx, _replayPart, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
            }
            else
            {
               sendData($31, part_idx, $00, _outDev);
               copyToReplay(_replayPart);
            }
         }
      }

      if(0 == (_flags & G_SPARSE))
      {
         if(_flags & MontageDefs.G_PFX)
         {
            // trace "xxx send part "+(part_idx+1)+" insert_a+insert_b";
            _numDiffsLeft = insert_a            .send(_replayPart.insert_a,             false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
            _numDiffsLeft = insert_b            .send(_replayPart.insert_b,             false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }

         if(_flags & MontageDefs.G_LFO)
         {
            _numDiffsLeft = lfo                 .send(_replayPart.lfo,                  false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }

         if(_flags & (MontageDefs.G_SOUND | MontageDefs.G_CTL))
         {
            _numDiffsLeft = zone_setting        .send(_replayPart.zone_setting,         false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }

         if(_flags & MontageDefs.G_KNOBNAME)
         {
            _numDiffsLeft = assignable_knob_name.send(_replayPart.assignable_knob_name, false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }

         if(_flags & MontageDefs.G_CTL)
         {
            _numDiffsLeft = controller_1_13     .send(_replayPart.controller_1_13,      false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
            _numDiffsLeft = controller_14_16    .send(_replayPart.controller_14_16,     false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }

         if(_flags & MontageDefs.G_ARP)
         {
            _numDiffsLeft = arpeggio_part       .send(_replayPart.arpeggio_part,        false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }

         if(_flags & MontageDefs.G_MSEQ)
         {
            _numDiffsLeft = motionseq_lane_settings.send(_replayPart.motionseq_lane_settings, false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
            int laneIdx = 0;
            loop(4)
            {
               int seqIdx = 0;
               loop(8)
               {
                  MontageMotionSeqLaneSequence mseq  <= motionseq_lane_sequences.get(laneIdx*8 + seqIdx);
                  _numDiffsLeft = mseq.send(_replayPart.motionseq_lane_sequences.get(laneIdx*8 + seqIdx), false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
                  seqIdx++;
               }
               laneIdx++;
            }
         }

         if(_flags & MontageDefs.G_SCENE)
         {
            int sceneIdx = 0;
            loop(8)
            {
               MontageScenePart sp       <= scene_parts[sceneIdx];
               MontageScenePart spReplay <= _replayPart.scene_parts.get(sceneIdx);
               _numDiffsLeft = sp.send(spReplay, false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
               sceneIdx++;
            }
         }
      }

      if(_bHeader && (null == _fr))
         sendBulkFooter(_outDev);

      if(-1 != g_forced_part_output)
      {
         setOutput(origOut);
      }

      if(b_tmp_mute_part)
      {
         setVolume(origVol);
      }

      if(0 == (g_fx_mode & 1))
      {
         setInsertionFXSwitch(origSW);
      }

      return _numDiffsLeft;
   }

   public method copyFromEx(MontagePart _o,
                            boolean _bCopyFX,
                            boolean _bCopyEQ
                            ) {
      if(_bCopyEQ)
         data = _o.data;
      else
         copyDataEx(_o.data, G_ALL & ~G_PEQ);

      if(_bCopyFX)
      {
         insert_a.copyFrom(_o.insert_a);
         insert_b.copyFrom(_o.insert_b);
      }

      lfo                 .copyFrom(_o.lfo                 );
      zone_setting        .copyFrom(_o.zone_setting        );
      assignable_knob_name.copyFrom(_o.assignable_knob_name);
      controller_1_13     .copyFrom(_o.controller_1_13     );
      controller_14_16    .copyFrom(_o.controller_14_16    );
      arpeggio_part       .copyFrom(_o.arpeggio_part       );
      motionseq_lane_settings.copyFrom(_o.motionseq_lane_settings);

      int laneIdx = 0;
      loop(4)
      {
         int seqIdx = 0;
         loop(8)
         {
            MontageMotionSeqLaneSequence mseq  <= motionseq_lane_sequences.get(laneIdx*8 + seqIdx);
            MontageMotionSeqLaneSequence omseq <= _o.motionseq_lane_sequences.get(laneIdx*8 + seqIdx);
            mseq.copyFrom(omseq);
            seqIdx++;
         }
         laneIdx++;
      }

      int sceneIdx = 0;
      loop(8)
      {
         MontageScenePart sp <= scene_parts[sceneIdx];
         MontageScenePart osp <= _o.scene_parts[sceneIdx];
         sp.copyFrom(osp);
         sceneIdx++;
      }

      last_copied_patch_idx      = _o.last_copied_patch_idx;
      last_copied_patch_part_idx = _o.last_copied_patch_part_idx;
      last_copied_patch_var_idx  = _o.last_copied_patch_var_idx;
      last_copied_peq_idx        = _o.last_copied_peq_idx;
      last_copied_peq_part_idx   = _o.last_copied_peq_part_idx;
      last_copied_peq_var_idx    = _o.last_copied_peq_var_idx;
      last_copied_pfx_idx        = _o.last_copied_pfx_idx;
      last_copied_pfx_part_idx   = _o.last_copied_pfx_part_idx;
      last_copied_pfx_var_idx    = _o.last_copied_pfx_var_idx;
      last_copied_mfx_idx        = _o.last_copied_mfx_idx;

      star_rating = _o.star_rating;
   }

   public virtual copyFrom(MontagePart _o) {
      copyFromEx(_o,
                 true/*bCopyFX*/,
                 true/*bCopyEQ*/
                 );
   }

   public method copyLevel(MontagePart _o) {
      setVolume(_o.getVolume());
      setPan(_o.getPan());
      setReverbSend(_o.getReverbSend());
      setVariationSend(_o.getVariationSend());
   }

   public method copyCtl(MontagePart _o) {
      controller_1_13.copyFrom(_o.controller_1_13);
      controller_14_16.copyFrom(_o.controller_14_16);
   }

   public method copyPEQ(MontagePart _o) {
      copyDataEx(_o.data, G_PEQ);
   }

   public method copyPFX(MontagePart _o) {
      copyDataEx(_o.data, G_PFX);
      insert_a.copyFrom(_o.insert_a);
      insert_b.copyFrom(_o.insert_b);
   }

   public method swapPFX() {
      MontageInsert ins <= deref insert_a;
      insert_a <= deref insert_b;
      insert_b <= deref ins;
   }

   public method copyPMSEQ(MontagePart _o) {
      copyDataEx(_o.data, G_MSEQ);
      motionseq_lane_settings.copyFrom(_o.motionseq_lane_settings);
      MontageMotionSeqLaneSequence *seq;
      int seqIdx = 0;  // 0..31  (4 lanes * 8 sequences = 32 sequences)
      foreach seq in motionseq_lane_sequences
      {
         MontageMotionSeqLaneSequence oSeq <= _o.motionseq_lane_sequences.get(seqIdx++);
         seq.copyFrom(oSeq);
      }
   }

   public method resetQuickEdit() {
      // trace "xxx MontagePart::resetQuickEdit: this="+#(this);
      data.pokeI8($46, 64);  // AEG Attack Time
      data.pokeI8($47, 64);  // AEG Decay Time
      data.pokeI8($48, 64);  // AEG Sustain Level
      data.pokeI8($49, 64);  // AEG Release Time
      data.pokeI8($4A, 64);  // FEG Attack Time
      data.pokeI8($4B, 64);  // FEG Decay Time
      data.pokeI8($4C, 64);  // FEG Sustain Level
      data.pokeI8($4D, 64);  // FEG Release Time
      data.pokeI8($4E, 64);  // FEG Depth
      data.pokeI8($50, 64);  // Filter Cutoff Frequency
      data.pokeI8($51, 64);  // Filter Resonance/Width
      data.pokeI8($6A, 64);  // Assignable Knob 1 Value
      data.pokeI8($6B, 64);  // Assignable Knob 2 Value
      data.pokeI8($6C, 64);  // Assignable Knob 3 Value
      data.pokeI8($6D, 64);  // Assignable Knob 4 Value
      data.pokeI8($6E, 64);  // Assignable Knob 5 Value
      data.pokeI8($6F, 64);  // Assignable Knob 6 Value
      data.pokeI8($70, 64);  // Assignable Knob 7 Value
      data.pokeI8($71, 64);  // Assignable Knob 8 Value
   }

   public method invalidateReplayAssignableKnobValues() {
      replay_data_valid.pokeI8($6A, false);
      replay_data_valid.pokeI8($6B, false);
      replay_data_valid.pokeI8($6C, false);
      replay_data_valid.pokeI8($6D, false);
      replay_data_valid.pokeI8($6E, false);
      replay_data_valid.pokeI8($6F, false);
      replay_data_valid.pokeI8($70, false);
      replay_data_valid.pokeI8($71, false);
      b_replay_valid = false;
   }

   public method resetKbdCtl() {
      data.pokeI8($17, 0);
   }

   public method setEnableVolExp(boolean _bEnable) {
      data.pokeI8($42, (data.peekI8($42) & ~1) | (_bEnable << 0) );
   }

   public method getEnableVolExp() : boolean {
      return (0 != (data.peekI8($42) & 1));
   }

   public method setName(String _s) {
      int numChars = mathMini(20, _s.numChars);
      int idx = 0;
      loop(numChars)
      {
         data.pokeI8(idx, _s.getc(idx));
         idx++;
      }
      loop(20 - numChars)
         data.pokeI8(idx++, ' ');
   }

   public method getName() : String {
      local String r;
      r.alloc(20+1);
      int idx = 0;
      // trace "xxx getName. data=";
      // data.hexdump(0, data.offset);
      loop(20)
      {
         r[idx] = data.peekI8(idx);
         idx++;
      }
      r.putc(idx, 0);
      r.fixLength();
      return deref r;
   }

   public method setVolume(byte _vol) {
      data.pokeI8($24, _vol);
   }

   public method invalidateReplayVolume() {
      replay_data_valid.pokeI8($24, false);
      b_replay_valid = false;
   }

   public method getVolume() : byte {
      return data.peekI8($24);
   }

   public method setKeyboardControlSwitch(byte _v) {
      data.pokeI8($17, _v);
   }

   public method getKeyboardControlSwitch() : byte {
      return data.peekI8($17);
   }

   public method setMuteSwitch(byte _v) {
      data.pokeI8($18, _v);
   }

   public method getMuteSwitch() : byte {
      return data.peekI8($18);
   }

   public method setPan(byte _pan) {
      data.pokeI8($25, _pan + 64);
   }

   public method getPan() : byte {
      return data.peekI8($25) - 64;
   }

   public method setInsertionFXSwitch(byte _v) {
      // bit 0: Insert A
      // bit 1: Insert B
      data.pokeI8($26, _v);
   }

   public method getInsertionFXSwitch() : byte {
      return data.peekI8($26);
   }

   public method setDetune(byte _detune) {
      // -128..+127 => -12.8 ..+12.7
      _detune += 0x80;
      data.pokeI8($27, (_detune>>4)&15);
      data.pokeI8($28, _detune&15);
   }

   public method getDetune() : byte {
      byte i = ((data.peekI8($27)&15)<<4) | (data.peekI8($28)&15);
      return i - 0x80;
   }

   public method setReverbSend(byte _rev) {
      data.pokeI8($29, _rev);
   }

   public method getReverbSend() : byte {
      return data.peekI8($29);
   }

   public method setVariationSend(byte _var) {
      data.pokeI8($2A, _var);
   }

   public method getVariationSend() : byte {
      return data.peekI8($2A);
   }

   public method setDryLevel(byte _lvl) {
      data.pokeI8($2C, _lvl);
   }

   public method getDryLevel() : byte {
      return data.peekI8($2C);
   }

   public method setNoteShift(byte _noteShift) {
      // -24..+24
      data.pokeI8($2D, _noteShift + 64);
   }

   public method getNoteShift() : byte {
      return data.peekI8($2D) - 64;
   }

   public method setMicroTuningScale(short _v) {
      data.pokeI8($37, (_v >> 7)&1);
      data.pokeI8($38, (_v&127));
   }

   public method getMicroTuningScale() : short {
      return ((data.peekI8($37)&1)<<7) | (data.peekI8($38)&127);
   }

   public method setMicroTuningRoot(byte _t) {
      // 0..11 => C..B
      data.pokeI8($39, _t);
   }

   public method getMicroTuningRoot() : byte {
      return data.peekI8($39);
   }

   public method setInsertionConnectionType(byte _t) {
      data.pokeI8($3B, _t);
   }

   public method getInsertionConnectionType() : byte {
      return data.peekI8($3B);
   }

   public method setEQ1Type(byte _t) {
      data.pokeI8($5F, _t);
   }

   public method getEQ1Type() : byte {
      return data.peekI8($5F);
   }

   public method setEQ1Freq(byte _f) {
      // 0..255 => 63.0 .. 18.0k
      data.pokeI8($60, (_f >> 7)&1);
      data.pokeI8($61, (_f&127));
   }

   public method getEQ1Freq() : byte {
      byte i = ((data.peekI8($60)&1)<<7) | (data.peekI8($61)&127);
      return i;
   }

   public method setEQ1Gain(byte _g) {
      // 40..88 => -24dB .. +24dB
      data.pokeI8($62, _g + 64);
   }

   public method getEQ1Gain() : byte {
      return data.peekI8($62) - 64;
   }

   public method setEQ1Q(byte _q) {
      // 1..120 => 0.1 .. 12
      data.pokeI8($63, _q);
   }

   public method getEQ1Q() : byte {
      return data.peekI8($63);
   }

   public method setEQ2Type(byte _t) {
      data.pokeI8($64, _t);
   }

   public method getEQ2Type() : byte {
      return data.peekI8($64);
   }

   public method setEQ2Freq(byte _f) {
      // 0..255 => 63.0 .. 18.0k
      data.pokeI8($65, (_f >> 7)&1);
      data.pokeI8($66, (_f&127));
   }

   public method getEQ2Freq() : byte {
      byte i = ((data.peekI8($65)&1)<<7) | (data.peekI8($66)&127);
      return i;
   }

   public method setEQ2Gain(byte _g) {
      // 40..88 => -24dB .. +24dB
      data.pokeI8($67, _g + 64);
   }

   public method getEQ2Gain() : byte {
      return data.peekI8($67) - 64;
   }

   public method setEQ2Q(byte _q) {
      // 1..120 => 0.1 .. 12
      data.pokeI8($68, _q);
   }

   public method getEQ2Q() : byte {
      return data.peekI8($68);
   }

   public method setEQ3LowFreq(byte _v) {
      data.pokeI8($53, (_v >> 7)&1);
      data.pokeI8($54, (_v&127));
   }

   public method getEQ3LowFreq() : byte {
      return ((data.peekI8($53)&1)<<7) | (data.peekI8($54)&127);
   }

   public method setEQ3LowGain(byte _v) {
      data.pokeI8($55, _v);
   }

   public method getEQ3LowGain() : byte {
      return data.peekI8($55);
   }

   public method setEQ3MidFreq(byte _v) {
      data.pokeI8($57, (_v >> 7)&1);
      data.pokeI8($58, (_v&127));
   }

   public method getEQ3MidFreq() : byte {
      return ((data.peekI8($57)&1)<<7) | (data.peekI8($58)&127);
   }

   public method setEQ3MidGain(byte _v) {
      data.pokeI8($59, _v);
   }

   public method getEQ3MidGain() : byte {
      return data.peekI8($59);
   }

   public method setEQ3MidQ(byte _v) {
      data.pokeI8($5A, _v);
   }

   public method getEQ3MidQ() : byte {
      return data.peekI8($5A);
   }

   public method setEQ3HighFreq(byte _v) {
      data.pokeI8($5B, (_v >> 7)&1);
      data.pokeI8($5C, (_v&127));
   }

   public method getEQ3HighFreq() : byte {
      return ((data.peekI8($5B)&1)<<7) | (data.peekI8($5C)&127);
   }

   public method setEQ3HighGain(byte _v) {
      data.pokeI8($5D, _v);
   }

   public method getEQ3HighGain() : byte {
      return data.peekI8($5D);
   }

   public method setVelocityLimitLow(byte _v) {
      data.pokeI8($1C, _v);
   }

   public method getVelocityLimitLow() : byte {
      return data.peekI8($1C);
   }

   public method setVelocityLimitHigh(byte _v) {
      data.pokeI8($1D, _v);
   }

   public method getVelocityLimitHigh() : byte {
      return data.peekI8($1D);
   }

   public method setNoteLimitLow(byte _v) {
      data.pokeI8($1E, _v);
   }

   public method getNoteLimitLow() : byte {
      return data.peekI8($1E);
   }

   public method setNoteLimitHigh(byte _v) {
      data.pokeI8($1F, _v);
   }

   public method getNoteLimitHigh() : byte {
      return data.peekI8($1F);
   }

   public method setVelocitySenseDepth(byte _v) {
      data.pokeI8($22, _v);
   }

   public method getVelocitySenseDepth() : byte {
      return data.peekI8($22);
   }

   public method setVelocitySenseOffset(byte _v) {
      data.pokeI8($23, _v);
   }

   public method getVelocitySenseOffset() : byte {
      return data.peekI8($23);
   }

   public method setPitchBendRangeUpper(byte _v) {
      // -48 .. +24 => $10..$58
      data.pokeI8($20, _v + 64);
   }

   public method getPitchBendRangeUpper() : byte {
      return data.peekI8($20) - 64;
   }

   public method setPitchBendRangeLower(byte _v) {
      // -48 .. +24 => $10..$58
      data.pokeI8($21, _v + 64);
   }

   public method getPitchBendRangeLower() : byte {
      return data.peekI8($21) - 64;
   }

   public method setPortamentoSwitch(byte _v) {
      data.pokeI8($31, _v & 1);
   }

   public method getPortamentoSwitch() : byte {
      return data.peekI8($31) & 1;
   }

   public method setPortamentoTime(byte _v) {
      // 0..127
      data.pokeI8($32, _v);
   }

   public method getPortamentoTime() : byte {
      return data.peekI8($32);
   }

   public method setPortamentoMode(byte _v) {
      // 0:fingered, 1:full-time
      data.pokeI8($33, _v);
   }

   public method getPortamentoMode() : byte {
      return data.peekI8($33);
   }

   public method setPortamentoTimeMode(byte _v) {
      // 0:Rate 1  1:Time 1  2:Rate 2  3:Time 2
      data.pokeI8($34, _v);
   }

   public method getPortamentoTimeMode() : byte {
      return data.peekI8($34);
   }

   public method setPolySwitch(byte _v) {
      data.pokeI8($36, _v & 1);
   }

   public method getPolySwitch() : byte {
      return data.peekI8($36) & 1;
   }

   public method setOutput(byte _v) {
      data.pokeI8($3F, _v);
   }

   public method getOutput() : byte {
      return data.peekI8($3F);
   }

   public method setAEGAttackTime(byte _v) {
      data.pokeI8($46, _v + 64);
   }

   public method getAEGAttackTime() : byte {
      return data.peekI8($46) - 64;
   }

   public method setAEGDecayTime(byte _v) {
      data.pokeI8($47, _v + 64);
   }

   public method getAEGDecayTime() : byte {
      return data.peekI8($47) - 64;
   }

   public method setAEGSustainLevel(byte _v) {
      data.pokeI8($48, _v + 64);
   }

   public method getAEGSustainLevel() : byte {
      return data.peekI8($48) - 64;
   }

   public method setAEGReleaseTime(byte _v) {
      data.pokeI8($49, _v + 64);
   }

   public method getAEGReleaseTime() : byte {
      return data.peekI8($49) - 64;
   }

   public method setFEGAttackTime(byte _v) {
      data.pokeI8($4A, _v + 64);
   }

   public method getFEGAttackTime() : byte {
      return data.peekI8($4A) - 64;
   }

   public method setFEGDecayTime(byte _v) {
      data.pokeI8($4B, _v + 64);
   }

   public method getFEGDecayTime() : byte {
      return data.peekI8($4B) - 64;
   }

   public method setFEGSustainLevel(byte _v) {
      data.pokeI8($4C, _v + 64);
   }

   public method getFEGSustainLevel() : byte {
      return data.peekI8($4C) - 64;
   }

   public method setFEGReleaseTime(byte _v) {
      data.pokeI8($4D, _v + 64);
   }

   public method getFEGReleaseTime() : byte {
      return data.peekI8($4D) - 64;
   }

   public method setFEGDepth(byte _v) {
      data.pokeI8($4E, _v + 64);
   }

   public method getFEGDepth() : byte {
      return data.peekI8($4E) - 64;
   }

   public method setFilterCutoff(byte _v) {
      data.pokeI8($50, _v + 64);
   }

   public method getFilterCutoff() : byte {
      return data.peekI8($50) - 64;
   }

   public method setFilterRes(byte _v) {
      data.pokeI8($51, _v + 64);
   }

   public method getFilterRes() : byte {
      return data.peekI8($51) - 64;
   }

   public method setAssignableKnobValueByIdx(local byte _knobIdx, local byte _v) {
      // trace "xxx MontagePart::setAssignableKnobValueByIdx: part_idx="+part_idx+" knobIdx="+_knobIdx+" v="+_v;
      data.pokeI8($6A + (_knobIdx&7), _v);
   }

   public method invalidateReplayAssignableKnobValueByIdx(local byte _knobIdx) {
      replay_data_valid.pokeI8($6A + (_knobIdx&7), false);
      b_replay_valid = false;
   }

   public method getAssignableKnobValueByIdx(local byte _knobIdx) : byte {
      return data.peekI8($6A + (_knobIdx&7));
   }

   public method setEnvelopeFollowerGain(byte _v) {
      // $10..$70 => -24dB .. +24dB (increments of 0.5)
      data.pokeI8($2E, _v + $10);
   }

   public method getEnvelopeFollowerGain() : byte {
      return data.peekI8($2E) - $10;
   }

   public method setEnvelopeFollowerAttack(byte _v) {
      // 0..$13 => 1ms - 40ms
      data.pokeI8($2F, _v);
   }

   public method getEnvelopeFollowerAttack() : byte {
      return data.peekI8($2F);
   }

   public method setEnvelopeFollowerRelease(byte _v) {
      // 0..$F => 10ms - 680ms
      data.pokeI8($30, _v);
   }

   public method getEnvelopeFollowerRelease() : byte {
      return data.peekI8($30);
   }

   public method initFromSyxInsertA(Buffer _bufRecv) {
      insert_a.initFromSyx(_bufRecv);
   }

   public method initFromSyxInsertB(Buffer _bufRecv) {
      insert_b.initFromSyx(_bufRecv);
   }

   public method initFromSyxLFO(Buffer _bufRecv) {
      lfo.initFromSyx(_bufRecv);
   }

   public method initFromSyxZoneSetting(Buffer _bufRecv) {
      zone_setting.initFromSyx(_bufRecv);
   }

   public method initFromSyxAssignableKnobName(Buffer _bufRecv) {
      assignable_knob_name.initFromSyx(_bufRecv);
   }

   public method initFromSyxController_1_13(Buffer _bufRecv) {
      controller_1_13.initFromSyx(_bufRecv);
   }

   public method initFromSyxController_14_16(Buffer _bufRecv) {
      controller_14_16.initFromSyx(_bufRecv);
   }

   public method initFromSyxArpeggioPart(Buffer _bufRecv) {
      arpeggio_part.initFromSyx(_bufRecv);
   }

   public method initFromSyxMotionSeqLaneSettings(Buffer _bufRecv) {
      motionseq_lane_settings.initFromSyx(_bufRecv);
   }

   public method initFromSyxMotionSeqLaneSequence(Buffer _bufRecv, int _laneIdx, int _seqIdx) {
      MontageMotionSeqLaneSequence mseq <= motionseq_lane_sequences.get(_laneIdx*8 + _seqIdx);
      mseq.initFromSyx(_bufRecv);
   }

   public method initFromSyxScenePart(Buffer _bufRecv, int _sceneIdx) {
      MontageScenePart sp <= scene_parts[_sceneIdx];
      sp.initFromSyx(_bufRecv);
   }

   // <save.png>
   public virtual saveState(Stream ofs) {
      ofs.i16 = 5; // ver
      ofs.writeBuffer(data, 0, data.offset);

      insert_a            .saveState(ofs);
      insert_b            .saveState(ofs);
      lfo                 .saveState(ofs);
      zone_setting        .saveState(ofs);
      assignable_knob_name.saveState(ofs);
      controller_1_13     .saveState(ofs);
      controller_14_16    .saveState(ofs);
      arpeggio_part       .saveState(ofs);
      motionseq_lane_settings.saveState(ofs);
      int laneIdx = 0;
      loop(4)
      {
         int seqIdx = 0;
         loop(8)
         {
            MontageMotionSeqLaneSequence mseq  <= motionseq_lane_sequences.get(laneIdx*8 + seqIdx);
            mseq.saveState(ofs);
            seqIdx++;
         }
         laneIdx++;
      }
      int sceneIdx = 0;
      loop(8)
      {
         MontageScenePart sp <= scene_parts[sceneIdx];
         sp.saveState(ofs);
         sceneIdx++;
      }

      // "Last copied" settings (editor only) (v2+)
      ofs.i16 = last_copied_patch_idx;       // v2+
      ofs.i8  = last_copied_patch_part_idx;  // v3+
      ofs.i8  = last_copied_patch_var_idx;   // v4+
      ofs.i16 = last_copied_peq_idx;         // v2+
      ofs.i8  = last_copied_peq_part_idx;    // v3+
      ofs.i8  = last_copied_peq_var_idx;     // v4+
      ofs.i16 = last_copied_pfx_idx;         // v2+
      ofs.i8  = last_copied_pfx_part_idx;    // v3+
      ofs.i8  = last_copied_pfx_var_idx;     // v4+
      ofs.i16 = last_copied_mfx_idx;

      ofs.i8 = star_rating; // v5+

   }

   // <load.png>
   public virtual loadState(Stream ifs) : boolean {
      short ver = ifs.u16;
      if(ver >= 1)
      {
         ifs.readBuffer(data, 0, data.offset, false/*bResize*/);

         if(!insert_a            .loadState(ifs))
            return false;
         if(!insert_b            .loadState(ifs))
            return false;
         if(!lfo                 .loadState(ifs))
            return false;
         if(!zone_setting        .loadState(ifs))
            return false;
         if(!assignable_knob_name.loadState(ifs))
            return false;
         if(!controller_1_13     .loadState(ifs))
            return false;
         if(!controller_14_16    .loadState(ifs))
            return false;
         if(!arpeggio_part       .loadState(ifs))
            return false;
         if(!motionseq_lane_settings.loadState(ifs))
            return false;
         int laneIdx = 0;
         loop(4)
         {
            int seqIdx = 0;
            loop(8)
            {
               MontageMotionSeqLaneSequence mseq  <= motionseq_lane_sequences.get(laneIdx*8 + seqIdx);
               if(!mseq.loadState(ifs))
                  return false;
               seqIdx++;
            }
            laneIdx++;
         }
         int sceneIdx = 0;
         loop(8)
         {
            MontageScenePart sp <= scene_parts[sceneIdx];
            if(!sp.loadState(ifs))
               return false;
            sceneIdx++;
         }

         if(ver >= 2)
         {
            // "Last copied" settings (editor only) (v2+)
            last_copied_patch_idx = ifs.s16;
            if(ver >= 3)
               last_copied_patch_part_idx = ifs.s8;  // v3+
            if(ver >= 4)
               last_copied_patch_var_idx = ifs.s8;  // v4+

            last_copied_peq_idx   = ifs.s16;
            if(ver >= 3)
               last_copied_peq_part_idx = ifs.s8;  // v3+
            if(ver >= 4)
               last_copied_peq_var_idx = ifs.s8;  // v4+

            last_copied_pfx_idx   = ifs.s16;
            if(ver >= 3)
               last_copied_pfx_part_idx = ifs.s8;  // v3+
            if(ver >= 4)
               last_copied_pfx_var_idx = ifs.s8;  // v4+

            last_copied_mfx_idx   = ifs.s16;
         }

         if(ver >= 5)
         {
            star_rating = ifs.u8; // v5+
         }

         return true;
      }
      else
      {
         trace "[---] "+yacMetaClassName()+"::loadState: invalid ver="+ver;
      }
      return false;
   }

}

// <class.png>
class MontagePartNormalElementOscAmpPitch : MontageData {
   // p.221
   // Oscillator + Amplitude + Pitch
   int part_idx;
   int element_idx;

   Montage_EGMixerSettings eg_mixer_settings_peg;
   Montage_EGMixerSettings eg_mixer_settings_aeg;


   public method init(int _partIdx, int _elementIdx) {
      part_idx    = _partIdx;
      element_idx = _elementIdx;
      allocData(103,  // $67
                [$00, 1, G_SOUND,  // Element Switch
                 $01, 1, G_SOUND,  // Wave Select
                 $02, 1, G_SOUND,  // Element Group Number
                 $03, 2, G_SOUND,  // Wave Number
                 $08, 1, G_SOUND,  // Element Pan
                 $09, 1, G_SOUND,  // Random Pan Depth
                 $0A, 1, G_SOUND,  // Alternate Pan Depth
                 $0B, 1, G_SOUND,  // Scaling Pan Depth
                 $0C, 1, G_SOUND,  // XA Control
                 $0D, 1, G_SOUND,  // Note Limit Low
                 $0E, 1, G_SOUND,  // Note Limit High
                 $0F, 1, G_SOUND,  // Velocity Limit Low
                 $10, 1, G_SOUND,  // Velocity Limit High
                 $11, 1, G_SOUND,  // Velocity Cross Fade
                 $12, 1, G_SOUND,  // Key On Delay Time Length
                 $13, 1, G_SOUND,  // Key On Delay Tempo Sync Switch
                 // $14 ?
                 // $15 ?
                 // $16 ?
                 $17, 1, G_SOUND,  // Element Connection Switch (Thru, InsA, InsB)
                 // $18 ?
                 $19, 5, G_SOUND,  // Controller Set 1-16 Element Switch
                 // $1E ?
                 $1F, 1, G_SOUND,  // FW3.x+ Extended LFO flag (1=extended.speed=0-415(0-1356.59 Hz) 0=normal.speed=0-99(0-50.89 Hz)
                 $20, 2, G_SOUND,  // FW3.x+ Extended LFO Speed (0..415)
                 // $22 ?
                 $23, 2, G_SOUND,  // Part LFO Element Switch
                 $25, 1, G_SOUND,  // Key On Delay Note Length
                 $26, 1, G_SOUND,  // Half Damper Switch
                 // $27 ?
                 $28, 1, G_SOUND,  // Element Level
                 $29, 1, G_SOUND,  // Level Velocity Sensitivity
                 $2A, 1, G_SOUND,  // Level Velocity Offset
                 $2B, 1, G_SOUND,  // Level Sensitivity Key Curve
                 // $2C ?
                 $2D, 1, G_SOUND,  // AEG Attack Time
                 $2E, 1, G_SOUND,  // AEG Decay 1 Time
                 $2F, 1, G_SOUND,  // AEG Decay 2 Time
                 $30, 1, G_SOUND,  // Half Damper Time
                 $31, 1, G_SOUND,  // AEG Release Time
                 $32, 1, G_SOUND,  // AEG Initial Level
                 $33, 1, G_SOUND,  // AEG Attack Level
                 $34, 1, G_SOUND,  // AEG Decay 1 Level
                 $35, 1, G_SOUND,  // AEG Decay 2 Level
                 // $36 ?
                 $37, 1, G_SOUND,  // AEG Time Velocity Segment
                 $38, 1, G_SOUND,  // AEG Time Velocity Sensitivity
                 $39, 1, G_SOUND,  // AEG Time Key Follow Sensitivity
                 $3A, 1, G_SOUND,  // AEG Time Key Follow Center Note
                 $3B, 1, G_SOUND,  // Level Scaling Break Point 1
                 $3C, 1, G_SOUND,  // Level Scaling Break Point 2
                 $3D, 1, G_SOUND,  // Level Scaling Break Point 3
                 $3E, 1, G_SOUND,  // Level Scaling Break Point 4
                 $3F, 2, G_SOUND,  // Level Scaling Offset 1
                 $41, 2, G_SOUND,  // Level Scaling Offset 2
                 $43, 2, G_SOUND,  // Level Scaling Offset 3
                 $45, 2, G_SOUND,  // Level Scaling Offset 4
                 $47, 1, G_SOUND,  // Level Key Follow Sensitivity
                 $48, 1, G_SOUND,  // AEG Time Key Follow Sensitivity Release Adjustment
                 $49, 1, G_SOUND,  // Coarse Tune
                 $4A, 1, G_SOUND,  // Fine Tune
                 $4B, 1, G_SOUND,  // Pitch Velocity Sensitivity
                 // $4C ?
                 $4D, 1, G_SOUND,  // Random Pitch Depth
                 $4E, 1, G_SOUND,  // Pitch Key Follow Sensitivity
                 $4F, 1, G_SOUND,  // Pitch Key Follow Sensitivity Center Note
                 $50, 1, G_SOUND,  // Fine Tune Key Follow Scaling Sensitivity
                 $51, 1, G_SOUND,  // PEG Hold Time
                 $52, 1, G_SOUND,  // PEG Attack Time
                 $53, 1, G_SOUND,  // PEG Decay 1 Time
                 $54, 1, G_SOUND,  // PEG Decay 2 Time
                 $55, 1, G_SOUND,  // PEG Release Time
                 $56, 2, G_SOUND,  // PEG Hold Level
                 $58, 2, G_SOUND,  // PEG Attack Level
                 $5A, 2, G_SOUND,  // PEG Decay 1 Level
                 $5C, 2, G_SOUND,  // PEG Decay 2 Level
                 $5E, 2, G_SOUND,  // PEG Release Level
                 $60, 1, G_SOUND,  // PEG Depth
                 $61, 1, G_SOUND,  // PEG Time Velocity Sensitivity Segment
                 $62, 1, G_SOUND,  // PEG Time Velocity Sensitivity
                 $63, 1, G_SOUND,  // PEG Depth Velocity Sensitivity
                 $64, 1, G_SOUND,  // PEG Depth Velocity Sensitivity Curve
                 $65, 1, G_SOUND,  // PEG Time Key Follow Sensitivity
                 $66, 1, G_SOUND,  // PEG Time Key Follow Sensitivity Center Note
                 ]
                );
   }

   public virtual send(MontagePartNormalElementOscAmpPitch _replayPartNormalElementOscAmpPitch, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      if(_bSendAll || replayDiffers(_replayPartNormalElementOscAmpPitch))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($41, (element_idx<<4)|part_idx, _replayPartNormalElementOscAmpPitch, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($41, (element_idx<<4)|part_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayPartNormalElementOscAmpPitch);
         }
      }

      return _numDiffsLeft;
   }

   public virtual copyFrom(MontagePartNormalElementOscAmpPitch _o) {
      MontageData::copyFrom(_o);

      eg_mixer_settings_peg = _o.eg_mixer_settings_peg;
      eg_mixer_settings_aeg = _o.eg_mixer_settings_aeg;
   }

   public method saveAEGPreset(Montage_EGPreset _preset) {
      _preset.eg_mixer_settings = eg_mixer_settings_aeg;
      _preset.hl  = Montage_EGPreset.EGNormUni(getAEGInitialLevel());
      _preset.al  = Montage_EGPreset.EGNormUni(getAEGAttackLevel());
      _preset.d1l = Montage_EGPreset.EGNormUni(getAEGDecay1Level());
      _preset.d2l = Montage_EGPreset.EGNormUni(getAEGDecay2Level());
      _preset.rl  = 0;
      _preset.ht  = 0;
      _preset.at  = Montage_EGPreset.EGNormUni(getAEGAttackTime());
      _preset.d1t = Montage_EGPreset.EGNormUni(getAEGDecay1Time());
      _preset.d2t = Montage_EGPreset.EGNormUni(getAEGDecay2Time());
      _preset.rt  = Montage_EGPreset.EGNormUni(getAEGReleaseTime());
   }

   public method loadAEGPreset(Montage_EGPreset _preset) {
      eg_mixer_settings_aeg = _preset.eg_mixer_settings;

      setAEGInitialLevel(Montage_EGPreset.EGToUni(_preset.hl));
      setAEGAttackLevel (Montage_EGPreset.EGToUni(_preset.al));
      setAEGDecay1Level (Montage_EGPreset.EGToUni(_preset.d1l));
      setAEGDecay2Level (Montage_EGPreset.EGToUni(_preset.d2l));
      // // setAEGReleaseLevel(Montage_EGPreset.EGToBi(_preset.rl));

      // // setAEGHoldTime   (Montage_EGPreset.EGToUni(_preset.ht));
      setAEGAttackTime (Montage_EGPreset.EGToUni(_preset.at));
      setAEGDecay1Time (Montage_EGPreset.EGToUni(_preset.d1t));
      setAEGDecay2Time (Montage_EGPreset.EGToUni(_preset.d2t));
      setAEGReleaseTime(Montage_EGPreset.EGToUni(_preset.rt));
   }

   public method savePEGPreset(Montage_EGPreset _preset) {
      _preset.eg_mixer_settings = eg_mixer_settings_peg;
      _preset.hl  = Montage_EGPreset.EGNormBi(getPEGHoldLevel());
      _preset.al  = Montage_EGPreset.EGNormBi(getPEGAttackLevel());
      _preset.d1l = Montage_EGPreset.EGNormBi(getPEGDecay1Level());
      _preset.d2l = Montage_EGPreset.EGNormBi(getPEGDecay2Level());
      _preset.rl  = Montage_EGPreset.EGNormBi(getPEGReleaseLevel());
      _preset.ht  = Montage_EGPreset.EGNormBi(getPEGHoldTime());
      _preset.at  = Montage_EGPreset.EGNormUni(getPEGAttackTime());
      _preset.d1t = Montage_EGPreset.EGNormUni(getPEGDecay1Time());
      _preset.d2t = Montage_EGPreset.EGNormUni(getPEGDecay2Time());
      _preset.rt  = Montage_EGPreset.EGNormUni(getPEGReleaseTime());
   }

   public method loadPEGPreset(Montage_EGPreset _preset) {
      eg_mixer_settings_peg = _preset.eg_mixer_settings;

      setPEGHoldLevel   (Montage_EGPreset.EGToBi(_preset.hl));
      setPEGAttackLevel (Montage_EGPreset.EGToBi(_preset.al));
      setPEGDecay1Level (Montage_EGPreset.EGToBi(_preset.d1l));
      setPEGDecay2Level (Montage_EGPreset.EGToBi(_preset.d2l));
      setPEGReleaseLevel(Montage_EGPreset.EGToBi(_preset.rl));

      setPEGHoldTime   (Montage_EGPreset.EGToUni(_preset.ht));
      setPEGAttackTime (Montage_EGPreset.EGToUni(_preset.at));
      setPEGDecay1Time (Montage_EGPreset.EGToUni(_preset.d1t));
      setPEGDecay2Time (Montage_EGPreset.EGToUni(_preset.d2t));
      setPEGReleaseTime(Montage_EGPreset.EGToUni(_preset.rt));
   }

   public method setElementSwitch(byte _v) {
      data.pokeI8($00, _v);
   }

   public method getElementSwitch() : byte {
      return data.peekI8($00);
   }

   public method setWaveSelect(byte _v) {
      // 0 = Preset, 1 = User, 2 - 9 = Library1 - 8
      data.pokeI8($01, _v);
   }

   public method getWaveSelect() : byte {
      return data.peekI8($01);
   }

   public method setElementGroupNumber(byte _v) {
      data.pokeI8($02, _v);
   }

   public method getElementGroupNumber() : byte {
      return data.peekI8($02);
   }

   public method setWaveNumber(short _v) {
      data.pokeI8($03, (_v>>7)&127);
      data.pokeI8($04, (_v&127));
   }

   public method getWaveNumber() : short {
      return (data.peekI8($03) << 7) | (data.peekI8($04));
   }

   public method setElementPan(byte _v) {
      data.pokeI8($08, _v + 64);
   }

   public method getElementPan() : byte {
      return data.peekI8($08) - 64;
   }

   public method setRandomPanDepth(byte _v) {
      data.pokeI8($09, _v);
   }

   public method getRandomPanDepth() : byte {
      return data.peekI8($09);
   }

   public method setAlternatePanDepth(byte _v) {
      data.pokeI8($0A, _v + 64);
   }

   public method getAlternatePanDepth() : byte {
      return data.peekI8($0A) - 64;
   }

   public method setScalingPanDepth(byte _v) {
      data.pokeI8($0B, _v + 64);
   }

   public method getScalingPanDepth() : byte {
      return data.peekI8($0B) - 64;
   }

   public method setXAControl(byte _v) {
      // 0..7 => Normal, Legato, Key Off, Cycle, Random, A.SW Off, A.SW1 On, A.SW2 On
      data.pokeI8($0C, _v);
   }

   public method getXAControl() : byte {
      return data.peekI8($0C);
   }

   public method setNoteLimitLow(byte _v) {
      data.pokeI8($0D, _v);
   }

   public method getNoteLimitLow() : byte {
      return data.peekI8($0D);
   }

   public method setNoteLimitHigh(byte _v) {
      data.pokeI8($0E, _v);
   }

   public method getNoteLimitHigh() : byte {
      return data.peekI8($0E);
   }

   public method setVelocityLimitLow(byte _v) {
      data.pokeI8($0F, _v);
   }

   public method getVelocityLimitLow() : byte {
      return data.peekI8($0F);
   }

   public method setVelocityLimitHigh(byte _v) {
      data.pokeI8($10, _v);
   }

   public method getVelocityLimitHigh() : byte {
      return data.peekI8($10);
   }

   public method setVelocityCrossFade(byte _v) {
      data.pokeI8($11, _v);
   }

   public method getVelocityCrossFade() : byte {
      return data.peekI8($11);
   }

   public method setKeyOnDelayTimeLength(byte _v) {
      data.pokeI8($12, _v);
   }

   public method getKeyOnDelayTimeLength() : byte {
      return data.peekI8($12);
   }

   public method setKeyOnDelayTempoSyncSwitch(byte _v) {
      data.pokeI8($13, _v & 1);
   }

   public method getKeyOnDelayTempoSyncSwitch() : byte {
      return data.peekI8($13) & 1;
   }

   public method setElementConnectionSwitch(byte _v) {
      // 0..2 => Thru, InsA, InsB
      data.pokeI8($17, _v);
   }

   public method getElementConnectionSwitch() : byte {
      return data.peekI8($17);
   }

   public method setControllerSetBox(byte idx, byte _v) {
      // idx: 0..15   v: 0,1
      byte addr;
      if(idx >= 14)
      {
         addr = $1B;
         idx -= 14;
      }
      else if(idx >= 7)
      {
         addr = $1C;
         idx -= 7;
      }
      else
      {
         addr = $1D;
      }
      _v = (data.peekI8(addr) & ~(1 << idx)) | ((_v&1) << idx);
      data.pokeI8(addr, _v);
   }

   public method getControllerSetBox(byte idx) : byte {
      byte addr;
      if(idx >= 14)
      {
         addr = $1B;
         idx -= 14;
      }
      else if(idx >= 7)
      {
         addr = $1C;
         idx -= 7;
      }
      else
      {
         addr = $1D;
      }
      return (0 != (data.peekI8(addr) & (1 << idx)));
   }

   public method setControllerSetBox1(byte _v) {        setControllerSetBox(1-1, _v); }
   public method getControllerSetBox1() : byte { return getControllerSetBox(1-1);     }

   public method setControllerSetBox2(byte _v) {        setControllerSetBox(2-1, _v); }
   public method getControllerSetBox2() : byte { return getControllerSetBox(2-1);     }

   public method setControllerSetBox3(byte _v) {        setControllerSetBox(3-1, _v); }
   public method getControllerSetBox3() : byte { return getControllerSetBox(3-1);     }

   public method setControllerSetBox4(byte _v) {        setControllerSetBox(4-1, _v); }
   public method getControllerSetBox4() : byte { return getControllerSetBox(4-1);     }

   public method setControllerSetBox5(byte _v) {        setControllerSetBox(5-1, _v); }
   public method getControllerSetBox5() : byte { return getControllerSetBox(5-1);     }

   public method setControllerSetBox6(byte _v) {        setControllerSetBox(6-1, _v); }
   public method getControllerSetBox6() : byte { return getControllerSetBox(6-1);     }

   public method setControllerSetBox7(byte _v) {        setControllerSetBox(7-1, _v); }
   public method getControllerSetBox7() : byte { return getControllerSetBox(7-1);     }

   public method setControllerSetBox8(byte _v) {        setControllerSetBox(8-1, _v); }
   public method getControllerSetBox8() : byte { return getControllerSetBox(8-1);     }

   public method setControllerSetBox9(byte _v) {        setControllerSetBox(9-1, _v); }
   public method getControllerSetBox9() : byte { return getControllerSetBox(9-1);     }

   public method setControllerSetBox10(byte _v) {        setControllerSetBox(10-1, _v); }
   public method getControllerSetBox10() : byte { return getControllerSetBox(10-1);     }

   public method setControllerSetBox11(byte _v) {        setControllerSetBox(11-1, _v); }
   public method getControllerSetBox11() : byte { return getControllerSetBox(11-1);     }

   public method setControllerSetBox12(byte _v) {        setControllerSetBox(12-1, _v); }
   public method getControllerSetBox12() : byte { return getControllerSetBox(12-1);     }

   public method setControllerSetBox13(byte _v) {        setControllerSetBox(13-1, _v); }
   public method getControllerSetBox13() : byte { return getControllerSetBox(13-1);     }

   public method setControllerSetBox14(byte _v) {        setControllerSetBox(14-1, _v); }
   public method getControllerSetBox14() : byte { return getControllerSetBox(14-1);     }

   public method setControllerSetBox15(byte _v) {        setControllerSetBox(15-1, _v); }
   public method getControllerSetBox15() : byte { return getControllerSetBox(15-1);     }

   public method setControllerSetBox16(byte _v) {        setControllerSetBox(16-1, _v); }
   public method getControllerSetBox16() : byte { return getControllerSetBox(16-1);     }

   // (todo) Part LFO Element Switch

   public method setExtendedLFOSwitch(byte _v) {
      data.pokeI8($1F, _v);
   }

   public method getExtendedLFOSwitch() : byte {
      return data.peekI8($1F);
   }

   public method setExtendedLFOSpeed(short _v) {
      // 0..415 => 0..1356.59 Hz
      data.pokeI8($20, (_v >> 7) & 127);
      data.pokeI8($21, _v & 127);
   }

   public method invalidateReplayExtendedLFOSpeed() {
      replay_data_valid.pokeI8($20, false);
      b_replay_valid = false;
   }

   public method getExtendedLFOSpeed() : short {
      return ((data.peekI8($20) << 7) | data.peekI8($21));
   }

   public method setKeyOnDelayNoteLength(byte _v) {
      // 5-21 => (16th, 8th/3, 16th., 8th, 4th/3, 8th., 4th, 2th/3, 4th., 2nd, Whole/3, 2nd., 4thX4, 4thX5, 4thX6, 4thX7, 4thX8)
      data.pokeI8($25, _v);
   }

   public method getKeyOnDelayNoteLength() : byte {
      return data.peekI8($25);
   }

   public method setHalfDamperSwitch(byte _v) {
      data.pokeI8($26, _v);
   }

   public method getHalfDamperSwitch() : byte {
      return data.peekI8($26);
   }

   public method setElementLevel(byte _v) {
      data.pokeI8($28, _v);
   }

   public method getElementLevel() : byte {
      return data.peekI8($28);
   }

   public method setLevelVelocitySensitivity(byte _v) {
      data.pokeI8($29, _v + 64);
   }

   public method getLevelVelocitySensitivity() : byte {
      return data.peekI8($29) - 64;
   }

   public method setLevelVelocityOffset(byte _v) {
      data.pokeI8($2A, _v);
   }

   public method getLevelVelocityOffset() : byte {
      return data.peekI8($2A);
   }

   public method setLevelSensitivityCurve(byte _v) {
      // 0..4
      data.pokeI8($2B, _v);
   }

   public method getLevelSensitivityCurve() : byte {
      return data.peekI8($2B);
   }

   public method setAEGAttackTime(byte _v) {
      data.pokeI8($2D, _v);
   }

   public method getAEGAttackTime() : byte {
      return data.peekI8($2D);
   }

   public method setAEGDecay1Time(byte _v) {
      data.pokeI8($2E, _v);
   }

   public method getAEGDecay1Time() : byte {
      return data.peekI8($2E);
   }

   public method setAEGDecay2Time(byte _v) {
      data.pokeI8($2F, _v);
   }

   public method getAEGDecay2Time() : byte {
      return data.peekI8($2F);
   }

   public method setHalfDamperTime(byte _v) {
      data.pokeI8($30, _v);
   }

   public method getHalfDamperTime() : byte {
      return data.peekI8($30);
   }

   public method setAEGReleaseTime(byte _v) {
      data.pokeI8($31, _v);
   }

   public method getAEGReleaseTime() : byte {
      return data.peekI8($31);
   }

   public method setAEGInitialLevel(byte _v) {
      data.pokeI8($32, _v);
   }

   public method getAEGInitialLevel() : byte {
      return data.peekI8($32);
   }

   public method setAEGAttackLevel(byte _v) {
      data.pokeI8($33, _v);
   }

   public method getAEGAttackLevel() : byte {
      return data.peekI8($33);
   }

   public method setAEGDecay1Level(byte _v) {
      data.pokeI8($34, _v);
   }

   public method getAEGDecay1Level() : byte {
      return data.peekI8($34);
   }

   public method setAEGDecay2Level(byte _v) {
      data.pokeI8($35, _v);
   }

   public method getAEGDecay2Level() : byte {
      return data.peekI8($35);
   }

   public method setAEGTimeVelocitySegment(byte _v) {
      // 0..4
      data.pokeI8($37, _v);
   }

   public method getAEGTimeVelocitySegment() : byte {
      return data.peekI8($37);
   }

   public method setAEGTimeVelocitySensitivity(byte _v) {
      data.pokeI8($38, _v + 64);
   }

   public method getAEGTimeVelocitySensitivity() : byte {
      return data.peekI8($38) - 64;
   }

   public method setAEGTimeKeyFollowSensitivity(byte _v) {
      data.pokeI8($39, _v + 64);
   }

   public method getAEGTimeKeyFollowSensitivity() : byte {
      return data.peekI8($39) - 64;
   }

   public method setAEGTimeKeyFollowCenterNote(byte _v) {
      data.pokeI8($3A, _v);
   }

   public method getAEGTimeKeyFollowCenterNote() : byte {
      return data.peekI8($3A);
   }

   public method setLevelScalingBreakPoint1(byte _v) {
      data.pokeI8($3B, _v);
   }

   public method getLevelScalingBreakPoint1() : byte {
      return data.peekI8($3B);
   }

   public method setLevelScalingBreakPoint2(byte _v) {
      data.pokeI8($3C, _v);
   }

   public method getLevelScalingBreakPoint2() : byte {
      return data.peekI8($3C);
   }

   public method setLevelScalingBreakPoint3(byte _v) {
      data.pokeI8($3D, _v);
   }

   public method getLevelScalingBreakPoint3() : byte {
      return data.peekI8($3D);
   }

   public method setLevelScalingBreakPoint4(byte _v) {
      data.pokeI8($3E, _v);
   }

   public method getLevelScalingBreakPoint4() : byte {
      return data.peekI8($3E);
   }

   public method setLevelScalingOffset1(short _v) {
      _v += 128;
      data.pokeI8($3F, (_v>>7)&127);
      data.pokeI8($40, (_v&127));
   }

   public method getLevelScalingOffset1() : short {
      return ((data.peekI8($3F) << 7) | (data.peekI8($40))) - 128;
   }

   public method setLevelScalingOffset2(short _v) {
      _v += 128;
      data.pokeI8($41, (_v>>7)&127);
      data.pokeI8($42, (_v&127));
   }

   public method getLevelScalingOffset2() : short {
      return ((data.peekI8($41) << 7) | (data.peekI8($42))) - 128;
   }

   public method setLevelScalingOffset3(short _v) {
      _v += 128;
      data.pokeI8($43, (_v>>7)&127);
      data.pokeI8($44, (_v&127));
   }

   public method getLevelScalingOffset3() : short {
      return ((data.peekI8($43) << 7) | (data.peekI8($44))) - 128;
   }

   public method setLevelScalingOffset4(short _v) {
      _v += 128;
      data.pokeI8($45, (_v>>7)&127);
      data.pokeI8($46, (_v&127));
   }

   public method getLevelScalingOffset4() : short {
      return ((data.peekI8($45) << 7) | (data.peekI8($46))) - 128;
   }

   public method setLevelKeyFollowSensitivity(byte _v) {
      data.pokeI8($47, _v + 64);
   }

   public method getLevelKeyFollowSensitivity() : byte {
      return data.peekI8($47) - 64;
   }

   public method setAEGTimeKeyFollowSensitivityReleaseAdjustment(byte _v) {
      data.pokeI8($48, _v);
   }

   public method getAEGTimeKeyFollowSensitivityReleaseAdjustment() : byte {
      return data.peekI8($48);
   }

   public method setCoarseTune(byte _v) {
      data.pokeI8($49, _v + 64);
   }

   public method getCoarseTune() : byte {
      return data.peekI8($49) - 64;
   }

   public method setFineTune(byte _v) {
      data.pokeI8($4A, _v + 64);
   }

   public method getFineTune() : byte {
      return data.peekI8($4A) - 64;
   }

   public method setPitchVelocitySensitivity(byte _v) {
      data.pokeI8($4B, _v + 64);
   }

   public method getPitchVelocitySensitivity() : byte {
      return data.peekI8($4B) - 64;
   }

   public method setRandomPitchDepth(byte _v) {
      data.pokeI8($4D, _v);
   }

   public method getRandomPitchDepth() : byte {
      return data.peekI8($4D);
   }

   public method setPitchKeyFollowSensitivity(byte _v) {
      // -200%..+200%
      data.pokeI8($4E, _v);
   }

   public method getPitchKeyFollowSensitivity() : byte {
      return data.peekI8($4E);
   }

   public method setPitchKeyFollowSensitivityCenterNote(byte _v) {
      // 0..127 => C-2..G-8
      data.pokeI8($4F, _v);
   }

   public method getPitchKeyFollowSensitivityCenterNote() : byte {
      return data.peekI8($4F);
   }

   public method setFineTuneKeyFollowScalingSensitivity(byte _v) {
      // 0..127 => -64..+63
      data.pokeI8($50, _v + 64);
   }

   public method getFineTuneKeyFollowScalingSensitivity() : byte {
      return data.peekI8($50) - 64;
   }

   public method setPEGHoldTime(byte _v) {
      data.pokeI8($51, _v);
   }

   public method getPEGHoldTime() : byte {
      return data.peekI8($51);
   }

   public method setPEGAttackTime(byte _v) {
      data.pokeI8($52, _v);
   }

   public method getPEGAttackTime() : byte {
      return data.peekI8($52);
   }

   public method setPEGDecay1Time(byte _v) {
      data.pokeI8($53, _v);
   }

   public method getPEGDecay1Time() : byte {
      return data.peekI8($53);
   }

   public method setPEGDecay2Time(byte _v) {
      data.pokeI8($54, _v);
   }

   public method getPEGDecay2Time() : byte {
      return data.peekI8($54);
   }

   public method setPEGReleaseTime(byte _v) {
      data.pokeI8($55, _v);
   }

   public method getPEGReleaseTime() : byte {
      return data.peekI8($55);
   }

   public method setPEGHoldLevel(byte _v) {
      // -128..127
      _v += 128;
      data.pokeI8($56, (_v >> 7) & 127);
      data.pokeI8($57, _v & 127);
   }

   public method getPEGHoldLevel() : byte {
      return ((data.peekI8($56) << 7) | data.peekI8($57)) - 128;
   }

   public method setPEGAttackLevel(byte _v) {
      // -128..127
      _v += 128;
      data.pokeI8($58, (_v >> 7) & 127);
      data.pokeI8($59, _v & 127);
   }

   public method getPEGAttackLevel() : byte {
      return ((data.peekI8($58) << 7) | data.peekI8($59)) - 128;
   }

   public method setPEGDecay1Level(byte _v) {
      // -128..127
      _v += 128;
      data.pokeI8($5A, (_v >> 7) & 127);
      data.pokeI8($5B, _v & 127);
   }

   public method getPEGDecay1Level() : byte {
      return ((data.peekI8($5A) << 7) | data.peekI8($5B)) - 128;
   }

   public method setPEGDecay2Level(byte _v) {
      // -128..127
      _v += 128;
      data.pokeI8($5C, (_v >> 7) & 127);
      data.pokeI8($5D, _v & 127);
   }

   public method getPEGDecay2Level() : byte {
      return ((data.peekI8($5C) << 7) | data.peekI8($5D)) - 128;
   }

   public method setPEGReleaseLevel(byte _v) {
      // -128..127
      _v += 128;
      data.pokeI8($5E, (_v >> 7) & 127);
      data.pokeI8($5F, _v & 127);
   }

   public method getPEGReleaseLevel() : byte {
      return ((data.peekI8($5E) << 7) | data.peekI8($5F)) - 128;
   }

   public method setPEGDepth(byte _v) {
      data.pokeI8($60, _v + 64);
   }

   public method getPEGDepth() : byte {
      return data.peekI8($60) - 64;
   }

   public method setPEGTimeVelocitySensitivitySegment(byte _v) {
      // 0..4 => Attack, Atk+Dcy, Decay, Atk+Rls, All
      data.pokeI8($61, _v);
   }

   public method getPEGTimeVelocitySensitivitySegment() : byte {
      return data.peekI8($61);
   }

   public method setPEGTimeVelocitySensitivity(byte _v) {
      data.pokeI8($62, _v + 64);
   }

   public method getPEGTimeVelocitySensitivity() : byte {
      return data.peekI8($62) - 64;
   }

   public method setPEGDepthVelocitySensitivity(byte _v) {
      // -64..63
      data.pokeI8($63, _v + 64);
   }

   public method getPEGDepthVelocitySensitivity() : byte {
      return data.peekI8($63) - 64;
   }

   public method setPEGDepthVelocitySensitivityCurve(byte _v) {
      // 0..4
      data.pokeI8($64, _v);
   }

   public method getPEGDepthVelocitySensitivityCurve() : byte {
      return data.peekI8($64);
   }

   public method setPEGTimeKeyFollowSensitivity(byte _v) {
      // -64..63
      data.pokeI8($65, _v + 64);
   }

   public method getPEGTimeKeyFollowSensitivity() : byte {
      return data.peekI8($65) - 64;
   }

   public method setPEGTimeKeyFollowSensitivityCenterNote(byte _v) {
      // 0..127 => C-2..G-8
      data.pokeI8($66, _v);
   }

   public method getPEGTimeKeyFollowSensitivityCenterNote() : byte {
      return data.peekI8($66);
   }

   // <save.png>
   public virtual saveState(Stream ofs) {
      ofs.i16 = 2; // ver
      saveStateData(ofs);

      // EG Mixer Settings (v2+)
      eg_mixer_settings_peg.saveState(ofs);  // v2+
      eg_mixer_settings_aeg.saveState(ofs);  // v2+

   }

   // <load.png>
   public virtual loadState(Stream ifs) : boolean {
      short ver = ifs.u16;
      if(ver >= 1)
      {
         if(loadStateData(ifs))
         {
            if(ver >= 2)
            {
               if(!eg_mixer_settings_peg.loadState(ifs))  // v2+
                  return false;

               if(!eg_mixer_settings_aeg.loadState(ifs))  // v2+
                  return false;
            }
            return true;
         }
      }
      else
      {
         trace "[---] MontagePartNormalElementOscAmpPitch::loadState: invalid ver="+ver;
      }
      return false;
   }

}

// <class.png>
class MontagePartNormalElementFilterEQLFO : MontageData {
   // Filter + EQ + LFO
   int part_idx;
   int element_idx;

   Montage_EGMixerSettings eg_mixer_settings_feg;


   public method init(int _partIdx, int _elementIdx) {
      part_idx = _partIdx;
      element_idx = _elementIdx;
      allocData(70,  // $46
                [$00, 1, G_SOUND,   // Filter Type
                 $01, 2, G_SOUND,   // Filter Cutoff Frequency
                 $03, 1, G_SOUND,   // Filter Cutoff Velocity Sensitivity
                 $05, 1, G_SOUND,   // Filter Resonance/Width
                 $06, 1, G_SOUND,   // Filter Resonance Velocity Sensitivity
                 $07, 2, G_SOUND,   // HPF Cutoff Frequency
                 $0A, 2, G_SOUND,   // Distance
                 $0C, 2, G_SOUND,   // Filter Gain
                 $0E, 1, G_SOUND,   // FEG Hold Time
                 $0F, 1, G_SOUND,   // FEG Attack Time
                 $10, 1, G_SOUND,   // FEG Decay 1 Time
                 $11, 1, G_SOUND,   // FEG Decay 2 Time
                 $12, 1, G_SOUND,   // FEG Release Time
                 $13, 2, G_SOUND,   // FEG Hold Level
                 $15, 2, G_SOUND,   // FEG Attack Level
                 $17, 2, G_SOUND,   // FEG Decay 1 Level
                 $19, 2, G_SOUND,   // FEG Decay 2 Level
                 $1B, 2, G_SOUND,   // FEG Release Level
                 $1D, 1, G_SOUND,   // FEG Depth
                 $1E, 1, G_SOUND,   // FEG Time Velocity Sensitivity Segment
                 $1F, 1, G_SOUND,   // FEG Time Velocity Sensitivity
                 $20, 1, G_SOUND,   // FEG Depth Velocity Sensitivity
                 $21, 1, G_SOUND,   // FEG Depth Velocity Sensitivity Curve
                 $22, 1, G_SOUND,   // FEG Time Key Follow Sensitivity
                 $23, 1, G_SOUND,   // FEG Time Key Follow Sensitivity Center Note
                 $24, 1, G_SOUND,   // Filter Cutoff Scaling Break Point 1
                 $25, 1, G_SOUND,   // Filter Cutoff Scaling Break Point 2
                 $26, 1, G_SOUND,   // Filter Cutoff Scaling Break Point 3
                 $27, 1, G_SOUND,   // Filter Cutoff Scaling Break Point 4
                 $28, 2, G_SOUND,   // Filter Cutoff Scaling Offset 1
                 $2A, 2, G_SOUND,   // Filter Cutoff Scaling Offset 2
                 $2C, 2, G_SOUND,   // Filter Cutoff Scaling Offset 3
                 $2E, 2, G_SOUND,   // Filter Cutoff Scaling Offset 4
                 $30, 1, G_SOUND,   // Filter Cutoff Key Follow Sensitivity
                 $31, 1, G_SOUND,   // HPF Cutoff Key Follow Sensitivity
                 $32, 1, G_SOUND,   // EQ Type
                 $33, 1, G_SOUND,   // EQ Q
                 $34, 2, G_SOUND,   // EQ 1 Frequency
                 $36, 1, G_SOUND,   // EQ 1 Gain
                 $37, 2, G_SOUND,   // EQ 2 Frequency
                 $39, 1, G_SOUND,   // EQ 2 Gain
                 $3A, 1, G_SOUND,   // LFO Wave
                 $3B, 1, G_SOUND,   // LFO Key On Reset
                 $3C, 1, G_SOUND,   // LFO Delay Time
                 $3D, 1, G_SOUND,   // LFO Speed
                 $3E, 1, G_SOUND,   // LFO Amplitude Modulation Depth
                 $3F, 1, G_SOUND,   // LFO Pitch Modulation Depth
                 $40, 1, G_SOUND,   // LFO Filter Modulation Depth
                 $41, 1, G_SOUND,   // LFO Fade In Time
                 $42, 1, G_SOUND,   // Part LFO Phase Offset
                 $43, 1, G_SOUND,   // Part LFO Destination 1 Ratio
                 $44, 1, G_SOUND,   // Part LFO Destination 2 Ratio
                 $45, 1, G_SOUND,   // Part LFO Destination 3 Ratio
                 ]
                );
   }

   public virtual send(MontagePartNormalElementFilterEQLFO _replayPartNormalElementFilterEQLFO, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      if(_bSendAll || replayDiffers(_replayPartNormalElementFilterEQLFO))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($42, (element_idx<<4)|part_idx, _replayPartNormalElementFilterEQLFO, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($42, (element_idx<<4)|part_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayPartNormalElementFilterEQLFO);
         }
      }

      return _numDiffsLeft;
   }

   public virtual copyFrom(MontagePartNormalElementFilterEQLFO _o) {
      MontageData::copyFrom(_o);

      eg_mixer_settings_feg = _o.eg_mixer_settings_feg;
   }

   public method saveFEGPreset(Montage_EGPreset _preset) {
      _preset.eg_mixer_settings = eg_mixer_settings_feg;
      _preset.hl  = Montage_EGPreset.EGNormBi(getFEGHoldLevel());
      _preset.al  = Montage_EGPreset.EGNormBi(getFEGAttackLevel());
      _preset.d1l = Montage_EGPreset.EGNormBi(getFEGDecay1Level());
      _preset.d2l = Montage_EGPreset.EGNormBi(getFEGDecay2Level());
      _preset.rl  = Montage_EGPreset.EGNormBi(getFEGReleaseLevel());
      _preset.ht  = Montage_EGPreset.EGNormUni(getFEGHoldTime());
      _preset.at  = Montage_EGPreset.EGNormUni(getFEGAttackTime());
      _preset.d1t = Montage_EGPreset.EGNormUni(getFEGDecay1Time());
      _preset.d2t = Montage_EGPreset.EGNormUni(getFEGDecay2Time());
      _preset.rt  = Montage_EGPreset.EGNormUni(getFEGReleaseTime());
   }

   public method loadFEGPreset(Montage_EGPreset _preset) {
      eg_mixer_settings_feg = _preset.eg_mixer_settings;

      setFEGHoldLevel   (Montage_EGPreset.EGToBi(_preset.hl));
      setFEGAttackLevel (Montage_EGPreset.EGToBi(_preset.al));
      setFEGDecay1Level (Montage_EGPreset.EGToBi(_preset.d1l));
      setFEGDecay2Level (Montage_EGPreset.EGToBi(_preset.d2l));
      setFEGReleaseLevel(Montage_EGPreset.EGToBi(_preset.rl));

      setFEGHoldTime   (Montage_EGPreset.EGToUni(_preset.ht));
      setFEGAttackTime (Montage_EGPreset.EGToUni(_preset.at));
      setFEGDecay1Time (Montage_EGPreset.EGToUni(_preset.d1t));
      setFEGDecay2Time (Montage_EGPreset.EGToUni(_preset.d2t));
      setFEGReleaseTime(Montage_EGPreset.EGToUni(_preset.rt));
   }

   public method setFilterType(byte _v) {
      // 0..21 => LPF24D, LPF24A, LPF18, LPF18s, LPF12+HPF12, LPF6+HPF12, HPF24D, HPF12, BPF12D, BPFw, BPF6, BEF12, BEF6, DualLPF, DualHPF, DualBPF, DualBEF, LPF12+BPF6, Thru
      data.pokeI8($00, _v);
   }

   public method getFilterType() : byte {
      return data.peekI8($00);
   }

   public method setFilterCutoffFrequency(short _v) {
      // 0..255
      data.pokeI8($01, (_v >> 7) & 127);
      data.pokeI8($02, _v & 127);
   }

   public method getFilterCutoffFrequency() : short {
      return (data.peekI8($01) << 7) | data.peekI8($02);
   }

   public method setFilterCutoffVelocitySensitivity(byte _v) {
      // -64..63
      data.pokeI8($03, _v + 64);
   }

   public method getFilterCutoffVelocitySensitivity() : byte {
      return data.peekI8($03) - 64;
   }

   public method setFilterResonanceWidth(byte _v) {
      data.pokeI8($05, _v);
   }

   public method getFilterResonanceWidth() : byte {
      return data.peekI8($05);
   }

   public method setFilterResonanceVelocitySensitivity(byte _v) {
      // -64..63
      data.pokeI8($06, _v + 64);
   }

   public method getFilterResonanceVelocitySensitivity() : byte {
      return data.peekI8($06) - 64;
   }

   public method setHPFCutoffFrequency(short _v) {
      // 0..255
      data.pokeI8($07, (_v >> 7) & 127);
      data.pokeI8($08, _v & 127);
   }

   public method getHPFCutoffFrequency() : short {
      return (data.peekI8($07) << 7) | data.peekI8($08);
   }

   public method setDistance(short _v) {
      // -128..+127
      _v += 128;
      data.pokeI8($0A, (_v >> 7) & 127);
      data.pokeI8($0B, _v & 127);
   }

   public method getDistance() : short {
      return ((data.peekI8($0A) << 7) | data.peekI8($0B)) - 128;
   }

   public method setFilterGain(short _v) {
      // 0..255
      data.pokeI8($0C, (_v >> 7) & 127);
      data.pokeI8($0D, _v & 127);
   }

   public method getFilterGain() : short {
      return (data.peekI8($0C) << 7) | data.peekI8($0D);
   }

   public method setFEGHoldTime(byte _v) {
      data.pokeI8($0E, _v);
   }

   public method getFEGHoldTime() : byte {
      return data.peekI8($0E);
   }

   public method setFEGAttackTime(byte _v) {
      data.pokeI8($0F, _v);
   }

   public method getFEGAttackTime() : byte {
      return data.peekI8($0F);
   }

   public method setFEGDecay1Time(byte _v) {
      data.pokeI8($10, _v);
   }

   public method getFEGDecay1Time() : byte {
      return data.peekI8($10);
   }

   public method setFEGDecay2Time(byte _v) {
      data.pokeI8($11, _v);
   }

   public method getFEGDecay2Time() : byte {
      return data.peekI8($11);
   }

   public method setFEGReleaseTime(byte _v) {
      data.pokeI8($12, _v);
   }

   public method getFEGReleaseTime() : byte {
      return data.peekI8($12);
   }

   public method setFEGHoldLevel(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($13, (_v >> 7) & 127);
      data.pokeI8($14, _v & 127);
   }

   public method getFEGHoldLevel() : short {
      return ((data.peekI8($13) << 7) | data.peekI8($14)) - 128;
   }

   public method setFEGAttackLevel(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($15, (_v >> 7) & 127);
      data.pokeI8($16, _v & 127);
   }

   public method getFEGAttackLevel() : short {
      return ((data.peekI8($15) << 7) | data.peekI8($16)) - 128;
   }

   public method setFEGDecay1Level(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($17, (_v >> 7) & 127);
      data.pokeI8($18, _v & 127);
   }

   public method getFEGDecay1Level() : short {
      return ((data.peekI8($17) << 7) | data.peekI8($18)) - 128;
   }

   public method setFEGDecay2Level(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($19, (_v >> 7) & 127);
      data.pokeI8($1A, _v & 127);
   }

   public method getFEGDecay2Level() : short {
      return ((data.peekI8($19) << 7) | data.peekI8($1A)) - 128;
   }

   public method setFEGReleaseLevel(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($1B, (_v >> 7) & 127);
      data.pokeI8($1C, _v & 127);
   }

   public method getFEGReleaseLevel() : short {
      return ((data.peekI8($1B) << 7) | data.peekI8($1C)) - 128;
   }

   public method setFEGDepth(byte _v) {
      // -64..63
      data.pokeI8($1D, _v + 64);
   }

   public method getFEGDepth() : byte {
      return data.peekI8($1D) - 64;
   }

   public method setFEGTimeVelocitySensitivitySegment(byte _v) {
      // 0..4 => Attack, Atk+Dcy, Decay, Atk+Rls, All
      data.pokeI8($1E, _v);
   }

   public method getFEGTimeVelocitySensitivitySegment() : byte {
      return data.peekI8($1E);
   }

   public method setFEGTimeVelocitySensitivity(byte _v) {
      // -64..63
      data.pokeI8($1F, _v + 64);
   }

   public method getFEGTimeVelocitySensitivity() : byte {
      return data.peekI8($1F) - 64;
   }

   public method setFEGDepthVelocitySensitivity(byte _v) {
      // -64..63
      data.pokeI8($20, _v + 64);
   }

   public method getFEGDepthVelocitySensitivity() : byte {
      return data.peekI8($20) - 64;
   }

   public method setFEGDepthVelocitySensitivityCurve(byte _v) {
      // 0..4
      data.pokeI8($21, _v);
   }

   public method getFEGDepthVelocitySensitivityCurve() : byte {
      return data.peekI8($21);
   }

   public method setFEGTimeKeyFollowSensitivity(byte _v) {
      // -64..63
      data.pokeI8($22, _v + 64);
   }

   public method getFEGTimeKeyFollowSensitivity() : byte {
      return data.peekI8($22) - 64;
   }

   public method setFEGTimeKeyFollowSensitivityCenterNote(byte _v) {
      // 0..127 => C2..G8
      data.pokeI8($23, _v);
   }

   public method getFEGTimeKeyFollowSensitivityCenterNote() : byte {
      return data.peekI8($23);
   }

   public method setFilterCutoffScalingBreakPoint1(byte _v) {
      // 0..124 => C2..E8
      data.pokeI8($24, _v);
   }

   public method getFilterCutoffScalingBreakPoint1() : byte {
      return data.peekI8($24);
   }

   public method setFilterCutoffScalingBreakPoint2(byte _v) {
      // 1..125 => C#2..F-8
      data.pokeI8($25, _v);
   }

   public method getFilterCutoffScalingBreakPoint2() : byte {
      return data.peekI8($25);
   }

   public method setFilterCutoffScalingBreakPoint3(byte _v) {
      // 2..126 => D-2..F#8
      data.pokeI8($26, _v);
   }

   public method getFilterCutoffScalingBreakPoint3() : byte {
      return data.peekI8($26);
   }

   public method setFilterCutoffScalingBreakPoint4(byte _v) {
      // 3..127 => D#2..G-8
      data.pokeI8($27, _v);
   }

   public method getFilterCutoffScalingBreakPoint4() : byte {
      return data.peekI8($27);
   }

   public method setFilterCutoffScalingOffset1(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($28, (_v >> 7) & 127);
      data.pokeI8($29, _v & 127);
   }

   public method getFilterCutoffScalingOffset1() : short {
      return ((data.peekI8($28) << 7) | data.peekI8($29)) - 128;
   }

   public method setFilterCutoffScalingOffset2(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($2A, (_v >> 7) & 127);
      data.pokeI8($2B, _v & 127);
   }

   public method getFilterCutoffScalingOffset2() : short {
      return ((data.peekI8($2A) << 7) | data.peekI8($2B)) - 128;
   }

   public method setFilterCutoffScalingOffset3(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($2C, (_v >> 7) & 127);
      data.pokeI8($2D, _v & 127);
   }

   public method getFilterCutoffScalingOffset3() : short {
      return ((data.peekI8($2C) << 7) | data.peekI8($2D)) - 128;
   }

   public method setFilterCutoffScalingOffset4(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($2E, (_v >> 7) & 127);
      data.pokeI8($2F, _v & 127);
   }

   public method getFilterCutoffScalingOffset4() : short {
      return ((data.peekI8($2E) << 7) | data.peekI8($2F)) - 128;
   }

   public method setFilterCutoffKeyFollowSensitivity(byte _v) {
      // 0..127 => -200%..+200%
      data.pokeI8($30, _v);
   }

   public method getFilterCutoffKeyFollowSensitivity() : byte {
      return data.peekI8($30);
   }

   public method setHPFCutoffKeyFollowSensitivity(byte _v) {
      // 0..127 => -200%..+200%
      data.pokeI8($31, _v);
   }

   public method getHPFCutoffKeyFollowSensitivity() : byte {
      return data.peekI8($31);
   }

   public method setEQType(byte _v) {
      // 0..5 => 2-band, P.EQ, Boost6, Boost12, Boost18, Thru
      data.pokeI8($32, _v);
   }

   public method getEQType() : byte {
      return data.peekI8($32);
   }

   public method setEQQ(byte _v) {
      // 0..31
      data.pokeI8($33, _v);
   }

   public method getEQQ() : byte {
      return data.peekI8($33);
   }

   public method setEQ1Frequency(short _v) {
      // 2-band only
      data.pokeI8($34, (_v >> 7)&1);
      data.pokeI8($35, (_v&127));
   }

   public method getEQ1Frequency() : byte {
      byte i = ((data.peekI8($34)&1)<<7) | (data.peekI8($35)&127);
      return i;
   }

   public method setEQ1Gain(byte _v) {
      data.pokeI8($36, _v + 64);
   }

   public method getEQ1Gain() : byte {
      return data.peekI8($36) - 64;
   }


   public method setEQ2Frequency(short _v) {
      // 2-band only
      data.pokeI8($37, (_v >> 7)&1);
      data.pokeI8($38, (_v&127));
   }

   public method getEQ2Frequency() : byte {
      byte i = ((data.peekI8($37)&1)<<7) | (data.peekI8($38)&127);
      return i;
   }

   public method setEQ2Gain(byte _v) {
      data.pokeI8($39, _v + 64);
   }

   public method getEQ2Gain() : byte {
      return data.peekI8($39) - 64;
   }

   public method setLFOWave(byte _v) {
      // 0..2 => saw, tri, sqr
      data.pokeI8($3A, _v);
   }

   public method getLFOWave() : byte {
      return data.peekI8($3A);
   }

   public method setLFOKeyOnReset(byte _v) {
      data.pokeI8($3B, _v);
   }

   public method getLFOKeyOnReset() : byte {
      return data.peekI8($3B);
   }

   public method setLFODelayTime(byte _v) {
      data.pokeI8($3C, _v);
   }

   public method getLFODelayTime() : byte {
      return data.peekI8($3C);
   }

   public method setLFOSpeed(byte _v) {
      // 0..63
      data.pokeI8($3D, _v);
   }

   public method invalidateReplayLFOSpeed() {
      replay_data_valid.pokeI8($3D, false);
      b_replay_valid = false;
   }

   public method getLFOSpeed() : byte {
      return data.peekI8($3D);
   }

   public method setLFOAmplitudeModulationDepth(byte _v) {
      data.pokeI8($3E, _v);
   }

   public method getLFOAmplitudeModulationDepth() : byte {
      return data.peekI8($3E);
   }

   public method setLFOPitchModulationDepth(byte _v) {
      data.pokeI8($3F, _v);
   }

   public method getLFOPitchModulationDepth() : byte {
      return data.peekI8($3F);
   }

   public method setLFOFilterModulationDepth(byte _v) {
      data.pokeI8($40, _v);
   }

   public method getLFOFilterModulationDepth() : byte {
      return data.peekI8($40);
   }

   public method setLFOFadeInTime(byte _v) {
      data.pokeI8($41, _v);
   }

   public method getLFOFadeInTime() : byte {
      return data.peekI8($41);
   }

   public method setPartLFOPhaseOffset(byte _v) {
      // 0..5
      data.pokeI8($42, _v);
   }

   public method getPartLFOPhaseOffset() : byte {
      return data.peekI8($42);
   }

   public method setPartLFODestination1Ratio(byte _v) {
      data.pokeI8($43, _v);
   }

   public method getPartLFODestination1Ratio() : byte {
      return data.peekI8($43);
   }

   public method setPartLFODestination2Ratio(byte _v) {
      data.pokeI8($44, _v);
   }

   public method getPartLFODestination2Ratio() : byte {
      return data.peekI8($44);
   }

   public method setPartLFODestination3Ratio(byte _v) {
      data.pokeI8($45, _v);
   }

   public method getPartLFODestination3Ratio() : byte {
      return data.peekI8($45);
   }

   // <save.png>
   public virtual saveState(Stream ofs) {
      ofs.i16 = 2; // ver
      saveStateData(ofs);

      // EG Mixer Settings (v2+)
      eg_mixer_settings_feg.saveState(ofs);  // v2+

   }

   // <load.png>
   public virtual loadState(Stream ifs) : boolean {
      short ver = ifs.u16;
      if(ver >= 1)
      {
         if(loadStateData(ifs))
         {
            if(ver >= 2)
            {
               if(!eg_mixer_settings_feg.loadState(ifs))  // v2+
                  return false;
            }
            return true;
         }
      }
      else
      {
         trace "[---] MontagePartNormalElementFilterEQLFO::loadState: invalid ver="+ver;
      }
      return false;
   }

}

// <class.png>
class MontagePartNormalElement : MontageObject {
   MontagePartNormalElementOscAmpPitch osc_amp_pitch;
   MontagePartNormalElementFilterEQLFO filter_eq_lfo;

   public static New(int _partIdx, int _elementIdx) {
      local MontagePartNormalElement r;
      r.init(_partIdx, _elementIdx);
      return deref r;
   }

   // <method_init.png>
   public method init(int _partIdx, int _elementIdx) {
      osc_amp_pitch.init(_partIdx, _elementIdx);
      filter_eq_lfo.init(_partIdx, _elementIdx);
   }

   // <method.png>
   public method invalidateReplay() {
      osc_amp_pitch.invalidateReplay();
      filter_eq_lfo.invalidateReplay();
   }

   public method send(MontagePartNormalElement _replayPartNormalElement, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bHeader && (null == _fr))
         sendBulkHeader(_outDev);

      _numDiffsLeft = osc_amp_pitch.send(_replayPartNormalElement.osc_amp_pitch, false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
      _numDiffsLeft = filter_eq_lfo.send(_replayPartNormalElement.filter_eq_lfo, false/*bHeader*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);

      if(_bHeader && (null == _fr))
         sendBulkFooter(_outDev);

      return _numDiffsLeft;
   }

   public method copyFrom(MontagePartNormalElement _o) {
      osc_amp_pitch.copyFrom(_o.osc_amp_pitch);
      filter_eq_lfo.copyFrom(_o.filter_eq_lfo);
   }

   public method copyControllerSet(MontagePartNormalElement _o) {
      byte addr = $19;
      Buffer b <= osc_amp_pitch.data;
      Buffer od <= _o.osc_amp_pitch.data;
      loop(5)
      {
         b.pokeI8(addr, od.peekI8(addr));
         addr++;
      }
   }

   public method initFromSyxOscAmpPitch(Buffer _bufRecv) {
      osc_amp_pitch.initFromSyx(_bufRecv);
   }

   public method initFromSyxFilterEQLFO(Buffer _bufRecv) {
      filter_eq_lfo.initFromSyx(_bufRecv);
   }

   // <save.png>
   public virtual saveState(Stream ofs) {
      ofs.i16 = 2; // ver

      osc_amp_pitch.saveState(ofs);
      filter_eq_lfo.saveState(ofs);
   }

   // <load.png>
   public virtual loadState(Stream ifs) : boolean {
      short ver = ifs.u16;
      if(ver >= 1)
      {
         if(!osc_amp_pitch.loadState(ifs))
            return false;
         if(!filter_eq_lfo.loadState(ifs))
            return false;
         return true;
      }
      else
      {
         trace "[---] "+yacMetaClassName()+"::loadState: invalid ver="+ver;
      }
      return false;
   }

}


// <class.png>
class MontagePartNormal : MontageObject {
   int part_idx;
   int element_valid_mask;
   MontagePartNormalElement *[] elements;

   public static New(int _partIdx) {
      local MontagePartNormal r;
      r.init(_partIdx);
      return deref r;
   }

   public method init(int _partIdx) {
      part_idx = _partIdx;
      element_valid_mask = 0;
      int elementIdx = 0;
      loop(8)
         elements.add(#(MontagePartNormalElement.New(_partIdx, elementIdx++)));
   }

   // <method.png>
   public method invalidateReplay() {
      MontagePartNormalElement *e;
      foreach e in elements
         e.invalidateReplay();
   }

   public virtual send(MontagePartNormal _replayPartNormal, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      if(_bHeader && (null == _fr))
         sendBulkHeader(_outDev);

      MontagePartNormalElement *e;
      int bit = 1;
      int elementIdx = 0;
      foreach e in elements
      {
         if(element_valid_mask & bit)
            _numDiffsLeft = e.send(_replayPartNormal.elements.get(elementIdx), false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         bit = bit << 1;
         elementIdx++;

         if(null != _fr && _numDiffsLeft <= 0)
            break;
      }

      if(_bHeader && (null == _fr))
         sendBulkFooter(_outDev);

      return _numDiffsLeft;
   }

   public method copyFrom(MontagePartNormal _o) {
      int elementIdx = 0;
      loop(8)
      {
         MontagePartNormalElement e  <= elements[elementIdx];
         MontagePartNormalElement oe <= _o.elements[elementIdx];
         e.copyFrom(oe);
         elementIdx++;
      }

      element_valid_mask = _o.element_valid_mask;
   }

   public method copyControllerSet(MontagePartNormal _o) {
      int elementIdx = 0;
      loop(8)
      {
         MontagePartNormalElement e  <= elements.get(elementIdx);
         MontagePartNormalElement oe <= _o.elements.get(elementIdx);
         e.copyControllerSet(oe);
         elementIdx++;
      }
   }

   public method getElementByIdx(int _elementIdx) : MontagePartNormalElement {
      return elements.get(_elementIdx & 7);
   }

   public method initFromSyxElementOscAmpPitch(Buffer _bufRecv, int _elementIdx) {
      MontagePartNormalElement e <= getElementByIdx(_elementIdx);
      e.initFromSyxOscAmpPitch(_bufRecv);
      element_valid_mask |= (1 << _elementIdx);
   }

   public method initFromSyxElementFilterEQLFO(Buffer _bufRecv, int _elementIdx) {
      MontagePartNormalElement e <= getElementByIdx(_elementIdx);
      e.initFromSyxFilterEQLFO(_bufRecv);
   }

   // <method.png>
   public method dumpEGSettings(PointerArray _currentEGSettings, int _elementFilter) {
      int elementIdx = 0;
      loop(8)
      {
         if( (-1 == _elementFilter) || (_elementFilter == elementIdx) )
         {
            MontagePartNormalElement el <= getElementByIdx(elementIdx);
            MontagePartNormalElementOscAmpPitch elOsc    <= el.osc_amp_pitch;
            MontagePartNormalElementFilterEQLFO elFilter <= el.filter_eq_lfo;
            Montage_EGPreset *p;

            if(elOsc.getElementSwitch())
            {
               p <= new Montage_EGPreset;
               p.name = "AWM2 element "+(elementIdx+1)+" peg";
               elOsc.savePEGPreset(p);
               _currentEGSettings.add(#(deref p));
               p.dump();

               p <= new Montage_EGPreset;
               p.name = "AWM2 element "+(elementIdx+1)+" aeg";
               elOsc.saveAEGPreset(p);
               _currentEGSettings.add(#(deref p));
               p.dump();

               p <= new Montage_EGPreset;
               p.name = "AWM2 element "+(elementIdx+1)+" feg";
               elFilter.saveFEGPreset(p);
               _currentEGSettings.add(#(deref p));
               p.dump();
            }
         }

         // Next element
         elementIdx++;
      }
   }

   // <save.png>
   public virtual saveState(Stream ofs) {
      ofs.i16 = 1; // ver

      ofs.i8 = element_valid_mask;
      MontagePartNormalElement *e;
      int bit = 1;
      int elementIdx = 0;
      foreach e in elements
      {
         if(element_valid_mask & bit)
            e.saveState(ofs);
         bit = bit << 1;
         elementIdx++;
      }
   }

   // <load.png>
   public virtual loadState(Stream ifs) : boolean {
      short ver = ifs.u16;
      if(ver >= 1)
      {
         element_valid_mask = ifs.u8;

         MontagePartNormalElement *e;
         int bit = 1;
         int elementIdx = 0;
         foreach e in elements
         {
            if(element_valid_mask & bit)
            {
               if(!e.loadState(ifs))
                  return false;
            }
            bit = bit << 1;
            elementIdx++;
         }
         return true;
      }
      else
      {
         trace "[---] "+yacMetaClassName()+"::loadState: invalid ver="+ver;
      }
      return false;
   }

}


// <class.png>
class MontagePartFMCommon : MontageData {
   // p.223
   int part_idx;

   Montage_EGMixerSettings eg_mixer_settings_peg;
   Montage_EGMixerSettings eg_mixer_settings_feg;


   public static New(int _partIdx) {
      local MontagePartFMCommon r;
      r.init(_partIdx);
      return deref r;
   }

   public method init(int _partIdx) {
      part_idx = _partIdx;
      allocData(86,  // $56
                [$00, 1, G_SOUND,   // Random Pan Depth
                 $01, 1, G_SOUND,   // Alternate Pan Depth
                 $02, 1, G_SOUND,   // Scaling Pan Depth
                 $03, 1, G_SOUND,   // Key On Delay Time Length
                 $04, 1, G_SOUND,   // Key On Delay Tempo Sync Switch
                 $05, 1, G_SOUND,   // Key On Delay Note Length
                 $06, 1, G_SOUND,   // Pitch Velocity Sensitivity
                 $07, 1, G_SOUND,   // Random Pitch Depth
                 $08, 1, G_SOUND,   // Pitch Key Follow Sensitivity
                 $09, 1, G_SOUND,   // Pitch Key Follow Sensitivity Center Note
                 $0B, 1, G_SOUND,   // Filter Type
                 $0C, 2, G_SOUND,   // Filter Cutoff Frequency
                 $0E, 1, G_SOUND,   // Filter Cutoff Velocity Sensitivity
                 $0F, 1, G_SOUND,   // Filter Resonance/Width
                 $10, 1, G_SOUND,   // Filter Resonance Velocity Sensitivity
                 $11, 2, G_SOUND,   // HPF Cutoff Frequency
                 $13, 2, G_SOUND,   // Distance
                 $15, 2, G_SOUND,   // Filter Gain
                 $17, 1, G_SOUND,   // FEG Hold Time
                 $18, 1, G_SOUND,   // FEG Attack Time
                 $19, 1, G_SOUND,   // FEG Decay 1 Time
                 $1A, 1, G_SOUND,   // FEG Decay 2 Time
                 $1B, 1, G_SOUND,   // FEG Release Time
                 $1C, 2, G_SOUND,   // FEG Hold Level
                 $1E, 2, G_SOUND,   // FEG Attack Level
                 $20, 2, G_SOUND,   // FEG Decay 1 Level
                 $22, 2, G_SOUND,   // FEG Decay 2 Level
                 $24, 2, G_SOUND,   // FEG Release Level
                 $26, 1, G_SOUND,   // FEG Depth
                 $27, 1, G_SOUND,   // FEG Time Velocity Sensitivity Segment
                 $28, 1, G_SOUND,   // FEG Time Velocity Sensitivity
                 $29, 1, G_SOUND,   // FEG Depth Velocity Sensitivity
                 $2A, 1, G_SOUND,   // FEG Depth Velocity Sensitivity Curve
                 $2B, 1, G_SOUND,   // FEG Time Key Follow Sensitivity
                 $2C, 1, G_SOUND,   // FEG Time Key Follow Sensitivity Center Note
                 $2D, 1, G_SOUND,   // Filter Cutoff Key Follow Sensitivity
                 $2E, 1, G_SOUND,   // Filter Cutoff Scaling Break Point 1
                 $2F, 1, G_SOUND,   // Filter Cutoff Scaling Break Point 2
                 $30, 1, G_SOUND,   // Filter Cutoff Scaling Break Point 3
                 $31, 1, G_SOUND,   // Filter Cutoff Scaling Break Point 4
                 $32, 2, G_SOUND,   // Filter Cutoff Scaling Offset 1
                 $34, 2, G_SOUND,   // Filter Cutoff Scaling Offset 2
                 $36, 2, G_SOUND,   // Filter Cutoff Scaling Offset 3
                 $38, 2, G_SOUND,   // Filter Cutoff Scaling Offset 4
                 $3A, 1, G_SOUND,   // HPF Cutoff Key Follow Sensitivity
                 $3B, 1, G_SOUND,   // PEG Initial Level
                 $3C, 1, G_SOUND,   // PEG Attack Level
                 $3D, 1, G_SOUND,   // PEG Decay 1 Level
                 $3E, 1, G_SOUND,   // PEG Decay 2 Level
                 $3F, 1, G_SOUND,   // PEG Release Level
                 $40, 1, G_SOUND,   // PEG Attack Time
                 $41, 1, G_SOUND,   // PEG Decay 1 Time
                 $42, 1, G_SOUND,   // PEG Decay 2 Time
                 $43, 1, G_SOUND,   // PEG Release Time
                 $44, 1, G_SOUND,   // PEG Depth Velocity Sensitivity
                 $45, 1, G_SOUND,   // PEG Depth
                 $46, 1, G_SOUND,   // PEG Time Key Follow Sensitivity
                 $47, 1, G_SOUND,   // 2nd LFO Wave
                 $48, 1, G_SOUND,   // 2nd LFO Speed
                 $49, 1, G_SOUND,   // 2nd LFO Phase
                 $4A, 1, G_SOUND,   // 2nd LFO Delay Time
                 $4B, 1, G_SOUND,   // 2nd LFO Key On Reset
                 $4C, 1, G_SOUND,   // 2nd LFO Pitch Modulation Depth
                 $4D, 1, G_SOUND,   // 2nd LFO Amplitude Modulation Depth
                 $4E, 1, G_SOUND,   // 2nd LFO Filter Modulation Depth
                 $4F, 1, G_SOUND,   // Algorithm Number
                 $50, 1, G_SOUND,   // Feedback Level
                 // $51 ?
                 $52, 1, G_SOUND,   // FW3.x+ Extended LFO Switch (1=extended.speed=0-415(0-1356.59 Hz) 0=normal.speed=0-99(0-50.89 Hz)
                 $53, 2, G_SOUND,   // FW3.x+ Extended LFO Speed (0..415)
                 // $55 ?
                 ]
                );
   }

   public virtual send(MontagePartFMCommon _replayPartFMCommon, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      if(_bSendAll || replayDiffers(_replayPartFMCommon))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($48, part_idx, _replayPartFMCommon, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($48, part_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayPartFMCommon);
         }
      }

      return _numDiffsLeft;
   }

   public virtual copyFrom(MontagePartFMCommon _o) {
      MontageData::copyFrom(_o);

      eg_mixer_settings_peg = _o.eg_mixer_settings_peg;
      eg_mixer_settings_feg = _o.eg_mixer_settings_feg;
   }

   public method mixSounds(local MontagePartFMCommon a, local MontagePartFMCommon b, local float amt, local int _flags) {
      if(_flags & MIXG_COM_PAN)
      {
         setRandomPanDepth( mathLerpf(a.getRandomPanDepth(), b.getRandomPanDepth(), amt) );
         setAlternatePanDepth( mathLerpf(a.getAlternatePanDepth(), b.getAlternatePanDepth(), amt) );
         setScalingPanDepth( mathLerpf(a.getScalingPanDepth(), b.getScalingPanDepth(), amt) );
      }
      if(_flags & MIXG_COM_KEYON)
      {
         setKeyOnDelayTimeLength( mathLerpf(a.getKeyOnDelayTimeLength(), b.getKeyOnDelayTimeLength(), amt) );
         setKeyOnDelayTempoSyncSwitch( mathLerpf(a.getKeyOnDelayTempoSyncSwitch(), b.getKeyOnDelayTempoSyncSwitch(), amt) );
         setKeyOnDelayNoteLength( mathLerpf(a.getKeyOnDelayNoteLength(), b.getKeyOnDelayNoteLength(), amt) );
      }
      if(_flags & MIXG_COM_PITCH)
      {
         setPitchVelocitySensitivity( mathLerpf(a.getPitchVelocitySensitivity(), b.getPitchVelocitySensitivity(), amt) );
         setRandomPitchDepth( mathLerpf(a.getRandomPitchDepth(), b.getRandomPitchDepth(), amt) );
         setPitchKeyFollowSensitivity( mathLerpf(a.getPitchKeyFollowSensitivity(), b.getPitchKeyFollowSensitivity(), amt) );
         setPitchKeyFollowSensitivityCenterNote( mathLerpf(a.getPitchKeyFollowSensitivityCenterNote(), b.getPitchKeyFollowSensitivityCenterNote(), amt) );
      }
      if(_flags & MIXG_COM_FILTER)
      {
         setFilterType( mathLerpf(a.getFilterType(), b.getFilterType(), amt) );
         setFilterCutoffFrequency( mathLerpf(a.getFilterCutoffFrequency(), b.getFilterCutoffFrequency(), amt) );
         setFilterCutoffVelocitySensitivity( mathLerpf(a.getFilterCutoffVelocitySensitivity(), b.getFilterCutoffVelocitySensitivity(), amt) );
         setFilterResonanceWidth( mathLerpf(a.getFilterResonanceWidth(), b.getFilterResonanceWidth(), amt) );
         setFilterResonanceVelocitySensitivity( mathLerpf(a.getFilterResonanceVelocitySensitivity(), b.getFilterResonanceVelocitySensitivity(), amt) );
         setHPFCutoffFrequency( mathLerpf(a.getHPFCutoffFrequency(), b.getHPFCutoffFrequency(), amt) );
         setDistance( mathLerpf(a.getDistance(), b.getDistance(), amt) );
         setFilterGain( mathLerpf(a.getFilterGain(), b.getFilterGain(), amt) );
      }
      if(_flags & MIXG_COM_FEG_T)
      {
         setFEGHoldTime( mathLerpf(a.getFEGHoldTime(), b.getFEGHoldTime(), amt) );
         setFEGAttackTime( mathLerpf(a.getFEGAttackTime(), b.getFEGAttackTime(), amt) );
         setFEGDecay1Time( mathLerpf(a.getFEGDecay1Time(), b.getFEGDecay1Time(), amt) );
         setFEGDecay2Time( mathLerpf(a.getFEGDecay2Time(), b.getFEGDecay2Time(), amt) );
         setFEGReleaseTime( mathLerpf(a.getFEGReleaseTime(), b.getFEGReleaseTime(), amt) );
      }
      if(_flags & MIXG_COM_FEG_L)
      {
         setFEGHoldLevel( mathLerpf(a.getFEGHoldLevel(), b.getFEGHoldLevel(), amt) );
         setFEGAttackLevel( mathLerpf(a.getFEGAttackLevel(), b.getFEGAttackLevel(), amt) );
         setFEGDecay1Level( mathLerpf(a.getFEGDecay1Level(), b.getFEGDecay1Level(), amt) );
         setFEGDecay2Level( mathLerpf(a.getFEGDecay2Level(), b.getFEGDecay2Level(), amt) );
         setFEGReleaseLevel( mathLerpf(a.getFEGReleaseLevel(), b.getFEGReleaseLevel(), amt) );
         setFEGDepth( mathLerpf(a.getFEGDepth(), b.getFEGDepth(), amt) );
      }
      if(_flags & MIXG_COM_FEG_T)
      {
         setFEGTimeVelocitySensitivitySegment( mathLerpf(a.getFEGTimeVelocitySensitivitySegment(), b.getFEGTimeVelocitySensitivitySegment(), amt) );
         setFEGTimeVelocitySensitivity( mathLerpf(a.getFEGTimeVelocitySensitivity(), b.getFEGTimeVelocitySensitivity(), amt) );
      }
      if(_flags & MIXG_COM_FEG_L)
      {
         setFEGDepthVelocitySensitivity( mathLerpf(a.getFEGDepthVelocitySensitivity(), b.getFEGDepthVelocitySensitivity(), amt) );
         setFEGDepthVelocitySensitivityCurve( mathLerpf(a.getFEGDepthVelocitySensitivityCurve(), b.getFEGDepthVelocitySensitivityCurve(), amt) );
      }
      if(_flags & MIXG_COM_FEG_T)
      {
         setFEGTimeKeyFollowSensitivity( mathLerpf(a.getFEGTimeKeyFollowSensitivity(), b.getFEGTimeKeyFollowSensitivity(), amt) );
         setFEGTimeKeyFollowSensitivityCenterNote( mathLerpf(a.getFEGTimeKeyFollowSensitivityCenterNote(), b.getFEGTimeKeyFollowSensitivityCenterNote(), amt) );
      }
      if(_flags & MIXG_COM_FILTER)
      {
         setFilterCutoffKeyFollowSensitivity( mathLerpf(a.getFilterCutoffKeyFollowSensitivity(), b.getFilterCutoffKeyFollowSensitivity(), amt) );
         setFilterCutoffScalingBreakPoint1( mathLerpf(a.getFilterCutoffScalingBreakPoint1(), b.getFilterCutoffScalingBreakPoint1(), amt) );
         setFilterCutoffScalingBreakPoint2( mathLerpf(a.getFilterCutoffScalingBreakPoint2(), b.getFilterCutoffScalingBreakPoint2(), amt) );
         setFilterCutoffScalingBreakPoint3( mathLerpf(a.getFilterCutoffScalingBreakPoint3(), b.getFilterCutoffScalingBreakPoint3(), amt) );
         setFilterCutoffScalingBreakPoint4( mathLerpf(a.getFilterCutoffScalingBreakPoint4(), b.getFilterCutoffScalingBreakPoint4(), amt) );
         setFilterCutoffScalingOffset1( mathLerpf(a.getFilterCutoffScalingOffset1(), b.getFilterCutoffScalingOffset1(), amt) );
         setFilterCutoffScalingOffset2( mathLerpf(a.getFilterCutoffScalingOffset2(), b.getFilterCutoffScalingOffset2(), amt) );
         setFilterCutoffScalingOffset3( mathLerpf(a.getFilterCutoffScalingOffset3(), b.getFilterCutoffScalingOffset3(), amt) );
         setFilterCutoffScalingOffset4( mathLerpf(a.getFilterCutoffScalingOffset4(), b.getFilterCutoffScalingOffset4(), amt) );
         setHPFCutoffKeyFollowSensitivity( mathLerpf(a.getHPFCutoffKeyFollowSensitivity(), b.getHPFCutoffKeyFollowSensitivity(), amt) );
      }
      if(_flags & MIXG_COM_PEG_L)
      {
         setPEGInitialLevel( mathLerpf(a.getPEGInitialLevel(), b.getPEGInitialLevel(), amt) );
         setPEGAttackLevel( mathLerpf(a.getPEGAttackLevel(), b.getPEGAttackLevel(), amt) );
         setPEGDecay1Level( mathLerpf(a.getPEGDecay1Level(), b.getPEGDecay1Level(), amt) );
         setPEGDecay2Level( mathLerpf(a.getPEGDecay2Level(), b.getPEGDecay2Level(), amt) );
         setPEGReleaseLevel( mathLerpf(a.getPEGReleaseLevel(), b.getPEGReleaseLevel(), amt) );
      }
      if(_flags & MIXG_COM_PEG_T)
      {
         setPEGAttackTime( mathLerpf(a.getPEGAttackTime(), b.getPEGAttackTime(), amt) );
         setPEGDecay1Time( mathLerpf(a.getPEGDecay1Time(), b.getPEGDecay1Time(), amt) );
         setPEGDecay2Time( mathLerpf(a.getPEGDecay2Time(), b.getPEGDecay2Time(), amt) );
         setPEGReleaseTime( mathLerpf(a.getPEGReleaseTime(), b.getPEGReleaseTime(), amt) );
      }
      if(_flags & MIXG_COM_PEG_L)
      {
         setPEGDepthVelocitySensitivity( mathLerpf(a.getPEGDepthVelocitySensitivity(), b.getPEGDepthVelocitySensitivity(), amt) );
         setPEGDepth( mathLerpf(a.getPEGDepth(), b.getPEGDepth(), amt) );
      }
      if(_flags & MIXG_COM_PEG_T)
      {
         setPEGTimeKeyFollowSensitivity( mathLerpf(a.getPEGTimeKeyFollowSensitivity(), b.getPEGTimeKeyFollowSensitivity(), amt) );
      }
      if(_flags & MIXG_COM_LFO2)
      {
         set2ndLFOWave( mathLerpf(a.get2ndLFOWave(), b.get2ndLFOWave(), amt) );
         set2ndLFOSpeed( mathLerpf(a.get2ndLFOSpeed(), b.get2ndLFOSpeed(), amt) );
         set2ndLFOPhase( mathLerpf(a.get2ndLFOPhase(), b.get2ndLFOPhase(), amt) );
         set2ndLFODelayTime( mathLerpf(a.get2ndLFODelayTime(), b.get2ndLFODelayTime(), amt) );
         set2ndLFOKeyOnReset( mathLerpf(a.get2ndLFOKeyOnReset(), b.get2ndLFOKeyOnReset(), amt) );
         set2ndLFOAmplitudeModulationDepth( mathLerpf(a.get2ndLFOAmplitudeModulationDepth(), b.get2ndLFOAmplitudeModulationDepth(), amt) );
         set2ndLFOFilterModulationDepth( mathLerpf(a.get2ndLFOFilterModulationDepth(), b.get2ndLFOFilterModulationDepth(), amt) );
      }
      if(_flags & MIXG_COM_ALGFB)
      {
         setAlgorithmNumber( mathLerpf(a.getAlgorithmNumber(), b.getAlgorithmNumber(), amt) );
         setFeedbackLevel( mathLerpf(a.getFeedbackLevel(), b.getFeedbackLevel(), amt) );
      }
   }

   public method saveFEGPreset(Montage_EGPreset _preset) {
      _preset.eg_mixer_settings = eg_mixer_settings_feg;
      _preset.hl  = Montage_EGPreset.EGNormBi(getFEGHoldLevel());
      _preset.al  = Montage_EGPreset.EGNormBi(getFEGAttackLevel());
      _preset.d1l = Montage_EGPreset.EGNormBi(getFEGDecay1Level());
      _preset.d2l = Montage_EGPreset.EGNormBi(getFEGDecay2Level());
      _preset.rl  = Montage_EGPreset.EGNormBi(getFEGReleaseLevel());
      _preset.ht  = Montage_EGPreset.EGNormUni(getFEGHoldTime());
      _preset.at  = Montage_EGPreset.EGNormUni(getFEGAttackTime());
      _preset.d1t = Montage_EGPreset.EGNormUni(getFEGDecay1Time());
      _preset.d2t = Montage_EGPreset.EGNormUni(getFEGDecay2Time());
      _preset.rt  = Montage_EGPreset.EGNormUni(getFEGReleaseTime());
   }

   public method loadFEGPreset(Montage_EGPreset _preset) {
      eg_mixer_settings_feg = _preset.eg_mixer_settings;

      setFEGHoldLevel   (Montage_EGPreset.EGToBi(_preset.hl));
      setFEGAttackLevel (Montage_EGPreset.EGToBi(_preset.al));
      setFEGDecay1Level (Montage_EGPreset.EGToBi(_preset.d1l));
      setFEGDecay2Level (Montage_EGPreset.EGToBi(_preset.d2l));
      setFEGReleaseLevel(Montage_EGPreset.EGToBi(_preset.rl));

      setFEGHoldTime   (Montage_EGPreset.EGToUni(_preset.ht));
      setFEGAttackTime (Montage_EGPreset.EGToUni(_preset.at));
      setFEGDecay1Time (Montage_EGPreset.EGToUni(_preset.d1t));
      setFEGDecay2Time (Montage_EGPreset.EGToUni(_preset.d2t));
      setFEGReleaseTime(Montage_EGPreset.EGToUni(_preset.rt));
   }

   public method savePEGPreset(Montage_EGPreset _preset) {
      _preset.eg_mixer_settings = eg_mixer_settings_peg;
      _preset.hl  = Montage_EGPreset.EGNormBi50(getPEGInitialLevel());
      _preset.al  = Montage_EGPreset.EGNormBi50(getPEGAttackLevel());
      _preset.d1l = Montage_EGPreset.EGNormBi50(getPEGDecay1Level());
      _preset.d2l = Montage_EGPreset.EGNormBi50(getPEGDecay2Level());
      _preset.rl  = Montage_EGPreset.EGNormBi50(getPEGReleaseLevel());
      _preset.ht  = 0;
      _preset.at  = Montage_EGPreset.EGNormUni99(getPEGAttackTime());
      _preset.d1t = Montage_EGPreset.EGNormUni99(getPEGDecay1Time());
      _preset.d2t = Montage_EGPreset.EGNormUni99(getPEGDecay2Time());
      _preset.rt  = Montage_EGPreset.EGNormUni99(getPEGReleaseTime());
   }

   public method loadPEGPreset(Montage_EGPreset _preset) {
      eg_mixer_settings_peg = _preset.eg_mixer_settings;

      setPEGInitialLevel(Montage_EGPreset.EGToBi50(_preset.hl));
      setPEGAttackLevel (Montage_EGPreset.EGToBi50(_preset.al));
      setPEGDecay1Level (Montage_EGPreset.EGToBi50(_preset.d1l));
      setPEGDecay2Level (Montage_EGPreset.EGToBi50(_preset.d2l));
      setPEGReleaseLevel(Montage_EGPreset.EGToBi50(_preset.rl));

      // // setPEGHoldTime   (EGToUni99(_preset.ht));
      setPEGAttackTime (Montage_EGPreset.EGToUni99(_preset.at));
      setPEGDecay1Time (Montage_EGPreset.EGToUni99(_preset.d1t));
      setPEGDecay2Time (Montage_EGPreset.EGToUni99(_preset.d2t));
      setPEGReleaseTime(Montage_EGPreset.EGToUni99(_preset.rt));
   }

   public method dumpEGSettings(PointerArray _currentEGSettings) {
      Montage_EGPreset *p;

      p <= new Montage_EGPreset;
      p.name = "FM peg";
      savePEGPreset(p);
      _currentEGSettings.add(#(deref p));
      p.dump();

      p <= new Montage_EGPreset;
      p.name = "FM feg";
      saveFEGPreset(p);
      _currentEGSettings.add(#(deref p));
      p.dump();
   }

   public method setRandomPanDepth(byte _v) {
      data.pokeI8($00, _v);
   }

   public method getRandomPanDepth() : byte {
      return data.peekI8($00);
   }

   public method setAlternatePanDepth(byte _v) {
      data.pokeI8($01, _v + 64);
   }

   public method getAlternatePanDepth() : byte {
      return data.peekI8($01) - 64;
   }

   public method setScalingPanDepth(byte _v) {
      data.pokeI8($02, _v + 64);
   }

   public method getScalingPanDepth() : byte {
      return data.peekI8($02) - 64;
   }

   public method setKeyOnDelayTimeLength(byte _v) {
      data.pokeI8($03, _v);
   }

   public method getKeyOnDelayTimeLength() : byte {
      return data.peekI8($03);
   }

   public method setKeyOnDelayTempoSyncSwitch(byte _v) {
      data.pokeI8($04, _v & 1);
   }

   public method getKeyOnDelayTempoSyncSwitch() : byte {
      return data.peekI8($04) & 1;
   }

   public method setKeyOnDelayNoteLength(byte _v) {
      // 5-21 => (16th, 8th/3, 16th., 8th, 4th/3, 8th., 4th, 2th/3, 4th., 2nd, Whole/3, 2nd., 4thX4, 4thX5, 4thX6, 4thX7, 4thX8)
      data.pokeI8($05, _v);
   }

   public method getKeyOnDelayNoteLength() : byte {
      return data.peekI8($05);
   }

   public method setPitchVelocitySensitivity(byte _v) {
      data.pokeI8($06, _v + 64);
   }

   public method getPitchVelocitySensitivity() : byte {
      return data.peekI8($06) - 64;
   }

   public method setRandomPitchDepth(byte _v) {
      data.pokeI8($07, _v);
   }

   public method getRandomPitchDepth() : byte {
      return data.peekI8($07);
   }

   public method setPitchKeyFollowSensitivity(byte _v) {
      // 0..127 => -200% .. +200%. Def=$60
      data.pokeI8($08, _v);
   }

   public method getPitchKeyFollowSensitivity() : byte {
      return data.peekI8($08);
   }

   public method setPitchKeyFollowSensitivityCenterNote(byte _v) {
      // 0..127 => C-2..G-8
      data.pokeI8($09, _v);
   }

   public method getPitchKeyFollowSensitivityCenterNote() : byte {
      return data.peekI8($09);
   }

   public method setFilterType(byte _v) {
      // 0..21 => LPF24D, LPF24A, LPF18, LPF18s, LPF12+HPF12, LPF6+HPF12, HPF24D, HPF12, BPF12D, BPFw, BPF6, BEF12, BEF6, DualLPF, DualHPF, DualBPF, DualBEF, LPF12+BPF6, Thru
      data.pokeI8($0B, _v);
   }

   public method getFilterType() : byte {
      return data.peekI8($0B);
   }

   public method setFilterCutoffFrequency(short _v) {
      // 0..255
      data.pokeI8($0C, (_v >> 7) & 127);
      data.pokeI8($0D, _v & 127);
   }

   public method getFilterCutoffFrequency() : short {
      return (data.peekI8($0C) << 7) | data.peekI8($0D);
   }

   public method setFilterCutoffVelocitySensitivity(byte _v) {
      // -64..63
      data.pokeI8($0E, _v + 64);
   }

   public method getFilterCutoffVelocitySensitivity() : byte {
      return data.peekI8($0E) - 64;
   }

   public method setFilterResonanceWidth(byte _v) {
      data.pokeI8($0F, _v);
   }

   public method getFilterResonanceWidth() : byte {
      return data.peekI8($0F);
   }

   public method setFilterResonanceVelocitySensitivity(byte _v) {
      // -64..63
      data.pokeI8($10, _v + 64);
   }

   public method getFilterResonanceVelocitySensitivity() : byte {
      return data.peekI8($10) - 64;
   }

   public method setHPFCutoffFrequency(short _v) {
      // 0..255
      data.pokeI8($11, (_v >> 7) & 127);
      data.pokeI8($12, _v & 127);
   }

   public method getHPFCutoffFrequency() : short {
      return (data.peekI8($11) << 7) | data.peekI8($12);
   }

   public method setDistance(short _v) {
      // -128..+127
      _v += 128;
      data.pokeI8($13, (_v >> 7) & 127);
      data.pokeI8($14, _v & 127);
   }

   public method getDistance() : short {
      return ((data.peekI8($13) << 7) | data.peekI8($14)) - 128;
   }

   public method setFilterGain(short _v) {
      // 0..255
      data.pokeI8($15, (_v >> 7) & 127);
      data.pokeI8($16, _v & 127);
   }

   public method getFilterGain() : short {
      return (data.peekI8($15) << 7) | data.peekI8($16);
   }

   public method setFEGHoldTime(byte _v) {
      data.pokeI8($17, _v);
   }

   public method getFEGHoldTime() : byte {
      return data.peekI8($17);
   }

   public method setFEGAttackTime(byte _v) {
      data.pokeI8($18, _v);
   }

   public method getFEGAttackTime() : byte {
      return data.peekI8($18);
   }

   public method setFEGDecay1Time(byte _v) {
      data.pokeI8($19, _v);
   }

   public method getFEGDecay1Time() : byte {
      return data.peekI8($19);
   }

   public method setFEGDecay2Time(byte _v) {
      data.pokeI8($1A, _v);
   }

   public method getFEGDecay2Time() : byte {
      return data.peekI8($1A);
   }

   public method setFEGReleaseTime(byte _v) {
      data.pokeI8($1B, _v);
   }

   public method getFEGReleaseTime() : byte {
      return data.peekI8($1B);
   }

   public method setFEGHoldLevel(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($1C, (_v >> 7) & 127);
      data.pokeI8($1D, _v & 127);
   }

   public method getFEGHoldLevel() : short {
      return ((data.peekI8($1C) << 7) | data.peekI8($1D)) - 128;
   }

   public method setFEGAttackLevel(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($1E, (_v >> 7) & 127);
      data.pokeI8($1F, _v & 127);
   }

   public method getFEGAttackLevel() : short {
      return ((data.peekI8($1E) << 7) | data.peekI8($1F)) - 128;
   }

   public method setFEGDecay1Level(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($20, (_v >> 7) & 127);
      data.pokeI8($21, _v & 127);
   }

   public method getFEGDecay1Level() : short {
      return ((data.peekI8($20) << 7) | data.peekI8($21)) - 128;
   }

   public method setFEGDecay2Level(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($22, (_v >> 7) & 127);
      data.pokeI8($23, _v & 127);
   }

   public method getFEGDecay2Level() : short {
      return ((data.peekI8($22) << 7) | data.peekI8($23)) - 128;
   }

   public method setFEGReleaseLevel(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($24, (_v >> 7) & 127);
      data.pokeI8($25, _v & 127);
   }

   public method getFEGReleaseLevel() : short {
      return ((data.peekI8($24) << 7) | data.peekI8($25)) - 128;
   }

   public method setFEGDepth(byte _v) {
      // -64..63
      data.pokeI8($26, _v + 64);
   }

   public method getFEGDepth() : byte {
      return data.peekI8($26) - 64;
   }

   public method setFEGTimeVelocitySensitivitySegment(byte _v) {
      // 0..4 => Attack, Atk+Dcy, Decay, Atk+Rls, All
      data.pokeI8($27, _v);
   }

   public method getFEGTimeVelocitySensitivitySegment() : byte {
      return data.peekI8($27);
   }

   public method setFEGTimeVelocitySensitivity(byte _v) {
      // -64..63
      data.pokeI8($28, _v + 64);
   }

   public method getFEGTimeVelocitySensitivity() : byte {
      return data.peekI8($28) - 64;
   }

   public method setFEGDepthVelocitySensitivity(byte _v) {
      // -64..63
      data.pokeI8($29, _v + 64);
   }

   public method getFEGDepthVelocitySensitivity() : byte {
      return data.peekI8($29) - 64;
   }

   public method setFEGDepthVelocitySensitivityCurve(byte _v) {
      // 0..4
      data.pokeI8($2A, _v);
   }

   public method getFEGDepthVelocitySensitivityCurve() : byte {
      return data.peekI8($2A);
   }

   public method setFEGTimeKeyFollowSensitivity(byte _v) {
      // -64..63
      data.pokeI8($2B, _v + 64);
   }

   public method getFEGTimeKeyFollowSensitivity() : byte {
      return data.peekI8($2B) - 64;
   }

   public method setFEGTimeKeyFollowSensitivityCenterNote(byte _v) {
      // 0..127 => C2..G8
      data.pokeI8($2C, _v);
   }

   public method getFEGTimeKeyFollowSensitivityCenterNote() : byte {
      return data.peekI8($2C);
   }

   public method setFilterCutoffKeyFollowSensitivity(byte _v) {
      // 0..127 => -200%..+200%
      data.pokeI8($2D, _v);
   }

   public method getFilterCutoffKeyFollowSensitivity() : byte {
      return data.peekI8($2D);
   }

   public method setFilterCutoffScalingBreakPoint1(byte _v) {
      // 0..124 => C2..E8
      data.pokeI8($2E, _v);
   }

   public method getFilterCutoffScalingBreakPoint1() : byte {
      return data.peekI8($2E);
   }

   public method setFilterCutoffScalingBreakPoint2(byte _v) {
      // 1..125 => C#2..F-8
      data.pokeI8($2F, _v);
   }

   public method getFilterCutoffScalingBreakPoint2() : byte {
      return data.peekI8($2F);
   }

   public method setFilterCutoffScalingBreakPoint3(byte _v) {
      // 2..126 => D-2..F#8
      data.pokeI8($30, _v);
   }

   public method getFilterCutoffScalingBreakPoint3() : byte {
      return data.peekI8($30);
   }

   public method setFilterCutoffScalingBreakPoint4(byte _v) {
      // 3..127 => D#2..G-8
      data.pokeI8($31, _v);
   }

   public method getFilterCutoffScalingBreakPoint4() : byte {
      return data.peekI8($31);
   }

   public method setFilterCutoffScalingOffset1(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($32, (_v >> 7) & 127);
      data.pokeI8($33, _v & 127);
   }

   public method getFilterCutoffScalingOffset1() : short {
      return ((data.peekI8($32) << 7) | data.peekI8($33)) - 128;
   }

   public method setFilterCutoffScalingOffset2(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($34, (_v >> 7) & 127);
      data.pokeI8($35, _v & 127);
   }

   public method getFilterCutoffScalingOffset2() : short {
      return ((data.peekI8($34) << 7) | data.peekI8($35)) - 128;
   }

   public method setFilterCutoffScalingOffset3(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($36, (_v >> 7) & 127);
      data.pokeI8($37, _v & 127);
   }

   public method getFilterCutoffScalingOffset3() : short {
      return ((data.peekI8($36) << 7) | data.peekI8($37)) - 128;
   }

   public method setFilterCutoffScalingOffset4(short _v) {
      // -128..127
      _v += 128;
      data.pokeI8($38, (_v >> 7) & 127);
      data.pokeI8($39, _v & 127);
   }

   public method getFilterCutoffScalingOffset4() : short {
      return ((data.peekI8($38) << 7) | data.peekI8($39)) - 128;
   }

   public method setHPFCutoffKeyFollowSensitivity(byte _v) {
      // 0..127 => -200%..+200%
      data.pokeI8($3A, _v);
   }

   public method getHPFCutoffKeyFollowSensitivity() : byte {
      return data.peekI8($3A);
   }

   public method setPEGInitialLevel(byte _v) {
      // 0..100 => -50..+50
      data.pokeI8($3B, _v + 50);
   }

   public method getPEGInitialLevel() : byte {
      return data.peekI8($3B) - 50;
   }

   public method setPEGAttackLevel(byte _v) {
      // 0..100 => -50..+50
      data.pokeI8($3C, _v + 50);
   }

   public method getPEGAttackLevel() : byte {
      return data.peekI8($3C) - 50;
   }

   public method setPEGDecay1Level(byte _v) {
      // 0..100 => -50..+50
      data.pokeI8($3D, _v + 50);
   }

   public method getPEGDecay1Level() : byte {
      return data.peekI8($3D) - 50;
   }

   public method setPEGDecay2Level(byte _v) {
      // 0..100 => -50..+50
      data.pokeI8($3E, _v + 50);
   }

   public method getPEGDecay2Level() : byte {
      return data.peekI8($3E) - 50;
   }

   public method setPEGReleaseLevel(byte _v) {
      // 0..100 => -50..+50
      data.pokeI8($3F, _v + 50);
   }

   public method getPEGReleaseLevel() : byte {
      return data.peekI8($3F) - 50;
   }

   public method setPEGAttackTime(byte _v) {
      // 0..100
      data.pokeI8($40, _v);
   }

   public method getPEGAttackTime() : byte {
      return data.peekI8($40);
   }

   public method setPEGDecay1Time(byte _v) {
      // 0..100
      data.pokeI8($41, _v);
   }

   public method getPEGDecay1Time() : byte {
      return data.peekI8($41);
   }

   public method setPEGDecay2Time(byte _v) {
      // 0..100
      data.pokeI8($42, _v);
   }

   public method getPEGDecay2Time() : byte {
      return data.peekI8($42);
   }

   public method setPEGReleaseTime(byte _v) {
      // 0..100
      data.pokeI8($43, _v);
   }

   public method getPEGReleaseTime() : byte {
      return data.peekI8($43);
   }

   public method setPEGDepthVelocitySensitivity(byte _v) {
      // 0..7
      data.pokeI8($44, _v);
   }

   public method getPEGDepthVelocitySensitivity() : byte {
      return data.peekI8($44);
   }

   public method setPEGDepth(byte _v) {
      // 0..3 => 8 oct, 2 oct, 1 oct, 0.5 oct
      data.pokeI8($45, _v);
   }

   public method getPEGDepth() : byte {
      return data.peekI8($45);
   }

   public method setPEGTimeKeyFollowSensitivity(byte _v) {
      // 0..7
      data.pokeI8($46, _v);
   }

   public method getPEGTimeKeyFollowSensitivity() : byte {
      return data.peekI8($46);
   }

   public method set2ndLFOWave(byte _v) {
      // 0..5 => Triangle, Saw Down, Saw Up, Square, Sine, S/H
      data.pokeI8($47, _v);
   }

   public method get2ndLFOWave() : byte {
      return data.peekI8($47);
   }

   public method set2ndLFOSpeed(byte _v) {
      // 0..99 => 0..50.89 Hz
      data.pokeI8($48, _v);
   }

   public method invalidateReplay2ndLFOSpeed() {
      replay_data_valid.pokeI8($48, false);
      b_replay_valid = false;
   }

   public method get2ndLFOSpeed() : byte {
      return data.peekI8($48);
   }

   public method set2ndLFOPhase(byte _v) {
      // 0..3 => 0°, 90°, 180°, 270°
      data.pokeI8($49, _v);
   }

   public method get2ndLFOPhase() : byte {
      return data.peekI8($49);
   }

   public method set2ndLFODelayTime(byte _v) {
      // 0..99
      data.pokeI8($4A, _v);
   }

   public method get2ndLFODelayTime() : byte {
      return data.peekI8($4A);
   }

   public method set2ndLFOKeyOnReset(byte _v) {
      // 0/1
      data.pokeI8($4B, _v);
   }

   public method get2ndLFOKeyOnReset() : byte {
      return data.peekI8($4B);
   }

   public method set2ndLFOPitchModulationDepth(byte _v) {
      // 0..99
      data.pokeI8($4C, _v);
   }

   public method get2ndLFOPitchModulationDepth() : byte {
      return data.peekI8($4C);
   }

   public method set2ndLFOAmplitudeModulationDepth(byte _v) {
      // 0..99
      data.pokeI8($4D, _v);
   }

   public method get2ndLFOAmplitudeModulationDepth() : byte {
      return data.peekI8($4D);
   }

   public method set2ndLFOFilterModulationDepth(byte _v) {
      // 0..99
      data.pokeI8($4E, _v);
   }

   public method get2ndLFOFilterModulationDepth() : byte {
      return data.peekI8($4E);
   }

   public method setAlgorithmNumber(byte _v) {
      data.pokeI8($4F, _v);
   }

   public method getAlgorithmNumber() : byte {
      return data.peekI8($4F);
   }

   public method setFeedbackLevel(byte _v) {
      data.pokeI8($50, _v);
   }

   public method getFeedbackLevel() : byte {
      return data.peekI8($50);
   }

   public method setExtendedLFOSwitch(byte _v) {
      data.pokeI8($52, _v);
   }

   public method getExtendedLFOSwitch() : byte {
      return data.peekI8($52);
   }

   public method setExtendedLFOSpeed(short _v) {
      // 0..415 => 0..1356.59 Hz
      data.pokeI8($53, (_v >> 7) & 127);
      data.pokeI8($54, _v & 127);
   }

   public method invalidateReplayExtendedLFOSpeed() {
      replay_data_valid.pokeI8($53, false);
      b_replay_valid = false;
   }

   public method getExtendedLFOSpeed() : short {
      return ((data.peekI8($53) << 7) | data.peekI8($54));
   }

   // <save.png>
   public virtual saveState(Stream ofs) {
      ofs.i16 = 2; // ver
      saveStateData(ofs);

      // EG Mixer Settings (v2+)
      eg_mixer_settings_peg.saveState(ofs);  // v2+
      eg_mixer_settings_feg.saveState(ofs);  // v2+

   }

   // <load.png>
   public virtual loadState(Stream ifs) : boolean {
      short ver = ifs.u16;
      if(ver >= 1)
      {
         if(loadStateData(ifs))
         {
            if(ver >= 2)
            {
               if(!eg_mixer_settings_peg.loadState(ifs))  // v2+
                  return false;

               if(!eg_mixer_settings_feg.loadState(ifs))  // v2+
                  return false;
            }
            return true;
         }
      }
      else
      {
         trace "[---] MontagePartFMCommon::loadState: invalid ver="+ver;
      }
      return false;
   }

}

// <class.png>
class MontagePartFMOperator : MontageData {
   // p.224
   int part_idx;
   int op_idx;

   Montage_EGMixerSettings eg_mixer_settings_peg;
   Montage_EGMixerSettings eg_mixer_settings_aeg;


   public static New(int _partIdx, int _opIdx) {
      local MontagePartFMOperator r;
      r.init(_partIdx, _opIdx);
      return deref r;
   }

   public method init(int _partIdx, int _opIdx) {
      part_idx = _partIdx;
      op_idx = _opIdx;
      allocData(47,  // $2F
                [$01, 1, G_SOUND,   // Oscillator Key On Reset
                 $03, 1, G_SOUND,   // Oscillator Frequency Mode   (Ratio / Fixed)
                 $04, 1, G_SOUND,   // Tune Coarse
                 $05, 1, G_SOUND,   // Tune Fine
                 $06, 1, G_SOUND,   // Detune
                 $07, 1, G_SOUND,   // Pitch Key Follow Sensitivity
                 $08, 1, G_SOUND,   // Pitch Velocity Sensitivity
                 $09, 1, G_SOUND,   // Spectral Form
                 $0A, 1, G_SOUND,   // Spectral Skirt
                 $0B, 1, G_SOUND,   // Spectral Resonance
                 $0C, 1, G_SOUND,   // PEG Initial Level
                 $0D, 1, G_SOUND,   // PEG Attack Level
                 $0E, 1, G_SOUND,   // PEG Attack Time
                 $0F, 1, G_SOUND,   // PEG Decay Time
                 $10, 1, G_SOUND,   // AEG Attack Level
                 $11, 1, G_SOUND,   // AEG Decay 1 Level
                 $12, 1, G_SOUND,   // AEG Decay 2 Level
                 $13, 1, G_SOUND,   // AEG Release (Hold) Level
                 $14, 1, G_SOUND,   // AEG Attack Time
                 $15, 1, G_SOUND,   // AEG Decay 1 Time
                 $16, 1, G_SOUND,   // AEG Decay 2 Time
                 $17, 1, G_SOUND,   // AEG Release Time
                 $18, 1, G_SOUND,   // AEG Hold Time
                 $19, 1, G_SOUND,   // AEG Time Key Follow Sensitivity
                 $1A, 1, G_SOUND,   // Operator Level
                 $1B, 1, G_SOUND,   // Level Scaling Break Point
                 $1C, 1, G_SOUND,   // Level Scaling Low Depth
                 $1D, 1, G_SOUND,   // Level Scaling High Depth
                 $1E, 1, G_SOUND,   // Level Scaling Low Curve
                 $1F, 1, G_SOUND,   // Level Scaling High Curve
                 $20, 1, G_SOUND,   // Level Velocity Sensitivity
                 $21, 1, G_SOUND,   // 2nd LFO Pitch Modulation Depth Offset
                 $22, 1, G_SOUND,   // 2nd LFO Amplitude Modulation Depth Offset
                 $23, 1, G_CTL,     // Pitch Controller Sensitivity  (Ctl Dest "OP Freq")
                 $24, 1, G_CTL,     // Level Controller Sensitivity  (Ctl Dest "OP AEG Offset")
                 $25, 5, G_CTL,     // Controller Set 1 - 16 Element Switch
                 ]
                );
   }

   public virtual send(MontagePartFMOperator _replayPartFMOperator, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      byte origVol;
      if(b_tmp_mute_part || (tmp_op_mute_mask & (1<<op_idx)))
      {
         origVol = getLevel();
         setLevel(0);
      }

      // trace "xxx MontagePartFMOperator::send: part_idx="+part_idx+" op_idx="+op_idx+" replayDiffers(_replayPartFMOperator)="+replayDiffers(_replayPartFMOperator);

      if(_bSendAll || replayDiffers(_replayPartFMOperator))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($49, (op_idx << 4) | part_idx, _replayPartFMOperator, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($49, (op_idx << 4) | part_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replayPartFMOperator);
         }
      }

      if(b_tmp_mute_part || (tmp_op_mute_mask & (1<<op_idx)))
      {
         setLevel(origVol);
      }

      return _numDiffsLeft;
   }

   public virtual copyFrom(MontagePartFMOperator _o) {
      MontageData::copyFrom(_o);

      eg_mixer_settings_peg = _o.eg_mixer_settings_peg;
      eg_mixer_settings_aeg = _o.eg_mixer_settings_aeg;
   }

   public method copyControllerSet(MontagePartFMOperator _o) {
      byte addr = $25;
      Buffer od <= _o.data;
      loop(5)
      {
         data.pokeI8(addr, od.peekI8(addr));
         addr++;
      }
   }

   public method copyPitchLevelControllerSensitivity(MontagePartFMOperator _o) {
      setPitchControllerSensitivity(_o.getPitchControllerSensitivity());
      setLevelControllerSensitivity(_o.getLevelControllerSensitivity());
   }

   public method mixSounds(local MontagePartFMOperator a, local MontagePartFMOperator b, local float amt, local int _flags) {
      if(_flags & MIXG_OP_OSC)
      {
         setOscillatorKeyOnReset( mathLerpf(a.getOscillatorKeyOnReset(), b.getOscillatorKeyOnReset(), amt) );
      }
      if(_flags & MIXG_OP_PITCH_S)
      {
         setOscillatorFrequencyMode( mathLerpf(a.getOscillatorFrequencyMode(), b.getOscillatorFrequencyMode(), amt) );
         setTuneCoarse( mathLerpf(a.getTuneCoarse(), b.getTuneCoarse(), amt) );
         setTuneFine( mathLerpf(a.getTuneFine(), b.getTuneFine(), amt) );
         setDetune( mathLerpf(a.getDetune(), b.getDetune(), amt) );
         setPitchKeyFollowSensitivity( mathLerpf(a.getPitchKeyFollowSensitivity(), b.getPitchKeyFollowSensitivity(), amt) );
         setPitchVelocitySensitivity( mathLerpf(a.getPitchVelocitySensitivity(), b.getPitchVelocitySensitivity(), amt) );
      }
      if(_flags & MIXG_OP_PITCH_B)
      {
         if(amt >= 0.5f)
         {
            setOscillatorFrequencyMode  (b.getOscillatorFrequencyMode());
            setTuneCoarse               (b.getTuneCoarse());
            setTuneFine                 (b.getTuneFine());
            setDetune                   (b.getDetune());
            setPitchKeyFollowSensitivity(b.getPitchKeyFollowSensitivity());
            setPitchVelocitySensitivity (b.getPitchVelocitySensitivity());
         }
         else
         {
            setOscillatorFrequencyMode  (a.getOscillatorFrequencyMode());
            setTuneCoarse               (a.getTuneCoarse());
            setTuneFine                 (a.getTuneFine());
            setDetune                   (a.getDetune());
            setPitchKeyFollowSensitivity(a.getPitchKeyFollowSensitivity());
            setPitchVelocitySensitivity (a.getPitchVelocitySensitivity());
         }
      }
      if(_flags & MIXG_OP_OSC)
      {
         setSpectralForm( mathLerpf(a.getSpectralForm(), b.getSpectralForm(), amt) );
         setSpectralSkirt( mathLerpf(a.getSpectralSkirt(), b.getSpectralSkirt(), amt) );
         setSpectralResonance( mathLerpf(a.getSpectralResonance(), b.getSpectralResonance(), amt) );
      }
      if(_flags & MIXG_OP_PEG_L)
      {
         setPEGInitialLevel( mathLerpf(a.getPEGInitialLevel(), b.getPEGInitialLevel(), amt) );
         setPEGAttackLevel( mathLerpf(a.getPEGAttackLevel(), b.getPEGAttackLevel(), amt) );
      }
      if(_flags & MIXG_OP_PEG_T)
      {
         setPEGAttackTime( mathLerpf(a.getPEGAttackTime(), b.getPEGAttackTime(), amt) );
         setPEGDecayTime( mathLerpf(a.getPEGDecayTime(), b.getPEGDecayTime(), amt) );
      }
      if(_flags & MIXG_OP_AEG_L)
      {
         setAEGAttackLevel( mathLerpf(a.getAEGAttackLevel(), b.getAEGAttackLevel(), amt) );
         setAEGDecay1Level( mathLerpf(a.getAEGDecay1Level(), b.getAEGDecay1Level(), amt) );
         setAEGDecay2Level( mathLerpf(a.getAEGDecay2Level(), b.getAEGDecay2Level(), amt) );
         setAEGReleaseLevel( mathLerpf(a.getAEGReleaseLevel(), b.getAEGReleaseLevel(), amt) );
      }
      if(_flags & MIXG_OP_AEG_T)
      {
         setAEGAttackTime( mathLerpf(a.getAEGAttackTime(), b.getAEGAttackTime(), amt) );
         setAEGDecay1Time( mathLerpf(a.getAEGDecay1Time(), b.getAEGDecay1Time(), amt) );
         setAEGDecay2Time( mathLerpf(a.getAEGDecay2Time(), b.getAEGDecay2Time(), amt) );
         setAEGReleaseTime( mathLerpf(a.getAEGReleaseTime(), b.getAEGReleaseTime(), amt) );
         setAEGHoldTime( mathLerpf(a.getAEGHoldTime(), b.getAEGHoldTime(), amt) );
         setAEGTimeKeyFollowSensitivity( mathLerpf(a.getAEGTimeKeyFollowSensitivity(), b.getAEGTimeKeyFollowSensitivity(), amt) );
      }
      if(_flags & MIXG_OP_LEVEL)
      {
         setOperatorLevel( mathLerpf(a.getOperatorLevel(), b.getOperatorLevel(), amt) );
         setLevelScalingBreakPoint( mathLerpf(a.getLevelScalingBreakPoint(), b.getLevelScalingBreakPoint(), amt) );
         setLevelScalingLowDepth( mathLerpf(a.getLevelScalingLowDepth(), b.getLevelScalingLowDepth(), amt) );
         setLevelScalingHighDepth( mathLerpf(a.getLevelScalingHighDepth(), b.getLevelScalingHighDepth(), amt) );
         setLevelScalingLowCurve( mathLerpf(a.getLevelScalingLowCurve(), b.getLevelScalingLowCurve(), amt) );
         setLevelScalingHighCurve( mathLerpf(a.getLevelScalingHighCurve(), b.getLevelScalingHighCurve(), amt) );
         setLevelVelocitySensitivity( mathLerpf(a.getLevelVelocitySensitivity(), b.getLevelVelocitySensitivity(), amt) );
      }
      if(_flags & MIXG_OP_MOD)
      {
         set2ndLFOPitchModulationDepthOffset( mathLerpf(a.get2ndLFOPitchModulationDepthOffset(), b.get2ndLFOPitchModulationDepthOffset(), amt) );
         set2ndLFOAmplitudeModulationDepthOffset( mathLerpf(a.get2ndLFOAmplitudeModulationDepthOffset(), b.get2ndLFOAmplitudeModulationDepthOffset(), amt) );
         setPitchControllerSensitivity( mathLerpf(a.getPitchControllerSensitivity(), b.getPitchControllerSensitivity(), amt) );
         setLevelControllerSensitivity( mathLerpf(a.getLevelControllerSensitivity(), b.getLevelControllerSensitivity(), amt) );
      }
      if(_flags & MIXG_OP_CTLSW)
      {
         copyControllerSet((amt >= 0.5f) ? b : a);
      }
   }

   public method saveAEGPreset(Montage_EGPreset _preset) {
      _preset.eg_mixer_settings = eg_mixer_settings_aeg;
      _preset.hl  = 0;
      _preset.al  = Montage_EGPreset.EGNormUni99(getAEGAttackLevel());
      _preset.d1l = Montage_EGPreset.EGNormUni99(getAEGDecay1Level());
      _preset.d2l = Montage_EGPreset.EGNormUni99(getAEGDecay2Level());
      _preset.rl  = Montage_EGPreset.EGNormUni99(getAEGReleaseLevel());
      _preset.ht  = Montage_EGPreset.EGNormUni99(getAEGHoldTime());
      _preset.at  = Montage_EGPreset.EGNormUni99(getAEGAttackTime());
      _preset.d1t = Montage_EGPreset.EGNormUni99(getAEGDecay1Time());
      _preset.d2t = Montage_EGPreset.EGNormUni99(getAEGDecay2Time());
      _preset.rt  = Montage_EGPreset.EGNormUni99(getAEGReleaseTime());
   }

   public method loadAEGPreset(Montage_EGPreset _preset) {
      eg_mixer_settings_aeg = _preset.eg_mixer_settings;
      // trace "xxx FMOperator::loadAEGPreset: preset_name_r="+eg_mixer_settings_aeg.preset_name_r+" mix_amt="+eg_mixer_settings_aeg.mix_amt;

      setAEGAttackLevel (Montage_EGPreset.EGToUni99(_preset.al));
      setAEGDecay1Level (Montage_EGPreset.EGToUni99(_preset.d1l));
      setAEGDecay2Level (Montage_EGPreset.EGToUni99(_preset.d2l));
      setAEGReleaseLevel(Montage_EGPreset.EGToUni99(_preset.rl));

      setAEGHoldTime   (Montage_EGPreset.EGToUni99(_preset.ht));
      setAEGAttackTime (Montage_EGPreset.EGToUni99(_preset.at));
      setAEGDecay1Time (Montage_EGPreset.EGToUni99(_preset.d1t));
      setAEGDecay2Time (Montage_EGPreset.EGToUni99(_preset.d2t));
      setAEGReleaseTime(Montage_EGPreset.EGToUni99(_preset.rt));
   }

   public method savePEGPreset(Montage_EGPreset _preset) {
      _preset.eg_mixer_settings = eg_mixer_settings_peg;
      _preset.hl  = Montage_EGPreset.EGNormBi50(getPEGInitialLevel());
      _preset.al  = Montage_EGPreset.EGNormBi50(getPEGAttackLevel());
      _preset.d1l = 0;
      _preset.d2l = 0;
      _preset.rl  = 0;
      _preset.ht  = 0;
      _preset.at  = Montage_EGPreset.EGNormUni99(getPEGAttackTime());
      _preset.d1t = Montage_EGPreset.EGNormUni99(getPEGDecayTime());
      _preset.d2t = 0;
      _preset.rt  = 0;
   }

   public method loadPEGPreset(Montage_EGPreset _preset) {
      eg_mixer_settings_peg = _preset.eg_mixer_settings;

      setPEGInitialLevel(Montage_EGPreset.EGToBi50(_preset.hl));
      setPEGAttackLevel (Montage_EGPreset.EGToBi50(_preset.al));

      setPEGAttackTime (Montage_EGPreset.EGToUni99(_preset.at));
      setPEGDecayTime  (Montage_EGPreset.EGToUni99(_preset.d1t));
   }

   public method setOscillatorKeyOnReset(byte _v) {
      data.pokeI8($01, _v);
   }

   public method getOscillatorKeyOnReset() : byte {
      return data.peekI8($01);
   }

   public method setOscillatorFrequencyMode(byte _v) {
      data.pokeI8($03, _v);
   }

   public method getOscillatorFrequencyMode() : byte {
      return data.peekI8($03);
   }

   public method setTuneCoarse(byte _v) {
      data.pokeI8($04, _v);
   }

   public method getTuneCoarse() : byte {
      return data.peekI8($04);
   }

   public method setTuneFine(byte _v) {
      data.pokeI8($05, _v);
   }

   public method getTuneFine() : byte {
      return data.peekI8($05);
   }

   public method setDetune(byte _v) {
      data.pokeI8($06, _v + 15);
   }

   public method getDetune() : byte {
      return data.peekI8($06) - 15;
   }

   public method setPitchKeyFollowSensitivity(byte _v) {
      data.pokeI8($07, _v);
   }

   public method getPitchKeyFollowSensitivity() : byte {
      return data.peekI8($07);
   }

   public method setPitchVelocitySensitivity(byte _v) {
      data.pokeI8($08, _v + 7);
   }

   public method getPitchVelocitySensitivity() : byte {
      return data.peekI8($08) - 7;
   }

   public method setSpectralForm(byte _v) {
      data.pokeI8($09, _v);
   }

   public method getSpectralForm() : byte {
      return data.peekI8($09);
   }

   public method setSpectralSkirt(byte _v) {
      data.pokeI8($0A, _v);
   }

   public method getSpectralSkirt() : byte {
      return data.peekI8($0A);
   }

   public method setSpectralResonance(byte _v) {
      data.pokeI8($0B, _v);
   }

   public method getSpectralResonance() : byte {
      return data.peekI8($0B);
   }

   public method setPEGInitialLevel(byte _v) {
      data.pokeI8($0C, _v + 50);
   }

   public method getPEGInitialLevel() : byte {
      return data.peekI8($0C) - 50;
   }

   public method setPEGAttackLevel(byte _v) {
      data.pokeI8($0D, _v + 50);
   }

   public method getPEGAttackLevel() : byte {
      return data.peekI8($0D) - 50;
   }

   public method setPEGAttackTime(byte _v) {
      data.pokeI8($0E, _v);
   }

   public method getPEGAttackTime() : byte {
      return data.peekI8($0E);
   }

   public method setPEGDecayTime(byte _v) {
      data.pokeI8($0F, _v);
   }

   public method getPEGDecayTime() : byte {
      return data.peekI8($0F);
   }

   public method setAEGAttackLevel(byte _v) {
      data.pokeI8($10, _v);
   }

   public method getAEGAttackLevel() : byte {
      return data.peekI8($10);
   }

   public method setAEGDecay1Level(byte _v) {
      data.pokeI8($11, _v);
   }

   public method getAEGDecay1Level() : byte {
      return data.peekI8($11);
   }

   public method setAEGDecay2Level(byte _v) {
      data.pokeI8($12, _v);
   }

   public method getAEGDecay2Level() : byte {
      return data.peekI8($12);
   }

   public method setAEGReleaseLevel(byte _v) {
      data.pokeI8($13, _v);
   }

   public method getAEGReleaseLevel() : byte {
      return data.peekI8($13);
   }

   public method setAEGAttackTime(byte _v) {
      data.pokeI8($14, _v);
   }

   public method getAEGAttackTime() : byte {
      return data.peekI8($14);
   }

   public method setAEGDecay1Time(byte _v) {
      data.pokeI8($15, _v);
   }

   public method getAEGDecay1Time() : byte {
      return data.peekI8($15);
   }

   public method setAEGDecay2Time(byte _v) {
      data.pokeI8($16, _v);
   }

   public method getAEGDecay2Time() : byte {
      return data.peekI8($16);
   }

   public method setAEGReleaseTime(byte _v) {
      data.pokeI8($17, _v);
   }

   public method getAEGReleaseTime() : byte {
      return data.peekI8($17);
   }

   public method getAEGTimeByIdx(byte _idx) {
      // 0..3 => attack/decay1/decay2/release
      return data.peekI8($14 + (_idx&3));
   }

   public method setAEGTimeByIdx(byte _idx, byte _v) {
      data.pokeI8($14 + (_idx&3), _v);
   }

   public method setAEGHoldTime(byte _v) {
      data.pokeI8($18, _v);
   }

   public method getAEGHoldTime() : byte {
      return data.peekI8($18);
   }

   public method setAEGTimeKeyFollowSensitivity(byte _v) {
      data.pokeI8($19, _v);
   }

   public method getAEGTimeKeyFollowSensitivity() : byte {
      return data.peekI8($19);
   }

   public method setOperatorLevel(byte _v) {
      data.pokeI8($1A, _v);
   }

   public method getOperatorLevel() : byte {
      return data.peekI8($1A);
   }

   public method setLevelScalingBreakPoint(byte _v) {
      // 0..99 => A-1..C+8
      data.pokeI8($1B, _v);
   }

   public method getLevelScalingBreakPoint() : byte {
      return data.peekI8($1B);
   }

   public method setLevelScalingLowDepth(byte _v) {
      data.pokeI8($1C, _v);
   }

   public method getLevelScalingLowDepth() : byte {
      return data.peekI8($1C);
   }

   public method setLevelScalingHighDepth(byte _v) {
      data.pokeI8($1D, _v);
   }

   public method getLevelScalingHighDepth() : byte {
      return data.peekI8($1D);
   }

   public method setLevelScalingLowCurve(byte _v) {
      // 0..3 => -lin;-exp;+exp;+linr
      data.pokeI8($1E, _v);
   }

   public method getLevelScalingLowCurve() : byte {
      return data.peekI8($1E);
   }

   public method setLevelScalingHighCurve(byte _v) {
      // 0..3 => -lin;-exp;+exp;+linr
      data.pokeI8($1F, _v);
   }

   public method getLevelScalingHighCurve() : byte {
      return data.peekI8($1F);
   }

   public method setLevelVelocitySensitivity(byte _v) {
      data.pokeI8($20, _v + 7);
   }

   public method getLevelVelocitySensitivity() : byte {
      return data.peekI8($20) - 7;
   }

   public method set2ndLFOPitchModulationDepthOffset(byte _v) {
      // 0..7, def=3
      data.pokeI8($21, _v);
   }

   public method get2ndLFOPitchModulationDepthOffset() : byte {
      return data.peekI8($21);
   }

   public method set2ndLFOAmplitudeModulationDepthOffset(byte _v) {
      // 0..7, def=3
      data.pokeI8($22, _v);
   }

   public method get2ndLFOAmplitudeModulationDepthOffset() : byte {
      return data.peekI8($22);
   }

   public method setPitchControllerSensitivity(byte _v) {
      data.pokeI8($23, _v + 7);
   }

   public method getPitchControllerSensitivity() : byte {
      return data.peekI8($23) - 7;
   }

   public method setLevelControllerSensitivity(byte _v) {
      data.pokeI8($24, _v + 7);
   }

   public method getLevelControllerSensitivity() : byte {
      return data.peekI8($24) - 7;
   }

   public method setControllerSetBox(byte idx, byte _v) {
      // idx: 0..15   v: 0,1
      byte addr;
      if(idx >= 14)
      {
         addr = $27;
         idx -= 14;
      }
      else if(idx >= 7)
      {
         addr = $28;
         idx -= 7;
      }
      else
      {
         addr = $29;
      }
      _v = (data.peekI8(addr) & ~(1 << idx)) | ((_v&1) << idx);
      data.pokeI8(addr, _v);
   }

   public method getControllerSetBox(byte idx) : byte {
      // if(0 == idx)
      // {
      //    trace "xxx getControllerSetBox(idx="+idx+")";
      //    data.hexdump($25, 5);
      // }
      byte addr;
      if(idx >= 14)
      {
         addr = $27;
         idx -= 14;
      }
      else if(idx >= 7)
      {
         addr = $28;
         idx -= 7;
      }
      else
      {
         addr = $29;
      }
      return (0 != (data.peekI8(addr) & (1 << idx)));
   }

   public method setControllerSetBox1(byte _v) {        setControllerSetBox(1-1, _v); }
   public method getControllerSetBox1() : byte { return getControllerSetBox(1-1);     }

   public method setControllerSetBox2(byte _v) {        setControllerSetBox(2-1, _v); }
   public method getControllerSetBox2() : byte { return getControllerSetBox(2-1);     }

   public method setControllerSetBox3(byte _v) {        setControllerSetBox(3-1, _v); }
   public method getControllerSetBox3() : byte { return getControllerSetBox(3-1);     }

   public method setControllerSetBox4(byte _v) {        setControllerSetBox(4-1, _v); }
   public method getControllerSetBox4() : byte { return getControllerSetBox(4-1);     }

   public method setControllerSetBox5(byte _v) {        setControllerSetBox(5-1, _v); }
   public method getControllerSetBox5() : byte { return getControllerSetBox(5-1);     }

   public method setControllerSetBox6(byte _v) {        setControllerSetBox(6-1, _v); }
   public method getControllerSetBox6() : byte { return getControllerSetBox(6-1);     }

   public method setControllerSetBox7(byte _v) {        setControllerSetBox(7-1, _v); }
   public method getControllerSetBox7() : byte { return getControllerSetBox(7-1);     }

   public method setControllerSetBox8(byte _v) {        setControllerSetBox(8-1, _v); }
   public method getControllerSetBox8() : byte { return getControllerSetBox(8-1);     }

   public method setControllerSetBox9(byte _v) {        setControllerSetBox(9-1, _v); }
   public method getControllerSetBox9() : byte { return getControllerSetBox(9-1);     }

   public method setControllerSetBox10(byte _v) {        setControllerSetBox(10-1, _v); }
   public method getControllerSetBox10() : byte { return getControllerSetBox(10-1);     }

   public method setControllerSetBox11(byte _v) {        setControllerSetBox(11-1, _v); }
   public method getControllerSetBox11() : byte { return getControllerSetBox(11-1);     }

   public method setControllerSetBox12(byte _v) {        setControllerSetBox(12-1, _v); }
   public method getControllerSetBox12() : byte { return getControllerSetBox(12-1);     }

   public method setControllerSetBox13(byte _v) {        setControllerSetBox(13-1, _v); }
   public method getControllerSetBox13() : byte { return getControllerSetBox(13-1);     }

   public method setControllerSetBox14(byte _v) {        setControllerSetBox(14-1, _v); }
   public method getControllerSetBox14() : byte { return getControllerSetBox(14-1);     }

   public method setControllerSetBox15(byte _v) {        setControllerSetBox(15-1, _v); }
   public method getControllerSetBox15() : byte { return getControllerSetBox(15-1);     }

   public method setControllerSetBox16(byte _v) {        setControllerSetBox(16-1, _v); }
   public method getControllerSetBox16() : byte { return getControllerSetBox(16-1);     }

   public method getDataOffById(String _id) : byte {
      byte r = -1;
      switch(_id)
      {
         // osc
         case "spectral_form":   r = $09; break;
         case "keysync":         r = $01; break;
         case "frmt_bw":         r = $0B; break;  // == R1/R2 res on Montage
         case "frmt_skirt":      r = $0A; break;
            // freq
         case "mode":            r = $03; break;
         case "freq_coarse":     r = $04; break;
         case "freq_fine":       r = $05; break;
         case "detune":          r = $06; break;
         case "fmt_transpose":   r = -1;  break;  // FS1R only
            // peg
         case "feg_init_val":    r = $0C; break;
         case "feg_atk_val":     r = $0D; break;
         case "feg_atk_time":    r = $0E; break;
         case "feg_dcy_time":    r = $0F; break;
            // aeg_level
         case "amp_vel_sense":   r = $20; break;
         case "eg_l1":           r = $10; break;
         case "eg_l2":           r = $11; break;
         case "eg_l3":           r = $12; break;
         case "eg_l4":           r = $13; break;
            // aeg_time
         case "eg_t1":           r = $14; break;
         case "eg_t2":           r = $15; break;
         case "eg_t3":           r = $16; break;
         case "eg_t4":           r = $17; break;
      }
      return r;
   }

   public method setLevel(byte _lvl) {
      data.pokeI8($1A, _lvl);
   }

   public method getLevel() : byte {
      return data.peekI8($1A);
   }

   // <save.png>
   public virtual saveState(Stream ofs) {
      ofs.i16 = 2; // ver
      saveStateData(ofs);

      // EG Mixer Settings (v2+)
      eg_mixer_settings_peg.saveState(ofs);  // v2+
      eg_mixer_settings_aeg.saveState(ofs);  // v2+

   }

   // <load.png>
   public virtual loadState(Stream ifs) : boolean {
      short ver = ifs.u16;
      if(ver >= 1)
      {
         if(loadStateData(ifs))
         {
            if(ver >= 2)
            {
               if(!eg_mixer_settings_peg.loadState(ifs))  // v2+
                  return false;

               if(!eg_mixer_settings_aeg.loadState(ifs))  // v2+
                  return false;
            }
            return true;
         }
      }
      else
      {
         trace "[---] MontagePartFMOperator::loadState: invalid ver="+ver;
      }
      return false;
   }

}

// <class.png>
class MontagePartFM : MontageObject {
   int part_idx;
   int op_valid_mask;
   MontagePartFMCommon *common;
   MontagePartFMOperator *[] ops;

   short last_soundmix_patch_idx_lt;
   byte  last_soundmix_part_idx_lt;
   byte  last_soundmix_var_idx_lt;

   short last_soundmix_patch_idx_rt;
   byte  last_soundmix_part_idx_rt;
   byte  last_soundmix_var_idx_rt;

   short last_soundmix_patch_idx_rb;
   byte  last_soundmix_part_idx_rb;
   byte  last_soundmix_var_idx_rb;

   short last_soundmix_patch_idx_lb;
   byte  last_soundmix_part_idx_lb;
   byte  last_soundmix_var_idx_lb;

   float last_soundmix_common_x;
   float last_soundmix_common_y;

   float last_soundmix_op_1_x;
   float last_soundmix_op_1_y;

   float last_soundmix_op_2_x;
   float last_soundmix_op_2_y;

   float last_soundmix_op_3_x;
   float last_soundmix_op_3_y;

   float last_soundmix_op_4_x;
   float last_soundmix_op_4_y;

   float last_soundmix_op_5_x;
   float last_soundmix_op_5_y;

   float last_soundmix_op_6_x;
   float last_soundmix_op_6_y;

   float last_soundmix_op_7_x;
   float last_soundmix_op_7_y;

   float last_soundmix_op_8_x;
   float last_soundmix_op_8_y;

   boolean b_last_soundmix_lt_current;
   boolean b_last_soundmix_active_op_only;

   int last_soundmix_mixg_flags;

   // valid in replay_perf:
   float replay_soundmix_x;
   float replay_soundmix_y;
   float replay_soundmix_x_last;
   float replay_soundmix_y_last;

   boolean b_soundmix_cache_valid;  // valid in soundmix_perf

   float aeg_scl_exp;  // 0..99 => 0..4.95

   float replay_aeg_scl;       // to be sent (only valid in replay_patch)
   float replay_aeg_scl_last;  // last sent



   // <method_new.png>
   public static New(int _partIdx) {
      local MontagePartFM r;
      r.init(_partIdx);
      return deref r;
   }

   // <method_init.png>
   public method init(int _partIdx) {
      part_idx = _partIdx;
      op_valid_mask = 0;
      common <= MontagePartFMCommon.New(_partIdx);
      int opIdx = 0;
      loop(8)
         ops.add(#(MontagePartFMOperator.New(_partIdx, opIdx++)));
      last_soundmix_mixg_flags = MIXG_ALL & ~MIXG_OP_PITCH_B;

      aeg_scl_exp = 20.0f;
      replay_aeg_scl      = 0.0f;
      replay_aeg_scl_last = 0.0f;
   }

   public method initFromSyxCommon(Buffer _bufRecv) {
      common.initFromSyx(_bufRecv);
   }

   // <method.png>
   public method invalidateReplay() {
      common.invalidateReplay();
      MontagePartFMOperator *op;
      foreach op in ops
         op.invalidateReplay();
   }

   public virtual send(MontagePartFM _replayPartFM, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(_bHeader && (null == _fr))
         sendBulkHeader(_outDev);

      _numDiffsLeft = common.send(_replayPartFM.common, false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);

      // (note) must send bulk dump after part-type change
      MontagePartFMOperator *op;
      int bit = 1;
      int opIdx = 0;
      // trace "xxx MontagePartFM::send: part_idx="+part_idx+" op_valid_mask="+op_valid_mask;
      foreach op in ops
      {
         if(op_valid_mask & bit)
            _numDiffsLeft = op.send(_replayPartFM.ops.get(opIdx), false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         bit = bit << 1;
         opIdx++;

         if(null != _fr && _numDiffsLeft <= 0)
            break;
      }

      if(_bHeader && (null == _fr))
         sendBulkFooter(_outDev);

      return _numDiffsLeft;
   }

   public method copyFromEx(MontagePartFM _o, boolean _bCopyLastSoundMix) {
      common.copyFrom(_o.common);
      int opIdx = 0;
      loop(8)
      {
         MontagePartFMOperator op  <= ops[opIdx];
         MontagePartFMOperator oop <= _o.ops[opIdx];
         op.copyFrom(oop);
         opIdx++;
      }

      op_valid_mask = _o.op_valid_mask;

      if(_bCopyLastSoundMix)
      {
         last_soundmix_patch_idx_lt = _o.last_soundmix_patch_idx_lt;
         last_soundmix_part_idx_lt  = _o.last_soundmix_part_idx_lt;
         last_soundmix_var_idx_lt   = _o.last_soundmix_var_idx_lt;

         last_soundmix_patch_idx_rt = _o.last_soundmix_patch_idx_rt;
         last_soundmix_part_idx_rt  = _o.last_soundmix_part_idx_rt;
         last_soundmix_var_idx_rt   = _o.last_soundmix_var_idx_rt;

         last_soundmix_patch_idx_rb = _o.last_soundmix_patch_idx_rb;
         last_soundmix_part_idx_rb  = _o.last_soundmix_part_idx_rb;
         last_soundmix_var_idx_rb   = _o.last_soundmix_var_idx_rb;

         last_soundmix_patch_idx_lb = _o.last_soundmix_patch_idx_lb;
         last_soundmix_part_idx_lb  = _o.last_soundmix_part_idx_lb;
         last_soundmix_var_idx_lb   = _o.last_soundmix_var_idx_lb;

         last_soundmix_common_x = _o.last_soundmix_common_x;
         last_soundmix_common_y = _o.last_soundmix_common_y;

         last_soundmix_op_1_x = _o.last_soundmix_op_1_x;
         last_soundmix_op_1_y = _o.last_soundmix_op_1_y;

         last_soundmix_op_2_x = _o.last_soundmix_op_2_x;
         last_soundmix_op_2_y = _o.last_soundmix_op_2_y;

         last_soundmix_op_3_x = _o.last_soundmix_op_3_x;
         last_soundmix_op_3_y = _o.last_soundmix_op_3_y;

         last_soundmix_op_4_x = _o.last_soundmix_op_4_x;
         last_soundmix_op_4_y = _o.last_soundmix_op_4_y;

         last_soundmix_op_5_x = _o.last_soundmix_op_5_x;
         last_soundmix_op_5_y = _o.last_soundmix_op_5_y;

         last_soundmix_op_6_x = _o.last_soundmix_op_6_x;
         last_soundmix_op_6_y = _o.last_soundmix_op_6_y;

         last_soundmix_op_7_x = _o.last_soundmix_op_7_x;
         last_soundmix_op_7_y = _o.last_soundmix_op_7_y;

         last_soundmix_op_8_x = _o.last_soundmix_op_8_x;
         last_soundmix_op_8_y = _o.last_soundmix_op_8_y;

         b_last_soundmix_lt_current = _o.b_last_soundmix_lt_current;
         last_soundmix_mixg_flags = _o.last_soundmix_mixg_flags;
         b_last_soundmix_active_op_only = _o.b_last_soundmix_active_op_only;

         aeg_scl_exp = _o.aeg_scl_exp;

         // Reset realtime AEG scaling (copyToReplayPatch())
         replay_aeg_scl      = 0.0f;
         replay_aeg_scl_last = 0.0f;
      }
   }

   public method copyFrom(MontagePartFM _o) {
      copyFromEx(_o, true/*bCopyLastSoundMix*/);
   }

   public method copyControllerSet(MontagePartFM _o) {
      int opIdx = 0;
      loop(8)
      {
         MontagePartFMOperator op <= ops.get(opIdx);
         MontagePartFMOperator oop <= _o.ops.get(opIdx);
         // trace "xxx copy opIdx="+opIdx+" controller set";
         op.copyControllerSet(oop);
         op.copyPitchLevelControllerSensitivity(oop);
         opIdx++;
      }
   }

   public method getOpByIdx(local int _opIdx) : MontagePartFMOperator {
      return ops.get(_opIdx & 7);
   }

   public method getActiveOpByIdx(int _activeOpIdx) : MontagePartFMOperator {
      int opIdx = 0;
      int activeOpIdx = 0;
      loop(8)
      {
         MontagePartFMOperator op <= ops[opIdx++];
         if(op.getLevel() > 0)
         {
            if(activeOpIdx++ == _activeOpIdx)
               return op;
         }
      }
      return null;
   }

   public method initFromSyxOperator(Buffer _bufRecv, int _opIdx) {
      MontagePartFMOperator op <= getOpByIdx(_opIdx);
      op.initFromSyx(_bufRecv);
      op_valid_mask |= (1 << _opIdx);
   }

   public method realtimeFMSoundMix(MontagePerformance _perfLT,
                                    MontagePerformance _perfRT,
                                    MontagePerformance _perfRB,
                                    MontagePerformance _perfLB,
                                    float _x,
                                    float _y
                                    ) : boolean {
      if( (null != _perfLT) &&
          (null != _perfRT)
          )
      {
         // trace "xxx realtimeFMSoundMix p=("+_x+";"+_y+") part_idx="+part_idx;

         MontagePartFM partLT <= _perfLT.getPartFMByIdx(part_idx);
         MontagePartFM partRT <= _perfRT.getPartFMByIdx(part_idx);
         MontagePartFM *partRB;
         MontagePartFM *partLB;
         if( (null != _perfRB) &&
             (null != _perfLB)
             )
         {
            partRB <= _perfRB.getPartFMByIdx(part_idx);
            partLB <= _perfLB.getPartFMByIdx(part_idx);
         }
         else
         {
            partRB <= null;
            partLB <= null;
         }

         if(null != partLT &&
            null != partRT
            )
         {
            int mixGroupFlags = MIXG_ALL;
            MontagePartFMCommon *comMixT;
            MontagePartFMCommon *comMixB;
            MontagePartFMOperator *opMixT;
            MontagePartFMOperator *opMixB;
            if(null == comMixT)
            {
               comMixT <= MontagePartFMCommon.New(0);
               comMixB <= MontagePartFMCommon.New(0);
               opMixT <= MontagePartFMOperator.New(0, 0);
               opMixB <= MontagePartFMOperator.New(0, 0);
            }
            if(null != partRB &&
               null != partLB
               )
            {
               comMixT.mixSounds(partLT.common, partRT.common, _x, mixGroupFlags);
               comMixB.mixSounds(partLB.common, partRB.common, _x, mixGroupFlags);
               common .mixSounds(comMixT,       comMixB,       _y, mixGroupFlags);
            }
            else
            {
               common.mixSounds(partLT.common, partRT.common, _x, mixGroupFlags);
            }

            MontagePartFMOperator *opLT;
            MontagePartFMOperator *opRT;
            MontagePartFMOperator *opRB;
            MontagePartFMOperator *opLB;
            MontagePartFMOperator *opDst;
            int opIdx = 0;
            loop(8)
            {
               opDst <= ops[opIdx];
               opLT  <= partLT.getOpByIdx(opIdx);
               opRT  <= partRT.getOpByIdx(opIdx);

               if(null != partRB &&
                  null != partLB
                  )
               {
                  opRB  <= partRB.getOpByIdx(opIdx);
                  opLB  <= partLB.getOpByIdx(opIdx);
                  opMixT.mixSounds(opLT,   opRT,   _x, mixGroupFlags);
                  opMixB.mixSounds(opLB,   opRB,   _x, mixGroupFlags);
                  opDst .mixSounds(opMixT, opMixB, _y, mixGroupFlags);
               }
               else
               {
                  opDst.mixSounds(opLT,   opRT,   _x, mixGroupFlags);
                  // trace "xxx mix opIdx="+opIdx+" _x="+_x+" mixGroupFlags="+mixGroupFlags+" lvlLT="+opLT.getLevel()+" lvlRT="+opRT.getLevel()+" lvlDst="+opDst.getLevel();
               }
               opIdx++;
            }

            return true;
         }
      }
      return false;
   }

   public method setAEGSclExp(float _exp) {
      aeg_scl_exp = _exp;
   }

   public method getAEGSclExp() : float {
      return aeg_scl_exp;
   }

   public method setAlgorithm(byte _algorithm) {
      Buffer data <= common.data;
      data.pokeI8($4F, _algorithm);
   }

   public method getAlgorithm() : byte {
      Buffer data <= common.data;
      return data.peekI8($4F);
   }

   public method setFeedback(byte _fb) {
      Buffer data <= common.data;
      data.pokeI8($50, _fb);
   }

   public method getFeedback() : byte {
      Buffer data <= common.data;
      return data.peekI8($50);
   }

   // <method.png>
   public method replaySetAEGScale(float _scl) {
      replay_aeg_scl = _scl;
   }

   // <method.png>
   public method replayApplyAEGScale(MontagePartFM _patchPartFM, float _aegScl, float _aegSclExp) : boolean {
      float v;
      if(_aegScl < 0.0)
         v = 1.0 / (-_aegScl + 1.0);
      else
         v = _aegScl + 1.0;

      float exp = _aegSclExp / 20.0f;

      int opIdx = 0;
      loop(8)
      {
         MontagePartFMOperator replayOp <= ops.get(opIdx);
         MontagePartFMOperator patchOp <= _patchPartFM.getOpByIdx(opIdx);

         int stageIdx = 0;
         loop(4)
         {
            short c = patchOp.getAEGTimeByIdx(stageIdx);
            short n = c * v;
            short d = n - c;
            n = c + mathPowerf(1.0 - (c/99.0f), exp) * d;
            replayOp.setAEGTimeByIdx(stageIdx, mathClampi(n, 0, 99));

            stageIdx++;
         }

         // trace "xxx applyAEGScale: opIdx="+opIdx+" lvl="+replayOp.getLevel()+" RlsT="+replayOp.getAEGReleaseTime();

         opIdx++;
      }

   }

   // <method.png>
   public method dumpEGSettings(PointerArray _currentEGSettings, int _opFilter) {

      // // // common.dumpEGSettings(_currentEGSettings);

      int opIdx = 0;
      loop(8)
      {
         if( (-1 == _opFilter) || (_opFilter == opIdx) )
         {
            MontagePartFMOperator op <= getOpByIdx(opIdx);
            if(op.getLevel() > 0)
            {
               Montage_EGPreset *p;

               p <= new Montage_EGPreset;
               p.name = "FM op "+(opIdx+1)+" peg";
               op.savePEGPreset(p);
               _currentEGSettings.add(#(deref p));
               p.dump();

               p <= new Montage_EGPreset;
               p.name = "FM op "+(opIdx+1)+" aeg";
               op.saveAEGPreset(p);
               _currentEGSettings.add(#(deref p));
               p.dump();
            }
         }

         // Next op
         opIdx++;
      }
   }

   // <save.png>
   public virtual saveState(Stream ofs) {
      ofs.i16 = 6; // ver

      common.saveState(ofs);

      ofs.i8 = op_valid_mask;
      MontagePartFMOperator *op;
      int bit = 1;
      int opIdx = 0;
      foreach op in ops
      {
         if(op_valid_mask & bit)
            op.saveState(ofs);
         bit = bit << 1;
         opIdx++;
      }

      // SoundMix settings (v2+)
      ofs.i32 = last_soundmix_patch_idx_lt;
      ofs.i32 = last_soundmix_part_idx_lt;
      ofs.i32 = last_soundmix_var_idx_lt;

      ofs.i32 = last_soundmix_patch_idx_rt;
      ofs.i32 = last_soundmix_part_idx_rt;
      ofs.i32 = last_soundmix_var_idx_rt;

      ofs.i32 = last_soundmix_patch_idx_rb;
      ofs.i32 = last_soundmix_part_idx_rb;
      ofs.i32 = last_soundmix_var_idx_rb;

      ofs.i32 = last_soundmix_patch_idx_lb;
      ofs.i32 = last_soundmix_part_idx_lb;
      ofs.i32 = last_soundmix_var_idx_lb;

      ofs.f32 = last_soundmix_common_x;
      ofs.f32 = last_soundmix_common_y;

      ofs.f32 = last_soundmix_op_1_x;
      ofs.f32 = last_soundmix_op_1_y;

      ofs.f32 = last_soundmix_op_2_x;
      ofs.f32 = last_soundmix_op_2_y;

      ofs.f32 = last_soundmix_op_3_x;
      ofs.f32 = last_soundmix_op_3_y;

      ofs.f32 = last_soundmix_op_4_x;
      ofs.f32 = last_soundmix_op_4_y;

      ofs.f32 = last_soundmix_op_5_x;
      ofs.f32 = last_soundmix_op_5_y;

      ofs.f32 = last_soundmix_op_6_x;
      ofs.f32 = last_soundmix_op_6_y;

      ofs.f32 = last_soundmix_op_7_x;
      ofs.f32 = last_soundmix_op_7_y;

      ofs.f32 = last_soundmix_op_8_x;
      ofs.f32 = last_soundmix_op_8_y;

      ofs.i8 = b_last_soundmix_lt_current;  // v3+

      ofs.i32 = last_soundmix_mixg_flags;  // v4+

      ofs.i8 = b_last_soundmix_active_op_only;  // v5+

      ofs.f32 = aeg_scl_exp;  // v6+
   }

   // <load.png>
   public virtual loadState(Stream ifs) : boolean {
      short ver = ifs.u16;
      if(ver >= 1)
      {
         if(!common.loadState(ifs))
            return false;

         op_valid_mask = ifs.u8;
         MontagePartFMOperator *op;
         int bit = 1;
         int opIdx = 0;
         foreach op in ops
         {
            if(op_valid_mask & bit)
            {
               if(!op.loadState(ifs))
                  return false;
            }
            bit = bit << 1;
            opIdx++;
         }

         if(ver >= 2)
         {
            // SoundMix Settings (v2+)
            last_soundmix_patch_idx_lt = ifs.i32;
            last_soundmix_part_idx_lt  = ifs.i32;
            last_soundmix_var_idx_lt   = ifs.i32;

            last_soundmix_patch_idx_rt = ifs.i32;
            last_soundmix_part_idx_rt  = ifs.i32;
            last_soundmix_var_idx_rt   = ifs.i32;

            last_soundmix_patch_idx_rb = ifs.i32;
            last_soundmix_part_idx_rb  = ifs.i32;
            last_soundmix_var_idx_rb   = ifs.i32;

            last_soundmix_patch_idx_lb = ifs.i32;
            last_soundmix_part_idx_lb  = ifs.i32;
            last_soundmix_var_idx_lb   = ifs.i32;

            last_soundmix_common_x = ifs.f32;
            last_soundmix_common_y = ifs.f32;

            last_soundmix_op_1_x = ifs.f32;
            last_soundmix_op_1_y = ifs.f32;

            last_soundmix_op_2_x = ifs.f32;
            last_soundmix_op_2_y = ifs.f32;

            last_soundmix_op_3_x = ifs.f32;
            last_soundmix_op_3_y = ifs.f32;

            last_soundmix_op_4_x = ifs.f32;
            last_soundmix_op_4_y = ifs.f32;

            last_soundmix_op_5_x = ifs.f32;
            last_soundmix_op_5_y = ifs.f32;

            last_soundmix_op_6_x = ifs.f32;
            last_soundmix_op_6_y = ifs.f32;

            last_soundmix_op_7_x = ifs.f32;
            last_soundmix_op_7_y = ifs.f32;

            last_soundmix_op_8_x = ifs.f32;
            last_soundmix_op_8_y = ifs.f32;

            if(ver >= 3)
            {
               b_last_soundmix_lt_current = ifs.b8;  // v3+
            }

            if(ver >= 4)
            {
               last_soundmix_mixg_flags = ifs.i32;  // v4+
            }

            if(ver >= 5)
            {
               b_last_soundmix_active_op_only = ifs.b8;  // v5+
            }

            if(ver >= 6)
            {
               aeg_scl_exp = ifs.f32;  // v6+
            }
         }

         return true;
      }
      else
      {
         trace "[---] "+yacMetaClassName()+"::loadState: invalid ver="+ver;
      }
      return false;
   }

}


// <class.png>
class MontagePartDrumKey : MontageData {
   int part_idx;
   int key_idx;
   boolean b_valid;

   public static New(int _partIdx, int _keyIdx) {
      local MontagePartDrumKey r;
      r.init(_partIdx, _keyIdx);
      return deref r;
   }

   public method init(int _partIdx, int _keyIdx) {
      part_idx = _partIdx;
      key_idx  = _keyIdx;
      allocData(47,
                [$00, 1, G_SOUND,   // Drum Key Switch
                 $01, 1, G_SOUND,   // Wave Select
                 $03, 1, G_SOUND,   // Receive Note Off
                 $04, 1, G_SOUND,   // Key Assign Mode
                 $05, 1, G_SOUND,   // Alternate Group
                 $06, 2, G_SOUND,   // Wave Number
                 $08, 1, G_SOUND,   // Pan
                 $09, 1, G_SOUND,   // Random Pan Depth
                 $0A, 1, G_SOUND,   // Alternate Pan Depth
                 $0B, 1, G_SOUND,   // Drum Key Reverb Send
                 $0C, 1, G_SOUND,   // Drum Key Variation Send
                 $0E, 1, G_SOUND,   // Drum Key Connection Switch
                 $0F, 1, G_SOUND,   // Drum Key Output Select
                 $10, 1, G_SOUND,   // Drum Key Level
                 $11, 1, G_SOUND,   // Level Velocity Sensitivity
                 $13, 1, G_SOUND,   // AEG Attack Time
                 $14, 1, G_SOUND,   // AEG Decay 1 Time
                 $15, 1, G_SOUND,   // AEG Decay 2 Time
                 $19, 1, G_SOUND,   // AEG Decay 1 Level
                 $1C, 1, G_SOUND,   // Coarse Tune
                 $1D, 1, G_SOUND,   // Fine Tune
                 $1E, 1, G_SOUND,   // Pitch Velocity Sensitivity
                 $20, 2, G_SOUND,   // LPF Cutoff Frequency
                 $22, 1, G_SOUND,   // LPF Cutoff Velocity Sensitivity
                 $23, 1, G_SOUND,   // LPF Resonance
                 $25, 2, G_SOUND,   // HPF Cutoff Frequency
                 $27, 1, G_SOUND,   // EQ Type
                 $28, 1, G_SOUND,   // EQ Q
                 $29, 2, G_SOUND,   // EQ 1 Frequency
                 $2B, 1, G_SOUND,   // EQ 1 Gain
                 $2C, 2, G_SOUND,   // EQ 2 Frequency
                 $2E, 1, G_SOUND,   // EQ 2 Gain
                 ]
                );
      b_valid = false;
   }

   public virtual send(MontagePartDrumKey _replay, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {
      if(b_valid && (_bSendAll || replayDiffers(_replay)))
      {
         if(null != _fr)
         {
            _numDiffsLeft = sendDiff($50|part_idx, key_idx, _replay, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }
         else
         {
            if(_bHeader)
               sendBulkHeader(_outDev);

            sendData($50|part_idx, key_idx, $00, _outDev);

            if(_bHeader)
               sendBulkFooter(_outDev);

            copyToReplay(_replay);
         }

      }

      return _numDiffsLeft;
   }

}


// <class.png>
class MontagePartDrum : MontageObject {
   int part_idx;
   MontagePartDrumKey *[] keys;

   public static New(int _partIdx) {
      local MontagePartDrum r;
      r.init(_partIdx);
      return deref r;
   }

   public method init(int _partIdx) {
      part_idx = _partIdx;
      int keyIdx = 0;
      loop(73)
         keys.add(#(MontagePartDrumKey.New(_partIdx, keyIdx++)));
   }

   // <method.png>
   public method invalidateReplay() {
      MontagePartDrumKey *k;
      foreach k in keys
         k.invalidateReplay();
   }

   public method copyFrom(MontagePartDrum _o) {
      int keyIdx = 0;
      loop(73)
      {
         MontagePartDrumKey k  <= keys[keyIdx];
         MontagePartDrumKey ok <= _o.keys[keyIdx];
         k.copyFrom(ok);
         k.b_valid = ok.b_valid;
         keyIdx++;
      }
   }

   public method getKeyByIdx(int _keyIdx) : MontagePartDrumKey {
      return keys.get(_keyIdx);
   }

   public method getNumValidKeys() : int {
      int r = 0;
      MontagePartDrumKey *k;
      foreach k in keys
      {
         if(k.b_valid)
            r++;
      }
      return r;
   }

   public method invalidateAllKeys() {
      MontagePartDrumKey *k;
      foreach k in keys
         k.b_valid = false;
   }

   public method initFromSyxKey(Buffer _bufRecv, int _keyIdx) {
      MontagePartDrumKey k <= getKeyByIdx(_keyIdx);
      k.initFromSyx(_bufRecv);
      k.b_valid = true;
   }

   public virtual send(MontagePartDrum _replay, boolean _bHeader, STX_MIDIOutDevice _outDev, boolean _bSendAll, int _flags, MIDIPipeFrame _fr, int _numDiffsLeft) : int {

      if(_bHeader && (null == _fr))
         sendBulkHeader(_outDev);

      MontagePartDrumKey *k;
      int keyIdx = 0;
      foreach k in keys
      {
         MontagePartDrumKey rk <= _replay.keys.get(keyIdx);
         rk.b_valid = k.b_valid;
         if(k.b_valid)
         {
            _numDiffsLeft = k.send(rk, false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
         }

         if(null != _fr && _numDiffsLeft <= 0)
            break;

         keyIdx++;
      }

      if(_bHeader && (null == _fr))
         sendBulkFooter(_outDev);

      return _numDiffsLeft;
   }

   // <save.png>
   public virtual saveState(Stream ofs) {
      ofs.i16 = 1; // ver

      ofs.i8 = getNumValidKeys();

      MontagePartDrumKey *k;
      int keyIdx = 0;
      foreach k in keys
      {
         if(k.b_valid)
         {
            ofs.i8 = keyIdx;
            k.saveState(ofs);
         }
         keyIdx++;
      }
   }

   // <load.png>
   public virtual loadState(Stream ifs) : boolean {
      short ver = ifs.u16;
      if(ver >= 1)
      {
         invalidateAllKeys();

         int numValidKeys = ifs.u8;

         loop(numValidKeys)
         {
            byte keyIdx = ifs.u8;
            MontagePartDrumKey k <= keys.get(keyIdx);
            if(!k.loadState(ifs))
               return false;
            k.b_valid = true;
         }
         return true;
      }
      else
      {
         trace "[---] "+yacMetaClassName()+"::loadState: invalid ver="+ver;
      }
      return false;
   }

}


// <class.png>
class MontagePerformance : MontageObject {
   boolean b_init;  // true=performance was initialized

   int part_valid_mask;
   int normal_part_valid_mask;
   int fm_part_valid_mask;
   int drum_part_valid_mask;

   MontagePerformanceCommon common;

   MontagePart       *[] parts;

   MontagePartNormal *[] parts_normal;
   MontagePartFM     *[] parts_fm;
   MontagePartDrum   *[] parts_drum;


   // <method_new.png>
   public static New() : MontagePerformance {
      local MontagePerformance p;
      p.init();
      return deref p;
   }

   // <method_init.png>
   public method init() {
      b_init = false;
      common.init();  // for patch name
   }

   // <method_init.png>
   public method lazyInit() {
      if(!b_init)
      {
         // trace "xxx lazyInit";
         b_init = true;

         parts.free();
         parts_normal.free();
         parts_fm.free();
         parts_drum.free();

         part_valid_mask        = 0;
         normal_part_valid_mask = 0;
         fm_part_valid_mask     = 0;
         drum_part_valid_mask   = 0;

         int partIdx = 0;
         loop(16)
         {
            parts       .add(#(MontagePart      .New(partIdx)));
            parts_normal.add(#(MontagePartNormal.New(partIdx)));
            parts_fm    .add(#(MontagePartFM    .New(partIdx)));
            parts_drum  .add(#(MontagePartDrum  .New(partIdx)));
            partIdx++;
         }
      }
   }

   // <method.png>
   public method invalidateReplay() {

      common.invalidateReplay();

      MontagePart *p;
      foreach p in parts
         p.invalidateReplay();

      MontagePartNormal *pNormal;
      foreach pNormal in parts_normal
         pNormal.invalidateReplay();

      MontagePartFM *pFM;
      foreach pFM in parts_fm
         pFM.invalidateReplay();

      MontagePartDrum *pDrum;
      foreach pDrum in parts_drum
         pDrum.invalidateReplay();

   }

   // <method.png>
   public =replay= static InvalidateReplayForUnusedParts(PointerArray       _performances,
                                                         MontagePerformance _replayPerformance
                                                         ) {
      int partIdx = 0;
      loop(16)
      {
         MontagePerformance perf <= _performances.get(partIdx);
         MontagePart *p;
         MontagePartNormal *pNormal;
         MontagePartFM *pFM;
         MontagePartDrum *pDrum;

         if( (null != perf) && perf.b_init )
         {
            if(0 == (perf.part_valid_mask & (1 << partIdx)))
            {
               p <= _replayPerformance.parts.get(partIdx);
               p.invalidateReplay();
            }

            if(0 == (perf.normal_part_valid_mask & (1 << partIdx)))
            {
               pNormal <= _replayPerformance.parts_normal.get(partIdx);
               pNormal.invalidateReplay();
            }

            if(0 == (perf.fm_part_valid_mask & (1 << partIdx)))
            {
               pFM <= _replayPerformance.parts_fm.get(partIdx);
               pFM.invalidateReplay();
            }

            if(0 == (perf.drum_part_valid_mask & (1 << partIdx)))
            {
               pDrum <= _replayPerformance.parts_drum.get(partIdx);
               pDrum.invalidateReplay();
            }

         } // if perf
         else
         {
            foreach p in _replayPerformance.parts
               p.invalidateReplay();

            foreach pNormal in _replayPerformance.parts_normal
               pNormal.invalidateReplay();

            foreach pFM in _replayPerformance.parts_fm
               pFM.invalidateReplay();

            foreach pDrum in _replayPerformance.parts_drum
               pDrum.invalidateReplay();
         }

         partIdx++;
      }
   }

   // <method.png>
   public method invalidateReplay_Common() {
      if(b_debug_diff)
         trace "xxx MontagePerformance::invalidateReplay_Common";
      common.invalidateReplay();
   }

   // <method.png>
   public method invalidateReplay_PartAssignableKnobValue(int _partIdx, int _akIdx) {
      MontagePart p <= getPartByIdx(_partIdx);
      if(null != p)
      {
         p.invalidateReplayAssignableKnobValueByIdx(_akIdx);
      }
   }

   // <method.png>
   public method invalidateReplay_PartVolume(int _partIdx) {
      MontagePart p <= getPartByIdx(_partIdx);
      if(null != p)
      {
         // trace "xxx MontagePerformance::invalidateReplay_PartVolume: partIdx="+_partIdx;
         p.invalidateReplayVolume();
      }
   }

   // <method.png>
   public method invalidateSoundMixParts() {
      MontagePartFM *morphPartFM;
      foreach morphPartFM in parts_fm
      {
         morphPartFM.b_soundmix_cache_valid = false;
      }
   }

   // <method.png>
   public method replayResetAEGScaling() {
      MontagePartFM *pFM;
      foreach pFM in parts_fm
      {
         pFM.replay_aeg_scl      = 0.0f;
         pFM.replay_aeg_scl_last = 0.0f;
      }
   }

   // <method.png>
   public method copyFrom(MontagePerformance _o) {
      lazyInit();
      _o.lazyInit();

      common.copyFrom(_o.common);

      int partIdx;

      partIdx = 0;
      loop(16)
      {
         MontagePart p <= parts[partIdx];
         MontagePart o <= _o.parts[partIdx];
         p.copyFrom(o);

         MontagePartNormal pNormal <= parts_normal[partIdx];
         MontagePartNormal oNormal <= _o.parts_normal[partIdx];
         pNormal.copyFrom(oNormal);

         MontagePartFM pFM <= parts_fm[partIdx];
         MontagePartFM oFM <= _o.parts_fm[partIdx];
         pFM.copyFrom(oFM);

         MontagePartDrum pDrum <= parts_drum[partIdx];
         MontagePartDrum oDrum <= _o.parts_drum[partIdx];
         pDrum.copyFrom(oDrum);

         partIdx++;
      }

      part_valid_mask        = _o.part_valid_mask;
      normal_part_valid_mask = _o.normal_part_valid_mask;
      fm_part_valid_mask     = _o.fm_part_valid_mask;
      drum_part_valid_mask   = _o.drum_part_valid_mask;
   }

   // <method.png>
   public method copyMFX(MontagePerformance _o) {
      common.copyMFX(_o.common);
   }

   // <method.png>
   public method copyPartFrom(int _dstPartIdx, MontagePerformance _o, int _srcPartIdx, boolean _bCopyName) {
      Global.Debug("MontagePerformance::copyPartFrom: dstPartIdx="+_dstPartIdx+" srcPartIdx="+_srcPartIdx+" bCopyName="+_bCopyName);
      lazyInit();
      _o.lazyInit();

      common.copyFrom(_o.common);

      MontagePart p <= parts[_dstPartIdx];
      MontagePart o <= _o.parts[_srcPartIdx];
      String sNameOrig;
      if(!_bCopyName)
         sNameOrig = p.getName();
      p.copyFrom(o);
      if(!_bCopyName)
         p.setName(sNameOrig);

      MontagePartNormal pNormal <= parts_normal[_dstPartIdx];
      MontagePartNormal oNormal <= _o.parts_normal[_srcPartIdx];
      pNormal.copyFrom(oNormal);

      MontagePartFM pFM <= parts_fm[_dstPartIdx];
      MontagePartFM oFM <= _o.parts_fm[_srcPartIdx];
      pFM.copyFrom(oFM);

      MontagePartDrum pDrum <= parts_drum[_dstPartIdx];
      MontagePartDrum oDrum <= _o.parts_drum[_srcPartIdx];
      pDrum.copyFrom(oDrum);

      part_valid_mask = (part_valid_mask & ~(1 << _dstPartIdx)) | ((0 != (_o.part_valid_mask & (1 << _srcPartIdx))) << _dstPartIdx);
      normal_part_valid_mask = (normal_part_valid_mask & ~(1 << _dstPartIdx)) | ((0 != (_o.normal_part_valid_mask & (1 << _srcPartIdx))) << _dstPartIdx);
      fm_part_valid_mask = (fm_part_valid_mask & ~(1 << _dstPartIdx)) | ((0 != (_o.fm_part_valid_mask & (1 << _srcPartIdx))) << _dstPartIdx);
      drum_part_valid_mask = (drum_part_valid_mask & ~(1 << _dstPartIdx)) | ((0 != (_o.drum_part_valid_mask & (1 << _srcPartIdx))) << _dstPartIdx);
   }

   // <method_get.png>
   public static GetPartValidMaskIndexed(PointerArray _performances) : int {
      int r = 0;
      int partIdx = 0;
      loop(16)
      {
         MontagePerformance p <= _performances.get(partIdx);
         if(null != p)
         {
            r |= p.part_valid_mask & (1 << partIdx);
         }
         partIdx++;
      }
      return r;
   }

   // <method_get.png>
   public static GetNormalPartValidMaskIndexed(PointerArray _performances) : int {
      int r = 0;
      int partIdx = 0;
      loop(16)
      {
         MontagePerformance p <= _performances.get(partIdx);
         if(null != p)
         {
            r |= p.normal_part_valid_mask & (1 << partIdx);
         }
         partIdx++;
      }
      return r;
   }

   // <method_get.png>
   public static GetFMPartValidMaskIndexed(PointerArray _performances) : int {
      int r = 0;
      int partIdx = 0;
      loop(16)
      {
         MontagePerformance p <= _performances.get(partIdx);
         if(null != p)
         {
            r |= p.fm_part_valid_mask & (1 << partIdx);
         }
         partIdx++;
      }
      return r;
   }

   // <method_get.png>
   public static GetDrumPartValidMaskIndexed(PointerArray _performances) : int {
      int r = 0;
      int partIdx = 0;
      loop(16)
      {
         MontagePerformance p <= _performances.get(partIdx);
         if(null != p)
         {
            r |= p.drum_part_valid_mask & (1 << partIdx);
         }
         partIdx++;
      }
      return r;
   }

   Integer bulkIdx;
   int totalSysExSz;
   int totalDataSz;
   StringArray addr_recv;
   int bulk_tStart;

   // <method.png>
   public method queryBegin() {
      part_valid_mask        = 0;
      normal_part_valid_mask = 0;
      fm_part_valid_mask     = 0;
      drum_part_valid_mask   = 0;
      bulkIdx = 0;
      totalSysExSz = 0;
      totalDataSz = 0;
      addr_recv.empty();
      bulk_tStart = milliSeconds();

      MontagePartDrum *pDrum;
      foreach pDrum in parts_drum
         pDrum.invalidateAllKeys();
   }

   // <method.png>
   public method queryNext(Buffer bufRecv) : boolean {
      // returns false when Bulk Footer was received

      MontagePart       *part;
      MontagePartNormal *partNormal;
      MontagePartFM     *partFM;
      MontagePartDrum   *partDrum;

      int bufSz = bufRecv.offset;
      int dataSzWithHeader = bufSz - 6 - 1/*checksum*/;  // (note) first byte is $02 (mode id), bytes 2..4 are address, actual data starts at offset 4
      Integer ioH = bufRecv.peekI8(7);
      Integer ioM = bufRecv.peekI8(8);
      Integer ioL = bufRecv.peekI8(9);
      Integer ioSz = dataSzWithHeader/*bufBulk.offset*/ - 4;
      totalSysExSz += bufSz+2/*F0..F7*/;
      totalDataSz += ioSz;
      if(b_recv_verbose)
         addr_recv.add("addr["+bulkIdx.printf("%4d")+"]="+ioH.printf("0x%02x ")+ioM.printf("0x%02x ")+ioL.printf("0x%02x ")+" dataSz="+ioSz.printf("0x%02x")+" ("+ioSz.printf("%3d")+") \""+GetAddrName(ioH, ioM, ioL)+"\"");

      if( ($00 == ioH) && ($7F == ioM) && ($00 == ioL) )
      {
         common.initFromSyxUnknown_00_7F_00(bufRecv);
      }
      else if( ($50 == (ioH&$F0)) )
      {
         partDrum <= parts_drum[ioH&15];
         partDrum.initFromSyxKey(bufRecv, mathClampi(ioM, 0, 72));
         drum_part_valid_mask |= (1 << (ioH&15));
      }
      else if( ($30 == ioH) )
      {
         switch(ioM)
         {
            default:
               if(ioM >= 0x60)
               {
                  if(0x70 == ioM)
                  {
                     common.initFromSyxUnknown_30_70_00(bufRecv);
                  }
                  else if(0x71 == ioM)
                  {
                     common.initFromSyxUnknown_30_71_00(bufRecv);
                  }
                  else if(ioM <= 0x67)
                  {
                     common.initFromSyxSuperknobSequence(bufRecv, (ioM&7)/*seqIdx*/);
                  }
               }
               else
               {
                  common.initFromSyxMotionSeqADLaneSequence(bufRecv, (ioM>>4)&3/*laneIdx*/, (ioM&7)/*seqIdx*/);
               }
               break;

            case $40:
               common.initFromSyx(bufRecv);
               break;

            case $41:
               common.initFromSyxReverb(bufRecv);
               break;

            case $42:
               common.initFromSyxVariation(bufRecv);
               break;

            case $43:
               common.initFromSyxADInsertA(bufRecv);
               break;

            case $44:
               common.initFromSyxADInsertB(bufRecv);
               break;

            case $45:
               common.initFromSyxMasterEQ(bufRecv);
               break;

            case $46:
               common.initFromSyxMasterEffect(bufRecv);
               break;

            case $47:
               common.initFromSyxArpeggioCommon(bufRecv);
               break;

            case $48:
               common.initFromSyxMotionSeqCommon(bufRecv);
               break;

            case $49:
               common.initFromSyxMotionSeqADLaneSettings(bufRecv);
               break;

            case $4A:
               common.initFromSyxSuperknobLaneSettings(bufRecv);
               break;

            case $4B:
               common.initFromSyxSuperknobSettings(bufRecv);
               break;

            case $4C:
               common.initFromSyxSceneCommon(bufRecv);
               break;

            case $4D:
               common.initFromSyxAudition(bufRecv);
               break;

            case $4E:
               common.initFromSyxAudioInPartAD(bufRecv);
               break;

            case $4F:
               common.initFromSyxAudioInPartUSB(bufRecv);
               break;

            case $50:
               common.initFromSyxAssignableKnobName(bufRecv);
               break;

            case $51:
               common.initFromSyxController_1_13(bufRecv);
               break;

            case $52:
               common.initFromSyxController_14_16(bufRecv);
               break;
         }
      }
      else if( ($31 == ioH) )
      {
         switch(ioM & 0xF0)
         {
            case 0x00:
               part <= parts[ioM&15];
               part.initFromSyx(bufRecv);
               part_valid_mask |= (1 << (ioM&15));
               break;

            case 0x10:
               // (note) manual bug ? says $34 $1p but must be $31 $1p
               part <= parts[ioM&15];
               part.initFromSyxMotionSeqLaneSettings(bufRecv);
               break;

            case 0x20:
               part <= parts[ioM&15];
               part.initFromSyxInsertA(bufRecv);
               break;

            case 0x30:
               part <= parts[ioM&15];
               part.initFromSyxInsertB(bufRecv);
               break;

            case 0x40:
               part <= parts[ioM&15];
               part.initFromSyxLFO(bufRecv);
               break;

            case 0x50:
               part <= parts[ioM&15];
               part.initFromSyxZoneSetting(bufRecv);
               break;

            case 0x60:
               part <= parts[ioM&15];
               part.initFromSyxArpeggioPart(bufRecv);
               break;
         }
      }
      else if( ($32 == ioH) )
      {
         part <= parts[ioM&15];
         part.initFromSyxMotionSeqLaneSequence(bufRecv, 0/*laneIdx*/, (ioM>>4)&7/*seqIdx*/);
      }
      else if( ($33 == ioH) )
      {
         part <= parts[ioM&15];
         part.initFromSyxMotionSeqLaneSequence(bufRecv, 1/*laneIdx*/, (ioM>>4)&7/*seqIdx*/);
      }
      else if( ($34 == ioH) )
      {
         part <= parts[ioM&15];
         part.initFromSyxMotionSeqLaneSequence(bufRecv, 2/*laneIdx*/, (ioM>>4)&7/*seqIdx*/);
      }
      else if( ($35 == ioH) )
      {
         part <= parts[ioM&15];
         part.initFromSyxMotionSeqLaneSequence(bufRecv, 3/*laneIdx*/, (ioM>>4)&7/*seqIdx*/);
      }
      else if( ($36 == ioH) )
      {
         part <= parts[ioM&15];
         part.initFromSyxScenePart(bufRecv, ((ioM>>4)&7)/*sceneIdx*/);
      }
      else if( ($37 == ioH) )
      {
         switch(ioM & 0xF0)
         {
            case 0x00:
               part <= parts[ioM&15];
               part.initFromSyxAssignableKnobName(bufRecv);
               break;
         }
      }
      else if( ($38 == ioH) )
      {
         switch(ioM & 0xF0)
         {
            case 0x00:
               part <= parts[ioM&15];
               part.initFromSyxController_1_13(bufRecv);
               break;

            case 0x10:
               part <= parts[ioM&15];
               part.initFromSyxController_14_16(bufRecv);
               break;
         }
      }
      else if( ($41 == ioH) )
      {
         partNormal <= parts_normal[ioM&15];
         partNormal.initFromSyxElementOscAmpPitch(bufRecv, (ioM>>4)&7);
         normal_part_valid_mask |= (1 << (ioM&15));
      }
      else if( ($42 == ioH) )
      {
         partNormal <= parts_normal[ioM&15];
         partNormal.initFromSyxElementFilterEQLFO(bufRecv, (ioM>>4)&7);
      }
      else if( ($48 == ioH) )
      {
         partFM <= parts_fm[ioM&15];
         partFM.initFromSyxCommon(bufRecv);
         fm_part_valid_mask |= (1 << (ioM&15));
      }
      else if( ($49 == ioH) )
      {
         partFM <= parts_fm[ioM&15];
         partFM.initFromSyxOperator(bufRecv, (ioM>>4)&7);
      }

      bulkIdx++;

      return (0x0F != ioH); // bulk footer ?
   }

   // <method.png>
   public method queryEnd() {
      int t = milliSeconds() - bulk_tStart;
      if(b_recv_verbose)
      {
         trace "[dbg] MontagePerformance::query: bulk addresses received:";
         String *sAddr;
         foreach sAddr in addr_recv
            trace sAddr;
      }
      trace "[dbg] MontagePerformance::query: recvd "+bulkIdx+" buffers, totalSysExSz="+totalSysExSz+", totalDataSz="+totalDataSz+" ("+(int((1000.0*totalDataSz)/totalSysExSz)/10.0)+"%)";
      trace "[dbg] MontagePerformance::query: time="+t+"ms ("+(int(float(100.0*1000.0 * totalDataSz)/t)/100)+" data bytes/sec)";  // => 25204 data bytes/sec
      if(b_recv_verbose)
         debugPrintPartValidMasks();
   }

   // <method.png>
   public method debugPrintPartValidMasks() {
      int bit = 1;
      local String s;
      stdout "[dbg] MontagePerformance::debugPrintPartValidMasks: normal=";
      loop(16)
      {
         stdout (normal_part_valid_mask & bit)?"x":"-";
         bit = bit << 1;
      }
      bit = 1;
      stdout " fm=";
      loop(16)
      {
         stdout (fm_part_valid_mask & bit)?"x":"-";
         bit = bit << 1;
      }
      stdout "\n";
   }

   // <method_get.png>
   public method canSendDiff(MontagePerformance _replayPerformance) : boolean {
      if(b_debug_diff)
      {
         trace "xxx canSendDiff: part_valid_mask="+part_valid_mask+" replay="+_replayPerformance.part_valid_mask;
         trace "xxx canSendDiff: normal_part_valid_mask="+normal_part_valid_mask+" replay="+_replayPerformance.normal_part_valid_mask;
         trace "xxx canSendDiff: fm_part_valid_mask="+fm_part_valid_mask+" replay="+_replayPerformance.fm_part_valid_mask;
      }
      return
         (part_valid_mask        == _replayPerformance.part_valid_mask       ) &&
         (normal_part_valid_mask == _replayPerformance.normal_part_valid_mask) &&
         (fm_part_valid_mask     == _replayPerformance.fm_part_valid_mask    ) ;
   }

   // <method_get.png>
   public static CanSendDiffIndexed(PointerArray _performances, MontagePerformance _replayPerformance) : boolean {
      int partValidMask       = GetPartValidMaskIndexed      (_performances);
      int normalPartValidMask = GetNormalPartValidMaskIndexed(_performances);
      int fmPartValidMask     = GetFMPartValidMaskIndexed    (_performances);
      if(b_debug_diff)
      {
         trace "xxx canSendDiffIndexed: partValidMask="+partValidMask+" replay="+_replayPerformance.part_valid_mask;
         trace "xxx canSendDiffIndexed: normalPartValidMask="+normalPartValidMask+" replay="+_replayPerformance.normal_part_valid_mask;
         trace "xxx canSendDiffIndexed: fmPartValidMask="+fmPartValidMask+" replay="+_replayPerformance.fm_part_valid_mask;
      }
      return
         (partValidMask       == _replayPerformance.part_valid_mask       ) &&
         (normalPartValidMask == _replayPerformance.normal_part_valid_mask) &&
         (fmPartValidMask     == _replayPerformance.fm_part_valid_mask    ) ;
   }

   // // <method.png>
   // public method sendPerformance(MontagePerformance _replayPerformance,
   //                               boolean            _bHeader,
   //                               STX_MIDIOutDevice  _outDev,
   //                               boolean            _bSendAll,
   //                               int                _partMask,
   //                               int                _flags/*==groupMask*/,
   //                               int                _currentPartIdx,
   //                               int                _opMuteMask,
   //                               boolean            _bSoloPart,
   //                               MIDIPipeFrame      _fr,
   //                               int                _numDiffsLeft
   //                               ) {

   //    // (todo) remove, replaced by SendPerformanceIndexed()

   //    if(!b_init)
   //       return;

   //    if(b_debug_diff && (null != _fr))
   //       trace "xxx ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ diff bSendAll="+_bSendAll+" partMask="+_partMask+" flags="+_flags+" numDiffsLeft="+_numDiffsLeft;

   //    debug_send_idx = 0;

   //    if(_bHeader && (null == _fr))
   //       sendBulkHeader(_outDev);

   //    if(part_valid_mask & 1 & _partMask)
   //    {
   //       // Utils.BufferDiff(common.data, _replayPerformance.common.data, true/*bVerbose*/);
   //       if(_flags & G_COMMON_PERF)
   //          _numDiffsLeft = common.send(_replayPerformance.common, false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
   //    }

   //    int partIdx = 0;
   //    MontagePart *p;
   //    int bit = 1;
   //    foreach p in parts
   //    {
   //       if(part_valid_mask & bit & _partMask)
   //          _numDiffsLeft = p.send(_replayPerformance.parts.get(partIdx), false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
   //       bit = bit << 1;
   //       partIdx++;
   //    }

   //    MontagePartNormal *pNormal;
   //    bit = 1;
   //    partIdx = 0;
   //    foreach pNormal in parts_normal
   //    {
   //       if(normal_part_valid_mask & bit & _partMask)
   //          _numDiffsLeft = pNormal.send(_replayPerformance.parts_normal.get(partIdx), false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
   //       bit = bit << 1;
   //       partIdx++;
   //    }

   //    MontagePartFM *pFM;
   //    bit = 1;
   //    partIdx = 0;
   //    foreach pFM in parts_fm
   //    {
   //       if(fm_part_valid_mask & bit & _partMask)
   //          _numDiffsLeft = pFM.send(_replayPerformance.parts_fm.get(partIdx), false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
   //       bit = bit << 1;
   //       partIdx++;
   //    }

   //    if(null == _fr)
   //    {
   //       if(_bHeader)
   //          sendBulkFooter(_outDev);

   //       handleSendFinished(_replayPerformance);
   //    }

   //    return _numDiffsLeft;
   // }

   // <method.png>
   public static SendPerformanceIndexed(PointerArray       _performances,
                                        MontagePerformance _replayPerformance,
                                        boolean            _bHeader,
                                        STX_MIDIOutDevice  _outDev,
                                        boolean            _bSendAll,
                                        int                _partMask,
                                        int                _flags/*==groupMask*/,
                                        int                _currentPartIdx,
                                        int                _opMuteMask,
                                        boolean            _bSoloPart,
                                        MIDIPipeFrame      _fr,
                                        int                _numDiffsLeft
                                        ) {
       // if(b_debug_diff && (null != _fr))
       //    trace "xxx ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ diff bSendAll="+_bSendAll+" partMask="+_partMask+" flags="+_flags+" numDiffsLeft="+_numDiffsLeft;
      // trace "xxx SendPerformanceIndexed --------------------------------------------";

      debug_send_idx = 0;

      if(_bHeader && (null == _fr))
         sendBulkHeader(_outDev);

      int partIdx = 0;
      loop(16)
      {
         if(_partMask & (1 << partIdx))
         {
            MontagePerformance perf <= _performances.get(partIdx);
            if(null != perf)
            {
               if(perf.b_init)
               {
                  b_tmp_mute_part  = _bSoloPart && (partIdx != _currentPartIdx);
                  tmp_op_mute_mask = (partIdx == _currentPartIdx) ? _opMuteMask : 0;

                     // Utils.BufferDiff(common.data, _replayPerformance.common.data, true/*bVerbose*/);
                  if(0 == partIdx)  // avoid infinite diff-update loop (in case another part variation uses a different setup)
                  {
                     if(perf.part_valid_mask & (1 << partIdx))
                     {
                        // if(0 == (_flags & G_SPARSE))
                           _numDiffsLeft = perf.common.send(_replayPerformance.common, false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
                     }
                  }

                  if(null != _fr && _numDiffsLeft <= 0)
                     break;

                  // trace "xxx send partIdx="+partIdx+" partValid="+(perf.part_valid_mask & (1 << partIdx));

                  if(perf.part_valid_mask & (1 << partIdx))
                  {
                     MontagePart p <= perf.parts.get(partIdx);
                     _numDiffsLeft = p.send(_replayPerformance.parts.get(partIdx), false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
                  }

                  if(null != _fr && _numDiffsLeft <= 0)
                     break;

                  if(perf.normal_part_valid_mask & (1 << partIdx))
                  {
                     MontagePartNormal pNormal <= perf.parts_normal.get(partIdx);
                     if(null != pNormal)
                        _numDiffsLeft = pNormal.send(_replayPerformance.parts_normal.get(partIdx), false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
                  }

                  if(null != _fr && _numDiffsLeft <= 0)
                     break;

                  if(perf.fm_part_valid_mask & (1 << partIdx))
                  {
                     MontagePartFM pFM <= perf.parts_fm.get(partIdx);
                     if(null != pFM)
                        _numDiffsLeft = pFM.send(_replayPerformance.parts_fm.get(partIdx), false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
                  }

                  if(null != _fr && _numDiffsLeft <= 0)
                     break;

                  if(perf.drum_part_valid_mask & (1 << partIdx))
                  {
                     MontagePartDrum pDrum <= perf.parts_drum.get(partIdx);
                     if(null != pDrum)
                        _numDiffsLeft = pDrum.send(_replayPerformance.parts_drum.get(partIdx), false/*bSingle*/, _outDev, _bSendAll, _flags, _fr, _numDiffsLeft);
                  }

               } // if perf.b_init
            }
         } // if perf

         if(null != _fr && _numDiffsLeft <= 0)
            break;

         partIdx++;
      }

      if(null == _fr)
      {
         if(_bHeader)
            sendBulkFooter(_outDev);

         HandleSendFinishedIndexed(_performances, _replayPerformance);
      }

      return _numDiffsLeft;
   }

   // // <method.png>
   // public method handleSendFinished(MontagePerformance _replayPerformance) {
   //    _replayPerformance.part_valid_mask        = part_valid_mask;
   //    _replayPerformance.normal_part_valid_mask = normal_part_valid_mask;
   //    _replayPerformance.fm_part_valid_mask     = fm_part_valid_mask;

   //    int partIdx = 0;
   //    int bit = 1;

   //    MontagePartNormal *pNormal;
   //    bit = 1;
   //    partIdx = 0;
   //    foreach pNormal in parts_normal
   //    {
   //       MontagePartNormal opNormal <= _replayPerformance.parts_normal.get(partIdx);
   //       opNormal.element_valid_mask = pNormal.element_valid_mask;
   //       bit = bit << 1;
   //       partIdx++;
   //    }

   //    MontagePartFM *pFM;
   //    bit = 1;
   //    partIdx = 0;
   //    foreach pFM in parts_fm
   //    {
   //       MontagePartFM opFM <= _replayPerformance.parts_fm.get(partIdx);
   //       opFM.op_valid_mask = pFM.op_valid_mask;
   //       bit = bit << 1;
   //       partIdx++;
   //    }
   // }

   // <method.png>
   public static HandleSendFinishedIndexed(PointerArray       _performances,
                                           MontagePerformance _replayPerformance
                                           ) {
      _replayPerformance.part_valid_mask        = 0;
      _replayPerformance.normal_part_valid_mask = 0;
      _replayPerformance.fm_part_valid_mask     = 0;

      MontagePerformance *p;
      int partIdx = 0;
      loop(16)
      {
         p <= _performances[partIdx];
         if(null != p)
         {
            if(p.b_init)
            {
               _replayPerformance.part_valid_mask        |= p.part_valid_mask        & (1 << partIdx);
               _replayPerformance.normal_part_valid_mask |= p.normal_part_valid_mask & (1 << partIdx);
               _replayPerformance.fm_part_valid_mask     |= p.fm_part_valid_mask     & (1 << partIdx);

               MontagePartNormal pNormal <= p.parts_normal.get(partIdx);
               if(null != pNormal)
               {
                  MontagePartNormal opNormal <= _replayPerformance.parts_normal.get(partIdx);
                  opNormal.element_valid_mask = pNormal.element_valid_mask;
               }

               MontagePartFM pFM <= p.parts_fm.get(partIdx);
               if(null != pFM)
               {
                  MontagePartFM opFM <= _replayPerformance.parts_fm.get(partIdx);
                  opFM.op_valid_mask = pFM.op_valid_mask;
               }

               MontagePartDrum pDrum <= p.parts_drum.get(partIdx);
               if(null != pDrum)
               {
                  MontagePartDrum opDrum <= _replayPerformance.parts_drum.get(partIdx);
                  // opDrum.op_valid_mask = pDrum.op_valid_mask;
                  // (todo) ?
               }

            } // if p.b_init
         }
         partIdx++;
      }

   }

   // <method_set.png>
   public method setName(String _s) {
      common.setName(_s);
   }

   // <method_get.png>
   public method getName() : String {
      return common.getName();
   }

   // <save.png>
   public virtual saveState(Stream ofs) {
      if(MMontage.b_debug_io) trace "xxx MontagePerformance::saveState: ifs.offset="+ofs.offset;

      ofs.i16 = 2; // ver

      ofs.i8 = b_init;

      if(b_init)
      {
         common.saveState(ofs);

         ofs.i16 = part_valid_mask;
         ofs.i16 = normal_part_valid_mask;
         ofs.i16 = fm_part_valid_mask;
         ofs.i16 = drum_part_valid_mask;  // v2+

         int partIdx = 0;
         MontagePart *p;
         int bit = 1;
         foreach p in parts
         {
            if(part_valid_mask & bit)
               p.saveState(ofs);
            bit = bit << 1;
            partIdx++;
         }

         MontagePartNormal *pNormal;
         bit = 1;
         partIdx = 0;
         foreach pNormal in parts_normal
         {
            if(normal_part_valid_mask & bit)
               pNormal.saveState(ofs);
            bit = bit << 1;
            partIdx++;
         }

         MontagePartFM *pFM;
         bit = 1;
         partIdx = 0;
         foreach pFM in parts_fm
         {
            if(fm_part_valid_mask & bit)
               pFM.saveState(ofs);
            bit = bit << 1;
            partIdx++;
         }

         // drum parts (v2+)
         MontagePartDrum *pDrum;
         bit = 1;
         partIdx = 0;
         foreach pDrum in parts_drum
         {
            if(drum_part_valid_mask & bit)
               pDrum.saveState(ofs);
            bit = bit << 1;
            partIdx++;
         }

      }
   }

   // <load.png>
   public virtual loadState(Stream ifs) : boolean {
      if(MMontage.b_debug_io) trace "xxx MontagePerformance::loadState: ifs.offset="+ifs.offset;
      short ver = ifs.u16;
      if(ver >= 1)
      {
         boolean bInit = ifs.b8;

         if(bInit)
         {
            lazyInit();

            if(!common.loadState(ifs))
               return false;

            part_valid_mask        = ifs.u16;
            normal_part_valid_mask = ifs.u16;
            fm_part_valid_mask     = ifs.u16;

            if(ver >= 2)
               drum_part_valid_mask = ifs.u16;  // v2+
            else
               drum_part_valid_mask = 0;

            int partIdx = 0;
            MontagePart *p;
            int bit = 1;
            foreach p in parts
            {
               if(part_valid_mask & bit)
               {
                  if(!p.loadState(ifs))
                     return false;
               }
               bit = bit << 1;
               partIdx++;
            }

            MontagePartNormal *pNormal;
            bit = 1;
            partIdx = 0;
            foreach pNormal in parts_normal
            {
               if(normal_part_valid_mask & bit)
               {
                  if(!pNormal.loadState(ifs))
                     return false;
               }
               bit = bit << 1;
               partIdx++;
            }

            MontagePartFM *pFM;
            bit = 1;
            partIdx = 0;
            foreach pFM in parts_fm
            {
               if(fm_part_valid_mask & bit)
               {
                  if(!pFM.loadState(ifs))
                     return false;
               }
               bit = bit << 1;
               partIdx++;
            }

            // drum parts (v2+)
            if(ver >= 2)
            {
               MontagePartDrum *pDrum;
               bit = 1;
               partIdx = 0;
               foreach pDrum in parts_drum
               {
                  if(drum_part_valid_mask & bit)
                  {
                     if(!pDrum.loadState(ifs))
                        return false;
                  }
                  bit = bit << 1;
                  partIdx++;
               }
            }

         } // if bInit
         else
         {
            b_init = false;
         }

         return true;
      }
      else
      {
         trace "[---] "+yacMetaClassName()+"::loadState: invalid ver="+ver;
      }
      return false;
   }

   // <method_get.png>
   public method getPartByIdx(local int _partIdx) : MontagePart {
      if(part_valid_mask & (1 << _partIdx))
         return parts.get(_partIdx);
      return null;
   }

   // <method_get.png>
   public method getPartNormalByIdx(local int _partIdx) : MontagePartNormal {
      if(normal_part_valid_mask & (1 << _partIdx))
         return parts_normal.get(_partIdx);
      return null;
   }

   // <method_get.png>
   public method getPartFMByIdx(local int _partIdx) : MontagePartFM {
      if(fm_part_valid_mask & (1 << _partIdx))
         return parts_fm.get(_partIdx);
      return null;
   }

   // <method_get.png>
   public method getPartDrumByIdx(local int _partIdx) : MontagePartDrum {
      if(drum_part_valid_mask & (1 << _partIdx))
         return parts_drum.get(_partIdx);
      return null;
   }

   // <method_delete.png>
   public method deletePartByIdx(int _partIdx) {
      part_valid_mask &= ~(1 << _partIdx);
      deletePartNormalByIdx(_partIdx);
      deletePartFMByIdx(_partIdx);
      deletePartDrumByIdx(_partIdx);
   }

   // <method_delete.png>
   public method deletePartNormalByIdx(int _partIdx) {
      normal_part_valid_mask &= ~(1 << _partIdx);
   }

   // <method_delete.png>
   public method deletePartFMByIdx(int _partIdx) {
      fm_part_valid_mask &= ~(1 << _partIdx);
   }

   // <method_delete.png>
   public method deletePartDrumByIdx(int _partIdx) {
      drum_part_valid_mask &= ~(1 << _partIdx);
   }

   // <method_new.png>
   public method getOrCreatePartByIdx(int _partIdx) : MontagePart {
      part_valid_mask |= (1 << _partIdx);
      return parts.get(_partIdx);
   }

   // <method_new.png>
   public method getOrCreatePartNormalByIdx(int _partIdx) : MontagePartNormal {
      getOrCreatePartByIdx(_partIdx);
      deletePartFMByIdx(_partIdx);
      deletePartDrumByIdx(_partIdx);
      normal_part_valid_mask |= (1 << _partIdx);
      return parts_normal.get(_partIdx);
   }

   // <method_new.png>
   public method getOrCreatePartFMByIdx(int _partIdx) : MontagePartFM {
      getOrCreatePartByIdx(_partIdx);
      deletePartNormalByIdx(_partIdx);
      deletePartDrumByIdx(_partIdx);
      fm_part_valid_mask |= (1 << _partIdx);
      return parts_fm.get(_partIdx);
   }

   // <method_new.png>
   public method getOrCreatePartDrumByIdx(int _partIdx) : MontagePartDrum {
      getOrCreatePartByIdx(_partIdx);
      deletePartNormalByIdx(_partIdx);
      deletePartFMByIdx(_partIdx);
      drum_part_valid_mask |= (1 << _partIdx);
      return parts_drum.get(_partIdx);
   }

   // <method_get.png>
   public method getPartTypeName(int _partIdx) : String {
      int bit = (1 << _partIdx);
      if(part_valid_mask & bit)
      {
         if(fm_part_valid_mask & bit)
            return "FM-X";
         else if(normal_part_valid_mask & bit)
            return "AWM2";
         else if(drum_part_valid_mask & bit)
            return "DRUM";
      }
      return "-";
   }

   // <method_get.png>
   public method doesPartTypeDiffer(int _thisPartIdx, MontagePerformance _o, _oPartIdx) : boolean {
      if(part_valid_mask & (1 << _thisPartIdx))
      {
         if(_o.part_valid_mask & (1 << _oPartIdx))
         {
            MontagePartFM pFM <= getPartFMByIdx(_thisPartIdx);
            if(null != pFM)
            {
               return (null == _o.getPartFMByIdx(_oPartIdx));
            }
            else
            {
               MontagePartNormal pNormal <= getPartNormalByIdx(_thisPartIdx);
               if(null != pNormal)
               {
                  return (null == _o.getPartNormalByIdx(_oPartIdx));
               }
               else
               {
                  MontagePartDrum pDrum <= getPartDrumByIdx(_thisPartIdx);
                  if(null != pDrum)
                  {
                     return (null == _o.getPartDrumByIdx(_oPartIdx));
                  }
               }
            }
         }
      }
      else
      {
         if(0 == (_o.part_valid_mask & (1 << _oPartIdx)))
            return false;
      }
      return true;
   }

   // <method_set.png>
   public method setPartName(int _partIdx, String _s) {
      if(part_valid_mask & (1 << _partIdx))
      {
         MontagePart p <= parts[_partIdx];
         p.setName(_s);
      }
   }

   // <method_get.png>
   public method getPartName(int _partIdx) : String {
      if(part_valid_mask & (1 << _partIdx))
      {
         MontagePart p <= parts[_partIdx];
         return p.getName();
      }
      return "-";
   }

   // <method.png>
   public method copyControllerSet(MontagePerformance _o, int _partIdx, int _srcPartIdx) {
      MontagePartFM partFM <= getPartFMByIdx(_partIdx);
      if(null != partFM)
      {
         partFM.copyControllerSet(_o.getPartFMByIdx(_srcPartIdx));
      }
      else
      {
         MontagePartFM partNormal <= getPartNormalByIdx(_partIdx);
         if(null != partNormal)
         {
            partNormal.copyControllerSet(_o.getPartNormalByIdx(_srcPartIdx));
         }
      }
   }

   // <method.png>
   public method syncPerformance(int                _partIdx,
                                 MontagePerformance _o,
                                 int                _srcPartIdx,
                                 boolean            _bLevel,
                                 boolean            _bCtl,
                                 boolean            _bPEQ,
                                 boolean            _bPFX,
                                 boolean            _bPMSEQ,
                                 boolean            _bMFX
                                 ) : boolean {
      // (note) never creates new parts
      int numSynced = 0;

      if(null != _o)
      {
         MontagePart pSrc <= _o.getPartByIdx(_srcPartIdx);
         if(null != pSrc)
         {
            MontagePart pDst <= getPartByIdx(_partIdx);
            if(null != pDst)
            {
               if(_bLevel)
               {
                  pDst.copyLevel(pSrc);
                  numSynced++;
               }

               if(_bCtl)
               {
                  // trace "xxx syncPerformance: dstPartIdx="+_partIdx+" srcPartIdx="+_srcPartIdx;
                  pDst.copyCtl(pSrc);
                  copyControllerSet(_o, _partIdx, _srcPartIdx);

                  numSynced++;
               }

               if(_bPEQ)
               {
                  pDst.copyPEQ(pSrc);
                  numSynced++;
               }

               if(_bPFX)
               {
                  pDst.copyPFX(pSrc);
                  numSynced++;
               }

               if(_bPMSEQ)
               {
                  pDst.copyPMSEQ(pSrc);
                  numSynced++;
               }
            }
         }

         if(_bMFX)
         {
            copyMFX(_o);
            numSynced++;
         }
      }

      return (numSynced > 0);
   }


   // <method.png>
   public method resetAllKbdCtl() {
      MontagePart *p;
      foreach p in parts
      {
         if(null != p)
         {
            p.resetKbdCtl();
         }
      }
   }

   // <method.png>
   public method allPartsVolExpOff() {
      MontagePart *p;
      foreach p in parts
      {
         if(null != p)
         {
            p.setEnableVolExp(false);
         }
      }
   }

   // <method_set.png>
   public method setDataByteBySysEx(Buffer _syx) {

      byte h, m, l;

      _syx.hexdump(0, _syx.offset);

      switch(h)
      {
         default:
            if($50 <= h <= $5F)
            {
               return "Part "+(h&15)+"/15 Key "+m+"/72 Drum Part Key Group 1";
            }
            break;

         case $00:
            switch(m)
            {
               case $00: return "System";
               case $05: return "Sequencer Setup";
               case $30: return "Micro Tuning User Table 0/7";
               case $31: return "Micro Tuning User Table 1/7";
               case $32: return "Micro Tuning User Table 2/7";
               case $33: return "Micro Tuning User Table 3/7";
               case $34: return "Micro Tuning User Table 4/7";
               case $35: return "Micro Tuning User Table 5/7";
               case $36: return "Micro Tuning User Table 6/7";
               case $37: return "Micro Tuning User Table 7/7";
            }
            break;

         case $01:
            return "Curve User Table "+m;

         case $02:
            return "Live Set Bank Name";

         case $03:
            return "Live Set Page Name "+m+"/15";

         case $04:
            return "Live Set Page "+((m>>4)&15)+"/15 Slot "+(m&15)+" Table";

         case $05:
            return "Live Set Page "+(((m>>4)&15)+8)+"/15 Slot "+(m&15)+" Table";

         case $0E:
            return "Bulk Header m="+m+" l="+l;

         case $0F:
            return "Bulk Footer m="+m+" l="+l;

         case $30:
            switch(m)
            {
               default:
                  if(m < $40)
                  {
                     return "Motion Seq AD Part Lane Sequence: Lane="+((m>>4)&15)+"/3 Seq="+((m&15))+"/7";
                  }
                  else if($60 <= m <= $67)
                     return "Super Knob Sequence "+(m&15)+"/7";
                  break;
               case $40: return "Performance Common";
               case $41: return "Reverb";
               case $42: return "Variation";
               case $43: return "Insertion A for A/D";
               case $44: return "Insertion B for A/D";
               case $45: return "Master EQ";
               case $46: return "Master Effect";
               case $47: return "Arpeggio Common";
               case $48: return "Motion Seq Common Settings";
               case $49: return "Motion Seq AD Part Lane Settings";
               case $4A: return "Super Knob Lane Settings";
               case $4B: return "Super Knob Settings";
               case $4C: return "Scene Common";
               case $4D: return "Audition";
               case $4E: return "Audio In Part1 (A/D)";
               case $4F: return "Audio In Part2 (USB)";
               case $50: return "Assignable Knob Name";
               case $51: return "Common/AD Controller 1 - 13";
               case $52: return "Common/AD Controller 14 - 16";
            }
            break;

         case $31:
            switch(m & 0xF0)
            {
               case $00: return "Part "+(m&15)+"/15 Performance Part";
               case $10: return "Part "+(m&15)+"/15 Motion Seq Part/Lane Settings";
               case $20: return "Part "+(m&15)+"/15 Insertion A";
               case $30: return "Part "+(m&15)+"/15 Insertion B";
               case $40: return "Part "+(m&15)+"/15 LFO";
               case $50: return "Part "+(m&15)+"/15 Zone Setting";
               case $60: return "Part "+(m&15)+"/15 Arpeggio Part";
            }
            break;

         case $32:
            return "Part "+(m&15)+"/15 Seq "+((m>>4)&15)+"/7 Motion Seq Lane 1 Sequence";

         case $33:
            return "Part "+(m&15)+"/15 Seq "+((m>>4)&15)+"/7 Motion Seq Lane 2 Sequence";

         case $34:
            return "Part "+(m&15)+"/15 Seq "+((m>>4)&15)+"/7 Motion Seq Lane 3 Sequence";

         case $35:
            return "Part "+(m&15)+"/15 Seq "+((m>>4)&15)+"/7 Motion Seq Lane 4 Sequence";

         case $36:
            return "Part "+(m&15)+"/15 Scene "+((m>>4)&15)+"/7 Scene Part";

         case $37:
            return "Part "+(m&15)+"/15 Assignable Knob Name";

         case $38:
            if(0 == m)
               return "Part "+(m&15)+"/15 Controller 1 - 13";
            else
               return "Part "+(m&15)+"/15 Controller 14 - 16";

         case $41:
            return "Part "+(m&15)+"/15 Element "+((m>>4)&15)+"/7 Normal Part Element Group 1";

         case $42:
            return "Part "+(m&15)+"/15 Element "+((m>>4)&15)+"/7 Normal Part Element Group 2";

         case $48:
            return "Part "+(m&15)+"/15 FM Part Common";

         case $49:
            return "Part "+(m&15)+"/15 Op "+((m>>4)&15)+"/7 FM Part Operator";
      }
      return "<unknown>";
   }

}
