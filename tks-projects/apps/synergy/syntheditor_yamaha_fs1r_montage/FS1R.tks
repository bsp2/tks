// ----
// ---- file   : FS1R.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2019-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ---           derived from GenericSynthEdit
// ----
// ---- created: 24Jan2019
// ---- changed: 26Jan2019, 27Jan2019, 28Jan2019, 29Jan2019, 04Feb2019, 08Feb2019, 09Feb2019
// ----          18Feb2019, 21Feb2019, 06Apr2019, 09Nov2019, 17Nov2019, 20Nov2019, 21Nov2019
// ----          22Nov2019, 23Nov2019, 24Nov2019, 25Nov2019, 26Nov2019, 27Nov2019, 20Feb2020
// ----          08Apr2020, 10Nov2020, 09Jul2021, 13Jul2021, 02Apr2022, 07May2022, 29Sep2022
// ----          30Sep2022, 01Oct2022, 02Oct2022, 03Oct2022, 04Oct2022, 09Oct2022, 14Nov2022
// ----          11Feb2023, 21Sep2023, 03Oct2023, 08Oct2023, 21Oct2023, 27Oct2023, 22Mar2024
// ----          31Jan2025, 28Feb2025, 02Apr2025
// ----
// ----
// ----

// (note) DX11/TX81z waves:
//         W1  Sine Wave
//         W2  Odd Partials 1,3,5,7   1:2   I=0.5  V=12
//         W3  Even Partials 1,2,4,6  1:1   I=0.5  V=12
//         W4  Partials 1,2,3         1:1   I=1.0  V=32
//         W5  Partials 1,2,3,5       1:1   I=1.5  V=65
//         W6  Partials 1,2,3,5       1:1   I=1.7  V=75
//         W7  Partials 1,3,4,5       1:1   I=3.7  V=85
//         W8  Partials 1,3,4,5       1:1   I=4.0  V=87
// [http://javelinart.com/FM_Synthesis_of_Real_Instruments.pdf, p.20]

// (note) hold LALT to multi-edit parameter (all ops)

module MFS1R;

use namespace ui;
use namespace st2;

boolean b_debug = 0;
boolean b_debug2 = 0;  // hi freq

Buffer fs1r_init_perf_part;
Buffer fs1r_init_voice_common;
Buffer fs1r_init_voice_op_voiced;
Buffer fs1r_init_voice_op_unvoiced;
Buffer fs1r_init_patch;
Buffer fs1r_init_perf_effect;

function LoadInitBuffer(String _name, Buffer _b, int _sz) {
   local PakFile f;
   if(f.open(_name))
   {
      f.readBuffer(_b, 0, _sz, true/*bResize*/);
      _b.byteOrder = YAC_BIG_ENDIAN;
   }
   else
   {
      trace "[---] FS1R:LoadInitBuffer: failed to open logic file \""+_name+"\"";
      exit(10);
   }
}

LoadInitBuffer("fs1r_init_perf_part.dat",         fs1r_init_perf_part,          52);
LoadInitBuffer("fs1r_init_voice_common.dat",      fs1r_init_voice_common,      112);
LoadInitBuffer("fs1r_init_voice_op_voiced.dat",   fs1r_init_voice_op_voiced,    35);
LoadInitBuffer("fs1r_init_voice_op_unvoiced.dat", fs1r_init_voice_op_unvoiced,  27);

// Build init patch (common+voiced+unvoiced ops)
fs1r_init_patch.size = 52/*perf.part*/ + 112/*vcom*/ + ((35+27)*8/*ops*/); // 660 bytes
fs1r_init_patch.offset = 0;
fs1r_init_patch.byteOrder = YAC_BIG_ENDIAN;
fs1r_init_patch.writeBuffer(fs1r_init_perf_part,    0,  52);
fs1r_init_patch.writeBuffer(fs1r_init_voice_common, 0, 112);
loop(8/*ops*/)
{
   fs1r_init_patch.writeBuffer(fs1r_init_voice_op_voiced,   0, 35);
   fs1r_init_patch.writeBuffer(fs1r_init_voice_op_unvoiced, 0, 27);
}

LoadInitBuffer("fs1r_init_perf_effect.dat", fs1r_init_perf_effect, 112);

// trace "xxx fs1r init patch offset="+fs1r_init_patch.offset+" bank="+fs1r_init_patch.peekI8(0x1);
// exit(10);


StringArray alg_expr;
function AlgInit() {
   local String buf;
   if(buf.load("fs1r_alg.txt", true/*bRemoveCR*/))
   {
      local StringArray lines <= buf.splitChar('\n');
      local String *line;
      int algNr = 1;
      foreach line in lines
      {
         line.trim();
         if(!line.isBlank())
         {
            if!(line <= "#")
            {
               if(b_debug)
                  trace "[dbg] fs1r: parse alg["+algNr+"]: "+line;
               alg_expr.add(line);
            }
         }
      }
      if(88 != alg_expr.numElements)
      {
         trace "[---] FS1R:AlgInit: wrong alg count (have="+alg_expr.numElements+", expect 88)";
         exit(10);
      }
   }
   else
   {
      trace "[---] FS1R:AlgInit: failed to load \"fs1r_alg.txt\"";
      exit(10);
   }
}
AlgInit();



// <class.png>
class FS1R_Patch {

   define int MAX_SINGLE_PARAMS = 70;  // max number of single param updates before reverting to send-entire-dump

   define int OFF_PERF_PART           =   0;
   define int NUM_PERF_PART           =  52;

   define int OFF_VOICE_COMMON        =  52;
   define int NUM_VOICE_COMMON        = 112;

   define int OFF_VOICE_VOICED_OP1    = 164;
   define int NUM_VOICE_VOICED_OP     =  35;

   define int OFF_VOICE_UNVOICED_OP1  = 199;
   define int NUM_VOICE_UNVOICED_OP   =  27;

   define int NUM_VOICE_OP            = 35 + 27;  // 62 bytes

   define int NUM_VOICE               = NUM_VOICE_COMMON + NUM_VOICE_OP*8;  // 608 bytes

   define int OFF_NAME = OFF_VOICE_COMMON;
   define int NUM_NAME = 10;  // excluding ASCIIZ

   define int NUM_PERF_EFFECT         = 112;

   define int MAX_FX_PARAMS = 14;


   MIDISynthProfile *profile;

   static StringArray category_names = [
      "-",
      "Bass",
      "Lead",
      "Keys",
      "Pad",
      "Stab",
      "Bell",
      "Organ",
      "Drone",
      "FX",
      "Bassdrum",
      "Tom",
      "Snaredrum",
      "Clap",
      "Hihat",
      "Percussion",
      "Other"
                                        ];

   String patch_name;     //
   int    patch_category; // see category_names
   Buffer patch_data;     // raw patch data (voice common + 8 voiced+unvoiced ops)

   define int MULTI_MODE_OFF    = 0;  // don't reconfigure performance
   define int MULTI_MODE_CH1    = 1;  // single ch
   define int MULTI_MODE_CH11   = 2;  // all parts on same ch
   define int MULTI_MODE_CH111  = 3;  //
   define int MULTI_MODE_CH1111 = 4;  //
   define int MULTI_MODE_CH12   = 5;  // individual part channels
   define int MULTI_MODE_CH123  = 6;  //
   define int MULTI_MODE_CH1234 = 7;  //
   int     multi_mode;

   short   patch_idx_part2;  // -2=<keep>, -1=none ("-")
   short   patch_idx_part3;  //
   short   patch_idx_part4;  //

   static StringArray fx_names_reverb = [
      "-",          //  0
      "Hall1",      //  1
      "Hall2",      //  2
      "Room1",      //  3
      "Room2",      //  4
      "Room3",      //  5
      "Stage1",     //  6
      "Stage2",     //  7
      "Plate",      //  8
      "White Room", //  9
      "Tunnel",     // 10
      "Basement",   // 11
      "Canyon",     // 12
      "Delay LCR",  // 13
      "Delay L,R"   // 14
      "Echo",       // 15
      "CrossDelay"  // 16
                                         ];

   // (note) unpolar limited range values are prefixed with "~" (e.g. "~10~Diffusion:$52")
   // (note) bipolar values are prefixed with "+" (-64..+63), "+12+", "+24+", or "+50+"
   // (note) 14bit values are prefixed with "*" (e.g. LchDelay)
   // (note) name is followed by param-nr (e.g. ":$50")
   // (note) param-nr is optionally followed by option list (e.g. ":mono;stereo")
   // (note) all effects share the same short or byte range
   //         - reverb: $50..$5E are shorts
   //         - reverb: $60..$67 are bytes
   //         - variation: $68..$01:06 are shorts
   //         - insertion: $01:08..$01:26 are shorts
   // (note) pan/return/xsend params are handled separately

   static PointerArray reverb_params = [

      // 1: Hall1
      ["~69~ReverbTime:$50",
       "~10~Diffusion:$52",
       "InitDelay:$54",
       "~52~HPF Cutoff:$56",
       "~60~LPF Cutoff:$58",
       "~63~Rev Delay:$62",
       "~4~Density:$63",
       "+ER / Rev:$64",
       "~10~High Damp:$65",
       "+FB Level:$66"
       ],

      // 2: Hall2
      ["~69~ReverbTime:$50",
       "~10~Diffusion:$52",
       "InitDelay:$54",
       "~52~HPF Cutoff:$56",
       "~60~LPF Cutoff:$58",
       "~63~Rev Delay:$62",
       "~4~Density:$63",
       "+ER / Rev:$64",
       "~10~High Damp:$65",
       "+FB Level:$66"
       ],

      // 3: Room1
      ["~69~ReverbTime:$50",
       "~10~Diffusion:$52",
       "InitDelay:$54",
       "~52~HPF Cutoff:$56",
       "~60~LPF Cutoff:$58",
       "~63~Rev Delay:$62",
       "~4~Density:$63",
       "+ER / Rev:$64",
       "~10~High Damp:$65",
       "+FB Level:$66"
       ],

      // 4: Room2
      ["~69~ReverbTime:$50",
       "~10~Diffusion:$52",
       "InitDelay:$54",
       "~52~HPF Cutoff:$56",
       "~60~LPF Cutoff:$58",
       "~63~Rev Delay:$62",
       "~4~Density:$63",
       "+ER / Rev:$64",
       "~10~High Damp:$65",
       "+FB Level:$66"
       ],

      // 5: Room3
      ["~69~ReverbTime:$50",
       "~10~Diffusion:$52",
       "InitDelay:$54",
       "~52~HPF Cutoff:$56",
       "~60~LPF Cutoff:$58",
       "~63~Rev Delay:$62",
       "~4~Density:$63",
       "+ER / Rev:$64",
       "~10~High Damp:$65",
       "+FB Level:$66"
       ],

      // 6: Stage1
      ["~69~ReverbTime:$50",
       "~10~Diffusion:$52",
       "InitDelay:$54",
       "~52~HPF Cutoff:$56",
       "~60~LPF Cutoff:$58",
       "~63~Rev Delay:$62",
       "~4~Density:$63",
       "+ER / Rev:$64",
       "~10~High Damp:$65",
       "+FB Level:$66"
       ],

      // 7: Stage2
      ["~69~ReverbTime:$50",
       "~10~Diffusion:$52",
       "InitDelay:$54",
       "~52~HPF Cutoff:$56",
       "~60~LPF Cutoff:$58",
       "~63~Rev Delay:$62",
       "~4~Density:$63",
       "+ER / Rev:$64",
       "~10~High Damp:$65",
       "+FB Level:$66"
       ],

      // 8: Plate
      ["~69~ReverbTime:$50",
       "~10~Diffusion:$52",
       "InitDelay:$54",
       "~52~HPF Cutoff:$56",
       "~60~LPF Cutoff:$58",
       "~63~Rev Delay:$62",
       "~4~Density:$63",
       "+ER / Rev:$64",
       "~10~High Damp:$65",
       "+FB Level:$66"
       ],

      // 9: White Room
      ["~69~ReverbTime:$50",
       "~10~Diffusion:$52",
       "InitDelay:$54",
       "~52~HPF Cutoff:$56",
       "~60~LPF Cutoff:$58",
       "Width:$5A",
       "Height:$5C",
       "Depth:$5E",
       "Wall Vary:$60",
       "~63~Rev Delay:$62",
       "~4~Density:$63",
       "+ER / Rev:$64",
       "~10~High Damp:$65",
       "+FB Level:$66"
       ],

      // 10: Tunnel
      ["~69~ReverbTime:$50",
       "~10~Diffusion:$52",
       "InitDelay:$54",
       "~52~HPF Cutoff:$56",
       "~60~LPF Cutoff:$58",
       "Width:$5A",
       "Height:$5C",
       "Depth:$5E",
       "Wall Vary:$60",
       "~63~Rev Delay:$62",
       "~4~Density:$63",
       "+ER / Rev:$64",
       "~10~High Damp:$65",
       "+FB Level:$66"
       ],

      // 11: Basement
      ["~69~ReverbTime:$50",
       "~10~Diffusion:$52",
       "InitDelay:$54",
       "~52~HPF Cutoff:$56",
       "~60~LPF Cutoff:$58",
       "Width:$5A",
       "Height:$5C",
       "Depth:$5E",
       "Wall Vary:$60",
       "~63~Rev Delay:$62",
       "~4~Density:$63",
       "+ER / Rev:$64",
       "~10~High Damp:$65",
       "+FB Level:$66"
       ],

      // 12: Canyon
      ["~69~ReverbTime:$50",
       "~10~Diffusion:$52",
       "InitDelay:$54",
       "~52~HPF Cutoff:$56",
       "~60~LPF Cutoff:$58",
       "Width:$5A",
       "Height:$5C",
       "Depth:$5E",
       "Wall Vary:$60",
       "~63~Rev Delay:$62",
       "~4~Density:$63",
       "+ER / Rev:$64",
       "~10~High Damp:$65",
       "+FB Level:$66"
       ],

      // 13: Delay LCR
      ["~13650~Lch Delay:$50",
       "~13650~Rch Delay:$52",
       "~13650~Cch Delay:$54",
       "~13650~FB Delay:$56",
       "+FB Level:$58",
       "Cch Level:$5A",
       "~10~High Damp:$5C",
       "~40~EQ Low Freq:$64",   // 0..40
       "+12+EQ Low Gain:$65",
       "~58~EQ Hi Freq:$66",
       "+12+EQ Hi Gain:$67"
       ],

      // 14: Delay L,R
      ["~13650~Lch Delay:$50",
       "~13650~Rch Delay:$52",
       "~13650~FB Delay1:$54",
       "~13650~FB Delay2:$56",
       "+FB Level:$58",
       "~10~High Damp:$5A",
       "~40~EQ Low Freq:$64",
       "+12+EQ Low Gain:$65",
       "~58~EQ Hi Freq:$66",
       "+12+EQ Hi Gain:$67"
       ],

      // 15: Echo
      ["~13650~Lch Delay:$50",
       "+Lch FB Lvl:$52",
       "~13650~Rch Delay1:$54",
       "+Rch FB Lvl:$56",
       "~10~High Damp:$58",
       "~13650~Lch Delay2:$5A",
       "~13650~Rch Delay2:$5C",
       "Delay2 Lvl:$5E",
       "~40~EQ Low Freq:$64",
       "+12+EQ Low Gain:$65",
       "~58~EQ Hi Freq:$66",
       "+12+EQ Hi Gain:$67"
       ],

      // 16: CrossDelay
      ["L>R Delay:$50",
       "R>L Delay:$52",
       "+FB Level:$54",
       "InputSelect:$56:L;R;L&R", // L,R,L&R(R)
       "~10~High Damp:$58",
       "~40~EQ Low Freq:$64",
       "+12+EQ Low Gain:$65",
       "~58~EQ Hi Freq:$66",
       "+12+EQ Hi Gain:$67"
       ]
                                             ];

   static StringArray fx_names_variation = [
      "-",          //  0
      "Chorus",     //  1
      "Celeste",    //  2
      "Flanger",    //  3
      "Symphonic",  //  4
      "Phaser1",    //  5
      "Phaser2",    //  6
      "Ens Detune", //  7
      "Rotary SP",  //  8
      "Tremolo",    //  9
      "Auto Pan",   // 10
      "Auto Wah",   // 11
      "Touch Wah",  // 12
      "3-Band EQ",  // 13
      "HM Enhncer", // 14
      "Noise Gate", // 15
      "Compressor", // 16
      "Distortion", // 17
      "Overdrive",  // 18
      "Amp Sim",    // 19
      "Delay LCR",  // 20
      "Delay L,R",  // 21
      "Echo",       // 22
      "CrossDelay", // 23
      "Karaoke",    // 24
      "Hall",       // 25
      "Room",       // 26
      "Stage",      // 27
      "Plate"       // 28
                                            ];

   static PointerArray variation_params = [

      // 1: Chorus
      ["LFO Freq:$68",
       "LFO Depth:$6A",
       "+FB Level:$6C",
       "Delay Offset:$6E",
       "~40~EQ Low Freq:$72",
       "+12+EQ Low Gain:$74",  // -12..+12
       "~58~EQ Hi Freq:$76",
       "+12+EQ Hi Gain:$78",
       "Mode:$104:mono;stereo",  // mono,stereo(stereo)
       ],

      // 2: Celeste
      ["LFO Freq:$68",
       "LFO Depth:$6A",
       "+FB Level:$6C",
       "Delay Offset:$6E",
       "~40~EQ Low Freq:$72",
       "+12+EQ Low Gain:$74",  // -12..+12
       "~58~EQ Hi Freq:$76",
       "+12+EQ Hi Gain:$78",
       "Mode:$104:mono;stereo",  // mono,stereo(stereo)
       ],

      // 3: Flanger
      ["LFO Freq:$68",
       "LFO Depth:$6A",
       "+FB Level:$6C",
       "Delay Offset:$6E",
       "~40~EQ Low Freq:$72",
       "+12+EQ Low Gain:$74",  // -12..+12
       "~58~EQ Hi Freq:$76",
       "+12+EQ Hi Gain:$78",
       "LFO Phase:$102",  // -180°..+180°(-180°)
       ],

      // 4: Symphonic
      ["LFO Freq:$68",
       "LFO Depth:$6A",
       "Delay Offset:$6C",
       "~40~EQ Low Freq:$72",
       "+12+EQ Low Gain:$74",  // -12..+12
       "~58~EQ Hi Freq:$76",
       "+12+EQ Hi Gain:$78"
       ],

      // 5: Phaser1
      ["LFO Freq:$68",
       "LFO Depth:$6A",
       "Phase Shift:$6C",
       "+FB Level:$6E",
       "Stage:$7C:4 Stages;5 Stages;6 Stages;7 Stages;8 Stages;9 Stages;10 Stages",
       "Diffuse:$7E:mono;stereo",
       "~40~EQ Low Freq:$72",
       "+12+EQ Low Gain:$74",  // -12..+12
       "~58~EQ Hi Freq:$76",
       "+12+EQ Hi Gain:$78"
       ],

      // 6: Phaser2
      ["LFO Freq:$68",
       "LFO Depth:$6A",
       "Phase Shift:$6C",
       "+FB Level:$6E",
       "Stage:$7C:3 Stages;4 Stages;5 Stages",
       "LFO Phase:$100",
       "~40~EQ Low Freq:$72",
       "+12+EQ Low Gain:$74",  // -12..+12
       "~58~EQ Hi Freq:$76",
       "+12+EQ Hi Gain:$78"
       ],

      // 7: Ens Detune
      ["+Detune:$68",
       "InitDelayL:$6A",
       "InitDelayR:$6C",
       "~40~EQ Low Freq:$7C",
       "+12+EQ Low Gain:$7E",  // -12..+12
       "~58~EQ Hi Freq:$100",
       "+12+EQ Hi Gain:$102"
       ],

      // 8: Rotary SP
      ["LFO Freq:$68",
       "LFO Depth:$6A",
       "~40~EQ Low Freq:$72",
       "+12+EQ Low Gain:$74",  // -12..+12
       "~58~EQ Hi Freq:$76",
       "+12+EQ Hi Gain:$78"
       ],

      // 9: Tremolo
      ["LFO Freq:$68",
       "AM Depth:$6A",
       "PM Depth:$6C",
       "LFO Phase:$102",
       "~40~EQ Low Freq:$72",
       "+12+EQ Low Gain:$74",  // -12..+12
       "~58~EQ Hi Freq:$76",
       "+12+EQ Hi Gain:$78",
       "Mode:$104:mono;stereo"
       ],

      // 10: Auto Pan
      ["LFO Freq:$68",
       "L/R Depth:$6A",
       "F/R Depth:$6C",
       "PAN Dir:$6E:L<>R;L>R;Lturn;Rturn;L/R",
       "~40~EQ Low Freq:$72",
       "+12+EQ Low Gain:$74",  // -12..+12
       "~58~EQ Hi Freq:$76",
       "+12+EQ Hi Gain:$78",
       "Mode:$104:mono;stereo"
       ],

      // 11: Auto Wah
      ["LFO Freq:$68",
       "LFO Depth:$6A",
       "Cutoff Freq:$6C",
       "Resonance:$6E",
       "~40~EQ Low Freq:$72",
       "+12+EQ Low Gain:$74",  // -12..+12
       "~58~EQ Hi Freq:$76",
       "+12+EQ Hi Gain:$78"
       ],

      // 12: Touch Wah
      ["Sensivity:$68",
       "Cutoff Freq:$6A",
       "Resonance:$6C",
       "~40~EQ Low Freq:$72",
       "+12+EQ Low Gain:$74",  // -12..+12
       "~58~EQ Hi Freq:$76",
       "+12+EQ Hi Gain:$78"
       ],

      // 13: 3-Band EQ
      ["~40~Low Freq:$72",
       "+12+Low Gain:$68",  // -12..+12
       "~54~Mid Freq:$6A",
       "+12+Mid Gain:$6C",
       "~120~Mid Q:$6E",
       "~58~High Freq:$74",
       "+12+High Gain:$70",
       "Mode:$104:mono;stereo"
       ],

      // 14: HM Enhncer
      ["HPF-Cutoff:$68",
       "Drive:$6A",
       "Mix Level:$6C"
       ],

      // 15: Noise Gate
      ["Attack:$68",
       "Release:$6A",
       "Threshold:$6C",
       "Output Level:$6E"
       ],

      // 16: Compressor
      ["Attack:$68",
       "Release:$6A",
       "Threshold:$6C",
       "Ratio:$6E",
       "Output Level:$70"
       ],

      // 17: Distortion
      ["Drive:$68",
       "~40~EQ Low Freq:$6A",
       "+12+EQ Low Gain:$6C",
       "~54~EQ Mid Freq:$74",
       "+12+EQ Mid Gain:$76",
       "~120~EQ Mid Q:$78",
       "~60~LPF Cutoff:$6E",
       "Edge:$7C",
       "Output Level:$70"
       ],

      // 18: Overdrive
      ["Drive:$68",
       "~40~EQ Low Freq:$6A",
       "+12+EQ Low Gain:$6C",
       "~54~EQ Mid Freq:$74",
       "+12+EQ Mid Gain:$76",
       "~120~EQ Mid Q:$78",
       "~60~LPF Cutoff:$6E",
       "Edge:$7C",
       "Output Level:$70"
       ],

      // 19: Amp Sim
      ["Drive:$68",
       "Amp Type:$6A:off;stack;combo;tube",
       "~60~LPF Cutoff:$6C",
       "Edge:$7C",
       "Output Level:$6E"
       ],

      // 20: Delay LCR
      ["~13650~Lch Delay:$68",
       "~13650~Rch Delay:$6A",
       "~13650~Cch Delay:$6C",
       "~13650~FB Delay:$6E",
       "+FB Level:$70",
       "Cch Level:$72",
       "~10~High Damp:$74",
       "~40~EQ Low Freq:$100",
       "+12+EQ Low Gain:$102",
       "~58~EQ Hi Freq:$104",
       "+12+EQ Hi Gain:$106"
       ],

      // 21: Delay L,R
      ["~13650~Lch Delay:$68",
       "~13650~Rch Delay:$6A",
       "~13650~FB Delay1:$6C",
       "~13650~FB Delay2:$6E",
       "+FB Level:$70",
       "~10~High Damp:$72",
       "~40~EQ Low Freq:$100",
       "+12+EQ Low Gain:$102",
       "~58~EQ Hi Freq:$104",
       "+12+EQ Hi Gain:$106"
       ],

      // 22: Echo
      ["~13650~Lch Delay:$68",
       "+Lch FB Lvl:$6A",
       "~13650~Rch Delay1:$6C",
       "+Rch FB Lvl:$6E",
       "~10~High Damp:$70",
       "~13650~Lch Delay2:$72",
       "~13650~Rch Delay2:$74",
       "Delay2 Lvl:$76",
       "~40~EQ Low Freq:$100",
       "+12+EQ Low Gain:$102",
       "~58~EQ Hi Freq:$104",
       "+12+EQ Hi Gain:$106"
       ],

      // 23: CrossDelay
      ["~13650~L>R Delay:$68",
       "~13650~R>L Delay:$6A",
       "+FB Level:$6C",
       "Input Select:$6E:L;R;L&R",
       "~10~High Damp:$70",
       "~40~EQ Low Freq:$100",
       "+12+EQ Low Gain:$102",
       "~58~EQ Hi Freq:$104",
       "+12+EQ Hi Gain:$106"
       ],

      // 24: Karaoke
      ["DelayTime:$68",
       "+FB Level:$6A",
       "HPF Cutoff:$6C",
       "~60~LPF Cutoff:$6E"
       ],

      // 25: Hall
      ["~69~ReverbTime:$68",
       "~10~Diffusion:$6A", //:Diff 0;Diff 1;Diff 2;Diff 3;Diff 4;Diff 5;Diff 6;Diff 7;Diff 8;Diff 9;Diff 10
       "InitDelay:$6C",
       "~52~HPF Cutoff:$6E",
       "~60~LPF Cutoff:$70",
       "~4~Density:$7E",  // 0..4
       "+ER / Rev:$100",
       "~10~High Damp:$102",
       "+FB Level:$104"
       ],

      // 26: Room
      ["~69~ReverbTime:$68",
       "~10~Diffusion:$6A", //:Diff 0;Diff 1;Diff 2;Diff 3;Diff 4;Diff 5;Diff 6;Diff 7;Diff 8;Diff 9;Diff 10
       "InitDelay:$6C",
       "~52~HPF Cutoff:$6E",
       "~60~LPF Cutoff:$70",
       "~4~Density:$7E",  // 0..4
       "+ER / Rev:$100",
       "~10~High Damp:$102",
       "+FB Level:$104"
       ],

      // 27: Stage
      ["~69~ReverbTime:$68",
       "~10~Diffusion:$6A", //:Diff 0;Diff 1;Diff 2;Diff 3;Diff 4;Diff 5;Diff 6;Diff 7;Diff 8;Diff 9;Diff 10
       "InitDelay:$6C",
       "~52~HPF Cutoff:$6E",
       "~60~LPF Cutoff:$70",
       "~4~Density:$7E",  // 0..4
       "+ER / Rev:$100",
       "~10~High Damp:$102",
       "+FB Level:$104"
       ],

      // 28: Plate
      ["~69~ReverbTime:$68",
       "~10~Diffusion:$6A", //:Diff 0;Diff 1;Diff 2;Diff 3;Diff 4;Diff 5;Diff 6;Diff 7;Diff 8;Diff 9;Diff 10
       "InitDelay:$6C",
       "~52~HPF Cutoff:$6E",
       "~60~LPF Cutoff:$70",
       "~4~Density:$7E",  // 0..4
       "+ER / Rev:$100",
       "~10~High Damp:$102",
       "+FB Level:$104"
       ]

                                                ];

   static StringArray fx_names_insertion = [
      "-",          //  0
      "Chorus",     //  1
      "Celeste",    //  2
      "Flanger",    //  3
      "Symphonic",  //  4
      "Phaser1",    //  5
      "Phaser2",    //  6
      "Pitch Chng", //  7
      "Ens Detune", //  8
      "Rotary SP",  //  9
      "2WayRotary", // 10
      "Tremolo",    // 11
      "Auto Pan",   // 12
      "Ambience",   // 13
      "A-Wah+Dist", // 14
      "A-Wah+Odrv", // 15
      "T-Wah+Dist", // 16
      "T-Wah+Odrv", // 17
      "Wah+DS+Dly", // 18
      "Wah+OD+Dly", // 19
      "Lo-Fi",      // 20
      "3-Band EQ",  // 21
      "HM Enhncer", // 22
      "Noise Gate", // 23
      "Compressor", // 24
      "Comp+Dist",  // 25
      "Cmp+DS+Dly", // 26
      "Cmp+OD+Dly", // 27
      "Distortion", // 28
      "Dist+Delay", // 29
      "Overdrive",  // 30
      "Odrv+Delay", // 31
      "Amp Sim",    // 32
      "Delay LCR",  // 33
      "Delay L,R" , // 34
      "Echo",       // 35
      "CrossDelay", // 36
      "ER 1",       // 37
      "ER 2",       // 38
      "Gate Rev",   // 39
      "Revrs Gate"  // 40
                                            ];

   static PointerArray insertion_params = [

      // 1: Chorus
      ["LFO Freq:$108",
       "LFO Depth:$10A",
       "+FB Level:$10C",
       "Delay Offset:$10E",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",
       "~54~EQ Mid Freq:$11C",
       "+12+EQ Mid Gain:$11E",
       "~120~EQ Mid Q:$120",
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "Mode:$124:mono;stereo",
       "+Dry / Wet:$11A"
       ],

      // 2: Celeste
      ["LFO Freq:$108",
       "LFO Depth:$10A",
       "+FB Level:$10C",
       "Delay Offset:$10E",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",
       "~54~EQ Mid Freq:$11C",
       "+12+EQ Mid Gain:$11E",
       "~120~EQ Mid Q:$120",
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "Mode:$124:mono;stereo",
       "+Dry / Wet:$11A"
       ],

      // 3: Flanger
      ["LFO Freq:$108",
       "LFO Depth:$10A",
       "+FB Level:$10C",
       "Delay Offset:$10E",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~54~EQ Mid Freq:$11C",
       "+12+EQ Mid Gain:$11E",
       "~120~EQ Mid Q:$120",
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "LFO Phase:$122",  // -180°..+180°(-180°)
       "+Dry / Wet:$11A"
       ],

      // 4: Symphonic
      ["LFO Freq:$108",
       "LFO Depth:$10A",
       "Delay Offset:$10C",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~54~EQ Mid Freq:$11C",
       "+12+EQ Mid Gain:$11E",
       "~120~EQ Mid Q:$120",
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "+Dry / Wet:$11A"
       ],

      // 5: Phaser1
      ["LFO Freq:$108",
       "LFO Depth:$10A",
       "Phase Shift:$10C",
       "+FB Level:$10E",
       "Stage:$11C:4 Stages;5 Stages;6 Stages;7 Stages;8 Stages;9 Stages;10 Stages",
       "Diffuse:$11E:mono;stereo",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~54~EQ Mid Freq:$11C",
       "+12+EQ Mid Gain:$11E",
       "~120~EQ Mid Q:$120",
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "+Dry / Wet:$11A"
       ],

      // 6: Phaser2
      ["LFO Freq:$108",
       "LFO Depth:$10A",
       "Phase Shift:$10C",
       "+FB Level:$10E",
       "Stage:$11C:3 Stages;4 Stages;5 Stages",
       "LFO Phase:$120",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~54~EQ Mid Freq:$11C",
       "+12+EQ Mid Gain:$11E",
       "~120~EQ Mid Q:$120",
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "+Dry / Wet:$11A"
       ],

      // 7: Pitch Chng
      ["+24+Pitch:$108",
       "InitDelay:$10A",
       "+50+Fine1:$10C",
       "+50+Fine2:$10E",
       "+FB Level:$110",
       "+Pan1:$11C",
       "Out Level1:$11E",
       "+Pan2:$120",
       "Out Level2:$122",
       "+Dry / Wet:$11A"
       ],

      // 8: Ens Detune
      ["+50+Detune:$108",
       "InitDelayL:$10A",
       "InitDelayR:$10C",
       "~40~EQ Low Freq:$11C",
       "+12+EQ Low Gain:$11E",  // -12..+12
       "~58~EQ Hi Freq:$120",
       "+12+EQ Hi Gain:$122",
       "+Dry / Wet:$11A"
       ],

      // 9: Rotary SP
      ["LFO Freq:$108",
       "LFO Depth:$10A",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~54~EQ Mid Freq:$11C",
       "+12+EQ Mid Gain:$11E",
       "~120~EQ Mid Q:$120",
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "+Dry / Wet:$11A"
       ],

      // 10: 2WayRotary
      ["Rotor Spd:$108",
       "Drive Low:$10A",
       "Drive High:$10C",
       "+Low / High:$10E",
       "Mic Angle:$11E",  // 0..180
       "CrossFreq:$11C",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118"
       ],

      // 11: Tremolo
      ["LFO Freq:$108",
       "AM Depth:$10A",
       "PM Depth:$10C",
       "LFO Phase:$122",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~54~EQ Mid Freq:$11C",
       "+12+EQ Mid Gain:$11E",
       "~120~EQ Mid Q:$120",
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "Mode:$124:mono;stereo"
       ],

      // 12: Auto Pan
      ["LFO Freq:$108",
       "L/R Depth:$10A",
       "F/R Depth:$10C",
       "PAN Dir:$10E:L<>R;L>R;Lturn;Rturn;L/R",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~54~EQ Mid Freq:$11C",
       "+12+EQ Mid Gain:$11E",
       "~120~EQ Mid Q:$120",
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118"
       ],

      // 13: Ambience
      ["Delay Time:$108",
       "Phase:$10A:normal;inverse",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "+Dry / Wet:$11A"
       ],

      // 14: A-Wah+Dist
      ["LFO Freq:$108",
       "LFO Depth:$10A",
       "Cutoff Freq:$10C",
       "Resonance:$10E",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "Drive:$11C",
       "+12+DS Low Gain:$11E",
       "+12+DS Mid Gain:$120",
       "LPF Cutoff:$122",
       "Output Level:$124",
       "+Dry / Wet:$11A"
       ],

      // 15: A-Wah+Odrv
      ["LFO Freq:$108",
       "LFO Depth:$10A",
       "Cutoff Freq:$10C",
       "Resonance:$10E",
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "Drive:$11C",
       "+12+DS Low Gain:$11E",
       "+12+DS Mid Gain:$120",
       "LPF Cutoff:$122",
       "Output Level:$124",
       "+Dry / Wet:$11A"
       ],

      // 16: T-Wah+Dist
      ["Sensivity:$108",
       "Cutoff Freq:$10A",
       "Resonance:$10C",
       "Release:$126"
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "Drive:$11C",
       "+12+DS Low Gain:$11E",
       "+12+DS Mid Gain:$120",
       "LPF Cutoff:$122",
       "Output Level:$124",
       "+Dry / Wet:$11A"
       ],

      // 17: T-Wah+Odrv
      ["Sensivity:$108",
       "Cutoff Freq:$10A",
       "Resonance:$10C",
       "Release:$126"
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$114",  // -12..+12
       "~58~EQ Hi Freq:$116",
       "+12+EQ Hi Gain:$118",
       "Drive:$11C",
       "+12+DS Low Gain:$11E",
       "+12+DS Mid Gain:$120",
       "LPF Cutoff:$122",
       "Output Level:$124",
       "+Dry / Wet:$11A"
       ],

      // 18: Wah+DS+Dly
      ["Sensivity:$11C",
       "Cutoff Freq:$11E",
       "Resonance:$120",
       "Release:$122"
       "Drive:$10E",
       "Output Level:$110",
       "+12+DS Low Gain:$112",
       "+12+DS Mid Gain:$114",
       "Delay:$108",
       "+FB Level:$10A",
       "Delay mix:$10C",
       "+Dry / Wet:$11A"
       ],

      // 19: Wah+OD+Dly
      ["Sensivity:$11C",
       "Cutoff Freq:$11E",
       "Resonance:$120",
       "Release:$122"
       "Drive:$10E",
       "Output Level:$110",
       "+12+DS Low Gain:$112",
       "+12+DS Mid Gain:$114",
       "Delay:$108",
       "+FB Level:$10A",
       "Delay mix:$10C",
       "+Dry / Wet:$11A"
       ],

      // 20: Lo-Fi
      ["Smpl Freq:$108",
       "Word Length:$10A",
       "Output Gain:$10C",
       "LPF Cutoff:$10E",
       "LPF Reso:$112",
       "Filter:$110:thru;pbass;radio;tel;clean;low",
       "Bit Assign:$114:Bit 0;Bit 1;Bit 2;Bit 3;Bit 4;Bit 5;Bit 6",
       "Emphasis:$116:off;on",
       "+Dry / Wet:$11A"
       ],

      // 21: 3-Band EQ
      [
       "~40~EQ Low Freq:$112",
       "+12+EQ Low Gain:$108",  // -12..+12
       "~54~EQ Mid Freq:$10A",
       "+12+EQ Mid Gain:$10C",
       "~120~EQ Mid Q:$10E",
       "~58~EQ Hi Freq:$114",
       "+12+EQ Hi Gain:$110",
       "Mode:$124:mono;stereo"
       ],

      // 22: HM Enhncer
      ["HPF Cutoff:$108",
       "Drive:$10A",
       "Mix Level:$10C"
       ],

      // 23: Noise Gate
      ["Attack:$108",
       "Release:$10A",
       "Threshold:$10C",
       "Output Level:$10E",
       ],

      // 24: Compressor
      ["Attack:$108",
       "Release:$10A",
       "Threshold:$10C",
       "Ratio:$10E",
       "Output Level:$110"
       ],

      // 25: Comp+Dist
      ["Attack:$11E",
       "Release:$120",
       "Threshold:$122",
       "Ratio:$124",
       "Drive:$108",
       "~40~EQ Low Freq:$10A",
       "+12+EQ Low Gain:$10C",  // -12..+12
       "~54~EQ Mid Freq:$114",
       "+12+EQ Mid Gain:$116",
       "~120~EQ Mid Q:$118",
       "LPF Cutoff:$10E",
       "Edge:$11C",
       "Output Level:$110",
       "+Dry / Wet:$11A"
       ],

      // 26: Cmp+DS+Dly
      ["Attack:$11C",
       "Release:$11E",
       "Threshold:$120",
       "Ratio:$122",
       "Drive:$10E",
       "Output Level:$110",
       "+12+DS Low Gain:$112",
       "+12+DS Mid Gain:$114",
       "Delay:$108",
       "+FB Level:$10A",
       "Delay Mix:$10C",
       "+Dry / Wet:$11A"
       ],

      // 27:Cmp+OD+Dely
      ["Attack:$11C",
       "Release:$11E",
       "Threshold:$120",
       "Ratio:$122",
       "Drive:$10E",
       "Output Level:$110",
       "+12+DS Low Gain:$112",
       "+12+DS Mid Gain:$114",
       "Delay:$108",
       "+FB Level:$10A",
       "Delay Mix:$10C",
       "+Dry / Wet:$11A"
       ],

      // 28: Distortion
      ["Drive:$108",
       "~40~EQ Low Freq:$10A",
       "+12+EQ Low Gain:$10C",  // -12..+12
       "~54~EQ Mid Freq:$114",
       "+12+EQ Mid Gain:$116",
       "~120~EQ Mid Q:$118",
       "LPF Cutoff:$10E",
       "Edge:$11C",
       "OutputLevel:$110",
       "+Dry / Wet:$11A"
       ],

      // 29: Dist+Delay
      ["Drive:$112",
       "+12+DS Low Gain:$116",
       "+12+DS Mid Gain:$118",
       "~13650~Lch Delay:$108",
       "~13650~Rch Delay:$10A",
       "~13650~FB Delay:$10C",
       "+FB Level:$10E",
       "Delay Mix:$110",
       "OutputLevel:$114",
       "+Dry / Wet:$11A"
       ],

      // 30: Overdrive
      ["Drive:$108",
       "~40~EQ Low Freq:$10A",
       "+12+EQ Low Gain:$10C",  // -12..+12
       "~54~EQ Mid Freq:$114",
       "+12+EQ Mid Gain:$116",
       "~120~EQ Mid Q:$118",
       "LPF Cutoff:$10E",
       "Edge:$11C",
       "OutputLevel:$110",
       "+Dry / Wet:$11A"
       ],

      // 31: Odrv+Delay
      ["Drive:$112",
       "+12+DS Low Gain:$116",
       "+12+DS Mid Gain:$118",
       "~13650~Lch Delay:$108",
       "~13650~Rch Delay:$10A",
       "~13650~FB Delay:$10C",
       "+FB Level:$10E",
       "Delay Mix:$110",
       "OutputLevel:$114",
       "+Dry / Wet:$11A"
       ],

      // 32: Amp Sim
      ["Drive:$108",
       "Amp Type:$10A:off;stack;combo;tube",
       "LPF Cutoff:$10C",
       "Edge:$11C",
       "OutputLevel:$10E",
       "+Dry / Wet:$11A"
       ],

      // 33: Delay LCR
      ["~13650~Lch Delay:$108",
       "~13650~Rch Delay:$10A",
       "~13650~Cch Delay:$10C",
       "~13650~FB Delay:$10E",
       "+FB Level:$110",
       "Cch Level:$112",
       "~10~High Damp:$114",
       "~40~EQ Low Freq:$120",
       "+12+EQ Low Gain:$122",
       "~58~EQ Hi Freq:$124",
       "+12+EQ Hi Gain:$126",
       "+Dry / Wet:$11A"
       ],

      // 34: Delay L,R
      ["~13650~Lch Delay:$108",
       "~13650~Rch Delay:$10A",
       "~13650~FB Delay1:$10C",
       "~13650~FB Delay2:$10E",
       "+FB Level:$110",
       "~10~High Damp:$112",
       "~40~EQ Low Freq:$120",
       "+12+EQ Low Gain:$122",
       "~58~EQ Hi Freq:$124",
       "+12+EQ Hi Gain:$126",
       "+Dry / Wet:$11A"
       ],

      // 35: Echo
      ["~13650~Lch Delay1:$108",
       "+Lch FB Lvl:$10A",
       "~13650~Rch Delay1:$10C",
       "+Rch FB Lvl:$10E",
       "~10~High Damp:$110",
       "~13650~Lch Delay2:$112",
       "~13650~Rch Delay2:$114",
       "Delay2 Lvl:$116",
       "~40~EQ Low Freq:$120",
       "+12+EQ Low Gain:$122",
       "~58~EQ Hi Freq:$124",
       "+12+EQ Hi Gain:$126",
       "+Dry / Wet:$11A"
       ],

      // 36: CrossDelay
      ["~13650~L>R Delay:$108",
       "~13650~R>L Delay:$10A",
       "+FB Level:$10C",
       "Input Select:$10E:L;R;L&R",
       "~10~High Damp:$110",
       "~40~EQ Low Freq:$120",
       "+12+EQ Low Gain:$122",
       "~58~EQ Hi Freq:$124",
       "+12+EQ Hi Gain:$126",
       "+Dry / Wet:$11A"
       ],

      // 37: ER 1
      ["Early Type:$108:S-H;L-H;rdm;rvs;plt;spr",
       "Room Size:$10A",
       "~10~Diffusion:$10C", // 0..10
       "InitDelay:$10E",
       "+FB Level:$110",
       "~52~HPF Cutoff:$112",
       "~60~LPF Cutoff:$114",
       "~10~Liveness:$11C",  // 0..10
       "~3~Density:$11E",
       "~10~High Damp:$120",
       "+Dry / Wet:$11A"
       ],

      // 38: ER 2
      ["Early Type:$108:S-H;L-H;rdm;rvs;plt;spr",
       "Room Size:$10A",
       "~10~Diffusion:$10C", // 0..10
       "InitDelay:$10E",
       "+FB Level:$110",
       "~52~HPF Cutoff:$112",
       "~60~LPF Cutoff:$114",
       "~10~Liveness:$11C",  // 0..10
       "~3~Density:$11E",
       "~10~High Damp:$120",
       "+Dry / Wet:$11A"
       ],

      // 39: Gate Rev
      ["Gate Type:$108:typeA;typeB",
       "Room Size:$10A",
       "~10~Diffusion:$10C", // 0..10
       "InitDelay:$10E",
       "+FB Level:$110",
       "~52~HPF Cutoff:$112",
       "~60~LPF Cutoff:$114",
       "~10~Liveness:$11C",  // 0..10
       "~3~Density:$11E",
       "~10~High Damp:$120",
       "+Dry / Wet:$11A"
       ],

      // 40: Revrs Rev
      ["Gate Type:$108:typeA;typeB",
       "Room Size:$10A",
       "~10~Diffusion:$10C", // 0..10
       "InitDelay:$10E",
       "+FB Level:$110",
       "~52~HPF Cutoff:$112",
       "~60~LPF Cutoff:$114",
       "~10~Liveness:$11C",  // 0..10
       "~3~Density:$11E",
       "~10~High Damp:$120",
       "+Dry / Wet:$11A"
       ],

                                                ];

   define int FX_MODE_KEEP   = 0;  // send patch but keep FX
   define int FX_MODE_SEND   = 1;  // send patch + FX
   define int FX_MODE_FXONLY = 2;  // don't send patch but just the FX
   define int FX_MODE_OFF    = 3;  // disable fx (thru/bypass)
   int fx_mode;

   Buffer fx_data;  // Performance Effect Parameter (112 bytes)


   // <method_init.png>
   public method init(EditMIDISynthFormFS1R _editor, MIDISynthProfile _profile) {
      // parent_editor <= _editor;
      profile <= _profile;

      loadInitPatch();
   }

   // <method_init.png>
   public method loadInitPatch() {
      patch_category  = 0;

      patch_data = fs1r_init_patch;
      patch_data.byteOrder = YAC_BIG_ENDIAN;

      setPatchName("<empty>");

      multi_mode = MULTI_MODE_OFF;
      patch_idx_part2 = -2;
      patch_idx_part3 = -2;
      patch_idx_part4 = -2;

      fx_data = fs1r_init_perf_effect;
      fx_data.byteOrder = YAC_BIG_ENDIAN;
   }

   // <method.png>
   public method copyFrom(FS1R_Patch _o, boolean _bCopyVoice, boolean _bCopyFX) {
      if(_bCopyVoice)
      {
         patch_data = _o.patch_data;
         patch_name = _o.patch_name;
         patch_category = _o.patch_category;
         multi_mode = _o.multi_mode;
         patch_idx_part2 = _o.patch_idx_part2;
         patch_idx_part3 = _o.patch_idx_part3;
         patch_idx_part4 = _o.patch_idx_part4;
         fx_mode = _o.fx_mode;
      }
      if(_bCopyFX)
         fx_data = _o.fx_data;
   }

   // <method_set.png>
   public method setPatchName(String _name) {
      int i = 0;
      loop(NUM_NAME)
      {
         char c = _name.getc(i);
         if(c <= 9)
            c = ' ';
         patch_data.pokeI8(OFF_NAME + i, c);
         i++;
      }

      patch_name = _name;
   }

   // <method.png>
   public method extractPatchNameFromData() {
      patch_name.alloc(NUM_NAME + 1);
      patch_name.empty();
      int i = 0;
      loop(NUM_NAME)
      {
         char c = patch_data.peekI8(OFF_NAME + i);
         if(c <= 9)
            c = ' ';
         patch_name[i] = c;
         i++;
      }
   }

   // <save.png>
   public method save(Stream _ofs) {
      // Version
      _ofs.i16 = 3;

      // Patch name
      Utils.WriteString(_ofs, patch_name);

      // Patch category
      _ofs.i8 = patch_category;

      // Voice Patch data
      _ofs.writeBuffer(patch_data, 0, patch_data.size);

      // Multi (v2+)
      _ofs.i8  = multi_mode;
      _ofs.i16 = patch_idx_part2;
      _ofs.i16 = patch_idx_part3;
      _ofs.i16 = patch_idx_part4;

      // FX (v3+)
      _ofs.i8 = fx_mode;
      _ofs.writeBuffer(fx_data, 0, fx_data.size);
   }

   // <load.png>
   public method load(Stream _ifs) : boolean {
      short ver = _ifs.u16;

      if(ver >= 1)
      {
         Utils.ReadString(_ifs, patch_name);

         patch_category = _ifs.u8;

         patch_data.fillZero();
         _ifs.readBuffer(patch_data, 0, patch_data.size, false/*bResize*/);

         if(ver >= 2)
         {
            // Multi (v2+)
            multi_mode      = _ifs.u8;
            patch_idx_part2 = _ifs.s16;
            patch_idx_part3 = _ifs.s16;
            patch_idx_part4 = _ifs.s16;
         }

         if(ver >= 3)
         {
            // FX (v3+)
            fx_mode = _ifs.u8;
            _ifs.readBuffer(fx_data, 0, fx_data.size, false/*bResize*/);
         }

         return true;
      }

      return false;
   }

}


// <class.png>
class MIDISynthProfileDataFS1R : MIDISynthProfileData {

   define int NUM_BANKS = 16;  // A..O
   define int PROJECT_BANK_IDX = 15; // 'P'
   define int NUM_GLOBAL_PATCHES = 15*128;
   define int NUM_PATCHES = (NUM_BANKS * 128);  // 2048 patches, the last bank (1920..2047 / P001..P128) is project-specific.

   PointerArray patches;  // FS1R_Patch instances

   short current_patch_nr;
   short first_patch_nr;  // unused??
   short last_patch_nr;   // unused??

   int current_part_idx;  // 0..3
   int part_patch_nr[4];

   boolean b_autosend;
   boolean b_send_diff;
   boolean b_send_multi;
   boolean b_proxy_reset;

   boolean b_recv_patch_names;
   boolean b_recv_ctls;

   boolean b_difflock;

   boolean b_send_part_midi;  // true=send bank/prg.nr/recv_ch/.. (Perf.Part.MIDI) (overwrites edit buffer)

   int opv_mute_mask;
   int opn_mute_mask;
   boolean b_solo_opv;  // force alg1
   boolean b_solo_part;  // force other part volume = 0


   // <method_init.png>
   public virtual init(MIDISynthProfile _profile) {
      MIDISynthProfileData::init(_profile);

      patches.alloc(NUM_PATCHES);

      loop(NUM_PATCHES)
      {
         FS1R_Patch patch <= new FS1R_Patch;
         patch.init(midi_profile.edit_form, _profile);
         patches.add(#(deref patch));
      }

      current_patch_nr = 0;
      first_patch_nr = 0;
      first_patch_nr = 0;
      b_autosend = maybe;

      b_recv_patch_names = true;
      b_recv_ctls = true;

      b_send_part_midi = false;

      part_patch_nr[0] = 0;
      part_patch_nr[1] = 0;
      part_patch_nr[2] = 0;
      part_patch_nr[3] = 0;

      opv_mute_mask = 0;
      opn_mute_mask = 0;
      b_solo_opv = false;
   }

   // <method_get.png>
   public virtual isMultiTimbral() : boolean {
      return true;
   }

   // <save.png>
   public virtual saveMIDIProfileData(Stream _ofs) {
      // Version
      _ofs.i16 = 3;

      _ofs.i16 = current_patch_nr;
      _ofs.i16 = first_patch_nr;
      _ofs.i16 = last_patch_nr;
      _ofs.i8  = b_autosend;
      _ofs.i8  = b_send_diff;
      _ofs.i8  = b_send_multi; // v2+
      _ofs.i8  = b_proxy_reset;
      _ofs.i8  = b_recv_patch_names;
      _ofs.i8  = b_recv_ctls;
      _ofs.i8  = b_send_part_midi;

      _ofs.i8  = current_part_idx;  // v2+
      _ofs.i8  = part_patch_nr[0];  // v2+
      _ofs.i8  = part_patch_nr[1];  // v2+
      _ofs.i8  = part_patch_nr[2];  // v2+
      _ofs.i8  = part_patch_nr[3];  // v2+

      // MIDISynthProfile id
      Utils.WriteString(_ofs, midi_profile.midi_profile_id);  // "yamaha_fs1r"

      int patchIdx = 0;
      loop(NUM_GLOBAL_PATCHES)
      {
         FS1R_Patch p <= patches.get(patchIdx);
         p.save(_ofs);
         patchIdx++;
      }
   }

   // <load.png>
   public virtual loadMIDIProfileData(Stream _ifs, boolean _bFromUI) : boolean {
      short ver = _ifs.u16;

      if(ver >= 1)
      {
         if(!_bFromUI)
         {
            current_patch_nr = _ifs.u16;
         }
         else
         {
            int skip0 = _ifs.u16;
         }

         first_patch_nr     = _ifs.u16;
         last_patch_nr      = _ifs.u16;
         b_autosend         = _ifs.s8;  // mixed
         b_send_diff        = _ifs.b8;
         if(ver >= 2)
            b_send_multi = _ifs.b8;  // v2+
         b_proxy_reset      = _ifs.b8;
         b_recv_patch_names = _ifs.b8;
         b_recv_ctls        = _ifs.b8;
         b_send_part_midi   = _ifs.b8;

         if(ver >= 2)
         {
            current_part_idx = _ifs.i8;  // v2+
            part_patch_nr[0] = _ifs.i8;  // v2+
            part_patch_nr[1] = _ifs.i8;  // v2+
            part_patch_nr[2] = _ifs.i8;  // v2+
            part_patch_nr[3] = _ifs.i8;  // v2+
         }

         // MIDISynthProfile id
         local String profileId;
         Utils.ReadString(_ifs, profileId);

         midi_profile <= MIDI.GetMIDISynthProfileById(profileId);
         if(null == midi_profile)
         {
            trace "[---] MIDISynthProfileDataFS1R::loadMIDIProfileData: unknown synth profile \""+profileId+"\"";
            return false;
         }

         local FS1R_Patch pDummy;
         pDummy.init(midi_profile.edit_form, midi_profile);

         int patchIdx = 0;
         loop( (ver <= 2) ? NUM_PATCHES : NUM_GLOBAL_PATCHES )
         {
            FS1R_Patch *p;

            // workaround for bug in ver <= 2: skip project-specific patches
            if( (ver <= 2) && (patchIdx >= NUM_GLOBAL_PATCHES) )
               p <= pDummy;
            else
               p <= patches.get(patchIdx);

            if(!p.load(_ifs))
            {
               trace "[---] failed to load FS1R_Patch "+patchIdx+" (profile_id="+midi_profile.midi_profile_id+")";
               p.loadInitPatch();
               return false;
            }
            patchIdx++;
         }

         return true;
      }

      return false;
   }

   // <save.png>
   public virtual saveProjectMIDIProfileData(Stream _ofs) {
      // Version
      _ofs.i16 = 2;

      _ofs.i16 = current_patch_nr;

      _ofs.i8 = forced_redirect_midi_ch; // v2+

      // MIDISynthProfile id
      Utils.WriteString(_ofs, midi_profile.midi_profile_id);

      int patchIdx = (PROJECT_BANK_IDX * 128);
      loop(128)
      {
         FS1R_Patch p <= patches.get(patchIdx);
         p.save(_ofs);
         patchIdx++;
      }

   }

   // <load.png>
   public virtual loadProjectMIDIProfileData(Stream _ifs) : boolean {
      short ver = _ifs.u16;

      if(ver >= 1)
      {
         current_patch_nr = _ifs.u16;

         if(ver >= 2)
         {
            forced_redirect_midi_ch = _ifs.s8; // v2+
         }

         // MIDISynthProfile id
         local String profileId;
         Utils.ReadString(_ifs, profileId);

         FS1R_Patch *p;
         int patchIdx = (PROJECT_BANK_IDX * 128);

         if(midi_profile.midi_profile_id == profileId)
         {

            // // midi_profile <= MIDI.GetMIDISynthProfileById(profileId);
            // // if(null == midi_profile)
            // // {
            // //    trace "[---] MIDISynthProfileDataFS1R::loadProjectMIDIProfileData: unknown synth profile \""+profileId+"\"";
            // //    return false;
            // // }

            loop(128)
            {
               p <= patches.get(patchIdx);
               if(!p.load(_ifs))
               {
                  trace "[~~] failed to load project-specific FS1R_Patch "+patchIdx+" (profile_id="+midi_profile.midi_profile_id+"), loading init() instead.";
                  p.loadInitPatch();
                  return false;
               }
               patchIdx++;
            }

            return true;
         }
         else
         {
            trace "[---] FS1R::loadProjectMIDIProfileData: midi_profile_id=\""+midi_profile.midi_profile_id+"\" mismatch, skipping..";
            loop(128)
            {
               p <= patches.get(patchIdx);
               p.loadInitPatch();
               patchIdx++;
            }
         }
      }

      return false;
   }
}


// <class.png>
class FS1R_FXForm : XMLForm {

   protected EditMIDISynthFormFS1R *parent_form;

   protected PointerArray layerswitches;
   protected PointerArray floatparams;
   protected PointerArray comboboxes;
   protected PointerArray labels;

   protected Buffer *fx_data;      // ref to FS1R_Patch.fx_data
   protected int     param_base;   // param nr base (e.g. 0x108 = addrM=0x01 addrL=0x08)
   protected StringArray *params;  // see reverb_params / variation_params / insertion_params
   protected IntArray param_offsets;  // byte offsets


   // <init.png>
   public method init(EditMIDISynthFormFS1R _parentForm) : boolean {
      parent_form <= _parentForm;

      local String sXFM;
      if(sXFM.load("FS1R_FXForm.xfm", true/*bRemoveCR*/))
      {
         local String sTempl;
         if(sTempl.load("FS1R_FXParam.templ", true/*bRemoveCR*/))
         {
            local String buf;

            // Create param XFM
            int paramIdx = 0;
            loop(FS1R_Patch.MAX_FX_PARAMS)
            {
               local String t = sTempl;
               t.replace("$(NR)", String(paramIdx));
               buf.append(t);

               // Next param
               paramIdx++;
            }

            sXFM.replace("$(PARAMS)", buf);

            if(parseXMLForm(sXFM))
            {
               // Resolve widgets
               paramIdx = 0;
               loop(FS1R_Patch.MAX_FX_PARAMS)
               {
                  layerswitches.add(findLayerById("ls_"+paramIdx));
                  floatparams  .add(findLayerById("fp_"+paramIdx));
                  comboboxes   .add(findLayerById("cm_"+paramIdx));
                  labels       .add(findLayerById("lb_"+paramIdx));

                  // Next param
                  paramIdx++;
               }

               // Succeeded
               return true;
            }
            else
            {
               trace "[---] failed to parse \"FS1R_FXForm.xfm\"";
            }
         }
      }
      return false;
   }

   // <method.png>
   protected method readFXValue(int _byteOff) : int {
      switch(param_base)
      {
         case 0x50:
            // Reverb
            if(_byteOff < 0x10)
            {
               // return ((fx_data.peekI8(_byteOff)&127)<<7) | (fx_data.peekI8(_byteOff+1)&127);
               return fx_data.peekI14(_byteOff);
            }
            else
            {
               return fx_data.peekI8(_byteOff)&127;
            }
            break;

         case 0x68:
            // Variation
            // return ((fx_data.peekI8(_byteOff)&127)<<7) | (fx_data.peekI8(_byteOff+1)&127);
            return fx_data.peekI14(_byteOff);

         case 0x108:
            // Insertion
            // return ((fx_data.peekI8(_byteOff)&127)<<7) | (fx_data.peekI8(_byteOff+1)&127);
            return fx_data.peekI14(_byteOff);
      }
   }

   // <method.png>
   protected method writeFXValueAndSend(int _byteOff, int _val) : int {
      int addrH = 0x10;
      int addrM;
      int addrL;
      switch(param_base)
      {
         case 0x50:
            // Reverb
            addrH = 0x10;
            if(_byteOff < 0x10)
            {
               fx_data.pokeI14(_byteOff, _val);
            }
            else
            {
               fx_data.pokeI8(_byteOff, _val & 127);
            }
            addrM = 0x00;
            addrL = 0x50 + _byteOff;
            break;

         case 0x68:
            // Variation
            fx_data.pokeI14(_byteOff, _val);
            addrL = 0x50 + _byteOff;
            addrM = (addrL >> 8);
            addrL &= 127;
            break;

         case 0x108:
            // Insertion
            fx_data.pokeI14(_byteOff, _val);
            addrM = 0x01;
            addrL = ((0x50 + _byteOff) & 127);
            break;
      }

      if(b_debug)
         trace "[>>>] fs1r: sendparam: val="+_val+" byteOff="+_byteOff+" addr=("+addrH+"; "+addrM+"; "+addrL+")";
      parent_form.fs1rSendParam3(_val, addrH, addrM, addrL);
   }

   // <ui_show.png>
   public method showParams(Buffer _fxData, int _paramBase, PointerArray _params) {
      fx_data    <= _fxData;
      param_base  = _paramBase;
      params     <= _params;

      int numParams = mathMini(FS1R_Patch.MAX_FX_PARAMS, (null != params) ? params.numElements : 0);
      int paramIdx = 0;
      LayerSwitch *ls;
      FloatParam  *fp;
      ComboBox    *cm;
      Label       *lb;
      param_offsets.empty();
      loop(FS1R_Patch.MAX_FX_PARAMS)
      {
         ls <= layerswitches[paramIdx];
         fp <= floatparams[paramIdx];
         cm <= comboboxes[paramIdx];
         lb <= labels[paramIdx];

         if(paramIdx < numParams)
         {
            String paramStr <= params[paramIdx];
            local String paramName;
            local String sOpt;
            int off;
            int idxOff = paramStr.indexOfChar(':', 0);
            int idxOpt = paramStr.indexOfChar(':', idxOff+1);

            if(-1 == idxOpt)
            {
               off = paramStr.substring(idxOff+1, 4);
            }
            else
            {
               off = paramStr.substring(idxOff+1, (idxOpt-idxOff-1));
               sOpt = paramStr.substring(idxOpt+1, 99999);
            }

            // // Integer xxx = off;
            // // trace "off="+xxx.printf("%03x");

            if(off >= 0x100)
            {
               off -= 0x80;
            }

            off -= 0x50;
            param_offsets.add(off);

            if(paramStr <= "~")
            {
               // 0..n
               int idxE = paramStr.indexOfChar('~', 1);
               ls.switchToLayerNr(1);
               fp.setMinMaxValues(0, int(paramStr.substring(1, idxE-1)));
               fp.setEditable(true);
               fp.setValue(readFXValue(off));
               paramStr.substring(idxE+1, idxOff-idxE-1) => paramName;
            }
            else if(paramStr & "+12+")
            {
               // -12..12
               ls.switchToLayerNr(1);
               fp.setMinMaxValues(-12, 12);
               fp.setEditable(true);
               fp.setValue(readFXValue(off) - 64);
               paramStr.substring(4, idxOff-4) => paramName;
            }
            else if(paramStr & "+24+")
            {
               // -24..24
               ls.switchToLayerNr(1);
               fp.setMinMaxValues(-24, 24);
               fp.setEditable(true);
               fp.setValue(readFXValue(off) - 64);
               paramStr.substring(4, idxOff-4) => paramName;
            }
            else if(paramStr & "+50+")
            {
               // -50..50
               ls.switchToLayerNr(1);
               fp.setMinMaxValues(-50, 50);
               fp.setEditable(true);
               fp.setValue(readFXValue(off) - 64);
               paramStr.substring(4, idxOff-4) => paramName;
            }
            else if(paramStr <= "+")
            {
               // -64..63
               ls.switchToLayerNr(1);
               fp.setMinMaxValues(-64, 63);
               fp.setEditable(true);
               fp.setValue(readFXValue(off) - 64);
               paramStr.substring(1, idxOff-1) => paramName;
            }
            else
            {
               if(-1 == idxOpt)
               {
                  // 0..127
                  ls.switchToLayerNr(1);
                  fp.setMinMaxValues(0, 127);
                  fp.setEditable(true);
                  fp.setValue(readFXValue(off));
               }
               else
               {
                  // Options
                  ls.switchToLayerNr(2);
                  cm.setOptions(sOpt.splitChar(';'));
                  cm.setEditable(true);
                  cm.setSelectedOption(readFXValue(off));
               }
               paramStr.substring(0, idxOff) => paramName;
            }

            lb.setCaption(paramName+":");
         }
         else
         {
            // Unused param (hide)
            ls.switchToLayerNr(0);
            fp.setEditable(false);
            cm.setEditable(false);
            lb.setCaption("");
         }

         // Next param
         paramIdx++;
      }

      // trace "xxx param_offsets="+#(param_offsets);

      redraw();
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      int idx;
      int val;
      int off;

      idx = floatparams.indexOfPointer(ap, 0);
      if(-1 != idx)
      {
         FloatParam fp <= ap;
         val = fp.getFloatValue();
         if(fp.getMinValue() < 0)
            val += 64;
      }
      else
      {
         idx = comboboxes.indexOfPointer(ap, 0);
         if(-1 != idx)
         {
            ComboBox cm <= ap;
            val = cm.getSelectedOption();
         }
      }

      if(-1 != idx)
      {
         off = param_offsets.get(idx);

         writeFXValueAndSend(off, val);

         Label lb <= labels[idx];
         Global.PrintFast((lb.getCaption().replace(":",""))+" is "+val);

         return true;
      }

      return false;
   }
}


// <class.png>
class EditMIDISynthFormFS1R : EditMIDISynthForm, ActionProvider, MIDIMapEventListener {

   // used by swapVoicedOps*():
   define int PARAMSET_OP_OSC       = (1 << 0);
   define int PARAMSET_OP_FREQ      = (1 << 1);
   define int PARAMSET_OP_PEG       = (1 << 2);
   define int PARAMSET_OP_AEG_LEVEL = (1 << 3);
   define int PARAMSET_OP_AEG_TIME  = (1 << 4);
   define int PARAMSET_OP_LEVELSCL  = (1 << 5);
   define int PARAMSET_OP_SENSE     = (1 << 6);
   define int PARAMSET_OP_ALL       = 127;

   MIDISynthProfile *profile;

   MIDISynthProfileDataFS1R *data;
   FS1R_Patch *patch;  // Reference to current patch in data.patches[]. never null. may be part 'x' of a multipatch.
   FS1R_Patch *multi_patch;  // Last seen multi patch (or null). Reset to null when new patch is selected. Remains unchanged when part is selected.

   STX_MIDIInDevice  *in_dev;
   STX_MIDIOutDevice *out_dev;
   byte midi_ch;

   boolean b_have_sysex;
   Buffer  sysex_buffer;  // Incoming sysex data

   Buffer param_sysex_buffer;
   Buffer patch_sysex_buffer;

   protected boolean b_patch_proxy_follow;
   protected boolean b_patch_proxy_lock;

   define int TAB_PATCH    = 0;
   define int TAB_FX       = 1;
   define int TAB_PART     = 2;
   define int TAB_VOICE    = 3;
   define int TAB_FILTER   = 4;
   define int TAB_FORMANT  = 5;
   define int TAB_FM       = 6;
   define int TAB_FMMATRIX = 7;

   define int TAB_V1 = 8 + 0;
   define int TAB_V2 = 8 + 1;
   define int TAB_V3 = 8 + 2;
   define int TAB_V4 = 8 + 3;
   define int TAB_V5 = 8 + 4;
   define int TAB_V6 = 8 + 5;
   define int TAB_V7 = 8 + 6;
   define int TAB_V8 = 8 + 7;

   define int TAB_N1 = 16 + 0;
   define int TAB_N2 = 16 + 1;
   define int TAB_N3 = 16 + 2;
   define int TAB_N4 = 16 + 3;
   define int TAB_N5 = 16 + 4;
   define int TAB_N6 = 16 + 5;
   define int TAB_N7 = 16 + 6;
   define int TAB_N8 = 16 + 7;

   TabSwitch *ts_groups;

   Button    *bt_part1;
   Button    *bt_part2;
   Button    *bt_part3;
   Button    *bt_part4;
   PointerArray part_buttons;

   CheckBox  *cb_patch_autosend;
   CheckBox  *cb_patch_diff;
   CheckBox  *cb_patch_sendmulti;

   CheckBox  *cb_patch_recvnames;
   CheckBox  *cb_patch_recvctls;
   CheckBox  *cb_patch_part_midi;

   CheckBox  *cb_patch_proxy_follow;
   CheckBox  *cb_patch_proxy_lock;
   CheckBox  *cb_patch_proxy_reset;

   ComboBox  *cm_patch_nr;
   Button    *bt_patch_project;
   TextField *tf_patch_name;
   Button    *bt_find_catnext;
   Button    *bt_find_catbrowse;
   protected ComboBoxPopup *cmp_find_catbrowse;
   Button    *bt_find_catprev;
   TextField *tf_find_name;
   ComboBox  *cm_find_category;
   ComboBox  *cm_patch_category;

   Button    *bt_patch_tools;
   protected PopupMenu *pm_tools;
   Button    *bt_patch_copy;
   Button    *bt_patch_paste;
   Button    *bt_patch_init;
   Button    *bt_patch_swap;

   Button    *bt_patch_receive_edit;
   Button    *bt_patch_receive_edit_to_clipboard;
   Button    *bt_patch_send;

   ComboBox  *cm_patch_multi;
   ComboBox  *cm_patch_nr_part2;
   ComboBox  *cm_patch_nr_part3;
   ComboBox  *cm_patch_nr_part4;
   Button    *bt_multi_consecutive;

   Button *bt_difflock_toggle;
   Button *bt_difflock_invert;
   CheckBox *cb_difflock_enable;
   Button *bt_difflock_rand;
   CheckBox *cb_randlock_bit10;
   CheckBox *cb_randlock_bit9;
   CheckBox *cb_randlock_bit8;
   CheckBox *cb_randlock_bit7;
   CheckBox *cb_randlock_bit6;
   CheckBox *cb_randlock_bit5;
   CheckBox *cb_randlock_bit4;
   CheckBox *cb_randlock_bit3;
   CheckBox *cb_randlock_bit2;
   CheckBox *cb_randlock_bit1;
   CheckBox *cb_randlock_bit0;
   CheckBox *[] difflock_group_checkboxes;
   IntArray difflock_group_states;  // true=enable group difflock, false=disable
   PointerArray difflock_subgroup_checkboxes;  // PointerArray instances (CheckBox ref per subgroup idx)
   PointerArray difflock_subgroup_states;  // IntArray instances (true=enable subgroup difflock, false=disable)

   define String TA_MIDISEND;
   protected TimerAction *ta_midisend;
   boolean b_queued_midi_send_patch;

   define String TA_FMMATRIX;
   protected TimerAction *ta_fmmatrix;

   define String TA_PERIODIC;
   protected TimerAction *ta_periodic;
   protected boolean b_queued_send_filtersw_workaround;  // e.g. for alg change issue with "b019: acoustic bass"

   FS1R_Patch *patch_clipboard;

   Buffer *voiced_op_clipboard;
   Buffer *unvoiced_op_clipboard;

   PointerArray param_widgets;     // ComboBox, FloatParam, or CheckBox refs (or null)
   IntArray     param_widget_alias_indices;  // used to look up aliases after parsing XFM
   PointerArray param_widget_aliases;  // MIDISynthProfileCtlAlias refs (or null)

   FS1R_Patch *replay_patch_part1;   // currently playing patch (modulated by proxy events)
   FS1R_Patch *replay_patch_part2;
   FS1R_Patch *replay_patch_part3;
   FS1R_Patch *replay_patch_part4;
   PointerArray replay_patches;  // part1..4 refs
   boolean b_first_midi_send_patch;
   int force_send_all_diff_mask;  // bit0:part1, bit1:part2, ..

   FS1R_Patch *morph_patch;  // temporary storage for morph() result

   FS1R_Patch *orig_replay_patch_part1;   // patch state when entering editor
   FS1R_Patch *orig_replay_patch_part2;
   FS1R_Patch *orig_replay_patch_part3;
   FS1R_Patch *orig_replay_patch_part4;
   PointerArray orig_replay_patches;  // part1..4 refs

   protected boolean b_first_rebuild_patch_names;

   static SysExMultiPatchDialog *dlg_multipatch;

   protected boolean b_first_proxy_prgchg;

   protected ComboBox *cm_param_alg;  // "d_vcom_alg" ref

   protected byte last_sent_part1_ch;  // -1 = unknown
   protected byte last_sent_part2_ch;
   protected byte last_sent_part3_ch;
   protected byte last_sent_part4_ch;

   // FX:
   protected Panel *pn_fx;
   protected ComboBox *cm_fx_mode;

   protected Button      *bt_fx_reverb_query;
   protected Button      *bt_fx_reverb_init;
   protected ComboBox    *cm_fx_reverb_type;
   protected FloatParam  *fp_fx_reverb_pan;
   protected FloatParam  *fp_fx_reverb_return;
   protected FS1R_FXForm *fx_reverb;

   protected Button      *bt_fx_variation_query;
   protected Button      *bt_fx_variation_init;
   protected ComboBox    *cm_fx_variation_type;
   protected FloatParam  *fp_fx_variation_pan;
   protected FloatParam  *fp_fx_variation_return;
   protected FloatParam  *fp_fx_variation_revsend;
   protected FS1R_FXForm *fx_variation;

   protected Button      *bt_fx_insertion_query;
   protected Button      *bt_fx_insertion_init;
   protected ComboBox    *cm_fx_insertion_type;
   protected FloatParam  *fp_fx_insertion_pan;
   protected FloatParam  *fp_fx_insertion_revsend;
   protected FloatParam  *fp_fx_insertion_varsend;
   protected FloatParam  *fp_fx_insertion_level;
   protected FS1R_FXForm *fx_insertion;

   protected Button      *bt_fx_eq_query;
   FloatParam            *fp_fx_eq_low_freq;
   FloatParam            *fp_fx_eq_low_gain;
   FloatParam            *fp_fx_eq_low_q;
   ComboBox              *cm_fx_eq_low_shape;

   FloatParam            *fp_fx_eq_mid_freq;
   FloatParam            *fp_fx_eq_mid_gain;
   FloatParam            *fp_fx_eq_mid_q;

   FloatParam            *fp_fx_eq_high_freq;
   FloatParam            *fp_fx_eq_high_gain;
   FloatParam            *fp_fx_eq_high_q;
   ComboBox              *cm_fx_eq_high_shape;

   FMMatrix *fm_matrix;  // <widget id=fm_matrix uiClass=FMMatrix/>

   int last_perf_ms;
   Buffer last_perf;


   // <method_init.png>
   public virtual init(MIDISynthProfile _profile) : boolean {
      // Called from MIDISynthProfile::parse()
      EditMIDISynthForm::init(_profile);

      profile <= _profile;

      // Read by NodeProxy when generating multimorph bank select
      proxy_multimorph_bank = MIDISynthProfileDataFS1R.PROJECT_BANK_IDX/*15*/ + 1;
      num_programs_per_bank = 128;
      num_banks             = MIDISynthProfileDataFS1R.NUM_BANKS;

      local String xfmSrc;
      if(xfmSrc.load("FS1R.xfm", true/*bRemoveCR*/))
      {
         createParamWidgets(xfmSrc);
         createDiffLockWidgets(xfmSrc);

         // // trace "xxx 3 xfmSrc.length="+xfmSrc.length+"  lastChar="+xfmSrc.getc(xfmSrc.length-1);
         // // xfmSrc.saveLocal("t.txt");

         if(parseXMLForm(xfmSrc))
         {
            if(autoResolveIds(this))
            {
               fm_matrix.initFMMatrix(this, null/*montage*/);

               resolveParamWidgets();
               resolveDiffLockWidgets();
               updateRandLockWidgetToolTips(xfmSrc);

               part_buttons.add(bt_part1);
               part_buttons.add(bt_part2);
               part_buttons.add(bt_part3);
               part_buttons.add(bt_part4);

               initMMC();
               initTimers();

               patch_clipboard <= new FS1R_Patch;
               patch_clipboard.init(this, profile);

               replay_patch_part1 <= new FS1R_Patch;
               replay_patch_part1.init(this, profile);

               replay_patch_part2 <= new FS1R_Patch;
               replay_patch_part2.init(this, profile);

               replay_patch_part3 <= new FS1R_Patch;
               replay_patch_part3.init(this, profile);

               replay_patch_part4 <= new FS1R_Patch;
               replay_patch_part4.init(this, profile);

               replay_patches.add(replay_patch_part1);
               replay_patches.add(replay_patch_part2);
               replay_patches.add(replay_patch_part3);
               replay_patches.add(replay_patch_part4);

               morph_patch <= new FS1R_Patch;
               morph_patch.init(this, profile);

               orig_replay_patch_part1 <= new FS1R_Patch;
               orig_replay_patch_part1.init(this, profile);

               orig_replay_patch_part2 <= new FS1R_Patch;
               orig_replay_patch_part2.init(this, profile);

               orig_replay_patch_part3 <= new FS1R_Patch;
               orig_replay_patch_part3.init(this, profile);

               orig_replay_patch_part4 <= new FS1R_Patch;
               orig_replay_patch_part4.init(this, profile);

               orig_replay_patches.add(orig_replay_patch_part1);
               orig_replay_patches.add(orig_replay_patch_part2);
               orig_replay_patches.add(orig_replay_patch_part3);
               orig_replay_patches.add(orig_replay_patch_part4);

               cm_patch_category.setOptions(FS1R_Patch.category_names);
               StringArray fltCat; fltCat.join(["*"], FS1R_Patch.category_names);
               cm_find_category.setOptions(fltCat);

               b_first_midi_send_patch = true;
               b_first_rebuild_patch_names = true;
               force_send_all_diff_mask = 0b1111;

               dlg_multipatch <= new SysExMultiPatchDialog;
               if(!dlg_multipatch.init())
               {
                  trace "[---] failed to init SysExMultiPatchDialog";
                  return false;
               }

               b_first_proxy_prgchg = true;

               param_sysex_buffer.size = 10;  // single param updates
               patch_sysex_buffer.size = 1024;  // multi param updates

               last_sent_part1_ch = -1;
               last_sent_part2_ch = -1;
               last_sent_part3_ch = -1;
               last_sent_part4_ch = -1;

               if(!fx_reverb.init(this))
                  die "failed to init FS1R:fx_reverb";

               if(!fx_variation.init(this))
                  die "failed to init FS1R:fx_variation";

               if(!fx_insertion.init(this))
                  die "failed to init FS1R:fx_insertion";

               cm_fx_reverb_type   .setOptions(FS1R_Patch.fx_names_reverb);
               cm_fx_variation_type.setOptions(FS1R_Patch.fx_names_variation);
               cm_fx_insertion_type.setOptions(FS1R_Patch.fx_names_insertion);

               return true;
            }
         }
      }
      return false;
   }

   // <ui_timer.png>
   protected method initTimers() {
      ta_midisend   <= TimerAction.New(TA_MIDISEND, this, 75);
      ta_fmmatrix   <= TimerAction.New(TA_FMMATRIX, this, 100);
      ta_periodic   <= TimerAction.New(TA_PERIODIC, this, 250);
   }

   // <midi_mmc.png>
   protected method initMMC() {

      mmcInit("EditMIDISynthFormFS1R");

      ////addBaseMMCTargets(this);
   }

   // <ui_init.png>
   protected method createParamWidgets(String _xfmSrc) {
      int curEditGroupIdx = -1;
      int curEditSubGroupIdx = -1;

      local String sAllGroups;
      local String sGroup;

      FloatParam *fp;
      CheckBox *cb;
      ComboBox *cm;
      boolean bTitledPanel = false;
      int numTitledPanelsPerRow = 0;

      MIDISynthProfileCtlAlias *alias;
      int aliasIdx = 0;
      foreach alias in profile.all_aliases
      {
         if( (-1 != alias.syx_off) || alias.b_ui_custom_widget )
         {
            if(alias.b_ui && (-1 == alias.syx_off_hi))
            {
               if(-1 != alias.editgroup_idx)
               {
                  if(alias.editgroup_idx != curEditGroupIdx)
                  {
                     // Close current group
                     if(-1 != curEditGroupIdx)
                     {
                        if(bTitledPanel)
                           sGroup.append("</TitledPanel></Panel>\n");
                        sGroup.append(
                           "            </Panel></Panel>\n"
                           "          </ScrollPane>\n"
                           "        </Panel></Panel>\n"
                           "      </View>\n"
                                      );
                     }
                     sAllGroups.append(sGroup);

                     // Start new group
                     curEditGroupIdx = alias.editgroup_idx;

                     sGroup =
                        "      <View caption=\""+profile.getEditGroupNameByIdx(curEditGroupIdx)+"\">\n"
                        "        <Panel align=expand><Panel align=expand padLeft=10>\n"
                        "          <ScrollPane id=sp_"+curEditGroupIdx+"\n"
                        "                      style=flat\n"
                        "                      dir=CENTER\n"
                        "                      align=expand\n"
                        "                      adaptiveViewSize=1\n"
                        "                      autoresolve=0\n"
                        "                      >\n"
                        "            <Panel><Panel dir=TOP align=expandx padding=8;2;0;21>\n"
                        "              <SizeGroupX id=sgx_lb_"+curEditGroupIdx+"/>\n"
                        "              <SizeGroupX id=sgx_ctl_"+curEditGroupIdx+"/>\n"
                        ;

                     curEditSubGroupIdx = -1;
                     bTitledPanel = false;
                     numTitledPanelsPerRow = 0;
                  }

                  if(alias.editsubgroup_idx != curEditSubGroupIdx)
                  {
                     if(bTitledPanel)
                        sGroup.append("</TitledPanel>\n");

                     curEditSubGroupIdx = alias.editsubgroup_idx;

                     if(4 == numTitledPanelsPerRow)
                     {
                        sGroup.append("</Panel>\n");
                        numTitledPanelsPerRow = 0;
                     }

                     if(0 == numTitledPanelsPerRow)
                        sGroup.append("<Panel dir=BOTTOM>\n");

                     numTitledPanelsPerRow++;

                     sGroup.append("<TitledPanel dir=RIGHT padLeft=10 caption=\""+profile.getEditSubGroupNameByIdx(curEditGroupIdx, curEditSubGroupIdx)+"\">\n");
                     bTitledPanel = true;
                  }


                  sGroup.append("<!-- "+alias.caption+" -->\n");
                  sGroup.append("<Panel dir=BOTTOM >\n");

                  String aliasCaption = alias.caption;

                  if(alias.b_ui_custom_widget)
                  {
                     // User-defined custom widget
                     sGroup.append("<"+alias.ui_class+" id="+alias.id+" autoresolve=1 dir=CENTER align=centerY />\n");
                     trace "[dbg] FS1R::createParamWidget: add custom XFM element id=\""+alias.id+"\" uiClass=\""+alias.ui_class+"\"";
                  }
                  else if(null != alias.edit_options_str)
                  {
                     // ComboBox
                     sGroup.append("<ComboBox id=param_"+aliasIdx+" autoresolve=0 dir=LEFT\n"
                                   "          align=centerY\n"
                                   "          options=\""+alias.edit_options_str+"\"\n"
                                   "          sizeGroup=sgx_ctl_"+curEditGroupIdx+"\n"
                                   );
                     if!(alias.info.isBlank())
                     {
                        sGroup.append("            toolTipCaption=\""+alias.info+"\"\n");
                     }
                     sGroup.append("          />\n");
                  }
                  else if(0 == alias.min && 1 == alias.max)
                  {
                     // CheckBox
                     sGroup.append("<CheckBox id=param_"+aliasIdx+" autoresolve=0 dir=LEFT\n"
                                   "          caption=\"Enable\"\n"
                                   "          padLeft=0\n"
                                   "          align=centerY\n"
                                   "          sizeGroup=sgx_ctl_"+curEditGroupIdx+"\n"
                                   );
                     if!(alias.info.isBlank())
                     {
                        sGroup.append("            toolTipCaption=\""+alias.info+"\"\n");
                     }
                     sGroup.append("          />\n");
                  }
                  else
                  {
                     // FloatParam
                     sGroup.append("<FloatParam id=param_"+aliasIdx+" autoresolve=0 dir=LEFT\n");

                     if(aliasCaption >= " MSB")
                        aliasCaption.replace(" MSB", "");

                     switch(alias.cel_range)
                     {
                        default:
                           sGroup.append("            min="+(alias.min - alias.bias)+" max="+(alias.max - alias.bias)+"\n");
                           break;

                        case NT_CEL.RANGE_M128_P127:
                           sGroup.append("            min="+(alias.min-128)+" max="+(alias.max-128)+"\n");
                           break;

                        case NT_CEL.RANGE_M64_P63:
                           sGroup.append("            min="+(alias.min-64)+" max="+(alias.max-64)+"\n");
                           break;
                     }

                     sGroup.append("            precision=0 stepFine=1 stepCoarse=1 cols=3\n"
                                   "            textAlign=RIGHT\n"
                                   "            provideUnchanged=0\n"
                                   "            align=centerY\n"
                                   "            sizeGroup=sgx_ctl_"+curEditGroupIdx+"\n"
                                   );
                     if!(alias.info.isBlank())
                     {
                        sGroup.append("            toolTipCaption=\""+alias.info+"\"\n");
                     }
                     sGroup.append("            />\n");
                  }

                  if(!alias.b_ui_custom_widget)
                  {
                     sGroup.append("<Label dir=LEFT sizeGroup=sgx_lb_"+curEditGroupIdx+" caption=\""+aliasCaption+":\"\n");
                     sGroup.append("       textPlacement=RIGHT\n");
                     sGroup.append("       align=centerY\n");
                     sGroup.append("       fillBG=0\n");
                     sGroup.append("       />\n");

                     param_widget_alias_indices.add(aliasIdx);
                     param_widget_aliases.add(alias);
                  }

                  sGroup.append("</Panel>\n");


               }  // if editgroup_idx
            }
         }  // if alias.syx_off

         aliasIdx++;
      } // foreach alias

      // Close current group
      if(-1 != curEditGroupIdx)
      {
         if(bTitledPanel)
            sGroup.append("</TitledPanel></Panel>\n");

         sGroup.append(
            "            </Panel></Panel>\n"
            "          </ScrollPane>\n"
            "        </Panel></Panel>\n"
            "      </View>\n"
                       );
      }
      sAllGroups.append(sGroup);

      // trace "xxx sAllGroups=\n"+sAllGroups;

      _xfmSrc.replace("$(PARAM_WIDGETS)", sAllGroups);
   }

   // <ui_init.png>
   protected method resolveParamWidgets() {
      int aliasIdx;
      int idx = 0;
      foreach aliasIdx in param_widget_alias_indices
      {
         Layer l <= findLayerById("param_"+aliasIdx);
         param_widgets.add(l);

         MIDISynthProfileCtlAlias alias <= param_widget_aliases.get(idx);
         if("d_vcom_alg" == alias.id)
         {
            cm_param_alg <= l;
         }

         idx++;
      }

      // Update algorithm combobox
      local StringArray algOpt;
      int algNr = 1;
      loop(88)
      {
         algOpt.add(algNr+"\t"+alg_expr.get(algNr-1)+" ");
         algNr++;
      }
      cm_param_alg.setOptions(algOpt);
      cm_param_alg.setFontByName(UIConstants.DEFAULT_FONT_NAME_FIXED_LARGE);
      cm_param_alg.setSizeGroup(null);
   }

   // <ui_init.png>
   protected method createDiffLockWidgets(String _xfmSrc) {
      String *editGroupName;
      int editGroupIdx = 0;
      local String buf;
      buf.append("<Panel align=expandx padTop=4>\n");
      int numPanelWidgets = 0;
      int NUM_WIDGETS_PER_PANEL = 6;
      foreach editGroupName in profile.all_editgroup_captions
      {
         if(NUM_WIDGETS_PER_PANEL == numPanelWidgets++)
         {
            buf.append("</Panel>\n");
            buf.append("<Panel dir=BOTTOM align=expandx padTop=2>\n");
            numPanelWidgets = 0;
         }
         buf.append(
            "<CheckBox id=cb_difflock_"+editGroupIdx+"\n"
            "          dir=RIGHT\n"
            "          caption=\""+editGroupName+"\"\n"
            "          font=\"bold\"\n"
            "          padLeft=4\n"
            "          align=centerY\n"
            "          sizeGroup=sgx_grouplock\n"
            "          autoresolve=0\n"
            "          />\n"
                    );

         StringArray subGroupNames <= profile.all_editgroup_subgroup_captions.get(editGroupIdx);
         if(null != subGroupNames)
         {
            int subGroupIdx = 0;
            String *subGroupName;
            foreach subGroupName in subGroupNames
            {
               if(NUM_WIDGETS_PER_PANEL == numPanelWidgets++)
               {
                  buf.append("</Panel>\n");
                  buf.append("<Panel dir=BOTTOM align=expandx padTop=2>\n");
                  numPanelWidgets = 0;
               }
               buf.append(
                  "<CheckBox id=cb_difflock_"+editGroupIdx+"_"+subGroupIdx+"\n"
                  "          dir=RIGHT\n"
                  "          caption=\""+subGroupName+"\"\n"
                  "          padLeft=4\n"
                  "          align=centerY\n"
                  "          sizeGroup=sgx_grouplock\n"
                  "          autoresolve=0\n"
                  "          />\n"
                          );

               subGroupIdx++;
            }
         }
         editGroupIdx++;
      }
      buf.append("</Panel>\n");
      _xfmSrc.replace("$(DIFF_GROUP_LOCKS)", buf);
   }

   // <ui_init.png>
   protected method resolveDiffLockWidgets() {
      String *editGroupName;
      int editGroupIdx = 0;
      difflock_group_states.allocAndFill(profile.all_editgroup_captions.numElements, false);
      foreach editGroupName in profile.all_editgroup_captions
      {
         difflock_group_checkboxes.add(findLayerById("cb_difflock_"+editGroupIdx));
         StringArray subGroupNames <= profile.all_editgroup_subgroup_captions.get(editGroupIdx);
         if(null != subGroupNames)
         {
            PointerArray paSub <= new PointerArray;
            difflock_subgroup_checkboxes.add(#(deref paSub));
            IntArray iaSub <= new IntArray;
            difflock_subgroup_states.add(#(deref iaSub));
            iaSub.allocAndFill(subGroupNames.numElements, false);

            int subGroupIdx = 0;
            String *subGroupName;
            foreach subGroupName in subGroupNames
            {
               paSub.add(findLayerById("cb_difflock_"+editGroupIdx+"_"+subGroupIdx));
               subGroupIdx++;
            }
         }
         editGroupIdx++;
      }
   }

   // <ui_handle.png>
   protected method handleDiffLockWidgetChanged(CheckBox _cb) : boolean {
      int idx;
      boolean bEnable;
      PointerArray *paSub;

      idx = difflock_group_checkboxes.indexOfPointer(_cb, 0);
      if(-1 != idx)
      {
         // Toggle edit group
         bEnable = _cb.isSelected();
         difflock_group_states[idx] = bEnable;
         Global.PrintFast("Group "+idx+" is "+Utils.GetEnableString(bEnable));

         // Update subgroups
         paSub <= difflock_subgroup_checkboxes.get(idx);
         CheckBox *cb;
         foreach cb in paSub
         {
            cb.setSelected(bEnable);
         }
         return true;
      }
      else
      {
         int editGroupIdx = 0;
         foreach paSub in difflock_subgroup_checkboxes
         {
            idx = paSub.indexOfPointer(_cb, 0);
            if(-1 != idx)
            {
               IntArray iaSub <= difflock_subgroup_states.get(editGroupIdx);
               bEnable = _cb.isSelected();
               iaSub[idx] = bEnable;
               Global.PrintFast("Group "+editGroupIdx+" SubGroup "+idx+" is "+Utils.GetEnableString(bEnable));
               return true;
            }
            editGroupIdx++;
         }
      }
      return false;
   }

   // <ui_handle.png>
   protected method handleDiffLockToggleAll() {
      // trace "xxx toggleall: difflock_group_states="+#(difflock_group_states);
      IntArray *iaSub;
      boolean bAllEnabled = (-1 == difflock_group_states.indexOf(false, 0));
      if(bAllEnabled)
      {
         foreach iaSub in difflock_subgroup_states
         {
            // trace "xxx toggleall: iaSub="+#(iaSub);
            bAllEnabled = bAllEnabled && (-1 == iaSub.indexOf(false, 0));
         }
      }

      boolean bEnable = !bAllEnabled;

      CheckBox *cb;
      foreach cb in difflock_group_checkboxes
      {
         cb.setSelected(bEnable);
         difflock_group_states.fill(bEnable);
      }
      PointerArray *paSub;
      int editGroupIdx = 0;
      foreach paSub in difflock_subgroup_checkboxes
      {
         iaSub <= difflock_subgroup_states.get(editGroupIdx);
         iaSub.fill(bEnable);
         foreach cb in paSub
         {
            cb.setSelected(bEnable);
         }
         editGroupIdx++;
      }

      Global.Print((bEnable?"Enable":"Disable")+" all diff locks");
   }

   // <ui_handle.png>
   protected method handleDiffLockInvert() {
      int editGroupIdx = 0;
      CheckBox *cb;
      foreach cb in difflock_group_checkboxes
      {
         cb.toggleSelection();
         difflock_group_states[editGroupIdx] = cb.isSelected();

         CheckBox *cbs;
         PointerArray paSub <= difflock_subgroup_checkboxes.get(editGroupIdx);
         IntArray iaSub <= difflock_subgroup_states.get(editGroupIdx);
         int subGroupIdx = 0;
         foreach cbs in paSub
         {
            cbs.toggleSelection();
            iaSub[subGroupIdx] = cbs.isSelected();
            subGroupIdx++;
         }

         editGroupIdx++;
      }

      Global.Print("Invert diff locks");
   }

   // <ui_handle.png>
   protected method handleDiffLockRand() {
      int numRand = 0;
      local MIDISynthProfileCtlAlias *alias;
      local Buffer pd <= patch.patch_data;

      int randMask = getRandLockMask();

      foreach alias in param_widget_aliases
      {
         boolean bRand = false;

         if(-1 != alias.editsubgroup_idx)
         {
            IntArray iaSub <= difflock_subgroup_states.get(alias.editgroup_idx);
            bRand |= iaSub.get(alias.editsubgroup_idx);
         }
         else if(-1 != alias.editgroup_idx)
         {
            bRand |= difflock_group_states.get(alias.editgroup_idx);
         }

         bRand = bRand && ((0 == alias.randlock_flags) || (alias.randlock_flags & randMask));

         if(bRand)
         {
            short r = alias.min + rand(alias.max - alias.min);

            if(alias.syx_off_lo > 0)
            {
               // not used by FS1R
               pd.pokeI8(alias.syx_off, ((r >> 7) & 127));  // MSB
               pd.pokeI8(alias.syx_off_lo, (r & 127));      // LSB
            }
            else
            {
               if(alias.syx_bit_num > 0)
               {
                  r =
                     (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
                     | (r << alias.syx_bit_off);
               }

               pd.pokeI8(alias.syx_off, r & 127);
            }

            numRand++;
         }
      }

      if(false != data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      updateUIFromPatch();

      Global.Print("Randomized "+numRand+" patch parameter"+Utils.GetPluralString(numRand));
   }

   // <method.png>
   protected method selectDefaultRandGroups() {
      // Clear
      handleDiffLockToggleAll();
      handleDiffLockToggleAll();

      CheckBox *cb;
      PointerArray *sub;

      int bitIdx = 0;
      loop(11)
      {
         cb <= findLayerById("cb_randlock_bit"+bitIdx);
         cb.setSelectedAction(false);
      }

      // freq
      cb_randlock_bit1.setSelectedAction(true);

      // fctrl/frmt transpose
      cb_randlock_bit2.setSelectedAction(true);

      // v eg level 2+3
      cb_randlock_bit5.setSelectedAction(true);

      // v eg time 2+3
      cb_randlock_bit7.setSelectedAction(true);

      // bw/skirt
      cb_randlock_bit8.setSelectedAction(true);

      // alg
      cb_randlock_bit10.setSelectedAction(true);

      // voice group
      cb <= difflock_group_checkboxes.get(1);
      cb.setSelectedAction(true);
      sub <= difflock_subgroup_checkboxes.get(1);
      cb <= sub.get(0); cb.setSelectedAction(false);  // lfo
      cb <= sub.get(1); cb.setSelectedAction(false);  // pitch
      cb <= sub.get(2); cb.setSelectedAction(false);  // fseq voiced sw
      cb <= sub.get(3); cb.setSelectedAction(false);  // fseq unvoiced sw

      // formant group
      cb <= difflock_group_checkboxes.get(3);
      cb.setSelectedAction(true);

      // fm group
      cb <= difflock_group_checkboxes.get(4);
      cb.setSelectedAction(true);
      sub <= difflock_subgroup_checkboxes.get(4);
      cb <= sub.get(0); cb.setSelectedAction(false);  // voiced lvl correction

      // voice.1..8
      int opIdx = 0;
      loop(16)
      {
         sub <= difflock_subgroup_checkboxes.get(5+opIdx);
         cb <= sub.get(0); cb.setSelectedAction(true);  // osc
         cb <= sub.get(1); cb.setSelectedAction(true);  // freq
         if(opIdx >= 8)  // unvoiced ?
         {
            cb <= sub.get(4); cb.setSelectedAction(true);  // eg
         }
         else
         {
            cb <= sub.get(3); cb.setSelectedAction(true);  // eg
         }
         opIdx++;
      }
   }

   // <ui_init.png>
   protected method updateRandLockWidgetToolTips(String _xfmSrc) {

      MIDISynthProfileCtlAlias *alias;

      int bitIdx = 0;
      int flags = 1;
      loop(11)
      {
         CheckBox cb <= findLayerById("cb_randlock_bit"+bitIdx);
         local String paramList; paramList.empty();
         local String paramLine; paramLine.empty();
         int aliasIdx = 0;
         foreach alias in profile.all_aliases
         {
            if(alias.randlock_flags & flags)
            {
               if(!paramLine.isBlank())
                  paramLine.append(", ");
               paramLine.append(alias.caption);
               if(paramLine.length > 70)
               {
                  paramList.append(paramLine);
                  paramList.append("\n");
                  paramLine.empty();
               }
            }
         }

         paramList.append(paramLine);
         paramList.append("\n");

         String toolTipCaption = cb.getToolTipCaption();
         if(paramList.isBlank())
         {
            cb.setEditable(false);
            toolTipCaption.replace("$(RANDLOCK_PARAMS)", "(no params)");
         }
         else
         {
            toolTipCaption.replace("$(RANDLOCK_PARAMS)", paramList);
         }
         cb.setToolTipCaption(toolTipCaption);

         cb.setSelected(0 != (profile.def_randlock_mask & flags));

         bitIdx++;
         flags = flags << 1;
      }
   }

   // <ui_init.png>
   protected method getRandLockMask() : int {
      int r = 0;
      r |= cb_randlock_bit0.isSelected()  <<  0;
      r |= cb_randlock_bit1.isSelected()  <<  1;
      r |= cb_randlock_bit2.isSelected()  <<  2;
      r |= cb_randlock_bit3.isSelected()  <<  3;
      r |= cb_randlock_bit4.isSelected()  <<  4;
      r |= cb_randlock_bit5.isSelected()  <<  5;
      r |= cb_randlock_bit6.isSelected()  <<  6;
      r |= cb_randlock_bit7.isSelected()  <<  7;
      r |= cb_randlock_bit8.isSelected()  <<  8;
      r |= cb_randlock_bit9.isSelected()  <<  9;
      r |= cb_randlock_bit10.isSelected() << 10;
      // trace "xxx getRandLockMask: r="+r;
      return r;
   }

   // <method.png>
   protected method fs1rRequestBytes3(Buffer _syx, byte _addrH, byte _addrM, byte _addrL) {
      _syx.offset = 0;
      _syx.i8 = 0xF0;
      _syx.i8 = 0x43;          // yamaha id
      _syx.i8 = 0x20 | 0;      // device nr
      _syx.i8 = 0x5e;          // model id (FS1R)
      _syx.i8 = _addrH & 127;  // addr hi
      _syx.i8 = _addrM & 127;  // addr middle
      _syx.i8 = _addrL & 127;  // addr lo
      _syx.i8 = 0xF7;
   }

   // <method.png>
   protected method fs1rDecodeData(Buffer _syx, Buffer _out) : boolean {
      // (note) 'syx' w/o F0..F7 bytes
      int syxSz = _syx.offset;
      _syx.offset = 0;
      _out.offset = 0;
      byte c;
      if(0x43 == _syx.i8)  // yamaha id
      {
         c = _syx.i8;  // device nr
         c = _syx.i8;  // model id
         if(0x5e == c)
         {
            Byte expChecksum = 0;
            Byte rcvChecksum;
            byte byteCountH = _syx.i8;
            byte byteCountL = _syx.i8;
            int byteCount = (byteCountH << 7) | byteCountL;
            Byte addrH = _syx.i8;
            Byte addrM = _syx.i8;
            Byte addrL = _syx.i8;
            Global.Debug("FS1R::fs1rDecodeData: byteCount="+byteCount+" addr=("+addrH.printf("%02x")+":"+addrM.printf("%02x")+":"+addrL.printf("%02x")+")");
            _out.offset = 0;
            expChecksum += byteCountH;
            expChecksum += byteCountL;
            expChecksum += addrH;
            expChecksum += addrM;
            expChecksum += addrL;
            loop(byteCount)
            {
               c = _syx.i8;
               _out.i8 = c;
               expChecksum += c;
            }
            rcvChecksum = _syx.i8;  // checksum
            expChecksum = (0x80 - expChecksum & 127) & 127;
            Global.Debug("FS1R::fs1rDecodeData: expChecksum="+expChecksum.printf("%02x")+" rcvChecksum="+rcvChecksum.printf("%02x")+" #written="+_out.offset);
            return (expChecksum == rcvChecksum);
         }
      }

      // Utils.HexDump(_syx, 0, _syx.offset);
      return false;
   }

   // <method.png>
   protected method fs1rEncodeData3(Buffer _syx, Buffer _data, int _off, int _num, byte _addrH, byte _addrM, byte _addrL) {
      int byteCount = _num;
      int checksum = 0;
      _data.offset = _off;
      _syx.offset = 0;
      _syx.i8 = 0xF0;
      _syx.i8 = 0x43;   // yamaha id
      _syx.i8 = 0;      // device nr
      _syx.i8 = 0x5e;   // model id (FS1R)
      byte byteCountH = (byteCount >> 7) & 127;
      byte byteCountL = (byteCount     ) & 127;
      _syx.i8 = byteCountH;
      _syx.i8 = byteCountL;
      _syx.i8 = _addrH & 127;  // addr high
      _syx.i8 = _addrM & 127;  // addr middle
      _syx.i8 = _addrL & 127;  // addr low
      checksum += byteCountH;
      checksum += byteCountL;
      checksum += _addrH & 127;
      checksum += _addrM & 127;
      checksum += _addrL & 127;
      loop(byteCount)
      {
         byte c = _data.i8 & 127;
         _syx.i8 = c;
         checksum += c;
      }
      checksum = (0x80 - (checksum & 127)) & 127;
      _syx.i8 = checksum;
      _syx.i8 = 0xF7;
   }

   // <method.png>
   protected method fs1rEncodeParam3(local Buffer _syx,
                                     local short _value,
                                     local byte _addrH, local byte _addrM, local byte _addrL
                                     ) {
      _syx.offset = 0;
      _syx.i8 = 0xF0;
      _syx.i8 = 0x43;        // yamaha id
      _syx.i8 = 0x10 | 0;    // device nr
      _syx.i8 = 0x5e;        // model id (FS1R)
      _syx.i8 = _addrH & 127;  // addr high
      _syx.i8 = _addrM & 127;  // addr middle
      _syx.i8 = _addrL & 127;  // addr low
      _syx.i8 = (_value >> 7) & 127;  // MSB
      _syx.i8 = (_value     ) & 127;  // LSB
      _syx.i8 = 0xF7;
   }

   // <method.png>
   module =replay= method fs1rSendParam3(local short _value,
                                         local byte _addrH, local byte _addrM, local byte _addrL
                                         ) {
      fs1rEncodeParam3(param_sysex_buffer,
                       _value,
                       _addrH, _addrM, _addrL
                       );
      out_dev.sysEx(param_sysex_buffer);
      out_dev.send(milliSeconds());
   }

   // <method.png>
   module =replay= method fs1rSendParam3Fr(local MIDIPipeFrame _frOrNull,
                                           local short _value,
                                           local byte _addrH, local byte _addrM, local byte _addrL
                                           ) {
      fs1rEncodeParam3(param_sysex_buffer,
                       _value,
                       _addrH, _addrM, _addrL
                       );
      if(null != _frOrNull)
      {
         _frOrNull.sysex(true/*bset*/, out_dev.dev_idx, param_sysex_buffer);
      }
      else
      {
         out_dev.sysEx(param_sysex_buffer);
         out_dev.send(milliSeconds());
      }
   }

   // <method.png>
   protected method fs1rSendPerfPartParam3(local short _value,
                                           local byte _partIdx,
                                           local byte _addrL
                                           ) {
      fs1rSendParam3(_value, 0x30 + _partIdx, 0x00, _addrL);
   }

   // <method.png>
   protected method fs1rSendDataAsParams3(local Buffer _syx,
                                          local Buffer _data,
                                          local int _off,
                                          local int _num,
                                          local byte _addrH, local byte _addrM, local byte _addrL
                                          ) {
      local int off = _off;
      local int addrL = _addrL;
      loop(_num)
      {
         local boolean bSend = true;

         if(!data.b_send_part_midi)
         {
            bSend = (off < 0x01) || (off > 0x04);
            bSend = bSend && (off != 0x2d);
         }

         if(bSend)
         {
            local byte val = _data.peekI8(off);

            fs1rEncodeParam3(param_sysex_buffer, val, _addrH, _addrM, addrL);
            out_dev.sysEx(param_sysex_buffer);
            out_dev.send(milliSeconds());
         }

         // Next byte
         addrL++;
         off++;
      }
   }

   // <midi.png>
   protected method sendAllParams_FS1R(Buffer _pd, int _partIdx) {
      Global.Debug2("sendAllParams_FS1R(partIdx="+_partIdx+")");
      // Utils.Backtrace();

      // fs1rEncodeData3(Buffer _syx, Buffer _data, int _off, int _num, byte _addrH, byte _addrM, byte _addrL)
      int partIdx = _partIdx; ////data.current_part_idx;

      // Performance part

      //  (note) synth does not support single part transfer :/
      if(0)
      {
         fs1rEncodeData3(patch_sysex_buffer, _pd,
                         FS1R_Patch.OFF_PERF_PART, FS1R_Patch.NUM_PERF_PART,
                         0x30 + partIdx, 0x00, 0x00
                         );
         // Utils.HexDump(patch_sysex_buffer, 0, patch_sysex_buffer.offset);

         out_dev.sysEx(patch_sysex_buffer);
         out_dev.send(milliSeconds());
      }
      else
      {
         // (note) 52 data bytes * 10 MIDI per data bytes => 520 MIDI bytes => 0.1664s transfer time @31250 baud
         fs1rSendDataAsParams3(patch_sysex_buffer, _pd,
                               FS1R_Patch.OFF_PERF_PART, FS1R_Patch.NUM_PERF_PART,
                               0x30 + partIdx, 0x00, 0x00
                               );
      }


      // // Voice common
      // // fs1rEncodeData3(patch_sysex_buffer, _pd,
      // //                 FS1R_Patch.OFF_VOICE_COMMON, FS1R_Patch.NUM_VOICE_COMMON,
      // //                 0x40 + partIdx, 0x00, 0x00
      // //                 );

      // // out_dev.begin();
      // // out_dev.sysEx(patch_sysex_buffer);
      // // out_dev.send(milliSeconds());

      // Voice common+voiced+unvoiced
      //  (note) 112+(35+27)*8 = 608 data bytes => 619 MIDI bytes => 0.19808s transfer time
      fs1rEncodeData3(patch_sysex_buffer, _pd,
                      FS1R_Patch.OFF_VOICE_COMMON, FS1R_Patch.NUM_VOICE_COMMON + FS1R_Patch.NUM_VOICE_OP*8,
                      0x40 + partIdx, 0x00, 0x00
                      );
      // trace "xxx patch_sysex_buffer.offset="+patch_sysex_buffer.offset; // => 619 bytes

      out_dev.sysEx(patch_sysex_buffer);
      out_dev.send(milliSeconds());
   }

   // <midi.png>
   protected method sendParamUpdate_FS1R(local MIDIPipeFrame _frOrNull,
                                         local MIDISynthProfileCtlAlias _alias,
                                         local int _value,
                                         local int _partIdx
                                         ) {
      local int partIdx = _partIdx; /////////data.current_part_idx;

      if(PageSysEx.b_debug && null == _frOrNull)
         Global.Debug2("sendParamUpdate_FS1R: nr="+_alias.nr+" off="+_alias.syx_off+" value="+_value+" param_sysex_buffer.offset="+param_sysex_buffer.offset);

      // trace "xxx sendParamUpdate_FS1R: partIdx="+_partIdx+" nr="+_alias.nr+" off="+_alias.syx_off+" value="+_value;

      // (todo) collect up to 16 param updates and bulk-send after timeout

      if(500 <= _alias.nr < 1000)
      {
         // Performance part
         local boolean bSend = true;

         if(!data.b_send_part_midi)
         {
            // Sending bank/prg params changes the synth patch and overwrites the edit buffer
            bSend = (_alias.syx_off < 0x01) || (_alias.syx_off > 0x04);
            bSend = bSend && (_alias.syx_off != 0x2d);
         }

         if(bSend)
         {
            fs1rEncodeParam3(param_sysex_buffer, _value, 0x30 + partIdx, 0x00, _alias.syx_off);
            if(null != _frOrNull)
               _frOrNull.sysex(true/*bset*/, out_dev.dev_idx, param_sysex_buffer);
            else
            {
               out_dev.addBuffer(param_sysex_buffer);
               out_dev.send(milliSeconds());
            }
         }
      }

      if(1000 <= _alias.nr < 2000)
      {
         // Voice common
         fs1rEncodeParam3(param_sysex_buffer, _value, 0x40 + partIdx, 0x00, _alias.syx_off - 52);
         if(null != _frOrNull)
            _frOrNull.sysex(true/*bset*/, out_dev.dev_idx, param_sysex_buffer);
         else
         {
            out_dev.addBuffer(param_sysex_buffer);
            out_dev.send(milliSeconds());
         }
      }
      else if(2000 <= _alias.nr < 3600)
      {
         // Voice op
         local int opIdx = (_alias.nr - 2000) / 200;
         fs1rEncodeParam3(param_sysex_buffer, _value, 0x60 + partIdx, opIdx, _alias.syx_off - 52 - 112 - (opIdx*(35+27)));
         if(null != _frOrNull)
            _frOrNull.sysex(true/*bset*/, out_dev.dev_idx, param_sysex_buffer);
         else
         {
            out_dev.addBuffer(param_sysex_buffer);
            out_dev.send(milliSeconds());
         }
      }

      // // TKS.sleep(10);
   }

   // <midi.png>
   public =replay= method sendParamUpdate(MIDISynthProfileCtlAlias _alias, int _value) {
      if(1)
      {
         sendParamUpdate_FS1R(null/*frOrNull*/, _alias, _value, data.current_part_idx);
      }
      else
      {
         // Called from UI thread after editing a parameter
         switch(_alias.type)
         {
            default:
               if(data.b_autosend)
               {
                  scheduleMIDISendPatch();
               }
               break;

            case MIDIMapDefs.TYPE_CC:
               out_dev.ctlChange(midi_ch, _alias.nr, _value);
               out_dev.send(milliSeconds());
               break;

            case MIDIMapDefs.TYPE_NRPN:
               out_dev.nrpn(midi_ch, _alias.nr, _value);
               out_dev.send(milliSeconds());
               break;
         }
      }
   }

   // <method_find.png>
   public method findParamWidgetByAliasId(String _id) : Layer {
      MIDISynthProfileCtlAlias *alias;
      int widgetIdx = 0;
      foreach alias in param_widget_aliases
      {
         if(alias.id == _id)
         {
            return param_widgets.get(widgetIdx);
         }
         widgetIdx++;
      }
      return null;
   }

   // <ui_handle.png>
   public =replay= method handleParamWidgetChanged(Layer _l, boolean _bUpdateFMMatrix, boolean _bQuiet) : boolean {
      int multiCurOpIdx;
      int multiNr;
      int ivalNew;
      int multiOpIdx;
      int multiWidgetIdx;

      int widgetIdx = param_widgets.indexOfPointer(_l, 0);
      // trace "xxx handleParamWidgetChanged: l.id="+_l.getLayerId()+" widgetIdx="+widgetIdx;
      Buffer pd <= patch.patch_data;
      Buffer pdReplay <= replay_patches[data.current_part_idx].patch_data;
      int ival;
      if(-1 != widgetIdx)
      {
         MIDISynthProfileCtlAlias alias <= param_widget_aliases.get(widgetIdx);
         // trace "xxx handleParamWidgetChanged: widgetIdx="+widgetIdx+" alias.caption=\""+alias.caption+"\" alias.syx_off="+alias.syx_off;
         if(_l instanceof CheckBox)
         {
            CheckBox cb <= _l;
            ival = cb.isSelected();

            if(!_bQuiet)
               Global.PrintFast("Param "+alias.id+" is "+Utils.GetEnableString(ival));

            if(VMOD_LALT == UI.GetKeyMod())
            {
               if(alias.nr >= 2000)
               {
                  multiCurOpIdx = (alias.nr - 2000) / 200;
                  multiNr = (((alias.nr - 2000) / 100)&1) ? 2100 : 2000;
                  multiNr += (alias.nr - 2000) % 100;
                  ivalNew = ival;
                  multiOpIdx = 0;
                  loop(8)
                  {
                     // // alias <= profile.getAliasByDataNr(multiNr);
                     // alias <= profile.getAliasByRPN(multiNr);
                     alias <= profile.getRPNAliasByNr(multiNr);
                     if(null != alias)
                     {
                        if(alias.syx_bit_num > 0)
                        {
                           ival =
                              (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
                              | (ivalNew << alias.syx_bit_off);
                        }
                        else
                           ival = ivalNew;
                        pd.pokeI8(alias.syx_off, ival & 127);
                        pdReplay.pokeI8(alias.syx_off, ival & 127);
                        sendParamUpdate(alias, ival);

                        if(multiOpIdx != multiCurOpIdx)
                        {
                           multiWidgetIdx = param_widget_aliases.indexOfPointer(alias, 0);
                           if(-1 != multiWidgetIdx)
                           {
                              CheckBox cbMulti <= param_widgets.get(multiWidgetIdx);
                              updateParamWidgetFromPatchData(pd, cbMulti, alias);
                           }
                        }
                     }
                     // Next op
                     multiNr += 200;
                     multiOpIdx++;
                  }
               }
            }
            else
            {
               if(alias.syx_bit_num > 0)
               {
                  ival =
                     (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
                     | (ival << alias.syx_bit_off);
               }
               pd.pokeI8(alias.syx_off, ival);
               pdReplay.pokeI8(alias.syx_off, ival);
               sendParamUpdate(alias, ival);
            }
         }
         else if(_l instanceof ComboBox)
         {
            ComboBox cm <= _l;
            ival = cm.getSelectedOption() + alias.min;
            ival = (ival + alias.bias) & 127;

            if(!_bQuiet)
               Global.PrintFast("Param "+alias.id+" is "+cm.getSelectedOptionName());

            if(VMOD_LALT == UI.GetKeyMod())
            {
               if(alias.nr >= 2000)
               {
                  multiCurOpIdx = (alias.nr - 2000) / 200;
                  multiNr = (((alias.nr - 2000) / 100)&1) ? 2100 : 2000;
                  multiNr += (alias.nr - 2000) % 100;
                  ivalNew = ival;
                  multiOpIdx = 0;
                  loop(8)
                  {
                     // // alias <= profile.getAliasByDataNr(multiNr);
                     // alias <= profile.getAliasByRPN(multiNr);
                     alias <= profile.getRPNAliasByNr(multiNr);
                     if(null != alias)
                     {
                        if(alias.syx_bit_num > 0)
                        {
                           ival =
                              (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
                              | (ivalNew << alias.syx_bit_off);
                        }
                        else
                           ival = ivalNew;
                        pd.pokeI8(alias.syx_off, ival & 127);
                        pdReplay.pokeI8(alias.syx_off, ival & 127);
                        sendParamUpdate(alias, ival);

                        if(multiOpIdx != multiCurOpIdx)
                        {
                           multiWidgetIdx = param_widget_aliases.indexOfPointer(alias, 0);
                           if(-1 != multiWidgetIdx)
                           {
                              ComboBox cmMulti <= param_widgets.get(multiWidgetIdx);
                              updateParamWidgetFromPatchData(pd, cmMulti, alias);
                           }
                        }
                     }
                     // Next op
                     multiNr += 200;
                     multiOpIdx++;
                  }
               }
            }
            else
            {
               if(alias.syx_bit_num > 0)
               {
                  ival =
                     (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
                     | (ival << alias.syx_bit_off);
               }
               pd.pokeI8(alias.syx_off, ival);
               pdReplay.pokeI8(alias.syx_off, ival);
               sendParamUpdate(alias, ival);
            }
         }
         else if(_l instanceof FloatParam)
         {
            FloatParam fp <= _l;
            ival = fp.getFloatValue();

            if(!_bQuiet)
               Global.PrintFast("Param "+alias.id+" is "+ival);

            switch(alias.cel_range)
            {
               default:
                  // sGroup.append("            min="+alias.min+" max="+alias.max+"\n");
                  break;

               case NT_CEL.RANGE_M128_P127:
                  // sGroup.append("            min="+(alias.min-128)+" max="+(alias.max-128)+"\n");
                  ival += 128;
                  break;

               case NT_CEL.RANGE_M64_P63:
                  // sGroup.append("            min="+(alias.min-64)+" max="+(alias.max-64)+"\n");
                  ival += 64;
                  break;
            }

            int ivalMSB;
            int ivalLSB;
            if(alias.nr_lo > 0)
            {
               // Full 14bit range
               //  (todo) remove, not used by FS1R
               ivalMSB = (ival >> 7);
               ivalLSB = (ival & 127);

               pd.pokeI8(alias.syx_off, ivalMSB);
               pd.pokeI8(alias.syx_off_lo, ivalLSB);

               pdReplay.pokeI8(alias.syx_off, ivalMSB);
               pdReplay.pokeI8(alias.syx_off_lo, ivalLSB);

               sendParamUpdate(alias, ivalMSB);
               // trace "xxx alias nr="+alias.nr+" nr_lo="+alias.nr_lo+" alias.nr_lo_alias="+#(alias.nr_lo_alias);
               sendParamUpdate(alias.nr_lo_alias, ivalLSB);
            }
            else
            {
               ival = (ival + alias.bias) & 127;

               if(VMOD_LALT == UI.GetKeyMod())
               {
                  if(alias.nr >= 2000)
                  {
                     multiCurOpIdx = (alias.nr - 2000) / 200;
                     multiNr = (((alias.nr - 2000) / 100)&1) ? 2100 : 2000;
                     multiNr += (alias.nr - 2000) % 100;
                     ivalNew = ival;
                     multiOpIdx = 0;
                     loop(8)
                     {
                        // // // alias <= profile.getAliasByDataNr(multiNr);
                        // // alias <= profile.getAliasByRPN(multiNr);
                        alias <= profile.getRPNAliasByNr(multiNr);
                        if(null != alias)
                        {
                           if(alias.syx_bit_num > 0)
                           {
                              ival =
                                 (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
                                 | (ivalNew << alias.syx_bit_off);
                           }
                           else
                              ival = ivalNew;
                           pd.pokeI8(alias.syx_off, ival & 127);
                           pdReplay.pokeI8(alias.syx_off, ival & 127);
                           sendParamUpdate(alias, ival);

                           if(multiOpIdx != multiCurOpIdx)
                           {
                              multiWidgetIdx = param_widget_aliases.indexOfPointer(alias, 0);
                              if(-1 != multiWidgetIdx)
                              {
                                 FloatParam fpMulti <= param_widgets.get(multiWidgetIdx);
                                 updateParamWidgetFromPatchData(pd, fpMulti, alias);
                              }
                           }
                        }
                        // Next op
                        multiNr += 200;
                        multiOpIdx++;
                     }
                  }
               }
               else
               {
                  if(alias.syx_bit_num > 0)
                  {
                     ival =
                        (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
                        | (ival << alias.syx_bit_off);
                  }
                  pd.pokeI8(alias.syx_off, ival & 127);
                  pdReplay.pokeI8(alias.syx_off, ival & 127);
                  // trace "xxx sendParamUpdate: alias.id="+alias.id+" ival="+ival;
                  sendParamUpdate(alias, ival);
               }
            }
         }

         if(_bUpdateFMMatrix)
            ta_fmmatrix.reschedule();

         return true;
      }
      return false;
   }

   // <ui_show.png>
   public =replay= virtual showDataStatic(MIDISynthProfileDataFS1R _data,
                                          STX_MIDIInDevice  _inDev,
                                          STX_MIDIOutDevice _outDev,
                                          byte              _midiCh
                                          ) {
      // boolean bFirst = (@(data) == @(null));

      data    <= _data;
      in_dev  <= _inDev;
      out_dev <= _outDev;
      midi_ch  = _midiCh;

      patch <= _data.patches.get(_data.current_patch_nr);

      // trace "xxx showDataStatic: patch="+#(patch);
      // trace "xxx showDataStatic: patches="+#(_data.patches);

      if(null == patch)
      {
         // when migrating to new AlphaJuno editor and old editor state could not be loaded
         patch <= _data.patches.get(0);
         _data.current_patch_nr = 0;
      }
   }

   // <ui_show.png>
   public =replay= virtual showData(MIDISynthProfileDataFS1R _data,
                                    STX_MIDIInDevice  _inDev,
                                    STX_MIDIOutDevice _outDev,
                                    byte              _midiCh
                                    ) {

      orig_replay_patch_part1.copyFrom(replay_patch_part1, true/*bCopyVoice*/, true/*bCopyFX*/);
      orig_replay_patch_part2.copyFrom(replay_patch_part2, true/*bCopyVoice*/, false/*bCopyFX*/);
      orig_replay_patch_part3.copyFrom(replay_patch_part3, true/*bCopyVoice*/, false/*bCopyFX*/);
      orig_replay_patch_part4.copyFrom(replay_patch_part4, true/*bCopyVoice*/, false/*bCopyFX*/);

      showDataStatic(_data, _inDev, _outDev, _midiCh);

      if(true == data.b_autosend)  // maybe=not when editor is entered
      {
         scheduleMIDISendPatch();
      }

      updatePartButtons();

      fm_matrix.enter();

      updateUIFromPatch();

      if(null == in_dev)
      {
         Global.Error("FS1R: input device not configured or found");
      }

      if(null == out_dev)
      {
         Global.Error("FS1R: output device not configured or found");
      }
      else
      {
         // if(-1 == current_midi_patch_nr)
         // {
         //    if(b_patch_midi_follow)
         //    {
         //       midiSelectPatch(0);
         //    }
         // }
      }

      // fp_prg_menu_multioff.setValue(data.multiedit_off + 1);
      // fp_prg_menu_multinum.setValue(data.multiedit_num);
      // cb_prg_menu_multiedit.setSelected(data.b_multiedit);
      // handleMultiEditEnableChanged(true/*bQuiet*/); // update bgtint

   }

   // <ui_show.png>
   public virtual enter() {
      // b_queued_midi_send_patch = false;
      // ta_updatemidi.schedule();
      MIDI.AddMIDIMapEventListener(this);
      ta_periodic.reschedule();
   }

   // <ui_show.png>
   public virtual leave() {
      b_queued_midi_send_patch = false;
      MIDI.RemoveMIDIMapEventListener(this);

      ta_midisend.cancel();
      ta_fmmatrix.cancel();
      ta_periodic.cancel();
      fm_matrix.leave();
   }

   // <ui_focus.png>
   public virtual refocusDefault() {
      UI.SetKeyboardFocus(ts_groups);
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {

      switch(ts_groups.getActiveTabIndex())
      {
         case TAB_PATCH:
            _retLayers.joinRR(_retLayers,
                              [
                                 ts_groups,

                                 bt_patch_project,
                                 cm_patch_nr,
                                 tf_patch_name,
                                 cm_patch_category,
                                 cm_find_category,
                                 tf_find_name,
                                 bt_find_catprev,
                                 bt_find_catbrowse,
                                 bt_find_catnext,
                                 ]
                              );

            _retLayers.joinRR(_retLayers, part_buttons);

            _retLayers.joinRR(_retLayers,
                              [
                                 cb_patch_autosend,
                                 cb_patch_diff,
                                 cb_patch_sendmulti,

                                 cb_patch_recvnames,
                                 cb_patch_recvctls,
                                 cb_patch_part_midi,

                                 cb_patch_proxy_follow,
                                 cb_patch_proxy_lock,
                                 cb_patch_proxy_reset,

                                 bt_patch_send,
                                 bt_patch_receive_edit,
                                 bt_patch_receive_edit_to_clipboard,

                                 bt_patch_tools,

                                 bt_patch_copy,
                                 bt_patch_paste,
                                 bt_patch_swap,
                                 bt_patch_init,

                                 cm_patch_multi,
                                 bt_multi_consecutive,
                                 cm_patch_nr_part2,
                                 cm_patch_nr_part3,
                                 cm_patch_nr_part4,

                                 bt_difflock_toggle,
                                 bt_difflock_invert,
                                 cb_difflock_enable,
                                 bt_difflock_rand,
                                 cb_randlock_bit10,
                                 cb_randlock_bit9,
                                 cb_randlock_bit8,
                                 cb_randlock_bit7,
                                 cb_randlock_bit6,
                                 cb_randlock_bit5,
                                 cb_randlock_bit4,
                                 cb_randlock_bit3,
                                 cb_randlock_bit2,
                                 cb_randlock_bit1,
                                 cb_randlock_bit0,
                               ]
                              );
            // (todo) add difflock checkboxes
            break;

         case TAB_FMMATRIX:
            fm_matrix.addTabCycleOverrides(_retLayers);
            break;

      }

   }

   // <method.png>
   protected method buildNameFiltersFromString(StringArray nameFilters, String _nameFilterOrNull) {
      String *fltStr;

      if(null != _nameFilterOrNull)
      {
         if(!_nameFilterOrNull.isBlank())
         {
            nameFilters = _nameFilterOrNull.splitChar(' ');

            foreach fltStr in nameFilters
            {
               fltStr.trim();
               fltStr.toLower();
            }
         }
         else
         {
            nameFilters.empty();
         }
      }
      else
      {
         nameFilters.empty();
      }
   }

   // <method.png>
   protected method matchNameFilters(FS1R_Patch _patch, StringArray _nameFilters) {
      String *fltStr;
      boolean ret;

      if(0 != _nameFilters.numElements)
      {
         ret = false;

         // Try patch name
         foreach fltStr in _nameFilters
         {
            if(((_patch.patch_name).toLower()) & fltStr)
            {
               ret = true;
               break;
            }
         }
      }
      else
      {
         ret = true;
      }

      return ret;
   }

   // <method.png>
   protected method buildFilteredPatchNames(StringArray midiPatchNames,
                                            StringArray midiPatchNamesCat,
                                            IntArray    fltPatchIndices,
                                            int         _catFilter,
                                            String      _nameFilterOrNull
                                            ) {
      local String bankName;
      midiPatchNames.empty();
      midiPatchNamesCat.empty();
      if(null != fltPatchIndices)
         fltPatchIndices.empty();
      int bankIdx = 0;
      int patchIdx = 0;
      local String patchName;
      FS1R_Patch *p;

      local StringArray nameFilters;
      buildNameFiltersFromString(nameFilters, _nameFilterOrNull);

      int fltCurPatchNr = -1;
      int fltPatchIdx = 0;

      loop(MIDISynthProfileDataFS1R.NUM_BANKS)
      {
         bankName = tcchar('A'+bankIdx);
         Integer prgNr = 1;
         loop(128)
         {
            p <= data.patches.get(patchIdx);

            if( (-1 == _catFilter) || (_catFilter == p.patch_category) )
            {
               if(matchNameFilters(p, nameFilters))
               {
                  if(patchIdx == data.current_patch_nr)
                  {
                     fltCurPatchNr = fltPatchIdx;
                  }

                  if(null != fltPatchIndices)
                     fltPatchIndices.add(patchIdx);

                  patchName = bankName+prgNr.printf("%03d")+": "+p.patch_name;
                  if(p.multi_mode == FS1R_Patch.MULTI_MODE_CH1)
                     patchName.append(".");
                  else if(p.multi_mode > FS1R_Patch.MULTI_MODE_CH1)
                     patchName.append("*");
                  midiPatchNames.add(patchName);
                  if(0 != p.patch_category)
                  {
                     patchName.append("\t["+(FS1R_Patch.category_names.get(p.patch_category))+"]");  // \t = start right align
                  }
                  midiPatchNamesCat.add(patchName);

                  fltPatchIdx++;
               }
            }

            prgNr++;
            patchIdx++;
         }

         bankIdx++;
      }

      return fltCurPatchNr;
   }

   // <method.png>
   protected method rebuildPatchNames() {

      b_first_rebuild_patch_names = false;

      local StringArray midiPatchNames;
      local StringArray midiPatchNamesCat;

      buildFilteredPatchNames(midiPatchNames, midiPatchNamesCat, null/*fltPatchIndices*/, -1, null/*nameFilterOrNull*/);

      cm_patch_nr.setOptions(midiPatchNames);
      cm_patch_nr.setOptionsLong(midiPatchNamesCat);

      local StringArray patchNamesMulti;
      patchNamesMulti.join(["<keep>", "-"], midiPatchNames);
      cm_patch_nr_part2.setOptions(patchNamesMulti);
      cm_patch_nr_part3.setOptions(patchNamesMulti);
      cm_patch_nr_part4.setOptions(patchNamesMulti);
      patchNamesMulti.join(["<keep>", "-"], midiPatchNamesCat);
      cm_patch_nr_part2.setOptionsLong(patchNamesMulti);
      cm_patch_nr_part3.setOptionsLong(patchNamesMulti);
      cm_patch_nr_part4.setOptionsLong(patchNamesMulti);
   }

   // <ui_update.png>
   public method updateUIFromPatchEx(boolean _bFX, boolean _bFMMatrix) {
      if(b_debug)
         Global.Debug2("FS1R::updateUIFromPatch: patch_nr="+data.current_patch_nr+" patch="+#(patch));

      rebuildPatchNames();

      cm_patch_nr       .setSelectedOption(data.current_patch_nr);
      cb_patch_autosend .setSelected(      data.b_autosend);
      cb_patch_diff     .setSelected(      data.b_send_diff);
      cb_patch_sendmulti.setSelected(      data.b_send_multi);
      cm_patch_category .setSelectedOption(patch.patch_category);
      cb_patch_proxy_follow .setSelected (b_patch_proxy_follow);
      cb_patch_proxy_lock   .setSelected (b_patch_proxy_lock);
      cb_patch_proxy_reset  .setSelected (data.b_proxy_reset);

      cb_patch_recvnames.setSelected(data.b_recv_patch_names);
      cb_patch_recvctls .setSelected(data.b_recv_ctls);
      cb_patch_part_midi.setSelected(data.b_send_part_midi);

      tf_patch_name.setText(patch.patch_name.trim());

      cm_patch_multi.setSelectedOption(patch.multi_mode);
      if(patch.multi_mode != FS1R_Patch.MULTI_MODE_OFF)
      {
         cm_patch_nr_part2.setSelectedOption(patch.patch_idx_part2 + 2);  // skip <keep> and "-"
         cm_patch_nr_part3.setSelectedOption(patch.patch_idx_part3 + 2);
         cm_patch_nr_part4.setSelectedOption(patch.patch_idx_part4 + 2);
      }
      else
      {
         cm_patch_nr_part2.setSelectedOption(0/*keep*/);
         cm_patch_nr_part3.setSelectedOption(0/*keep*/);
         cm_patch_nr_part4.setSelectedOption(0/*keep*/);
      }

      updateMultiPartPatchEnable();

      // Update params from patch data
      Buffer pd <= patch.patch_data;
      MIDISynthProfileCtlAlias *alias;
      int widgetIdx = 0;
      foreach alias in param_widget_aliases
      {
         Layer l <= param_widgets.get(widgetIdx);
         updateParamWidgetFromPatchData(pd, l, alias);

         // Next param / widget
         widgetIdx++;
      }

      if(_bFX)
         updateUIFX();

      if(_bFMMatrix)
         updateFMMatrix();

      redraw();
   }

   // <ui_update.png>
   public method updateUIFromPatch() {
      updateUIFromPatchEx(true/*bFX*/, true/*bFMMatrix*/);
   }

   // <ui_update.png>
   protected method updateMultiPartPatchEnable() {
      if(null != multi_patch)
      {
         switch(multi_patch.multi_mode)
         {
            default:
               bt_multi_consecutive.setEditable(false);
               cm_patch_nr_part2.setEditable(false);
               cm_patch_nr_part3.setEditable(false);
               cm_patch_nr_part4.setEditable(false);
               break;

            case FS1R_Patch.MULTI_MODE_CH11:
            case FS1R_Patch.MULTI_MODE_CH12:
               bt_multi_consecutive.setEditable(true);
               cm_patch_nr_part2.setEditable(true);
               cm_patch_nr_part3.setEditable(false);
               cm_patch_nr_part4.setEditable(false);
               break;

            case FS1R_Patch.MULTI_MODE_CH111:
            case FS1R_Patch.MULTI_MODE_CH123:
               bt_multi_consecutive.setEditable(true);
               cm_patch_nr_part2.setEditable(true);
               cm_patch_nr_part3.setEditable(true);
               cm_patch_nr_part4.setEditable(false);
               break;

            case FS1R_Patch.MULTI_MODE_CH1111:
            case FS1R_Patch.MULTI_MODE_CH1234:
               bt_multi_consecutive.setEditable(true);
               cm_patch_nr_part2.setEditable(true);
               cm_patch_nr_part3.setEditable(true);
               cm_patch_nr_part4.setEditable(true);
               break;
         }
      }
      else
      {
         bt_multi_consecutive.setEditable(false);
         cm_patch_nr_part2.setEditable(false);
         cm_patch_nr_part3.setEditable(false);
         cm_patch_nr_part4.setEditable(false);
      }
   }

   // <ui_update.png>
   protected method updateUIFX() {
      byte fxType;

      cm_fx_mode.setSelectedOption(patch.fx_mode);

      // Reverb
      fxType = mathClampi(patch.fx_data.peekI8(0xA8-0x50), 0, 0x10);
      fx_reverb   .showParams(patch.fx_data, 0x50/*paramBase*/,
                              (0 == fxType) ? null : FS1R_Patch.reverb_params[fxType-1]
                              );

      cm_fx_reverb_type.setSelectedOption(patch.fx_data.peekI8(0xA8-0x50));
      fp_fx_reverb_pan.setValue(patch.fx_data.peekI8(0xA9-0x50) - 64);
      fp_fx_reverb_return.setValue(patch.fx_data.peekI8(0xAA-0x50));

      // Variation
      fxType = mathClampi(patch.fx_data.peekI8(0xAB-0x50), 0, 0x1C);
      fx_variation.showParams(patch.fx_data, 0x68/*paramBase*/,
                              (0 == fxType) ? null : FS1R_Patch.variation_params[fxType-1]
                              );

      cm_fx_variation_type.setSelectedOption(patch.fx_data.peekI8(0xAB-0x50));
      fp_fx_variation_pan.setValue(patch.fx_data.peekI8(0xAC-0x50) - 64);
      fp_fx_variation_return.setValue(patch.fx_data.peekI8(0xAD-0x50));
      fp_fx_variation_revsend.setValue(patch.fx_data.peekI8(0xAE-0x50));

      // Insertion
      fxType = mathClampi(patch.fx_data.peekI8(0xAF-0x50), 0, 0x28);
      fx_insertion.showParams(patch.fx_data, 0x108/*paramBase*/,
                              (0 == fxType) ? null : FS1R_Patch.insertion_params[fxType-1]
                              );

      cm_fx_insertion_type.setSelectedOption(patch.fx_data.peekI8(0xAF-0x50));
      fp_fx_insertion_pan.setValue(patch.fx_data.peekI8(0xB0-0x50) - 64);
      fp_fx_insertion_revsend.setValue(patch.fx_data.peekI8(0xB1-0x50));
      fp_fx_insertion_varsend.setValue(patch.fx_data.peekI8(0xB2-0x50));
      fp_fx_insertion_level.setValue(patch.fx_data.peekI8(0xB3-0x50));

      pn_fx.relayout();
      pn_fx.redraw();

      // EQ
      fp_fx_eq_low_freq .setValue (patch.fx_data.peekI8(0xB5-0x50));
      fp_fx_eq_low_gain .setValue((patch.fx_data.peekI8(0xB4-0x50))-64);
      fp_fx_eq_low_q    .setValue (patch.fx_data.peekI8(0xB6-0x50));
      cm_fx_eq_low_shape.setSelectedOption(patch.fx_data.peekI8(0xB7-0x50));

      fp_fx_eq_mid_freq.setValue (patch.fx_data.peekI8(0xB9-0x50));
      fp_fx_eq_mid_gain.setValue((patch.fx_data.peekI8(0xB8-0x50))-64);
      fp_fx_eq_mid_q   .setValue (patch.fx_data.peekI8(0xBA-0x50));

      fp_fx_eq_high_freq .setValue (patch.fx_data.peekI8(0xBC-0x50));
      fp_fx_eq_high_gain .setValue((patch.fx_data.peekI8(0xBB-0x50))-64);
      fp_fx_eq_high_q    .setValue (patch.fx_data.peekI8(0xBD-0x50));
      cm_fx_eq_high_shape.setSelectedOption(patch.fx_data.peekI8(0xBE-0x50));
   }

   // <ui_handle.png>
   protected method handleFXModeChanged() {
      patch.fx_mode = cm_fx_mode.getSelectedOption();
      Global.PrintFast("FX Mode is "+cm_fx_mode.getSelectedOptionName());

      if(false != data.b_autosend)
      {
         // Turn FX on or off
         force_send_all_diff_mask |= 1;  // force resend FX
         scheduleMIDISendPatch();
      }
   }

   // <midi.png>
   protected method queryPerfData() : boolean {
      int ms = milliSeconds();
      int dt = (ms - last_perf_ms);
      last_perf_ms = ms;
      if( dt > 10000 )
      {
         // Request performance (409 bytes w/o F0..F7)
         local Buffer req;
         req.size = 8;
         fs1rRequestBytes3(req, 0x10, 0x00, 0x00);
         out_dev.addBuffer(req);
         out_dev.send(milliSeconds());

         if(waitForSysEx())
         {
            Global.Debug2("FS1R: recv'd PERF sysex buffer ("+sysex_buffer.size+" bytes):");

            if(sysex_buffer.size == 409)
            {
               if(0 == last_perf.size)
               {
                  last_perf.size = 400;
                  last_perf.byteOrder = YAC_BIG_ENDIAN;
               }

               if(fs1rDecodeData(sysex_buffer, last_perf))  // => 400 bytes
               {
                  if(b_debug)
                  {
                     Utils.HexDump(last_perf, 0, last_perf.offset);
                  }
                  return true;
               }
            }
         }
         return false;
      }
      else
      {
         // Use cached result
         return true;
      }
   }

   // <ui_handle.png>
   protected method handleFXReverbQuery() : boolean {
      if(queryPerfData())
      {
         Buffer fx <= patch.fx_data;
         fx.pokeI8(0xA8-0x50, last_perf.peekI8(0xa8)); // type
         fx.pokeI8(0xA9-0x50, last_perf.peekI8(0xa9)); // pan
         fx.pokeI8(0xAA-0x50, last_perf.peekI8(0xaa)); // return
         fx.offset = 0;
         fx.writeBuffer(last_perf, 0x50, 0x18);
         updateUIFX();
         Global.Success("Received Reverb FX settings");
         return true;
      }
      else
      {
         Global.Error("Failed to query Reverb FX settings");
         return false;
      }
   }

   // <ui_handle.png>
   protected method handleFXReverbInit() {
      int val = patch.fx_data.peekI8(0xA8-0x50);
      fs1rSendParam3(0,   0x10, 0x01, 0x28);
      fs1rSendParam3(val, 0x10, 0x01, 0x28);
      if(handleFXReverbQuery())
      {
         Global.Print("Load Reverb FX defaults");
      }
   }

   // <ui_handle.png>
   protected method handleFXVariationQuery() : boolean {
      if(queryPerfData())
      {
         Buffer fx <= patch.fx_data;
         fx.pokeI8(0xAB-0x50, last_perf.peekI8(0xAB)); // type
         fx.pokeI8(0xAC-0x50, last_perf.peekI8(0xAC)); // pan
         fx.pokeI8(0xAD-0x50, last_perf.peekI8(0xAD)); // return
         fx.pokeI8(0xAE-0x50, last_perf.peekI8(0xAE)); // reverb send
         fx.offset = 0x18;
         fx.writeBuffer(last_perf, 0x68, 0x20);
         updateUIFX();
         Global.Success("Received Variation FX settings");
         return true;
      }
      else
      {
         Global.Error("Failed to query Variation FX settings");
         return false;
      }
   }

   // <ui_handle.png>
   protected method handleFXVariationInit() {
      int val = patch.fx_data.peekI8(0xAB-0x50);
      fs1rSendParam3(0,   0x10, 0x01, 0x2B);
      fs1rSendParam3(val, 0x10, 0x01, 0x2B);
      if(handleFXVariationQuery())
      {
         Global.Print("Load Variation FX defaults");
      }
   }

   // <ui_handle.png>
   protected method handleFXInsertionQuery() : boolean {
      if(queryPerfData())
      {
         Buffer fx <= patch.fx_data;
         fx.pokeI8(0xAF-0x50, last_perf.peekI8(0xAF)); // type
         fx.pokeI8(0xB0-0x50, last_perf.peekI8(0xB0)); // pan
         fx.pokeI8(0xB1-0x50, last_perf.peekI8(0xB1)); // reverb send
         fx.pokeI8(0xB2-0x50, last_perf.peekI8(0xB2)); // var send
         fx.pokeI8(0xB3-0x50, last_perf.peekI8(0xB3)); // dry level
         fx.offset = 0x38;
         fx.writeBuffer(last_perf, 0x88, 0x20);
         updateUIFX();
         Global.Success("Received Insertion FX settings");
         return true;
      }
      else
      {
         Global.Error("Failed to query Insertion FX settings");
         return false;
      }
   }

   // <ui_handle.png>
   protected method handleFXInsertionInit() {
      int val = patch.fx_data.peekI8(0xAF-0x50);
      fs1rSendParam3(0,   0x10, 0x01, 0x2F);
      fs1rSendParam3(val, 0x10, 0x01, 0x2F);
      if(handleFXInsertionQuery())
      {
         Global.Print("Load Insertion FX defaults");
      }
   }

   // <ui_handle.png>
   protected method handleFXEQQuery() : boolean {
      if(queryPerfData())
      {
         Buffer fx <= patch.fx_data;
         fx.offset = 0xB4 - 0x50;
         fx.writeBuffer(last_perf, 0xB4, 0xB);
         updateUIFX();
         Global.Success("Received EQ FX settings");
         return true;
      }
      else
      {
         Global.Error("Failed to query EQ FX settings");
         return false;
      }
   }

   // <ui_handle.png>
   protected method handleFXReverbTypeChanged() {
      int val = cm_fx_reverb_type.getSelectedOption();
      _= patch.fx_data.pokeI8(0xA8-0x50, val);
      Global.PrintFast("FX Reverb Type is "+cm_fx_reverb_type.getSelectedOptionName());
      updateUIFX();
      // // fs1rSendParam3(val, 0x10, 0x01, 0x28);
      emitFXDiff(null/*fr*/, patch, true/*bForceSendAll*/,
                 true/*bRev*/, false/*bVar*/, false/*bIns*/, false/*bOther*/
                 );
   }

   // <ui_handle.png>
   protected method handleFXReverbPanChanged() {
      int val = fp_fx_reverb_pan.getFloatValue() + 64;
      _= patch.fx_data.pokeI8(0xA9-0x50, val);
      Global.PrintFast("FX Reverb Pan is "+val);
      fs1rSendParam3(val, 0x10, 0x01, 0x29);
   }

   // <ui_handle.png>
   protected method handleFXReverbReturnChanged() {
      int val = fp_fx_reverb_return.getFloatValue();
      _= patch.fx_data.pokeI8(0xAA-0x50, val);
      Global.PrintFast("FX Reverb Return is "+val);
      fs1rSendParam3(val, 0x10, 0x01, 0x2A);
   }

   // <ui_handle.png>
   protected method handleFXVariationTypeChanged() {
      int val = cm_fx_variation_type.getSelectedOption();
      _= patch.fx_data.pokeI8(0xAB-0x50, val);
      Global.PrintFast("FX Variation Type is "+cm_fx_variation_type.getSelectedOptionName());
      updateUIFX();
      // // fs1rSendParam3(val, 0x10, 0x01, 0x2B);
      emitFXDiff(null/*fr*/, patch, true/*bForceSendAll*/,
                 false/*bRev*/, true/*bVar*/, false/*bIns*/, false/*bOther*/
                 );
   }

   // <ui_handle.png>
   protected method handleFXVariationPanChanged() {
      int val = fp_fx_variation_pan.getFloatValue() + 64;
      _= patch.fx_data.pokeI8(0xAC-0x50, val);
      Global.PrintFast("FX Variation Pan is "+val);
      fs1rSendParam3(val, 0x10, 0x01, 0x2C);
   }

   // <ui_handle.png>
   protected method handleFXVariationReturnChanged() {
      int val = fp_fx_variation_return.getFloatValue();
      _= patch.fx_data.pokeI8(0xAD-0x50, val);
      Global.PrintFast("FX Variation Return is "+val);
      fs1rSendParam3(val, 0x10, 0x01, 0x2D);
   }

   // <ui_handle.png>
   protected method handleFXVariationRevSendChanged() {
      int val = fp_fx_variation_revsend.getFloatValue();
      _= patch.fx_data.pokeI8(0xAE-0x50, val);
      Global.PrintFast("FX Variation Reverb Send is "+val);
      fs1rSendParam3(val, 0x10, 0x01, 0x2E);
   }

   // <ui_handle.png>
   protected method handleFXInsertionTypeChanged() {
      int val = cm_fx_insertion_type.getSelectedOption();
      _= patch.fx_data.pokeI8(0xAF-0x50, val);
      Global.PrintFast("FX Insertion Type is "+cm_fx_insertion_type.getSelectedOptionName());
      updateUIFX();
      // // fs1rSendParam3(val, 0x10, 0x01, 0x2F);
      emitFXDiff(null/*fr*/, patch, true/*bForceSendAll*/,
                 false/*bRev*/, false/*bVar*/, true/*bIns*/, false/*bOther*/
                 );
   }

   // <ui_handle.png>
   protected method handleFXInsertionPanChanged() {
      int val = fp_fx_insertion_pan.getFloatValue() + 64;
      _= patch.fx_data.pokeI8(0xB0-0x50, val);
      Global.PrintFast("FX Insertion Pan is "+val);
      fs1rSendParam3(val, 0x10, 0x01, 0x30);
   }

   // <ui_handle.png>
   protected method handleFXInsertionRevSendChanged() {
      int val = fp_fx_insertion_revsend.getFloatValue();
      _= patch.fx_data.pokeI8(0xB1-0x50, val);
      Global.PrintFast("FX Insertion Reverb Send is "+val);
      fs1rSendParam3(val, 0x10, 0x01, 0x31);
   }

   // <ui_handle.png>
   protected method handleFXInsertionVarSendChanged() {
      int val = fp_fx_insertion_varsend.getFloatValue();
      _= patch.fx_data.pokeI8(0xB2-0x50, val);
      Global.PrintFast("FX Insertion Variation Send is "+val);
      fs1rSendParam3(val, 0x10, 0x01, 0x32);
   }

   // <ui_handle.png>
   protected method handleFXInsertionLevelChanged() {
      int val = fp_fx_insertion_level.getFloatValue();
      _= patch.fx_data.pokeI8(0xB3-0x50, val);
      Global.PrintFast("FX Insertion Dry Level is "+val);
      fs1rSendParam3(val, 0x10, 0x01, 0x33);
   }

   // <ui_handle.png>
   public method handleFXEQLowFreqChanged() {
      int val = fp_fx_eq_low_freq.getFloatValue();
      _= patch.fx_data.pokeI8(0xB5-0x50, val);
      Global.PrintFast("FX EQ Low Freq is "+val);
      emitFXDiff(null/*fr*/, patch, false/*bForceSendAll*/,
                 false/*bRev*/, false/*bVar*/, false/*bIns*/, true/*bOther*/
                 );
   }

   // <ui_handle.png>
   public method handleFXEQLowGainChanged() {
      int val = fp_fx_eq_low_gain.getFloatValue() + 64;
      _= patch.fx_data.pokeI8(0xB4-0x50, val);
      Global.PrintFast("FX EQ Low Gain is "+val);
      emitFXDiff(null/*fr*/, patch, false/*bForceSendAll*/,
                 false/*bRev*/, false/*bVar*/, false/*bIns*/, true/*bOther*/
                 );
   }

   // <ui_handle.png>
   public method handleFXEQLowQChanged() {
      int val = fp_fx_eq_low_q.getFloatValue();
      _= patch.fx_data.pokeI8(0xB6-0x50, val);
      Global.PrintFast("FX EQ Low Q is "+val);
      emitFXDiff(null/*fr*/, patch, false/*bForceSendAll*/,
                 false/*bRev*/, false/*bVar*/, false/*bIns*/, true/*bOther*/
                 );
   }

   // <ui_handle.png>
   public method handleFXEQLowShapeChanged() {
      int val = cm_fx_eq_low_shape.getSelectedOption();
      _= patch.fx_data.pokeI8(0xB7-0x50, val);
      Global.PrintFast("FX EQ Low Shape is "+cm_fx_eq_low_shape.getSelectedOptionName());
      emitFXDiff(null/*fr*/, patch, false/*bForceSendAll*/,
                 false/*bRev*/, false/*bVar*/, false/*bIns*/, true/*bOther*/
                 );
   }

   // <ui_handle.png>
   public method handleFXEQMidFreqChanged() {
      int val = fp_fx_eq_mid_freq.getFloatValue();
      _= patch.fx_data.pokeI8(0xB9-0x50, val);
      Global.PrintFast("FX EQ Mid Freq is "+val);
      emitFXDiff(null/*fr*/, patch, false/*bForceSendAll*/,
                 false/*bRev*/, false/*bVar*/, false/*bIns*/, true/*bOther*/
                 );
   }

   // <ui_handle.png>
   public method handleFXEQMidGainChanged() {
      int val = fp_fx_eq_mid_gain.getFloatValue() + 64;
      _= patch.fx_data.pokeI8(0xB8-0x50, val);
      Global.PrintFast("FX EQ Mid Gain is "+val);
      emitFXDiff(null/*fr*/, patch, false/*bForceSendAll*/,
                 false/*bRev*/, false/*bVar*/, false/*bIns*/, true/*bOther*/
                 );
   }

   // <ui_handle.png>
   public method handleFXEQMidQChanged() {
      int val = fp_fx_eq_mid_q.getFloatValue();
      _= patch.fx_data.pokeI8(0xBA-0x50, val);
      Global.PrintFast("FX EQ Mid Q is "+val);
      emitFXDiff(null/*fr*/, patch, false/*bForceSendAll*/,
                 false/*bRev*/, false/*bVar*/, false/*bIns*/, true/*bOther*/
                 );
   }

   // <ui_handle.png>
   public method handleFXEQHighFreqChanged() {
      int val = fp_fx_eq_high_freq.getFloatValue();
      _= patch.fx_data.pokeI8(0xBC-0x50, val);
      Global.PrintFast("FX EQ High Freq is "+val);
      emitFXDiff(null/*fr*/, patch, false/*bForceSendAll*/,
                 false/*bRev*/, false/*bVar*/, false/*bIns*/, true/*bOther*/
                 );
   }

   // <ui_handle.png>
   public method handleFXEQHighGainChanged() {
      int val = fp_fx_eq_high_gain.getFloatValue() + 64;
      _= patch.fx_data.pokeI8(0xBB-0x50, val);
      Global.PrintFast("FX EQ High Gain is "+val);
      emitFXDiff(null/*fr*/, patch, false/*bForceSendAll*/,
                 false/*bRev*/, false/*bVar*/, false/*bIns*/, true/*bOther*/
                 );
   }

   // <ui_handle.png>
   public method handleFXEQHighQChanged() {
      int val = fp_fx_eq_high_q.getFloatValue();
      _= patch.fx_data.pokeI8(0xBD-0x50, val);
      Global.PrintFast("FX EQ High Q is "+val);
      emitFXDiff(null/*fr*/, patch, false/*bForceSendAll*/,
                 false/*bRev*/, false/*bVar*/, false/*bIns*/, true/*bOther*/
                 );
   }

   // <ui_handle.png>
   public method handleFXEQHighShapeChanged() {
      int val = cm_fx_eq_high_shape.getSelectedOption();
      _= patch.fx_data.pokeI8(0xB5-0x50, val);
      Global.PrintFast("FX EQ High Shape is "+cm_fx_eq_high_shape.getSelectedOptionName());
      emitFXDiff(null/*fr*/, patch, false/*bForceSendAll*/,
                 false/*bRev*/, false/*bVar*/, false/*bIns*/, true/*bOther*/
                 );
   }

   // <ui_update.png>
   protected method updateParamWidgetFromPatchData(Buffer pd, Layer l, MIDISynthProfileCtlAlias alias) {
      int ival;

      if(l instanceof ComboBox)
      {
         ComboBox cm <= l;

         ival = pd.peekI8(alias.syx_off);

         if(alias.syx_bit_num > 0)
         {
            ival = (ival >> alias.syx_bit_off) & ((1 << alias.syx_bit_num)-1);
         }

         ival -= alias.min;

         if(alias.syx_off_lo <= 0)
            ival = (ival - alias.bias) & 127;

         cm.setSelectedOption(ival);
      }
      else if(l instanceof FloatParam)
      {
         FloatParam fp <= l;
         int ivalMSB;
         int ivalLSB;

         if(alias.syx_off_lo > 0)
         {
            ivalMSB = pd.peekI8(alias.syx_off);
            ivalLSB = pd.peekI8(alias.nr_lo_alias.syx_off);

            // Full 14bit range
            ival = (ivalMSB << 7) | ivalLSB;
         }
         else
         {
            ival = pd.peekI8(alias.syx_off);

            if(alias.syx_bit_num > 0)
            {
               ival = (ival >> alias.syx_bit_off) & ((1 << alias.syx_bit_num)-1);
            }
         }

         if(alias.syx_off_lo <= 0)
            ival = (ival - alias.bias);  //  & 127

         switch(alias.cel_range)
         {
            default:
               break;

            case NT_CEL.RANGE_M128_P127:
               ival -= 128;
               break;

            case NT_CEL.RANGE_M64_P63:
               ival -= 64;
               break;
         }

         fp.setValue(ival);
      }
      else if(l instanceof CheckBox)
      {
         CheckBox cb <= l;

         ival = pd.peekI8(alias.syx_off);

         if(alias.syx_bit_num > 0)
         {
            ival = (ival >> alias.syx_bit_off) & ((1 << alias.syx_bit_num)-1);
         }

         cb.setSelected(ival > 0);
      }
   }

   // <ui_update.png>
   protected method updateUIAndPatchDataFromMIDIEvent(MIDIMapEvent ev) : boolean {
      MIDISynthProfileCtlAlias *alias;
      int widgetIdx = 0;
      int ival = ev.arg1;  // 7bit CC value or 14bit NRPN value
      Buffer pd <= patch.patch_data;
      foreach alias in param_widget_aliases
      {
         boolean bMatch = false;
         if(alias.type == ev.type)
         {
            if(MIDIMapEventType.TYPE_CC == ev.type)
            {
               if(alias.nr_lo > 0)
               {
                  if(alias.nr_lo == ev.ext_type)
                  {
                     // LSB changed
                     bMatch = true;
                     pd.pokeI8(alias.syx_off_lo, ival);
                  }
                  else if(alias.nr == ev.ext_type)
                  {
                     // MSB or single byte param changed
                     bMatch = true;
                     pd.pokeI8(alias.syx_off, ival);
                  }
               }
               else if(alias.nr == ev.ext_type)
               {
                  // Single byte param changed
                  bMatch = true;
                  pd.pokeI8(alias.syx_off, ival);
               }
            }
            else if(MIDIMapEventType.TYPE_NRPN == ev.type)
            {
               if(alias.nr == ev.ext_type)
               {
                  if(alias.syx_off_lo > 0)
                  {
                     // Multi byte param changed (MSB+LSB)
                     pd.pokeI8(alias.syx_off, ival >> 7);
                     pd.pokeI8(alias.syx_off_lo, ival & 127);
                     bMatch = true;
                  }
                  else
                  {
                     // Single byte param changed
                     pd.pokeI8(alias.syx_off, ival);
                     bMatch = true;
                  }
               }
            }
         }

         if(bMatch)
         {
            Layer l <= param_widgets.get(widgetIdx);
            // trace "xxx bMatch, widgetIdx="+widgetIdx+" l="+#(l);
            updateParamWidgetFromPatchData(pd, l, alias);
            l.redraw();
            return true;
         }

         widgetIdx++;

      } // foreach alias
      return false;
   }

   // <ui_update.png>
   protected method updatePartButtons() {
      int idx = 0;
      loop(4)
      {
         Button bt <= part_buttons[idx];
         if(idx == data.current_part_idx)
         {
            bt.setToggleState(true);
            if(data.b_solo_part)
               bt.setBackgroundTint(#b0ffff00);
            else
               bt.setBackgroundTint(0);

            // // bt.setBackgroundTint(#20c3ff82);  // (todo) move color AppLookAndFeel
         }
         else
         {
            bt.setToggleState(false);
            bt.setBackgroundTint(0);
            // // bt.setBackgroundTint(#10000000);
         }
         idx++;
      }
   }

   // <ui_handle.png>
   public method selectPart(int _partIdx, boolean _bAllowSolo, boolean _bQuiet) {
      boolean bSoloChanged = false;
      if(_partIdx == data.current_part_idx)
      {
         data.b_solo_part = !data.b_solo_part;
         bSoloChanged = true;
         switch(_partIdx)
         {
            case 0: bt_part1.setToggleState(true); break;
            case 1: bt_part2.setToggleState(true); break;
            case 2: bt_part3.setToggleState(true); break;
            case 3: bt_part4.setToggleState(true); break;
         }
      }
      else
      {
         data.current_part_idx = _partIdx;
         bSoloChanged = data.b_solo_part;

         Global.Debug2("FS1R::selectPart: data.part_patch_nr="+#(data.part_patch_nr));
         cm_patch_nr.setSelectedOption(mathMaxi(0, data.part_patch_nr[_partIdx]));
         handlePatchNrChanged(false/*bMIDIFollow*/, false/*bAllowAutosend*/, false/*bAllowMultiChange*/);
      }

      updatePartButtons();

      if(bSoloChanged)
      {
         if(false != data.b_autosend)
         {
            scheduleMIDISendPatch();
         }
      }

      if(!_bQuiet)
         Global.Print("Select part "+(_partIdx+1)+(data.b_solo_part?" (solo)":""));
   }

   // <ui_handle.png>
   protected method selectPartDelta(int _delta) {
      selectPart(mathWrapi(data.current_part_idx + _delta, 0, 4), false/*bAllowSolo*/, false/*bQuiet*/);
   }

   // <ui_handle.png>
   protected method handlePatchAutosendChanged() {
      data.b_autosend = cb_patch_autosend.isSelected();
      Global.PrintFast("Autosend is "+((maybe == data.b_autosend) ? " enabled (when patch is selected)" : Utils.GetEnableString(data.b_autosend)));

      clearMIDICache();

      if(true == data.b_autosend)
      {
         scheduleMIDISendPatch();
      }
   }

   // <ui_handle.png>
   protected method handlePatchDiffChanged() {
      data.b_send_diff = cb_patch_diff.isSelected();
      Global.Print("Send "+(data.b_send_diff ? "patch differences" : "entire patch"));

      clearMIDICache();

      if(false == data.b_send_diff)
      {
         scheduleMIDISendPatch();
      }
      else
      {
         force_send_all_diff_mask = 0b1111;
      }
   }

   // <ui_handle.png>
   protected method handlePatchSendMultiChanged() {
      data.b_send_multi = cb_patch_sendmulti.isSelected();
      Global.PrintFast("Send-multi is "+Utils.GetEnableString(data.b_send_multi));

      clearMIDICache();

      if(true == data.b_send_multi)
      {
         force_send_all_diff_mask = 0b1111;
         scheduleMIDISendPatch();
      }
   }

   // <ui_handle.png>
   protected method handlePatchMultiChanged() {
      patch.multi_mode = cm_patch_multi.getSelectedOption();
      Global.PrintFast("Multi-part patch mode is "+cm_patch_multi.getSelectedOptionName());

      updateMultiPatch();

      rebuildPatchNames();
      updateMultiPartPatchEnable();

      if(FS1R_Patch.MULTI_MODE_OFF != patch.multi_mode)
      {
         scheduleMIDISendPatch();
      }
   }

   // <ui_handle.png>
   protected method handlePatchMultiConsecutive(boolean _bRename) {
      int numParts = 1;
      if(null != multi_patch)
      {
         int patchIdx = data.patches.indexOfPointer(multi_patch, 0);

         switch(multi_patch.multi_mode)
         {
            default:
               cm_patch_nr_part2.setSelectedOption(0/*keep*/);
               cm_patch_nr_part3.setSelectedOption(0/*keep*/);
               cm_patch_nr_part4.setSelectedOption(0/*keep*/);
               numParts = 1;
               break;

            case FS1R_Patch.MULTI_MODE_CH11:
            case FS1R_Patch.MULTI_MODE_CH12:
               cm_patch_nr_part2.setSelectedOption(patchIdx + 1 + 2);
               cm_patch_nr_part3.setSelectedOption(0/*keep*/);
               cm_patch_nr_part4.setSelectedOption(0/*keep*/);
               numParts = 2;
               break;

            case FS1R_Patch.MULTI_MODE_CH111:
            case FS1R_Patch.MULTI_MODE_CH123:
               cm_patch_nr_part2.setSelectedOption(patchIdx + 1 + 2);
               cm_patch_nr_part3.setSelectedOption(patchIdx + 2 + 2);
               cm_patch_nr_part4.setSelectedOption(0/*keep*/);
               numParts = 3;
               break;

            case FS1R_Patch.MULTI_MODE_CH1111:
            case FS1R_Patch.MULTI_MODE_CH1234:
               cm_patch_nr_part2.setSelectedOption(patchIdx + 1 + 2);
               cm_patch_nr_part3.setSelectedOption(patchIdx + 2 + 2);
               cm_patch_nr_part4.setSelectedOption(patchIdx + 3 + 2);
               numParts = 4;
               break;
         }
      }
      else
      {
         cm_patch_nr_part2.setSelectedOption(0/*keep*/);
         cm_patch_nr_part3.setSelectedOption(0/*keep*/);
         cm_patch_nr_part4.setSelectedOption(0/*keep*/);
         numParts = 1;
      }

      handlePatchNrPart2Changed();
      handlePatchNrPart3Changed();
      handlePatchNrPart4Changed();

      if(_bRename)
      {
         int partIdx = 0;
         local String pBaseName;
         loop(numParts)
         {
            FS1R_Patch p <= getPatchByPartIdx(partIdx);
            // trace "xxx partIdx="+partIdx+" p="+#(p);
            if(partIdx > 0)
               p.multi_mode = FS1R_Patch.MULTI_MODE_OFF;
            else
            {
               pBaseName = p.patch_name;
               int suffixNr = 1;
               loop(4)
               {
                  int idx = pBaseName.lastIndexOf(" p"+suffixNr);
                  if(-1 != idx)
                     pBaseName.substring(0, idx);
                  suffixNr++;
               }
            }
            if(null != p)
            {
               String pName <= p.patch_name;
               // trace "xx partIdx="+partIdx+" p.patch_name=\""+p.patch_name+"\"";
               if( !(pName >= "p"+(partIdx+1)) || !(pName <= pBaseName) )
                  pName = pBaseName+" p"+(partIdx+1);
            }
            partIdx++;
         }
         rebuildPatchNames();
      }

      Global.Print("Select "+(_bRename?"and rename ":"")+numParts+" consecutive multi-patch part"+Utils.GetPluralString(numParts));
   }

   // <ui_handle.png>
   protected method handlePatchNrPart2Changed() {
      patch.patch_idx_part2 = cm_patch_nr_part2.getSelectedOption() - 2;
      if(patch.patch_idx_part2 >= 0)
      {
         data.part_patch_nr.set(1, patch.patch_idx_part2);

         if(1 == data.current_part_idx)
            selectPart(1, false/*bAllowSolo*/, true/*bQuiet*/);  // update widgets and send patch

         Global.PrintFast("Part 2 patch is "+cm_patch_nr_part2.getSelectedOptionName());

         if(1 != data.current_part_idx)
         {
            if((FS1R_Patch.MULTI_MODE_OFF != patch.multi_mode) && data.b_send_multi)
            {
               // (todo) send only part2
               scheduleMIDISendPatch();
            }
         }
      }
      else if(-1 == patch.patch_idx_part2)
      {
         if((FS1R_Patch.MULTI_MODE_OFF != patch.multi_mode) && data.b_send_multi)
         {
            // (todo) disable part2
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatchNrPart3Changed() {
      patch.patch_idx_part3 = cm_patch_nr_part3.getSelectedOption() - 2;
      data.part_patch_nr.set(2, patch.patch_idx_part3);
      if(patch.patch_idx_part3 >= 0)
      {
         if(2 == data.current_part_idx)
            selectPart(2, false/*bAllowSolo*/, true/*bQuiet*/);  // update widgets

         Global.PrintFast("Part 3 patch is "+cm_patch_nr_part3.getSelectedOptionName());

         if(2 != data.current_part_idx)
         {
            if((FS1R_Patch.MULTI_MODE_OFF != patch.multi_mode) && data.b_send_multi)
            {
               // (todo) send only part3
               scheduleMIDISendPatch();
            }
         }
      }
      else if(-1 == patch.patch_idx_part3)
      {
         if((FS1R_Patch.MULTI_MODE_OFF != patch.multi_mode) && data.b_send_multi)
         {
            // (todo) disable part3
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatchNrPart4Changed() {
      patch.patch_idx_part4 = cm_patch_nr_part4.getSelectedOption() - 2;
      data.part_patch_nr.set(3, patch.patch_idx_part4);
      if(patch.patch_idx_part4 >= 0)
      {
         if(3 == data.current_part_idx)
            selectPart(3, false/*bAllowSolo*/, true/*bQuiet*/);  // update widgets

         Global.PrintFast("Part 4 patch is "+cm_patch_nr_part4.getSelectedOptionName());

         if(3 != data.current_part_idx)
         {
            if((FS1R_Patch.MULTI_MODE_OFF != patch.multi_mode) && data.b_send_multi)
            {
               // (todo) send only part4
               scheduleMIDISendPatch();
            }
         }
      }
      else if(-1 == patch.patch_idx_part4)
      {
         if((FS1R_Patch.MULTI_MODE_OFF != patch.multi_mode) && data.b_send_multi)
         {
            // (todo) disable part4
         }
      }
   }

   // <ui_handle.png>
   protected method handleGoToNextBank() {
      cm_patch_nr.setSelectedOption(  (((data.current_patch_nr/128)+1)%MIDISynthProfileDataFS1R.NUM_BANKS)*128 );
      handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/, true/*bAllowMultiChange*/);
   }

   // <ui_handle.png>
   protected method handleGoToFirstProjectPatch() {
      cm_patch_nr.setSelectedOption(MIDISynthProfileDataFS1R.PROJECT_BANK_IDX*128);
      handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/, true/*bAllowMultiChange*/);
      Global.Print("Select first project-specific patch (P001)");
   }

   // <ui_handle.png>
   public method selectNextPatch() {
      cm_patch_nr.setSelectedOption(mathWrapi(data.current_patch_nr+1, 0, MIDISynthProfileDataFS1R.NUM_PATCHES));
      handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/, true/*bAllowMultiChange*/);
   }

   // <ui_handle.png>
   public method selectPreviousPatch() {
      cm_patch_nr.setSelectedOption(mathWrapi(data.current_patch_nr-1, 0, MIDISynthProfileDataFS1R.NUM_PATCHES));
      handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/, true/*bAllowMultiChange*/);
   }

   // <method_get.png>
   public method getMainPatch() : FS1R_Patch {
      if(null != multi_patch)
         return multi_patch;
      else
         return patch;
   }

   // <method_get.png>
   public method getPatchDataByPatchIdx(byte _patchIdx) : Buffer {
      FS1R_Patch p <= data.patches.get(_patchIdx);
      if(null != p)
         return p.patch_data;
      return null;
   }

   // <method_get.png>
   public method getPatchByPartIdx(byte _partIdx) : FS1R_Patch {
      // (note) caller must check that part is valid
      FS1R_Patch pMain <= getMainPatch();
      switch(_partIdx)
      {
         default:
         case 0:
            return pMain;

         case 1:
            return data.patches.get(pMain.patch_idx_part2);

         case 2:
            return data.patches.get(pMain.patch_idx_part3);

         case 3:
            return data.patches.get(pMain.patch_idx_part4);
      }
      return null;
   }

   // <method_get.png>
   public method getPatchDataByPartIdx(byte _partIdx) : Buffer {
      FS1R_Patch pMain <= getMainPatch();
      switch(_partIdx)
      {
         default:
         case 0:
            return pMain.patch_data;

         case 1:
            return getPatchDataByPatchIdx(pMain.patch_idx_part2);

         case 2:
            return getPatchDataByPatchIdx(pMain.patch_idx_part3);

         case 3:
            return getPatchDataByPatchIdx(pMain.patch_idx_part4);
      }
      return null;
   }

   // <ui_update.png>
   protected method updateMultiPatch() {
      if(patch.multi_mode > FS1R_Patch.MULTI_MODE_CH1)
      {
         multi_patch <= patch;
         // trace "xxx update multi_patch to \""+multi_patch.patch_name;
      }
      else
      {
         multi_patch <= null;
      }

      data.current_part_idx = 0;
      data.opv_mute_mask = 0;
      data.opn_mute_mask = 0;
      data.b_solo_opv = false;
      data.b_solo_part = false;
      updatePartButtons();
   }

   // <ui_handle.png>
   module =replay= method handlePatchNrChanged(boolean _bMIDIFollow, boolean _bAllowAutosend, boolean _bAllowMultiChange) {

      data.current_patch_nr = cm_patch_nr.getSelectedOption();
      // // data.part_patch_nr.set(data.current_part_idx, data.current_patch_nr);
      patch <= data.patches.get(data.current_patch_nr);

      if(_bAllowMultiChange)
      {
         updateMultiPatch();
      }

      // // if((0 == data.current_part_idx) && (patch.multi_mode != FS1R_Patch.MULTI_MODE_OFF))
      if(null != multi_patch)
      {
         // trace "xxx handlePatchNrChanged: multi_patch.patch_name=\""+multi_patch.patch_name+"\"";
         data.part_patch_nr.set(0, data.patches.indexOfPointer(multi_patch, 0));

         if(patch.patch_idx_part2 >= 0)
            data.part_patch_nr.set(1, multi_patch.patch_idx_part2);

         if(patch.patch_idx_part3 >= 0)
            data.part_patch_nr.set(2, multi_patch.patch_idx_part3);

         if(patch.patch_idx_part4 >= 0)
            data.part_patch_nr.set(3, multi_patch.patch_idx_part4);
      }

      proxy_bank    = data.current_patch_nr / 128;
      proxy_program = data.current_patch_nr & 127;

      updateUIFromPatch();

      if(_bAllowAutosend)
      {
         if(false != data.b_autosend)
         {
            scheduleMIDISendPatch();
         }
      }

      printCurrentPatchNrInfo(data.current_patch_nr, patch.patch_name);
   }

   // <method.png>
   public virtual handlePostReload() {

      clearMIDICache();

      if(data.b_autosend)
      {
         // trace "xxx reload: call handlePatchNrChanged()";
         force_send_all_diff_mask = 0b1111;
         // // // b_force_send_all_diff = true;
         handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/, true/*bAllowMultiChange*/);
      }

   }

   // <ui_handle.png>
   protected method handlePatchNameChanged() {
      patch.setPatchName(tf_patch_name.getText().trim());

      rebuildPatchNames();

      // updatePatchNameLabel();

      Global.Print("Patch name is \""+patch.patch_name+"\"");
   }

   // <ui_handle.png>
   protected method handlePatchCategoryChanged() {
      patch.patch_category = cm_patch_category.getSelectedOption();

      cm_find_category.setSelectedOption(patch.patch_category + 1);
      cm_find_category.redraw();

      Global.Print("Patch category is \""+cm_patch_category.getSelectedOptionName()+"\"");

      rebuildPatchNames();
   }


   // <ui_handle.png>
   protected method handleFindCategoryChanged() {

      int catIdx = cm_find_category.getSelectedOption() - 1;

      int patchIdx = 0;
      int res = 0;

      loop(MIDISynthProfileDataFS1R.NUM_PATCHES)
      {
         FS1R_Patch p <= data.patches.get(patchIdx++);

         if( (-1 == catIdx) || (p.patch_category == catIdx) )
         {
            res++;
         }
      }

      Global.Print("Find category is \""+cm_find_category.getSelectedOptionName()+"\" ("+res+" patch(es))");
   }

   // <ui_handle.png>
   protected method handleFindCategoryPrev() {

      if(data.current_patch_nr > 0)
      {
         int patchIdx = data.current_patch_nr - 1;

         int catIdx = cm_find_category.getSelectedOption() - 1;

         local StringArray nameFilters;
         buildNameFiltersFromString(nameFilters, tf_find_name.getText());

         while(patchIdx >= 0)
         {
            FS1R_Patch p <= data.patches.get(patchIdx);

            if( (-1 == catIdx) || (p.patch_category == catIdx) )
            {
               if(matchNameFilters(p, nameFilters))
               {
                  cm_patch_nr.setSelectedOption(patchIdx);
                  handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/, true/*bAllowMultiChange*/);
                  return;
               }
            }

            patchIdx--;
         }
      }

   }

   // <ui_handle.png>
   protected method handleFindCategoryBrowse() {

      local StringArray midiPatchNames;
      StringArray midiPatchNamesCat;  // ref'd by ComboBoxPopup

      int fltCurPatchNr = buildFilteredPatchNames(midiPatchNames,
                                                  midiPatchNamesCat,
                                                  null/*fltPatchIndices*/,
                                                  cm_find_category.getSelectedOption() - 1,
                                                  tf_find_name.getText()
                                                  );

      if(midiPatchNamesCat.numElements > 0)
      {
         Global.Print("Found "+(midiPatchNamesCat.numElements)+" matching patches");

         cmp_find_catbrowse <= ComboBoxPopup.NewComboBoxPopup(this,
                                                              null/*fontOrNull*/,
                                                              midiPatchNamesCat,
                                                              null/*optionsLongOrNull*/,
                                                              fltCurPatchNr,
                                                              280*UI.font_scaling/*prefSx*/,
                                                              null/*toolTipCaptions*/,
                                                              null/*optionBGColors*/,
                                                              null/*option_fgtints*/
                                                              );

         cmp_find_catbrowse.showAboveLayer(bt_find_catbrowse);
         cmp_find_catbrowse.centerRow();
         cmp_find_catbrowse.focusFirstTabCycleMember();
      }
      else
      {
         Global.Print("No matching patches found");
      }
   }

   // <ui_handle.png>
   protected method handleFindCategoryBrowseOptionSelected(IntAction _ac) {
      int selOpt = _ac.getIntValue();

      if(-1 != selOpt)
      {
         local StringArray midiPatchNames;
         local StringArray midiPatchNamesCat;
         local IntArray fltPatchIndices;

         buildFilteredPatchNames(midiPatchNames,
                                 midiPatchNamesCat,
                                 fltPatchIndices,
                                 cm_find_category.getSelectedOption() - 1,
                                 tf_find_name.getText()
                                 );

         cm_patch_nr.setSelectedOption(fltPatchIndices.get(selOpt));
         cm_patch_nr.redraw();
         handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/, true/*bAllowMultiChange*/);
      }

      refocusDefault();
   }

   // <ui_handle.png>
   protected method handleFindCategoryNext() {

      if(data.current_patch_nr < MIDISynthProfileDataFS1R.NUM_PATCHES)
      {
         int patchIdx = data.current_patch_nr + 1;

         int catIdx = cm_find_category.getSelectedOption() - 1;

         local StringArray nameFilters;
         buildNameFiltersFromString(nameFilters, tf_find_name.getText());

         while(patchIdx < MIDISynthProfileDataFS1R.NUM_PATCHES)
         {
            FS1R_Patch p <= data.patches.get(patchIdx);

            if( (-1 == catIdx) || (p.patch_category == catIdx) )
            {
               if(matchNameFilters(p, nameFilters))
               {
                  cm_patch_nr.setSelectedOption(patchIdx);
                  handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/, true/*bAllowMultiChange*/);
                  return;
               }
            }

            patchIdx++;
         }
      }

   }

   // <ui_handle.png>
   public method handleAlgorithmChangedPost() {
      // called by FMMatrix::handleAlgorithmChanged()
      b_queued_send_filtersw_workaround = true;
      ta_periodic.reschedule();
   }

   // <ui_handle.png>
   protected method handleCopyFromReplayPatch() {
      patch.copyFrom(replay_patches[data.current_part_idx], true/*bCopyVoice*/, true/*bCopyFX*/);

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      updateUIFromPatch();

      Global.Print("Copy from replay patch");
   }

   // <ui_handle.png>
   protected method handleMultiCopyPatchesToProjectBank1() {
      dlg_multipatch.showPatches(this, data.current_patch_nr);
      Global.Print("Show MultiPatch dialog");
   }

   // <ui_handle.png>
   protected method handleMultiCopyPatchesToProjectBank2() {
      local IntArray patchIndices <= dlg_multipatch.getSelectedPatchIndices();
      int numPatches = patchIndices.numElements;
      int dstPrgIdx = dlg_multipatch.getDestinationProgramIndex();
      Global.Debug("FS1R::handleMultiCopyPatchesToProjectBank2: dstPrgIdx="+dstPrgIdx+" patchIndices="+#(patchIndices));
      if((numPatches + dstPrgIdx) <= 128)
      {
         int patchIdx = 0;
         int dstPatchIdx = dstPrgIdx + (num_programs_per_bank * MIDISynthProfileDataFS1R.PROJECT_BANK_IDX);

         loop(numPatches)
         {
            FS1R_Patch pSrc <= data.patches.get(patchIndices[patchIdx]);
            FS1R_Patch pDst <= data.patches.get(dstPatchIdx);

            pDst.copyFrom(pSrc, true/*bCopyVoice*/, true/*bCopyFX*/);

            patchIdx++;
            dstPatchIdx++;
         }

         updateUIFromPatch();
         Global.Print(numPatches+" "+Utils.GetPluralStringEx(numPatches, "patch", "pathches")+" copied to project bank");
      }
      else
      {
         Global.Error("Selected patches won't fit into project bank");
      }
   }

   // <ui_show.png>
   protected method showToolsMenu() {

      pm_tools <= PopupMenu.New(this);
      PopupMenuButton *pmb;
      PopupMenu pm <= pm_tools;

      pmb <= pm.addDefaultButton("Dump Patch-Data to Console", "dump_patch_to_con");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Multi-Copy Patches to Project Bank..", "multicopy");

      pm.addSeparator();
      pmb <= pm.addDefaultButton("Copy From Replay Patch", "copy_from_replay_patch");

      pm.resizeToMinimum();
      pm.showNearMouse(-30, 0);

      Global.Print("Show Tools menu.");
   }

   // <method.png>
   protected static CalcMuteString(String _s, int _mask) {
      int bit = 1;
      int nr = 1;
      loop(8)
      {
         if(_mask & bit)
            _s.append("-");
         else
            _s.append(String(nr));
         bit = (bit << 1);
         nr++;
      }
   }

   // <method.png>
   public method toggleSoloPart() {
      data.b_solo_part = !data.b_solo_part;

      if(false != data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      updatePartButtons();

      Global.PrintFast("Solo part is "+Utils.GetEnableString(data.b_solo_part));
   }

   // <method.png>
   public method toggleOpVMute(int _opIdx) {
      data.opv_mute_mask ^= (1 << _opIdx);
      if(false != data.b_autosend)
      {
         scheduleMIDISendPatch();
      }
      local String muteStr; CalcMuteString(muteStr, data.opv_mute_mask);
      Global.PrintFast("OpV mute mask is "+muteStr+" ("+((data.opv_mute_mask & (1<<_opIdx)) ? "Mute" : "Umute")+" OpV "+(_opIdx+1)+")");
   }

   // <method.png>
   public method toggleOpNMute(int _opIdx) {
      data.opn_mute_mask ^= (1 << _opIdx);
      if(false != data.b_autosend)
      {
         scheduleMIDISendPatch();
      }
      local String muteStr; CalcMuteString(muteStr, data.opn_mute_mask);
      Global.PrintFast("OpN mute mask is "+muteStr+" ("+((data.opn_mute_mask & (1<<_opIdx)) ? "Mute" : "Umute")+" OpN "+(_opIdx+1)+")");
   }

   // <method.png>
   protected method toggleMuteOrSoloCurrentOp(boolean _bSolo) {
      int tabIdx = ts_groups.getActiveTabIndex();
      int opIdx;
      local String muteStr;
      if(TAB_V1 <= tabIdx <= TAB_V8)
      {
         opIdx = tabIdx - TAB_V1;
         if(_bSolo)
         {
            if(data.opv_mute_mask == (~(1<<opIdx) & 255))  // is solo ?
            {
               data.opv_mute_mask = 0;
               data.b_solo_opv = false;
               CalcMuteString(muteStr, data.opv_mute_mask);
               Global.PrintFast("OpV mute mask is "+muteStr+" (un-solo OpV "+(opIdx+1)+")");
            }
            else
            {
               data.opv_mute_mask = ~(1<<opIdx) & 255;
               data.b_solo_opv = true;
               CalcMuteString(muteStr, data.opv_mute_mask);
               Global.PrintFast("OpV mute mask is "+muteStr+" (solo OpV "+(opIdx+1)+")");
            }
            if(false != data.b_autosend)
            {
               scheduleMIDISendPatch();
            }
         }
         else
            toggleOpVMute(opIdx);
      }
      else if(TAB_N1 <= tabIdx <= TAB_N8)
      {
         opIdx = tabIdx - TAB_N1;
         if(_bSolo)
         {
            if(data.opn_mute_mask == (~(1<<opIdx) & 255))  // is solo ?
            {
               data.opn_mute_mask = 0;
               CalcMuteString(muteStr, data.opn_mute_mask);
               Global.PrintFast("OpN mute mask is "+muteStr+" (un-solo OpN "+(opIdx+1)+")");
            }
            else
            {
               data.opn_mute_mask = ~(1<<opIdx) & 255;
               CalcMuteString(muteStr, data.opn_mute_mask);
               Global.PrintFast("OpN mute mask is "+muteStr+" (solo OpN "+(opIdx+1)+")");
            }
            if(false != data.b_autosend)
            {
               scheduleMIDISendPatch();
            }
         }
         else
            toggleOpNMute(opIdx);
      }
   }

   // <ui_timer.png>
   public method scheduleMIDISendPatch() {
      // trace "xxx FS1R::scheduleMIDISendPatch:";
      b_queued_midi_send_patch = true;
      ta_midisend.cancel();
      ta_midisend.schedule();
   }

   // // // <method.png>
   // // protected method sendPatchAsParamUpdates(FS1R_Patch _patch) {
   // //    MIDISynthProfileCtlAlias *alias;
   // //    local Buffer pd <= _patch.patch_data;
   // //    foreach alias in profile.all_aliases
   // //    {
   // //       if((-1 != alias.syx_off ) && alias.b_ui)// && (-1 == alias.syx_off_hi))
   // //       {
   // //          sendParamUpdate(alias, pd.peekI8(alias.syx_off));
   // //       }
   // //    }
   // // }

   // <method.png>
   protected method sendPatchFr(MIDIPipeFrame _fr, boolean _bSendAll, boolean _bAllowSendMulti) {
      byte part1Ch = -1;
      byte part2Ch = -1;
      byte part3Ch = -1;
      byte part4Ch = -1;

      FS1R_Patch pMain <= (null != multi_patch) ? multi_patch : patch;

      if(data.b_send_multi)
      {
         // Reconfigure performance settings (MIDI ch)
         switch(pMain.multi_mode)
         {
            case FS1R_Patch.MULTI_MODE_OFF:
               break;

            case FS1R_Patch.MULTI_MODE_CH1:
               part1Ch = 0;
               part2Ch = 0x7F;
               part3Ch = 0x7F;
               part4Ch = 0x7F;
               break;

            case FS1R_Patch.MULTI_MODE_CH11:
               part1Ch = 0;
               part2Ch = 0;
               part3Ch = 0x7F;
               part4Ch = 0x7F;
               break;

            case FS1R_Patch.MULTI_MODE_CH111:
               part1Ch = 0;
               part2Ch = 0;
               part3Ch = 0;
               part4Ch = 0x7F;
               break;

            case FS1R_Patch.MULTI_MODE_CH1111:
               part1Ch = 0;
               part2Ch = 0;
               part3Ch = 0;
               part4Ch = 0;
               break;

            case FS1R_Patch.MULTI_MODE_CH12:
               part1Ch = 0;
               part2Ch = 1;
               part3Ch = 0x7F;
               part4Ch = 0x7F;
               break;

            case FS1R_Patch.MULTI_MODE_CH123:
               part1Ch = 0;
               part2Ch = 1;
               part3Ch = 2;
               part4Ch = 0x7F;
               break;

            case FS1R_Patch.MULTI_MODE_CH1234:
               part1Ch = 0;
               part2Ch = 1;
               part3Ch = 2;
               part4Ch = 3;
               break;
         }

         if(_bAllowSendMulti)
         {
            if((-1 != part1Ch) && (_bSendAll || (part1Ch != last_sent_part1_ch)))
            {
               last_sent_part1_ch = part1Ch;
               fs1rSendPerfPartParam3(part1Ch, 0/*partIdx*/, 0x03);  // recv channel max
               fs1rSendPerfPartParam3(part1Ch, 0/*partIdx*/, 0x04);  // recv channel
            }

            if((-1 != part2Ch) && (_bSendAll || (part2Ch != last_sent_part2_ch)))
            {
               last_sent_part2_ch = part2Ch;
               fs1rSendPerfPartParam3(part2Ch, 1/*partIdx*/, 0x03);  // recv channel max
               fs1rSendPerfPartParam3(part2Ch, 1/*partIdx*/, 0x04);  // recv channel
            }

            if((-1 != part3Ch) && (_bSendAll || (part3Ch != last_sent_part3_ch)))
            {
               last_sent_part3_ch = part3Ch;
               fs1rSendPerfPartParam3(part3Ch, 2/*partIdx*/, 0x03);  // recv channel max
               fs1rSendPerfPartParam3(part3Ch, 2/*partIdx*/, 0x04);  // recv channel
            }

            if((-1 != part4Ch) && (_bSendAll || (part4Ch != last_sent_part4_ch)))
            {
               last_sent_part4_ch = part4Ch;
               fs1rSendPerfPartParam3(part4Ch, 3/*partIdx*/, 0x03);  // recv channel max
               fs1rSendPerfPartParam3(part4Ch, 3/*partIdx*/, 0x04);  // recv channel
            }
         }
      }

      boolean bMulti = data.b_send_multi && (FS1R_Patch.MULTI_MODE_OFF != pMain.multi_mode);
      FS1R_Patch *p;

      // trace "xxx sendPatchFr: bMulti="+bMulti+" _bSendAll="+_bSendAll+" force_send_all_diff_mask="+force_send_all_diff_mask;

      if(_bSendAll)
      {
         Buffer dataBuf <= null;

         if(bMulti)
         {
            if(-1 != part1Ch)
            {
               dataBuf <= pMain.patch_data;
               sendAllParams_FS1R(dataBuf, 0/*partIdx*/);
               _= replay_patches[0].copyFrom(pMain, true/*bCopyVoice*/, false/*bCopyFX*/);
               force_send_all_diff_mask &= ~1;
            }

            if(-1 != part2Ch)
            {
               p <= data.patches.get(pMain.patch_idx_part2);
               if(null != p)
               {
                  dataBuf <= p.patch_data;
                  sendAllParams_FS1R(dataBuf, 1/*partIdx*/);
                  _= replay_patches[1].copyFrom(p, true/*bCopyVoice*/, false/*bCopyFX*/);
                  force_send_all_diff_mask &= ~2;
               }
            }

            if(-1 != part3Ch)
            {
               p <= data.patches.get(pMain.patch_idx_part3);
               if(null != p)
               {
                  dataBuf <= p.patch_data;
                  sendAllParams_FS1R(dataBuf, 2/*partIdx*/);
                  _= replay_patches[2].copyFrom(p, true/*bCopyVoice*/, false/*bCopyFX*/);
                  force_send_all_diff_mask &= ~4;
               }
            }

            if(-1 != part4Ch)
            {
               p <= data.patches.get(pMain.patch_idx_part4);
               if(null != p)
               {
                  dataBuf <= p.patch_data;
                  sendAllParams_FS1R(dataBuf, 3/*partIdx*/);
                  _= replay_patches[3].copyFrom(p, true/*bCopyVoice*/, false/*bCopyFX*/);
                  force_send_all_diff_mask &= ~8;
               }
            }
         }
         else
         {
            // Not in multi mode, send current part patch
            dataBuf <= patch.patch_data;
            sendAllParams_FS1R(dataBuf, data.current_part_idx);
            _= replay_patches[data.current_part_idx].copyFrom(patch, true/*bCopyVoice*/, false/*bCopyFX*/);
            force_send_all_diff_mask &= ~(1 << data.current_part_idx);
         }
      }
      else
      {
         // Send diff to current replay patch

         if(bMulti)
         {
            if(-1 != part1Ch)
            {
               // trace "xxx send diff patch.patch_idx_part1="+data.current_patch_nr;
               emitPatchDiff(_fr, pMain, (0 != (force_send_all_diff_mask&1)), 0/*partIdx*/);
               force_send_all_diff_mask &= ~1;
            }

            if(-1 != part2Ch)
            {
               // trace "xxx send diff patch.patch_idx_part2="+patch.patch_idx_part2;
               p <= data.patches.get(pMain.patch_idx_part2);
               if(null != p)
               {
                  emitPatchDiff(_fr, p, (0 != (force_send_all_diff_mask&2)), 1/*partIdx*/);
                  force_send_all_diff_mask &= ~2;
               }
            }

            if(-1 != part3Ch)
            {
               p <= data.patches.get(pMain.patch_idx_part3);
               if(null != p)
               {
                  emitPatchDiff(_fr, p, (0 != (force_send_all_diff_mask&4)), 2/*partIdx*/);
                  force_send_all_diff_mask &= ~4;
               }
            }

            if(-1 != part4Ch)
            {
               p <= data.patches.get(pMain.patch_idx_part4);
               if(null != p)
               {
                  emitPatchDiff(_fr, p, (0 != (force_send_all_diff_mask&8)), 3/*partIdx*/);
                  force_send_all_diff_mask &= ~8;
               }
            }
         }
         else
         {
            // Not in multi mode, send current part patch diff
            // trace "xxx single diff: data.current_part_idx="+data.current_part_idx;
            emitPatchDiff(_fr, patch,
                          (0 != (force_send_all_diff_mask&(1 << data.current_part_idx))),
                          data.current_part_idx
                          );
            force_send_all_diff_mask &= ~(1 << data.current_part_idx);
         }

         if(b_debug)
            Global.Debug2("FS1R::sendPatchFr: diff frame has "+_fr.numEvents+" event(s)");

      } // if bMulti
   }

   // <method.png>
   protected method sendPatch() {
      local MIDIPipeFrame frOut;
      frOut.empty();
      frOut.setRoot(current_pipe_root);
      int diffMaskOrig = force_send_all_diff_mask;

      boolean bSendAll = !data.b_send_diff || b_first_midi_send_patch;

      // (note) fills frOut with single param sysex messages in diff mode
      sendPatchFr(frOut, bSendAll, true/*bAllowSendMulti*/);

      if(frOut.hasEvents())
      {
         if(!data.b_difflock &&
            (0 == data.opn_mute_mask) &&
            (0 == data.opv_mute_mask) &&
            (frOut.numEvents > FS1R_Patch.MAX_SINGLE_PARAMS)
            )
         {
            // Too many single parameter changes, send the whole patch
            force_send_all_diff_mask = diffMaskOrig;
            sendPatchFr(null/*fr*/, true/*bSendAll*/, false/*bAllowSendMulti*/);
         }
         else
         {
            out_dev.begin();
            frOut.emit();
            out_dev.send(milliSeconds());
         }
      }

      b_first_midi_send_patch = false;
   }

   // <ui_timer.png>
   protected =replay= method handleMIDISendTimer() {

      if(b_queued_midi_send_patch)
      {
         // if(b_first_midi_send_patch)
         //    clearMIDICache();

         b_queued_midi_send_patch = false;
         boolean bSendAll = !data.b_send_diff || b_first_midi_send_patch;
         boolean bForceSendFx = bSendAll || (0 != (force_send_all_diff_mask & 1));

         switch(patch.fx_mode)
         {
            case FS1R_Patch.FX_MODE_KEEP:
               sendPatch();
               break;

            case FS1R_Patch.FX_MODE_SEND:
               sendPatch();
               // run into next case
            case FS1R_Patch.FX_MODE_FXONLY:
               emitFXDiff(null/*fr*/, patch, bForceSendFx,
                          true/*bRev*/, true/*bVar*/, true/*bIns*/, true/*bOther*/
                          );
               break;

            case FS1R_Patch.FX_MODE_OFF:
               sendPatch();
               emitFXOff(null/*fr*/);
               break;
         }
      } // if b_queued_midi_send_patch
   }

   // <ui_update.png>
   protected method updateFMMatrix() {
      boolean bTabVisible = (TAB_FMMATRIX == ts_groups.getActiveTabIndex());
      fm_matrix.updateFromPatchData_Editor(bTabVisible);
   }

   // <ui_timer.png>
   protected method handleFMMatrixTimer() {
      updateFMMatrix();
   }

   // <ui_timer.png>
   protected method handlePeriodicTimer() {
      if(b_queued_send_filtersw_workaround)
      {
         b_queued_send_filtersw_workaround = false;
         CheckBox cb <= findParamWidgetByAliasId("d_pp_filtersw");
         // trace "xxx FS1R::handleAlgorithmChangedPost: filtersw cb="+#(cb);
         if(cb instanceof CheckBox) // should not be false
         {
            // (note) toggling filtersw off<>on fixes/works-around sporadic "silence-after-alg-change" issue
            // // cb.toggleSelectionAction();
            // // cb.toggleSelectionAction();
            boolean bSel = cb.isSelected();
            cb.setSelected(!bSel);
            handleParamWidgetChanged(cb, false/*bUpdateFMMatrix*/, true/*bQuiet*/);
            cb.setSelected(bSel);
            handleParamWidgetChanged(cb, false/*bUpdateFMMatrix*/, true/*bQuiet*/);
         }
      }
      ta_periodic.reschedule();
   }

   // <midi.png>
   protected emitFXDiff(local MIDIPipeFrame _frOrNull,
                        local FS1R_Patch    _destPatch,
                        local boolean       _bForceSendAll,
                        local boolean       _bRev,
                        local boolean       _bVar,
                        local boolean       _bIns,
                        local boolean       _bOther
                        ) {
      local Buffer fxA <= replay_patches[0/*partIdx*/].fx_data;
      local Buffer fxB <= _destPatch.fx_data;
      int fxType;
      // StringArray *params;
      byte addrM;
      byte addrL;
      int off;
      short valA;
      short valB;
      int numSent = 0;
      boolean bForceSend;  // changing FX type causes synth to load preset params

      if(_bRev)
      {
         // Reverb
         off = 0xA8-0x50;  // fx type
         valA = fxA.peekI8(off);
         valB = fxB.peekI8(off);
         // trace "xxx rev type valA="+valA+" valB="+valB;
         bForceSend = _bForceSendAll || (valA != valB);
         if(bForceSend)
         {
            fs1rSendParam3Fr(_frOrNull, valB, 0x10, 0x01, 0x28);
            fxA.pokeI8(off, valB);
            numSent++;
         }
         if(0 != valB)  // fx enabled ?
         {
            // (todo) only send used params
            // params <= FS1R_Patch.reverb_params.get(fxType-1);
            addrM = 0x00;
            addrL = 0x50;
            off = 0;
            // Send short params (0..7)
            loop(8)  ///FS1R_Patch.MAX_FX_PARAMS)
            {
               valA = fxA.peekI14(off);
               valB = fxB.peekI14(off);
               if(bForceSend || (valA != valB))
               {
                  fs1rSendParam3Fr(_frOrNull, valB, 0x10, addrM, addrL);
                  fxA.pokeI14(off, valB);
                  numSent++;
               }
               addrL += 2;
               off += 2;
            }
            // Send byte params (8..15)
            loop(8)  ///FS1R_Patch.MAX_FX_PARAMS)
            {
               valA = fxA.peekI8(off);
               valB = fxB.peekI8(off);
               if(bForceSend || (valA != valB))
               {
                  fs1rSendParam3Fr(_frOrNull, valB, 0x10, addrM, addrL);
                  fxA.pokeI8(off, valB);
                  numSent++;
               }
               addrL += 1;
               off += 1;
            }
         }
      }

      if(_bVar)
      {
         // Variation
         off = 0xAB-0x50;  // fx type
         valA = fxA.peekI8(off);
         valB = fxB.peekI8(off);
         bForceSend = _bForceSendAll || (valA != valB);
         if(bForceSend)
         {
            fs1rSendParam3Fr(_frOrNull, valB, 0x10, 0x01, 0x2B);
            fxA.pokeI8(off, valB);
            numSent++;
         }
         if(0 != valB)  // fx enabled ?
         {
            // (todo) only send used params
            // params <= FS1R_Patch.variation_params.get(fxType-1);
            addrM = 0x00;
            addrL = 0x68;
            off = 0x68-0x50;
            // Send short params (0..15)
            loop(16)  ///FS1R_Patch.MAX_FX_PARAMS)
            {
               valA = fxA.peekI14(off);
               valB = fxB.peekI14(off);
               if(bForceSend || (valA != valB))
               {
                  fs1rSendParam3Fr(_frOrNull, valB, 0x10, addrM, addrL);
                  fxA.pokeI14(off, valB);
                  numSent++;
               }
               addrL += 2;
               off += 2;
               if(off >= 0x80)
               {
                  addrM++;
                  addrL = 0;
               }
            }
         }
      }

      if(_bIns)
      {
         // Insertion
         off = 0xAF-0x50;  // fx type
         valA = fxA.peekI8(off);
         valB = fxB.peekI8(off);
         bForceSend = _bForceSendAll || (valA != valB);
         if(bForceSend)
         {
            fs1rSendParam3Fr(_frOrNull, valB, 0x10, 0x01, 0x2F);
            fxA.pokeI8(off, valB);
            numSent++;
         }
         if(0 != valB)  // fx enabled ?
         {
            // (todo) only send used params
            // params <= FS1R_Patch.variation_params.get(fxType-1);
            addrM = 0x01;
            addrL = 0x08;
            off = 0x88-0x50;
            // Send short params (0..15)
            loop(16)  ///FS1R_Patch.MAX_FX_PARAMS)
            {
               valA = fxA.peekI14(off);
               valB = fxB.peekI14(off);
               if(bForceSend || (valA != valB))
               {
                  fs1rSendParam3Fr(_frOrNull, valB, 0x10, addrM, addrL);
                  fxA.pokeI14(off, valB);
                  numSent++;
               }
               addrL += 2;
               off += 2;
            }
         }
      }

      if(_bOther)
      {
         // pan/return+sendlevels/EQ
         addrM = 0x01;
         addrL = 0x29;
         off = 0xA9-0x50;
         bForceSend = _bForceSendAll;
         loop(22)
         {
            if((0x2B != addrL) && (0x2F != addrL))  // var+ins types have already been sent
            {
               valA = fxA.peekI8(off);
               valB = fxB.peekI8(off);
               if(bForceSend || (valA != valB))
               {
                  fs1rSendParam3Fr(_frOrNull, valB, 0x10, addrM, addrL);
                  fxA.pokeI8(off, valB);
                  numSent++;
               }
            }
            addrL++;
            off++;
         }
      }

      if(PageSysEx.b_debug)
         Global.Debug2("FS1R::emitFXDiff: sent "+numSent+" FX param update(s)");
   }

   // <midi.png>
   protected emitFXOff(local MIDIPipeFrame _frOrNull) {
      fs1rSendParam3Fr(_frOrNull, 0/*off*/, 0x10, 0x01, 0x28);
      fs1rSendParam3Fr(_frOrNull, 0/*off*/, 0x10, 0x01, 0x2B);
      fs1rSendParam3Fr(_frOrNull, 0/*off*/, 0x10, 0x01, 0x2F);
   }

   // <midi.png>
   protected emitPatchDiff(local MIDIPipeFrame _fr,
                           local FS1R_Patch    _destPatch,
                           local boolean       _bForceSendAll,
                           local int           _partIdx
                           ) {

      local Buffer pdA <= replay_patches[_partIdx].patch_data;
      local Buffer pdB <= _destPatch.patch_data;

      local int devIdx = out_dev.dev_idx;

      // trace "xxx emitPatchDiff: partIdx="+_partIdx+" bForceSendAll="+_bForceSendAll+" b_solo_part="+data.b_solo_part+" current_part_idx="+data.current_part_idx;

      local MIDISynthProfileCtlAlias *alias;
      foreach alias in param_widget_aliases
      {
         int aliasNr = alias.nr;

         int ivalA = pdA.peekI8(alias.syx_off);
         int ivalB = pdB.peekI8(alias.syx_off);

         boolean bSend = false;
         int opIdx;

         if(data.b_solo_opv && (1037/*alg*/ == aliasNr))
            ivalB = 0;  // force alg 1

         if(511/*d_pp_volume*/ == aliasNr)
         {
            if(data.b_solo_part)
            {
               // trace "xxx bMutePart="+bMutePart+" _partIdx="+_partIdx+" data.current_part_idx="+data.current_part_idx;
               ivalB = (data.current_part_idx == _partIdx) ? ivalB : 0;
            }
            // trace "xxx d_pp_volume partIdx="+_partIdx+" = "+ivalB+" (ivalA="+ivalA+")";
         }

         // Voiced Lvl Correction
         if(aliasNr >= 2026)  // op1..8 lvlscl
         {
            if( (0 != data.opv_mute_mask) )
            {
               if(26 == ((aliasNr-2000)%200))
               {
                  opIdx = (aliasNr-2000) / 200;
                  if( (data.opv_mute_mask & (1<<opIdx)) )
                  {
                     ivalB = 0;
                  }
                  // trace "xxx emitPatchDiff: partIdx="+_partIdx+" opIdx="+opIdx+" ivalA="+ivalA+" ivalB="+ivalB;
               }
            }
            if( (0 != data.opn_mute_mask) )
            {
               if(113 == (aliasNr-200) % 200)  // opn1..8 levl
               {
                  opIdx = (aliasNr-2000) / 200;
                  if( (data.opn_mute_mask & (1<<opIdx)) )
                  {
                     ivalB = 0;
                  }
               }
            }
         }

         bSend |= _bForceSendAll || (ivalA != ivalB);

         if(bSend)
         {
            if(data.b_difflock)
            {
               bSend = false;
               if(-1 != alias.editgroup_idx)
               {
                  if(-1 != alias.editsubgroup_idx)
                  {
                     IntArray iaSub <= difflock_subgroup_states.get(alias.editgroup_idx);
                     bSend = !iaSub.get(alias.editsubgroup_idx);
                  }
                  else
                  {
                     bSend = !difflock_group_states.get(alias.editgroup_idx);
                  }
               }
            }
         }

         if(bSend)
         {
            // trace "xxx sendParam partIdx="+_partIdx+" alias.id="+alias.id+" nr="+alias.nr+" ivalB="+ivalB;
            sendParamUpdate_FS1R(_fr, alias, ivalB, _partIdx);
            pdA.pokeI8(alias.syx_off, ivalB);
         }
      }
   }

   // <midi.png>
   protected morph(local FS1R_Patch _dest,
                   local FS1R_Patch _srcA,
                   local FS1R_Patch _srcB,
                   float _amtB
                   ) {

      local Buffer pdD <= _dest.patch_data;
      local Buffer pdA <= _srcA.patch_data;
      local Buffer pdB <= _srcB.patch_data;

      local MIDISynthProfileCtlAlias *alias;
      int ival;
      foreach alias in param_widget_aliases
      {
         int ivalA = pdA.peekI8(alias.syx_off);
         int ivalB = pdB.peekI8(alias.syx_off);

         if(alias.syx_off_lo > 0)
         {
            ivalA = ivalA << 7;
            ivalB = ivalB << 7;
            ivalA |= pdA.peekI8(alias.syx_off_lo);
            ivalB |= pdB.peekI8(alias.syx_off_lo);

            ival = 0.5 + ivalA + (ivalB - ivalA) * _amtB;

            pdD.pokeI8(alias.syx_off, ival >> 7);
            pdD.pokeI8(alias.syx_off_lo, ival & 127);
         }
         else
         {
            ival = 0.5 + ivalA + (ivalB - ivalA) * _amtB;
            // trace "xxx syx_off="+alias.syx_off+" ivalA="+ivalA+" ivalB="+ivalB+" amtB="+_amtB+" => ival="+ival;
            pdD.pokeI8(alias.syx_off, ival);
         }
      }
   }

   // <replay.png>
   public virtual handleProxyReset(byte _midiCh, MIDIPipeFrame _frame) {
      // Called from replay thread
      if(null != out_dev)
      {
         if(data.b_proxy_reset)
         {
            // Reset to original patch state
            proxy_bank    = data.current_patch_nr / 128;
            proxy_program = data.current_patch_nr & 127;

            Global.Debug2("FS1R::handleProxyReset: current_patch_nr="+data.current_patch_nr+" => proxy_bank="+proxy_bank+" proxy_program="+proxy_program);

            if(true != b_patch_proxy_lock)
            {
               FS1R_Patch proxyPatch <= data.patches.get(data.current_patch_nr);
               emitPatchDiff(_frame, proxyPatch, false/*bForceSendAll*/, _midiCh&3/*partIdx*/);
            }
         }
      }
   }

   // <replay.png>
   public virtual handleProxyBankSelect(byte _midiCh, short _bankNr) {
      // Called from replay thread
      // trace "xxx FS1R: handleProxyBankSelect("+_bankNr+")";
      proxy_bank = mathClampi(_bankNr, 1, MIDISynthProfileDataFS1R.NUM_BANKS) - 1;
   }

   // <replay.png>
   public virtual handleProxyProgramChange(byte          _midiCh,
                                           short         _programNr,
                                           MIDIPipeFrame _frameOut,
                                           boolean       _bMorphFollows
                                           ) {
      // Called from replay thread
      proxy_program = mathClampi(_programNr, 1, 128) - 1;
      Global.Debug3("FS1R::handleProxyProgramChange: proxy_program="+proxy_program+" (bank "+proxy_bank+", current_patch_nr="+data.current_patch_nr+")");

      if(null != data)
      {
         if(!_bMorphFollows)
         {
            FS1R_Patch *proxyPatch <= data.patches.get((proxy_bank * 128) + proxy_program);

            emitPatchDiff(_frameOut, proxyPatch, b_first_proxy_prgchg/*bForceSendAll*/, _midiCh&3/*partIdx*/);
            b_first_proxy_prgchg = false;
         }

         if(b_patch_proxy_follow)
         {
            data.current_patch_nr = proxy_bank * 128 + proxy_program;
         }
      }
   }

   // <replay.png>
   public virtual handleProxyBankSelectDst(byte _midiCh, short _bankNr) {
      // Called from replay thread
      proxy_bank_dst = mathClampi(_bankNr, 1, MIDISynthProfileDataFS1R.NUM_BANKS) - 1;
   }

   // <replay.png>
   public virtual handleProxyProgramChangeDst(byte _midiCh, short _programNr) {
      // Called from replay thread
      proxy_program_dst = mathClampi(_programNr, 1, 128) - 1;
   }

   // <replay.png>
   public virtual handleProxyAmountDst(byte _midiCh, float _amount) {
      // Called from replay thread
      proxy_amount_dst = _amount;
   }

   // <replay.png>
   public virtual handleProxyMorph(byte _midiCh, MIDIPipeFrame _frameOut) {
      FS1R_Patch patchA <= data.patches.get(proxy_bank * 128 + proxy_program);
      FS1R_Patch patchB <= data.patches.get(proxy_bank_dst * 128 + proxy_program_dst);

      morph(morph_patch, patchA, patchB, proxy_amount_dst);

      if(true != b_patch_proxy_lock)
      {
         emitPatchDiff(_frameOut, morph_patch, b_first_proxy_prgchg/*bForceSendAll*/, _midiCh&3/*partIdx*/);
         b_first_proxy_prgchg = false;
      }
   }

   // <replay.png>
   public virtual handleProxyEvents(byte          _midiCh,
                                    MIDIPipeFrame _frameIn,
                                    boolean       _bFrameRec,
                                    int           _inDev,
                                    byte          _inCh,
                                    MIDIPipeFrame _frameOut
                                    ) {
      // Called from replay thread
      if(null != out_dev)
      {
         if(_midiCh < 4)
         {
            int numEvents = _frameIn.getNumEventsRPNByFlt(_inDev, _inCh);

            if(numEvents > 0)
            {
               // trace "xxx fs1r: numEvents<RPN>="+numEvents;
               MIDISynthProfileCtlAlias *alias;
               FS1R_Patch p <= replay_patches.get(_midiCh);
               Buffer pd <= p.patch_data;
               int evIdx = 0;
               MIDIPipeEvent pev;

               // // boolean bSendDiff = false;

               loop(numEvents)
               {
                  if(_frameIn.getEventByIdxAndFlt(evIdx, pev, MIDIPIPE_EVENT_TYPE_RPN, _inDev, _inCh))
                  {
                     short rpn = pev.rpn;
                     // alias <= profile.getAliasByRPN(rpn);
                     alias <= profile.getRPNAliasByNr(rpn);
                     if(null != alias)
                     {
                        short r = mathClampi(pev.rpnValue, alias.min, alias.max);

                        if(alias.syx_bit_num > 0)
                        {
                           r =
                              (pd.peekI8(alias.syx_off) & ~(((1 << alias.syx_bit_num)-1) << alias.syx_bit_off))
                              | (r << alias.syx_bit_off);
                        }
                        r = r & 127;

                        if(r != pd.peekI8(alias.syx_off))
                        {
                           pd.pokeI8(alias.syx_off, r & 127);

                           sendParamUpdate_FS1R(_frameOut, alias, r, _midiCh/*partIdx*/);
                           if(b_debug2)
                              trace "[>>>] fs1r: proxy RPN: rpn="+rpn+" syx_off="+alias.syx_off+" r="+r;
                        }

                        // Delete source event
                        //  (note) when proxy relay port is same as synth port => don't send pseudo-RPN to synth
                        _frameIn.rpn(false/*bSet*/, pev.devIdx, pev.midiCh, pev.rpn, 0);
                        evIdx--;
                     }
                  }

                  // Next RPN event
                  evIdx++;
               }
            }
         }
      }
   }

   // <ui_midi.png>
   protected method waitForSysEx() : boolean {
      b_have_sysex = false;

      if(b_debug)
         Global.Debug("EditMIDISynthFormFS1R<"+profile.midi_profile_id+">::waitForSysEx: in_dev="+#(in_dev));

      if(null != in_dev)
      {
         if(b_debug)
            Global.Debug("EditMIDISynthFormFS1R<"+profile.midi_profile_id+">::waitForSysEx: in_dev.aliasOrDevName=\""+in_dev.getAliasOrDeviceName()+"\"");

         // 5 second timeout
         loop(50)
         {
            replay.processMidiMapUIEventQueue();

            if(b_have_sysex)
            {
               break;
            }

            TKS.sleep(100);
         }

         if(!b_have_sysex)
            Global.Error("EditMIDISynthFormFS1R<"+profile.midi_profile_id+">: waitForSysEx: Timeout");
      }

      return b_have_sysex;
   }

   // <ui_handle.png>
   protected method handlePatchReceive(boolean _bEdit, boolean _bClipboard) {

      local Buffer req;
      req.size = 8;

      // Request performance (409 bytes w/o F0..F7)
      fs1rRequestBytes3(req, 0x10, 0x00, 0x00);
      out_dev.addBuffer(req);
      out_dev.send(milliSeconds());

      if(waitForSysEx())
      {
         Global.Debug2("FS1R: recv'd PERF sysex buffer ("+sysex_buffer.size+" bytes):");

         // if(b_debug)
         // {
         //    Utils.HexDump(sysex_buffer, 0, sysex_buffer.size);
         // }

         if(sysex_buffer.size == 409)
         {
            local Buffer perfBuf;
            perfBuf.size = 400;
            perfBuf.byteOrder = YAC_BIG_ENDIAN;

            if(fs1rDecodeData(sysex_buffer, perfBuf))  // => 400 bytes
            {
               if(b_debug)
               {
                  Utils.HexDump(perfBuf, 0, perfBuf.offset);
               }

               // Query current part voice
               int partIdx = data.current_part_idx;
               local Buffer voiceBuf;
               voiceBuf.size = 608;
               voiceBuf.byteOrder = YAC_BIG_ENDIAN;

               TKS.sleep(50);  // can skip this ?!

               // Request voice (617 bytes w/o F0..F7)
               fs1rRequestBytes3(req, 0x40+partIdx, 0x00, 0x00);
               out_dev.addBuffer(req);
               out_dev.send(milliSeconds());

               if(waitForSysEx())
               {
                  Global.Debug2("FS1R: recv'd VOICE sysex buffer ("+sysex_buffer.size+" bytes):");

                  // if(b_debug)
                  // {
                  //    Utils.HexDump(sysex_buffer, 0, sysex_buffer.size);
                  // }

                  if(sysex_buffer.size == 617)
                  {
                     if(fs1rDecodeData(sysex_buffer, voiceBuf))  // => 608 bytes
                     {
                        if(b_debug)
                        {
                           Utils.HexDump(voiceBuf, 0, voiceBuf.offset);
                        }

                        FS1R_Patch p <= _bClipboard ? patch_clipboard : patch;

                        // Copy performance part to patch
                        Buffer pd <= p.patch_data;
                        pd.offset = FS1R_Patch.OFF_PERF_PART;
                        pd.writeBuffer(perfBuf, 192, FS1R_Patch.NUM_PERF_PART);

                        // Copy voice to patch
                        pd.offset = FS1R_Patch.OFF_VOICE_COMMON;
                        pd.writeBuffer(voiceBuf, 0, FS1R_Patch.NUM_VOICE);

                        if(data.b_recv_patch_names)
                           p.extractPatchNameFromData();

                        updateUIFromPatch();

                        force_send_all_diff_mask |= (1 << partIdx);

                        partIdx++;
                     }
                     else
                     {
                        Global.Error("failed to decode VOICE SysEx");
                     }
                  }
                  else
                  {
                     Global.Error("VOICE SysEx size mismatch (expected 617, have "+sysex_buffer.size);
                  }
               } // if waitForSysEx()
            }
            else
            {
               Global.Error("failed to decode PERF SysEx");
            }
         }
         else
         {
            Global.Error("PERF SysEx size mismatch (expected 409, have "+sysex_buffer.size);
         }
      } // if waitForSysEx()
   }

   // <ui_handle.png>
   protected method handlePatchSend() {
      scheduleMIDISendPatch();
   }

   // <ui_handle.png>
   protected method handlePatchCopy() {

      // trace "xxx handlePatchCopy patch="+#(patch);
      patch_clipboard.copyFrom(patch, true/*bCopyVoice*/, true/*bCopyFX*/);

      Global.Print("Copy patch to clipboard");
   }

   // <ui_handle.png>
   protected =replay= method handlePatchPaste() {

      patch.copyFrom(patch_clipboard, true/*bCopyVoice*/, true/*bCopyFX*/);

      updateUIFromPatch();

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      Global.Print("Paste patch from clipboard");
   }

   // <ui_handle.png>
   protected =replay= method handlePatchSwap(boolean _bSwapVoice, boolean _bSwapFX) {

      local FS1R_Patch t;
      t.init(this, profile);

      t.copyFrom(patch, _bSwapVoice, _bSwapFX);
      patch.copyFrom(patch_clipboard, _bSwapVoice, _bSwapFX);
      patch_clipboard.copyFrom(t, _bSwapVoice, _bSwapFX);

      updateUIFromPatch();

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      Global.Print("Swap patch "+((_bSwapVoice&&_bSwapFX)?"voice+FX":_bSwapVoice?"voice":_bSwapFX?"FX":"")+" with clipboard");
   }

   // <method.png>
   protected method swapPatchByteRange(int _syxOffA, int _syxOffB, int _numBytes) {
      Buffer pd       <= patch.patch_data;
      // // Buffer pdReplay <= replay_patches[data.current_part_idx].patch_data;

      loop(_numBytes)
      {
         // Swap patch data
         byte a = pd.peekI8(_syxOffA);
         byte b = pd.peekI8(_syxOffB);
         pd.pokeI8(_syxOffA, b);
         pd.pokeI8(_syxOffB, a);

         // // // Swap replay patch data
         // // a = pdReplay.peekI8(_syxOffA);
         // // b = pdReplay.peekI8(_syxOffB);
         // // pdReplay.pokeI8(_syxOffA, b);
         // // pdReplay.pokeI8(_syxOffB, a);

         // Next patch byte
         _syxOffA++;
         _syxOffB++;
      }
   }

   // <method.png>
   protected method swapPatchByte(int _syxOffA, int _syxOffB, byte _mask) {
      Buffer pd       <= patch.patch_data;
      // // Buffer pdReplay <= replay_patches[data.current_part_idx].patch_data;

      // Swap patch byte
      byte a = pd.peekI8(_syxOffA);
      byte b = pd.peekI8(_syxOffB);
      pd.pokeI8(_syxOffA, (b & _mask) | (a & ~_mask));
      pd.pokeI8(_syxOffB, (a & _mask) | (b & ~_mask));

      // // // Swap replay patch byte
      // // a = pdReplay.peekI8(_syxOffA);
      // // b = pdReplay.peekI8(_syxOffB);
      // // pdReplay.pokeI8(_syxOffA, (b & _mask) | (a & ~_mask));
      // // pdReplay.pokeI8(_syxOffB, (a & _mask) | (b & ~_mask));
   }

   // <method.png>
   public =replay= method swapVoicedOps(int _opA, int _opB, int _paramSetMask, boolean _bSwapOpLevel) {
      Global.Debug2("EditMIDISynthFormFS1R::swapVoicedOps: opA="+_opA+" opB="+_opB+" paramSetMask="+_paramSetMask+" bSwapOpLevel="+_bSwapOpLevel);
      int bytesPerOp = (226 - 164);
      int syxOffA = 164/*voiced op 1*/ + bytesPerOp * _opA;
      int syxOffB = 164/*voiced op 1*/ + bytesPerOp * _opB;

      if(_paramSetMask & PARAMSET_OP_OSC)
      {
         swapPatchByte(syxOffA+0x04, syxOffB+0x04, (7 << 0));  // spectral form
         swapPatchByte(syxOffA+0x00, syxOffB+0x00, (1 << 6));  // keysync
         swapPatchByte(syxOffA+0x06, syxOffB+0x06, 255);       // frmt bandwidth
         swapPatchByte(syxOffA+0x05, syxOffB+0x05, (7 << 3));  // frmt skirt
         swapPatchByte(syxOffA+0x05, syxOffB+0x05, (7 << 0));  // fseq_tracknr
      }

      if(_paramSetMask & PARAMSET_OP_FREQ)
      {
         swapPatchByte(syxOffA+0x05, syxOffB+0x05, (1 << 6));  // mode (fixed freq switch)
         swapPatchByte(syxOffA+0x01, syxOffB+0x01, 31);        // freq_coarse
         swapPatchByte(syxOffA+0x02, syxOffB+0x02, 127);       // freq_fine
         swapPatchByte(syxOffA+0x03, syxOffB+0x03, 127);       // freq_notescl
         swapPatchByte(syxOffA+0x07, syxOffB+0x07, 31);        // detune
         swapPatchByte(syxOffA+0x00, syxOffB+0x00, (63 << 0)); // fmt_transpose
      }

      if(_paramSetMask & PARAMSET_OP_PEG)
      {
         swapPatchByte(syxOffA+0x08, syxOffB+0x08, 127);       // feg_init_val
         swapPatchByte(syxOffA+0x09, syxOffB+0x09, 127);       // feg_atk_val
         swapPatchByte(syxOffA+0x0A, syxOffB+0x0A, 127);       // feg_atk_time
         swapPatchByte(syxOffA+0x0B, syxOffB+0x0B, 127);       // feg_dcy_time
      }

      if(_paramSetMask & PARAMSET_OP_AEG_LEVEL)
      {
         swapPatchByte(syxOffA+0x0C, syxOffB+0x0C, 127);       // eg_l1
         swapPatchByte(syxOffA+0x0D, syxOffB+0x0D, 127);       // eg_l2
         swapPatchByte(syxOffA+0x0E, syxOffB+0x0E, 127);       // eg_l3
         swapPatchByte(syxOffA+0x0F, syxOffB+0x0F, 127);       // eg_l4
      }

      if(_paramSetMask & PARAMSET_OP_AEG_TIME)
      {
         swapPatchByte(syxOffA+0x10, syxOffB+0x10, 127);       // eg_t1
         swapPatchByte(syxOffA+0x11, syxOffB+0x11, 127);       // eg_t2
         swapPatchByte(syxOffA+0x12, syxOffB+0x12, 127);       // eg_t3
         swapPatchByte(syxOffA+0x13, syxOffB+0x13, 127);       // eg_t4
         swapPatchByte(syxOffA+0x14, syxOffB+0x14, 127);       // eg_hold_time
         swapPatchByte(syxOffA+0x15, syxOffB+0x15,   7);       // eg_timescl
      }

      if(_paramSetMask & PARAMSET_OP_LEVELSCL)
      {
         if(_bSwapOpLevel)
            swapPatchByte(syxOffA+0x16, syxOffB+0x16, 127);       // lvlscl_total (op level)
         swapPatchByte(syxOffA+0x17, syxOffB+0x17, 127);       // lvlscl_breakpoint
         swapPatchByte(syxOffA+0x18, syxOffB+0x18, 127);       // lvlscl_left_depth
         swapPatchByte(syxOffA+0x19, syxOffB+0x19, 127);       // lvlscl_right_depth
         swapPatchByte(syxOffA+0x1A, syxOffB+0x1A,   7);       // lvlscl_left_curve
         swapPatchByte(syxOffA+0x1B, syxOffB+0x1B,   7);       // lvlscl_right_curve
      }

      if(_paramSetMask & PARAMSET_OP_SENSE)
      {
         swapPatchByte(syxOffA+0x04, syxOffB+0x04, (15 << 3)); // bw_bias_sense
         swapPatchByte(syxOffA+0x1F, syxOffB+0x1F, (15 << 3)); // freq_bias_sense
         swapPatchByte(syxOffA+0x1F, syxOffB+0x1F, ( 7 << 0)); // pitch_mod_sense
         swapPatchByte(syxOffA+0x20, syxOffB+0x20, ( 7 << 4)); // freq_mod_sense
         swapPatchByte(syxOffA+0x20, syxOffB+0x20, (15 << 0)); // freq_vel_sense
         swapPatchByte(syxOffA+0x21, syxOffB+0x21, ( 7 << 4)); // amp_mod_sense
         swapPatchByte(syxOffA+0x21, syxOffB+0x21, (15 << 0)); // amp_vel_sense
         swapPatchByte(syxOffA+0x22, syxOffB+0x22, 127);       // eg_bias_sense
      }

      if(false != data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

   }

   // <method.png>
   public method swapVoicedOpsByArray(IntArray _mapOld, IntArray _mapNew, IntArray _opMapFPToOp, int _paramSetMask, boolean _bSwapOpLevel) {
      Global.Debug2("EditMIDISynthFormFS1R::swapVoicedOpsByArray: mapOld="+_mapOld+" mapNew="+_mapNew+" paramSetMask="+_paramSetMask);
      if(_mapOld.numElements == _mapNew.numElements)
      {
         int idx = 0;
         loop(_mapNew.numElements)
         {
            int opCur = _mapOld[idx];
            int opNew = _mapNew[idx];
            // trace "xxx idx="+idx+" opCur="+opCur+" opNew="+opNew;
            int idxOpCur;
            int idxOpNew;
            if(opCur != opNew)
            {
               // Swap op
               swapVoicedOps(opCur, opNew, _paramSetMask, _bSwapOpLevel);

               if(null != _opMapFPToOp)
               {
                  idxOpCur = _opMapFPToOp.indexOf(opCur, 0);
                  idxOpNew = _opMapFPToOp.indexOf(opNew, 0);
                  _opMapFPToOp[idxOpCur] = opNew;
                  _opMapFPToOp[idxOpNew] = opCur;
               }

               idxOpNew = _mapOld.indexOf(opNew, 0);
               if(-1 != idxOpNew)
               {
                  _mapOld[idxOpNew] = opCur;
               }
               _mapOld[idx] = opNew;

               // // idxOpCur = _mapNew.indexOf(opCur, 0);
               // // if(-1 != idxOpCur)
               // // {
               // //    _mapNew[idxOpCur] = opNew;
               // // }
               // // _mapNew[idx] = opCur;

               // trace "    mapOld="+_mapOld;
               // trace "    mapNew="+_mapNew;
            }

            idx++;
         }
      }
   }

   // <ui_handle.png>
   protected method handlePatchCopyFX() {

      patch_clipboard.copyFrom(patch, false/*bCopyVoice*/, true/*bCopyFX*/);

      Global.Print("Copy patch FX to clipboard");
   }

   // <ui_handle.png>
   protected =replay= method handlePatchPasteFX() {

      patch.copyFrom(patch_clipboard, false/*bCopyVoice*/, true/*bCopyFX*/);

      updateUIFromPatch();

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      Global.Print("Paste patch FX from clipboard");
   }

   // <ui_handle.png>
   protected =replay= method handlePatchInit() {

      patch.loadInitPatch();

      updateUIFromPatch();

      clearMIDICache();

      TKS.sleep(30);

      if(data.b_autosend)
      {
         scheduleMIDISendPatch();
      }

      Global.Print("Initialize patch");
   }

   // <method.png>
   public virtual initBank(int _idx) {
      // called via PageSysEx::handlePageCmdInitBank()
      if(0 <= _idx <= num_banks)
      {
         int patchIdx = _idx * num_programs_per_bank;
         loop(num_programs_per_bank)
         {
            FS1R_Patch p <= data.patches.get(patchIdx);
            p.loadInitPatch();
            patchIdx++;
         }
         updateUIFromPatch();
      }
   }

   // <ui_handle.png>
   protected method handlePatchProxyFollowChanged() {
      b_patch_proxy_follow = cb_patch_proxy_follow.isSelected();
      Global.PrintFast("Proxy follow is "+Utils.GetEnableString(b_patch_proxy_follow));

      if(b_patch_proxy_follow)
      {
         // // queued_midi_patch_nr = proxy_bank * 128 + proxy_program;
         // scheduleMIDISend();
      }
   }

   // <ui_handle.png>
   protected method handlePatchProxyLockChanged() {
      b_patch_proxy_lock = cb_patch_proxy_lock.isSelected();
      Global.PrintFast("Proxy lock is "+Utils.GetEnableString(false != b_patch_proxy_lock)+((maybe == b_patch_proxy_lock) ? " (edit proxy patch only)":""));
   }

   // <ui_handle.png>
   protected =replay= method handlePatchProxyResetChanged() {
      data.b_proxy_reset = cb_patch_proxy_reset.isSelected();
      Global.PrintFast("Proxy reset is "+Utils.GetEnableString(data.b_proxy_reset));
   }

   // <midi.png>
   public =replay= method clearMIDICache() {
      if(null != out_dev)
      {
         current_pipe_root.clearMIDICacheForDev(out_dev.dev_idx);
         Global.Debug2("FS1R::clearMIDICache");
      }
   }

   // <method_get.png>
   public virtual getBankNames() : StringArray {
      // overwrites EditMIDISynthForm::getBankNames()
      local StringArray ret;
      int bankNr = 1;
      loop(num_banks - 1)
      {
         ret.add("Bank "+(bankNr++));
      }
      ret.add("Project Bank 16");
      return deref ret;
   }

   // <method_get.png>
   public virtual getProgramNames(int _bankIdx) : StringArray {
      if(b_first_rebuild_patch_names)
         rebuildPatchNames();
      // overwrites EditMIDISynthForm::getProgramNames()
      StringArray allPatchNames <= cm_patch_nr.getOptions();
      local StringArray ret;
      int patchIdx = _bankIdx * 128;
      loop(128)
      {
         ret.add(allPatchNames.get(patchIdx++));
      }
      return deref ret;
   }

   // <method.png>
   public =replay= method copyOpVToClipboard(int opIdx) {
      int off;
      off = FS1R_Patch.OFF_VOICE_VOICED_OP1 + (FS1R_Patch.NUM_VOICE_OP * opIdx);
      if(null == voiced_op_clipboard)
      {
         voiced_op_clipboard <= new Buffer;
         voiced_op_clipboard.size = FS1R_Patch.NUM_VOICE_VOICED_OP;
      }
      voiced_op_clipboard.offset = 0;
      voiced_op_clipboard.writeBuffer(patch.patch_data, off, FS1R_Patch.NUM_VOICE_VOICED_OP);
      Global.Print("Copy voiced op "+(opIdx+1)+" to clipboard");
   }

   // <method.png>
   public =replay= method copyOpNToClipboard(int opIdx) {
      int off;
      off = FS1R_Patch.OFF_VOICE_UNVOICED_OP1 + (FS1R_Patch.NUM_VOICE_OP * opIdx);
      if(null == unvoiced_op_clipboard)
      {
         unvoiced_op_clipboard <= new Buffer;
         unvoiced_op_clipboard.size = FS1R_Patch.NUM_VOICE_UNVOICED_OP;
      }
      unvoiced_op_clipboard.offset = 0;
      unvoiced_op_clipboard.writeBuffer(patch.patch_data, off, FS1R_Patch.NUM_VOICE_UNVOICED_OP);
      Global.Print("Copy unvoiced op "+(opIdx+1)+" to clipboard");
   }

   // <method.png>
   protected method copyOpToClipboard() {
      int tabIdx = ts_groups.getActiveTabIndex();
      int off;
      int opIdx;
      if(TAB_V1 <= tabIdx <= TAB_V8)
      {
         opIdx = tabIdx - TAB_V1;
         copyOpVToClipboard(opIdx);
      }
      else if(TAB_N1 <= tabIdx <= TAB_N8)
      {
         opIdx = tabIdx - TAB_N1;
         copyOpNToClipboard(opIdx);
      }
   }

   // <method.png>
   public =replay= method pasteOpVClipboard(int opIdx) {
      int off;
      Buffer pd <= patch.patch_data;
      if(null != voiced_op_clipboard)
      {
         off = FS1R_Patch.OFF_VOICE_VOICED_OP1 + (FS1R_Patch.NUM_VOICE_OP * opIdx);
         pd.offset = off;
         pd.writeBuffer(voiced_op_clipboard, 0, FS1R_Patch.NUM_VOICE_VOICED_OP);

         updateUIFromPatch();

         if(false != data.b_autosend)
         {
            scheduleMIDISendPatch();
         }

         Global.Print("Paste clipboard to voiced Op "+(opIdx+1));
      }
   }

   // <method.png>
   public =replay= method pasteOpNClipboard(int opIdx) {
      int off;
      Buffer pd <= patch.patch_data;
      if(null != unvoiced_op_clipboard)
      {
         off = FS1R_Patch.OFF_VOICE_UNVOICED_OP1 + (FS1R_Patch.NUM_VOICE_OP * opIdx);
         pd.offset = off;
         pd.writeBuffer(unvoiced_op_clipboard, 0, FS1R_Patch.NUM_VOICE_UNVOICED_OP);

         updateUIFromPatch();

         if(false != data.b_autosend)
         {
            scheduleMIDISendPatch();
         }

         Global.Print("Paste clipboard to unvoiced Op "+(opIdx+1));
      }
   }

   // <method.png>
   protected =replay= method pasteOpClipboard() {
      int tabIdx = ts_groups.getActiveTabIndex();
      int off;
      int opIdx;
      Buffer pd <= patch.patch_data;
      if(TAB_V1 <= tabIdx <= TAB_V8)
      {
         opIdx = tabIdx - TAB_V1;
         pasteOpVClipboard(opIdx);
      }
      else if(TAB_N1 <= tabIdx <= TAB_N8)
      {
         opIdx = tabIdx - TAB_N1;
         pasteOpNClipboard(opIdx);
      }
   }

   // <method.png>
   protected =replay= method swapOpWithClipboard() {
      int tabIdx = ts_groups.getActiveTabIndex();
      if(TAB_V1 <= tabIdx <= TAB_V8)
      {
         if(null != voiced_op_clipboard)
         {
            local Buffer newV = voiced_op_clipboard;
            newV.size = FS1R_Patch.NUM_VOICE_VOICED_OP;
            local Buffer origV <= deref voiced_op_clipboard;
            voiced_op_clipboard <= newV;
            copyOpToClipboard();
            voiced_op_clipboard <= origV;
            pasteOpClipboard();
            voiced_op_clipboard <= deref newV;
            Global.Print("Swap Voiced Op with clipboard");
         }
      }
      else if(TAB_N1 <= tabIdx <= TAB_N8)
      {
         if(null != unvoiced_op_clipboard)
         {
            local Buffer newN = unvoiced_op_clipboard;
            newN.size = FS1R_Patch.NUM_VOICE_UNVOICED_OP;
            local Buffer origN <= deref unvoiced_op_clipboard;
            unvoiced_op_clipboard <= newN;
            copyOpToClipboard();
            unvoiced_op_clipboard <= origN;
            pasteOpClipboard();
            unvoiced_op_clipboard <= deref newN;
            Global.Print("Swap Unvoiced Op with clipboard");
         }
      }
   }

   // <ui_midi.png>
   public virtual mmlHandleEventUI(MIDIMapEvent _ev) : boolean {
      // trace "[trc] FS1R::mmlHandleEventUI";
      if(_ev.isReservedEvent())
         return false;

      if(@(_ev.dev) == @(in_dev))
      {
         if(MIDIMapDefs.TYPE_SYSEX == _ev.type)
         {
            sysex_buffer = _ev.sysex_buffer;
            b_have_sysex = true;
            return true;
         }
      }

      // Transform event so other MIDI controllers can be used to edit the synth
      MIDIMapEvent evXForm = _ev;
      MIDIMorphScene.TransformEvent(evXForm);
      evXForm.echoTransformForced();

      if(@(evXForm.dev) == @(out_dev))
      {
         // trace "[trc] FS1R::mmlHandleEventUI: is out_dev";

         if(MIDIMapDefs.TYPE_NRPN == evXForm.type)
         {
            if(data.b_recv_ctls)
            {
               updateUIAndPatchDataFromMIDIEvent(evXForm);
            }
         }
         else if(MIDIMapDefs.TYPE_CC == evXForm.type)
         {
            // trace "xxx FS1R: CC "+evXForm.ext_type+" value="+evXForm.arg1;
            if(data.b_recv_ctls)
            {
               updateUIAndPatchDataFromMIDIEvent(evXForm);
            }
         }
         return true;
      }
      return false;
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {

      // trace "[>>>] FS1R::onKey: code="+_k.code+" pressed="+_k.pressed+" mod="+_k.mod;

      if(_k.modCtrl())
      {
         switch(_k.pressed)
         {
            case '1':
               selectPart(0, false/*bAllowSolo*/, false/*bQuiet*/);
               return true;

            case '2':
               selectPart(1, false/*bAllowSolo*/, false/*bQuiet*/);
               return true;

            case '3':
               selectPart(2, false/*bAllowSolo*/, false/*bQuiet*/);
               return true;

            case '4':
               selectPart(3, false/*bAllowSolo*/, false/*bQuiet*/);
               return true;

            case 's':
               Global.Debug("Send patch manually");
               scheduleMIDISendPatch();
               return true;

            case 'e':
               if(_k.modShift())
               {
                  handlePatchReceive(true/*bEdit*/, true/*bClipboard*/);
               }
               else
               {
                  handlePatchReceive(true/*bEdit*/, false/*bClipboard*/);
               }
               _k.pressed = 0;  // don't allow keyrepeat
               return true;

            case 'c':
               if(_k.modShift())
               {
                  handlePatchCopyFX();
               }
               else
               {
                  handlePatchCopy();
               }
               return true;

            case 'd':
               toggleMuteOrSoloCurrentOp(_k.modShift()/*bSolo*/);
               return true;

            case 'v':
               if(_k.modShift())
               {
                  handlePatchPasteFX();
               }
               else
               {
                  handlePatchPaste();
               }
               _k.pressed = 0;  // don't allow keyrepeat
               return true;

            case 'x':
               if(_k.modShift())
               {
                  handlePatchSwap(false/*bSwapVoice*/, true/*bSwapFX*/);
                  _k.pressed = 0;  // don't allow keyrepeat
                  return true;
               }
               break;

            case 'b':
               if(_k.modShift())
               {
                  handlePatchSwap(true/*bSwapVoice*/, true/*bSwapFX*/);
               }
               else
               {
                  handlePatchSwap(true/*bSwapVoice*/, false/*bSwapFX*/);
               }
               _k.pressed = 0;  // don't allow keyrepeat
               return true;

            case 'n':
               handlePatchInit();
               _k.pressed = 0;  // don't allow keyrepeat
               return true;

            case VKEY_TAB:
               toggleSoloPart();
               return true;
         }
      }

      switch(_k.pressed)
      {
         case 'c':
            if(_k.modShift())
            {
               copyOpToClipboard();
               return true;
            }
            break;

         case 'v':
            if(_k.modShift())
            {
               pasteOpClipboard();
               _k.pressed = 0;  // don't allow keyrepeat
               return true;
            }
            break;

         case 'x':
            if(_k.modShift())
            {
               swapOpWithClipboard();
               _k.pressed = 0;  // don't allow keyrepeat
               return true;
            }
            break;

            // voiced select:
         case '1':
            if(_k.modShift())
            {
               toggleOpVMute(0);
            }
            else
            {
               ts_groups.setActiveTabIndex(TAB_V1);
            }
            return true;

         case '2':
            if(_k.modShift())
            {
               toggleOpVMute(1);
            }
            else
            {
               ts_groups.setActiveTabIndex(TAB_V2);
            }
            return true;

         case '3':
            if(_k.modShift())
            {
               toggleOpVMute(2);
            }
            else
            {
               ts_groups.setActiveTabIndex(TAB_V3);
            }
            return true;

         case '4':
            if(_k.modShift())
            {
               toggleOpVMute(3);
            }
            else
            {
               ts_groups.setActiveTabIndex(TAB_V4);
            }
            return true;

         case '5':
            if(_k.modShift())
            {
               toggleOpVMute(4);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_V5);
            }
            return true;

         case '6':
            if(_k.modShift())
            {
               toggleOpVMute(5);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_V6);
            }
            return true;

         case '7':
            if(_k.modShift())
            {
               toggleOpVMute(6);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_V7);
            }
            return true;

         case '8':
            if(_k.modShift())
            {
               toggleOpVMute(7);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_V8);
            }
            return true;

            // unvoiced select:
         case 'q':
            if(_k.modShift())
            {
               // (note) clashes with lshift-q == show quit dialog
               toggleOpNMute(0);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_N1);
            }
            return true;

         case 'w':
            if(_k.modShift())
            {
               toggleOpNMute(1);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_N2);
            }
            return true;

         case 'e':
            if(_k.modShift())
            {
               toggleOpNMute(2);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_N3);
            }
            return true;

         case 'r':
            if(_k.modShift())
            {
               toggleOpNMute(3);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_N4);
            }
            return true;

         case 't':
            if(_k.modShift())
            {
               toggleOpNMute(4);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_N5);
            }
            return true;

         case 'y': // 'z' on german kbd
            if(_k.modShift())
            {
               toggleOpNMute(5);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_N6);
            }
            return true;

         case 'u':
            if(_k.modShift())
            {
               toggleOpNMute(6);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_N7);
            }
            return true;

         case 'i':
            if(_k.modShift())
            {
               toggleOpNMute(7);
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_N8);
            }
            return true;

            // patch/fx/part/voice/filter/formant/fm tabs:
         case 'a':
            if(TAB_PATCH == ts_groups.getActiveTabIndex())
            {
               // already selected, show menu
               showToolsMenu();
            }
            else if(_k.modNone())
            {
               ts_groups.setActiveTabIndex(TAB_PATCH);
            }
            return true;

         case 's':
            ts_groups.setActiveTabIndex(TAB_FX);
            return true;

         case 'd':
            ts_groups.setActiveTabIndex(TAB_PART);
            return true;

         case 'f':
            ts_groups.setActiveTabIndex(TAB_VOICE);
            return true;

         case 'g':
            ts_groups.setActiveTabIndex(TAB_FILTER);
            return true;

         case 'h':
            ts_groups.setActiveTabIndex(TAB_FORMANT);
            return true;

         case 'j':
            ts_groups.setActiveTabIndex(TAB_FM);
            return true;

         case 'k':
            ts_groups.setActiveTabIndex(TAB_FMMATRIX);
            return true;

         case 'o':
            toggleMuteOrSoloCurrentOp(false/*bSolo*/);
            return true;

         case 'p':
            toggleMuteOrSoloCurrentOp(true/*bSolo*/);
            return true;

         case VKEY_HOME:
            if(STConfig.b_key_swap_pattern_home_end)
               selectPreviousPatch();
            else
               selectNextPatch();
            _k.pressed = 0;  // don't allow keyrepeat
            return true;

         case VKEY_END:
            if(STConfig.b_key_swap_pattern_home_end)
               selectNextPatch();
            else
               selectPreviousPatch();
            _k.pressed = 0;  // don't allow keyrepeat
            return true;

         case VKEY_PAGEUP:
            selectPartDelta(1);
            return true;

         case VKEY_PAGEDOWN:
            selectPartDelta(-1);
            return true;
      }

      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _action) : boolean {
      ActionProvider ap <= _action.getActionProvider();
      String acName <= _action.getActionName();

      StringAction *sac;

      // trace "[>>>] FS1R::consumeAction: acName="+acName+" ap="+#(ap);

      switch(acName)
      {
         case TA_MIDISEND:
            handleMIDISendTimer();
            return true;

         case TA_FMMATRIX:
            handleFMMatrixTimer();
            return true;

         case TA_PERIODIC:
            handlePeriodicTimer();
            return true;

         case ComboBoxPopup.ACTION_OPTIONSELECTED:
            if(@(ap) == @(cmp_find_catbrowse))
            {
               handleFindCategoryBrowseOptionSelected(_action);
            }
            return true;
      }

      switch(@(ap))
      {
         default:
            if(ap instanceof CheckBox)
               if(handleDiffLockWidgetChanged(ap))
                  return true;
            return handleParamWidgetChanged(ap, true/*bUpdateFMMatrix*/, false/*bQuiet*/);

         case @(dlg_multipatch):
            if(SysExMultiPatchDialog.ACTION_COPY == acName)
            {
               handleMultiCopyPatchesToProjectBank2();
            }
            refocusDefault();
            return true;

         case @(ts_groups):
            if(TAB_FMMATRIX == ts_groups.getActiveTabIndex())
            {
               fm_matrix.setVisible(true);
               updateFMMatrix();
            }
            else
            {
               fm_matrix.setVisible(false);
            }
            return true;

         // Patch:
         case @(bt_part1):
            selectPart(0, true/*bAllowSolo*/, false/*bQuiet*/);
            return true;

         case @(bt_part2):
            selectPart(1, true/*bAllowSolo*/, false/*bQuiet*/);
            return true;

         case @(bt_part3):
            selectPart(2, true/*bAllowSolo*/, false/*bQuiet*/);
            return true;

         case @(bt_part4):
            selectPart(3, true/*bAllowSolo*/, false/*bQuiet*/);
            return true;

         case @(cb_patch_autosend):
            handlePatchAutosendChanged();
            return true;

         case @(cb_patch_diff):
            handlePatchDiffChanged();
            return true;

         case @(cb_patch_sendmulti):
            handlePatchSendMultiChanged();
            return true;

         case @(bt_patch_project):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               handleGoToFirstProjectPatch();
            }
            else
            {
               handleGoToNextBank();
            }
            return true;

         case @(cm_patch_nr):
            handlePatchNrChanged(true/*bMIDIFollow*/, true/*bAllowAutosend*/, true/*bAllowMultiChange*/);
            return true;

         case @(tf_patch_name):
            handlePatchNameChanged();
            if(TextField.ACTION_TEXTENTERED == acName)
            {
               refocusDefault();
            }
            return true;

         case @(cb_patch_recvnames):
            data.b_recv_patch_names = cb_patch_recvnames.isSelected();
            Global.PrintFast("Recv Patch Names is "+Utils.GetEnableString(data.b_recv_patch_names));
            return true;

         case @(cb_patch_recvctls):
            data.b_recv_ctls = cb_patch_recvctls.isSelected();
            Global.PrintFast("Recv Controllers is "+Utils.GetEnableString(data.b_recv_ctls));
            return true;

         case @(cb_patch_part_midi):
            data.b_send_part_midi = cb_patch_part_midi.isSelected();
            Global.PrintFast("Send Part.MIDI (Bank / Prg / Ch / ..) params is "+Utils.GetEnableString(data.b_send_part_midi));
            return true;

         case @(cm_patch_category):
            handlePatchCategoryChanged();
            return true;

         case @(cm_find_category):
            handleFindCategoryChanged();
            return true;

         case @(bt_find_catprev):
            handleFindCategoryPrev();
            return true;

         case @(bt_find_catbrowse):
            handleFindCategoryBrowse();
            return true;

         case @(bt_find_catnext):
            handleFindCategoryNext();
            return true;

         case @(bt_patch_receive_edit):
            handlePatchReceive(true/*bEdit*/, false/*bClipboard*/);
            return true;

         case @(bt_patch_receive_edit_to_clipboard):
            handlePatchReceive(true/*bEdit*/, true/*bClipboard*/);
            return true;

         // // case @(cb_bug_workarounds):
         // //    b_workaround_firmware_bugs = cb_bug_workarounds.isSelected();
         // //    Global.Print("Workarounds are "+Utils.GetEnableString(b_workaround_firmware_bugs));
         // //    return true;

         case @(bt_patch_send):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               clearMIDICache();
            }
            handlePatchSend();
            return true;

         case @(bt_patch_copy):
            handlePatchCopy();
            return true;

         case @(bt_patch_paste):
            handlePatchPaste();
            return true;

         case @(bt_patch_init):
            handlePatchInit();
            return true;

         case @(cb_patch_proxy_follow):
            handlePatchProxyFollowChanged();
            return true;

         case @(cb_patch_proxy_lock):
            handlePatchProxyLockChanged();
            return true;

         case @(cb_patch_proxy_reset):
            handlePatchProxyResetChanged();
            return true;

         case @(bt_patch_swap):
            handlePatchSwap(true/*bSwapVoice*/, true/*bSwapFX*/);
            return true;

         case @(bt_patch_tools):
            showToolsMenu();
            return true;

         case @(pm_tools):
            Global.Debug2("p12: pm_tools acName="+acName);
            switch(acName)
            {
               case PopupMenu.ACTION_CANCEL:
               case "":
                  Global.Print("Close tools menu.");
                  refocusDefault();
                  return true;

               default:
                  Global.Print("Select: "+acName);
                  return true;

               case "dump_patch_to_con":
                  Global.Debug("dump_patch_to_con:");
                  Utils.HexDump(patch.patch_data, 0, patch.patch_data.size);
                  refocusDefault();
                  return true;

               case "copy_from_replay_patch":
                  handleCopyFromReplayPatch();
                  refocusDefault();
                  return true;

               case "multicopy":
                  handleMultiCopyPatchesToProjectBank1();
                  return true;
            }
            return true;

         case @(cm_patch_multi):
            handlePatchMultiChanged();
            return true;

         case @(cm_patch_nr_part2):
            handlePatchNrPart2Changed();
            return true;

         case @(cm_patch_nr_part3):
            handlePatchNrPart3Changed();
            return true;

         case @(cm_patch_nr_part4):
            handlePatchNrPart4Changed();
            return true;

         case @(bt_multi_consecutive):
            handlePatchMultiConsecutive((Button.ACTION_HOLD_CLICK == acName)/*bRename*/);
            return true;

         case @(bt_difflock_toggle):
            handleDiffLockToggleAll();
            return true;

         case @(bt_difflock_invert):
            handleDiffLockInvert();
            return true;

         case @(cb_difflock_enable):
            data.b_difflock = cb_difflock_enable.isSelected();
            Global.PrintFast("DiffLock is "+Utils.GetEnableString(data.b_difflock));
            return true;

         case @(bt_difflock_rand):
            if(Button.ACTION_HOLD_CLICK == acName)
            {
               selectDefaultRandGroups();
               Global.Print("Select default randomization groups");
            }
            else
            {
               handleDiffLockRand();
            }
            return true;

            // FX:
         case @(cm_fx_mode):
            handleFXModeChanged();
            return true;

         case @(bt_fx_reverb_query):
            handleFXReverbQuery();
            return true;

         case @(bt_fx_reverb_init):
            handleFXReverbInit();
            return true;

         case @(cm_fx_reverb_type):
            handleFXReverbTypeChanged();
            return true;

         case @(fp_fx_reverb_pan):
            handleFXReverbPanChanged();
            return true;

         case @(fp_fx_reverb_return):
            handleFXReverbReturnChanged();
            return true;

         case @(bt_fx_variation_query):
            handleFXVariationQuery();
            return true;

         case @(bt_fx_variation_init):
            handleFXVariationInit();
            return true;

         case @(cm_fx_variation_type):
            handleFXVariationTypeChanged();
            return true;

         case @(fp_fx_variation_pan):
            handleFXVariationPanChanged();
            return true;

         case @(fp_fx_variation_return):
            handleFXVariationReturnChanged();
            return true;

         case @(fp_fx_variation_revsend):
            handleFXVariationRevSendChanged();
            return true;

         case @(bt_fx_insertion_query):
            handleFXInsertionQuery();
            return true;

         case @(bt_fx_insertion_init):
            handleFXInsertionInit();
            return true;

         case @(cm_fx_insertion_type):
            handleFXInsertionTypeChanged();
            return true;

         case @(fp_fx_insertion_pan):
            handleFXInsertionPanChanged();
            return true;

         case @(fp_fx_insertion_revsend):
            handleFXInsertionRevSendChanged();
            return true;

         case @(fp_fx_insertion_varsend):
            handleFXInsertionVarSendChanged();
            return true;

         case @(fp_fx_insertion_level):
            handleFXInsertionLevelChanged();
            return true;

         case @(bt_fx_eq_query):
            handleFXEQQuery();
            return true;

         case @(fp_fx_eq_low_freq):
            handleFXEQLowFreqChanged();
            break;

         case @(fp_fx_eq_low_gain):
            handleFXEQLowGainChanged();
            break;

         case @(fp_fx_eq_low_q):
            handleFXEQLowQChanged();
            break;

         case @(cm_fx_eq_low_shape):
            handleFXEQLowShapeChanged();
            break;

         case @(fp_fx_eq_mid_freq):
            handleFXEQMidFreqChanged();
            break;

         case @(fp_fx_eq_mid_gain):
            handleFXEQMidGainChanged();
            break;

         case @(fp_fx_eq_mid_q):
            handleFXEQMidQChanged();
            break;

         case @(fp_fx_eq_high_freq):
            handleFXEQHighFreqChanged();
            break;

         case @(fp_fx_eq_high_gain):
            handleFXEQHighGainChanged();
            break;

         case @(fp_fx_eq_high_q):
            handleFXEQHighQChanged();
            break;

         case @(cm_fx_eq_high_shape):
            handleFXEQHighShapeChanged();
            break;
      }
   }

}
