// ----
// ---- file   : NT_NewTrackDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2006-2017 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- created: 14Sep2006
// ---- changed: ..., 28Feb2011, 23Jan2015, 27Jan2015, 09Mar2015, 28Jan2017, 10Mar2017
// ----
// ----
// ----

module MNT_NewTrackDialog;

use namespace ui;
use namespace st2;


class NT_NewTrackTextInputDialog : TextInputDialog {

   static boolean b_clone_layout = true;

   CheckBox *cb_clone_layout;

   public virtual getCustomLayerHook() : Layer {
      // For adding additional widgets below textfield
      cb_clone_layout <= CheckBox.New(b_clone_layout, "Clone layout");
      cb_clone_layout.setToolTipCaption("When checked, the track will inherit the current track's cel layout");
      return deref cb_clone_layout;
   }

   public method getCloneLayoutAndSave() : boolean {
      b_clone_layout = cb_clone_layout.isSelected();
      return b_clone_layout;
   }
}


class NT_NewTrackDialog extends ActionConsumer {
   NT_NewTrackTextInputDialog *d;
   NodeTrackerEditor *editor;

   public method run(NodeTrackerEditor _editor) {
      editor <= _editor;

      d <= new NT_NewTrackTextInputDialog;
      d.initTextInputDialog("New track",
                            "Please enter track name:",
                            "\aCreate track",
                            "Cancel",
                            editor.uiGetNextTrackName(),
                            255, 16,
                            "textinput"/*iconName*/, false/*bHold*/,
                            this
                            );

      d.recursiveSetLookAndFeel(LookAndFeel.LIGHT);
      d.showNearMouse(10,-20);
   }

   public virtual consumeAction(Action _action) : boolean {
      if(_action instanceof StringAction)
      {
         StringAction sac <= _action;
         if(sac.getActionProvider() == d)
         {
            boolean bCloneLayout = d.getCloneLayoutAndSave();
            d <= null; // Delete dialog
            if(sac.getActionName() == TextInputDialog.ACTION_TEXTINPUTDIALOGCLOSED)
            {
               String name = sac.getStringValue();
               if(!name.isBlank())
               {
                  editor.cmd_track_new(name, bCloneLayout);
                  return true;
               }
            }
         }
      }
      Global.Debug2("CMD track_new aborted.");
      return true;
   }
}
