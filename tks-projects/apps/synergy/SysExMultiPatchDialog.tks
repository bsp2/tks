// ----
// ---- file   : SysExMultiPatchDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2019-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 29Jan2019
// ---- changed: 04Oct2023
// ----
// ----
// ----

module MSysExMultiPatchDialog;

use namespace ui;


// <class.png>
class SysExMultiPatchDialog extends Dialog, ActionProvider {

   define String ACTION_COPY   = "onMultiCopyPatches";
   define String ACTION_CANCEL = "onMultiCopyPatchesCancel";

   protected XMLForm *xfm;

   protected TableView         *tv_patches;
   protected SysExMultiPatchTM *tm_patches;

   protected TextField *tf_filter;
   protected FloatParam *fp_dst;

   protected Button *bt_cancel;
   protected Button *bt_copy;

   protected EditMIDISynthForm *synthform;

   protected int pref_patch_idx;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("SysExMultiPatchDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      tm_patches <= new SysExMultiPatchTM;
      tm_patches.initTableModel();
      tv_patches.setTableModel(tm_patches);

      initWindow(xfm,
                 "Multi-Copy Patches to Project Bank",
                 100, 100,
                 940, 540
                 );

      return true;
   }

   // <method_get.png>
   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_COPY, ACTION_CANCEL];
   }

   // <method_get.png>
   public virtual isPopup() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual isModal():boolean {
      return true;
   }

   // <method_get.png>
   public virtual isResizable() : boolean {
      return true;
   }

   // <ui_show.png>
   public method showPatches(EditMIDISynthForm _synthform, int _currentPatchIdx) {
      synthform <= _synthform;

      pref_patch_idx = _currentPatchIdx;

      tf_filter.setText("");
      rebuildEntries();

      showCentered();
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {
      layers.add(tv_patches);
      layers.add(tf_filter);
   }

   // <ui_kbd.png>
   public virtual getTabCycleOverrides() : PointerArray {
      PointerArray layers; layers.empty();
      addTabCycleOverrides(layers);
      return layers;
   }

   // <ui_show.png>
   protected virtual preShow() {

      // // if(!b_layer_postinit_done)
      // // {
      // //    resizeToMinimum();
      // // }

      relayout();

      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      UI.SetKeyboardFocus(tv_patches);
   }

   // <method.png>
   protected method rebuildEntries() {
      int prefPatchRow = tm_patches.rebuildEntries(synthform, tf_filter.getText(), pref_patch_idx);
      tv_patches.tableModelChanged();
      if(-1 != prefPatchRow)
      {
         tv_patches.setLeadSelection(prefPatchRow);
         tv_patches.moveCursorToRow(prefPatchRow);
         tv_patches.centerRow();
      }
      else
      {
         tv_patches.setLeadSelection(-1);
         tv_patches.moveCursorToFirstRow();
      }
      tm_patches.selectNone();
   }

   // <ui_handle.png>
   protected method handleFilterChanged() {
      local String flt <= tf_filter.getText();
      rebuildEntries();
      Global.Print("Filter is \""+flt+"\" ("+(tm_patches.entries.numElements)+" result"+Utils.GetPluralString(tm_patches.entries.numElements)+")");
   }

   // <method_get.png>
   public method getSelectedPatchIndices() : IntArray {
      local IntArray ret;
      local IntArray rows = tm_patches.getSelectedRows();
      if(0 == rows.numElements)
         rows.add(tm_patches.getCursorIndex());

      int rowIdx;
      foreach rowIdx in rows
      {
         SysExMultiPatchDO en <= tm_patches.entries.get(rowIdx);
         if(null != en)
            ret.add(en.patch_idx);
      }

      return deref ret;
   }

   // <method_get.png>
   public method getDestinationProgramIndex() : int {
      return fp_dst.getFloatValue() - 1;
   }

   // <ui_handle.png>
   protected method handleCancel() {
      hide();

      if(synthform instanceof ActionConsumer)
      {
         Action ac <= Action.New(getProvidedActionAlias(ACTION_CANCEL), this);
         synthform.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <ui_handle.png>
   protected method handleCopy() {
      hide();

      if(synthform instanceof ActionConsumer)
      {
         Action ac <= Action.New(getProvidedActionAlias(ACTION_COPY), this);
         synthform.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   // <method.png>
   public method autoFocusFilterWidget(Key _k) {
      if(@(UI.GetKeyboardFocus()) != @(tf_filter))
      {
         UI.SetKeyboardFocus(tf_filter);
         tf_filter.selectAll();
      }
      tf_filter.onKey(_k);
   }

   // <ui_kbd.png>
   public virtual onKey(Key _key) : boolean {
      switch(_key.pressed)
      {
         case VKEY_ESCAPE:
            handleCancel();
            return true;

         case VKEY_RETURN:
         case VKEY_SPACE:
            handleCopy();
            return true;

         default:
            // trace "xxx autofocus: key.pressed="+_key.pressed;
            if(0 != _key.unicode)
            {
               autoFocusFilterWidget(_key);
               return true;
            }
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();

      ////trace "xxx SysExMultiPatchDialog: got action name="+name;

      switch(acName)
      {
         case "ok":
            handleCopy();
            break;

         case "cancel":
            handleCancel();
            break;
      }

      switch(@(_ac.getActionProvider()))
      {
         case @(tf_filter):
            if(TextField.ACTION_CURSORUP == acName)
            {
               UI.SetKeyboardFocus(tv_patches);
            }
            else if(TextField.ACTION_CURSORDOWN == acName)
            {
               UI.SetKeyboardFocus(bt_copy);
            }
            else
            {
               handleFilterChanged();
            }
            return true;

         case @(tv_patches):
            if(TableView.ACTION_ROWCLICKED == acName)
            {
            }
            else if(TableView.ACTION_ROWSELECTED == acName)
            {
            }
            return true;

         case @(fp_dst):
            Global.Print("First Destination Program is "+fp_dst.getFloatValue());
            return true;

         case @(bt_copy):
            handleCopy();
            return true;

         case @(bt_cancel):
            handleCancel();
            return true;
      }

      return true;
   }

}
