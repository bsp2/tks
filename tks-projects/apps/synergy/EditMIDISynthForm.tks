// ----
// ---- file   : EditMIDISynthForm.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2013-2022 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 06Apr2013
// ----
// ---- changed: 11Aug2014, 05Feb2016, 09Feb2017, 07May2017, 09May2017, 26May2017, 10Sep2017
// ----          26Jan2019, 27Jan2019, 28Jan2019, 15Jul2019, 17Nov2019, 13Jul2021, 13Oct2022
// ----          01Nov2022, 03Nov2022, 07Nov2022, 14Nov2022
// ----
// ----
// ----

module MEditMIDISynthForm;

use namespace ui;
use namespace st2;


// <class.png>
class EditMIDISynthForm : XMLForm, MIDIMapContext, MMTListener {

   public boolean b_layout_done;

   public int proxy_multimorph_bank;  // bank idx + 1. e.g. 17 for Prophet12, 15 for GenericSynthEdit
   public int num_programs_per_bank;
   public int num_banks;

   public short proxy_bank;         // bank idx (0..n)
   public short proxy_program;      // program idx (0..n)
   public short proxy_bank_dst;     // bank idx. for RT morph
   public short proxy_program_dst;  // program idx
   public float proxy_amount_dst;   // 0..1

   StringArray bank_names;


   // <init.png>
   public method init(MIDISynthProfile _profile) : boolean {
      bank_names = ["A", "B", "C", "D",
                    "E", "F", "G", "H",
                    "I", "J", "K", "L",
                    "M", "N", "O", "P"
                    ];
   }

   // <ui_show.png>
   public abstract method showData(MIDISynthProfileData _profData,
                                   STX_MIDIInDevice     _inDev,
                                   STX_MIDIOutDevice    _outDev,
                                   byte                 _midiCh
                                   ) {
   }

   // <ui_show.png>
   public method showDataStatic(MIDISynthProfileData _profData,
                                STX_MIDIInDevice     _inDev,
                                STX_MIDIOutDevice    _outDev,
                                byte                 _midiCh
                                ) {
      // Called during program startup
      // Used to init singleton editors (e.g. P12) so NodeProxy works without the editor ever being shown
   }

   // <method_set.png>
   public method setInjectFrameRecDevChHint(int _devIdx, byte _midiCh) {
   }

   // <ui_show.png>
   public method enter() {
   }

   // <ui_show.png>
   public method leave() {
   }

   // <method_get.png>
   public method isEditorLocked() : boolean {
      return false;
   }

   // <midi.png>
   public method handlePushToggleSize() {
   }

   // <ui_focus.png>
   public method refocusDefault() {
   }

   // // public method addMMTFocusLayers(PointerArray _layers) {
   // // }

   // <ui_handle.png>
   public method handlePageSysExMIDIChChanged(ComboBox _cmMidiCh) : boolean {
      return false;
   }

   // <replay.png>
   public method handleReplayTimer() {
      // Called from replay thread
   }

   // <replay.png>
   public method handleProxyReset(byte _midiCh, MIDIPipeFrame _frame) {
      // Called from replay thread
      // (note) 'midiCh' is only relevant for multi-timbral synths (e.g. FS1R)
   }

   // <replay.png>
   public method handleProxyBankSelect(byte _midiCh, short _bankNr) {
      // Called from replay thread
   }

   // <replay.png>
   public method handleProxyProgramChange(byte          _midiCh,
                                          short         _programNr,
                                          MIDIPipeFrame _frameOut,
                                          boolean       _bMorphFollows
                                          ) {
      // Called from replay thread
   }

   // <replay.png>
   public method handleProxyBankSelectDst(byte _midiCh, short _bankNr) {
      // Called from replay thread
   }

   // <replay.png>
   public method handleProxyProgramChangeDst(byte _midiCh, short _programNr) {
      // Called from replay thread
   }

   // <replay.png>
   public method handleProxyAmountDst(byte _midiCh, float _amount) {
      // Called from replay thread
   }

   // <replay.png>
   public method handleProxyMorph(byte _midiCh, MIDIPipeFrame _frameOut) {
   }

   // <replay.png>
   public method handleProxyEvents(byte          _midiCh,
                                   MIDIPipeFrame _frameIn,
                                   boolean       _bFrameRec,
                                   int           _inDev,
                                   byte          _inCh,
                                   MIDIPipeFrame _frameOut
                                   ) {
      // Called from replay thread (at end of NodeProxy tick)
   }

   // <replay.png>
   public method handleProxyNotes(int _autoDevFlt, int _autoChFlt, MIDIPipeFrame _frame, boolean _bMuted) {
   }

   // <replay.png>
   public method handleProxyLayerPrgChg(byte          _midiCh,
                                        IntArray      _layerPrgChg/*16 elements*/,
                                        MIDIPipeFrame _frameOut
                                        ) {
      // (note) prgChg starts at idx=0
   }

   // <method.png>
   public method handlePostReload() {
   }

   // <method_get.png>
   public method getBankNames() : StringArray {
   }

   // <method_get.png>
   public method getProgramNames(int _bankIdx) : StringArray {
   }

   // <method.png>
   public method initBank(int _idx) {
      // called via PageSysEx::handlePageCmdInitBank()
   }

   // <method.png>
   public method printCurrentPatchNrInfo(int _patchNr, String _patchName) {
      local Integer bankIdx = _patchNr / 128;
      local Integer prgIdx = _patchNr & 127;
      local Integer bankNr = bankIdx + 1;
      local Integer prgNr = prgIdx + 1;
      Global.Print("Select patch "+bank_names.get(bankIdx)+prgNr.printf("%03d")+" \""+_patchName+"\" b:$"+bankNr.printf("%02x")+" p:$"+prgNr.printf("%02x"));
   }

}
