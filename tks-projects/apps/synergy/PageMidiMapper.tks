// ----
// ---- file   : PageMidiMapper.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2014-2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi/audio sequencer.
// ----
// ---- created: 14Aug2014
// ---- changed: 19Aug2014, 05Sep2014, 16Sep2014, 23Feb2015, 06Mar2015, 09Feb2017, 29Jan2019
// ----          24Feb2020
// ----
// ----
// ----

module MPageMidiMapper;

use namespace ui;
use namespace st2;


// <class.png>
class PageMidiMapper : Page {

   protected Button *bt_parent;

   protected Button *bt_morph;
   protected Button *bt_uiglobal;


   // <ui_init.png>
   public method init() : boolean {

      if(!initPakFile("PageMidiMapper.xfm"))
      {
         return false;
      }

      autoResolveIds(this);

      recursiveSetEnableCursorKeyTabCycling(false);

      return true;
   }

   // <ui_page.png>
   public virtual pageGetParent() : int {
      // return RootForm.PAGE_START;
      return RootForm.PAGE_PIPEMAP;
   }

   // <ui_page.png>
   public virtual pageFocusDefault() {
      UI.SetKeyboardFocus(bt_morph);
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      _retLayers = [
         bt_morph,
         bt_uiglobal
                              ];
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      return false;
   }

   // <ui_show.png>
   public method showCurrentScene() {
      if(!root_form.isCurrentPageModal())
      {
         // root_form.pg_editmidimorph.showCurrentMMS(RootForm.PAGE_MIDIMAPPER);
         root_form.pg_editmidimorph.showCurrentMMS(RootForm.PAGE_PIPEMAP);
         root_form.showPage(RootForm.PAGE_EDITMIDIMORPH, false/*bAllowHistory*/);
      }
   }

   // <ui_show.png>
   public method showGlobalMidiMap() {
      if(!root_form.isCurrentPageModal())
      {
         // root_form.pg_editmidimap.showMMC(root_form, RootForm.PAGE_MIDIMAPPER, false/*automove*/, true/*bGlobal*/);
         root_form.pg_editmidimap.showMMC(root_form, RootForm.PAGE_PIPEMAP, false/*automove*/, true/*bGlobal*/);
         root_form.showPage(RootForm.PAGE_EDITMIDIMAP, false/*bAllowHistory*/);
      }
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {

      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      //trace "xxx PageStart::consumeAction: acName=\""+acName+"\".";

      switch(@(ap))
      {
         case @(bt_morph):
            showCurrentScene();
            return true;

         case @(bt_uiglobal):
            showGlobalMidiMap();
            return true;

         case @(bt_parent):
            root_form.showPageParent();
            return true;
      }

      return Page::consumeAction(_ac);
   }

}
