// ----
// ---- file   : MIDIMorphSceneMultiTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 06Jun2018
// ---- changed: 03Aug2024
// ----
// ----
// ----

module MMIDIMorphSceneMultiTM;

use namespace ui;
use namespace st2;


// <class.png>
class MIDIMorphSceneMultiTM : TableModel {

   define int COL_NR    =  0;
   define int COL_NAME  =  1;
   define int COL_A     =  2;
   define int COL_B     =  3;
   define int COL_C     =  4;
   define int COL_D     =  5;
   define int COL_E     =  6;
   define int COL_F     =  7;
   define int COL_G     =  8;
   define int COL_H     =  9;
   define int NUM_COLS  = 10;


   public virtual getNumColumns() : int {
      return NUM_COLS;
   }

   public virtual getColumnCaption(int _col) : String {
      return ["Nr", "Name", "A", "B", "C", "D", "E", "F", "G", "H"][_col];
   }

   public virtual getNumRows() : int {
      return MIDIMorphScene.NUM_MULTIS;
   }

   public virtual getCellCaption(int _col, _row) : String {
      MIDIMorphMulti multi <= MIDIMorphScene.GetMultiByIdx(_row);

      if(null != multi)
      {
         switch(_col)
         {
            case COL_NR:
               return String(_row+1);

            case COL_NAME:
               return multi.name;

            case COL_A:
               return multi.getSceneNrStringByGroupIdx(0);

            case COL_B:
               return multi.getSceneNrStringByGroupIdx(1);

            case COL_C:
               return multi.getSceneNrStringByGroupIdx(2);

            case COL_D:
               return multi.getSceneNrStringByGroupIdx(3);

            case COL_E:
               return multi.getSceneNrStringByGroupIdx(4);

            case COL_F:
               return multi.getSceneNrStringByGroupIdx(5);

            case COL_G:
               return multi.getSceneNrStringByGroupIdx(6);

            case COL_H:
               return multi.getSceneNrStringByGroupIdx(7);
         }
      }
   }

   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_NR:
            return 30;

         case COL_NAME:
            return 110;

         case COL_A:
         case COL_B:
         case COL_C:
         case COL_D:
         case COL_E:
         case COL_F:
         case COL_G:
         case COL_H:
            return 80;
      }
   }

   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_NR:
            return 30;

         case COL_NAME:
            return 150;

         case COL_A:
         case COL_B:
         case COL_C:
         case COL_D:
         case COL_E:
         case COL_F:
         case COL_G:
         case COL_H:
            return 80;
      }
   }

   public virtual getRowHeight(int _row) : int {
      return 26*UI.font_scaling;
   }

   public virtual updateCellRendererColors(Layer l, int _col, int _row, int _visibleRow) {
      if(l instanceof Label)
      {
         // (todo) should be moved to getCellRenderer()
         Label lb <= l;
         switch(_col)
         {
            case COL_NR:
               lb.setFontByName("big6");
               break;

            case COL_NAME:
               lb.setFontByName("big7");
               break;

            default:
               lb.setFontByName(UIConstants.DEFAULT_FONT_NAME_LABEL);
               break;
         }
      }
      TableModel::updateCellRendererColors(l, _col, _row, _visibleRow);
   }

   public virtual handleCellOnMouse(int _col, int _row, MouseEvent _ev) : boolean {
      MIDIMorphMulti multi <= MIDIMorphScene.GetMultiByIdx(_row);

      if(null != multi)
      {
         if(COL_A <= _col <= COL_H)
         {
            int groupIdx = _col - COL_A;
            int sceneIdx;
            MIDIMorphScene *mms;

            if(_ev.wheelUp() || _ev.leftButtonDown())
            {
               sceneIdx = multi.incGroup(groupIdx);
               mms <= MIDIMorphScene.GetSceneByIdx(groupIdx, sceneIdx);
               if(null != mms)
               {
                  Global.Print("Group "+tcchar('A' + groupIdx)+" scene is "+(sceneIdx+1)+" ("+mms.mms_name+")");
               }
               else
               {
                  Global.Print("Group "+tcchar('A' + groupIdx)+" scene is -");
               }
               return true;
            }
            if(_ev.wheelDown() || _ev.rightButtonDown())
            {
               sceneIdx = multi.decGroup(groupIdx);
               mms <= MIDIMorphScene.GetSceneByIdx(groupIdx, sceneIdx);
               if(null != mms)
               {
                  Global.Print("Group "+tcchar('A' + groupIdx)+" scene is "+(sceneIdx+1)+" ("+mms.mms_name+")");
               }
               else
               {
                  Global.Print("Group "+tcchar('A' + groupIdx)+" scene is -");
               }
               return true;
            }

         }
      }
      return false;
   }

   public virtual handleCellEditing(TableCellEditor _tce) {
      switch(_tce.table_col)
      {
         case COL_NAME:
            handleCellEdited(_tce);
            break;
      }
   }

   public virtual handleCellEdited(TableCellEditor _tce) {

      MIDIMorphMulti multi <= MIDIMorphScene.GetMultiByIdx(_tce.table_row);

      if(null != multi)
      {
         TableCellEditorString *tcestr;

         switch(_tce.table_col)
         {
            case COL_NAME:
               tcestr <= _tce;
               multi.name = tcestr.getText();

               tableModelChanged();
               break;
         }
      }
   }

   public virtual getCellEditor(int _col, int _row) : TableCellEditor {

      MIDIMorphMulti multi <= MIDIMorphScene.GetMultiByIdx(_row);

      if(null != multi)
      {
         TableCellEditorString *tcestr;

         switch(_col)
         {
            case COL_NAME:
               tcestr <= new TableCellEditorString;
               tcestr.initStringEditor(multi.name);
               tcestr.setMaxCols(16);
               return deref tcestr;
         }
      }
   }

}
