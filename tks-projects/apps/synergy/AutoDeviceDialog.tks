// ----
// ---- file   : AutoDeviceDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2020-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 30Oct2020
// ---- changed: 04Oct2023, 30Oct2023
// ----
// ----
// ----

module MAutoDeviceDialog;

use namespace ui;


// <class.png>
class AutoDeviceDialog extends Dialog, ActionProvider {
   protected Node *node;
   protected boolean b_b;

   protected XMLForm *xfm;

   protected CheckBox *cb_send_prgchg;
   protected CheckBox *cb_recv_prgchg;

   protected AutoDeviceForm *parent_form;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("AutoDeviceDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      initWindow(xfm,
                 "Advanced Auto-Device Port Settings",
                 100, 100,
                 640, 240
                 );

      resizeToMinimum();

      return true;
   }

   // <method_get.png>
   public virtual isPopup() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual isModal():boolean {
      return true;
   }

   // <method_get.png>
   public virtual isResizable() : boolean {
      return false;
   }


   // <ui_kbd.png>
   public virtual getTabCycleOverrides() : PointerArray {
      return getTabCycleOverridesDef();
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray _retLayers) {
      _retLayers.joinRR(_retLayers,
                        [
                           cb_send_prgchg,
                           cb_recv_prgchg
                         ]
                        );
   }

   // <ui_show.png>
   public method showNode(AutoDeviceForm _parentForm, Node _node, boolean _bB) {
      parent_form <= _parentForm;
      node <= _node;
      b_b = _bB;

      if(b_b)
      {
         cb_send_prgchg.setSelected(node.b_auto_send_prgchg_b);
         cb_recv_prgchg.setSelected(node.b_auto_recv_prgchg_b);
      }
      else
      {
         cb_send_prgchg.setSelected(node.b_auto_send_prgchg_a);
         cb_recv_prgchg.setSelected(node.b_auto_recv_prgchg_a);
      }

      showNearMouse(0, 0);
   }

   // // <ui_show.png>
   // protected virtual preShow() {

   //    if(!b_layer_postinit_done)
   //    {
   //       resizeToMinimum();
   //    }

   //    Dialog::preShow();
   // }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      // // UI.SetKeyboardFocus(cb_send_prgchg);
   }

   // <ui_handle.png>
   protected =replay= method handleSendPrgChgChanged() {
      boolean bEnable = cb_send_prgchg.isSelected();
      if(b_b)
      {
         node.b_auto_send_prgchg_b = bEnable;
         Global.Print("[B] Send Pattern PrgChg is "+Utils.GetEnableString(bEnable));
      }
      else
      {
         node.b_auto_send_prgchg_a = bEnable;
         Global.Print("[A] Send Pattern PrgChg is "+Utils.GetEnableString(bEnable));
      }
   }

   // <ui_handle.png>
   protected =replay= method handleRecvPrgChgChanged() {
      boolean bEnable = cb_recv_prgchg.isSelected();
      if(b_b)
      {
         node.b_auto_recv_prgchg_b = bEnable;
         Global.Print("[B] Recv Pattern PrgChg is "+Utils.GetEnableString(bEnable));
      }
      else
      {
         node.b_auto_recv_prgchg_a = bEnable;
         Global.Print("[A] Recv Pattern PrgChg is "+Utils.GetEnableString(bEnable));
      }
   }

   // <ui.png>
   public virtual hide() {
      parent_form.updateCustomSettingsIndicators();
      Dialog::hide();
      // parent_form.refocusDefault();
   }

   // <ui_kbd.png>
   public virtual onKey(Key _key) : boolean {
      switch(_key.pressed)
      {
         case VKEY_ESCAPE:
            hide();
            return true;

         default:
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String name=_ac.getActionName();

      ////trace "xxx AutoDeviceDialog: got action name="+name;

      switch(@(_ac.getActionProvider()))
      {
         case @(cb_send_prgchg):
             handleSendPrgChgChanged();
             return true;

         case @(cb_recv_prgchg):
             handleRecvPrgChgChanged();
             return true;
      }

      return true;
   }

}
