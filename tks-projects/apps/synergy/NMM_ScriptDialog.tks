// ----
// ---- file   : NMM_ScriptDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2017-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" sequencer.
// ----
// ---- created: 11Mar2017
// ---- changed: 12Mar2017, 05Jun2017, 24Mar2023, 04Oct2023, 30Oct2023
// ----
// ----
// ----
module MNMM_ScriptDialog;

use namespace ui;


// <class.png>
class NMM_ScriptDialog extends Dialog {

   protected XMLForm *xfm;

   protected NodeModMatrixEditor *parent_editor;

   protected TextEdit *tx_script;

   protected Button *bt_parse;
   protected Button *bt_from_pattern;
   protected Button *bt_close;


   // <ui_init.png>
   public method init(NodeModMatrixEditor _editor) : boolean {

      parent_editor <= _editor;

      initDialog();

      xfm <= XMLForm.New_PakFile("NMM_ScriptDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      initWindow(xfm,
                 "ModMatrix Pattern Initialization Script",
                 100, 100,
                 640*UI.font_scaling, 320*UI.font_scaling
                 );

      return true;
   }

   public virtual isPopup() : boolean {
      return true;
   }

   public virtual isModal():boolean {
      return true;
   }

   public virtual isResizable() : boolean {
      return true;
   }

   // <ui_show.png>
   protected virtual preShow() {

      if(!b_layer_postinit_done)
         relayout();

      Dialog::preShow();
   }

   // <ui_show.png>
   protected virtual postShow() {
      Dialog::postShow();
      UI.SetKeyboardFocus(tx_script);

      NMM_Pattern pat <= parent_editor.getEditPattern();
      if(null != pat)
      {
         tx_script.setText(pat.last_script);
         tx_script.validateCursorPosition();
      }

      tx_script.startEditing();
   }

   // <ui_hide.png>
   protected virtual hide() {

      tx_script.stopEditing(true/*bQuiet*/);

      NMM_Pattern pat <= parent_editor.getEditPattern();
      if(null != pat)
      {
         pat.last_script = getCurrentScript();

         parent_editor.updateScriptButtonTint(pat);
      }

      Dialog::hide();
   }

   // <ui_handle.png>
   protected method handleParse() {
      Global.Print("Init script from pattern");

      try
      {
         parent_editor.parseMultiScript(tx_script.getText(), true/*bThrow*/, true/*bGen*/);
         tx_script.setHighlightLineIdx(-1, 0);
      }
      catch(NMM_Arg::ParseError e)
      {
         tx_script.setHighlightLineIdx(parent_editor.script_error_line_idx, #ffdf4040);
         tx_script.gotoLine(parent_editor.script_error_line_idx);
         tx_script.makeLineVisible(parent_editor.script_error_line_idx);
      }
   }

   // <ui_handle.png>
   public method handleFromPattern() {

      String s = "";
      parent_editor.genMultiScriptFromPattern(s);
      tx_script.setText(s);
      tx_script.validateCursorPosition();

      Global.Print("Init script from pattern");
   }

   // <ui_handle.png>
   protected method handleClose() {
      hide();
   }

   // <method_get.png>
   public method getCurrentScript() : String {
      return tx_script.getText();
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      // trace "xxx scriptdlg: k.name="+_k.name+" pressed="+_k.pressed;
      switch(_k.pressed)
      {
         case VKEY_ESCAPE:
            handleClose();
            return true;

         case VKEY_RETURN:
            if(_k.modCtrl())
            {
               handleParse();
               return true;
            }
            break;

         case 'e':
            // (note) not reachable, consumed by TextEdit widget
            if(_k.modCtrl())
            {
               handleClose();
               return true;
            }
            break;

         case 'f':
            if(_k.modCtrl())
            {
               handleClose();
               return true;
            }
            break;

         case 'p':
            if(_k.modCtrl())
            {
               handleFromPattern();
               return true;
            }
            break;

         default:
            break;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      // String name <= _ac.getActionName();

      switch(@(_ac.getActionProvider()))
      {
         case @(bt_parse):
            handleParse();
            return true;

         case @(bt_from_pattern):
            handleFromPattern();
            return true;

         case @(bt_close):
            handleClose();
            return true;
      }

      return true;
   }

}
