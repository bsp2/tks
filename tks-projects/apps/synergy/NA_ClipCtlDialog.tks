// ----
// ---- file   : NA_ClipCtlDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 07Mar2025
// ---- changed: 08Mar2025, 09Mar2025
// ----
// ----
// ----

module MNA_ClipCtlDialog;

use namespace ui;
use namespace st2;


// <class.png>
class NA_ClipCtlDialog extends Dialog, KeyboardFocusListener {
   protected NodeArrangerEditor *parent_editor;
   protected NodeArranger       *parent_arranger;
   protected NA_State           *parent_tstate;
   protected NA_Clip            *clip;

   XMLForm xfm;

   protected Button     *bt_default;
   protected Button     *bt_ctl_mw;
   protected FloatParam *fp_ctl_mw;
   protected Button     *bt_ctl_bc;
   protected FloatParam *fp_ctl_bc;
   protected Button     *bt_ctl_fc;
   protected FloatParam *fp_ctl_fc;
   protected Button     *bt_ctl_ex;
   protected FloatParam *fp_ctl_ex;
   protected Button     *bt_ctl_gp1;
   protected FloatParam *fp_ctl_gp1;
   protected Button     *bt_ctl_gp2;
   protected FloatParam *fp_ctl_gp2;
   protected Button     *bt_ctl_gp3;
   protected FloatParam *fp_ctl_gp3;
   protected Button     *bt_ctl_gp4;
   protected FloatParam *fp_ctl_gp4;
   protected FloatParam *fp_tmp;

   protected int def_ctl_idx;


   // <ui_init.png>
   public method init() : boolean {

      initDialog();

      xfm <= XMLForm.New_PakFile("NA_ClipCtlDialog.xfm");
      if(null == xfm)
         return false;

      xfm.autoResolveIds(this);

      bt_ctl_mw .setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_ctl_bc .setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_ctl_fc .setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_ctl_ex .setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_ctl_gp1.setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_ctl_gp2.setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_ctl_gp3.setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));
      bt_ctl_gp4.setForegroundColor(lnf_colors.get(LookAndFeel.COLOR_LABEL_CAPTION_FG));

      fp_tmp.setMinMaxValues(-1, 127);
      fp_tmp.setPrecision(3);
      fp_tmp.setNegativeText("-");

      initWindow(xfm,
                 "Clip Ctl",
                 100, 100,
                 180*UI.font_scaling, 100
                 );

      return true;
   }

   // <method_get.png>
   public virtual isPopup() : boolean {
      return true;
   }

   // <method_get.png>
   public virtual isModal():boolean {
      return true;
   }

   // <method_get.png>
   public virtual isResizable() : boolean {
      return false;
   }

   // <ui_show.png>
   public method showClipCtlDialog(NodeArrangerEditor _editor,
                                   NodeArranger       _arranger,
                                   NA_Clip            _clip,
                                   int                _ctlIdx
                                   ) {
      parent_editor   <= _editor;
      parent_arranger <= _arranger;
      parent_tstate   <= _editor.timeline.data.tstate;
      clip            <= _clip;

      fp_ctl_mw .setValue(clip.getInitCtl(NA_Clip.INITCTL_MW));
      fp_ctl_bc .setValue(clip.getInitCtl(NA_Clip.INITCTL_BC));
      fp_ctl_fc .setValue(clip.getInitCtl(NA_Clip.INITCTL_FC));
      fp_ctl_ex .setValue(clip.getInitCtl(NA_Clip.INITCTL_EX));
      fp_ctl_gp1.setValue(clip.getInitCtl(NA_Clip.INITCTL_GP1));
      fp_ctl_gp2.setValue(clip.getInitCtl(NA_Clip.INITCTL_GP2));
      fp_ctl_gp3.setValue(clip.getInitCtl(NA_Clip.INITCTL_GP3));
      fp_ctl_gp4.setValue(clip.getInitCtl(NA_Clip.INITCTL_GP4));

      def_ctl_idx = _ctlIdx;

      showNearMouse(-10*UI.font_scaling, -10*UI.font_scaling);

      UI.SetKeyboardFocusListener(this);
   }

   // <ui_show.png>
   public virtual postShow() {

      Dialog::postShow();

      resizeToMinimum();
      validateClippedPosition();

      refocusDefault();

      FloatParam fp <= UI.GetKeyboardFocus();
      if(fp instanceof FloatParam)
         fp.onTabFocus();
   }

   // <ui_hide.png>
   public virtual hide() {
      UI.SetKeyboardFocusListener(null);
      Dialog::hide();
   }

   // <ui_kbd.png>
   protected method refocusDefault() {
      // // trace "xxx refocusDefault: fp_ctl_mw="+#(fp_ctl_mw);
      switch(def_ctl_idx)
      {
         case NA_Clip.INITCTL_MW:
            UI.SetKeyboardFocus(fp_ctl_mw);
            break;

         case NA_Clip.INITCTL_BC:
            UI.SetKeyboardFocus(fp_ctl_bc);
            break;

         case NA_Clip.INITCTL_FC:
            UI.SetKeyboardFocus(fp_ctl_fc);
            break;

         case NA_Clip.INITCTL_EX:
            UI.SetKeyboardFocus(fp_ctl_ex);
            break;

         case NA_Clip.INITCTL_GP1:
            UI.SetKeyboardFocus(fp_ctl_gp1);
            break;

         case NA_Clip.INITCTL_GP2:
            UI.SetKeyboardFocus(fp_ctl_gp2);
            break;

         case NA_Clip.INITCTL_GP3:
            UI.SetKeyboardFocus(fp_ctl_gp3);
            break;

         case NA_Clip.INITCTL_GP4:
            UI.SetKeyboardFocus(fp_ctl_gp4);
            break;
      }
   }

   // <ui_kbd.png>
   public virtual addTabCycleOverrides(PointerArray layers) {
      layers.joinRR(layers,
                    [
                       bt_default,
                       fp_ctl_mw,
                       fp_ctl_bc,
                       fp_ctl_fc,
                       fp_ctl_ex,
                       fp_ctl_gp1,
                       fp_ctl_gp2,
                       fp_ctl_gp3,
                       fp_ctl_gp4,
                     ]
                    );
   }

   // <method.png>
   protected method toggleCtlDecHex(FloatParam _fp) {
      _fp.toggleHex();
      _fp.setMousePrecision((FloatParam.DISPLAY_HEX == _fp.getDisplayType()) ? 0 : 3);
   }

   // <ui_handle.png>
   protected =replay= method handleCtlChanged(String _id, int _ctlIdx, float _value) {
      String msgPrefix <= "Init Ctl ";
      clip.setInitCtl(_ctlIdx, _value);
      parent_editor.redraw();
      Global.Print(msgPrefix+" \""+_id+"\" is "+((_value >= 0.0f) ? _value : "<unassigned>"));
   }

   // <method_get.png>
   public method getInitCtlString(NA_Clip _clip, int _ctlIdx) : String {
      FloatParam fp <= [fp_ctl_mw, fp_ctl_bc, fp_ctl_fc, fp_ctl_ex,
                        fp_ctl_gp1, fp_ctl_gp2, fp_ctl_gp3, fp_ctl_gp4
                        ].get(_ctlIdx);
      fp_tmp.setDisplayType(fp.getDisplayType());
      fp_tmp.setValue(_clip.getInitCtl(_ctlIdx));
      // // trace "xxx value="+_clip.getInitCtl(_ctlIdx)+" => s=\""+fp_tmp.getDisplayedText()+"\"";
      return fp_tmp.getDisplayedText();
   }

   // <ui_kbd.png>
   public virtual handleKeyboardFocusChanged(Layer _newKeyboardLayer) {
      // KeyboardFocusListener
      switch(@(_newKeyboardLayer))
      {
         case @(bt_default):
            parent_tstate.clip_edit_mode = NA_State.CLIP_EDIT_MODE_DEFAULT;
            def_ctl_idx = -1;
            break;

         case @(bt_ctl_mw):
         case @(fp_ctl_mw):
            parent_tstate.clip_edit_mode = NA_State.CLIP_EDIT_MODE_INITCTL_MW;
            def_ctl_idx = NA_Clip.INITCTL_MW;
            break;

         case @(bt_ctl_bc):
         case @(fp_ctl_bc):
            parent_tstate.clip_edit_mode = NA_State.CLIP_EDIT_MODE_INITCTL_BC;
            def_ctl_idx = NA_Clip.INITCTL_BC;
            break;

         case @(bt_ctl_fc):
         case @(fp_ctl_fc):
            parent_tstate.clip_edit_mode = NA_State.CLIP_EDIT_MODE_INITCTL_FC;
            def_ctl_idx = NA_Clip.INITCTL_FC;
            break;

         case @(bt_ctl_ex):
         case @(fp_ctl_ex):
            parent_tstate.clip_edit_mode = NA_State.CLIP_EDIT_MODE_INITCTL_EX;
            def_ctl_idx = NA_Clip.INITCTL_EX;
            break;

         case @(bt_ctl_gp1):
         case @(fp_ctl_gp1):
            parent_tstate.clip_edit_mode = NA_State.CLIP_EDIT_MODE_INITCTL_GP1;
            def_ctl_idx = NA_Clip.INITCTL_GP1;
            break;

         case @(bt_ctl_gp2):
         case @(fp_ctl_gp2):
            parent_tstate.clip_edit_mode = NA_State.CLIP_EDIT_MODE_INITCTL_GP2;
            def_ctl_idx = NA_Clip.INITCTL_GP2;
            break;

         case @(bt_ctl_gp3):
         case @(fp_ctl_gp3):
            parent_tstate.clip_edit_mode = NA_State.CLIP_EDIT_MODE_INITCTL_GP3;
            def_ctl_idx = NA_Clip.INITCTL_GP3;
            break;

         case @(bt_ctl_gp4):
         case @(fp_ctl_gp4):
            parent_tstate.clip_edit_mode = NA_State.CLIP_EDIT_MODE_INITCTL_GP4;
            def_ctl_idx = NA_Clip.INITCTL_GP4;
            break;
      }
      Global.Print("Clip edit mode is \'"+(NA_State.clip_edit_mode_names.get(parent_tstate.clip_edit_mode))+"\'");
      parent_editor.redraw();
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      // // trace "xxx NA_ClipCtlDialog: k.name="+_k.name+" pressed="+_k.pressed;
      switch(_k.pressed)
      {
         case VKEY_ESCAPE:
            hide();
            return true;
      }

      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      local String acName = _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();
      // // trace "[trc] NA_ClipCtlDialog::consumeAction: acName=\""+acName+"\"";

      switch(@(ap))
      {
         case @(bt_default):
            handleKeyboardFocusChanged(bt_default);
            return true;

         case @(bt_ctl_mw):
            toggleCtlDecHex(fp_ctl_mw);
            return true;

         case @(bt_ctl_bc):
            toggleCtlDecHex(fp_ctl_bc);
            return true;

         case @(bt_ctl_fc):
            toggleCtlDecHex(fp_ctl_fc);
            return true;

         case @(bt_ctl_ex):
            toggleCtlDecHex(fp_ctl_ex);
            return true;

         case @(bt_ctl_gp1):
            toggleCtlDecHex(fp_ctl_gp1);
            return true;

         case @(bt_ctl_gp2):
            toggleCtlDecHex(fp_ctl_gp2);
            return true;

         case @(bt_ctl_gp3):
            toggleCtlDecHex(fp_ctl_gp3);
            return true;

         case @(bt_ctl_gp4):
            toggleCtlDecHex(fp_ctl_gp4);
            return true;

         case @(fp_ctl_mw):
            handleCtlChanged("CC#001 ModWheel", NA_Clip.INITCTL_MW, fp_ctl_mw.getFloatValue());
            if(FloatParam.ACTION_VALUEENTERED == acName)
               hide();
            return true;

         case @(fp_ctl_bc):
            handleCtlChanged("CC#002 BreathCtl", NA_Clip.INITCTL_BC, fp_ctl_bc.getFloatValue());
            if(FloatParam.ACTION_VALUEENTERED == acName)
               hide();
            return true;

         case @(fp_ctl_fc):
            handleCtlChanged("CC#004 FootCtl", NA_Clip.INITCTL_FC, fp_ctl_fc.getFloatValue());
            if(FloatParam.ACTION_VALUEENTERED == acName)
               hide();
            return true;

         case @(fp_ctl_ex):
            handleCtlChanged("CC#011 Expr", NA_Clip.INITCTL_EX, fp_ctl_ex.getFloatValue());
            if(FloatParam.ACTION_VALUEENTERED == acName)
               hide();
            return true;

         case @(fp_ctl_gp1):
            handleCtlChanged("CC#016 GP1", NA_Clip.INITCTL_GP1, fp_ctl_gp1.getFloatValue());
            if(FloatParam.ACTION_VALUEENTERED == acName)
               hide();
            return true;

         case @(fp_ctl_gp2):
            handleCtlChanged("CC#017 GP2", NA_Clip.INITCTL_GP2, fp_ctl_gp2.getFloatValue());
            if(FloatParam.ACTION_VALUEENTERED == acName)
               hide();
            return true;

         case @(fp_ctl_gp3):
            handleCtlChanged("CC#018 GP3", NA_Clip.INITCTL_GP3, fp_ctl_gp3.getFloatValue());
            if(FloatParam.ACTION_VALUEENTERED == acName)
               hide();
            return true;

         case @(fp_ctl_gp4):
            handleCtlChanged("CC#019 GP4", NA_Clip.INITCTL_GP4, fp_ctl_gp4.getFloatValue());
            if(FloatParam.ACTION_VALUEENTERED == acName)
               hide();
            return true;
      }

      return Dialog::consumeAction(_ac);
   }

}
