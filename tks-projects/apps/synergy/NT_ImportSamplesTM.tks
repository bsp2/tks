// ----
// ---- file   : NT_ImportSamplesTM.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2021 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "syntracker" midi sequencer.
// ----
// ---- created: 31Jan2021
// ---- changed:
// ----
// ----
// ----

module MNT_ImportSamplesTM;

use namespace ui;
use namespace st2;


// <class.png>
class NT_ImportSamplesDO {
   String smp_name;
   int    smp_uid;
   int    len_16th;
   byte   instr_nr;
   byte   pat_nr;


   // <method_init.png>
   public method init(String _name, int _uid, float _16th, byte _instrNr, byte _patNr) {
      smp_name = _name;
      smp_uid  = _uid;
      len_16th = _16th;
      instr_nr = _instrNr;
      pat_nr   = _patNr;
   }
}


// <class.png>
class NT_ImportSamplesTM : TableModel {

   define int COL_ID       = 0;
   define int COL_NAME     = 1;
   define int COL_UID      = 2;
   define int COL_16TH     = 3;
   define int COL_INSTR    = 4;
   define int COL_PAT      = 5;

   PointerArray entries;  // NT_ImportSamplesDO instances


   // <method_get.png>
   public virtual getNumColumns() : int {
      return 6;
   }

   // <method_get.png>
   public virtual getColumnCaption(int _col) : String {
      return ["Id", "Name", "UID", "16th", "Instr", "Pat"][_col];
   }

   // <method_get.png>
   public virtual getNumRows() : int {
      return entries.numElements;
   }

   // <method_get.png>
   public virtual getCellCaption(int _col, _row) : String {
      NT_ImportSamplesDO en <= entries.get(_row);
      if(null != en)
      {
         switch(_col)
         {
            case COL_ID:
               return String(_row + 1);

            case COL_NAME:
               return en.smp_name;

            case COL_UID:
               return String(en.smp_uid);

            case COL_16TH:
               return String(en.len_16th);

            case COL_INSTR:
               return (en.instr_nr >= 0) ? NodeTrackerEditor.instr_nr_names.get(en.instr_nr) : "-";

            case COL_PAT:
               return (en.pat_nr >= 0) ? Node.patnr_options.get(en.pat_nr) : "-";
         }
      }
   }

   // <method_get.png>
   public virtual getMinimumColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 40;

         case COL_NAME:
            return 200;

         case COL_UID:
            return 60;

         case COL_16TH:
            return 60;

         case COL_INSTR:
            return 80;

         case COL_PAT:
            return 80;
      }
   }

   // <method_get.png>
   public virtual getPreferredColumnWidth(int _col) : int {
      switch(_col)
      {
         case COL_ID:
            return 40;

         case COL_NAME:
            return 250;

         case COL_UID:
            return 60;

         case COL_16TH:
            return 60;

         case COL_INSTR:
            return 80;

         case COL_PAT:
            return 80;
      }
   }

}
