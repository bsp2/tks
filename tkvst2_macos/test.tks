
// (note) also see tkvst2/test.tks for a more complete test (on windows). this is the macOS version.

use tkvst2;
use tksdl;

int BLK_SIZE = 128;

int PROCESS_ITERATIONS = 3;


tkvst2_set_bpm(125.0f);


StringArray plugin_list = [
   /* 000 */ "/Library/Audio/Plug-Ins/VST/RoyalCompressor.vst",          //    9 params
   /* 001 */ "/Library/Audio/Plug-Ins/VST/AR-1.vst",                     // <mainProc is NULL> (x86_64 on arm64 host)
   /* 002 */ "/Library/Audio/Plug-Ins/VST/OuterSpace.vst",               //   39 params
   /* 003 */ "/Library/Audio/Plug-Ins/VST/AlborosieDubStation.vst",      //   18 params
   /* 004 */ "/Library/Audio/Plug-Ins/VST/TAL-Reverb-4.vst",             //   20 params
   /* 005 */ "/Library/Audio/Plug-Ins/VST/FabFilter PRO-R.vst",          //   85 params
   /* 006 */ "/Library/Audio/Plug-Ins/VST/Pre 1973.vst",                 // 2154 params (26 actual params)
   /* 007 */ "/Library/Audio/Plug-Ins/VST/Comp DIODE-609.vst",           // 2166 params (38 actual params)
   /* 008 */ "/Library/Audio/Plug-Ins/VST/Delay BRIGADE.vst" ,           // 2163 params (35 actual params)
   /* 009 */ "/Library/Audio/Plug-Ins/VST/Delay ETERNITY.vst",           // 2196 params (68 actual params)
   /* 010 */ "/Library/Audio/Plug-Ins/VST/Delay TAPE-201.vst",           // 2162 params (34 actual params)
   /* 011 */ "/Library/Audio/Plug-Ins/VST/Decimort2.vst",                //   16 params
   /* 012 */ "/Library/Audio/Plug-Ins/VST/TAL-Chorus-LX.vst",            //    6 params
   /* 013 */ "/Library/Audio/Plug-Ins/VST/ValhallaVintageVerb_x64.vst",  //   17 params
   /* 014 */ "/Library/Audio/Plug-Ins/VST/ValhallaDelay.vst",            //   38 params
   /* 015 */ "/Library/Audio/Plug-Ins/VST/ValhallaPlate.vst",            //   12 params
   /* 016 */ "/Library/Audio/Plug-Ins/VST/ValhallaRoom_x64.vst",         //   20 params
   /* 017 */ "/Library/Audio/Plug-Ins/VST/Tape MELLO-FI.vst",            //   17 params
   /* 018 */ "/Library/Audio/Plug-Ins/VST/TDR Limiter 6 GE.vst",         //   81 params
   /* 019 */ "/Library/Audio/Plug-Ins/VST/Chorus DIMENSION-D.vst",       // 2137 params (  9 actual params)
   /* 020 */ "/Library/Audio/Plug-Ins/VST/Chorus JUN-6.vst",             // 2138 params ( 10 actual params)
   /* 021 */ "/Library/Audio/Plug-Ins/VST/FabFilter Timeless 3.vst",     // 1007 params (108 essential params)
   /* 022 */ "/Library/Audio/Plug-Ins/VST/LX480 v4.vst",                 //  151 params
   /* 023 */ "/Library/Audio/Plug-Ins/VST/Plate.vst",                    //   25 params
   /* 024 */ "/Library/Audio/Plug-Ins/VST/EQ SITRAL-295.vst",            // 2153 params ( 25 actual params)
   /* 025 */ "/Library/Audio/Plug-Ins/VST/Efx FRAGMENTS.vst",            // 2153 params (188 actual params)
   /* 026 */ "/Library/Audio/Plug-Ins/VST/u-he/ColourCopy.vst",          //   30 params
   /* 027 */ "/Library/Audio/Plug-Ins/VST/u-he/Satin.vst",               //   67 params
   /* 028 */ "/Library/Audio/Plug-Ins/VST/u-he/ZRev.vst",                //   32 params
   /* 029 */ "/Library/Audio/Plug-Ins/VST/Rev INTENSITY.vst",            // 2174 params ( 46 actual params)
   /* 030 */ "/Library/Audio/Plug-Ins/VST/Rev PLATE-140.vst",            // 2145 params ( 17 actual params)
   /* 031 */ "/Library/Audio/Plug-Ins/VST/Rev SPRING-636.vst",           // 2148 params ( 20 actual params)
   /* 032 */ "/Library/Audio/Plug-Ins/VST/Pre TridA.vst",                // 2168 params ( 40 actual params)
   /* 033 */ "/Library/Audio/Plug-Ins/VST/Pre V76.vst",                  // 2146 params ( 18 actual params)
   /* 034 */ "/Library/Audio/Plug-Ins/VST/SparkVerb.vst",                //   21 params
   /* 035 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/EchoBoy.vst",          //   25 params
   /* 036 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/EchoBoyJr.vst",        //   14 params
   /* 037 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/MicroShift.vst",       //    7 params
   /* 038 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/LittleMicroShift.vst", //  4 params
   /* 039 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/PrimalTap.vst",        //   33 params
   /* 040 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/LittlePrimalTap.vst",  //    7 params
   /* 041 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/SieQ.vst",             //    6 params
   /* 042 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/PhaseMistress.vst",    //   13 params
   /* 043 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/Radiator.vst",         //    8 params
   /* 044 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/LittleRadiator.vst",   //    5 params
   /* 045 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/Devil-Loc.vst",        //    3 params
   /* 046 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/Devil-Loc_Deluxe.vst", //  6 params
   /* 047 */ "/Library/Audio/Plug-Ins/VST/Soundtoys/Decapitator.vst",      //   12 params
   /* 048 */ "/Library/Audio/Plug-Ins/VST/Softube/Trident A-Range.vst",                       //   17 params
   /* 049 */ "/Library/Audio/Plug-Ins/VST/Softube/Saturation Knob.vst",                       //    2 params
   /* 050 */ "/Library/Audio/Plug-Ins/VST/Softube/Tape Echoes.vst",                           //   18 params
   /* 051 */ "/Library/Audio/Plug-Ins/VST/Softube/Tape.vst",                                  //   14 params
   /* 052 */ "/Library/Audio/Plug-Ins/VST/Softube/Tube-Tech Classic Channel mk II.vst",       //   56 params
   /* 053 */ "/Library/Audio/Plug-Ins/VST/Softube/Tube-Tech Equalizers mk II.vst",            //   18 params
   /* 054 */ "/Library/Audio/Plug-Ins/VST/Softube/Dirty Tape.vst",                            //    6 params
   /* 055 */ "/Library/Audio/Plug-Ins/VST/Softube/Tonelux Tilt Live.vst",                     //    9 params
   /* 056 */ "/Library/Audio/Plug-Ins/VST/Softube/Transient Shaper.vst",                      //    8 params
   /* 057 */ "/Library/Audio/Plug-Ins/VST/Softube/Summit Audio EQF-100.vst",                  //   21 params
   /* 058 */ "/Library/Audio/Plug-Ins/VST/Softube/Summit Audio Grand Channel.vst",            //   34 params
   /* 059 */ "/Library/Audio/Plug-Ins/VST/Softube/Summit Audio TLA-100A.vst",                 //   10 params
   /* 060 */ "/Library/Audio/Plug-Ins/VST/Softube/Model 72 Synthesizer System.vst",           //   57 params
   /* 061 */ "/Library/Audio/Plug-Ins/VST/Softube/Model 82 Sequencing Mono Synth.vst",        //   46 params
   /* 062 */ "/Library/Audio/Plug-Ins/VST/Softube/Model 84 Polyphonic Synthesizer.vst",       //   43 params
   /* 063 */ "/Library/Audio/Plug-Ins/VST/Softube/Weiss Compressor Limiter.vst",              //   47 params
   /* 064 */ "/Library/Audio/Plug-Ins/VST/Softube/Weiss DS1-MK3.vst",                         //   50 params
   /* 065 */ "/Library/Audio/Plug-Ins/VST/Softube/FET Compressor Mk II.vst",                  //   14 params
   /* 066 */ "/Library/Audio/Plug-Ins/VST/Softube/Tube-Tech ME 1B.vst",                       //    7 params
   /* 067 */ "/Library/Audio/Plug-Ins/VST/Softube/Tube-Tech PE 1C.vst",                       //    9 params
   /* 068 */ "/Library/Audio/Plug-Ins/VST/Softube/TSAR-1 Reverb.vst",                         //   11 params
   /* 069 */ "/Library/Audio/Plug-Ins/VST/Softube/TSAR-1R Reverb.vst",                        //    5 params
   /* 070 */ "/Library/Audio/Plug-Ins/VST/Softube/Harmonics Analog Saturation Processor.vst", //   14 params
   /* 071 */ "/Library/Audio/Plug-Ins/VST/Softube/Weiss MM-1 Mastering Maximizer.vst",        //    6 params
   /* 072 */ "/Library/Audio/Plug-Ins/VST/Softube/Drawmer 1973.vst",                          //   41 params
   /* 073 */ "/Library/Audio/Plug-Ins/VST/Softube/Valley People Dyna-mite.vst",               //    7 params (?!)
   /* 074 */ "/Library/Audio/Plug-Ins/VST/Softube/Valley People Dyna-mite Gate.vst",          //    7 params
   /* 075 */ "/Library/Audio/Plug-Ins/VST/Softube/Valley People Dyna-mite Slam.vst",          //    7 params
   /* 076 */ "/Library/Audio/Plug-Ins/VST/Eventide/Blackhole.vst",       //   29 params
   /* 077 */ "/Library/Audio/Plug-Ins/VST/Eventide/H3000 Factory.vst",   //  241 params
   /* 078 */ "/Library/Audio/Plug-Ins/VST/Eventide/UltraReverb.vst",     //   73 params
   /* 079 */ "/Library/Audio/Plug-Ins/VST/Sonic Charge/Microtonic.vst",  //  215 params
   /* 080 */ "/Library/Audio/Plug-Ins/VST/PSPaudioware/PSP HertzRider.vst",  //  <mainProc is NULL> (x86_64 on arm64 host)
   /* 081 */ "/Library/Audio/Plug-Ins/VST/PSPaudioware/PSP Echo.vst",        //    48 params
   /* 082 */ "/Library/Audio/Plug-Ins/VST/PSPaudioware/PSP oldTimer.vst",    //    12 params
   /* 083 */ "/Library/Audio/Plug-Ins/VST/PSPaudioware/PSP oldTimerME.vst",  //    16 params
   /* 084 */ "/Library/Audio/Plug-Ins/VST/PSPaudioware/PSP 2445.vst",        //    24 params
   /* 085 */ "/Library/Audio/Plug-Ins/VST/soothe2.vst",                  //    56 params
   /* 086 */ "/Library/Audio/Plug-Ins/VST/Nithonat.vst",                 //  <mainProc is NULL> (x86_64 on arm64 host)
   /* 087 */ "/Library/Audio/Plug-Ins/VST/Drumazon.vst",                 //  <mainProc is NULL> (x86_64 on arm64 host)
   /* 088 */ "/Library/Audio/Plug-Ins/VST/Filter M12.vst",               //  2202 params (74 actual params)
   /* 089 */ "/Library/Audio/Plug-Ins/VST/Filter MINI.vst",              //  2169 params (35 actual params)
   /* 090 */ "/Library/Audio/Plug-Ins/VST/Filter MS-20.vst",             //  2166 params (38 actual params)
   /* 091 */ "/Library/Audio/Plug-Ins/VST/Filter SEM.vst",               //  2200 params (72 actual params)
   /* 092 */ "/Library/Audio/Plug-Ins/VST/Dist OPAMP-21.vst",            //  2158 params (30 actual params)
   /* 093 */ "/Library/Audio/Plug-Ins/VST/Dist TUBE-CULTURE.vst",        //  2144 params (16 actual params)
   /* 094 */ "/Library/Audio/Plug-Ins/VST/Pianoteq 8.vst",               //   222 params
   /* 095 */ "/Library/Audio/Plug-Ins/VST/WaveBox.vst",                  //    36 params
   /* 096 */ "/Library/Audio/Plug-Ins/VST/ABL3x.vst",                    //    20 params
   /* 097 */ "/Library/Audio/Plug-Ins/VST/TAL-BassLine-101.vst",         //    75 params
   /* 098 */ "/Library/Audio/Plug-Ins/VST/SynthMaster1.vst",             //   591 params
   /* 099 */ "/Library/Audio/Plug-Ins/VST/OB-E.vst",                     //   744 params
   /* 100 */ "/Library/Audio/Plug-Ins/VST/Phaser BI-TRON.vst",           //  2169 params (41 actual params)
   /* 101 */ "/Library/Audio/Plug-Ins/VST/Acon Digital/Verberate2.vst",          //    56 params
   /* 102 */ "/Library/Audio/Plug-Ins/VST/Acon Digital/Limit.vst",               //     9 params
   /* 103 */ "/Library/Audio/Plug-Ins/VST/Acon Digital/Vitalize.vst",            //    12 params
   /* 104 */ "/Library/Audio/Plug-Ins/VST/Acon Digital/Equalize2.vst",           //   115 params
   /* 105 */ "/Library/Audio/Plug-Ins/VST/Acon Digital/Dynamics.vst",            //    34 params
   /* 106 */ "/Library/Audio/Plug-Ins/VST/Acon Digital/DeNoise2.vst",            //    22 params
   /* 107 */ "/Library/Audio/Plug-Ins/VST/Acon Digital/MultiBandDynamics.vst",   //    47 params
   /* 108 */ "/Library/Audio/Plug-Ins/VST/XILS V+.vst",                  //  <mainProc is NULL> (x86_64 on arm64 host)
   /* 109 */ "/Library/Audio/Plug-Ins/VST/FogConvolver.vst",             //     ? params
   /* 110 */ "/Library/Audio/Plug-Ins/VST/FogConvolver2.vst",            //   120 params
   /* 111 */ "/Library/Audio/Plug-Ins/VST/Syntorus.vst",            //
   /* 112 */ "/Library/Audio/Plug-Ins/VST/Softube/Console 1.vst",

""
                           ];


// <class.png>
class Global {
   // <debug.png>
   static Debug(local String _text) {
      trace "[dbg] "+_text;
   }

   // <log.png>
   static Error(String _text) {
      trace "[---] Global.Error: \""+_text+"\".";
   }

   // <log.png>
   static Warning(String _text) {
      trace "[~~~] Global.Warning: \""+_text+"\".";
   }
}


// <class.png>
class ModVST2 {
   // simplified "Eureka" host VST2Plugin script wrapper/utility class for VST2Plugin

   VST2Plugin *plugin;

   define int PATCH_DATATYPE_NONE         = 0;
   define int PATCH_DATATYPE_BANKCHUNK    = 1;
   define int PATCH_DATATYPE_PROGRAMCHUNK = 2;
   define int PATCH_DATATYPE_PARAMETERS   = 3;

   Buffer patch_data;
   int patch_datatype;


   // <method.png>
   public method loadPlugin(String _pathName) : boolean {
      boolean ret = false;

      plugin <= new VST2Plugin;

      if(plugin.loadPlugin(_pathName, 0/*shellPlugin=scan*/))
      {

         plugin.open();
         // plugin.enableUIThread = true;

         plugin.setSampleRate(44100.0f);
         // plugin.setSampleRate(48000.0f);
         plugin.setBlockSize(BLK_SIZE);

         trace "[...]          vendorString=\"" +plugin.vendorString+"\".";
         trace "[...]         vendorVersion="   +plugin.vendorVersion;
         trace "[...]         productString=\"" +plugin.productString+"\".";
         trace "[...]            effectName=\"" +plugin.effectName+"\".";
         trace "[...]               version="   +plugin.version;
         Integer io; io=plugin.uniqueID;
         trace "[...]              uniqueID="   +io.printf("0x%08x");
         trace "[...]                 flags="   +plugin.flags;
         trace "[...]               isSynth="   +plugin.isSynth();
         trace "[...]             hasEditor="   +plugin.hasEditor();
         trace "[...]          canReplacing="   +plugin.canReplacing();
         trace "[...]     programsAreChunks="   +plugin.programsAreChunks();
         trace "[...]         noSoundInStop="   +plugin.noSoundInStop();
         trace "[...]  numMidiInputChannels="   +plugin.numMidiInputChannels;
         trace "[...] numMidiOutputChannels="   +plugin.numMidiOutputChannels;

         // Show input properties
         trace "[...]           numInputs="+plugin.numInputs;
         int inIdx = 0;
         loop(plugin.numInputs)
         {
            VST2PinProperties inProps <= plugin.getInputProperties(inIdx);

            if(null != inProps)
            {
               trace "[...]             ["+inIdx+"]:           label=\""+inProps.label+"\".";
               trace "[...]             ["+inIdx+"]:      shortLabel=\""+inProps.shortLabel+"\".";
               trace "[...]             ["+inIdx+"]: arrangementType="  +inProps.arrangementType;
               trace "[...]             ["+inIdx+"]:           flags="  +inProps.flags;
               trace "[...]             ["+inIdx+"]:        isActive="  +inProps.isActive();
               trace "[...]             ["+inIdx+"]:        isStereo="  +inProps.isStereo();
               trace "[...]             ["+inIdx+"]:      useSpeaker="  +inProps.useSpeaker();
               trace " ";
            }
            else
            {
               trace "[...]             ["+inIdx+"]: <plugin error>";
            }

            // plugin.setExtInputBuffer(ioIdx, input_bufs.get(inIdx));

            // Next input
            inIdx++;
         }

         // Show output properties
         trace "[...]          numOutputs="+plugin.numOutputs;
         int outIdx = 0;
         loop(plugin.numOutputs)
         {
            VST2PinProperties outProps <= plugin.getOutputProperties(outIdx);

            if(null != outProps)
            {
               trace "[...]             ["+outIdx+"]:           label=\""+outProps.label+"\".";
               trace "[...]             ["+outIdx+"]:      shortLabel=\""+outProps.shortLabel+"\".";
               trace "[...]             ["+outIdx+"]: arrangementType="  +outProps.arrangementType;
               trace "[...]             ["+outIdx+"]:           flags="  +outProps.flags;
               trace "[...]             ["+outIdx+"]:        isActive="  +outProps.isActive();
               trace "[...]             ["+outIdx+"]:        isStereo="  +outProps.isStereo();
               trace "[...]             ["+outIdx+"]:      useSpeaker="  +outProps.useSpeaker();
               trace " ";
            }
            else
            {
               trace "[...]             ["+outIdx+"]: <plugin error>";
            }

            // plugin.setExtOutputBuffer(ioIdx, output_bufs.get(outIdx));

            // Next output
            outIdx++;
         }

         // Programs
         trace "[...]         numPrograms="+plugin.numPrograms;
         plugin.setProgram(0);
         trace "[...]     program[0].name="+plugin.getProgramName();

         // Show parameter names and values
         trace "[...]       numParameters="+plugin.numParameters;
         local PointerArray pa;
         int paramIdx = 0;
         int numActualParams = 0;
         local StringArray actualParamNames;
         loop(plugin.numParameters)
         {
            local String paramName <= plugin.getParameterName(paramIdx);
            if!(
               // skip (1000s of) Arturia helper params
               (paramName <= "MIDI CC helper")  ||
               (paramName <= "MPE_PitchBend_")  ||
               (paramName <= "MPE_Aftertouch_") ||
               (paramName <= "MPE_Brightness_") ||
               
               // skip FabFilter Timeless 3 helper+XLFO step params
               (paramName <= "MIDI Source ")    ||
               ( (paramName <= "Slot ") && (
                  (paramName & " Bypassed") ||
                  (paramName & " Inverted") ||
                  (paramName & " Target")   ||
                  (paramName & " Source")   ||
                  (paramName & " Level")
                                            )
                 ) ||
               (paramName <= "XLFO ") ||
               (paramName <= "Delay Tap 1") ||
               (paramName <= "Delay Tap 2") ||
               (paramName <= "Delay Tap 3") ||
               (paramName <= "Delay Tap 4") ||
               (paramName <= "Delay Tap 5") ||
               (paramName <= "Delay Tap 6") ||
               (paramName <= "Delay Tap 7") ||
               (paramName <= "Delay Tap 8") ||
               (paramName <= "Delay Tap 9") ||
               (paramName <= "Delay Tap 10") ||
               (paramName <= "Delay Tap 11") ||
               (paramName <= "Delay Tap 12") ||
               (paramName <= "Delay Tap 13") ||
               (paramName <= "Delay Tap 14") ||
               (paramName <= "Delay Tap 15") ||
               (paramName <= "XY Controller 1") ||
               (paramName <= "XY Controller 2") ||
               (paramName <= "XY Controller 3") ||
               (paramName <= "XY Controller 4") ||
               (paramName <= "XY Controller 5") ||
               (paramName <= "XY Controller 6") ||
               (paramName <= "EG ") ||
               (paramName <= "EF ") ||
               0
                )
            {
               numActualParams++;
               actualParamNames.add(paramName);

               float paramVal = plugin.getParameter(paramIdx);
               pa.add(#((deref paramName) + " ("+paramVal+")"));

               local VST2ParameterProperties paramProps <= plugin.getParameterProperties(paramIdx);
               if(null != paramProps)
               {
                  trace "[...]             ["+paramIdx+"]:                   label=\""+paramProps.label+"\".";
                  trace "[...]             ["+paramIdx+"]:              shortLabel=\""+paramProps.shortLabel+"\".";
                  trace "[...]             ["+paramIdx+"]:                   flags="  +paramProps.flags;
                  trace "[...]             ["+paramIdx+"]:                 canRamp="  +paramProps.canRamp();
                  trace "[...]             ["+paramIdx+"]:                isSwitch="  +paramProps.isSwitch();
                  if(!paramProps.isSwitch())
                  {
                     trace "[...]             ["+paramIdx+"]:       usesIntegerMinMax="  +paramProps.usesIntegerMinMax();
                     if(paramProps.usesIntegerMinMax())
                     {
                        trace "[...]             ["+paramIdx+"]:              minInteger="  +paramProps.getMinInteger();
                        trace "[...]             ["+paramIdx+"]:              maxInteger="  +paramProps.getMaxInteger();
                     }
                     trace "[...]             ["+paramIdx+"]:           usesFloatStep="  +paramProps.usesFloatStep();
                     if(paramProps.usesFloatStep())
                     {
                        trace "[...]             ["+paramIdx+"]:               stepFloat="  +paramProps.getStepFloat();
                        trace "[...]             ["+paramIdx+"]:          smallStepFloat="  +paramProps.getSmallStepFloat();
                        trace "[...]             ["+paramIdx+"]:          largeStepFloat="  +paramProps.getLargeStepFloat();
                     }
                     trace "[...]             ["+paramIdx+"]:             usesIntStep="  +paramProps.usesIntStep();
                     if(paramProps.usesIntStep())
                     {
                        trace "[...]             ["+paramIdx+"]:             stepInteger="  +paramProps.getStepInteger();
                        trace "[...]             ["+paramIdx+"]:        largeStepInteger="  +paramProps.getLargeStepInteger();
                     }
                  }
                  trace "[...]             ["+paramIdx+"]:    supportsDisplayIndex="  +paramProps.supportsDisplayIndex();
                  if(paramProps.supportsDisplayIndex())
                  {
                     trace "[...]             ["+paramIdx+"]:            displayIndex="  +paramProps.getDisplayIndex();
                  }
                  trace "[...]             ["+paramIdx+"]: supportsDisplayCategory="  +paramProps.supportsDisplayCategory();
                  if(paramProps.supportsDisplayCategory())
                  {
                     trace "[...]             ["+paramIdx+"]:                category="  +paramProps.getCategory();
                     trace "[...]             ["+paramIdx+"]: numParametersIncategory="  +paramProps.getNumParametersInCategory();
                     trace "[...]             ["+paramIdx+"]:           categoryLabel="  +paramProps.getCategoryLabel();
                  }
                  trace " ";
               }
            } // if !MIDI CC helper
      
            // Next param
            paramIdx++;
         }

         trace "[...]          paramNames="+pa;
         trace "[...]    actualParamNames="+actualParamNames;
         trace "[...]       #actualParams="+numActualParams+" / "+plugin.numParameters;

         // Show can-dos
         trace "[...]               canDo="+
            ("\n\t\t         acceptIOChanges:"+plugin.canDo("acceptIOChanges"))     +
            ("\n\t\t         asyncProcessing:"+plugin.canDo("asyncProcessing"))     +
            ("\n\t\t                  bypass:"+plugin.canDo("bypass"))              +
            ("\n\t\t       closeFileSelector:"+plugin.canDo("closeFileSelector"))   +
            ("\n\t\t                editFile:"+plugin.canDo("editFile"))            +
            ("\n\t\t            getChunkFile:"+plugin.canDo("getChunkFile"))        +
            ("\n\t\t        midiProgramNames:"+plugin.canDo("midiProgramNames"))    +
            ("\n\t\t                 offline:"+plugin.canDo("offline"))             +
            ("\n\t\t        openFileSelector:"+plugin.canDo("openFileSelector"))    +
            ("\n\t\t        receiveVstEvents:"+plugin.canDo("receiveVstEvents"))    +
            ("\n\t\t     receiveVstMidiEvent:"+plugin.canDo("receiveVstMidiEvent")) + 
            ("\n\t\t      receiveVstTimeInfo:"+plugin.canDo("receiveVstTimeInfo"))  +
            ("\n\t\t reportConnectionChanges:"+plugin.canDo("reportConnectionChanges")) +
            ("\n\t\t           sendVstEvents:"+plugin.canDo("sendVstEvents"))       +
            ("\n\t\t        sendVstMidiEvent:"+plugin.canDo("sendVstMidiEvent"))    +
            ("\n\t\t              sizeWindow:"+plugin.canDo("sizeWindow"))          +
            ("\n\t\t              supplyIdle:"+plugin.canDo("supplyIdle"))          +
            ("\n\t\t            supportShell:"+plugin.canDo("supportShell"))        +
            "\n"
            ;
   

         // Activate
         plugin.resume();

         // Start processing
         plugin.startProcess();

         // Succeeded
         ret = true;
      }

      return ret;
   }

   // <method.png>
   public method unload() {

      // TKS.sleep(2000);
      plugin.closeEditor();
      //TKS.sleep(2000);
      
      // Stop processing
      plugin.stopProcess();

      // Suspend
      plugin.suspend();

      // Close
      plugin.close();

      plugin <= null;
   }

   // <method.png>
   public method echoProgram() {
      local Buffer buf;

      // Dump program
      buf.size = 0;
      plugin.getChunk(buf, true/*program*/);
      trace "[...]       program chunk: size="+buf.size;
   
      // Send program
      plugin.setChunk(buf, true/*program*/);
   }

   // <method.png>
   public method echoBank() {
      local Buffer buf;

      // Dump bank
      buf.size = 0;
      plugin.getChunk(buf, false/*bank*/);
      trace "[...]          bank chunk: size="+buf.size;

      // Send bank
      plugin.setChunk(buf, false/*bank*/);
   }

   // <method.png>
   public method processTest() {

      // Change program
      plugin.queueProgramChange(0, 0);

      // Trigger note
      plugin.queueNoteOn(0, 48, 127);

      // Pitchbend
      plugin.queuePitchbendf(0, 0.7f);

      ////plugin.eventTest();

      // Process queued events
      plugin.processEvents();

      // Process some samples
      trace "[...] processing "+BLK_SIZE+" frames..";
      loop(PROCESS_ITERATIONS)
      {
         plugin.processReplacing(BLK_SIZE, 0/*off*/);
      }
      trace "[...] ..done.";
   }

   // <method.png>
   public method showEditor() {
      plugin.showEditor();
   }

   // <method.png>
   public static EditorLoop() {

      VST2Plugin.SetEnableHideVSTEditorWhenClosed(false);  // actually close window instead of hiding it

      while(VST2Plugin.GetNumOpenWindows())
      {
         // SDL.eventLoop();
         SDL.pollEvent();

         VST2Plugin.PumpEvents();  // no-op on macOS
         VST2Plugin.HandleQueuedWindowResize();
         TKS.sleep(30);
      }
   }

   // <method.png>
   public method restorePatchDataEx(local VST2Plugin _plugin, 
                                    local Buffer     _patchData, 
                                    local int        _patchDatatype) : boolean {
      // (note) caller must call VST2.PushIgnoreAutomation() prior to this method
      local boolean r = false;

      // local boolean bIgnoreAutoOrig = VST2.PushIgnoreAutomation();

      // trace "xxx ENTER restorePatchDataEx: mod="+#(this);

      if(null != _plugin)
      {
         if(null != _patchData)
         {
            // // _plugin.suspend();
            // // _plugin.stopProcess();
            // // TKS.sleep(3000);
            switch(_patchDatatype)
            {
               default:
               {
                  Global.Error("ModVST2::restorePatchDataEx: unknown patchDatatype("+_patchDatatype+"). unable to restore patch data. uid="+_plugin.getUniqueID());
               }
               break;

               case PATCH_DATATYPE_NONE:
                  Global.Debug("ModVST2:restorePatchDataEx: type=NONE");
                  break;
            
               case PATCH_DATATYPE_BANKCHUNK:
                  Global.Debug("ModVST2::restorePatchDataEx: type=BANKCHUNK, size="+_patchData.size);
                  _plugin.setChunk(_patchData, false/*bank*/);
                  r = true;
                  break;
               
               case PATCH_DATATYPE_PROGRAMCHUNK:
                  Global.Debug("ModVST2::restorePatchData: type=PROGRAMCHUNK, size="+_patchData.size);
                  _plugin.setChunk(_patchData, true/*program*/);
                  r = true;
                  break;
               
               case PATCH_DATATYPE_PARAMETERS:
               {
                  Global.Debug("ModVST2::restorePatchData: type=PARAMETERS, size="+_patchData.size);

                  local int numParams = _plugin.getNumParameters();
                  local int numRestoreParams = _patchData.size / 4/*sizeof(sF32)*/;
                  if(numParams != numRestoreParams)
                  {
                     Global.Warning("ModVST2::restorePatchDataEx: numParams != numRestoreParams ("+numParams+" != "+numRestoreParams+")");
                  }
                  local int i;
                  for(i=0; i < numRestoreParams; i++)
                  {
                     local float paramVal = _patchData.peekF32(i*4);
                     // trace "xxx ModVST2::restorePatchDataEx: param["+i+"]="+paramVal;
                     _plugin.setParameter(i, paramVal);
                  }
                  r = true;
               }
               break;
            }
            // // _plugin.startProcess();
            // // _plugin.resume();
         }
         else
         {
            Global.Error("ModVST2::restorePatchDataEx: patchData is null.");
         }
      }
      else
      {
         Global.Error("ModVST2::restorePatchData: plugin is null.");
      }

      // VST2.PopIgnoreAutomation(bIgnoreAutoOrig);

      trace "[trc] LEAVE restorePatchDataEx: mod="+#(this);

      return r;
   }

   // <method.png>
   protected method restorePatchData() : boolean {
      // trace "xxx restorePatchData";
      return restorePatchDataEx(plugin, patch_data, patch_datatype);
   }

   // <load.png>
   public =replay= method loadFXStorePatch(String _pathName) : boolean {
      local File f;
      boolean r = false;

      if(null == plugin)
      {
         return false;
      }

      if(f.openLocal(_pathName, IOS_IN))
      {
         f.byteOrder = BIG_ENDIAN;

         int fsize = f.size;

         Integer chunkMagic = f.i32;
         if(0x43636e4b == chunkMagic) // 'CcnK'
         {
            int byteSize = f.i32;
            Global.Debug("ModVST2::loadFXStorePatch: byteSize="+byteSize);

            if(fsize != (byteSize + 8))
               trace "[~~~] ModVST2::loadFXStorePatch: fsize("+fsize+") != byteSize+8("+(byteSize+8)+")";

            Integer fxMagic = f.i32;
            Buffer b <= new Buffer;

            int patchDataType = PATCH_DATATYPE_NONE;

            if(0x4678436B == fxMagic) // 'FxCk'
            {
               patchDataType = PATCH_DATATYPE_PARAMETERS;
            }
            else if(0x46504368 == fxMagic) // 'FPCh'
            {
               patchDataType = PATCH_DATATYPE_PROGRAMCHUNK;
            }
            else if(0x46424368 == fxMagic) // 'FBCh'
            {
               patchDataType = PATCH_DATATYPE_BANKCHUNK;
            }

            if(PATCH_DATATYPE_NONE != patchDataType)
            {
               int version = f.i32;
               Integer fxID = f.i32;
               Global.Debug("ModVST2::loadFXStorePatch: type="+patchDataType+" version="+version+" fxID="+fxID.printf("0x%08x"));
               int fxVersion = f.i32;
               Global.Debug("ModVST2::loadFXStorePatch: fxVersion="+fxVersion);

               int numParams = 0;

               if(PATCH_DATATYPE_BANKCHUNK == patchDataType)
               {
                  int numPrograms = f.i32;
                  Global.Debug("ModVST2::loadFXStorePatch: numPrograms="+numPrograms);

                  f.seek(128, SEEK_CUR);  // skip currentProgram and future[124]
               }
               else
               {
                  numParams  = f.i32;
                  Global.Debug("ModVST2::loadFXStorePatch: numParams="+numParams);
                  String prgName;
                  prgName.alloc(28+1);
                  int prgNameIdx = 0;
                  loop(28)
                  {
                     prgName[prgNameIdx++] = f.i8;
                  }
                  prgName.fixLength();
                  Global.Debug("ModVST2::loadFXStorePatch: prgName=\""+prgName+"\"");
               }

               if(fxID == plugin.uniqueID)
               {
                  if(PATCH_DATATYPE_PARAMETERS == patchDataType)
                  {
                     // Float parameter array
                     if(numParams < 1000000)
                     {
                        b.size = 4 * numParams;
                        int paramIdx = 0;

                        loop(numParams)
                        {
                           b.pokeF32(paramIdx++*4, f.f32);
                        }

                        r = true;
                     }
                     else
                     {
                        trace "[---] ModVST2::loadFXStorePatch: suspicious numParams="+numParams+", aborting.";
                     }
                  }
                  else
                  {
                     // Opaque chunk
                     int opaqueSize = f.i32;

                     if(0 == opaqueSize)
                     {
                        // (note) Reason sets this to 0 => calculate it
                        if(PATCH_DATATYPE_BANKCHUNK == patchDataType)
                        {
                           opaqueSize = f.size - 160;
                        }
                        else
                        {
                           opaqueSize = f.size - 60;
                        }
                        Global.Debug("ModVST2::loadFXStorePatch: calc opaqueSize="+opaqueSize+" ("+(opaqueSize/1024.0f)+"k)");
                     }
                     else
                     {
                        Global.Debug("ModVST2::loadFXStorePatch: opaqueSize="+opaqueSize+" ("+(opaqueSize/1024.0f)+"k)");
                     }

                     if(opaqueSize < 100*1024*1024)
                     {
                        f.readBuffer(b, 0, opaqueSize, true/*bResize*/);
                        r = true;
                     }
                     else
                     {
                        trace "[---] ModVST2::loadFXStorePatch: suspicious opaqueSize="+opaqueSize+", aborting.";
                     }
                  }

                  if(r)
                  {
                     trace "[...] ModVST2::loadFXStorePatch: patch loaded from \""+_pathName+"\"";

                     patch_data <= deref b;
                     patch_datatype = patchDataType;

                     plugin.setProgramName(prgName);

                     restorePatchData();

                     // current_project.markAsModified();
                  }
               }
               else
               {
                  Integer pluginUID = plugin.uniqueID;
                  trace "[---] ModVST2::loadFXStorePatch: plugin id mismatch (have="+fxID.printf("0x%08x")+" expect="+pluginUID.printf("0x%08x")+")";
               }
            }
            else
            {
               trace "[---] ModVST2::loadFXStorePatch: fxMagic ("+fxMagic.printf("0x%08x")+") is neither FxCk, FPCh nor FBCh.";
            }
         }
         else
         {
            trace "[---] ModVST2::loadFXStorePatch: wrong chunkMagic (have="+chunkMagic.printf("0x%08x")+", expect=0x434b6e63)";
         }

         f.close();
      }
      else
      {
         trace "[---] ModVST2::loadFXStorePatch: failed to open \""+_pathName+"\" for reading.";
      }
      return r;
   }
}


function TestPlugin(String _pathName) {

   local ModVST2 mod;

   // Load+initialize plugin
   int msInit = milliSeconds();
   if(mod.loadPlugin(_pathName))
   {
      msInit = milliSeconds() - msInit;

      if(0x50435337 == mod.plugin.getUniqueID()) // OPS7 ?
      {
         mod.loadFXStorePatch("ops7_effsetchunk_test.fxb");  // first effSetChunk has no effect (plugin calls audioMasterAutomate (with a wrong/outdated parameter value??) during patch restore and host echos the parameter back to the plugin)
         // mod.loadFXStorePatch("ops7_effsetchunk_test.fxb");  // second one works (=> workaround)
      }

      // mod.echoProgram();
      // mod.echoBank();

      // Process some audio
      int msProcess = milliSeconds();
      mod.processTest();
      msProcess = milliSeconds() - msProcess;

      // Show editor window
      Viewport.openWindow(640, 480);
      // // SDL.drainEventQueue();

      int msEditor = 0;

      if(1)
      {
         msEditor = milliSeconds();
         mod.showEditor();
         msEditor = milliSeconds() - msEditor;

         // Editor loop (until window is closed)
         ModVST2.EditorLoop();
      }
      else
      {
         TKS.sleep(10*1000);
      }


      // Close plugin
      int msExit = milliSeconds();
      mod.unload();
      msExit = milliSeconds() - msExit;

      trace "[dbg]    msInit: "+msInit;
      trace "[dbg] msProcess: "+msProcess;
      trace "[dbg]  msEditor: "+msEditor;
      trace "[dbg]    msExit: "+msExit;
   }
   else
   {
      trace "[---] failed to open plugin";
   }
}


// Test all plugins

// int i = plugin_list.numElements - 2;  // last plugin
// int i = 5;  // FabFilter PRO-R
// int i = 9;  // Delay ETERNITY
// int i = 13;  // Valhalla VintageVerb
// int i = 21;  // FabFilter Timeless 3
// int i = 28;  // ZRev
// int i = 48;  // Softube Trident A-Range
// int i = 81;  // PSP Echo
// int i = 109;  // Audio Thing Fog Convolver 1.x (=> x86_64 only, can't load)
// int i = 110;  // Audio Thing Fog Convolver 2.x (=> x86_64 only, can't load)
// int i = 111;  // Syntorus

// Softube Console 1
//   - plugin window opens (and looks ok), then process crashes after ~2 seconds
//      - NULL ptr exception in Apple framework when SDL.pollEvent() is called
int i = 112;
//      VM Region Info: 0 is not in any region.  Bytes before following region: 4342464512
//            REGION TYPE                    START - END         [ VSIZE] PRT/MAX SHRMOD  REGION DETAIL
//            UNUSED SPACE AT START
//      --->  
//            __TEXT                      102d4c000-102e48000    [ 1008K] r-x/r-x SM=COW  /usr/local/bin/tks.bin
//      
//      Thread 0 Crashed::  Dispatch queue: com.apple.main-thread
//      0   CoreFoundation                	       0x18c6a3738 CF_IS_OBJC + 24
//      1   CoreFoundation                	       0x18c55ae08 CFStringGetCString + 84
//      2   StripControlPI_VST_AU_Protect 	       0x10a89777c ACFShutdown + 527512
//      3   StripControlPI_VST_AU_Protect 	       0x10a96ca88 ACFShutdown + 1400740
//      4   StripControlPI_VST_AU_Protect 	       0x10a96aaa8 ACFShutdown + 1392580
//      5   StripControlPI_VST_AU_Protect 	       0x10aa7aec4 ACFShutdown + 2507744
//      6   StripControlPI_VST_AU_Protect 	       0x10aa68150 ACFShutdown + 2430572
//      7   StripControlPI_VST_AU_Protect 	       0x10aa750e0 ACFShutdown + 2483708
//      8   StripControlPI_VST_AU_Protect 	       0x10a898664 ACFShutdown + 531328
//      9   libdispatch.dylib             	       0x18c3413e8 _dispatch_client_callout + 20
//      10  libdispatch.dylib             	       0x18c34fbb8 _dispatch_main_queue_drain + 988
//      11  libdispatch.dylib             	       0x18c34f7cc _dispatch_main_queue_callback_4CF + 44
//      12  CoreFoundation                	       0x18c612ad4 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 16
//      13  CoreFoundation                	       0x18c5d0258 __CFRunLoopRun + 1996
//      14  CoreFoundation                	       0x18c5cf434 CFRunLoopRunSpecific + 608
//      15  HIToolbox                     	       0x196d7a19c RunCurrentEventLoopInMode + 292
//      16  HIToolbox                     	       0x196d79e2c ReceiveNextEventCommon + 220
//      17  HIToolbox                     	       0x196d79d30 _BlockUntilNextEventMatchingListInModeWithFilter + 76
//      18  AppKit                        	       0x18fe2ecc8 _DPSNextEvent + 660
//      19  AppKit                        	       0x1906254d0 -[NSApplication(NSEventRouting) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 700
//      20  libSDL2-2.0.0.dylib           	       0x103538ab0 Cocoa_PumpEventsUntilDate + 84
//      21  libSDL2-2.0.0.dylib           	       0x103538c60 Cocoa_PumpEvents + 56
//      22  libSDL2-2.0.0.dylib           	       0x1034afed4 SDL_PumpEventsInternal + 64
//      23  libSDL2-2.0.0.dylib           	       0x1034affec SDL_WaitEventTimeout_REAL + 88
//      24  tksdl.dylib                   	       0x103107ee4 _SDL::_pollEvent() + 36

if(Arguments.numElements >= 1)
   i = Arguments[0];

// tkvst2_window_test();
// Viewport.openWindow(640, 480);
// SDL.eventLoop();
// // TKS.sleep(1000*5);
// exit(0);


//loop(plugin_list.numElements)
{
   TestPlugin(plugin_list[i]);

   // next plugin
   i++;
}

trace "exiting.";
