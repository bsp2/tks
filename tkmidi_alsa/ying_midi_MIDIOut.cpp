// ---- ying_midi_MIDIOut.cpp: auto generated by YInG - the YAC interface generator (Tue, 1/Aug/2023 23:55:15)

#ifndef YAC_NO_HOST
sSI   YAC_CALL MIDIOut___openByName (void *, yacmemptr             );
sSI   YAC_CALL MIDIOut___openByIdx  (void *, yacmemptr             );
void  YAC_CALL MIDIOut___close      (void *                        );
void  YAC_CALL MIDIOut__noteOn      (void *, yacmemptr             );
void  YAC_CALL MIDIOut__noteOff     (void *, yacmemptr             );
void  YAC_CALL MIDIOut__allNotesOff (void *, yacmemptr             );
void  YAC_CALL MIDIOut__bankSelect  (void *, yacmemptr             );
void  YAC_CALL MIDIOut__programChange(void *, yacmemptr            );
sSI   YAC_CALL MIDIOut__sendBuffer  (void *, yacmemptr             );
void  YAC_CALL MIDIOut__getDeviceName(void *, YAC_Value *          );
sSI   YAC_CALL MIDIOut__getDeviceIdx(void *                        );
sSI   YAC_CALL MIDIOut__GetNumDevices(void *                       );
void  YAC_CALL MIDIOut__GetDeviceNameByIdx(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL MIDIOut__GetDeviceTypeByIdx(void *, yacmemptr       );
#endif // YAC_NO_HOST

// ------------------ YAC class "MIDIOut" reflection map (implementation) ------------------
sUI          YAC_VCALL MIDIOut::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL MIDIOut::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL MIDIOut::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL MIDIOut::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL MIDIOut::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL MIDIOut::yacMethodGetNum                  (void) {return 15;}
const char **YAC_VCALL MIDIOut::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "openByName", "openByIdx", "close", "noteOn", "noteOff", "allNotesOff", "bankSelect", "programChange", "sendBuffer", "getDeviceName", "getDeviceIdx", "GetNumDevices", "GetDeviceNameByIdx", "GetDeviceTypeByIdx"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIOut::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 1, 0, 3, 3, 1, 2, 2, 1, 0, 0, 0, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL MIDIOut::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3,};static const sUI rt2[]={1,};static const sUI rt3[]={0,};static const sUI rt4[]={1, 1, 1,};static const sUI rt5[]={1, 1, 1,};static const sUI rt6[]={1,};static const sUI rt7[]={1, 1,};static const sUI rt8[]={1, 1,};static const sUI rt9[]={3,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={0,};static const sUI rt13[]={1,};static const sUI rt14[]={1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL MIDIOut::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs5[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0, (const char*)0,};static const char *rs8[]={(const char*)0, (const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIOut::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 1, 0, 0, 0, 0, 0, 0, 1, 4, 1, 1, 4, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL MIDIOut::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL MIDIOut::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)MIDIOut___openByName, (void*)MIDIOut___openByIdx, (void*)MIDIOut___close, (void*)MIDIOut__noteOn, (void*)MIDIOut__noteOff, (void*)MIDIOut__allNotesOff, (void*)MIDIOut__bankSelect, (void*)MIDIOut__programChange, (void*)MIDIOut__sendBuffer, (void*)MIDIOut__getDeviceName, (void*)MIDIOut__getDeviceIdx, (void*)MIDIOut__GetNumDevices, (void*)MIDIOut__GetDeviceNameByIdx, (void*)MIDIOut__GetDeviceTypeByIdx}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL MIDIOut::yacConstantGetNum                (void) {return 7;}
const char **YAC_VCALL MIDIOut::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"MOD_MIDIPORT", "MOD_SYNTH", "MOD_SQSYNTH", "MOD_FMSYNTH", "MOD_MAPPER", "MOD_WAVETABLE", "MOD_SWSYNTH"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIOut::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL MIDIOut::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[7]; m.ui=r; m.si[0]=(sSI)1;m.si[1]=(sSI)2;m.si[2]=(sSI)3;m.si[3]=(sSI)4;m.si[4]=(sSI)5;m.si[5]=(sSI)6;m.si[6]=(sSI)7;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(MIDIOut, "MIDIOut");

#ifndef YAC_NO_HOST
sSI   YAC_CALL MIDIOut___openByName (void *_o, yacmemptr _args               ) {return (sSI)((MIDIOut*)_o)->_openByName(_args.mem[0].o);}
sSI   YAC_CALL MIDIOut___openByIdx  (void *_o, yacmemptr _args               ) {return (sSI)((MIDIOut*)_o)->_openByIdx(_args.mem[0].si);}
void  YAC_CALL MIDIOut___close      (void *_o                                ) {((MIDIOut*)_o)->_close();}
void  YAC_CALL MIDIOut__noteOn      (void *_o, yacmemptr _args               ) {((MIDIOut*)_o)->noteOn(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL MIDIOut__noteOff     (void *_o, yacmemptr _args               ) {((MIDIOut*)_o)->noteOff(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL MIDIOut__allNotesOff (void *_o, yacmemptr _args               ) {((MIDIOut*)_o)->allNotesOff(_args.mem[0].si);}
void  YAC_CALL MIDIOut__bankSelect  (void *_o, yacmemptr _args               ) {((MIDIOut*)_o)->bankSelect(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIOut__programChange(void *_o, yacmemptr _args              ) {((MIDIOut*)_o)->programChange(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIOut__sendBuffer  (void *_o, yacmemptr _args               ) {return (sSI)((MIDIOut*)_o)->sendBuffer(_args.mem[0].o);}
void  YAC_CALL MIDIOut__getDeviceName(void *_o, YAC_Value *_r                ) {((MIDIOut*)_o)->getDeviceName(_r);}
sSI   YAC_CALL MIDIOut__getDeviceIdx(void *_o                                ) {return (sSI)((MIDIOut*)_o)->getDeviceIdx();}
sSI   YAC_CALL MIDIOut__GetNumDevices(void *_o                               ) {return (sSI)((MIDIOut*)_o)->GetNumDevices();}
void  YAC_CALL MIDIOut__GetDeviceNameByIdx(void *_o, yacmemptr _args, YAC_Value *_r) {((MIDIOut*)_o)->GetDeviceNameByIdx(_args.mem[0].si, _r);}
sSI   YAC_CALL MIDIOut__GetDeviceTypeByIdx(void *_o, yacmemptr _args         ) {return (sSI)((MIDIOut*)_o)->GetDeviceTypeByIdx(_args.mem[0].si);}
#endif // YAC_NO_HOST
