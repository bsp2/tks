// ---- ying_midi_MIDITimer.cpp: auto generated by YInG - the YAC interface generator (Tue, 1/Aug/2023 23:55:10)

#ifndef YAC_NO_HOST
sSI   YAC_CALL MIDITimer__setMutexOverrideByName(void *, yacmemptr );
sSI   YAC_CALL MIDITimer__open      (void *, yacmemptr             );
sSI   YAC_CALL MIDITimer__start     (void *, yacmemptr             );
void  YAC_CALL MIDITimer__update    (void *, yacmemptr             );
void  YAC_CALL MIDITimer__stop      (void *                        );
void  YAC_CALL MIDITimer__close     (void *                        );
#endif // YAC_NO_HOST

// ------------------ YAC class "MIDITimer" reflection map (implementation) ------------------
sUI          YAC_VCALL MIDITimer::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL MIDITimer::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL MIDITimer::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL MIDITimer::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL MIDITimer::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL MIDITimer::yacMethodGetNum                  (void) {return 7;}
const char **YAC_VCALL MIDITimer::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "setMutexOverrideByName", "open", "start", "update", "stop", "close"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDITimer::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 1, 3, 1, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL MIDITimer::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3,};static const sUI rt2[]={3,};static const sUI rt3[]={1, 2, 3,};static const sUI rt4[]={2,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL MIDITimer::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={"String",};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDITimer::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 1, 1, 0, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL MIDITimer::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL MIDITimer::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)MIDITimer__setMutexOverrideByName, (void*)MIDITimer__open, (void*)MIDITimer__start, (void*)MIDITimer__update, (void*)MIDITimer__stop, (void*)MIDITimer__close}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL MIDITimer::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL MIDITimer::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL MIDITimer::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL MIDITimer::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(MIDITimer, "MIDITimer");

#ifndef YAC_NO_HOST
sSI   YAC_CALL MIDITimer__setMutexOverrideByName(void *_o, yacmemptr _args   ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((MIDITimer*)_o)->setMutexOverrideByName((YAC_String*)_args.mem[0].o);}return 0;}
sSI   YAC_CALL MIDITimer__open      (void *_o, yacmemptr _args               ) {return (sSI)((MIDITimer*)_o)->open(_args.mem[0].o);}
sSI   YAC_CALL MIDITimer__start     (void *_o, yacmemptr _args               ) {return (sSI)((MIDITimer*)_o)->start(_args.mem[0].si, _args.mem[1].f32, _args.mem[2].o);}
void  YAC_CALL MIDITimer__update    (void *_o, yacmemptr _args               ) {((MIDITimer*)_o)->update(_args.mem[0].f32);}
void  YAC_CALL MIDITimer__stop      (void *_o                                ) {((MIDITimer*)_o)->stop();}
void  YAC_CALL MIDITimer__close     (void *_o                                ) {((MIDITimer*)_o)->close();}
#endif // YAC_NO_HOST
