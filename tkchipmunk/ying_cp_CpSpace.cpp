// ---- ying_cp_CpSpace.cpp: auto generated by YInG - the YAC interface generator (Sun, 26/Sep/2021 12:44:11)

void  YAC_CALL CpSpace___New        (void *, YAC_Value *           );
void  YAC_CALL CpSpace___free       (void *                        );
void  YAC_CALL CpSpace___init       (void *                        );
void* YAC_CALL CpSpace___getGravity (void *                        );
void  YAC_CALL CpSpace___setGravity (void *, yacmemptr             );
void  YAC_CALL CpSpace___setGravity2f(void *, yacmemptr            );
sF32  YAC_CALL CpSpace___getDamping (void *                        );
void  YAC_CALL CpSpace___setDamping (void *, yacmemptr             );
sSI   YAC_CALL CpSpace___getIterations(void *                      );
void  YAC_CALL CpSpace___setIterations(void *, yacmemptr           );
sF32  YAC_CALL CpSpace___getIdleSpeedThreshold(void *              );
void  YAC_CALL CpSpace___setIdleSpeedThreshold(void *, yacmemptr   );
sF32  YAC_CALL CpSpace___getSleepTimeThreshold(void *              );
void  YAC_CALL CpSpace___setSleepTimeThreshold(void *, yacmemptr   );
sF32  YAC_CALL CpSpace___getCollisionSlop(void *                   );
void  YAC_CALL CpSpace___setCollisionSlop(void *, yacmemptr        );
sF32  YAC_CALL CpSpace___getCollisionBias(void *                   );
void  YAC_CALL CpSpace___setCollisionBias(void *, yacmemptr        );
sSI   YAC_CALL CpSpace___getCollisionPersistence(void *            );
void  YAC_CALL CpSpace___setCollisionPersistence(void *, yacmemptr );
void  YAC_CALL CpSpace___addShape   (void *, yacmemptr             );
void  YAC_CALL CpSpace___addBody    (void *, yacmemptr             );
void  YAC_CALL CpSpace___addConstraint(void *, yacmemptr           );
void  YAC_CALL CpSpace___addJoint   (void *, yacmemptr             );
void  YAC_CALL CpSpace___removeShape(void *, yacmemptr             );
void  YAC_CALL CpSpace___queueRemoveShapeAndBody(void *, yacmemptr );
void  YAC_CALL CpSpace___removeBody (void *, yacmemptr             );
void  YAC_CALL CpSpace___removeConstraint(void *, yacmemptr        );
void  YAC_CALL CpSpace___freeChildren(void *                       );
void* YAC_CALL CpSpace___getShapes  (void *                        );
void* YAC_CALL CpSpace___getBodies  (void *                        );
void* YAC_CALL CpSpace___getConstraints(void *                     );
sSI   YAC_CALL CpSpace___addCollisionHandlers(void *, yacmemptr    );
void  YAC_CALL CpSpace___bbQuery    (void *, yacmemptr             );
void* YAC_CALL CpSpace___pointQueryNearest(void *, yacmemptr       );
void  YAC_CALL CpSpace___useSpatialHash(void *, yacmemptr          );
void  YAC_CALL CpSpace___reindexStatic(void *                      );
void  YAC_CALL CpSpace___step       (void *, yacmemptr             );

// ------------------ YAC class "CpSpace" reflection map (implementation) ------------------
sUI          YAC_VCALL CpSpace::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL CpSpace::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL CpSpace::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL CpSpace::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL CpSpace::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL CpSpace::yacMethodGetNum                  (void) {return 39;}
const char **YAC_VCALL CpSpace::yacMethodGetNames                (void) {static const char *r[]={"operator", "New", "free", "init", "getGravity", "setGravity", "setGravity2f", "getDamping", "setDamping", "getIterations", "setIterations", "getIdleSpeedThreshold", "setIdleSpeedThreshold", "getSleepTimeThreshold", "setSleepTimeThreshold", "getCollisionSlop", "setCollisionSlop", "getCollisionBias", "setCollisionBias", "getCollisionPersistence", "setCollisionPersistence", "addShape", "addBody", "addConstraint", "addJoint", "removeShape", "queueRemoveShapeAndBody", "removeBody", "removeConstraint", "freeChildren", "getShapes", "getBodies", "getConstraints", "addCollisionHandlers", "bbQuery", "pointQueryNearest", "useSpatialHash", "reindexStatic", "step"}; return r;}
const sUI   *YAC_VCALL CpSpace::yacMethodGetNumParameters        (void) {static const sUI r[]={2, 0, 0, 0, 0, 1, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 7, 3, 2, 2, 0, 1}; return r;}
const sUI  **YAC_VCALL CpSpace::yacMethodGetParameterTypes       (void) {static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={3,};static const sUI rt6[]={2, 2,};static const sUI rt7[]={0,};static const sUI rt8[]={2,};static const sUI rt9[]={0,};static const sUI rt10[]={1,};static const sUI rt11[]={0,};static const sUI rt12[]={2,};static const sUI rt13[]={0,};static const sUI rt14[]={2,};static const sUI rt15[]={0,};static const sUI rt16[]={2,};static const sUI rt17[]={0,};static const sUI rt18[]={2,};static const sUI rt19[]={0,};static const sUI rt20[]={1,};static const sUI rt21[]={3,};static const sUI rt22[]={3,};static const sUI rt23[]={3,};static const sUI rt24[]={3,};static const sUI rt25[]={3,};static const sUI rt26[]={3,};static const sUI rt27[]={3,};static const sUI rt28[]={3,};static const sUI rt29[]={0,};static const sUI rt30[]={0,};static const sUI rt31[]={0,};static const sUI rt32[]={0,};static const sUI rt33[]={1, 1, 3, 3, 3, 3, 3,};static const sUI rt34[]={3, 3, 3,};static const sUI rt35[]={3, 2,};static const sUI rt36[]={2, 1,};static const sUI rt37[]={0,};static const sUI rt38[]={2,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38}; return r;}
const char***YAC_VCALL CpSpace::yacMethodGetParameterObjectTypes (void) {static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={"CpVect",};static const char *rs6[]={(const char*)0, (const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={"CpShape",};static const char *rs26[]={"CpShape",};static const char *rs27[]={"CpBody",};static const char *rs28[]={"CpConstraint",};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs34[]={"CpBB", (const char*)0, (const char*)0,};static const char *rs35[]={"CpVect", (const char*)0,};static const char *rs36[]={(const char*)0, (const char*)0,};static const char *rs37[]={(const char*)0,};static const char *rs38[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38}; return r;}
const sUI   *YAC_VCALL CpSpace::yacMethodGetReturnTypes          (void) {static const sUI r[]={4, 4, 0, 0, 3, 0, 0, 2, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 0, 3, 0, 0, 0}; return r;}
const char **YAC_VCALL CpSpace::yacMethodGetReturnObjectTypes    (void) {static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, "CpShape", (const char*)0, (const char*)0, (const char*)0}; return r;}
const void **YAC_VCALL CpSpace::yacMethodGetAdr                  (void) {static const void *r[]={(void*)Object__operator, (void*)CpSpace___New, (void*)CpSpace___free, (void*)CpSpace___init, (void*)CpSpace___getGravity, (void*)CpSpace___setGravity, (void*)CpSpace___setGravity2f, (void*)CpSpace___getDamping, (void*)CpSpace___setDamping, (void*)CpSpace___getIterations, (void*)CpSpace___setIterations, (void*)CpSpace___getIdleSpeedThreshold, (void*)CpSpace___setIdleSpeedThreshold, (void*)CpSpace___getSleepTimeThreshold, (void*)CpSpace___setSleepTimeThreshold, (void*)CpSpace___getCollisionSlop, (void*)CpSpace___setCollisionSlop, (void*)CpSpace___getCollisionBias, (void*)CpSpace___setCollisionBias, (void*)CpSpace___getCollisionPersistence, (void*)CpSpace___setCollisionPersistence, (void*)CpSpace___addShape, (void*)CpSpace___addBody, (void*)CpSpace___addConstraint, (void*)CpSpace___addJoint, (void*)CpSpace___removeShape, (void*)CpSpace___queueRemoveShapeAndBody, (void*)CpSpace___removeBody, (void*)CpSpace___removeConstraint, (void*)CpSpace___freeChildren, (void*)CpSpace___getShapes, (void*)CpSpace___getBodies, (void*)CpSpace___getConstraints, (void*)CpSpace___addCollisionHandlers, (void*)CpSpace___bbQuery, (void*)CpSpace___pointQueryNearest, (void*)CpSpace___useSpatialHash, (void*)CpSpace___reindexStatic, (void*)CpSpace___step}; return r;}
sUI          YAC_VCALL CpSpace::yacConstantGetNum                (void) {return 1;}
const char **YAC_VCALL CpSpace::yacConstantGetNames              (void) {static const char*r[]={"CPSPACE_MAX_COLLISION_HANDLERS"}; return r;}
const sUI   *YAC_VCALL CpSpace::yacConstantGetTypes              (void) {static const sUI r[]={1}; return r;}
yacmemptr    YAC_VCALL CpSpace::yacConstantGetValues             (void) {static sUI r[1]; yacmemptr m; m.ui=r; m.si[0]=(sSI)256;; return m;}

YAC_C(CpSpace, "CpSpace");

void  YAC_CALL CpSpace___New        (void *_o, YAC_Value *_r                 ) {((CpSpace*)_o)->_New(_r);}
void  YAC_CALL CpSpace___free       (void *_o                                ) {((CpSpace*)_o)->_free();}
void  YAC_CALL CpSpace___init       (void *_o                                ) {((CpSpace*)_o)->_init();}
void* YAC_CALL CpSpace___getGravity (void *_o                                ) {return (void*)((CpSpace*)_o)->_getGravity();}
void  YAC_CALL CpSpace___setGravity (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpSpace*)_o)->_setGravity((CpVect*)_args.mem[0].o);}}
void  YAC_CALL CpSpace___setGravity2f(void *_o, yacmemptr _args              ) {((CpSpace*)_o)->_setGravity2f(_args.mem[0].f32, _args.mem[1].f32);}
sF32  YAC_CALL CpSpace___getDamping (void *_o                                ) {return (sF32)((CpSpace*)_o)->_getDamping();}
void  YAC_CALL CpSpace___setDamping (void *_o, yacmemptr _args               ) {((CpSpace*)_o)->_setDamping(_args.mem[0].f32);}
sSI   YAC_CALL CpSpace___getIterations(void *_o                              ) {return (sSI)((CpSpace*)_o)->_getIterations();}
void  YAC_CALL CpSpace___setIterations(void *_o, yacmemptr _args             ) {((CpSpace*)_o)->_setIterations(_args.mem[0].si);}
sF32  YAC_CALL CpSpace___getIdleSpeedThreshold(void *_o                      ) {return (sF32)((CpSpace*)_o)->_getIdleSpeedThreshold();}
void  YAC_CALL CpSpace___setIdleSpeedThreshold(void *_o, yacmemptr _args     ) {((CpSpace*)_o)->_setIdleSpeedThreshold(_args.mem[0].f32);}
sF32  YAC_CALL CpSpace___getSleepTimeThreshold(void *_o                      ) {return (sF32)((CpSpace*)_o)->_getSleepTimeThreshold();}
void  YAC_CALL CpSpace___setSleepTimeThreshold(void *_o, yacmemptr _args     ) {((CpSpace*)_o)->_setSleepTimeThreshold(_args.mem[0].f32);}
sF32  YAC_CALL CpSpace___getCollisionSlop(void *_o                           ) {return (sF32)((CpSpace*)_o)->_getCollisionSlop();}
void  YAC_CALL CpSpace___setCollisionSlop(void *_o, yacmemptr _args          ) {((CpSpace*)_o)->_setCollisionSlop(_args.mem[0].f32);}
sF32  YAC_CALL CpSpace___getCollisionBias(void *_o                           ) {return (sF32)((CpSpace*)_o)->_getCollisionBias();}
void  YAC_CALL CpSpace___setCollisionBias(void *_o, yacmemptr _args          ) {((CpSpace*)_o)->_setCollisionBias(_args.mem[0].f32);}
sSI   YAC_CALL CpSpace___getCollisionPersistence(void *_o                    ) {return (sSI)((CpSpace*)_o)->_getCollisionPersistence();}
void  YAC_CALL CpSpace___setCollisionPersistence(void *_o, yacmemptr _args   ) {((CpSpace*)_o)->_setCollisionPersistence(_args.mem[0].si);}
void  YAC_CALL CpSpace___addShape   (void *_o, yacmemptr _args               ) {((CpSpace*)_o)->_addShape(_args.mem[0].o);}
void  YAC_CALL CpSpace___addBody    (void *_o, yacmemptr _args               ) {((CpSpace*)_o)->_addBody(_args.mem[0].o);}
void  YAC_CALL CpSpace___addConstraint(void *_o, yacmemptr _args             ) {((CpSpace*)_o)->_addConstraint(_args.mem[0].o);}
void  YAC_CALL CpSpace___addJoint   (void *_o, yacmemptr _args               ) {((CpSpace*)_o)->_addJoint(_args.mem[0].o);}
void  YAC_CALL CpSpace___removeShape(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_CpShape)){ ((CpSpace*)_o)->_removeShape((CpShape*)_args.mem[0].o);}}
void  YAC_CALL CpSpace___queueRemoveShapeAndBody(void *_o, yacmemptr _args   ) {if(YAC_BCHK(_args.mem[0].o, clid_CpShape)){ ((CpSpace*)_o)->_queueRemoveShapeAndBody((CpShape*)_args.mem[0].o);}}
void  YAC_CALL CpSpace___removeBody (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_CpBody)){ ((CpSpace*)_o)->_removeBody((CpBody*)_args.mem[0].o);}}
void  YAC_CALL CpSpace___removeConstraint(void *_o, yacmemptr _args          ) {if(YAC_BCHK(_args.mem[0].o, clid_CpConstraint)){ ((CpSpace*)_o)->_removeConstraint((CpConstraint*)_args.mem[0].o);}}
void  YAC_CALL CpSpace___freeChildren(void *_o                               ) {((CpSpace*)_o)->_freeChildren();}
void* YAC_CALL CpSpace___getShapes  (void *_o                                ) {return (void*)((CpSpace*)_o)->_getShapes();}
void* YAC_CALL CpSpace___getBodies  (void *_o                                ) {return (void*)((CpSpace*)_o)->_getBodies();}
void* YAC_CALL CpSpace___getConstraints(void *_o                             ) {return (void*)((CpSpace*)_o)->_getConstraints();}
sSI   YAC_CALL CpSpace___addCollisionHandlers(void *_o, yacmemptr _args      ) {return (sSI)((CpSpace*)_o)->_addCollisionHandlers(_args.mem[0].si, _args.mem[1].si, _args.mem[2].o, _args.mem[3].o, _args.mem[4].o, _args.mem[5].o, _args.mem[6].o);}
void  YAC_CALL CpSpace___bbQuery    (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_CpBB)){ ((CpSpace*)_o)->_bbQuery((CpBB*)_args.mem[0].o, _args.mem[1].o, _args.mem[2].o);}}
void* YAC_CALL CpSpace___pointQueryNearest(void *_o, yacmemptr _args         ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ return (void*)((CpSpace*)_o)->_pointQueryNearest((CpVect*)_args.mem[0].o, _args.mem[1].f32);}return (void*)0;}
void  YAC_CALL CpSpace___useSpatialHash(void *_o, yacmemptr _args            ) {((CpSpace*)_o)->_useSpatialHash(_args.mem[0].f32, _args.mem[1].si);}
void  YAC_CALL CpSpace___reindexStatic(void *_o                              ) {((CpSpace*)_o)->_reindexStatic();}
void  YAC_CALL CpSpace___step       (void *_o, yacmemptr _args               ) {((CpSpace*)_o)->_step(_args.mem[0].f32);}
