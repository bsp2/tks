// ---- ying_cp_CpVect.cpp: auto generated by YInG - the YAC interface generator (Sun, 26/Sep/2021 12:44:11)

sF32  YAC_CALL CpVect___getX        (void *                        );
void  YAC_CALL CpVect___setX        (void *, yacmemptr             );
sF32  YAC_CALL CpVect___getY        (void *                        );
void  YAC_CALL CpVect___setY        (void *, yacmemptr             );
void  YAC_CALL CpVect___getString   (void *, YAC_Value *           );
void  YAC_CALL CpVect___init        (void *, yacmemptr             );
void  YAC_CALL CpVect___add_YAC_RARG(void *, yacmemptr             );
void  YAC_CALL CpVect___add_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___add_YAC_RSELF(void *, yacmemptr            );
void  YAC_CALL CpVect___sub_YAC_RARG(void *, yacmemptr             );
void  YAC_CALL CpVect___sub_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___sub_YAC_RSELF(void *, yacmemptr            );
void  YAC_CALL CpVect___neg_YAC_RARG(void *, yacmemptr             );
void  YAC_CALL CpVect___neg_YAC_RVAL(void *, YAC_Value *           );
void  YAC_CALL CpVect___neg_YAC_RSELF(void *                       );
void  YAC_CALL CpVect___mult_YAC_RARG(void *, yacmemptr            );
void  YAC_CALL CpVect___mult_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___mult_YAC_RSELF(void *, yacmemptr           );
sF32  YAC_CALL CpVect___dot         (void *, yacmemptr             );
sF32  YAC_CALL CpVect___cross       (void *, yacmemptr             );
void  YAC_CALL CpVect___perp_YAC_RARG(void *, yacmemptr            );
void  YAC_CALL CpVect___perp_YAC_RVAL(void *, YAC_Value *          );
void  YAC_CALL CpVect___perp_YAC_RSELF(void *                      );
void  YAC_CALL CpVect___rperp_YAC_RARG(void *, yacmemptr           );
void  YAC_CALL CpVect___rperp_YAC_RVAL(void *, YAC_Value *         );
void  YAC_CALL CpVect___rperp_YAC_RSELF(void *                     );
void  YAC_CALL CpVect___project_YAC_RARG(void *, yacmemptr         );
void  YAC_CALL CpVect___project_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___project_YAC_RSELF(void *, yacmemptr        );
void  YAC_CALL CpVect___forAngle_YAC_RARG(void *, yacmemptr        );
void  YAC_CALL CpVect___forAngle_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___forAngle_YAC_RSELF(void *, yacmemptr       );
sF32  YAC_CALL CpVect___toAngle     (void *                        );
sF32  YAC_CALL CpVect___getAngle    (void *                        );
void  YAC_CALL CpVect___rotate_YAC_RARG(void *, yacmemptr          );
void  YAC_CALL CpVect___rotate_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___rotate_YAC_RSELF(void *, yacmemptr         );
void  YAC_CALL CpVect___unrotate_YAC_RARG(void *, yacmemptr        );
void  YAC_CALL CpVect___unrotate_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___unrotate_YAC_RSELF(void *, yacmemptr       );
sF32  YAC_CALL CpVect___getLength   (void *                        );
sF32  YAC_CALL CpVect___getLengthSq (void *                        );
void  YAC_CALL CpVect___lerp_YAC_RARG(void *, yacmemptr            );
void  YAC_CALL CpVect___lerp_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___lerp_YAC_RSELF(void *, yacmemptr           );
void  YAC_CALL CpVect___normalize_YAC_RARG(void *, yacmemptr       );
void  YAC_CALL CpVect___normalize_YAC_RVAL(void *, YAC_Value *     );
void  YAC_CALL CpVect___normalize_YAC_RSELF(void *                 );
void  YAC_CALL CpVect___slerp_YAC_RARG(void *, yacmemptr           );
void  YAC_CALL CpVect___slerp_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___slerp_YAC_RSELF(void *, yacmemptr          );
void  YAC_CALL CpVect___slerpconst_YAC_RARG(void *, yacmemptr      );
void  YAC_CALL CpVect___slerpconst_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___slerpconst_YAC_RSELF(void *, yacmemptr     );
void  YAC_CALL CpVect___clamp_YAC_RARG(void *, yacmemptr           );
void  YAC_CALL CpVect___clamp_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___clamp_YAC_RSELF(void *, yacmemptr          );
void  YAC_CALL CpVect___lerpconst_YAC_RARG(void *, yacmemptr       );
void  YAC_CALL CpVect___lerpconst_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___lerpconst_YAC_RSELF(void *, yacmemptr      );
sF32  YAC_CALL CpVect___dist        (void *, yacmemptr             );
sF32  YAC_CALL CpVect___distSq      (void *, yacmemptr             );
sSI   YAC_CALL CpVect___near        (void *, yacmemptr             );
void  YAC_CALL CpVect___rand_YAC_RARG(void *, yacmemptr            );
void  YAC_CALL CpVect___rand_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___rand_YAC_RSELF(void *, yacmemptr           );
void  YAC_CALL CpVect___randNormalize_YAC_RARG(void *, yacmemptr   );
void  YAC_CALL CpVect___randNormalize_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CpVect___randNormalize_YAC_RSELF(void *, yacmemptr  );

// ------------------ YAC class "CpVect" reflection map (implementation) ------------------
sUI          YAC_VCALL CpVect::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL CpVect::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL CpVect::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL CpVect::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL CpVect::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL CpVect::yacMethodGetNum                  (void) {return 70;}
const char **YAC_VCALL CpVect::yacMethodGetNames                (void) {static const char *r[]={"operator", "getX", "setX", "getY", "setY", "getString", "init", "add_YAC_RARG", "add_YAC_RVAL", "add_YAC_RSELF", "sub_YAC_RARG", "sub_YAC_RVAL", "sub_YAC_RSELF", "neg_YAC_RARG", "neg_YAC_RVAL", "neg_YAC_RSELF", "mult_YAC_RARG", "mult_YAC_RVAL", "mult_YAC_RSELF", "dot", "cross", "perp_YAC_RARG", "perp_YAC_RVAL", "perp_YAC_RSELF", "rperp_YAC_RARG", "rperp_YAC_RVAL", "rperp_YAC_RSELF", "project_YAC_RARG", "project_YAC_RVAL", "project_YAC_RSELF", "forAngle_YAC_RARG", "forAngle_YAC_RVAL", "forAngle_YAC_RSELF", "toAngle", "getAngle", "rotate_YAC_RARG", "rotate_YAC_RVAL", "rotate_YAC_RSELF", "unrotate_YAC_RARG", "unrotate_YAC_RVAL", "unrotate_YAC_RSELF", "getLength", "getLengthSq", "lerp_YAC_RARG", "lerp_YAC_RVAL", "lerp_YAC_RSELF", "normalize_YAC_RARG", "normalize_YAC_RVAL", "normalize_YAC_RSELF", "slerp_YAC_RARG", "slerp_YAC_RVAL", "slerp_YAC_RSELF", "slerpconst_YAC_RARG", "slerpconst_YAC_RVAL", "slerpconst_YAC_RSELF", "clamp_YAC_RARG", "clamp_YAC_RVAL", "clamp_YAC_RSELF", "lerpconst_YAC_RARG", "lerpconst_YAC_RVAL", "lerpconst_YAC_RSELF", "dist", "distSq", "near", "rand_YAC_RARG", "rand_YAC_RVAL", "rand_YAC_RSELF", "randNormalize_YAC_RARG", "randNormalize_YAC_RVAL", "randNormalize_YAC_RSELF"}; return r;}
const sUI   *YAC_VCALL CpVect::yacMethodGetNumParameters        (void) {static const sUI r[]={2, 0, 1, 0, 1, 0, 2, 2, 1, 1, 2, 1, 1, 1, 0, 0, 2, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 2, 1, 1, 2, 1, 1, 0, 0, 2, 1, 1, 2, 1, 1, 0, 0, 3, 2, 2, 1, 0, 0, 3, 2, 2, 3, 2, 2, 2, 1, 1, 3, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1}; return r;}
const sUI  **YAC_VCALL CpVect::yacMethodGetParameterTypes       (void) {static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={2,};static const sUI rt3[]={0,};static const sUI rt4[]={2,};static const sUI rt5[]={0,};static const sUI rt6[]={2, 2,};static const sUI rt7[]={3, 3,};static const sUI rt8[]={3,};static const sUI rt9[]={3,};static const sUI rt10[]={3, 3,};static const sUI rt11[]={3,};static const sUI rt12[]={3,};static const sUI rt13[]={3,};static const sUI rt14[]={0,};static const sUI rt15[]={0,};static const sUI rt16[]={2, 3,};static const sUI rt17[]={2,};static const sUI rt18[]={2,};static const sUI rt19[]={3,};static const sUI rt20[]={3,};static const sUI rt21[]={3,};static const sUI rt22[]={0,};static const sUI rt23[]={0,};static const sUI rt24[]={3,};static const sUI rt25[]={0,};static const sUI rt26[]={0,};static const sUI rt27[]={3, 3,};static const sUI rt28[]={3,};static const sUI rt29[]={3,};static const sUI rt30[]={2, 3,};static const sUI rt31[]={2,};static const sUI rt32[]={2,};static const sUI rt33[]={0,};static const sUI rt34[]={0,};static const sUI rt35[]={3, 3,};static const sUI rt36[]={3,};static const sUI rt37[]={3,};static const sUI rt38[]={3, 3,};static const sUI rt39[]={3,};static const sUI rt40[]={3,};static const sUI rt41[]={0,};static const sUI rt42[]={0,};static const sUI rt43[]={3, 2, 3,};static const sUI rt44[]={3, 2,};static const sUI rt45[]={3, 2,};static const sUI rt46[]={3,};static const sUI rt47[]={0,};static const sUI rt48[]={0,};static const sUI rt49[]={3, 2, 3,};static const sUI rt50[]={3, 2,};static const sUI rt51[]={3, 2,};static const sUI rt52[]={3, 2, 3,};static const sUI rt53[]={3, 2,};static const sUI rt54[]={3, 2,};static const sUI rt55[]={2, 3,};static const sUI rt56[]={2,};static const sUI rt57[]={2,};static const sUI rt58[]={3, 2, 3,};static const sUI rt59[]={3, 2,};static const sUI rt60[]={3, 2,};static const sUI rt61[]={3,};static const sUI rt62[]={3,};static const sUI rt63[]={3, 2,};static const sUI rt64[]={2, 3,};static const sUI rt65[]={2,};static const sUI rt66[]={2,};static const sUI rt67[]={2, 3,};static const sUI rt68[]={2,};static const sUI rt69[]={2,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39, rt40, rt41, rt42, rt43, rt44, rt45, rt46, rt47, rt48, rt49, rt50, rt51, rt52, rt53, rt54, rt55, rt56, rt57, rt58, rt59, rt60, rt61, rt62, rt63, rt64, rt65, rt66, rt67, rt68, rt69}; return r;}
const char***YAC_VCALL CpVect::yacMethodGetParameterObjectTypes (void) {static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0, (const char*)0,};static const char *rs7[]={"CpVect", "CpVect",};static const char *rs8[]={"CpVect",};static const char *rs9[]={"CpVect",};static const char *rs10[]={"CpVect", "CpVect",};static const char *rs11[]={"CpVect",};static const char *rs12[]={"CpVect",};static const char *rs13[]={"CpVect",};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0, "CpVect",};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={"CpVect",};static const char *rs20[]={"CpVect",};static const char *rs21[]={"CpVect",};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={"CpVect",};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={"CpVect", "CpVect",};static const char *rs28[]={"CpVect",};static const char *rs29[]={"CpVect",};static const char *rs30[]={(const char*)0, "CpVect",};static const char *rs31[]={(const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char *rs34[]={(const char*)0,};static const char *rs35[]={"CpVect", "CpVect",};static const char *rs36[]={"CpVect",};static const char *rs37[]={"CpVect",};static const char *rs38[]={"CpVect", "CpVect",};static const char *rs39[]={"CpVect",};static const char *rs40[]={"CpVect",};static const char *rs41[]={(const char*)0,};static const char *rs42[]={(const char*)0,};static const char *rs43[]={"CpVect", (const char*)0, "CpVect",};static const char *rs44[]={"CpVect", (const char*)0,};static const char *rs45[]={"CpVect", (const char*)0,};static const char *rs46[]={"CpVect",};static const char *rs47[]={(const char*)0,};static const char *rs48[]={(const char*)0,};static const char *rs49[]={"CpVect", (const char*)0, "CpVect",};static const char *rs50[]={"CpVect", (const char*)0,};static const char *rs51[]={"CpVect", (const char*)0,};static const char *rs52[]={"CpVect", (const char*)0, "CpVect",};static const char *rs53[]={"CpVect", (const char*)0,};static const char *rs54[]={"CpVect", (const char*)0,};static const char *rs55[]={(const char*)0, "CpVect",};static const char *rs56[]={(const char*)0,};static const char *rs57[]={(const char*)0,};static const char *rs58[]={"CpVect", (const char*)0, "CpVect",};static const char *rs59[]={"CpVect", (const char*)0,};static const char *rs60[]={"CpVect", (const char*)0,};static const char *rs61[]={"CpVect",};static const char *rs62[]={"CpVect",};static const char *rs63[]={"CpVect", (const char*)0,};static const char *rs64[]={(const char*)0, "CpVect",};static const char *rs65[]={(const char*)0,};static const char *rs66[]={(const char*)0,};static const char *rs67[]={(const char*)0, "CpVect",};static const char *rs68[]={(const char*)0,};static const char *rs69[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39, rs40, rs41, rs42, rs43, rs44, rs45, rs46, rs47, rs48, rs49, rs50, rs51, rs52, rs53, rs54, rs55, rs56, rs57, rs58, rs59, rs60, rs61, rs62, rs63, rs64, rs65, rs66, rs67, rs68, rs69}; return r;}
const sUI   *YAC_VCALL CpVect::yacMethodGetReturnTypes          (void) {static const sUI r[]={4, 2, 0, 2, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 2, 2, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 2, 2, 0, 4, 0, 0, 4, 0, 2, 2, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 2, 2, 1, 0, 4, 0, 0, 4, 0}; return r;}
const char **YAC_VCALL CpVect::yacMethodGetReturnObjectTypes    (void) {static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;}
const void **YAC_VCALL CpVect::yacMethodGetAdr                  (void) {static const void *r[]={(void*)Object__operator, (void*)CpVect___getX, (void*)CpVect___setX, (void*)CpVect___getY, (void*)CpVect___setY, (void*)CpVect___getString, (void*)CpVect___init, (void*)CpVect___add_YAC_RARG, (void*)CpVect___add_YAC_RVAL, (void*)CpVect___add_YAC_RSELF, (void*)CpVect___sub_YAC_RARG, (void*)CpVect___sub_YAC_RVAL, (void*)CpVect___sub_YAC_RSELF, (void*)CpVect___neg_YAC_RARG, (void*)CpVect___neg_YAC_RVAL, (void*)CpVect___neg_YAC_RSELF, (void*)CpVect___mult_YAC_RARG, (void*)CpVect___mult_YAC_RVAL, (void*)CpVect___mult_YAC_RSELF, (void*)CpVect___dot, (void*)CpVect___cross, (void*)CpVect___perp_YAC_RARG, (void*)CpVect___perp_YAC_RVAL, (void*)CpVect___perp_YAC_RSELF, (void*)CpVect___rperp_YAC_RARG, (void*)CpVect___rperp_YAC_RVAL, (void*)CpVect___rperp_YAC_RSELF, (void*)CpVect___project_YAC_RARG, (void*)CpVect___project_YAC_RVAL, (void*)CpVect___project_YAC_RSELF, (void*)CpVect___forAngle_YAC_RARG, (void*)CpVect___forAngle_YAC_RVAL, (void*)CpVect___forAngle_YAC_RSELF, (void*)CpVect___toAngle, (void*)CpVect___getAngle, (void*)CpVect___rotate_YAC_RARG, (void*)CpVect___rotate_YAC_RVAL, (void*)CpVect___rotate_YAC_RSELF, (void*)CpVect___unrotate_YAC_RARG, (void*)CpVect___unrotate_YAC_RVAL, (void*)CpVect___unrotate_YAC_RSELF, (void*)CpVect___getLength, (void*)CpVect___getLengthSq, (void*)CpVect___lerp_YAC_RARG, (void*)CpVect___lerp_YAC_RVAL, (void*)CpVect___lerp_YAC_RSELF, (void*)CpVect___normalize_YAC_RARG, (void*)CpVect___normalize_YAC_RVAL, (void*)CpVect___normalize_YAC_RSELF, (void*)CpVect___slerp_YAC_RARG, (void*)CpVect___slerp_YAC_RVAL, (void*)CpVect___slerp_YAC_RSELF, (void*)CpVect___slerpconst_YAC_RARG, (void*)CpVect___slerpconst_YAC_RVAL, (void*)CpVect___slerpconst_YAC_RSELF, (void*)CpVect___clamp_YAC_RARG, (void*)CpVect___clamp_YAC_RVAL, (void*)CpVect___clamp_YAC_RSELF, (void*)CpVect___lerpconst_YAC_RARG, (void*)CpVect___lerpconst_YAC_RVAL, (void*)CpVect___lerpconst_YAC_RSELF, (void*)CpVect___dist, (void*)CpVect___distSq, (void*)CpVect___near, (void*)CpVect___rand_YAC_RARG, (void*)CpVect___rand_YAC_RVAL, (void*)CpVect___rand_YAC_RSELF, (void*)CpVect___randNormalize_YAC_RARG, (void*)CpVect___randNormalize_YAC_RVAL, (void*)CpVect___randNormalize_YAC_RSELF}; return r;}
sUI          YAC_VCALL CpVect::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL CpVect::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL CpVect::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL CpVect::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C_POOLED(CpVect, "CpVect");

sF32  YAC_CALL CpVect___getX        (void *_o                                ) {return (sF32)((CpVect*)_o)->_getX();}
void  YAC_CALL CpVect___setX        (void *_o, yacmemptr _args               ) {((CpVect*)_o)->_setX(_args.mem[0].f32);}
sF32  YAC_CALL CpVect___getY        (void *_o                                ) {return (sF32)((CpVect*)_o)->_getY();}
void  YAC_CALL CpVect___setY        (void *_o, yacmemptr _args               ) {((CpVect*)_o)->_setY(_args.mem[0].f32);}
void  YAC_CALL CpVect___getString   (void *_o, YAC_Value *_r                 ) {((CpVect*)_o)->_getString(_r);}
void  YAC_CALL CpVect___init        (void *_o, yacmemptr _args               ) {((CpVect*)_o)->_init(_args.mem[0].f32, _args.mem[1].f32);}
void  YAC_CALL CpVect___add_YAC_RARG(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect))if(YAC_BCHK(_args.mem[1].o, clid_CpVect)){ ((CpVect*)_o)->_add_YAC_RARG((CpVect*)_args.mem[0].o, (CpVect*)_args.mem[1].o);}}
void  YAC_CALL CpVect___add_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_add_YAC_RVAL((CpVect*)_args.mem[0].o, _r);}}
void  YAC_CALL CpVect___add_YAC_RSELF(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_add_YAC_RSELF((CpVect*)_args.mem[0].o);}}
void  YAC_CALL CpVect___sub_YAC_RARG(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect))if(YAC_BCHK(_args.mem[1].o, clid_CpVect)){ ((CpVect*)_o)->_sub_YAC_RARG((CpVect*)_args.mem[0].o, (CpVect*)_args.mem[1].o);}}
void  YAC_CALL CpVect___sub_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_sub_YAC_RVAL((CpVect*)_args.mem[0].o, _r);}}
void  YAC_CALL CpVect___sub_YAC_RSELF(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_sub_YAC_RSELF((CpVect*)_args.mem[0].o);}}
void  YAC_CALL CpVect___neg_YAC_RARG(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_neg_YAC_RARG((CpVect*)_args.mem[0].o);}}
void  YAC_CALL CpVect___neg_YAC_RVAL(void *_o, YAC_Value *_r                 ) {((CpVect*)_o)->_neg_YAC_RVAL(_r);}
void  YAC_CALL CpVect___neg_YAC_RSELF(void *_o                               ) {((CpVect*)_o)->_neg_YAC_RSELF();}
void  YAC_CALL CpVect___mult_YAC_RARG(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[1].o, clid_CpVect)){ ((CpVect*)_o)->_mult_YAC_RARG(_args.mem[0].f32, (CpVect*)_args.mem[1].o);}}
void  YAC_CALL CpVect___mult_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {((CpVect*)_o)->_mult_YAC_RVAL(_args.mem[0].f32, _r);}
void  YAC_CALL CpVect___mult_YAC_RSELF(void *_o, yacmemptr _args             ) {((CpVect*)_o)->_mult_YAC_RSELF(_args.mem[0].f32);}
sF32  YAC_CALL CpVect___dot         (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ return (sF32)((CpVect*)_o)->_dot((CpVect*)_args.mem[0].o);}return 0.0f;}
sF32  YAC_CALL CpVect___cross       (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ return (sF32)((CpVect*)_o)->_cross((CpVect*)_args.mem[0].o);}return 0.0f;}
void  YAC_CALL CpVect___perp_YAC_RARG(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_perp_YAC_RARG((CpVect*)_args.mem[0].o);}}
void  YAC_CALL CpVect___perp_YAC_RVAL(void *_o, YAC_Value *_r                ) {((CpVect*)_o)->_perp_YAC_RVAL(_r);}
void  YAC_CALL CpVect___perp_YAC_RSELF(void *_o                              ) {((CpVect*)_o)->_perp_YAC_RSELF();}
void  YAC_CALL CpVect___rperp_YAC_RARG(void *_o, yacmemptr _args             ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_rperp_YAC_RARG((CpVect*)_args.mem[0].o);}}
void  YAC_CALL CpVect___rperp_YAC_RVAL(void *_o, YAC_Value *_r               ) {((CpVect*)_o)->_rperp_YAC_RVAL(_r);}
void  YAC_CALL CpVect___rperp_YAC_RSELF(void *_o                             ) {((CpVect*)_o)->_rperp_YAC_RSELF();}
void  YAC_CALL CpVect___project_YAC_RARG(void *_o, yacmemptr _args           ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect))if(YAC_BCHK(_args.mem[1].o, clid_CpVect)){ ((CpVect*)_o)->_project_YAC_RARG((CpVect*)_args.mem[0].o, (CpVect*)_args.mem[1].o);}}
void  YAC_CALL CpVect___project_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_project_YAC_RVAL((CpVect*)_args.mem[0].o, _r);}}
void  YAC_CALL CpVect___project_YAC_RSELF(void *_o, yacmemptr _args          ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_project_YAC_RSELF((CpVect*)_args.mem[0].o);}}
void  YAC_CALL CpVect___forAngle_YAC_RARG(void *_o, yacmemptr _args          ) {if(YAC_BCHK(_args.mem[1].o, clid_CpVect)){ ((CpVect*)_o)->_forAngle_YAC_RARG(_args.mem[0].f32, (CpVect*)_args.mem[1].o);}}
void  YAC_CALL CpVect___forAngle_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {((CpVect*)_o)->_forAngle_YAC_RVAL(_args.mem[0].f32, _r);}
void  YAC_CALL CpVect___forAngle_YAC_RSELF(void *_o, yacmemptr _args         ) {((CpVect*)_o)->_forAngle_YAC_RSELF(_args.mem[0].f32);}
sF32  YAC_CALL CpVect___toAngle     (void *_o                                ) {return (sF32)((CpVect*)_o)->_toAngle();}
sF32  YAC_CALL CpVect___getAngle    (void *_o                                ) {return (sF32)((CpVect*)_o)->_getAngle();}
void  YAC_CALL CpVect___rotate_YAC_RARG(void *_o, yacmemptr _args            ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect))if(YAC_BCHK(_args.mem[1].o, clid_CpVect)){ ((CpVect*)_o)->_rotate_YAC_RARG((CpVect*)_args.mem[0].o, (CpVect*)_args.mem[1].o);}}
void  YAC_CALL CpVect___rotate_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_rotate_YAC_RVAL((CpVect*)_args.mem[0].o, _r);}}
void  YAC_CALL CpVect___rotate_YAC_RSELF(void *_o, yacmemptr _args           ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_rotate_YAC_RSELF((CpVect*)_args.mem[0].o);}}
void  YAC_CALL CpVect___unrotate_YAC_RARG(void *_o, yacmemptr _args          ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect))if(YAC_BCHK(_args.mem[1].o, clid_CpVect)){ ((CpVect*)_o)->_unrotate_YAC_RARG((CpVect*)_args.mem[0].o, (CpVect*)_args.mem[1].o);}}
void  YAC_CALL CpVect___unrotate_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_unrotate_YAC_RVAL((CpVect*)_args.mem[0].o, _r);}}
void  YAC_CALL CpVect___unrotate_YAC_RSELF(void *_o, yacmemptr _args         ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_unrotate_YAC_RSELF((CpVect*)_args.mem[0].o);}}
sF32  YAC_CALL CpVect___getLength   (void *_o                                ) {return (sF32)((CpVect*)_o)->_getLength();}
sF32  YAC_CALL CpVect___getLengthSq (void *_o                                ) {return (sF32)((CpVect*)_o)->_getLengthSq();}
void  YAC_CALL CpVect___lerp_YAC_RARG(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect))if(YAC_BCHK(_args.mem[2].o, clid_CpVect)){ ((CpVect*)_o)->_lerp_YAC_RARG((CpVect*)_args.mem[0].o, _args.mem[1].f32, (CpVect*)_args.mem[2].o);}}
void  YAC_CALL CpVect___lerp_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_lerp_YAC_RVAL((CpVect*)_args.mem[0].o, _args.mem[1].f32, _r);}}
void  YAC_CALL CpVect___lerp_YAC_RSELF(void *_o, yacmemptr _args             ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_lerp_YAC_RSELF((CpVect*)_args.mem[0].o, _args.mem[1].f32);}}
void  YAC_CALL CpVect___normalize_YAC_RARG(void *_o, yacmemptr _args         ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_normalize_YAC_RARG((CpVect*)_args.mem[0].o);}}
void  YAC_CALL CpVect___normalize_YAC_RVAL(void *_o, YAC_Value *_r           ) {((CpVect*)_o)->_normalize_YAC_RVAL(_r);}
void  YAC_CALL CpVect___normalize_YAC_RSELF(void *_o                         ) {((CpVect*)_o)->_normalize_YAC_RSELF();}
void  YAC_CALL CpVect___slerp_YAC_RARG(void *_o, yacmemptr _args             ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect))if(YAC_BCHK(_args.mem[2].o, clid_CpVect)){ ((CpVect*)_o)->_slerp_YAC_RARG((CpVect*)_args.mem[0].o, _args.mem[1].f32, (CpVect*)_args.mem[2].o);}}
void  YAC_CALL CpVect___slerp_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_slerp_YAC_RVAL((CpVect*)_args.mem[0].o, _args.mem[1].f32, _r);}}
void  YAC_CALL CpVect___slerp_YAC_RSELF(void *_o, yacmemptr _args            ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_slerp_YAC_RSELF((CpVect*)_args.mem[0].o, _args.mem[1].f32);}}
void  YAC_CALL CpVect___slerpconst_YAC_RARG(void *_o, yacmemptr _args        ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect))if(YAC_BCHK(_args.mem[2].o, clid_CpVect)){ ((CpVect*)_o)->_slerpconst_YAC_RARG((CpVect*)_args.mem[0].o, _args.mem[1].f32, (CpVect*)_args.mem[2].o);}}
void  YAC_CALL CpVect___slerpconst_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_slerpconst_YAC_RVAL((CpVect*)_args.mem[0].o, _args.mem[1].f32, _r);}}
void  YAC_CALL CpVect___slerpconst_YAC_RSELF(void *_o, yacmemptr _args       ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_slerpconst_YAC_RSELF((CpVect*)_args.mem[0].o, _args.mem[1].f32);}}
void  YAC_CALL CpVect___clamp_YAC_RARG(void *_o, yacmemptr _args             ) {if(YAC_BCHK(_args.mem[1].o, clid_CpVect)){ ((CpVect*)_o)->_clamp_YAC_RARG(_args.mem[0].f32, (CpVect*)_args.mem[1].o);}}
void  YAC_CALL CpVect___clamp_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {((CpVect*)_o)->_clamp_YAC_RVAL(_args.mem[0].f32, _r);}
void  YAC_CALL CpVect___clamp_YAC_RSELF(void *_o, yacmemptr _args            ) {((CpVect*)_o)->_clamp_YAC_RSELF(_args.mem[0].f32);}
void  YAC_CALL CpVect___lerpconst_YAC_RARG(void *_o, yacmemptr _args         ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect))if(YAC_BCHK(_args.mem[2].o, clid_CpVect)){ ((CpVect*)_o)->_lerpconst_YAC_RARG((CpVect*)_args.mem[0].o, _args.mem[1].f32, (CpVect*)_args.mem[2].o);}}
void  YAC_CALL CpVect___lerpconst_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_lerpconst_YAC_RVAL((CpVect*)_args.mem[0].o, _args.mem[1].f32, _r);}}
void  YAC_CALL CpVect___lerpconst_YAC_RSELF(void *_o, yacmemptr _args        ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ ((CpVect*)_o)->_lerpconst_YAC_RSELF((CpVect*)_args.mem[0].o, _args.mem[1].f32);}}
sF32  YAC_CALL CpVect___dist        (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ return (sF32)((CpVect*)_o)->_dist((CpVect*)_args.mem[0].o);}return 0.0f;}
sF32  YAC_CALL CpVect___distSq      (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ return (sF32)((CpVect*)_o)->_distSq((CpVect*)_args.mem[0].o);}return 0.0f;}
sSI   YAC_CALL CpVect___near        (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_CpVect)){ return (sSI)((CpVect*)_o)->_near((CpVect*)_args.mem[0].o, _args.mem[1].f32);}return 0;}
void  YAC_CALL CpVect___rand_YAC_RARG(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[1].o, clid_CpVect)){ ((CpVect*)_o)->_rand_YAC_RARG(_args.mem[0].f32, (CpVect*)_args.mem[1].o);}}
void  YAC_CALL CpVect___rand_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {((CpVect*)_o)->_rand_YAC_RVAL(_args.mem[0].f32, _r);}
void  YAC_CALL CpVect___rand_YAC_RSELF(void *_o, yacmemptr _args             ) {((CpVect*)_o)->_rand_YAC_RSELF(_args.mem[0].f32);}
void  YAC_CALL CpVect___randNormalize_YAC_RARG(void *_o, yacmemptr _args     ) {if(YAC_BCHK(_args.mem[1].o, clid_CpVect)){ ((CpVect*)_o)->_randNormalize_YAC_RARG(_args.mem[0].f32, (CpVect*)_args.mem[1].o);}}
void  YAC_CALL CpVect___randNormalize_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {((CpVect*)_o)->_randNormalize_YAC_RVAL(_args.mem[0].f32, _r);}
void  YAC_CALL CpVect___randNormalize_YAC_RSELF(void *_o, yacmemptr _args    ) {((CpVect*)_o)->_randNormalize_YAC_RSELF(_args.mem[0].f32);}
