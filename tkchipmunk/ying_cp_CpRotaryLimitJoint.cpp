// ---- ying_cp_CpRotaryLimitJoint.cpp: auto generated by YInG - the YAC interface generator (Sun, 26/Sep/2021 12:44:11)

void  YAC_CALL CpRotaryLimitJoint___initRotaryLimit(void *, yacmemptr);
void  YAC_CALL CpRotaryLimitJoint___New(void *, yacmemptr, YAC_Value *);

// ------------------ YAC class "CpRotaryLimitJoint" reflection map (implementation) ------------------
sUI          YAC_VCALL CpRotaryLimitJoint::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL CpRotaryLimitJoint::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL CpRotaryLimitJoint::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL CpRotaryLimitJoint::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL CpRotaryLimitJoint::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL CpRotaryLimitJoint::yacMethodGetNum                  (void) {return 3;}
const char **YAC_VCALL CpRotaryLimitJoint::yacMethodGetNames                (void) {static const char *r[]={"operator", "initRotaryLimit", "New"}; return r;}
const sUI   *YAC_VCALL CpRotaryLimitJoint::yacMethodGetNumParameters        (void) {static const sUI r[]={2, 4, 4}; return r;}
const sUI  **YAC_VCALL CpRotaryLimitJoint::yacMethodGetParameterTypes       (void) {static const sUI rt0[]={1,3};static const sUI rt1[]={3, 3, 2, 2,};static const sUI rt2[]={3, 3, 2, 2,};static const sUI *r[]={rt0, rt1, rt2}; return r;}
const char***YAC_VCALL CpRotaryLimitJoint::yacMethodGetParameterObjectTypes (void) {static const char *rs0[]={0,"",};static const char *rs1[]={"CpBody", "CpBody", (const char*)0, (const char*)0,};static const char *rs2[]={"CpBody", "CpBody", (const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2}; return r;}
const sUI   *YAC_VCALL CpRotaryLimitJoint::yacMethodGetReturnTypes          (void) {static const sUI r[]={4, 0, 4}; return r;}
const char **YAC_VCALL CpRotaryLimitJoint::yacMethodGetReturnObjectTypes    (void) {static const char *r[]={"", (const char*)0, (const char*)0}; return r;}
const void **YAC_VCALL CpRotaryLimitJoint::yacMethodGetAdr                  (void) {static const void *r[]={(void*)Object__operator, (void*)CpRotaryLimitJoint___initRotaryLimit, (void*)CpRotaryLimitJoint___New}; return r;}
sUI          YAC_VCALL CpRotaryLimitJoint::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL CpRotaryLimitJoint::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL CpRotaryLimitJoint::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL CpRotaryLimitJoint::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(CpRotaryLimitJoint, "CpRotaryLimitJoint");

void  YAC_CALL CpRotaryLimitJoint___initRotaryLimit(void *_o, yacmemptr _args) {if(YAC_BCHK(_args.mem[0].o, clid_CpBody))if(YAC_BCHK(_args.mem[1].o, clid_CpBody)){ ((CpRotaryLimitJoint*)_o)->_initRotaryLimit((CpBody*)_args.mem[0].o, (CpBody*)_args.mem[1].o, _args.mem[2].f32, _args.mem[3].f32);}}
void  YAC_CALL CpRotaryLimitJoint___New(void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, clid_CpBody))if(YAC_BCHK(_args.mem[1].o, clid_CpBody)){ ((CpRotaryLimitJoint*)_o)->_New((CpBody*)_args.mem[0].o, (CpBody*)_args.mem[1].o, _args.mem[2].f32, _args.mem[3].f32, _r);}}
