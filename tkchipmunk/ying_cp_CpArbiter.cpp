// ---- ying_cp_CpArbiter.cpp: auto generated by YInG - the YAC interface generator (Sun, 26/Sep/2021 12:44:11)

void* YAC_CALL CpArbiter___getShapeA(void *                        );
void* YAC_CALL CpArbiter___getShapeB(void *                        );
void* YAC_CALL CpArbiter___getBodyA (void *                        );
void* YAC_CALL CpArbiter___getBodyB (void *                        );
sF32  YAC_CALL CpArbiter___getRestitution(void *                   );
void  YAC_CALL CpArbiter___setRestitution(void *, yacmemptr        );
sF32  YAC_CALL CpArbiter___getFriction(void *                      );
void  YAC_CALL CpArbiter___setFriction(void *, yacmemptr           );
void* YAC_CALL CpArbiter___getSurfaceVelocity(void *               );
void  YAC_CALL CpArbiter___setSurfaceVelocity(void *, yacmemptr    );
void* YAC_CALL CpArbiter___getTotalImpulse(void *                  );
sF32  YAC_CALL CpArbiter___getTotalKE(void *                       );
void  YAC_CALL CpArbiter___ignore   (void *                        );
sSI   YAC_CALL CpArbiter___isFirstContact(void *                   );
sSI   YAC_CALL CpArbiter___isRemoval(void *                        );
sSI   YAC_CALL CpArbiter___getCount (void *                        );
void* YAC_CALL CpArbiter___getNormal(void *                        );
void* YAC_CALL CpArbiter___getPointA(void *                        );
void* YAC_CALL CpArbiter___getPointAByIndex(void *, yacmemptr      );
void* YAC_CALL CpArbiter___getPointB(void *                        );
void* YAC_CALL CpArbiter___getPointBByIndex(void *, yacmemptr      );
sF32  YAC_CALL CpArbiter___getDepth (void *                        );
sF32  YAC_CALL CpArbiter___getDepthByIndex(void *, yacmemptr       );

// ------------------ YAC class "CpArbiter" reflection map (implementation) ------------------
sUI          YAC_VCALL CpArbiter::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL CpArbiter::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL CpArbiter::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL CpArbiter::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL CpArbiter::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL CpArbiter::yacMethodGetNum                  (void) {return 24;}
const char **YAC_VCALL CpArbiter::yacMethodGetNames                (void) {static const char *r[]={"operator", "getShapeA", "getShapeB", "getBodyA", "getBodyB", "getRestitution", "setRestitution", "getFriction", "setFriction", "getSurfaceVelocity", "setSurfaceVelocity", "getTotalImpulse", "getTotalKE", "ignore", "isFirstContact", "isRemoval", "getCount", "getNormal", "getPointA", "getPointAByIndex", "getPointB", "getPointBByIndex", "getDepth", "getDepthByIndex"}; return r;}
const sUI   *YAC_VCALL CpArbiter::yacMethodGetNumParameters        (void) {static const sUI r[]={2, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1}; return r;}
const sUI  **YAC_VCALL CpArbiter::yacMethodGetParameterTypes       (void) {static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={2,};static const sUI rt7[]={0,};static const sUI rt8[]={2,};static const sUI rt9[]={0,};static const sUI rt10[]={3,};static const sUI rt11[]={0,};static const sUI rt12[]={0,};static const sUI rt13[]={0,};static const sUI rt14[]={0,};static const sUI rt15[]={0,};static const sUI rt16[]={0,};static const sUI rt17[]={0,};static const sUI rt18[]={0,};static const sUI rt19[]={1,};static const sUI rt20[]={0,};static const sUI rt21[]={1,};static const sUI rt22[]={0,};static const sUI rt23[]={1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23}; return r;}
const char***YAC_VCALL CpArbiter::yacMethodGetParameterObjectTypes (void) {static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23}; return r;}
const sUI   *YAC_VCALL CpArbiter::yacMethodGetReturnTypes          (void) {static const sUI r[]={4, 3, 3, 3, 3, 2, 0, 2, 0, 3, 0, 3, 2, 0, 1, 1, 1, 3, 3, 3, 3, 3, 2, 2}; return r;}
const char **YAC_VCALL CpArbiter::yacMethodGetReturnObjectTypes    (void) {static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;}
const void **YAC_VCALL CpArbiter::yacMethodGetAdr                  (void) {static const void *r[]={(void*)Object__operator, (void*)CpArbiter___getShapeA, (void*)CpArbiter___getShapeB, (void*)CpArbiter___getBodyA, (void*)CpArbiter___getBodyB, (void*)CpArbiter___getRestitution, (void*)CpArbiter___setRestitution, (void*)CpArbiter___getFriction, (void*)CpArbiter___setFriction, (void*)CpArbiter___getSurfaceVelocity, (void*)CpArbiter___setSurfaceVelocity, (void*)CpArbiter___getTotalImpulse, (void*)CpArbiter___getTotalKE, (void*)CpArbiter___ignore, (void*)CpArbiter___isFirstContact, (void*)CpArbiter___isRemoval, (void*)CpArbiter___getCount, (void*)CpArbiter___getNormal, (void*)CpArbiter___getPointA, (void*)CpArbiter___getPointAByIndex, (void*)CpArbiter___getPointB, (void*)CpArbiter___getPointBByIndex, (void*)CpArbiter___getDepth, (void*)CpArbiter___getDepthByIndex}; return r;}
sUI          YAC_VCALL CpArbiter::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL CpArbiter::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL CpArbiter::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL CpArbiter::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(CpArbiter, "CpArbiter");

void* YAC_CALL CpArbiter___getShapeA(void *_o                                ) {return (void*)((CpArbiter*)_o)->_getShapeA();}
void* YAC_CALL CpArbiter___getShapeB(void *_o                                ) {return (void*)((CpArbiter*)_o)->_getShapeB();}
void* YAC_CALL CpArbiter___getBodyA (void *_o                                ) {return (void*)((CpArbiter*)_o)->_getBodyA();}
void* YAC_CALL CpArbiter___getBodyB (void *_o                                ) {return (void*)((CpArbiter*)_o)->_getBodyB();}
sF32  YAC_CALL CpArbiter___getRestitution(void *_o                           ) {return (sF32)((CpArbiter*)_o)->_getRestitution();}
void  YAC_CALL CpArbiter___setRestitution(void *_o, yacmemptr _args          ) {((CpArbiter*)_o)->_setRestitution(_args.mem[0].f32);}
sF32  YAC_CALL CpArbiter___getFriction(void *_o                              ) {return (sF32)((CpArbiter*)_o)->_getFriction();}
void  YAC_CALL CpArbiter___setFriction(void *_o, yacmemptr _args             ) {((CpArbiter*)_o)->_setFriction(_args.mem[0].f32);}
void* YAC_CALL CpArbiter___getSurfaceVelocity(void *_o                       ) {return (void*)((CpArbiter*)_o)->_getSurfaceVelocity();}
void  YAC_CALL CpArbiter___setSurfaceVelocity(void *_o, yacmemptr _args      ) {((CpArbiter*)_o)->_setSurfaceVelocity(_args.mem[0].o);}
void* YAC_CALL CpArbiter___getTotalImpulse(void *_o                          ) {return (void*)((CpArbiter*)_o)->_getTotalImpulse();}
sF32  YAC_CALL CpArbiter___getTotalKE(void *_o                               ) {return (sF32)((CpArbiter*)_o)->_getTotalKE();}
void  YAC_CALL CpArbiter___ignore   (void *_o                                ) {((CpArbiter*)_o)->_ignore();}
sSI   YAC_CALL CpArbiter___isFirstContact(void *_o                           ) {return (sSI)((CpArbiter*)_o)->_isFirstContact();}
sSI   YAC_CALL CpArbiter___isRemoval(void *_o                                ) {return (sSI)((CpArbiter*)_o)->_isRemoval();}
sSI   YAC_CALL CpArbiter___getCount (void *_o                                ) {return (sSI)((CpArbiter*)_o)->_getCount();}
void* YAC_CALL CpArbiter___getNormal(void *_o                                ) {return (void*)((CpArbiter*)_o)->_getNormal();}
void* YAC_CALL CpArbiter___getPointA(void *_o                                ) {return (void*)((CpArbiter*)_o)->_getPointA();}
void* YAC_CALL CpArbiter___getPointAByIndex(void *_o, yacmemptr _args        ) {return (void*)((CpArbiter*)_o)->_getPointAByIndex(_args.mem[0].si);}
void* YAC_CALL CpArbiter___getPointB(void *_o                                ) {return (void*)((CpArbiter*)_o)->_getPointB();}
void* YAC_CALL CpArbiter___getPointBByIndex(void *_o, yacmemptr _args        ) {return (void*)((CpArbiter*)_o)->_getPointBByIndex(_args.mem[0].si);}
sF32  YAC_CALL CpArbiter___getDepth (void *_o                                ) {return (sF32)((CpArbiter*)_o)->_getDepth();}
sF32  YAC_CALL CpArbiter___getDepthByIndex(void *_o, yacmemptr _args         ) {return (sF32)((CpArbiter*)_o)->_getDepthByIndex(_args.mem[0].si);}
