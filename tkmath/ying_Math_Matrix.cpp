// ---- ying_Math_Matrix.cpp: auto generated by YInG - the YAC interface generator (Fri, 12/Sep/2025 13:19:00)

#ifndef YAC_NO_HOST
void  YAC_CALL Matrix___setColumnMajor(void *, yacmemptr           );
sSI   YAC_CALL Matrix___getColumnMajor(void *                      );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Matrix" reflection map (implementation) ------------------
sUI          YAC_VCALL _Matrix::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Matrix::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Matrix::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Matrix::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Matrix::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Matrix::yacMethodGetNum                  (void) {return 3;}
const char **YAC_VCALL _Matrix::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "setColumnMajor", "getColumnMajor"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Matrix::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Matrix::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={0,};static const sUI *r[]={rt0, rt1, rt2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Matrix::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Matrix::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Matrix::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Matrix::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Matrix___setColumnMajor, (void*)Matrix___getColumnMajor}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Matrix::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Matrix::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Matrix::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Matrix::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(_Matrix, "Matrix");

#ifndef YAC_NO_HOST
void  YAC_CALL Matrix___setColumnMajor(void *_o, yacmemptr _args             ) {((_Matrix*)_o)->_setColumnMajor(_args.mem[0].si);}
sSI   YAC_CALL Matrix___getColumnMajor(void *_o                              ) {return (sSI)((_Matrix*)_o)->_getColumnMajor();}
#endif // YAC_NO_HOST
