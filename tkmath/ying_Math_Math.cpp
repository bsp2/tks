// ---- ying_Math_Math.cpp: auto generated by YInG - the YAC interface generator (Fri, 12/Sep/2025 13:19:00)

#ifndef YAC_NO_HOST
void  YAC_CALL Math___setFltEpsilonUnits(void *, yacmemptr         );
void  YAC_CALL Math___setDblEpsilonUnits(void *, yacmemptr         );
sSI   YAC_CALL Math___getFltEpsilonUnits(void *                    );
sSI   YAC_CALL Math___getDblEpsilonUnits(void *                    );
void  YAC_CALL Math___setFltEpsilonZeroRange(void *, yacmemptr     );
void  YAC_CALL Math___setDblEpsilonZeroRange(void *, yacmemptr     );
sF32  YAC_CALL Math___getFltEpsilonZeroRange(void *                );
void  YAC_CALL Math___getDblEpsilonZeroRange(void *, YAC_Value *   );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Math" reflection map (implementation) ------------------
sUI          YAC_VCALL _Math::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Math::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Math::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Math::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Math::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Math::yacMethodGetNum                  (void) {return 9;}
const char **YAC_VCALL _Math::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "setFltEpsilonUnits", "setDblEpsilonUnits", "getFltEpsilonUnits", "getDblEpsilonUnits", "setFltEpsilonZeroRange", "setDblEpsilonZeroRange", "getFltEpsilonZeroRange", "getDblEpsilonZeroRange"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Math::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 1, 0, 0, 1, 1, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Math::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={1,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={2,};static const sUI rt6[]={3,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Math::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Math::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 1, 1, 0, 0, 2, 4}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Math::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Math::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Math___setFltEpsilonUnits, (void*)Math___setDblEpsilonUnits, (void*)Math___getFltEpsilonUnits, (void*)Math___getDblEpsilonUnits, (void*)Math___setFltEpsilonZeroRange, (void*)Math___setDblEpsilonZeroRange, (void*)Math___getFltEpsilonZeroRange, (void*)Math___getDblEpsilonZeroRange}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Math::yacConstantGetNum                (void) {return 13;}
const char **YAC_VCALL _Math::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"M_E", "M_LOG2E", "M_LOG10E", "M_LN2", "M_LN10", "M_PI", "M_PI_2", "M_PI_4", "M_1_PI", "M_2_PI", "M_2_SQRTPI", "M_SQRT2", "M_SQRT1_2"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Math::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL _Math::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[13]; m.ui=r; m.f32[0]=(sF32)2.7182818284590452354f;m.f32[1]=(sF32)1.4426950408889634074f;m.f32[2]=(sF32)0.43429448190325182765f;m.f32[3]=(sF32)0.69314718055994530942f;m.f32[4]=(sF32)2.30258509299404568402f;m.f32[5]=(sF32)3.14159265358979323846f;m.f32[6]=(sF32)1.57079632679489661923f;m.f32[7]=(sF32)0.78539816339744830962f;m.f32[8]=(sF32)0.31830988618379067154f;m.f32[9]=(sF32)0.63661977236758134308f;m.f32[10]=(sF32)1.12837916709551257390f;m.f32[11]=(sF32)1.41421356237309504880f;m.f32[12]=(sF32)0.70710678118654752440f;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(_Math, "Math");

#ifndef YAC_NO_HOST
void  YAC_CALL Math___setFltEpsilonUnits(void *_o, yacmemptr _args           ) {((_Math*)_o)->_setFltEpsilonUnits(_args.mem[0].si);}
void  YAC_CALL Math___setDblEpsilonUnits(void *_o, yacmemptr _args           ) {((_Math*)_o)->_setDblEpsilonUnits(_args.mem[0].si);}
sSI   YAC_CALL Math___getFltEpsilonUnits(void *_o                            ) {return (sSI)((_Math*)_o)->_getFltEpsilonUnits();}
sSI   YAC_CALL Math___getDblEpsilonUnits(void *_o                            ) {return (sSI)((_Math*)_o)->_getDblEpsilonUnits();}
void  YAC_CALL Math___setFltEpsilonZeroRange(void *_o, yacmemptr _args       ) {((_Math*)_o)->_setFltEpsilonZeroRange(_args.mem[0].f32);}
void  YAC_CALL Math___setDblEpsilonZeroRange(void *_o, yacmemptr _args       ) {((_Math*)_o)->_setDblEpsilonZeroRange(_args.mem[0].o);}
sF32  YAC_CALL Math___getFltEpsilonZeroRange(void *_o                        ) {return (sF32)((_Math*)_o)->_getFltEpsilonZeroRange();}
void  YAC_CALL Math___getDblEpsilonZeroRange(void *_o, YAC_Value *_r         ) {((_Math*)_o)->_getDblEpsilonZeroRange(_r);}
#endif // YAC_NO_HOST
