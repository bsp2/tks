// ---- ying_freeverb_Freeverb.cpp: auto generated by YInG - the YAC interface generator (Wed, 31/Jul/2019 21:23:01)

void  YAC_CALL Freeverb__mute       (void *                        );
void  YAC_CALL Freeverb__processMix (void *, yacmemptr             );
void  YAC_CALL Freeverb__setRoomSize(void *, yacmemptr             );
sF32  YAC_CALL Freeverb__getRoomSize(void *                        );
void  YAC_CALL Freeverb__setDamp    (void *, yacmemptr             );
sF32  YAC_CALL Freeverb__getDamp    (void *                        );
void  YAC_CALL Freeverb__setWet     (void *, yacmemptr             );
sF32  YAC_CALL Freeverb__getWet     (void *                        );
void  YAC_CALL Freeverb__setDry     (void *, yacmemptr             );
sF32  YAC_CALL Freeverb__getDry     (void *                        );
void  YAC_CALL Freeverb__setWidth   (void *, yacmemptr             );
sF32  YAC_CALL Freeverb__getWidth   (void *                        );
void  YAC_CALL Freeverb__setMode    (void *, yacmemptr             );
sF32  YAC_CALL Freeverb__getMode    (void *                        );

// ------------------ YAC class "Freeverb" reflection map (implementation) ------------------
sUI          YAC_VCALL Freeverb::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL Freeverb::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL Freeverb::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL Freeverb::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL Freeverb::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL Freeverb::yacMethodGetNum                  (void) {return 15;}
const char **YAC_VCALL Freeverb::yacMethodGetNames                (void) {static const char *r[]={"operator", "mute", "processMix", "setRoomSize", "getRoomSize", "setDamp", "getDamp", "setWet", "getWet", "setDry", "getDry", "setWidth", "getWidth", "setMode", "getMode"}; return r;}
const sUI   *YAC_VCALL Freeverb::yacMethodGetNumParameters        (void) {static const sUI r[]={2, 0, 4, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}; return r;}
const sUI  **YAC_VCALL Freeverb::yacMethodGetParameterTypes       (void) {static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={3, 3, 1, 1,};static const sUI rt3[]={2,};static const sUI rt4[]={0,};static const sUI rt5[]={2,};static const sUI rt6[]={0,};static const sUI rt7[]={2,};static const sUI rt8[]={0,};static const sUI rt9[]={2,};static const sUI rt10[]={0,};static const sUI rt11[]={2,};static const sUI rt12[]={0,};static const sUI rt13[]={2,};static const sUI rt14[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14}; return r;}
const char***YAC_VCALL Freeverb::yacMethodGetParameterObjectTypes (void) {static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14}; return r;}
const sUI   *YAC_VCALL Freeverb::yacMethodGetReturnTypes          (void) {static const sUI r[]={4, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2}; return r;}
const char **YAC_VCALL Freeverb::yacMethodGetReturnObjectTypes    (void) {static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;}
const void **YAC_VCALL Freeverb::yacMethodGetAdr                  (void) {static const void *r[]={(void*)Object__operator, (void*)Freeverb__mute, (void*)Freeverb__processMix, (void*)Freeverb__setRoomSize, (void*)Freeverb__getRoomSize, (void*)Freeverb__setDamp, (void*)Freeverb__getDamp, (void*)Freeverb__setWet, (void*)Freeverb__getWet, (void*)Freeverb__setDry, (void*)Freeverb__getDry, (void*)Freeverb__setWidth, (void*)Freeverb__getWidth, (void*)Freeverb__setMode, (void*)Freeverb__getMode}; return r;}
sUI          YAC_VCALL Freeverb::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL Freeverb::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL Freeverb::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL Freeverb::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(Freeverb, "Freeverb");

void  YAC_CALL Freeverb__mute       (void *_o                                ) {((Freeverb*)_o)->mute();}
void  YAC_CALL Freeverb__processMix (void *_o, yacmemptr _args               ) {((Freeverb*)_o)->processMix(_args.mem[0].o, _args.mem[1].o, _args.mem[2].si, _args.mem[3].si);}
void  YAC_CALL Freeverb__setRoomSize(void *_o, yacmemptr _args               ) {((Freeverb*)_o)->setRoomSize(_args.mem[0].f32);}
sF32  YAC_CALL Freeverb__getRoomSize(void *_o                                ) {return (sF32)((Freeverb*)_o)->getRoomSize();}
void  YAC_CALL Freeverb__setDamp    (void *_o, yacmemptr _args               ) {((Freeverb*)_o)->setDamp(_args.mem[0].f32);}
sF32  YAC_CALL Freeverb__getDamp    (void *_o                                ) {return (sF32)((Freeverb*)_o)->getDamp();}
void  YAC_CALL Freeverb__setWet     (void *_o, yacmemptr _args               ) {((Freeverb*)_o)->setWet(_args.mem[0].f32);}
sF32  YAC_CALL Freeverb__getWet     (void *_o                                ) {return (sF32)((Freeverb*)_o)->getWet();}
void  YAC_CALL Freeverb__setDry     (void *_o, yacmemptr _args               ) {((Freeverb*)_o)->setDry(_args.mem[0].f32);}
sF32  YAC_CALL Freeverb__getDry     (void *_o                                ) {return (sF32)((Freeverb*)_o)->getDry();}
void  YAC_CALL Freeverb__setWidth   (void *_o, yacmemptr _args               ) {((Freeverb*)_o)->setWidth(_args.mem[0].f32);}
sF32  YAC_CALL Freeverb__getWidth   (void *_o                                ) {return (sF32)((Freeverb*)_o)->getWidth();}
void  YAC_CALL Freeverb__setMode    (void *_o, yacmemptr _args               ) {((Freeverb*)_o)->setMode(_args.mem[0].f32);}
sF32  YAC_CALL Freeverb__getMode    (void *_o                                ) {return (sF32)((Freeverb*)_o)->getMode();}
