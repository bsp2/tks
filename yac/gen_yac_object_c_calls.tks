// file   : gen_yac_object_c_calls.tks
// author : (c) 2005-2012 Bastian Spiegel <bs@tkscript.de>
// license: Released under the terms of the GNU General Public License.
//
// info   : generate implementation for the _yacXXX() interface methods in the YAC_Object header file.
//          Each _yacFOO() method call is redirected to a "C" function yac_object_yacFOO().
//
function GetCurrentDateString() {
   Time t; t.now();
   return 
      ((["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"])[t.weekday])+", "+t.monthday+"/"+
      ((["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])[t.month])+"/"+t.year;
}

function GetCurrentTimeString() {
   Time t;
   Integer io_h;
   Integer io_m;
   Integer io_s;
   t.now();
   io_h.value=t.hour;
   io_m.value=t.min;
   io_s.value=t.sec;
   return io_h.printf("%02i")+":"+io_m.printf("%02i")+":"+io_s.printf("%02i");
}

function ExtractActualParameters(String _s)/*:String*/ {
   int idxe=0;
   int idxs;
   int idxo;
   String ret="(this";
   String argname;

   for(;;)
	{
      idxo = idxe;
      idxs = _s.indexOf("_", idxe);
      idxe = _s.indexOf(",", idxs);

      if(-1 == idxs)
      {
         break;
      }

      if(-1 == idxe)
      {
         idxe = _s.indexOf(")", idxs);
      }

      if(-1 == idxe)
      {
         break;
      }

      ////_s.substring(argname, idxs, idxe-idxs);
      _s.substring(idxs, idxe-idxs) => argname;

      if(argname.startsWith("*_"))
      {
         argname.replace("*_", "");
      }

      idxo = _s.indexOf("*", idxs);

      if( (-1 == idxo) || (idxo > idxe) )
      {
         ret.append(", ");
         ret.append(argname);
      }
      else
      {
         idxe = idxo + 1;
      }
	}

   ret.append(")");
   return ret;
}

function ExtractInterface(String _s) {
   int ystart=_s.indexOf("#ifdef YAC_OBJECT_YAC", 0);
   ystart=_s.indexOf("\n", ystart);
   if(ystart<0)
      die "cannot find YAC_OBJECT_YAC tag";
   int yend  =_s.indexOf("#endif", ystart);
   String s<=new String();
   ////_s.substring(s, ystart, (yend-ystart));
   _s.substring(ystart, (yend-ystart)) => s;
   return deref s;
}

function GenerateDelegates(String _s) {
   String line;
   Integer io;
   int linenr=1;
   String out<=new String(); out.alloc(_s.length*1.5); out.empty();
   out.append("#ifdef YAC_OBJECT_YAC\n");
   out.append("// ---- auto-generated by gen_yac_object_c_calls.tks (");
   out.append(GetCurrentDateString());
   out.append(" ");
   out.append(GetCurrentTimeString());
   out.append(")\n");
   foreach line in _s.splitChar('\n') {
      io.value=linenr;
      //print io.printf("%04i")+": "+line+" ("+line.length+")";
      linenr++;
      StringArray words<=line.splitSpace(true);
      int rl=words.numElements;
      if(rl>1)
      {
         if(!words[0].startsWith("//"))
         {
            out.append(words[1]); // return type
            out.append(" ");
            out.append("YAC_Object::");
            out.append(words[2]); // method name
            String lastword=words[rl-1]; 
            lastword.replace(";", " {\n    ");
            int c=3;
            String arglist="";
            while(c<(words.numElements-1))
            {
               arglist.append(words[c++]);
               arglist.append(" ");
            }
            out.append(arglist);
            out.append(lastword);
            arglist.append(words[rl-1]);
            if(words[1]!="void")
               out.append("return ");
            out.append("yac_object");
            out.append(words[2]); // append method name
            arglist.replace("void","");
            out.append(ExtractActualParameters(arglist));
            out.append(";\n}\n");
         }
      }
   }
   out.append("#endif\n");
   return deref out;
}

// ---- m a i n
String s; s.loadLocal("yac.h", true);
s<=ExtractInterface(s);
s<=GenerateDelegates(s);
s.saveLocal("gen.cpp");
print "wrote file \"gen.cpp\".";
