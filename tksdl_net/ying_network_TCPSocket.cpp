// ---- ying_network_TCPSocket.cpp: auto generated by YInG - the YAC interface generator (Wed, 31/Jul/2019 21:27:25)

void  YAC_CALL TCPSocket___accept   (void *, YAC_Value *           );
void  YAC_CALL TCPSocket___close    (void *                        );
void  YAC_CALL TCPSocket___getPeerAddress(void *, YAC_Value *      );
sSI   YAC_CALL TCPSocket___open     (void *, yacmemptr             );
sSI   YAC_CALL TCPSocket___recv     (void *, yacmemptr             );
sSI   YAC_CALL TCPSocket___send     (void *, yacmemptr             );
sSI   YAC_CALL TCPSocket___sendString(void *, yacmemptr            );
sSI   YAC_CALL TCPSocket___socketReady(void *                      );

// ------------------ YAC class "_TCPSocket" reflection map (implementation) ------------------
sUI          YAC_VCALL _TCPSocket::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _TCPSocket::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _TCPSocket::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _TCPSocket::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _TCPSocket::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _TCPSocket::yacMethodGetNum                  (void) {return 9;}
const char **YAC_VCALL _TCPSocket::yacMethodGetNames                (void) {static const char *r[]={"operator", "accept", "close", "getPeerAddress", "open", "recv", "send", "sendString", "socketReady"}; return r;}
const sUI   *YAC_VCALL _TCPSocket::yacMethodGetNumParameters        (void) {static const sUI r[]={2, 0, 0, 0, 1, 2, 2, 1, 0}; return r;}
const sUI  **YAC_VCALL _TCPSocket::yacMethodGetParameterTypes       (void) {static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={3,};static const sUI rt5[]={3, 1,};static const sUI rt6[]={3, 1,};static const sUI rt7[]={3,};static const sUI rt8[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8}; return r;}
const char***YAC_VCALL _TCPSocket::yacMethodGetParameterObjectTypes (void) {static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0, (const char*)0,};static const char *rs6[]={(const char*)0, (const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8}; return r;}
const sUI   *YAC_VCALL _TCPSocket::yacMethodGetReturnTypes          (void) {static const sUI r[]={4, 4, 0, 4, 1, 1, 1, 1, 1}; return r;}
const char **YAC_VCALL _TCPSocket::yacMethodGetReturnObjectTypes    (void) {static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;}
const void **YAC_VCALL _TCPSocket::yacMethodGetAdr                  (void) {static const void *r[]={(void*)Object__operator, (void*)TCPSocket___accept, (void*)TCPSocket___close, (void*)TCPSocket___getPeerAddress, (void*)TCPSocket___open, (void*)TCPSocket___recv, (void*)TCPSocket___send, (void*)TCPSocket___sendString, (void*)TCPSocket___socketReady}; return r;}
sUI          YAC_VCALL _TCPSocket::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _TCPSocket::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _TCPSocket::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _TCPSocket::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(_TCPSocket, "TCPSocket");

void  YAC_CALL TCPSocket___accept   (void *_o, YAC_Value *_r                 ) {((_TCPSocket*)_o)->_accept(_r);}
void  YAC_CALL TCPSocket___close    (void *_o                                ) {((_TCPSocket*)_o)->_close();}
void  YAC_CALL TCPSocket___getPeerAddress(void *_o, YAC_Value *_r            ) {((_TCPSocket*)_o)->_getPeerAddress(_r);}
sSI   YAC_CALL TCPSocket___open     (void *_o, yacmemptr _args               ) {return (sSI)((_TCPSocket*)_o)->_open(_args.mem[0].o);}
sSI   YAC_CALL TCPSocket___recv     (void *_o, yacmemptr _args               ) {return (sSI)((_TCPSocket*)_o)->_recv(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL TCPSocket___send     (void *_o, yacmemptr _args               ) {return (sSI)((_TCPSocket*)_o)->_send(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL TCPSocket___sendString(void *_o, yacmemptr _args              ) {return (sSI)((_TCPSocket*)_o)->_sendString(_args.mem[0].o);}
sSI   YAC_CALL TCPSocket___socketReady(void *_o                              ) {return (sSI)((_TCPSocket*)_o)->_socketReady();}
