// ---- ying_midipipe_MIDIPipeFrame.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 11:28:29)

#ifndef YAC_NO_HOST
void  YAC_CALL MIDIPipeFrame__empty (void *                        );
void  YAC_CALL MIDIPipeFrame__free  (void *                        );
void  YAC_CALL MIDIPipeFrame__optimize(void *                      );
void  YAC_CALL MIDIPipeFrame__setPipe(void *, yacmemptr            );
void* YAC_CALL MIDIPipeFrame__getPipe(void *                       );
void  YAC_CALL MIDIPipeFrame__setRoot(void *, yacmemptr            );
void* YAC_CALL MIDIPipeFrame__getRoot(void *                       );
void  YAC_CALL MIDIPipeFrame__setTimeStamp(void *, yacmemptr       );
sSI   YAC_CALL MIDIPipeFrame__getTimeStamp(void *                  );
void  YAC_CALL MIDIPipeFrame__setTimeStampTmp(void *, yacmemptr    );
sSI   YAC_CALL MIDIPipeFrame__getTimeStampTmp(void *               );
void  YAC_CALL MIDIPipeFrame__setMarker(void *, yacmemptr          );
sSI   YAC_CALL MIDIPipeFrame__getMarker(void *                     );
void  YAC_CALL MIDIPipeFrame__SetMinimumNoteDuration(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__GetMinimumNoteDuration(void *        );
void  YAC_CALL MIDIPipeFrame__setEnableDontSend(void *, yacmemptr  );
sSI   YAC_CALL MIDIPipeFrame__getEnableDontSend(void *             );
void  YAC_CALL MIDIPipeFrame__updateDontSendFlags(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__prgChg(void *, yacmemptr             );
sSI   YAC_CALL MIDIPipeFrame__chPressure(void *, yacmemptr         );
sSI   YAC_CALL MIDIPipeFrame__pitchbend(void *, yacmemptr          );
sSI   YAC_CALL MIDIPipeFrame__cc    (void *, yacmemptr             );
sSI   YAC_CALL MIDIPipeFrame__rpn   (void *, yacmemptr             );
sSI   YAC_CALL MIDIPipeFrame__nrpn  (void *, yacmemptr             );
sSI   YAC_CALL MIDIPipeFrame__allNotesOff(void *, yacmemptr        );
sSI   YAC_CALL MIDIPipeFrame__noteOff(void *, yacmemptr            );
sSI   YAC_CALL MIDIPipeFrame__noteOffPre(void *, yacmemptr         );
sSI   YAC_CALL MIDIPipeFrame__noteOn(void *, yacmemptr             );
sSI   YAC_CALL MIDIPipeFrame__polyPressure(void *, yacmemptr       );
sSI   YAC_CALL MIDIPipeFrame__sysex (void *, yacmemptr             );
sSI   YAC_CALL MIDIPipeFrame__sysexAddF0F7(void *, yacmemptr       );
sSI   YAC_CALL MIDIPipeFrame__sysrt (void *, yacmemptr             );
sSI   YAC_CALL MIDIPipeFrame__noteOffReplace(void *, yacmemptr     );
sSI   YAC_CALL MIDIPipeFrame__noteOnReplace(void *, yacmemptr      );
sSI   YAC_CALL MIDIPipeFrame__polyPressureReplace(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__noteOnVelReplace(void *, yacmemptr   );
sSI   YAC_CALL MIDIPipeFrame__noteOnVelMul(void *, yacmemptr       );
sSI   YAC_CALL MIDIPipeFrame__noteOnVelAdd(void *, yacmemptr       );
sSI   YAC_CALL MIDIPipeFrame__noteOnVelReplaceByIdxAndFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__noteOnDeleteZeroVel(void *           );
sSI   YAC_CALL MIDIPipeFrame__noteOffVelReplaceByIdxAndFlt(void *, yacmemptr);
void  YAC_CALL MIDIPipeFrame__noteOnUpdateByIdx(void *, yacmemptr  );
sSI   YAC_CALL MIDIPipeFrame__hasEvents(void *                     );
sSI   YAC_CALL MIDIPipeFrame__getNumEvents(void *                  );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsPrgChg(void *            );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsChPressure(void *        );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsPitchbend(void *         );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsCC(void *                );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsRPN(void *               );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNRPN(void *              );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsAllNotesOff(void *       );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOff(void *           );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOffPre(void *        );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOffPost(void *       );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOn(void *            );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsPolyPressure(void *      );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsSysEx(void *             );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsSysRT(void *             );
sSI   YAC_CALL MIDIPipeFrame__getEventByIdx(void *, yacmemptr      );
sSI   YAC_CALL MIDIPipeFrame__getEventByIdxAndFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getCCEventByIdxAndFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getRPNEventByIdxAndFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNRPNEventByIdxAndFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNoteOnEventByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNoteOffEventByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsByFlt(void *, yacmemptr  );
sSI   YAC_CALL MIDIPipeFrame__getNumEventsPrgChgByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsChPressureByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsPitchbendByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsCCByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsRPNByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNRPNByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsAllNotesOffByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOffByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOnByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsPolyPressureByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsSysExByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsSysRTByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOnInRangeByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getFilteredPrgChg(void *, yacmemptr  );
sF32  YAC_CALL MIDIPipeFrame__getFilteredCC(void *, yacmemptr      );
sF32  YAC_CALL MIDIPipeFrame__getFilteredRPN(void *, yacmemptr     );
sF32  YAC_CALL MIDIPipeFrame__getFilteredNRPN(void *, yacmemptr    );
sF32  YAC_CALL MIDIPipeFrame__getFilteredPitchbend(void *, yacmemptr);
sF32  YAC_CALL MIDIPipeFrame__getFilteredChPressure(void *, yacmemptr);
sF32  YAC_CALL MIDIPipeFrame__getFilteredNoteOnVelocity(void *, yacmemptr);
sF32  YAC_CALL MIDIPipeFrame__getFilteredNoteOffVelocity(void *, yacmemptr);
sF32  YAC_CALL MIDIPipeFrame__getNormalizedNoteOnVelocityByIdxAndFlt(void *, yacmemptr);
sF32  YAC_CALL MIDIPipeFrame__getNormalizedNoteOffVelocityByIdxAndFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__setEventDevByIdx(void *, yacmemptr   );
sSI   YAC_CALL MIDIPipeFrame__setEventMidiChByIdx(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__setEventArg1ByIdx(void *, yacmemptr  );
sSI   YAC_CALL MIDIPipeFrame__setEventArg2ByIdx(void *, yacmemptr  );
sSI   YAC_CALL MIDIPipeFrame__setEventArg3ByIdx(void *, yacmemptr  );
sF32  YAC_CALL MIDIPipeFrame__getEventArg1ByIdx(void *, yacmemptr  );
sF32  YAC_CALL MIDIPipeFrame__getEventArg2ByIdx(void *, yacmemptr  );
sSI   YAC_CALL MIDIPipeFrame__getEventArg3ByIdx(void *, yacmemptr  );
sSI   YAC_CALL MIDIPipeFrame__deleteEventByIdx(void *, yacmemptr   );
sSI   YAC_CALL MIDIPipeFrame__deletePrgChgByFlt(void *, yacmemptr  );
sSI   YAC_CALL MIDIPipeFrame__deleteChPressureByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__deletePitchbendByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__deleteCCByFlt(void *, yacmemptr      );
sSI   YAC_CALL MIDIPipeFrame__deleteRPNByFlt(void *, yacmemptr     );
sSI   YAC_CALL MIDIPipeFrame__deleteNRPNByFlt(void *, yacmemptr    );
sSI   YAC_CALL MIDIPipeFrame__deletePolyPressureByFlt(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__deleteSysExByFlt(void *, yacmemptr   );
sSI   YAC_CALL MIDIPipeFrame__deleteSysRTByFlt(void *, yacmemptr   );
void  YAC_CALL MIDIPipeFrame__deleteNoteOffsByFlt(void *, yacmemptr);
void  YAC_CALL MIDIPipeFrame__deleteNoteOnsByFlt(void *, yacmemptr );
void  YAC_CALL MIDIPipeFrame__keepEventsByFlt(void *, yacmemptr    );
void  YAC_CALL MIDIPipeFrame__deleteEventsByFlt(void *, yacmemptr  );
void  YAC_CALL MIDIPipeFrame__mirrorNoteOnOffs(void *, yacmemptr   );
sSI   YAC_CALL MIDIPipeFrame__convertRPNUIPrgChgToPrgChg(void *, yacmemptr);
void  YAC_CALL MIDIPipeFrame__setNoteDurations(void *, yacmemptr   );
void  YAC_CALL MIDIPipeFrame__setMinNoteDurations(void *, yacmemptr);
void  YAC_CALL MIDIPipeFrame__updateNoteDuration(void *, yacmemptr );
void  YAC_CALL MIDIPipeFrame__scaleNoteDurations(void *, yacmemptr );
sF32  YAC_CALL MIDIPipeFrame__getFirstNoteOnVelocity(void *, yacmemptr);
void  YAC_CALL MIDIPipeFrame__updateNoteOnVelocities(void *, yacmemptr);
void  YAC_CALL MIDIPipeFrame__scaleNoteVelocities(void *, yacmemptr);
void  YAC_CALL MIDIPipeFrame__setDevIdxAndMidiCh(void *, yacmemptr );
void  YAC_CALL MIDIPipeFrame__mergeFrame(void *, yacmemptr         );
void  YAC_CALL MIDIPipeFrame__mergeFrameTranspose(void *, yacmemptr);
void  YAC_CALL MIDIPipeFrame__mergeFrameTransposePrgChg(void *, yacmemptr);
void  YAC_CALL MIDIPipeFrame__mergeFrameFltDst(void *, yacmemptr   );
void  YAC_CALL MIDIPipeFrame__mergeFrameFlt(void *, yacmemptr      );
void  YAC_CALL MIDIPipeFrame__emit  (void *                        );
void  YAC_CALL MIDIPipeFrame__setIoFilter(void *, yacmemptr        );
void  YAC_CALL MIDIPipeFrame__saveState(void *, yacmemptr          );
sSI   YAC_CALL MIDIPipeFrame__loadState(void *, yacmemptr          );
void  YAC_CALL MIDIPipeFrame__remapDeviceIndices(void *, yacmemptr );
void  YAC_CALL MIDIPipeFrame__setUsrFrameIdx(void *, yacmemptr     );
sSI   YAC_CALL MIDIPipeFrame__getUsrFrameIdx(void *                );
sSI   YAC_CALL MIDIPipeFrame__decodePolystepRPN(void *, yacmemptr  );
sSI   YAC_CALL MIDIPipeFrame__replaceDevIdxAndMidiCh(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__isControllerStateDifferentFrom(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getPrgChgShortMsgByIdx(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getChPressureShortMsgByIdx(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getPitchbendShortMsgByIdx(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getCCShortMsgByIdx(void *, yacmemptr );
sSI   YAC_CALL MIDIPipeFrame__getAllNotesOffShortMsgByIdx(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNoteOffPreShortMsgByIdx(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNoteOffPostShortMsgByIdx(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNoteOffShortMsgByIdx(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getPolyPressureShortMsgByIdx(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__getNoteOnShortMsgByIdx(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeFrame__modMatrixCheckEventByFlt(void *, yacmemptr);
#endif // YAC_NO_HOST

// ------------------ YAC class "MIDIPipeFrame" reflection map (implementation) ------------------
sUI          YAC_VCALL MIDIPipeFrame::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL MIDIPipeFrame::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL MIDIPipeFrame::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL MIDIPipeFrame::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL MIDIPipeFrame::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL MIDIPipeFrame::yacMethodGetNum                  (void) {return 148;}
const char **YAC_VCALL MIDIPipeFrame::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "empty", "free", "optimize", "setPipe", "getPipe", "setRoot", "getRoot", "setTimeStamp", "getTimeStamp", "setTimeStampTmp", "getTimeStampTmp", "setMarker", "getMarker", "SetMinimumNoteDuration", "GetMinimumNoteDuration", "setEnableDontSend", "getEnableDontSend", "updateDontSendFlags", "prgChg", "chPressure", "pitchbend", "cc", "rpn", "nrpn", "allNotesOff", "noteOff", "noteOffPre", "noteOn", "polyPressure", "sysex", "sysexAddF0F7", "sysrt", "noteOffReplace", "noteOnReplace", "polyPressureReplace", "noteOnVelReplace", "noteOnVelMul", "noteOnVelAdd", "noteOnVelReplaceByIdxAndFlt", "noteOnDeleteZeroVel", "noteOffVelReplaceByIdxAndFlt", "noteOnUpdateByIdx", "hasEvents", "getNumEvents", "getNumEventsPrgChg", "getNumEventsChPressure", "getNumEventsPitchbend", "getNumEventsCC", "getNumEventsRPN", "getNumEventsNRPN", "getNumEventsAllNotesOff", "getNumEventsNoteOff", "getNumEventsNoteOffPre", "getNumEventsNoteOffPost", "getNumEventsNoteOn", "getNumEventsPolyPressure", "getNumEventsSysEx", "getNumEventsSysRT", "getEventByIdx", "getEventByIdxAndFlt", "getCCEventByIdxAndFlt", "getRPNEventByIdxAndFlt", "getNRPNEventByIdxAndFlt", "getNoteOnEventByFlt", "getNoteOffEventByFlt", "getNumEventsByFlt", "getNumEventsPrgChgByFlt", "getNumEventsChPressureByFlt", "getNumEventsPitchbendByFlt", "getNumEventsCCByFlt", "getNumEventsRPNByFlt", "getNumEventsNRPNByFlt", "getNumEventsAllNotesOffByFlt", "getNumEventsNoteOffByFlt", "getNumEventsNoteOnByFlt", "getNumEventsPolyPressureByFlt", "getNumEventsSysExByFlt", "getNumEventsSysRTByFlt", "getNumEventsNoteOnInRangeByFlt", "getFilteredPrgChg", "getFilteredCC", "getFilteredRPN", "getFilteredNRPN", "getFilteredPitchbend", "getFilteredChPressure", "getFilteredNoteOnVelocity", "getFilteredNoteOffVelocity", "getNormalizedNoteOnVelocityByIdxAndFlt", "getNormalizedNoteOffVelocityByIdxAndFlt", "setEventDevByIdx", "setEventMidiChByIdx", "setEventArg1ByIdx", "setEventArg2ByIdx", "setEventArg3ByIdx", "getEventArg1ByIdx", "getEventArg2ByIdx", "getEventArg3ByIdx", "deleteEventByIdx", "deletePrgChgByFlt", "deleteChPressureByFlt", "deletePitchbendByFlt", "deleteCCByFlt", "deleteRPNByFlt", "deleteNRPNByFlt", "deletePolyPressureByFlt", "deleteSysExByFlt", "deleteSysRTByFlt", "deleteNoteOffsByFlt", "deleteNoteOnsByFlt", "keepEventsByFlt", "deleteEventsByFlt", "mirrorNoteOnOffs", "convertRPNUIPrgChgToPrgChg", "setNoteDurations", "setMinNoteDurations", "updateNoteDuration", "scaleNoteDurations", "getFirstNoteOnVelocity", "updateNoteOnVelocities", "scaleNoteVelocities", "setDevIdxAndMidiCh", "mergeFrame", "mergeFrameTranspose", "mergeFrameTransposePrgChg", "mergeFrameFltDst", "mergeFrameFlt", "emit", "setIoFilter", "saveState", "loadState", "remapDeviceIndices", "setUsrFrameIdx", "getUsrFrameIdx", "decodePolystepRPN", "replaceDevIdxAndMidiCh", "isControllerStateDifferentFrom", "getPrgChgShortMsgByIdx", "getChPressureShortMsgByIdx", "getPitchbendShortMsgByIdx", "getCCShortMsgByIdx", "getAllNotesOffShortMsgByIdx", "getNoteOffPreShortMsgByIdx", "getNoteOffPostShortMsgByIdx", "getNoteOffShortMsgByIdx", "getPolyPressureShortMsgByIdx", "getNoteOnShortMsgByIdx", "modMatrixCheckEventByFlt"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIPipeFrame::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 4, 4, 4, 5, 5, 5, 3, 5, 5, 6, 5, 3, 4, 3, 5, 6, 5, 3, 3, 3, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 5, 5, 5, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 4, 2, 3, 3, 3, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 2, 1, 1, 2, 2, 2, 2, 8, 2, 1, 1, 4, 4, 2, 3, 4, 2, 1, 3, 4, 7, 3, 0, 1, 1, 1, 2, 1, 0, 5, 4, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL MIDIPipeFrame::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={3,};static const sUI rt5[]={0,};static const sUI rt6[]={3,};static const sUI rt7[]={0,};static const sUI rt8[]={1,};static const sUI rt9[]={0,};static const sUI rt10[]={1,};static const sUI rt11[]={0,};static const sUI rt12[]={1,};static const sUI rt13[]={0,};static const sUI rt14[]={1,};static const sUI rt15[]={0,};static const sUI rt16[]={1,};static const sUI rt17[]={0,};static const sUI rt18[]={1,};static const sUI rt19[]={1, 1, 1, 1,};static const sUI rt20[]={1, 1, 1, 2,};static const sUI rt21[]={1, 1, 1, 2,};static const sUI rt22[]={1, 1, 1, 1, 2,};static const sUI rt23[]={1, 1, 1, 1, 2,};static const sUI rt24[]={1, 1, 1, 1, 2,};static const sUI rt25[]={1, 1, 1,};static const sUI rt26[]={1, 1, 1, 1, 2,};static const sUI rt27[]={1, 1, 1, 1, 2,};static const sUI rt28[]={1, 1, 1, 1, 2, 1,};static const sUI rt29[]={1, 1, 1, 1, 2,};static const sUI rt30[]={1, 1, 3,};static const sUI rt31[]={1, 1, 3, 1,};static const sUI rt32[]={1, 1, 1,};static const sUI rt33[]={1, 1, 1, 1, 2,};static const sUI rt34[]={1, 1, 1, 1, 2, 1,};static const sUI rt35[]={1, 1, 1, 1, 2,};static const sUI rt36[]={1, 1, 2,};static const sUI rt37[]={1, 1, 2,};static const sUI rt38[]={1, 1, 2,};static const sUI rt39[]={1, 1, 1, 2,};static const sUI rt40[]={0,};static const sUI rt41[]={1, 1, 1, 2,};static const sUI rt42[]={1, 1, 1, 1,};static const sUI rt43[]={0,};static const sUI rt44[]={0,};static const sUI rt45[]={0,};static const sUI rt46[]={0,};static const sUI rt47[]={0,};static const sUI rt48[]={0,};static const sUI rt49[]={0,};static const sUI rt50[]={0,};static const sUI rt51[]={0,};static const sUI rt52[]={0,};static const sUI rt53[]={0,};static const sUI rt54[]={0,};static const sUI rt55[]={0,};static const sUI rt56[]={0,};static const sUI rt57[]={0,};static const sUI rt58[]={0,};static const sUI rt59[]={1, 3, 1,};static const sUI rt60[]={1, 3, 1, 1, 1,};static const sUI rt61[]={1, 3, 1, 1, 1,};static const sUI rt62[]={1, 3, 1, 1, 1,};static const sUI rt63[]={1, 3, 1, 1, 1,};static const sUI rt64[]={3, 1, 1, 1,};static const sUI rt65[]={3, 1, 1, 1,};static const sUI rt66[]={1, 1,};static const sUI rt67[]={1, 1,};static const sUI rt68[]={1, 1,};static const sUI rt69[]={1, 1,};static const sUI rt70[]={1, 1,};static const sUI rt71[]={1, 1,};static const sUI rt72[]={1, 1,};static const sUI rt73[]={1, 1,};static const sUI rt74[]={1, 1,};static const sUI rt75[]={1, 1,};static const sUI rt76[]={1, 1,};static const sUI rt77[]={1,};static const sUI rt78[]={1,};static const sUI rt79[]={1, 1, 1, 1,};static const sUI rt80[]={1, 1,};static const sUI rt81[]={1, 1, 1,};static const sUI rt82[]={1, 1, 1,};static const sUI rt83[]={1, 1, 1,};static const sUI rt84[]={1, 1,};static const sUI rt85[]={1, 1,};static const sUI rt86[]={1, 1, 1,};static const sUI rt87[]={1, 1, 1,};static const sUI rt88[]={1, 1, 1,};static const sUI rt89[]={1, 1, 1,};static const sUI rt90[]={1, 1,};static const sUI rt91[]={1, 1,};static const sUI rt92[]={1, 2,};static const sUI rt93[]={1, 2,};static const sUI rt94[]={1, 1,};static const sUI rt95[]={1,};static const sUI rt96[]={1,};static const sUI rt97[]={1,};static const sUI rt98[]={1, 1,};static const sUI rt99[]={1, 1,};static const sUI rt100[]={1, 1,};static const sUI rt101[]={1, 1,};static const sUI rt102[]={1, 1, 1,};static const sUI rt103[]={1, 1, 1,};static const sUI rt104[]={1, 1, 1,};static const sUI rt105[]={1, 1,};static const sUI rt106[]={1,};static const sUI rt107[]={1,};static const sUI rt108[]={1, 1,};static const sUI rt109[]={1, 1,};static const sUI rt110[]={1, 1,};static const sUI rt111[]={1, 1,};static const sUI rt112[]={3, 1, 1, 1, 1, 1, 1, 1,};static const sUI rt113[]={1, 1,};static const sUI rt114[]={1,};static const sUI rt115[]={1,};static const sUI rt116[]={1, 1, 1, 1,};static const sUI rt117[]={1, 1, 2, 2,};static const sUI rt118[]={1, 1,};static const sUI rt119[]={1, 1, 2,};static const sUI rt120[]={1, 1, 2, 2,};static const sUI rt121[]={1, 1,};static const sUI rt122[]={3,};static const sUI rt123[]={3, 1, 2,};static const sUI rt124[]={3, 1, 1, 1,};static const sUI rt125[]={3, 1, 1, 1, 1, 1, 1,};static const sUI rt126[]={3, 1, 1,};static const sUI rt127[]={0,};static const sUI rt128[]={1,};static const sUI rt129[]={3,};static const sUI rt130[]={3,};static const sUI rt131[]={3, 3,};static const sUI rt132[]={1,};static const sUI rt133[]={0,};static const sUI rt134[]={1, 1, 3, 3, 3,};static const sUI rt135[]={1, 1, 1, 1,};static const sUI rt136[]={3,};static const sUI rt137[]={1, 3,};static const sUI rt138[]={1, 3,};static const sUI rt139[]={1, 3,};static const sUI rt140[]={1, 3,};static const sUI rt141[]={1, 3,};static const sUI rt142[]={1, 3,};static const sUI rt143[]={1, 3,};static const sUI rt144[]={1, 3,};static const sUI rt145[]={1, 3,};static const sUI rt146[]={1, 3,};static const sUI rt147[]={1, 1, 1, 1, 3, 3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39, rt40, rt41, rt42, rt43, rt44, rt45, rt46, rt47, rt48, rt49, rt50, rt51, rt52, rt53, rt54, rt55, rt56, rt57, rt58, rt59, rt60, rt61, rt62, rt63, rt64, rt65, rt66, rt67, rt68, rt69, rt70, rt71, rt72, rt73, rt74, rt75, rt76, rt77, rt78, rt79, rt80, rt81, rt82, rt83, rt84, rt85, rt86, rt87, rt88, rt89, rt90, rt91, rt92, rt93, rt94, rt95, rt96, rt97, rt98, rt99, rt100, rt101, rt102, rt103, rt104, rt105, rt106, rt107, rt108, rt109, rt110, rt111, rt112, rt113, rt114, rt115, rt116, rt117, rt118, rt119, rt120, rt121, rt122, rt123, rt124, rt125, rt126, rt127, rt128, rt129, rt130, rt131, rt132, rt133, rt134, rt135, rt136, rt137, rt138, rt139, rt140, rt141, rt142, rt143, rt144, rt145, rt146, rt147}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL MIDIPipeFrame::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={"MIDIPipe",};static const char *rs5[]={(const char*)0,};static const char *rs6[]={"MIDIPipeRoot",};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs20[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs21[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs22[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs23[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs24[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs25[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs26[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs27[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs28[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs29[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs30[]={(const char*)0, (const char*)0, "Buffer",};static const char *rs31[]={(const char*)0, (const char*)0, "Buffer", (const char*)0,};static const char *rs32[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs33[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs34[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs35[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs36[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs37[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs38[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs39[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs40[]={(const char*)0,};static const char *rs41[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs42[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs43[]={(const char*)0,};static const char *rs44[]={(const char*)0,};static const char *rs45[]={(const char*)0,};static const char *rs46[]={(const char*)0,};static const char *rs47[]={(const char*)0,};static const char *rs48[]={(const char*)0,};static const char *rs49[]={(const char*)0,};static const char *rs50[]={(const char*)0,};static const char *rs51[]={(const char*)0,};static const char *rs52[]={(const char*)0,};static const char *rs53[]={(const char*)0,};static const char *rs54[]={(const char*)0,};static const char *rs55[]={(const char*)0,};static const char *rs56[]={(const char*)0,};static const char *rs57[]={(const char*)0,};static const char *rs58[]={(const char*)0,};static const char *rs59[]={(const char*)0, "MIDIPipeEvent", (const char*)0,};static const char *rs60[]={(const char*)0, "MIDIPipeEvent", (const char*)0, (const char*)0, (const char*)0,};static const char *rs61[]={(const char*)0, "MIDIPipeEvent", (const char*)0, (const char*)0, (const char*)0,};static const char *rs62[]={(const char*)0, "MIDIPipeEvent", (const char*)0, (const char*)0, (const char*)0,};static const char *rs63[]={(const char*)0, "MIDIPipeEvent", (const char*)0, (const char*)0, (const char*)0,};static const char *rs64[]={"MIDIPipeEvent", (const char*)0, (const char*)0, (const char*)0,};static const char *rs65[]={"MIDIPipeEvent", (const char*)0, (const char*)0, (const char*)0,};static const char *rs66[]={(const char*)0, (const char*)0,};static const char *rs67[]={(const char*)0, (const char*)0,};static const char *rs68[]={(const char*)0, (const char*)0,};static const char *rs69[]={(const char*)0, (const char*)0,};static const char *rs70[]={(const char*)0, (const char*)0,};static const char *rs71[]={(const char*)0, (const char*)0,};static const char *rs72[]={(const char*)0, (const char*)0,};static const char *rs73[]={(const char*)0, (const char*)0,};static const char *rs74[]={(const char*)0, (const char*)0,};static const char *rs75[]={(const char*)0, (const char*)0,};static const char *rs76[]={(const char*)0, (const char*)0,};static const char *rs77[]={(const char*)0,};static const char *rs78[]={(const char*)0,};static const char *rs79[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs80[]={(const char*)0, (const char*)0,};static const char *rs81[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs82[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs83[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs84[]={(const char*)0, (const char*)0,};static const char *rs85[]={(const char*)0, (const char*)0,};static const char *rs86[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs87[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs88[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs89[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs90[]={(const char*)0, (const char*)0,};static const char *rs91[]={(const char*)0, (const char*)0,};static const char *rs92[]={(const char*)0, (const char*)0,};static const char *rs93[]={(const char*)0, (const char*)0,};static const char *rs94[]={(const char*)0, (const char*)0,};static const char *rs95[]={(const char*)0,};static const char *rs96[]={(const char*)0,};static const char *rs97[]={(const char*)0,};static const char *rs98[]={(const char*)0, (const char*)0,};static const char *rs99[]={(const char*)0, (const char*)0,};static const char *rs100[]={(const char*)0, (const char*)0,};static const char *rs101[]={(const char*)0, (const char*)0,};static const char *rs102[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs103[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs104[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs105[]={(const char*)0, (const char*)0,};static const char *rs106[]={(const char*)0,};static const char *rs107[]={(const char*)0,};static const char *rs108[]={(const char*)0, (const char*)0,};static const char *rs109[]={(const char*)0, (const char*)0,};static const char *rs110[]={(const char*)0, (const char*)0,};static const char *rs111[]={(const char*)0, (const char*)0,};static const char *rs112[]={"MIDIPipeFrame", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs113[]={(const char*)0, (const char*)0,};static const char *rs114[]={(const char*)0,};static const char *rs115[]={(const char*)0,};static const char *rs116[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs117[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs118[]={(const char*)0, (const char*)0,};static const char *rs119[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs120[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs121[]={(const char*)0, (const char*)0,};static const char *rs122[]={"MIDIPipeFrame",};static const char *rs123[]={"MIDIPipeFrame", (const char*)0, (const char*)0,};static const char *rs124[]={"MIDIPipeFrame", (const char*)0, (const char*)0, (const char*)0,};static const char *rs125[]={"MIDIPipeFrame", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs126[]={"MIDIPipeFrame", (const char*)0, (const char*)0,};static const char *rs127[]={(const char*)0,};static const char *rs128[]={(const char*)0,};static const char *rs129[]={(const char*)0,};static const char *rs130[]={(const char*)0,};static const char *rs131[]={(const char*)0, (const char*)0,};static const char *rs132[]={(const char*)0,};static const char *rs133[]={(const char*)0,};static const char *rs134[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs135[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs136[]={"MIDIPipeFrame",};static const char *rs137[]={(const char*)0, (const char*)0,};static const char *rs138[]={(const char*)0, (const char*)0,};static const char *rs139[]={(const char*)0, (const char*)0,};static const char *rs140[]={(const char*)0, (const char*)0,};static const char *rs141[]={(const char*)0, (const char*)0,};static const char *rs142[]={(const char*)0, (const char*)0,};static const char *rs143[]={(const char*)0, (const char*)0,};static const char *rs144[]={(const char*)0, (const char*)0,};static const char *rs145[]={(const char*)0, (const char*)0,};static const char *rs146[]={(const char*)0, (const char*)0,};static const char *rs147[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39, rs40, rs41, rs42, rs43, rs44, rs45, rs46, rs47, rs48, rs49, rs50, rs51, rs52, rs53, rs54, rs55, rs56, rs57, rs58, rs59, rs60, rs61, rs62, rs63, rs64, rs65, rs66, rs67, rs68, rs69, rs70, rs71, rs72, rs73, rs74, rs75, rs76, rs77, rs78, rs79, rs80, rs81, rs82, rs83, rs84, rs85, rs86, rs87, rs88, rs89, rs90, rs91, rs92, rs93, rs94, rs95, rs96, rs97, rs98, rs99, rs100, rs101, rs102, rs103, rs104, rs105, rs106, rs107, rs108, rs109, rs110, rs111, rs112, rs113, rs114, rs115, rs116, rs117, rs118, rs119, rs120, rs121, rs122, rs123, rs124, rs125, rs126, rs127, rs128, rs129, rs130, rs131, rs132, rs133, rs134, rs135, rs136, rs137, rs138, rs139, rs140, rs141, rs142, rs143, rs144, rs145, rs146, rs147}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIPipeFrame::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 0, 0, 3, 0, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL MIDIPipeFrame::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, "MIDIPipe", (const char*)0, "MIDIPipeRoot", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL MIDIPipeFrame::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)MIDIPipeFrame__empty, (void*)MIDIPipeFrame__free, (void*)MIDIPipeFrame__optimize, (void*)MIDIPipeFrame__setPipe, (void*)MIDIPipeFrame__getPipe, (void*)MIDIPipeFrame__setRoot, (void*)MIDIPipeFrame__getRoot, (void*)MIDIPipeFrame__setTimeStamp, (void*)MIDIPipeFrame__getTimeStamp, (void*)MIDIPipeFrame__setTimeStampTmp, (void*)MIDIPipeFrame__getTimeStampTmp, (void*)MIDIPipeFrame__setMarker, (void*)MIDIPipeFrame__getMarker, (void*)MIDIPipeFrame__SetMinimumNoteDuration, (void*)MIDIPipeFrame__GetMinimumNoteDuration, (void*)MIDIPipeFrame__setEnableDontSend, (void*)MIDIPipeFrame__getEnableDontSend, (void*)MIDIPipeFrame__updateDontSendFlags, (void*)MIDIPipeFrame__prgChg, (void*)MIDIPipeFrame__chPressure, (void*)MIDIPipeFrame__pitchbend, (void*)MIDIPipeFrame__cc, (void*)MIDIPipeFrame__rpn, (void*)MIDIPipeFrame__nrpn, (void*)MIDIPipeFrame__allNotesOff, (void*)MIDIPipeFrame__noteOff, (void*)MIDIPipeFrame__noteOffPre, (void*)MIDIPipeFrame__noteOn, (void*)MIDIPipeFrame__polyPressure, (void*)MIDIPipeFrame__sysex, (void*)MIDIPipeFrame__sysexAddF0F7, (void*)MIDIPipeFrame__sysrt, (void*)MIDIPipeFrame__noteOffReplace, (void*)MIDIPipeFrame__noteOnReplace, (void*)MIDIPipeFrame__polyPressureReplace, (void*)MIDIPipeFrame__noteOnVelReplace, (void*)MIDIPipeFrame__noteOnVelMul, (void*)MIDIPipeFrame__noteOnVelAdd, (void*)MIDIPipeFrame__noteOnVelReplaceByIdxAndFlt, (void*)MIDIPipeFrame__noteOnDeleteZeroVel, (void*)MIDIPipeFrame__noteOffVelReplaceByIdxAndFlt, (void*)MIDIPipeFrame__noteOnUpdateByIdx, (void*)MIDIPipeFrame__hasEvents, (void*)MIDIPipeFrame__getNumEvents, (void*)MIDIPipeFrame__getNumEventsPrgChg, (void*)MIDIPipeFrame__getNumEventsChPressure, (void*)MIDIPipeFrame__getNumEventsPitchbend, (void*)MIDIPipeFrame__getNumEventsCC, (void*)MIDIPipeFrame__getNumEventsRPN, (void*)MIDIPipeFrame__getNumEventsNRPN, (void*)MIDIPipeFrame__getNumEventsAllNotesOff, (void*)MIDIPipeFrame__getNumEventsNoteOff, (void*)MIDIPipeFrame__getNumEventsNoteOffPre, (void*)MIDIPipeFrame__getNumEventsNoteOffPost, (void*)MIDIPipeFrame__getNumEventsNoteOn, (void*)MIDIPipeFrame__getNumEventsPolyPressure, (void*)MIDIPipeFrame__getNumEventsSysEx, (void*)MIDIPipeFrame__getNumEventsSysRT, (void*)MIDIPipeFrame__getEventByIdx, (void*)MIDIPipeFrame__getEventByIdxAndFlt, (void*)MIDIPipeFrame__getCCEventByIdxAndFlt, (void*)MIDIPipeFrame__getRPNEventByIdxAndFlt, (void*)MIDIPipeFrame__getNRPNEventByIdxAndFlt, (void*)MIDIPipeFrame__getNoteOnEventByFlt, (void*)MIDIPipeFrame__getNoteOffEventByFlt, (void*)MIDIPipeFrame__getNumEventsByFlt, (void*)MIDIPipeFrame__getNumEventsPrgChgByFlt, (void*)MIDIPipeFrame__getNumEventsChPressureByFlt, (void*)MIDIPipeFrame__getNumEventsPitchbendByFlt, (void*)MIDIPipeFrame__getNumEventsCCByFlt, (void*)MIDIPipeFrame__getNumEventsRPNByFlt, (void*)MIDIPipeFrame__getNumEventsNRPNByFlt, (void*)MIDIPipeFrame__getNumEventsAllNotesOffByFlt, (void*)MIDIPipeFrame__getNumEventsNoteOffByFlt, (void*)MIDIPipeFrame__getNumEventsNoteOnByFlt, (void*)MIDIPipeFrame__getNumEventsPolyPressureByFlt, (void*)MIDIPipeFrame__getNumEventsSysExByFlt, (void*)MIDIPipeFrame__getNumEventsSysRTByFlt, (void*)MIDIPipeFrame__getNumEventsNoteOnInRangeByFlt, (void*)MIDIPipeFrame__getFilteredPrgChg, (void*)MIDIPipeFrame__getFilteredCC, (void*)MIDIPipeFrame__getFilteredRPN, (void*)MIDIPipeFrame__getFilteredNRPN, (void*)MIDIPipeFrame__getFilteredPitchbend, (void*)MIDIPipeFrame__getFilteredChPressure, (void*)MIDIPipeFrame__getFilteredNoteOnVelocity, (void*)MIDIPipeFrame__getFilteredNoteOffVelocity, (void*)MIDIPipeFrame__getNormalizedNoteOnVelocityByIdxAndFlt, (void*)MIDIPipeFrame__getNormalizedNoteOffVelocityByIdxAndFlt, (void*)MIDIPipeFrame__setEventDevByIdx, (void*)MIDIPipeFrame__setEventMidiChByIdx, (void*)MIDIPipeFrame__setEventArg1ByIdx, (void*)MIDIPipeFrame__setEventArg2ByIdx, (void*)MIDIPipeFrame__setEventArg3ByIdx, (void*)MIDIPipeFrame__getEventArg1ByIdx, (void*)MIDIPipeFrame__getEventArg2ByIdx, (void*)MIDIPipeFrame__getEventArg3ByIdx, (void*)MIDIPipeFrame__deleteEventByIdx, (void*)MIDIPipeFrame__deletePrgChgByFlt, (void*)MIDIPipeFrame__deleteChPressureByFlt, (void*)MIDIPipeFrame__deletePitchbendByFlt, (void*)MIDIPipeFrame__deleteCCByFlt, (void*)MIDIPipeFrame__deleteRPNByFlt, (void*)MIDIPipeFrame__deleteNRPNByFlt, (void*)MIDIPipeFrame__deletePolyPressureByFlt, (void*)MIDIPipeFrame__deleteSysExByFlt, (void*)MIDIPipeFrame__deleteSysRTByFlt, (void*)MIDIPipeFrame__deleteNoteOffsByFlt, (void*)MIDIPipeFrame__deleteNoteOnsByFlt, (void*)MIDIPipeFrame__keepEventsByFlt, (void*)MIDIPipeFrame__deleteEventsByFlt, (void*)MIDIPipeFrame__mirrorNoteOnOffs, (void*)MIDIPipeFrame__convertRPNUIPrgChgToPrgChg, (void*)MIDIPipeFrame__setNoteDurations, (void*)MIDIPipeFrame__setMinNoteDurations, (void*)MIDIPipeFrame__updateNoteDuration, (void*)MIDIPipeFrame__scaleNoteDurations, (void*)MIDIPipeFrame__getFirstNoteOnVelocity, (void*)MIDIPipeFrame__updateNoteOnVelocities, (void*)MIDIPipeFrame__scaleNoteVelocities, (void*)MIDIPipeFrame__setDevIdxAndMidiCh, (void*)MIDIPipeFrame__mergeFrame, (void*)MIDIPipeFrame__mergeFrameTranspose, (void*)MIDIPipeFrame__mergeFrameTransposePrgChg, (void*)MIDIPipeFrame__mergeFrameFltDst, (void*)MIDIPipeFrame__mergeFrameFlt, (void*)MIDIPipeFrame__emit, (void*)MIDIPipeFrame__setIoFilter, (void*)MIDIPipeFrame__saveState, (void*)MIDIPipeFrame__loadState, (void*)MIDIPipeFrame__remapDeviceIndices, (void*)MIDIPipeFrame__setUsrFrameIdx, (void*)MIDIPipeFrame__getUsrFrameIdx, (void*)MIDIPipeFrame__decodePolystepRPN, (void*)MIDIPipeFrame__replaceDevIdxAndMidiCh, (void*)MIDIPipeFrame__isControllerStateDifferentFrom, (void*)MIDIPipeFrame__getPrgChgShortMsgByIdx, (void*)MIDIPipeFrame__getChPressureShortMsgByIdx, (void*)MIDIPipeFrame__getPitchbendShortMsgByIdx, (void*)MIDIPipeFrame__getCCShortMsgByIdx, (void*)MIDIPipeFrame__getAllNotesOffShortMsgByIdx, (void*)MIDIPipeFrame__getNoteOffPreShortMsgByIdx, (void*)MIDIPipeFrame__getNoteOffPostShortMsgByIdx, (void*)MIDIPipeFrame__getNoteOffShortMsgByIdx, (void*)MIDIPipeFrame__getPolyPressureShortMsgByIdx, (void*)MIDIPipeFrame__getNoteOnShortMsgByIdx, (void*)MIDIPipeFrame__modMatrixCheckEventByFlt}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL MIDIPipeFrame::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL MIDIPipeFrame::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL MIDIPipeFrame::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL MIDIPipeFrame::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(MIDIPipeFrame, "MIDIPipeFrame");

#ifndef YAC_NO_HOST
void  YAC_CALL MIDIPipeFrame__empty (void *_o                                ) {((MIDIPipeFrame*)_o)->empty();}
void  YAC_CALL MIDIPipeFrame__free  (void *_o                                ) {((MIDIPipeFrame*)_o)->free();}
void  YAC_CALL MIDIPipeFrame__optimize(void *_o                              ) {((MIDIPipeFrame*)_o)->optimize();}
void  YAC_CALL MIDIPipeFrame__setPipe(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipe)){ ((MIDIPipeFrame*)_o)->setPipe((MIDIPipe*)_args.mem[0].o);}}
void* YAC_CALL MIDIPipeFrame__getPipe(void *_o                               ) {return (void*)((MIDIPipeFrame*)_o)->getPipe();}
void  YAC_CALL MIDIPipeFrame__setRoot(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipeRoot)){ ((MIDIPipeFrame*)_o)->setRoot((MIDIPipeRoot*)_args.mem[0].o);}}
void* YAC_CALL MIDIPipeFrame__getRoot(void *_o                               ) {return (void*)((MIDIPipeFrame*)_o)->getRoot();}
void  YAC_CALL MIDIPipeFrame__setTimeStamp(void *_o, yacmemptr _args         ) {((MIDIPipeFrame*)_o)->setTimeStamp(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeFrame__getTimeStamp(void *_o                          ) {return (sSI)((MIDIPipeFrame*)_o)->getTimeStamp();}
void  YAC_CALL MIDIPipeFrame__setTimeStampTmp(void *_o, yacmemptr _args      ) {((MIDIPipeFrame*)_o)->setTimeStampTmp(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeFrame__getTimeStampTmp(void *_o                       ) {return (sSI)((MIDIPipeFrame*)_o)->getTimeStampTmp();}
void  YAC_CALL MIDIPipeFrame__setMarker(void *_o, yacmemptr _args            ) {((MIDIPipeFrame*)_o)->setMarker(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeFrame__getMarker(void *_o                             ) {return (sSI)((MIDIPipeFrame*)_o)->getMarker();}
void  YAC_CALL MIDIPipeFrame__SetMinimumNoteDuration(void *_o, yacmemptr _args) {((MIDIPipeFrame*)_o)->SetMinimumNoteDuration(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeFrame__GetMinimumNoteDuration(void *_o                ) {return (sSI)((MIDIPipeFrame*)_o)->GetMinimumNoteDuration();}
void  YAC_CALL MIDIPipeFrame__setEnableDontSend(void *_o, yacmemptr _args    ) {((MIDIPipeFrame*)_o)->setEnableDontSend(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeFrame__getEnableDontSend(void *_o                     ) {return (sSI)((MIDIPipeFrame*)_o)->getEnableDontSend();}
void  YAC_CALL MIDIPipeFrame__updateDontSendFlags(void *_o, yacmemptr _args  ) {((MIDIPipeFrame*)_o)->updateDontSendFlags(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeFrame__prgChg(void *_o, yacmemptr _args               ) {return (sSI)((MIDIPipeFrame*)_o)->prgChg(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
sSI   YAC_CALL MIDIPipeFrame__chPressure(void *_o, yacmemptr _args           ) {return (sSI)((MIDIPipeFrame*)_o)->chPressure(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].f32);}
sSI   YAC_CALL MIDIPipeFrame__pitchbend(void *_o, yacmemptr _args            ) {return (sSI)((MIDIPipeFrame*)_o)->pitchbend(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].f32);}
sSI   YAC_CALL MIDIPipeFrame__cc    (void *_o, yacmemptr _args               ) {return (sSI)((MIDIPipeFrame*)_o)->cc(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].f32);}
sSI   YAC_CALL MIDIPipeFrame__rpn   (void *_o, yacmemptr _args               ) {return (sSI)((MIDIPipeFrame*)_o)->rpn(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].f32);}
sSI   YAC_CALL MIDIPipeFrame__nrpn  (void *_o, yacmemptr _args               ) {return (sSI)((MIDIPipeFrame*)_o)->nrpn(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].f32);}
sSI   YAC_CALL MIDIPipeFrame__allNotesOff(void *_o, yacmemptr _args          ) {return (sSI)((MIDIPipeFrame*)_o)->allNotesOff(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL MIDIPipeFrame__noteOff(void *_o, yacmemptr _args              ) {return (sSI)((MIDIPipeFrame*)_o)->noteOff(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].f32);}
sSI   YAC_CALL MIDIPipeFrame__noteOffPre(void *_o, yacmemptr _args           ) {return (sSI)((MIDIPipeFrame*)_o)->noteOffPre(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].f32);}
sSI   YAC_CALL MIDIPipeFrame__noteOn(void *_o, yacmemptr _args               ) {return (sSI)((MIDIPipeFrame*)_o)->noteOn(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].f32, _args.mem[5].si);}
sSI   YAC_CALL MIDIPipeFrame__polyPressure(void *_o, yacmemptr _args         ) {return (sSI)((MIDIPipeFrame*)_o)->polyPressure(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].f32);}
sSI   YAC_CALL MIDIPipeFrame__sysex (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[2].o, YAC_CLID_BUFFER)){ return (sSI)((MIDIPipeFrame*)_o)->sysex(_args.mem[0].si, _args.mem[1].si, (YAC_Buffer*)_args.mem[2].o);}return 0;}
sSI   YAC_CALL MIDIPipeFrame__sysexAddF0F7(void *_o, yacmemptr _args         ) {if(YAC_BCHK(_args.mem[2].o, YAC_CLID_BUFFER)){ return (sSI)((MIDIPipeFrame*)_o)->sysexAddF0F7(_args.mem[0].si, _args.mem[1].si, (YAC_Buffer*)_args.mem[2].o, _args.mem[3].si);}return 0;}
sSI   YAC_CALL MIDIPipeFrame__sysrt (void *_o, yacmemptr _args               ) {return (sSI)((MIDIPipeFrame*)_o)->sysrt(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL MIDIPipeFrame__noteOffReplace(void *_o, yacmemptr _args       ) {return (sSI)((MIDIPipeFrame*)_o)->noteOffReplace(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].f32);}
sSI   YAC_CALL MIDIPipeFrame__noteOnReplace(void *_o, yacmemptr _args        ) {return (sSI)((MIDIPipeFrame*)_o)->noteOnReplace(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].f32, _args.mem[5].si);}
sSI   YAC_CALL MIDIPipeFrame__polyPressureReplace(void *_o, yacmemptr _args  ) {return (sSI)((MIDIPipeFrame*)_o)->polyPressureReplace(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].f32);}
sSI   YAC_CALL MIDIPipeFrame__noteOnVelReplace(void *_o, yacmemptr _args     ) {return (sSI)((MIDIPipeFrame*)_o)->noteOnVelReplace(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
sSI   YAC_CALL MIDIPipeFrame__noteOnVelMul(void *_o, yacmemptr _args         ) {return (sSI)((MIDIPipeFrame*)_o)->noteOnVelMul(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
sSI   YAC_CALL MIDIPipeFrame__noteOnVelAdd(void *_o, yacmemptr _args         ) {return (sSI)((MIDIPipeFrame*)_o)->noteOnVelAdd(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
sSI   YAC_CALL MIDIPipeFrame__noteOnVelReplaceByIdxAndFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->noteOnVelReplaceByIdxAndFlt(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].f32);}
sSI   YAC_CALL MIDIPipeFrame__noteOnDeleteZeroVel(void *_o                   ) {return (sSI)((MIDIPipeFrame*)_o)->noteOnDeleteZeroVel();}
sSI   YAC_CALL MIDIPipeFrame__noteOffVelReplaceByIdxAndFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->noteOffVelReplaceByIdxAndFlt(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].f32);}
void  YAC_CALL MIDIPipeFrame__noteOnUpdateByIdx(void *_o, yacmemptr _args    ) {((MIDIPipeFrame*)_o)->noteOnUpdateByIdx(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
sSI   YAC_CALL MIDIPipeFrame__hasEvents(void *_o                             ) {return (sSI)((MIDIPipeFrame*)_o)->hasEvents();}
sSI   YAC_CALL MIDIPipeFrame__getNumEvents(void *_o                          ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEvents();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsPrgChg(void *_o                    ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsPrgChg();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsChPressure(void *_o                ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsChPressure();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsPitchbend(void *_o                 ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsPitchbend();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsCC(void *_o                        ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsCC();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsRPN(void *_o                       ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsRPN();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNRPN(void *_o                      ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsNRPN();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsAllNotesOff(void *_o               ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsAllNotesOff();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOff(void *_o                   ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsNoteOff();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOffPre(void *_o                ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsNoteOffPre();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOffPost(void *_o               ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsNoteOffPost();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOn(void *_o                    ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsNoteOn();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsPolyPressure(void *_o              ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsPolyPressure();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsSysEx(void *_o                     ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsSysEx();}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsSysRT(void *_o                     ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsSysRT();}
sSI   YAC_CALL MIDIPipeFrame__getEventByIdx(void *_o, yacmemptr _args        ) {if(YAC_BCHK(_args.mem[1].o, clid_MIDIPipeEvent)){ return (sSI)((MIDIPipeFrame*)_o)->getEventByIdx(_args.mem[0].si, (MIDIPipeEvent*)_args.mem[1].o, _args.mem[2].si);}return 0;}
sSI   YAC_CALL MIDIPipeFrame__getEventByIdxAndFlt(void *_o, yacmemptr _args  ) {if(YAC_BCHK(_args.mem[1].o, clid_MIDIPipeEvent)){ return (sSI)((MIDIPipeFrame*)_o)->getEventByIdxAndFlt(_args.mem[0].si, (MIDIPipeEvent*)_args.mem[1].o, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si);}return 0;}
sSI   YAC_CALL MIDIPipeFrame__getCCEventByIdxAndFlt(void *_o, yacmemptr _args) {if(YAC_BCHK(_args.mem[1].o, clid_MIDIPipeEvent)){ return (sSI)((MIDIPipeFrame*)_o)->getCCEventByIdxAndFlt(_args.mem[0].si, (MIDIPipeEvent*)_args.mem[1].o, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si);}return 0;}
sSI   YAC_CALL MIDIPipeFrame__getRPNEventByIdxAndFlt(void *_o, yacmemptr _args) {if(YAC_BCHK(_args.mem[1].o, clid_MIDIPipeEvent)){ return (sSI)((MIDIPipeFrame*)_o)->getRPNEventByIdxAndFlt(_args.mem[0].si, (MIDIPipeEvent*)_args.mem[1].o, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si);}return 0;}
sSI   YAC_CALL MIDIPipeFrame__getNRPNEventByIdxAndFlt(void *_o, yacmemptr _args) {if(YAC_BCHK(_args.mem[1].o, clid_MIDIPipeEvent)){ return (sSI)((MIDIPipeFrame*)_o)->getNRPNEventByIdxAndFlt(_args.mem[0].si, (MIDIPipeEvent*)_args.mem[1].o, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si);}return 0;}
sSI   YAC_CALL MIDIPipeFrame__getNoteOnEventByFlt(void *_o, yacmemptr _args  ) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipeEvent)){ return (sSI)((MIDIPipeFrame*)_o)->getNoteOnEventByFlt((MIDIPipeEvent*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}return 0;}
sSI   YAC_CALL MIDIPipeFrame__getNoteOffEventByFlt(void *_o, yacmemptr _args ) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipeEvent)){ return (sSI)((MIDIPipeFrame*)_o)->getNoteOffEventByFlt((MIDIPipeEvent*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}return 0;}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsByFlt(void *_o, yacmemptr _args    ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsPrgChgByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsPrgChgByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsChPressureByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsChPressureByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsPitchbendByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsPitchbendByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsCCByFlt(void *_o, yacmemptr _args  ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsCCByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsRPNByFlt(void *_o, yacmemptr _args ) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsRPNByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNRPNByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsNRPNByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsAllNotesOffByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsAllNotesOffByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOffByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsNoteOffByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOnByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsNoteOnByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsPolyPressureByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsPolyPressureByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsSysExByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsSysExByFlt(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsSysRTByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsSysRTByFlt(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeFrame__getNumEventsNoteOnInRangeByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNumEventsNoteOnInRangeByFlt(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
sSI   YAC_CALL MIDIPipeFrame__getFilteredPrgChg(void *_o, yacmemptr _args    ) {return (sSI)((MIDIPipeFrame*)_o)->getFilteredPrgChg(_args.mem[0].si, _args.mem[1].si);}
sF32  YAC_CALL MIDIPipeFrame__getFilteredCC(void *_o, yacmemptr _args        ) {return (sF32)((MIDIPipeFrame*)_o)->getFilteredCC(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sF32  YAC_CALL MIDIPipeFrame__getFilteredRPN(void *_o, yacmemptr _args       ) {return (sF32)((MIDIPipeFrame*)_o)->getFilteredRPN(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sF32  YAC_CALL MIDIPipeFrame__getFilteredNRPN(void *_o, yacmemptr _args      ) {return (sF32)((MIDIPipeFrame*)_o)->getFilteredNRPN(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sF32  YAC_CALL MIDIPipeFrame__getFilteredPitchbend(void *_o, yacmemptr _args ) {return (sF32)((MIDIPipeFrame*)_o)->getFilteredPitchbend(_args.mem[0].si, _args.mem[1].si);}
sF32  YAC_CALL MIDIPipeFrame__getFilteredChPressure(void *_o, yacmemptr _args) {return (sF32)((MIDIPipeFrame*)_o)->getFilteredChPressure(_args.mem[0].si, _args.mem[1].si);}
sF32  YAC_CALL MIDIPipeFrame__getFilteredNoteOnVelocity(void *_o, yacmemptr _args) {return (sF32)((MIDIPipeFrame*)_o)->getFilteredNoteOnVelocity(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sF32  YAC_CALL MIDIPipeFrame__getFilteredNoteOffVelocity(void *_o, yacmemptr _args) {return (sF32)((MIDIPipeFrame*)_o)->getFilteredNoteOffVelocity(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sF32  YAC_CALL MIDIPipeFrame__getNormalizedNoteOnVelocityByIdxAndFlt(void *_o, yacmemptr _args) {return (sF32)((MIDIPipeFrame*)_o)->getNormalizedNoteOnVelocityByIdxAndFlt(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sF32  YAC_CALL MIDIPipeFrame__getNormalizedNoteOffVelocityByIdxAndFlt(void *_o, yacmemptr _args) {return (sF32)((MIDIPipeFrame*)_o)->getNormalizedNoteOffVelocityByIdxAndFlt(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL MIDIPipeFrame__setEventDevByIdx(void *_o, yacmemptr _args     ) {return (sSI)((MIDIPipeFrame*)_o)->setEventDevByIdx(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__setEventMidiChByIdx(void *_o, yacmemptr _args  ) {return (sSI)((MIDIPipeFrame*)_o)->setEventMidiChByIdx(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__setEventArg1ByIdx(void *_o, yacmemptr _args    ) {return (sSI)((MIDIPipeFrame*)_o)->setEventArg1ByIdx(_args.mem[0].si, _args.mem[1].f32);}
sSI   YAC_CALL MIDIPipeFrame__setEventArg2ByIdx(void *_o, yacmemptr _args    ) {return (sSI)((MIDIPipeFrame*)_o)->setEventArg2ByIdx(_args.mem[0].si, _args.mem[1].f32);}
sSI   YAC_CALL MIDIPipeFrame__setEventArg3ByIdx(void *_o, yacmemptr _args    ) {return (sSI)((MIDIPipeFrame*)_o)->setEventArg3ByIdx(_args.mem[0].si, _args.mem[1].si);}
sF32  YAC_CALL MIDIPipeFrame__getEventArg1ByIdx(void *_o, yacmemptr _args    ) {return (sF32)((MIDIPipeFrame*)_o)->getEventArg1ByIdx(_args.mem[0].si);}
sF32  YAC_CALL MIDIPipeFrame__getEventArg2ByIdx(void *_o, yacmemptr _args    ) {return (sF32)((MIDIPipeFrame*)_o)->getEventArg2ByIdx(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeFrame__getEventArg3ByIdx(void *_o, yacmemptr _args    ) {return (sSI)((MIDIPipeFrame*)_o)->getEventArg3ByIdx(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeFrame__deleteEventByIdx(void *_o, yacmemptr _args     ) {return (sSI)((MIDIPipeFrame*)_o)->deleteEventByIdx(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__deletePrgChgByFlt(void *_o, yacmemptr _args    ) {return (sSI)((MIDIPipeFrame*)_o)->deletePrgChgByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__deleteChPressureByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->deleteChPressureByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__deletePitchbendByFlt(void *_o, yacmemptr _args ) {return (sSI)((MIDIPipeFrame*)_o)->deletePitchbendByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__deleteCCByFlt(void *_o, yacmemptr _args        ) {return (sSI)((MIDIPipeFrame*)_o)->deleteCCByFlt(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL MIDIPipeFrame__deleteRPNByFlt(void *_o, yacmemptr _args       ) {return (sSI)((MIDIPipeFrame*)_o)->deleteRPNByFlt(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL MIDIPipeFrame__deleteNRPNByFlt(void *_o, yacmemptr _args      ) {return (sSI)((MIDIPipeFrame*)_o)->deleteNRPNByFlt(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL MIDIPipeFrame__deletePolyPressureByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->deletePolyPressureByFlt(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeFrame__deleteSysExByFlt(void *_o, yacmemptr _args     ) {return (sSI)((MIDIPipeFrame*)_o)->deleteSysExByFlt(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeFrame__deleteSysRTByFlt(void *_o, yacmemptr _args     ) {return (sSI)((MIDIPipeFrame*)_o)->deleteSysRTByFlt(_args.mem[0].si);}
void  YAC_CALL MIDIPipeFrame__deleteNoteOffsByFlt(void *_o, yacmemptr _args  ) {((MIDIPipeFrame*)_o)->deleteNoteOffsByFlt(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIPipeFrame__deleteNoteOnsByFlt(void *_o, yacmemptr _args   ) {((MIDIPipeFrame*)_o)->deleteNoteOnsByFlt(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIPipeFrame__keepEventsByFlt(void *_o, yacmemptr _args      ) {((MIDIPipeFrame*)_o)->keepEventsByFlt(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIPipeFrame__deleteEventsByFlt(void *_o, yacmemptr _args    ) {((MIDIPipeFrame*)_o)->deleteEventsByFlt(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIPipeFrame__mirrorNoteOnOffs(void *_o, yacmemptr _args     ) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipeFrame)){ ((MIDIPipeFrame*)_o)->mirrorNoteOnOffs((MIDIPipeFrame*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si, _args.mem[6].si, _args.mem[7].si);}}
sSI   YAC_CALL MIDIPipeFrame__convertRPNUIPrgChgToPrgChg(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->convertRPNUIPrgChgToPrgChg(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIPipeFrame__setNoteDurations(void *_o, yacmemptr _args     ) {((MIDIPipeFrame*)_o)->setNoteDurations(_args.mem[0].si);}
void  YAC_CALL MIDIPipeFrame__setMinNoteDurations(void *_o, yacmemptr _args  ) {((MIDIPipeFrame*)_o)->setMinNoteDurations(_args.mem[0].si);}
void  YAC_CALL MIDIPipeFrame__updateNoteDuration(void *_o, yacmemptr _args   ) {((MIDIPipeFrame*)_o)->updateNoteDuration(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
void  YAC_CALL MIDIPipeFrame__scaleNoteDurations(void *_o, yacmemptr _args   ) {((MIDIPipeFrame*)_o)->scaleNoteDurations(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32, _args.mem[3].f32);}
sF32  YAC_CALL MIDIPipeFrame__getFirstNoteOnVelocity(void *_o, yacmemptr _args) {return (sF32)((MIDIPipeFrame*)_o)->getFirstNoteOnVelocity(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIPipeFrame__updateNoteOnVelocities(void *_o, yacmemptr _args) {((MIDIPipeFrame*)_o)->updateNoteOnVelocities(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
void  YAC_CALL MIDIPipeFrame__scaleNoteVelocities(void *_o, yacmemptr _args  ) {((MIDIPipeFrame*)_o)->scaleNoteVelocities(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32, _args.mem[3].f32);}
void  YAC_CALL MIDIPipeFrame__setDevIdxAndMidiCh(void *_o, yacmemptr _args   ) {((MIDIPipeFrame*)_o)->setDevIdxAndMidiCh(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIPipeFrame__mergeFrame(void *_o, yacmemptr _args           ) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipeFrame)){ ((MIDIPipeFrame*)_o)->mergeFrame((MIDIPipeFrame*)_args.mem[0].o);}}
void  YAC_CALL MIDIPipeFrame__mergeFrameTranspose(void *_o, yacmemptr _args  ) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipeFrame)){ ((MIDIPipeFrame*)_o)->mergeFrameTranspose((MIDIPipeFrame*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].f32);}}
void  YAC_CALL MIDIPipeFrame__mergeFrameTransposePrgChg(void *_o, yacmemptr _args) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipeFrame)){ ((MIDIPipeFrame*)_o)->mergeFrameTransposePrgChg((MIDIPipeFrame*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}}
void  YAC_CALL MIDIPipeFrame__mergeFrameFltDst(void *_o, yacmemptr _args     ) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipeFrame)){ ((MIDIPipeFrame*)_o)->mergeFrameFltDst((MIDIPipeFrame*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si, _args.mem[6].si);}}
void  YAC_CALL MIDIPipeFrame__mergeFrameFlt(void *_o, yacmemptr _args        ) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipeFrame)){ ((MIDIPipeFrame*)_o)->mergeFrameFlt((MIDIPipeFrame*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}}
void  YAC_CALL MIDIPipeFrame__emit  (void *_o                                ) {((MIDIPipeFrame*)_o)->emit();}
void  YAC_CALL MIDIPipeFrame__setIoFilter(void *_o, yacmemptr _args          ) {((MIDIPipeFrame*)_o)->setIoFilter(_args.mem[0].si);}
void  YAC_CALL MIDIPipeFrame__saveState(void *_o, yacmemptr _args            ) {((MIDIPipeFrame*)_o)->saveState(_args.mem[0].o);}
sSI   YAC_CALL MIDIPipeFrame__loadState(void *_o, yacmemptr _args            ) {return (sSI)((MIDIPipeFrame*)_o)->loadState(_args.mem[0].o);}
void  YAC_CALL MIDIPipeFrame__remapDeviceIndices(void *_o, yacmemptr _args   ) {((MIDIPipeFrame*)_o)->remapDeviceIndices(_args.mem[0].o, _args.mem[1].o);}
void  YAC_CALL MIDIPipeFrame__setUsrFrameIdx(void *_o, yacmemptr _args       ) {((MIDIPipeFrame*)_o)->setUsrFrameIdx(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeFrame__getUsrFrameIdx(void *_o                        ) {return (sSI)((MIDIPipeFrame*)_o)->getUsrFrameIdx();}
sSI   YAC_CALL MIDIPipeFrame__decodePolystepRPN(void *_o, yacmemptr _args    ) {return (sSI)((MIDIPipeFrame*)_o)->decodePolystepRPN(_args.mem[0].si, _args.mem[1].si, _args.mem[2].o, _args.mem[3].o, _args.mem[4].o);}
sSI   YAC_CALL MIDIPipeFrame__replaceDevIdxAndMidiCh(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->replaceDevIdxAndMidiCh(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
sSI   YAC_CALL MIDIPipeFrame__isControllerStateDifferentFrom(void *_o, yacmemptr _args) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipeFrame)){ return (sSI)((MIDIPipeFrame*)_o)->isControllerStateDifferentFrom((MIDIPipeFrame*)_args.mem[0].o);}return 0;}
sSI   YAC_CALL MIDIPipeFrame__getPrgChgShortMsgByIdx(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getPrgChgShortMsgByIdx(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL MIDIPipeFrame__getChPressureShortMsgByIdx(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getChPressureShortMsgByIdx(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL MIDIPipeFrame__getPitchbendShortMsgByIdx(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getPitchbendShortMsgByIdx(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL MIDIPipeFrame__getCCShortMsgByIdx(void *_o, yacmemptr _args   ) {return (sSI)((MIDIPipeFrame*)_o)->getCCShortMsgByIdx(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL MIDIPipeFrame__getAllNotesOffShortMsgByIdx(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getAllNotesOffShortMsgByIdx(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL MIDIPipeFrame__getNoteOffPreShortMsgByIdx(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNoteOffPreShortMsgByIdx(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL MIDIPipeFrame__getNoteOffPostShortMsgByIdx(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNoteOffPostShortMsgByIdx(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL MIDIPipeFrame__getNoteOffShortMsgByIdx(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNoteOffShortMsgByIdx(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL MIDIPipeFrame__getPolyPressureShortMsgByIdx(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getPolyPressureShortMsgByIdx(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL MIDIPipeFrame__getNoteOnShortMsgByIdx(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->getNoteOnShortMsgByIdx(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL MIDIPipeFrame__modMatrixCheckEventByFlt(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeFrame*)_o)->modMatrixCheckEventByFlt(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].o, _args.mem[5].o);}
#endif // YAC_NO_HOST
