// ---- ying_midipipe_ModInputFilter.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 11:28:29)

#ifndef YAC_NO_HOST
void  YAC_CALL ModInputFilter__loadDefaultsForInstrument(void *    );
void  YAC_CALL ModInputFilter__loadDefaultsForEffect(void *        );
void  YAC_CALL ModInputFilter__setEnableNoteOn(void *, yacmemptr   );
sSI   YAC_CALL ModInputFilter__getEnableNoteOn(void *              );
void  YAC_CALL ModInputFilter__setEnableNoteOff(void *, yacmemptr  );
sSI   YAC_CALL ModInputFilter__getEnableNoteOff(void *             );
void  YAC_CALL ModInputFilter__setEnablePitchbend(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnablePitchbend(void *           );
void  YAC_CALL ModInputFilter__setEnableChannelPressure(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnableChannelPressure(void *     );
void  YAC_CALL ModInputFilter__setEnablePolyPressure(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnablePolyPressure(void *        );
void  YAC_CALL ModInputFilter__setEnablePrgChg(void *, yacmemptr   );
sSI   YAC_CALL ModInputFilter__getEnablePrgChg(void *              );
void  YAC_CALL ModInputFilter__setEnableCCBankSelect(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnableCCBankSelect(void *        );
void  YAC_CALL ModInputFilter__setEnableCCModWheel(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnableCCModWheel(void *          );
void  YAC_CALL ModInputFilter__setEnableCCBreathControl(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnableCCBreathControl(void *     );
void  YAC_CALL ModInputFilter__setEnableCCFootControl(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnableCCFootControl(void *       );
void  YAC_CALL ModInputFilter__setEnableCCExpression(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnableCCExpression(void *        );
void  YAC_CALL ModInputFilter__setEnableCCHold1SW(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnableCCHold1SW(void *           );
void  YAC_CALL ModInputFilter__setEnableCCHold2SW(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnableCCHold2SW(void *           );
void  YAC_CALL ModInputFilter__setEnableCCPortamentoSW(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnableCCPortamentoSW(void *      );
void  YAC_CALL ModInputFilter__setEnableCCSostenutoSW(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnableCCSostenutoSW(void *       );
void  YAC_CALL ModInputFilter__setEnableCCSoftPedalSW(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnableCCSoftPedalSW(void *       );
void  YAC_CALL ModInputFilter__setEnableCCLegatoSW(void *, yacmemptr);
sSI   YAC_CALL ModInputFilter__getEnableCCLegatoSW(void *          );
void  YAC_CALL ModInputFilter__setEnableCCOther(void *, yacmemptr  );
sSI   YAC_CALL ModInputFilter__getEnableCCOther(void *             );
void  YAC_CALL ModInputFilter__setEnableSysEx(void *, yacmemptr    );
sSI   YAC_CALL ModInputFilter__getEnableSysEx(void *               );
void  YAC_CALL ModInputFilter__setNoteMin(void *, yacmemptr        );
sSI   YAC_CALL ModInputFilter__getNoteMin(void *                   );
void  YAC_CALL ModInputFilter__setNoteMax(void *, yacmemptr        );
sSI   YAC_CALL ModInputFilter__getNoteMax(void *                   );
void  YAC_CALL ModInputFilter__setNoteTranspose(void *, yacmemptr  );
sSI   YAC_CALL ModInputFilter__getNoteTranspose(void *             );
void  YAC_CALL ModInputFilter__setVelocityMin(void *, yacmemptr    );
sSI   YAC_CALL ModInputFilter__getVelocityMin(void *               );
void  YAC_CALL ModInputFilter__setVelocityMax(void *, yacmemptr    );
sSI   YAC_CALL ModInputFilter__getVelocityMax(void *               );
void  YAC_CALL ModInputFilter__setEnableVRR(void *, yacmemptr      );
sSI   YAC_CALL ModInputFilter__getEnableVRR(void *                 );
void  YAC_CALL ModInputFilter__setVrrNoteOnIdx(void *, yacmemptr   );
sSI   YAC_CALL ModInputFilter__getVrrNoteOnIdx(void *              );
void  YAC_CALL ModInputFilter__setVrrNote(void *, yacmemptr        );
sSI   YAC_CALL ModInputFilter__getVrrNote(void *                   );
sSI   YAC_CALL ModInputFilter___checkMessage(void *, yacmemptr     );
sSI   YAC_CALL ModInputFilter__saveState(void *, yacmemptr         );
sSI   YAC_CALL ModInputFilter__loadState(void *, yacmemptr         );
#endif // YAC_NO_HOST

// ------------------ YAC class "ModInputFilter" reflection map (implementation) ------------------
sUI          YAC_VCALL ModInputFilter::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL ModInputFilter::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL ModInputFilter::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL ModInputFilter::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL ModInputFilter::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL ModInputFilter::yacMethodGetNum                  (void) {return 60;}
const char **YAC_VCALL ModInputFilter::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "loadDefaultsForInstrument", "loadDefaultsForEffect", "setEnableNoteOn", "getEnableNoteOn", "setEnableNoteOff", "getEnableNoteOff", "setEnablePitchbend", "getEnablePitchbend", "setEnableChannelPressure", "getEnableChannelPressure", "setEnablePolyPressure", "getEnablePolyPressure", "setEnablePrgChg", "getEnablePrgChg", "setEnableCCBankSelect", "getEnableCCBankSelect", "setEnableCCModWheel", "getEnableCCModWheel", "setEnableCCBreathControl", "getEnableCCBreathControl", "setEnableCCFootControl", "getEnableCCFootControl", "setEnableCCExpression", "getEnableCCExpression", "setEnableCCHold1SW", "getEnableCCHold1SW", "setEnableCCHold2SW", "getEnableCCHold2SW", "setEnableCCPortamentoSW", "getEnableCCPortamentoSW", "setEnableCCSostenutoSW", "getEnableCCSostenutoSW", "setEnableCCSoftPedalSW", "getEnableCCSoftPedalSW", "setEnableCCLegatoSW", "getEnableCCLegatoSW", "setEnableCCOther", "getEnableCCOther", "setEnableSysEx", "getEnableSysEx", "setNoteMin", "getNoteMin", "setNoteMax", "getNoteMax", "setNoteTranspose", "getNoteTranspose", "setVelocityMin", "getVelocityMin", "setVelocityMax", "getVelocityMax", "setEnableVRR", "getEnableVRR", "setVrrNoteOnIdx", "getVrrNoteOnIdx", "setVrrNote", "getVrrNote", "checkMessage", "saveState", "loadState"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL ModInputFilter::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL ModInputFilter::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={1,};static const sUI rt4[]={0,};static const sUI rt5[]={1,};static const sUI rt6[]={0,};static const sUI rt7[]={1,};static const sUI rt8[]={0,};static const sUI rt9[]={1,};static const sUI rt10[]={0,};static const sUI rt11[]={1,};static const sUI rt12[]={0,};static const sUI rt13[]={1,};static const sUI rt14[]={0,};static const sUI rt15[]={1,};static const sUI rt16[]={0,};static const sUI rt17[]={1,};static const sUI rt18[]={0,};static const sUI rt19[]={1,};static const sUI rt20[]={0,};static const sUI rt21[]={1,};static const sUI rt22[]={0,};static const sUI rt23[]={1,};static const sUI rt24[]={0,};static const sUI rt25[]={1,};static const sUI rt26[]={0,};static const sUI rt27[]={1,};static const sUI rt28[]={0,};static const sUI rt29[]={1,};static const sUI rt30[]={0,};static const sUI rt31[]={1,};static const sUI rt32[]={0,};static const sUI rt33[]={1,};static const sUI rt34[]={0,};static const sUI rt35[]={1,};static const sUI rt36[]={0,};static const sUI rt37[]={1,};static const sUI rt38[]={0,};static const sUI rt39[]={1,};static const sUI rt40[]={0,};static const sUI rt41[]={1,};static const sUI rt42[]={0,};static const sUI rt43[]={1,};static const sUI rt44[]={0,};static const sUI rt45[]={1,};static const sUI rt46[]={0,};static const sUI rt47[]={1,};static const sUI rt48[]={0,};static const sUI rt49[]={1,};static const sUI rt50[]={0,};static const sUI rt51[]={1,};static const sUI rt52[]={0,};static const sUI rt53[]={1,};static const sUI rt54[]={0,};static const sUI rt55[]={1,};static const sUI rt56[]={0,};static const sUI rt57[]={1, 1, 1,};static const sUI rt58[]={3,};static const sUI rt59[]={3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39, rt40, rt41, rt42, rt43, rt44, rt45, rt46, rt47, rt48, rt49, rt50, rt51, rt52, rt53, rt54, rt55, rt56, rt57, rt58, rt59}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL ModInputFilter::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char *rs34[]={(const char*)0,};static const char *rs35[]={(const char*)0,};static const char *rs36[]={(const char*)0,};static const char *rs37[]={(const char*)0,};static const char *rs38[]={(const char*)0,};static const char *rs39[]={(const char*)0,};static const char *rs40[]={(const char*)0,};static const char *rs41[]={(const char*)0,};static const char *rs42[]={(const char*)0,};static const char *rs43[]={(const char*)0,};static const char *rs44[]={(const char*)0,};static const char *rs45[]={(const char*)0,};static const char *rs46[]={(const char*)0,};static const char *rs47[]={(const char*)0,};static const char *rs48[]={(const char*)0,};static const char *rs49[]={(const char*)0,};static const char *rs50[]={(const char*)0,};static const char *rs51[]={(const char*)0,};static const char *rs52[]={(const char*)0,};static const char *rs53[]={(const char*)0,};static const char *rs54[]={(const char*)0,};static const char *rs55[]={(const char*)0,};static const char *rs56[]={(const char*)0,};static const char *rs57[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs58[]={(const char*)0,};static const char *rs59[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39, rs40, rs41, rs42, rs43, rs44, rs45, rs46, rs47, rs48, rs49, rs50, rs51, rs52, rs53, rs54, rs55, rs56, rs57, rs58, rs59}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL ModInputFilter::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL ModInputFilter::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL ModInputFilter::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)ModInputFilter__loadDefaultsForInstrument, (void*)ModInputFilter__loadDefaultsForEffect, (void*)ModInputFilter__setEnableNoteOn, (void*)ModInputFilter__getEnableNoteOn, (void*)ModInputFilter__setEnableNoteOff, (void*)ModInputFilter__getEnableNoteOff, (void*)ModInputFilter__setEnablePitchbend, (void*)ModInputFilter__getEnablePitchbend, (void*)ModInputFilter__setEnableChannelPressure, (void*)ModInputFilter__getEnableChannelPressure, (void*)ModInputFilter__setEnablePolyPressure, (void*)ModInputFilter__getEnablePolyPressure, (void*)ModInputFilter__setEnablePrgChg, (void*)ModInputFilter__getEnablePrgChg, (void*)ModInputFilter__setEnableCCBankSelect, (void*)ModInputFilter__getEnableCCBankSelect, (void*)ModInputFilter__setEnableCCModWheel, (void*)ModInputFilter__getEnableCCModWheel, (void*)ModInputFilter__setEnableCCBreathControl, (void*)ModInputFilter__getEnableCCBreathControl, (void*)ModInputFilter__setEnableCCFootControl, (void*)ModInputFilter__getEnableCCFootControl, (void*)ModInputFilter__setEnableCCExpression, (void*)ModInputFilter__getEnableCCExpression, (void*)ModInputFilter__setEnableCCHold1SW, (void*)ModInputFilter__getEnableCCHold1SW, (void*)ModInputFilter__setEnableCCHold2SW, (void*)ModInputFilter__getEnableCCHold2SW, (void*)ModInputFilter__setEnableCCPortamentoSW, (void*)ModInputFilter__getEnableCCPortamentoSW, (void*)ModInputFilter__setEnableCCSostenutoSW, (void*)ModInputFilter__getEnableCCSostenutoSW, (void*)ModInputFilter__setEnableCCSoftPedalSW, (void*)ModInputFilter__getEnableCCSoftPedalSW, (void*)ModInputFilter__setEnableCCLegatoSW, (void*)ModInputFilter__getEnableCCLegatoSW, (void*)ModInputFilter__setEnableCCOther, (void*)ModInputFilter__getEnableCCOther, (void*)ModInputFilter__setEnableSysEx, (void*)ModInputFilter__getEnableSysEx, (void*)ModInputFilter__setNoteMin, (void*)ModInputFilter__getNoteMin, (void*)ModInputFilter__setNoteMax, (void*)ModInputFilter__getNoteMax, (void*)ModInputFilter__setNoteTranspose, (void*)ModInputFilter__getNoteTranspose, (void*)ModInputFilter__setVelocityMin, (void*)ModInputFilter__getVelocityMin, (void*)ModInputFilter__setVelocityMax, (void*)ModInputFilter__getVelocityMax, (void*)ModInputFilter__setEnableVRR, (void*)ModInputFilter__getEnableVRR, (void*)ModInputFilter__setVrrNoteOnIdx, (void*)ModInputFilter__getVrrNoteOnIdx, (void*)ModInputFilter__setVrrNote, (void*)ModInputFilter__getVrrNote, (void*)ModInputFilter___checkMessage, (void*)ModInputFilter__saveState, (void*)ModInputFilter__loadState}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL ModInputFilter::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL ModInputFilter::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL ModInputFilter::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL ModInputFilter::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(ModInputFilter, "ModInputFilter");

#ifndef YAC_NO_HOST
void  YAC_CALL ModInputFilter__loadDefaultsForInstrument(void *_o            ) {((ModInputFilter*)_o)->loadDefaultsForInstrument();}
void  YAC_CALL ModInputFilter__loadDefaultsForEffect(void *_o                ) {((ModInputFilter*)_o)->loadDefaultsForEffect();}
void  YAC_CALL ModInputFilter__setEnableNoteOn(void *_o, yacmemptr _args     ) {((ModInputFilter*)_o)->setEnableNoteOn(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableNoteOn(void *_o                      ) {return (sSI)((ModInputFilter*)_o)->getEnableNoteOn();}
void  YAC_CALL ModInputFilter__setEnableNoteOff(void *_o, yacmemptr _args    ) {((ModInputFilter*)_o)->setEnableNoteOff(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableNoteOff(void *_o                     ) {return (sSI)((ModInputFilter*)_o)->getEnableNoteOff();}
void  YAC_CALL ModInputFilter__setEnablePitchbend(void *_o, yacmemptr _args  ) {((ModInputFilter*)_o)->setEnablePitchbend(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnablePitchbend(void *_o                   ) {return (sSI)((ModInputFilter*)_o)->getEnablePitchbend();}
void  YAC_CALL ModInputFilter__setEnableChannelPressure(void *_o, yacmemptr _args) {((ModInputFilter*)_o)->setEnableChannelPressure(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableChannelPressure(void *_o             ) {return (sSI)((ModInputFilter*)_o)->getEnableChannelPressure();}
void  YAC_CALL ModInputFilter__setEnablePolyPressure(void *_o, yacmemptr _args) {((ModInputFilter*)_o)->setEnablePolyPressure(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnablePolyPressure(void *_o                ) {return (sSI)((ModInputFilter*)_o)->getEnablePolyPressure();}
void  YAC_CALL ModInputFilter__setEnablePrgChg(void *_o, yacmemptr _args     ) {((ModInputFilter*)_o)->setEnablePrgChg(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnablePrgChg(void *_o                      ) {return (sSI)((ModInputFilter*)_o)->getEnablePrgChg();}
void  YAC_CALL ModInputFilter__setEnableCCBankSelect(void *_o, yacmemptr _args) {((ModInputFilter*)_o)->setEnableCCBankSelect(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableCCBankSelect(void *_o                ) {return (sSI)((ModInputFilter*)_o)->getEnableCCBankSelect();}
void  YAC_CALL ModInputFilter__setEnableCCModWheel(void *_o, yacmemptr _args ) {((ModInputFilter*)_o)->setEnableCCModWheel(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableCCModWheel(void *_o                  ) {return (sSI)((ModInputFilter*)_o)->getEnableCCModWheel();}
void  YAC_CALL ModInputFilter__setEnableCCBreathControl(void *_o, yacmemptr _args) {((ModInputFilter*)_o)->setEnableCCBreathControl(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableCCBreathControl(void *_o             ) {return (sSI)((ModInputFilter*)_o)->getEnableCCBreathControl();}
void  YAC_CALL ModInputFilter__setEnableCCFootControl(void *_o, yacmemptr _args) {((ModInputFilter*)_o)->setEnableCCFootControl(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableCCFootControl(void *_o               ) {return (sSI)((ModInputFilter*)_o)->getEnableCCFootControl();}
void  YAC_CALL ModInputFilter__setEnableCCExpression(void *_o, yacmemptr _args) {((ModInputFilter*)_o)->setEnableCCExpression(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableCCExpression(void *_o                ) {return (sSI)((ModInputFilter*)_o)->getEnableCCExpression();}
void  YAC_CALL ModInputFilter__setEnableCCHold1SW(void *_o, yacmemptr _args  ) {((ModInputFilter*)_o)->setEnableCCHold1SW(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableCCHold1SW(void *_o                   ) {return (sSI)((ModInputFilter*)_o)->getEnableCCHold1SW();}
void  YAC_CALL ModInputFilter__setEnableCCHold2SW(void *_o, yacmemptr _args  ) {((ModInputFilter*)_o)->setEnableCCHold2SW(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableCCHold2SW(void *_o                   ) {return (sSI)((ModInputFilter*)_o)->getEnableCCHold2SW();}
void  YAC_CALL ModInputFilter__setEnableCCPortamentoSW(void *_o, yacmemptr _args) {((ModInputFilter*)_o)->setEnableCCPortamentoSW(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableCCPortamentoSW(void *_o              ) {return (sSI)((ModInputFilter*)_o)->getEnableCCPortamentoSW();}
void  YAC_CALL ModInputFilter__setEnableCCSostenutoSW(void *_o, yacmemptr _args) {((ModInputFilter*)_o)->setEnableCCSostenutoSW(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableCCSostenutoSW(void *_o               ) {return (sSI)((ModInputFilter*)_o)->getEnableCCSostenutoSW();}
void  YAC_CALL ModInputFilter__setEnableCCSoftPedalSW(void *_o, yacmemptr _args) {((ModInputFilter*)_o)->setEnableCCSoftPedalSW(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableCCSoftPedalSW(void *_o               ) {return (sSI)((ModInputFilter*)_o)->getEnableCCSoftPedalSW();}
void  YAC_CALL ModInputFilter__setEnableCCLegatoSW(void *_o, yacmemptr _args ) {((ModInputFilter*)_o)->setEnableCCLegatoSW(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableCCLegatoSW(void *_o                  ) {return (sSI)((ModInputFilter*)_o)->getEnableCCLegatoSW();}
void  YAC_CALL ModInputFilter__setEnableCCOther(void *_o, yacmemptr _args    ) {((ModInputFilter*)_o)->setEnableCCOther(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableCCOther(void *_o                     ) {return (sSI)((ModInputFilter*)_o)->getEnableCCOther();}
void  YAC_CALL ModInputFilter__setEnableSysEx(void *_o, yacmemptr _args      ) {((ModInputFilter*)_o)->setEnableSysEx(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableSysEx(void *_o                       ) {return (sSI)((ModInputFilter*)_o)->getEnableSysEx();}
void  YAC_CALL ModInputFilter__setNoteMin(void *_o, yacmemptr _args          ) {((ModInputFilter*)_o)->setNoteMin(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getNoteMin(void *_o                           ) {return (sSI)((ModInputFilter*)_o)->getNoteMin();}
void  YAC_CALL ModInputFilter__setNoteMax(void *_o, yacmemptr _args          ) {((ModInputFilter*)_o)->setNoteMax(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getNoteMax(void *_o                           ) {return (sSI)((ModInputFilter*)_o)->getNoteMax();}
void  YAC_CALL ModInputFilter__setNoteTranspose(void *_o, yacmemptr _args    ) {((ModInputFilter*)_o)->setNoteTranspose(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getNoteTranspose(void *_o                     ) {return (sSI)((ModInputFilter*)_o)->getNoteTranspose();}
void  YAC_CALL ModInputFilter__setVelocityMin(void *_o, yacmemptr _args      ) {((ModInputFilter*)_o)->setVelocityMin(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getVelocityMin(void *_o                       ) {return (sSI)((ModInputFilter*)_o)->getVelocityMin();}
void  YAC_CALL ModInputFilter__setVelocityMax(void *_o, yacmemptr _args      ) {((ModInputFilter*)_o)->setVelocityMax(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getVelocityMax(void *_o                       ) {return (sSI)((ModInputFilter*)_o)->getVelocityMax();}
void  YAC_CALL ModInputFilter__setEnableVRR(void *_o, yacmemptr _args        ) {((ModInputFilter*)_o)->setEnableVRR(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getEnableVRR(void *_o                         ) {return (sSI)((ModInputFilter*)_o)->getEnableVRR();}
void  YAC_CALL ModInputFilter__setVrrNoteOnIdx(void *_o, yacmemptr _args     ) {((ModInputFilter*)_o)->setVrrNoteOnIdx(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getVrrNoteOnIdx(void *_o                      ) {return (sSI)((ModInputFilter*)_o)->getVrrNoteOnIdx();}
void  YAC_CALL ModInputFilter__setVrrNote(void *_o, yacmemptr _args          ) {((ModInputFilter*)_o)->setVrrNote(_args.mem[0].si);}
sSI   YAC_CALL ModInputFilter__getVrrNote(void *_o                           ) {return (sSI)((ModInputFilter*)_o)->getVrrNote();}
sSI   YAC_CALL ModInputFilter___checkMessage(void *_o, yacmemptr _args       ) {return (sSI)((ModInputFilter*)_o)->_checkMessage(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL ModInputFilter__saveState(void *_o, yacmemptr _args           ) {return (sSI)((ModInputFilter*)_o)->saveState(_args.mem[0].o);}
sSI   YAC_CALL ModInputFilter__loadState(void *_o, yacmemptr _args           ) {return (sSI)((ModInputFilter*)_o)->loadState(_args.mem[0].o);}
#endif // YAC_NO_HOST
