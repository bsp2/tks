// ---- ying_midipipe_HostMIDIEvents.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 11:28:29)

#ifndef YAC_NO_HOST
void  YAC_CALL HostMIDIEvents__empty(void *                        );
void  YAC_CALL HostMIDIEvents__addMIDIShortEvent(void *, yacmemptr );
void  YAC_CALL HostMIDIEvents__addMIDIShortEvent32(void *, yacmemptr);
sSI   YAC_CALL HostMIDIEvents__getNumMIDIEvents(void *             );
sSI   YAC_CALL HostMIDIEvents__getFirstMillisec(void *             );
void  YAC_CALL HostMIDIEvents__printMillisecs(void *               );
sSI   YAC_CALL HostMIDIEvents__modMatrixCheckEventByFlt(void *, yacmemptr);
sSI   YAC_CALL HostMIDIEvents__getLastSeenModMatrixEventTypeByFlt(void *, yacmemptr);
sF32  YAC_CALL HostMIDIEvents__getNormalizedNoteOnVelocityByEventIdx(void *, yacmemptr);
sSI   YAC_CALL HostMIDIEvents__setNormalizedNoteOnVelocityByEventIdx(void *, yacmemptr);
sF32  YAC_CALL HostMIDIEvents__getNormalizedNoteOffVelocityByEventIdx(void *, yacmemptr);
sSI   YAC_CALL HostMIDIEvents__setNormalizedNoteOffVelocityByEventIdx(void *, yacmemptr);
#endif // YAC_NO_HOST

// ------------------ YAC class "HostMIDIEvents" reflection map (implementation) ------------------
sUI          YAC_VCALL HostMIDIEvents::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL HostMIDIEvents::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL HostMIDIEvents::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL HostMIDIEvents::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL HostMIDIEvents::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL HostMIDIEvents::yacMethodGetNum                  (void) {return 13;}
const char **YAC_VCALL HostMIDIEvents::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "empty", "addMIDIShortEvent", "addMIDIShortEvent32", "getNumMIDIEvents", "getFirstMillisec", "printMillisecs", "modMatrixCheckEventByFlt", "getLastSeenModMatrixEventTypeByFlt", "getNormalizedNoteOnVelocityByEventIdx", "setNormalizedNoteOnVelocityByEventIdx", "getNormalizedNoteOffVelocityByEventIdx", "setNormalizedNoteOffVelocityByEventIdx"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL HostMIDIEvents::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 6, 3, 0, 0, 0, 9, 3, 7, 8, 7, 8}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL HostMIDIEvents::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={1, 1, 1, 1, 1, 1,};static const sUI rt3[]={1, 1, 1,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={1, 1, 1, 1, 1, 1, 1, 3, 3,};static const sUI rt8[]={1, 1, 3,};static const sUI rt9[]={1, 1, 1, 1, 1, 1, 1,};static const sUI rt10[]={1, 1, 1, 1, 1, 1, 1, 2,};static const sUI rt11[]={1, 1, 1, 1, 1, 1, 1,};static const sUI rt12[]={1, 1, 1, 1, 1, 1, 1, 2,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL HostMIDIEvents::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs3[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs8[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs9[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs10[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs11[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs12[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL HostMIDIEvents::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 0, 1, 1, 0, 1, 1, 2, 1, 2, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL HostMIDIEvents::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL HostMIDIEvents::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)HostMIDIEvents__empty, (void*)HostMIDIEvents__addMIDIShortEvent, (void*)HostMIDIEvents__addMIDIShortEvent32, (void*)HostMIDIEvents__getNumMIDIEvents, (void*)HostMIDIEvents__getFirstMillisec, (void*)HostMIDIEvents__printMillisecs, (void*)HostMIDIEvents__modMatrixCheckEventByFlt, (void*)HostMIDIEvents__getLastSeenModMatrixEventTypeByFlt, (void*)HostMIDIEvents__getNormalizedNoteOnVelocityByEventIdx, (void*)HostMIDIEvents__setNormalizedNoteOnVelocityByEventIdx, (void*)HostMIDIEvents__getNormalizedNoteOffVelocityByEventIdx, (void*)HostMIDIEvents__setNormalizedNoteOffVelocityByEventIdx}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL HostMIDIEvents::yacConstantGetNum                (void) {return 7;}
const char **YAC_VCALL HostMIDIEvents::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"HOSTMIDIEVENT_TYPE_NONE", "HOSTMIDIEVENT_TYPE_NOTE_ON", "HOSTMIDIEVENT_TYPE_NOTE_OFF", "HOSTMIDIEVENT_TYPE_PRGCHG", "HOSTMIDIEVENT_TYPE_PITCHBEND", "HOSTMIDIEVENT_TYPE_PRESSURE", "HOSTMIDIEVENT_TYPE_CC"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL HostMIDIEvents::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL HostMIDIEvents::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[7]; m.ui=r; m.si[0]=(sSI)0;m.si[1]=(sSI)1;m.si[2]=(sSI)2;m.si[3]=(sSI)3;m.si[4]=(sSI)4;m.si[5]=(sSI)5;m.si[6]=(sSI)6;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(HostMIDIEvents, "HostMIDIEvents");

#ifndef YAC_NO_HOST
void  YAC_CALL HostMIDIEvents__empty(void *_o                                ) {((HostMIDIEvents*)_o)->empty();}
void  YAC_CALL HostMIDIEvents__addMIDIShortEvent(void *_o, yacmemptr _args   ) {((HostMIDIEvents*)_o)->addMIDIShortEvent(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si);}
void  YAC_CALL HostMIDIEvents__addMIDIShortEvent32(void *_o, yacmemptr _args ) {((HostMIDIEvents*)_o)->addMIDIShortEvent32(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL HostMIDIEvents__getNumMIDIEvents(void *_o                     ) {return (sSI)((HostMIDIEvents*)_o)->getNumMIDIEvents();}
sSI   YAC_CALL HostMIDIEvents__getFirstMillisec(void *_o                     ) {return (sSI)((HostMIDIEvents*)_o)->getFirstMillisec();}
void  YAC_CALL HostMIDIEvents__printMillisecs(void *_o                       ) {((HostMIDIEvents*)_o)->printMillisecs();}
sSI   YAC_CALL HostMIDIEvents__modMatrixCheckEventByFlt(void *_o, yacmemptr _args) {return (sSI)((HostMIDIEvents*)_o)->modMatrixCheckEventByFlt(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si, _args.mem[6].si, _args.mem[7].o, _args.mem[8].o);}
sSI   YAC_CALL HostMIDIEvents__getLastSeenModMatrixEventTypeByFlt(void *_o, yacmemptr _args) {return (sSI)((HostMIDIEvents*)_o)->getLastSeenModMatrixEventTypeByFlt(_args.mem[0].si, _args.mem[1].si, _args.mem[2].o);}
sF32  YAC_CALL HostMIDIEvents__getNormalizedNoteOnVelocityByEventIdx(void *_o, yacmemptr _args) {return (sF32)((HostMIDIEvents*)_o)->getNormalizedNoteOnVelocityByEventIdx(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si, _args.mem[6].si);}
sSI   YAC_CALL HostMIDIEvents__setNormalizedNoteOnVelocityByEventIdx(void *_o, yacmemptr _args) {return (sSI)((HostMIDIEvents*)_o)->setNormalizedNoteOnVelocityByEventIdx(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si, _args.mem[6].si, _args.mem[7].f32);}
sF32  YAC_CALL HostMIDIEvents__getNormalizedNoteOffVelocityByEventIdx(void *_o, yacmemptr _args) {return (sF32)((HostMIDIEvents*)_o)->getNormalizedNoteOffVelocityByEventIdx(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si, _args.mem[6].si);}
sSI   YAC_CALL HostMIDIEvents__setNormalizedNoteOffVelocityByEventIdx(void *_o, yacmemptr _args) {return (sSI)((HostMIDIEvents*)_o)->setNormalizedNoteOffVelocityByEventIdx(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si, _args.mem[6].si, _args.mem[7].f32);}
#endif // YAC_NO_HOST
