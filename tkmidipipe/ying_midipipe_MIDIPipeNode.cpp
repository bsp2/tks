// ---- ying_midipipe_MIDIPipeNode.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 11:28:29)

#ifndef YAC_NO_HOST
void  YAC_CALL MIDIPipeNode__init   (void *, yacmemptr             );
void  YAC_CALL MIDIPipeNode__setName(void *, yacmemptr             );
void* YAC_CALL MIDIPipeNode__getName(void *                        );
void  YAC_CALL MIDIPipeNode__setRemark(void *, yacmemptr           );
void* YAC_CALL MIDIPipeNode__getRemark(void *                      );
void  YAC_CALL MIDIPipeNode__setSuggestedPresetName(void *, yacmemptr);
void* YAC_CALL MIDIPipeNode__getSuggestedPresetName(void *         );
void* YAC_CALL MIDIPipeNode__getParent(void *                      );
void* YAC_CALL MIDIPipeNode__getPrev(void *                        );
void* YAC_CALL MIDIPipeNode__getNext(void *                        );
sSI   YAC_CALL MIDIPipeNode__getNodeIdx(void *                     );
sSI   YAC_CALL MIDIPipeNode__getState(void *                       );
void  YAC_CALL MIDIPipeNode__setState(void *, yacmemptr            );
sSI   YAC_CALL MIDIPipeNode__getPresoloState(void *                );
void  YAC_CALL MIDIPipeNode__setPresoloState(void *, yacmemptr     );
sSI   YAC_CALL MIDIPipeNode__isNodeActive(void *                   );
sSI   YAC_CALL MIDIPipeNode__isPipeMuted(void *                    );
sSI   YAC_CALL MIDIPipeNode__isNodeOrPipeMuted(void *              );
void  YAC_CALL MIDIPipeNode__saveSoloState(void *                  );
void  YAC_CALL MIDIPipeNode__restorePreSoloState(void *            );
void  YAC_CALL MIDIPipeNode__processFrame(void *, yacmemptr        );
void  YAC_CALL MIDIPipeNode__seek   (void *, yacmemptr             );
void  YAC_CALL MIDIPipeNode__reset  (void *, yacmemptr             );
void  YAC_CALL MIDIPipeNode__songSelect(void *                     );
sSI   YAC_CALL MIDIPipeNode__moveUp (void *                        );
sSI   YAC_CALL MIDIPipeNode__moveDown(void *                       );
void  YAC_CALL MIDIPipeNode__handleSongSpeedChanged(void *, yacmemptr);
#endif // YAC_NO_HOST

// ------------------ YAC class "MIDIPipeNode" reflection map (implementation) ------------------
sUI          YAC_VCALL MIDIPipeNode::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL MIDIPipeNode::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL MIDIPipeNode::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL MIDIPipeNode::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL MIDIPipeNode::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL MIDIPipeNode::yacMethodGetNum                  (void) {return 28;}
const char **YAC_VCALL MIDIPipeNode::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "init", "setName", "getName", "setRemark", "getRemark", "setSuggestedPresetName", "getSuggestedPresetName", "getParent", "getPrev", "getNext", "getNodeIdx", "getState", "setState", "getPresoloState", "setPresoloState", "isNodeActive", "isPipeMuted", "isNodeOrPipeMuted", "saveSoloState", "restorePreSoloState", "processFrame", "seek", "reset", "songSelect", "moveUp", "moveDown", "handleSongSpeedChanged"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIPipeNode::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 4, 1, 1, 0, 0, 0, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL MIDIPipeNode::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3,};static const sUI rt2[]={3,};static const sUI rt3[]={0,};static const sUI rt4[]={3,};static const sUI rt5[]={0,};static const sUI rt6[]={3,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={0,};static const sUI rt13[]={1,};static const sUI rt14[]={0,};static const sUI rt15[]={1,};static const sUI rt16[]={0,};static const sUI rt17[]={0,};static const sUI rt18[]={0,};static const sUI rt19[]={0,};static const sUI rt20[]={0,};static const sUI rt21[]={3, 3, 1, 1,};static const sUI rt22[]={1,};static const sUI rt23[]={1,};static const sUI rt24[]={0,};static const sUI rt25[]={0,};static const sUI rt26[]={0,};static const sUI rt27[]={1, 1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL MIDIPipeNode::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={"MIDIPipe",};static const char *rs2[]={"String",};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={"String",};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={"MIDIPipeFrame", "MIDIPipeFrame", (const char*)0, (const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIPipeNode::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 3, 0, 3, 0, 3, 3, 3, 3, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL MIDIPipeNode::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, "String", (const char*)0, "String", (const char*)0, "String", "MIDIPipe", "MIDIPipeNode", "MIDIPipeNode", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL MIDIPipeNode::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)MIDIPipeNode__init, (void*)MIDIPipeNode__setName, (void*)MIDIPipeNode__getName, (void*)MIDIPipeNode__setRemark, (void*)MIDIPipeNode__getRemark, (void*)MIDIPipeNode__setSuggestedPresetName, (void*)MIDIPipeNode__getSuggestedPresetName, (void*)MIDIPipeNode__getParent, (void*)MIDIPipeNode__getPrev, (void*)MIDIPipeNode__getNext, (void*)MIDIPipeNode__getNodeIdx, (void*)MIDIPipeNode__getState, (void*)MIDIPipeNode__setState, (void*)MIDIPipeNode__getPresoloState, (void*)MIDIPipeNode__setPresoloState, (void*)MIDIPipeNode__isNodeActive, (void*)MIDIPipeNode__isPipeMuted, (void*)MIDIPipeNode__isNodeOrPipeMuted, (void*)MIDIPipeNode__saveSoloState, (void*)MIDIPipeNode__restorePreSoloState, (void*)MIDIPipeNode__processFrame, (void*)MIDIPipeNode__seek, (void*)MIDIPipeNode__reset, (void*)MIDIPipeNode__songSelect, (void*)MIDIPipeNode__moveUp, (void*)MIDIPipeNode__moveDown, (void*)MIDIPipeNode__handleSongSpeedChanged}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL MIDIPipeNode::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL MIDIPipeNode::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL MIDIPipeNode::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL MIDIPipeNode::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(MIDIPipeNode, "MIDIPipeNode");

#ifndef YAC_NO_HOST
void  YAC_CALL MIDIPipeNode__init   (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipe)){ ((MIDIPipeNode*)_o)->init((MIDIPipe*)_args.mem[0].o);}}
void  YAC_CALL MIDIPipeNode__setName(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((MIDIPipeNode*)_o)->setName((YAC_String*)_args.mem[0].o);}}
void* YAC_CALL MIDIPipeNode__getName(void *_o                                ) {return (void*)((MIDIPipeNode*)_o)->getName();}
void  YAC_CALL MIDIPipeNode__setRemark(void *_o, yacmemptr _args             ) {((MIDIPipeNode*)_o)->setRemark(_args.mem[0].o);}
void* YAC_CALL MIDIPipeNode__getRemark(void *_o                              ) {return (void*)((MIDIPipeNode*)_o)->getRemark();}
void  YAC_CALL MIDIPipeNode__setSuggestedPresetName(void *_o, yacmemptr _args) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((MIDIPipeNode*)_o)->setSuggestedPresetName((YAC_String*)_args.mem[0].o);}}
void* YAC_CALL MIDIPipeNode__getSuggestedPresetName(void *_o                 ) {return (void*)((MIDIPipeNode*)_o)->getSuggestedPresetName();}
void* YAC_CALL MIDIPipeNode__getParent(void *_o                              ) {return (void*)((MIDIPipeNode*)_o)->getParent();}
void* YAC_CALL MIDIPipeNode__getPrev(void *_o                                ) {return (void*)((MIDIPipeNode*)_o)->getPrev();}
void* YAC_CALL MIDIPipeNode__getNext(void *_o                                ) {return (void*)((MIDIPipeNode*)_o)->getNext();}
sSI   YAC_CALL MIDIPipeNode__getNodeIdx(void *_o                             ) {return (sSI)((MIDIPipeNode*)_o)->getNodeIdx();}
sSI   YAC_CALL MIDIPipeNode__getState(void *_o                               ) {return (sSI)((MIDIPipeNode*)_o)->getState();}
void  YAC_CALL MIDIPipeNode__setState(void *_o, yacmemptr _args              ) {((MIDIPipeNode*)_o)->setState(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeNode__getPresoloState(void *_o                        ) {return (sSI)((MIDIPipeNode*)_o)->getPresoloState();}
void  YAC_CALL MIDIPipeNode__setPresoloState(void *_o, yacmemptr _args       ) {((MIDIPipeNode*)_o)->setPresoloState(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeNode__isNodeActive(void *_o                           ) {return (sSI)((MIDIPipeNode*)_o)->isNodeActive();}
sSI   YAC_CALL MIDIPipeNode__isPipeMuted(void *_o                            ) {return (sSI)((MIDIPipeNode*)_o)->isPipeMuted();}
sSI   YAC_CALL MIDIPipeNode__isNodeOrPipeMuted(void *_o                      ) {return (sSI)((MIDIPipeNode*)_o)->isNodeOrPipeMuted();}
void  YAC_CALL MIDIPipeNode__saveSoloState(void *_o                          ) {((MIDIPipeNode*)_o)->saveSoloState();}
void  YAC_CALL MIDIPipeNode__restorePreSoloState(void *_o                    ) {((MIDIPipeNode*)_o)->restorePreSoloState();}
void  YAC_CALL MIDIPipeNode__processFrame(void *_o, yacmemptr _args          ) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipeFrame))if(YAC_BCHK(_args.mem[1].o, clid_MIDIPipeFrame)){ ((MIDIPipeNode*)_o)->processFrame((MIDIPipeFrame*)_args.mem[0].o, (MIDIPipeFrame*)_args.mem[1].o, _args.mem[2].si, _args.mem[3].si);}}
void  YAC_CALL MIDIPipeNode__seek   (void *_o, yacmemptr _args               ) {((MIDIPipeNode*)_o)->seek(_args.mem[0].si);}
void  YAC_CALL MIDIPipeNode__reset  (void *_o, yacmemptr _args               ) {((MIDIPipeNode*)_o)->reset(_args.mem[0].si);}
void  YAC_CALL MIDIPipeNode__songSelect(void *_o                             ) {((MIDIPipeNode*)_o)->songSelect();}
sSI   YAC_CALL MIDIPipeNode__moveUp (void *_o                                ) {return (sSI)((MIDIPipeNode*)_o)->moveUp();}
sSI   YAC_CALL MIDIPipeNode__moveDown(void *_o                               ) {return (sSI)((MIDIPipeNode*)_o)->moveDown();}
void  YAC_CALL MIDIPipeNode__handleSongSpeedChanged(void *_o, yacmemptr _args) {((MIDIPipeNode*)_o)->handleSongSpeedChanged(_args.mem[0].si, _args.mem[1].si);}
#endif // YAC_NO_HOST
