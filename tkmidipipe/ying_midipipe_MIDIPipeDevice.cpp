// ---- ying_midipipe_MIDIPipeDevice.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 11:28:29)

#ifndef YAC_NO_HOST
void  YAC_CALL MIDIPipeDevice__setBuffers(void *, yacmemptr        );
void  YAC_CALL MIDIPipeDevice__setEnableUseOverflowBuffers(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeDevice__getEnableUseOverflowBuffers(void *  );
void  YAC_CALL MIDIPipeDevice__setEnableMIDICache(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeDevice__getEnableMIDICache(void *           );
void  YAC_CALL MIDIPipeDevice__setEnableNoteOffMsg(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeDevice__getEnableNoteOffMsg(void *          );
void  YAC_CALL MIDIPipeDevice__setEnableGlobal(void *, yacmemptr   );
sSI   YAC_CALL MIDIPipeDevice__getEnableGlobal(void *              );
void  YAC_CALL MIDIPipeDevice__setEnableVirtual(void *, yacmemptr  );
sSI   YAC_CALL MIDIPipeDevice__getEnableVirtual(void *             );
sSI   YAC_CALL MIDIPipeDevice__getPrg(void *, yacmemptr            );
sSI   YAC_CALL MIDIPipeDevice__getChPressure(void *, yacmemptr     );
sSI   YAC_CALL MIDIPipeDevice__getPitchbend(void *, yacmemptr      );
sSI   YAC_CALL MIDIPipeDevice__getCCState(void *, yacmemptr        );
sSI   YAC_CALL MIDIPipeDevice__getRPNState(void *, yacmemptr       );
sSI   YAC_CALL MIDIPipeDevice__getNRPNState(void *, yacmemptr      );
sSI   YAC_CALL MIDIPipeDevice__getPolyPressure(void *, yacmemptr   );
void  YAC_CALL MIDIPipeDevice__setPrg(void *, yacmemptr            );
void  YAC_CALL MIDIPipeDevice__setChPressure(void *, yacmemptr     );
void  YAC_CALL MIDIPipeDevice__setPitchbend(void *, yacmemptr      );
void  YAC_CALL MIDIPipeDevice__setCCState(void *, yacmemptr        );
void  YAC_CALL MIDIPipeDevice__setRPNState(void *, yacmemptr       );
void  YAC_CALL MIDIPipeDevice__setNRPNState(void *, yacmemptr      );
void  YAC_CALL MIDIPipeDevice__setPolyPressure(void *, yacmemptr   );
void  YAC_CALL MIDIPipeDevice__setParamMode(void *, yacmemptr      );
sSI   YAC_CALL MIDIPipeDevice__getParamMode(void *, yacmemptr      );
void  YAC_CALL MIDIPipeDevice__setEnableCCPerfLSB(void *, yacmemptr);
void  YAC_CALL MIDIPipeDevice__setEnableChannelPressureAndNoteOff(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeDevice__getEnableChannelPressureAndNoteOff(void *);
void  YAC_CALL MIDIPipeDevice__setEnableRunningStatus(void *, yacmemptr);
sSI   YAC_CALL MIDIPipeDevice__getEnableRunningStatus(void *, yacmemptr);
void  YAC_CALL MIDIPipeDevice__clearMIDICache(void *               );
void  YAC_CALL MIDIPipeDevice__clearMIDICacheForCh(void *, yacmemptr);
#endif // YAC_NO_HOST

// ------------------ YAC class "MIDIPipeDevice" reflection map (implementation) ------------------
sUI          YAC_VCALL MIDIPipeDevice::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL MIDIPipeDevice::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL MIDIPipeDevice::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL MIDIPipeDevice::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL MIDIPipeDevice::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL MIDIPipeDevice::yacMethodGetNum                  (void) {return 35;}
const char **YAC_VCALL MIDIPipeDevice::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "setBuffers", "setEnableUseOverflowBuffers", "getEnableUseOverflowBuffers", "setEnableMIDICache", "getEnableMIDICache", "setEnableNoteOffMsg", "getEnableNoteOffMsg", "setEnableGlobal", "getEnableGlobal", "setEnableVirtual", "getEnableVirtual", "getPrg", "getChPressure", "getPitchbend", "getCCState", "getRPNState", "getNRPNState", "getPolyPressure", "setPrg", "setChPressure", "setPitchbend", "setCCState", "setRPNState", "setNRPNState", "setPolyPressure", "setParamMode", "getParamMode", "setEnableCCPerfLSB", "setEnableChannelPressureAndNoteOff", "getEnableChannelPressureAndNoteOff", "setEnableRunningStatus", "getEnableRunningStatus", "clearMIDICache", "clearMIDICacheForCh"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIPipeDevice::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 1, 2, 1, 0, 2, 1, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL MIDIPipeDevice::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3, 3,};static const sUI rt2[]={1,};static const sUI rt3[]={0,};static const sUI rt4[]={1,};static const sUI rt5[]={0,};static const sUI rt6[]={1,};static const sUI rt7[]={0,};static const sUI rt8[]={1,};static const sUI rt9[]={0,};static const sUI rt10[]={1,};static const sUI rt11[]={0,};static const sUI rt12[]={1,};static const sUI rt13[]={1,};static const sUI rt14[]={1,};static const sUI rt15[]={1, 1,};static const sUI rt16[]={1, 1,};static const sUI rt17[]={1, 1,};static const sUI rt18[]={1, 1,};static const sUI rt19[]={1, 1,};static const sUI rt20[]={1, 1,};static const sUI rt21[]={1, 1,};static const sUI rt22[]={1, 1, 1,};static const sUI rt23[]={1, 1, 1,};static const sUI rt24[]={1, 1, 1,};static const sUI rt25[]={1, 1, 1,};static const sUI rt26[]={1, 1,};static const sUI rt27[]={1,};static const sUI rt28[]={1, 1,};static const sUI rt29[]={1,};static const sUI rt30[]={0,};static const sUI rt31[]={1, 1,};static const sUI rt32[]={1,};static const sUI rt33[]={0,};static const sUI rt34[]={1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL MIDIPipeDevice::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={"Buffer", "Buffer",};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0, (const char*)0,};static const char *rs16[]={(const char*)0, (const char*)0,};static const char *rs17[]={(const char*)0, (const char*)0,};static const char *rs18[]={(const char*)0, (const char*)0,};static const char *rs19[]={(const char*)0, (const char*)0,};static const char *rs20[]={(const char*)0, (const char*)0,};static const char *rs21[]={(const char*)0, (const char*)0,};static const char *rs22[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs23[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs24[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs25[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs26[]={(const char*)0, (const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0, (const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0, (const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char *rs34[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIPipeDevice::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL MIDIPipeDevice::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL MIDIPipeDevice::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)MIDIPipeDevice__setBuffers, (void*)MIDIPipeDevice__setEnableUseOverflowBuffers, (void*)MIDIPipeDevice__getEnableUseOverflowBuffers, (void*)MIDIPipeDevice__setEnableMIDICache, (void*)MIDIPipeDevice__getEnableMIDICache, (void*)MIDIPipeDevice__setEnableNoteOffMsg, (void*)MIDIPipeDevice__getEnableNoteOffMsg, (void*)MIDIPipeDevice__setEnableGlobal, (void*)MIDIPipeDevice__getEnableGlobal, (void*)MIDIPipeDevice__setEnableVirtual, (void*)MIDIPipeDevice__getEnableVirtual, (void*)MIDIPipeDevice__getPrg, (void*)MIDIPipeDevice__getChPressure, (void*)MIDIPipeDevice__getPitchbend, (void*)MIDIPipeDevice__getCCState, (void*)MIDIPipeDevice__getRPNState, (void*)MIDIPipeDevice__getNRPNState, (void*)MIDIPipeDevice__getPolyPressure, (void*)MIDIPipeDevice__setPrg, (void*)MIDIPipeDevice__setChPressure, (void*)MIDIPipeDevice__setPitchbend, (void*)MIDIPipeDevice__setCCState, (void*)MIDIPipeDevice__setRPNState, (void*)MIDIPipeDevice__setNRPNState, (void*)MIDIPipeDevice__setPolyPressure, (void*)MIDIPipeDevice__setParamMode, (void*)MIDIPipeDevice__getParamMode, (void*)MIDIPipeDevice__setEnableCCPerfLSB, (void*)MIDIPipeDevice__setEnableChannelPressureAndNoteOff, (void*)MIDIPipeDevice__getEnableChannelPressureAndNoteOff, (void*)MIDIPipeDevice__setEnableRunningStatus, (void*)MIDIPipeDevice__getEnableRunningStatus, (void*)MIDIPipeDevice__clearMIDICache, (void*)MIDIPipeDevice__clearMIDICacheForCh}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL MIDIPipeDevice::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL MIDIPipeDevice::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL MIDIPipeDevice::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL MIDIPipeDevice::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(MIDIPipeDevice, "MIDIPipeDevice");

#ifndef YAC_NO_HOST
void  YAC_CALL MIDIPipeDevice__setBuffers(void *_o, yacmemptr _args          ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_BUFFER))if(YAC_BCHK(_args.mem[1].o, YAC_CLID_BUFFER)){ ((MIDIPipeDevice*)_o)->setBuffers((YAC_Buffer*)_args.mem[0].o, (YAC_Buffer*)_args.mem[1].o);}}
void  YAC_CALL MIDIPipeDevice__setEnableUseOverflowBuffers(void *_o, yacmemptr _args) {((MIDIPipeDevice*)_o)->setEnableUseOverflowBuffers(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeDevice__getEnableUseOverflowBuffers(void *_o          ) {return (sSI)((MIDIPipeDevice*)_o)->getEnableUseOverflowBuffers();}
void  YAC_CALL MIDIPipeDevice__setEnableMIDICache(void *_o, yacmemptr _args  ) {((MIDIPipeDevice*)_o)->setEnableMIDICache(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeDevice__getEnableMIDICache(void *_o                   ) {return (sSI)((MIDIPipeDevice*)_o)->getEnableMIDICache();}
void  YAC_CALL MIDIPipeDevice__setEnableNoteOffMsg(void *_o, yacmemptr _args ) {((MIDIPipeDevice*)_o)->setEnableNoteOffMsg(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeDevice__getEnableNoteOffMsg(void *_o                  ) {return (sSI)((MIDIPipeDevice*)_o)->getEnableNoteOffMsg();}
void  YAC_CALL MIDIPipeDevice__setEnableGlobal(void *_o, yacmemptr _args     ) {((MIDIPipeDevice*)_o)->setEnableGlobal(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeDevice__getEnableGlobal(void *_o                      ) {return (sSI)((MIDIPipeDevice*)_o)->getEnableGlobal();}
void  YAC_CALL MIDIPipeDevice__setEnableVirtual(void *_o, yacmemptr _args    ) {((MIDIPipeDevice*)_o)->setEnableVirtual(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeDevice__getEnableVirtual(void *_o                     ) {return (sSI)((MIDIPipeDevice*)_o)->getEnableVirtual();}
sSI   YAC_CALL MIDIPipeDevice__getPrg(void *_o, yacmemptr _args              ) {return (sSI)((MIDIPipeDevice*)_o)->getPrg(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeDevice__getChPressure(void *_o, yacmemptr _args       ) {return (sSI)((MIDIPipeDevice*)_o)->getChPressure(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeDevice__getPitchbend(void *_o, yacmemptr _args        ) {return (sSI)((MIDIPipeDevice*)_o)->getPitchbend(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeDevice__getCCState(void *_o, yacmemptr _args          ) {return (sSI)((MIDIPipeDevice*)_o)->getCCState(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeDevice__getRPNState(void *_o, yacmemptr _args         ) {return (sSI)((MIDIPipeDevice*)_o)->getRPNState(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeDevice__getNRPNState(void *_o, yacmemptr _args        ) {return (sSI)((MIDIPipeDevice*)_o)->getNRPNState(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeDevice__getPolyPressure(void *_o, yacmemptr _args     ) {return (sSI)((MIDIPipeDevice*)_o)->getPolyPressure(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIPipeDevice__setPrg(void *_o, yacmemptr _args              ) {((MIDIPipeDevice*)_o)->setPrg(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIPipeDevice__setChPressure(void *_o, yacmemptr _args       ) {((MIDIPipeDevice*)_o)->setChPressure(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIPipeDevice__setPitchbend(void *_o, yacmemptr _args        ) {((MIDIPipeDevice*)_o)->setPitchbend(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIPipeDevice__setCCState(void *_o, yacmemptr _args          ) {((MIDIPipeDevice*)_o)->setCCState(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL MIDIPipeDevice__setRPNState(void *_o, yacmemptr _args         ) {((MIDIPipeDevice*)_o)->setRPNState(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL MIDIPipeDevice__setNRPNState(void *_o, yacmemptr _args        ) {((MIDIPipeDevice*)_o)->setNRPNState(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL MIDIPipeDevice__setPolyPressure(void *_o, yacmemptr _args     ) {((MIDIPipeDevice*)_o)->setPolyPressure(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL MIDIPipeDevice__setParamMode(void *_o, yacmemptr _args        ) {((MIDIPipeDevice*)_o)->setParamMode(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeDevice__getParamMode(void *_o, yacmemptr _args        ) {return (sSI)((MIDIPipeDevice*)_o)->getParamMode(_args.mem[0].si);}
void  YAC_CALL MIDIPipeDevice__setEnableCCPerfLSB(void *_o, yacmemptr _args  ) {((MIDIPipeDevice*)_o)->setEnableCCPerfLSB(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL MIDIPipeDevice__setEnableChannelPressureAndNoteOff(void *_o, yacmemptr _args) {((MIDIPipeDevice*)_o)->setEnableChannelPressureAndNoteOff(_args.mem[0].si);}
sSI   YAC_CALL MIDIPipeDevice__getEnableChannelPressureAndNoteOff(void *_o   ) {return (sSI)((MIDIPipeDevice*)_o)->getEnableChannelPressureAndNoteOff();}
void  YAC_CALL MIDIPipeDevice__setEnableRunningStatus(void *_o, yacmemptr _args) {((MIDIPipeDevice*)_o)->setEnableRunningStatus(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL MIDIPipeDevice__getEnableRunningStatus(void *_o, yacmemptr _args) {return (sSI)((MIDIPipeDevice*)_o)->getEnableRunningStatus(_args.mem[0].si);}
void  YAC_CALL MIDIPipeDevice__clearMIDICache(void *_o                       ) {((MIDIPipeDevice*)_o)->clearMIDICache();}
void  YAC_CALL MIDIPipeDevice__clearMIDICacheForCh(void *_o, yacmemptr _args ) {((MIDIPipeDevice*)_o)->clearMIDICacheForCh(_args.mem[0].si);}
#endif // YAC_NO_HOST
