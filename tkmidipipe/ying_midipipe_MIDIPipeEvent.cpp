// ---- ying_midipipe_MIDIPipeEvent.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 11:28:29)

#ifndef YAC_NO_HOST
sSI   YAC_CALL MIDIPipeEvent__getIndex(void *                      );
sSI   YAC_CALL MIDIPipeEvent__getType(void *                       );
void  YAC_CALL MIDIPipeEvent__getTypeName(void *, YAC_Value *      );
sSI   YAC_CALL MIDIPipeEvent__getDevIdx(void *                     );
sSI   YAC_CALL MIDIPipeEvent__getMidiCh(void *                     );
sSI   YAC_CALL MIDIPipeEvent__getPrgChg(void *                     );
sF32  YAC_CALL MIDIPipeEvent__getChPressure(void *                 );
sF32  YAC_CALL MIDIPipeEvent__getPitchbend(void *                  );
sSI   YAC_CALL MIDIPipeEvent__getCcId(void *                       );
sF32  YAC_CALL MIDIPipeEvent__getCcValue(void *                    );
sSI   YAC_CALL MIDIPipeEvent__getRpn(void *                        );
sF32  YAC_CALL MIDIPipeEvent__getRpnValue(void *                   );
sSI   YAC_CALL MIDIPipeEvent__getNrpn(void *                       );
sF32  YAC_CALL MIDIPipeEvent__getNrpnValue(void *                  );
sSI   YAC_CALL MIDIPipeEvent__getNote(void *                       );
sF32  YAC_CALL MIDIPipeEvent__getVelocity(void *                   );
sSI   YAC_CALL MIDIPipeEvent__getDuration(void *                   );
sSI   YAC_CALL MIDIPipeEvent__getPolyPressureNote(void *           );
sF32  YAC_CALL MIDIPipeEvent__getPolyPressureValue(void *          );
sF32  YAC_CALL MIDIPipeEvent__getArg1(void *                       );
sF32  YAC_CALL MIDIPipeEvent__getArg2(void *                       );
sSI   YAC_CALL MIDIPipeEvent__getArg3(void *                       );
void  YAC_CALL MIDIPipeEvent__getArg1Name(void *, YAC_Value *      );
void  YAC_CALL MIDIPipeEvent__getArg2Name(void *, YAC_Value *      );
void  YAC_CALL MIDIPipeEvent__getArg3Name(void *, YAC_Value *      );
sSI   YAC_CALL MIDIPipeEvent__isNote(void *                        );
sSI   YAC_CALL MIDIPipeEvent__isNoteOffPre(void *                  );
void* YAC_CALL MIDIPipeEvent__getSysExBuffer(void *                );
sSI   YAC_CALL MIDIPipeEvent__getSysRTByte(void *                  );
#endif // YAC_NO_HOST

// ------------------ YAC class "MIDIPipeEvent" reflection map (implementation) ------------------
sUI          YAC_VCALL MIDIPipeEvent::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL MIDIPipeEvent::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL MIDIPipeEvent::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL MIDIPipeEvent::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL MIDIPipeEvent::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL MIDIPipeEvent::yacMethodGetNum                  (void) {return 30;}
const char **YAC_VCALL MIDIPipeEvent::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "getIndex", "getType", "getTypeName", "getDevIdx", "getMidiCh", "getPrgChg", "getChPressure", "getPitchbend", "getCcId", "getCcValue", "getRpn", "getRpnValue", "getNrpn", "getNrpnValue", "getNote", "getVelocity", "getDuration", "getPolyPressureNote", "getPolyPressureValue", "getArg1", "getArg2", "getArg3", "getArg1Name", "getArg2Name", "getArg3Name", "isNote", "isNoteOffPre", "getSysExBuffer", "getSysRTByte"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIPipeEvent::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL MIDIPipeEvent::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={0,};static const sUI rt13[]={0,};static const sUI rt14[]={0,};static const sUI rt15[]={0,};static const sUI rt16[]={0,};static const sUI rt17[]={0,};static const sUI rt18[]={0,};static const sUI rt19[]={0,};static const sUI rt20[]={0,};static const sUI rt21[]={0,};static const sUI rt22[]={0,};static const sUI rt23[]={0,};static const sUI rt24[]={0,};static const sUI rt25[]={0,};static const sUI rt26[]={0,};static const sUI rt27[]={0,};static const sUI rt28[]={0,};static const sUI rt29[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL MIDIPipeEvent::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIPipeEvent::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 1, 4, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 4, 4, 4, 1, 1, 3, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL MIDIPipeEvent::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, "Buffer", (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL MIDIPipeEvent::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)MIDIPipeEvent__getIndex, (void*)MIDIPipeEvent__getType, (void*)MIDIPipeEvent__getTypeName, (void*)MIDIPipeEvent__getDevIdx, (void*)MIDIPipeEvent__getMidiCh, (void*)MIDIPipeEvent__getPrgChg, (void*)MIDIPipeEvent__getChPressure, (void*)MIDIPipeEvent__getPitchbend, (void*)MIDIPipeEvent__getCcId, (void*)MIDIPipeEvent__getCcValue, (void*)MIDIPipeEvent__getRpn, (void*)MIDIPipeEvent__getRpnValue, (void*)MIDIPipeEvent__getNrpn, (void*)MIDIPipeEvent__getNrpnValue, (void*)MIDIPipeEvent__getNote, (void*)MIDIPipeEvent__getVelocity, (void*)MIDIPipeEvent__getDuration, (void*)MIDIPipeEvent__getPolyPressureNote, (void*)MIDIPipeEvent__getPolyPressureValue, (void*)MIDIPipeEvent__getArg1, (void*)MIDIPipeEvent__getArg2, (void*)MIDIPipeEvent__getArg3, (void*)MIDIPipeEvent__getArg1Name, (void*)MIDIPipeEvent__getArg2Name, (void*)MIDIPipeEvent__getArg3Name, (void*)MIDIPipeEvent__isNote, (void*)MIDIPipeEvent__isNoteOffPre, (void*)MIDIPipeEvent__getSysExBuffer, (void*)MIDIPipeEvent__getSysRTByte}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL MIDIPipeEvent::yacConstantGetNum                (void) {return 22;}
const char **YAC_VCALL MIDIPipeEvent::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"MIDIPIPE_EVENT_TYPE_NONE", "MIDIPIPE_EVENT_TYPE_PRGCHG", "MIDIPIPE_EVENT_TYPE_CHPRESSURE", "MIDIPIPE_EVENT_TYPE_PITCHBEND", "MIDIPIPE_EVENT_TYPE_CC", "MIDIPIPE_EVENT_TYPE_RPN", "MIDIPIPE_EVENT_TYPE_NRPN", "MIDIPIPE_EVENT_TYPE_NOTE_OFF", "MIDIPIPE_EVENT_TYPE_NOTE_ON", "MIDIPIPE_EVENT_TYPE_POLYPRESSURE", "MIDIPIPE_EVENT_TYPE_NOTES", "MIDIPIPE_EVENT_TYPE_ALL_NOTES_OFF", "MIDIPIPE_EVENT_TYPE_SYSEX", "MIDIPIPE_EVENT_TYPE_SYSRT", "MIDIPIPE_EVENT_SYSRT_TIMING_CLOCK", "MIDIPIPE_EVENT_SYSRT_F9", "MIDIPIPE_EVENT_SYSRT_START", "MIDIPIPE_EVENT_SYSRT_CONTINUE", "MIDIPIPE_EVENT_SYSRT_STOP", "MIDIPIPE_EVENT_SYSRT_FD", "MIDIPIPE_EVENT_SYSRT_ACTIVE_SENSING", "MIDIPIPE_EVENT_SYSRT_SYSTEM_RESET"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIPipeEvent::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL MIDIPipeEvent::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[22]; m.ui=r; m.si[0]=(sSI)(0u);m.si[1]=(sSI)(1u);m.si[2]=(sSI)(2u);m.si[3]=(sSI)(3u);m.si[4]=(sSI)(4u);m.si[5]=(sSI)(5u);m.si[6]=(sSI)(6u);m.si[7]=(sSI)(7u);m.si[8]=(sSI)(8u);m.si[9]=(sSI)(9u);m.si[10]=(sSI)(10u);m.si[11]=(sSI)(11u);m.si[12]=(sSI)(12u);m.si[13]=(sSI)(13u);m.si[14]=(sSI)(0xF8);m.si[15]=(sSI)(0xF9);m.si[16]=(sSI)(0xFA);m.si[17]=(sSI)(0xFB);m.si[18]=(sSI)(0xFC);m.si[19]=(sSI)(0xFD);m.si[20]=(sSI)(0xFE);m.si[21]=(sSI)(0xFF);; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(MIDIPipeEvent, "MIDIPipeEvent");

#ifndef YAC_NO_HOST
sSI   YAC_CALL MIDIPipeEvent__getIndex(void *_o                              ) {return (sSI)((MIDIPipeEvent*)_o)->getIndex();}
sSI   YAC_CALL MIDIPipeEvent__getType(void *_o                               ) {return (sSI)((MIDIPipeEvent*)_o)->getType();}
void  YAC_CALL MIDIPipeEvent__getTypeName(void *_o, YAC_Value *_r            ) {((MIDIPipeEvent*)_o)->getTypeName(_r);}
sSI   YAC_CALL MIDIPipeEvent__getDevIdx(void *_o                             ) {return (sSI)((MIDIPipeEvent*)_o)->getDevIdx();}
sSI   YAC_CALL MIDIPipeEvent__getMidiCh(void *_o                             ) {return (sSI)((MIDIPipeEvent*)_o)->getMidiCh();}
sSI   YAC_CALL MIDIPipeEvent__getPrgChg(void *_o                             ) {return (sSI)((MIDIPipeEvent*)_o)->getPrgChg();}
sF32  YAC_CALL MIDIPipeEvent__getChPressure(void *_o                         ) {return (sF32)((MIDIPipeEvent*)_o)->getChPressure();}
sF32  YAC_CALL MIDIPipeEvent__getPitchbend(void *_o                          ) {return (sF32)((MIDIPipeEvent*)_o)->getPitchbend();}
sSI   YAC_CALL MIDIPipeEvent__getCcId(void *_o                               ) {return (sSI)((MIDIPipeEvent*)_o)->getCcId();}
sF32  YAC_CALL MIDIPipeEvent__getCcValue(void *_o                            ) {return (sF32)((MIDIPipeEvent*)_o)->getCcValue();}
sSI   YAC_CALL MIDIPipeEvent__getRpn(void *_o                                ) {return (sSI)((MIDIPipeEvent*)_o)->getRpn();}
sF32  YAC_CALL MIDIPipeEvent__getRpnValue(void *_o                           ) {return (sF32)((MIDIPipeEvent*)_o)->getRpnValue();}
sSI   YAC_CALL MIDIPipeEvent__getNrpn(void *_o                               ) {return (sSI)((MIDIPipeEvent*)_o)->getNrpn();}
sF32  YAC_CALL MIDIPipeEvent__getNrpnValue(void *_o                          ) {return (sF32)((MIDIPipeEvent*)_o)->getNrpnValue();}
sSI   YAC_CALL MIDIPipeEvent__getNote(void *_o                               ) {return (sSI)((MIDIPipeEvent*)_o)->getNote();}
sF32  YAC_CALL MIDIPipeEvent__getVelocity(void *_o                           ) {return (sF32)((MIDIPipeEvent*)_o)->getVelocity();}
sSI   YAC_CALL MIDIPipeEvent__getDuration(void *_o                           ) {return (sSI)((MIDIPipeEvent*)_o)->getDuration();}
sSI   YAC_CALL MIDIPipeEvent__getPolyPressureNote(void *_o                   ) {return (sSI)((MIDIPipeEvent*)_o)->getPolyPressureNote();}
sF32  YAC_CALL MIDIPipeEvent__getPolyPressureValue(void *_o                  ) {return (sF32)((MIDIPipeEvent*)_o)->getPolyPressureValue();}
sF32  YAC_CALL MIDIPipeEvent__getArg1(void *_o                               ) {return (sF32)((MIDIPipeEvent*)_o)->getArg1();}
sF32  YAC_CALL MIDIPipeEvent__getArg2(void *_o                               ) {return (sF32)((MIDIPipeEvent*)_o)->getArg2();}
sSI   YAC_CALL MIDIPipeEvent__getArg3(void *_o                               ) {return (sSI)((MIDIPipeEvent*)_o)->getArg3();}
void  YAC_CALL MIDIPipeEvent__getArg1Name(void *_o, YAC_Value *_r            ) {((MIDIPipeEvent*)_o)->getArg1Name(_r);}
void  YAC_CALL MIDIPipeEvent__getArg2Name(void *_o, YAC_Value *_r            ) {((MIDIPipeEvent*)_o)->getArg2Name(_r);}
void  YAC_CALL MIDIPipeEvent__getArg3Name(void *_o, YAC_Value *_r            ) {((MIDIPipeEvent*)_o)->getArg3Name(_r);}
sSI   YAC_CALL MIDIPipeEvent__isNote(void *_o                                ) {return (sSI)((MIDIPipeEvent*)_o)->isNote();}
sSI   YAC_CALL MIDIPipeEvent__isNoteOffPre(void *_o                          ) {return (sSI)((MIDIPipeEvent*)_o)->isNoteOffPre();}
void* YAC_CALL MIDIPipeEvent__getSysExBuffer(void *_o                        ) {return (void*)((MIDIPipeEvent*)_o)->getSysExBuffer();}
sSI   YAC_CALL MIDIPipeEvent__getSysRTByte(void *_o                          ) {return (sSI)((MIDIPipeEvent*)_o)->getSysRTByte();}
#endif // YAC_NO_HOST
