// ---- ying_midipipe_MIDIPipeNodeScriptProxy.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 11:28:29)

#ifndef YAC_NO_HOST
void  YAC_CALL MIDIPipeNodeScriptProxy__init(void *, yacmemptr     );
void  YAC_CALL MIDIPipeNodeScriptProxy__setSci(void *, yacmemptr   );
void* YAC_CALL MIDIPipeNodeScriptProxy__getSci(void *              );
void  YAC_CALL MIDIPipeNodeScriptProxy__freeSCI(void *             );
void  YAC_CALL MIDIPipeNodeScriptProxy__processFrame(void *, yacmemptr);
void  YAC_CALL MIDIPipeNodeScriptProxy__seek(void *, yacmemptr     );
void  YAC_CALL MIDIPipeNodeScriptProxy__reset(void *, yacmemptr    );
void  YAC_CALL MIDIPipeNodeScriptProxy__songSelect(void *          );
void  YAC_CALL MIDIPipeNodeScriptProxy__handleSongSpeedChanged(void *, yacmemptr);
#endif // YAC_NO_HOST

// ------------------ YAC class "MIDIPipeNodeScriptProxy" reflection map (implementation) ------------------
sUI          YAC_VCALL MIDIPipeNodeScriptProxy::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL MIDIPipeNodeScriptProxy::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL MIDIPipeNodeScriptProxy::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL MIDIPipeNodeScriptProxy::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL MIDIPipeNodeScriptProxy::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL MIDIPipeNodeScriptProxy::yacMethodGetNum                  (void) {return 10;}
const char **YAC_VCALL MIDIPipeNodeScriptProxy::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "init", "setSci", "getSci", "freeSCI", "processFrame", "seek", "reset", "songSelect", "handleSongSpeedChanged"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIPipeNodeScriptProxy::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 1, 0, 0, 4, 1, 1, 0, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL MIDIPipeNodeScriptProxy::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3,};static const sUI rt2[]={3,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={3, 3, 1, 1,};static const sUI rt6[]={1,};static const sUI rt7[]={1,};static const sUI rt8[]={0,};static const sUI rt9[]={1, 1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL MIDIPipeNodeScriptProxy::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={"MIDIPipe",};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={"MIDIPipeFrame", "MIDIPipeFrame", (const char*)0, (const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL MIDIPipeNodeScriptProxy::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 3, 0, 0, 0, 0, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL MIDIPipeNodeScriptProxy::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL MIDIPipeNodeScriptProxy::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)MIDIPipeNodeScriptProxy__init, (void*)MIDIPipeNodeScriptProxy__setSci, (void*)MIDIPipeNodeScriptProxy__getSci, (void*)MIDIPipeNodeScriptProxy__freeSCI, (void*)MIDIPipeNodeScriptProxy__processFrame, (void*)MIDIPipeNodeScriptProxy__seek, (void*)MIDIPipeNodeScriptProxy__reset, (void*)MIDIPipeNodeScriptProxy__songSelect, (void*)MIDIPipeNodeScriptProxy__handleSongSpeedChanged}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL MIDIPipeNodeScriptProxy::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL MIDIPipeNodeScriptProxy::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL MIDIPipeNodeScriptProxy::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL MIDIPipeNodeScriptProxy::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(MIDIPipeNodeScriptProxy, "MIDIPipeNodeScriptProxy");

#ifndef YAC_NO_HOST
void  YAC_CALL MIDIPipeNodeScriptProxy__init(void *_o, yacmemptr _args       ) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipe)){ ((MIDIPipeNodeScriptProxy*)_o)->init((MIDIPipe*)_args.mem[0].o);}}
void  YAC_CALL MIDIPipeNodeScriptProxy__setSci(void *_o, yacmemptr _args     ) {((MIDIPipeNodeScriptProxy*)_o)->setSci(_args.mem[0].o);}
void* YAC_CALL MIDIPipeNodeScriptProxy__getSci(void *_o                      ) {return (void*)((MIDIPipeNodeScriptProxy*)_o)->getSci();}
void  YAC_CALL MIDIPipeNodeScriptProxy__freeSCI(void *_o                     ) {((MIDIPipeNodeScriptProxy*)_o)->freeSCI();}
void  YAC_CALL MIDIPipeNodeScriptProxy__processFrame(void *_o, yacmemptr _args) {if(YAC_BCHK(_args.mem[0].o, clid_MIDIPipeFrame))if(YAC_BCHK(_args.mem[1].o, clid_MIDIPipeFrame)){ ((MIDIPipeNodeScriptProxy*)_o)->processFrame((MIDIPipeFrame*)_args.mem[0].o, (MIDIPipeFrame*)_args.mem[1].o, _args.mem[2].si, _args.mem[3].si);}}
void  YAC_CALL MIDIPipeNodeScriptProxy__seek(void *_o, yacmemptr _args       ) {((MIDIPipeNodeScriptProxy*)_o)->seek(_args.mem[0].si);}
void  YAC_CALL MIDIPipeNodeScriptProxy__reset(void *_o, yacmemptr _args      ) {((MIDIPipeNodeScriptProxy*)_o)->reset(_args.mem[0].si);}
void  YAC_CALL MIDIPipeNodeScriptProxy__songSelect(void *_o                  ) {((MIDIPipeNodeScriptProxy*)_o)->songSelect();}
void  YAC_CALL MIDIPipeNodeScriptProxy__handleSongSpeedChanged(void *_o, yacmemptr _args) {((MIDIPipeNodeScriptProxy*)_o)->handleSongSpeedChanged(_args.mem[0].si, _args.mem[1].si);}
#endif // YAC_NO_HOST
