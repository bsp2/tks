// ---- ying_core_Buffer.cpp: auto generated by YInG - the YAC interface generator (Wed, 24/Sep/2025 09:42:38)

#ifndef YAC_NO_HOST
sSI   YAC_CALL Buffer__setSize      (void *, yacmemptr             );
sSI   YAC_CALL Buffer__resize       (void *, yacmemptr             );
void  YAC_CALL Buffer__free         (void *                        );
void  YAC_CALL Buffer__pokeI8       (void *, yacmemptr             );
void  YAC_CALL Buffer__pokeI14      (void *, yacmemptr             );
void  YAC_CALL Buffer__pokeI16      (void *, yacmemptr             );
void  YAC_CALL Buffer__pokeI32      (void *, yacmemptr             );
void  YAC_CALL Buffer__pokeF32      (void *, yacmemptr             );
sSI   YAC_CALL Buffer__peekI8       (void *, yacmemptr             );
sSI   YAC_CALL Buffer__peekS8       (void *, yacmemptr             );
sSI   YAC_CALL Buffer__peekI14      (void *, yacmemptr             );
sSI   YAC_CALL Buffer__peekI16      (void *, yacmemptr             );
sSI   YAC_CALL Buffer__peekS16      (void *, yacmemptr             );
sSI   YAC_CALL Buffer__peekI32      (void *, yacmemptr             );
sSI   YAC_CALL Buffer__peekS32      (void *, yacmemptr             );
sF32  YAC_CALL Buffer__peekF32      (void *, yacmemptr             );
void  YAC_CALL Buffer__fillZero     (void *                        );
void  YAC_CALL Buffer__fillI8       (void *, yacmemptr             );
sSI   YAC_CALL Buffer__substring    (void *, yacmemptr             );
void  YAC_CALL Buffer__getString    (void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL Buffer__setString    (void *, yacmemptr             );
sSI   YAC_CALL Buffer__gzip         (void *, yacmemptr             );
sSI   YAC_CALL Buffer__gunzip       (void *, yacmemptr             );
sSI   YAC_CALL Buffer___getChecksum (void *                        );
sSI   YAC_CALL Buffer__visit        (void *, yacmemptr             );
sSI   YAC_CALL Buffer__base64Encode (void *, yacmemptr             );
sSI   YAC_CALL Buffer__base64Decode (void *, yacmemptr             );
sSI   YAC_CALL Buffer___compareBuffer(void *, yacmemptr            );
void  YAC_CALL Buffer__truncate     (void *, yacmemptr             );
sSI   YAC_CALL Buffer__readBufferBits(void *, yacmemptr            );
void  YAC_CALL Buffer__writeBufferBits(void *, yacmemptr           );
void  YAC_CALL Buffer__hexdump      (void *, yacmemptr             );
sSI   YAC_CALL Buffer__ringWriteBuffer(void *, yacmemptr           );
sSI   YAC_CALL Buffer__ringReadBuffer(void *, yacmemptr            );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Buffer" reflection map (implementation) ------------------
sUI          YAC_VCALL _Buffer::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Buffer::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Buffer::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Buffer::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Buffer::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Buffer::yacMethodGetNum                  (void) {return 35;}
const char **YAC_VCALL _Buffer::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "setSize", "resize", "free", "pokeI8", "pokeI14", "pokeI16", "pokeI32", "pokeF32", "peekI8", "peekS8", "peekI14", "peekI16", "peekS16", "peekI32", "peekS32", "peekF32", "fillZero", "fillI8", "substring", "getString", "setString", "gzip", "gunzip", "getChecksum", "visit", "base64Encode", "base64Decode", "compareBuffer", "truncate", "readBufferBits", "writeBufferBits", "hexdump", "ringWriteBuffer", "ringReadBuffer"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Buffer::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 1, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 3, 2, 2, 4, 4, 0, 3, 1, 1, 1, 1, 2, 3, 2, 6, 6}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Buffer::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={1,};static const sUI rt3[]={0,};static const sUI rt4[]={1, 1,};static const sUI rt5[]={1, 1,};static const sUI rt6[]={1, 1,};static const sUI rt7[]={1, 1,};static const sUI rt8[]={1, 2,};static const sUI rt9[]={1,};static const sUI rt10[]={1,};static const sUI rt11[]={1,};static const sUI rt12[]={1,};static const sUI rt13[]={1,};static const sUI rt14[]={1,};static const sUI rt15[]={1,};static const sUI rt16[]={1,};static const sUI rt17[]={0,};static const sUI rt18[]={1,};static const sUI rt19[]={3, 1, 1,};static const sUI rt20[]={1, 1,};static const sUI rt21[]={1, 3,};static const sUI rt22[]={3, 1, 1, 1,};static const sUI rt23[]={3, 1, 1, 1,};static const sUI rt24[]={0,};static const sUI rt25[]={3, 1, 1,};static const sUI rt26[]={3,};static const sUI rt27[]={3,};static const sUI rt28[]={3,};static const sUI rt29[]={1,};static const sUI rt30[]={1, 1,};static const sUI rt31[]={1, 1, 1,};static const sUI rt32[]={1, 1,};static const sUI rt33[]={1, 1, 1, 3, 1, 1,};static const sUI rt34[]={1, 1, 1, 3, 1, 1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Buffer::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0, (const char*)0,};static const char *rs5[]={(const char*)0, (const char*)0,};static const char *rs6[]={(const char*)0, (const char*)0,};static const char *rs7[]={(const char*)0, (const char*)0,};static const char *rs8[]={(const char*)0, (const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={"String", (const char*)0, (const char*)0,};static const char *rs20[]={(const char*)0, (const char*)0,};static const char *rs21[]={(const char*)0, "String",};static const char *rs22[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs23[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={"Buffer", (const char*)0, (const char*)0,};static const char *rs26[]={"String",};static const char *rs27[]={"String",};static const char *rs28[]={"Buffer",};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0, (const char*)0,};static const char *rs31[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs32[]={(const char*)0, (const char*)0,};static const char *rs33[]={(const char*)0, (const char*)0, (const char*)0, "Buffer", (const char*)0, (const char*)0,};static const char *rs34[]={(const char*)0, (const char*)0, (const char*)0, "Buffer", (const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Buffer::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Buffer::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Buffer::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Buffer__setSize, (void*)Buffer__resize, (void*)Buffer__free, (void*)Buffer__pokeI8, (void*)Buffer__pokeI14, (void*)Buffer__pokeI16, (void*)Buffer__pokeI32, (void*)Buffer__pokeF32, (void*)Buffer__peekI8, (void*)Buffer__peekS8, (void*)Buffer__peekI14, (void*)Buffer__peekI16, (void*)Buffer__peekS16, (void*)Buffer__peekI32, (void*)Buffer__peekS32, (void*)Buffer__peekF32, (void*)Buffer__fillZero, (void*)Buffer__fillI8, (void*)Buffer__substring, (void*)Buffer__getString, (void*)Buffer__setString, (void*)Buffer__gzip, (void*)Buffer__gunzip, (void*)Buffer___getChecksum, (void*)Buffer__visit, (void*)Buffer__base64Encode, (void*)Buffer__base64Decode, (void*)Buffer___compareBuffer, (void*)Buffer__truncate, (void*)Buffer__readBufferBits, (void*)Buffer__writeBufferBits, (void*)Buffer__hexdump, (void*)Buffer__ringWriteBuffer, (void*)Buffer__ringReadBuffer}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Buffer::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Buffer::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Buffer::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Buffer::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL Buffer__setSize      (void *_o, yacmemptr _args               ) {return (sSI)((_Buffer*)_o)->setSize(_args.mem[0].si);}
sSI   YAC_CALL Buffer__resize       (void *_o, yacmemptr _args               ) {return (sSI)((_Buffer*)_o)->resize(_args.mem[0].si);}
void  YAC_CALL Buffer__free         (void *_o                                ) {((_Buffer*)_o)->free();}
void  YAC_CALL Buffer__pokeI8       (void *_o, yacmemptr _args               ) {((_Buffer*)_o)->pokeI8(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL Buffer__pokeI14      (void *_o, yacmemptr _args               ) {((_Buffer*)_o)->pokeI14(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL Buffer__pokeI16      (void *_o, yacmemptr _args               ) {((_Buffer*)_o)->pokeI16(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL Buffer__pokeI32      (void *_o, yacmemptr _args               ) {((_Buffer*)_o)->pokeI32(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL Buffer__pokeF32      (void *_o, yacmemptr _args               ) {((_Buffer*)_o)->pokeF32(_args.mem[0].si, _args.mem[1].f32);}
sSI   YAC_CALL Buffer__peekI8       (void *_o, yacmemptr _args               ) {return (sSI)((_Buffer*)_o)->peekI8(_args.mem[0].si);}
sSI   YAC_CALL Buffer__peekS8       (void *_o, yacmemptr _args               ) {return (sSI)((_Buffer*)_o)->peekS8(_args.mem[0].si);}
sSI   YAC_CALL Buffer__peekI14      (void *_o, yacmemptr _args               ) {return (sSI)((_Buffer*)_o)->peekI14(_args.mem[0].si);}
sSI   YAC_CALL Buffer__peekI16      (void *_o, yacmemptr _args               ) {return (sSI)((_Buffer*)_o)->peekI16(_args.mem[0].si);}
sSI   YAC_CALL Buffer__peekS16      (void *_o, yacmemptr _args               ) {return (sSI)((_Buffer*)_o)->peekS16(_args.mem[0].si);}
sSI   YAC_CALL Buffer__peekI32      (void *_o, yacmemptr _args               ) {return (sSI)((_Buffer*)_o)->peekI32(_args.mem[0].si);}
sSI   YAC_CALL Buffer__peekS32      (void *_o, yacmemptr _args               ) {return (sSI)((_Buffer*)_o)->peekS32(_args.mem[0].si);}
sF32  YAC_CALL Buffer__peekF32      (void *_o, yacmemptr _args               ) {return (sF32)((_Buffer*)_o)->peekF32(_args.mem[0].si);}
void  YAC_CALL Buffer__fillZero     (void *_o                                ) {((_Buffer*)_o)->fillZero();}
void  YAC_CALL Buffer__fillI8       (void *_o, yacmemptr _args               ) {((_Buffer*)_o)->fillI8(_args.mem[0].si);}
sSI   YAC_CALL Buffer__substring    (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_Buffer*)_o)->substring((YAC_String*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}return 0;}
void  YAC_CALL Buffer__getString    (void *_o, yacmemptr _args, YAC_Value *_r) {((_Buffer*)_o)->getString(_args.mem[0].si, _args.mem[1].si, _r);}
sSI   YAC_CALL Buffer__setString    (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[1].o, YAC_CLID_STRING)){ return (sSI)((_Buffer*)_o)->setString(_args.mem[0].si, (YAC_String*)_args.mem[1].o);}return 0;}
sSI   YAC_CALL Buffer__gzip         (void *_o, yacmemptr _args               ) {return (sSI)((_Buffer*)_o)->gzip(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
sSI   YAC_CALL Buffer__gunzip       (void *_o, yacmemptr _args               ) {return (sSI)((_Buffer*)_o)->gunzip(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
sSI   YAC_CALL Buffer___getChecksum (void *_o                                ) {return (sSI)((_Buffer*)_o)->_getChecksum();}
sSI   YAC_CALL Buffer__visit        (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_BUFFER)){ return (sSI)((_Buffer*)_o)->visit((YAC_Buffer*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}return 0;}
sSI   YAC_CALL Buffer__base64Encode (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_Buffer*)_o)->base64Encode((YAC_String*)_args.mem[0].o);}return 0;}
sSI   YAC_CALL Buffer__base64Decode (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_Buffer*)_o)->base64Decode((YAC_String*)_args.mem[0].o);}return 0;}
sSI   YAC_CALL Buffer___compareBuffer(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_BUFFER)){ return (sSI)((_Buffer*)_o)->_compareBuffer((YAC_Buffer*)_args.mem[0].o);}return 0;}
void  YAC_CALL Buffer__truncate     (void *_o, yacmemptr _args               ) {((_Buffer*)_o)->truncate(_args.mem[0].si);}
sSI   YAC_CALL Buffer__readBufferBits(void *_o, yacmemptr _args              ) {return (sSI)((_Buffer*)_o)->readBufferBits(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL Buffer__writeBufferBits(void *_o, yacmemptr _args             ) {((_Buffer*)_o)->writeBufferBits(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL Buffer__hexdump      (void *_o, yacmemptr _args               ) {((_Buffer*)_o)->hexdump(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL Buffer__ringWriteBuffer(void *_o, yacmemptr _args             ) {if(YAC_BCHK(_args.mem[3].o, YAC_CLID_BUFFER)){ return (sSI)((_Buffer*)_o)->ringWriteBuffer(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, (YAC_Buffer*)_args.mem[3].o, _args.mem[4].si, _args.mem[5].si);}return 0;}
sSI   YAC_CALL Buffer__ringReadBuffer(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[3].o, YAC_CLID_BUFFER)){ return (sSI)((_Buffer*)_o)->ringReadBuffer(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, (YAC_Buffer*)_args.mem[3].o, _args.mem[4].si, _args.mem[5].si);}return 0;}
#endif // YAC_NO_HOST
