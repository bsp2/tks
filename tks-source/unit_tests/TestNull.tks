
module MTestNull;

class TestNull : TestCase {

   String s;

   pre() {
      s = "1";
   }

   static GetString() : String {
      return 0; // typecasted to String \"0\" during return
   }

   static GetString_int():int {
      return "0"; // typecasted to (int) 0 during return
   }

   static GetDouble():Double {
      Double d;
      return d;
   }

   testJIT() {
      String t <= null;

      compile assertq(true, !t);

      compile assertq(false, t);

      compile assertq(true, t==null);
   }

   test1() {
      assertq(false, null);
   }

   test2() {
      assert(true, s, "variable expr is never optimized to constant value");
   }

   test3() {
      assert(false, !s, "variable expr is never optimized to constant value");
   }

   test4() {
      assert(true, s!=null, "compare with <null> Object constant (class ID = YAC_Object)");
   }

   test5() {
      assert(true, "0"==0, "compare with 0 integer constant, string is converted to integer");
   }

   test6() {
      assert(false, "0", "constant value is typecasted to int during optimization");
   }

   test7() {
      assert(false, "0"==null, "compare String constant with constant null Object");
   }

   test8() {
      assertq(true, "0"!=null);
   }

   test9() {
      assertq(true, null==null);
   }

   test10() {
      assertq(false, null!=null);
   }

   test11() {
      assertq(true, GetString()!=null);
   }

   test12() {
      assert(false, GetString_int(), "string \"0\" is casted to integer in return statement");
   }

   test13() {
      assertq(false, GetDouble()!=0);
   }

   test14() {
      assert(false, new Double, "new Double object casted to boolean");
   }

   test15() {
      assertq(false, new Double != 0);
   }

   test16() {
      assert(false, Double, "constant value is typecasted to int (default value==0) during optimization");
   }

}
