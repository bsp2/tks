
module Main;

#define MAX_PARAM 8

String buf, sigBuf, argBuf, bitMask;
int numArgs, argi;
int ycallstyle = 12;

function GenSwitchCases() {
   // gen call wrappers for mixed 32/64bit argument list, 1..MAX_PARAM parameters
   // included in PTN_FunctionECallY.cpp
   for(numArgs=1; numArgs<= MAX_PARAM; numArgs++)
   {

      int numCombinations = (1<<numArgs);
      int combi = 0;
      loop(numCombinations)
      {
         //trace "[...] processing combination "+combi+"/"+numCombinations+" buf.length = "+ buf.length;

         argi = 0;
         sigBuf.empty();
         argBuf.empty();
         bitMask.empty();
         loop(numArgs)
         {
            int objArgFlag = (1<<argi);
            ////trace "combi = "+combi +" flag = "+objArgFlag;
            if(argi>0)
            {
               sigBuf.append(", ");
               argBuf.append(", ");
            }
            if(combi & objArgFlag)
            {
               // 64bit argument
               sigBuf.append("void*");
               argBuf.append("call_values["+argi+"].any");
               bitMask.append("*");
            }
            else
            {
               // 32bit argument
               sigBuf.append("sUI");
               argBuf.append("call_values["+argi+"].ui");
               bitMask.append(".");
            }
            argi++;
         }
         bitMask.append(" (");
         bitMask.append(tcstring(combi));
         bitMask.append(")");

         // void return
         buf.append("   case "+ycallstyle+": // ---- void, "+numArgs+" args ");
         buf.append(bitMask);
         buf.append("\n");
         buf.append("                                 ((void(YAC_CALL*)(");
         buf.append(sigBuf);
         buf.append("))command->y_adr)(");
         buf.append(argBuf);
         buf.append("); break;\n");
         ycallstyle++;

         // int return
         buf.append("   case "+ycallstyle+": // ---- int, "+numArgs+" args ");
         buf.append(bitMask);
         buf.append("\n");
         buf.append("    _env->cret.value.int_val                  =   ((sSI(YAC_CALL*)(");
         buf.append(sigBuf);
         buf.append("))command->y_adr)(");
         buf.append(argBuf);
         buf.append("); _env->cret.type=1; break;\n");
         ycallstyle++;

         // float return
         buf.append("   case "+ycallstyle+": // ---- float, "+numArgs+" args ");
         buf.append(bitMask);
         buf.append("\n");
         buf.append("    _env->cret.value.float_val                 = ((sF32(YAC_CALL*)(");
         buf.append(sigBuf);
         buf.append("))command->y_adr)(");
         buf.append(argBuf);
         buf.append("); _env->cret.type=2; break;\n");
         ycallstyle++;

         // object/string return
         buf.append("   case "+ycallstyle+": // ---- Object, "+numArgs+" args ");
         buf.append(bitMask);
         buf.append("\n");
         buf.append("    _env->cret.value.object_val = (YAC_Object*) ((void*(YAC_CALL*)(");
         buf.append(sigBuf);
         buf.append("))command->y_adr)(");
         buf.append(argBuf);
         buf.append("); _env->cret.type=3; _env->cret.deleteme=0; _env->cret.fixStringType(); break;\n");
         ycallstyle++;

         combi++;
      } // loop combinations

   } // for numargs
}


//  int numCombinations = (1<<MAX_PARAM);
//  int combi = 0;
//  loop(numCombinations)
//  {
//     //trace "[...] processing combination "+combi+"/"+numCombinations+" buf.length = "+ buf.length;
//     GenSwitchCases(combi);
//     combi++;
//  }

GenSwitchCases();

buf.saveLocal("autogen_PTN_FunctionECallY_switch.cpp");
