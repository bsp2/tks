// ---- ying_core_TreeNode.cpp: auto generated by YInG - the YAC interface generator (Wed, 24/Sep/2025 09:42:38)

#ifndef YAC_NO_HOST
void* YAC_CALL TreeNode___insertLeft(void *, yacmemptr             );
void* YAC_CALL TreeNode___insertRight(void *, yacmemptr            );
void* YAC_CALL TreeNode___findByName(void *, yacmemptr             );
void* YAC_CALL TreeNode___findById  (void *, yacmemptr             );
void  YAC_CALL TreeNode___free      (void *                        );
void* YAC_CALL TreeNode__getLeft    (void *                        );
void* YAC_CALL TreeNode__getName    (void *                        );
void* YAC_CALL TreeNode__getParent  (void *                        );
void* YAC_CALL TreeNode__getRight   (void *                        );
void* YAC_CALL TreeNode__getRoot    (void *                        );
void* YAC_CALL TreeNode___seekByPathName(void *, yacmemptr         );
void  YAC_CALL TreeNode___setName   (void *, yacmemptr             );
void  YAC_CALL TreeNode___setLeft   (void *, yacmemptr             );
void  YAC_CALL TreeNode___setRight  (void *, yacmemptr             );
void  YAC_CALL TreeNode___writeToHashTable(void *, yacmemptr       );
sSI   YAC_CALL TreeNode__getNumNodes(void *                        );
void* YAC_CALL TreeNode__getId      (void *                        );
void  YAC_CALL TreeNode___setId     (void *, yacmemptr             );
#endif // YAC_NO_HOST

// ------------------ YAC class "_TreeNode" reflection map (implementation) ------------------
sUI          YAC_VCALL _TreeNode::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _TreeNode::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _TreeNode::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _TreeNode::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _TreeNode::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _TreeNode::yacMethodGetNum                  (void) {return 19;}
const char **YAC_VCALL _TreeNode::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "insertLeft", "insertRight", "findByName", "findById", "free", "getLeft", "getName", "getParent", "getRight", "getRoot", "seekByPathName", "setName", "setLeft", "setRight", "writeToHashTable", "getNumNodes", "getId", "setId"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _TreeNode::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _TreeNode::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3,};static const sUI rt2[]={3,};static const sUI rt3[]={3, 1,};static const sUI rt4[]={3, 1,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={0,};static const sUI rt11[]={3,};static const sUI rt12[]={3,};static const sUI rt13[]={3,};static const sUI rt14[]={3,};static const sUI rt15[]={3,};static const sUI rt16[]={0,};static const sUI rt17[]={0,};static const sUI rt18[]={3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _TreeNode::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={"String", (const char*)0,};static const char *rs4[]={"String", (const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={"String",};static const char *rs12[]={"String",};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={"String",};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _TreeNode::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 3, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _TreeNode::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, "String", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, "String", (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _TreeNode::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)TreeNode___insertLeft, (void*)TreeNode___insertRight, (void*)TreeNode___findByName, (void*)TreeNode___findById, (void*)TreeNode___free, (void*)TreeNode__getLeft, (void*)TreeNode__getName, (void*)TreeNode__getParent, (void*)TreeNode__getRight, (void*)TreeNode__getRoot, (void*)TreeNode___seekByPathName, (void*)TreeNode___setName, (void*)TreeNode___setLeft, (void*)TreeNode___setRight, (void*)TreeNode___writeToHashTable, (void*)TreeNode__getNumNodes, (void*)TreeNode__getId, (void*)TreeNode___setId}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _TreeNode::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _TreeNode::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _TreeNode::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _TreeNode::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
void* YAC_CALL TreeNode___insertLeft(void *_o, yacmemptr _args               ) {return (void*)((_TreeNode*)_o)->_insertLeft(_args.mem[0].o);}
void* YAC_CALL TreeNode___insertRight(void *_o, yacmemptr _args              ) {return (void*)((_TreeNode*)_o)->_insertRight(_args.mem[0].o);}
void* YAC_CALL TreeNode___findByName(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (void*)((_TreeNode*)_o)->_findByName((YAC_String*)_args.mem[0].o, _args.mem[1].si);}return (void*)0;}
void* YAC_CALL TreeNode___findById  (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (void*)((_TreeNode*)_o)->_findById((YAC_String*)_args.mem[0].o, _args.mem[1].si);}return (void*)0;}
void  YAC_CALL TreeNode___free      (void *_o                                ) {((_TreeNode*)_o)->_free();}
void* YAC_CALL TreeNode__getLeft    (void *_o                                ) {return (void*)((_TreeNode*)_o)->getLeft();}
void* YAC_CALL TreeNode__getName    (void *_o                                ) {return (void*)((_TreeNode*)_o)->getName();}
void* YAC_CALL TreeNode__getParent  (void *_o                                ) {return (void*)((_TreeNode*)_o)->getParent();}
void* YAC_CALL TreeNode__getRight   (void *_o                                ) {return (void*)((_TreeNode*)_o)->getRight();}
void* YAC_CALL TreeNode__getRoot    (void *_o                                ) {return (void*)((_TreeNode*)_o)->getRoot();}
void* YAC_CALL TreeNode___seekByPathName(void *_o, yacmemptr _args           ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (void*)((_TreeNode*)_o)->_seekByPathName((YAC_String*)_args.mem[0].o);}return (void*)0;}
void  YAC_CALL TreeNode___setName   (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_TreeNode*)_o)->_setName((YAC_String*)_args.mem[0].o);}}
void  YAC_CALL TreeNode___setLeft   (void *_o, yacmemptr _args               ) {((_TreeNode*)_o)->_setLeft(_args.mem[0].o);}
void  YAC_CALL TreeNode___setRight  (void *_o, yacmemptr _args               ) {((_TreeNode*)_o)->_setRight(_args.mem[0].o);}
void  YAC_CALL TreeNode___writeToHashTable(void *_o, yacmemptr _args         ) {((_TreeNode*)_o)->_writeToHashTable(_args.mem[0].o);}
sSI   YAC_CALL TreeNode__getNumNodes(void *_o                                ) {return (sSI)((_TreeNode*)_o)->getNumNodes();}
void* YAC_CALL TreeNode__getId      (void *_o                                ) {return (void*)((_TreeNode*)_o)->getId();}
void  YAC_CALL TreeNode___setId     (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_TreeNode*)_o)->_setId((YAC_String*)_args.mem[0].o);}}
#endif // YAC_NO_HOST
