// ---- ying_core_HashTable.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
sSI   YAC_CALL HashTable___addInt   (void *, yacmemptr             );
sSI   YAC_CALL HashTable___addFloat (void *, yacmemptr             );
sSI   YAC_CALL HashTable___addString(void *, yacmemptr             );
sSI   YAC_CALL HashTable___addObject(void *, yacmemptr             );
sSI   YAC_CALL HashTable___addObjectRef(void *, yacmemptr          );
void  YAC_CALL HashTable___get      (void *, yacmemptr, YAC_Value *);
void  YAC_CALL HashTable___getDeref (void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL HashTable___exists   (void *, yacmemptr             );
void  YAC_CALL HashTable___delete   (void *, yacmemptr             );
void  YAC_CALL HashTable___free     (void *                        );
sSI   YAC_CALL HashTable___alloc    (void *, yacmemptr             );
sSI   YAC_CALL HashTable___realloc  (void *, yacmemptr             );
sSI   YAC_CALL HashTable___getNumElements(void *                   );
sSI   YAC_CALL HashTable___getMaxElements(void *                   );
void  YAC_CALL HashTable___getString(void *, YAC_Value *           );
void  YAC_CALL HashTable___getReparsableString(void *, YAC_Value * );
void  YAC_CALL HashTable___set      (void *, yacmemptr             );
void  YAC_CALL HashTable___setInt   (void *, yacmemptr             );
void  YAC_CALL HashTable___setFloat (void *, yacmemptr             );
void  YAC_CALL HashTable___setObject(void *, yacmemptr             );
void  YAC_CALL HashTable___setCopy  (void *, yacmemptr             );
void  YAC_CALL HashTable___setString(void *, yacmemptr             );
sSI   YAC_CALL HashTable___keysToArray(void *, yacmemptr           );
sSI   YAC_CALL HashTable___valuesToArray(void *, yacmemptr         );
sSI   YAC_CALL HashTable___replaceKey(void *, yacmemptr            );
#endif // YAC_NO_HOST

// ------------------ YAC class "_HashTable" reflection map (implementation) ------------------
sUI          YAC_VCALL _HashTable::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _HashTable::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _HashTable::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _HashTable::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _HashTable::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _HashTable::yacMethodGetNum                  (void) {return 26;}
const char **YAC_VCALL _HashTable::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "addInt", "addFloat", "addString", "addObject", "addObjectRef", "get", "getDeref", "exists", "delete", "free", "alloc", "realloc", "getNumElements", "getMaxElements", "getString", "getReparsableString", "set", "setInt", "setFloat", "setObject", "setCopy", "setString", "keysToArray", "valuesToArray", "replaceKey"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _HashTable::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 1, 1, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _HashTable::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3, 1,};static const sUI rt2[]={3, 2,};static const sUI rt3[]={3, 3,};static const sUI rt4[]={3, 3,};static const sUI rt5[]={3, 3,};static const sUI rt6[]={3,};static const sUI rt7[]={3,};static const sUI rt8[]={3,};static const sUI rt9[]={3,};static const sUI rt10[]={0,};static const sUI rt11[]={1,};static const sUI rt12[]={1,};static const sUI rt13[]={0,};static const sUI rt14[]={0,};static const sUI rt15[]={0,};static const sUI rt16[]={0,};static const sUI rt17[]={3, 3,};static const sUI rt18[]={3, 1,};static const sUI rt19[]={3, 2,};static const sUI rt20[]={3, 3,};static const sUI rt21[]={3, 3,};static const sUI rt22[]={3, 3,};static const sUI rt23[]={3,};static const sUI rt24[]={3,};static const sUI rt25[]={3, 3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _HashTable::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={"String", (const char*)0,};static const char *rs2[]={"String", (const char*)0,};static const char *rs3[]={"String", "String",};static const char *rs4[]={"String", (const char*)0,};static const char *rs5[]={"String", (const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={"String",};static const char *rs9[]={"String",};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0, (const char*)0,};static const char *rs18[]={(const char*)0, (const char*)0,};static const char *rs19[]={(const char*)0, (const char*)0,};static const char *rs20[]={(const char*)0, (const char*)0,};static const char *rs21[]={(const char*)0, (const char*)0,};static const char *rs22[]={(const char*)0, (const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _HashTable::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 1, 1, 1, 1, 4, 4, 1, 0, 0, 1, 1, 1, 1, 4, 4, 0, 0, 0, 0, 0, 0, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _HashTable::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _HashTable::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)HashTable___addInt, (void*)HashTable___addFloat, (void*)HashTable___addString, (void*)HashTable___addObject, (void*)HashTable___addObjectRef, (void*)HashTable___get, (void*)HashTable___getDeref, (void*)HashTable___exists, (void*)HashTable___delete, (void*)HashTable___free, (void*)HashTable___alloc, (void*)HashTable___realloc, (void*)HashTable___getNumElements, (void*)HashTable___getMaxElements, (void*)HashTable___getString, (void*)HashTable___getReparsableString, (void*)HashTable___set, (void*)HashTable___setInt, (void*)HashTable___setFloat, (void*)HashTable___setObject, (void*)HashTable___setCopy, (void*)HashTable___setString, (void*)HashTable___keysToArray, (void*)HashTable___valuesToArray, (void*)HashTable___replaceKey}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _HashTable::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _HashTable::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _HashTable::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _HashTable::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL HashTable___addInt   (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_HashTable*)_o)->_addInt((YAC_String*)_args.mem[0].o, _args.mem[1].si);}return 0;}
sSI   YAC_CALL HashTable___addFloat (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_HashTable*)_o)->_addFloat((YAC_String*)_args.mem[0].o, _args.mem[1].f32);}return 0;}
sSI   YAC_CALL HashTable___addString(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING))if(YAC_BCHK(_args.mem[1].o, YAC_CLID_STRING)){ return (sSI)((_HashTable*)_o)->_addString((YAC_String*)_args.mem[0].o, (YAC_String*)_args.mem[1].o);}return 0;}
sSI   YAC_CALL HashTable___addObject(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_HashTable*)_o)->_addObject((YAC_String*)_args.mem[0].o, _args.mem[1].o);}return 0;}
sSI   YAC_CALL HashTable___addObjectRef(void *_o, yacmemptr _args            ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_HashTable*)_o)->_addObjectRef((YAC_String*)_args.mem[0].o, _args.mem[1].o);}return 0;}
void  YAC_CALL HashTable___get      (void *_o, yacmemptr _args, YAC_Value *_r) {((_HashTable*)_o)->_get(_args.mem[0].o, _r);}
void  YAC_CALL HashTable___getDeref (void *_o, yacmemptr _args, YAC_Value *_r) {((_HashTable*)_o)->_getDeref(_args.mem[0].o, _r);}
sSI   YAC_CALL HashTable___exists   (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_HashTable*)_o)->_exists((YAC_String*)_args.mem[0].o);}return 0;}
void  YAC_CALL HashTable___delete   (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_HashTable*)_o)->_delete((YAC_String*)_args.mem[0].o);}}
void  YAC_CALL HashTable___free     (void *_o                                ) {((_HashTable*)_o)->_free();}
sSI   YAC_CALL HashTable___alloc    (void *_o, yacmemptr _args               ) {return (sSI)((_HashTable*)_o)->_alloc(_args.mem[0].si);}
sSI   YAC_CALL HashTable___realloc  (void *_o, yacmemptr _args               ) {return (sSI)((_HashTable*)_o)->_realloc(_args.mem[0].si);}
sSI   YAC_CALL HashTable___getNumElements(void *_o                           ) {return (sSI)((_HashTable*)_o)->_getNumElements();}
sSI   YAC_CALL HashTable___getMaxElements(void *_o                           ) {return (sSI)((_HashTable*)_o)->_getMaxElements();}
void  YAC_CALL HashTable___getString(void *_o, YAC_Value *_r                 ) {((_HashTable*)_o)->_getString(_r);}
void  YAC_CALL HashTable___getReparsableString(void *_o, YAC_Value *_r       ) {((_HashTable*)_o)->_getReparsableString(_r);}
void  YAC_CALL HashTable___set      (void *_o, yacmemptr _args               ) {((_HashTable*)_o)->_set(_args.mem[0].o, _args.mem[1].o);}
void  YAC_CALL HashTable___setInt   (void *_o, yacmemptr _args               ) {((_HashTable*)_o)->_setInt(_args.mem[0].o, _args.mem[1].si);}
void  YAC_CALL HashTable___setFloat (void *_o, yacmemptr _args               ) {((_HashTable*)_o)->_setFloat(_args.mem[0].o, _args.mem[1].f32);}
void  YAC_CALL HashTable___setObject(void *_o, yacmemptr _args               ) {((_HashTable*)_o)->_setObject(_args.mem[0].o, _args.mem[1].o);}
void  YAC_CALL HashTable___setCopy  (void *_o, yacmemptr _args               ) {((_HashTable*)_o)->_setCopy(_args.mem[0].o, _args.mem[1].o);}
void  YAC_CALL HashTable___setString(void *_o, yacmemptr _args               ) {((_HashTable*)_o)->_setString(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL HashTable___keysToArray(void *_o, yacmemptr _args             ) {return (sSI)((_HashTable*)_o)->_keysToArray(_args.mem[0].o);}
sSI   YAC_CALL HashTable___valuesToArray(void *_o, yacmemptr _args           ) {return (sSI)((_HashTable*)_o)->_valuesToArray(_args.mem[0].o);}
sSI   YAC_CALL HashTable___replaceKey(void *_o, yacmemptr _args              ) {return (sSI)((_HashTable*)_o)->_replaceKey(_args.mem[0].o, _args.mem[1].o);}
#endif // YAC_NO_HOST
