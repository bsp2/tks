// ---- ying_core_FloatArray.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
sSI   YAC_CALL FloatArray__alloc    (void *, yacmemptr             );
void  YAC_CALL FloatArray__free     (void *                        );
sSI   YAC_CALL FloatArray__add      (void *, yacmemptr             );
sSI   YAC_CALL FloatArray__add2     (void *, yacmemptr             );
sSI   YAC_CALL FloatArray__add3     (void *, yacmemptr             );
sSI   YAC_CALL FloatArray__add4     (void *, yacmemptr             );
sSI   YAC_CALL FloatArray__addFromARGB32(void *, yacmemptr         );
sSI   YAC_CALL FloatArray__addArray (void *, yacmemptr             );
sSI   YAC_CALL FloatArray__addEmpty (void *, yacmemptr             );
sSI   YAC_CALL FloatArray__getNumElements(void *                   );
sSI   YAC_CALL FloatArray__getMaxElements(void *                   );
void  YAC_CALL FloatArray__empty    (void *                        );
sSI   YAC_CALL FloatArray__isEmpty  (void *                        );
sSI   YAC_CALL FloatArray__realloc  (void *, yacmemptr             );
sSI   YAC_CALL FloatArray__insert   (void *, yacmemptr             );
sSI   YAC_CALL FloatArray___delete  (void *, yacmemptr             );
sSI   YAC_CALL FloatArray___delete2 (void *, yacmemptr             );
sSI   YAC_CALL FloatArray___delete3 (void *, yacmemptr             );
sSI   YAC_CALL FloatArray___delete4 (void *, yacmemptr             );
void  YAC_CALL FloatArray__fill     (void *, yacmemptr             );
sSI   YAC_CALL FloatArray__allocAndFill(void *, yacmemptr          );
void  YAC_CALL FloatArray__fillRegion(void *, yacmemptr            );
void  YAC_CALL FloatArray__fillFromARGB32(void *, yacmemptr        );
void  YAC_CALL FloatArray__reverse  (void *                        );
void  YAC_CALL FloatArray__scale    (void *, yacmemptr             );
void  YAC_CALL FloatArray__setNumElements(void *, yacmemptr        );
void  YAC_CALL FloatArray__blend    (void *, yacmemptr             );
void  YAC_CALL FloatArray__blendAB  (void *, yacmemptr             );
void  YAC_CALL FloatArray__copyFrom (void *, yacmemptr             );
sSI   YAC_CALL FloatArray___read32  (void *, yacmemptr             );
sSI   YAC_CALL FloatArray___read64  (void *, yacmemptr             );
sSI   YAC_CALL FloatArray___write32 (void *, yacmemptr             );
sSI   YAC_CALL FloatArray___write64 (void *, yacmemptr             );
void  YAC_CALL FloatArray___getString(void *, YAC_Value *          );
void  YAC_CALL FloatArray___getString2(void *, YAC_Value *         );
void  YAC_CALL FloatArray___getString3(void *, YAC_Value *         );
sF32  YAC_CALL FloatArray__getMin   (void *                        );
sSI   YAC_CALL FloatArray__getMinIdx(void *                        );
sF32  YAC_CALL FloatArray__getMax   (void *                        );
sSI   YAC_CALL FloatArray__getMaxIdx(void *                        );
sF32  YAC_CALL FloatArray__getAbsMin(void *                        );
sF32  YAC_CALL FloatArray__getAbsMax(void *                        );
sF32  YAC_CALL FloatArray__getMean  (void *                        );
sF32  YAC_CALL FloatArray__getAbsMean(void *                       );
sF32  YAC_CALL FloatArray__getRms   (void *                        );
sF32  YAC_CALL FloatArray__getRmsMax(void *                        );
sF32  YAC_CALL FloatArray__get      (void *, yacmemptr             );
void  YAC_CALL FloatArray___set     (void *, yacmemptr             );
sF32  YAC_CALL FloatArray___getRev  (void *, yacmemptr             );
void  YAC_CALL FloatArray___setRev  (void *, yacmemptr             );
sF32  YAC_CALL FloatArray___getDefault(void *, yacmemptr           );
sSI   YAC_CALL FloatArray__contains (void *, yacmemptr             );
sSI   YAC_CALL FloatArray__indexOf  (void *, yacmemptr             );
sSI   YAC_CALL FloatArray__indexOfNot(void *, yacmemptr            );
void  YAC_CALL FloatArray__fixNaNToZero(void *                     );
void  YAC_CALL FloatArray__sortByValue(void *, yacmemptr           );
sF32  YAC_CALL FloatArray__winLinear(void *, yacmemptr             );
sF32  YAC_CALL FloatArray__winCosine(void *, yacmemptr             );
sF32  YAC_CALL FloatArray__winQuadratic(void *, yacmemptr          );
sF32  YAC_CALL FloatArray__winCubic (void *, yacmemptr             );
sF32  YAC_CALL FloatArray__winQuintic(void *, yacmemptr            );
sSI   YAC_CALL FloatArray__rearrange(void *, yacmemptr             );
sSI   YAC_CALL FloatArray___swap    (void *, yacmemptr             );
void  YAC_CALL FloatArray___visit   (void *, yacmemptr             );
void  YAC_CALL FloatArray___unlinkFrom(void *, yacmemptr           );
void  YAC_CALL FloatArray___useAll  (void *                        );
sF32  YAC_CALL FloatArray___getFirst(void *                        );
sF32  YAC_CALL FloatArray___getLast (void *                        );
void  YAC_CALL FloatArray___interleave(void *, yacmemptr           );
void  YAC_CALL FloatArray___bezierCubicDeCasteljau2d(void *, yacmemptr);
sSI   YAC_CALL FloatArray__findNearestIdx1d(void *, yacmemptr      );
sSI   YAC_CALL FloatArray__findNearestIdx2d(void *, yacmemptr      );
sF32  YAC_CALL FloatArray__sum      (void *, yacmemptr             );
sF32  YAC_CALL FloatArray__sumPathLen1d(void *, yacmemptr          );
sF32  YAC_CALL FloatArray__sumPathLen2d(void *, yacmemptr          );
sSI   YAC_CALL FloatArray__loadFromStreamUnsigned8(void *, yacmemptr);
sSI   YAC_CALL FloatArray__loadFromStreamSigned16(void *, yacmemptr);
sSI   YAC_CALL FloatArray__loadFromStreamSigned24(void *, yacmemptr);
sSI   YAC_CALL FloatArray__loadFromStreamFloat32(void *, yacmemptr );
sSI   YAC_CALL FloatArray__saveToStreamSigned16(void *, yacmemptr  );
sSI   YAC_CALL FloatArray__saveToStreamSigned12FrameEnc(void *, yacmemptr);
sSI   YAC_CALL FloatArray___isEqual (void *, yacmemptr             );
sSI   YAC_CALL FloatArray___join    (void *, yacmemptr             );
sF32  YAC_CALL FloatArray__getAbsMaxDiff(void *, yacmemptr         );
sSI   YAC_CALL FloatArray__findIdxBefore(void *, yacmemptr         );
void  YAC_CALL FloatArray__biquad   (void *, yacmemptr             );
void  YAC_CALL FloatArray__mergeArraySkipVal(void *, yacmemptr     );
#endif // YAC_NO_HOST

// ------------------ YAC class "_FloatArray" reflection map (implementation) ------------------
sUI          YAC_VCALL _FloatArray::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _FloatArray::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _FloatArray::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _FloatArray::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _FloatArray::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _FloatArray::yacMethodGetNum                  (void) {return 88;}
const char **YAC_VCALL _FloatArray::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "alloc", "free", "add", "add2", "add3", "add4", "addFromARGB32", "addArray", "addEmpty", "getNumElements", "getMaxElements", "empty", "isEmpty", "realloc", "insert", "delete", "delete2", "delete3", "delete4", "fill", "allocAndFill", "fillRegion", "fillFromARGB32", "reverse", "scale", "setNumElements", "blend", "blendAB", "copyFrom", "read32", "read64", "write32", "write64", "getString", "getString2", "getString3", "getMin", "getMinIdx", "getMax", "getMaxIdx", "getAbsMin", "getAbsMax", "getMean", "getAbsMean", "getRms", "getRmsMax", "get", "set", "getRev", "setRev", "getDefault", "contains", "indexOf", "indexOfNot", "fixNaNToZero", "sortByValue", "winLinear", "winCosine", "winQuadratic", "winCubic", "winQuintic", "rearrange", "swap", "visit", "unlinkFrom", "useAll", "getFirst", "getLast", "interleave", "bezierCubicDeCasteljau2d", "findNearestIdx1d", "findNearestIdx2d", "sum", "sumPathLen1d", "sumPathLen2d", "loadFromStreamUnsigned8", "loadFromStreamSigned16", "loadFromStreamSigned24", "loadFromStreamFloat32", "saveToStreamSigned16", "saveToStreamSigned12FrameEnc", "isEqual", "join", "getAbsMaxDiff", "findIdxBefore", "biquad", "mergeArraySkipVal"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _FloatArray::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 0, 1, 2, 3, 4, 1, 3, 1, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 2, 3, 1, 0, 2, 1, 2, 3, 4, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 2, 1, 2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 0, 0, 0, 7, 14, 4, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 5, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _FloatArray::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={0,};static const sUI rt3[]={2,};static const sUI rt4[]={2, 2,};static const sUI rt5[]={2, 2, 2,};static const sUI rt6[]={2, 2, 2, 2,};static const sUI rt7[]={1,};static const sUI rt8[]={3, 1, 1,};static const sUI rt9[]={1,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={0,};static const sUI rt13[]={0,};static const sUI rt14[]={1,};static const sUI rt15[]={1, 2,};static const sUI rt16[]={1,};static const sUI rt17[]={1,};static const sUI rt18[]={1,};static const sUI rt19[]={1,};static const sUI rt20[]={2,};static const sUI rt21[]={1, 2,};static const sUI rt22[]={1, 1, 2,};static const sUI rt23[]={1,};static const sUI rt24[]={0,};static const sUI rt25[]={3, 2,};static const sUI rt26[]={1,};static const sUI rt27[]={3, 2,};static const sUI rt28[]={3, 3, 2,};static const sUI rt29[]={3, 1, 1, 1,};static const sUI rt30[]={3, 1, 1,};static const sUI rt31[]={3, 1, 1,};static const sUI rt32[]={3, 1, 1,};static const sUI rt33[]={3, 1, 1,};static const sUI rt34[]={0,};static const sUI rt35[]={0,};static const sUI rt36[]={0,};static const sUI rt37[]={0,};static const sUI rt38[]={0,};static const sUI rt39[]={0,};static const sUI rt40[]={0,};static const sUI rt41[]={0,};static const sUI rt42[]={0,};static const sUI rt43[]={0,};static const sUI rt44[]={0,};static const sUI rt45[]={0,};static const sUI rt46[]={0,};static const sUI rt47[]={1,};static const sUI rt48[]={1, 2,};static const sUI rt49[]={1,};static const sUI rt50[]={1, 2,};static const sUI rt51[]={1, 2,};static const sUI rt52[]={2,};static const sUI rt53[]={2, 1,};static const sUI rt54[]={2, 1,};static const sUI rt55[]={0,};static const sUI rt56[]={3,};static const sUI rt57[]={2,};static const sUI rt58[]={2,};static const sUI rt59[]={2,};static const sUI rt60[]={2,};static const sUI rt61[]={2,};static const sUI rt62[]={3,};static const sUI rt63[]={1, 1,};static const sUI rt64[]={3, 1, 1,};static const sUI rt65[]={3,};static const sUI rt66[]={0,};static const sUI rt67[]={0,};static const sUI rt68[]={0,};static const sUI rt69[]={1, 1, 3, 1, 1, 1, 1,};static const sUI rt70[]={2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 3,};static const sUI rt71[]={2, 1, 1, 2,};static const sUI rt72[]={2, 2, 1, 1, 2, 2,};static const sUI rt73[]={1, 1,};static const sUI rt74[]={1, 1,};static const sUI rt75[]={1, 1,};static const sUI rt76[]={3, 1,};static const sUI rt77[]={3, 1,};static const sUI rt78[]={3, 1,};static const sUI rt79[]={3, 1,};static const sUI rt80[]={3, 1,};static const sUI rt81[]={3, 1,};static const sUI rt82[]={3,};static const sUI rt83[]={3, 3,};static const sUI rt84[]={3,};static const sUI rt85[]={2,};static const sUI rt86[]={3, 1, 2, 2, 2,};static const sUI rt87[]={3, 2,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39, rt40, rt41, rt42, rt43, rt44, rt45, rt46, rt47, rt48, rt49, rt50, rt51, rt52, rt53, rt54, rt55, rt56, rt57, rt58, rt59, rt60, rt61, rt62, rt63, rt64, rt65, rt66, rt67, rt68, rt69, rt70, rt71, rt72, rt73, rt74, rt75, rt76, rt77, rt78, rt79, rt80, rt81, rt82, rt83, rt84, rt85, rt86, rt87}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _FloatArray::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0, (const char*)0,};static const char *rs5[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs6[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0, (const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0, (const char*)0,};static const char *rs22[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0, (const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0, (const char*)0,};static const char *rs28[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs29[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs30[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs31[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs32[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs33[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs34[]={(const char*)0,};static const char *rs35[]={(const char*)0,};static const char *rs36[]={(const char*)0,};static const char *rs37[]={(const char*)0,};static const char *rs38[]={(const char*)0,};static const char *rs39[]={(const char*)0,};static const char *rs40[]={(const char*)0,};static const char *rs41[]={(const char*)0,};static const char *rs42[]={(const char*)0,};static const char *rs43[]={(const char*)0,};static const char *rs44[]={(const char*)0,};static const char *rs45[]={(const char*)0,};static const char *rs46[]={(const char*)0,};static const char *rs47[]={(const char*)0,};static const char *rs48[]={(const char*)0, (const char*)0,};static const char *rs49[]={(const char*)0,};static const char *rs50[]={(const char*)0, (const char*)0,};static const char *rs51[]={(const char*)0, (const char*)0,};static const char *rs52[]={(const char*)0,};static const char *rs53[]={(const char*)0, (const char*)0,};static const char *rs54[]={(const char*)0, (const char*)0,};static const char *rs55[]={(const char*)0,};static const char *rs56[]={(const char*)0,};static const char *rs57[]={(const char*)0,};static const char *rs58[]={(const char*)0,};static const char *rs59[]={(const char*)0,};static const char *rs60[]={(const char*)0,};static const char *rs61[]={(const char*)0,};static const char *rs62[]={(const char*)0,};static const char *rs63[]={(const char*)0, (const char*)0,};static const char *rs64[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs65[]={(const char*)0,};static const char *rs66[]={(const char*)0,};static const char *rs67[]={(const char*)0,};static const char *rs68[]={(const char*)0,};static const char *rs69[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs70[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs71[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs72[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs73[]={(const char*)0, (const char*)0,};static const char *rs74[]={(const char*)0, (const char*)0,};static const char *rs75[]={(const char*)0, (const char*)0,};static const char *rs76[]={(const char*)0, (const char*)0,};static const char *rs77[]={(const char*)0, (const char*)0,};static const char *rs78[]={(const char*)0, (const char*)0,};static const char *rs79[]={(const char*)0, (const char*)0,};static const char *rs80[]={(const char*)0, (const char*)0,};static const char *rs81[]={(const char*)0, (const char*)0,};static const char *rs82[]={(const char*)0,};static const char *rs83[]={(const char*)0, (const char*)0,};static const char *rs84[]={(const char*)0,};static const char *rs85[]={(const char*)0,};static const char *rs86[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs87[]={(const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39, rs40, rs41, rs42, rs43, rs44, rs45, rs46, rs47, rs48, rs49, rs50, rs51, rs52, rs53, rs54, rs55, rs56, rs57, rs58, rs59, rs60, rs61, rs62, rs63, rs64, rs65, rs66, rs67, rs68, rs69, rs70, rs71, rs72, rs73, rs74, rs75, rs76, rs77, rs78, rs79, rs80, rs81, rs82, rs83, rs84, rs85, rs86, rs87}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _FloatArray::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 4, 4, 4, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _FloatArray::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _FloatArray::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)FloatArray__alloc, (void*)FloatArray__free, (void*)FloatArray__add, (void*)FloatArray__add2, (void*)FloatArray__add3, (void*)FloatArray__add4, (void*)FloatArray__addFromARGB32, (void*)FloatArray__addArray, (void*)FloatArray__addEmpty, (void*)FloatArray__getNumElements, (void*)FloatArray__getMaxElements, (void*)FloatArray__empty, (void*)FloatArray__isEmpty, (void*)FloatArray__realloc, (void*)FloatArray__insert, (void*)FloatArray___delete, (void*)FloatArray___delete2, (void*)FloatArray___delete3, (void*)FloatArray___delete4, (void*)FloatArray__fill, (void*)FloatArray__allocAndFill, (void*)FloatArray__fillRegion, (void*)FloatArray__fillFromARGB32, (void*)FloatArray__reverse, (void*)FloatArray__scale, (void*)FloatArray__setNumElements, (void*)FloatArray__blend, (void*)FloatArray__blendAB, (void*)FloatArray__copyFrom, (void*)FloatArray___read32, (void*)FloatArray___read64, (void*)FloatArray___write32, (void*)FloatArray___write64, (void*)FloatArray___getString, (void*)FloatArray___getString2, (void*)FloatArray___getString3, (void*)FloatArray__getMin, (void*)FloatArray__getMinIdx, (void*)FloatArray__getMax, (void*)FloatArray__getMaxIdx, (void*)FloatArray__getAbsMin, (void*)FloatArray__getAbsMax, (void*)FloatArray__getMean, (void*)FloatArray__getAbsMean, (void*)FloatArray__getRms, (void*)FloatArray__getRmsMax, (void*)FloatArray__get, (void*)FloatArray___set, (void*)FloatArray___getRev, (void*)FloatArray___setRev, (void*)FloatArray___getDefault, (void*)FloatArray__contains, (void*)FloatArray__indexOf, (void*)FloatArray__indexOfNot, (void*)FloatArray__fixNaNToZero, (void*)FloatArray__sortByValue, (void*)FloatArray__winLinear, (void*)FloatArray__winCosine, (void*)FloatArray__winQuadratic, (void*)FloatArray__winCubic, (void*)FloatArray__winQuintic, (void*)FloatArray__rearrange, (void*)FloatArray___swap, (void*)FloatArray___visit, (void*)FloatArray___unlinkFrom, (void*)FloatArray___useAll, (void*)FloatArray___getFirst, (void*)FloatArray___getLast, (void*)FloatArray___interleave, (void*)FloatArray___bezierCubicDeCasteljau2d, (void*)FloatArray__findNearestIdx1d, (void*)FloatArray__findNearestIdx2d, (void*)FloatArray__sum, (void*)FloatArray__sumPathLen1d, (void*)FloatArray__sumPathLen2d, (void*)FloatArray__loadFromStreamUnsigned8, (void*)FloatArray__loadFromStreamSigned16, (void*)FloatArray__loadFromStreamSigned24, (void*)FloatArray__loadFromStreamFloat32, (void*)FloatArray__saveToStreamSigned16, (void*)FloatArray__saveToStreamSigned12FrameEnc, (void*)FloatArray___isEqual, (void*)FloatArray___join, (void*)FloatArray__getAbsMaxDiff, (void*)FloatArray__findIdxBefore, (void*)FloatArray__biquad, (void*)FloatArray__mergeArraySkipVal}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _FloatArray::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _FloatArray::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _FloatArray::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _FloatArray::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL FloatArray__alloc    (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->alloc(_args.mem[0].si);}
void  YAC_CALL FloatArray__free     (void *_o                                ) {((_FloatArray*)_o)->free();}
sSI   YAC_CALL FloatArray__add      (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->add(_args.mem[0].f32);}
sSI   YAC_CALL FloatArray__add2     (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->add2(_args.mem[0].f32, _args.mem[1].f32);}
sSI   YAC_CALL FloatArray__add3     (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->add3(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].f32);}
sSI   YAC_CALL FloatArray__add4     (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->add4(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].f32, _args.mem[3].f32);}
sSI   YAC_CALL FloatArray__addFromARGB32(void *_o, yacmemptr _args           ) {return (sSI)((_FloatArray*)_o)->addFromARGB32(_args.mem[0].si);}
sSI   YAC_CALL FloatArray__addArray (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->addArray(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL FloatArray__addEmpty (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->addEmpty(_args.mem[0].si);}
sSI   YAC_CALL FloatArray__getNumElements(void *_o                           ) {return (sSI)((_FloatArray*)_o)->getNumElements();}
sSI   YAC_CALL FloatArray__getMaxElements(void *_o                           ) {return (sSI)((_FloatArray*)_o)->getMaxElements();}
void  YAC_CALL FloatArray__empty    (void *_o                                ) {((_FloatArray*)_o)->empty();}
sSI   YAC_CALL FloatArray__isEmpty  (void *_o                                ) {return (sSI)((_FloatArray*)_o)->isEmpty();}
sSI   YAC_CALL FloatArray__realloc  (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->realloc(_args.mem[0].si);}
sSI   YAC_CALL FloatArray__insert   (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->insert(_args.mem[0].si, _args.mem[1].f32);}
sSI   YAC_CALL FloatArray___delete  (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->_delete(_args.mem[0].si);}
sSI   YAC_CALL FloatArray___delete2 (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->_delete2(_args.mem[0].si);}
sSI   YAC_CALL FloatArray___delete3 (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->_delete3(_args.mem[0].si);}
sSI   YAC_CALL FloatArray___delete4 (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->_delete4(_args.mem[0].si);}
void  YAC_CALL FloatArray__fill     (void *_o, yacmemptr _args               ) {((_FloatArray*)_o)->fill(_args.mem[0].f32);}
sSI   YAC_CALL FloatArray__allocAndFill(void *_o, yacmemptr _args            ) {return (sSI)((_FloatArray*)_o)->allocAndFill(_args.mem[0].si, _args.mem[1].f32);}
void  YAC_CALL FloatArray__fillRegion(void *_o, yacmemptr _args              ) {((_FloatArray*)_o)->fillRegion(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
void  YAC_CALL FloatArray__fillFromARGB32(void *_o, yacmemptr _args          ) {((_FloatArray*)_o)->fillFromARGB32(_args.mem[0].si);}
void  YAC_CALL FloatArray__reverse  (void *_o                                ) {((_FloatArray*)_o)->reverse();}
void  YAC_CALL FloatArray__scale    (void *_o, yacmemptr _args               ) {((_FloatArray*)_o)->scale(_args.mem[0].o, _args.mem[1].f32);}
void  YAC_CALL FloatArray__setNumElements(void *_o, yacmemptr _args          ) {((_FloatArray*)_o)->setNumElements(_args.mem[0].si);}
void  YAC_CALL FloatArray__blend    (void *_o, yacmemptr _args               ) {((_FloatArray*)_o)->blend(_args.mem[0].o, _args.mem[1].f32);}
void  YAC_CALL FloatArray__blendAB  (void *_o, yacmemptr _args               ) {((_FloatArray*)_o)->blendAB(_args.mem[0].o, _args.mem[1].o, _args.mem[2].f32);}
void  YAC_CALL FloatArray__copyFrom (void *_o, yacmemptr _args               ) {((_FloatArray*)_o)->copyFrom(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
sSI   YAC_CALL FloatArray___read32  (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->_read32(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL FloatArray___read64  (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->_read64(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL FloatArray___write32 (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->_write32(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL FloatArray___write64 (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->_write64(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL FloatArray___getString(void *_o, YAC_Value *_r                ) {((_FloatArray*)_o)->_getString(_r);}
void  YAC_CALL FloatArray___getString2(void *_o, YAC_Value *_r               ) {((_FloatArray*)_o)->_getString2(_r);}
void  YAC_CALL FloatArray___getString3(void *_o, YAC_Value *_r               ) {((_FloatArray*)_o)->_getString3(_r);}
sF32  YAC_CALL FloatArray__getMin   (void *_o                                ) {return (sF32)((_FloatArray*)_o)->getMin();}
sSI   YAC_CALL FloatArray__getMinIdx(void *_o                                ) {return (sSI)((_FloatArray*)_o)->getMinIdx();}
sF32  YAC_CALL FloatArray__getMax   (void *_o                                ) {return (sF32)((_FloatArray*)_o)->getMax();}
sSI   YAC_CALL FloatArray__getMaxIdx(void *_o                                ) {return (sSI)((_FloatArray*)_o)->getMaxIdx();}
sF32  YAC_CALL FloatArray__getAbsMin(void *_o                                ) {return (sF32)((_FloatArray*)_o)->getAbsMin();}
sF32  YAC_CALL FloatArray__getAbsMax(void *_o                                ) {return (sF32)((_FloatArray*)_o)->getAbsMax();}
sF32  YAC_CALL FloatArray__getMean  (void *_o                                ) {return (sF32)((_FloatArray*)_o)->getMean();}
sF32  YAC_CALL FloatArray__getAbsMean(void *_o                               ) {return (sF32)((_FloatArray*)_o)->getAbsMean();}
sF32  YAC_CALL FloatArray__getRms   (void *_o                                ) {return (sF32)((_FloatArray*)_o)->getRms();}
sF32  YAC_CALL FloatArray__getRmsMax(void *_o                                ) {return (sF32)((_FloatArray*)_o)->getRmsMax();}
sF32  YAC_CALL FloatArray__get      (void *_o, yacmemptr _args               ) {return (sF32)((_FloatArray*)_o)->get(_args.mem[0].si);}
void  YAC_CALL FloatArray___set     (void *_o, yacmemptr _args               ) {((_FloatArray*)_o)->_set(_args.mem[0].si, _args.mem[1].f32);}
sF32  YAC_CALL FloatArray___getRev  (void *_o, yacmemptr _args               ) {return (sF32)((_FloatArray*)_o)->_getRev(_args.mem[0].si);}
void  YAC_CALL FloatArray___setRev  (void *_o, yacmemptr _args               ) {((_FloatArray*)_o)->_setRev(_args.mem[0].si, _args.mem[1].f32);}
sF32  YAC_CALL FloatArray___getDefault(void *_o, yacmemptr _args             ) {return (sF32)((_FloatArray*)_o)->_getDefault(_args.mem[0].si, _args.mem[1].f32);}
sSI   YAC_CALL FloatArray__contains (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->contains(_args.mem[0].f32);}
sSI   YAC_CALL FloatArray__indexOf  (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->indexOf(_args.mem[0].f32, _args.mem[1].si);}
sSI   YAC_CALL FloatArray__indexOfNot(void *_o, yacmemptr _args              ) {return (sSI)((_FloatArray*)_o)->indexOfNot(_args.mem[0].f32, _args.mem[1].si);}
void  YAC_CALL FloatArray__fixNaNToZero(void *_o                             ) {((_FloatArray*)_o)->fixNaNToZero();}
void  YAC_CALL FloatArray__sortByValue(void *_o, yacmemptr _args             ) {((_FloatArray*)_o)->sortByValue(_args.mem[0].o);}
sF32  YAC_CALL FloatArray__winLinear(void *_o, yacmemptr _args               ) {return (sF32)((_FloatArray*)_o)->winLinear(_args.mem[0].f32);}
sF32  YAC_CALL FloatArray__winCosine(void *_o, yacmemptr _args               ) {return (sF32)((_FloatArray*)_o)->winCosine(_args.mem[0].f32);}
sF32  YAC_CALL FloatArray__winQuadratic(void *_o, yacmemptr _args            ) {return (sF32)((_FloatArray*)_o)->winQuadratic(_args.mem[0].f32);}
sF32  YAC_CALL FloatArray__winCubic (void *_o, yacmemptr _args               ) {return (sF32)((_FloatArray*)_o)->winCubic(_args.mem[0].f32);}
sF32  YAC_CALL FloatArray__winQuintic(void *_o, yacmemptr _args              ) {return (sF32)((_FloatArray*)_o)->winQuintic(_args.mem[0].f32);}
sSI   YAC_CALL FloatArray__rearrange(void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->rearrange(_args.mem[0].o);}
sSI   YAC_CALL FloatArray___swap    (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->_swap(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL FloatArray___visit   (void *_o, yacmemptr _args               ) {((_FloatArray*)_o)->_visit(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL FloatArray___unlinkFrom(void *_o, yacmemptr _args             ) {((_FloatArray*)_o)->_unlinkFrom(_args.mem[0].o);}
void  YAC_CALL FloatArray___useAll  (void *_o                                ) {((_FloatArray*)_o)->_useAll();}
sF32  YAC_CALL FloatArray___getFirst(void *_o                                ) {return (sF32)((_FloatArray*)_o)->_getFirst();}
sF32  YAC_CALL FloatArray___getLast (void *_o                                ) {return (sF32)((_FloatArray*)_o)->_getLast();}
void  YAC_CALL FloatArray___interleave(void *_o, yacmemptr _args             ) {((_FloatArray*)_o)->_interleave(_args.mem[0].si, _args.mem[1].si, _args.mem[2].o, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si, _args.mem[6].si);}
void  YAC_CALL FloatArray___bezierCubicDeCasteljau2d(void *_o, yacmemptr _args) {((_FloatArray*)_o)->_bezierCubicDeCasteljau2d(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].f32, _args.mem[3].f32, _args.mem[4].f32, _args.mem[5].f32, _args.mem[6].f32, _args.mem[7].f32, _args.mem[8].f32, _args.mem[9].f32, _args.mem[10].si, _args.mem[11].f32, _args.mem[12].f32, _args.mem[13].o);}
sSI   YAC_CALL FloatArray__findNearestIdx1d(void *_o, yacmemptr _args        ) {return (sSI)((_FloatArray*)_o)->findNearestIdx1d(_args.mem[0].f32, _args.mem[1].si, _args.mem[2].si, _args.mem[3].f32);}
sSI   YAC_CALL FloatArray__findNearestIdx2d(void *_o, yacmemptr _args        ) {return (sSI)((_FloatArray*)_o)->findNearestIdx2d(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].si, _args.mem[3].si, _args.mem[4].f32, _args.mem[5].f32);}
sF32  YAC_CALL FloatArray__sum      (void *_o, yacmemptr _args               ) {return (sF32)((_FloatArray*)_o)->sum(_args.mem[0].si, _args.mem[1].si);}
sF32  YAC_CALL FloatArray__sumPathLen1d(void *_o, yacmemptr _args            ) {return (sF32)((_FloatArray*)_o)->sumPathLen1d(_args.mem[0].si, _args.mem[1].si);}
sF32  YAC_CALL FloatArray__sumPathLen2d(void *_o, yacmemptr _args            ) {return (sF32)((_FloatArray*)_o)->sumPathLen2d(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL FloatArray__loadFromStreamUnsigned8(void *_o, yacmemptr _args ) {return (sSI)((_FloatArray*)_o)->loadFromStreamUnsigned8(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL FloatArray__loadFromStreamSigned16(void *_o, yacmemptr _args  ) {return (sSI)((_FloatArray*)_o)->loadFromStreamSigned16(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL FloatArray__loadFromStreamSigned24(void *_o, yacmemptr _args  ) {return (sSI)((_FloatArray*)_o)->loadFromStreamSigned24(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL FloatArray__loadFromStreamFloat32(void *_o, yacmemptr _args   ) {return (sSI)((_FloatArray*)_o)->loadFromStreamFloat32(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL FloatArray__saveToStreamSigned16(void *_o, yacmemptr _args    ) {return (sSI)((_FloatArray*)_o)->saveToStreamSigned16(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL FloatArray__saveToStreamSigned12FrameEnc(void *_o, yacmemptr _args) {return (sSI)((_FloatArray*)_o)->saveToStreamSigned12FrameEnc(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL FloatArray___isEqual (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->_isEqual(_args.mem[0].o);}
sSI   YAC_CALL FloatArray___join    (void *_o, yacmemptr _args               ) {return (sSI)((_FloatArray*)_o)->_join(_args.mem[0].o, _args.mem[1].o);}
sF32  YAC_CALL FloatArray__getAbsMaxDiff(void *_o, yacmemptr _args           ) {return (sF32)((_FloatArray*)_o)->getAbsMaxDiff(_args.mem[0].o);}
sSI   YAC_CALL FloatArray__findIdxBefore(void *_o, yacmemptr _args           ) {return (sSI)((_FloatArray*)_o)->findIdxBefore(_args.mem[0].f32);}
void  YAC_CALL FloatArray__biquad   (void *_o, yacmemptr _args               ) {((_FloatArray*)_o)->biquad(_args.mem[0].o, _args.mem[1].si, _args.mem[2].f32, _args.mem[3].f32, _args.mem[4].f32);}
void  YAC_CALL FloatArray__mergeArraySkipVal(void *_o, yacmemptr _args       ) {((_FloatArray*)_o)->mergeArraySkipVal(_args.mem[0].o, _args.mem[1].f32);}
#endif // YAC_NO_HOST
