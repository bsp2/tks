// ---- ying_core_Value.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
void  YAC_CALL Value__yacOperatorAssign(void *, yacmemptr          );
sSI   YAC_CALL Value__getIntValue   (void *                        );
sF32  YAC_CALL Value__getFloatValue (void *                        );
void* YAC_CALL Value__getObjectValue(void *                        );
void  YAC_CALL Value___getValue     (void *, YAC_Value *           );
sSI   YAC_CALL Value___getType      (void *                        );
void  YAC_CALL Value___setObjectValue(void *, yacmemptr            );
void  YAC_CALL Value___setStringValue(void *, yacmemptr            );
void  YAC_CALL Value__typecast      (void *, yacmemptr             );
void  YAC_CALL Value___unset        (void *                        );
void* YAC_CALL Value___setNewObject (void *, yacmemptr             );
void  YAC_CALL Value___setValue     (void *, yacmemptr             );
void  YAC_CALL Value___getString    (void *, YAC_Value *           );
void  YAC_CALL Value__getStringValue(void *, YAC_Value *           );
void  YAC_CALL Value___setIntValue  (void *, yacmemptr             );
void  YAC_CALL Value___setFloatValue(void *, yacmemptr             );
void  YAC_CALL Value__initNull      (void *                        );
void  YAC_CALL Value__initVoid      (void *                        );
void  YAC_CALL Value__derefObjectValue(void *, YAC_Value *         );
void  YAC_CALL Value___getDeref     (void *, YAC_Value *           );
sSI   YAC_CALL Value___isDeletable  (void *                        );
void  YAC_CALL Value___unlinkObject (void *, YAC_Value *           );
void  YAC_CALL Value___assign       (void *, yacmemptr             );
void  YAC_CALL Value___pointerAssign(void *, yacmemptr             );
sSI   YAC_CALL Value___isVoid       (void *                        );
sSI   YAC_CALL Value___isInt        (void *                        );
sSI   YAC_CALL Value___isFloat      (void *                        );
sSI   YAC_CALL Value___isObject     (void *                        );
sSI   YAC_CALL Value___isString     (void *                        );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Value" reflection map (implementation) ------------------
sUI          YAC_VCALL _Value::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Value::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Value::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Value::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Value::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Value::yacMethodGetNum                  (void) {return 30;}
const char **YAC_VCALL _Value::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "yacOperatorAssign", "getIntValue", "getFloatValue", "getObjectValue", "getValue", "getType", "setObjectValue", "setStringValue", "typecast", "unset", "setNewObject", "setValue", "getString", "getStringValue", "setIntValue", "setFloatValue", "initNull", "initVoid", "derefObjectValue", "getDeref", "isDeletable", "unlinkObject", "assign", "pointerAssign", "isVoid", "isInt", "isFloat", "isObject", "isString"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Value::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Value::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={3,};static const sUI rt8[]={3,};static const sUI rt9[]={1,};static const sUI rt10[]={0,};static const sUI rt11[]={3,};static const sUI rt12[]={3,};static const sUI rt13[]={0,};static const sUI rt14[]={0,};static const sUI rt15[]={1,};static const sUI rt16[]={2,};static const sUI rt17[]={0,};static const sUI rt18[]={0,};static const sUI rt19[]={0,};static const sUI rt20[]={0,};static const sUI rt21[]={0,};static const sUI rt22[]={0,};static const sUI rt23[]={3,};static const sUI rt24[]={3,};static const sUI rt25[]={0,};static const sUI rt26[]={0,};static const sUI rt27[]={0,};static const sUI rt28[]={0,};static const sUI rt29[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Value::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Value::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 1, 2, 3, 4, 1, 0, 0, 0, 0, 3, 0, 4, 4, 0, 0, 0, 0, 4, 4, 1, 4, 0, 0, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Value::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Value::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Value__yacOperatorAssign, (void*)Value__getIntValue, (void*)Value__getFloatValue, (void*)Value__getObjectValue, (void*)Value___getValue, (void*)Value___getType, (void*)Value___setObjectValue, (void*)Value___setStringValue, (void*)Value__typecast, (void*)Value___unset, (void*)Value___setNewObject, (void*)Value___setValue, (void*)Value___getString, (void*)Value__getStringValue, (void*)Value___setIntValue, (void*)Value___setFloatValue, (void*)Value__initNull, (void*)Value__initVoid, (void*)Value__derefObjectValue, (void*)Value___getDeref, (void*)Value___isDeletable, (void*)Value___unlinkObject, (void*)Value___assign, (void*)Value___pointerAssign, (void*)Value___isVoid, (void*)Value___isInt, (void*)Value___isFloat, (void*)Value___isObject, (void*)Value___isString}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Value::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Value::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Value::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Value::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
void  YAC_CALL Value__yacOperatorAssign(void *_o, yacmemptr _args            ) {((_Value*)_o)->yacOperatorAssign(_args.mem[0].o);}
sSI   YAC_CALL Value__getIntValue   (void *_o                                ) {return (sSI)((_Value*)_o)->getIntValue();}
sF32  YAC_CALL Value__getFloatValue (void *_o                                ) {return (sF32)((_Value*)_o)->getFloatValue();}
void* YAC_CALL Value__getObjectValue(void *_o                                ) {return (void*)((_Value*)_o)->getObjectValue();}
void  YAC_CALL Value___getValue     (void *_o, YAC_Value *_r                 ) {((_Value*)_o)->_getValue(_r);}
sSI   YAC_CALL Value___getType      (void *_o                                ) {return (sSI)((_Value*)_o)->_getType();}
void  YAC_CALL Value___setObjectValue(void *_o, yacmemptr _args              ) {((_Value*)_o)->_setObjectValue(_args.mem[0].o);}
void  YAC_CALL Value___setStringValue(void *_o, yacmemptr _args              ) {((_Value*)_o)->_setStringValue(_args.mem[0].o);}
void  YAC_CALL Value__typecast      (void *_o, yacmemptr _args               ) {((_Value*)_o)->typecast(_args.mem[0].si);}
void  YAC_CALL Value___unset        (void *_o                                ) {((_Value*)_o)->_unset();}
void* YAC_CALL Value___setNewObject (void *_o, yacmemptr _args               ) {return (void*)((_Value*)_o)->_setNewObject(_args.mem[0].o);}
void  YAC_CALL Value___setValue     (void *_o, yacmemptr _args               ) {((_Value*)_o)->_setValue(_args.mem[0].o);}
void  YAC_CALL Value___getString    (void *_o, YAC_Value *_r                 ) {((_Value*)_o)->_getString(_r);}
void  YAC_CALL Value__getStringValue(void *_o, YAC_Value *_r                 ) {((_Value*)_o)->getStringValue(_r);}
void  YAC_CALL Value___setIntValue  (void *_o, yacmemptr _args               ) {((_Value*)_o)->_setIntValue(_args.mem[0].si);}
void  YAC_CALL Value___setFloatValue(void *_o, yacmemptr _args               ) {((_Value*)_o)->_setFloatValue(_args.mem[0].f32);}
void  YAC_CALL Value__initNull      (void *_o                                ) {((_Value*)_o)->initNull();}
void  YAC_CALL Value__initVoid      (void *_o                                ) {((_Value*)_o)->initVoid();}
void  YAC_CALL Value__derefObjectValue(void *_o, YAC_Value *_r               ) {((_Value*)_o)->derefObjectValue(_r);}
void  YAC_CALL Value___getDeref     (void *_o, YAC_Value *_r                 ) {((_Value*)_o)->_getDeref(_r);}
sSI   YAC_CALL Value___isDeletable  (void *_o                                ) {return (sSI)((_Value*)_o)->_isDeletable();}
void  YAC_CALL Value___unlinkObject (void *_o, YAC_Value *_r                 ) {((_Value*)_o)->_unlinkObject(_r);}
void  YAC_CALL Value___assign       (void *_o, yacmemptr _args               ) {((_Value*)_o)->_assign(_args.mem[0].o);}
void  YAC_CALL Value___pointerAssign(void *_o, yacmemptr _args               ) {((_Value*)_o)->_pointerAssign(_args.mem[0].o);}
sSI   YAC_CALL Value___isVoid       (void *_o                                ) {return (sSI)((_Value*)_o)->_isVoid();}
sSI   YAC_CALL Value___isInt        (void *_o                                ) {return (sSI)((_Value*)_o)->_isInt();}
sSI   YAC_CALL Value___isFloat      (void *_o                                ) {return (sSI)((_Value*)_o)->_isFloat();}
sSI   YAC_CALL Value___isObject     (void *_o                                ) {return (sSI)((_Value*)_o)->_isObject();}
sSI   YAC_CALL Value___isString     (void *_o                                ) {return (sSI)((_Value*)_o)->_isString();}
#endif // YAC_NO_HOST
