// ---- ying_core_IntArray.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
sSI   YAC_CALL IntArray__alloc      (void *, yacmemptr             );
void  YAC_CALL IntArray__free       (void *                        );
sSI   YAC_CALL IntArray__add        (void *, yacmemptr             );
sSI   YAC_CALL IntArray__add2       (void *, yacmemptr             );
sSI   YAC_CALL IntArray__add3       (void *, yacmemptr             );
sSI   YAC_CALL IntArray__add4       (void *, yacmemptr             );
sSI   YAC_CALL IntArray__addArray   (void *, yacmemptr             );
sSI   YAC_CALL IntArray__addEmpty   (void *, yacmemptr             );
sSI   YAC_CALL IntArray__getNumElements(void *                     );
sSI   YAC_CALL IntArray__getMaxElements(void *                     );
void  YAC_CALL IntArray__empty      (void *                        );
sSI   YAC_CALL IntArray__isEmpty    (void *                        );
sSI   YAC_CALL IntArray__realloc    (void *, yacmemptr             );
sSI   YAC_CALL IntArray__insert     (void *, yacmemptr             );
sSI   YAC_CALL IntArray___delete    (void *, yacmemptr             );
sSI   YAC_CALL IntArray___delete2   (void *, yacmemptr             );
sSI   YAC_CALL IntArray___delete3   (void *, yacmemptr             );
sSI   YAC_CALL IntArray___delete4   (void *, yacmemptr             );
void  YAC_CALL IntArray__fill       (void *, yacmemptr             );
sSI   YAC_CALL IntArray__allocAndFill(void *, yacmemptr            );
void  YAC_CALL IntArray__fillRegion (void *, yacmemptr             );
void  YAC_CALL IntArray__reverse    (void *                        );
void  YAC_CALL IntArray__setNumElements(void *, yacmemptr          );
void  YAC_CALL IntArray__swapByteOrder(void *                      );
sSI   YAC_CALL IntArray__visitBytes (void *, yacmemptr             );
void  YAC_CALL IntArray__copyFrom   (void *, yacmemptr             );
sSI   YAC_CALL IntArray__indexOf    (void *, yacmemptr             );
sSI   YAC_CALL IntArray__indexOfNot (void *, yacmemptr             );
sSI   YAC_CALL IntArray___contains  (void *, yacmemptr             );
sSI   YAC_CALL IntArray___remove    (void *, yacmemptr             );
sSI   YAC_CALL IntArray___read8     (void *, yacmemptr             );
sSI   YAC_CALL IntArray___read16    (void *, yacmemptr             );
sSI   YAC_CALL IntArray___read32    (void *, yacmemptr             );
sSI   YAC_CALL IntArray___write8    (void *, yacmemptr             );
sSI   YAC_CALL IntArray___write16   (void *, yacmemptr             );
sSI   YAC_CALL IntArray___write32   (void *, yacmemptr             );
void  YAC_CALL IntArray___getString (void *, YAC_Value *           );
void  YAC_CALL IntArray___getString2(void *, YAC_Value *           );
void  YAC_CALL IntArray___getString3(void *, YAC_Value *           );
sSI   YAC_CALL IntArray__getMin     (void *                        );
sSI   YAC_CALL IntArray__getMax     (void *                        );
sSI   YAC_CALL IntArray__getAbsMin  (void *                        );
sSI   YAC_CALL IntArray__getAbsMax  (void *                        );
sF32  YAC_CALL IntArray__getMean    (void *                        );
sF32  YAC_CALL IntArray__getAbsMean (void *                        );
sSI   YAC_CALL IntArray__get        (void *, yacmemptr             );
void  YAC_CALL IntArray___set       (void *, yacmemptr             );
sSI   YAC_CALL IntArray___getRev    (void *, yacmemptr             );
void  YAC_CALL IntArray___setRev    (void *, yacmemptr             );
sSI   YAC_CALL IntArray___getDefault(void *, yacmemptr             );
void  YAC_CALL IntArray__identity   (void *, yacmemptr             );
void  YAC_CALL IntArray__sortByValue(void *, yacmemptr             );
sSI   YAC_CALL IntArray__rearrange  (void *, yacmemptr             );
sSI   YAC_CALL IntArray___swap      (void *, yacmemptr             );
void  YAC_CALL IntArray___visit     (void *, yacmemptr             );
void  YAC_CALL IntArray___useAll    (void *                        );
sSI   YAC_CALL IntArray___getFirst  (void *                        );
sSI   YAC_CALL IntArray___getLast   (void *                        );
sSI   YAC_CALL IntArray___join      (void *, yacmemptr             );
sSI   YAC_CALL IntArray___replace   (void *, yacmemptr             );
sSI   YAC_CALL IntArray___replaceNeg(void *, yacmemptr             );
void  YAC_CALL IntArray___inc       (void *, yacmemptr             );
void  YAC_CALL IntArray___dec       (void *, yacmemptr             );
sSI   YAC_CALL IntArray___getNumUniqueValues(void *                );
sSI   YAC_CALL IntArray___isEqual   (void *, yacmemptr             );
sSI   YAC_CALL IntArray___findSubArrayOffset(void *, yacmemptr     );
#endif // YAC_NO_HOST

// ------------------ YAC class "_IntArray" reflection map (implementation) ------------------
sUI          YAC_VCALL _IntArray::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _IntArray::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _IntArray::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _IntArray::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _IntArray::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _IntArray::yacMethodGetNum                  (void) {return 67;}
const char **YAC_VCALL _IntArray::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "alloc", "free", "add", "add2", "add3", "add4", "addArray", "addEmpty", "getNumElements", "getMaxElements", "empty", "isEmpty", "realloc", "insert", "delete", "delete2", "delete3", "delete4", "fill", "allocAndFill", "fillRegion", "reverse", "setNumElements", "swapByteOrder", "visitBytes", "copyFrom", "indexOf", "indexOfNot", "contains", "remove", "read8", "read16", "read32", "write8", "write16", "write32", "getString", "getString2", "getString3", "getMin", "getMax", "getAbsMin", "getAbsMax", "getMean", "getAbsMean", "get", "set", "getRev", "setRev", "getDefault", "identity", "sortByValue", "rearrange", "swap", "visit", "useAll", "getFirst", "getLast", "join", "replace", "replaceNeg", "inc", "dec", "getNumUniqueValues", "isEqual", "findSubArrayOffset"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _IntArray::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 0, 1, 2, 3, 4, 3, 1, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 2, 3, 0, 1, 0, 3, 4, 2, 2, 1, 1, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 2, 1, 1, 1, 2, 3, 0, 0, 0, 2, 2, 1, 1, 1, 0, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _IntArray::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={0,};static const sUI rt3[]={1,};static const sUI rt4[]={1, 1,};static const sUI rt5[]={1, 1, 1,};static const sUI rt6[]={1, 1, 1, 1,};static const sUI rt7[]={3, 1, 1,};static const sUI rt8[]={1,};static const sUI rt9[]={0,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={0,};static const sUI rt13[]={1,};static const sUI rt14[]={1, 1,};static const sUI rt15[]={1,};static const sUI rt16[]={1,};static const sUI rt17[]={1,};static const sUI rt18[]={1,};static const sUI rt19[]={1,};static const sUI rt20[]={1, 1,};static const sUI rt21[]={1, 1, 1,};static const sUI rt22[]={0,};static const sUI rt23[]={1,};static const sUI rt24[]={0,};static const sUI rt25[]={3, 1, 1,};static const sUI rt26[]={3, 1, 1, 1,};static const sUI rt27[]={1, 1,};static const sUI rt28[]={1, 1,};static const sUI rt29[]={1,};static const sUI rt30[]={1,};static const sUI rt31[]={3, 1, 1,};static const sUI rt32[]={3, 1, 1,};static const sUI rt33[]={3, 1, 1,};static const sUI rt34[]={3, 1, 1,};static const sUI rt35[]={3, 1, 1,};static const sUI rt36[]={3, 1, 1,};static const sUI rt37[]={0,};static const sUI rt38[]={0,};static const sUI rt39[]={0,};static const sUI rt40[]={0,};static const sUI rt41[]={0,};static const sUI rt42[]={0,};static const sUI rt43[]={0,};static const sUI rt44[]={0,};static const sUI rt45[]={0,};static const sUI rt46[]={1,};static const sUI rt47[]={1, 1,};static const sUI rt48[]={1,};static const sUI rt49[]={1, 1,};static const sUI rt50[]={1, 1,};static const sUI rt51[]={1,};static const sUI rt52[]={3,};static const sUI rt53[]={3,};static const sUI rt54[]={1, 1,};static const sUI rt55[]={3, 1, 1,};static const sUI rt56[]={0,};static const sUI rt57[]={0,};static const sUI rt58[]={0,};static const sUI rt59[]={3, 3,};static const sUI rt60[]={1, 1,};static const sUI rt61[]={1,};static const sUI rt62[]={1,};static const sUI rt63[]={1,};static const sUI rt64[]={0,};static const sUI rt65[]={3,};static const sUI rt66[]={3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39, rt40, rt41, rt42, rt43, rt44, rt45, rt46, rt47, rt48, rt49, rt50, rt51, rt52, rt53, rt54, rt55, rt56, rt57, rt58, rt59, rt60, rt61, rt62, rt63, rt64, rt65, rt66}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _IntArray::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0, (const char*)0,};static const char *rs5[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs6[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs7[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0, (const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0, (const char*)0,};static const char *rs21[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs26[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs27[]={(const char*)0, (const char*)0,};static const char *rs28[]={(const char*)0, (const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs32[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs33[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs34[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs35[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs36[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs37[]={(const char*)0,};static const char *rs38[]={(const char*)0,};static const char *rs39[]={(const char*)0,};static const char *rs40[]={(const char*)0,};static const char *rs41[]={(const char*)0,};static const char *rs42[]={(const char*)0,};static const char *rs43[]={(const char*)0,};static const char *rs44[]={(const char*)0,};static const char *rs45[]={(const char*)0,};static const char *rs46[]={(const char*)0,};static const char *rs47[]={(const char*)0, (const char*)0,};static const char *rs48[]={(const char*)0,};static const char *rs49[]={(const char*)0, (const char*)0,};static const char *rs50[]={(const char*)0, (const char*)0,};static const char *rs51[]={(const char*)0,};static const char *rs52[]={(const char*)0,};static const char *rs53[]={(const char*)0,};static const char *rs54[]={(const char*)0, (const char*)0,};static const char *rs55[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs56[]={(const char*)0,};static const char *rs57[]={(const char*)0,};static const char *rs58[]={(const char*)0,};static const char *rs59[]={(const char*)0, (const char*)0,};static const char *rs60[]={(const char*)0, (const char*)0,};static const char *rs61[]={(const char*)0,};static const char *rs62[]={(const char*)0,};static const char *rs63[]={(const char*)0,};static const char *rs64[]={(const char*)0,};static const char *rs65[]={(const char*)0,};static const char *rs66[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39, rs40, rs41, rs42, rs43, rs44, rs45, rs46, rs47, rs48, rs49, rs50, rs51, rs52, rs53, rs54, rs55, rs56, rs57, rs58, rs59, rs60, rs61, rs62, rs63, rs64, rs65, rs66}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _IntArray::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 2, 2, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _IntArray::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _IntArray::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)IntArray__alloc, (void*)IntArray__free, (void*)IntArray__add, (void*)IntArray__add2, (void*)IntArray__add3, (void*)IntArray__add4, (void*)IntArray__addArray, (void*)IntArray__addEmpty, (void*)IntArray__getNumElements, (void*)IntArray__getMaxElements, (void*)IntArray__empty, (void*)IntArray__isEmpty, (void*)IntArray__realloc, (void*)IntArray__insert, (void*)IntArray___delete, (void*)IntArray___delete2, (void*)IntArray___delete3, (void*)IntArray___delete4, (void*)IntArray__fill, (void*)IntArray__allocAndFill, (void*)IntArray__fillRegion, (void*)IntArray__reverse, (void*)IntArray__setNumElements, (void*)IntArray__swapByteOrder, (void*)IntArray__visitBytes, (void*)IntArray__copyFrom, (void*)IntArray__indexOf, (void*)IntArray__indexOfNot, (void*)IntArray___contains, (void*)IntArray___remove, (void*)IntArray___read8, (void*)IntArray___read16, (void*)IntArray___read32, (void*)IntArray___write8, (void*)IntArray___write16, (void*)IntArray___write32, (void*)IntArray___getString, (void*)IntArray___getString2, (void*)IntArray___getString3, (void*)IntArray__getMin, (void*)IntArray__getMax, (void*)IntArray__getAbsMin, (void*)IntArray__getAbsMax, (void*)IntArray__getMean, (void*)IntArray__getAbsMean, (void*)IntArray__get, (void*)IntArray___set, (void*)IntArray___getRev, (void*)IntArray___setRev, (void*)IntArray___getDefault, (void*)IntArray__identity, (void*)IntArray__sortByValue, (void*)IntArray__rearrange, (void*)IntArray___swap, (void*)IntArray___visit, (void*)IntArray___useAll, (void*)IntArray___getFirst, (void*)IntArray___getLast, (void*)IntArray___join, (void*)IntArray___replace, (void*)IntArray___replaceNeg, (void*)IntArray___inc, (void*)IntArray___dec, (void*)IntArray___getNumUniqueValues, (void*)IntArray___isEqual, (void*)IntArray___findSubArrayOffset}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _IntArray::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _IntArray::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _IntArray::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _IntArray::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL IntArray__alloc      (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->alloc(_args.mem[0].si);}
void  YAC_CALL IntArray__free       (void *_o                                ) {((_IntArray*)_o)->free();}
sSI   YAC_CALL IntArray__add        (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->add(_args.mem[0].si);}
sSI   YAC_CALL IntArray__add2       (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->add2(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL IntArray__add3       (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->add3(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL IntArray__add4       (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->add4(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
sSI   YAC_CALL IntArray__addArray   (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->addArray(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL IntArray__addEmpty   (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->addEmpty(_args.mem[0].si);}
sSI   YAC_CALL IntArray__getNumElements(void *_o                             ) {return (sSI)((_IntArray*)_o)->getNumElements();}
sSI   YAC_CALL IntArray__getMaxElements(void *_o                             ) {return (sSI)((_IntArray*)_o)->getMaxElements();}
void  YAC_CALL IntArray__empty      (void *_o                                ) {((_IntArray*)_o)->empty();}
sSI   YAC_CALL IntArray__isEmpty    (void *_o                                ) {return (sSI)((_IntArray*)_o)->isEmpty();}
sSI   YAC_CALL IntArray__realloc    (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->realloc(_args.mem[0].si);}
sSI   YAC_CALL IntArray__insert     (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->insert(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL IntArray___delete    (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_delete(_args.mem[0].si);}
sSI   YAC_CALL IntArray___delete2   (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_delete2(_args.mem[0].si);}
sSI   YAC_CALL IntArray___delete3   (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_delete3(_args.mem[0].si);}
sSI   YAC_CALL IntArray___delete4   (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_delete4(_args.mem[0].si);}
void  YAC_CALL IntArray__fill       (void *_o, yacmemptr _args               ) {((_IntArray*)_o)->fill(_args.mem[0].si);}
sSI   YAC_CALL IntArray__allocAndFill(void *_o, yacmemptr _args              ) {return (sSI)((_IntArray*)_o)->allocAndFill(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL IntArray__fillRegion (void *_o, yacmemptr _args               ) {((_IntArray*)_o)->fillRegion(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL IntArray__reverse    (void *_o                                ) {((_IntArray*)_o)->reverse();}
void  YAC_CALL IntArray__setNumElements(void *_o, yacmemptr _args            ) {((_IntArray*)_o)->setNumElements(_args.mem[0].si);}
void  YAC_CALL IntArray__swapByteOrder(void *_o                              ) {((_IntArray*)_o)->swapByteOrder();}
sSI   YAC_CALL IntArray__visitBytes (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->visitBytes(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL IntArray__copyFrom   (void *_o, yacmemptr _args               ) {((_IntArray*)_o)->copyFrom(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
sSI   YAC_CALL IntArray__indexOf    (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->indexOf(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL IntArray__indexOfNot (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->indexOfNot(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL IntArray___contains  (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_contains(_args.mem[0].si);}
sSI   YAC_CALL IntArray___remove    (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_remove(_args.mem[0].si);}
sSI   YAC_CALL IntArray___read8     (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_read8(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL IntArray___read16    (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_read16(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL IntArray___read32    (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_read32(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL IntArray___write8    (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_write8(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL IntArray___write16   (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_write16(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL IntArray___write32   (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_write32(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL IntArray___getString (void *_o, YAC_Value *_r                 ) {((_IntArray*)_o)->_getString(_r);}
void  YAC_CALL IntArray___getString2(void *_o, YAC_Value *_r                 ) {((_IntArray*)_o)->_getString2(_r);}
void  YAC_CALL IntArray___getString3(void *_o, YAC_Value *_r                 ) {((_IntArray*)_o)->_getString3(_r);}
sSI   YAC_CALL IntArray__getMin     (void *_o                                ) {return (sSI)((_IntArray*)_o)->getMin();}
sSI   YAC_CALL IntArray__getMax     (void *_o                                ) {return (sSI)((_IntArray*)_o)->getMax();}
sSI   YAC_CALL IntArray__getAbsMin  (void *_o                                ) {return (sSI)((_IntArray*)_o)->getAbsMin();}
sSI   YAC_CALL IntArray__getAbsMax  (void *_o                                ) {return (sSI)((_IntArray*)_o)->getAbsMax();}
sF32  YAC_CALL IntArray__getMean    (void *_o                                ) {return (sF32)((_IntArray*)_o)->getMean();}
sF32  YAC_CALL IntArray__getAbsMean (void *_o                                ) {return (sF32)((_IntArray*)_o)->getAbsMean();}
sSI   YAC_CALL IntArray__get        (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->get(_args.mem[0].si);}
void  YAC_CALL IntArray___set       (void *_o, yacmemptr _args               ) {((_IntArray*)_o)->_set(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL IntArray___getRev    (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_getRev(_args.mem[0].si);}
void  YAC_CALL IntArray___setRev    (void *_o, yacmemptr _args               ) {((_IntArray*)_o)->_setRev(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL IntArray___getDefault(void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_getDefault(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL IntArray__identity   (void *_o, yacmemptr _args               ) {((_IntArray*)_o)->identity(_args.mem[0].si);}
void  YAC_CALL IntArray__sortByValue(void *_o, yacmemptr _args               ) {((_IntArray*)_o)->sortByValue(_args.mem[0].o);}
sSI   YAC_CALL IntArray__rearrange  (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->rearrange(_args.mem[0].o);}
sSI   YAC_CALL IntArray___swap      (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_swap(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL IntArray___visit     (void *_o, yacmemptr _args               ) {((_IntArray*)_o)->_visit(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL IntArray___useAll    (void *_o                                ) {((_IntArray*)_o)->_useAll();}
sSI   YAC_CALL IntArray___getFirst  (void *_o                                ) {return (sSI)((_IntArray*)_o)->_getFirst();}
sSI   YAC_CALL IntArray___getLast   (void *_o                                ) {return (sSI)((_IntArray*)_o)->_getLast();}
sSI   YAC_CALL IntArray___join      (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_join(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL IntArray___replace   (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_replace(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL IntArray___replaceNeg(void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_replaceNeg(_args.mem[0].si);}
void  YAC_CALL IntArray___inc       (void *_o, yacmemptr _args               ) {((_IntArray*)_o)->_inc(_args.mem[0].si);}
void  YAC_CALL IntArray___dec       (void *_o, yacmemptr _args               ) {((_IntArray*)_o)->_dec(_args.mem[0].si);}
sSI   YAC_CALL IntArray___getNumUniqueValues(void *_o                        ) {return (sSI)((_IntArray*)_o)->_getNumUniqueValues();}
sSI   YAC_CALL IntArray___isEqual   (void *_o, yacmemptr _args               ) {return (sSI)((_IntArray*)_o)->_isEqual(_args.mem[0].o);}
sSI   YAC_CALL IntArray___findSubArrayOffset(void *_o, yacmemptr _args       ) {return (sSI)((_IntArray*)_o)->_findSubArrayOffset(_args.mem[0].o);}
#endif // YAC_NO_HOST
