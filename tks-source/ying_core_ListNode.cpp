// ---- ying_core_ListNode.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
void* YAC_CALL ListNode__getHead    (void *                        );
void* YAC_CALL ListNode__getTail    (void *                        );
void* YAC_CALL ListNode__getPrev    (void *                        );
void* YAC_CALL ListNode__getNext    (void *                        );
void  YAC_CALL ListNode___freeList  (void *                        );
void* YAC_CALL ListNode___appendEmpty(void *                       );
void* YAC_CALL ListNode___appendValue(void *, yacmemptr            );
void* YAC_CALL ListNode___append    (void *, yacmemptr             );
void  YAC_CALL ListNode___getString (void *, YAC_Value *           );
void  YAC_CALL ListNode___getDebugString(void *, YAC_Value *       );
void  YAC_CALL ListNode___getDebugStrings(void *, YAC_Value *      );
void  YAC_CALL ListNode___getCopy   (void *, YAC_Value *           );
sSI   YAC_CALL ListNode___getSize   (void *                        );
void* YAC_CALL ListNode__getSubList (void *, yacmemptr             );
#endif // YAC_NO_HOST

// ------------------ YAC class "_ListNode" reflection map (implementation) ------------------
sUI          YAC_VCALL _ListNode::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _ListNode::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _ListNode::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _ListNode::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _ListNode::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _ListNode::yacMethodGetNum                  (void) {return 15;}
const char **YAC_VCALL _ListNode::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "getHead", "getTail", "getPrev", "getNext", "freeList", "appendEmpty", "appendValue", "append", "getString", "getDebugString", "getDebugStrings", "getCopy", "getSize", "getSubList"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _ListNode::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _ListNode::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={3,};static const sUI rt8[]={3,};static const sUI rt9[]={0,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={0,};static const sUI rt13[]={0,};static const sUI rt14[]={1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _ListNode::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _ListNode::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 3, 3, 3, 3, 0, 3, 3, 3, 4, 4, 4, 4, 1, 3}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _ListNode::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", "ListNode", "ListNode", "ListNode", "ListNode", (const char*)0, "ListNode", "ListNode", "ListNode", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _ListNode::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)ListNode__getHead, (void*)ListNode__getTail, (void*)ListNode__getPrev, (void*)ListNode__getNext, (void*)ListNode___freeList, (void*)ListNode___appendEmpty, (void*)ListNode___appendValue, (void*)ListNode___append, (void*)ListNode___getString, (void*)ListNode___getDebugString, (void*)ListNode___getDebugStrings, (void*)ListNode___getCopy, (void*)ListNode___getSize, (void*)ListNode__getSubList}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _ListNode::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _ListNode::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _ListNode::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _ListNode::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
void* YAC_CALL ListNode__getHead    (void *_o                                ) {return (void*)((_ListNode*)_o)->getHead();}
void* YAC_CALL ListNode__getTail    (void *_o                                ) {return (void*)((_ListNode*)_o)->getTail();}
void* YAC_CALL ListNode__getPrev    (void *_o                                ) {return (void*)((_ListNode*)_o)->getPrev();}
void* YAC_CALL ListNode__getNext    (void *_o                                ) {return (void*)((_ListNode*)_o)->getNext();}
void  YAC_CALL ListNode___freeList  (void *_o                                ) {((_ListNode*)_o)->_freeList();}
void* YAC_CALL ListNode___appendEmpty(void *_o                               ) {return (void*)((_ListNode*)_o)->_appendEmpty();}
void* YAC_CALL ListNode___appendValue(void *_o, yacmemptr _args              ) {return (void*)((_ListNode*)_o)->_appendValue(_args.mem[0].o);}
void* YAC_CALL ListNode___append    (void *_o, yacmemptr _args               ) {return (void*)((_ListNode*)_o)->_append(_args.mem[0].o);}
void  YAC_CALL ListNode___getString (void *_o, YAC_Value *_r                 ) {((_ListNode*)_o)->_getString(_r);}
void  YAC_CALL ListNode___getDebugString(void *_o, YAC_Value *_r             ) {((_ListNode*)_o)->_getDebugString(_r);}
void  YAC_CALL ListNode___getDebugStrings(void *_o, YAC_Value *_r            ) {((_ListNode*)_o)->_getDebugStrings(_r);}
void  YAC_CALL ListNode___getCopy   (void *_o, YAC_Value *_r                 ) {((_ListNode*)_o)->_getCopy(_r);}
sSI   YAC_CALL ListNode___getSize   (void *_o                                ) {return (sSI)((_ListNode*)_o)->_getSize();}
void* YAC_CALL ListNode__getSubList (void *_o, yacmemptr _args               ) {return (void*)((_ListNode*)_o)->getSubList(_args.mem[0].si);}
#endif // YAC_NO_HOST
