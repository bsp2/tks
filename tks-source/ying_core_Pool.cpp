// ---- ying_core_Pool.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
void  YAC_CALL Pool__setTemplate    (void *, yacmemptr             );
void* YAC_CALL Pool__getTemplate    (void *                        );
sSI   YAC_CALL Pool___alloc         (void *, yacmemptr             );
void  YAC_CALL Pool___free          (void *                        );
sSI   YAC_CALL Pool__qAlloc         (void *                        );
void  YAC_CALL Pool__qFree          (void *, yacmemptr             );
void  YAC_CALL Pool__empty          (void *                        );
sSI   YAC_CALL Pool__isEmpty        (void *                        );
sSI   YAC_CALL Pool__getNumElements (void *                        );
sSI   YAC_CALL Pool__getMaxElements (void *                        );
void  YAC_CALL Pool___qFreeByObject (void *, yacmemptr             );
sSI   YAC_CALL Pool__getIDByObject  (void *, yacmemptr             );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Pool" reflection map (implementation) ------------------
sUI          YAC_VCALL _Pool::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Pool::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Pool::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Pool::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Pool::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Pool::yacMethodGetNum                  (void) {return 13;}
const char **YAC_VCALL _Pool::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "setTemplate", "getTemplate", "alloc", "free", "qAlloc", "qFree", "empty", "isEmpty", "getNumElements", "getMaxElements", "qFreeByObject", "getIDByObject"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Pool::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Pool::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3,};static const sUI rt2[]={0,};static const sUI rt3[]={1,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={1,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={0,};static const sUI rt11[]={3,};static const sUI rt12[]={3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Pool::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Pool::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 3, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Pool::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Pool::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Pool__setTemplate, (void*)Pool__getTemplate, (void*)Pool___alloc, (void*)Pool___free, (void*)Pool__qAlloc, (void*)Pool__qFree, (void*)Pool__empty, (void*)Pool__isEmpty, (void*)Pool__getNumElements, (void*)Pool__getMaxElements, (void*)Pool___qFreeByObject, (void*)Pool__getIDByObject}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Pool::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Pool::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Pool::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Pool::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
void  YAC_CALL Pool__setTemplate    (void *_o, yacmemptr _args               ) {((_Pool*)_o)->setTemplate(_args.mem[0].o);}
void* YAC_CALL Pool__getTemplate    (void *_o                                ) {return (void*)((_Pool*)_o)->getTemplate();}
sSI   YAC_CALL Pool___alloc         (void *_o, yacmemptr _args               ) {return (sSI)((_Pool*)_o)->_alloc(_args.mem[0].si);}
void  YAC_CALL Pool___free          (void *_o                                ) {((_Pool*)_o)->_free();}
sSI   YAC_CALL Pool__qAlloc         (void *_o                                ) {return (sSI)((_Pool*)_o)->qAlloc();}
void  YAC_CALL Pool__qFree          (void *_o, yacmemptr _args               ) {((_Pool*)_o)->qFree(_args.mem[0].si);}
void  YAC_CALL Pool__empty          (void *_o                                ) {((_Pool*)_o)->empty();}
sSI   YAC_CALL Pool__isEmpty        (void *_o                                ) {return (sSI)((_Pool*)_o)->isEmpty();}
sSI   YAC_CALL Pool__getNumElements (void *_o                                ) {return (sSI)((_Pool*)_o)->getNumElements();}
sSI   YAC_CALL Pool__getMaxElements (void *_o                                ) {return (sSI)((_Pool*)_o)->getMaxElements();}
void  YAC_CALL Pool___qFreeByObject (void *_o, yacmemptr _args               ) {((_Pool*)_o)->_qFreeByObject(_args.mem[0].o);}
sSI   YAC_CALL Pool__getIDByObject  (void *_o, yacmemptr _args               ) {return (sSI)((_Pool*)_o)->getIDByObject(_args.mem[0].o);}
#endif // YAC_NO_HOST
