// ---- ying_core_PakFile.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
sSI   YAC_CALL PakFile__isOpen      (void *                        );
sSI   YAC_CALL PakFile___open       (void *, yacmemptr             );
sSI   YAC_CALL PakFile__openLocal   (void *, yacmemptr             );
#endif // YAC_NO_HOST

// ------------------ YAC class "_PakFile" reflection map (implementation) ------------------
sUI          YAC_VCALL _PakFile::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _PakFile::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _PakFile::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _PakFile::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _PakFile::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _PakFile::yacMethodGetNum                  (void) {return 4;}
const char **YAC_VCALL _PakFile::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "isOpen", "open", "openLocal"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _PakFile::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 1, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _PakFile::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={3,};static const sUI rt3[]={3, 1,};static const sUI *r[]={rt0, rt1, rt2, rt3}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _PakFile::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={"String",};static const char *rs3[]={"String", (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _PakFile::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _PakFile::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _PakFile::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)PakFile__isOpen, (void*)PakFile___open, (void*)PakFile__openLocal}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _PakFile::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _PakFile::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _PakFile::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _PakFile::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL PakFile__isOpen      (void *_o                                ) {return (sSI)((_PakFile*)_o)->isOpen();}
sSI   YAC_CALL PakFile___open       (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_PakFile*)_o)->_open((YAC_String*)_args.mem[0].o);}return 0;}
sSI   YAC_CALL PakFile__openLocal   (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_PakFile*)_o)->openLocal((YAC_String*)_args.mem[0].o, _args.mem[1].si);}return 0;}
#endif // YAC_NO_HOST
