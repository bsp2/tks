// ---- ying_core_Time.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
void  YAC_CALL Time__calc           (void *                        );
sSI   YAC_CALL Time__getMin         (void *                        );
void  YAC_CALL Time__setMin         (void *, yacmemptr             );
sSI   YAC_CALL Time__getHour        (void *                        );
sSI   YAC_CALL Time__getMonth       (void *                        );
sSI   YAC_CALL Time__getMonthday    (void *                        );
sSI   YAC_CALL Time__getNanoSec     (void *                        );
sSI   YAC_CALL Time__getSec         (void *                        );
sSI   YAC_CALL Time__getUtime       (void *                        );
sSI   YAC_CALL Time__getWeekday     (void *                        );
sSI   YAC_CALL Time__getYear        (void *                        );
sSI   YAC_CALL Time__getYearday     (void *                        );
void  YAC_CALL Time___gmtime        (void *                        );
void  YAC_CALL Time___localtime     (void *                        );
void  YAC_CALL Time__now            (void *                        );
void  YAC_CALL Time__setHour        (void *, yacmemptr             );
void  YAC_CALL Time__setMonth       (void *, yacmemptr             );
void  YAC_CALL Time__setNanoSec     (void *, yacmemptr             );
void  YAC_CALL Time__setSec         (void *, yacmemptr             );
void  YAC_CALL Time__setUtime       (void *, yacmemptr             );
void  YAC_CALL Time__setMonthday    (void *, yacmemptr             );
void  YAC_CALL Time__setYear        (void *, yacmemptr             );
void  YAC_CALL Time___getString     (void *, YAC_Value *           );
sSI   YAC_CALL Time___liesBetween   (void *, yacmemptr             );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Time" reflection map (implementation) ------------------
sUI          YAC_VCALL _Time::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Time::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Time::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Time::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Time::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Time::yacMethodGetNum                  (void) {return 25;}
const char **YAC_VCALL _Time::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "calc", "getMin", "setMin", "getHour", "getMonth", "getMonthday", "getNanoSec", "getSec", "getUtime", "getWeekday", "getYear", "getYearday", "gmtime", "localtime", "now", "setHour", "setMonth", "setNanoSec", "setSec", "setUtime", "setMonthday", "setYear", "getString", "liesBetween"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Time::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Time::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={1,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={0,};static const sUI rt13[]={0,};static const sUI rt14[]={0,};static const sUI rt15[]={0,};static const sUI rt16[]={1,};static const sUI rt17[]={1,};static const sUI rt18[]={1,};static const sUI rt19[]={1,};static const sUI rt20[]={1,};static const sUI rt21[]={1,};static const sUI rt22[]={1,};static const sUI rt23[]={0,};static const sUI rt24[]={3, 3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Time::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Time::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Time::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Time::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Time__calc, (void*)Time__getMin, (void*)Time__setMin, (void*)Time__getHour, (void*)Time__getMonth, (void*)Time__getMonthday, (void*)Time__getNanoSec, (void*)Time__getSec, (void*)Time__getUtime, (void*)Time__getWeekday, (void*)Time__getYear, (void*)Time__getYearday, (void*)Time___gmtime, (void*)Time___localtime, (void*)Time__now, (void*)Time__setHour, (void*)Time__setMonth, (void*)Time__setNanoSec, (void*)Time__setSec, (void*)Time__setUtime, (void*)Time__setMonthday, (void*)Time__setYear, (void*)Time___getString, (void*)Time___liesBetween}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Time::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Time::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Time::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Time::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
void  YAC_CALL Time__calc           (void *_o                                ) {((_Time*)_o)->calc();}
sSI   YAC_CALL Time__getMin         (void *_o                                ) {return (sSI)((_Time*)_o)->getMin();}
void  YAC_CALL Time__setMin         (void *_o, yacmemptr _args               ) {((_Time*)_o)->setMin(_args.mem[0].si);}
sSI   YAC_CALL Time__getHour        (void *_o                                ) {return (sSI)((_Time*)_o)->getHour();}
sSI   YAC_CALL Time__getMonth       (void *_o                                ) {return (sSI)((_Time*)_o)->getMonth();}
sSI   YAC_CALL Time__getMonthday    (void *_o                                ) {return (sSI)((_Time*)_o)->getMonthday();}
sSI   YAC_CALL Time__getNanoSec     (void *_o                                ) {return (sSI)((_Time*)_o)->getNanoSec();}
sSI   YAC_CALL Time__getSec         (void *_o                                ) {return (sSI)((_Time*)_o)->getSec();}
sSI   YAC_CALL Time__getUtime       (void *_o                                ) {return (sSI)((_Time*)_o)->getUtime();}
sSI   YAC_CALL Time__getWeekday     (void *_o                                ) {return (sSI)((_Time*)_o)->getWeekday();}
sSI   YAC_CALL Time__getYear        (void *_o                                ) {return (sSI)((_Time*)_o)->getYear();}
sSI   YAC_CALL Time__getYearday     (void *_o                                ) {return (sSI)((_Time*)_o)->getYearday();}
void  YAC_CALL Time___gmtime        (void *_o                                ) {((_Time*)_o)->_gmtime();}
void  YAC_CALL Time___localtime     (void *_o                                ) {((_Time*)_o)->_localtime();}
void  YAC_CALL Time__now            (void *_o                                ) {((_Time*)_o)->now();}
void  YAC_CALL Time__setHour        (void *_o, yacmemptr _args               ) {((_Time*)_o)->setHour(_args.mem[0].si);}
void  YAC_CALL Time__setMonth       (void *_o, yacmemptr _args               ) {((_Time*)_o)->setMonth(_args.mem[0].si);}
void  YAC_CALL Time__setNanoSec     (void *_o, yacmemptr _args               ) {((_Time*)_o)->setNanoSec(_args.mem[0].si);}
void  YAC_CALL Time__setSec         (void *_o, yacmemptr _args               ) {((_Time*)_o)->setSec(_args.mem[0].si);}
void  YAC_CALL Time__setUtime       (void *_o, yacmemptr _args               ) {((_Time*)_o)->setUtime(_args.mem[0].si);}
void  YAC_CALL Time__setMonthday    (void *_o, yacmemptr _args               ) {((_Time*)_o)->setMonthday(_args.mem[0].si);}
void  YAC_CALL Time__setYear        (void *_o, yacmemptr _args               ) {((_Time*)_o)->setYear(_args.mem[0].si);}
void  YAC_CALL Time___getString     (void *_o, YAC_Value *_r                 ) {((_Time*)_o)->_getString(_r);}
sSI   YAC_CALL Time___liesBetween   (void *_o, yacmemptr _args               ) {return (sSI)((_Time*)_o)->_liesBetween(_args.mem[0].o, _args.mem[1].o);}
#endif // YAC_NO_HOST
