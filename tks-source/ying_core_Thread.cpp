// ---- ying_core_Thread.cpp: auto generated by YInG - the YAC interface generator (Wed, 24/Sep/2025 09:42:38)

#ifndef YAC_NO_HOST
sSI   YAC_CALL Thread___create      (void *, yacmemptr             );
void  YAC_CALL Thread___kill        (void *                        );
sSI   YAC_CALL Thread___wait        (void *                        );
sSI   YAC_CALL Thread___getId       (void *                        );
void  YAC_CALL Thread___setUserdata (void *, yacmemptr             );
void* YAC_CALL Thread___getUserdata (void *                        );
sSI   YAC_CALL Thread___isRunning   (void *                        );
void  YAC_CALL Thread___setName     (void *, yacmemptr             );
void  YAC_CALL Thread___getName     (void *, YAC_Value *           );
void  YAC_CALL Thread___setPriority (void *, yacmemptr             );
sSI   YAC_CALL Thread___getPriority (void *                        );
void  YAC_CALL Thread___SetProcessPriorityClass(void *, yacmemptr  );
sSI   YAC_CALL Thread___SetProcessAffinityMask32(void *, yacmemptr );
sSI   YAC_CALL Thread___SetProcessAffinityMaskByString(void *, yacmemptr);
sSI   YAC_CALL Thread___IsAffinityMaskStringBitSet(void *, yacmemptr);
sSI   YAC_CALL Thread___GetMaxAffinityMask32(void *                );
void  YAC_CALL Thread___setAffinityMask32(void *, yacmemptr        );
void  YAC_CALL Thread___setAffinityMaskByString(void *, yacmemptr  );
void  YAC_CALL Thread___setCPUCore  (void *, yacmemptr             );
void  YAC_CALL Thread___allocEventQueue(void *, yacmemptr          );
sSI   YAC_CALL Thread___sendEvent   (void *, yacmemptr             );
void* YAC_CALL Thread___peekEvent   (void *                        );
void* YAC_CALL Thread___peekEventById(void *, yacmemptr            );
void  YAC_CALL Thread___waitEvent   (void *, yacmemptr, YAC_Value *);
void  YAC_CALL Thread___waitEventById(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL Thread___rand        (void *                        );
void  YAC_CALL Thread___srand       (void *, yacmemptr             );
sSI   YAC_CALL Thread___SwitchToThread(void *                      );
sSI   YAC_CALL Thread___Yield       (void *                        );
sSI   YAC_CALL Thread___Delay       (void *                        );
sSI   YAC_CALL Thread___GetNumCPUCores(void *                      );
sSI   YAC_CALL Thread___IsCPUCoreShared(void *, yacmemptr          );
sSI   YAC_CALL Thread___IsPerformanceCPUCore(void *, yacmemptr     );
sSI   YAC_CALL Thread___IsEfficiencyCPUCore(void *, yacmemptr      );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Thread" reflection map (implementation) ------------------
sUI          YAC_VCALL _Thread::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Thread::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Thread::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Thread::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Thread::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Thread::yacMethodGetNum                  (void) {return 35;}
const char **YAC_VCALL _Thread::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "create", "kill", "wait", "getId", "setUserdata", "getUserdata", "isRunning", "setName", "getName", "setPriority", "getPriority", "SetProcessPriorityClass", "SetProcessAffinityMask32", "SetProcessAffinityMaskByString", "IsAffinityMaskStringBitSet", "GetMaxAffinityMask32", "setAffinityMask32", "setAffinityMaskByString", "setCPUCore", "allocEventQueue", "sendEvent", "peekEvent", "peekEventById", "waitEvent", "waitEventById", "rand", "srand", "SwitchToThread", "Yield", "Delay", "GetNumCPUCores", "IsCPUCoreShared", "IsPerformanceCPUCore", "IsEfficiencyCPUCore"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Thread::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 1, 1, 2, 0, 1, 0, 0, 0, 0, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Thread::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={3,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={3,};static const sUI rt9[]={0,};static const sUI rt10[]={1,};static const sUI rt11[]={0,};static const sUI rt12[]={1,};static const sUI rt13[]={1,};static const sUI rt14[]={3,};static const sUI rt15[]={3, 1,};static const sUI rt16[]={0,};static const sUI rt17[]={1,};static const sUI rt18[]={3,};static const sUI rt19[]={1,};static const sUI rt20[]={1,};static const sUI rt21[]={3,};static const sUI rt22[]={0,};static const sUI rt23[]={1,};static const sUI rt24[]={1,};static const sUI rt25[]={1, 1,};static const sUI rt26[]={0,};static const sUI rt27[]={1,};static const sUI rt28[]={0,};static const sUI rt29[]={0,};static const sUI rt30[]={0,};static const sUI rt31[]={0,};static const sUI rt32[]={1,};static const sUI rt33[]={1,};static const sUI rt34[]={1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Thread::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={"String",};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0, (const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0, (const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char *rs34[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Thread::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 0, 1, 1, 0, 3, 1, 0, 4, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 4, 4, 1, 0, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Thread::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Thread::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Thread___create, (void*)Thread___kill, (void*)Thread___wait, (void*)Thread___getId, (void*)Thread___setUserdata, (void*)Thread___getUserdata, (void*)Thread___isRunning, (void*)Thread___setName, (void*)Thread___getName, (void*)Thread___setPriority, (void*)Thread___getPriority, (void*)Thread___SetProcessPriorityClass, (void*)Thread___SetProcessAffinityMask32, (void*)Thread___SetProcessAffinityMaskByString, (void*)Thread___IsAffinityMaskStringBitSet, (void*)Thread___GetMaxAffinityMask32, (void*)Thread___setAffinityMask32, (void*)Thread___setAffinityMaskByString, (void*)Thread___setCPUCore, (void*)Thread___allocEventQueue, (void*)Thread___sendEvent, (void*)Thread___peekEvent, (void*)Thread___peekEventById, (void*)Thread___waitEvent, (void*)Thread___waitEventById, (void*)Thread___rand, (void*)Thread___srand, (void*)Thread___SwitchToThread, (void*)Thread___Yield, (void*)Thread___Delay, (void*)Thread___GetNumCPUCores, (void*)Thread___IsCPUCoreShared, (void*)Thread___IsPerformanceCPUCore, (void*)Thread___IsEfficiencyCPUCore}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Thread::yacConstantGetNum                (void) {return 11;}
const char **YAC_VCALL _Thread::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"THREAD_PRIORITY_ABOVE_NORMAL", "THREAD_PRIORITY_BELOW_NORMAL", "THREAD_PRIORITY_HIGHEST", "THREAD_PRIORITY_IDLE", "THREAD_PRIORITY_LOWEST", "THREAD_PRIORITY_NORMAL", "THREAD_PRIORITY_TIME_CRITICAL", "PROCESS_PRIORITY_CLASS_IDLE", "PROCESS_PRIORITY_CLASS_NORMAL", "PROCESS_PRIORITY_CLASS_HIGH", "PROCESS_PRIORITY_CLASS_REALTIME"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Thread::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL _Thread::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[11]; m.ui=r; m.si[0]=(sSI)1;m.si[1]=(sSI)-1;m.si[2]=(sSI)2;m.si[3]=(sSI)-15;m.si[4]=(sSI)-2;m.si[5]=(sSI)0;m.si[6]=(sSI)15;m.si[7]=(sSI)0;m.si[8]=(sSI)1;m.si[9]=(sSI)2;m.si[10]=(sSI)3;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

#ifndef YAC_NO_HOST
sSI   YAC_CALL Thread___create      (void *_o, yacmemptr _args               ) {return (sSI)((_Thread*)_o)->_create(_args.mem[0].o);}
void  YAC_CALL Thread___kill        (void *_o                                ) {((_Thread*)_o)->_kill();}
sSI   YAC_CALL Thread___wait        (void *_o                                ) {return (sSI)((_Thread*)_o)->_wait();}
sSI   YAC_CALL Thread___getId       (void *_o                                ) {return (sSI)((_Thread*)_o)->_getId();}
void  YAC_CALL Thread___setUserdata (void *_o, yacmemptr _args               ) {((_Thread*)_o)->_setUserdata(_args.mem[0].o);}
void* YAC_CALL Thread___getUserdata (void *_o                                ) {return (void*)((_Thread*)_o)->_getUserdata();}
sSI   YAC_CALL Thread___isRunning   (void *_o                                ) {return (sSI)((_Thread*)_o)->_isRunning();}
void  YAC_CALL Thread___setName     (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_Thread*)_o)->_setName((YAC_String*)_args.mem[0].o);}}
void  YAC_CALL Thread___getName     (void *_o, YAC_Value *_r                 ) {((_Thread*)_o)->_getName(_r);}
void  YAC_CALL Thread___setPriority (void *_o, yacmemptr _args               ) {((_Thread*)_o)->_setPriority(_args.mem[0].si);}
sSI   YAC_CALL Thread___getPriority (void *_o                                ) {return (sSI)((_Thread*)_o)->_getPriority();}
void  YAC_CALL Thread___SetProcessPriorityClass(void *_o, yacmemptr _args    ) {((_Thread*)_o)->_SetProcessPriorityClass(_args.mem[0].si);}
sSI   YAC_CALL Thread___SetProcessAffinityMask32(void *_o, yacmemptr _args   ) {return (sSI)((_Thread*)_o)->_SetProcessAffinityMask32(_args.mem[0].si);}
sSI   YAC_CALL Thread___SetProcessAffinityMaskByString(void *_o, yacmemptr _args) {return (sSI)((_Thread*)_o)->_SetProcessAffinityMaskByString(_args.mem[0].o);}
sSI   YAC_CALL Thread___IsAffinityMaskStringBitSet(void *_o, yacmemptr _args ) {return (sSI)((_Thread*)_o)->_IsAffinityMaskStringBitSet(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL Thread___GetMaxAffinityMask32(void *_o                        ) {return (sSI)((_Thread*)_o)->_GetMaxAffinityMask32();}
void  YAC_CALL Thread___setAffinityMask32(void *_o, yacmemptr _args          ) {((_Thread*)_o)->_setAffinityMask32(_args.mem[0].si);}
void  YAC_CALL Thread___setAffinityMaskByString(void *_o, yacmemptr _args    ) {((_Thread*)_o)->_setAffinityMaskByString(_args.mem[0].o);}
void  YAC_CALL Thread___setCPUCore  (void *_o, yacmemptr _args               ) {((_Thread*)_o)->_setCPUCore(_args.mem[0].si);}
void  YAC_CALL Thread___allocEventQueue(void *_o, yacmemptr _args            ) {((_Thread*)_o)->_allocEventQueue(_args.mem[0].si);}
sSI   YAC_CALL Thread___sendEvent   (void *_o, yacmemptr _args               ) {return (sSI)((_Thread*)_o)->_sendEvent(_args.mem[0].o);}
void* YAC_CALL Thread___peekEvent   (void *_o                                ) {return (void*)((_Thread*)_o)->_peekEvent();}
void* YAC_CALL Thread___peekEventById(void *_o, yacmemptr _args              ) {return (void*)((_Thread*)_o)->_peekEventById(_args.mem[0].si);}
void  YAC_CALL Thread___waitEvent   (void *_o, yacmemptr _args, YAC_Value *_r) {((_Thread*)_o)->_waitEvent(_args.mem[0].si, _r);}
void  YAC_CALL Thread___waitEventById(void *_o, yacmemptr _args, YAC_Value *_r) {((_Thread*)_o)->_waitEventById(_args.mem[0].si, _args.mem[1].si, _r);}
sSI   YAC_CALL Thread___rand        (void *_o                                ) {return (sSI)((_Thread*)_o)->_rand();}
void  YAC_CALL Thread___srand       (void *_o, yacmemptr _args               ) {((_Thread*)_o)->_srand(_args.mem[0].si);}
sSI   YAC_CALL Thread___SwitchToThread(void *_o                              ) {return (sSI)((_Thread*)_o)->_SwitchToThread();}
sSI   YAC_CALL Thread___Yield       (void *_o                                ) {return (sSI)((_Thread*)_o)->_Yield();}
sSI   YAC_CALL Thread___Delay       (void *_o                                ) {return (sSI)((_Thread*)_o)->_Delay();}
sSI   YAC_CALL Thread___GetNumCPUCores(void *_o                              ) {return (sSI)((_Thread*)_o)->_GetNumCPUCores();}
sSI   YAC_CALL Thread___IsCPUCoreShared(void *_o, yacmemptr _args            ) {return (sSI)((_Thread*)_o)->_IsCPUCoreShared(_args.mem[0].si);}
sSI   YAC_CALL Thread___IsPerformanceCPUCore(void *_o, yacmemptr _args       ) {return (sSI)((_Thread*)_o)->_IsPerformanceCPUCore(_args.mem[0].si);}
sSI   YAC_CALL Thread___IsEfficiencyCPUCore(void *_o, yacmemptr _args        ) {return (sSI)((_Thread*)_o)->_IsEfficiencyCPUCore(_args.mem[0].si);}
#endif // YAC_NO_HOST
