// ---- ying_core_Mutex.cpp: auto generated by YInG - the YAC interface generator (Wed, 24/Sep/2025 09:42:38)

#ifndef YAC_NO_HOST
void  YAC_CALL Mutex__lock          (void *                        );
sSI   YAC_CALL Mutex__timedLock     (void *, yacmemptr             );
void  YAC_CALL Mutex__unlock        (void *                        );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Mutex" reflection map (implementation) ------------------
sUI          YAC_VCALL _Mutex::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Mutex::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Mutex::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Mutex::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Mutex::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Mutex::yacMethodGetNum                  (void) {return 4;}
const char **YAC_VCALL _Mutex::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "lock", "timedLock", "unlock"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Mutex::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Mutex::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={1,};static const sUI rt3[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Mutex::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Mutex::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Mutex::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Mutex::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Mutex__lock, (void*)Mutex__timedLock, (void*)Mutex__unlock}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Mutex::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Mutex::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Mutex::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Mutex::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
void  YAC_CALL Mutex__lock          (void *_o                                ) {((_Mutex*)_o)->lock();}
sSI   YAC_CALL Mutex__timedLock     (void *_o, yacmemptr _args               ) {return (sSI)((_Mutex*)_o)->timedLock(_args.mem[0].si);}
void  YAC_CALL Mutex__unlock        (void *_o                                ) {((_Mutex*)_o)->unlock();}
#endif // YAC_NO_HOST
