// ---- ying_core_Language.cpp: auto generated by YInG - the YAC interface generator (Wed, 24/Sep/2025 09:42:38)

#ifndef YAC_NO_HOST
void* YAC_CALL Language__constantToString(void *, yacmemptr        );
void* YAC_CALL Language__scriptClassConstantToString(void *, yacmemptr);
void  YAC_CALL Language__stringToConstant(void *, yacmemptr, YAC_Value *);
void* YAC_CALL Language__findScriptClass(void *, yacmemptr         );
void  YAC_CALL Language__findClassesByPrefix_YAC_RARG(void *, yacmemptr);
void  YAC_CALL Language__findClassesByPrefix_YAC_RVAL(void *, yacmemptr, YAC_Value *);
void  YAC_CALL Language__findClassesByBaseClass(void *, yacmemptr, YAC_Value *);
void  YAC_CALL Language__getClassName(void *, yacmemptr, YAC_Value *);
void  YAC_CALL Language__getNamespaceName(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL Language__getVersion (void *                        );
void* YAC_CALL Language__getVersionString(void *                   );
void  YAC_CALL Language__setIntPropertyByName(void *, yacmemptr    );
void  YAC_CALL Language__setFloatPropertyByName(void *, yacmemptr  );
void  YAC_CALL Language__setObjectPropertyByName(void *, yacmemptr );
sSI   YAC_CALL Language__getPropertyAccessKeyByName(void *, yacmemptr);
sSI   YAC_CALL Language__getPropertyAccessKeyByIndex(void *, yacmemptr);
void  YAC_CALL Language__getPropertyByAccessKey(void *, yacmemptr, YAC_Value *);
void  YAC_CALL Language__getPropertyNameByAccessKey(void *, yacmemptr, YAC_Value *);
void  YAC_CALL Language__getPropertyByName(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL Language__getNumProperties(void *, yacmemptr        );
void  YAC_CALL Language__getPropertyClassName(void *, yacmemptr, YAC_Value *);
void  YAC_CALL Language__newObjectByName(void *, yacmemptr, YAC_Value *);
void  YAC_CALL Language__newObjectArrayByName(void *, yacmemptr, YAC_Value *);
void  YAC_CALL Language__newObjectByID(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL Language__getClassID (void *, yacmemptr             );
sSI   YAC_CALL Language__evalMethodByName(void *, yacmemptr        );
sSI   YAC_CALL Language__classToHashTable(void *, yacmemptr        );
sSI   YAC_CALL Language__hashTableToClass(void *, yacmemptr        );
void  YAC_CALL Language__getMethodArgumentNames(void *, yacmemptr, YAC_Value *);
void  YAC_CALL Language__sleep      (void *, yacmemptr             );
void  YAC_CALL Language___yield     (void *                        );
void  YAC_CALL Language__getMethodNames(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL Language___isBigEndian(void *                       );
sSI   YAC_CALL Language__is64Bit    (void *                        );
void  YAC_CALL Language___reinstallDebugHandler(void *             );
void  YAC_CALL Language__getTksExePath(void *, YAC_Value *         );
void  YAC_CALL Language__getTksExeDir(void *, YAC_Value *          );
void  YAC_CALL Language__getTksPluginPath(void *, YAC_Value *      );
void  YAC_CALL Language__getTksModulePath(void *, YAC_Value *      );
void  YAC_CALL Language__getTksLibraryPath(void *, YAC_Value *     );
void  YAC_CALL Language__getTksApplicationPath(void *, YAC_Value * );
void  YAC_CALL Language__getDllPrefix(void *, YAC_Value *          );
void  YAC_CALL Language__getDllSuffix(void *, YAC_Value *          );
void  YAC_CALL Language__newThreadFromCurrent(void *, YAC_Value *  );
void  YAC_CALL Language__forceUnlockNamedMutex(void *, yacmemptr   );
void  YAC_CALL Language__unlockNamedMutex(void *, yacmemptr        );
void  YAC_CALL Language__lockNamedMutex(void *, yacmemptr          );
void  YAC_CALL Language__getHomeDir (void *, YAC_Value *           );
void  YAC_CALL Language__getCurrentDir(void *, YAC_Value *         );
void  YAC_CALL Language__getExtraFiles(void *, YAC_Value *         );
sSI   YAC_CALL Language__loadLocalTSL(void *, yacmemptr            );
void  YAC_CALL Language__evalScript (void *, yacmemptr, YAC_Value *);
#endif // YAC_NO_HOST

// ------------------ YAC class "_Language" reflection map (implementation) ------------------
sUI          YAC_VCALL _Language::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Language::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Language::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Language::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Language::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Language::yacMethodGetNum                  (void) {return 53;}
const char **YAC_VCALL _Language::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "constantToString", "scriptClassConstantToString", "stringToConstant", "findScriptClass", "findClassesByPrefix_YAC_RARG", "findClassesByPrefix_YAC_RVAL", "findClassesByBaseClass", "getClassName", "getNamespaceName", "getVersion", "getVersionString", "setIntPropertyByName", "setFloatPropertyByName", "setObjectPropertyByName", "getPropertyAccessKeyByName", "getPropertyAccessKeyByIndex", "getPropertyByAccessKey", "getPropertyNameByAccessKey", "getPropertyByName", "getNumProperties", "getPropertyClassName", "newObjectByName", "newObjectArrayByName", "newObjectByID", "getClassID", "evalMethodByName", "classToHashTable", "hashTableToClass", "getMethodArgumentNames", "sleep", "yield", "getMethodNames", "isBigEndian", "is64Bit", "reinstallDebugHandler", "getTksExePath", "getTksExeDir", "getTksPluginPath", "getTksModulePath", "getTksLibraryPath", "getTksApplicationPath", "getDllPrefix", "getDllSuffix", "newThreadFromCurrent", "forceUnlockNamedMutex", "unlockNamedMutex", "lockNamedMutex", "getHomeDir", "getCurrentDir", "getExtraFiles", "loadLocalTSL", "evalScript"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Language::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 2, 3, 1, 2, 3, 2, 2, 1, 1, 0, 0, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 4, 2, 2, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Language::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1, 3,};static const sUI rt2[]={3, 3, 3,};static const sUI rt3[]={3,};static const sUI rt4[]={3, 3,};static const sUI rt5[]={3, 3, 3,};static const sUI rt6[]={3, 3,};static const sUI rt7[]={3, 3,};static const sUI rt8[]={3,};static const sUI rt9[]={3,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={3, 3, 1,};static const sUI rt13[]={3, 3, 2,};static const sUI rt14[]={3, 3, 3,};static const sUI rt15[]={3, 3,};static const sUI rt16[]={3, 1,};static const sUI rt17[]={3, 1,};static const sUI rt18[]={3, 1,};static const sUI rt19[]={3, 3,};static const sUI rt20[]={3,};static const sUI rt21[]={3,};static const sUI rt22[]={3, 3,};static const sUI rt23[]={3, 3,};static const sUI rt24[]={1,};static const sUI rt25[]={3,};static const sUI rt26[]={3, 3, 3, 3,};static const sUI rt27[]={3, 3,};static const sUI rt28[]={3, 3,};static const sUI rt29[]={3, 3, 3,};static const sUI rt30[]={1,};static const sUI rt31[]={0,};static const sUI rt32[]={3,};static const sUI rt33[]={0,};static const sUI rt34[]={0,};static const sUI rt35[]={0,};static const sUI rt36[]={0,};static const sUI rt37[]={0,};static const sUI rt38[]={0,};static const sUI rt39[]={0,};static const sUI rt40[]={0,};static const sUI rt41[]={0,};static const sUI rt42[]={0,};static const sUI rt43[]={0,};static const sUI rt44[]={0,};static const sUI rt45[]={3,};static const sUI rt46[]={3,};static const sUI rt47[]={3,};static const sUI rt48[]={0,};static const sUI rt49[]={0,};static const sUI rt50[]={0,};static const sUI rt51[]={3,};static const sUI rt52[]={3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39, rt40, rt41, rt42, rt43, rt44, rt45, rt46, rt47, rt48, rt49, rt50, rt51, rt52}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Language::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0, "String",};static const char *rs2[]={(const char*)0, (const char*)0, "String",};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0, (const char*)0,};static const char *rs5[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs6[]={(const char*)0, (const char*)0,};static const char *rs7[]={(const char*)0, (const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0, "String", (const char*)0,};static const char *rs13[]={(const char*)0, "String", (const char*)0,};static const char *rs14[]={(const char*)0, "String", (const char*)0,};static const char *rs15[]={(const char*)0, (const char*)0,};static const char *rs16[]={(const char*)0, (const char*)0,};static const char *rs17[]={(const char*)0, (const char*)0,};static const char *rs18[]={(const char*)0, (const char*)0,};static const char *rs19[]={(const char*)0, "String",};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0, (const char*)0,};static const char *rs23[]={(const char*)0, (const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0, "String", (const char*)0, (const char*)0,};static const char *rs27[]={(const char*)0, (const char*)0,};static const char *rs28[]={(const char*)0, (const char*)0,};static const char *rs29[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char *rs34[]={(const char*)0,};static const char *rs35[]={(const char*)0,};static const char *rs36[]={(const char*)0,};static const char *rs37[]={(const char*)0,};static const char *rs38[]={(const char*)0,};static const char *rs39[]={(const char*)0,};static const char *rs40[]={(const char*)0,};static const char *rs41[]={(const char*)0,};static const char *rs42[]={(const char*)0,};static const char *rs43[]={(const char*)0,};static const char *rs44[]={(const char*)0,};static const char *rs45[]={"String",};static const char *rs46[]={"String",};static const char *rs47[]={"String",};static const char *rs48[]={(const char*)0,};static const char *rs49[]={(const char*)0,};static const char *rs50[]={(const char*)0,};static const char *rs51[]={"String",};static const char *rs52[]={"String",};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39, rs40, rs41, rs42, rs43, rs44, rs45, rs46, rs47, rs48, rs49, rs50, rs51, rs52}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Language::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 3, 3, 4, 3, 0, 4, 4, 4, 4, 1, 3, 0, 0, 0, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 1, 1, 1, 1, 4, 0, 0, 4, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 1, 4}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Language::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", "String", "String", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, "String", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Language::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Language__constantToString, (void*)Language__scriptClassConstantToString, (void*)Language__stringToConstant, (void*)Language__findScriptClass, (void*)Language__findClassesByPrefix_YAC_RARG, (void*)Language__findClassesByPrefix_YAC_RVAL, (void*)Language__findClassesByBaseClass, (void*)Language__getClassName, (void*)Language__getNamespaceName, (void*)Language__getVersion, (void*)Language__getVersionString, (void*)Language__setIntPropertyByName, (void*)Language__setFloatPropertyByName, (void*)Language__setObjectPropertyByName, (void*)Language__getPropertyAccessKeyByName, (void*)Language__getPropertyAccessKeyByIndex, (void*)Language__getPropertyByAccessKey, (void*)Language__getPropertyNameByAccessKey, (void*)Language__getPropertyByName, (void*)Language__getNumProperties, (void*)Language__getPropertyClassName, (void*)Language__newObjectByName, (void*)Language__newObjectArrayByName, (void*)Language__newObjectByID, (void*)Language__getClassID, (void*)Language__evalMethodByName, (void*)Language__classToHashTable, (void*)Language__hashTableToClass, (void*)Language__getMethodArgumentNames, (void*)Language__sleep, (void*)Language___yield, (void*)Language__getMethodNames, (void*)Language___isBigEndian, (void*)Language__is64Bit, (void*)Language___reinstallDebugHandler, (void*)Language__getTksExePath, (void*)Language__getTksExeDir, (void*)Language__getTksPluginPath, (void*)Language__getTksModulePath, (void*)Language__getTksLibraryPath, (void*)Language__getTksApplicationPath, (void*)Language__getDllPrefix, (void*)Language__getDllSuffix, (void*)Language__newThreadFromCurrent, (void*)Language__forceUnlockNamedMutex, (void*)Language__unlockNamedMutex, (void*)Language__lockNamedMutex, (void*)Language__getHomeDir, (void*)Language__getCurrentDir, (void*)Language__getExtraFiles, (void*)Language__loadLocalTSL, (void*)Language__evalScript}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Language::yacConstantGetNum                (void) {return 37;}
const char **YAC_VCALL _Language::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"SIGINT", "SIGILL", "SIGFPE", "SIGSEGV", "SIGTERM", "SIGABRT", "YAC_LITTLE_ENDIAN", "YAC_BIG_ENDIAN", "YAC_TYPE_VOID", "YAC_TYPE_INT", "YAC_TYPE_FLOAT", "YAC_TYPE_OBJECT", "YAC_TYPE_STRING", "YAC_OP_ASSIGN", "YAC_OP_ADD", "YAC_OP_SUB", "YAC_OP_MUL", "YAC_OP_DIV", "YAC_OP_MOD", "YAC_OP_SHL", "YAC_OP_SHR", "YAC_OP_CEQ", "YAC_OP_CNE", "YAC_OP_CLE", "YAC_OP_CLT", "YAC_OP_CGE", "YAC_OP_CGT", "YAC_OP_AND", "YAC_OP_OR", "YAC_OP_EOR", "YAC_OP_NOT", "YAC_OP_BITNOT", "YAC_OP_LAND", "YAC_OP_LOR", "YAC_OP_LEOR", "YAC_OP_NEG", "YAC_OP_INIT"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Language::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL _Language::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[37]; m.ui=r; m.si[0]=(sSI)2;m.si[1]=(sSI)4;m.si[2]=(sSI)8;m.si[3]=(sSI)11;m.si[4]=(sSI)15;m.si[5]=(sSI)22;m.si[6]=(sSI)0;m.si[7]=(sSI)1;m.si[8]=(sSI)0;m.si[9]=(sSI)1;m.si[10]=(sSI)2;m.si[11]=(sSI)3;m.si[12]=(sSI)4;m.si[13]=(sSI)0;m.si[14]=(sSI)1;m.si[15]=(sSI)2;m.si[16]=(sSI)3;m.si[17]=(sSI)4;m.si[18]=(sSI)5;m.si[19]=(sSI)6;m.si[20]=(sSI)7;m.si[21]=(sSI)8;m.si[22]=(sSI)9;m.si[23]=(sSI)10;m.si[24]=(sSI)11;m.si[25]=(sSI)12;m.si[26]=(sSI)13;m.si[27]=(sSI)14;m.si[28]=(sSI)15;m.si[29]=(sSI)16;m.si[30]=(sSI)17;m.si[31]=(sSI)18;m.si[32]=(sSI)19;m.si[33]=(sSI)20;m.si[34]=(sSI)21;m.si[35]=(sSI)22;m.si[36]=(sSI)23;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

#ifndef YAC_NO_HOST
void* YAC_CALL Language__constantToString(void *_o, yacmemptr _args          ) {if(YAC_BCHK(_args.mem[1].o, YAC_CLID_STRING)){ return (void*)((_Language*)_o)->constantToString(_args.mem[0].si, (YAC_String*)_args.mem[1].o);}return (void*)0;}
void* YAC_CALL Language__scriptClassConstantToString(void *_o, yacmemptr _args) {if(YAC_BCHK(_args.mem[2].o, YAC_CLID_STRING)){ return (void*)((_Language*)_o)->scriptClassConstantToString(_args.mem[0].o, _args.mem[1].o, (YAC_String*)_args.mem[2].o);}return (void*)0;}
void  YAC_CALL Language__stringToConstant(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->stringToConstant(_args.mem[0].o, _r);}
void* YAC_CALL Language__findScriptClass(void *_o, yacmemptr _args           ) {return (void*)((_Language*)_o)->findScriptClass(_args.mem[0].o, _args.mem[1].o);}
void  YAC_CALL Language__findClassesByPrefix_YAC_RARG(void *_o, yacmemptr _args) {((_Language*)_o)->findClassesByPrefix_YAC_RARG(_args.mem[0].o, _args.mem[1].o, _args.mem[2].o);}
void  YAC_CALL Language__findClassesByPrefix_YAC_RVAL(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->findClassesByPrefix_YAC_RVAL(_args.mem[0].o, _args.mem[1].o, _r);}
void  YAC_CALL Language__findClassesByBaseClass(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->findClassesByBaseClass(_args.mem[0].o, _args.mem[1].o, _r);}
void  YAC_CALL Language__getClassName(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->getClassName(_args.mem[0].o, _r);}
void  YAC_CALL Language__getNamespaceName(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->getNamespaceName(_args.mem[0].o, _r);}
sSI   YAC_CALL Language__getVersion (void *_o                                ) {return (sSI)((_Language*)_o)->getVersion();}
void* YAC_CALL Language__getVersionString(void *_o                           ) {return (void*)((_Language*)_o)->getVersionString();}
void  YAC_CALL Language__setIntPropertyByName(void *_o, yacmemptr _args      ) {if(YAC_BCHK(_args.mem[1].o, YAC_CLID_STRING)){ ((_Language*)_o)->setIntPropertyByName(_args.mem[0].o, (YAC_String*)_args.mem[1].o, _args.mem[2].si);}}
void  YAC_CALL Language__setFloatPropertyByName(void *_o, yacmemptr _args    ) {if(YAC_BCHK(_args.mem[1].o, YAC_CLID_STRING)){ ((_Language*)_o)->setFloatPropertyByName(_args.mem[0].o, (YAC_String*)_args.mem[1].o, _args.mem[2].f32);}}
void  YAC_CALL Language__setObjectPropertyByName(void *_o, yacmemptr _args   ) {if(YAC_BCHK(_args.mem[1].o, YAC_CLID_STRING)){ ((_Language*)_o)->setObjectPropertyByName(_args.mem[0].o, (YAC_String*)_args.mem[1].o, _args.mem[2].o);}}
sSI   YAC_CALL Language__getPropertyAccessKeyByName(void *_o, yacmemptr _args) {return (sSI)((_Language*)_o)->getPropertyAccessKeyByName(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL Language__getPropertyAccessKeyByIndex(void *_o, yacmemptr _args) {return (sSI)((_Language*)_o)->getPropertyAccessKeyByIndex(_args.mem[0].o, _args.mem[1].si);}
void  YAC_CALL Language__getPropertyByAccessKey(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->getPropertyByAccessKey(_args.mem[0].o, _args.mem[1].si, _r);}
void  YAC_CALL Language__getPropertyNameByAccessKey(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->getPropertyNameByAccessKey(_args.mem[0].o, _args.mem[1].si, _r);}
void  YAC_CALL Language__getPropertyByName(void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[1].o, YAC_CLID_STRING)){ ((_Language*)_o)->getPropertyByName(_args.mem[0].o, (YAC_String*)_args.mem[1].o, _r);}}
sSI   YAC_CALL Language__getNumProperties(void *_o, yacmemptr _args          ) {return (sSI)((_Language*)_o)->getNumProperties(_args.mem[0].o);}
void  YAC_CALL Language__getPropertyClassName(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->getPropertyClassName(_args.mem[0].o, _r);}
void  YAC_CALL Language__newObjectByName(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->newObjectByName(_args.mem[0].o, _args.mem[1].o, _r);}
void  YAC_CALL Language__newObjectArrayByName(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->newObjectArrayByName(_args.mem[0].o, _args.mem[1].o, _r);}
void  YAC_CALL Language__newObjectByID(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->newObjectByID(_args.mem[0].si, _r);}
sSI   YAC_CALL Language__getClassID (void *_o, yacmemptr _args               ) {return (sSI)((_Language*)_o)->getClassID(_args.mem[0].o);}
sSI   YAC_CALL Language__evalMethodByName(void *_o, yacmemptr _args          ) {if(YAC_BCHK(_args.mem[1].o, YAC_CLID_STRING)){ return (sSI)((_Language*)_o)->evalMethodByName(_args.mem[0].o, (YAC_String*)_args.mem[1].o, _args.mem[2].o, _args.mem[3].o);}return 0;}
sSI   YAC_CALL Language__classToHashTable(void *_o, yacmemptr _args          ) {return (sSI)((_Language*)_o)->classToHashTable(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL Language__hashTableToClass(void *_o, yacmemptr _args          ) {return (sSI)((_Language*)_o)->hashTableToClass(_args.mem[0].o, _args.mem[1].o);}
void  YAC_CALL Language__getMethodArgumentNames(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->getMethodArgumentNames(_args.mem[0].o, _args.mem[1].o, _args.mem[2].o, _r);}
void  YAC_CALL Language__sleep      (void *_o, yacmemptr _args               ) {((_Language*)_o)->sleep(_args.mem[0].si);}
void  YAC_CALL Language___yield     (void *_o                                ) {((_Language*)_o)->_yield();}
void  YAC_CALL Language__getMethodNames(void *_o, yacmemptr _args, YAC_Value *_r) {((_Language*)_o)->getMethodNames(_args.mem[0].o, _r);}
sSI   YAC_CALL Language___isBigEndian(void *_o                               ) {return (sSI)((_Language*)_o)->_isBigEndian();}
sSI   YAC_CALL Language__is64Bit    (void *_o                                ) {return (sSI)((_Language*)_o)->is64Bit();}
void  YAC_CALL Language___reinstallDebugHandler(void *_o                     ) {((_Language*)_o)->_reinstallDebugHandler();}
void  YAC_CALL Language__getTksExePath(void *_o, YAC_Value *_r               ) {((_Language*)_o)->getTksExePath(_r);}
void  YAC_CALL Language__getTksExeDir(void *_o, YAC_Value *_r                ) {((_Language*)_o)->getTksExeDir(_r);}
void  YAC_CALL Language__getTksPluginPath(void *_o, YAC_Value *_r            ) {((_Language*)_o)->getTksPluginPath(_r);}
void  YAC_CALL Language__getTksModulePath(void *_o, YAC_Value *_r            ) {((_Language*)_o)->getTksModulePath(_r);}
void  YAC_CALL Language__getTksLibraryPath(void *_o, YAC_Value *_r           ) {((_Language*)_o)->getTksLibraryPath(_r);}
void  YAC_CALL Language__getTksApplicationPath(void *_o, YAC_Value *_r       ) {((_Language*)_o)->getTksApplicationPath(_r);}
void  YAC_CALL Language__getDllPrefix(void *_o, YAC_Value *_r                ) {((_Language*)_o)->getDllPrefix(_r);}
void  YAC_CALL Language__getDllSuffix(void *_o, YAC_Value *_r                ) {((_Language*)_o)->getDllSuffix(_r);}
void  YAC_CALL Language__newThreadFromCurrent(void *_o, YAC_Value *_r        ) {((_Language*)_o)->newThreadFromCurrent(_r);}
void  YAC_CALL Language__forceUnlockNamedMutex(void *_o, yacmemptr _args     ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_Language*)_o)->forceUnlockNamedMutex((YAC_String*)_args.mem[0].o);}}
void  YAC_CALL Language__unlockNamedMutex(void *_o, yacmemptr _args          ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_Language*)_o)->unlockNamedMutex((YAC_String*)_args.mem[0].o);}}
void  YAC_CALL Language__lockNamedMutex(void *_o, yacmemptr _args            ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_Language*)_o)->lockNamedMutex((YAC_String*)_args.mem[0].o);}}
void  YAC_CALL Language__getHomeDir (void *_o, YAC_Value *_r                 ) {((_Language*)_o)->getHomeDir(_r);}
void  YAC_CALL Language__getCurrentDir(void *_o, YAC_Value *_r               ) {((_Language*)_o)->getCurrentDir(_r);}
void  YAC_CALL Language__getExtraFiles(void *_o, YAC_Value *_r               ) {((_Language*)_o)->getExtraFiles(_r);}
sSI   YAC_CALL Language__loadLocalTSL(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_Language*)_o)->loadLocalTSL((YAC_String*)_args.mem[0].o);}return 0;}
void  YAC_CALL Language__evalScript (void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_Language*)_o)->evalScript((YAC_String*)_args.mem[0].o, _r);}}
#endif // YAC_NO_HOST
