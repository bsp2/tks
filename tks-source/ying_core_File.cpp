// ---- ying_core_File.cpp: auto generated by YInG - the YAC interface generator (Wed, 24/Sep/2025 09:42:38)

#ifndef YAC_NO_HOST
sSI   YAC_CALL File___open          (void *, yacmemptr             );
sSI   YAC_CALL File__openLocal      (void *, yacmemptr             );
sSI   YAC_CALL File__isOpen         (void *                        );
void  YAC_CALL File__setOffset      (void *, yacmemptr             );
void  YAC_CALL File___seek          (void *, yacmemptr             );
void  YAC_CALL File__flush          (void *                        );
void  YAC_CALL File___openTemp      (void *, yacmemptr, YAC_Value *);
void  YAC_CALL File__removeTemp     (void *                        );
#endif // YAC_NO_HOST

// ------------------ YAC class "_File" reflection map (implementation) ------------------
sUI          YAC_VCALL _File::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _File::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _File::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _File::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _File::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _File::yacMethodGetNum                  (void) {return 9;}
const char **YAC_VCALL _File::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "open", "openLocal", "isOpen", "setOffset", "seek", "flush", "openTemp", "removeTemp"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _File::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 2, 2, 0, 1, 2, 0, 2, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _File::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3, 1,};static const sUI rt2[]={3, 1,};static const sUI rt3[]={0,};static const sUI rt4[]={1,};static const sUI rt5[]={1, 1,};static const sUI rt6[]={0,};static const sUI rt7[]={3, 3,};static const sUI rt8[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _File::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={"String", (const char*)0,};static const char *rs2[]={"String", (const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0, (const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={"String", "String",};static const char *rs8[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _File::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 1, 1, 0, 0, 0, 4, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _File::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _File::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)File___open, (void*)File__openLocal, (void*)File__isOpen, (void*)File__setOffset, (void*)File___seek, (void*)File__flush, (void*)File___openTemp, (void*)File__removeTemp}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _File::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _File::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _File::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _File::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL File___open          (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_File*)_o)->_open((YAC_String*)_args.mem[0].o, _args.mem[1].si);}return 0;}
sSI   YAC_CALL File__openLocal      (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_File*)_o)->openLocal((YAC_String*)_args.mem[0].o, _args.mem[1].si);}return 0;}
sSI   YAC_CALL File__isOpen         (void *_o                                ) {return (sSI)((_File*)_o)->isOpen();}
void  YAC_CALL File__setOffset      (void *_o, yacmemptr _args               ) {((_File*)_o)->setOffset(_args.mem[0].si);}
void  YAC_CALL File___seek          (void *_o, yacmemptr _args               ) {((_File*)_o)->_seek(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL File__flush          (void *_o                                ) {((_File*)_o)->flush();}
void  YAC_CALL File___openTemp      (void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING))if(YAC_BCHK(_args.mem[1].o, YAC_CLID_STRING)){ ((_File*)_o)->_openTemp((YAC_String*)_args.mem[0].o, (YAC_String*)_args.mem[1].o, _r);}}
void  YAC_CALL File__removeTemp     (void *_o                                ) {((_File*)_o)->removeTemp();}
#endif // YAC_NO_HOST
