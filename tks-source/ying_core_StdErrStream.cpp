// ---- ying_core_StdErrStream.cpp: auto generated by YInG - the YAC interface generator (Wed, 24/Sep/2025 09:42:38)

#ifndef YAC_NO_HOST
sSI   YAC_CALL StdErrStream__isOpen (void *                        );
void  YAC_CALL StdErrStream__flush  (void *                        );
#endif // YAC_NO_HOST

// ------------------ YAC class "_StdErrStream" reflection map (implementation) ------------------
sUI          YAC_VCALL _StdErrStream::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _StdErrStream::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _StdErrStream::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _StdErrStream::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _StdErrStream::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _StdErrStream::yacMethodGetNum                  (void) {return 3;}
const char **YAC_VCALL _StdErrStream::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "isOpen", "flush"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _StdErrStream::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _StdErrStream::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI *r[]={rt0, rt1, rt2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _StdErrStream::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _StdErrStream::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _StdErrStream::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _StdErrStream::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)StdErrStream__isOpen, (void*)StdErrStream__flush}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _StdErrStream::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _StdErrStream::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _StdErrStream::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _StdErrStream::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL StdErrStream__isOpen (void *_o                                ) {return (sSI)((_StdErrStream*)_o)->isOpen();}
void  YAC_CALL StdErrStream__flush  (void *_o                                ) {((_StdErrStream*)_o)->flush();}
#endif // YAC_NO_HOST
