// ---- ying_core_ClassArray.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
sSI   YAC_CALL ClassArray__alloc    (void *, yacmemptr             );
void  YAC_CALL ClassArray__free     (void *                        );
sSI   YAC_CALL ClassArray__realloc  (void *, yacmemptr             );
sSI   YAC_CALL ClassArray__getNumElements(void *                   );
sSI   YAC_CALL ClassArray__getMaxElements(void *                   );
void  YAC_CALL ClassArray__empty    (void *                        );
sSI   YAC_CALL ClassArray__isEmpty  (void *                        );
void  YAC_CALL ClassArray__reverse  (void *                        );
void* YAC_CALL ClassArray__getNextFree(void *                      );
void  YAC_CALL ClassArray__setNumElements(void *, yacmemptr        );
sSI   YAC_CALL ClassArray___add     (void *, yacmemptr             );
sSI   YAC_CALL ClassArray___remove  (void *, yacmemptr             );
sSI   YAC_CALL ClassArray___insert  (void *, yacmemptr             );
sSI   YAC_CALL ClassArray___delete  (void *, yacmemptr             );
void* YAC_CALL ClassArray__get      (void *, yacmemptr             );
void  YAC_CALL ClassArray__getDeref (void *, yacmemptr, YAC_Value *);
void  YAC_CALL ClassArray__unlink   (void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL ClassArray__contains (void *, yacmemptr             );
void* YAC_CALL ClassArray__getTemplate(void *                      );
void  YAC_CALL ClassArray__setTemplate(void *, yacmemptr           );
sSI   YAC_CALL ClassArray___swap    (void *, yacmemptr             );
sSI   YAC_CALL ClassArray__indexOfPointer(void *, yacmemptr        );
sSI   YAC_CALL ClassArray__indexOfObject(void *, yacmemptr         );
sSI   YAC_CALL ClassArray__containsObject(void *, yacmemptr        );
sSI   YAC_CALL ClassArray__containsPointer(void *, yacmemptr       );
void* YAC_CALL ClassArray___getFirst(void *                        );
void* YAC_CALL ClassArray___getLast (void *                        );
void  YAC_CALL ClassArray___useAll  (void *                        );
#endif // YAC_NO_HOST

// ------------------ YAC class "_ClassArray" reflection map (implementation) ------------------
sUI          YAC_VCALL _ClassArray::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _ClassArray::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _ClassArray::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _ClassArray::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _ClassArray::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _ClassArray::yacMethodGetNum                  (void) {return 29;}
const char **YAC_VCALL _ClassArray::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "alloc", "free", "realloc", "getNumElements", "getMaxElements", "empty", "isEmpty", "reverse", "getNextFree", "setNumElements", "add", "remove", "insert", "delete", "get", "getDeref", "unlink", "contains", "getTemplate", "setTemplate", "swap", "indexOfPointer", "indexOfObject", "containsObject", "containsPointer", "getFirst", "getLast", "useAll"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _ClassArray::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 2, 2, 2, 1, 1, 0, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _ClassArray::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={0,};static const sUI rt3[]={1,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={1,};static const sUI rt11[]={3,};static const sUI rt12[]={3,};static const sUI rt13[]={1, 3,};static const sUI rt14[]={1,};static const sUI rt15[]={1,};static const sUI rt16[]={1,};static const sUI rt17[]={3,};static const sUI rt18[]={3,};static const sUI rt19[]={0,};static const sUI rt20[]={3,};static const sUI rt21[]={1, 1,};static const sUI rt22[]={3, 1,};static const sUI rt23[]={3, 1,};static const sUI rt24[]={3,};static const sUI rt25[]={3,};static const sUI rt26[]={0,};static const sUI rt27[]={0,};static const sUI rt28[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _ClassArray::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0, (const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0, (const char*)0,};static const char *rs22[]={(const char*)0, (const char*)0,};static const char *rs23[]={(const char*)0, (const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _ClassArray::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 0, 1, 1, 1, 0, 1, 0, 3, 0, 1, 1, 1, 1, 3, 4, 4, 1, 3, 0, 1, 1, 1, 1, 1, 3, 3, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _ClassArray::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _ClassArray::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)ClassArray__alloc, (void*)ClassArray__free, (void*)ClassArray__realloc, (void*)ClassArray__getNumElements, (void*)ClassArray__getMaxElements, (void*)ClassArray__empty, (void*)ClassArray__isEmpty, (void*)ClassArray__reverse, (void*)ClassArray__getNextFree, (void*)ClassArray__setNumElements, (void*)ClassArray___add, (void*)ClassArray___remove, (void*)ClassArray___insert, (void*)ClassArray___delete, (void*)ClassArray__get, (void*)ClassArray__getDeref, (void*)ClassArray__unlink, (void*)ClassArray__contains, (void*)ClassArray__getTemplate, (void*)ClassArray__setTemplate, (void*)ClassArray___swap, (void*)ClassArray__indexOfPointer, (void*)ClassArray__indexOfObject, (void*)ClassArray__containsObject, (void*)ClassArray__containsPointer, (void*)ClassArray___getFirst, (void*)ClassArray___getLast, (void*)ClassArray___useAll}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _ClassArray::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _ClassArray::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _ClassArray::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _ClassArray::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL ClassArray__alloc    (void *_o, yacmemptr _args               ) {return (sSI)((_ClassArray*)_o)->alloc(_args.mem[0].si);}
void  YAC_CALL ClassArray__free     (void *_o                                ) {((_ClassArray*)_o)->free();}
sSI   YAC_CALL ClassArray__realloc  (void *_o, yacmemptr _args               ) {return (sSI)((_ClassArray*)_o)->realloc(_args.mem[0].si);}
sSI   YAC_CALL ClassArray__getNumElements(void *_o                           ) {return (sSI)((_ClassArray*)_o)->getNumElements();}
sSI   YAC_CALL ClassArray__getMaxElements(void *_o                           ) {return (sSI)((_ClassArray*)_o)->getMaxElements();}
void  YAC_CALL ClassArray__empty    (void *_o                                ) {((_ClassArray*)_o)->empty();}
sSI   YAC_CALL ClassArray__isEmpty  (void *_o                                ) {return (sSI)((_ClassArray*)_o)->isEmpty();}
void  YAC_CALL ClassArray__reverse  (void *_o                                ) {((_ClassArray*)_o)->reverse();}
void* YAC_CALL ClassArray__getNextFree(void *_o                              ) {return (void*)((_ClassArray*)_o)->getNextFree();}
void  YAC_CALL ClassArray__setNumElements(void *_o, yacmemptr _args          ) {((_ClassArray*)_o)->setNumElements(_args.mem[0].si);}
sSI   YAC_CALL ClassArray___add     (void *_o, yacmemptr _args               ) {return (sSI)((_ClassArray*)_o)->_add(_args.mem[0].o);}
sSI   YAC_CALL ClassArray___remove  (void *_o, yacmemptr _args               ) {return (sSI)((_ClassArray*)_o)->_remove(_args.mem[0].o);}
sSI   YAC_CALL ClassArray___insert  (void *_o, yacmemptr _args               ) {return (sSI)((_ClassArray*)_o)->_insert(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL ClassArray___delete  (void *_o, yacmemptr _args               ) {return (sSI)((_ClassArray*)_o)->_delete(_args.mem[0].si);}
void* YAC_CALL ClassArray__get      (void *_o, yacmemptr _args               ) {return (void*)((_ClassArray*)_o)->get(_args.mem[0].si);}
void  YAC_CALL ClassArray__getDeref (void *_o, yacmemptr _args, YAC_Value *_r) {((_ClassArray*)_o)->getDeref(_args.mem[0].si, _r);}
void  YAC_CALL ClassArray__unlink   (void *_o, yacmemptr _args, YAC_Value *_r) {((_ClassArray*)_o)->unlink(_args.mem[0].o, _r);}
sSI   YAC_CALL ClassArray__contains (void *_o, yacmemptr _args               ) {return (sSI)((_ClassArray*)_o)->contains(_args.mem[0].o);}
void* YAC_CALL ClassArray__getTemplate(void *_o                              ) {return (void*)((_ClassArray*)_o)->getTemplate();}
void  YAC_CALL ClassArray__setTemplate(void *_o, yacmemptr _args             ) {((_ClassArray*)_o)->setTemplate(_args.mem[0].o);}
sSI   YAC_CALL ClassArray___swap    (void *_o, yacmemptr _args               ) {return (sSI)((_ClassArray*)_o)->_swap(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL ClassArray__indexOfPointer(void *_o, yacmemptr _args          ) {return (sSI)((_ClassArray*)_o)->indexOfPointer(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL ClassArray__indexOfObject(void *_o, yacmemptr _args           ) {return (sSI)((_ClassArray*)_o)->indexOfObject(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL ClassArray__containsObject(void *_o, yacmemptr _args          ) {return (sSI)((_ClassArray*)_o)->containsObject(_args.mem[0].o);}
sSI   YAC_CALL ClassArray__containsPointer(void *_o, yacmemptr _args         ) {return (sSI)((_ClassArray*)_o)->containsPointer(_args.mem[0].o);}
void* YAC_CALL ClassArray___getFirst(void *_o                                ) {return (void*)((_ClassArray*)_o)->_getFirst();}
void* YAC_CALL ClassArray___getLast (void *_o                                ) {return (void*)((_ClassArray*)_o)->_getLast();}
void  YAC_CALL ClassArray___useAll  (void *_o                                ) {((_ClassArray*)_o)->_useAll();}
#endif // YAC_NO_HOST
