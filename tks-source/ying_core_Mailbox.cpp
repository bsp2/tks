// ---- ying_core_Mailbox.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
sSI   YAC_CALL Mailbox__getNumQueuedEvents(void *                  );
void  YAC_CALL Mailbox__freeEventQueue(void *                      );
void  YAC_CALL Mailbox__allocEventQueue(void *, yacmemptr          );
sSI   YAC_CALL Mailbox___sendEvent  (void *, yacmemptr             );
void  YAC_CALL Mailbox__waitEvent   (void *, yacmemptr, YAC_Value *);
void  YAC_CALL Mailbox__waitEventById(void *, yacmemptr, YAC_Value *);
#endif // YAC_NO_HOST

// ------------------ YAC class "_Mailbox" reflection map (implementation) ------------------
sUI          YAC_VCALL _Mailbox::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Mailbox::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Mailbox::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Mailbox::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Mailbox::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Mailbox::yacMethodGetNum                  (void) {return 7;}
const char **YAC_VCALL _Mailbox::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "getNumQueuedEvents", "freeEventQueue", "allocEventQueue", "sendEvent", "waitEvent", "waitEventById"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Mailbox::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 1, 1, 1, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Mailbox::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={1,};static const sUI rt4[]={3,};static const sUI rt5[]={1,};static const sUI rt6[]={1, 1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Mailbox::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Mailbox::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 0, 0, 1, 4, 4}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Mailbox::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Mailbox::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Mailbox__getNumQueuedEvents, (void*)Mailbox__freeEventQueue, (void*)Mailbox__allocEventQueue, (void*)Mailbox___sendEvent, (void*)Mailbox__waitEvent, (void*)Mailbox__waitEventById}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Mailbox::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Mailbox::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Mailbox::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Mailbox::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL Mailbox__getNumQueuedEvents(void *_o                          ) {return (sSI)((_Mailbox*)_o)->getNumQueuedEvents();}
void  YAC_CALL Mailbox__freeEventQueue(void *_o                              ) {((_Mailbox*)_o)->freeEventQueue();}
void  YAC_CALL Mailbox__allocEventQueue(void *_o, yacmemptr _args            ) {((_Mailbox*)_o)->allocEventQueue(_args.mem[0].si);}
sSI   YAC_CALL Mailbox___sendEvent  (void *_o, yacmemptr _args               ) {return (sSI)((_Mailbox*)_o)->_sendEvent(_args.mem[0].o);}
void  YAC_CALL Mailbox__waitEvent   (void *_o, yacmemptr _args, YAC_Value *_r) {((_Mailbox*)_o)->waitEvent(_args.mem[0].si, _r);}
void  YAC_CALL Mailbox__waitEventById(void *_o, yacmemptr _args, YAC_Value *_r) {((_Mailbox*)_o)->waitEventById(_args.mem[0].si, _args.mem[1].si, _r);}
#endif // YAC_NO_HOST
