// ---- ying_core_LFSR.cpp: auto generated by YInG - the YAC interface generator (Wed, 24/Sep/2025 09:42:38)

#ifndef YAC_NO_HOST
void  YAC_CALL LFSR__init           (void *, yacmemptr             );
sSI   YAC_CALL LFSR__rands          (void *                        );
sSI   YAC_CALL LFSR__randu          (void *                        );
sF32  YAC_CALL LFSR__randf          (void *, yacmemptr             );
#endif // YAC_NO_HOST

// ------------------ YAC class "_LFSR" reflection map (implementation) ------------------
sUI          YAC_VCALL _LFSR::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _LFSR::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _LFSR::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _LFSR::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _LFSR::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _LFSR::yacMethodGetNum                  (void) {return 5;}
const char **YAC_VCALL _LFSR::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "init", "rands", "randu", "randf"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _LFSR::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 2, 0, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _LFSR::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1, 1,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={2,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _LFSR::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0, (const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _LFSR::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 1, 1, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _LFSR::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _LFSR::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)LFSR__init, (void*)LFSR__rands, (void*)LFSR__randu, (void*)LFSR__randf}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _LFSR::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _LFSR::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _LFSR::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _LFSR::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
void  YAC_CALL LFSR__init           (void *_o, yacmemptr _args               ) {((_LFSR*)_o)->init(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL LFSR__rands          (void *_o                                ) {return (sSI)((_LFSR*)_o)->rands();}
sSI   YAC_CALL LFSR__randu          (void *_o                                ) {return (sSI)((_LFSR*)_o)->randu();}
sF32  YAC_CALL LFSR__randf          (void *_o, yacmemptr _args               ) {return (sF32)((_LFSR*)_o)->randf(_args.mem[0].f32);}
#endif // YAC_NO_HOST
