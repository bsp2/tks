// ---- ying_core_Envelope.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
sF32  YAC_CALL Envelope__get        (void *                        );
sF32  YAC_CALL Envelope__getAndResetNew(void *, yacmemptr          );
void  YAC_CALL Envelope__reset      (void *                        );
void  YAC_CALL Envelope__setInterpolation(void *, yacmemptr        );
sSI   YAC_CALL Envelope__getInterpolation(void *                   );
void  YAC_CALL Envelope__tickPrecise(void *, yacmemptr             );
void  YAC_CALL Envelope__setSpeed   (void *, yacmemptr             );
sF32  YAC_CALL Envelope__getSpeed   (void *                        );
sF32  YAC_CALL Envelope__getTime    (void *                        );
void  YAC_CALL Envelope__setTime    (void *, yacmemptr             );
sF32  YAC_CALL Envelope__getDeltaTime(void *                       );
sSI   YAC_CALL Envelope__isNewEvent (void *                        );
void  YAC_CALL Envelope__valueAtTimeRaster(void *, yacmemptr, YAC_Value *);
void  YAC_CALL Envelope__valueAtTimeSH(void *, yacmemptr, YAC_Value *);
sF32  YAC_CALL Envelope__valueAtTime(void *, yacmemptr             );
sSI   YAC_CALL Envelope__timeToIndex(void *, yacmemptr             );
sF32  YAC_CALL Envelope__indexToTime(void *, yacmemptr             );
void  YAC_CALL Envelope__insertReplaceEvent(void *, yacmemptr      );
void  YAC_CALL Envelope__insertReplaceEventMSB4(void *, yacmemptr  );
void  YAC_CALL Envelope__insertReplaceEventLSB4(void *, yacmemptr  );
void  YAC_CALL Envelope__insertReplaceEventPat1(void *, yacmemptr  );
void  YAC_CALL Envelope__insertReplaceEventPat2(void *, yacmemptr  );
void  YAC_CALL Envelope__insertReplaceEventPat3(void *, yacmemptr  );
void  YAC_CALL Envelope__removeEvent(void *, yacmemptr             );
void  YAC_CALL Envelope__removeRange(void *, yacmemptr             );
void  YAC_CALL Envelope__removeRangeUntilNext(void *, yacmemptr    );
void  YAC_CALL Envelope__removeRangeSH(void *, yacmemptr           );
void  YAC_CALL Envelope__shiftEvents(void *, yacmemptr             );
void  YAC_CALL Envelope__shiftNextEvent(void *, yacmemptr          );
sF32  YAC_CALL Envelope__getNextEventTimeAfter(void *, yacmemptr   );
void  YAC_CALL Envelope__rotateEvents(void *, yacmemptr            );
sF32  YAC_CALL Envelope__getPreviousEventTimeBefore(void *, yacmemptr);
sSI   YAC_CALL Envelope__getCurrentIndex(void *                    );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Envelope" reflection map (implementation) ------------------
sUI          YAC_VCALL _Envelope::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Envelope::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Envelope::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Envelope::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Envelope::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Envelope::yacMethodGetNum                  (void) {return 34;}
const char **YAC_VCALL _Envelope::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "get", "getAndResetNew", "reset", "setInterpolation", "getInterpolation", "tickPrecise", "setSpeed", "getSpeed", "getTime", "setTime", "getDeltaTime", "isNewEvent", "valueAtTimeRaster", "valueAtTimeSH", "valueAtTime", "timeToIndex", "indexToTime", "insertReplaceEvent", "insertReplaceEventMSB4", "insertReplaceEventLSB4", "insertReplaceEventPat1", "insertReplaceEventPat2", "insertReplaceEventPat3", "removeEvent", "removeRange", "removeRangeUntilNext", "removeRangeSH", "shiftEvents", "shiftNextEvent", "getNextEventTimeAfter", "rotateEvents", "getPreviousEventTimeBefore", "getCurrentIndex"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Envelope::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 2, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 2, 3, 2, 2, 3, 1, 3, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Envelope::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={1,};static const sUI rt3[]={0,};static const sUI rt4[]={1,};static const sUI rt5[]={0,};static const sUI rt6[]={2,};static const sUI rt7[]={2,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={2,};static const sUI rt11[]={0,};static const sUI rt12[]={0,};static const sUI rt13[]={2, 2,};static const sUI rt14[]={2,};static const sUI rt15[]={2,};static const sUI rt16[]={2,};static const sUI rt17[]={1,};static const sUI rt18[]={2, 2, 2,};static const sUI rt19[]={2, 1, 2,};static const sUI rt20[]={2, 1, 2,};static const sUI rt21[]={2, 1, 2,};static const sUI rt22[]={2, 1, 2,};static const sUI rt23[]={2, 1, 2,};static const sUI rt24[]={2,};static const sUI rt25[]={2, 2,};static const sUI rt26[]={2, 2, 2,};static const sUI rt27[]={2, 2,};static const sUI rt28[]={2, 2,};static const sUI rt29[]={2, 2, 2,};static const sUI rt30[]={2,};static const sUI rt31[]={2, 2, 2,};static const sUI rt32[]={2,};static const sUI rt33[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Envelope::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0, (const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs19[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs20[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs21[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs22[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs23[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0, (const char*)0,};static const char *rs26[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs27[]={(const char*)0, (const char*)0,};static const char *rs28[]={(const char*)0, (const char*)0,};static const char *rs29[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Envelope::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 2, 2, 0, 0, 1, 0, 0, 2, 2, 0, 2, 1, 4, 4, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Envelope::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Envelope::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Envelope__get, (void*)Envelope__getAndResetNew, (void*)Envelope__reset, (void*)Envelope__setInterpolation, (void*)Envelope__getInterpolation, (void*)Envelope__tickPrecise, (void*)Envelope__setSpeed, (void*)Envelope__getSpeed, (void*)Envelope__getTime, (void*)Envelope__setTime, (void*)Envelope__getDeltaTime, (void*)Envelope__isNewEvent, (void*)Envelope__valueAtTimeRaster, (void*)Envelope__valueAtTimeSH, (void*)Envelope__valueAtTime, (void*)Envelope__timeToIndex, (void*)Envelope__indexToTime, (void*)Envelope__insertReplaceEvent, (void*)Envelope__insertReplaceEventMSB4, (void*)Envelope__insertReplaceEventLSB4, (void*)Envelope__insertReplaceEventPat1, (void*)Envelope__insertReplaceEventPat2, (void*)Envelope__insertReplaceEventPat3, (void*)Envelope__removeEvent, (void*)Envelope__removeRange, (void*)Envelope__removeRangeUntilNext, (void*)Envelope__removeRangeSH, (void*)Envelope__shiftEvents, (void*)Envelope__shiftNextEvent, (void*)Envelope__getNextEventTimeAfter, (void*)Envelope__rotateEvents, (void*)Envelope__getPreviousEventTimeBefore, (void*)Envelope__getCurrentIndex}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Envelope::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Envelope::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Envelope::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Envelope::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sF32  YAC_CALL Envelope__get        (void *_o                                ) {return (sF32)((_Envelope*)_o)->get();}
sF32  YAC_CALL Envelope__getAndResetNew(void *_o, yacmemptr _args            ) {return (sF32)((_Envelope*)_o)->getAndResetNew(_args.mem[0].si);}
void  YAC_CALL Envelope__reset      (void *_o                                ) {((_Envelope*)_o)->reset();}
void  YAC_CALL Envelope__setInterpolation(void *_o, yacmemptr _args          ) {((_Envelope*)_o)->setInterpolation(_args.mem[0].si);}
sSI   YAC_CALL Envelope__getInterpolation(void *_o                           ) {return (sSI)((_Envelope*)_o)->getInterpolation();}
void  YAC_CALL Envelope__tickPrecise(void *_o, yacmemptr _args               ) {((_Envelope*)_o)->tickPrecise(_args.mem[0].f32);}
void  YAC_CALL Envelope__setSpeed   (void *_o, yacmemptr _args               ) {((_Envelope*)_o)->setSpeed(_args.mem[0].f32);}
sF32  YAC_CALL Envelope__getSpeed   (void *_o                                ) {return (sF32)((_Envelope*)_o)->getSpeed();}
sF32  YAC_CALL Envelope__getTime    (void *_o                                ) {return (sF32)((_Envelope*)_o)->getTime();}
void  YAC_CALL Envelope__setTime    (void *_o, yacmemptr _args               ) {((_Envelope*)_o)->setTime(_args.mem[0].f32);}
sF32  YAC_CALL Envelope__getDeltaTime(void *_o                               ) {return (sF32)((_Envelope*)_o)->getDeltaTime();}
sSI   YAC_CALL Envelope__isNewEvent (void *_o                                ) {return (sSI)((_Envelope*)_o)->isNewEvent();}
void  YAC_CALL Envelope__valueAtTimeRaster(void *_o, yacmemptr _args, YAC_Value *_r) {((_Envelope*)_o)->valueAtTimeRaster(_args.mem[0].f32, _args.mem[1].f32, _r);}
void  YAC_CALL Envelope__valueAtTimeSH(void *_o, yacmemptr _args, YAC_Value *_r) {((_Envelope*)_o)->valueAtTimeSH(_args.mem[0].f32, _r);}
sF32  YAC_CALL Envelope__valueAtTime(void *_o, yacmemptr _args               ) {return (sF32)((_Envelope*)_o)->valueAtTime(_args.mem[0].f32);}
sSI   YAC_CALL Envelope__timeToIndex(void *_o, yacmemptr _args               ) {return (sSI)((_Envelope*)_o)->timeToIndex(_args.mem[0].f32);}
sF32  YAC_CALL Envelope__indexToTime(void *_o, yacmemptr _args               ) {return (sF32)((_Envelope*)_o)->indexToTime(_args.mem[0].si);}
void  YAC_CALL Envelope__insertReplaceEvent(void *_o, yacmemptr _args        ) {((_Envelope*)_o)->insertReplaceEvent(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].f32);}
void  YAC_CALL Envelope__insertReplaceEventMSB4(void *_o, yacmemptr _args    ) {((_Envelope*)_o)->insertReplaceEventMSB4(_args.mem[0].f32, _args.mem[1].si, _args.mem[2].f32);}
void  YAC_CALL Envelope__insertReplaceEventLSB4(void *_o, yacmemptr _args    ) {((_Envelope*)_o)->insertReplaceEventLSB4(_args.mem[0].f32, _args.mem[1].si, _args.mem[2].f32);}
void  YAC_CALL Envelope__insertReplaceEventPat1(void *_o, yacmemptr _args    ) {((_Envelope*)_o)->insertReplaceEventPat1(_args.mem[0].f32, _args.mem[1].si, _args.mem[2].f32);}
void  YAC_CALL Envelope__insertReplaceEventPat2(void *_o, yacmemptr _args    ) {((_Envelope*)_o)->insertReplaceEventPat2(_args.mem[0].f32, _args.mem[1].si, _args.mem[2].f32);}
void  YAC_CALL Envelope__insertReplaceEventPat3(void *_o, yacmemptr _args    ) {((_Envelope*)_o)->insertReplaceEventPat3(_args.mem[0].f32, _args.mem[1].si, _args.mem[2].f32);}
void  YAC_CALL Envelope__removeEvent(void *_o, yacmemptr _args               ) {((_Envelope*)_o)->removeEvent(_args.mem[0].f32);}
void  YAC_CALL Envelope__removeRange(void *_o, yacmemptr _args               ) {((_Envelope*)_o)->removeRange(_args.mem[0].f32, _args.mem[1].f32);}
void  YAC_CALL Envelope__removeRangeUntilNext(void *_o, yacmemptr _args      ) {((_Envelope*)_o)->removeRangeUntilNext(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].f32);}
void  YAC_CALL Envelope__removeRangeSH(void *_o, yacmemptr _args             ) {((_Envelope*)_o)->removeRangeSH(_args.mem[0].f32, _args.mem[1].f32);}
void  YAC_CALL Envelope__shiftEvents(void *_o, yacmemptr _args               ) {((_Envelope*)_o)->shiftEvents(_args.mem[0].f32, _args.mem[1].f32);}
void  YAC_CALL Envelope__shiftNextEvent(void *_o, yacmemptr _args            ) {((_Envelope*)_o)->shiftNextEvent(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].f32);}
sF32  YAC_CALL Envelope__getNextEventTimeAfter(void *_o, yacmemptr _args     ) {return (sF32)((_Envelope*)_o)->getNextEventTimeAfter(_args.mem[0].f32);}
void  YAC_CALL Envelope__rotateEvents(void *_o, yacmemptr _args              ) {((_Envelope*)_o)->rotateEvents(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].f32);}
sF32  YAC_CALL Envelope__getPreviousEventTimeBefore(void *_o, yacmemptr _args) {return (sF32)((_Envelope*)_o)->getPreviousEventTimeBefore(_args.mem[0].f32);}
sSI   YAC_CALL Envelope__getCurrentIndex(void *_o                            ) {return (sSI)((_Envelope*)_o)->getCurrentIndex();}
#endif // YAC_NO_HOST
