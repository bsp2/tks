// ---- ying_core_SharedBuffer.cpp: auto generated by YInG - the YAC interface generator (Wed, 24/Sep/2025 09:42:38)

#ifndef YAC_NO_HOST
sSI   YAC_CALL SharedBuffer__allocSharedMemory(void *, yacmemptr   );
sSI   YAC_CALL SharedBuffer__allocSharedMemoryByKey(void *, yacmemptr);
void* YAC_CALL SharedBuffer__getSharedMemoryKey(void *             );
sSI   YAC_CALL SharedBuffer__visitSharedMemory(void *, yacmemptr   );
sSI   YAC_CALL SharedBuffer__lock   (void *, yacmemptr             );
void  YAC_CALL SharedBuffer__unlock (void *                        );
sSI   YAC_CALL SharedBuffer__isOpen (void *                        );
sSI   YAC_CALL SharedBuffer__isOwner(void *                        );
#endif // YAC_NO_HOST

// ------------------ YAC class "_SharedBuffer" reflection map (implementation) ------------------
sUI          YAC_VCALL _SharedBuffer::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _SharedBuffer::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _SharedBuffer::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _SharedBuffer::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _SharedBuffer::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _SharedBuffer::yacMethodGetNum                  (void) {return 9;}
const char **YAC_VCALL _SharedBuffer::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "allocSharedMemory", "allocSharedMemoryByKey", "getSharedMemoryKey", "visitSharedMemory", "lock", "unlock", "isOpen", "isOwner"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _SharedBuffer::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 2, 0, 2, 1, 0, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _SharedBuffer::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={3, 1,};static const sUI rt3[]={0,};static const sUI rt4[]={3, 1,};static const sUI rt5[]={2,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _SharedBuffer::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={"String", (const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={"String", (const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _SharedBuffer::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 1, 3, 1, 1, 0, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _SharedBuffer::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, "String", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _SharedBuffer::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)SharedBuffer__allocSharedMemory, (void*)SharedBuffer__allocSharedMemoryByKey, (void*)SharedBuffer__getSharedMemoryKey, (void*)SharedBuffer__visitSharedMemory, (void*)SharedBuffer__lock, (void*)SharedBuffer__unlock, (void*)SharedBuffer__isOpen, (void*)SharedBuffer__isOwner}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _SharedBuffer::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _SharedBuffer::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _SharedBuffer::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _SharedBuffer::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL SharedBuffer__allocSharedMemory(void *_o, yacmemptr _args     ) {return (sSI)((_SharedBuffer*)_o)->allocSharedMemory(_args.mem[0].si);}
sSI   YAC_CALL SharedBuffer__allocSharedMemoryByKey(void *_o, yacmemptr _args) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_SharedBuffer*)_o)->allocSharedMemoryByKey((YAC_String*)_args.mem[0].o, _args.mem[1].si);}return 0;}
void* YAC_CALL SharedBuffer__getSharedMemoryKey(void *_o                     ) {return (void*)((_SharedBuffer*)_o)->getSharedMemoryKey();}
sSI   YAC_CALL SharedBuffer__visitSharedMemory(void *_o, yacmemptr _args     ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_SharedBuffer*)_o)->visitSharedMemory((YAC_String*)_args.mem[0].o, _args.mem[1].si);}return 0;}
sSI   YAC_CALL SharedBuffer__lock   (void *_o, yacmemptr _args               ) {return (sSI)((_SharedBuffer*)_o)->lock(_args.mem[0].f32);}
void  YAC_CALL SharedBuffer__unlock (void *_o                                ) {((_SharedBuffer*)_o)->unlock();}
sSI   YAC_CALL SharedBuffer__isOpen (void *_o                                ) {return (sSI)((_SharedBuffer*)_o)->isOpen();}
sSI   YAC_CALL SharedBuffer__isOwner(void *_o                                ) {return (sSI)((_SharedBuffer*)_o)->isOwner();}
#endif // YAC_NO_HOST
