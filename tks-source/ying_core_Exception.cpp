// ---- ying_core_Exception.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
sSI   YAC_CALL Exception__getId     (void *                        );
void* YAC_CALL Exception__getName   (void *                        );
void  YAC_CALL Exception__getFullName(void *, YAC_Value *          );
void* YAC_CALL Exception__getMessage(void *                        );
void  YAC_CALL Exception__getStackTrace(void *, YAC_Value *        );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Exception" reflection map (implementation) ------------------
sUI          YAC_VCALL _Exception::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Exception::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Exception::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Exception::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Exception::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Exception::yacMethodGetNum                  (void) {return 6;}
const char **YAC_VCALL _Exception::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "getId", "getName", "getFullName", "getMessage", "getStackTrace"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Exception::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Exception::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Exception::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Exception::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 3, 4, 3, 4}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Exception::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, "String", (const char*)0, "String", (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Exception::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Exception__getId, (void*)Exception__getName, (void*)Exception__getFullName, (void*)Exception__getMessage, (void*)Exception__getStackTrace}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Exception::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Exception::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Exception::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Exception::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL Exception__getId     (void *_o                                ) {return (sSI)((_Exception*)_o)->getId();}
void* YAC_CALL Exception__getName   (void *_o                                ) {return (void*)((_Exception*)_o)->getName();}
void  YAC_CALL Exception__getFullName(void *_o, YAC_Value *_r                ) {((_Exception*)_o)->getFullName(_r);}
void* YAC_CALL Exception__getMessage(void *_o                                ) {return (void*)((_Exception*)_o)->getMessage();}
void  YAC_CALL Exception__getStackTrace(void *_o, YAC_Value *_r              ) {((_Exception*)_o)->getStackTrace(_r);}
#endif // YAC_NO_HOST
