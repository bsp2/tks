// ---- ying_core_Script.cpp: auto generated by YInG - the YAC interface generator (Wed, 17/Sep/2025 19:04:45)

#ifndef YAC_NO_HOST
sSI   YAC_CALL Script__setClassNamespace(void *, yacmemptr         );
void  YAC_CALL Script__installPrintHook(void *                     );
void  YAC_CALL Script__uninstallPrintHook(void *                   );
void  YAC_CALL Script__getPrintHookOutputAndClear(void *, YAC_Value *);
void  YAC_CALL Script__setLineOffset(void *, yacmemptr             );
sSI   YAC_CALL Script__load         (void *, yacmemptr             );
void  YAC_CALL Script__unload       (void *                        );
sSI   YAC_CALL Script__getLastErrorLineIndex(void *                );
void  YAC_CALL Script__findVariable (void *, yacmemptr, YAC_Value *);
void  YAC_CALL Script__findTaggedVariableByIndex(void *, yacmemptr, YAC_Value *);
void  YAC_CALL Script__findFunction (void *, yacmemptr, YAC_Value *);
void  YAC_CALL Script__eval         (void *                        );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Script" reflection map (implementation) ------------------
sUI          YAC_VCALL _Script::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Script::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Script::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Script::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Script::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Script::yacMethodGetNum                  (void) {return 13;}
const char **YAC_VCALL _Script::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "setClassNamespace", "installPrintHook", "uninstallPrintHook", "getPrintHookOutputAndClear", "setLineOffset", "load", "unload", "getLastErrorLineIndex", "findVariable", "findTaggedVariableByIndex", "findFunction", "eval"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Script::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Script::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={1,};static const sUI rt6[]={3,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={3,};static const sUI rt10[]={1,};static const sUI rt11[]={3,};static const sUI rt12[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Script::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={"String",};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={"String",};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={"String",};static const char *rs10[]={(const char*)0,};static const char *rs11[]={"String",};static const char *rs12[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Script::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 0, 0, 4, 0, 1, 0, 1, 4, 4, 4, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Script::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Script::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Script__setClassNamespace, (void*)Script__installPrintHook, (void*)Script__uninstallPrintHook, (void*)Script__getPrintHookOutputAndClear, (void*)Script__setLineOffset, (void*)Script__load, (void*)Script__unload, (void*)Script__getLastErrorLineIndex, (void*)Script__findVariable, (void*)Script__findTaggedVariableByIndex, (void*)Script__findFunction, (void*)Script__eval}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Script::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Script::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Script::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Script::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL Script__setClassNamespace(void *_o, yacmemptr _args           ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_Script*)_o)->setClassNamespace((YAC_String*)_args.mem[0].o);}return 0;}
void  YAC_CALL Script__installPrintHook(void *_o                             ) {((_Script*)_o)->installPrintHook();}
void  YAC_CALL Script__uninstallPrintHook(void *_o                           ) {((_Script*)_o)->uninstallPrintHook();}
void  YAC_CALL Script__getPrintHookOutputAndClear(void *_o, YAC_Value *_r    ) {((_Script*)_o)->getPrintHookOutputAndClear(_r);}
void  YAC_CALL Script__setLineOffset(void *_o, yacmemptr _args               ) {((_Script*)_o)->setLineOffset(_args.mem[0].si);}
sSI   YAC_CALL Script__load         (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_Script*)_o)->load((YAC_String*)_args.mem[0].o);}return 0;}
void  YAC_CALL Script__unload       (void *_o                                ) {((_Script*)_o)->unload();}
sSI   YAC_CALL Script__getLastErrorLineIndex(void *_o                        ) {return (sSI)((_Script*)_o)->getLastErrorLineIndex();}
void  YAC_CALL Script__findVariable (void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_Script*)_o)->findVariable((YAC_String*)_args.mem[0].o, _r);}}
void  YAC_CALL Script__findTaggedVariableByIndex(void *_o, yacmemptr _args, YAC_Value *_r) {((_Script*)_o)->findTaggedVariableByIndex(_args.mem[0].si, _r);}
void  YAC_CALL Script__findFunction (void *_o, yacmemptr _args, YAC_Value *_r) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_Script*)_o)->findFunction((YAC_String*)_args.mem[0].o, _r);}}
void  YAC_CALL Script__eval         (void *_o                                ) {((_Script*)_o)->eval();}
#endif // YAC_NO_HOST
