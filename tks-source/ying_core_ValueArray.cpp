// ---- ying_core_ValueArray.cpp: auto generated by YInG - the YAC interface generator (Wed, 24/Sep/2025 09:42:38)

#ifndef YAC_NO_HOST
sSI   YAC_CALL ValueArray__alloc    (void *, yacmemptr             );
void  YAC_CALL ValueArray__free     (void *                        );
sSI   YAC_CALL ValueArray__realloc  (void *, yacmemptr             );
sSI   YAC_CALL ValueArray__getNumElements(void *                   );
sSI   YAC_CALL ValueArray__getMaxElements(void *                   );
void  YAC_CALL ValueArray__empty    (void *                        );
sSI   YAC_CALL ValueArray__isEmpty  (void *                        );
sSI   YAC_CALL ValueArray___add     (void *, yacmemptr             );
sSI   YAC_CALL ValueArray___addVoid (void *                        );
sSI   YAC_CALL ValueArray___insert  (void *, yacmemptr             );
sSI   YAC_CALL ValueArray___delete  (void *, yacmemptr             );
void  YAC_CALL ValueArray__reverse  (void *                        );
void  YAC_CALL ValueArray__setNumElements(void *, yacmemptr        );
sSI   YAC_CALL ValueArray__indexOfPointer(void *, yacmemptr        );
sSI   YAC_CALL ValueArray__indexOfObject(void *, yacmemptr         );
sSI   YAC_CALL ValueArray__containsObject(void *, yacmemptr        );
sSI   YAC_CALL ValueArray__containsPointer(void *, yacmemptr       );
void  YAC_CALL ValueArray___getString(void *, YAC_Value *          );
void  YAC_CALL ValueArray__get      (void *, yacmemptr, YAC_Value *);
void  YAC_CALL ValueArray___set     (void *, yacmemptr             );
void  YAC_CALL ValueArray___getRev  (void *, yacmemptr, YAC_Value *);
void  YAC_CALL ValueArray___setRev  (void *, yacmemptr             );
void  YAC_CALL ValueArray__getDeref (void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL ValueArray___swap    (void *, yacmemptr             );
void  YAC_CALL ValueArray___useAll  (void *                        );
void  YAC_CALL ValueArray___getFirst(void *, YAC_Value *           );
void  YAC_CALL ValueArray___getLast (void *, YAC_Value *           );
sSI   YAC_CALL ValueArray___joinArrays(void *, yacmemptr           );
sSI   YAC_CALL ValueArray___joinCC  (void *, yacmemptr             );
sSI   YAC_CALL ValueArray___joinCR  (void *, yacmemptr             );
sSI   YAC_CALL ValueArray___joinCD  (void *, yacmemptr             );
sSI   YAC_CALL ValueArray___joinRR  (void *, yacmemptr             );
sSI   YAC_CALL ValueArray___joinRC  (void *, yacmemptr             );
sSI   YAC_CALL ValueArray___joinRD  (void *, yacmemptr             );
sSI   YAC_CALL ValueArray___joinDD  (void *, yacmemptr             );
sSI   YAC_CALL ValueArray___joinDC  (void *, yacmemptr             );
sSI   YAC_CALL ValueArray___joinDR  (void *, yacmemptr             );
#endif // YAC_NO_HOST

// ------------------ YAC class "_ValueArray" reflection map (implementation) ------------------
sUI          YAC_VCALL _ValueArray::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _ValueArray::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _ValueArray::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _ValueArray::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _ValueArray::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _ValueArray::yacMethodGetNum                  (void) {return 38;}
const char **YAC_VCALL _ValueArray::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "alloc", "free", "realloc", "getNumElements", "getMaxElements", "empty", "isEmpty", "add", "addVoid", "insert", "delete", "reverse", "setNumElements", "indexOfPointer", "indexOfObject", "containsObject", "containsPointer", "getString", "get", "set", "getRev", "setRev", "getDeref", "swap", "useAll", "getFirst", "getLast", "joinArrays", "joinCC", "joinCR", "joinCD", "joinRR", "joinRC", "joinRD", "joinDD", "joinDC", "joinDR"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _ValueArray::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 1, 0, 1, 2, 2, 1, 1, 0, 1, 2, 1, 2, 1, 2, 0, 0, 0, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _ValueArray::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={0,};static const sUI rt3[]={1,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={3,};static const sUI rt9[]={0,};static const sUI rt10[]={1, 3,};static const sUI rt11[]={1,};static const sUI rt12[]={0,};static const sUI rt13[]={1,};static const sUI rt14[]={3, 1,};static const sUI rt15[]={3, 1,};static const sUI rt16[]={3,};static const sUI rt17[]={3,};static const sUI rt18[]={0,};static const sUI rt19[]={1,};static const sUI rt20[]={1, 3,};static const sUI rt21[]={1,};static const sUI rt22[]={1, 3,};static const sUI rt23[]={1,};static const sUI rt24[]={1, 1,};static const sUI rt25[]={0,};static const sUI rt26[]={0,};static const sUI rt27[]={0,};static const sUI rt28[]={3, 3, 1, 1, 1, 1,};static const sUI rt29[]={3, 3,};static const sUI rt30[]={3, 3,};static const sUI rt31[]={3, 3,};static const sUI rt32[]={3, 3,};static const sUI rt33[]={3, 3,};static const sUI rt34[]={3, 3,};static const sUI rt35[]={3, 3,};static const sUI rt36[]={3, 3,};static const sUI rt37[]={3, 3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _ValueArray::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0, (const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0, (const char*)0,};static const char *rs15[]={(const char*)0, (const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0, (const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0, (const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0, (const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs29[]={(const char*)0, (const char*)0,};static const char *rs30[]={(const char*)0, (const char*)0,};static const char *rs31[]={(const char*)0, (const char*)0,};static const char *rs32[]={(const char*)0, (const char*)0,};static const char *rs33[]={(const char*)0, (const char*)0,};static const char *rs34[]={(const char*)0, (const char*)0,};static const char *rs35[]={(const char*)0, (const char*)0,};static const char *rs36[]={(const char*)0, (const char*)0,};static const char *rs37[]={(const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _ValueArray::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 4, 4, 0, 4, 0, 4, 1, 0, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _ValueArray::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _ValueArray::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)ValueArray__alloc, (void*)ValueArray__free, (void*)ValueArray__realloc, (void*)ValueArray__getNumElements, (void*)ValueArray__getMaxElements, (void*)ValueArray__empty, (void*)ValueArray__isEmpty, (void*)ValueArray___add, (void*)ValueArray___addVoid, (void*)ValueArray___insert, (void*)ValueArray___delete, (void*)ValueArray__reverse, (void*)ValueArray__setNumElements, (void*)ValueArray__indexOfPointer, (void*)ValueArray__indexOfObject, (void*)ValueArray__containsObject, (void*)ValueArray__containsPointer, (void*)ValueArray___getString, (void*)ValueArray__get, (void*)ValueArray___set, (void*)ValueArray___getRev, (void*)ValueArray___setRev, (void*)ValueArray__getDeref, (void*)ValueArray___swap, (void*)ValueArray___useAll, (void*)ValueArray___getFirst, (void*)ValueArray___getLast, (void*)ValueArray___joinArrays, (void*)ValueArray___joinCC, (void*)ValueArray___joinCR, (void*)ValueArray___joinCD, (void*)ValueArray___joinRR, (void*)ValueArray___joinRC, (void*)ValueArray___joinRD, (void*)ValueArray___joinDD, (void*)ValueArray___joinDC, (void*)ValueArray___joinDR}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _ValueArray::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _ValueArray::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _ValueArray::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _ValueArray::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

#ifndef YAC_NO_HOST
sSI   YAC_CALL ValueArray__alloc    (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->alloc(_args.mem[0].si);}
void  YAC_CALL ValueArray__free     (void *_o                                ) {((_ValueArray*)_o)->free();}
sSI   YAC_CALL ValueArray__realloc  (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->realloc(_args.mem[0].si);}
sSI   YAC_CALL ValueArray__getNumElements(void *_o                           ) {return (sSI)((_ValueArray*)_o)->getNumElements();}
sSI   YAC_CALL ValueArray__getMaxElements(void *_o                           ) {return (sSI)((_ValueArray*)_o)->getMaxElements();}
void  YAC_CALL ValueArray__empty    (void *_o                                ) {((_ValueArray*)_o)->empty();}
sSI   YAC_CALL ValueArray__isEmpty  (void *_o                                ) {return (sSI)((_ValueArray*)_o)->isEmpty();}
sSI   YAC_CALL ValueArray___add     (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_add(_args.mem[0].o);}
sSI   YAC_CALL ValueArray___addVoid (void *_o                                ) {return (sSI)((_ValueArray*)_o)->_addVoid();}
sSI   YAC_CALL ValueArray___insert  (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_insert(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL ValueArray___delete  (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_delete(_args.mem[0].si);}
void  YAC_CALL ValueArray__reverse  (void *_o                                ) {((_ValueArray*)_o)->reverse();}
void  YAC_CALL ValueArray__setNumElements(void *_o, yacmemptr _args          ) {((_ValueArray*)_o)->setNumElements(_args.mem[0].si);}
sSI   YAC_CALL ValueArray__indexOfPointer(void *_o, yacmemptr _args          ) {return (sSI)((_ValueArray*)_o)->indexOfPointer(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL ValueArray__indexOfObject(void *_o, yacmemptr _args           ) {return (sSI)((_ValueArray*)_o)->indexOfObject(_args.mem[0].o, _args.mem[1].si);}
sSI   YAC_CALL ValueArray__containsObject(void *_o, yacmemptr _args          ) {return (sSI)((_ValueArray*)_o)->containsObject(_args.mem[0].o);}
sSI   YAC_CALL ValueArray__containsPointer(void *_o, yacmemptr _args         ) {return (sSI)((_ValueArray*)_o)->containsPointer(_args.mem[0].o);}
void  YAC_CALL ValueArray___getString(void *_o, YAC_Value *_r                ) {((_ValueArray*)_o)->_getString(_r);}
void  YAC_CALL ValueArray__get      (void *_o, yacmemptr _args, YAC_Value *_r) {((_ValueArray*)_o)->get(_args.mem[0].si, _r);}
void  YAC_CALL ValueArray___set     (void *_o, yacmemptr _args               ) {((_ValueArray*)_o)->_set(_args.mem[0].si, _args.mem[1].o);}
void  YAC_CALL ValueArray___getRev  (void *_o, yacmemptr _args, YAC_Value *_r) {((_ValueArray*)_o)->_getRev(_args.mem[0].si, _r);}
void  YAC_CALL ValueArray___setRev  (void *_o, yacmemptr _args               ) {((_ValueArray*)_o)->_setRev(_args.mem[0].si, _args.mem[1].o);}
void  YAC_CALL ValueArray__getDeref (void *_o, yacmemptr _args, YAC_Value *_r) {((_ValueArray*)_o)->getDeref(_args.mem[0].si, _r);}
sSI   YAC_CALL ValueArray___swap    (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_swap(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL ValueArray___useAll  (void *_o                                ) {((_ValueArray*)_o)->_useAll();}
void  YAC_CALL ValueArray___getFirst(void *_o, YAC_Value *_r                 ) {((_ValueArray*)_o)->_getFirst(_r);}
void  YAC_CALL ValueArray___getLast (void *_o, YAC_Value *_r                 ) {((_ValueArray*)_o)->_getLast(_r);}
sSI   YAC_CALL ValueArray___joinArrays(void *_o, yacmemptr _args             ) {return (sSI)((_ValueArray*)_o)->_joinArrays(_args.mem[0].o, _args.mem[1].o, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si);}
sSI   YAC_CALL ValueArray___joinCC  (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_joinCC(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL ValueArray___joinCR  (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_joinCR(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL ValueArray___joinCD  (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_joinCD(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL ValueArray___joinRR  (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_joinRR(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL ValueArray___joinRC  (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_joinRC(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL ValueArray___joinRD  (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_joinRD(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL ValueArray___joinDD  (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_joinDD(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL ValueArray___joinDC  (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_joinDC(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL ValueArray___joinDR  (void *_o, yacmemptr _args               ) {return (sSI)((_ValueArray*)_o)->_joinDR(_args.mem[0].o, _args.mem[1].o);}
#endif // YAC_NO_HOST
