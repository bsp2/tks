// ----
// ---- file   : KeyHelpDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2010-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 16Jan2010
// ---- changed: 13Oct2010, 27Jan2015, 15Nov2018, 16Nov2018, 27Nov2018, 30Nov2018, 30Jan2021
// ----          26Sep2023, 05Oct2023, 06Oct2023, 24Mar2024
// ----
// ----
// ----

module MKeyHelpDialog;

namespace ui;


class KeyHelpDialog extends Dialog, ActionConsumer, ActionProvider {

   define int MIN_WIDTH  = 64;
   define int MIN_HEIGHT = 64;

   protected Layer *real_recipient;

   protected ScrollPane *sp_keys;
   protected Panel      *p_inner;

   protected Button *bt_ok;

   protected boolean b_ok_button;
   protected boolean b_send_triad_key;


   public method initKeyHelpDialog(String  _title,
                                   String  _message,
                                   boolean _bOkButton,
                                   boolean _bSendTriadKey,
                                   Layer   _realRecipient
                                   ) {
      initDialog();

      b_ok_button      = _bOkButton;
      b_send_triad_key = _bSendTriadKey;

      real_recipient <= _realRecipient;

      local Panel l;
      l.initPanel();
      l.setLayout(SuperBorderLayout);

      // Add message (left-hand-side, shortcuts);
      local Panel p;
      p.initPanel();
      p.setLayout(SuperBorderLayout);
      p.setAlignment(Layout.CENTER);
      local SizeGroupX sgx;
      p.addSizeGroup("sgx", deref sgx);

      Icon icon <= UI.GetIcon("info");
      if(null != icon)
      {
         local Label lbIcon;
         lbIcon.initLabel();
         lbIcon.setCaption(" ");
         lbIcon.setIcon(icon);
         lbIcon.setIconPlacement(Layout.LEFT);
         lbIcon.setAlignment(Layout.CENTER);
         p.addLayer(deref lbIcon, Layout.RIGHT);
      }

      local Panel pl;
      pl.setLayout(SuperBorderLayout);
      local Panel pr;
      pr.setLayout(SuperBorderLayout);
      int hlBgC32 = lnfGetTintedColor(LookAndFeel.COLOR_WINDOW_BG, lnf.getColor(LookAndFeel.COLOR_KEYHELPDLG_KEY_BG_TINT));
      int hlFgC32 = lnf.getColor(LookAndFeel.COLOR_KEYHELPDLG_KEY_FG);

      local StringArray lines <= _message.splitChar('\n');
      String *line;
      foreach line in lines
      {
         if(!line.isBlank())
         {
            local StringArray lr <= line.splitChar(':');
            String t <= lr.get(0);
            if(null != t)
            {
               t.trim();
               String left = t;

               Label lbLeft <= new Label;
               lbLeft.initLabel();
               lbLeft.setCaption(left);
               lbLeft.setBackgroundColor(hlBgC32);
               lbLeft.setForegroundColor(hlFgC32);
               lbLeft.setSizeGroup(sgx);
               lbLeft.setTextPlacement(Layout.RIGHT);
               lbLeft.setAlignment(Layout.RIGHT);
               pl.addLayer(deref lbLeft, Layout.BOTTOM);
            }

            t <= lr.get(1);
            if(null != t)
            {
               t.trim();
               String right = " : ";
               right.append(t);

               Label lbRight <= new Label;
               lbRight.initLabel();
               lbRight.setCaption(right);
               lbRight.setTextPlacement(Layout.LEFT);
               lbRight.setEnableFillBackground(false);
               pr.addLayer(deref lbRight, Layout.BOTTOM);
            }
         }
      }

      p_inner <= new Panel;
      p_inner.setLayout(SuperBorderLayout);

      p_inner.addLayer(deref pl, Layout.RIGHT);
      p_inner.addLayer(deref pr, Layout.RIGHT);

      sp_keys <= ScrollPane.New(deref p_inner);
      sp_keys.setPadTop(14);
      sp_keys.setEnableAdaptiveViewSize(true);
      sp_keys.setAlignment(Layout.EXPAND);
      sp_keys.setPreferredSize2f(p_inner.getPreferredSizeX(), p_inner.getPreferredSizeY());
      sp_keys.setLayoutWeight2f(1.0, 1.0);
      sp_keys.setLookAndFeelLight();
      sp_keys.updateLayout();

      l.addLayer(deref sp_keys, Layout.CENTER);
      l.addLayer(deref p, Layout.LEFT);

      if(_bOkButton)
      {
         // Add OK button
         local Button btOk;
         btOk.initButton();
         btOk.setCaption("Close dialog");
         btOk.setAlignment(Layout.CENTER);
         btOk.setPadding4f(UIConstants.DIALOGBUTTON_PAD_TOP, UIConstants.DIALOGBUTTON_PAD_LEFT,
                           UIConstants.DIALOGBUTTON_PAD_BOTTOM, UIConstants.DIALOGBUTTON_PAD_RIGHT);
         btOk.setInnerPadding4f(UIConstants.DIALOGBUTTON_INSET_TOP, UIConstants.DIALOGBUTTON_INSET_LEFT,
                                UIConstants.DIALOGBUTTON_INSET_BOTTOM, UIConstants.DIALOGBUTTON_INSET_RIGHT);
         btOk.setProvidedActionAlias(Button.ACTION_CLICK, "ok");
         bt_ok <= btOk;
         l.addLayer(deref btOk, Layout.BOTTOM);
      }

      // Initialize window
      initWindow(deref l,
                 _title,
                 0,   0, // update position in show()
                 64, 64
                 );

      recursiveSetLookAndFeel(UI.lnf.getName());
   }

   public method showKeyHelpDialog(String  _title,
                                   String  _message,
                                   boolean _bOkButton,
                                   boolean _bSendTriadKey,
                                   Layer   _realRecipient
                                   ) {

      initKeyHelpDialog(deref _title,
                        deref _message,
                        _bOkButton,
                        _bSendTriadKey,
                        deref _realRecipient
                        );
      showCentered();
   }

   protected handleSelection() {
      hide();
   }

   protected dialogCanceled() {
      hide();
   }

   public virtual isPopup() {
      return true;
   }

   public virtual preShow() {
      // trace "xxx KeyHelpDialog::preShow: b_layer_postinit_done="+b_layer_postinit_done;
      if(!b_layer_postinit_done)
      {
         float okY = b_ok_button ? (80*UI.font_scaling) : (50*UI.font_scaling);
         if(UI.font_scaling == 2)
            okY *= 0.84;
         setSize2f(p_inner.getPreferredSizeX() + 90*UI.font_scaling,
                   mathMaxi(p_inner.getPreferredSizeY() + okY, 120.0*UI.font_scaling)
                   );
         relayout();

         if(getSizeY() > (UI.viewport_height - 16))
            setRequiredSizeY(UI.viewport_height - 16);
      }

      Dialog::preShow();
   }

   public virtual consumeAction(Action _ac) : boolean {
      String name=_ac.getActionName();

      switch(name)
      {
         case "ok":
            handleSelection();
            break;

         case "cancel":
            dialogCanceled();
            break;
      }
      return true;
   }

   public virtual onKey(Key _k) : boolean {
      boolean bHide = true;

      if(sp_keys.getEnableScrollersCurrent() & Layout.VERTICAL)
      {
         if(VKEY_ESCAPE == _k.code)
            bHide = true;
         else if( (VKEY_UP == _k.code) || (VKEY_DOWN == _k.code) ) // || (VKEY_PAGEUP == _k.code) || (VKEY_PAGEDOWN == _k.code) )
            bHide = false;
      }

      if(_k.pressed)
      {
         if(bHide)
         {
            if(b_send_triad_key)
            {
               hide();
               real_recipient.onTriadKey(_k);
            }
         }
      }
      return true;
   }

   protected virtual postShow() {
      Dialog::postShow();

      if(sp_keys.getEnableScrollersCurrent() & Layout.VERTICAL)
         UI.SetKeyboardFocus(sp_keys.getVerticalScroller().getSlider());
      else
         UI.SetKeyboardFocus(bt_ok);
   }

}


class KeyHelpToolTip extends ToolTip, KeyHelpDialog {

   public method initKeyHelpToolTip(Layer _trigger, String _toolTipCaption) {

      // trace "xxx KeyHelpToolTip::initKeyHelpToolTip: toolTipCaption=\""+_toolTipCaption+"\"";

      trigger_layer <= _trigger;

      initKeyHelpDialog("Key Help ToolTip",
                        _toolTipCaption,
                        false/*bOkButton*/,
                        false/*bSendTriadKey*/,
                        null/*realRecipient*/
                        );

      resizeToMinimum();

   }

   public virtual onLookAndFeelChanged() {
      KeyHelpDialog::onLookAndFeelChanged();
   }

   public virtual onDraw() {
      UIRenderer.DrawDefaultBackground(0, 0, getSizeX(), getSizeY());
      UIRenderer.DrawRectangle(0, 0, getSizeX(), getSizeY(), 1, lnf_colors.get(LookAndFeel.COLOR_TOOLTIP_BORDER));
   }
}


class KeyHelpButton extends Button {

   protected virtual newToolTip() : ToolTip {
      local KeyHelpToolTip t;
      t.initKeyHelpToolTip(this/*triggerLayer*/,
                           tooltip_caption
                           );
      return deref t;
   }

   protected virtual newToolTipStage2() : ToolTip {
      return newToolTip();
   }

   public virtual onMouseClick(MouseEvent _ev) : boolean {
      scheduleToolTipTimer2(50/*forcedDelay*/);
      return true;
   }
}
