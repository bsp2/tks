// ----
// ----    file: Icon.tks
// ----  author: Copyright (c) 2005-2025 by Bastian Spiegel <bs@tkscript.de>
// ----
// ---- license: Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ----    info: 
// ----
// ---- changed: 19Apr2005, 20Apr2005, 28May2005, 07Jun2005, 09Jun2005, 10Jun2005, 18Jun2005
// ----          23Jun2005, 24Jun2005, 25Jun2005, 17Jul2005, 10Aug2005, 13Aug2005, 14Aug2005
// ----          10Jan2006, 12Aug2006, 28Apr2007, 29Apr2007, 30Apr2007, 05May2007, 30Oct2007,
// ----          11Nov2007, 02Feb2009, 08Mar2014, 12Aug2014, 20Sep2014, 13Mar2017, 18Jun2018
// ----          18Jul2018, 27Nov2018, 11Sep2025
// ----
// ----
// ----

module MIcon;

namespace ui;


class Icon {
   explain "The Icon class provides an interface for bitmap/vector icon renderers.";

   protected String icon_name;

   define int BLEND_SRC_OVER_KEEP_ALPHA    = 0;
   define int BLEND_SRC_OVER_REPLACE_ALPHA = 1;
   define int BLEND_ADD_KEEP_ALPHA         = 2;
   define int BLEND_ADD_REPLACE_ALPHA      = 3;
   define int BLEND_SRC                    = 4;

   protected int blend_mode;
   protected boolean b_mono;  // true=monochromatic icon (invertable in "dark" lookandfeel)

   define int SHADER_NONE        = 0;
   define int SHADER_INVERTCOLOR = 1;

   protected int shader_type;

   public method getIconName() : String {
      explain "Query the (unique) name of the icon (e.g. "close_window")";

      return icon_name;
   }

   public method loadIcon() : boolean {
      explain "Actually load the icon (called when the icon is actually requested by the application)";
   }

   public method getIconWidth() : float {
      explain "Query the icon width";
   }

   public method getIconHeight() : float {
      explain "Query the icon height";
   }

   public method setEnableBlendAdd(boolean _bEnable) {
      blend_mode = BLEND_ADD_KEEP_ALPHA;
   }   

   public method getEnableBlendAdd() : boolean {
      return (BLEND_ADD_KEEP_ALPHA == blend_mode);
   }

   public method setBlendMode(int _mode) {
      blend_mode = _mode;
   }

   public method getBlendMode() : int {
      return blend_mode;
   }

   public method setShaderType(int _type) {
      shader_type = _type;
   }

   public method getShaderType() : int {
      return shader_type;
   }

   public method isMono() : boolean {
      return b_mono;
   }

   public method drawIconScaled(int _x, _y, float _sx, float _sy) {
      explain "Draw the icon at the given coordinates, scale size by (sx; sy) (color=#ffffffff).";
   }

   public method drawIconScaledC32(int _x, _y, float _sx, float _sy, int _c32) {
      explain "Draw the icon at the given coordinates, scale size by (sx; sy), with ARGB color c32.";
   }

   public method drawIcon(int _x, _y) {
      explain "Draw the icon at the given coordinates";
   }

   public method onOpen() {
      explain "Used to initialize GL specific textures/displaylists";
   }

}
