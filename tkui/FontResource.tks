// ----
// ---- file   : FontResource.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2005-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 19Apr2005
// ---- changed: 20Apr2005, 28May2005, 07Jun2005, 09Jun2005, 10Jun2005, 18Jun2005, 23Jun2005
// ----          24Jun2005, 25Jun2005, 17Jul2005, 10Aug2005, 13Aug2005, 14Aug2005, 10Jan2006
// ----          12Aug2006, 28Apr2007, 29Apr2007, 30Apr2007, 05May2007, 30Oct2007, 11Nov2007
// ----          02Feb2009, 14Apr2013, 08Mar2014, 13Aug2014, 27Nov2018, 04Oct2023, 21Oct2023
// ----          22Oct2023, 24Mar2024
// ----
// ----
// ----

module MFontResource;

namespace ui;


class FontResource {
   explain "Base class for entries in the FontCache ";

   public String  file_name; // logic resp. local file name, e.g. "fonts/somefont.ttf"
   public String  font_name; // "verdana"
   public int     style_flags = Font.STYLE_NORMAL; // Font.STYLE_BOLD | Font.STYLE_ITALIC
   public float   font_size;
   public float   font_scaling;

   protected boolean b_loaded;

   public method loadFont() : boolean {
      explain "Actually load the font resource. Implemented by derived classes.";
   }

   public method renderString(String _text, float _x, float _y, int _fgColor32, int _ulColor32) {
      explain
         "Render the given String to the current viewport.\n"
         "The render states should have been initialized prior to this call (enable texturing, disable z-test, set color etc..)"
         ;
   }

   public method renderClippedString(String _text, float _x, float _y,
                                     float _clipLeft, _clipTop, _clipRight, _clipBottom,
                                     int _fgColor32,
                                     int _ulColor32
                                     ) {
      explain
         "Render the given String to the current viewport.\n"
         "The render states should have been initialized prior to this call (enable texturing, disable z-test, set color etc..)\n"
         "The text is clipped to the rectangle (_x, _y, _clipX, _clipY)."
         ;
   }

   public method renderUnderlines(String _text, float _x, float _y) {
      explain
         "Render the underlines for the given String to the current viewport.\n"
         "The render states should have been initialized prior to this call (enable texturing, disable z-test, set color etc..)"
         ;
   }

   public method stringWidth(String _text) : float {
      explain "Return the width (in pixels) of the given String";
   }

   public method stringHeight(String _text) : float {
      explain "Return the height (in pixels) of the given String";
   }

   public method stringHeightMinY(String _text, Float _retMinY) : float {
      explain "Return the height (in pixels) of the given String, and the offset to the first visible pixel";
   }

   public method stringIndexAtPixelX(String _text, float _x) : int {
      explain "Return index of the char at pixel coordinate _x";
   }

   public method onOpen() {
      explain "Called when OpenGL displaylists/textures need to be updated.";
   }

   public method setEnableMonochrome(boolean _bEnabled) {
      explain "Select monochrome/antialiased font rendering";
   }

   public method getAscender() : float {
      explain "Get distance from baseline to top-most scanline";
   }

   public method getDescender() : float {
      explain "Get distance from baseline to bottom-most scanline";
   }

}
