// ----
// ---- file   : FT2Glyph.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2005-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 25Apr2005
// ---- changed: 27Apr2005, 30Apr2005, 06May2005, 12Jun2005, 25Jun2005, 31Jul2005, 11Jun2020
// ----          22Sep2025
// ----
// ----
// ----

module MFT2Glyph;

namespace ui;

use tkfreetype2;
use tkopengl;

// ----
// ---- FT2Glyph
// ----
class FT2Glyph {
   // ----
   // ---- Reference to a texture page that holds the bitmap area of this glyph.
   // ---- The Texture depth (z) is 8bit (alpha+luminance (intensity)).
   // ----
   Texture *texture;

   // ----
   // ---- (Normalized 0..1) texture coordinates of the glyph bitmap.
   // ---- Please notice that a border is added around each glyph to account
   // ---- for OpenGL filtering.
   // ---- During glyph loading, (rtu,rbv) are used for (bitmap_width, bitmap_height)
   // ----
   float   ltu, rtu, rbu, lbu;
   float   ltv, rtv, rbv, lbv;

   // ---- Pixel position in bitmap (used by font converter code)
   int     bitmapx;
   int     bitmapy;

   // ---- The pixel width of the glyph bitmap. 0 means that this glyph is unused.
   float   width;

   // ---- The pixel height of the glyph bitmap
   float   height;

   // ---- Distance from the current horizontal cursor position to the leftmost scan column of the glyph bitmap
   float   offsetx;

   // ---- Distance from the baseline to the topmost scanline of the glyph bitmap
   float   offsety;

   // ---- How many pixels (in screen coordinates) to advance after printing this glyph
   float   advancex;

   public method normalizeTexCoords(float _rtexW, float _rtexH) {
      if(rtu > 0.0) // ---- is this glyph used??
      {
         ltu = ltu / _rtexW;
         rtu = rtu / _rtexW;
         rbu = rbu / _rtexW;
         lbu = lbu / _rtexW;
         ltv = ltv / _rtexH;
         rtv = rtv / _rtexH;
         rbv = rbv / _rtexH;
         lbv = lbv / _rtexH;
      }
   }

   // ---- Initialize the texture info for this glyph
   // ---- This is usually called by the FT2Face class
   public method init(float _x, float _y, Texture _t) {
      bitmapx = _x;
      bitmapy = _y;
      ltu = _x;
      rtu = _x + width;
      rbu = _x + width;
      lbu = _x;
      ltv = _y;
      rtv = _y;
      rbv = _y + height;
      lbv = _y + height;
      texture <= deref _t;
   }
}
