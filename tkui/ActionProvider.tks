// ----
// ----    file: ActionProvider.tks
// ----  author: Copyright (c) 2005-2025 by Bastian Spiegel <bs@tkscript.de>
// ----
// ---- license: Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ----    info:
// ----
// ---- changed: 19Apr2005, 20Apr2005, 28May2005, 07Jun2005, 09Jun2005, 10Jun2005, 18Jun2005
// ----          23Jun2005, 24Jun2005, 25Jun2005, 17Jul2005, 10Aug2005, 13Aug2005, 14Aug2005
// ----          10Jan2006, 12Aug2006, 28Apr2007, 29Apr2007, 30Apr2007, 05May2007, 30Oct2007,
// ----          11Nov2007, 02Feb2009, 07Mar2011, 14May2012, 02Dec2018, 13Aug2024, 10Jan2025
// ----
// ----
// ----

module MActionProvider;

namespace ui;


class ActionProvider {
   explain "An interface for receiving and sending Action objects.";

   protected StringArray action_aliases;

   ActionProvider() {
      initActionProvider();
   }

   protected method initActionProvider() {
      // Default aliases are the original action names
      // trace "xxx initActionProvider: this="+#(this);
      action_aliases = getProvidedActionNames();
      // trace "xxx initActionProvider:   aliases="+action_aliases;
   }

   public method addActionConsumer(ActionConsumer _consumer) {
      explain "Add the given AbstractConsumer to the list of recipients.";
   }

   public method removeActionConsumer(ActionConsumer _consumer) {
      explain "Remove the given ActionConsumer from the list of recipients.";
   }

   protected method provideAction(Action _providedAction) : boolean {
      explain "\"Emit\" a new Action and send notification to all registered ActionConsumers (recipients).\n\n Returns true when action was handled, false otherwise.";
      // (note) this is actually implemented in Layer (since it needs access to the parent field, for example)
   }

   public method getProvidedActionNames() : StringArray {
      explain "Query the names of the actions provided by a control.";
   }

   protected method provideActionByName(String _actionName) {
      provideAction(Action.New(getProvidedActionAlias(_actionName), this));
   }

   public method setProvidedActionAlias(String _actionName, String _aliasName) {
      explain "Set alias name for an action.";

      StringArray acNames <= getProvidedActionNames();
      int idx = acNames.indexOfObject(_actionName, 0);
      if(-1 != idx)
      {
         if(-1 == acNames.indexOfObject(_aliasName, 0))
         {
            if(!_aliasName.isBlank())
               action_aliases[idx] = _aliasName;
            else
               trace "[---] " + yacMetaClassName() + "::setProvidedActionAlias: invalid alias name \"\".";
         }
         else
         {
            trace "[---] " + yacMetaClassName() + "::setProvidedActionAlias: invalid alias name \"" + _aliasName + "\" (is action name).";
         }
      }
      else
      {
         trace "[---] " + yacMetaClassName() + "::setProvidedActionAlias: unknown action \"" + _actionName + "\".";
      }
   }

   public method getProvidedActionAlias(String _actionName) : String {
      explain "Return alias name for the given action.";

      StringArray acNames <= getProvidedActionNames();
      int idx = acNames.indexOfObject(_actionName, 0);
      // trace "xxx getProvidedActionAlias(\""+_actionName+"\") => idx="+idx+" (this="+#(this)+")";
      if(-1 != idx)
      {
         // trace "xxx   getProvidedActionAlias(\""+_actionName+"\") => \""+action_aliases[idx]+"\"";
         return action_aliases.get(idx);
      }
   }

}
