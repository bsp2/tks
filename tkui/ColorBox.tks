// ----
// ---- file   : ColorBox.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2005-2023 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "ui" toolkit.
// ----
// ---- changed: ?????2005, 27Dec2020, 27Oct2023
// ----
// ----

module MColorBox;

use namespace ui;


// ---- This class was written for testing purposes only
class ColorBox extends Panel {

   int c32_fg;
   boolean b_mouseover;

   function New(int _fgColor32, float _w, float _h, float _mw, float _mh) : ColorBox {
      local ColorBox r; 
      r.initColorBox(_fgColor32, _w, _h, _mw, _mh);
      return deref r;
   }

   ColorBox() {
      setMinimumSize2f(2,2);
      setManualPreferredSize2f(Layout.FILLX, Layout.FILLY);
      c32_fg = argb(#ff, rnd(255), rnd(255), rnd(255));
   }

   public method initColorBox(int _fgColor32, float _w, float _h, float _mw, float _mh) {
      initLayer();
      c32_fg = _fgColor32; 
      setManualPreferredSize2f(_w, _h);
      setMinimumSize2f(_mw, _mh);
   }

   public virtual allowSubPixelPosition() : boolean {
      return false;
   }

   public virtual allowSubPixelSize() : boolean {
      return false;
   }

   public method setColor(int _c32) {
      c32_fg = _c32;
      redraw();
   }

   public virtual onMouseEnter(MouseEvent _ev) {
      redraw();
   }

   public virtual onMouseLeave(MouseEvent _ev) {
      redraw();
   }

   public virtual onDraw() {
      if(b_mouseover && isMouseOver())
         UIRenderer.DrawFilledRectangle(0, 0, getSizeX(), getSizeY(), (c32_fg>>1)&0x7f7f7f7f);
      else
         UIRenderer.DrawFilledRectangle(0, 0, getSizeX(), getSizeY(), c32_fg);
   }

   public virtual beginXFMTag(AbstractXMLForm _form, HashTable _attributes) : boolean {
      if(Panel::beginXFMTag(_form, _attributes))
      {
         String *atname, *atval;
         StringArray *atsplit;
         foreach atname in _attributes
         {
            atval <= _attributes[atname];
            switch(atname)
            {
               case "color":
                  c32_fg = atval;
                  break;

               case "mouseover":
                  b_mouseover = int(atval);
                  break;
            }
         }
      }
      return true;
   }
}
