// ----
// ---- file   : Shader_ColorGrading.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "ui" toolkit.
// ----
// ---- created: 27Nov2018
// ---- changed: 03Dec2018, 06Feb2023, 28Mar2024, 16Jan2025, 10Sep2025, 13Sep2025
// ----
// ----
// ----

module MShader_ColorGrading;

namespace ui;


class Shader_ColorGrading : Shader {

   // Inputs:
   //   tex[0] : Image (GL_TEXTURE_2D)
   //   tex[1] : Gradient texture (GL_TEXTURE_2D)

   static String vs_src =
      "uniform mat4 u_transform; \n"
      " \n"
      "ATTRIBUTE vec2 a_vertex; \n"
      "ATTRIBUTE vec2 a_uv; \n"
      " \n"
      "VARYING_OUT vec2 v_uv; \n"
      " \n"
      "void main(void) { \n"
      "  gl_Position = u_transform * vec4(a_vertex,0,1); \n"
      "  v_uv = a_uv; \n"
      "}"
      ;

   static String fs_src =
      "uniform sampler2D u_tex_screen; \n"
      "uniform sampler3D u_tex_gradient; \n"
      "uniform float u_amount; \n"
      " \n"
      "VARYING_IN vec2 v_uv; \n"
      " \n"
      "void main(void) { \n"
      "  vec4 cIn  = TEXTURE2D(u_tex_screen, v_uv); \n"
      "  vec4 cOut = vec4(TEXTURE3D(u_tex_gradient, cIn.xyz).rgb, cIn.a); \n"
      "  cOut = clamp(mix(cIn, cOut, u_amount), vec4(0,0,0,0), vec4(1,1,1,1)); \n"
      "  FRAGCOLOR = cOut; \n"
      "}"
      ;

   public virtual create() : boolean {
      if(createFromStrings(vs_src, fs_src))
      {
         sdvg_BindShader(sdvg_shader_idx);
         sdvg_Uniform1i("u_tex_screen", 0);
         sdvg_Uniform1i("u_tex_gradient", 1);
         sdvg_BindShader(0);
         if(Configuration.debugLevel >= 2)
            trace "[dbg] ui::Shader_ColorGrading::create: OK.";
         return true;
      }
      else
      {
         trace "[!!!] ui::Shader_ColorGrading::create: failed";
      }
      return false;
   }

}
