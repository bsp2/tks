// ----
// ---- file   : TransparentPanel.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2006-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 24Jun2006, 22Apr2010
// ---- changed: 11Feb2018, 21Jul2018, 28Nov2018, 01Dec2018, 30Oct2023
// ----
// ----
// ----

module MTransparentPanel;

namespace ui;


// Base class for windows and dialogs
class TransparentPanel extends Panel {
   protected int bg_color;

   public virtual onLookAndFeelChanged() {
      Layer::onLookAndFeelChanged();

      bg_color = lnf_colors.get(LookAndFeel.COLOR_TRANSPARENTPANEL_BG);
   }

   public virtual calcEffectiveBg32() : int {
      return bg_color;
   }

   public onDraw() {
      if(STYLE_DEFAULT == panel_bg_style)
      {
         // trace "xxx draw transparent panel layer_alpha="+layer_alpha+" enableTransp.="+UI.GetEnableTransparentLayers();
         if(UI.GetEnableTransparentLayers() && (255 != layer_alpha) )
         {
            if(!UI.b_fbo)
               UIRenderer.EnableBlending();

            UIRenderer.DrawFilledRectangle(0, 0, getSizeX(), getSizeY(), (bg_color&0xFFFFFF) | (layer_alpha<<24));

            if(!UI.b_fbo)
               UIRenderer.DisableBlending();

            // Draw window border (when derived class is FloatingLayer/Window)
            if(lnf.b_window_border_flat)
            {
               UIRenderer.DrawRectangle(0, 0, getSizeX(), getSizeY(), 2,
                                        (lnf_colors.get(LookAndFeel.COLOR_WINDOW_BORDER_FLAT_OL)&0xFFFFFF) | (layer_alpha<<24)
                                        );
            }
            else
            {
               UIRenderer.DrawDefaultRaisedBorderAlpha(0, 0, getSizeX(), getSizeY(), layer_alpha);
            }
         }
         else
         {
            UIRenderer.DrawFilledRectangle(0, 0, getSizeX(), getSizeY(), (bg_color&0xFFFFFF) | 0xFF000000);
            UIRenderer.DrawDefaultRaisedBorder(0, 0, getSizeX(), getSizeY());
            UIRenderer.DrawRectangle(1, 1, getSizeX()-2, getSizeY()-2,
                                     mathMaxi(UIConstants.WINDOW_BORDER_SIZE_X, UIConstants.WINDOW_BORDER_SIZE_Y),
                                     lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG)
                                     );
         }
      }
      else if(STYLE_NONE != panel_bg_style)
      {
         Panel::onDraw();
         UIRenderer.DrawDefaultRaisedBorder(0, 0, getSizeX(), getSizeY());
         UIRenderer.DrawRectangle(1, 1, getSizeX()-2, getSizeY()-2,
                                  mathMaxi(UIConstants.WINDOW_BORDER_SIZE_X, UIConstants.WINDOW_BORDER_SIZE_Y),
                                  lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG)
                                  );
      }
   }

   public method setBackgroundColor(int _c) {
      bg_color = _c;
   }

   public method getBackgroundColor() {
      return bg_color;
   }

   public virtual isTranslucent() : boolean {
      return (0 == layer_alpha);
   }

}
