// ----
// ---- file   : Shader_PatternGradientR.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2024-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "ui" toolkit.
// ----
// ---- created: 23Mar2024
// ---- changed: 28Mar2024, 13Sep2025, 14Sep2025
// ----
// ----
// ----

module MShader_PatternGradientR;

namespace ui;


class Shader_PatternGradientR : Shader_PatternFill {
   protected Texture *tex_gradient;

   // Inputs:
   //   tex[0] : Pattern Texture (GL_TEXTURE_2D)
   //   tex[1] : Gradient Texture (GL_TEXTURE_2D)

   static String vs_src_pgh =
      "uniform mat4 u_transform; \n"
      " \n"
      "ATTRIBUTE vec2 a_vertex; \n"
      " \n"
      "void main(void) { \n"
      "  gl_Position = u_transform * vec4(a_vertex,0,1); \n"
      "}"
      ;

   static String fs_src_pgh =
      "uniform sampler2D u_tex; \n"
      "uniform vec4      u_color_fill; \n"
      "uniform vec2      u_scale; \n"
      "uniform float     u_intensity; \n"
      "\n"
      "uniform sampler2D u_tex_gradient; \n"
      "uniform float     u_abs_x; \n"
      "uniform float     u_abs_y; \n"
      "uniform float     u_abs_rx; \n"  // 0.5f / (r - l)
      "uniform float     u_abs_ry; \n"  // 0.5f / (t - b)
      "\n"
      "void main(void) { \n"
      "  float dx =  (gl_FragCoord.x - u_abs_x) * u_abs_rx; \n"
      "  float dy = -(gl_FragCoord.y - u_abs_y) * u_abs_ry; \n"
      "  float d = length(vec2(dx,dy)); \n"
      "  float u = d*0.5 + 0.5; \n"
      "  vec4  c = TEXTURE2D(u_tex_gradient, vec2(u, 0)); \n"
      "  c = vec4(mix(u_color_fill.rgb, c.rgb, c.a), u_color_fill.a); \n"
      "\n"
      "  vec2 uv = gl_FragCoord.xy * u_scale; \n"
      "  float a = (1.0 - TEXTURE2D(u_tex, uv).TEX_ALPHA * u_intensity); \n"
      "  c = vec4(c.rgb * a, c.a); \n"
      "  FRAGCOLOR = c; \n"
      "}"
      ;

   public virtual create() : boolean {
      if(createFromStrings(vs_src_pgh, fs_src_pgh))
      {
         sdvg_BindShader(sdvg_shader_idx);
         sdvg_Uniform1i("u_tex",          0);
         sdvg_Uniform1i("u_tex_gradient", 1);
         sdvg_BindShader(0);
         if(Configuration.debugLevel >= 2)
            trace "[dbg] ui::Shader_PatternGradientR::create: OK.";
         return true;
      }
      else
      {
         trace "[!!!] ui::Shader_PatternGradientR::create: failed";
      }
      return false;
   }

   public method bindPatternGradientR(int _patternIdx, float _sclX, float _sclY, float _intensity,
                                      Texture _texGradient, float _absCtrX, float _absCtrY, float _absRx, float _absRy
                                      ) {
      tex_gradient <= _texGradient;
      glActiveTexture(GL_TEXTURE0);
      bindPatternFill(_patternIdx, _sclX, _sclY, _intensity);
      glActiveTexture(GL_TEXTURE1);
      tex_gradient.bind();
      tex_gradient.enable();
      glActiveTexture(GL_TEXTURE0);
      sdvg_Uniform1f("u_abs_x",  _absCtrX);
      sdvg_Uniform1f("u_abs_y",  _absCtrY);
      sdvg_Uniform1f("u_abs_rx", (1/1.4f) / _absRx);
      sdvg_Uniform1f("u_abs_ry", (1/1.4f) / _absRy);
      // trace "xxx Shader_GradientR: texSz=("+tex.sx+";"+tex.sy+") UI.buffer=("+UI.buffer_width+";"+UI.buffer_height+") ctr=("+_absCtrX+";"+_absCtrY+") r=("+_absRx+";"+_absRy+")";
   }

   public virtual unbind() {
      glActiveTexture(GL_TEXTURE0);
      Shader_PatternFill::unbind();
      if(null != tex_gradient)
      {
         glActiveTexture(GL_TEXTURE1);
         tex_gradient.disable();
         tex_gradient.unbind();
         glActiveTexture(GL_TEXTURE0);
      }
   }

   public virtual onOpen() {
      Shader_PatternFill::onOpen();
      if(null != tex_gradient)
         tex_gradient.unload();
   }

}
