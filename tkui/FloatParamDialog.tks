// ----
// ---- file   : FloatParamDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2007-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 28Apr2007
// ---- changed: 06Nov2007, 14Apr2008, 02Aug2008, 01Feb2009, 31May2009, 06Feb2010, 22Apr2010
// ----          28Feb2011, 20Mar2011, 05Sep2014, 13Sep2014, 23Sep2014, 09Mar2015, 22Jan2017
// ----          28Jan2017, 16Feb2018, 30Nov2018, 27Oct2019, 14Feb2020, 04Oct2023, 30Oct2023
// ----          26Dec2024, 21Mar2025
// ----
// ----
// ----

module MFloatParamDialog;

namespace ui;


class FloatParamDialog extends Dialog, ActionConsumer, ActionProvider {

   define int MIN_WIDTH        = 200;
   define int MIN_HEIGHT       =  70;
   define int MIN_HEIGHT_NOMSG =  46;

   define String ACTION_FLOATPARAMDIALOGCLOSED;
   define String ACTION_FLOATPARAMDIALOGCLOSED_HOLD;
   // // define String ACTION_FLOATPARAMDIALOGEDITED;       // return/tab
   define String ACTION_FLOATPARAMDIALOGCANCELED;
   define String ACTION_FLOATPARAMVALUECHANGING;      // if b_provide_changing

   protected boolean b_provide_changing;

   protected char accel_ok;
   protected char accel_cancel;
   protected ActionConsumer *recipient;
   protected FloatParam *floatparam;
   protected Label *lb_message;

   protected Button *bt_ok;
   protected Button *bt_cancel;


   public static New(String  _caption,
                     String  _message,
                     String  _iconName,
                     String  _btOkCaption,
                     String  _btCancelCaption,
                     float   _value,
                     float   _min,
                     float   _max,
                     int     _cols,
                     int     _precision,
                     float   _step,
                     ActionConsumer _recipient
                     ) : FloatParamDialog {
      local FloatParamDialog d;
      d.initFloatParamDialog(deref _caption,
                             deref _message,
                             _iconName, // e.g. "textinput"
                             deref _btOkCaption,
                             deref _btCancelCaption,
                             _value,
                             _min,
                             _max,
                             _cols,
                             _precision,
                             _step,
                             false/*bHold*/,
                             _recipient,
                             false/*bHideOnTab*/
                             );
      return deref d;
   }

   // (note) "Ok" button provides Button.ACTION_HOLD_CLICK
   public static NewHold(String  _caption,
                         String  _message,
                         String  _iconName,
                         String  _btOkCaption,
                         String  _btCancelCaption,
                         float   _value,
                         float   _min,
                         float   _max,
                         int     _cols,
                         int     _precision,
                         float   _step,
                         ActionConsumer _recipient
                         ) : FloatParamDialog {
      local FloatParamDialog d;
      d.initFloatParamDialog(deref _caption,
                             deref _message,
                             _iconName,  // e.g. "textinput"
                             deref _btOkCaption,
                             deref _btCancelCaption,
                             _value,
                             _min,
                             _max,
                             _cols,
                             _precision,
                             _step,
                             true/*bHold*/,
                             _recipient,
                             false/*bHideOnTab*/
                             );
      return deref d;
   }

   public static NewHideOnTab(String  _caption,
                              String  _message,
                              String  _iconName,
                              String  _btOkCaption,
                              String  _btCancelCaption,
                              float   _value,
                              float   _min,
                              float   _max,
                              int     _cols,
                              int     _precision,
                              float   _step,
                              ActionConsumer _recipient
                              ) : FloatParamDialog {
      local FloatParamDialog d;
      d.initFloatParamDialog(deref _caption,
                             deref _message,
                             _iconName, // e.g. "textinput"
                             deref _btOkCaption,
                             deref _btCancelCaption,
                             _value,
                             _min,
                             _max,
                             _cols,
                             _precision,
                             _step,
                             false/*bHold*/,
                             _recipient,
                             true/*bHideOnTab*/
                             );
      return deref d;
   }

   public method initFloatParamDialog(String  _caption,
                                      String  _message,
                                      String  _iconName,
                                      String  _btOkCaption,
                                      String  _btCancelCaption,
                                      float   _value,
                                      float   _min,
                                      float   _max,
                                      int     _cols,
                                      int     _precision,
                                      float   _step,
                                      boolean _bHold,
                                      ActionConsumer _recipient,
                                      boolean _bHideOnTab
                                     ) {

      initDialog();

      recipient <= deref _recipient;
      int w, h;
      local Panel l;
      l.initPanel();
      l.setLayout(SuperBorderLayout);

      local Label *lbMessage;

      if(null != _message)
      {
         lbMessage <= Label.New();
         lbMessage.setCaption(_message);
         Icon icon <= UI.GetIcon(_iconName);
         if(null != icon)
         {
            lbMessage.setIcon(icon);
            lbMessage.setIconPlacement(Layout.LEFT);
         }
         l.addLayer(deref lbMessage, Layout.CENTER);
         lb_message <= lbMessage;
      }

      // Add FloatParam
      local Panel pfp;
      pfp.initPanel();
      pfp.setLayout(SuperBorderLayout);

      local FloatParam fp;
      fp.initFloatParam();
      fp.setVisibleTextLength(_cols);
      fp.setMinMaxValues(_min, _max);
      fp.setStep(_step);
      fp.setPrecision(_precision);
      fp.setValue(_value);
      fp.setAlignment(Layout.LEFT|Layout.BASELINEY);
      if(_bHideOnTab)
      {
         // use ACTION_TABAUTOCOMPLETE to auto-hide dialog when TAB is pressed
         fp.setEnableTabAutoCompletion(true);
      }

      pfp.addLayer(deref fp, Layout.BOTTOM);
      floatparam <= fp;

      Layer customLayer <= getCustomLayerHook();
      if(null != customLayer)
      {
         customLayer.setAlignment(Layout.LEFT);
         pfp.addLayer(deref customLayer, Layout.BOTTOM);
      }

      pfp.setAlignment(Layout.CENTER);
      pfp.buildTabCycleList();
      l.addLayer(deref pfp, Layout.BOTTOM);


      // OK and cancel buttons
      local Panel pnOkCancel;
      pnOkCancel.initPanel();
      pnOkCancel.setLayout(SuperBorderLayout);
      pnOkCancel.setAlignment(Layout.CENTER|Layout.BASELINEY);

      if(_bHideOnTab)
      {
         // Calculate inner window size (no ok/cancel buttons)
         if(null != lbMessage)
         {
            w = lbMessage.getPreferredSizePadX();
            if(w < MIN_WIDTH)
               w = MIN_WIDTH;

            h = mathMaxf(pfp.getPreferredSizePadY() +
                         lbMessage.getPreferredSizePadY(),
                         MIN_HEIGHT
                         );
         }
         else
         {
            w = MIN_WIDTH;

            h = mathMaxf(pfp.getPreferredSizePadY(),
                         MIN_HEIGHT_NOMSG
                         );
         }
      }
      else
      {
         // Add OK button
         local Button btOk;
         btOk.initButton();
         btOk.setCaption(_btOkCaption);
         btOk.setAlignment(Layout.CENTER|Layout.BASELINEY);
         btOk.setIconPlacement(Layout.LEFT);
         btOk.setPadding4f(UIConstants.DIALOGBUTTON_PAD_TOP, UIConstants.DIALOGBUTTON_PAD_LEFT,
                           UIConstants.DIALOGBUTTON_PAD_BOTTOM, UIConstants.DIALOGBUTTON_PAD_RIGHT);
         btOk.setInnerPadding4f(UIConstants.DIALOGBUTTON_INSET_TOP, UIConstants.DIALOGBUTTON_INSET_LEFT,
                                UIConstants.DIALOGBUTTON_INSET_BOTTOM, UIConstants.DIALOGBUTTON_INSET_RIGHT);
         btOk.setProvidedActionAlias(Button.ACTION_CLICK, "ok");
         if(UI.IsHiDPI())
            btOk.setLayerStyle(LookAndFeel.STYLE_FLAT);
         if(_bHold)
         {
            btOk.setEnableHold(true);
            btOk.setProvidedActionAlias(Button.ACTION_HOLD_CLICK, "ok_hold");
         }
         pnOkCancel.addLayer(deref btOk, Layout.LEFT);
         bt_ok <= btOk;

         // Add Cancel button
         local Button btCancel;
         btCancel.initButton();
         btCancel.setCaption(_btCancelCaption);
         btCancel.setAlignment(Layout.CENTER|Layout.BASELINEY);
         btCancel.setIconPlacement(Layout.LEFT);
         btCancel.setPadding4f(UIConstants.DIALOGBUTTON_PAD_TOP, UIConstants.DIALOGBUTTON_PAD_LEFT,
                               UIConstants.DIALOGBUTTON_PAD_BOTTOM, UIConstants.DIALOGBUTTON_PAD_RIGHT);
         btCancel.setInnerPadding4f(UIConstants.DIALOGBUTTON_INSET_TOP, UIConstants.DIALOGBUTTON_INSET_LEFT,
                                    UIConstants.DIALOGBUTTON_INSET_BOTTOM, UIConstants.DIALOGBUTTON_INSET_RIGHT);
         btCancel.setProvidedActionAlias(Button.ACTION_CLICK, "cancel");
         if(UI.IsHiDPI())
            btCancel.setLayerStyle(LookAndFeel.STYLE_FLAT);
         pnOkCancel.addLayer(deref btCancel, Layout.RIGHT);
         // Add ok/cancel panel
         l.addLayer(deref pnOkCancel, Layout.BOTTOM);
         bt_cancel <= btCancel;

         // Calculate inner window size
         w = mathMaxf(pnOkCancel.getPreferredSizePadX(), (null != lbMessage)?lbMessage.getPreferredSizePadX():0);
         if(w < MIN_WIDTH)
            w = MIN_WIDTH;
         h = mathMaxf(pfp.getPreferredSizePadY() +
                      pnOkCancel.getPreferredSizePadY() +
                      (null != lbMessage)?lbMessage.getPreferredSizePadY():0,
                      MIN_HEIGHT
                      );
      }

      l.setSize2f(w, h);

      // Determine accelerator keys
      accel_ok = UI.GetAcceleratorChar(_btOkCaption);
      accel_cancel = UI.GetAcceleratorChar(_btCancelCaption);

      // Initialize window
      initWindow(deref l,
                 _caption,
                 0, 0, // update position in show()
                 w, h
                 );

      // recursiveSetLookAndFeel(LookAndFeel.LIGHT);
      recursiveBuildTabCycleLists();  // does not seem to work (focus is stuck in textfield)
   }

   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_FLOATPARAMDIALOGCLOSED,
              ACTION_FLOATPARAMDIALOGCLOSED_HOLD,
              // // ACTION_FLOATPARAMDIALOGEDITED,
              ACTION_FLOATPARAMDIALOGCANCELED,
              ACTION_FLOATPARAMVALUECHANGING,  // if b_provide_changing
              ];
   }

   public virtual isPopup() : boolean {
      return true;
   }

   public method getFloatParam() : FloatParam {
      return floatparam;
   }

   public method getCustomLayerHook() : Layer {
      // For adding additional widgets below floatparam
      return null;
   }

   public method setValue(float _f) {
      floatparam.setValue(_f);
   }

   public method getValue() : float {
      return floatparam.getFloatValue();
   }

   public method setEnableProvideChanging(boolean _bEnable) {
      b_provide_changing = _bEnable;
   }

   public method setButtonFontByName(String _name) {
      if(null != bt_ok)
         bt_ok.setFontByName(_name);

      if(null != bt_cancel)
         bt_cancel.setFontByName(_name);
   }

   public method setMessageFontByName(String _name) {
      if(null != lb_message)
         lb_message.setFontByName(_name);
   }

   public method setTextFontByName(String _name) {
      if(null != floatparam)
         floatparam.setFontByName(_name);
   }

   public method setButtonIcons(Icon _icoYes, Icon _icoCancel) {
      if(null != bt_ok)
         bt_ok.setIcon(_icoYes);

      if(null != bt_cancel)
         bt_cancel.setIcon(_icoCancel);
   }

   public method setBackgroundTint(int _c32) {
      // can be used to e.g. indicate that a preset name already exists (NAR_EditKitDialog)
      floatparam.setBackgroundTint(_c32);
      floatparam.redraw();
   }

   public handleSelection(boolean _bOK, boolean _bHold) {
      // (note) do not provide new action to avoid recursion!
      floatparam.stopEditing(false/*bProvideAction*/, false/*bReturnKey*/, true/*bQuiet*/);

      hide();

      if(_bOK)
      {
         if(recipient instanceof ActionConsumer)
         {
            StringAction *sac;

            if(_bHold)
            {
               sac <= FloatAction.New(getProvidedActionAlias(ACTION_FLOATPARAMDIALOGCLOSED_HOLD),
                                      this,
                                      floatparam.getFloatValue()
                                      );
            }
            else
            {
               sac <= FloatAction.New(getProvidedActionAlias(ACTION_FLOATPARAMDIALOGCLOSED),
                                      this,
                                      floatparam.getFloatValue()
                                      );
            }
            recipient.consumeAction(sac);
            // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
         }
      }
      else
      {
         if(recipient instanceof ActionConsumer)
         {
            Action ac <= Action.New(getProvidedActionAlias(ACTION_FLOATPARAMDIALOGCANCELED), this);
            recipient.consumeAction(ac);
            // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
         }
      }
   }

   public virtual onKey(Key _key) : boolean {
      switch(_key.pressed)
      {
         case VKEY_ESCAPE:
            handleSelection(false/*bOK*/, false/*bHold*/);
            return true;

         case VKEY_RETURN:
            floatparam.parseExpressionOrMapUser();
            handleSelection(true/*bOK*/, false/*bHold*/);
            return true;

         case VKEY_SPACE:
            handleSelection(true/*bOK*/, true/*bHold*/);
            return true;

         default:
            if(_key.pressed)
            {
               ////trace "xxx _key.unicode="+_key.unicode;
               if(accel_ok)
               {
                  if(_key.unicode == accel_ok)
                  {
                     ////trace "xxx FloatParamDialog: handleSelection _key.pressed="+_key.pressed+" accel_ok="+accel_ok;
                     handleSelection(true/*bOK*/, false/*bHold*/);
                     return true;
                  }
               }
               if(accel_cancel)
               {
                  if(_key.unicode == accel_cancel)
                  {
                     trace "xxx FloatParamDialog: handleSelection _key.pressed="+_key.pressed+" accel_cancel="+accel_cancel;
                     handleSelection(false/*bOK*/, false/*bHold*/);
                     return true;
                  }
               }
            }
            break;
      }
      return false;
   }

   public virtual hideByMouseClick() {
      // trace "xxx FloatParamDialog::hideByMouseClick";
      handleSelection(false/*bOK*/, false/*bHold*/); // Cancel
   }

   protected virtual postShow() {
      resizeAtLeastToMinimumForce(false, false);
      Dialog::postShow();
      floatparam.onTabFocus();
   }

   public virtual consumeAction(Action _ac) : boolean {
      String acName = _ac.getActionName();
      // trace "xxx FloatParamDialog: got acName=\""+acName+"\"";

      switch(acName)
      {
         case "ok":
            handleSelection(true/*bOK*/, false/*bHold*/);
            break;

         case "ok_hold":
            handleSelection(true/*bOK*/, true/*bHold*/);
            break;

         case "cancel":
            handleSelection(false/*bOK*/, false/*bHold*/);
            break;

         case FloatParam.ACTION_VALUECHANGING:
            if(b_provide_changing)
            {
               if(recipient instanceof ActionConsumer)
               {
                  FloatAction fac <= _ac;
                  recipient.consumeAction(FloatAction.New(getProvidedActionAlias(ACTION_FLOATPARAMVALUECHANGING), this, fac.getFloatValue()));
               }
               break;
            }
            break;

         case FloatParam.ACTION_VALUECHANGED:
         case TextField.ACTION_TABAUTOCOMPLETE:
            // trace "xxx FloatParamDialog: floatparam.text=\""+floatparam.getText();
            floatparam.parseExpressionOrMapUser();
            // trace "xxx FloatParamDialog:   getFloatValue()="+floatparam.getFloatValue();
            handleSelection(true/*bOK*/, false/*bHold*/);
            break;
      }
      return true;
   }

}
