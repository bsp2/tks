// ----
// ---- file   : RadioButtonGroup.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2007-2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "ui" toolkit.
// ----
// ---- changed: 20May2007, 14Apr2008, 01Feb2009, 31May2009, 17Mar2011, 27Dec2020
// ----          
// ----
// ----

module MRadioButtonGroup;

namespace ui;


class RadioButtonGroup extends Panel, ActionProvider {

   define String ACTION_SELECT = "onSelect";


   public method getProvidedActionNames() : StringArray {
      return [ACTION_SELECT];
   }

   public method deselectAllExcept(RadioButton _b) {
      RadioButton *b <= first_child;
      while(b != null)
      {
         if(@(b) != @(_b))
         {
            b.setSelected(false);
         }
         b <= b.next;
      }
   }
   
   public method setSelectedValue(String _value) {
      RadioButton *b <= first_child;
      while(b != null)
      {
         if(b.value == _value)
         {
            b.setSelected(true);
         }
         else
         {
            b.setSelected(false);
         }
         b <= b.next;
      }
   }

   public method selectByIndex(int _idx) : RadioButton {
      RadioButton r <= null;
      RadioButton *b <= first_child;
      int i = 0;
      while(b != null)
      {
         if(_idx == i)
         {
            b.setSelected(true);
            r <= b;
         }
         else
         {
            b.setSelected(false);
         }
         i++;
         b <= b.next;
      }
      return r;
   }

   public method getSelectedIndex() : int {
      int r = 0;
      RadioButton *b <= first_child;
      while(b != null)
      {
         if(b.isSelected())
         {
            return r;
         }
         r++;
         b <= b.next;
      }
      return -1; // should never be reached
   }

   public method selectPrevious() {
      int idx = getSelectedIndex();
      idx--;
      int numButtons = getNumChildLayers();
      if(idx < 0)
      {
         idx = numButtons - 1;
      }

      RadioButton rb <= selectByIndex(idx);
      handleSelection(rb);
   }

   public method selectNext() {
      int idx = getSelectedIndex();
      idx++;
      int numButtons = getNumChildLayers();
      if(idx >= numButtons)
         idx = 0;

      RadioButton rb <= selectByIndex(idx);
      handleSelection(rb);
   }

   namespace method handleSelection(RadioButton _b) {
      StringAction *sa <= StringAction.New(getProvidedActionAlias(ACTION_SELECT), this, _b.getValue());
      provideAction(sa);
   }

   public virtual beginXFMTag(AbstractXMLForm _form, HashTable _attributes) : boolean {
      if(Panel::beginXFMTag(_form, _attributes))
      {
         String *atname, *atval;
         StringArray *atsplit;
         foreach atname in _attributes
         {
            atval <= _attributes[atname];
            switch(atname)
            {
               case "actionAlias":
                  atsplit <= atval.splitChar('=');
                  setProvidedActionAlias(atsplit.get(0), atsplit.get(1));
                  break;

               case "onSelect":
                  _form.addHandledAction(atname, StringAction, atval);
                  break;
            }
         }
      }
      return true;
   }

   public virtual addXFMChild(Layer _c) {
      if(_c instanceof RadioButton)
      {
         addChildLayer(deref _c);
      }
      else
      {
         trace "[---] RadioButtonGroup: trying to add non-RadioButton child layer (skipping).";
      }
   }

   public virtual endXFMTag(AbstractXMLForm _form, HashTable _attributes) {
      Layer::endXFMTag(_form, _attributes);
      
      RadioButton *bsel;
      RadioButton *b <= first_child;
      while( (b != null) && (bsel == null) )
      {
         if(b.isSelected())
         {
            bsel <= b;
         }
         else
         {
            b <= b.next;
         }
      }
      if(bsel == null)
      {
         // Select first button
         b <= first_child;
         if(b != null)
         {
            b.setSelected(true);
         }
      }
      else
      {
         deselectAllExcept(bsel); // Just to be sure..
      }
   }
}
