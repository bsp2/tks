// ----
// ---- file   : Rectangle2f.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2005-2024 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 21Jun2006
// ---- changed: ........., 06Jul2010, 26Aug2013, 27Dec2020, 30Mar2021, 26Oct2021, 29Mar2024
// ----
// ----
// ----

module MRectangle2f;

namespace ui;


class Rectangle2f {
   // Left top and right bottom coordinates
   float qx, qy, px, py;

   public init(float _qx, _qy, _px, _py) {
      qx = _qx;
      qy = _qy;
      px = _px;
      py = _py;
   }

   public initFromLayer(Layer _l) {
      qx = _l.getPositionX();
      qy = _l.getPositionY();

      px = qx + _l.getSizeX();
      py = qy + _l.getSizeY();
   }

   public rectangleIntersectionTest(Rectangle2f r) : boolean {
      if(px > r.qx)
      {
         if(qx < r.px)
         {
            // H-Intersect
            if(py > r.qy)
            {
               if(qy < r.py)
               {
                  // V-Intersect
                  return true;
               }
            }
         }
      }
      return false;
   }

   public pointIntersectionTest2f(float _x, _y) : boolean {
      return
         _x >= qx &&
         _x <  px &&
         _y >= qy &&
         _y <  py ;
   }

   public method layerIntersectionTest(Layer c) {
      // (todo) bad naming, should be called layerInclusionTest or similar

      // returns true if c is fully contained within rectangle
      float oqx = c.getPositionX();
      float opx = oqx + c.getSizeX();
      float oqy = c.getPositionY();
      float opy = oqy + c.getSizeY();

      return
         qx <= opx &&
         qy <= opy &&
         px >= oqx &&
         py >= oqy ;
   }

   public method layerCollisionTest(Layer c) {
      // returns true if c collides with rectangle

      float cqx = c.getPositionX();
      float cpx = cqx + c.getSizeX();

      // trace "xxx layerCollisionTest: this.px="+px+" this.qx="+qx+" other.px="+cpx+" other.qx="+cqx;

      if(qx >= cpx)
         return false;

      if(px <= cqx)
         return false;

      float cqy = c.getPositionY();
      float cpy = cqy + c.getSizeY();

      // trace "xxx layerCollisionTest: this.py="+py+" this.qy="+qy+" other.py="+cpx+" other.qy="+cqy;

      if(qy >= cpy)
         return false;

      if(py <= cqy)
         return false;

      return true;
   }

   public method translate2f(float _dx, _dy) {
      px += _dx;
      py += _dy;
      qx += _dx;
      qy += _dy;
   }

   public method getString() : String {
      return "("+qx+";"+qy+";"+px+";"+py+")";
   }

   public method getPosSizeString() : String {
      return "("+qx+";"+qy+";"+(px-qx)+";"+(py-qy)+")";
   }

   public method sort() {
      float t;

      if(px > qx)
      {
         t  = px;
         px = qx;
         qx = t;
      }

      if(py > qy)
      {
         t  = py;
         py = qy;
         qy = t;
      }
   }

}
