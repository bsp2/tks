// ----
// ---- file   : LookAndFeel.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2007-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "ui" toolkit.
// ----
// ---- changed: 07May2007, 27May2007, 22Apr2010, 29Apr2010, ..., 31Mar2013, ...., 11Feb2018
// ----          02Mar2018, 16Mar2018, 26Nov2018, 27Nov2018, 28Nov2018, 29Nov2018, 30Nov2018
// ----          01Dec2018, 02Dec2018, 05Dec2018, 13Dec2018, 01Nov2019, 03Nov2019, 30Jan2021
// ----          21Feb2022, 08Oct2023, 01Nov2023, 23Feb2024, 26Apr2024, 16Jan2025, 28Jan2025
// ----          10Sep2025
// ----
// ----
// ----

module MLookAndFeel;

namespace ui;


class LookAndFeelDefs {

   define int STYLE_BEVEL = 0;
   define int STYLE_FLAT  = 1;
   define int STYLE_USER  = 1024;

   // Color indices (for use with lnf_colors.get())
   define int COLOR_WINDOW_BG                               =  0;  // root layer bg
   define int COLOR_TRANSPARENTPANEL_BG                     =  1;  // FloatingLayer bg (windows, dialogs)
   define int COLOR_CONTROL_BG                              =  2;
   define int COLOR_CONTROL_BG_MEDIUM                       =  3;
   define int COLOR_CONTROL_INACTIVE_LT_BG                  =  4;  // button mouseover, not pressed
   define int COLOR_CONTROL_INACTIVE_RT_BG                  =  5;
   define int COLOR_CONTROL_INACTIVE_RB_BG                  =  6;
   define int COLOR_CONTROL_INACTIVE_LB_BG                  =  7;
   define int COLOR_CONTROL_ACTIVE_LT_BG                    =  8;  // button mouseover, pressed
   define int COLOR_CONTROL_ACTIVE_RT_BG                    =  9;
   define int COLOR_CONTROL_ACTIVE_RB_BG                    =  10;
   define int COLOR_CONTROL_ACTIVE_LB_BG                    =  11;
   define int COLOR_BORDER_DARK                             =  12;
   define int COLOR_BORDER_DIMDARK                          =  13;
   define int COLOR_BORDER_DIM                              =  14;
   define int COLOR_BORDER_DIMLIGHT                         =  15;
   define int COLOR_BORDER_MEDIUM                           =  16;
   define int COLOR_BORDER_NORMAL                           =  17;
   define int COLOR_BORDER_NORMALLIGHT                      =  18;
   define int COLOR_BORDER_LIGHT                            =  19;
   define int COLOR_VIEWPANE_BG                             =  20;
   define int COLOR_TEXT_FG                                 =  21;
   define int COLOR_TEXT_BG                                 =  22;  // unused
   define int COLOR_TEXT_EDIT_FG                            =  23;
   define int COLOR_TEXT_EDIT_BG                            =  24;
   define int COLOR_TEXT_EDIT_SELECT_FG                     =  25;
   define int COLOR_TEXT_EDIT_SELECT_BG                     =  26;
   define int COLOR_TEXT_EDITING_FG                         =  27;
   define int COLOR_TEXT_EDITING_BG                         =  28;
   define int COLOR_TEXT_EDITING_SELECT_FG                  =  29;
   define int COLOR_TEXT_EDITING_SELECT_BG                  =  30;
   define int COLOR_FLOATPARAM_PROGRESS_BG                  =  31;
   define int COLOR_CARET_FG                                =  32;
   define int COLOR_CARET_SELECT_FG                         =  33;
   define int COLOR_ACCEL_UL_FG                             =  34;     // Color of keyboard accelerator underline score
   define int COLOR_LABEL_CAPTION_FG                        =  35;
   define int COLOR_LABEL_BG                                =  36;
   define int COLOR_LABEL_TEXT_GHOSTED_RB                   =  37;
   define int COLOR_LABEL_TEXT_GHOSTED_LT                   =  38;
   define int COLOR_CHECKBOX_CAPTION_FG                     =  39;
   define int COLOR_CHECKBOX_BG                             =  40;
   define int COLOR_BUTTON_CAPTION_FG                       =  41;
   define int COLOR_BUTTON_BG                               =  42;
   define int COLOR_BUTTON_MOUSEOVER_PRESSED_TINT           =  43;
   define int COLOR_BUTTON_MOUSEOVER_TINT                   =  44;
   define int COLOR_BUTTON_NON_EDITABLE_TINT                =  45;
   define int COLOR_POPUPMENU_BG                            =  46;
   define int COLOR_POPUPMENUBUTTON_ACTIVE_BG               =  47;  // pressed
   define int COLOR_POPUPMENUBUTTON_INACTIVE_BG             =  48;
   define int COLOR_POPUPMENUBUTTON_MOUSEOVER_BG            =  49;
   define int COLOR_POPUPMENUBUTTON_MOUSEOVER_TEXT_FG       =  50;
   define int COLOR_POPUPMENUBUTTON_LEADSELECTION_BG        =  51;
   define int COLOR_POPUPMENUBUTTON_TEXT_FG                 =  52;
   define int COLOR_TABFOCUS_TEXT_BORDER                    =  53;
   define int COLOR_TABFOCUS_BORDER                         =  54;
   define int COLOR_TOOLTIP_BG                              =  55;
   define int COLOR_TOOLTIP_BORDER                          =  56;
   define int COLOR_TOOLTIP_CAPTION                         =  57;
   define int COLOR_WINDOWTITLE_INACTIVE_LT_BG              =  58;
   define int COLOR_WINDOWTITLE_INACTIVE_RT_BG              =  59;
   define int COLOR_WINDOWTITLE_INACTIVE_RB_BG              =  60;
   define int COLOR_WINDOWTITLE_INACTIVE_LB_BG              =  61;
   define int COLOR_WINDOWTITLE_ACTIVE_LT_BG                =  62;
   define int COLOR_WINDOWTITLE_ACTIVE_RT_BG                =  63;
   define int COLOR_WINDOWTITLE_ACTIVE_RB_BG                =  64;
   define int COLOR_WINDOWTITLE_ACTIVE_LB_BG                =  65;
   define int COLOR_WINDOWTITLE_CAPTION                     =  66;
   define int COLOR_SLIDER_ORIGVAL                          =  67;
   define int COLOR_SCROLLER_BG                             =  68;
   define int COLOR_REPEATBUTTON_BG                         =  69;
   define int COLOR_TABBEDVIEW_BG_INACTIVE                  =  70;
   define int COLOR_ACCELNAME_FG_INACTIVE                   =  71;
   define int COLOR_ACCELNAME_FG_ACTIVE                     =  72;
   define int COLOR_TABLEVIEW_DATA_BG                       =  73;
   define int COLOR_TABLEVIEW_CELL_SEPARATOR                =  74;
   define int COLOR_TABLEVIEW_CELL_BG_NORMAL                =  75;
   define int COLOR_TABLEVIEW_CELL_FG_NORMAL                =  76;
   define int COLOR_TABLEVIEW_CELL_BG_SELECTED_TINT         =  77;
   define int COLOR_TABLEVIEW_CELL_FG_SELECTED_TINT         =  78;
   define int COLOR_TABLEVIEW_CELL_BG_LEADSELECTION         =  79;
   define int COLOR_TABLEVIEW_CELL_FG_LEADSELECTION         =  80;
   define int COLOR_TABLEVIEW_CELL_BG_CURSOR                =  81;
   define int COLOR_TABLEVIEW_CELL_FG_CURSOR                =  82;
   define int COLOR_TABLEVIEW_CELL_BG_CURSOR_NOFOCUS        =  83;
   define int COLOR_TABLEVIEW_CELL_FG_CURSOR_NOFOCUS        =  84;
   define int COLOR_CUSTOM_EDITOR_BG_LIGHT                  =  85;
   define int COLOR_CUSTOM_EDITOR_BG_DARK                   =  86;
   define int COLOR_DIAL_BG                                 =  87;
   define int COLOR_DIAL_BG_GRABBED                         =  88;
   define int COLOR_DIAL_OUTLINE                            =  89;
   define int COLOR_DIAL_MARKER                             =  90;
   define int COLOR_DIAL_MARKER_NOTEDITABLE                 =  91;
   define int COLOR_STATUSBAR_DEFAULT_BG                    =  92;
   define int COLOR_KEYBOARDMON_MODIFIER_TEXT               =  93;
   define int COLOR_KEYBOARDMON_KEY_TEXT                    =  94;
   define int COLOR_KEYBOARDMON_BG                          =  95;

   define int COLOR_POPUPMENU_SEPARATOR_T                   =  96;
   define int COLOR_POPUPMENU_SEPARATOR_B                   =  97;
   define int COLOR_SLIDER_FLAT_BG                          =  98;  // base color
   define int COLOR_SLIDER_FLAT_HANDLE_KBDFOCUS_TINT        =  99;
   define int COLOR_SLIDER_FLAT_HANDLE_TINT                 = 100;
   define int COLOR_SLIDER_FLAT_HANDLE_MOUSEOVER_TINT       = 101;
   define int COLOR_BUTTON_FLAT_TOGGLE_OFF_BG_TINT          = 102;
   define int COLOR_BUTTON_FLAT_TOGGLE_ON_BG_TINT           = 103;
   define int COLOR_BUTTON_FLAT_TOGGLE_OFF_BORDER_TINT      = 104;
   define int COLOR_BUTTON_FLAT_TOGGLE_ON_BORDER_TINT       = 105;
   define int COLOR_STATUSBAR_DEFAULT_FG                    = 106;
   define int COLOR_FLOATPARAM_PROGRESS_EDITING_BG          = 107;
   define int COLOR_BUTTON_FLAT_DISABLED                    = 108;
   define int COLOR_TABBEDVIEW_BG_ACTIVE                    = 109; // selected tab bg
   define int COLOR_TABBEDVIEW_CAPTION_FG_INACTIVE          = 110;
   define int COLOR_TABBEDVIEW_CAPTION_FG_ACTIVE            = 111;
   define int COLOR_COMBOBOX_INVALID_OPTION_BG_TINT         = 112;
   define int COLOR_COMBOBOX_KBDFOCUS_BG                    = 113;
   define int COLOR_POPUPMENUFOLDERBUTTON_INACTIVE_BG       = 114;
   define int COLOR_TEXT_EDIT_NONEDITABLE_BG                = 115;
   define int COLOR_TABLEVIEW_DATA_TEXT_FG                  = 116;
   define int COLOR_TABLEVIEW_DATA_NONEDITABLE_BG_TINT      = 117;
   define int COLOR_TABLEVIEW_CELL_NONEDITABLE_BG_TINT      = 118;
   define int COLOR_SPLITPANE_HANDLE_FG                     = 119;
   define int COLOR_SLIDER_FLAT_HANDLE_HIGHCONTRAST_TINT    = 120;
   define int COLOR_SLIDER_FLAT_HIGHCONTRAST_BG             = 121;
   define int COLOR_MULTI_TEXT_FG                           = 122;
   define int COLOR_MULTI_TEXT_BG                           = 123;
   define int COLOR_MULTI_TEXT_SELECT_FG                    = 124;
   define int COLOR_MULTI_TEXT_SELECT_BG                    = 125;
   define int COLOR_MULTI_TEXT_FOCUS_FG                     = 126;
   define int COLOR_MULTI_TEXT_FOCUS_BG                     = 127;
   define int COLOR_MULTI_TEXT_FOCUS_SELECT_FG              = 128;
   define int COLOR_MULTI_TEXT_FOCUS_SELECT_BG              = 129;
   define int COLOR_MULTI_TEXT_CARET_FG                     = 130;
   define int COLOR_MULTI_TEXT_CARET_OVERWRITE_FG           = 131;
   define int COLOR_WINDOW_BORDER_FLAT_OL                   = 132; // alpha taken from window layer_alpha
   define int COLOR_DRAGHANDLELABEL_LINE_FG                 = 133;
   define int COLOR_TABLEVIEW_CELL_BG_LEADSELECTION_NOFOCUS = 134;
   define int COLOR_TABLEVIEW_CELL_FG_LEADSELECTION_NOFOCUS = 135;
   define int COLOR_TEXTFIELD_NONEDITABLE_FG_TINT           = 136;
   define int COLOR_DEFAULT_ICON_BLEND_C32                  = 137;
   define int COLOR_CHECKBOX_ICON_BLEND_C32                 = 138;
   define int COLOR_KEYHELPDLG_KEY_BG_TINT                  = 139;
   define int COLOR_KEYHELPDLG_KEY_FG                       = 140;
   define int COLOR_CAPTION_TINT_DIM                        = 141;
   define int COLOR_TEXTVIEW_FIND_HL                        = 142;
   define int COLOR_FLOATPARAMEDITOR_BORDER                 = 143;
   define int COLOR_TABFOCUS_TEXT_BORDER_FADED              = 144;

   define int COLOR_USER = 1000;  // for application defined widgets (also see AppLookAndFeel)
   define int TOTAL_NUM_COLORS = 2000;
}

class LookAndFeel : LookAndFeelDefs {

   define String LIGHT;  // => lnf_preset_light
   define String DARK;   // => lnf_preset_dark
   define String MONO;   // => lnf_preset_mono

   define int IDX_LIGHT = 0;
   define int IDX_DARK  = 1;
   define int IDX_MONO  = 2;

   IntArray colors;
   IntArray colors_orig;

   boolean b_icon_invert_mono;          // 1:invert monochromatic icon colors
   boolean b_popupmenu_bevel_border;    // 1:draw bevel border around popupmenu, 0:draw flat border
   boolean b_combobox_bevel_border;     // 0: don't draw border
   int     combobox_popup_table_style;  // bevel/flat (LookAndFeel.STYLE_xxx)
   boolean combobox_poup_table_flathighcontrast;
   boolean b_textfield_bevel_border;    // 0: don't draw border
   boolean b_textfield_ignore_nop_cursor_keys;  // 1: ignore left/right when cursor is already at first/last char
   boolean b_button_bevel_border;       // 0: don't draw border
   boolean b_tabswitch_bevel_border;    // 0: don't draw border
   boolean b_tabswitch_focus_border;    // 0: don't draw kbdfocus rectangle
   String  checkbox_icon_suffix;
   boolean b_tableviewdata_border;      // 1: draw (flat) border, 0: don't draw border
   boolean b_window_border_flat;
   byte    window_layer_alpha;
   int     slider_layer_style;          // (LookAndFeel.STYLE_xxx)
   boolean b_dial_linesmooth;
   float   tooltip_border_width;
   boolean b_titledpanel_border;


   public method initLookAndFeel() {
      explain "Update color cache, ..";
      colors.alloc(TOTAL_NUM_COLORS);
      colors.useAll();
      colors.fill(#ffff00ff);
      slider_layer_style = UI.IsHiDPI() ? LookAndFeel.STYLE_FLAT : LookAndFeel.STYLE_BEVEL;
      tooltip_border_width = 0.0f;
      b_titledpanel_border = true;
   }

   public method getName() : String {
   }

   public method getColor(int _colorIndex) : int {
      return colors.get(_colorIndex);
   }

   public method getColorAlpha(int _colorIndex, byte _alpha) : int {
      int c32 = colors.get(_colorIndex);
      return (c32&0x00ffffff) | ((_alpha&255)<<24);
   }

   public method getTintedColor(int _lnfIdx, int _tint32) : int {
      int c32 = colors.get(_lnfIdx);
      if(_tint32) // Colorize ?
      {
         c32 = sdvg_MixARGBf(c32, 0xff000000 | (_tint32&0x00FFFFFF), ((_tint32>>24)&255)/255.0);
      }
      return c32;
   }

   public method setColor(int _colorIndex, int _c32) {
      // for user defined color tweaks (e.g. when color grading is enabled)
      colors[_colorIndex] = _c32;
   }

   public method revertColors() {
      colors = colors_orig;
   }


}
