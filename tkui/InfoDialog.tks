// ----
// ---- file   : InfoDialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2007-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 27Apr2007
// ---- changed: 28Apr2007, 06Nov2007, 14Apr2008, 02Feb2009, 06Feb2010, 22Apr2010, 27Nov2018
// ----          27Dec2020, 04Oct2023, 30Oct2023
// ----
// ----
// ----

module MInfoDialog;

namespace ui;


class InfoDialog extends Dialog, ActionConsumer, ActionProvider {

   define int MIN_WIDTH = 160;
   define int MIN_HEIGHT = 70;

   define int SELECT_OK = 0;
   define String ACTION_INFODIALOGCLOSED = "onInfoDialogClosed";

   protected char accel_ok;
   protected ActionConsumer recipient;
   protected Button *bt_ok;

   public static New(String _caption, String _message, String _btOkCaption, String _iconName, ActionConsumer _recipient) : InfoDialog {
      local InfoDialog d;
      d.initInfoDialog(deref _caption, deref _message, _btOkCaption, deref _iconName, _recipient);
      return deref d;
   }

   public static NewIdea(String _caption, String _message, ActionConsumer _recipient) : InfoDialog {
      explain "Construct new info dialog with an idea icon.";

      local InfoDialog d;
      d.initInfoDialog(deref _caption, deref _message, "\aOk", "idea", _recipient);
      return deref d;
   }

   public static NewSuccess(String _caption, String _message, ActionConsumer _recipient) : InfoDialog {
      explain "Construct new info dialog that can be used to inform the user that a task has been successfully completed..";

      local InfoDialog d;
      d.initInfoDialog(deref _caption, deref _message, "\aOk", "success", _recipient);
      return deref d;
   }

   public static NewInfo(String _caption, String _message, ActionConsumer _recipient) : InfoDialog {
      explain "Construct new standard info dialog.";

      local InfoDialog d;
      d.initInfoDialog(deref _caption, deref _message, "\aOk", "info", _recipient);
      return deref d;
   }

   public static NewError(String _caption, String _message, ActionConsumer _recipient) : InfoDialog {
      explain "Construct new standard error dialog.";

      local InfoDialog d;
      d.initInfoDialog(deref _caption, deref _message, "\aOk", "error", _recipient);
      return deref d;
   }

   protected initInfoDialog(String _caption, String _message, String _btOkCaption, String _iconName, ActionConsumer _recipient) {

      initDialog();

      recipient <= deref _recipient;
      int w, h;

      local Panel l;
      l.initPanel();
      l.setLayout(SuperBorderLayout);

      // Add message
      local Label lbMessage;
      lbMessage.initLabel();
      lbMessage.setCaption(_message);
      if(_iconName != null)
      {
         Icon icon <= UI.GetIcon(_iconName);
         if(icon != null)
         {
            lbMessage.setIcon(icon);
            lbMessage.setIconPlacement(Layout.LEFT);
         }
      }
      l.addLayer(deref lbMessage, Layout.CENTER);

      // Add OK button
      local Button btOk;
      btOk.initButton();
      btOk.setCaption(_btOkCaption);
      btOk.setAlignment(Layout.CENTER);
      btOk.setPadding4f(UIConstants.DIALOGBUTTON_PAD_TOP, UIConstants.DIALOGBUTTON_PAD_LEFT,
                        UIConstants.DIALOGBUTTON_PAD_BOTTOM, UIConstants.DIALOGBUTTON_PAD_RIGHT);
      btOk.setInnerPadding4f(UIConstants.DIALOGBUTTON_INSET_TOP, UIConstants.DIALOGBUTTON_INSET_LEFT,
                             UIConstants.DIALOGBUTTON_INSET_BOTTOM, UIConstants.DIALOGBUTTON_INSET_RIGHT);
      btOk.setProvidedActionAlias(Button.ACTION_CLICK, "ok");
      bt_ok <= btOk;
      l.addLayer(deref btOk, Layout.BOTTOM);

      // Calculate inner window size
      w = mathMaxf(btOk.getPreferredSizePadX(), lbMessage.getPreferredSizePadX());
      if(w<MIN_WIDTH)
      {
         w = MIN_WIDTH;
      }
      h = mathMaxf(btOk.getPreferredSizePadY()+lbMessage.getPreferredSizePadY(), MIN_HEIGHT);
      l.setSize2f(w, h);

      // Determine accelerator key
      accel_ok = UI.GetAcceleratorChar(_btOkCaption);

      // Initialize window
      initWindow(deref l,
                 _caption,
                 0, 0, // update position in show()
                 w, h
                 );
   }

   public virtual getProvidedActionNames() : StringArray {
      return [ACTION_INFODIALOGCLOSED];
   }

   protected method handleSelection() {
      hide();
      if(recipient instanceof ActionConsumer)
      {
         IntAction ac <= IntAction.New(getProvidedActionAlias(ACTION_INFODIALOGCLOSED), this, SELECT_OK);
         recipient.consumeAction(ac);
         // Note: Do not add code below this line since the dialog instance may have been deleted by the recipient!
      }
   }

   public virtual consumeAction(Action _ac) : boolean {
      String name=_ac.getActionName();
      ////trace "xxx got action name="+name;
      switch(name) {
         case "ok":
            handleSelection();
            break;
      }
      return true;
   }

   public virtual onKey(Key _key) : boolean {
      switch(_key.pressed)
      {
         case VKEY_RETURN:
         case VKEY_SPACE:
            handleSelection();
            return true;
         default:
            if(_key.unicode == accel_ok)
            {
               handleSelection();
               return true;
            }
            break;
      }
      return false;
   }

   protected virtual postShow() {
      Dialog::postShow();
      UI.SetKeyboardFocus(bt_ok);
   }

}
