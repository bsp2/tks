// ----
// ----    file: UIConstants.tks
// ----  author: Copyright (c) 2005-2025 by Bastian Spiegel <bs@tkscript.de>
// ----
// ---- license: Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ----    info:
// ----
// ---- changed: 19Apr2005, 20Apr2005, 28May2005, 07Jun2005, 09Jun2005, 10Jun2005, 18Jun2005
// ----          23Jun2005, 24Jun2005, 25Jun2005, 17Jul2005, 10Aug2005, 13Aug2005, 14Aug2005
// ----          10Jan2006, 12Aug2006, 28Apr2007, 29Apr2007, 30Apr2007, 05May2007, 30Oct2007,
// ----          11Nov2007, 02Feb2009, 09Jan2010, 25Feb2011, 09Jan2012, 12Aug2014, 13Apr2017
// ----          22Oct2022, 04Oct2023, 30Oct2023, 01Apr2024, 04Apr2025
// ----
// ----
// ----

module MUIConstants;

namespace ui;


class UIConstants {
   define int NONE   = 0;

   // ---- mouse settings
   define int MOUSE_CLICK_TIMEOUT = 250;
   define int MOUSE_DOUBLE_CLICK_TIMEOUT = 200;

   // ---- labels, buttons
   define int COLOR32_TEXT_FG = #FF000000;
   define int COLOR32_TEXT_BG = 0;

   // ---- textfields, textareas
   define int COLOR32_TEXT_EDIT_FG        = #FF333333;
   define int COLOR32_TEXT_EDIT_BG        = #FFe1e1e1;
   define int COLOR32_TEXT_EDIT_SELECT_FG = #FF444444;
   define int COLOR32_TEXT_EDIT_SELECT_BG = #FFc8e8c8;

   // ---- textfields, textareas, while editing
   define int COLOR32_TEXT_EDITING_FG        = #FF222222;
   define int COLOR32_TEXT_EDITING_BG        = #FFE8E8E8;
   define int COLOR32_TEXT_EDITING_SELECT_FG = #FFEEEEEE;
   define int COLOR32_TEXT_EDITING_SELECT_BG = #FF2525CD;

   define int COLOR32_CARET_FG        = #FF000000;
   define int COLOR32_CARET_SELECT_FG = #FFeeeeee;

   // Color of keyboard accelerator underline score
   define int COLOR32_ACCEL_UL_FG = #FF330000;

   // // define int COLOR32_POPUPMENUBUTTON_ACTIVE_BG = #FF000066;
   // // define int COLOR32_POPUPMENUBUTTON_MOUSEOVER_BG = #FF001199;
   define int COLOR32_POPUPMENUBUTTON_ACTIVE_BG = #FF000044;
   // // define int COLOR32_POPUPMENUBUTTON_MOUSEOVER_BG = #FF000066;
   // // define int COLOR32_POPUPMENUBUTTON_MOUSEOVER_BG = #FF0a246a; // win32 style
   define int COLOR32_POPUPMENUBUTTON_MOUSEOVER_BG = #FF051266;
   define int COLOR32_POPUPMENUBUTTON_MOUSEOVER_TEXT_FG = #FFFFFFFF;
   define int COLOR32_POPUPMENUBUTTON_LEADSELECTION_BG = #FFb8d8b8;

   define int POPUPMENU_ICON_WIDTH = 16;
   define int POPUPMENU_ICON_PAD_R = 4;

   define int POPUPMENU_SHOW_TIMEOUT = 300; // Mouseover time until submenu opens
   define int POPUPMENU_HIDE_TIMEOUT = 700; // Mouseover time until submenu opens

   define int COLOR32_TABFOCUS_TEXT_BORDER = #FF7C7C7C;
   define int COLOR32_TABFOCUS_BORDER = #FF000000;

   // ---- Delay in ms until a tooltip is displayed for a control
   define int TOOLTIP_SHOW_DELAY        =   500;
   define int TOOLTIP_STAGE2_DELAY      =   800;
   define int TOOLTIP_HIDE_DELAY        = 60000;
   define int TOOLTIP_FAST_OPEN_TIMEOUT =   300;
   define int TOOLTIP_FAST_OPEN_DELAY   =   100; //250;
   define int COLOR32_TOOLTIP_BG      = #FFffffe0;
   define int COLOR32_TOOLTIP_BORDER  = #FF000000;
   define int COLOR32_TOOLTIP_CAPTION = #FF000000;

   // ---- Keyrepeat delay + rate (in milliseconds)
   define int KEY_REPEAT_DELAY = 300;
   define int KEY_REPEAT_RATE  = 29;

   // ---- Keyrepeat delay + rate (#frames @60Hz)
   define int KEY_REPEAT_DELAY_FRAMES = 15;
   define int KEY_REPEAT_RATE_FRAMES  = 1;

   // ---- triad key timeout (in milliseconds)
   define int TRIADKEY_TIMEOUT = 750;

   // ---- Mouse hold delay (in milliseconds) (onMouseHold())
   define int MOUSE_HOLD_DELAY = 250;

   // ---- Mouse hold short threshold (in milliseconds) (TextField force select-all)
   define int MOUSE_HOLD_SHORT_MIN_THRESHOLD = 125;

   // ---- Mouse drag threshold (in pixels)
   define int MOUSE_DRAG_THRESHOLD = 2;
   explain "Number of pixels the mouse pointer has to be moved in order to start a mouse drag operation.";

   // xxx TODO: remove color32 defines from this class (superceded by LookAndFeel class)

   // green-red ratio: 0.9729
   // blue-red ratio:  0.9513
   define int C32_G0  = #ff000000;
   define int C32_G1  = #ff100f0f;//#ff101010;
   define int C32_G2  = #ff201f1e;//#ff202020;
   define int C32_G3  = #ff302e2d;//#ff303030;
   define int C32_G4  = #ff403e3c;//#ff404040;
   define int C32_G5  = #ff504d4c;//#ff505050;
   define int C32_G6  = #ff605d5b;//#ff606060;
   define int C32_G7  = #ff706c6a;//#ff707070;
   define int C32_G8  = #ff807c79;//#ff808080;
   define int C32_G9  = #ff908c88;//#ff909090;
   define int C32_G9Y = #ff918d88;//#ff919190;
   define int C32_GAH = #ff989390;//#ff989898;
   define int C32_GAHY= #ff9b9690;//#ff9b9b98;
   define int C32_GA  = #ffa09b98;//#ffa0a0a0;
   define int C32_GAY = #ffa19c98;//#ffa1a1a0;
   define int C32_GBH = #ffa8a39f;//#ffa8a8a8;
   define int C32_GBHY= #ffa9a49f;//#ffa9a9a8;
   define int C32_GB  = #ffb0aba7;//#ffb0b0b0;
   define int C32_GBY = #ffb2aca7;//#ffb2b1b0;
   define int C32_GCH = #ffb9b5b1;//#ffb9b3af;//#ffb9b9b8;
   define int C32_GC  = #ffc0bab6;//#ffc0c0c0;
   define int C32_GCY = #ffc2bcb6;//#ffc2c2c0;
   define int C32_GD  = #ffd0cac5;//#ffd0d0d0;
   define int C32_GDY = #ffd1cbc5;//#ffd1d1d0;
   define int C32_GE  = #ffe0d9d5;//#ffe0e0e0;
   define int C32_GF  = #fff0e9e4;//#fff0f0f0;
   define int C32_G10 = #fffff8f2;//#fffFFFFF;

   // ---- Background colors for windows
   // // define int COLOR32_WINDOW_BG    = #ffb3b3b3;////d4d0c8;
   // // define int COLOR32_WINDOW_BG    = #ffd4d0c8;
   define int COLOR32_WINDOW_BG      = #ffb5b2ac;
   define float COLORF_A_WINDOW_BG   = 1f;
   define float COLORF_R_WINDOW_BG   = 0.709;//0.7;
   define float COLORF_G_WINDOW_BG   = 0.6898;//0.7; // red ratio: 0,97291960507757404795486600846262
   define float COLORF_B_WINDOW_BG   = 0.6745;//0.7; // red ratio: 0,95133991537376586741889985895628

   // // define int WINDOW_LAYER_ALPHA = 0xDF;

   ////define int COLOR32_TRANSPARENTPANEL_BG = #cfb5b2ac;

   // ---- Background colors for controls, active=left mousebutton held down
   define int COLOR32_CONTROL_BG             = C32_GCH;
   define int COLOR32_CONTROL_BG_MEDIUM      = C32_GBH;
   define int COLOR32_CONTROL_INACTIVE_LT_BG = C32_GCH;
   define int COLOR32_CONTROL_INACTIVE_RT_BG = C32_GCH;
   define int COLOR32_CONTROL_INACTIVE_RB_BG = C32_GCH;
   define int COLOR32_CONTROL_INACTIVE_LB_BG = C32_GCH;
   define int COLOR32_CONTROL_ACTIVE_LT_BG   = C32_GAHY;
   define int COLOR32_CONTROL_ACTIVE_RT_BG   = C32_GAHY;
   define int COLOR32_CONTROL_ACTIVE_RB_BG   = C32_GAHY;
   define int COLOR32_CONTROL_ACTIVE_LB_BG   = C32_GAHY;

   define int COLOR32_VIEWPANE_BG     = C32_GBHY;

   define int COLOR32_WINDOWTITLE_INACTIVE_LT_BG = #6f000000;
   define int COLOR32_WINDOWTITLE_INACTIVE_RT_BG = #6fb5b2ac;//#6fb3b3b3;
   define int COLOR32_WINDOWTITLE_INACTIVE_RB_BG = #6fb9b4ae;//#6fb3b3b3;
   define int COLOR32_WINDOWTITLE_INACTIVE_LB_BG = #6f000000;

   define int COLOR32_WINDOWTITLE_ACTIVE_LT_BG = #cf000020;
   define int COLOR32_WINDOWTITLE_ACTIVE_RT_BG = #7f8383b3;
   define int COLOR32_WINDOWTITLE_ACTIVE_RB_BG = #7f8383b3;
   define int COLOR32_WINDOWTITLE_ACTIVE_LB_BG = #cf000020;

   // ---- Border colors
   define int COLOR32_BORDER_DARK     = C32_G2;
   define int COLOR32_BORDER_DIMDARK  = C32_G5;
   define int COLOR32_BORDER_DIM      = C32_G8;
   define int COLOR32_BORDER_DIMLIGHT = C32_G9;
   define int COLOR32_BORDER_MEDIUM   = C32_GA;
   define int COLOR32_BORDER_NORMAL   = C32_GC;
   define int COLOR32_BORDER_LIGHT    = C32_GE;

   define int COLOR32_SCROLLER_BG = C32_GD;
   define int COLOR32_REPEATBUTTON_BG = C32_GC;

   define float DEFAULT_BORDER_SIZE = 1;

   define float WINDOW_BORDER_SIZE_X = 1;
   define float WINDOW_BORDER_SIZE_Y = 1;

   define float WINDOW_MOUSE_BORDER_SIZE = 4;

   define float LABEL_INSET_TOP    = DEFAULT_BORDER_SIZE*3;
   define float LABEL_INSET_LEFT   = DEFAULT_BORDER_SIZE*3;
   define float LABEL_INSET_BOTTOM = DEFAULT_BORDER_SIZE*4;
   define float LABEL_INSET_RIGHT  = DEFAULT_BORDER_SIZE*5;

   define float BUTTON_INSET_TOP    = DEFAULT_BORDER_SIZE*2;
   define float BUTTON_INSET_LEFT   = DEFAULT_BORDER_SIZE*3;
   define float BUTTON_INSET_BOTTOM = DEFAULT_BORDER_SIZE*2;
   define float BUTTON_INSET_RIGHT  = DEFAULT_BORDER_SIZE*3;

   define float LABELBUTTON_INSET_TOP    = DEFAULT_BORDER_SIZE;
   define float LABELBUTTON_INSET_LEFT   = DEFAULT_BORDER_SIZE*2;
   define float LABELBUTTON_INSET_BOTTOM = DEFAULT_BORDER_SIZE;
   define float LABELBUTTON_INSET_RIGHT  = DEFAULT_BORDER_SIZE*2;

   define float TABBUTTON_INSET_TOP    = DEFAULT_BORDER_SIZE*2;
   define float TABBUTTON_INSET_LEFT   = DEFAULT_BORDER_SIZE*1;
   define float TABBUTTON_INSET_BOTTOM = DEFAULT_BORDER_SIZE*1;
   define float TABBUTTON_INSET_RIGHT  = DEFAULT_BORDER_SIZE*1;

   define float DIALOGBUTTON_INSET_TOP    = 4;
   define float DIALOGBUTTON_INSET_LEFT   = 8;
   define float DIALOGBUTTON_INSET_BOTTOM = 6;
   define float DIALOGBUTTON_INSET_RIGHT  = 8;

   define float DIALOGBUTTON_PAD_TOP    = 4;
   define float DIALOGBUTTON_PAD_LEFT   = 10;
   define float DIALOGBUTTON_PAD_BOTTOM = 4;
   define float DIALOGBUTTON_PAD_RIGHT  = 10;

   define float TITLEDPANEL_TEXT_INSET = 8;
   define float TITLEDPANEL_TEXT_PAD = 2;

   // // define int    DEFAULT_FONT_SIZE_TEXTFIELD = 13;
   define String DEFAULT_FONT_NAME_TEXTFIELD = "default 11"; // // "fixed 13";
   // // define String DEFAULT_FONT_NAME_TEXTFIELD = "fixed 13";

   // // define int    DEFAULT_FONT_SIZE_LABEL = 13;
   // // define int    DEFAULT_FONT_SIZE_LABEL_XL = 24;
   // // define String DEFAULT_FONT_NAME_LABEL = "default 13";

   define int    DEFAULT_FONT_SIZE_LABEL = 11; // tahoma
   define int    DEFAULT_FONT_SIZE_LABEL_XL = 24;
   define String DEFAULT_FONT_NAME_LABEL = "default 11";
   define String DEFAULT_FONT_NAME_LABEL_BOLD = "default bold 13";
   define String DEFAULT_FONT_NAME_LABEL_SMALL_HIDPI = "default 5.5";
   define String DEFAULT_FONT_NAME_LABEL_SMALL_LODPI = "default 9";

   define String DEFAULT_FONT_NAME_TABBEDVIEW_INACTIVE = "default 11";
   define String DEFAULT_FONT_NAME_TABBEDVIEW_ACTIVE = "default bold 13";

   define String DEFAULT_FONT_NAME_POPUPACCEL = "default 11";

   define String DEFAULT_FONT_NAME_WINDOWTITLE = "default_unscaled 11";
   define String DEFAULT_FONT_NAME_WINDOWTITLE_HIDPI = "default_unscaled 23";

   define int   FIXED_FONTRESOURCE_SIZE = 13;
   define int   FIXED_FONTRESOURCE_SIZE2 = 17;
   // // define int DEFAULT_FONTRESOURCE_SIZE1 = 13;
   define int   DEFAULT_FONTRESOURCE_SIZE1 = 11; // default font size
   define float DEFAULT_FONTRESOURCE_SMALL_HIDPI = 5.5;
   define float DEFAULT_FONTRESOURCE_SMALL_LODPI = 9.0;
   define int   DEFAULT_FONTRESOURCE_SIZE1BOLD = 13;
   define int   DEFAULT_FONTRESOURCE_SIZE1ITALIC = 13;
   define int   DEFAULT_FONTRESOURCE_SIZE2 = 24;
   define int   DEFAULT_FONTRESOURCE_SIZE_HIDPI_WINDOWTITLE = 23;

   define String DEFAULT_FONT_NAME_FIXED = "fixed 13";
   define String DEFAULT_FONT_NAME_FIXED_LARGE = "fixed 17";

   // ---- sliders
   define float DEFAULT_KNOB_SIZE = 13;

   // ---- cursors
   define String CURSOR_NONE     = "none";
   define String CURSOR_NORMAL   = "normal";
   define String CURSOR_MOVE     = "move";
   define String CURSOR_MOVEX    = "movex";
   define String CURSOR_MOVEY    = "movey";
   define String CURSOR_MOVEXYD  = "movexyd";
   define String CURSOR_MOVEXYU  = "movexyu";
   define String CURSOR_WAIT     = "wait";
   define String CURSOR_RELOAD   = "reload";
   define String CURSOR_TYPE     = "type";
   define String CURSOR_DENIED   = "denied";
   define String CURSOR_EDIT     = "edit";
   define String CURSOR_GRAB     = "grab";
   define String CURSOR_ADD      = "add";
   define String CURSOR_GRABBED  = "grabbed";
   define String CURSOR_SPLITX   = "splitx";
   define String CURSOR_SPLITY   = "splity";
   define String CURSOR_PENCIL   = "pencil";
   define String CURSOR_NOPENCIL = "nopencil";

   // ---- blend modes
   //       (note) see UIRenderer.SelectBlendMode(), Panel.setPanelBorderBlend()
   define int BLEND_OFF      = 0;
   define int BLEND_SRCOVER  = 1;
   define int BLEND_ADDITIVE = 2;
   define int BLEND_SRCCOLOR = 3;
   define int BLEND_DSTCOLOR = 4;

   public static ParseBlendMode(String _sBlend) : int {
      int retBlend;
      switch(_sBlend)
      {
         default:
         case "default":
         case "off":
         case "none":
            retBlend = BLEND_OFF;
            break;

         case "srcover":
         case "normal":
         case "1":
         case "true":
            retBlend = BLEND_SRCOVER;
            break;

         case "additive":
         case "add":
            retBlend = BLEND_ADDITIVE;
            break;

         case "srccolor":
            retBlend = BLEND_SRCCOLOR;
            break;

         case "dstcolor":
            retBlend = BLEND_DSTCOLOR;
            break;
      }
      return retBlend;
   }

}
