// ----
// ---- file   : TitledPanel.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2006-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "ui" toolkit.
// ----
// ---- changed: 16Aug2006, 11Nov2007, 23Sep2009, 06Feb2010, 22Apr2010, 09Jan2012, 27Aug2013
// ----          12Aug2014, 14Sep2014, 26Feb2017, 16Feb2018, 27Nov2018, 29Nov2018, 23Oct2022
// ----          04Mar2023, 04Oct2023, 01Nov2023, 02Nov2023, 29Mar2024, 10Sep2025
// ----
// ----
// ----

module MTitledPanel;

namespace ui;


class TitledPanel extends Panel {
   protected Label label;
   protected Composite *inner_layer;
   protected float ipad_t;
   protected float ipad_l;
   protected float ipad_b;
   protected float ipad_r;

   protected boolean b_draw_border;
   protected int     border_inset_scale_x;
   protected int no_border_style;  // 0=fill+(alt)borders  1=just caption+gradient

   protected int caption_inset_x;

   public method initTitledPanel() {
      initPanel();
      label.initLabel();
      initTitledPanelOnly();
   }

   public method initTitledPanelOnly() {
      b_draw_border = true;
      border_inset_scale_x = 23;

      caption_inset_x = UIConstants.TITLEDPANEL_TEXT_INSET + UIConstants.TITLEDPANEL_TEXT_PAD;

      setLayout(SuperBorderLayout);

      inner_layer <= new Composite;
      inner_layer.initComposite();
      inner_layer.setLayout(SuperBorderLayout);
      inner_layer.setPadding4fUnscaled(15*UI.font_scaling,
                                       UIConstants.DEFAULT_BORDER_SIZE*border_inset_scale_x,
                                       UIConstants.DEFAULT_BORDER_SIZE*3,
                                       UIConstants.DEFAULT_BORDER_SIZE*4
                                       );
      inner_layer.setLayoutWeight2f(1,1);

      label.setTextPlacement(Layout.LEFT);
      label.setEnableCaptionDim(false);
      label.setInnerPadding4f(0,0,0,0);
      label.setPadding4f(0,0,0,0);

      addLayer(inner_layer, Layout.CENTER);
   }

   public virtual getLayoutFirstChild() : Layer {
      return inner_layer;
   }

   public method getLabel() : Label {
      return label;
   }

   public method setCaption(String _caption) {
      label.setCaption(_caption);
   }

   protected method calcMinimumSizeX() {
      Panel::calcMinimumSizeX();
      ////trace "xxx TitledPanel: calc'd minsizex="+minimum_size_x;
      float lpsx = label.getMinimumSizePadX() + UIConstants.TITLEDPANEL_TEXT_INSET + UIConstants.TITLEDPANEL_TEXT_PAD*2 + UIConstants.DEFAULT_BORDER_SIZE*4*2;
      if(minimum_size_x < lpsx)
         minimum_size_x = lpsx;
      ////trace "xxx TitledPanel: caption=\""+label.getCaption()+"\" minimum_size_x="+minimum_size_x;
   }

   protected virtual calcPreferredSizeX() {
      Panel::calcPreferredSizeX();
      ////trace "xxx TitledPanel: panel prefsizex="+preferred_size_x;
      float lpsx = label.getPreferredSizePadX() + UIConstants.TITLEDPANEL_TEXT_INSET + UIConstants.TITLEDPANEL_TEXT_PAD*2 +UIConstants.DEFAULT_BORDER_SIZE*4*2;
      ////trace "xxx TitledPanel::calcPreferredSizeX psx="+preferred_size_x+" lpsx="+lpsx;
      if(preferred_size_x < lpsx)
         preferred_size_x = lpsx;
      ////trace "xxx TitledPanel: preferred_size_x="+preferred_size_x;
   }

   protected virtual calcMinimumSizeY() {
      Panel::calcMinimumSizeY();
      ////trace "xxx TitledPanel: calc'd minsizex="+minimum_size_x;
      float lpsy = label.getMinimumSizePadY() + UIConstants.TITLEDPANEL_TEXT_INSET + UIConstants.TITLEDPANEL_TEXT_PAD*2 + (b_draw_border?(8+7):2);
      if(minimum_size_y < lpsy)
         minimum_size_y = lpsy;
      // trace "xxx TitledPanel: caption=\""+label.getCaption()+"\" minimum_size_y="+minimum_size_y+" lpsy="+lpsy;
   }

   protected virtual calcPreferredSizeY() {
      Panel::calcPreferredSizeY();
      float lpsy = label.getPreferredSizePadY() + UIConstants.TITLEDPANEL_TEXT_INSET + UIConstants.TITLEDPANEL_TEXT_PAD*2 + (b_draw_border?(8+7):2);
      ////trace "xxx TitledPanel::calcPreferredSizeY psy="+preferred_size_y+" lpsy="+lpsy;
      if(preferred_size_y < lpsy)
         preferred_size_y = lpsy;

      if(null != inner_layer)
      {
         // (todo) clean this up
         if(b_draw_border)
         {
            inner_layer.setPadding4fUnscaled(label.getPreferredSizePadY() + 4/**UI.font_scaling*/  + ipad_t,
                                             UIConstants.DEFAULT_BORDER_SIZE*4 + ipad_r,
                                             UIConstants.DEFAULT_BORDER_SIZE*3 + ipad_b,
                                             UIConstants.DEFAULT_BORDER_SIZE*4 + ipad_r
                                             );
         }
         else
         {
            inner_layer.setPadding4fUnscaled(label.getPreferredSizePadY(),
                                             UIConstants.DEFAULT_BORDER_SIZE*border_inset_scale_x + ipad_r,
                                             UIConstants.DEFAULT_BORDER_SIZE*0,// + (UI.IsHiDPI()?4:0),
                                             UIConstants.DEFAULT_BORDER_SIZE*1 + ipad_r
                                             );
            // // preferred_size_y -= 9; // (?)
         }
      }

      // trace "xxx TitledPanel: caption=\""+label.getCaption()+"\" preferred_size_y="+preferred_size_y;
   }

   public virtual onLookAndFeelChanged() {
      Layer::onLookAndFeelChanged();

      label.onLookAndFeelChanged();
   }

   public virtual onDraw() {
      float b = UIConstants.DEFAULT_BORDER_SIZE;
      float sw = label.getCaptionWidthPad();
      float sh = label.getCaptionHeightPad();
      float x = 0;
      float y = sh*0.5 - b*0.5;
      float w = size_x;
      float h = size_y - y;

      //trace "xxx TitledPanel: geo="+getGeometryString();

      float textInsetX = caption_inset_x + b;

      if(b_draw_border)
      {
         // // UIRenderer.DrawDefaultBackground(textInsetX, 0, size_x-textInsetX, sh);
         UIRenderer.DrawDefaultBackground(textInsetX, 0, sw, sh);

         if(lnf.b_titledpanel_border)
         {
            UIRenderer.DrawFilledRectangle(x, y+h-b, w, b, lnf_colors.get(LookAndFeel.COLOR_BORDER_LIGHT)); // outer bottom
            UIRenderer.DrawFilledRectangle(x+w-b, y, b, h, lnf_colors.get(LookAndFeel.COLOR_BORDER_LIGHT)); // outer right
            UIRenderer.DrawFilledRectangle(x+b, y+b, b, h-b*2, lnf_colors.get(LookAndFeel.COLOR_BORDER_LIGHT)); // outer left
            UIRenderer.DrawFilledRectangle(x+b, y+b, UIConstants.TITLEDPANEL_TEXT_INSET, b, lnf_colors.get(LookAndFeel.COLOR_BORDER_LIGHT)); // outer top left
            UIRenderer.DrawFilledRectangle(x+b+UIConstants.TITLEDPANEL_TEXT_INSET+sw+UIConstants.TITLEDPANEL_TEXT_PAD*2,  // outer top right
                                           y+b,
                                           w-b*2-(UIConstants.TITLEDPANEL_TEXT_INSET+sw+UIConstants.TITLEDPANEL_TEXT_PAD*2),
                                           b, lnf_colors.get(LookAndFeel.COLOR_BORDER_LIGHT)); // outer top

            UIRenderer.DrawFilledRectangle(x, y+h-b*2, w-b, b, lnf_colors.get(LookAndFeel.COLOR_BORDER_DARK)); // inner bottom
            UIRenderer.DrawFilledRectangle(x+w-b*2, y, b, h-b, lnf_colors.get(LookAndFeel.COLOR_BORDER_DARK)); // inner right
            UIRenderer.DrawFilledRectangle(x, y, UIConstants.TITLEDPANEL_TEXT_INSET, b, lnf_colors.get(LookAndFeel.COLOR_BORDER_DARK)); // inner top left
            UIRenderer.DrawFilledRectangle(x+UIConstants.TITLEDPANEL_TEXT_INSET+sw+UIConstants.TITLEDPANEL_TEXT_PAD*2, // inner top right
                                           y, w-b-(UIConstants.TITLEDPANEL_TEXT_INSET+sw+UIConstants.TITLEDPANEL_TEXT_PAD*2),
                                           b, lnf_colors.get(LookAndFeel.COLOR_BORDER_DARK)); // inner top

            UIRenderer.DrawFilledRectangle(x, y, b, h-b, lnf_colors.get(LookAndFeel.COLOR_BORDER_DARK)); // inner left
         }
      }
      else
      {
         h = size_y;
         // UIRenderer.DrawFilledRectangle(0, 0, w, h, #20008000);
         int c32Inner;
         int c32Alt;
         if(b_bg_keepalpha)
            UIRenderer.EnableBlendingKeepAlpha();

         if(0 == no_border_style)
         {
            if(UI.IsDarkOrMono())
               c32Inner = sdvg_TintARGB(lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG), #05ffffff);
            else
               c32Inner = sdvg_TintARGB(lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG), #1Cffffff);
            UIRenderer.DrawFilledRectangle(inner_layer.position_x, sh+1, w-inner_layer.position_x, h-(sh+1)+1,
                                           c32Inner
                                           );
         }

         if(0 == no_border_style)
         {
            c32Alt   = sdvg_TintARGB(lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG), #06000000);
            UIRenderer.DrawFilledRectangle(inner_layer.position_x-4, sh, 4, h-sh+4, c32Alt);  // left
            UIRenderer.DrawFilledRectangle(w-2, 0, 4, h+4, c32Alt);  // right
            UIRenderer.DrawFilledRectangle(inner_layer.position_x, h, w - inner_layer.position_x, 4, c32Alt);  // bottom
         }

         if(UI.IsDarkOrMono())
         {
            c32Alt   = sdvg_TintARGB(lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG), #00000000);
            c32Inner = sdvg_TintARGB(lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG), #1affffff);
         }
         else
         {
            c32Alt   = sdvg_TintARGB(lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG), #00000000);
            c32Inner = sdvg_TintARGB(lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG), #1a000000);
         }
         UIRenderer.DrawVerticalGradientFilledRectangleNonLinear1(0, 0, w+2, sh+1, c32Alt, c32Inner, 0.64);

         if(0 == no_border_style)
         {
            c32Alt = sdvg_TintARGB(lnf_colors.get(LookAndFeel.COLOR_WINDOW_BG), #54000000);
            UIRenderer.DrawFilledRectangle(0, sh+1, w+2, 1, c32Alt);  // line
         }

         if(b_bg_keepalpha)
            UIRenderer.DisableBlending();
      }

      label.size_x = sw; // xxx hack to avoid clipping due to text borders in Label class
      label.size_y = sh;
      UIRenderer.ModelTranslate2f(textInsetX, 0);
      label.layoutContent();
      label.drawTransparentCached(0, 0);
      UIRenderer.ModelTranslate2f(-textInsetX, 0);
   }

   public virtual beginXFMTag(AbstractXMLForm _form, HashTable _attributes) : boolean {

      initPanel();

      setPadding4fUnscaled(4,4,4,4);

      if(label.beginXFMTag(_form, _attributes))
      {
         if(Panel::beginXFMTag(_form, _attributes))
         {
            initTitledPanelOnly();

            String *atname, *atval;
            StringArray *atsplit;

            foreach atname in _attributes
            {
               atval <= _attributes[atname];

               switch(atname.toLower())
               {
                  case "innerpadding":
                     atsplit <= atval.splitChar(';');
                     if(atsplit.numElements >= 1)
                     {
                        ipad_t = atsplit[0];
                        ipad_l = (atsplit.numElements >= 2) ? atsplit[1] : atsplit.last;
                        ipad_b = (atsplit.numElements >= 3) ? atsplit[2] : atsplit.last;
                        ipad_r = (atsplit.numElements >= 4) ? atsplit[3] : atsplit.last;
                     }
                     break;

                  case "innerpadtop":
                     ipad_t = atval;
                     break;

                  case "innerpadleft":
                     ipad_l = atval;
                     break;

                  case "innerpadbottom":
                     ipad_b = atval;
                     break;

                  case "innerpadright":
                     ipad_r = atval;
                     break;

                  case "drawborder":
                     b_draw_border = int(atval);
                     break;

                  case "borderinsetscalex":
                     border_inset_scale_x = int(atval);
                     break;

                  case "font":
                     label.setFontByName(atval);
                     break;

                  case "noborderstyle":
                     no_border_style = int(atval);
                     break;

                  case "captioninsetx":
                     caption_inset_x = int(atval) * UI.font_scaling;
                     break;

                  case "captioninsetxunscaled":
                     caption_inset_x = int(atval);
                     break;
               }
            }
         }
      }
      return false;
   }

   public virtual endXFMTag(AbstractXMLForm _form, HashTable _attributes) {
      Layer::endXFMTag(_form, _attributes);
   }

   public virtual addXFMChild(Layer _c) {
      inner_layer.addChildLayer(deref _c);
   }

}
