// ----
// ---- file   : TableViewHeader.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2007-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 26May2007
// ---- changed: 24Oct2007, 29Oct2007, 04Nov2007, 05Nov2007, 08Jan2008, 14Apr2008, 01Feb2009
// ----          02Feb2009, 03Feb2009, 22Apr2010, 24Apr2010, 13Feb2018, 16Feb2018, 13Nov2018
// ----          29Nov2018, 16Jun2019, 04Oct2024, 05Oct2024, 10Sep2025
// ----
// ----
// ----

module MTableViewHeader;

namespace ui;


class TableViewHeader extends Layer {
   namespace TableView *table_view;
   protected Label *label;


   public initTableViewHeader() {
      initLayer();
      label <= Label.New();
      label.setFontByName(UIConstants.DEFAULT_FONT_NAME_LABEL);
      label.setTextPlacement(Layout.LEFT);
      label.setInnerPadding4f(1, 3, 1, 1);
   }

   public virtual method getPreferredSizeY() : float {
      return label.getMinimumSizeY();
   }

   public virtual method getMinimumSizeY() : float {
      return label.getMinimumSizeY();
   }

   public virtual onLookAndFeelChanged() {
      Layer::onLookAndFeelChanged();

      label.onLookAndFeelChanged();
   }

   public method onDraw() {
      Point2f abspos;
      calcAbsolutePositionFBO(abspos); // (todo) optimize/cache

      UIRenderer.DrawDefaultControlBackground(0, 0, getSizeX(), getSizeY());

      TableModel *tm <= table_view.model;
      if(null != tm)
      {
         sdvg_PushScissor(abspos.x+0.5, abspos.y+0.5, size_x+0.5, size_y+0.5);
         sdvg_EnableScissor();

         int curX = 0;
         int numCol = tm.getNumColumns();
         int i = 0;
         loop(numCol)
         {
            String cap = tm.getColumnCaption(i);
            int colWidth = tm.getColumnWidth(i);
            label.setCaption(cap);
            label.setSize2f(colWidth, getSizeY());

            UIRenderer.ModelTranslate2f(int(curX+0.375), 0);

            if(LookAndFeel.STYLE_BEVEL == layer_style)
               UIRenderer.DrawDefaultRaisedBorder(0, 0, colWidth, getSizeY());
            label.drawTransparentCached(0, 0);

            UIRenderer.ModelTranslate2f(-int(curX+0.375), 0);

            curX += colWidth + TableView.CELL_SEPARATOR_SIZE; // +1 for cell separator

            // Next column
            i++;
         }

         sdvg_PopScissor();
         sdvg_DisableScissor();
      }
   }

}
