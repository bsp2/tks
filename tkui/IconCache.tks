// ----
// ---- file   : IconCache.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2005-2023 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "ui" toolkit.
// ----          Todo: Add a more sophisticated texture manager which does not allocate a texture for
// ----                each and every icon.
// ----
// ---- created: 17Jul2005
// ---- changed: 08Mar2014, 18Aug2014, 09Nov2023
// ----
// ----
// ----

module MIconCache;

namespace ui;


// ----
// ---- The IconCache class is used to manage a set of icon resources.
// ---- An icon will not be loaded/initialized until it is requested for the first time.
// ----
class IconCache {
   protected HashTable/*<Icon>*/ icons;


   public method init(int _maxIcons) {
      icons.alloc(_maxIcons);
   }

   // ----
   // ---- Add an icon to the icon resource hashtable.
   // ----
   public method addIcon(Icon _icon) {
      if(_icon instanceof Icon)
      {
         String iconame <= _icon.getIconName();
         if(iconame instanceof String)
         {
            icons[iconame] = deref _icon;
         }
         else
         {
            trace "[---] IconCache::addIcon(): error reading icon name (got iconame="+#(iconame)+").";
         }
      }
      else
      {
         trace "[---] IconCache::addIcon(): The given icon is not an instance of Icon.";
      }
   }

   // ----
   // ---- Retrieve a previously added Icon resource
   // ----
   public method getIcon(String _name) : Icon {
      if(_name instanceof String)
      {
         if(icons.exists(_name))
         {
            Icon icon <= icons[_name];
            if(icon.loadIcon())
            {
               ///print "iconcache: _name="+_name+" icon.icon_name="+icon.getIconName();
               return icon;
            }
            else
            {
               trace "[---] IconCache::getIcon(): unable to load icon \""+_name+"\".";
            }
         }
         else if(!_name.isBlank())
         {
            trace "[---] IconCache::getIcon(): unknown icon \""+_name+"\".";
         }
      }
      return null;
   }

   public method onOpen() {
      String key;
      foreach key in icons
      {
         Icon ic <= icons[key];
         ////trace "xxx onOpen icon = " +ic.getIconName();
         ic.onOpen();
      }

   }

}
