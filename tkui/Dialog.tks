// ----
// ---- file   : Dialog.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- license: (c) 2005-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- changed: 27Apr2007, 15Oct2007, 06Nov2007, 25Sep2009, 06Feb2010, 26Sep2010
// ----          18Apr2013, 27Nov2018, 24Oct2019, 13Jul2020, 19Nov2023, 21Jun2025
// ----
// ----
// ----

module MDialog;

namespace ui;


class Dialog extends Window, ActionProvider {
   explain "Base class for (modal) dialogs";

   define String ACTION_HIDE;

   // The focus is saved when the dialog is shown and restored once the dialog has been closed
   protected Layer *old_keyboard_focus;

   protected Layer *hide_listener;

   protected boolean b_dialog_is_popup; // default setting, unless overridden by derived class


   public method initDialog() {
      initWindowInt();
      setDockable(false);
   }

   public virtual isModal():boolean {
      // Overwrites Layer::isModal
      return true;
   }

   public virtual isResizable() : boolean {
      return false;
   }

   public virtual isPopup() : boolean {
      return b_dialog_is_popup;
   }

   public method setEnableDialogIsPopup(boolean _bEnable) {
      b_dialog_is_popup = _bEnable;
   }

   public virtual getTabCycleOverrides() : PointerArray {
      return getTabCycleOverridesDef();
   }

   public virtual preShow() {
      old_keyboard_focus <= UI.GetKeyboardFocus();
      // // trace "xxx Dialog: save old_keyboard_focus="+#(old_keyboard_focus);
      Window::preShow();
   }

   public virtual hide() {
      explain "Hide dialog";

      Window::hide();

      // // trace "xxx Dialog: restoring keyboard focus to "+#(old_keyboard_focus);
      UI.SetKeyboardFocus(old_keyboard_focus);
      old_keyboard_focus <= null;

      if(null != hide_listener)
      {
         hide_listener.consumeAction(Action.New(ACTION_HIDE, this));
         hide_listener <= null;
      }
   }

   public method setHideListener(Layer _layer) {
      hide_listener <= _layer;
   }

}
