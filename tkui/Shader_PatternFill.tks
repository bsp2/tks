// ----
// ---- file   : Shader_PatternFill.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2024-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "ui" toolkit.
// ----
// ---- created: 22Mar2024
// ---- changed: 23Mar2024, 28Mar2024, 13Sep2025, 14Sep2025
// ----
// ----
// ----

module MShader_PatternFill;

namespace ui;


class Shader_PatternFill : Shader {
   protected Texture *tex;

   static StringArray pattern_names = [
      "checker_1",
      "dot_1",
      "dot_2",
      "dot_3",
      "dot_4",
      "lines_1",
      "lines_2",
      "lines_3",
      "lines_4",
      "lines_5",
      "lines_6",
      "lines_7",
      "stars_1",
      "zigzag_1",
      "zigzag_2",
      "zigzag_3",
      "zigzag_4",
                                   ];

   static StringArray pattern_files = [
      "tkui:tiles/tile_checker_1-16x16.png",
      "tkui:tiles/tile_dot_1-16x15.png",
      "tkui:tiles/tile_dot_2-16x12.png",
      "tkui:tiles/tile_dot_3-16x12.png",
      "tkui:tiles/tile_dot_4-16x12.png",
      "tkui:tiles/tile_lines_1-16x16.png",
      "tkui:tiles/tile_lines_2-16x12.png",
      "tkui:tiles/tile_lines_3-15x12.png",
      "tkui:tiles/tile_lines_4-15x12.png",
      "tkui:tiles/tile_lines_5-15x12.png",
      "tkui:tiles/tile_lines_6-7x7.png",
      "tkui:tiles/tile_lines_7-7x7.png",
      "tkui:tiles/tile_stars_1-15x12.png",
      "tkui:tiles/tile_zigzag_1-16x12.png",
      "tkui:tiles/tile_zigzag_2-16x12.png",
      "tkui:tiles/tile_zigzag_3-16x12.png",
      "tkui:tiles/tile_zigzag_4-21x13.png",
                                       ];

   static Texture *[] textures;


   // Inputs:
   //   tex[0] : Texture (GL_TEXTURE_2D)

   static String vs_src =
      "uniform mat4 u_transform; \n"
      " \n"
      "ATTRIBUTE vec2 a_vertex; \n"
      " \n"
      "void main(void) { \n"
      "  gl_Position = u_transform * vec4(a_vertex,0,1); \n"
      "}"
      ;

   static String fs_src =
      "uniform sampler2D u_tex; \n"
      "uniform vec4      u_color_fill; \n"
      "uniform vec2      u_scale; \n"
      "uniform float     u_intensity; \n"
      "\n"
      "void main(void) { \n"
      "  vec2 uv = gl_FragCoord.xy * u_scale; \n"
      "  float a = (1.0 - TEXTURE2D(u_tex, uv).TEX_ALPHA * u_intensity); \n"
      "  vec4 c = vec4(u_color_fill.rgb * a, u_color_fill.a); \n"
      "  FRAGCOLOR = c; \n"
      "}"
      ;

   public virtual create() : boolean {
      if(createFromStrings(vs_src, fs_src))
      {
         sdvg_BindShader(sdvg_shader_idx);
         sdvg_Uniform1i("u_tex", 0);
         sdvg_BindShader(0);
         if(Configuration.debugLevel >= 2)
            trace "[dbg] ui::Shader_PatternFill::create: OK.";
         return true;
      }
      else
      {
         trace "[!!!] ui::Shader_PatternFill::create: failed";
      }
      return false;
   }

   public static GetPatternIndexByName(String _patternName) : int {
      return pattern_names.indexOfObject(_patternName, 0);
   }

   public method bindPatternFill(int _patternIdx, float _sclX, float _sclY, float _intensity) {
      int idx = mathClampi(_patternIdx, 0, pattern_names.numElements);
      if(idx >= textures.numElements)
      {
         textures.realloc(idx + 1);
         tex <= null;
      }
      else
      {
         tex <= textures[idx];
         // trace "xxx bindPatternFill: get tex="+#(tex);
      }

      if(null == tex)
      {
         tex <= new Texture;
         tex.flags = TEX_ALPHA | TEX_REPEAT_S | TEX_REPEAT_T;
         if(Configuration.debugLevel >= 2)
            trace "[trc] Shader_PatternFill: loadImage file=\""+pattern_files.get(idx)+"\"";
         tex.loadImage(pattern_files.get(idx), 0,0,1);
         textures[idx] = deref tex;
         // trace "xxx bindPatternFill: create tex="+#(tex);
      }

      // trace "xxx bindPatternFill: tex="+#(tex);

      tex.bind();
      tex.enable();
      Shader::bind();
      // trace "xxx Shader_PatternFill: texSz=("+tex.sx+";"+tex.sy+") UI.viewport=("+UI.viewport_width+";"+UI.viewport_height+") scl=("+_sclX+";"+_sclY+")";
      sdvg_Uniform2f("u_scale",
                     (_sclX) / tex.sx,
                     (_sclY) / tex.sy
                     );
      sdvg_Uniform1f("u_intensity", _intensity);
   }

   public virtual unbind() {
      Shader::unbind();
      if(null != tex)
      {
         tex.disable();
         tex.unbind();
      }
   }

   public virtual onOpen() {
      Shader::onOpen();
      Texture *tex;
      foreach tex in textures
         tex.unload();
   }

}
