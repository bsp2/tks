// ----
// ---- file   : Shader.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2018-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "ui" toolkit.
// ----          Todo: Add a more sophisticated texture manager which does not allocate a texture for
// ----                each and every icon.
// ----
// ---- created: 27Nov2018
// ---- changed: 03Dec2018, 06Feb2023, 16Jul2023, 23Mar2024, 16Jan2025, 13Sep2025
// ----
// ----
// ----

module MShader;

namespace ui;


abstract class Shader {
   int sdvg_shader_idx;

   protected method createFromStrings(String _vsSrc, String _fsSrc) : boolean {
      sdvg_shader_idx = sdvg_CreateShader(_vsSrc, _fsSrc);
      if(Configuration.debugLevel >= 2)
         trace "[trc] Shader::createFromStrings: sdvg_shader_idx="+sdvg_shader_idx;
      return (sdvg_shader_idx > 0);
   }

   public method create() : boolean {
      // implemented by derived classes
      return false;
   }

   public method destroy() : boolean {
      //  Called at exit and when window is resized (and GL context is lost)
      sdvg_DestroyShader(sdvg_shader_idx);
      sdvg_shader_idx = 0;
   }

   public method bind() {
      if(0 == sdvg_shader_idx)
         create();
      sdvg_BindShader(sdvg_shader_idx);
   }

   public method setUniformByName1f(String _name, float _f) {
      sdvg_Uniform1f(_name, _f);
   }

   public method setUniformByName2f(String _name, float _f1, float _f2) {
      sdvg_Uniform2f(_name, _f1, _f2);
   }

   public method unbind() {
      sdvg_UnbindShader();
   }

   public method onOpen() {
      sdvg_shader_idx = 0;
   }
}
