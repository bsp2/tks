// ----
// ---- file   : TextFieldIncDec.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2013-2023 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : This is part of the "ui" toolkit.
// ----
// ---- changed: 04Jun2013, 05Jun2013, 02Feb2014, 02Mar2015, 03Oct2023
// ----
// ----
// ----

module MTextFieldIncDec;

namespace ui;


class TextFieldIncDec : TextField {

   // wheel up/down or cursor up/down to inc/dec
   // right click for advanced edit / list action

   define String ACTION_INC;
   define String ACTION_DEC;
   define String ACTION_LIST;


   public virtual getProvidedActionNames() : StringArray {
      return TextField::getProvidedActionNames() + [ACTION_INC, ACTION_DEC, ACTION_LIST];
   }

   protected method handleInc() {
      provideAction(Action.New(getProvidedActionAlias(ACTION_INC), this));
   }

   protected method handleDec() {
      provideAction(Action.New(getProvidedActionAlias(ACTION_DEC), this));
   }

   protected method handleList() {
      provideAction(Action.New(getProvidedActionAlias(ACTION_LIST), this));
   }

   public virtual onMouseClick(MouseEvent _ev) : boolean {
      if(TextField::onMouseClick(_ev))
      {
         return true;
      }
      else if(_ev.isRightButton())
      {
         handleList();
         return true;
      }
   }

   public virtual onMouse(MouseEvent _ev) : boolean {
      if(TextField::onMouse(_ev))
      {
         return true;
      }
      else if(_ev.wheelUp())
      {
         handleInc();
         return true;
      }
      else if(_ev.wheelDown())
      {
         handleDec();
         return true;
      }
   }

   public virtual onKey(Key _k) : boolean {
      switch(_k.pressed)
      {
         case VKEY_UP:
            if(_k.modNone())
            {
               handleInc();
               return true;
            }
            break;

         case VKEY_DOWN:
            if(_k.modNone())
            {
               handleDec();
               return true;
            }
            break;

         case VKEY_SPACE:
            if(_k.modCtrl())
            {
               handleList();
               return true;
            }
            break;
      }

      return TextField::onKey(_k);
   }

}
