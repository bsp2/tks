// ----
// ---- file   : MouseEvent.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2005-2018 by Bastian Spiegel.
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   :
// ----
// ---- created: 03Apr2005
// ---- changed: 19Apr2005, 20Apr2005, 28May2005, 07Jun2005, 09Jun2005, 10Jun2005, 18Jun2005
// ----          23Jun2005, 24Jun2005, 02Jul2005, 17Jul2005, 31Jul2005, 11Aug2005, 05May2007
// ----          02Feb2009, 31May2009, 12Sep2009, 18Sep2009, 22Feb2011, 29Sep2014, 24Mar2015
// ----          17Feb2018
// ----
// ----
// ----

module MMouseEvent;

namespace ui;

use tksdl;


// ====
// ==== A wrapper for the SDL.onMouse C++ API signal
// ====
class MouseEvent {
   public float mouse_abs_x, mouse_abs_y; // the current, absolute (screen) mouse coordinates
   public float mouse_rel_x, mouse_rel_y; // relative mouse movement (delta, widgets)
   public int current_state; // bitset that stores the currently pressed mouse buttons (MOUSE_LBUTTON, ..)
   public int changed_state; // MOUSE_LBUTTON,MOUSE_RBUTTON,..


   // ---- constructor emulation for MouseEvent class
   public function New(int _x, _y, _state, _statechange) {
      local MouseEvent ev;
      ev.init(_x, _y, _state, _statechange);
      return deref ev;
   }

   public method init(int _x, _y, _state, _statechange) {
      mouse_abs_x   = _x;
      mouse_abs_y   = _y;
      current_state = _state;
      changed_state = _statechange;
   }

   public method getMouseAbsX() : float {
      return mouse_abs_x;
   }

   public method getMouseAbsY() : float {
      return mouse_abs_y;
   }

   public method getMouseRelX() : float {
      return mouse_rel_x;
   }

   public method getMouseRelY() : float {
      return mouse_rel_y;
   }

   public method calcMouseRelv(Vector2f _v) {
      ////trace "xxx MouseEvent::calcMouseRelv: v=("+_v.x+";"+_v.y+") abs=("+mouse_abs_x+";"+mouse_abs_y+")";
      mouse_rel_x = mouse_abs_x - _v.x;
      mouse_rel_y = mouse_abs_y - _v.y;

      if(UI.b_mouse_grab)
      {
         mouse_rel_x += UI.mouse_grab_relx;
         mouse_rel_y += UI.mouse_grab_rely;
      }

   }

   public method calcRelForLayer(Layer _l) {
      Point2f abspos;
      ////trace "xxx MouseEvent::calcRelForLayer: l="+#(_l)+" abspos="+#(abspos);
      _l.calcAbsolutePosition(abspos);
      ////trace "xxx MouseEvent::calcRelForLayer: l="+#(_l)+" abs=("+abspos.x+";"+abspos.y+")";
      calcMouseRelv(abspos);
   }

   public method isAnyButtonDown() : boolean {
      explain "Query whether any mouse button is currently down";

      return (current_state != 0);
   }

   public method isLeftButtonDown() : boolean {
      explain "Query whether the left mouse button is currently down";

      return (current_state & MOUSE_LBUTTON) == MOUSE_LBUTTON;
   }

   public method isRightButtonDown() : boolean {
      explain "Query whether the right mouse button is currently down";

      return (current_state & MOUSE_RBUTTON);
   }

   public method isMiddleButtonDown() : boolean {
      explain "Query whether the middle mouse button is currently down";

      return (current_state & MOUSE_MBUTTON) == MOUSE_MBUTTON;
   }

   public method isLeftButton() : boolean {
      explain "Query whether the current onMouseDoubleClick(), onMouseClick(), .. was triggered by the left mouse button";

      return (changed_state&MOUSE_LBUTTON)==MOUSE_LBUTTON;
   }

   public method isRightButton() : boolean {
      explain "Query whether the current onMouseDoubleClick(), onMouseClick(), .. was triggered by the right mouse button";

      return (changed_state&MOUSE_RBUTTON)==MOUSE_RBUTTON;
   }

   public method isMiddleButton() : boolean {
      explain "Query whether the current onMouseDoubleClick(), onMouseClick(), .. was triggered by the middle mouse button";

      return (changed_state&MOUSE_MBUTTON)==MOUSE_MBUTTON;
   }

   public method isWheel() : boolean {
      return (changed_state & (MOUSE_WHEELDOWN | MOUSE_WHEELUP));
   }

   public method leftButtonDown() : boolean {
      explain "Query whether the left mousebutton state has changed from released to pressed";

      return (changed_state&MOUSE_LBUTTON)&&(current_state&MOUSE_LBUTTON);
   }

   public method leftButtonUp() : boolean {
      explain "Query whether the left mousebutton state has changed from pressed to released ";

      return (changed_state&MOUSE_LBUTTON)&&(!(current_state&MOUSE_LBUTTON));
   }

   public method rightButtonUp() : boolean {
      explain "Query whether the right mousebutton state has changed from pressed to released ";

      return (changed_state&MOUSE_RBUTTON)&&(!(current_state&MOUSE_RBUTTON));
   }

   public method rightButtonDown() : boolean {
      explain "Query whether the right mousebutton state has changed from released to pressed";

      return (changed_state&MOUSE_RBUTTON)&&(current_state&MOUSE_RBUTTON);
   }

   public method middleButtonUp() : boolean {
      explain "Query whether the middle mousebutton state has changed from pressed to released";

      return (changed_state&MOUSE_MBUTTON)&&(!(current_state&MOUSE_MBUTTON));
   }

   public method middleButtonDown() : boolean {
      explain "Query whether the middle mousebutton state has changed from released to pressed";

      return (changed_state&MOUSE_MBUTTON)&&(current_state&MOUSE_MBUTTON);
   }

   public method wheelUp() : boolean {
      explain "Query whether the wheel has changed from released to up";

      return (changed_state&MOUSE_WHEELUP) && (current_state&MOUSE_WHEELUP);
   }

   public method wheelDown() : boolean {
      explain "Query whether the wheel has changed from released to down";

      return (changed_state&MOUSE_WHEELDOWN) && (current_state&MOUSE_WHEELDOWN);
   }

   public method isRelPosWithinBBox(float x1, y1, x2, y2) : boolean {
      if(mouse_rel_x >= x1)
         if(mouse_rel_x < x2)
            if(mouse_rel_y >= y1)
               if(mouse_rel_y < y2)
                  return true;
      return false;
   }

   public method yacToString(String _s) {
      _s.append("MouseEvent<curstate="+current_state+" chgstate="+changed_state+" rel=("+mouse_rel_x+"; "+mouse_rel_y+") abs=("+mouse_abs_x+", "+mouse_abs_y+")>");
   }

   public method getAbsString() : String {
      return "("+mouse_abs_x+";"+mouse_abs_y+")";
   }

   public method getRelString() : String {
      return "("+mouse_rel_x+";"+mouse_rel_y+")";
   }
}
