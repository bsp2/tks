// ----
// ---- file   : PopupMenuWindowDock.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2009-2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : 
// ----
// ---- created: 01Feb2009
// ---- changed: 28Nov2018, 27Dec2020
// ----          
// ----          
// ----

module MPopupMenuWindowDock;

namespace ui;


class PopupMenuWindowDock : Button, ActionConsumer, WindowDock {
   explain "A simple window dock button that shows a popupmenu listing all currently docked windows. Selecting a window will undock it.";

   protected PopupMenu pop;

   public virtual onLookAndFeelChanged() {
      Layer::onLookAndFeelChanged();

      local Window *w;
      foreach w in docked_windows 
      {
         w.recursiveOnLookAndFeelChanged();
      }
   }

   protected handleButtonClick(MouseEvent _ev) {
      Button::handleButtonClick(_ev);

      if(docked_windows.numElements)
      {
         pop <= PopupMenu.New(this);
         
         Window w;
         int i = 0;
         foreach w in docked_windows {
            pop.addDefaultButton(w.getWindowTitle(), String(i));
            i++;
         }
         pop.showNearLayer(this);
      }
   }

   public virtual consumeAction(Action _action) : boolean {
      ////trace "[dbg] PopupMenuWindowDock::consumeAction called";
      if(_action.getActionProvider() == pop)
      {
         String acName = _action.getActionName();
         if!(acName.isBlank())
         {
            ////trace "[dbg] PopupMenuWindowDock::consumeAction: selected popup item \""+acName+"\"";
            int idx = acName;
            Window w <= docked_windows[idx];
            w.undock();
         }
         // else popup canceled
         return true;
      }
      return Button::consumeAction(_action);
   }

}
