// ----
// ---- file   : TableCellEditor.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2007-2020 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : 
// ----
// ---- created: 26May2007
// ---- changed: 24Oct2007, 29Oct2007, 04Nov2007, 05Nov2007, 08Jan2008, 14Apr2008, 01Feb2009
// ----          02Feb2009, 03Feb2009, 22Jan2010, 20Mar2011, 05Mar2018, 16Jun2020
// ----          
// ----

module MTableCellEditor;

namespace ui;


class TableCellEditor : FloatingLayer {
   // The focus is saved when the dialog is shown and restored once the dialog has been closed
   protected Layer *old_keyboard_focus;

   // Editor context:
   TableModel *table_model;
   int         table_col;
   int         table_row;

   protected boolean    b_edited;

   float offset_x;  // for TreeTableModel


   public method initTableCellEditor() {
      initFloatingLayer();
   }

   public method setCellEditorContext(TableModel _tm, int _col, int _row) {
      table_model <= _tm;
      table_col    = _col;
      table_row    = _row;
   }

   public virtual isPopup() : boolean {
      return true;
   }

   public virtual isModal():boolean {
      return true;
   }

   public virtual preShow() {

      // Save keyboard focus
      old_keyboard_focus <= UI.GetKeyboardFocus();

      b_edited = false;

      FloatingLayer::preShow();
   }

   public method handleCellEditing() {
      ////trace "xxx handleCellEditing";
      b_edited = true;
      table_model.handleCellEditing(this);
   }

   public virtual handleNonChildMouseOver(MouseEvent _ev, Layer _newMouseLayer):boolean {
      // trace "xxx TableCellEditor::handleNonChildMouseOver:";

      if(_ev.leftButtonDown())
      {
         hide();
         return true;
      }
   }

   public virtual onMouse(MouseEvent _ev) : boolean {
      if(_ev.rightButtonDown())
      {
         hide();
         return true;
      }
      return false;
   }

   public virtual hide() {
      ////trace "xxx TableCellEditor::hide b_edited="+b_edited;
      FloatingLayer::hide();

      // Restore keyboard focus
      UI.SetKeyboardFocus(old_keyboard_focus);
      old_keyboard_focus <= null;

      if(b_edited)
      {
         table_model.handleCellEdited(this);
      }
   }
}
