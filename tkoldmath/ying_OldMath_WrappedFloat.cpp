// ---- ying_OldMath_WrappedFloat.cpp: auto generated by YInG - the YAC interface generator (Wed, 31/Jul/2019 21:16:42)

void  YAC_CALL WrappedFloat___setValue(void *, yacmemptr           );
sF32  YAC_CALL WrappedFloat___getValue(void *                      );
void  YAC_CALL WrappedFloat___setAdd(void *, yacmemptr             );
sF32  YAC_CALL WrappedFloat___getAdd(void *                        );
void  YAC_CALL WrappedFloat___setMin(void *, yacmemptr             );
sF32  YAC_CALL WrappedFloat___getMin(void *                        );
void  YAC_CALL WrappedFloat___setMax(void *, yacmemptr             );
sF32  YAC_CALL WrappedFloat___getMax(void *                        );
void  YAC_CALL WrappedFloat___tick  (void *                        );
void  YAC_CALL WrappedFloat___init  (void *, yacmemptr             );
void  YAC_CALL WrappedFloat___tickPrecise(void *, yacmemptr        );

// ------------------ YAC class "_WrappedFloat" reflection map (implementation) ------------------
sUI          YAC_VCALL _WrappedFloat::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _WrappedFloat::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _WrappedFloat::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _WrappedFloat::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _WrappedFloat::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _WrappedFloat::yacMethodGetNum                  (void) {return 12;}
const char **YAC_VCALL _WrappedFloat::yacMethodGetNames                (void) {static const char *r[]={"operator", "setValue", "getValue", "setAdd", "getAdd", "setMin", "getMin", "setMax", "getMax", "tick", "init", "tickPrecise"}; return r;}
const sUI   *YAC_VCALL _WrappedFloat::yacMethodGetNumParameters        (void) {static const sUI r[]={2, 1, 0, 1, 0, 1, 0, 1, 0, 0, 4, 1}; return r;}
const sUI  **YAC_VCALL _WrappedFloat::yacMethodGetParameterTypes       (void) {static const sUI rt0[]={1,3};static const sUI rt1[]={2,};static const sUI rt2[]={0,};static const sUI rt3[]={2,};static const sUI rt4[]={0,};static const sUI rt5[]={2,};static const sUI rt6[]={0,};static const sUI rt7[]={2,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={2, 2, 2, 2,};static const sUI rt11[]={2,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11}; return r;}
const char***YAC_VCALL _WrappedFloat::yacMethodGetParameterObjectTypes (void) {static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs11[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11}; return r;}
const sUI   *YAC_VCALL _WrappedFloat::yacMethodGetReturnTypes          (void) {static const sUI r[]={4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0}; return r;}
const char **YAC_VCALL _WrappedFloat::yacMethodGetReturnObjectTypes    (void) {static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;}
const void **YAC_VCALL _WrappedFloat::yacMethodGetAdr                  (void) {static const void *r[]={(void*)Object__operator, (void*)WrappedFloat___setValue, (void*)WrappedFloat___getValue, (void*)WrappedFloat___setAdd, (void*)WrappedFloat___getAdd, (void*)WrappedFloat___setMin, (void*)WrappedFloat___getMin, (void*)WrappedFloat___setMax, (void*)WrappedFloat___getMax, (void*)WrappedFloat___tick, (void*)WrappedFloat___init, (void*)WrappedFloat___tickPrecise}; return r;}
sUI          YAC_VCALL _WrappedFloat::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _WrappedFloat::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _WrappedFloat::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _WrappedFloat::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(_WrappedFloat, "WrappedFloat");

void  YAC_CALL WrappedFloat___setValue(void *_o, yacmemptr _args             ) {((_WrappedFloat*)_o)->_setValue(_args.mem[0].f32);}
sF32  YAC_CALL WrappedFloat___getValue(void *_o                              ) {return (sF32)((_WrappedFloat*)_o)->_getValue();}
void  YAC_CALL WrappedFloat___setAdd(void *_o, yacmemptr _args               ) {((_WrappedFloat*)_o)->_setAdd(_args.mem[0].f32);}
sF32  YAC_CALL WrappedFloat___getAdd(void *_o                                ) {return (sF32)((_WrappedFloat*)_o)->_getAdd();}
void  YAC_CALL WrappedFloat___setMin(void *_o, yacmemptr _args               ) {((_WrappedFloat*)_o)->_setMin(_args.mem[0].f32);}
sF32  YAC_CALL WrappedFloat___getMin(void *_o                                ) {return (sF32)((_WrappedFloat*)_o)->_getMin();}
void  YAC_CALL WrappedFloat___setMax(void *_o, yacmemptr _args               ) {((_WrappedFloat*)_o)->_setMax(_args.mem[0].f32);}
sF32  YAC_CALL WrappedFloat___getMax(void *_o                                ) {return (sF32)((_WrappedFloat*)_o)->_getMax();}
void  YAC_CALL WrappedFloat___tick  (void *_o                                ) {((_WrappedFloat*)_o)->_tick();}
void  YAC_CALL WrappedFloat___init  (void *_o, yacmemptr _args               ) {((_WrappedFloat*)_o)->_init(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].f32, _args.mem[3].f32);}
void  YAC_CALL WrappedFloat___tickPrecise(void *_o, yacmemptr _args          ) {((_WrappedFloat*)_o)->_tickPrecise(_args.mem[0].f32);}
