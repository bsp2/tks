// ---- ying_OldMath_IVector.cpp: auto generated by YInG - the YAC interface generator (Wed, 31/Jul/2019 21:16:42)

void  YAC_CALL IVector___scale      (void *, yacmemptr             );
void  YAC_CALL IVector___addScale   (void *, yacmemptr             );
sF32  YAC_CALL IVector___abs        (void *                        );
sSI   YAC_CALL IVector___absMax     (void *                        );
sSI   YAC_CALL IVector___absAdd     (void *                        );
void  YAC_CALL IVector___rotate     (void *, yacmemptr             );
void  YAC_CALL IVector___rotateInv  (void *, yacmemptr             );
void  YAC_CALL IVector___neg        (void *                        );
void  YAC_CALL IVector___init       (void *, yacmemptr             );
sSI   YAC_CALL IVector___getX       (void *                        );
sSI   YAC_CALL IVector___getY       (void *                        );
void  YAC_CALL IVector___setX       (void *, yacmemptr             );
void  YAC_CALL IVector___setY       (void *, yacmemptr             );
void  YAC_CALL IVector___print      (void *                        );
void  YAC_CALL IVector___sphere     (void *, yacmemptr             );
void  YAC_CALL IVector___add        (void *, yacmemptr             );
void  YAC_CALL IVector___sub        (void *, yacmemptr             );
void  YAC_CALL IVector___scaleXY    (void *, yacmemptr             );
void  YAC_CALL IVector___getString  (void *, YAC_Value *           );

// ------------------ YAC class "_IVector" reflection map (implementation) ------------------
sUI          YAC_VCALL _IVector::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _IVector::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _IVector::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _IVector::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _IVector::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _IVector::yacMethodGetNum                  (void) {return 20;}
const char **YAC_VCALL _IVector::yacMethodGetNames                (void) {static const char *r[]={"operator", "scale", "addScale", "abs", "absMax", "absAdd", "rotate", "rotateInv", "neg", "init", "getX", "getY", "setX", "setY", "print", "sphere", "add", "sub", "scaleXY", "getString"}; return r;}
const sUI   *YAC_VCALL _IVector::yacMethodGetNumParameters        (void) {static const sUI r[]={2, 1, 2, 0, 0, 0, 1, 1, 0, 2, 0, 0, 1, 1, 0, 4, 1, 1, 2, 0}; return r;}
const sUI  **YAC_VCALL _IVector::yacMethodGetParameterTypes       (void) {static const sUI rt0[]={1,3};static const sUI rt1[]={2,};static const sUI rt2[]={3, 2,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={3,};static const sUI rt7[]={3,};static const sUI rt8[]={0,};static const sUI rt9[]={1, 1,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={1,};static const sUI rt13[]={1,};static const sUI rt14[]={0,};static const sUI rt15[]={2, 2, 2, 2,};static const sUI rt16[]={3,};static const sUI rt17[]={3,};static const sUI rt18[]={2, 2,};static const sUI rt19[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19}; return r;}
const char***YAC_VCALL _IVector::yacMethodGetParameterObjectTypes (void) {static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0, (const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0, (const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0, (const char*)0,};static const char *rs19[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19}; return r;}
const sUI   *YAC_VCALL _IVector::yacMethodGetReturnTypes          (void) {static const sUI r[]={4, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4}; return r;}
const char **YAC_VCALL _IVector::yacMethodGetReturnObjectTypes    (void) {static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;}
const void **YAC_VCALL _IVector::yacMethodGetAdr                  (void) {static const void *r[]={(void*)Object__operator, (void*)IVector___scale, (void*)IVector___addScale, (void*)IVector___abs, (void*)IVector___absMax, (void*)IVector___absAdd, (void*)IVector___rotate, (void*)IVector___rotateInv, (void*)IVector___neg, (void*)IVector___init, (void*)IVector___getX, (void*)IVector___getY, (void*)IVector___setX, (void*)IVector___setY, (void*)IVector___print, (void*)IVector___sphere, (void*)IVector___add, (void*)IVector___sub, (void*)IVector___scaleXY, (void*)IVector___getString}; return r;}
sUI          YAC_VCALL _IVector::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _IVector::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _IVector::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _IVector::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(_IVector, "IVector");

void  YAC_CALL IVector___scale      (void *_o, yacmemptr _args               ) {((_IVector*)_o)->_scale(_args.mem[0].f32);}
void  YAC_CALL IVector___addScale   (void *_o, yacmemptr _args               ) {((_IVector*)_o)->_addScale(_args.mem[0].o, _args.mem[1].f32);}
sF32  YAC_CALL IVector___abs        (void *_o                                ) {return (sF32)((_IVector*)_o)->_abs();}
sSI   YAC_CALL IVector___absMax     (void *_o                                ) {return (sSI)((_IVector*)_o)->_absMax();}
sSI   YAC_CALL IVector___absAdd     (void *_o                                ) {return (sSI)((_IVector*)_o)->_absAdd();}
void  YAC_CALL IVector___rotate     (void *_o, yacmemptr _args               ) {((_IVector*)_o)->_rotate(_args.mem[0].o);}
void  YAC_CALL IVector___rotateInv  (void *_o, yacmemptr _args               ) {((_IVector*)_o)->_rotateInv(_args.mem[0].o);}
void  YAC_CALL IVector___neg        (void *_o                                ) {((_IVector*)_o)->_neg();}
void  YAC_CALL IVector___init       (void *_o, yacmemptr _args               ) {((_IVector*)_o)->_init(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL IVector___getX       (void *_o                                ) {return (sSI)((_IVector*)_o)->_getX();}
sSI   YAC_CALL IVector___getY       (void *_o                                ) {return (sSI)((_IVector*)_o)->_getY();}
void  YAC_CALL IVector___setX       (void *_o, yacmemptr _args               ) {((_IVector*)_o)->_setX(_args.mem[0].si);}
void  YAC_CALL IVector___setY       (void *_o, yacmemptr _args               ) {((_IVector*)_o)->_setY(_args.mem[0].si);}
void  YAC_CALL IVector___print      (void *_o                                ) {((_IVector*)_o)->_print();}
void  YAC_CALL IVector___sphere     (void *_o, yacmemptr _args               ) {((_IVector*)_o)->_sphere(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].f32, _args.mem[3].f32);}
void  YAC_CALL IVector___add        (void *_o, yacmemptr _args               ) {((_IVector*)_o)->_add(_args.mem[0].o);}
void  YAC_CALL IVector___sub        (void *_o, yacmemptr _args               ) {((_IVector*)_o)->_sub(_args.mem[0].o);}
void  YAC_CALL IVector___scaleXY    (void *_o, yacmemptr _args               ) {((_IVector*)_o)->_scaleXY(_args.mem[0].f32, _args.mem[1].f32);}
void  YAC_CALL IVector___getString  (void *_o, YAC_Value *_r                 ) {((_IVector*)_o)->_getString(_r);}
