// ---- ying_OldMath_Math.cpp: auto generated by YInG - the YAC interface generator (Wed, 31/Jul/2019 21:16:42)

sF32  YAC_CALL Math___powerXY       (void *, yacmemptr             );
void* YAC_CALL Math___normal        (void *, yacmemptr             );
sF32  YAC_CALL Math___max           (void *, yacmemptr             );
sF32  YAC_CALL Math___absmax        (void *, yacmemptr             );
sF32  YAC_CALL Math___min           (void *, yacmemptr             );
sF32  YAC_CALL Math___absmin        (void *, yacmemptr             );
sSI   YAC_CALL Math___c32Multiply   (void *, yacmemptr             );
sSI   YAC_CALL Math___c32Blend      (void *, yacmemptr             );
void  YAC_CALL Math___reflect       (void *, yacmemptr             );
void  YAC_CALL Math___vectorMin     (void *, yacmemptr             );
void  YAC_CALL Math___vectorMax     (void *, yacmemptr             );
sF32  YAC_CALL Math___distancePointPlane(void *, yacmemptr         );

// ------------------ YAC class "_Math" reflection map (implementation) ------------------
sUI          YAC_VCALL _Math::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Math::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Math::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Math::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Math::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Math::yacMethodGetNum                  (void) {return 13;}
const char **YAC_VCALL _Math::yacMethodGetNames                (void) {static const char *r[]={"operator", "powerXY", "normal", "max", "absmax", "min", "absmin", "c32Multiply", "c32Blend", "reflect", "vectorMin", "vectorMax", "distancePointPlane"}; return r;}
const sUI   *YAC_VCALL _Math::yacMethodGetNumParameters        (void) {static const sUI r[]={2, 2, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3}; return r;}
const sUI  **YAC_VCALL _Math::yacMethodGetParameterTypes       (void) {static const sUI rt0[]={1,3};static const sUI rt1[]={2, 2,};static const sUI rt2[]={3, 3, 3,};static const sUI rt3[]={2, 2,};static const sUI rt4[]={2, 2,};static const sUI rt5[]={2, 2,};static const sUI rt6[]={2, 2,};static const sUI rt7[]={1, 1, 2,};static const sUI rt8[]={1, 1, 2,};static const sUI rt9[]={3, 3, 3,};static const sUI rt10[]={3, 3, 3,};static const sUI rt11[]={3, 3, 3,};static const sUI rt12[]={3, 3, 3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12}; return r;}
const char***YAC_VCALL _Math::yacMethodGetParameterObjectTypes (void) {static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0, (const char*)0,};static const char *rs2[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs3[]={(const char*)0, (const char*)0,};static const char *rs4[]={(const char*)0, (const char*)0,};static const char *rs5[]={(const char*)0, (const char*)0,};static const char *rs6[]={(const char*)0, (const char*)0,};static const char *rs7[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs8[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs9[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs10[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs11[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs12[]={(const char*)0, (const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12}; return r;}
const sUI   *YAC_VCALL _Math::yacMethodGetReturnTypes          (void) {static const sUI r[]={4, 2, 3, 2, 2, 2, 2, 1, 1, 0, 0, 0, 2}; return r;}
const char **YAC_VCALL _Math::yacMethodGetReturnObjectTypes    (void) {static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;}
const void **YAC_VCALL _Math::yacMethodGetAdr                  (void) {static const void *r[]={(void*)Object__operator, (void*)Math___powerXY, (void*)Math___normal, (void*)Math___max, (void*)Math___absmax, (void*)Math___min, (void*)Math___absmin, (void*)Math___c32Multiply, (void*)Math___c32Blend, (void*)Math___reflect, (void*)Math___vectorMin, (void*)Math___vectorMax, (void*)Math___distancePointPlane}; return r;}
sUI          YAC_VCALL _Math::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL _Math::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL _Math::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL _Math::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(_Math, "Math");

sF32  YAC_CALL Math___powerXY       (void *_o, yacmemptr _args               ) {return (sF32)((_Math*)_o)->_powerXY(_args.mem[0].f32, _args.mem[1].f32);}
void* YAC_CALL Math___normal        (void *_o, yacmemptr _args               ) {return (void*)((_Math*)_o)->_normal(_args.mem[0].o, _args.mem[1].o, _args.mem[2].o);}
sF32  YAC_CALL Math___max           (void *_o, yacmemptr _args               ) {return (sF32)((_Math*)_o)->_max(_args.mem[0].f32, _args.mem[1].f32);}
sF32  YAC_CALL Math___absmax        (void *_o, yacmemptr _args               ) {return (sF32)((_Math*)_o)->_absmax(_args.mem[0].f32, _args.mem[1].f32);}
sF32  YAC_CALL Math___min           (void *_o, yacmemptr _args               ) {return (sF32)((_Math*)_o)->_min(_args.mem[0].f32, _args.mem[1].f32);}
sF32  YAC_CALL Math___absmin        (void *_o, yacmemptr _args               ) {return (sF32)((_Math*)_o)->_absmin(_args.mem[0].f32, _args.mem[1].f32);}
sSI   YAC_CALL Math___c32Multiply   (void *_o, yacmemptr _args               ) {return (sSI)((_Math*)_o)->_c32Multiply(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
sSI   YAC_CALL Math___c32Blend      (void *_o, yacmemptr _args               ) {return (sSI)((_Math*)_o)->_c32Blend(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
void  YAC_CALL Math___reflect       (void *_o, yacmemptr _args               ) {((_Math*)_o)->_reflect(_args.mem[0].o, _args.mem[1].o, _args.mem[2].o);}
void  YAC_CALL Math___vectorMin     (void *_o, yacmemptr _args               ) {((_Math*)_o)->_vectorMin(_args.mem[0].o, _args.mem[1].o, _args.mem[2].o);}
void  YAC_CALL Math___vectorMax     (void *_o, yacmemptr _args               ) {((_Math*)_o)->_vectorMax(_args.mem[0].o, _args.mem[1].o, _args.mem[2].o);}
sF32  YAC_CALL Math___distancePointPlane(void *_o, yacmemptr _args           ) {return (sF32)((_Math*)_o)->_distancePointPlane(_args.mem[0].o, _args.mem[1].o, _args.mem[2].o);}
