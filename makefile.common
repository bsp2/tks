#
# Common toplevel makefile targets for TKS and plugins
#
#  This file gets included by makefile.[msvc | mingw | linux | macosx]
#
#  MKFILE, PLUGINS and TKS_ZIP_PREFIX must be defined before including this file.
#
#

#
# help
#
.PHONY: help
help:
	@echo "         all_clean : Clean tks and plugin targets"
	@echo "           all_bin : Build tks and plugin targets"
	@echo "           all_upx : Compress all executables and DLLs using UPX"
	@echo "       all_install : Install tks and plugin targets"
	@echo "           all_zip : Create source distribution packages (.zip) in directory \"$(TKS_ZIP_PREFIX)\""
	@echo " "
	@echo "           tks_bin : Build tks binary"
	@echo "       plugins_bin : Build plugins"
	@echo "     plugins_clean : Remove targets and intermediate build files"
	@echo "       plugins_zip : Create plugin source distribution packages (.zip) in directory \"$(TKS_ZIP_PREFIX)\""
	@echo "        plugins_ee : Export plugin documentation (in DOG format)"
	@echo "       plugins_yac : (Re-)build YAC interface files";
	@echo " "


# (note) the ALL_PLUGINS list is used by the 'all_zip' target (see makefile.<platform> for per-platform plugin build selection)

# core plugins
ALL_PLUGINS= yingtest__
ALL_PLUGINS+= tksdl__
ALL_PLUGINS+= tksdl12-compat__
ALL_PLUGINS+= tksdl2__
ALL_PLUGINS+= tkopengl__
ALL_PLUGINS+= tkfreetype2__
ALL_PLUGINS+= tkui__
ALL_PLUGINS+= tkfileutils__
ALL_PLUGINS += tkminnie__

# other plugins
ALL_PLUGINS += tkmath__
ALL_PLUGINS += tkoldmath__
ALL_PLUGINS += tkbluetooth__
ALL_PLUGINS += tksdl_net__
ALL_PLUGINS += tkdist2d__
ALL_PLUGINS += tkzip__
ALL_PLUGINS += tksqlite__

# graphics plugins (not used by ST2)
ALL_PLUGINS += tkchipmunk__
ALL_PLUGINS += tkfreeglut__
ALL_PLUGINS += tktriangulate__
ALL_PLUGINS += polyraster__

# audio plugins (not used by ST2)
ALL_PLUGINS += eqxmms__
ALL_PLUGINS += tksidplay2__
ALL_PLUGINS += tkfreeverb__
ALL_PLUGINS += tksmdi__
ALL_PLUGINS += tkspeexdsp__

# ST2 audio plugins
ALL_PLUGINS += tkanalogrytm__
ALL_PLUGINS += tkclap__
ALL_PLUGINS += tkmidi__
ALL_PLUGINS += tkmidi_alsa__
ALL_PLUGINS += tkmidi_portmidi__
ALL_PLUGINS += tkportaudio__
ALL_PLUGINS += tkportaudio_alsa__
ALL_PLUGINS += tkradiastools__
ALL_PLUGINS += tksampler__
ALL_PLUGINS += tksampleedit__
####ALL_PLUGINS += tksynth__
ALL_PLUGINS += tkvst2__
ALL_PLUGINS += tkvst2_stub__
ALL_PLUGINS += tkvst2_nogui__
ALL_PLUGINS += tkvst2_macos__
###PLUGINS += tkcustomsynth__
###PLUGINS += tkmacrosynth__
###PLUGINS += tksynthgenproxy__
ALL_PLUGINS += tkmidipipe__
ALL_PLUGINS += tksamplechain__


#
# script libraries + applications
#
ALL_TSL_TARGETS= debugtext_install librs_install libplot_install libplot-fs_install

ALL_TKX_TARGETS= dog_install org_install md_install graph_install
#minnie_install

#
# all targets
#
.PHONY: all
all: tks plugins

.PHONY: all_clean
all_clean: tks_clean yac_clean plugins_clean clean_tags

.PHONY: all_bin
all_bin: tks_bin plugins_bin
	@echo "tks + plugins build finished at `date +%H:%M`."

# (todo) remove
.PHONY: all_upx
all_upx: tks_upx plugins_upx



#
# Clean CTAGS, GTAGS, cscope databases (tags.sh rebuilds them)
#
.PHONY: clean_tags
clean_tags:
	$(RM) cscope.out
	$(RM) cscope.in.out
	$(RM) cscope.po.out
	$(RM) GPATH
	$(RM) GRTAGS
	$(RM) GTAGS
	$(RM) BROWSE


#
# plugin targets
#
.PHONY: plugins
plugins: $(subst __,,$(PLUGINS))

.PHONY: plugins_clean
plugins_clean: $(subst __,_clean,$(PLUGINS))

.PHONY: plugins_bin
plugins_bin: $(subst __,_bin,$(PLUGINS))
	@echo "plugins_bin build finished at `date +%H:%M`."

.PHONY: plugins_upx
plugins_upx: $(subst __,_upx,$(PLUGINS))

.PHONY: plugins_install
plugins_install: $(subst __,_install,$(PLUGINS))

.PHONY: plugins_ee
plugins_ee: $(subst __,_ee,$(PLUGINS))

.PHONY: plugins_yac
plugins_yac: $(subst __,_yac,$(PLUGINS))

.PHONY: plugins_zip
plugins_zip: $(subst __,_zip,$(ALL_PLUGINS))



#
# yac (use Cygwin shell!)
#
.PHONY: yac_clean
yac_clean:
	$(RM) -fr `find yac -name \*~`

yac_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/yac.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/yac.zip" yac

#
# Create snapshot of build environment
#
ALL_MAKEFILES= makefile.common makefile.linux makefile.msvc makefile.macos
ALL_MKINCLUDES= install_linux.mk install_msvc.mk install_macos.mk plugin_common.mk plugin_common_gcc.mk plugin_linux.mk plugin_macos.mk plugin_msvc.mk setenv_msvc.sh setenv_linux.sh setenv_linux_poky.sh setenv_linux_raspbian_32.sh setenv_linux_raspbian_64.sh setenv_macos_arm64.sh setenv_macos_x86_64.sh

tks_build_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tks-build.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tks-build.zip" $(ALL_MAKEFILES) $(ALL_MKINCLUDES)


#
# Example source packages
#  (more examples can be found in the plugin packages)
#
all_examples_zip: tks_examples_zip gkraft_zip retrovaders2_zip equalize_it_zip

tks_examples_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tks-examples.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tks-examples.zip" tks-examples/

gkraft_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/gkraft.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/gkraft.zip" tks-projects/games/gkraft

retrovaders2_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/retrovaders2.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/retrovaders2.zip" tks-projects/games/retrovaders2

equalize_it_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/equalize_it.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/equalize_it.zip" tks-projects/other/equalize_it_dev


#
# Script libraries
#
all_tsl_zip: debugtext_zip tkunit_zip libplot_zip libplot-fs_zip librs_zip

.PHONY: debugtext_zip
debugtext_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/debugtext.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/debugtext.zip" tks-projects/libs/debugtext/

.PHONY: debugtext_install
debugtext_install:
	$(MAKE) -C tks-projects/libs/debugtext/ install

.PHONY: tkunit_zip
tkunit_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkunit.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkunit.zip" tkunit/

.PHONY: libplot_zip
libplot_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/libplot.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/libplot.zip" tks-projects/libs/libplot/

.PHONY: libplot_install
libplot_install:
	$(MAKE) -C tks-projects/libs/libplot/ install

.PHONY: libplot-fs_zip
libplot-fs_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/libplot-fs.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/libplot-fs.zip" tks-projects/libs/libplot-fs/

.PHONY: libplot-fs_install
libplot-fs_install:
	$(MAKE) -C tks-projects/libs/libplot-fs/ install

.PHONY: librs_zip
librs_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/librs.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/librs.zip" tks-projects/libs/librs/

.PHONY: librs_install
librs_install:
	$(MAKE) -C tks-projects/libs/librs/ install


#
# Script applications
#
all_app_zip: dog_zip rio_zip org_zip md_zip svg_loader_zip shadervg_zip gledit_zip racer_zip graph_zip

.PHONY: dog_zip
dog_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/dog.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/dog.zip" tks-projects/tools/dog/

.PHONY: dog_install
dog_install:
	$(MAKE) -C tks-projects/tools/dog install

.PHONY: rio_zip
rio_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/rio.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/rio.zip" tks-projects/libs/rio/

.PHONY: org_zip
org_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/org.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/org.zip" tks-projects/tools/org/

.PHONY: org_install
org_install:
	$(MAKE) -C tks-projects/tools/org install

.PHONY: md_zip
md_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/md.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/md.zip" tks-projects/tools/md/

.PHONY: md_install
md_install:
	$(MAKE) -C tks-projects/tools/md install

.PHONY: svg_loader_zip
svg_loader_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/svg_loader.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/svg_loader.zip" tks-projects/tools/svg_loader/

#.PHONY: svg_loader_install
#svg_loader_install:
#	$(MAKE) -C tks-projects/svg_loader install

.PHONY: shadervg_zip
shadervg_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/shadervg.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/shadervg.zip" tks-projects/libs/shadervg/

#.PHONY: shadervg_install
#shadervg_install:
#	$(MAKE) -C tks-projects/shadervg install

.PHONY: gledit_zip
gledit_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/gledit.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/gledit.zip" tks-projects/apps/gledit/

.PHONY: racer_zip
racer_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/racer.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/racer.zip" tks-projects/games/racer/

.PHONY: graph_zip
graph_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/graph.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/graph.zip" tks-projects/tools/graph/

.PHONY: graph_install
graph_install:
	$(MAKE) -C tks-projects/tools/graph install



#
# tks
#
.PHONY: tks
tks:
	$(MAKE) -j $(NUMJOBS) -C tks-source -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tks-source -f $(MKFILE) bin

tks_clean:
	$(MAKE) -j $(NUMJOBS) -C tks-source -f $(MKFILE) realclean

tks_bin:
	$(MAKE) -j $(NUMJOBS) -C tks-source -f $(MKFILE) bin

tks_upx:
	$(MAKE) -j $(NUMJOBS) -C tks-source -f $(MKFILE) upx

tks_install:
	$(MAKE) -j $(NUMJOBS) -C tks-source -f $(MKFILE) install

tks_ee:
	$(MAKE) -j $(NUMJOBS) -C tks-source -f $(MKFILE) ee

tks_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tks-source.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tks-source.zip" tks-source


#
# yingtest
#
.PHONY: yingtest
yingtest:
	$(MAKE) -j $(NUMJOBS) -C yingtest -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C yingtest -f $(MKFILE) bin

yingtest_clean:
	$(MAKE) -j $(NUMJOBS) -C yingtest -f $(MKFILE) realclean

yingtest_bin:
	$(MAKE) -j $(NUMJOBS) -C yingtest -f $(MKFILE) bin

yingtest_upx:
	$(MAKE) -j $(NUMJOBS) -C yingtest -f $(MKFILE) upx

yingtest_install:
	$(MAKE) -j $(NUMJOBS) -C yingtest -f $(MKFILE) install

yingtest_ee:
	$(MAKE) -j $(NUMJOBS) -C yingtest -f $(MKFILE) ee

yingtest_yac:
	$(MAKE) -j $(NUMJOBS) -C yingtest -f $(MKFILE) yac

yingtest_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/yingtest.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/yingtest.zip" yingtest


#
# tksdl
#
.PHONY: tksdl
tksdl:
	$(MAKE) -j $(NUMJOBS) -C tksdl -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tksdl -f $(MKFILE) bin

tksdl_clean:
	$(MAKE) -j $(NUMJOBS) -C tksdl -f $(MKFILE) realclean

tksdl_bin:
	$(MAKE) -j $(NUMJOBS) -C tksdl -f $(MKFILE) bin

tksdl_upx:
	$(MAKE) -j $(NUMJOBS) -C tksdl -f $(MKFILE) upx

tksdl_install:
	$(MAKE) -j $(NUMJOBS) -C tksdl -f $(MKFILE) install

tksdl_ee:
	$(MAKE) -j $(NUMJOBS) -C tksdl -f $(MKFILE) ee

tksdl_yac:
	$(MAKE) -j $(NUMJOBS) -C tksdl -f $(MKFILE) yac

tksdl_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tksdl.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tksdl.zip" tksdl


#
# tksdl12-compat
#
.PHONY: tksdl12-compat
tksdl12-compat:
	$(MAKE) -j $(NUMJOBS) -C tksdl12-compat -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tksdl12-compat -f $(MKFILE) bin

tksdl12-compat_clean:
	$(MAKE) -j $(NUMJOBS) -C tksdl12-compat -f $(MKFILE) realclean

tksdl12-compat_bin:
	$(MAKE) -j $(NUMJOBS) -C tksdl12-compat -f $(MKFILE) bin

tksdl12-compat_upx:
	$(MAKE) -j $(NUMJOBS) -C tksdl12-compat -f $(MKFILE) upx

tksdl12-compat_install:
	$(MAKE) -j $(NUMJOBS) -C tksdl12-compat -f $(MKFILE) install

tksdl12-compat_ee:
	$(MAKE) -j $(NUMJOBS) -C tksdl12-compat -f $(MKFILE) ee

tksdl12-compat_yac:
	$(MAKE) -j $(NUMJOBS) -C tksdl12-compat -f $(MKFILE) yac

tksdl12-compat_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tksdl12-compat.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tksdl12-compat.zip" tksdl12-compat


#
# tksdl2
#
.PHONY: tksdl2
tksdl2:
	$(MAKE) -j $(NUMJOBS) -C tksdl2 -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tksdl2 -f $(MKFILE) bin

tksdl2_clean:
	$(MAKE) -j $(NUMJOBS) -C tksdl2 -f $(MKFILE) realclean

tksdl2_bin:
	$(MAKE) -j $(NUMJOBS) -C tksdl2 -f $(MKFILE) bin

tksdl2_upx:
	$(MAKE) -j $(NUMJOBS) -C tksdl2 -f $(MKFILE) upx

tksdl2_install:
	$(MAKE) -j $(NUMJOBS) -C tksdl2 -f $(MKFILE) install

tksdl2_ee:
	$(MAKE) -j $(NUMJOBS) -C tksdl2 -f $(MKFILE) ee

tksdl2_yac:
	$(MAKE) -j $(NUMJOBS) -C tksdl2 -f $(MKFILE) yac

tksdl2_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tksdl2.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tksdl2.zip" tksdl2


#
# tksdl_net
#
.PHONY: tksdl_net
tksdl_net:
	$(MAKE) -j $(NUMJOBS) -C tksdl_net -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tksdl_net -f $(MKFILE) bin

tksdl_net_clean:
	$(MAKE) -j $(NUMJOBS) -C tksdl_net -f $(MKFILE) realclean

tksdl_net_bin:
	$(MAKE) -j $(NUMJOBS) -C tksdl_net -f $(MKFILE) bin

tksdl_net_upx:
	$(MAKE) -j $(NUMJOBS) -C tksdl_net -f $(MKFILE) upx

tksdl_net_install:
	$(MAKE) -j $(NUMJOBS) -C tksdl_net -f $(MKFILE) install

tksdl_net_ee:
	$(MAKE) -j $(NUMJOBS) -C tksdl_net -f $(MKFILE) ee

tksdl_net_yac:
	$(MAKE) -j $(NUMJOBS) -C tksdl_net -f $(MKFILE) yac

tksdl_net_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tksdl_net.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tksdl_net.zip" tksdl_net


#
# tkopengl
#
.PHONY: tkopengl
tkopengl:
	$(MAKE) -j $(NUMJOBS) -C tkopengl -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkopengl -f $(MKFILE) bin

tkopengl_clean:
	$(MAKE) -j $(NUMJOBS) -C tkopengl -f $(MKFILE) realclean

tkopengl_bin:
	$(MAKE) -j $(NUMJOBS) -C tkopengl -f $(MKFILE) bin

tkopengl_upx:
	$(MAKE) -j $(NUMJOBS) -C tkopengl -f $(MKFILE) upx

tkopengl_install:
	$(MAKE) -j $(NUMJOBS) -C tkopengl -f $(MKFILE) install

tkopengl_ee:
	$(MAKE) -j $(NUMJOBS) -C tkopengl -f $(MKFILE) ee

tkopengl_yac:
	$(MAKE) -j $(NUMJOBS) -C tkopengl -f $(MKFILE) yac

tkopengl_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkopengl.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkopengl.zip" tkopengl


#
# tkcg (deprecated, use GLSL instead)
#
.PHONY: tkcg
tkcg:
	$(MAKE) -j $(NUMJOBS) -C tkcg -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkcg -f $(MKFILE) bin

tkcg_clean:
	$(MAKE) -j $(NUMJOBS) -C tkcg -f $(MKFILE) realclean

tkcg_bin:
	$(MAKE) -j $(NUMJOBS) -C tkcg -f $(MKFILE) bin

tkcg_upx:
	$(MAKE) -j $(NUMJOBS) -C tkcg -f $(MKFILE) upx

tkcg_install:
	$(MAKE) -j $(NUMJOBS) -C tkcg -f $(MKFILE) install

tkcg_ee:
	$(MAKE) -j $(NUMJOBS) -C tkcg -f $(MKFILE) ee

tkcg_yac:
	$(MAKE) -j $(NUMJOBS) -C tkcg -f $(MKFILE) yac

tkcg_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkcg.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkcg.zip" tkcg


#
# tkfreetype2
#
.PHONY: tkfreetype2
tkfreetype2:
	$(MAKE) -j $(NUMJOBS) -C tkfreetype2 -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkfreetype2 -f $(MKFILE) bin

tkfreetype2_clean:
	$(MAKE) -j $(NUMJOBS) -C tkfreetype2 -f $(MKFILE) realclean

tkfreetype2_bin:
	$(MAKE) -j $(NUMJOBS) -C tkfreetype2 -f $(MKFILE) bin

tkfreetype2_upx:
	$(MAKE) -j $(NUMJOBS) -C tkfreetype2 -f $(MKFILE) upx

tkfreetype2_install:
	$(MAKE) -j $(NUMJOBS) -C tkfreetype2 -f $(MKFILE) install

tkfreetype2_ee:
	$(MAKE) -j $(NUMJOBS) -C tkfreetype2 -f $(MKFILE) ee

tkfreetype2_yac:
	$(MAKE) -j $(NUMJOBS) -C tkfreetype2 -f $(MKFILE) yac

tkfreetype2_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkfreetype2.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkfreetype2.zip" tkfreetype2


#
# tkui
#
.PHONY: tkui
tkui:
	$(MAKE) -j $(NUMJOBS) -C tkui -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkui -f $(MKFILE) bin

tkui_clean:
	$(MAKE) -j $(NUMJOBS) -C tkui -f $(MKFILE) realclean

tkui_bin:
	$(MAKE) -j $(NUMJOBS) -C tkui -f $(MKFILE) bin

tkui_upx:
	$(MAKE) -j $(NUMJOBS) -C tkui -f $(MKFILE) upx

tkui_install:
	$(MAKE) -j $(NUMJOBS) -C tkui -f $(MKFILE) install

tkui_ee:
	$(MAKE) -j $(NUMJOBS) -C tkui -f $(MKFILE) ee

tkui_yac:
	$(MAKE) -j $(NUMJOBS) -C tkui -f $(MKFILE) yac

tkui_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkui.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkui.zip" tkui


#
# tkfreeglut
#
.PHONY: tkfreeglut
tkfreeglut:
	$(MAKE) -j $(NUMJOBS) -C tkfreeglut -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkfreeglut -f $(MKFILE) bin

tkfreeglut_clean:
	$(MAKE) -j $(NUMJOBS) -C tkfreeglut -f $(MKFILE) realclean

tkfreeglut_bin:
	$(MAKE) -j $(NUMJOBS) -C tkfreeglut -f $(MKFILE) bin

tkfreeglut_upx:
	$(MAKE) -j $(NUMJOBS) -C tkfreeglut -f $(MKFILE) upx

tkfreeglut_install:
	$(MAKE) -j $(NUMJOBS) -C tkfreeglut -f $(MKFILE) install

tkfreeglut_ee:
	$(MAKE) -j $(NUMJOBS) -C tkfreeglut -f $(MKFILE) ee

tkfreeglut_yac:
	$(MAKE) -j $(NUMJOBS) -C tkfreeglut -f $(MKFILE) yac

tkfreeglut_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkfreeglut.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkfreeglut.zip" tkfreeglut


#
# tkmath
#
.PHONY: tkmath
tkmath:
	$(MAKE) -j $(NUMJOBS) -C tkmath -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkmath -f $(MKFILE) bin

tkmath_clean:
	$(MAKE) -j $(NUMJOBS) -C tkmath -f $(MKFILE) realclean

tkmath_bin:
	$(MAKE) -j $(NUMJOBS) -C tkmath -f $(MKFILE) bin

tkmath_upx:
	$(MAKE) -j $(NUMJOBS) -C tkmath -f $(MKFILE) upx

tkmath_install:
	$(MAKE) -j $(NUMJOBS) -C tkmath -f $(MKFILE) install

tkmath_ee:
	$(MAKE) -j $(NUMJOBS) -C tkmath -f $(MKFILE) ee

tkmath_yac:
	$(MAKE) -j $(NUMJOBS) -C tkmath -f $(MKFILE) yac

tkmath_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkmath.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkmath.zip" tkmath


#
# tkoldmath
#
.PHONY: tkoldmath
tkoldmath:
	$(MAKE) -j $(NUMJOBS) -C tkoldmath -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkoldmath -f $(MKFILE) bin

tkoldmath_clean:
	$(MAKE) -j $(NUMJOBS) -C tkoldmath -f $(MKFILE) realclean

tkoldmath_bin:
	$(MAKE) -j $(NUMJOBS) -C tkoldmath -f $(MKFILE) bin

tkoldmath_upx:
	$(MAKE) -j $(NUMJOBS) -C tkoldmath -f $(MKFILE) upx

tkoldmath_install:
	$(MAKE) -j $(NUMJOBS) -C tkoldmath -f $(MKFILE) install

tkoldmath_ee:
	$(MAKE) -j $(NUMJOBS) -C tkoldmath -f $(MKFILE) ee

tkoldmath_yac:
	$(MAKE) -j $(NUMJOBS) -C tkoldmath -f $(MKFILE) yac

tkoldmath_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkoldmath.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkoldmath.zip" tkoldmath


#
# eqxmms
#
.PHONY: eqxmms
eqxmms:
	$(MAKE) -j $(NUMJOBS) -C eqxmms -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C eqxmms -f $(MKFILE) bin

eqxmms_clean:
	$(MAKE) -j $(NUMJOBS) -C eqxmms -f $(MKFILE) realclean

eqxmms_bin:
	$(MAKE) -j $(NUMJOBS) -C eqxmms -f $(MKFILE) bin

eqxmms_upx:
	$(MAKE) -j $(NUMJOBS) -C eqxmms -f $(MKFILE) upx

eqxmms_install:
	$(MAKE) -j $(NUMJOBS) -C eqxmms -f $(MKFILE) install

eqxmms_ee:
	$(MAKE) -j $(NUMJOBS) -C eqxmms -f $(MKFILE) ee

eqxmms_yac:
	$(MAKE) -j $(NUMJOBS) -C eqxmms -f $(MKFILE) yac

eqxmms_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/eqxmms.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/eqxmms.zip" eqxmms


#
# tkchipmunk
#
.PHONY: tkchipmunk
tkchipmunk:
	$(MAKE) -j $(NUMJOBS) -C tkchipmunk -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkchipmunk -f $(MKFILE) bin

tkchipmunk_clean:
	$(MAKE) -j $(NUMJOBS) -C tkchipmunk -f $(MKFILE) realclean

tkchipmunk_bin:
	$(MAKE) -j $(NUMJOBS) -C tkchipmunk -f $(MKFILE) bin

tkchipmunk_upx:
	$(MAKE) -j $(NUMJOBS) -C tkchipmunk -f $(MKFILE) upx

tkchipmunk_install:
	$(MAKE) -j $(NUMJOBS) -C tkchipmunk -f $(MKFILE) install

tkchipmunk_ee:
	$(MAKE) -j $(NUMJOBS) -C tkchipmunk -f $(MKFILE) ee

tkchipmunk_yac:
	$(MAKE) -j $(NUMJOBS) -C tkchipmunk -f $(MKFILE) yac

tkchipmunk_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkchipmunk.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkchipmunk.zip" tkchipmunk


#
# tkmidi
#
.PHONY: tkmidi
tkmidi:
	$(MAKE) -j $(NUMJOBS) -C tkmidi -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkmidi -f $(MKFILE) bin

tkmidi_clean:
	$(MAKE) -j $(NUMJOBS) -C tkmidi -f $(MKFILE) realclean

tkmidi_bin:
	$(MAKE) -j $(NUMJOBS) -C tkmidi -f $(MKFILE) bin

tkmidi_upx:
	$(MAKE) -j $(NUMJOBS) -C tkmidi -f $(MKFILE) upx

tkmidi_install:
	$(MAKE) -j $(NUMJOBS) -C tkmidi -f $(MKFILE) install

tkmidi_ee:
	$(MAKE) -j $(NUMJOBS) -C tkmidi -f $(MKFILE) ee

tkmidi_yac:
	$(MAKE) -j $(NUMJOBS) -C tkmidi -f $(MKFILE) yac

tkmidi_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkmidi.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkmidi.zip" tkmidi


#
# tkmidi_alsa
#
.PHONY: tkmidi_alsa
tkmidi_alsa:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_alsa -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkmidi_alsa -f $(MKFILE) bin

tkmidi_alsa_clean:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_alsa -f $(MKFILE) realclean

tkmidi_alsa_bin:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_alsa -f $(MKFILE) bin

tkmidi_alsa_upx:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_alsa -f $(MKFILE) upx

tkmidi_alsa_install:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_alsa -f $(MKFILE) install

tkmidi_alsa_ee:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_alsa -f $(MKFILE) ee

tkmidi_alsa_yac:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_alsa -f $(MKFILE) yac

tkmidi_alsa_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkmidi_alsa.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkmidi_alsa.zip" tkmidi_alsa


#
# tkmidi_portmidi
#
.PHONY: tkmidi_portmidi
tkmidi_portmidi:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_portmidi -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkmidi_portmidi -f $(MKFILE) bin

tkmidi_portmidi_clean:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_portmidi -f $(MKFILE) realclean

tkmidi_portmidi_bin:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_portmidi -f $(MKFILE) bin

tkmidi_portmidi_upx:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_portmidi -f $(MKFILE) upx

tkmidi_portmidi_install:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_portmidi -f $(MKFILE) install

tkmidi_portmidi_ee:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_portmidi -f $(MKFILE) ee

tkmidi_portmidi_yac:
	$(MAKE) -j $(NUMJOBS) -C tkmidi_portmidi -f $(MKFILE) yac

tkmidi_portmidi_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkmidi_portmidi.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkmidi_portmidi.zip" tkmidi_portmidi


#
# tksmdi
#
.PHONY: tksmdi
tksmdi:
	$(MAKE) -j $(NUMJOBS) -C tksmdi -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tksmdi -f $(MKFILE) bin

tksmdi_clean:
	$(MAKE) -j $(NUMJOBS) -C tksmdi -f $(MKFILE) realclean

tksmdi_bin:
	$(MAKE) -j $(NUMJOBS) -C tksmdi -f $(MKFILE) bin

tksmdi_upx:
	$(MAKE) -j $(NUMJOBS) -C tksmdi -f $(MKFILE) upx

tksmdi_install:
	$(MAKE) -j $(NUMJOBS) -C tksmdi -f $(MKFILE) install

tksmdi_ee:
	$(MAKE) -j $(NUMJOBS) -C tksmdi -f $(MKFILE) ee

tksmdi_yac:
	$(MAKE) -j $(NUMJOBS) -C tksmdi -f $(MKFILE) yac

tksmdi_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tksmdi.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tksmdi.zip" tksmdi


#
# tkportaudio
#
.PHONY: tkportaudio
tkportaudio:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkportaudio -f $(MKFILE) bin

tkportaudio_clean:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio -f $(MKFILE) realclean

tkportaudio_bin:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio -f $(MKFILE) bin

tkportaudio_upx:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio -f $(MKFILE) upx

tkportaudio_install:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio -f $(MKFILE) install

tkportaudio_ee:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio -f $(MKFILE) ee

tkportaudio_yac:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio -f $(MKFILE) yac

tkportaudio_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkportaudio.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkportaudio.zip" tkportaudio


#
# tkportaudio_oss
#
.PHONY: tkportaudio_oss
tkportaudio_oss:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_oss -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkportaudio_oss -f $(MKFILE) bin

tkportaudio_oss_clean:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_oss -f $(MKFILE) realclean

tkportaudio_oss_bin:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_oss -f $(MKFILE) bin

tkportaudio_oss_upx:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_oss -f $(MKFILE) upx

tkportaudio_oss_install:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_oss -f $(MKFILE) install

tkportaudio_oss_ee:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_oss -f $(MKFILE) ee

tkportaudio_oss_yac:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_oss -f $(MKFILE) yac

tkportaudio_oss_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkportaudio_oss.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkportaudio_oss.zip" tkportaudio_oss


#
# tkportaudio_alsa
#
.PHONY: tkportaudio_alsa
tkportaudio_alsa:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_alsa -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkportaudio_alsa -f $(MKFILE) bin

tkportaudio_alsa_clean:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_alsa -f $(MKFILE) realclean

tkportaudio_alsa_bin:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_alsa -f $(MKFILE) bin

tkportaudio_alsa_upx:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_alsa -f $(MKFILE) upx

tkportaudio_alsa_install:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_alsa -f $(MKFILE) install

tkportaudio_alsa_ee:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_alsa -f $(MKFILE) ee

tkportaudio_alsa_yac:
	$(MAKE) -j $(NUMJOBS) -C tkportaudio_alsa -f $(MKFILE) yac

tkportaudio_alsa_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkportaudio_alsa.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkportaudio_alsa.zip" tkportaudio_alsa


#
# tksampler
#
.PHONY: tksampler
tksampler:
	$(MAKE) -j $(NUMJOBS) -C tksampler -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tksampler -f $(MKFILE) bin

tksampler_clean:
	$(MAKE) -j $(NUMJOBS) -C tksampler -f $(MKFILE) realclean

tksampler_bin:
	$(MAKE) -j $(NUMJOBS) -C tksampler -f $(MKFILE) bin

tksampler_upx:
	$(MAKE) -j $(NUMJOBS) -C tksampler -f $(MKFILE) upx

tksampler_install:
	$(MAKE) -j $(NUMJOBS) -C tksampler -f $(MKFILE) install

tksampler_ee:
	$(MAKE) -j $(NUMJOBS) -C tksampler -f $(MKFILE) ee

tksampler_yac:
	$(MAKE) -j $(NUMJOBS) -C tksampler -f $(MKFILE) yac

tksampler_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tksampler.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tksampler.zip" tksampler


#
# tksampleedit
#
.PHONY: tksampleedit
tksampleedit:
	$(MAKE) -j $(NUMJOBS) -C tksampleedit -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tksampleedit -f $(MKFILE) bin

tksampleedit_clean:
	$(MAKE) -j $(NUMJOBS) -C tksampleedit -f $(MKFILE) realclean

tksampleedit_bin:
	$(MAKE) -j $(NUMJOBS) -C tksampleedit -f $(MKFILE) bin

tksampleedit_upx:
	$(MAKE) -j $(NUMJOBS) -C tksampleedit -f $(MKFILE) upx

tksampleedit_install:
	$(MAKE) -j $(NUMJOBS) -C tksampleedit -f $(MKFILE) install

tksampleedit_ee:
	$(MAKE) -j $(NUMJOBS) -C tksampleedit -f $(MKFILE) ee

tksampleedit_yac:
	$(MAKE) -j $(NUMJOBS) -C tksampleedit -f $(MKFILE) yac

tksampleedit_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tksampleedit.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tksampleedit.zip" tksampleedit


#
# tksidplay2
#
.PHONY: tksidplay2
tksidplay2:
	$(MAKE) -j $(NUMJOBS) -C tksidplay2 -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tksidplay2 -f $(MKFILE) bin

tksidplay2_clean:
	$(MAKE) -j $(NUMJOBS) -C tksidplay2 -f $(MKFILE) realclean

tksidplay2_bin:
	$(MAKE) -j $(NUMJOBS) -C tksidplay2 -f $(MKFILE) bin

tksidplay2_upx:
	$(MAKE) -j $(NUMJOBS) -C tksidplay2 -f $(MKFILE) upx

tksidplay2_install:
	$(MAKE) -j $(NUMJOBS) -C tksidplay2 -f $(MKFILE) install

tksidplay2_ee:
	$(MAKE) -j $(NUMJOBS) -C tksidplay2 -f $(MKFILE) ee

tksidplay2_yac:
	$(MAKE) -j $(NUMJOBS) -C tksidplay2 -f $(MKFILE) yac

tksidplay2_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tksidplay2.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tksidplay2.zip" tksidplay2


#
# tkfreeverb
#
.PHONY: tkfreeverb
tkfreeverb:
	$(MAKE) -j $(NUMJOBS) -C tkfreeverb -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkfreeverb -f $(MKFILE) bin

tkfreeverb_clean:
	$(MAKE) -j $(NUMJOBS) -C tkfreeverb -f $(MKFILE) realclean

tkfreeverb_bin:
	$(MAKE) -j $(NUMJOBS) -C tkfreeverb -f $(MKFILE) bin

tkfreeverb_upx:
	$(MAKE) -j $(NUMJOBS) -C tkfreeverb -f $(MKFILE) upx

tkfreeverb_install:
	$(MAKE) -j $(NUMJOBS) -C tkfreeverb -f $(MKFILE) install

tkfreeverb_ee:
	$(MAKE) -j $(NUMJOBS) -C tkfreeverb -f $(MKFILE) ee

tkfreeverb_yac:
	$(MAKE) -j $(NUMJOBS) -C tkfreeverb -f $(MKFILE) yac

tkfreeverb_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkfreeverb.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkfreeverb.zip" tkfreeverb


#
# tkanalogrytm
#
.PHONY: tkanalogrytm
tkanalogrytm:
	$(MAKE) -j $(NUMJOBS) -C tkanalogrytm -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkanalogrytm -f $(MKFILE) bin

tkanalogrytm_clean:
	$(MAKE) -j $(NUMJOBS) -C tkanalogrytm -f $(MKFILE) realclean

tkanalogrytm_bin:
	$(MAKE) -j $(NUMJOBS) -C tkanalogrytm -f $(MKFILE) bin

tkanalogrytm_upx:
	$(MAKE) -j $(NUMJOBS) -C tkanalogrytm -f $(MKFILE) upx

tkanalogrytm_install:
	$(MAKE) -j $(NUMJOBS) -C tkanalogrytm -f $(MKFILE) install

tkanalogrytm_ee:
	$(MAKE) -j $(NUMJOBS) -C tkanalogrytm -f $(MKFILE) ee

tkanalogrytm_yac:
	$(MAKE) -j $(NUMJOBS) -C tkanalogrytm -f $(MKFILE) yac

tkanalogrytm_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkanalogrytm.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkanalogrytm.zip" tkanalogrytm libanalogrytm


#
# tksynth
#
.PHONY: tksynth
tksynth:
	$(MAKE) -j $(NUMJOBS) -C tksynth -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tksynth -f $(MKFILE) bin

tksynth_clean:
	$(MAKE) -j $(NUMJOBS) -C tksynth -f $(MKFILE) realclean

tksynth_bin:
	$(MAKE) -j $(NUMJOBS) -C tksynth -f $(MKFILE) bin

tksynth_upx:
	$(MAKE) -j $(NUMJOBS) -C tksynth -f $(MKFILE) upx

tksynth_install:
	$(MAKE) -j $(NUMJOBS) -C tksynth -f $(MKFILE) install

tksynth_ee:
	$(MAKE) -j $(NUMJOBS) -C tksynth -f $(MKFILE) ee

tksynth_yac:
	$(MAKE) -j $(NUMJOBS) -C tksynth -f $(MKFILE) yac

tksynth_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tksynth.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tksynth.zip" tksynth


#
# tkdist2d
#
.PHONY: tkdist2d
tkdist2d:
	$(MAKE) -j $(NUMJOBS) -C tkdist2d -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkdist2d -f $(MKFILE) bin

tkdist2d_clean:
	$(MAKE) -j $(NUMJOBS) -C tkdist2d -f $(MKFILE) realclean

tkdist2d_bin:
	$(MAKE) -j $(NUMJOBS) -C tkdist2d -f $(MKFILE) bin

tkdist2d_upx:
	$(MAKE) -j $(NUMJOBS) -C tkdist2d -f $(MKFILE) upx

tkdist2d_install:
	$(MAKE) -j $(NUMJOBS) -C tkdist2d -f $(MKFILE) install

tkdist2d_ee:
	$(MAKE) -j $(NUMJOBS) -C tkdist2d -f $(MKFILE) ee

tkdist2d_yac:
	$(MAKE) -j $(NUMJOBS) -C tkdist2d -f $(MKFILE) yac

tkdist2d_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkdist2d.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkdist2d.zip" tkdist2d


#
# polyraster
#
.PHONY: polyraster
polyraster:
	$(MAKE) -j $(NUMJOBS) -C polyraster -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C polyraster -f $(MKFILE) bin

polyraster_clean:
	$(MAKE) -j $(NUMJOBS) -C polyraster -f $(MKFILE) realclean

polyraster_bin:
	$(MAKE) -j $(NUMJOBS) -C polyraster -f $(MKFILE) bin

polyraster_upx:
	$(MAKE) -j $(NUMJOBS) -C polyraster -f $(MKFILE) upx

polyraster_install:
	$(MAKE) -j $(NUMJOBS) -C polyraster -f $(MKFILE) install

polyraster_ee:
	$(MAKE) -j $(NUMJOBS) -C polyraster -f $(MKFILE) ee

polyraster_yac:
	$(MAKE) -j $(NUMJOBS) -C polyraster -f $(MKFILE) yac

polyraster_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/polyraster.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/polyraster.zip" polyraster


#
# tkfileutils
#
.PHONY: tkfileutils
tkfileutils:
	$(MAKE) -j $(NUMJOBS) -C tkfileutils -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkfileutils -f $(MKFILE) bin

tkfileutils_clean:
	$(MAKE) -j $(NUMJOBS) -C tkfileutils -f $(MKFILE) realclean

tkfileutils_bin:
	$(MAKE) -j $(NUMJOBS) -C tkfileutils -f $(MKFILE) bin

tkfileutils_upx:
	$(MAKE) -j $(NUMJOBS) -C tkfileutils -f $(MKFILE) upx

tkfileutils_install:
	$(MAKE) -j $(NUMJOBS) -C tkfileutils -f $(MKFILE) install

tkfileutils_ee:
	$(MAKE) -j $(NUMJOBS) -C tkfileutils -f $(MKFILE) ee

tkfileutils_yac:
	$(MAKE) -j $(NUMJOBS) -C tkfileutils -f $(MKFILE) yac

tkfileutils_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkfileutils.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkfileutils.zip" tkfileutils


#
# tkvst2
#
.PHONY: tkvst2
tkvst2:
	$(MAKE) -j $(NUMJOBS) -C tkvst2 -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkvst2 -f $(MKFILE) bin

tkvst2_clean:
	$(MAKE) -j $(NUMJOBS) -C tkvst2 -f $(MKFILE) realclean

tkvst2_bin:
	$(MAKE) -j $(NUMJOBS) -C tkvst2 -f $(MKFILE) bin

tkvst2_upx:
	$(MAKE) -j $(NUMJOBS) -C tkvst2 -f $(MKFILE) upx

tkvst2_install:
	$(MAKE) -j $(NUMJOBS) -C tkvst2 -f $(MKFILE) install

tkvst2_ee:
	$(MAKE) -j $(NUMJOBS) -C tkvst2 -f $(MKFILE) ee

tkvst2_yac:
	$(MAKE) -j $(NUMJOBS) -C tkvst2 -f $(MKFILE) yac

tkvst2_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkvst2.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkvst2.zip" tkvst2


#
# tkvst2_stub
#
.PHONY: tkvst2_stub
tkvst2_stub:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_stub -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkvst2_stub -f $(MKFILE) bin

tkvst2_stub_clean:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_stub -f $(MKFILE) realclean

tkvst2_stub_bin:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_stub -f $(MKFILE) bin

tkvst2_stub_upx:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_stub -f $(MKFILE) upx

tkvst2_stub_install:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_stub -f $(MKFILE) install

tkvst2_stub_ee:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_stub -f $(MKFILE) ee

tkvst2_stub_yac:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_stub -f $(MKFILE) yac

tkvst2_stub_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkvst2_stub.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkvst2_stub.zip" tkvst2_stub


#
# tkvst2_nogui
#
.PHONY: tkvst2_nogui
tkvst2_nogui:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_nogui -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkvst2_nogui -f $(MKFILE) bin

tkvst2_nogui_clean:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_nogui -f $(MKFILE) realclean

tkvst2_nogui_bin:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_nogui -f $(MKFILE) bin

tkvst2_nogui_upx:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_nogui -f $(MKFILE) upx

tkvst2_nogui_install:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_nogui -f $(MKFILE) install

tkvst2_nogui_ee:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_nogui -f $(MKFILE) ee

tkvst2_nogui_yac:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_nogui -f $(MKFILE) yac

tkvst2_nogui_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkvst2_nogui.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkvst2_nogui.zip" tkvst2_nogui


#
# tkvst2_macos
#
.PHONY: tkvst2_macos
tkvst2_macos:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_macos -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkvst2_macos -f $(MKFILE) bin

tkvst2_macos_clean:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_macos -f $(MKFILE) realclean

tkvst2_macos_bin:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_macos -f $(MKFILE) bin

tkvst2_macos_upx:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_macos -f $(MKFILE) upx

tkvst2_macos_install:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_macos -f $(MKFILE) install

tkvst2_macos_ee:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_macos -f $(MKFILE) ee

tkvst2_macos_yac:
	$(MAKE) -j $(NUMJOBS) -C tkvst2_macos -f $(MKFILE) yac

tkvst2_macos_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkvst2_macos.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkvst2_macos.zip" tkvst2_macos


#
# tkclap
#
.PHONY: tkclap
tkclap:
	$(MAKE) -j $(NUMJOBS) -C tkclap -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkclap -f $(MKFILE) bin

tkclap_clean:
	$(MAKE) -j $(NUMJOBS) -C tkclap -f $(MKFILE) realclean

tkclap_bin:
	$(MAKE) -j $(NUMJOBS) -C tkclap -f $(MKFILE) bin

tkclap_upx:
	$(MAKE) -j $(NUMJOBS) -C tkclap -f $(MKFILE) upx

tkclap_install:
	$(MAKE) -j $(NUMJOBS) -C tkclap -f $(MKFILE) install

tkclap_ee:
	$(MAKE) -j $(NUMJOBS) -C tkclap -f $(MKFILE) ee

tkclap_yac:
	$(MAKE) -j $(NUMJOBS) -C tkclap -f $(MKFILE) yac

tkclap_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkclap.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkclap.zip" tkclap


#
# tkradiastools
#
.PHONY: tkradiastools
tkradiastools:
	$(MAKE) -j $(NUMJOBS) -C tkradiastools -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkradiastools -f $(MKFILE) bin

tkradiastools_clean:
	$(MAKE) -j $(NUMJOBS) -C tkradiastools -f $(MKFILE) realclean

tkradiastools_bin:
	$(MAKE) -j $(NUMJOBS) -C tkradiastools -f $(MKFILE) bin

tkradiastools_upx:
	$(MAKE) -j $(NUMJOBS) -C tkradiastools -f $(MKFILE) upx

tkradiastools_install:
	$(MAKE) -j $(NUMJOBS) -C tkradiastools -f $(MKFILE) install

tkradiastools_ee:
	$(MAKE) -j $(NUMJOBS) -C tkradiastools -f $(MKFILE) ee

tkradiastools_yac:
	$(MAKE) -j $(NUMJOBS) -C tkradiastools -f $(MKFILE) yac

tkradiastools_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkradiastools.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkradiastools.zip" tkradiastools


#
# tkcustomsynth (st2)
#
.PHONY: tkcustomsynth
tkcustomsynth:
	$(MAKE) -j $(NUMJOBS) -C tkcustomsynth -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkcustomsynth -f $(MKFILE) bin

tkcustomsynth_clean:
	$(MAKE) -j $(NUMJOBS) -C tkcustomsynth -f $(MKFILE) realclean

tkcustomsynth_bin:
	$(MAKE) -j $(NUMJOBS) -C tkcustomsynth -f $(MKFILE) bin

tkcustomsynth_upx:
	$(MAKE) -j $(NUMJOBS) -C tkcustomsynth -f $(MKFILE) upx

tkcustomsynth_install:
	$(MAKE) -j $(NUMJOBS) -C tkcustomsynth -f $(MKFILE) install

tkcustomsynth_ee:
	$(MAKE) -j $(NUMJOBS) -C tkcustomsynth -f $(MKFILE) ee

tkcustomsynth_yac:
	$(MAKE) -j $(NUMJOBS) -C tkcustomsynth -f $(MKFILE) yac

tkcustomsynth_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkcustomsynth.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkcustomsynth.zip" tkcustomsynth



#
# tkmacrosynth (st2)
#
.PHONY: tkmacrosynth
tkmacrosynth:
	$(MAKE) -j $(NUMJOBS) -C tkmacrosynth -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkmacrosynth -f $(MKFILE) bin

tkmacrosynth_clean:
	$(MAKE) -j $(NUMJOBS) -C tkmacrosynth -f $(MKFILE) realclean

tkmacrosynth_bin:
	$(MAKE) -j $(NUMJOBS) -C tkmacrosynth -f $(MKFILE) bin

tkmacrosynth_upx:
	$(MAKE) -j $(NUMJOBS) -C tkmacrosynth -f $(MKFILE) upx

tkmacrosynth_install:
	$(MAKE) -j $(NUMJOBS) -C tkmacrosynth -f $(MKFILE) install

tkmacrosynth_ee:
	$(MAKE) -j $(NUMJOBS) -C tkmacrosynth -f $(MKFILE) ee

tkmacrosynth_yac:
	$(MAKE) -j $(NUMJOBS) -C tkmacrosynth -f $(MKFILE) yac

tkmacrosynth_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkmacrosynth.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkmacrosynth.zip" tkmacrosynth


#
# tksynthgenproxy (st2)
#
.PHONY: tksynthgenproxy
tksynthgenproxy:
	$(MAKE) -j $(NUMJOBS) -C tksynthgenproxy -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tksynthgenproxy -f $(MKFILE) bin

tksynthgenproxy_clean:
	$(MAKE) -j $(NUMJOBS) -C tksynthgenproxy -f $(MKFILE) realclean

tksynthgenproxy_bin:
	$(MAKE) -j $(NUMJOBS) -C tksynthgenproxy -f $(MKFILE) bin

tksynthgenproxy_upx:
	$(MAKE) -j $(NUMJOBS) -C tksynthgenproxy -f $(MKFILE) upx

tksynthgenproxy_install:
	$(MAKE) -j $(NUMJOBS) -C tksynthgenproxy -f $(MKFILE) install

tksynthgenproxy_ee:
	$(MAKE) -j $(NUMJOBS) -C tksynthgenproxy -f $(MKFILE) ee

tksynthgenproxy_yac:
	$(MAKE) -j $(NUMJOBS) -C tksynthgenproxy -f $(MKFILE) yac

tksynthgenproxy_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tksynthgenproxy.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tksynthgenproxy.zip" tksynthgenproxy


#
# tkmidipipe
#
.PHONY: tkmidipipe
tkmidipipe:
	$(MAKE) -j $(NUMJOBS) -C tkmidipipe -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkmidipipe -f $(MKFILE) bin

tkmidipipe_clean:
	$(MAKE) -j $(NUMJOBS) -C tkmidipipe -f $(MKFILE) realclean

tkmidipipe_bin:
	$(MAKE) -j $(NUMJOBS) -C tkmidipipe -f $(MKFILE) bin

tkmidipipe_upx:
	$(MAKE) -j $(NUMJOBS) -C tkmidipipe -f $(MKFILE) upx

tkmidipipe_install:
	$(MAKE) -j $(NUMJOBS) -C tkmidipipe -f $(MKFILE) install

tkmidipipe_ee:
	$(MAKE) -j $(NUMJOBS) -C tkmidipipe -f $(MKFILE) ee

tkmidipipe_yac:
	$(MAKE) -j $(NUMJOBS) -C tkmidipipe -f $(MKFILE) yac

tkmidipipe_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkmidipipe.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkmidipipe.zip" tkmidipipe


#
# tksamplechain
#
.PHONY: tksamplechain
tksamplechain:
	$(MAKE) -j $(NUMJOBS) -C tksamplechain -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tksamplechain -f $(MKFILE) bin

tksamplechain_clean:
	$(MAKE) -j $(NUMJOBS) -C tksamplechain -f $(MKFILE) realclean

tksamplechain_bin:
	$(MAKE) -j $(NUMJOBS) -C tksamplechain -f $(MKFILE) bin

tksamplechain_upx:
	$(MAKE) -j $(NUMJOBS) -C tksamplechain -f $(MKFILE) upx

tksamplechain_install:
	$(MAKE) -j $(NUMJOBS) -C tksamplechain -f $(MKFILE) install

tksamplechain_ee:
	$(MAKE) -j $(NUMJOBS) -C tksamplechain -f $(MKFILE) ee

tksamplechain_yac:
	$(MAKE) -j $(NUMJOBS) -C tksamplechain -f $(MKFILE) yac

tksamplechain_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tksamplechain.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tksamplechain.zip" tksamplechain


#
# tkbluetooth
#
.PHONY: tkbluetooth
tkbluetooth:
	$(MAKE) -j $(NUMJOBS) -C tkbluetooth -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkbluetooth -f $(MKFILE) bin

tkbluetooth_clean:
	$(MAKE) -j $(NUMJOBS) -C tkbluetooth -f $(MKFILE) realclean

tkbluetooth_bin:
	$(MAKE) -j $(NUMJOBS) -C tkbluetooth -f $(MKFILE) bin

tkbluetooth_upx:
	$(MAKE) -j $(NUMJOBS) -C tkbluetooth -f $(MKFILE) upx

tkbluetooth_install:
	$(MAKE) -j $(NUMJOBS) -C tkbluetooth -f $(MKFILE) install

tkbluetooth_ee:
	$(MAKE) -j $(NUMJOBS) -C tkbluetooth -f $(MKFILE) ee

tkbluetooth_yac:
	$(MAKE) -j $(NUMJOBS) -C tkbluetooth -f $(MKFILE) yac

tkbluetooth_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkbluetooth.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkbluetooth.zip" tkbluetooth


#
# tktriangulate
#
.PHONY: tktriangulate
tktriangulate:
	$(MAKE) -j $(NUMJOBS) -C tktriangulate -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tktriangulate -f $(MKFILE) bin

tktriangulate_clean:
	$(MAKE) -j $(NUMJOBS) -C tktriangulate -f $(MKFILE) realclean

tktriangulate_bin:
	$(MAKE) -j $(NUMJOBS) -C tktriangulate -f $(MKFILE) bin

tktriangulate_upx:
	$(MAKE) -j $(NUMJOBS) -C tktriangulate -f $(MKFILE) upx

tktriangulate_install:
	$(MAKE) -j $(NUMJOBS) -C tktriangulate -f $(MKFILE) install

tktriangulate_ee:
	$(MAKE) -j $(NUMJOBS) -C tktriangulate -f $(MKFILE) ee

tktriangulate_yac:
	$(MAKE) -j $(NUMJOBS) -C tktriangulate -f $(MKFILE) yac

tktriangulate_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tktriangulate.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tktriangulate.zip" tktriangulate


#
# tkzip
#
.PHONY: tkzip
tkzip:
	$(MAKE) -j $(NUMJOBS) -C tkzip -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkzip -f $(MKFILE) bin

tkzip_clean:
	$(MAKE) -j $(NUMJOBS) -C tkzip -f $(MKFILE) realclean

tkzip_bin:
	$(MAKE) -j $(NUMJOBS) -C tkzip -f $(MKFILE) bin

tkzip_upx:
	$(MAKE) -j $(NUMJOBS) -C tkzip -f $(MKFILE) upx

tkzip_install:
	$(MAKE) -j $(NUMJOBS) -C tkzip -f $(MKFILE) install

tkzip_ee:
	$(MAKE) -j $(NUMJOBS) -C tkzip -f $(MKFILE) ee

tkzip_yac:
	$(MAKE) -j $(NUMJOBS) -C tkzip -f $(MKFILE) yac

tkzip_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkzip.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkzip.zip" tkzip


#
# tksqlite
#
.PHONY: tksqlite
tksqlite:
	$(MAKE) -j $(NUMJOBS) -C tksqlite -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tksqlite -f $(MKFILE) bin

tksqlite_clean:
	$(MAKE) -j $(NUMJOBS) -C tksqlite -f $(MKFILE) realclean

tksqlite_bin:
	$(MAKE) -j $(NUMJOBS) -C tksqlite -f $(MKFILE) bin

tksqlite_upx:
	$(MAKE) -j $(NUMJOBS) -C tksqlite -f $(MKFILE) upx

tksqlite_install:
	$(MAKE) -j $(NUMJOBS) -C tksqlite -f $(MKFILE) install

tksqlite_ee:
	$(MAKE) -j $(NUMJOBS) -C tksqlite -f $(MKFILE) ee

tksqlite_yac:
	$(MAKE) -j $(NUMJOBS) -C tksqlite -f $(MKFILE) yac

tksqlite_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tksqlite.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tksqlite.zip" tksqlite


#
# tkspeexdsp
#
.PHONY: tkspeexdsp
tkspeexdsp:
	$(MAKE) -j $(NUMJOBS) -C tkspeexdsp -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C tkspeexdsp -f $(MKFILE) bin

tkspeexdsp_clean:
	$(MAKE) -j $(NUMJOBS) -C tkspeexdsp -f $(MKFILE) realclean

tkspeexdsp_bin:
	$(MAKE) -j $(NUMJOBS) -C tkspeexdsp -f $(MKFILE) bin

tkspeexdsp_upx:
	$(MAKE) -j $(NUMJOBS) -C tkspeexdsp -f $(MKFILE) upx

tkspeexdsp_install:
	$(MAKE) -j $(NUMJOBS) -C tkspeexdsp -f $(MKFILE) install

tkspeexdsp_ee:
	$(MAKE) -j $(NUMJOBS) -C tkspeexdsp -f $(MKFILE) ee

tkspeexdsp_yac:
	$(MAKE) -j $(NUMJOBS) -C tkspeexdsp -f $(MKFILE) yac

tkspeexdsp_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/tkspeexdsp.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/tkspeexdsp.zip" tkspeexdsp


#
# tkminnie
#
.PHONY: tkminnie
tkminnie:
	$(MAKE) -j $(NUMJOBS) -C minnie/tkminnie -f $(MKFILE) realclean ; $(MAKE) -j $(NUMJOBS) -C minnie/tkminnie -f $(MKFILE) bin

tkminnie_clean:
	$(MAKE) -j $(NUMJOBS) -C minnie/tkminnie -f $(MKFILE) realclean

tkminnie_bin:
	$(MAKE) -j $(NUMJOBS) -C minnie/tkminnie -f $(MKFILE) bin

tkminnie_upx:
	$(MAKE) -j $(NUMJOBS) -C minnie/tkminnie -f $(MKFILE) upx

tkminnie_install:
	$(MAKE) -j $(NUMJOBS) -C minnie/tkminnie -f $(MKFILE) install
	$(MAKE) -C minnie/tools/mib install

tkminnie_ee:
	$(MAKE) -j $(NUMJOBS) -C minnie/tkminnie -f $(MKFILE) ee

tkminnie_yac:
	$(MAKE) -j $(NUMJOBS) -C minnie/tkminnie -f $(MKFILE) yac

tkminnie_zip:
	$(RM) "$(TKS_ZIP_PREFIX)/minnie.zip" ; $(ZIP) -r -9 "$(TKS_ZIP_PREFIX)/minnie.zip" minnie


# ------------------------------------------------------------------------------

.PHONY: tsl_install
tsl_install:
	$(MAKE) -j1 -f ${MKFILE} ${ALL_TSL_TARGETS}

.PHONY: tkx_install
tkx_install:
	$(MAKE) -j1 -f ${MKFILE} ${ALL_TKX_TARGETS}

.PHONY: all_install_sync
all_install_sync: tks_install plugins_install tsl_install tkx_install
	@echo "tks + plugins + tsl + tkx install finished at `date +%H:%M`."

.PHONY: all_install
all_install:
	$(MAKE) -j1 -f ${MKFILE} all_install_sync

.PHONY: all_zip
all_zip: tks_zip tks_build_zip yac_zip plugins_zip all_tsl_zip all_app_zip all_examples_zip $(EXTRA_ZIP_TARGETS)
	@echo "all_zip finished at `date +%H:%M`."
