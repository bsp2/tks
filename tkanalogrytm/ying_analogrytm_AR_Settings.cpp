// ---- ying_analogrytm_AR_Settings.cpp: auto generated by YInG - the YAC interface generator (Fri, 8/Dec/2023 09:43:41)

#ifndef YAC_NO_HOST
sSI   YAC_CALL AR_Settings__getRequiredSizeSyx(void *              );
sSI   YAC_CALL AR_Settings__getRequiredSizeRaw(void *              );
sSI   YAC_CALL AR_Settings__getCurrentDataIdx(void *               );
void  YAC_CALL AR_Settings__saveSyxToStream(void *, yacmemptr      );
void  YAC_CALL AR_Settings__saveRawToStream(void *, yacmemptr      );
sSI   YAC_CALL AR_Settings__loadSyxFromStream(void *, yacmemptr    );
sSI   YAC_CALL AR_Settings__loadRawFromStream(void *, yacmemptr    );
sSI   YAC_CALL AR_Settings__addSettingsRequest(void *, yacmemptr   );
sSI   YAC_CALL AR_Settings__syxToRaw(void *, yacmemptr             );
sSI   YAC_CALL AR_Settings__rawToSyx(void *, yacmemptr             );
sSI   YAC_CALL AR_Settings__sendSettings(void *, yacmemptr         );
sSI   YAC_CALL AR_Settings__getRawBuffer(void *, yacmemptr         );
sSI   YAC_CALL AR_Settings__getSyxBuffer(void *, yacmemptr         );
void  YAC_CALL AR_Settings__setEnableFixedVelocity(void *, yacmemptr);
sSI   YAC_CALL AR_Settings__getEnableFixedVelocity(void *          );
#endif // YAC_NO_HOST

// ------------------ YAC class "AR_Settings" reflection map (implementation) ------------------
sUI          YAC_VCALL AR_Settings::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL AR_Settings::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL AR_Settings::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL AR_Settings::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL AR_Settings::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL AR_Settings::yacMethodGetNum                  (void) {return 16;}
const char **YAC_VCALL AR_Settings::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "getRequiredSizeSyx", "getRequiredSizeRaw", "getCurrentDataIdx", "saveSyxToStream", "saveRawToStream", "loadSyxFromStream", "loadRawFromStream", "addSettingsRequest", "syxToRaw", "rawToSyx", "sendSettings", "getRawBuffer", "getSyxBuffer", "setEnableFixedVelocity", "getEnableFixedVelocity"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL AR_Settings::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL AR_Settings::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={3,};static const sUI rt5[]={3,};static const sUI rt6[]={3,};static const sUI rt7[]={3,};static const sUI rt8[]={3, 1,};static const sUI rt9[]={3,};static const sUI rt10[]={3, 1,};static const sUI rt11[]={3, 1,};static const sUI rt12[]={3,};static const sUI rt13[]={3,};static const sUI rt14[]={1,};static const sUI rt15[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL AR_Settings::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={"Buffer", (const char*)0,};static const char *rs9[]={"Buffer",};static const char *rs10[]={"Buffer", (const char*)0,};static const char *rs11[]={"Buffer", (const char*)0,};static const char *rs12[]={"Buffer",};static const char *rs13[]={"Buffer",};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL AR_Settings::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL AR_Settings::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL AR_Settings::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)AR_Settings__getRequiredSizeSyx, (void*)AR_Settings__getRequiredSizeRaw, (void*)AR_Settings__getCurrentDataIdx, (void*)AR_Settings__saveSyxToStream, (void*)AR_Settings__saveRawToStream, (void*)AR_Settings__loadSyxFromStream, (void*)AR_Settings__loadRawFromStream, (void*)AR_Settings__addSettingsRequest, (void*)AR_Settings__syxToRaw, (void*)AR_Settings__rawToSyx, (void*)AR_Settings__sendSettings, (void*)AR_Settings__getRawBuffer, (void*)AR_Settings__getSyxBuffer, (void*)AR_Settings__setEnableFixedVelocity, (void*)AR_Settings__getEnableFixedVelocity}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL AR_Settings::yacConstantGetNum                (void) {return 2;}
const char **YAC_VCALL AR_Settings::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"AR_SETTINGS_SYX_SZ", "AR_SETTINGS_SZ"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL AR_Settings::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL AR_Settings::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[2]; m.ui=r; m.si[0]=(sSI)AR_SETTINGS_SYX_SZ;m.si[1]=(sSI)AR_SETTINGS_SZ;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(AR_Settings, "AR_Settings");

#ifndef YAC_NO_HOST
sSI   YAC_CALL AR_Settings__getRequiredSizeSyx(void *_o                      ) {return (sSI)((AR_Settings*)_o)->getRequiredSizeSyx();}
sSI   YAC_CALL AR_Settings__getRequiredSizeRaw(void *_o                      ) {return (sSI)((AR_Settings*)_o)->getRequiredSizeRaw();}
sSI   YAC_CALL AR_Settings__getCurrentDataIdx(void *_o                       ) {return (sSI)((AR_Settings*)_o)->getCurrentDataIdx();}
void  YAC_CALL AR_Settings__saveSyxToStream(void *_o, yacmemptr _args        ) {((AR_Settings*)_o)->saveSyxToStream(_args.mem[0].o);}
void  YAC_CALL AR_Settings__saveRawToStream(void *_o, yacmemptr _args        ) {((AR_Settings*)_o)->saveRawToStream(_args.mem[0].o);}
sSI   YAC_CALL AR_Settings__loadSyxFromStream(void *_o, yacmemptr _args      ) {return (sSI)((AR_Settings*)_o)->loadSyxFromStream(_args.mem[0].o);}
sSI   YAC_CALL AR_Settings__loadRawFromStream(void *_o, yacmemptr _args      ) {return (sSI)((AR_Settings*)_o)->loadRawFromStream(_args.mem[0].o);}
sSI   YAC_CALL AR_Settings__addSettingsRequest(void *_o, yacmemptr _args     ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_BUFFER)){ return (sSI)((AR_Settings*)_o)->addSettingsRequest((YAC_Buffer*)_args.mem[0].o, _args.mem[1].si);}return 0;}
sSI   YAC_CALL AR_Settings__syxToRaw(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_BUFFER)){ return (sSI)((AR_Settings*)_o)->syxToRaw((YAC_Buffer*)_args.mem[0].o);}return 0;}
sSI   YAC_CALL AR_Settings__rawToSyx(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_BUFFER)){ return (sSI)((AR_Settings*)_o)->rawToSyx((YAC_Buffer*)_args.mem[0].o, _args.mem[1].si);}return 0;}
sSI   YAC_CALL AR_Settings__sendSettings(void *_o, yacmemptr _args           ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_BUFFER)){ return (sSI)((AR_Settings*)_o)->sendSettings((YAC_Buffer*)_args.mem[0].o, _args.mem[1].si);}return 0;}
sSI   YAC_CALL AR_Settings__getRawBuffer(void *_o, yacmemptr _args           ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_BUFFER)){ return (sSI)((AR_Settings*)_o)->getRawBuffer((YAC_Buffer*)_args.mem[0].o);}return 0;}
sSI   YAC_CALL AR_Settings__getSyxBuffer(void *_o, yacmemptr _args           ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_BUFFER)){ return (sSI)((AR_Settings*)_o)->getSyxBuffer((YAC_Buffer*)_args.mem[0].o);}return 0;}
void  YAC_CALL AR_Settings__setEnableFixedVelocity(void *_o, yacmemptr _args ) {((AR_Settings*)_o)->setEnableFixedVelocity(_args.mem[0].si);}
sSI   YAC_CALL AR_Settings__getEnableFixedVelocity(void *_o                  ) {return (sSI)((AR_Settings*)_o)->getEnableFixedVelocity();}
#endif // YAC_NO_HOST
