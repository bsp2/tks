// ---- ying_Texture_Texture.cpp: auto generated by YInG - the YAC interface generator (Wed, 1/Oct/2025 17:31:51)

#ifndef YAC_NO_HOST
void  YAC_CALL Texture___setFlags   (void *, yacmemptr             );
sSI   YAC_CALL Texture___getFlags   (void *                        );
sSI   YAC_CALL Texture___loadImage  (void *, yacmemptr             );
sSI   YAC_CALL Texture___loadLocalImage(void *, yacmemptr          );
sSI   YAC_CALL Texture___loadImageStream(void *, yacmemptr         );
sSI   YAC_CALL Texture___saveImage  (void *, yacmemptr             );
sSI   YAC_CALL Texture___saveImageStream(void *, yacmemptr         );
void  YAC_CALL Texture___upload     (void *                        );
void  YAC_CALL Texture___setScreen  (void *, yacmemptr             );
sSI   YAC_CALL Texture___alloc      (void *, yacmemptr             );
void  YAC_CALL Texture___scaleFrom  (void *, yacmemptr             );
void  YAC_CALL Texture___bind       (void *                        );
void  YAC_CALL Texture___unbind     (void *                        );
void  YAC_CALL Texture___enable     (void *                        );
void  YAC_CALL Texture___disable    (void *                        );
void  YAC_CALL Texture___free       (void *                        );
void  YAC_CALL Texture___freeImage  (void *                        );
void  YAC_CALL Texture___setScreenArea(void *, yacmemptr           );
sF32  YAC_CALL Texture___setPriority(void *, yacmemptr             );
void  YAC_CALL Texture___setEnvColor(void *, yacmemptr             );
void  YAC_CALL Texture___copyRegion (void *, yacmemptr             );
void  YAC_CALL Texture___clear      (void *, yacmemptr             );
void  YAC_CALL Texture___clearAlpha (void *, yacmemptr             );
void  YAC_CALL Texture___unload     (void *                        );
sSI   YAC_CALL Texture___getSx      (void *                        );
sSI   YAC_CALL Texture___getSy      (void *                        );
sSI   YAC_CALL Texture___getZ       (void *                        );
void  YAC_CALL Texture___setSz      (void *, yacmemptr             );
sSI   YAC_CALL Texture___getSz      (void *                        );
void  YAC_CALL Texture___drawPixels2i(void *, yacmemptr            );
void  YAC_CALL Texture___drawPixels2f(void *, yacmemptr            );
void  YAC_CALL Texture___drawPixels3f(void *, yacmemptr            );
void  YAC_CALL Texture___swapScreen (void *, yacmemptr             );
void  YAC_CALL Texture___setFgcolor (void *, yacmemptr             );
sSI   YAC_CALL Texture___getFgcolor (void *                        );
sSI   YAC_CALL Texture___getId      (void *                        );
void  YAC_CALL Texture___setId      (void *, yacmemptr             );
void  YAC_CALL Texture___lazyGenId  (void *                        );
void  YAC_CALL Texture___applyColorMap(void *, yacmemptr           );
void  YAC_CALL Texture___colorKeyToAlpha(void *, yacmemptr         );
sSI   YAC_CALL Texture___grayscale  (void *                        );
void  YAC_CALL Texture___interleaveAlpha(void *, yacmemptr         );
void  YAC_CALL Texture___adjustGamma(void *, yacmemptr             );
void  YAC_CALL Texture___adjustBrightness(void *, yacmemptr        );
void  YAC_CALL Texture___blend      (void *, yacmemptr             );
sF32  YAC_CALL Texture___countPixels(void *, yacmemptr             );
void  YAC_CALL Texture___multiply   (void *, yacmemptr             );
sSI   YAC_CALL Texture___getXYRaw   (void *, yacmemptr             );
void  YAC_CALL Texture___setXYRaw   (void *, yacmemptr             );
void  YAC_CALL Texture___setXY32    (void *, yacmemptr             );
sSI   YAC_CALL Texture___getXY32    (void *, yacmemptr             );
void  YAC_CALL Texture___getUVVec4  (void *, yacmemptr             );
void  YAC_CALL Texture___getUVFilterVec4(void *, yacmemptr         );
void  YAC_CALL Texture___getUVRepeatVec4(void *, yacmemptr         );
void  YAC_CALL Texture___getUVFilterRepeatVec4(void *, yacmemptr   );
void  YAC_CALL Texture___drawTriAA  (void *, yacmemptr             );
void  YAC_CALL Texture___drawTriAA_fx(void *, yacmemptr            );
void  YAC_CALL Texture__applyClearColorAfterDrawTriAA(void *, yacmemptr);
void  YAC_CALL Texture__applyClearColorAfterDrawTriAA4444(void *, yacmemptr);
void  YAC_CALL Texture___drawTri_fx (void *, yacmemptr             );
void  YAC_CALL Texture___drawTriTex_fx(void *, yacmemptr           );
void  YAC_CALL Texture___drawPolygon(void *, yacmemptr             );
void  YAC_CALL Texture___drawLine   (void *, yacmemptr             );
void  YAC_CALL Texture___drawFilledBox(void *, yacmemptr           );
void  YAC_CALL Texture___simpleBlur (void *, yacmemptr             );
void  YAC_CALL Texture___simpleBlurX(void *, yacmemptr             );
void  YAC_CALL Texture___simpleBlurY(void *, yacmemptr             );
void  YAC_CALL Texture___scroll     (void *, yacmemptr             );
void  YAC_CALL Texture___expand2n   (void *                        );
sSI   YAC_CALL Texture___alloc2n    (void *, yacmemptr             );
void  YAC_CALL Texture___createMask (void *, yacmemptr             );
sSI   YAC_CALL Texture___getStride  (void *                        );
void  YAC_CALL Texture___update     (void *                        );
void  YAC_CALL Texture___updateRegion(void *, yacmemptr            );
void  YAC_CALL Texture___renderFixedText(void *, yacmemptr         );
void  YAC_CALL Texture___setMipMapLevel(void *, yacmemptr          );
sSI   YAC_CALL Texture___getMipMapLevel(void *                     );
void  YAC_CALL Texture___setTarget  (void *, yacmemptr             );
sSI   YAC_CALL Texture___getTarget  (void *                        );
void  YAC_CALL Texture___flipY      (void *                        );
void  YAC_CALL Texture___invert     (void *                        );
void  YAC_CALL Texture___visitBuffer(void *, yacmemptr             );
void  YAC_CALL Texture__calcAlphaSDF(void *, yacmemptr             );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Texture" reflection map (implementation) ------------------
sUI          YAC_VCALL _Texture::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Texture::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Texture::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Texture::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Texture::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Texture::yacMethodGetNum                  (void) {return 84;}
const char **YAC_VCALL _Texture::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "setFlags", "getFlags", "loadImage", "loadLocalImage", "loadImageStream", "saveImage", "saveImageStream", "upload", "setScreen", "alloc", "scaleFrom", "bind", "unbind", "enable", "disable", "free", "freeImage", "setScreenArea", "setPriority", "setEnvColor", "copyRegion", "clear", "clearAlpha", "unload", "getSx", "getSy", "getZ", "setSz", "getSz", "drawPixels2i", "drawPixels2f", "drawPixels3f", "swapScreen", "setFgcolor", "getFgcolor", "getId", "setId", "lazyGenId", "applyColorMap", "colorKeyToAlpha", "grayscale", "interleaveAlpha", "adjustGamma", "adjustBrightness", "blend", "countPixels", "multiply", "getXYRaw", "setXYRaw", "setXY32", "getXY32", "getUVVec4", "getUVFilterVec4", "getUVRepeatVec4", "getUVFilterRepeatVec4", "drawTriAA", "drawTriAA_fx", "applyClearColorAfterDrawTriAA", "applyClearColorAfterDrawTriAA4444", "drawTri_fx", "drawTriTex_fx", "drawPolygon", "drawLine", "drawFilledBox", "simpleBlur", "simpleBlurX", "simpleBlurY", "scroll", "expand2n", "alloc2n", "createMask", "getStride", "update", "updateRegion", "renderFixedText", "setMipMapLevel", "getMipMapLevel", "setTarget", "getTarget", "flipY", "invert", "visitBuffer", "calcAlphaSDF"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Texture::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 0, 4, 4, 4, 1, 1, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 5, 1, 1, 7, 1, 1, 0, 0, 0, 0, 1, 0, 2, 2, 3, 1, 1, 0, 0, 1, 0, 2, 1, 0, 1, 1, 1, 3, 1, 2, 2, 3, 3, 2, 3, 3, 3, 3, 7, 7, 1, 1, 5, 8, 2, 5, 5, 1, 1, 1, 2, 0, 3, 1, 0, 0, 4, 7, 1, 0, 1, 0, 0, 0, 4, 7}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Texture::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={0,};static const sUI rt3[]={3, 1, 1, 1,};static const sUI rt4[]={3, 1, 1, 1,};static const sUI rt5[]={3, 1, 1, 1,};static const sUI rt6[]={3,};static const sUI rt7[]={3,};static const sUI rt8[]={0,};static const sUI rt9[]={3,};static const sUI rt10[]={1, 1, 1,};static const sUI rt11[]={3,};static const sUI rt12[]={0,};static const sUI rt13[]={0,};static const sUI rt14[]={0,};static const sUI rt15[]={0,};static const sUI rt16[]={0,};static const sUI rt17[]={0,};static const sUI rt18[]={3, 1, 1, 1, 1,};static const sUI rt19[]={2,};static const sUI rt20[]={1,};static const sUI rt21[]={3, 1, 1, 1, 1, 1, 1,};static const sUI rt22[]={1,};static const sUI rt23[]={1,};static const sUI rt24[]={0,};static const sUI rt25[]={0,};static const sUI rt26[]={0,};static const sUI rt27[]={0,};static const sUI rt28[]={1,};static const sUI rt29[]={0,};static const sUI rt30[]={1, 1,};static const sUI rt31[]={2, 2,};static const sUI rt32[]={2, 2, 2,};static const sUI rt33[]={3,};static const sUI rt34[]={1,};static const sUI rt35[]={0,};static const sUI rt36[]={0,};static const sUI rt37[]={1,};static const sUI rt38[]={0,};static const sUI rt39[]={3, 3,};static const sUI rt40[]={1,};static const sUI rt41[]={0,};static const sUI rt42[]={3,};static const sUI rt43[]={2,};static const sUI rt44[]={2,};static const sUI rt45[]={3, 3, 1,};static const sUI rt46[]={1,};static const sUI rt47[]={3, 3,};static const sUI rt48[]={1, 1,};static const sUI rt49[]={1, 1, 1,};static const sUI rt50[]={1, 1, 1,};static const sUI rt51[]={1, 1,};static const sUI rt52[]={2, 2, 3,};static const sUI rt53[]={2, 2, 3,};static const sUI rt54[]={2, 2, 3,};static const sUI rt55[]={2, 2, 3,};static const sUI rt56[]={3, 3, 3, 1, 1, 1, 2,};static const sUI rt57[]={3, 3, 3, 1, 1, 1, 1,};static const sUI rt58[]={1,};static const sUI rt59[]={1,};static const sUI rt60[]={3, 3, 3, 1, 1,};static const sUI rt61[]={3, 3, 3, 3, 3, 3, 3, 2,};static const sUI rt62[]={3, 1,};static const sUI rt63[]={1, 1, 1, 1, 1,};static const sUI rt64[]={1, 1, 1, 1, 1,};static const sUI rt65[]={3,};static const sUI rt66[]={3,};static const sUI rt67[]={3,};static const sUI rt68[]={1, 1,};static const sUI rt69[]={0,};static const sUI rt70[]={1, 1, 1,};static const sUI rt71[]={1,};static const sUI rt72[]={0,};static const sUI rt73[]={0,};static const sUI rt74[]={1, 1, 1, 1,};static const sUI rt75[]={3, 1, 3, 1, 1, 3, 3,};static const sUI rt76[]={1,};static const sUI rt77[]={0,};static const sUI rt78[]={1,};static const sUI rt79[]={0,};static const sUI rt80[]={0,};static const sUI rt81[]={0,};static const sUI rt82[]={3, 1, 1, 1,};static const sUI rt83[]={3, 1, 1, 1, 1, 1, 2,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39, rt40, rt41, rt42, rt43, rt44, rt45, rt46, rt47, rt48, rt49, rt50, rt51, rt52, rt53, rt54, rt55, rt56, rt57, rt58, rt59, rt60, rt61, rt62, rt63, rt64, rt65, rt66, rt67, rt68, rt69, rt70, rt71, rt72, rt73, rt74, rt75, rt76, rt77, rt78, rt79, rt80, rt81, rt82, rt83}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Texture::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={"String", (const char*)0, (const char*)0, (const char*)0,};static const char *rs4[]={"String", (const char*)0, (const char*)0, (const char*)0,};static const char *rs5[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs6[]={"String",};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0, (const char*)0,};static const char *rs31[]={(const char*)0, (const char*)0,};static const char *rs32[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs33[]={(const char*)0,};static const char *rs34[]={(const char*)0,};static const char *rs35[]={(const char*)0,};static const char *rs36[]={(const char*)0,};static const char *rs37[]={(const char*)0,};static const char *rs38[]={(const char*)0,};static const char *rs39[]={(const char*)0, (const char*)0,};static const char *rs40[]={(const char*)0,};static const char *rs41[]={(const char*)0,};static const char *rs42[]={(const char*)0,};static const char *rs43[]={(const char*)0,};static const char *rs44[]={(const char*)0,};static const char *rs45[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs46[]={(const char*)0,};static const char *rs47[]={(const char*)0, (const char*)0,};static const char *rs48[]={(const char*)0, (const char*)0,};static const char *rs49[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs50[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs51[]={(const char*)0, (const char*)0,};static const char *rs52[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs53[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs54[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs55[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs56[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs57[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs58[]={(const char*)0,};static const char *rs59[]={(const char*)0,};static const char *rs60[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs61[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs62[]={(const char*)0, (const char*)0,};static const char *rs63[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs64[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs65[]={(const char*)0,};static const char *rs66[]={(const char*)0,};static const char *rs67[]={(const char*)0,};static const char *rs68[]={(const char*)0, (const char*)0,};static const char *rs69[]={(const char*)0,};static const char *rs70[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs71[]={(const char*)0,};static const char *rs72[]={(const char*)0,};static const char *rs73[]={(const char*)0,};static const char *rs74[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs75[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs76[]={(const char*)0,};static const char *rs77[]={(const char*)0,};static const char *rs78[]={(const char*)0,};static const char *rs79[]={(const char*)0,};static const char *rs80[]={(const char*)0,};static const char *rs81[]={(const char*)0,};static const char *rs82[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs83[]={"Texture", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39, rs40, rs41, rs42, rs43, rs44, rs45, rs46, rs47, rs48, rs49, rs50, rs51, rs52, rs53, rs54, rs55, rs56, rs57, rs58, rs59, rs60, rs61, rs62, rs63, rs64, rs65, rs66, rs67, rs68, rs69, rs70, rs71, rs72, rs73, rs74, rs75, rs76, rs77, rs78, rs79, rs80, rs81, rs82, rs83}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Texture::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Texture::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Texture::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Texture___setFlags, (void*)Texture___getFlags, (void*)Texture___loadImage, (void*)Texture___loadLocalImage, (void*)Texture___loadImageStream, (void*)Texture___saveImage, (void*)Texture___saveImageStream, (void*)Texture___upload, (void*)Texture___setScreen, (void*)Texture___alloc, (void*)Texture___scaleFrom, (void*)Texture___bind, (void*)Texture___unbind, (void*)Texture___enable, (void*)Texture___disable, (void*)Texture___free, (void*)Texture___freeImage, (void*)Texture___setScreenArea, (void*)Texture___setPriority, (void*)Texture___setEnvColor, (void*)Texture___copyRegion, (void*)Texture___clear, (void*)Texture___clearAlpha, (void*)Texture___unload, (void*)Texture___getSx, (void*)Texture___getSy, (void*)Texture___getZ, (void*)Texture___setSz, (void*)Texture___getSz, (void*)Texture___drawPixels2i, (void*)Texture___drawPixels2f, (void*)Texture___drawPixels3f, (void*)Texture___swapScreen, (void*)Texture___setFgcolor, (void*)Texture___getFgcolor, (void*)Texture___getId, (void*)Texture___setId, (void*)Texture___lazyGenId, (void*)Texture___applyColorMap, (void*)Texture___colorKeyToAlpha, (void*)Texture___grayscale, (void*)Texture___interleaveAlpha, (void*)Texture___adjustGamma, (void*)Texture___adjustBrightness, (void*)Texture___blend, (void*)Texture___countPixels, (void*)Texture___multiply, (void*)Texture___getXYRaw, (void*)Texture___setXYRaw, (void*)Texture___setXY32, (void*)Texture___getXY32, (void*)Texture___getUVVec4, (void*)Texture___getUVFilterVec4, (void*)Texture___getUVRepeatVec4, (void*)Texture___getUVFilterRepeatVec4, (void*)Texture___drawTriAA, (void*)Texture___drawTriAA_fx, (void*)Texture__applyClearColorAfterDrawTriAA, (void*)Texture__applyClearColorAfterDrawTriAA4444, (void*)Texture___drawTri_fx, (void*)Texture___drawTriTex_fx, (void*)Texture___drawPolygon, (void*)Texture___drawLine, (void*)Texture___drawFilledBox, (void*)Texture___simpleBlur, (void*)Texture___simpleBlurX, (void*)Texture___simpleBlurY, (void*)Texture___scroll, (void*)Texture___expand2n, (void*)Texture___alloc2n, (void*)Texture___createMask, (void*)Texture___getStride, (void*)Texture___update, (void*)Texture___updateRegion, (void*)Texture___renderFixedText, (void*)Texture___setMipMapLevel, (void*)Texture___getMipMapLevel, (void*)Texture___setTarget, (void*)Texture___getTarget, (void*)Texture___flipY, (void*)Texture___invert, (void*)Texture___visitBuffer, (void*)Texture__calcAlphaSDF}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Texture::yacConstantGetNum                (void) {return 24;}
const char **YAC_VCALL _Texture::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"TEX_16BIT", "TEX_REPEAT_S", "TEX_REPEAT_T", "TEX_DELETE", "TEX_AUTOMIPMAP", "TEX_MODULATE", "TEX_BLEND", "TEX_DECAL", "TEX_REPLACE", "TEX_MINFILTERLINEAR", "TEX_MINFILTERTRILINEAR", "TEX_MAGFILTERLINEAR", "TEX_MAGFILTERTRILINEAR", "TEX_ALPHA", "TEX_UPLOADED", "TEX_1D", "TEX_FORCEHOSTBYTEORDER", "TEX_INTENSITY", "TEX_CLAMPTOEDGE_S", "TEX_CLAMPTOEDGE_T", "TEX_REPEATMASK", "TEX_ENVMASK", "TEX_FILTERMASK", "TEX_POINTSPRITE"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Texture::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL _Texture::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[24]; m.ui=r; m.si[0]=(sSI)(1<<0);m.si[1]=(sSI)(1<<1);m.si[2]=(sSI)(1<<2);m.si[3]=(sSI)(1<<3);m.si[4]=(sSI)(1<<4);m.si[5]=(sSI)(1<<5);m.si[6]=(sSI)(1<<6);m.si[7]=(sSI)(1<<7);m.si[8]=(sSI)(1<<8);m.si[9]=(sSI)(1<<9);m.si[10]=(sSI)(1<<10);m.si[11]=(sSI)(1<<11);m.si[12]=(sSI)(1<<12);m.si[13]=(sSI)(1<<13);m.si[14]=(sSI)(1<<14);m.si[15]=(sSI)(1<<15);m.si[16]=(sSI)(1<<16);m.si[17]=(sSI)(1<<17);m.si[18]=(sSI)(1<<18);m.si[19]=(sSI)(1<<19);m.si[20]=(sSI)(TEX_REPEAT_S|TEX_REPEAT_T|TEX_CLAMPTOEDGE_S|TEX_CLAMPTOEDGE_T);m.si[21]=(sSI)(TEX_MODULATE|TEX_BLEND|TEX_DECAL|TEX_REPLACE);m.si[22]=(sSI)(TEX_MINFILTERLINEAR|TEX_MINFILTERTRILINEAR|TEX_MAGFILTERLINEAR|TEX_MAGFILTERTRILINEAR);m.si[23]=(sSI)(1<<20);; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(_Texture, "Texture");

#ifndef YAC_NO_HOST
void  YAC_CALL Texture___setFlags   (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_setFlags(_args.mem[0].si);}
sSI   YAC_CALL Texture___getFlags   (void *_o                                ) {return (sSI)((_Texture*)_o)->_getFlags();}
sSI   YAC_CALL Texture___loadImage  (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_Texture*)_o)->_loadImage((YAC_String*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}return 0;}
sSI   YAC_CALL Texture___loadLocalImage(void *_o, yacmemptr _args            ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_Texture*)_o)->_loadLocalImage((YAC_String*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}return 0;}
sSI   YAC_CALL Texture___loadImageStream(void *_o, yacmemptr _args           ) {return (sSI)((_Texture*)_o)->_loadImageStream(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
sSI   YAC_CALL Texture___saveImage  (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((_Texture*)_o)->_saveImage((YAC_String*)_args.mem[0].o);}return 0;}
sSI   YAC_CALL Texture___saveImageStream(void *_o, yacmemptr _args           ) {return (sSI)((_Texture*)_o)->_saveImageStream(_args.mem[0].o);}
void  YAC_CALL Texture___upload     (void *_o                                ) {((_Texture*)_o)->_upload();}
void  YAC_CALL Texture___setScreen  (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_setScreen(_args.mem[0].o);}
sSI   YAC_CALL Texture___alloc      (void *_o, yacmemptr _args               ) {return (sSI)((_Texture*)_o)->_alloc(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL Texture___scaleFrom  (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_scaleFrom(_args.mem[0].o);}
void  YAC_CALL Texture___bind       (void *_o                                ) {((_Texture*)_o)->_bind();}
void  YAC_CALL Texture___unbind     (void *_o                                ) {((_Texture*)_o)->_unbind();}
void  YAC_CALL Texture___enable     (void *_o                                ) {((_Texture*)_o)->_enable();}
void  YAC_CALL Texture___disable    (void *_o                                ) {((_Texture*)_o)->_disable();}
void  YAC_CALL Texture___free       (void *_o                                ) {((_Texture*)_o)->_free();}
void  YAC_CALL Texture___freeImage  (void *_o                                ) {((_Texture*)_o)->_freeImage();}
void  YAC_CALL Texture___setScreenArea(void *_o, yacmemptr _args             ) {((_Texture*)_o)->_setScreenArea(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si);}
sF32  YAC_CALL Texture___setPriority(void *_o, yacmemptr _args               ) {return (sF32)((_Texture*)_o)->_setPriority(_args.mem[0].f32);}
void  YAC_CALL Texture___setEnvColor(void *_o, yacmemptr _args               ) {((_Texture*)_o)->_setEnvColor(_args.mem[0].si);}
void  YAC_CALL Texture___copyRegion (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_copyRegion(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si, _args.mem[6].si);}
void  YAC_CALL Texture___clear      (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_clear(_args.mem[0].si);}
void  YAC_CALL Texture___clearAlpha (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_clearAlpha(_args.mem[0].si);}
void  YAC_CALL Texture___unload     (void *_o                                ) {((_Texture*)_o)->_unload();}
sSI   YAC_CALL Texture___getSx      (void *_o                                ) {return (sSI)((_Texture*)_o)->_getSx();}
sSI   YAC_CALL Texture___getSy      (void *_o                                ) {return (sSI)((_Texture*)_o)->_getSy();}
sSI   YAC_CALL Texture___getZ       (void *_o                                ) {return (sSI)((_Texture*)_o)->_getZ();}
void  YAC_CALL Texture___setSz      (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_setSz(_args.mem[0].si);}
sSI   YAC_CALL Texture___getSz      (void *_o                                ) {return (sSI)((_Texture*)_o)->_getSz();}
void  YAC_CALL Texture___drawPixels2i(void *_o, yacmemptr _args              ) {((_Texture*)_o)->_drawPixels2i(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL Texture___drawPixels2f(void *_o, yacmemptr _args              ) {((_Texture*)_o)->_drawPixels2f(_args.mem[0].f32, _args.mem[1].f32);}
void  YAC_CALL Texture___drawPixels3f(void *_o, yacmemptr _args              ) {((_Texture*)_o)->_drawPixels3f(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].f32);}
void  YAC_CALL Texture___swapScreen (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_swapScreen(_args.mem[0].o);}
void  YAC_CALL Texture___setFgcolor (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_setFgcolor(_args.mem[0].si);}
sSI   YAC_CALL Texture___getFgcolor (void *_o                                ) {return (sSI)((_Texture*)_o)->_getFgcolor();}
sSI   YAC_CALL Texture___getId      (void *_o                                ) {return (sSI)((_Texture*)_o)->_getId();}
void  YAC_CALL Texture___setId      (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_setId(_args.mem[0].si);}
void  YAC_CALL Texture___lazyGenId  (void *_o                                ) {((_Texture*)_o)->_lazyGenId();}
void  YAC_CALL Texture___applyColorMap(void *_o, yacmemptr _args             ) {((_Texture*)_o)->_applyColorMap(_args.mem[0].o, _args.mem[1].o);}
void  YAC_CALL Texture___colorKeyToAlpha(void *_o, yacmemptr _args           ) {((_Texture*)_o)->_colorKeyToAlpha(_args.mem[0].si);}
sSI   YAC_CALL Texture___grayscale  (void *_o                                ) {return (sSI)((_Texture*)_o)->_grayscale();}
void  YAC_CALL Texture___interleaveAlpha(void *_o, yacmemptr _args           ) {((_Texture*)_o)->_interleaveAlpha(_args.mem[0].o);}
void  YAC_CALL Texture___adjustGamma(void *_o, yacmemptr _args               ) {((_Texture*)_o)->_adjustGamma(_args.mem[0].f32);}
void  YAC_CALL Texture___adjustBrightness(void *_o, yacmemptr _args          ) {((_Texture*)_o)->_adjustBrightness(_args.mem[0].f32);}
void  YAC_CALL Texture___blend      (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_blend(_args.mem[0].o, _args.mem[1].o, _args.mem[2].si);}
sF32  YAC_CALL Texture___countPixels(void *_o, yacmemptr _args               ) {return (sF32)((_Texture*)_o)->_countPixels(_args.mem[0].si);}
void  YAC_CALL Texture___multiply   (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_multiply(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL Texture___getXYRaw   (void *_o, yacmemptr _args               ) {return (sSI)((_Texture*)_o)->_getXYRaw(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL Texture___setXYRaw   (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_setXYRaw(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL Texture___setXY32    (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_setXY32(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL Texture___getXY32    (void *_o, yacmemptr _args               ) {return (sSI)((_Texture*)_o)->_getXY32(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL Texture___getUVVec4  (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_getUVVec4(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].o);}
void  YAC_CALL Texture___getUVFilterVec4(void *_o, yacmemptr _args           ) {((_Texture*)_o)->_getUVFilterVec4(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].o);}
void  YAC_CALL Texture___getUVRepeatVec4(void *_o, yacmemptr _args           ) {((_Texture*)_o)->_getUVRepeatVec4(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].o);}
void  YAC_CALL Texture___getUVFilterRepeatVec4(void *_o, yacmemptr _args     ) {((_Texture*)_o)->_getUVFilterRepeatVec4(_args.mem[0].f32, _args.mem[1].f32, _args.mem[2].o);}
void  YAC_CALL Texture___drawTriAA  (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_drawTriAA(_args.mem[0].o, _args.mem[1].o, _args.mem[2].o, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si, _args.mem[6].f32);}
void  YAC_CALL Texture___drawTriAA_fx(void *_o, yacmemptr _args              ) {((_Texture*)_o)->_drawTriAA_fx(_args.mem[0].o, _args.mem[1].o, _args.mem[2].o, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si, _args.mem[6].si);}
void  YAC_CALL Texture__applyClearColorAfterDrawTriAA(void *_o, yacmemptr _args) {((_Texture*)_o)->applyClearColorAfterDrawTriAA(_args.mem[0].si);}
void  YAC_CALL Texture__applyClearColorAfterDrawTriAA4444(void *_o, yacmemptr _args) {((_Texture*)_o)->applyClearColorAfterDrawTriAA4444(_args.mem[0].si);}
void  YAC_CALL Texture___drawTri_fx (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_drawTri_fx(_args.mem[0].o, _args.mem[1].o, _args.mem[2].o, _args.mem[3].si, _args.mem[4].si);}
void  YAC_CALL Texture___drawTriTex_fx(void *_o, yacmemptr _args             ) {((_Texture*)_o)->_drawTriTex_fx(_args.mem[0].o, _args.mem[1].o, _args.mem[2].o, _args.mem[3].o, _args.mem[4].o, _args.mem[5].o, _args.mem[6].o, _args.mem[7].f32);}
void  YAC_CALL Texture___drawPolygon(void *_o, yacmemptr _args               ) {((_Texture*)_o)->_drawPolygon(_args.mem[0].o, _args.mem[1].si);}
void  YAC_CALL Texture___drawLine   (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_drawLine(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si);}
void  YAC_CALL Texture___drawFilledBox(void *_o, yacmemptr _args             ) {((_Texture*)_o)->_drawFilledBox(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si);}
void  YAC_CALL Texture___simpleBlur (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_simpleBlur(_args.mem[0].o);}
void  YAC_CALL Texture___simpleBlurX(void *_o, yacmemptr _args               ) {((_Texture*)_o)->_simpleBlurX(_args.mem[0].o);}
void  YAC_CALL Texture___simpleBlurY(void *_o, yacmemptr _args               ) {((_Texture*)_o)->_simpleBlurY(_args.mem[0].o);}
void  YAC_CALL Texture___scroll     (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_scroll(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL Texture___expand2n   (void *_o                                ) {((_Texture*)_o)->_expand2n();}
sSI   YAC_CALL Texture___alloc2n    (void *_o, yacmemptr _args               ) {return (sSI)((_Texture*)_o)->_alloc2n(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL Texture___createMask (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_createMask(_args.mem[0].si);}
sSI   YAC_CALL Texture___getStride  (void *_o                                ) {return (sSI)((_Texture*)_o)->_getStride();}
void  YAC_CALL Texture___update     (void *_o                                ) {((_Texture*)_o)->_update();}
void  YAC_CALL Texture___updateRegion(void *_o, yacmemptr _args              ) {((_Texture*)_o)->_updateRegion(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
void  YAC_CALL Texture___renderFixedText(void *_o, yacmemptr _args           ) {((_Texture*)_o)->_renderFixedText(_args.mem[0].o, _args.mem[1].si, _args.mem[2].o, _args.mem[3].si, _args.mem[4].si, _args.mem[5].o, _args.mem[6].o);}
void  YAC_CALL Texture___setMipMapLevel(void *_o, yacmemptr _args            ) {((_Texture*)_o)->_setMipMapLevel(_args.mem[0].si);}
sSI   YAC_CALL Texture___getMipMapLevel(void *_o                             ) {return (sSI)((_Texture*)_o)->_getMipMapLevel();}
void  YAC_CALL Texture___setTarget  (void *_o, yacmemptr _args               ) {((_Texture*)_o)->_setTarget(_args.mem[0].si);}
sSI   YAC_CALL Texture___getTarget  (void *_o                                ) {return (sSI)((_Texture*)_o)->_getTarget();}
void  YAC_CALL Texture___flipY      (void *_o                                ) {((_Texture*)_o)->_flipY();}
void  YAC_CALL Texture___invert     (void *_o                                ) {((_Texture*)_o)->_invert();}
void  YAC_CALL Texture___visitBuffer(void *_o, yacmemptr _args               ) {((_Texture*)_o)->_visitBuffer(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
void  YAC_CALL Texture__calcAlphaSDF(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, clid_Texture)){ ((_Texture*)_o)->calcAlphaSDF((_Texture*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].si, _args.mem[6].f32);}}
#endif // YAC_NO_HOST
