// ---- ying_OpenGL_DisplayList.cpp: auto generated by YInG - the YAC interface generator (Mon, 29/Sep/2025 18:34:46)

#ifndef YAC_NO_HOST
void  YAC_CALL DisplayList___alloc  (void *                        );
void  YAC_CALL DisplayList___free   (void *                        );
void  YAC_CALL DisplayList___begin  (void *                        );
void  YAC_CALL DisplayList___end    (void *                        );
void  YAC_CALL DisplayList___draw   (void *                        );
void  YAC_CALL DisplayList___setName(void *, yacmemptr             );
void* YAC_CALL DisplayList___getName(void *                        );
sSI   YAC_CALL DisplayList___getId  (void *                        );
#endif // YAC_NO_HOST

// ------------------ YAC class "_DisplayList" reflection map (implementation) ------------------
sUI          YAC_VCALL _DisplayList::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _DisplayList::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _DisplayList::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _DisplayList::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _DisplayList::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _DisplayList::yacMethodGetNum                  (void) {return 9;}
const char **YAC_VCALL _DisplayList::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "alloc", "free", "begin", "end", "draw", "setName", "getName", "getId"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _DisplayList::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 0, 0, 1, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _DisplayList::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={3,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _DisplayList::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={"String",};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _DisplayList::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 0, 0, 0, 0, 3, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _DisplayList::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, "String", (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _DisplayList::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)DisplayList___alloc, (void*)DisplayList___free, (void*)DisplayList___begin, (void*)DisplayList___end, (void*)DisplayList___draw, (void*)DisplayList___setName, (void*)DisplayList___getName, (void*)DisplayList___getId}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _DisplayList::yacConstantGetNum                (void) {return 575;}
const char **YAC_VCALL _DisplayList::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"GL_NONE", "GL_TRUE", "GL_FALSE", "GL_BOOL", "GL_BOOL_VEC2", "GL_BOOL_VEC3", "GL_BOOL_VEC4", "GL_BYTE", "GL_UNSIGNED_BYTE", "GL_SHORT", "GL_UNSIGNED_SHORT", "GL_UNSIGNED_SHORT_5_6_5", "GL_UNSIGNED_SHORT_5_6_5_REV", "GL_UNSIGNED_INT_8_8_8_8", "GL_UNSIGNED_INT_8_8_8_8_REV", "GL_INT", "GL_INT_VEC2", "GL_INT_VEC3", "GL_INT_VEC4", "GL_UNSIGNED_INT", "GL_FLOAT", "GL_FLOAT_VEC2", "GL_FLOAT_VEC3", "GL_FLOAT_VEC4", "GL_FLOAT_MAT2", "GL_FLOAT_MAT3", "GL_FLOAT_MAT4", "GL_2_BYTES", "GL_3_BYTES", "GL_4_BYTES", "GL_DOUBLE", "GL_FRONT_LEFT", "GL_FRONT_RIGHT", "GL_BACK_LEFT", "GL_BACK_RIGHT", "GL_LEFT", "GL_RIGHT", "GL_AUX0", "GL_AUX1", "GL_AUX2", "GL_AUX3", "GL_INDEX_ARRAY", "GL_EDGE_FLAG_ARRAY", "GL_ALPHA4", "GL_ALPHA8", "GL_ALPHA12", "GL_ALPHA16", "GL_LUMINANCE4", "GL_LUMINANCE8", "GL_LUMINANCE12", "GL_LUMINANCE16", "GL_LUMINANCE4_ALPHA4", "GL_LUMINANCE6_ALPHA2", "GL_LUMINANCE8_ALPHA8", "GL_LUMINANCE12_ALPHA4", "GL_LUMINANCE12_ALPHA12", "GL_LUMINANCE16_ALPHA16", "GL_INTENSITY4", "GL_INTENSITY8", "GL_INTENSITY12", "GL_INTENSITY16", "GL_RGB4", "GL_RGB10", "GL_RGB12", "GL_RGB16", "GL_RGBA2", "GL_RGBA4", "GL_RGBA12", "GL_RGBA16", "GL_MODELVIEW", "GL_PROJECTION", "GL_TEXTURE", "GL_FOG_HINT", "GL_LINE_SMOOTH_HINT", "GL_PERSPECTIVE_CORRECTION_HINT", "GL_POINT_SMOOTH_HINT", "GL_POLYGON_SMOOTH_HINT", "GL_FASTEST", "GL_NICEST", "GL_DONT_CARE", "GL_ALPHA_TEST", "GL_AUTO_NORMAL", "GL_BLEND", "GL_BLEND_DST_RGB", "GL_BLEND_SRC_RGB", "GL_BLEND_DST_ALPHA", "GL_BLEND_SRC_ALPHA", "GL_CULL_FACE", "GL_DEPTH_TEST", "GL_DITHER", "GL_FOG", "GL_LIGHT0", "GL_LIGHT1", "GL_LIGHT2", "GL_LIGHT3", "GL_LIGHT4", "GL_LIGHT5", "GL_LIGHT6", "GL_LIGHT7", "GL_LIGHTING", "GL_AMBIENT", "GL_DIFFUSE", "GL_EMISSION", "GL_SPECULAR", "GL_AMBIENT_AND_DIFFUSE", "GL_COLOR_MATERIAL", "GL_SINGLE_COLOR", "GL_SEPARATE_SPECULAR_COLOR", "GL_LINE_SMOOTH", "GL_LINE_STIPPLE", "GL_NORMALIZE", "GL_POINT_SMOOTH", "GL_POLYGON_OFFSET_FILL", "GL_POLYGON_OFFSET_POINT", "GL_POLYGON_SMOOTH", "GL_POLYGON_STIPPLE", "GL_SCISSOR_TEST", "GL_STENCIL_TEST", "GL_MULTISAMPLE", "GL_TEXTURE_1D", "GL_PROXY_TEXTURE_1D", "GL_TEXTURE_2D", "GL_PROXY_TEXTURE_2D", "GL_TEXTURE_2D", "GL_PROXY_TEXTURE_2D", "GL_TEXTURE_2D_ARRAY", "GL_PROXY_TEXTURE_2D_ARRAY", "GL_TEXTURE_3D", "GL_PROXY_TEXTURE_3D", "GL_TEXTURE0", "GL_TEXTURE1", "GL_TEXTURE2", "GL_TEXTURE3", "GL_TEXTURE4", "GL_TEXTURE5", "GL_TEXTURE6", "GL_TEXTURE7", "GL_TEXTURE8", "GL_TEXTURE9", "GL_TEXTURE10", "GL_TEXTURE11", "GL_TEXTURE12", "GL_TEXTURE13", "GL_TEXTURE14", "GL_TEXTURE16", "GL_ACTIVE_TEXTURE", "GL_CLIENT_ACTIVE_TEXTURE", "GL_MAX_TEXTURE_UNITS", "GL_MAX_TEXTURE_IMAGE_UNITS", "GL_MAX_TEXTURE_SIZE", "GL_MAX_TEXTURE_COORDS", "GL_MAX_ELEMENTS_VERTICES", "GL_MAX_ELEMENTS_INDICES", "GL_TEXTURE_MAG_FILTER", "GL_TEXTURE_MIN_FILTER", "GL_TEXTURE_WRAP_S", "GL_TEXTURE_WRAP_T", "GL_TEXTURE_WRAP_R", "GL_TEXTURE_MIN_LOD", "GL_TEXTURE_MAX_LOD", "GL_TEXTURE_BASE_LEVEL", "GL_TEXTURE_MAX_LEVEL", "GL_TEXTURE_PRIORITY", "GL_TEXTURE_RESIDENT", "GL_GENERATE_MIPMAP", "GL_GENERATE_MIPMAP_HINT", "GL_DEPTH_COMPONENT16", "GL_DEPTH_COMPONENT24", "GL_DEPTH_COMPONENT32", "GL_DEPTH24_STENCIL8", "GL_DEPTH32F_STENCIL8", "GL_MIRRORED_REPEAT", "GL_FRAGMENT_DEPTH", "GL_CLEAR", "GL_SET", "GL_COPY", "GL_COPY_INVERTED", "GL_NOOP", "GL_INVERT", "GL_AND", "GL_NAND", "GL_OR", "GL_NOR", "GL_XOR", "GL_EQUIV", "GL_AND_REVERSE", "GL_AND_INVERTED", "GL_OR_REVERSE", "GL_OR_INVERTED", "GL_RENDER", "GL_FEEDBACK", "GL_SELECT", "GL_FLAT", "GL_SMOOTH", "GL_FRONT", "GL_BACK", "GL_FRONT_AND_BACK", "GL_POINT", "GL_LINE", "GL_FILL", "GL_ZERO", "GL_ONE", "GL_SRC_COLOR", "GL_ONE_MINUS_SRC_COLOR", "GL_SRC_ALPHA", "GL_ONE_MINUS_SRC_ALPHA", "GL_DST_ALPHA", "GL_ONE_MINUS_DST_ALPHA", "GL_DST_COLOR", "GL_ONE_MINUS_DST_COLOR", "GL_SRC_ALPHA_SATURATE", "GL_CONSTANT_COLOR", "GL_ONE_MINUS_CONSTANT_COLOR", "GL_CONSTANT_ALPHA", "GL_ONE_MINUS_CONSTANT_ALPHA", "GL_BLEND_COLOR", "GL_CW", "GL_CCW", "GL_KEEP", "GL_REPLACE", "GL_INCR", "GL_INCR_WRAP", "GL_DECR", "GL_DECR_WRAP", "GL_NEVER", "GL_LESS", "GL_EQUAL", "GL_LEQUAL", "GL_GREATER", "GL_NOTEQUAL", "GL_GEQUAL", "GL_ALWAYS", "GL_POLYGON_OFFSET_LINE", "GL_VERTEX_ARRAY", "GL_NORMAL_ARRAY", "GL_COLOR_ARRAY", "GL_TEXTURE_COORD_ARRAY", "GL_COLOR_LOGIC_OP", "GL_S", "GL_T", "GL_R", "GL_Q", "GL_TEXTURE_GEN_S", "GL_TEXTURE_GEN_T", "GL_TEXTURE_GEN_R", "GL_TEXTURE_GEN_Q", "GL_TEXTURE_ENV", "GL_TEXTURE_FILTER_CONTROL", "GL_POINT_SPRITE", "GL_COORD_REPLACE", "GL_TEXTURE_ENV_MODE", "GL_TEXTURE_ENV_COLOR", "GL_TEXTURE_LOD_BIAS", "GL_TEXTURE_COMPARE_MODE", "GL_TEXTURE_COMPARE_FUNC", "GL_TEXTURE_COMPARE_R_TO_TEXTURE", "GL_COMBINE", "GL_COMBINE_RGB", "GL_COMBINE_ALPHA", "GL_SRC0_RGB", "GL_SRC1_RGB", "GL_SRC2_RGB", "GL_SRC0_ALPHA", "GL_SRC1_ALPHA", "GL_SRC2_ALPHA", "GL_OPERAND0_RGB", "GL_OPERAND1_RGB", "GL_OPERAND2_RGB", "GL_OPERAND0_ALPHA", "GL_OPERAND1_ALPHA", "GL_OPERAND2_ALPHA", "GL_RGB_SCALE", "GL_ALPHA_SCALE", "GL_ADD_SIGNED", "GL_INTERPOLATE", "GL_SUBTRACT", "GL_CONSTANT", "GL_PRIMARY_COLOR", "GL_PREVIOUS", "GL_DOT3_RGB", "GL_DOT3_RGBA", "GL_DECAL", "GL_MODULATE", "GL_EYE_LINEAR", "GL_OBJECT_LINEAR", "GL_SPHERE_MAP", "GL_TEXTURE_GEN_MODE", "GL_OBJECT_PLANE", "GL_EYE_PLANE", "GL_COLOR", "GL_DEPTH", "GL_STENCIL", "GL_COLOR_INDEX", "GL_STENCIL_INDEX", "GL_DEPTH_COMPONENT", "GL_RED", "GL_GREEN", "GL_BLUE", "GL_ALPHA", "GL_TEXTURE_SWIZZLE_R", "GL_TEXTURE_SWIZZLE_G", "GL_TEXTURE_SWIZZLE_B", "GL_TEXTURE_SWIZZLE_A", "GL_TEXTURE_SWIZZLE_RGBA", "GL_RGB", "GL_RGBA", "GL_LUMINANCE", "GL_LUMINANCE8", "GL_LUMINANCE_ALPHA", "GL_LUMINANCE8_ALPHA8", "GL_INTENSITY", "GL_INTENSITY8", "GL_RGB5", "GL_RGB8", "GL_RGB5_A1", "GL_RGBA8", "GL_RGB10_A2", "GL_R3_G3_B2", "GL_ALL_ATTRIB_BITS", "GL_CLIENT_ALL_ATTRIB_BITS", "GL_CURRENT_BIT", "GL_ENABLE_BIT", "GL_EVAL_BIT", "GL_FOG_BIT", "GL_HINT_BIT", "GL_LIGHTING_BIT", "GL_LINE_BIT", "GL_LIST_BIT", "GL_PIXEL_MODE_BIT", "GL_POINT_BIT", "GL_POLYGON_BIT", "GL_POLYGON_STIPPLE_BIT", "GL_SCISSOR_BIT", "GL_TEXTURE_BIT", "GL_TRANSFORM_BIT", "GL_VIEWPORT_BIT", "GL_ALL_ATTRIBS_BITS", "GL_CLIENT_PIXEL_STORE_BIT", "GL_CLIENT_VERTEX_ARRAY_BIT", "GL_CLIENT_ALL_ATTRIB_BITS", "GL_BGRA", "GL_BGRA_EXT", "GL_BGRA8_EXT", "GL_BGR", "GL_BGR_EXT", "GL_SPOT_EXPONENT", "GL_SPOT_CUTOFF", "GL_CONSTANT_ATTENUATION", "GL_LINEAR_ATTENUATION", "GL_QUADRATIC_ATTENUATION", "GL_POINTS", "GL_LINES", "GL_LINE_STRIP", "GL_LINE_LOOP", "GL_TRIANGLES", "GL_TRIANGLE_STRIP", "GL_TRIANGLE_FAN", "GL_QUADS", "GL_QUAD_STRIP", "GL_POLYGON", "GL_NEAREST", "GL_LINEAR", "GL_CLAMP", "GL_REPEAT", "GL_EXP", "GL_EXP2", "GL_COLOR_BUFFER_BIT", "GL_DEPTH_BUFFER_BIT", "GL_ACCUM_BUFFER_BIT", "GL_STENCIL_BUFFER_BIT", "GL_CLIP_PLANE0", "GL_CLIP_PLANE1", "GL_CLIP_PLANE2", "GL_CLIP_PLANE3", "GL_CLIP_PLANE4", "GL_CLIP_PLANE5", "GL_VENDOR", "GL_RENDERER", "GL_VERSION", "GL_EXTENSIONS", "GL_ACCUM", "GL_LOAD", "GL_RETURN", "GL_MULT", "GL_ADD", "GL_POINT_SIZE_MIN", "GL_POINT_SIZE_MAX", "GL_POINT_FADE_THRESHOLD_SIZE", "GL_POINT_DISTANCE_ATTENUATION", "GL_POINT_SPRITE_COORD_ORIGIN", "GL_LOWER_LEFT", "GL_UPPER_LEFT", "GL_CLAMP_TO_BORDER", "GL_CLAMP_TO_EDGE", "GL_NORMAL_MAP", "GL_REFLECTION_MAP", "GL_TEXTURE_CUBE_MAP", "GL_TEXTURE_BINDING_CUBE_MAP", "GL_TEXTURE_CUBE_MAP_POSITIVE_X", "GL_TEXTURE_CUBE_MAP_NEGATIVE_X", "GL_TEXTURE_CUBE_MAP_POSITIVE_Y", "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y", "GL_TEXTURE_CUBE_MAP_POSITIVE_Z", "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z", "GL_MAX_DRAW_BUFFERS", "GL_DRAW_BUFFER0", "GL_DRAW_BUFFER1", "GL_DRAW_BUFFER2", "GL_DRAW_BUFFER3", "GL_DRAW_BUFFER4", "GL_DRAW_BUFFER5", "GL_DRAW_BUFFER6", "GL_DRAW_BUFFER7", "GL_FUNC_ADD", "GL_MIN", "GL_MAX", "GL_BLEND_EQUATION_RGB", "GL_BLEND_EQUATION_ALPHA", "GL_FUNC_SUBTRACT", "GL_FUNC_REVERSE_SUBTRACT", "GL_ARRAY_BUFFER", "GL_ELEMENT_ARRAY_BUFFER", "GL_ARRAY_BUFFER_BINDING", "GL_ELEMENT_ARRAY_BUFFER_BINDING", "GL_VERTEX_ARRAY_BUFFER_BINDING", "GL_NORMAL_ARRAY_BUFFER_BINDING", "GL_COLOR_ARRAY_BUFFER_BINDING", "GL_INDEX_ARRAY_BUFFER_BINDING", "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING", "GL_EDGE_FLAG_ARRAY_BUFFER_BINDING", "GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING", "GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING", "GL_WEIGHT_ARRAY_BUFFER_BINDING", "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", "GL_READ_ONLY", "GL_WRITE_ONLY", "GL_READ_WRITE", "GL_BUFFER_ACCESS", "GL_BUFFER_MAPPED", "GL_BUFFER_MAP_POINTER", "GL_STREAM_DRAW", "GL_STREAM_READ", "GL_STREAM_COPY", "GL_STATIC_DRAW", "GL_STATIC_READ", "GL_STATIC_COPY", "GL_DYNAMIC_DRAW", "GL_DYNAMIC_READ", "GL_DYNAMIC_COPY", "GL_MAP_READ_BIT", "GL_MAP_WRITE_BIT", "GL_MAP_INVALIDATE_RANGE_BIT", "GL_MAP_INVALIDATE_BUFFER_BIT", "GL_MAP_FLUSH_EXPLICIT_BIT", "GL_MAP_UNSYNCHRONIZED_BIT", "GL_PIXEL_PACK_BUFFER", "GL_PIXEL_UNPACK_BUFFER", "GL_PIXEL_PACK_BUFFER_BINDING", "GL_PIXEL_UNPACK_BUFFER_BINDING", "GL_FRAMEBUFFER", "GL_RENDERBUFFER", "GL_STENCIL_INDEX1", "GL_STENCIL_INDEX4", "GL_STENCIL_INDEX8", "GL_STENCIL_INDEX16", "GL_RENDERBUFFER_WIDTH", "GL_RENDERBUFFER_HEIGHT", "GL_RENDERBUFFER_INTERNAL_FORMAT", "GL_RENDERBUFFER_RED_SIZE", "GL_RENDERBUFFER_GREEN_SIZE", "GL_RENDERBUFFER_BLUE_SIZE", "GL_RENDERBUFFER_ALPHA_SIZE", "GL_RENDERBUFFER_DEPTH_SIZE", "GL_RENDERBUFFER_STENCIL_SIZE", "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET", "GL_READ_FRAMEBUFFER", "GL_DRAW_FRAMEBUFFER", "GL_DEPTH_STENCIL_ATTACHMENT", "GL_COLOR_ATTACHMENT0", "GL_COLOR_ATTACHMENT1", "GL_COLOR_ATTACHMENT2", "GL_COLOR_ATTACHMENT3", "GL_COLOR_ATTACHMENT4", "GL_COLOR_ATTACHMENT5", "GL_COLOR_ATTACHMENT6", "GL_COLOR_ATTACHMENT7", "GL_COLOR_ATTACHMENT8", "GL_COLOR_ATTACHMENT9", "GL_COLOR_ATTACHMENT10", "GL_COLOR_ATTACHMENT11", "GL_COLOR_ATTACHMENT12", "GL_COLOR_ATTACHMENT13", "GL_COLOR_ATTACHMENT14", "GL_COLOR_ATTACHMENT15", "GL_DEPTH_ATTACHMENT", "GL_STENCIL_ATTACHMENT", "GL_FRAMEBUFFER_COMPLETE", "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT", "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS", "GL_FRAMEBUFFER_INCOMPLETE_FORMATS", "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER", "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER", "GL_FRAMEBUFFER_UNSUPPORTED", "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE", "GL_FRAMEBUFFER_BINDING", "GL_RENDERBUFFER_BINDING", "GL_MAX_COLOR_ATTACHMENTS", "GL_MAX_RENDERBUFFER_SIZE", "GL_MAX_SAMPLES", "GL_INVALID_FRAMEBUFFER_OPERATION", "GL_BUFFER_SIZE", "GL_TEXTURE_RECTANGLE", "GL_TEXTURE_BINDING_RECTANGLE", "GL_PROXY_TEXTURE_RECTANGLE", "GL_MAX_RECTANGLE_TEXTURE_SIZE", "GL_SAMPLER_1D", "GL_SAMPLER_2D", "GL_SAMPLER_3D", "GL_SAMPLER_CUBE", "GL_SAMPLER_1D_SHADOW", "GL_SAMPLER_2D_SHADOW", "GL_SAMPLER_2D_RECT", "GL_SAMPLER_2D_RECT_SHADOW", "GL_SAMPLE_POSITION", "GL_SAMPLE_MASK", "GL_SAMPLE_MASK_VALUE", "GL_MAX_SAMPLE_MASK_WORDS", "GL_TEXTURE_2D_MULTISAMPLE", "GL_PROXY_TEXTURE_2D_MULTISAMPLE", "GL_TEXTURE_2D_MULTISAMPLE_ARRAY", "GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY", "GL_TEXTURE_BINDING_2D_MULTISAMPLE", "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY", "GL_TEXTURE_SAMPLES", "GL_TEXTURE_FIXED_SAMPLE_LOCATIONS", "GL_SAMPLER_2D_MULTISAMPLE", "GL_INT_SAMPLER_2D_MULTISAMPLE", "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE", "GL_SAMPLER_2D_MULTISAMPLE_ARRAY", "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY", "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY", "GL_MAX_COLOR_TEXTURE_SAMPLES", "GL_MAX_DEPTH_TEXTURE_SAMPLES", "GL_MAX_INTEGER_SAMPLES", "GL_PROGRAM_OBJECT", "GL_SHADER_OBJECT", "GL_OBJECT_TYPE", "GL_MAX_VERTEX_ATTRIBS", "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED", "GL_FRAGMENT_SHADER", "GL_VERTEX_SHADER", "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS", "GL_MAX_VERTEX_UNIFORM_COMPONENTS", "GL_MAX_VARYING_FLOATS", "GL_SHADER_TYPE", "GL_DELETE_STATUS", "GL_LINK_STATUS", "GL_VALIDATE_STATUS", "GL_INFO_LOG_LENGTH", "GL_ATTACHED_SHADERS", "GL_ACTIVE_UNIFORMS", "GL_ACTIVE_UNIFORM_MAX_LENGTH", "GL_SHADER_SOURCE_LENGTH", "GL_ACTIVE_ATTRIBUTES", "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH", "GL_FRAGMENT_SHADER_DERIVATIVE_HINT", "GL_SHADING_LANGUAGE_VERSION", "GL_CURRENT_PROGRAM", "GL_MAJOR_VERSION", "GL_MINOR_VERSION"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _DisplayList::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL _DisplayList::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[575]; m.ui=r; m.si[0]=(sSI)0;m.si[1]=(sSI)1;m.si[2]=(sSI)0;m.si[3]=(sSI)0x8B56;m.si[4]=(sSI)0x8B57;m.si[5]=(sSI)0x8B58;m.si[6]=(sSI)0x8B59;m.si[7]=(sSI)0x1400;m.si[8]=(sSI)0x1401;m.si[9]=(sSI)0x1402;m.si[10]=(sSI)0x1403;m.si[11]=(sSI)0x8363;m.si[12]=(sSI)0x8364;m.si[13]=(sSI)0x8035;m.si[14]=(sSI)0x8367;m.si[15]=(sSI)0x1404;m.si[16]=(sSI)0x8B53;m.si[17]=(sSI)0x8B54;m.si[18]=(sSI)0x8B55;m.si[19]=(sSI)0x1405;m.si[20]=(sSI)0x1406;m.si[21]=(sSI)0x8B50;m.si[22]=(sSI)0x8B51;m.si[23]=(sSI)0x8B52;m.si[24]=(sSI)0x8B5A;m.si[25]=(sSI)0x8B5B;m.si[26]=(sSI)0x8B5C;m.si[27]=(sSI)0x1407;m.si[28]=(sSI)0x1408;m.si[29]=(sSI)0x1409;m.si[30]=(sSI)0x140A;m.si[31]=(sSI)0x0400;m.si[32]=(sSI)0x0401;m.si[33]=(sSI)0x0402;m.si[34]=(sSI)0x0403;m.si[35]=(sSI)0x0406;m.si[36]=(sSI)0x0407;m.si[37]=(sSI)0x0409;m.si[38]=(sSI)0x040A;m.si[39]=(sSI)0x040B;m.si[40]=(sSI)0x040C;m.si[41]=(sSI)0x8077;m.si[42]=(sSI)0x8079;m.si[43]=(sSI)0x803B;m.si[44]=(sSI)0x803c;m.si[45]=(sSI)0x803D;m.si[46]=(sSI)0x803E;m.si[47]=(sSI)0x803F;m.si[48]=(sSI)0x8040;m.si[49]=(sSI)0x8041;m.si[50]=(sSI)0x8042;m.si[51]=(sSI)0x8043;m.si[52]=(sSI)0x8044;m.si[53]=(sSI)0x8045;m.si[54]=(sSI)0x8046;m.si[55]=(sSI)0x8047;m.si[56]=(sSI)0x8048;m.si[57]=(sSI)0x804A;m.si[58]=(sSI)0x804B;m.si[59]=(sSI)0x804C;m.si[60]=(sSI)0x804D;m.si[61]=(sSI)0x804F;m.si[62]=(sSI)0x8052;m.si[63]=(sSI)0x8053;m.si[64]=(sSI)0x8054;m.si[65]=(sSI)0x8055;m.si[66]=(sSI)0x8056;m.si[67]=(sSI)0x805A;m.si[68]=(sSI)0x805B;m.si[69]=(sSI)0x1700;m.si[70]=(sSI)0x1701;m.si[71]=(sSI)0x1702;m.si[72]=(sSI)0x0C54;m.si[73]=(sSI)0x0C52;m.si[74]=(sSI)0x0C50;m.si[75]=(sSI)0x0C51;m.si[76]=(sSI)0x0C53;m.si[77]=(sSI)0x1101;m.si[78]=(sSI)0x1102;m.si[79]=(sSI)0x1100;m.si[80]=(sSI)0x0BC0;m.si[81]=(sSI)0x0D80;m.si[82]=(sSI)0x0BE2;m.si[83]=(sSI)0x80C8;m.si[84]=(sSI)0x80C9;m.si[85]=(sSI)0x80CA;m.si[86]=(sSI)0x80CB;m.si[87]=(sSI)0x0B44;m.si[88]=(sSI)0x0B71;m.si[89]=(sSI)0x0BD0;m.si[90]=(sSI)0x0B60;m.si[91]=(sSI)0x4000;m.si[92]=(sSI)0x4001;m.si[93]=(sSI)0x4002;m.si[94]=(sSI)0x4003;m.si[95]=(sSI)0x4004;m.si[96]=(sSI)0x4005;m.si[97]=(sSI)0x4006;m.si[98]=(sSI)0x4007;m.si[99]=(sSI)0x0B50;m.si[100]=(sSI)0x1200;m.si[101]=(sSI)0x1201;m.si[102]=(sSI)0x1600;m.si[103]=(sSI)0x1202;m.si[104]=(sSI)0x1602;m.si[105]=(sSI)0x0B57;m.si[106]=(sSI)0x81F9;m.si[107]=(sSI)0x81FA;m.si[108]=(sSI)0x0B20;m.si[109]=(sSI)0x0B24;m.si[110]=(sSI)0x0BA1;m.si[111]=(sSI)0x0B10;m.si[112]=(sSI)0x8037;m.si[113]=(sSI)0x2A01;m.si[114]=(sSI)0x0B41;m.si[115]=(sSI)0x0B42;m.si[116]=(sSI)0x0C11;m.si[117]=(sSI)0x0B90;m.si[118]=(sSI)0x809D;m.si[119]=(sSI)0x0DE0;m.si[120]=(sSI)0x8063;m.si[121]=(sSI)0x0DE1;m.si[122]=(sSI)0x8064;m.si[123]=(sSI)0x0DE1;m.si[124]=(sSI)0x8064;m.si[125]=(sSI)0x8C1A;m.si[126]=(sSI)0x8C1B;m.si[127]=(sSI)0x806F;m.si[128]=(sSI)0x8070;m.si[129]=(sSI)0x84c0;m.si[130]=(sSI)0x84c1;m.si[131]=(sSI)0x84c2;m.si[132]=(sSI)0x84c3;m.si[133]=(sSI)0x84c4;m.si[134]=(sSI)0x84c5;m.si[135]=(sSI)0x84c6;m.si[136]=(sSI)0x84c7;m.si[137]=(sSI)0x84c8;m.si[138]=(sSI)0x84c9;m.si[139]=(sSI)0x84ca;m.si[140]=(sSI)0x84cb;m.si[141]=(sSI)0x84cc;m.si[142]=(sSI)0x84cd;m.si[143]=(sSI)0x84ce;m.si[144]=(sSI)0x84cf;m.si[145]=(sSI)0x84e0;m.si[146]=(sSI)0x84e1;m.si[147]=(sSI)0x84e2;m.si[148]=(sSI)0x8872;m.si[149]=(sSI)0x0D33;m.si[150]=(sSI)0x8871;m.si[151]=(sSI)0x80E8;m.si[152]=(sSI)0x80E9;m.si[153]=(sSI)0x2800;m.si[154]=(sSI)0x2801;m.si[155]=(sSI)0x2802;m.si[156]=(sSI)0x2803;m.si[157]=(sSI)0x8072;m.si[158]=(sSI)0x813A;m.si[159]=(sSI)0x813B;m.si[160]=(sSI)0x813C;m.si[161]=(sSI)0x813D;m.si[162]=(sSI)0x8066;m.si[163]=(sSI)0x8067;m.si[164]=(sSI)0x8191;m.si[165]=(sSI)0x8192;m.si[166]=(sSI)0x81A5;m.si[167]=(sSI)0x81A6;m.si[168]=(sSI)0x81A7;m.si[169]=(sSI)0x88F0;m.si[170]=(sSI)0x8CAD;m.si[171]=(sSI)0x8370;m.si[172]=(sSI)0x8452;m.si[173]=(sSI)0x1500;m.si[174]=(sSI)0x150F;m.si[175]=(sSI)0x1503;m.si[176]=(sSI)0x150c;m.si[177]=(sSI)0x1505;m.si[178]=(sSI)0x150a;m.si[179]=(sSI)0x1501;m.si[180]=(sSI)0x150e;m.si[181]=(sSI)0x1507;m.si[182]=(sSI)0x1508;m.si[183]=(sSI)0x1506;m.si[184]=(sSI)0x1509;m.si[185]=(sSI)0x1502;m.si[186]=(sSI)0x1504;m.si[187]=(sSI)0x150b;m.si[188]=(sSI)0x150d;m.si[189]=(sSI)0x1C00;m.si[190]=(sSI)0x1C01;m.si[191]=(sSI)0x1C02;m.si[192]=(sSI)0x1D00;m.si[193]=(sSI)0x1D01;m.si[194]=(sSI)0x0404;m.si[195]=(sSI)0x0405;m.si[196]=(sSI)0x0408;m.si[197]=(sSI)0x1b00;m.si[198]=(sSI)0x1b01;m.si[199]=(sSI)0x1b02;m.si[200]=(sSI)0x0;m.si[201]=(sSI)0x1;m.si[202]=(sSI)0x0300;m.si[203]=(sSI)0x0301;m.si[204]=(sSI)0x0302;m.si[205]=(sSI)0x0303;m.si[206]=(sSI)0x0304;m.si[207]=(sSI)0x0305;m.si[208]=(sSI)0x0306;m.si[209]=(sSI)0x0307;m.si[210]=(sSI)0x0308;m.si[211]=(sSI)0x8001;m.si[212]=(sSI)0x8002;m.si[213]=(sSI)0x8003;m.si[214]=(sSI)0x8004;m.si[215]=(sSI)0x8005;m.si[216]=(sSI)0x0900;m.si[217]=(sSI)0x0901;m.si[218]=(sSI)0x1E00;m.si[219]=(sSI)0x1E01;m.si[220]=(sSI)0x1E02;m.si[221]=(sSI)0x8507;m.si[222]=(sSI)0x1E03;m.si[223]=(sSI)0x8508;m.si[224]=(sSI)0x0200;m.si[225]=(sSI)0x0201;m.si[226]=(sSI)0x0202;m.si[227]=(sSI)0x0203;m.si[228]=(sSI)0x0204;m.si[229]=(sSI)0x0205;m.si[230]=(sSI)0x0206;m.si[231]=(sSI)0x0207;m.si[232]=(sSI)0x2a02;m.si[233]=(sSI)0x8074;m.si[234]=(sSI)0x8075;m.si[235]=(sSI)0x8076;m.si[236]=(sSI)0x8078;m.si[237]=(sSI)0x0bf2;m.si[238]=(sSI)0x2000;m.si[239]=(sSI)0x2001;m.si[240]=(sSI)0x2002;m.si[241]=(sSI)0x2003;m.si[242]=(sSI)0x0c60;m.si[243]=(sSI)0x0c61;m.si[244]=(sSI)0x0c62;m.si[245]=(sSI)0x0c63;m.si[246]=(sSI)0x2300;m.si[247]=(sSI)0x8500;m.si[248]=(sSI)0x8861;m.si[249]=(sSI)0x8862;m.si[250]=(sSI)0x2200;m.si[251]=(sSI)0x2201;m.si[252]=(sSI)0x8501;m.si[253]=(sSI)0x884C;m.si[254]=(sSI)0x884D;m.si[255]=(sSI)0x884E;m.si[256]=(sSI)0x8570;m.si[257]=(sSI)0x8571;m.si[258]=(sSI)0x8572;m.si[259]=(sSI)0x8580;m.si[260]=(sSI)0x8581;m.si[261]=(sSI)0x8582;m.si[262]=(sSI)0x8588;m.si[263]=(sSI)0x8589;m.si[264]=(sSI)0x858A;m.si[265]=(sSI)0x8590;m.si[266]=(sSI)0x8591;m.si[267]=(sSI)0x8592;m.si[268]=(sSI)0x8598;m.si[269]=(sSI)0x8599;m.si[270]=(sSI)0x859A;m.si[271]=(sSI)0x8573;m.si[272]=(sSI)0x0d1c;m.si[273]=(sSI)0x8574;m.si[274]=(sSI)0x8575;m.si[275]=(sSI)0x84E7;m.si[276]=(sSI)0x8576;m.si[277]=(sSI)0x8577;m.si[278]=(sSI)0x8578;m.si[279]=(sSI)0x86AE;m.si[280]=(sSI)0x86AF;m.si[281]=(sSI)0x2101;m.si[282]=(sSI)0x2100;m.si[283]=(sSI)0x2400;m.si[284]=(sSI)0x2401;m.si[285]=(sSI)0x2402;m.si[286]=(sSI)0x2500;m.si[287]=(sSI)0x2501;m.si[288]=(sSI)0x2502;m.si[289]=(sSI)0x1800;m.si[290]=(sSI)0x1801;m.si[291]=(sSI)0x1802;m.si[292]=(sSI)0x1900;m.si[293]=(sSI)0x1901;m.si[294]=(sSI)0x1902;m.si[295]=(sSI)0x1903;m.si[296]=(sSI)0x1904;m.si[297]=(sSI)0x1905;m.si[298]=(sSI)0x1906;m.si[299]=(sSI)0x8E42;m.si[300]=(sSI)0x8E43;m.si[301]=(sSI)0x8E44;m.si[302]=(sSI)0x8E45;m.si[303]=(sSI)0x8E46;m.si[304]=(sSI)0x1907;m.si[305]=(sSI)0x1908;m.si[306]=(sSI)0x1909;m.si[307]=(sSI)0x8040;m.si[308]=(sSI)0x190a;m.si[309]=(sSI)0x8045;m.si[310]=(sSI)0x8049;m.si[311]=(sSI)0x804b;m.si[312]=(sSI)0x8050;m.si[313]=(sSI)0x8051;m.si[314]=(sSI)0x8057;m.si[315]=(sSI)0x8058;m.si[316]=(sSI)0x8059;m.si[317]=(sSI)0x2a10;m.si[318]=(sSI)0x000fffff;m.si[319]=(sSI)0xffffffff;m.si[320]=(sSI)0x1;m.si[321]=(sSI)0x2000;m.si[322]=(sSI)0x10000;m.si[323]=(sSI)0x80;m.si[324]=(sSI)0x8000;m.si[325]=(sSI)0x40;m.si[326]=(sSI)0x4;m.si[327]=(sSI)0x20000;m.si[328]=(sSI)0x20;m.si[329]=(sSI)0x2;m.si[330]=(sSI)0x8;m.si[331]=(sSI)0x10;m.si[332]=(sSI)0x80000;m.si[333]=(sSI)0x40000;m.si[334]=(sSI)0x1000;m.si[335]=(sSI)0x800;m.si[336]=(sSI)0xFFFFF;m.si[337]=(sSI)0x1;m.si[338]=(sSI)0x2;m.si[339]=(sSI)0xFFFFFFFF;m.si[340]=(sSI)0x80E1;m.si[341]=(sSI)0x80E1;m.si[342]=(sSI)0x93A1;m.si[343]=(sSI)0x80E0;m.si[344]=(sSI)0x80E0;m.si[345]=(sSI)0x1205;m.si[346]=(sSI)0x1206;m.si[347]=(sSI)0x1207;m.si[348]=(sSI)0x1208;m.si[349]=(sSI)0x1209;m.si[350]=(sSI)0x0000;m.si[351]=(sSI)0x0001;m.si[352]=(sSI)0x0003;m.si[353]=(sSI)0x0002;m.si[354]=(sSI)0x0004;m.si[355]=(sSI)0x0005;m.si[356]=(sSI)0x0006;m.si[357]=(sSI)0x0007;m.si[358]=(sSI)0x0008;m.si[359]=(sSI)0x0009;m.si[360]=(sSI)0x2600;m.si[361]=(sSI)0x2601;m.si[362]=(sSI)0x2900;m.si[363]=(sSI)0x2901;m.si[364]=(sSI)0x0800;m.si[365]=(sSI)0x0801;m.si[366]=(sSI)0x4000;m.si[367]=(sSI)0x100;m.si[368]=(sSI)0x200;m.si[369]=(sSI)0x400;m.si[370]=(sSI)0x3000;m.si[371]=(sSI)0x3001;m.si[372]=(sSI)0x3002;m.si[373]=(sSI)0x3003;m.si[374]=(sSI)0x3004;m.si[375]=(sSI)0x3005;m.si[376]=(sSI)0x1F00;m.si[377]=(sSI)0x1F01;m.si[378]=(sSI)0x1F02;m.si[379]=(sSI)0x1F03;m.si[380]=(sSI)0x0100;m.si[381]=(sSI)0x0101;m.si[382]=(sSI)0x0102;m.si[383]=(sSI)0x0103;m.si[384]=(sSI)0x0104;m.si[385]=(sSI)0x8126;m.si[386]=(sSI)0x8127;m.si[387]=(sSI)0x8128;m.si[388]=(sSI)0x8129;m.si[389]=(sSI)0x8CA0;m.si[390]=(sSI)0x8CA1;m.si[391]=(sSI)0x8CA2;m.si[392]=(sSI)0x812D;m.si[393]=(sSI)0x812F;m.si[394]=(sSI)0x8511;m.si[395]=(sSI)0x8512;m.si[396]=(sSI)0x8513;m.si[397]=(sSI)0x8514;m.si[398]=(sSI)0x8515;m.si[399]=(sSI)0x8516;m.si[400]=(sSI)0x8517;m.si[401]=(sSI)0x8518;m.si[402]=(sSI)0x8519;m.si[403]=(sSI)0x851A;m.si[404]=(sSI)0x8824;m.si[405]=(sSI)0x8825;m.si[406]=(sSI)0x8826;m.si[407]=(sSI)0x8827;m.si[408]=(sSI)0x8828;m.si[409]=(sSI)0x8829;m.si[410]=(sSI)0x882A;m.si[411]=(sSI)0x882B;m.si[412]=(sSI)0x882C;m.si[413]=(sSI)0x8006;m.si[414]=(sSI)0x8007;m.si[415]=(sSI)0x8008;m.si[416]=(sSI)0x8009;m.si[417]=(sSI)0x883D;m.si[418]=(sSI)0x800A;m.si[419]=(sSI)0x800B;m.si[420]=(sSI)0x8892;m.si[421]=(sSI)0x8893;m.si[422]=(sSI)0x8894;m.si[423]=(sSI)0x8895;m.si[424]=(sSI)0x8896;m.si[425]=(sSI)0x8897;m.si[426]=(sSI)0x8898;m.si[427]=(sSI)0x8899;m.si[428]=(sSI)0x889A;m.si[429]=(sSI)0x889B;m.si[430]=(sSI)0x889C;m.si[431]=(sSI)0x889D;m.si[432]=(sSI)0x889E;m.si[433]=(sSI)0x889F;m.si[434]=(sSI)0x88B8;m.si[435]=(sSI)0x88B9;m.si[436]=(sSI)0x88BA;m.si[437]=(sSI)0x88BB;m.si[438]=(sSI)0x88BC;m.si[439]=(sSI)0x88BD;m.si[440]=(sSI)0x88E0;m.si[441]=(sSI)0x88E1;m.si[442]=(sSI)0x88E2;m.si[443]=(sSI)0x88E4;m.si[444]=(sSI)0x88E5;m.si[445]=(sSI)0x88E6;m.si[446]=(sSI)0x88E8;m.si[447]=(sSI)0x88E9;m.si[448]=(sSI)0x88EA;m.si[449]=(sSI)0x0001;m.si[450]=(sSI)0x0002;m.si[451]=(sSI)0x0004;m.si[452]=(sSI)0x0008;m.si[453]=(sSI)0x0010;m.si[454]=(sSI)0x0020;m.si[455]=(sSI)0x88EB;m.si[456]=(sSI)0x88EC;m.si[457]=(sSI)0x88ED;m.si[458]=(sSI)0x88EF;m.si[459]=(sSI)0x8D40;m.si[460]=(sSI)0x8D41;m.si[461]=(sSI)0x8D46;m.si[462]=(sSI)0x8D47;m.si[463]=(sSI)0x8D48;m.si[464]=(sSI)0x8D49;m.si[465]=(sSI)0x8D42;m.si[466]=(sSI)0x8D43;m.si[467]=(sSI)0x8D44;m.si[468]=(sSI)0x8D50;m.si[469]=(sSI)0x8D51;m.si[470]=(sSI)0x8D52;m.si[471]=(sSI)0x8D53;m.si[472]=(sSI)0x8D54;m.si[473]=(sSI)0x8D55;m.si[474]=(sSI)0x8CD0;m.si[475]=(sSI)0x8CD1;m.si[476]=(sSI)0x8CD2;m.si[477]=(sSI)0x8CD3;m.si[478]=(sSI)0x8CD3;m.si[479]=(sSI)0x8CA8;m.si[480]=(sSI)0x8CA9;m.si[481]=(sSI)0x821A;m.si[482]=(sSI)0x8CE0;m.si[483]=(sSI)0x8CE1;m.si[484]=(sSI)0x8CE2;m.si[485]=(sSI)0x8CE3;m.si[486]=(sSI)0x8CE4;m.si[487]=(sSI)0x8CE5;m.si[488]=(sSI)0x8CE6;m.si[489]=(sSI)0x8CE7;m.si[490]=(sSI)0x8CE8;m.si[491]=(sSI)0x8CE9;m.si[492]=(sSI)0x8CEA;m.si[493]=(sSI)0x8CEB;m.si[494]=(sSI)0x8CEC;m.si[495]=(sSI)0x8CED;m.si[496]=(sSI)0x8CEE;m.si[497]=(sSI)0x8CEF;m.si[498]=(sSI)0x8D00;m.si[499]=(sSI)0x8D20;m.si[500]=(sSI)0x8CD5;m.si[501]=(sSI)0x8CD6;m.si[502]=(sSI)0x8CD7;m.si[503]=(sSI)0x8CD9;m.si[504]=(sSI)0x8CDA;m.si[505]=(sSI)0x8CDB;m.si[506]=(sSI)0x8CDC;m.si[507]=(sSI)0x8CDD;m.si[508]=(sSI)0x8D56;m.si[509]=(sSI)0x8CA6;m.si[510]=(sSI)0x8CA7;m.si[511]=(sSI)0x8CDF;m.si[512]=(sSI)0x84E8;m.si[513]=(sSI)0x8D57;m.si[514]=(sSI)0x0506;m.si[515]=(sSI)0x8764;m.si[516]=(sSI)0x84F5;m.si[517]=(sSI)0x84F6;m.si[518]=(sSI)0x84F7;m.si[519]=(sSI)0x84F8;m.si[520]=(sSI)0x8B5D;m.si[521]=(sSI)0x8B5E;m.si[522]=(sSI)0x8B5F;m.si[523]=(sSI)0x8B60;m.si[524]=(sSI)0x8B61;m.si[525]=(sSI)0x8B62;m.si[526]=(sSI)0x8B63;m.si[527]=(sSI)0x8B64;m.si[528]=(sSI)0x8E50;m.si[529]=(sSI)0x8E51;m.si[530]=(sSI)0x8E52;m.si[531]=(sSI)0x8E59;m.si[532]=(sSI)0x9100;m.si[533]=(sSI)0x9101;m.si[534]=(sSI)0x9102;m.si[535]=(sSI)0x9103;m.si[536]=(sSI)0x9104;m.si[537]=(sSI)0x9105;m.si[538]=(sSI)0x9106;m.si[539]=(sSI)0x9107;m.si[540]=(sSI)0x9108;m.si[541]=(sSI)0x9109;m.si[542]=(sSI)0x910A;m.si[543]=(sSI)0x910B;m.si[544]=(sSI)0x910C;m.si[545]=(sSI)0x910D;m.si[546]=(sSI)0x910E;m.si[547]=(sSI)0x910F;m.si[548]=(sSI)0x9110;m.si[549]=(sSI)0x8B40;m.si[550]=(sSI)0x8B48;m.si[551]=(sSI)0x8B4E;m.si[552]=(sSI)0x8869;m.si[553]=(sSI)0x886A;m.si[554]=(sSI)0x8B30;m.si[555]=(sSI)0x8B31;m.si[556]=(sSI)0x8B49;m.si[557]=(sSI)0x8B4A;m.si[558]=(sSI)0x8B4B;m.si[559]=(sSI)0x8B4F;m.si[560]=(sSI)0x8B80;m.si[561]=(sSI)0x8B82;m.si[562]=(sSI)0x8B83;m.si[563]=(sSI)0x8B84;m.si[564]=(sSI)0x8B85;m.si[565]=(sSI)0x8B86;m.si[566]=(sSI)0x8B87;m.si[567]=(sSI)0x8B88;m.si[568]=(sSI)0x8B89;m.si[569]=(sSI)0x8B8A;m.si[570]=(sSI)0x8B8B;m.si[571]=(sSI)0x8B8C;m.si[572]=(sSI)0x8B8D;m.si[573]=(sSI)0x821B;m.si[574]=(sSI)0x821C;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(_DisplayList, "DisplayList");

#ifndef YAC_NO_HOST
void  YAC_CALL DisplayList___alloc  (void *_o                                ) {((_DisplayList*)_o)->_alloc();}
void  YAC_CALL DisplayList___free   (void *_o                                ) {((_DisplayList*)_o)->_free();}
void  YAC_CALL DisplayList___begin  (void *_o                                ) {((_DisplayList*)_o)->_begin();}
void  YAC_CALL DisplayList___end    (void *_o                                ) {((_DisplayList*)_o)->_end();}
void  YAC_CALL DisplayList___draw   (void *_o                                ) {((_DisplayList*)_o)->_draw();}
void  YAC_CALL DisplayList___setName(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((_DisplayList*)_o)->_setName((YAC_String*)_args.mem[0].o);}}
void* YAC_CALL DisplayList___getName(void *_o                                ) {return (void*)((_DisplayList*)_o)->_getName();}
sSI   YAC_CALL DisplayList___getId  (void *_o                                ) {return (sSI)((_DisplayList*)_o)->_getId();}
#endif // YAC_NO_HOST
