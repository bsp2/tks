tkopengl
glAlphaFunc,int func,float ref
Specify the alpha test function 
 
@arg func Specifies the alpha comparison function. Symbolic constants §GL_NEVER, §GL_LESS, §GL_EQUAL, §GL_LEQUAL, §GL_GREATER, §GL_NOTEQUAL, §GL_GEQUAL, and §GL_ALWAYS are accepted. The initial value is §GL_ALWAYS. 
@arg ref Specifies the reference	value that incoming alpha values are compared to. This value is clamped to the range 0	through	1, where 0 represents the lowest possible alpha value and 1 the highest possible	value. The initial reference value is 0. 
glArrayElement,int i
Render a vertex using the specified vertex array element 
 
@arg i Specifies an index into the enabled vertex data arrays. 
glBegin,int mode
Delimit the vertices	of a primitive or a group of like primitives 
 
@arg mode Specifies the primitive or primitives that will be created from vertices presented between glBegin and the subsequent glEnd. Ten symbolic constants are accepted: §GL_POINTS, §GL_LINES, §GL_LINE_STRIP, §GL_LINE_LOOP, §GL_TRIANGLES, §GL_TRIANGLE_STRIP, §GL_TRIANGLE_FAN, §GL_QUADS, §GL_QUAD_STRIP, and §GL_POLYGON. 
glBindTexture,int target,int texture
Bind a named texture to a texturing target 
 
@arg target Specifies the target	to which the texture is	bound. Must be either §GL_TEXTURE_1D or §GL_TEXTURE_2D. 
@arg texture Specifies the name of a texture. 
glBlendFunc,int sfactor,int dfactor
Specify pixel arithmetic 
 
@arg sfactor Specifies how the red, green, blue, and alpha source blending factors are computed.  Nine symbolic constants are accepted: §GL_ZERO, §GL_ONE, §GL_DST_COLOR, §GL_ONE_MINUS_DST_COLOR, §GL_SRC_ALPHA, §GL_ONE_MINUS_SRC_ALPHA, §GL_DST_ALPHA, §GL_ONE_MINUS_DST_ALPHA, and §GL_SRC_ALPHA_SATURATE. The initial value is	§GL_ONE. 
@arg dfactor Specifies how the red, green, blue, and alpha destination blending factors are computed. Eight symbolic constants are accepted: §GL_ZERO, §GL_ONE, §GL_SRC_COLOR, §GL_ONE_MINUS_SRC_COLOR, §GL_SRC_ALPHA, §GL_ONE_MINUS_SRC_ALPHA, §GL_DST_ALPHA, and §GL_ONE_MINUS_DST_ALPHA. The initial value is §GL_ZERO. 
glCallList,int list
Execute a display list 

@arg list Specifies the integer name of the display list to be executed. 
glCullFace,int mode
Specify whether front- or back-facing facets can be culled 

@arg mode Specifies whether front- or back-facing	facets are candidates for culling. Symbolic constants §GL_FRONT, §GL_BACK, and §GL_FRONT_AND_BACK are accepted. The initial value is §GL_BACK. 
glClearColor,float r,float g,float b,float a
Specify clear values for the color buffers 
 
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
glClear,int mask
Clear buffers to preset values 

@arg mask Bitwise	OR of masks that indicate the buffers to be cleared. The four masks are §GL_COLOR_BUFFER_BIT, §GL_DEPTH_BUFFER_BIT, §GL_ACCUM_BUFFER_BIT, and §GL_STENCIL_BUFFER_BIT. 
glClearDepth,float depth
Specify the clear value for the depth buffer 

@arg depth Specifies the depth value used when the depth buffer is cleared. The initial value is 1. 
glClearStencil,int s
Specify the clear value for the stencil buffer 

@arg s Specifies the index used when the stencil buffer is cleared. The initial value is 0. 
zglColor1f,float lum
Set the current color (grayscale) 

@arg lum Luminance component
glColor3f,float r,float g,float b
Set the current color 

@arg r Red component
@arg g Green component
@arg b Blue component
glColor3ub,byte r,byte g,byte b
Set the current color 

@arg r Red component
@arg g Green component
@arg b Blue component
glColor4f,float r,float g,float b,float a
Set the current color 

@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
glColor4ub,byte r,byte g,byte b,byte a
Set the current color 

@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
glColorMask,boolean r,boolean g,boolean b,boolean a
Enable and disable writing of frame buffer color components 

@arg r Red mask
@arg g Green mask
@arg b Blue mask
@arg a Alpha mask
glCopyPixels,int x,int y,int w,int h,int type
Copy pixels in the frame buffer 
 
@arg x Specify the window x coordinate of the lower left corner of the rectangular region of pixels to be copied 
@arg y Specify the window y coordinate of the lower left corner of the rectangular region of pixels to be copied 
@arg w Specify the width of the rectangular region of pixels to be copied. Must be nonnegative. 
@arg h Specify the height of the rectangular region of pixels to be copied. Must be nonnegative. 
@arg type Specifies whether color values, depth values, or stencil values are to be	copied. Symbolic constants §GL_COLOR, §GL_DEPTH, and §GL_STENCIL are accepted. 
glCopyTexSubImage2D,int target,int level,int xoffset,int yoffset,int x,int y,int width,int height
Copy a two-dimensional texture subimage 
 
@arg target Specifies the target	texture. Must be §GL_TEXTURE_2D 
@arg level Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. 
@arg xoffset Specifies a texel offset in the x direction within the texture array. 
@arg yoffset Specifies a texel offset in the y direction within the texture array. 
@arg x Specify the window x coordinate of the lower left corner of the rectangular region of pixels to be copied. 
@arg y Specify the window y coordinate of the lower left corner of the rectangular region of pixels to be copied. 
@arg width Specifies the width of the texture subimage. 
@arg height Specifies the height	of the texture subimage. 
glCopyTexImage2D,int target,int level,int internalFormat,int x,int y,int width,int height,int border
Copy pixels into a 2D texture image 
 
@arg target Specifies the	target texture. Must be GL_TEXTURE_2D. 
@arg level Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. 
@arg internalFormat Specifies the internal format of the texture. Must be one of the following symbolic constants: 
           §GL_ALPHA, §GL_ALPHA4, §GL_ALPHA8, §GL_ALPHA12, §GL_ALPHA16, §GL_LUMINANCE, §GL_LUMINANCE4, §GL_LUMINANCE8, §GL_LUMINANCE12, §GL_LUMINANCE16, §GL_LUMINANCE_ALPHA, §GL_LUMINANCE4_ALPHA4, §GL_LUMINANCE6_ALPHA2, §GL_LUMINANCE8_ALPHA8, §GL_LUMINANCE12_ALPHA4, §GL_LUMINANCE12_ALPHA12, §GL_LUMINANCE16_ALPHA16, §GL_INTENSITY, §GL_INTENSITY4, §GL_INTENSITY8, §GL_INTENSITY12, §GL_INTENSITY16, §GL_RGB, §GL_R3_G3_B2, §GL_RGB4, §GL_RGB5, §GL_RGB8, §GL_RGB10, §GL_RGB12, §GL_RGB16, §GL_RGBA, §GL_RGBA2, §GL_RGBA4, §GL_RGB5_A1, §GL_RGBA8, §GL_RGB10_A2, §GL_RGBA12, or §GL_RGBA16. 
@arg x Specify the window x coordinate of the lower left corner of the rectangular region of pixels to be copied. 
@arg y Specify the window y coordinate of the lower left corner of the rectangular region of pixels to be copied. 
@arg width Specifies the width of the texture image. Must be 0 or 2**n + 2*border for some integer n. 
@arg height Specifies the height of the texture image. Must be 0 or 2**m + 2*border for some integer m. 
@arg border Specifies the width of the border. Must be either 0 or 1. 
glDepthFunc,int func
Specify the value used for depth buffer comparisons 
 
@arg func Specifies the depth comparison function. Symbolic constants §GL_NEVER, §GL_LESS, §GL_EQUAL, §GL_LEQUAL, §GL_GREATER, §GL_NOTEQUAL, §GL_GEQUAL, and §GL_ALWAYS are accepted. The initial value is §GL_LESS. 
glDepthMask,boolean mask
Enable or disable writing into the depth buffer 

@arg mask Specifies whether the depth buffer is enabled for writing. If flag is false, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled. 
glDisable,int cap
Disable server-side GL capabilities 
 
@cap Specifies a symbolic constant indicating a GL capability. 
glDisableClientState,int cap
Disable client-side capability 
 
@arg Specifies the capability	to disable. 
glDrawArrays,int mode,int first,int count
Render primitives from array data

@arg mode Specifies what kind of primitives to render. Symbolic constants §GL_POINTS, §GL_LINE_STRIP, §GL_LINE_LOOP, §GL_LINES, §GL_TRIANGLE_STRIP, §GL_TRIANGLE_FAN, §GL_TRIANGLES, §GL_QUAD_STRIP, §GL_QUADS, and §GL_POLYGON are accepted.
@arg first Specifies the starting index in the enabled arrays. 
@arg count Specifies the number of indices to be rendered. 
glDrawElements,int mode,IntArray indices
Render primitives from array data 
 
@arg mode Specifies what kind of primitives to render. Symbolic constants §GL_POINTS, §GL_LINE_STRIP, §GL_LINE_LOOP, §GL_LINES, §GL_TRIANGLE_STRIP, §GL_TRIANGLE_FAN, §GL_TRIANGLES, §GL_QUAD_STRIP, §GL_QUADS, and §GL_POLYGON are	accepted. 
@arg indices Specifies a pointer (and count) to the location where the indices are stored 
glDrawBuffer,int mode
Specify which color buffers are to be drawn into 
 
@arg mode Specifies up to four color buffers to be drawn into. Symbolic constants §GL_NONE, §GL_FRONT_LEFT, §GL_FRONT_RIGHT, §GL_BACK_LEFT, §GL_BACK_RIGHT, §GL_FRONT, §GL_BACK, §GL_LEFT, §GL_RIGHT, §GL_FRONT_AND_BACK, and GL_AUXi, where i is between 0 and GL_AUX_BUFFERS-1, are accepted (GL_AUX_BUFFERS is not the upper limit; use glGet to query the number of	available aux buffers.) The initial value is	§GL_FRONT for single-buffered contexts, and §GL_BACK for double-buffered contexts. 
glEdgeFlag,boolean flag
Flag edges as either boundary or nonboundary 
 
@arg flag Specifies the current edge flag	value, either true or false. The initial value is true. 
glEnable,int cap
Enable server-side GL capabilities 
 
@arg cap Specifies a symbolic constant indicating a GL capability. 
glEnableClientState,int cap
Enable client-side capability 

@arg cap Specifies the capability to enable. Symbolic constants §GL_COLOR_ARRAY, §GL_EDGE_FLAG_ARRAY, §GL_INDEX_ARRAY, §GL_NORMAL_ARRAY, §GL_TEXTURE_COORD_ARRAY, and §GL_VERTEX_ARRAY are accepted. 
glEnd
Delimit the vertices	of a primitive or a group of like primitives 

glFinish
Block until all GL execution is complete 

glFlush
Force execution of GL commands in finite time 

glFrontFace,int mode
Define front- and back-facing polygons 

@arg mode Specifies the orientation of front-facing polygons. §GL_CW and §GL_CCW are accepted. The initial value is §GL_CCW. 
glFrustum,float left,float right,float bottom,float top,float znear,float zfar
Multiply the current matrix by a perspective matrix 
 
@arg left Specify the coordinate for the left vertical clipping plane. 
@arg right Specify the coordinate for the right vertical clipping plane. 
@arg bottom Specify the coordinate for the bottom horizontal clipping plane. 
@arg top Specify the coordinate for the top horizontal clipping plane. 
@arg znear Specify the distances to the near depth clipping plane. The distance must be positive. 
@arg zfar Specify the distances to the far depth clipping plane. The distance must be positive. 
glHint,int target,int mode
Specify implementation-specific hints 
 
@arg target Specifies a symbolic constant indicating the behavior to be controlled. §GL_FOG_HINT, §GL_LINE_SMOOTH_HINT, §GL_PERSPECTIVE_CORRECTION_HINT, §GL_POINT_SMOOTH_HINT, and §GL_POLYGON_SMOOTH_HINT are accepted. 
@arg mode Specifies a symbolic constant indicating the desired behavior. §GL_FASTEST, §GL_NICEST, and §GL_DONT_CARE are accepted. 
glLoadIdentity
Replace the current matrix with the identity matrix 

glLineWidth,float width
Specify the width of rasterized lines 

@arg width Specifies the width of rasterized lines. The initial value is 1. 
glLineStipple,int factor,short pattern
Specify the line stipple pattern 

@arg factor Specifies a multiplier for each bit in the line stipple pattern. If factor is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used. factor is clamped to the range	[1, 256] and defaults to 1. 
@arg pattern Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when	the line is rasterized. Bit zero is used first; the default pattern is all 1's. 
glLogicOp,int opcode
Specify a logical pixel operation for color index rendering 
 
@arg opcode Specifies a symbolic constant	that selects a logical operation. The following symbols are accepted: §GL_CLEAR, §GL_SET, §GL_COPY, §GL_COPY_INVERTED, §GL_NOOP, §GL_INVERT, §GL_AND, §GL_NAND, §GL_OR, §GL_NOR, §GL_XOR, §GL_EQUIV, §GL_AND_REVERSE, §GL_AND_INVERTED, §GL_OR_REVERSE, and §GL_OR_INVERTED. The initial value is §GL_COPY. 
glMatrixMode,int mode
Specify which matrix is the current matrix

@arg mode Specifies which matrix stack is	the target for subsequent matrix operations. Three values are accepted: §GL_MODELVIEW, §GL_PROJECTION, and §GL_TEXTURE. The initial value is §GL_MODELVIEW. 
glNormal3f,float nx,float ny,float nz
Set the current normal vector

@arg nx Specify the x coordinate of the new current normal
@arg ny Specify the y coordinate of the new current normal
@arg nz Specify the z coordinate of the new current normal
glOrtho,float left,float right,float bottom,float top,float znear,float zfar
Multiply the current matrix with an orthographic matrix 

@arg left Specify the coordinate for the left vertical clipping plane. 
@arg right Specify the coordinate for the right vertical clipping plane.
@arg bottom Specify the coordinate for the bottom horizontal clipping plane.
@arg top Specify the coordinate for the top horizontal clipping plane.
@arg znear Specify the distance to the near depth clipping planes. These values are negative if the plane is to be behind the viewer. 
@arg zfar Specify the distance to the far depth clipping planes. These values are negative if the plane is to be behind the viewer.
glPointSize,float size
Specify the diameter of rasterized points 

@arg size Specifies the diameter of rasterized points. The initial value is 1. 
glPixelZoom,float xfactor,float yfactor
Specify the pixel zoom factors 
 
@arg xfactor Specify the x zoom factor for pixel write operations. 
@arg yfactor Specify the y zoom factor for pixel write operations. 
glPolygonMode,int face,int mode
Select a polygon rasterization mode

@arg face Specifies the polygons that mode applies to. Must be §GL_FRONT for front-facing polygons, §GL_BACK for back-facing polygons, or §GL_FRONT_AND_BACK for front- and back-facing polygons. 
@arg mode Specifies how polygons will be rasterized. Accepted values are §GL_POINT, §GL_LINE, and §GL_FILL. The initial	value is §GL_FILL for both front- and back-facing polygons. 
glPolygonOffset,float factor,float units
Set the scale and units used to calculate depth values

@arg factor  Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
@arg units Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
glPopAttrib
Pop the server attribute stack 
glPushAttrib
Push the server attribute stack 
glPopClientAttrib
Pop the client attribute stack 

glPushClientAttrib
Push the client attribute stack
glPopMatrix
Pop the current matrix stack 

glPushMatrix
Push the current matrix stack 
 
glRasterPos2i,int x,int y
Specify the raster position for pixel operations 
 
@arg x Specify the x object coordinate for the raster position. 
@arg y Specify the y object coordinate for the raster position. 
glRasterPos3f,float x,float y,float z
Specify the raster position for pixel operations 
 
@arg x Specify the x object coordinate for the raster position. 
@arg y Specify the y object coordinate for the raster position. 
@arg z Specify the z object coordinate for the raster position. 
glReadBuffer,int mode
Select a color buffer source for pixels 

@arg mode Specifies a color buffer. Accepted values are §GL_FRONT_LEFT, §GL_FRONT_RIGHT, §GL_BACK_LEFT, §GL_BACK_RIGHT, §GL_FRONT, §GL_BACK, §GL_LEFT, §GL_RIGHT, and GL_AUXi, where i is	between 0 and GL_AUX_BUFFERS-1. 
glRectf,float x1,float y1,float x2,float y2
Draw a rectangle

@arg x1 Specify one vertex of a rectangle. 
@arg y1 Specify one vertex of a rectangle.
@arg x2 Specify the opposite vertex of	the rectangle.
@arg y2 Specify the opposite vertex of	the rectangle.
glRotatef,float angle,float x,float y,float z
Multiply the current matrix by a rotation matrix 

@arg angle Specifies the angle of rotation, in degrees. 
@arg x Specify the x coordinate of a vector, respectively. 
@arg y Specify the y coordinate of a vector, respectively.
@arg z Specify the z coordinate of a vector, respectively.
glScalef,float x,float y,float z
Multiply the current matrix by a general scaling matrix 

@arg x Specify scale factor along the x axis
@arg y Specify scale factor along the y axis
@arg z Specify scale factor along the z axis
glScissor,int x,int y,int width,int height
Define the scissor box 
 
@arg x Specify the x coordinate of the lower left corner of the scissor box. Initially (0, 0) 
@arg y Specify the y coordinate of the lower left corner of the scissor box. Initially (0, 0) 
@arg width Specify the width of the scissor box 
@arg height Specify the height of the scissor box 
glShadeModel,int mode
Select flat or smooth shading 

@arg mode Specifies a symbolic value representing a shading technique. Accepted values are §GL_FLAT and §GL_SMOOTH. The initial value is §GL_SMOOTH.
glStencilFunc,int func,float ref,int mask
Set function and reference value for stencil testing 
 
@arg func Specifies the test function. Eight tokens are valid: §GL_NEVER, §GL_LESS, §GL_LEQUAL, §GL_GREATER, §GL_GEQUAL, §GL_EQUAL, §GL_NOTEQUAL, and §GL_ALWAYS. The initial value is §GL_ALWAYS. 
@arg ref Specifies the reference	value for the stencil test. ref is clamped to the range [0,2n-1], where n is the number of bitplanes in the stencil buffer. The initial value is 0. 
@arg mask Specifies a mask that is ANDed with both the reference value and the stored stencil value when	the test is done. The initial value	is all 1's. 
glStencilOp,int fail,int zfail,int zpass
Set stencil test actions 
 
@arg fail Specifies the action to take when the stencil test fails. Six symbolic constants are accepted: §GL_KEEP, §GL_ZERO, §GL_REPLACE, §GL_INCR, §GL_DECR, and §GL_INVERT. The initial value is §GL_KEEP. 
@arg zfail Specifies the stencil action when the stencil test passes, but the depth test fails. zfail accepts the same symbolic constants as fail. The initial value is §GL_KEEP. 
@arg zpass Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either	there is no depth buffer or depth testing is not enabled. zpass accepts the same symbolic constants as fail. The initial value is §GL_KEEP. 
glStencilMask,int mask
Control the writing of individual bits in the stencil planes 

@arg mask Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is	all 1's.
glTexCoord1f,float s
Set the current texture coordinate 
 
@arg s Specify the s texture coordinate 
glTexCoord2f,float s,float t
Set the current texture coordinates 
 
@arg s Specify the s texture coordinate 
@arg t Specify the t texture coordinate 
glTexCoord3f,float s,float t,float r
Set the current texture coordinates

@arg s Specify the s texture coordinate
@arg t Specify the t texture coordinate
@arg r Specify the r texture coordinate
glTexCoord1i,int s
Set the current texture coordinate 
 
@arg s Specify the s texture coordinate 
glTexCoord2i,int s,int t
Set the current texture coordinates 
 
@arg s Specify the s texture coordinate 
@arg t Specify the t texture coordinate 
glTexGeni,int coord,int pname,int param
Control the generation of texture coordinates

@arg coord Specifies a texture coordinate. Must	be one of GL_S, GL_T, GL_R, or GL_Q. 
@arg pname Specifies the symbolic name of the texture-coordinate generation function. Must be §GL_TEXTURE_GEN_MODE. 
@arg param Specifies a single-valued texture generation parameter, one of §GL_OBJECT_LINEAR, §GL_EYE_LINEAR, or §GL_SPHERE_MAP. 
glTranslatef,float x,float y,float z
Multiply	the current matrix by a translation matrix 
 
@arg x Specify the x coordinate of a translation vector 
@arg y Specify the y coordinate of a translation vector 
@arg z Specify the z coordinate of a translation vector 
glVertex2i,int x,int y
Specify a vertex 
 
@arg x Specify x coordinate of a vertex 
@arg y Specify y coordinate of a vertex 
glVertex2f,float x,float y
Specify a vertex 
 
@arg x Specify x coordinate of a vertex 
@arg y Specify y coordinate of a vertex 
glVertex3f,float x,float y,float z
Specify a vertex 
 
@arg x Specify x coordinate of a vertex 
@arg y Specify y coordinate of a vertex 
@arg z Specify z coordinate of a vertex 
glViewport,int x,int y,int width,int height
Set the viewport 
 
@arg x Specify the x coordinate of the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0). 
@arg y Specify the y coordinate of the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0). 
@arg width Specify the width of the viewport. When a GL context is first attached to a window, width is set to the dimension of that window. 
@arg height Specify the height of the viewport. When a GL context is first attached to a window, height is set to the dimension of that window. 
zglInitPerspective,float aspect,float fov,float znear,float zfar
Load perspective projection matrix

@arg aspect Aspect ratio
@arg fov Field of view (1..180)
@arg znear Distance to near clipping plane
@arg zfar Distance to far clipping plane
zglInitOrtho,float w,float h
Load orthogonal projection matrix

(0; 0) is located at the center of the screen

@arg w Quadrant width
@arg h Quadrant height
zglInit2D,float w,float h
Load 2D projection matrix

(0; 0) is located in the top/left corner of the screen

@arg w Width
@arg h Height
glLoadMatrixf,Object array
Replace the current matrix with the specified matrix 

@arg array Must hold at least 16 elements (column major layout)
zglFrustum,float left,float right,float bottom,float top,float znear,float zfar
Multiply the current matrix by a perspective matrix 
 
@arg left Specify the coordinate of the left vertical clipping plane 
@arg right Specify the coordinate of the right vertical clipping plane 
@arg bottom Specify the coordinate of the bottom horizontal clipping plane 
@arg top Specify the coordinate of the top horizontal clipping plane 
@arg znear Specify the distance to the near depth clipping plane 
@arg zfar Specify the distance to the far depth clipping plane 
zglLightAmbient4f,int light,float r,float g,float b,float a
Set light source ambient color parameter

@arg light GL_LIGHTi
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
zglLightDiffuse4f,int light,float r,float g,float b,float a
Set light source diffuse color parameter

@arg light GL_LIGHTi
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
zglLightSpecular4f,int light,float r,float g,float b,float a
Set light source specular color parameter

@arg light GL_LIGHTi
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
zglLightPositionf,int light,float x,float y,float z,float w
Set light source position

@arg light GL_LIGHTi
@arg x X position of light in homogeneous object coordinates
@arg y Y position of light in homogeneous object coordinates
@arg z Z position of light in homogeneous object coordinates
@arg w W position of light in homogeneous object coordinates
zglLightSpotDirectionf,int light,float x,float y,float z
Set spotlight direction

@arg light GL_LIGHTi
@arg x X direction of spotlight in homogeneous object coordinates
@arg y Y direction of spotlight in homogeneous object coordinates
@arg z Z direction of spotlight in homogeneous object coordinates
zglLightSpotExponent,int light,int exp
Set spotlight exponent

@arg light GL_LIGHTi
@arg exp 0..127
zglLightSpotCutOff,int light,int cutoff
Set spotlight cutoff

@arg light GL_LIGHTi
@arg cutoff 0..90, 180
zglLightConstantAttenuation,int light,float factor
Set light source constant attenuation

@arg light GL_LIGHTi
@arg factor Constant attenuation factor
zglLightLinearAttenuation,int light,float factor
Set light source linear attenuation

@arg light GL_LIGHTi
@arg factor Linear attenuation factor
zglLightQuadraticAttenuation,int light,float factor
Set light source quadratic attenuation

@arg light GL_LIGHTi
@arg factor Quadratic attenuation factor
zglLightModelAmbient4f,float r,float g,float b,float a
Set ambient scene color

@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
zglLightModelLocalViewer,boolean param
Configure local viewer light model

@arg param If param is 0 (or 0.0), specular reflection angles take the view direction to be parallel to and in the direction of the -z axis, regardless of the location of the vertex in eye coordinates. Otherwise, specular reflections are computed from the origin of the eye coordinate system. The initial value is 0. 
zglLightModelTwoSide,boolean param
Configure two sided light model

@arg param If params is 0 (or 0.0), one-sided lighting is specified, and only the front material parameters are used in the lighting equation. Otherwise, two-sided lighting is specified
zglLightMaterialAmbient4f,int face,float r,float g,float b,float a
Set ambient material color

@arg face Specifies which face or faces are being updated. Must be one of §GL_FRONT, §GL_BACK, or §GL_FRONT_AND_BACK.
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
zglLightMaterialDiffuse4f,int face,float r,float g,float b,float a
Set diffuse material color

@arg face Specifies which face or faces are being updated. Must be one of §GL_FRONT, §GL_BACK, or §GL_FRONT_AND_BACK.
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
zglLightMaterialSpecular4f,int face,float r,float g,float b,float a
Set specular material color

@arg face Specifies which face or faces are being updated. Must be one of §GL_FRONT, §GL_BACK, or §GL_FRONT_AND_BACK.
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
zglLightMaterialEmission4f,int face,float r,float g,float b,float a
Set emissive material color

@arg face Specifies which face or faces are being updated. Must be one of §GL_FRONT, §GL_BACK, or §GL_FRONT_AND_BACK.
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
zglLightMaterialShininess,int face,int exp
Set material shininess

@arg face Specifies which face or faces are being updated. Must be one of §GL_FRONT, §GL_BACK, or §GL_FRONT_AND_BACK.
@arg exp 0..127
zglLightMaterialAmbientAndDiffuse4f,int face,float r,float g,float b,float a
Set both ambient and diffuse material colors

@arg face Specifies which face or faces are being updated. Must be one of §GL_FRONT, §GL_BACK, or §GL_FRONT_AND_BACK.
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
zglFogMode,int mode
Specifies the equation to be used to compute the fog blend factor

@arg mode Three symbolic constants are accepted: §GL_LINEAR, §GL_EXP, and §GL_EXP2. The initial fog mode is §GL_EXP. 
zglFogDensity,float param
Specify the fog density

@arg param Only nonnegative densities are accepted. The initial fog density is 1. 
zglFogStart,float param
Specify fog near distance

@arg param Fog near distance. The initial near distance is 0. 
zglFogEnd,float param
Specify fog far distance

@arg param Fog far distance. The initial far distance is 1.
zglFogColor4f,float r,float g,float b,float a
Set fog color

@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component
zglColorARGB,int argb32
Set the current color

@arg argb32 Packed 32bit ARGB32 color
zglVertexPointer,Object array
Define an array of vertex data 
 
Note: Stride is assumed to be 0, type is GL_FLOAT and size is 3. 
 
@arg array Specifies the pointer to the vertex data
zglVertexPointer2f,Object array
Define an array of vertex data 
 
Note: Stride is assumed to be 0, type is GL_FLOAT and size is 2. 
 
@arg array Specifies the pointer to the vertex data
zglNormalPointer,Object array
Define an array of normal data 
 
Note: Stride is assumed to be 0 and type is GL_FLOAT. 
 
@arg array Specifies the pointer to the normal data
zglColorPointer3f,Object array
Define an array of RGB color data 
 
Note: Stride is assumed to be 0 and type is GL_FLOAT. 
 
@arg array Specifies the pointer to the color data
zglColorPointer4f,Object array
Define an array of RGBA color data 
 
Note: Stride is assumed to be 0 and type is GL_FLOAT. 
 
@arg array Specifies the pointer to the color data
zglColorPointer4b,Object array
Define an array of RGBA color data 
 
Note: Stride is assumed to be 0 and type is GL_UNSIGNED_BYTE. 
 
@arg array Specifies the pointer to the color data
zglTexCoordPointer2f,Object array
Define an array of texture coordinate data 
 
Note: Stride is assumed to be 0 and type is GL_FLOAT. 
 
@arg array Specifies the pointer to the texture coordinate data
zglReadColorPixel,int x,int y:int
Read a single pixel from the frame buffer

@arg x Specify the window x coordinate of the pixel that is read from the frame buffer. 
@arg y Specify the window y coordinate of the pixel that is read from the frame buffer.
@return Pixel (GL_RGBA in native host byte order)
zglReadDepthPixel,int x,int y:float
Read a single depth value from the depth buffer

@arg x Specify the window x coordinate of the pixel that is read from the frame buffer. 
@arg y Specify the window y coordinate of the pixel that is read from the frame buffer.
@return Depth value
zglClipPlane,int plane,float eq0,float eq1,float eq2,float eq3
Specify a plane against which all geometry is clipped 
 
@arg plane Specifies which clipping plane is being positioned. Symbolic names of the form GL_CLIP_PLANEi, where i is an integer between 0 and GL_MAX_CLIP_PLANES -1, are accepted. 
@arg eq0 
@arg eq1 
@arg eq2 
@arg eq3 
glGetString,int name:String
Return a string describing the current GL connection 
 
@arg name Specifies a symbolic constant, one of §GL_VENDOR, §GL_RENDERER, §GL_VERSION, or §GL_EXTENSIONS. 
@return String 
glGetError:int
Return last GL error code and reset internal error state to GL_NO_ERROR.

@return OpenGL error code
zglGenBuffer:int
Generate buffer object name id

@return Buffer object name id
zglDeleteBuffer,int id
Delete buffer object

@arg id Buffer object name id
zglBufferData,int target,int size,Object data,int usage
Creates and initializes a buffer object's data store

@arg target Specifies the target buffer object. The symbolic constant must be §GL_ARRAY_BUFFER or §GL_ELEMENT_ARRAY_BUFFER.
@arg size Initialize buffer size in bytes. If size is < 0, the size will be set to data.numElements*sizeof(float).
@data Specifies a pointer to data that will be copied into the data store for initialization, or null if no data is to be copied.
@arg usage Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STATIC_DRAW or GL_DYNAMIC_DRAW.
zglBufferSubData,int target,int offset,int size,Object data
Updates a subset of a buffer object's data store.

@arg target Specifies the target buffer object. The symbolic constant must be §GL_ARRAY_BUFFER or §GL_ELEMENT_ARRAY_BUFFER.
@arg offset Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
@arg size Specifies the size in bytes of the data store region being replaced.
@data Specifies a pointer to data that will be copied into the data store.
glBindBuffer,int target,int id
Bind a named buffer to a target

While a non-zero buffer object is bound to the §GL_ARRAY_BUFFER target, the vertex array pointer parameter that is traditionally interpreted as a pointer to client-side memory is instead interpreted as an offset within the buffer object measured in basic machine units.

While a non-zero buffer object is bound to the §GL_ELEMENT_ARRAY_BUFFER target, the indices parameter of §glDrawElements that is traditionally interpreted as a pointer to client-side memory is instead interpreted as an offset within the buffer object measured in basic machine units.
        
@arg target Specifies the target buffer object. The symbolic constant must be §GL_ARRAY_BUFFER or §GL_ELEMENT_ARRAY_BUFFER.
@arg id Specifies the name id of a buffer object.
glIsBuffer,int id:boolean
Query whether the given name id is bound to a buffer object

@arg id Specifies the name id of a buffer object.
@return 1(true) if the name id represents a buffer object, 0(false) otherwise.
zglVertexOffset,int size,int type,int stride,int offset
Set vertex pointer offset within currently bound buffer object

@arg size Specifies the number of coordinates per vertex; must be 2, 3, or 4. 
@arg type Specifies the data type of each coordinate in the array. Symbolic constants §GL_SHORT, §GL_INT, §GL_FLOAT, or §GL_DOUBLE are accepted.
@arg stride Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array.
@arg offset Specifies the offset to the first coordinate of the first vertex in the array.
zglNormalOffset,int type,int stride,int offset
Set normal pointer offset within currently bound buffer object

@arg type Specifies the data type of each coordinate in the array. Symbolic constants §GL_BYTE, §GL_SHORT, §GL_INT, §GL_FLOAT, or §GL_DOUBLE are accepted.
@arg stride Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array.
@arg offset Specifies the offset to the first coordinate of the first normal in the array.
zglColorOffset,int size,int type,int stride,int offset
Set color pointer offset within currently bound buffer object

@arg size Specifies the number of components per color; must 3 or 4. 
@arg type Specifies the data type of each color component in the array. Symbolic constants §GL_BYTE, §GL_UNSIGNED_BYTE, §GL_SHORT, §GL_UNSIGNED_SHORT, §GL_INT, §GL_UNSIGNED_INT, §GL_FLOAT, or §GL_DOUBLE are accepted.
@arg stride Specifies the byte offset between consecutive colors. If stride is zero (the initial value), the colors are understood to be tightly packed in the array.
@arg offset Specifies the offset to the first component of the first color element in the array.
zglTexCoordOffset,int size,int type,int stride,int offset
Set texture coordinate pointer offset within currently bound buffer object

@arg size Specifies the number of coordinates per array element. Must be 1, 2, 3 or 4
@arg type  Specifies the data type of each texture coordinate. Symbolic constants §GL_SHORT, §GL_INT, §GL_FLOAT, or §GL_DOUBLE are accepted.
@arg stride Specifies the byte offset between consecutive array elements. If stride is 0, the array elements are understood to be tightly packed.
@arg offset Specifies an offset to the first coordinate of the first element in the array.
zglLoadExtensions
Resolve OpenGL extensions.

Must be called after window/screen has been openend if the application wishes to use >v1.1 GL functions (e.g. buffer objects, see §zglGenBuffer)

DisplayList
Represents an OpenGL display list
GL_NONE,int
GL_TRUE,int
GL_FALSE,int
GL_BOOL,int
GL_BYTE,int
GL_UNSIGNED_BYTE,int
GL_SHORT,int
GL_UNSIGNED_SHORT,int
INT,int
GL_UNSIGNED_INT,int
GL_FLOAT,int
GL_2_BYTES,int
GL_3_BYTES,int
GL_4_BYTES,int
GL_DOUBLE,int
GL_FRONT_LEFT,int
GL_FRONT_RIGHT,int
GL_BACK_LEFT,int
GL_BACK_RIGHT,int
GL_LEFT,int
GL_RIGHT,int
GL_AUX0,int
GL_AUX1,int
GL_AUX2,int
GL_AUX3,int
GL_INDEX_ARRAY,int
GL_EDGE_FLAG_ARRAY,int
GL_ALPHA4,int
GL_ALPHA8,int
GL_ALPHA12,int
GL_ALPHA16,int
GL_LUMINANCE4,int
GL_LUMINANCE8,int
GL_LUMINANCE12,int
GL_LUMINANCE16,int
GL_LUMINANCE4_ALPHA4,int
GL_LUMINANCE6_ALPHA2,int
GL_LUMINANCE8_ALPHA8,int
GL_LUMINANCE12_ALPHA4,int
GL_LUMINANCE12_ALPHA12,int
GL_LUMINANCE16_ALPHA16,int
GL_INTENSITY4,int
GL_INTENSITY8,int
GL_INTENSITY12,int
GL_INTENSITY16,int
GL_RGB4,int
GL_RGB10,int
GL_RGB12,int
GL_RGB16,int
GL_RGBA2,int
GL_RGBA4,int
GL_RGBA12,int
GL_RGBA16,int
GL_MODELVIEW,int
GL_PROJECTION,int
GL_TEXTURE,int
GL_FOG_HINT,int
GL_LINE_SMOOTH_HINT,int
GL_PERSPECTIVE_CORRECTION_HINT,int
GL_POINT_SMOOTH_HINT,int
GL_POLYGON_SMOOTH_HINT,int
GL_FASTEST,int
GL_NICEST,int
GL_DONT_CARE,int
GL_ALPHA_TEST,int
GL_AUTO_NORMAL,int
GL_BLEND,int
GL_CULL_FACE,int
GL_DEPTH_TEST,int
GL_DITHER,int
GL_FOG,int
GL_LIGHT0,int
GL_LIGHT1,int
GL_LIGHT2,int
GL_LIGHT3,int
GL_LIGHT4,int
GL_LIGHT5,int
GL_LIGHT6,int
GL_LIGHT7,int
GL_LIGHTING,int
GL_LINE_SMOOTH,int
GL_LINE_STIPPLE,int
GL_NORMALIZE,int
GL_POINT_SMOOTH,int
GL_POLYGON_OFFSET_FILL,int
GL_POLYGON_OFFSET_POINT,int
GL_POLYGON_SMOOTH,int
GL_POLYGON_STIPPLE,int
GL_SCISSOR_TEST,int
GL_STENCIL_TEST,int
GL_TEXTURE_1D,int
GL_TEXTURE_2D,int
GL_TEXTURE_3D,int
GL_CLEAR,int
GL_SET,int
GL_COPY,int
GL_COPY_INVERTED,int
GL_NOOP,int
GL_INVERT,int
GL_AND,int
GL_NAND,int
GL_OR,int
GL_NOR,int
GL_XOR,int
GL_EQUIV,int
GL_AND_REVERSE,int
GL_AND_INVERTED,int
GL_OR_REVERSE,int
GL_OR_INVERTED,int
GL_RENDER,int
GL_FEEDBACK,int
GL_SELECT,int
GL_FLAT,int
GL_SMOOTH,int
GL_FRONT,int
GL_BACK,int
GL_FRONT_AND_BACK,int
GL_POINT,int
GL_LINE,int
GL_FILL,int
GL_ZERO,int
GL_ONE,int
GL_SRC_COLOR,int
GL_ONE_MINUS_SRC_COLOR,int
GL_SRC_ALPHA,int
GL_ONE_MINUS_SRC_ALPHA,int
GL_DST_ALPHA,int
GL_ONE_MINUS_DST_ALPHA,int
GL_DST_COLOR,int
GL_ONE_MINUS_DST_COLOR,int
GL_SRC_ALPHA_SATURATE,int
GL_CW,int
GL_CCW,int
GL_KEEP,int
GL_REPLACE,int
GL_INCR,int
GL_DECR,int
GL_NEVER,int
GL_LESS,int
GL_EQUAL,int
GL_LEQUAL,int
GL_GREATER,int
GL_NOTEQUAL,int
GL_GEQUAL,int
GL_ALWAYS,int
GL_POLYGON_OFFSET_LINE,int
GL_VERTEX_ARRAY,int
GL_NORMAL_ARRAY,int
GL_COLOR_ARRAY,int
GL_TEXTURE_COORD_ARRAY,int
GL_COLOR_LOGIC_OP,int
GL_S,int
GL_T,int
GL_R,int
GL_Q,int
GL_TEXTURE_GEN_S,int
GL_TEXTURE_GEN_T,int
GL_TEXTURE_GEN_R,int
GL_TEXTURE_GEN_Q,int
GL_EYE_LINEAR,int
GL_OBJECT_LINEAR,int
GL_SPHERE_MAP,int
GL_TEXTURE_GEN_MODE,int
GL_OBJECT_PLANE,int
GL_EYE_PLANE,int
GL_COLOR,int
GL_DEPTH,int
GL_STENCIL,int
GL_COLOR_INDEX,int
GL_STENCIL_INDEX,int
GL_DEPTH_COMPONENT,int
GL_RED,int
GL_GREEN,int
GL_BLUE,int
GL_ALPHA,int
GL_RGB,int
GL_RGBA,int
GL_LUMINANCE,int
GL_LUMINANCE8,int
GL_LUMINANCE_ALPHA,int
GL_LUMINANCE8_ALPHA8,int
GL_INTENSITY,int
GL_INTENSITY8,int
GL_RGB5,int
GL_RGB8,int
GL_RGB5_A1,int
GL_RGBA8,int
GL_RGB10_A2,int
GL_R3_G3_B2,int
GL_CURRENT_BIT,int
GL_ENABLE_BIT,int
GL_EVAL_BIT,int
GL_FOG_BIT,int
GL_HINT_BIT,int
GL_LIGHTING_BIT,int
GL_LINE_BIT,int
GL_LIST_BIT,int
GL_PIXEL_MODE_BIT,int
GL_POINT_BIT,int
GL_POLYGON_BIT,int
GL_POLYGON_STIPPLE_BIT,int
GL_SCISSOR_BIT,int
GL_TEXTURE_BIT,int
GL_TRANSFORM_BIT,int
GL_VIEWPORT_BIT,int
GL_ALL_ATTRIBS_BITS,int
GL_CLIENT_PIXEL_STORE_BIT,int
GL_CLIENT_VERTEX_ARRAY_BIT,int
GL_CLIENT_ALL_ATTRIB_BITS,int
GL_BGRA_EXT,int
GL_BGR_EXT,int
GL_SPOT_EXPONENT,int
GL_SPOT_CUTOFF,int
GL_CONSTANT_ATTENUATION,int
GL_LINEAR_ATTENUATION,int
GL_QUADRATIC_ATTENUATION,int
GL_POINTS,int
GL_LINES,int
GL_LINE_STRIP,int
GL_LINE_LOOP,int
GL_TRIANGLES,int
GL_TRIANGLE_STRIP,int
GL_TRIANGLE_FAN,int
GL_QUADS,int
GL_QUAD_STRIP,int
GL_POLYGON,int
GL_LINEAR,int
GL_EXP,int
GL_EXP2,int
GL_COLOR_BUFFER_BIT,int
GL_DEPTH_BUFFER_BIT,int
GL_ACCUM_BUFFER_BIT,int
GL_STENCIL_BUFFER_BIT,int
GL_CLIP_PLANE0,int
GL_CLIP_PLANE1,int
GL_CLIP_PLANE2,int
GL_CLIP_PLANE3,int
GL_CLIP_PLANE4,int
GL_CLIP_PLANE5,int
GL_VENDOR,int
GL_RENDERER,int
GL_VERSION,int
GL_EXTENSIONS,int
GL_CLAMP_TO_EDGE,int
GL_NORMAL_MAP,int
GL_REFLECTION_MAP,int
GL_TEXTURE_CUBE_MAP,int
GL_TEXTURE_BINDING_CUBE_MAP,int
GL_TEXTURE_CUBE_MAP_POSITIVE_X,int
GL_TEXTURE_CUBE_MAP_NEGATIVE_X,int
GL_TEXTURE_CUBE_MAP_POSITIVE_Y,int
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,int
GL_TEXTURE_CUBE_MAP_POSITIVE_Z,int
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,int
GL_ARRAY_BUFFER,int
GL_ELEMENT_ARRAY_BUFFER,int
GL_ARRAY_BUFFER_BINDING,int
GL_ELEMENT_ARRAY_BUFFER_BINDING,int
GL_VERTEX_ARRAY_BUFFER_BINDING,int
GL_NORMAL_ARRAY_BUFFER_BINDING,int
GL_COLOR_ARRAY_BUFFER_BINDING,int
GL_INDEX_ARRAY_BUFFER_BINDING,int
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING,int
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING,int
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING,int
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING,int
GL_WEIGHT_ARRAY_BUFFER_BINDING,int
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,int
GL_READ_ONLY,int
GL_WRITE_ONLY,int
GL_READ_WRITE,int
GL_BUFFER_ACCESS,int
GL_BUFFER_MAPPED,int
GL_BUFFER_MAP_POINTER,int
GL_STREAM_DRAW,int
GL_STREAM_READ,int
GL_STREAM_COPY,int
GL_STATIC_DRAW,int
GL_STATIC_READ,int
GL_STATIC_COPY,int
GL_DYNAMIC_DRAW,int
GL_DYNAMIC_READ,int
GL_DYNAMIC_COPY,int
alloc
   Generate new display list name id

   This is a wrapper for the glGenLists() native function.
   free
   Free display list

   This is a wrapper for the glDeleteLists() native function.
   begin
   Begin recording of display list

   This is a wrapper for the glNewList() native function (GL_COMPILE_AND_EXECUTE)
   end
   End recording of display list and execute it.

   This is a wrapper for the glEndList() native function.
   draw
   Execute display list

   This is a wrapper for the glCallList() native function.
   setName,String name
   Set display list name

   @arg name String to copy to the name field
   getName:String
   Query the display list name

   @return Reference to name field
   getId:int
   Query display list name id

   @return Display list name id or -1 if this object stores no valid display list.
   @see glCallList
   Texture
Represents an OpenGL texture
TEX_16BIT,int
Hint OpenGL to store that texture in a 16bit per pixel format
TEX_REPEAT_S,int
Repeat texels along the x axis
TEX_REPEAT_T,int
Repeat texels along the y axis
TEX_DELETE,int
Delete bitmap after texture has been uploaded to OpenGL
TEX_AUTOMIPMAP,int
Automatically generate mip maps
TEX_MODULATE,int
Allow the texels to be modulated by the current OpenGL color
TEX_BLEND,int
TEX_DECAL,int
TEX_REPLACE,int
TEX_MINFILTERLINEAR,int
TEX_MINFILTERTRILINEAR,int
TEX_MAGFILTERLINEAR,int
TEX_MAGFILTERTRILINEAR,int
TEX_ALPHA,int
Use alpha channel
TEX_UPLOADED,int
This flag is set when the texture has been uploaded to OpenGL
TEX_1D,int
Use GL_TEXTURE_1D texture target
TEX_FORCEHOSTBYTEORDER,int
Hint that the bitmap uses the host byte order (e.g. A,B,G,R on little endian)
TEX_INTENSITY,int
Upload 8bit texture in INTENSITY format
TEX_CLAMPTOEDGE_S,int
TEX_CLAMPTOEDGE_T,int
TEX_REPEATMASK,int
TEX_ENVMASK,int
TEX_FILTERMASK,int
setFlags,int flags
    Set texture flags.

    These flags should usually be set before uploading the texture to OpenGL.
    _getFlags:int
    _loadImage,String pakFileName,int newWidth,int newHeight,int newNumBytes:boolean
    Load local image and scale to the given geometry and depth.

    @arg pakFileName Logic PAK file name
    @arg newWidth If 0, keep original image width. Otherwise, scale loaded image to this width
    @arg newHeight If 0, keep original image height. Otherwise, scale loaded image to this height
    @arg newNumBytes If 0, keep original image depth. Otherwise, scale loaded image to the given number of bytes per pixel
    _saveImage,String localFileName:boolean
    _upload
    _setScreen,Texture srctex
    Share bitmap data with other Texture
    _alloc,int width,int height,int numBytesPerPixel:boolean
    Allocate bitmap data
    _scaleFrom,Texture src
    _bind
    Bind texture to associated OpenGL texture target
    _free
    Free bitmap data and OpenGL texture handle
    _freeImage
    Free bitmap data
    setFlags
    _setScreenArea,Texture srctex,int ltx,int lty,int width,int height
    _setPriority,float prio:float
    Set OpenGL texture priority
    _setEnvColor,int argb32
    setFlags
    _copyRegion,Texture srctex,int px,int py,int w,int h,int dx,int dy
    _clear,int argb32
    Fill pixels with given clear color
    _unload
    Free OpenGL texture handle
    _getSx:int
    Query texture width
    _getSy:int
    Query texture height
    _getZ:int
    Query number of bytes per pixel
    _loadLocalImage,String localFileName,int newWidth,int newHeight,int newNumBytes:boolean
    Load local image and scale to the given geometry and depth.

    @arg localFileName Local file name
    @arg newWidth If 0, keep original image width. Otherwise, scale loaded image to this width
    @arg newHeight If 0, keep original image height. Otherwise, scale loaded image to this height
    @arg newNumBytes If 0, keep original image depth. Otherwise, scale loaded image to the given number of bytes per pixel
    _drawPixels2i,int x,int y
    Draw texture via glDrawPixels
    _drawPixels2f,float x,float y
    Draw texture via glDrawPixels
    _drawPixels3f,float x,float y,float z
    Draw texture via glDrawPixels
    _swapScreen,Texture tex
    Swap bitmap data
    _setFgcolor,int argb32
    Set foreground color for image manipulation helpers
    _getFgcolor:int
    _getId:int
    Query OpenGL texture name id
    _setId,int name
    Set OpenGL texture name id
    _applyColorMap,Texture tex,Texture cmap
    Apply colormap to tex and store result in this texture
    _colorKeyToAlpha,int argb32
    _grayscale:boolean
    _interleaveAlpha,Texture alphaTex
    _adjustGamma,float gamma
    _adjustBrightness,float brightness
    _blend,Texture srca,Texture srcb,byte ratio
    _countPixels,int argb32:float

    _multiply,Texture srca,Texture srcb
    _setXY32,int x,int y,int argb32
    Put pixel
    _getXY32,int x,int y:int
    Query pixel
    _drawPolygon,Object array,int argb32
    Simple polygon renderer

    Was once used as a collision detection helper
    _drawLine,int qx,int qy,int px,int py,int argb32
    Simple bresenham line renderer

    Was once used as a collision detection helper
    _drawFilledBox,int px,int py,int sx,int sy,int argb32
    _simpleBlur,Texture src
    _simpleBlurX,Texture src
    _simpleBlurY,Texture src
    _scroll,int dx,int dy
    _expand2n
    Automatically resize image and add black borders if width or height is not a power of two.
    _alloc2n,int width,int height,int bytesPerPixel:boolean
    Allocate bitmap
    _createMask,int colorKey
    _getStride:int
    Query number of bytes per scanline
    _update
    (Re-)Upload to OpenGL
    _updateRegion,int x,int y,int w,int h
    (Re-) upload region to OpenGL
    _renderFixedText,Texture fontTex,int charWidth,String text,int x,int y,IntArray colors,IntArray attributes
    Simple fixed font text renderer
    _setMipMapLevel,int level
    Set OpenGL mip map level
    _getMipMapLevel:int
    Query OpenGL mip map level
    _setTarget,int target
    Set OpenGL texture target
    _getTarget:int
    Query OpenGL texture target
    _flipY
    Rotate bitmap 180 degrees about the x axis

    Remember that (0; 0) is the left/bottom corner in OpenGL..
    