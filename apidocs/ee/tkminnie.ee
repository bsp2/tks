tkminnie
tkminnie
MinnieSetup
 MINNIE_PATH_TYPE_CONVEX
 MINNIE_PATH_TYPE_CONCAVE
 MINNIE_PATH_TYPE_EVENODD
 MINNIE_PATH_TYPE_IMMEDIATE
 MINNIE_LINEJOIN_NONE
 MINNIE_LINEJOIN_MITER
 MINNIE_LINEJOIN_ROUND
 MINNIE_LINEJOIN_BEVEL
 MINNIE_LINECAP_NONE
 MINNIE_LINECAP_BUTT
 MINNIE_LINECAP_ROUND
 MINNIE_LINECAP_SQUARE
 minBegin
Free paths, reset state and start new drawing.

@see minEnd
minEnd
End drawing

@see minBegin
minFreeDynamic
Free dynamically allocated memory (paths)

@see minBegin
minSetStrokeScale,float scale
Set stroke width scaling factor. Applied to next path draw calls.
minSetStrokeOffset,float offset
Set stroke width offset. Applied to next path draw calls.
minGetWidth:int
Get canvas width (pixels)
minGetHeight:int
Get canvas height (pixels)
minGetColorByIndex,int idx:int
Get ARGB32 color from current palette.

Can e.g. be used to query the background color of an imported SVG object.
minSetFramebufferOverride,int fbIdx,Texture tex,int w,int h,int pitch:boolean
Override framebuffer geometry and storage. Only applies to SW render mode.
minInitScratchBuffers,Buffer buf,int defPointsPerPath,int maxPointsPerPath,int maxClippedPointsPerPath,int maxExtrudedVerticesPerPath,int maxClippedTrisPerPath:int
Initialize scratchbuffer or calculate required scratch buffer memory.
@arg Buffer Scratch buffer storage. null=don't initialize and simply return required buffer size
@arg defPointsPerPath Typical number of control points per path
@arg maxPointsPerPath Maximum number of control points per path
@arg maxClippedPointsPerPath Maximum number of clipped points per path
@arg maxExtrudedVerticesPerPath Maximum number of extruded (line-)vertices per path
@arg maxClippedTrisPerPath Maximum number of clipped triangles per path
minParseBuffer,Buffer buf:boolean
Parse MIB stream.

The MIB data can either be generated by the application, or be converted from e.g. an SVG file via an offline preprocessor.

@arg buf §File or §Buffer stream
minDebugPrintAllocStats
Debug-print allocation statistics to the console
minDebugPrintPathStats
Debug-print path statistics to the console
minResetAllocStats
Reset allocation debug statistics
minGetTotalNumPoints:int
Query total number of points (debug)
minGetTotalNumLines:int
Query total number of lines (debug)
minGetTotalNumLineStrips:int
Query total number of line strips (debug)
minGetTotalNumTris:int
Query total number of triangles (debug)
minGetTotalNumTrisTex:int
Query total number of textured triangles (debug)
minGetTotalNumRects:int
Query total number of rectangles (debug)
minGetTotalNumEllipses:int
Query total number of ellipses and circles (debug)
minSetEnableDraw,boolean bEnable
Enable or disable path drawing (debug)
minSetEnableDrawSW,boolean bEnable
Enable or disable software rasterizer (debug)
minSetEnableRenderStrokes,boolean bEnable
Enable or disable stroked path rendering (debug)

@see minGetEnableRenderStrokes
minGetEnableRenderStrokes:boolean
Query stroked path rendering enable-state (debug)

@see minSetEnableRenderStrokes
minSetEnableRenderJoinCap,boolean bEnable
Enable or disable line joints and caps (debug)

@see minGetEnableRenderJoinCap
minGetEnableRenderJoinCap:boolean
Query line join and cap enable-state (debug)

@see minSetEnableRenderJoinCap
minSetEnableRenderFillConcave,boolean bEnable
Enable or disable concave path rendering (debug)

@see minGetEnableRenderFillConcave
minGetEnableRenderFillConcave:boolean
Query concave path rendering enable-state (debug)

@see minSetEnableRenderFillConcave
minSetEnableRenderFillEvenOdd,boolean bEnable
Enable or disable even-odd path rendering (debug)

@see minGetEnableRenderFillEvenOdd
minGetEnableRenderFillEvenOdd:boolean
Query even-odd path rendering enable-state (debug)

@see minSetEnableRenderFillEvenOdd
minSetEnableEdgeAA,boolean bEnable
Enable or disable edge AA triangle rendering (experimental)

@see minGetEnableEdgeAA
minGetEnableEdgeAA:boolean
Query edge AA triangle rendering enable-state (experimental)

@see minSetEnableEdgeAA
minSetEnableTesselateConcave,boolean bEnable
Enable or disable concave polygon software tesselation (false=use HW accelerated polygons)

@see minGetEnableTesselateConcave
minGetEnableTesselateConcave:boolean
Query concave polygon software tesselation enable-state

@see minSetEnableTesselateConcave
minSetSwTesselateSizeThreshold,int sizeThreshold
Bounding box area threshold for polygon software tesselation. 0=disable SW tesselation

@see minGetSwTesselateSizeThreshold
minGetSwTesselateSizeThreshold:int
Query software tesselation polygon bounding box area threshold.

@see minSetSwTesselateSizeThreshold
minSetEnableForceConcaveEvenOdd,boolean bEnable
Force concave polygons to be rendered using the even-odd code paths

@see minGetEnableForceConcaveEvenOdd
minGetEnableForceConcaveEvenOdd:boolean
Query concave-polygons-via-even-odd-code-path enable-state

@see minSetEnableForceConcaveEvenOdd
minSetEnableUniformColors,boolean bEnable
Enable or disable uniform colors.

When enabled, colors are passed via shader uniforms (constant for the duration of a draw call, decreases memory usage).
When disabled, colors are passed via shader attributes, which allows multiple (triangle) draw calls to be merged (but increases memory usage).

@see minGetEnableUniformColors
minGetEnableUniformColors:boolean
Query uniform-colors enable-state.

@see minSetEnableUniformColors
minSetStrokeWLineStripThreshold,float threshold
Set line stroke width software tesselation threshold (999999=disable SW tesselation).

Fall back to software tesselation if the stroke width exceeds the thresold.

@see minGetStrokeWLineStripThreshold
minGetStrokeWLineStripThreshold:float
Query line stroke width software tesselation threshold

@see minSetStrokeWLineStripThreshold
minSetStrokeWLineJoinThreshold,float threshold
Set stroke width line-join-auto-disable threshold.

Allows line joints to be disabled for narrow lines.

@see minGetStrokeWLineJoinThreshold
minGetStrokeWLineJoinThreshold:float
Query line-join-auto-disable threshold.

@see minSetStrokeWLineJoinThreshold
minSetVertexBufferExportOFS,Stream ofs
Set vertex attribute output stream.

@arg ofs Output stream (usually a §Buffer)

@see minSetDrawListExportOFS
minSetDrawListExportOFS,Stream ofs
Set draw list output stream.

@arg ofs Output stream (usually a §Buffer)

@see minSetVertexBufferExportOFS
minIsEdgeAA:boolean
experimental
minIsVertexFix16:boolean
Query whether 14:2 fixed point vertex attribute mode was enabled at compile time
minIsEdgeAAScaleFix16:boolean
experimental
minSeg,int numSeg
Set number of subdivisions for next bezier curve / arc path segments
minMoveTo,float x,float y
Move path cursor to absolute position

@arg x X position (abs)
@arg y Y position (abs)
minLineTo,float dstX,float dstY
Add line segment to current path

@arg dstX Destination X (abs)
@arg dstY Destination Y (abs)
minCubicTo,float c1x,float c1y,float c2x,float c2y,float dstX,float dstY
Add cubic spline segment to current path

@arg c1x Control point 1 X (abs)
@arg c1y Control point 1 Y (abs)
@arg c2x Control point 2 X (abs)
@arg c2y Control point 2 Y (abs)
@arg dstX Destination X (abs)
@arg dstY Destination Y (abs)

@see minCubicMirrorTo
minCubicMirrorTo,float c2x,float c2y,float dstX,float dstY
Add smoothed / mirrored cubic spline segment to current path.

The implicite control point 1 is calculated by mirroring the previous segment's control point 2.

@arg c2x Control point 2 X (abs)
@arg c2y Control point 2 Y (abs)
@arg dstX Destination X (abs)
@arg dstY Destination Y (abs)

@see minCubicTo
minArcTo,float rx,float ry,float rot,boolean bLargeArc,boolean bArcSweep,float dstX,float dstY
Add elliptic arc segment to current path

@arg rx Radius x
@arg ry Radius y
@arg rot Rotation (radian measure)
@arg bLargeArc Large arc flag
@arg bArcSweep Arc sweep flag
@arg dstX Destination X (abs)
@arg dstY Destination Y (abs)
minRect,float w,float h
Add rectangle segment to current path (cursor position denotes left / top corner)
@arg w Width
@arg h Height

@see minRoundRect
minRoundRect,float w,float h,float rx,float ry
Add rounded rectangle segment to current path (cursor position denotes left / top corner).
@arg w Width
@arg h Height
@arg rx Corner radius x
@arg ry Corner radius y

@see minRect
minEllipse,float rx,float ry
Add ellipse segment to current path (cursor position denotes center)
@arg rx Radius x
@arg ry Radius y

@see minCircle
minCircle
Add circle segment to current path (cursor position denotes center)
@arg r Radius

@see minEllipse
minBeginPathEx,int pathType:int
Begin new path definition.

@arg pathType See §MINNIE_PATH_TYPE_CONVEX, §MINNIE_PATH_TYPE_CONCAVE, §MINNIE_PATH_TYPE_EVENODD, §MINNIE_PATH_TYPE_IMMEDIATE

@return Path id

@see minBeginPath, minBeginPathConvex, minBeginPathConcave, minBeginPathEvenOdd, minEndPath
minBeginPath:int
Begin new Even-Odd path definition
@return Path id

@see minEndPath
minBeginPathConvex:int
Begin new Convex path definition
@return Path id

@see minEndPath
minBeginPathConcave:int
Begin new Concave path definition
@return Path id

@see minEndPath
minBeginPathEvenOdd:int
Begin new Even-Odd path definition
@return Path id

@see minEndPath
minBeginPathImmediate:int
Begin new Immediate path definition.

Graphics elements within immediate paths are rendered immediately, i.e. they do not require separate draw-path calls.

Immediate paths are particularly useful for graphics elements like UV-textured triangles and rectangles, which cannot be added to regular paths.

@return Path id

@see minEndImmediate
minEndImmediate
End Immediate path definition
minEndPath,boolean bClosed
End path definition
minEndPathOpen
End path definition and keep path open (e.g. polylines)
minEndPathClosed
End path definition and close path (connect last to first, e.g. polygons)
minBeginSubEx,int pathType:int
Begin new sub-path definition.

Sub paths can e.g. be used to cut holes into the parent (even-odd type) path.
@return Sub-path id
minBeginSub:int
Begin new Even-Odd sub-path definition
@return Sub-path id
minBeginSubConvex:int
Begin new Convex sub-path definition
@return Sub-path id
minBeginSubConcave:int
Begin new Concave sub-path definition
@return Sub-path id
minBeginSubEvenOdd:int
Begin new Even-Odd sub-path definition
@return Sub-path id
minEndSub,boolean bClosed
End sub-path definition
minEndSubOpen
End sub-path definition and keep sub-path open
minEndSubClosed
End sub-path definition and close sub-path (connect last to first)
minStrokeWidth,float w
Set line stroke width.

The total line width is (2 * strokeW).
minFill
Select fill mode for next path draw call
minMiterLimit,float l
Set miter limit.

When the miter line joint distance exceeds the miter limit, a bevel line joint will be rendered instead.
minColor
Set ARGB32 color for next path draw call
minJoinCap,int joinCap
Set line joint and cap type (short form).
minJoin,int joinType
Select line joint type (short form)
minJoinNone
Disable line joints
minJoinMiter
Select Miter line joints
minJoinRound
Select Round line joints
minJoinBevel
Select Bevel line joints
minCap,int capType
Select line cap type (short form)
minCapNone
Disable line caps
minCapRound
Select Round line caps
minCapButt
Select Butt line caps
minDrawPath,int pathId
Draw previously defined path
minBindTexture,int texId,boolean bRepeat,boolean bFilter
Bind 2D texture.

Applies to texture triangle and rectangle draw calls.

@arg texId OpenGL texture id
@arg bRepeat true=repeat texture false=clamp to edge
@arg bFilter true=enable bilinear filter false=use nearest neighbour sampling

@see minTriangleTexUVFlat
@see minTriangleTexUVGouraud
@see minRectTexUVFlat
@see minRectTexUVGouraud
@see minTriangleTexUVFlatDecal
@see minTriangleTexUVGouraudDecal
@see minRectTexUVFlatDecal
@see minRectTexUVGouraudDecal
@see minUnbindTexture
minUnbindTexture
Unbind texture

@see minBindTexture
minTextureDecalAlpha,float decalAlpha
Select alpha for 'decal' texture draw calls

@see minTriangleTexUVFlatDecal
@see minTriangleTexUVGouraudDecal
@see minRectTexUVFlatDecal
@see minRectTexUVGouraudDecal
@see minBindTexture
@see minUnbindTexture
minTriangleTexUVFlat,float x1,float y1,float u1,float v1,float x2,float y2,float u2,float v2,float x3,float y3,float u3,float v3
Draw a texture mapped triangle.

Multiple consecutive draw calls will be merged automatically.

@arg x1 Vertex 1 x
@arg y1 Vertex 1 y
@arg u1 Vertex 1 u texture coordinate (0..1)
@arg v1 Vertex 1 v texture coordinate (0..1)
@arg x2 Vertex 2 x
@arg y2 Vertex 2 y
@arg u2 Vertex 2 u texture coordinate (0..1)
@arg v2 Vertex 2 v texture coordinate (0..1)
@arg x3 Vertex 3 x
@arg y3 Vertex 3 y
@arg u3 Vertex 3 u texture coordinate (0..1)
@arg v3 Vertex 3 v texture coordinate (0..1)

@see minTriangleTexUVGouraud
@see minRectTexUVFlat
@see minRectTexUVGouraud
@see minTriangleTexUVFlatDecal
@see minTriangleTexUVGouraudDecal
@see minRectTexUVFlatDecal
@see minRectTexUVGouraudDecal
@see minBindTexture
@see minUnbindTexture
minTriangleTexUVFlatDecal,float x1,float y1,float u1,float v1,float x2,float y2,float u2,float v2,float x3,float y3,float u3,float v3
Draw a texture mapped triangle. The texture is crossfaded with the current fill color according to §minTextureDecalAlpha.

Multiple consecutive draw calls will be merged automatically.

@arg x1 Vertex 1 x
@arg y1 Vertex 1 y
@arg u1 Vertex 1 u texture coordinate (0..1)
@arg v1 Vertex 1 v texture coordinate (0..1)
@arg x2 Vertex 2 x
@arg y2 Vertex 2 y
@arg u2 Vertex 2 u texture coordinate (0..1)
@arg v2 Vertex 2 v texture coordinate (0..1)
@arg x3 Vertex 3 x
@arg y3 Vertex 3 y
@arg u3 Vertex 3 u texture coordinate (0..1)
@arg v3 Vertex 3 v texture coordinate (0..1)

@see minTriangleTexUVFlat
@see minTriangleTexUVGouraud
@see minRectTexUVFlat
@see minRectTexUVGouraud
@see minTriangleTexUVGouraudDecal
@see minRectTexUVFlatDecal
@see minRectTexUVGouraudDecal
@see minBindTexture
@see minUnbindTexture
minTriangleTexUVGouraud,float x1,float y1,float u1,float v1,int c32v1,float x2,float y2,float u2,float v2,int c32v2,float x3,float y3,float u3,float v3,int c32v3
Draw a texture mapped, gouraud shaded triangle.

Multiple consecutive draw calls will be merged automatically.

@arg x1 Vertex 1 x
@arg y1 Vertex 1 y
@arg u1 Vertex 1 u texture coordinate (0..1)
@arg v1 Vertex 1 v texture coordinate (0..1)
@arg c32v1 Vertex 1 ARGB32 color
@arg x2 Vertex 2 x
@arg y2 Vertex 2 y
@arg u2 Vertex 2 u texture coordinate (0..1)
@arg v2 Vertex 2 v texture coordinate (0..1)
@arg c32v2 Vertex 2 ARGB32 color
@arg x3 Vertex 3 x
@arg y3 Vertex 3 y
@arg u3 Vertex 3 u texture coordinate (0..1)
@arg v3 Vertex 3 v texture coordinate (0..1)
@arg c32v3 Vertex 3 ARGB32 color

@see minTriangleTexUVFlat
@see minRectTexUVFlat
@see minRectTexUVGouraud
@see minTriangleTexUVFlatDecal
@see minTriangleTexUVGouraudDecal
@see minRectTexUVFlatDecal
@see minRectTexUVGouraudDecal
@see minBindTexture
@see minUnbindTexture
minTriangleTexUVGouraudDecal,float x1,float y1,float u1,float v1,int c32v1,float x2,float y2,float u2,float v2,int c32v2,float x3,float y3,float u3,float v3,int c32v3
Draw a texture mapped, gouraud shaded triangle. The texture is crossfaded with the current fill color according to §minTextureDecalAlpha.

Multiple consecutive draw calls will be merged automatically.

@arg x1 Vertex 1 x
@arg y1 Vertex 1 y
@arg u1 Vertex 1 u texture coordinate (0..1)
@arg v1 Vertex 1 v texture coordinate (0..1)
@arg c32v1 Vertex 1 ARGB32 color
@arg x2 Vertex 2 x
@arg y2 Vertex 2 y
@arg u2 Vertex 2 u texture coordinate (0..1)
@arg v2 Vertex 2 v texture coordinate (0..1)
@arg c32v2 Vertex 2 ARGB32 color
@arg x3 Vertex 3 x
@arg y3 Vertex 3 y
@arg u3 Vertex 3 u texture coordinate (0..1)
@arg v3 Vertex 3 v texture coordinate (0..1)
@arg c32v3 Vertex 3 ARGB32 color

@see minTriangleTexUVFlat
@see minTriangleTexUVGouraud
@see minRectTexUVFlat
@see minRectTexUVGouraud
@see minTriangleTexUVFlatDecal
@see minRectTexUVFlatDecal
@see minRectTexUVGouraudDecal
@see minBindTexture
@see minUnbindTexture
minRectTexUVFlat,float x,float y,float w,float h,float ul,float vt,float ur,float vb
Draw a texture mapped rectangle

Multiple consecutive draw calls will be merged automatically.

@arg x X position
@arg y Y position
@arg w Width
@arg h Height
@arg ul Left u texture coordinate
@arg vt Top v texture coordinate
@arg ur Right u texture coordinate
@arg vb Bottom v texture coordinate

@see minTriangleTexUVFlat
@see minTriangleTexUVGouraud
@see minRectTexUVGouraud
@see minTriangleTexUVFlatDecal
@see minTriangleTexUVGouraudDecal
@see minRectTexUVFlatDecal
@see minRectTexUVGouraudDecal
@see minBindTexture
@see minUnbindTexture
minRectTexUVFlatDecal,float x,float y,float w,float h,float ul,float vt,float ur,float vb
Draw a texture mapped rectangle. The texture is crossfaded with the current fill color according to §minTextureDecalAlpha.

Multiple consecutive draw calls will be merged automatically.

@arg x X position
@arg y Y position
@arg w Width
@arg h Height
@arg ul Left u texture coordinate
@arg vt Top v texture coordinate
@arg ur Right u texture coordinate
@arg vb Bottom v texture coordinate

@see minTriangleTexUVFlat
@see minTriangleTexUVGouraud
@see minRectTexUVFlat
@see minRectTexUVGouraud
@see minTriangleTexUVFlatDecal
@see minTriangleTexUVGouraudDecal
@see minRectTexUVGouraudDecal
@see minBindTexture
@see minUnbindTexture
minRectTexUVGouraud,float x,float y,float w,float h,float ul,float vt,float ur,float vb,int c32lt,int c32rt,int c32rb,int c32lb
Draw a texture mapped, gouraud shaded rectangle.

Multiple consecutive draw calls will be merged automatically.

@arg x X position
@arg y Y position
@arg w Width
@arg h Height
@arg ul Left u texture coordinate
@arg vt Top v texture coordinate
@arg ur Right u texture coordinate
@arg vb Bottom v texture coordinate
@arg c32lt Left/Top ARGB32 color
@arg c32rt Right/Top ARGB32 color
@arg c32rb Right/Bottom ARGB32 color
@arg c32lb Left/Bottom ARGB32 color

@see minTriangleTexUVFlat
@see minTriangleTexUVGouraud
@see minRectTexUVFlat
@see minTriangleTexUVFlatDecal
@see minTriangleTexUVGouraudDecal
@see minRectTexUVFlatDecal
@see minRectTexUVGouraudDecal
@see minBindTexture
@see minUnbindTexture
minRectTexUVGouraudDecal,float x,float y,float w,float h,float ul,float vt,float ur,float vb,int c32lt,int c32rt,int c32rb,int c32lb
Draw a texture mapped, gouraud shaded rectangle. The texture is crossfaded with the current fill color according to §minTextureDecalAlpha.

Multiple consecutive draw calls will be merged automatically.

@arg x X position
@arg y Y position
@arg w Width
@arg h Height
@arg ul Left u texture coordinate
@arg vt Top v texture coordinate
@arg ur Right u texture coordinate
@arg vb Bottom v texture coordinate
@arg c32lt Left/Top ARGB32 color
@arg c32rt Right/Top ARGB32 color
@arg c32rb Right/Bottom ARGB32 color
@arg c32lb Left/Bottom ARGB32 color

@see minTriangleTexUVFlat
@see minTriangleTexUVGouraud
@see minRectTexUVFlat
@see minRectTexUVGouraud
@see minTriangleTexUVFlatDecal
@see minTriangleTexUVGouraudDecal
@see minRectTexUVFlatDecal
@see minBindTexture
@see minUnbindTexture
