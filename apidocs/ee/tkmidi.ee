tkmidi
tkmidi
RecordedMIDIEvent,Object

Represents a time-stamped incoming MIDI event.
getMillisec:int
        Query timestamp

        @return timestamp
      isLongMessage:boolean
        Query whether this is a "long" MIDI message.

       @return true(1) if message is longer than 4 bytes, false(0) otherwise.
      getShortMessage:int
        Return <=4 byte message as host byte order integer

       @return Message data
      getSize:int
        Query message size

       @return Message size
      copyToStream,Stream stream
       Copy message data to stream object (e.g. §Buffer, §File etc..)

      @arg stream Where to write the message data
      getMidiMapEventType:byte
        Return §MIDIMapEventType type id

       @return Event type
      getNrpnId:short
         Return (N)RPN id. Only valid if midiMapEventType is TYPE_RPN or TYPE_NRPN.

         @return (N)RPN id
      getDataEntry:short
         Return (N)RPN data entry value. Only valid if midiMapEventType is TYPE_RPN or TYPE_NRPN.

         @return (N)RPN data entry value
      MIDIIn,Object
Represents a MIDI input device.


The MIDIIn class uses a ring buffer to record incoming MIDI events.

Each event is time-stamped for later evaluation in e.g. a sequencer application.
openByName,String devName:boolean
    Open MIDI input device by name

    @arg devName Name of the input device (platform dependent)
    @return true(1) if the device has been opened, false(0) if an error occured.
   openByIdx,int devIdx:boolean
    Open MIDI input device by index

    @arg devIdx Index of the input device
    @return true(1) if the device has been opened, false(0) if an error occured.
   openLocalMIDI
    Pseudo-open function for shared memory LocalMIDI input
    @see parseBuffer
   close
    Close MIDI device
   start
    Start input event recording
   stop
    Stop input event recording
   reset
    Reset MIDI device
   clearEvents
    Discard previously recorded MIDI events
   getDeviceName:String
    Query MIDI device name

    @return MIDI device name
   getDeviceIdx:int
    Return device index.

    This can be used for finding the matching output device for an input device.
   getNextEvent:RecordedMIDIEvent
     Return RecordedMIDIEvent* or null if no event is available

     @return Next MIDI event or null
   waitNextEvent,int timeout:RecordedMIDIEvent
     Wait for next event and return RecordedMIDIEvent* or null if no event is available and the timeout expired.

     (note) mainly used for debugging purposes (test programs)

     @arg timeout Maximum wait time in milliseconds
     @return Next MIDI event or null
   getNumEvents:int
     Query number of recorded input events

    @return Number of recorded input events
   GetNumDevices:int
     Query number of available MIDI input devices (pseudo-static method)

     @return Number of available MIDI input devices
   GetDeviceNameByIdx,int devIdx:String
     Query device name by index (pseudo-static method)

     @arg devIdx MIDI input device index (0..GetNumDevices())
     @return Device name string
   setFltNoteOff,boolean
      Configure note-off filter.

      @arg bEnable true to enable note off filter, false to disable it.
   getFltNoteOff:boolean
      Query note-off filter.

      @return true if note off filter is currently enabled
   setFltNoteOn,boolean
      Configure note-off filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltNoteOn:boolean
      Query note-on filter.

      @return true if filter is currently enabled
   setFltPolyPressure,boolean
      Configure polyphonic key pressure filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltPolyPressure:boolean
      Query polyphonic key pressure filter.

      @return true if filter is currently enabled
   setFltCC,boolean
      Configure continuous controller filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltCC:boolean
      Query continuous controller filter.

      @return true if filter is currently enabled
   setFltProgramChange,boolean
      Configure program change filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltProgramChange:boolean
      Query program change filter.

      @return true if filter is currently enabled
   setFltChannelPressure,boolean
      Configure channel pressure filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltChannelPressure:boolean
      Query channel pressure filter.

      @return true if filter is currently enabled
   setFltPitchbend,boolean
      Configure pitch bend filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltPitchbend:boolean
      Query pitch bend filter.

      @return true if filter is currently enabled
   setFltSysEx,boolean
      Configure system exclusive filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltSysEx:boolean
      Query system exclusive filter.

      @return true if filter is currently enabled
   setFltSysComTimeCode,boolean
      Configure system common MIDI quarter tick time code filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltSysComTimeCode:boolean
      Query system common MIDI quarter tick time code filter.

      @return true if filter is currently enabled
   setFltSysComSongPosition,boolean
      Configure system common song position filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltSysComSongPosition:boolean
      Query system common song position filter.

      @return true if filter is currently enabled
   setFltSysComSongSelect,boolean
      Configure system common song select filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltSysComSongSelect:boolean
      Query system common song select filter.

      @return true if filter is currently enabled
   setFltSysComTuneRequest,boolean
      Configure system common tune request filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltSysComTuneRequest:boolean
      Query system common tune request filter.

      @return true if filter is currently enabled
   setFltSysRTTimingClock,boolean
      Configure system realtime timing clock filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltSysRTTimingClock:boolean
      Query system realtime timing clock filter.

      @return true if filter is currently enabled
   setFltSysRTStart,boolean
      Configure system realtime start filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltSysRTStart:boolean
      Query system realtime start filter.

      @return true if filter is currently enabled
   setFltSysRTContinue,boolean
      Configure system realtime continue filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltSysRTContinue:boolean
      Query system realtime continue filter.

      @return true if filter is currently enabled
   setFltSysRTStop,boolean
      Configure system realtime stop filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltSysRTStop:boolean
      Query system realtime stop filter.

      @return true if filter is currently enabled
   setFltSysRTActiveSensing,boolean
      Configure system realtime active sensing filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltSysRTActiveSensing:boolean
      Query system realtime active sensing filter.

      @return true if filter is currently enabled
   setFltSysRTSystemReset,boolean
      Configure system realtime system reset filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltSysRTSystemReset:boolean
      Query system realtime system reset filter.

      @return true if filter is currently enabled
   setFltRpnSelect,boolean
      Configure RPN select filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltRpnSelect:boolean
      Query RPN select filter.

      @return true if filter is currently enabled
   setFltNrpnSelect,boolean
      Configure NRPN select filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltNrpnSelect:boolean
      Query NRPN select filter.

      @return true if filter is currently enabled
   setFltRpn,boolean
      Configure RPN filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltRpn:boolean
      Query RPN filter.

      @return true if filter is currently enabled
   setFltNrpn,boolean
      Configure NRPN filter.

      @arg bEnable true to enable filter, false to disable it.
   getFltNrpn:boolean
      Query NRPN filter.

      @return true if filter is currently enabled
   getRpn:short
      Query last seen RPN.

      @return RPN or -1 if NRPN is (possibly) active
   getNrpn:short
      Query last seen NRPN.

      @return NRPN or -1 if RPN is (possibly) active
   setEnableParam,boolean
      Switch (N)RPN parser on or off.

      @arg bEnable true to enable parser, false to disable it.
   getEnableParam:boolean
      Query (N)RPN parser state (on/off).

      @return true if parser is currently enabled
   setDataEntryMode,int
      Set (N)RPN data entry mode.

      @arg mode 0=MSBLSB, 1=LSBMSB, 2=MSB
   getDataEntryMode:int
      Query (N)RPN data entry mode.

      @return 0=MSBLSB, 1=LSBMSB, 2=MSB
   parseBuffer,Buffer buffer
      Parse b.offset bytes and add events. Does not require MIDIIn to be opened.
      Used by LocalMIDI module.
      @arg buffer Input buffer
   MIDIOut,Object
Represents a MIDI output device
MOD_MIDIPORT,int
    MOD_SYNTH,int
    MOD_SQSYNTH,int
    MOD_FMSYNTH,int
    MOD_MAPPER,int
    MOD_WAVETABLE,int
    MOD_SWSYNTH,int
    openByName,String devName:boolean
     Open MIDI device by name

     @arg devName Device name (platform dependent)
     @return true(1) if the device has been opened, false(0) if an error occured
   openByIdx,int devIdx:boolean
     Open MIDI device by index

     @arg devIdx Device index
     @return true(1) if the device has been opened, false(0) if an error occurred
   close
     Close MIDI device
   noteOn,byte midiCh,byte note,byte vel
     Send note-on MIDI message

    @arg midiCh MIDI channel (0..15)
    @arg note MIDI note (0..127)
    @arg vel Note-on velocity (0..127)
   noteOff,byte midiCh,byte note,byte vel
     Send note-off MIDI message

    @arg midiCh MIDI channel (0..15)
    @arg note MIDI note (0..127)
    @arg vel Note-off velocity (0..127)
   allNotesOff,byte midiCh
     Send all-notes-off MIDI message

     @arg midiCh MIDI channel (0..15)
   bankSelect,byte midiCh,byte bank
    Send bank-select MIDI message

    @arg midiCh MIDI channel (0..15)
    @arg bank Bank (0..127)
   programChange,byte midiCh,byte prog
    Send program-select MIDI message

    @arg midiCh MIDI channel (0..15)
    @arg prog Program (0..127)
   sendBuffer,Buffer b:boolean
    Send buffer (regular or system exclusive data)

    This method can also be used to send a series of regular MIDI commands.

    @arg b Buffer that holds the MIDI data to be send. The "offset" field is used to determine how many bytes to send.
    @return true(1) if the data has been sent, false(0) otherwise
   getDeviceName:String
    Return name of currently opened MIDI device

    @return MIDI device name
   getDeviceIdx:int
    Return device index.

    This can be used for finding the matching input device for an output device.
   GetNumDevices:int
     Query number of available MIDI output device (pseudo-static method)

     @return Number of available MIDI output devices
   GetDeviceNameByIdx,int devIdx:String
     Query MIDI device name by index  (pseudo-static method)

     @arg devIdx MIDI output device index (0..GetNumDevices())
     @return MIDI device name
   GetDeviceTypeByIdx,int:int
     Query MIDI device caps (pseudo-static method)

     The returned value should be considered merely a "hint": Not all audio drivers may support this.

     @return Device capabilities/type. One of §MOD_MIDIPORT, §MOD_SYNTH, §MOD_SQSYNTH, §MOD_FMSYNTH, §MOD_MAPPER, §MOD_WAVETABLE, §MOD_SWSYNTH. -1 if this call is not supported.
   MIDITimer,Object

A MIDI timer that has a resolution of ~1 millisecond.
