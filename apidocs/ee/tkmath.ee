tkmath
tkmath
Math,Object

This class is mainly for importing the most commonly used math constants from math.h
 M_E,float
e=2.7182818284590452354f
 M_LOG2E,float
log<sub>2</sub>(e)=1.4426950408889634074f
 M_LOG10E,float
log<sub>10</sub>(e)=0.43429448190325182765f
 M_LN2,float
log(2)=0.69314718055994530942f
 M_LN10,float
log(10)=2.30258509299404568402f
 M_PI,float
&#x3c0;=3.14159265358979323846f
 M_PI_2,float
&#x3c0;/2=1.57079632679489661923f
 M_PI_4,float
&#x3c0;/4=0.78539816339744830962f
 M_1_PI,float
1/&#x3c0;=0.31830988618379067154f
 M_2_PI,float
2/&#x3c0;=0.63661977236758134308f
 M_2_SQRTPI,float
2/&#x221a;&#x3c0;=1.12837916709551257390f
 M_SQRT2,float
&#x221a;2=1.41421356237309504880f
 M_SQRT1_2,float
1/&#x221a;2=0.70710678118654752440f
 setFltEpsilonUnits,int u
      Set the relative unit range for relative float comparison
      @arg u new range
    setDblEpsilonUnits,int u
      Set the relative unit range for relative Double comparison
      @arg u new range
    getFltEpsilonUnits:int
      Returns current unit range for relative float comparison, default is 10
      @return current range
    getDblEpsilonUnits:int
      Returns current unit range for relative Double comparison, default is 100
      @return current range
    setFltEpsilonZeroRange,float a
      Set the relative tolerance for float epsilon range checks
      @arg a new float epsilon range, must be bigger than zero
    setDblEpsilonZeroRange,Double a
      Set the relative tolerance for Double epsilon range checks
      @arg a new double epsilon range, must be bigger than zero
    getFltEpsilonZeroRange:float
      Returns the epsilon range for relative zero float comparison, default is 0.000001
      @return float epsilon range
    getDblEpsilonZeroRange:Double
      Returns the epsilon range for relative zero Double comparison, default is 0.000000000001
      @return Double epsilon range
    relCmpf,float a,float b:int
   Do a fast relative comparison of float values
   @arg a first value
   @arg b second value
   @return 0 if equal, -1 if smaller or 1 if bigger
 relCmpd,Double a,Double b:int
   Do a fast relative comparison of Double values
   @arg a first value
   @arg b second value
   @return 0 if equal, -1 if smaller or 1 if bigger, -2 on error
 relErrCmpf,float a,float b,float err:int
   Does a relative comparison given a certain error range of float values.
   If both values are nonzero, equal means it fullfills fabs(a-b)/fabs(a)<=err, else it fullfills fabs(nonzero(a,b))<=err.
   @arg a first value
   @arg b second value
   @arg err relative error to tolerate for being considered as equal, if zero default is used
   @return 0 if equal, -1 if smaller or 1 if bigger, -2 on error
 relErrCmpd,Double a,Double b,Double err:int
   Does a relative comparison given a certain error range of Double values.
   If both values are nonzero, equal means it fullfulls fabs(a-b)/fabs(a)<=err, else it fullfills fabs(nonzero(a,b))<=err.
   @arg a first value
   @arg b second value
   @arg err relative error to tolerate for being considered as equal, if zero default is used
   @return 0 if equal, -1 if smaller or 1 if bigger, -2 on error
 sinf,float a:float
Calculate single precision sin(a)
@arg a scalar value in radians
@return scalar value from -1 to 1
 cosf,float a:float
Calculate single precision cos(a)
@arg a scalar value in radians
@return scalar value from -1 to 1
 tanf,float a:float
Calculate single precision tan(a)
@arg a scalar value in radians
@return scalar value
 asinf,float a:float
Calculate single precision asin(a)
@arg a scalar value from -1 to 1
@return a scalar value from -&#x3c0;/2 to &#x3c0;/2
 acosf,float a:float
Calculate single precision acos(a)
@arg a scalar value from -1 to 1
@return scalar value from 0 to &#x3c0;
 atanf,float a:float
Calculate single precision atan(a)
@arg a scalar value
@return scalar value from -&#x3c0;/2 to &#x3c0;/2
 atan2f,float a, float b:float
Calculate single precision atan(a/b), does not throw an exception when b is zero (but when a==b==0),
returns in range -&#x3c0;&lt;result&lt;&#x3c0;
@arg a scalar value
@arg b scalar value
@return scalar value from -&#x3c0; to &#x3c0;
 hypotf,float a,float b:float
Calculate single precision length of hypotenuse
@arg a scalar value
@arg b scalar value
@return scalar value
 sinhf,float a:float
Calculate single precision sinh(a)
@arg a scalar value
@return scalar value
 coshf,float a:float
Calculate single precision cosh(a)
@arg a scalar value
@return scalar value >1
 tanhf,float a:float
Calculate single precision tanh(a)
@arg a scalar value
@return scalar value from -1 to 1
 asinhf,float a:float
Calculate single precision asinh(a)
@arg a scalar value
@return scalar value
 acoshf,float a:float
Calculate single precision acosh(a)
@arg a scalar value with a>=1.0
@return scalar value >=0
 atanhf,float a:float
Calculate single precision atanh(a)
@arg a scalar value from -1 to 1
@return scalar value
 absf,float a:float
Returns single precision absolute number
@arg a scalar value
@return positive scalar value
 ceilf,float a:float
Returns next natural value to a
@arg a scalar value
@return scalar value
 roundf,float a:float
Returns rounded value
@arg a scalar value
@return scalar value
 floorf,float a:float
Returns previous natural value to a
@arg a scalar value
@return scalar value
 modf,float a,float b:float
Returns remainder of a/b
@arg a scalar value
@arg b scalar value with b!=0
@return scalar value
 sqrtf,float a:float
Returns &#x221a;a
@arg a positive scalar value
@return positive scalar value
 powf,float a,float b:float
Returns a<sup>b</sup>
@arg a scalar value
@arg b scakar value
@return scalar value
 expf,float a:float
Returns e<sup>a</sup>
@arg a scalar value
@return positive scalar value
 exp2f,float a:float
Returns 2<sup>a</sup>
@arg a scalar value
@return positive scalar value
 exp10f,float a:float
Returns 10<sup>a</sup>
@arg a scalar value
@return positive scalar value
 logf,float a:float
Returns log(a)
@arg a positive scalar value without zero (a>0)
@return scalar value
 log2f,float a:float
Returns log<sub>2</sub>(a)
@arg a positive scalar value without zero (a>0)
@return scalar value
 log10f,float a:float
Returns log<sub>10</sub>(a)
@arg a positive scalar value without zero (a>0)
@return scalar value
 sind,Double a:Double
Calculate double precision sin(a)
@arg a scalar value in radians
@return scalar value from -1 to 1
 cosd,Double a:Double
Calculate double precision cos(a)
@arg a scalar value in radians
@return scalar value from -1 to 1
 tand,Double a:Double
Calculate double precision tan(a)
@arg a scalar value in radians
@return scalar value
 asind,Double a:Double
Calculate double precision asin(a)
@arg a scalar value from -1 to 1
@return a scalar value from -&#x3c0;/2 to &#x3c0;/2
 acosd,Double a:Double
Calculate double precision acos(a)
@arg a scalar value from -1 to 1
@return scalar value from 0 to &#x3c0;
 atand,Double a:Double
Calculate double precision atan(a)
@arg a scalar value
@return scalar value from -&#x3c0;/2 to &#x3c0;/2
 atan2d,Double a, Double b:Double
Calculate double precision atan(a/b), does not throw an exception when b is zero,
returns in range -&#x3c0;&lt;result&lt;&#x3c0;
@arg a scalar value
@arg b scalar value
@return scalar value from -&#x3c0; to &#x3c0;
 hypotd,Double a,Double b:Double
Calculate double precision length of hypotenuse
@arg a scalar value
@arg b scalar value
@return scalar value
 sinhd,Double a:Double
Calculate double precision sinh(a)
@arg a scalar value
@return scalar value
 coshd,Double a:Double
Calculate double precision cosh(a)
@arg a scalar value
@return scalar value >1
 tanhd,Double a:Double
Calculate double precision tanh(a)
@arg a scalar value
@return scalar value from -1 to 1
 asinhd,Double a:Double
Calculate double precision asinh(a)
@arg a scalar value
@return scalar value
 acoshd,Double a:Double
Calculate double precision acosh(a)
@arg a scalar value with a>=1.0
@return scalar value >=0
 atanhd,Double a:Double
Calculate double precision atanh(a)
@arg a scalar value from -1 to 1
@return scalar value
 absd,Double a:Double
Returns double precision absolute number
@arg a scalar value
@return positive scalar value
 ceild,Double a:Double
Returns next natural value to a
@arg a scalar value
@return scalar value
 roundd,Double a:Double
Returns rounded value
@arg a scalar value
@return scalar value
 floord,Double a:Double
Returns previous natural value to a
@arg a scalar value
@return scalar value
 modd,Double a,Double b:Double
Returns remainder of a/b
@arg a scalar value
@arg b scalar value with b!=0
@return scalar value
 sqrtd,Double a:Double
Returns &#x221a;a
@arg a positive scalar value
@return positive scalar value
 powd,Double a,Double b:Double
Returns a<sup>b</sup>
@arg a scalar value
@arg b scakar value
@return scalar value
 expd,Double a:Double
Returns e<sup>a</sup>
@arg a scalar value
@return positive scalar value
 exp2d,Double a:Double
Returns 2<sup>a</sup>
@arg a scalar value
@return positive scalar value
 exp10d,Double a:Double
Returns 10<sup>a</sup>
@arg a scalar value
@return positive scalar value
 logd,Double a:Double
Returns log(a)
@arg a positive scalar value without zero (a>0)
@return scalar value
 log2d,Double a:Double
Returns log<sub>2</sub>(a)
@arg a positive scalar value without zero (a>0)
@return scalar value
 log10d,Double a:Double
Returns log<sub>10</sub>(a)
@arg a positive scalar value without zero (a>0)
@return scalar value
 f16_from_f32,float v:int
Converts 32bit IEEE floating point value to 16bit float
@arg 32bit float
@return 16bit float (as signed 16bit short integer)
 f32_from_f16,int v:float
Converts 16bit float to 32bit IEEE floating point value
@arg 16bit float (as signed 16bit short integer)
@return 32bit float
 fx16_from_f16,int v:int
Converts 16bit float to 32bit 16:16 fixed point value
@arg 16bit float (as signed 16bit short integer)
@return 32bit 16:16 fixed point value (integer)
 sqrtcd,Complexd a:Complexd
Returns complex double precision &#x221a;a
@arg a complex number
@return complex number
 powcd,Complexd a,Complexd b:Complexd
Returns complex a<sup>b</sup>
@arg a complex number
@arg b complex number
@return complex number
 expcd,Complexd a:Complexd
Returns complex e<sup>a</sup>
@arg a complex number
@return complex number
 logcd,Complexd a:Complexd
Returns complex log(a)
@arg a complex number
@return complex number
 sincd,Complexd a:Complexd
Returns complex sin(a)
@arg a complex number
@return complex number
 coscd,Complexd a:Complexd
Returns complex cos(a)
@arg a complex number
@return complex number
 tancf,Complexd a:Complexd
Returns complex tan(a)
@arg a complex number
@return complex number
 asincd,Complexd a:Complexd
Returns complex asin(a)
@arg a complex number
@return complex number
 acoscd,Complexd a:Complexd
Returns complex acos(a)
@arg a complex number
@return complex number
 atancd,Complexd a:Complexd
Returns complex atan(a)
@arg a complex number
@return complex number
 sinhcd,Complexd a:Complexd
Returns complex sinh(a)
@arg a complex number
@return complex number
 coshcd,Complexd a:Complexd
Returns complex cosh(a)
@arg a complex number
@return complex number
 tanhcd,Complexd a:Complexd
Returns complex tanh(a)
@arg a complex number
@return complex number
 asinhcd,Complexd a:Complexd
Returns complex asinh(a)
@arg a complex number
@return complex number
 acoshcd,Complexd a:Complexd
Returns complex acosh(a)
@arg a complex number
@return complex number
 atanhcd,Complexd a:Complexd
Returns complex atanh(a)
@arg a complex number
@return complex number
 Complexd,Object
This class represents a double precision complex number.
 setX,Double x
      Set x property of x+iy
      @arg x new x value
    setY,Double x
      Set y property of x+iy
      @arg new y value
    getX:Double
      Get x property of x+iy
      @return x property
    getY:Double
      Get y property of x+iy
      @return y property
    setR,Double r
      Set r property of re<sup>ia</sup>
      @arg r new r value
    setA,Double a
      Set a property of re<sup>ia</sup>
      @arg a new a value
    getR:Double
      Get r property of re<sup>ia</sup>
      @return r property
    getA:Double
      Get a property of re<sup>ia</sup>
    getString:String
      Get string representation of complex number (x+iy)
      @return string representation (x+iy)
    getPolarString:String
      Get string representation of complex number (re<sup>ia</sup>)
    add,Complexd v
      add complex number v to this instance
      @arg v complex value to add
    sub,Complexd v
      substract complex number v from this instance
      @arg v complex value to substract
    muld,Double v
      Multiply this instance with scalar v
      @arg v scalar value to multiply
    mul,Complexd v
      Multiply this instance with complex v
      @arg v complex value to multiply
    mulConj,Complexd v:float
      Multiply this instance with complex conjugated v, ((x<sub>1</sub>+iy<sub>1</sub>)*(x<sub>2</sub>-iy<sub>2</sub>))
      @arg v complex value to conjugate and multiply
      @return result of complex conjugated multiplication (scalar value)
    div,Complexd v
      Divide this instance by complex v
      @arg v complex value to divide through
    invert
      Invert this instance (v=1/v)
    getAbs:Double
      Returns length of complex number
      @return length
    getAbsSqr:Double
      Returns squared length of complex number (faster than abs)
      @return length<sup>2</sup>
    unit
      Set length of instance to 1
    unitScale,Double s
      Set length of instance to s
      @arg s new length for complex number
    init,Double a,Double b
      Set value of instance to x=a and y=b (x+iy)
      @arg a new x value
      @arg b new y value
    initf,float a,float b
      Set value of instance to single precision x=a and y=b (x+iy)
      @arg a new x value
      @arg b new y value
    initPolar,Double _a,Double _b
      Set value of instance to r=_a and a=_b (re<sup>ia</sup>)
      @arg _a new r value
      @arg _b new a value
    initPolarf,sF32 _a,sF32 _b
      Set value of instance to r=_a and a=_b (re<sup>ia</sup>)
      @arg _a new single precision r value
      @arg _b new single precision a value
    New,Double a,Double b:Complexd
      Returns new instance with values x=a and y=b of (x+iy)
      @arg a new x value
      @arg b new y value
      @return new instance of Complexd (x+iy)
    NewPolar,Double va,Double vb:Complexd
      Returns new instance with values r=va anda a=vb of (re<sup>ia</sup>)
      @arg va new r value
      @arg vb new a value
      @return new instance of Complexd (re<sup>ia</sup>)
    complexd,Double a,Double b:Complexd
   Returns new instance with values x=a and y=b of (x+iy)
   @arg a new x value
   @arg b new y value
   @return new instance of Complexd (x+iy)
 complexfPolar,Double va,Double vb:Complexd
   Returns new instance with values r=va and a=vb of (re<sup>ia</sup>)
   @arg va new r value
   @arg vb new a value
   @return new instance of Complexd (re<sup>ia</sup>)
 sqrtcf,Complexf a:Complexf
Returns complex single precision &#x221a;a
@arg a complex number
@return complex number
 powcf,Complexf a,Complexf b:Complexf
Returns complex a<sup>b</sup>
@arg a complex number
@arg b complex number
@return complex number
 expcf,Complexf a:Complexf
Returns complex e<sup>a</sup>
@arg a complex number
@return complex number
 logcf,Complexf a:Complexf
Returns complex log(a)
@arg a complex number
@return complex number
 sincf,Complexf a:Complexf
Returns complex sin(a)
@arg a complex number
@return complex number
 coscf,Complexf a:Complexf
Returns complex cos(a)
@arg a complex number
@return complex number
 tancf,Complexf a:Complexf
Returns complex tan(a)
@arg a complex number
@return complex number
 asincf,Complexf a:Complexf
Returns complex asin(a)
@arg a complex number
@return complex number
 acoscf,Complexf a:Complexf
Returns complex acos(a)
@arg a complex number
@return complex number
 atancf,Complexf a:Complexf
Returns complex atan(a)
@arg a complex number
@return complex number
 sinhcf,Complexf a:Complexf
Returns complex sinh(a)
@arg a complex number
@return complex number
 coshcf,Complexf a:Complexf
Returns complex cosh(a)
@arg a complex number
@return complex number
 tanhcf,Complexf a:Complexf
Returns complex tanh(a)
@arg a complex number
@return complex number
 asinhcf,Complexf a:Complexf
Returns complex asinh(a)
@arg a complex number
@return complex number
 acoshcf,Complexf a:Complexf
Returns complex acosh(a)
@arg a complex number
@return complex number
 atanhcf,Complexf a:Complexf
Returns complex atanh(a)
@arg a complex number
@return complex number
 Complexf,Object
This class represents a single precision complex number.
 setX,float x
      Set x property of x+iy
      @arg x new x value
    setY,float x
      Set y property of x+iy
      @arg new y value
    getX:float
      Get x property of x+iy
      @return x property
    getY:float
      Get y property of x+iy
      @return y property
    setR,float r
      Set r property of re<sup>ia</sup>
      @arg r new r value
    setA,float a
      Set a property of re<sup>ia</sup>
      @arg a new a value
    getR:float
      Get r property of re<sup>ia</sup>
      @return r property
    getA:float
      Get a property of re<sup>ia</sup>
    getString:String
      Get string representation of complex number (x+iy)
      @return string representation (x+iy)
    getPolarString:String
      Get string representation of complex number (re<sup>ia</sup>)
    add,Complexf v
      add complex number v to this instance
      @arg v complex value to add
    sub,Complexf v
      substract complex number v from this instance
      @arg v complex value to substract
    mulf,float v
      Multiply this instance with scalar v
      @arg v scalar value to multiply
    mul,Complexf v
      Multiply this instance with complex v
      @arg v complex value to multiply
    mulConj,Complexf v:float
      Multiply this instance with complex conjugated v, ((x<sub>1</sub>+iy<sub>1</sub>)*(x<sub>2</sub>-iy<sub>2</sub>))
      @arg v complex value to conjugate and multiply
      @return result of complex conjugated multiplication (scalar value)
    div,Complexf v
      Divide this instance by complex v
      @arg v complex value to divide through
    invert
      Invert this instance (v=1/v)
    getAbs:float
      Returns length of complex number
      @return length
    getAbsSqr:float
      Returns squared length of complex number (faster than abs)
      @return length<sup>2</sup>
    unit
      Set length of instance to 1
    unitScale,float s
      Set length of instance to s
      @arg s new length for complex number
    init,float a,float b
      Set value of instance to x=a and y=b (x+iy)
      @arg a new x value
      @arg b new y value
    initPolar,float _a,float _b
      Set value of instance to r=_a and a=_b (re<sup>ia</sup>)
      @arg _a new r value
      @arg _b new a value
    New,float a,float b:Complexf
      Returns new instance with values x=a and y=b of (x+iy)
      @arg a new x value
      @arg b new y value
      @return new instance of Complexf (x+iy)
    NewPolar,float va,float vb:Complexf
      Returns new instance with values r=va and a=vb of (re<sup>ia</sup>)
      @arg va new r value
      @arg vb new a value
      @return new instance of Complexf (re<sup>ia</sup>)
    complexf,float a,float b:Complexf
   Returns new instance with values x=a and y=b of (x+iy)
   @arg a new x value
   @arg b new y value
   @return new instance of Complexf (x+iy)
 complexfPolar,float va,float vb:Complexf
   Returns new instance with values r=va and a=vb of (re<sup>ia</sup>)
   @arg va new r value
   @arg vb new a value
   @return new instance of Complexf (re<sup>ia</sup>)
 Matrix,Object
Base class for all matrix objects
setColumnMajor,boolean bEnabled
     Set element order (column major/row major)

     @arg bEnable true=Column major mode, false=Row major mode
   getColumnMajor:boolean
    Get current element order

    @return True if matrix is in column major mode, false if it uses row major mode
   Matrix2d,Object
This class represents a double precision 2x2 square matrix.
   0 1
   2 3
 setA,Double v
      Set a element to v
      @arg v new value for a
    setB,Double v
      Set b element to v
      @arg v new value for b
    setC,Double v
      Set c element to v
      @arg v new value for c
    setD,Double v
      Set d element to v
      @arg v new value for d
    getA:Double
      Get value of a element
      @return value of a element
    getB:Double
      Get value of b element
      @return value of b element
    getC:Double
      Get value of c element
      @return value of c element
    getD:Double
      Get value of d element
      @return value of d element
    getString:String
      Get string representation of matrix ((a, b), (c, d))
      @return string representation of matrix
    add,Matrix2d m
      Add another matrix m to this instance
      @arg m matrix to add
    sub,Matrix2d m
      Substract another matrix m from this instance
      @arg m matrix to substract
    muld,Double v
      Multiply this instance by scalar value v
      @arg v value to multiply
    mul,Matrix2d m
      Multiply this instance with matrix m (this * m)
      @arg m matrix to multiply
    mulRev,Matrix2d m
      Reverse-multiply matrix m by this instance (m * this)
      @arg m matrix to multiply
    mulv,Vector2d v:Vector2d
      Multiply this instance with a 2dim vector
      @arg v vector to multiply
      @return resulting vector
    getAbs:Double
      Calculate the Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    getAbsSqr:Double
      Calculate the squared Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    unit
      Normalise matrix with Hilbert-Schmidt norm
    unitScale,Double v
      Normalise matrix with Hilbert-Schmidt norm and multiply with v afterwards
      @arg v value to scale matrix
    det:Double
      Calculate determinant of matrix
      @return value of determinant
    invert
      Calculate inversion of matrix, so that A*A<sup>-1</sup>=U
    transpose
      Transpose matrix
    setRow,int r,Vector2d v
      Set row r with values from v
      @arg row row number
      @arg v Vector2f instance
    getRow,int r:Vector2d
      Get row r values
      @arg r row number
      @return vector with values from row r
    setCol,int c,Vector2d v
      Set column c with values from v
      @arg c column number
      @arg v Vector2f instance
    getCol,int c:Vector2d
      Get column c values
      @arg c column number
      @return vector with values from column c
    init,Doubla a,Double b,Double c,Double d
      Initialize matrix
      @arg a value for a
      @arg b value for b
      @arg c value for c
      @arg d value for d
    initf,float a,float b,float c,float d
      Initialize matrix
      @arg a value for a
      @arg b value for b
      @arg c value for c
      @arg d value for d
    initRow,int r,Double a,Double b
      Initialize row r of matrix
      @arg row row number
      @arg a value for first column
      @arg b value for second column
    initCol,int c,Double a,Double b
      Initialize column 'col' of the matrix
      @arg col column number
      @arg a value for first row
      @arg b value for second row
    initRowV,int r,Vector2d v
      Initialize row 'row' of the matrix
      @arg row row number
      @arg v vector with values
    initColV,int c,Vector2d v
      Initialize column 'col' of the matrix
      @arg c column number
      @arg v vector with values
    New,Double a,Double b,Double c,Double d:Matrix2d
      Initialize and return new instance of Matrix2d
      @arg a value for a
      @arg b value for b
      @arg c value for c
      @arg d value for d
      @return new instance of Matrix2d
    initIdentity
      Initialize with identity matrix.
   initScalef
    initRotatef
      @arg a rotation angle (0..2PI)
    matrix2d,Double a,Double b,Double c,Double d:Matrix2d
   Initialize and return new instance of Matrix2d
   @arg a value for a
   @arg b value for b
   @arg c value for c
   @arg d value for d
   @return new instance of Matrix2d
 Matrix2f,Object
This class represents a single precision 2x2 square matrix.

The default layout is row-major.
   0 1  =  a b
   2 3     c d
 New,float va,float vb,float vc,float vd:Matrix2f
      Initialize and return new instance of Matrix2f (args are in row-major order)
      @arg a value for a
      @arg b value for b
      @arg c value for c
      @arg d value for d
      @return new instance of Matrix2f
    setA,float v
      Set a element to v
      @arg v new value for a
    setB,float v
      Set b element to v
      @arg v new value for b
    setC,float v
      Set c element to v
      @arg v new value for c
    setD,float v
      Set d element to v
      @arg v new value for d
    getA:float
      Get value of a element
      @return value of a element
    getB:float
      Get value of b element
      @return value of b element
    getC:float
      Get value of c element
      @return value of c element
    getD:float
      Get value of d element
      @return value of d element
    getString:String
      Get string representation of matrix ((a, b), (c, d))
      @return string representation of matrix
    initIdentity
      Initialize with identity matrix.
   isIdentity
      Check if this is an identity matrix (diagonal=1, other=0)
   init,float a,float b,float c,float d
      Initialize matrix (in matrix order, default=row-major)
      @arg a value for m11
      @arg b value for m12
      @arg c value for m22
      @arg d value for m23
    initRowMajor,float a,float b,float c,float d
      Initialize matrix (row-major arg order. swap args if matrix is in (non-default) column-major order).
      @arg a value for m11
      @arg b value for m12
      @arg c value for m21
      @arg d value for m22
    initColumnMajor,float a,float b,float c,float d
      Initialize matrix (column-major arg order. swap args if matrix is in (default) row-major order).
      @arg a value for m11
      @arg b value for m21
      @arg c value for m12
      @arg d value for m22
    initTranspose,float a,float b,float c,float d
      Initialize matrix (swap arg row/column order).
      @arg a value for m11
      @arg b value for m12
      @arg c value for m13
      @arg d value for m21
    add,Matrix2f m
      Add another matrix m to this instance
      @arg m matrix to add
    sub,Matrix2f m
      Substract another matrix m from this instance
      @arg m matrix to substract
    mulf,float v
      Multiply this instance by scalar value v
      @arg v value to multiply
    mul,Matrix2f m
      Multiply this instance by matrix m (this * m)
      @arg m matrix to multiply
    mulRev,Matrix2f m
      Reverse-multiply matrix m by this instance (m * this)
      @arg m matrix to multiply
    mulv,Vector2f v:Vector2f
      Multiply this instance by a 2dim vector
      @arg v vector to multiply
      @return resulting vector
    getAbs:float
      Calculate the Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    getAbsSqr:float
      Calculate the squared Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    unit
      Normalize matrix using Hilbert-Schmidt norm
    unitScale,float s
      Normalise matrix using Hilbert-Schmidt norm and multiply by 's' afterwards
      @arg s scaling factor
    det:float
      Calculate determinant of matrix
      @return value of determinant
    invert
      Calculate inversion of matrix, so that A*A<sup>-1</sup>=U
    transpose
      Transpose matrix
    setRow,int row,Vector2f v
      Initialize row 'row' with values from 'v'
      @arg row row index
      @arg v Vector2f instance
    getRow,int row:Vector2f
      Get row 'row' vector
      @arg row row index
      @return vector with values from row 'row'
    setCol,int col,Vector2f v
      Initialize column 'col' with values from 'v'
      @arg col column index
      @arg v Vector2f instance
    getCol,int col:Vector2f
      Get column 'col' vector
      @arg col column index
      @return vector with values from column c
    initRowf,int row,float a,float b
      Initialize matrix row from scalars
      @arg row row index
      @arg a value for first column
      @arg b value for second column
    initRowV,int row,Vector2f v
      Initialize matrix row from vector or array-like object
      @arg r row index
      @arg v vector with values
    initColf,int col,float a,float b
      Initialize matrix column from scalars
      @arg col column index
      @arg a value for first row
      @arg b value for second row
    initColv,int col,Vector2f v
      Initialise matrix column from vector or array-like object
      @arg col column index
      @arg v vector with values
    initScalef
    initScalev
      @arg scale Vector2f
    initSkewXf
      a in radians (0..2PI)
      see https://www.w3.org/TR/css-transforms-1/#SkewXDefined
    initSkewYf
      a in radians (0..2PI)
    initRotatef
      @arg a rotation angle (0..2PI)
    scalef,float x,float y,float z
      Multiply by scale matrix
   scalev,Vector2f v
      Multiply by scale matrix
   rotatef,float ang
      Multiply by rotation matrix (angle is in radiant measure)
   matrix2f,float va,float vb,float vc,float vd:Matrix2f
   Initialise and return new instance of Matrix2f
   @arg a value for a
   @arg b value for b
   @arg c value for c
   @arg d value for d
   @return new instance of Matrix2f
 Matrix2x3f,Object
This class represents a single precision 2x3 square matrix.
 New,float a,float b,float c,float d,float e,float f:Matrix2x3f
      Initialize and return new instance of Matrix2x3f
      @arg a value for a
      @arg b value for b
      @arg c value for c
      @arg d value for d
      @arg e value for e
      @arg f value for f
      @return new instance of Matrix2x3f
    setA,float v
      Set a element to m11
      @arg m11 new value for a
    setB,float v
      Set b element to m12
      @arg m12 new value for b
    setC,float v
      Set c element to m13
      @arg m13 new value for c
    setD,float v
      Set d element to m21
      @arg m21 new value for d
    setE,float v
      Set e element to m22
      @arg m22 new value for e
    setF,float v
      Set f element to m23
      @arg m23 new value for f
    getA:float
      Get value of a element
      @return value of a element
    getB:float
      Get value of b element
      @return value of b element
    getC:float
      Get value of c element
      @return value of c element
    getD:float
      Get value of d element
      @return value of d element
    getE:float
      Get value of e element
      @return value of e element
    getF:float
      Get value of f element
      @return value of f element
    getString:String
      Get string representation of matrix ((a, b, c), (d, e, f), (g, h, i))
      @return string representation of matrix
    setRow,int row,Vector3f v
      Initialize row 'row' with values from v
      @arg row row number
      @arg v Vector3f instance
    getRow,int row:Vector3f
      Get row 'row' vector
      @arg row row number
      @return vector with values from row r
    setCol,int c,Vector3f v
      Set column 'col' with values from v
      @arg c column number
      @arg v Vector3f instance
    getCol,int col:Vector3f
      Get column 'col' values
      @arg col column index
      @return vector with values from column c
    initIdentity
      Initialize with identity matrix.
   init,float a,float b,float c,float d,float e, float f
      Initialize matrix (in row-major order)
      @arg a value for m11
      @arg b value for m12
      @arg c value for m13
      @arg d value for m21
      @arg e value for m22
      @arg f value for m23
    initRow,int row,float a,float b,float c
      Initialize matrix row from scalars
      @arg row row number
      @arg a value for first column
      @arg b value for second column
      @arg c value for third column
    initRowV,int row,Vector3f v
      Initialize matrix row from vector or array-like object
      @arg row row index
      @arg v vector with values
    initColf,int col,float a,float b,float c
      Initialize matrix column from scalars
      @arg col column index
      @arg a value for first element
      @arg b value for second element
    initColv,int col,Vector2f v
      Initialize matrix column from vector or array-like object
      @arg c column index
      @arg v vector with values
    initOrtho
    initScalef
    initScalev
      @arg scale Vector2f
    initSkewXf
      a in radians (0..2PI)
      see https://www.w3.org/TR/css-transforms-1/#SkewXDefined
    initSkewYf
      a in radians (0..2PI)
    initTranslatef
    initTranslatev
    initRotatef
      @arg a rotation angle (0..2PI)
    add,Matrix2xf m
      Add another matrix m to this instance
      @arg m matrix to add
    sub,Matrix2x3f m
      Substract another matrix m from this instance
      @arg m matrix to substract
    mulf,float f
      Multiply this instance by scalar value f
      @arg f value to multiply
    mul,Matrix2x3f m
      Multiply this instance by matrix m (this * m)
      @arg m matrix to multiply (rhs)
    mulRev,Matrix2x3f m
      Reverse-multiply matrix m by this instance (m * this)
      @arg m matrix to multiply (lhs)
    mulv,Vector2f v:Vector2f
      Multiply matrix by a vector
      @arg v vector to multiply
      @return resulting vector
    getAbs:float
      Calculate the Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    getAbsSqr:float
      Calculate the squared Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    unit
      Normalise matrix with Hilbert-Schmidt norm
    unitScale,float s
      Normalise matrix using Hilbert-Schmidt norm and multiply by s afterwards
      @arg s scaling factor
    translatef,float x,float y
      Multiply by translation matrix
   translatev,Vector2f v
      Multiply by translation matrix
   scalef,float x,float y
      Multiply by scale matrix
   scalev,Vector2f v
      Multiply by scale matrix
   rotatef,float ang
      Multiply by rotation matrix (angle is in radian measure)
   matrix2x3f,float a,float b,float c,float d,float e,float f:Matrix2x3f
   Initialize and return new instance of Matrix2x3f
   @arg a value for a
   @arg b value for b
   @arg c value for c
   @arg d value for d
   @arg e value for e
   @arg f value for f
   @return new instance of Matrix3f
 Matrix3d,Object
This class represents a single precision 3x3 square matrix.
 setA,Double v
      Set a element to v
      @arg v new value for a
    setB,Double v
      Set b element to v
      @arg v new value for b
    setC,Double v
      Set c element to v
      @arg v new value for c
    setD,Double v
      Set d element to v
      @arg v new value for d
    setE,Double v
      Set e element to v
      @arg v new value for e
    setF,Double v
      Set f element to v
      @arg v new value for f
    setG,Double v
      Set g element to v
      @arg v new value for g
    setH,Double v
      Set h element to v
      @arg v new value for h
    setI,Double v
      Set i element to v
      @arg v new value for i
    getA:Double
      Get value of a element
      @return value of a element
    getB:Double
      Get value of b element
      @return value of b element
    getC:Double
      Get value of c element
      @return value of c element
    getD:Double
      Get value of d element
      @return value of d element
    getE:Double
      Get value of e element
      @return value of e element
    getF:Double
      Get value of f element
      @return value of f element
    getG:Double
      Get value of g element
      @return value of g element
    getH:Double
      Get value of h element
      @return value of h element
    getI:Double
      Get value of i element
      @return value of i element
    getString:String
      Get string representation of matrix ((a, b, c), (d, e, f), (g, h, i))
      @return string representation of matrix
    add,Matrix3d m
      Add another matrix m to this instance
      @arg m matrix to add
    sub,Matrix3d m
      Substract another matrix m from this instance
      @arg m matrix to substract
    muld,Double v
      Multiply this instance by scalar value v
      @arg v value to multiply
    mul,Matrix3d m
      Multiply this instance by matrix m (this * m)
      @arg m matrix to multiply
    mulRev,Matrix3d m
      Reverse-multiply matrix m by this instance (m * this)
      @arg m matrix to multiply
    mulv,Vector3d v:Vector3d
      Multiply this instance by a 3d vector
      @arg v vector to multiply
      @return resulting vector
    getAbs:Double
      Calculate the Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    getAbsSqr:Double
      Calculate the squared Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    unit
      Normalize matrix with Hilbert-Schmidt norm
    unitScale,Double v
      Normalize matrix with Hilbert-Schmidt norm and multiply by v afterwards
      @arg v value to scale matrix
    det:Double
      Calculate determinant of matrix
      @return value of determinant
    invert
      Calculate inversion of matrix, so that A*A<sup>-1</sup>=U
    transpose
      Transpose matrix
    setRow,int r,Vector3d v
      Set row r with values from v
      @arg r row number
      @arg v Vector3d instance
    getRow,int r:Vector3d
      Get row r values
      @arg r row number
      @return vector with values from row r
    setCol,int c,Vector3d v
      Set column c with values from v
      @arg c column number
      @arg v Vector3d instance
    getCol,int c:Vector3d
      Get column c values
      @arg c column number
      @return vector with values from column c
    initf,float va,float vb,float vc,float vd,float ve, float vf, float vg, float vh, float vi
      Initialise matrix
      @arg va value for a
      @arg vb value for b
      @arg vc value for c
      @arg vd value for d
      @arg ve value for e
      @arg vf value for f
      @arg vg value for g
      @arg vh value for h
      @arg vi value for i
    init,Double va,Double vb,Double vc,Double vd,Double ve, Double vf, Double vg, Double vh, Double vi
      Initialise matrix
      @arg va value for a
      @arg vb value for b
      @arg vc value for c
      @arg vd value for d
      @arg ve value for e
      @arg vf value for f
      @arg vg value for g
      @arg vh value for h
      @arg vi value for i
    initRow,int r,Double va,Double vb,Double vc
      Initialise row r of matrix
      @arg r row number
      @arg va value for first element
      @arg vb value for second element
      @arg vc value for third element
    initCol,int c,Double va,Double vb,Double vc
      Initialise column c of matrix
      @arg c column number
      @arg va value for first element
      @arg vb value for second element
      @arg vc value for third element
    initRowV,int r,Vector3d v
      Initialise row r of matrix
      @arg r row number
      @arg v vector with values
    initColV,int c,Vector3d v
      Initialise column c of matrix
      @arg c column number
      @arg v vector with values
    New,Double va,Double vb,Double vc,Double vd,Double ve,Double vf,Double vg,Double vh,Double vi:Matrix3d
      Initialise and return new instance of Matrix3d
      @arg va value for a
      @arg vb value for b
      @arg vc value for c
      @arg vd value for d
      @arg ve value for e
      @arg vf value for f
      @arg vg value for g
      @arg vh value for h
      @arg vi value for i
      @return new instance of Matrix3d
    initIdentity
      Initialize with identity matrix.
   matrix3d,Double va,Double vb,Double vc,Double vd,Double ve,Double vf,Double vg,Double vh,Double vi:Matrix3d
   Initialise and return new instance of Matrix3d
   @arg va value for a
   @arg vb value for b
   @arg vc value for c
   @arg vd value for d
   @arg ve value for e
   @arg vf value for f
   @arg vg value for g
   @arg vh value for h
   @arg vi value for i
   @return new instance of Matrix3d
 Matrix3f,Object
This class represents a single precision 3x3 square matrix.

The default layout is row-major.
 New,float a,float b,float c,float d,float e,float f,float g,float h,float i:Matrix3f
      Initialize and return new instance of Matrix3f. The parameters are in matrix order (row(default) or column major).
      @arg a value for a
      @arg b value for b
      @arg c value for c
      @arg d value for d
      @arg e value for e
      @arg f value for f
      @arg g value for g
      @arg h value for h
      @arg i value for i
      @return new instance of Matrix3f
    setA,float v
      Set a element to v
      @arg v new value for a
    setB,float v
      Set b element to v
      @arg v new value for b
    setC,float v
      Set c element to v
      @arg v new value for c
    setD,float v
      Set d element to v
      @arg v new value for d
    setE,float v
      Set e element to v
      @arg v new value for e
    setF,float v
      Set f element to v
      @arg v new value for f
    setG,float v
      Set g element to v
      @arg v new value for g
    setH,float v
      Set h element to v
      @arg v new value for h
    setI,float v
      Set i element to v
      @arg v new value for i
    getA:float
      Get value of a element
      @return value of a element
    getB:float
      Get value of b element
      @return value of b element
    getC:float
      Get value of c element
      @return value of c element
    getD:float
      Get value of d element
      @return value of d element
    getE:float
      Get value of e element
      @return value of e element
    getF:float
      Get value of f element
      @return value of f element
    getG:float
      Get value of g element
      @return value of g element
    getH:float
      Get value of h element
      @return value of h element
    getI:float
      Get value of i element
      @return value of i element
    getString:String
      Get string representation of matrix ((a, b, c), (d, e, f), (g, h, i))
      @return string representation of matrix
    setRow,int row,Vector3f v
      Initialize row 'row' with values from v
      @arg row row number
      @arg v Vector3f instance
    getRow,int row:Vector3f
      Get row 'row' vector
      @arg row row number
      @return vector with values from row r
    setCol,int c,Vector3f v
      Set column 'col' with values from v
      @arg c column number
      @arg v Vector3f instance
    getCol,int col:Vector3f
      Get column 'col' values
      @arg col column index
      @return vector with values from column c
    initIdentity
      Initialize with identity matrix.
   isIdentity
      Check if this is an identity matrix (diagonal=1, other=0)
   init,float a,float b,float c,float d,float e, float f, float g, float h, float i
      Initialize matrix. The parameters are in matrix order (row(default) or column major).
      @arg a value for m11
      @arg b value for m12
      @arg c value for m13
      @arg d value for m21
      @arg e value for m22
      @arg f value for m23
      @arg g value for m31
      @arg h value for m32
      @arg i value for m33
    initRowMajor,float a,float b,float c,float d,float e, float f, float g, float h, float i
      Initialize matrix (row-major arg order. swap args if matrix is in column-major order).
      @arg a value for m11
      @arg b value for m12
      @arg c value for m13
      @arg d value for m21
      @arg e value for m22
      @arg f value for m23
      @arg g value for m31
      @arg h value for m32
      @arg i value for m33
    initColumnMajor,float a,float b,float c,float d,float e, float f, float g, float h, float i
      Initialize matrix (column-major arg order. swap args if matrix is in row-major order).
      @arg a value for m11
      @arg b value for m21
      @arg c value for m31
      @arg d value for m12
      @arg e value for m22
      @arg f value for m32
      @arg g value for m13
      @arg h value for m23
      @arg i value for m33
    initTranspose,float a,float b,float c,float d,float e, float f, float g, float h, float i
      Initialize matrix (swap arg row/column order).
      @arg a value for m11
      @arg b value for m12
      @arg c value for m13
      @arg d value for m21
      @arg e value for m22
      @arg f value for m23
      @arg g value for m31
      @arg h value for m32
      @arg i value for m33
    initRowf,int row,float a,float b,float c
      Initialize matrix row from scalars
      @arg row row number
      @arg a value for first column
      @arg b value for second column
      @arg c value for third column
    initRowv,int row,Vector3f v
      Initialize matrix row from vector or array-like object
      @arg row row index
      @arg v vector with values
    initCol,int col,float a,float b,float c
      Initialize matrix column from scalars
      @arg col column index
      @arg a value for first element
      @arg b value for second element
      @arg c value for third element
    initColv,int col,Vector3f v
      Initialize matrix column from vector or array-like object
      @arg c column index
      @arg v vector with values
    initScalef
    initScalev,float x,float y
    initTranslatef,float x,float y
    initTranslatev
    initRotatef,float x,float y
      same as initEulerXYZ()
    initRotatev,Vector3f v
      same as initEulerXYZ(v.x, v.y, v.z)
    initEulerXYX,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerXZX,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerYXY,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerYZY,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerZXZ,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerZYZ,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerXYZ,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerXZY,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerYXZ,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerYZX,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerZXY,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerZYX,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    add,Matrix3f m
      Add another matrix m to this instance
      @arg m matrix to add
    sub,Matrix3f m
      Substract another matrix m from this instance
      @arg m matrix to substract
    mulf,float f
      Multiply this instance by scalar value f
      @arg f value to multiply
    mul,Matrix3f m
      Multiply this instance by matrix m
      @arg m matrix to multiply
    mulv,Vector3f v:Vector3f
      Multiply this instance by a 3dim vector
      @arg v vector to multiply
      @return resulting vector
    getAbs:float
      Calculate the Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    getAbsSqr:float
      Calculate the squared Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    unit
      Normalise matrix with Hilbert-Schmidt norm
    unitScale,float s
      Normalise matrix using Hilbert-Schmidt norm and multiply by s afterwards
      @arg s scaling factor
    det:float
      Calculate determinant of matrix
      @return value of determinant
    invert
      Calculate inversion of matrix, so that A*A<sup>-1</sup>=U
    transpose
      Transpose matrix
    translatef,float x,float y
      Multiply by translation matrix
   translatev,Vector2f v
      Multiply by translation matrix
   scalef,float x,float y,float z
      Multiply by scale matrix
   scalev,Vector3f v
      Multiply by scale matrix
   rotatef,float x,float y,float z
      Multiply by X=>Y=>Z rotation matrix (radian angles)
   rotatev,Vector3f v
      Multiply by v.x=>v.y=>v.z rotation matrix (radian angles)
   matrix3f,float a,float b,float c,float d,float e,float f,float g,float h,float i:Matrix3f
   Initialize and return new instance of Matrix3f. The parameters are in matrix order (row(default) or column major).
   @arg a value for a
   @arg b value for b
   @arg c value for c
   @arg d value for d
   @arg e value for e
   @arg f value for f
   @arg g value for g
   @arg h value for h
   @arg i value for i
   @return new instance of Matrix3f
 Matrix4d,Object
This class represents a double precision 4x4 square matrix.
 setA,Double v
      Set a element to v
      @arg v new value for a
    setB,Double v
      Set b element to v
      @arg v new value for b
    setC,Double v
      Set c element to v
      @arg v new value for c
    setD,Double v
      Set d element to v
      @arg v new value for d
    setE,Double v
      Set e element to v
      @arg v new value for e
    setF,Double v
      Set f element to v
      @arg v new value for f
    setG,Double v
      Set g element to v
      @arg v new value for g
    setH,Double v
      Set h element to v
      @arg v new value for h
    setI,Double v
      Set i element to v
      @arg v new value for i
    setJ,Double v
      Set j element to v
      @arg v new value for j
    setK,Double v
      Set k element to v
      @arg v new value for k
    setL,Double v
      Set l element to v
      @arg v new value for l
    setM,Double v
      Set m element to v
      @arg v new value for m
    setN,Double v
      Set n element to v
      @arg v new value for n
    setO,Double v
      Set o element to v
      @arg v new value for o
    setP,Double v
      Set p element to v
      @arg v new value for p
    getA:Double
      Get value of a element
      @return value of a element
    getB:Double
      Get value of b element
      @return value of b element
    getC:Double
      Get value of c element
      @return value of c element
    getD:Double
      Get value of d element
      @return value of d element
    getE:Double
      Get value of e element
      @return value of e element
    getF:Double
      Get value of f element
      @return value of f element
    getG:Double
      Get value of g element
      @return value of g element
    getH:Double
      Get value of h element
      @return value of h element
    getI:Double
      Get value of i element
      @return value of i element
    getJ:Double
      Get value of j element
      @return value of j element
    getK:Double
      Get value of k element
      @return value of k element
    getL:Double
      Get value of l element
      @return value of l element
    getM:Double
      Get value of m element
      @return value of m element
    getN:Double
      Get value of n element
      @return value of n element
    getO:Double
      Get value of o element
      @return value of o element
    getP:Double
      Get value of p element
      @return value of p element
    getString:String
      Get string representation of matrix ((a, b, c, d), (e, f, g, h), (i, j, k, l), (m, n, o, p))
      @return string representation of matrix
    add,Matrix4d m
      Add another matrix m to this instance
      @arg m matrix to add
    sub,Matrix4d m
      Substract another matrix m from this instance
      @arg m matrix to substract
    mulf,Double v
      Multiply this instance with scalar value v
      @arg v value to multiply
    mul,Matrix4d m
      Multiply this instance by matrix m
      @arg m matrix to multiply
    mulRev,Matrix4d m
      Reverse-multiply matrix m by this instance (m * this)
      @arg m matrix to multiply
    mulv,Vector4d v:Vector4d
      Multiply this instance with a 4dim vector
      @arg v vector to multiply
      @return resulting vector
    getAbs:Double
      Calculate the Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    getAbsSqr:Double
      Calculate the squared Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    unit
      Normalise matrix using Hilbert-Schmidt norm
    unitScale,Double s
      Normalise matrix using Hilbert-Schmidt norm and multiply by s afterwards
      @arg s scaling factor
    det:Double
      Calculate determinant of matrix
      @return value of determinant
    invert
      Calculate inversion of matrix, so that A*A<sup>-1</sup>=U
    transpose
      Transpose matrix
    setRow,int r,Vector4d v
      Set row r with values from v
      @arg r row index
      @arg v Vector4d instance
    getRow,int row:Vector4d
      Get row 'row'
      @arg row row index
      @return vector with values from row r
    setCol,int col,Vector4d v
      Set column 'col' with values from v
      @arg col column index
      @arg v Vector4d instance
    getCol,int col:Vector4d
      Get column 'col' values
      @arg col column index
      @return vector with values from column c
    initf,float a,float b,float c,float d,float e,float f,float g,float h,float i,float j,float k,float l,float m,float n,float o,float p
      Initialize matrix
      @arg a value for a
      @arg b value for b
      @arg c value for c
      @arg d value for d
      @arg e value for e
      @arg f value for f
      @arg g value for g
      @arg h value for h
      @arg i value for i
      @arg j value for j
      @arg k value for k
      @arg l value for l
      @arg m value for m
      @arg n value for n
      @arg o value for o
      @arg p value for p
    init,Double a,Double b,Double c,Double d,Double e,Double f,Double g,Double h,Double i,Double j,Double k,Double l,Double m,Double n,Double o,Double p
      Initialize matrix
      @arg a value for a
      @arg b value for b
      @arg c value for c
      @arg d value for d
      @arg e value for e
      @arg f value for f
      @arg g value for g
      @arg h value for h
      @arg i value for i
      @arg j value for j
      @arg k value for k
      @arg l value for l
      @arg m value for m
      @arg n value for n
      @arg o value for o
      @arg p value for p
    initRow,int row,Double a,Double b,Double c,Double d
      Initialize row 'row'
      @arg row row index
      @arg a value for first column
      @arg b value for second column
      @arg c value for third column
      @arg d value for fourth column
    initCol,int col,Double a,Double b,Double c,Double d
      Initialize column 'col'
      @arg c column index
      @arg a value for first row
      @arg b value for second row
      @arg c value for third row
      @arg d value for fourth row
    initRowV,int row,Vector4d v
      Initialize row 'row'
      @arg row row index
      @arg v vector with values
    initColV,int col,Vector4d v
      Initialize column 'col'
      @arg col column index
      @arg v vector with values
    initEulerXYX,Double a,Double b,Double c
      Initialize with euler roation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerXZX,Double a,Double b,Double c
      Initialize with euler roation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerYXY,Double a,Double b,Double c
      Initialize with euler roation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerYZY,Double a,Double b,Double c
      Initialize with euler roation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerZXZ,Double a,Double b,Double c
      Initialize with euler roation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerZYZ,Double a,Double b,Double c
      Initialize with euler roation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerXYZ,Double a,Double b,Double c
      Initialize with euler roation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerXZY,Double a,Double b,Double c
      Initialize with euler roation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerYXZ,Double a,Double b,Double c
      Initialize with euler roation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerYZX,Double a,Double b,Double c
      Initialize with euler roation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerZXY,Double a,Double b,Double c
      Initialize with euler roation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerZYX,Double a,Double b,Double c
      Initialize with euler roation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    New,Object a:Matrix4d
      Initialize from an array and return new instance of Matrix4d
      @arg a array with values
      @return new instance of Matrix4d
    BuildPerspectiveMatrix4d,Double fov,Double aspect,Double zNear,Double zFar:Matrix4d
      Builds a perspective matrix
      @arg fov field of view in degrees
      @arg aspect aspect ratio
      @arg zNear zNear value
      @arg zFar zFar value
      @return generated matrix
    BuildLookAtMatrix4d,Vector3d eye,Vector3d center,Vector3d up:Matrix4d
      Build a look at matrix
      @arg eye eye direction vector
      @arg center center of camera vector
      @arg up vector for up direction
      @return generated matrix
    BuildRotateMatrix4d,Double angle,Vector3d axis:Matrix4d
      Build a rotation matrix
      @arg angle rotation angle (0..2PI)
      @arg axis rotation axis vector
      @return generated matrix
    BuildTranslateMatrix4d,Vector3d t:Matrix4d
      Build a translation matrix
      @arg t translation vector
      @return generated matrix
    BuildEulerXZX4d,Double a,Double b,Double c:Matrix4d
      Build an euler rotation matrix with XZX convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerXYX4d,Double a,Double b,Double c:Matrix4d
      Build an euler rotation matrix with XYX convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerYXY4d,Double a,Double b,Double c:Matrix4d
      Build an euler rotation matrix with YXY convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerYZY4d,Double a,Double b,Double c:Matrix4d
      Build an euler rotation matrix with YZY convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerZYZ4d,Double a,Double b,Double c:Matrix4d
      Build an euler rotation matrix with ZYZ convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerZXZ4d,Double a,Double b,Double c:Matrix4d
      Build an euler rotation matrix with ZXZ convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerXZY4d,Double a,Double b,Double c:Matrix4d
      Build an euler rotation matrix with XZY convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerXYZ4d,Double a,Double b,Double c:Matrix4d
      Build an euler rotation matrix with XYZ convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerYXZ4d,Double a,Double b,Double c:Matrix4d
      Build an euler rotation matrix with YXZ convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerYZX4d,Double a,Double b,Double c:Matrix4d
      Build an euler rotation matrix with YZX convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerZYX4d,Double a,Double b,Double c:Matrix4d
      Build an euler rotation matrix with ZYX convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerZXY4d,Double a,Double b,Double c:Matrix4d
      Build an euler rotation matrix with ZXY convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    initIdentity
      Initialize with identity matrix.
   matrix4d,Object a:Matrix4d
   Initialize from an array and return new instance of Matrix4d
   @arg a array with values
   @return new instance of Matrix4d
Matrix4f,Matrix
This class represents a single precision 4x4 square matrix.

The default layout is row-major.
 New,Object o:Matrix4f
      Initialize from an array and return new instance of Matrix4f
      @arg o array with values
      @return new instance of Matrix4f
    set,int row,int col,float v
      Set element at (row, column) to v
      @arg row Row number (0..3)
      @arg col Column number (0..3)
      @arg v new value for a
    getRC,int row,int col
      Get element at (row, column)
      @arg row Row number (0..3)
      @arg col Column number (0..3)
      @return Element value
    setA,float v
      Set a element to v
      @arg v new value for a
    setB,float v
      Set b element to v
      @arg v new value for b
    setC,float v
      Set c element to v
      @arg v new value for c
    setD,float v
      Set d element to v
      @arg v new value for d
    setE,float v
      Set e element to v
      @arg v new value for e
    setF,float v
      Set f element to v
      @arg v new value for f
    setG,float v
      Set g element to v
      @arg v new value for g
    setH,float v
      Set h element to v
      @arg v new value for h
    setI,float v
      Set i element to v
      @arg v new value for i
    setJ,float v
      Set j element to v
      @arg v new value for j
    setK,float v
      Set k element to v
      @arg v new value for k
    setL,float v
      Set l element to v
      @arg v new value for l
    setM,float v
      Set m element to v
      @arg v new value for m
    setN,float v
      Set n element to v
      @arg v new value for n
    setO,float v
      Set o element to v
      @arg v new value for o
    setP,float v
      Set p element to v
      @arg v new value for p
    getA:float
      Get value of a element
      @return value of a element
    getB:float
      Get value of b element
      @return value of b element
    getC:float
      Get value of c element
      @return value of c element
    getD:float
      Get value of d element
      @return value of d element
    getE:float
      Get value of e element
      @return value of e element
    getF:float
      Get value of f element
      @return value of f element
    getG:float
      Get value of g element
      @return value of g element
    getH:float
      Get value of h element
      @return value of h element
    getI:float
      Get value of i element
      @return value of i element
    getJ:float
      Get value of j element
      @return value of j element
    getK:float
      Get value of k element
      @return value of k element
    getL:float
      Get value of l element
      @return value of l element
    getM:float
      Get value of m element
      @return value of m element
    getN:float
      Get value of n element
      @return value of n element
    getO:float
      Get value of o element
      @return value of o element
    getP:float
      Get value of p element
      @return value of p element
    getString:String
      Get string representation of matrix ((a, b, c, d), (e, f, g, h), (i, j, k, l), (m, n, o, p))
      @return string representation of matrix
    setRow,int r,Vector4f v
      Set row r with values from v
      @arg r row number
      @arg v Vector4f instance
    getRow,int r:Vector4f
      Get row r values
      @arg r row number
      @return vector with values from row r
    setCol,int c,Vector4f v
      Set column c with values from v
      @arg c column number
      @arg v Vector4f instance
    getCol,int c:Vector4f
      Get column c values
      @arg c column number
      @return vector with values from column c
    init,float a,float b,float c,float d,float e,float f,float g,float h,float i,float j,float k,float l,float m,float n,float o,float p
      Initialize matrix (in native order, default is row-major)
      @arg a value for m11 (in row-major order)
      @arg b value for m12
      @arg c value for m13
      @arg d value for m14
      @arg e value for m21
      @arg f value for m22
      @arg g value for m23
      @arg h value for m24
      @arg i value for m31 (in row-major order, m13 in column-major order)
      @arg j value for m32
      @arg k value for m33
      @arg l value for m34
      @arg m value for m41
      @arg n value for m42
      @arg o value for m43
      @arg p value for m44
    initRowMajor,float a,float b,float c,float d,float e,float f,float g,float h,float i,float j,float k,float l,float m,float n,float o,float p
      Initialize matrix (args are in row major order, convert to matrix order as required)
      @arg a value for m11
      @arg b value for m12
      @arg c value for m13
      @arg d value for m14
      @arg e value for m21
      @arg f value for m22
      @arg g value for m23
      @arg h value for m24
      @arg i value for m31
      @arg j value for m32
      @arg k value for m33
      @arg l value for m34
      @arg m value for m41
      @arg n value for m42
      @arg o value for m43
      @arg p value for m44
    initColumnMajor,float a,float b,float c,float d,float e,float f,float g,float h,float i,float j,float k,float l,float m,float n,float o,float p
      Initialize matrix (args are in column major (OpenGL) order, convert to matrix order as required)
      @arg a value for m11
      @arg b value for m21
      @arg c value for m31
      @arg d value for m41
      @arg e value for m12
      @arg f value for m22
      @arg g value for m32
      @arg h value for m42
      @arg i value for m13
      @arg j value for m23
      @arg k value for m33
      @arg l value for m43
      @arg m value for m14
      @arg n value for m24
      @arg o value for m34
      @arg p value for m44
    initTranspose,float a,float b,float c,float d,float e,float f,float g,float h,float i,float j,float k,float l,float m,float n,float o,float p
      Initialize matrix (flip row/column major order, default is row-major)
      @arg a value for m11
      @arg b value for m12
      @arg c value for m13
      @arg d value for m14
      @arg e value for m21
      @arg f value for m22
      @arg g value for m23
      @arg h value for m24
      @arg i value for m31
      @arg j value for m32
      @arg k value for m33
      @arg l value for m34
      @arg m value for m41
      @arg n value for m42
      @arg o value for m43
      @arg p value for m44
    initRowf,int row,float a,float b,float c,float d
      Initialize matrix row from scalars
      @arg row row index
      @arg a value for first column
      @arg b value for second column
      @arg c value for third column
      @arg d value for fourth column
    initRowv,int row,Vector4f v
      Initialize matrix row from vector or array-like object
      @arg row row number
      @arg v row vector
    initColf,int col,float a,float b,float c,float d
      Initialize matrix column from scalars
      @arg col column index
      @arg a value for first row
      @arg b value for second row
      @arg c value for third row
      @arg d value for fourth row
    initColv,int c,Vector4f v
      Initialize matrix column from vector or array-like object
      @arg col column number
      @arg v vector with values
    initEulerXYX,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation (radian angles)
      @arg b second rotation
      @arg c third rotation
    initEulerXZX,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerYXY,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerYZY,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerZXZ,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerZYZ,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerXYZ,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerXZY,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerYXZ,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerYZX,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerZXY,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initEulerZYX,float a,float b,float c
      Initialize with euler rotation matrix
      @arg a first rotation
      @arg b second rotation
      @arg c third rotation
    initIdentity
      Initialize with identity matrix.
   isIdentity
      Check if this is an identity matrix (diagonal=1, other=0)
   initTranslatef
    initTranslatev
      @arg scale Vector2f, or Vector3f
    initScalef
    initScalev
      @arg scale Vector2f, Vector3f, or Vector4f
    initSkewXf
      a in radians (0..2PI)
      see https://www.w3.org/TR/css-transforms-1/#SkewXDefined
    initSkewYf
      a in radians (0..2PI)
    initRotatef
      Init X=>Y=>Z rotation matrix (initEulerXYZ())
    initRotatev
      Init v.x=>v.y=>v.z rotation matrix (initEulerXYZ())
    initRotate
      Init rotation matrix (rotate about axis vector)
    initOrtho
    initFrustum
    initFrustumFov
     (field of view is in degrees)
    initFrustumFovXY,float left, float right,float bottom,float top,float aspect,float fovX,float fovY,float znear,float zfar
    (field of view is in degrees)
    initPerspective
      Init perspective matrix
    initLookAt
      Init look-at matrix
    add,Matrix4f m
      Add another matrix m to this instance
      @arg m matrix to add
    sub,Matrix4f m
      Substract another matrix m from this instance
      @arg m matrix to substract
    mulf,float s
      Multiply this instance with scalar value s
      @arg s value to multiply
    mul,Matrix4f m
      Multiply this instance with matrix m (this * m)
      @arg m matrix to multiply
    mulRev,Matrix4f m
      Reverse-multiply matrix m by this instance (m * this)
      @arg m matrix to multiply
    mulv,Vector4f v:Vector4f
      Multiply this instance with a 4dim vector
      @arg v vector to multiply
      @return resulting vector
    mulvRev,Vector4f v:Vector4f
      Multiply this transposed instance with a 4dim vector
      @arg v vector to multiply
      @return resulting vector
    getAbs:float
      Calculate the Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    getAbsSqr:float
      Calculate the squared Hilbert-Schmidt norm of the matrix
      @return scalar matrix norm value
    unit
      Normalise matrix with Hilbert-Schmidt norm
    unitScale,float v
      Normalise matrix with Hilbert-Schmidt norm and scale by v afterwards
      @arg v value to scale matrix
    det:float
      Calculate determinant of matrix
      @return value of determinant
    invert
      Calculate inversion of matrix, so that A*A<sup>-1</sup>=U
    transpose
      Transpose matrix
    getQuaternionf:Quaternionf
      Tries to find a Quaternion representation of the matrix if possible
      @return Quaternion representation of matrix (or zero quaternion if not possible)
    BuildPerspectiveMatrix4f,float fov,float aspect,float zNear,float zFar:Matrix4f
      Builds a perspective matrix
      @arg fov field of view in degrees
      @arg aspect aspect ratio
      @arg zNear zNear value
      @arg zFar zFar value
      @return generated matrix
    BuildLookAtMatrix4f,Vector3f eye,Vector3f center,Vector3f up:Matrix4f
      Build a look at matrix
      @arg eye eye direction vector
      @arg center center of camera vector
      @arg up vector for up direction
      @return generated matrix
    BuildRotateMatrix4f,float angle,Vector3f axis:Matrix4f
      Build a rotation matrix
      @arg angle rotation angle
      @arg axis rotation axis vector
      @return generated matrix
    BuildTranslateMatrix4f,Vector3f t:Matrix4f
      Build a translation matrix
      @arg t translation vector
      @return generated matrix
    BuildScaleMatrix4f,Vector3f scale:Matrix4f
      Build a scale matrix
      @arg scale vector
      @return generated matrix
    BuildEulerXZX4f,float a,float b,float c:Matrix4f
      Build an euler rotation matrix with XZX convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerXYX4f,float a,float b,float c:Matrix4f
      Build an euler rotation matrix with XYX convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerYXY4f,float a,float b,float c:Matrix4f
      Build an euler rotation matrix with YXY convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerYZY4f,float a,float b,float c:Matrix4f
      Build an euler rotation matrix with YZY convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerZYZ4f,float a,float b,float c:Matrix4f
      Build an euler rotation matrix with ZYZ convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerZXZ4f,float a,float b,float c:Matrix4f
      Build an euler rotation matrix with ZXZ convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerXZY4f,float a,float b,float c:Matrix4f
      Build an euler rotation matrix with XZY convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerXYZ4f,float a,float b,float c:Matrix4f
      Build an euler rotation matrix with XYZ convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerYXZ4f,float a,float b,float c:Matrix4f
      Build an euler rotation matrix with YXZ convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerYZX4f,float a,float b,float c:Matrix4f
      Build an euler rotation matrix with YZX convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerZYX4f,float a,float b,float c:Matrix4f
      Build an euler rotation matrix with ZYX convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    BuildEulerZXY4f,float a,float b,float c:Matrix4f
      Build an euler rotation matrix with ZXY convention
      @arg a first angle in radians
      @arg b second angle in radians
      @arg c third angle in radians
      @return generated matrix
    translatef,float x,float y,float z
      Multiply by translation matrix
   translatev,Vector3f v
      Multiply by translation matrix
   scalef,float x,float y,float z
      Multiply by scale matrix
   scalev,Vector3f v
      Multiply by scale matrix
   rotatef,float x,float y,float z
      Multiply by X=>Y=>Z rotation matrix (radian angles)
   rotatev,Vector3f v
      Multiply by v.x=>v.y=>v.z rotation matrix (radian angles)
   rotate,float angle,Object axis
      Multiply by rotation matrix
   ortho,float left,float right,float bottom,float top,float znear,float zfar
      Multiply by orthogonal matrix
   frustum,float left,float right,float bottom,float top,float znear,float zfar
      Multiply by frustum matrix
   frustumFovXY,float left,float right,float bottom,float top,float aspect,float fovX,float fovY,float znear,float zfar
      Multiply by frustum matrix (fields of view are in degrees)
   perspective,float fov,float aspect,float znear,float zfar
      Multiply by perspective matrix
   lookAt,Object eye,Object center,Object up
      Multiply by look-at matrix
   extractPlanes,Vector4f retN,Vector4f retF,Vector4f retL,Vector4f retR,Vector4f retT,Vector4f retB
      Extract normalized planes from projection matrix (e.g. for view-frustum culling)

      @arg retN returns Vector4f near plane
      @arg retF returns Vector4f far plane
      @arg retL returns Vector4f left plane
      @arg retR returns Vector4f right plane
      @arg retT returns Vector4f top plane
      @arg retB returns Vector4f bottom plane
   matrix4f,Object a:Matrix4f
   Initialize from an array and return new instance of Matrix4f
   @arg a array with values
   @return new instance of Matrix4f
Quaterniond,Object
This class represents a single precision quaternion of the form a+ib+jc+kd.
 setR,Double a
      Set real part to a
      @arg a new value for real value
    setI,Double a
      Set imaginery i part to a
      @arg a new value for imaginery i value
    setJ,Double a
      Set imaginery j part to a
      @arg a new value for imaginery j value
    setK,Double a
      Set imagnery k part to a
      @arg a new value for imaginery k value
    setV,Vector3d v
      Set vector part to v
      @arg v new value for vector part
    getR:Double
      Get Real value
      @return real value
    getI:Double
      Get imaginery i value
      @return imaginery i value
    getJ:Double
      Get imaginery j value
      @return imaginery j value
    getK:Double
      Get imaginery k value
      qreturn imaginery k value
    getV:Vector3d
      Get vector value
      @return vector part
    getString:String
      Get string representation of quaternion number (a+ib+jc+kd)
      @return string representation (a+ib+jc+kd)
    add,Quaterniond v
      add quaternion v to this instance
      @arg v quaternion value to add
    sub,Quaterniond v
      substract quaternion v from this instance
      @arg v quaternion value to substract
    mulf,Double v
      Multiply this instance with scalar v
      @arg v scalar value to multiply
    mul,Quaterniond v
      Multiply this instance with quaternion v (Grassmann product)
      @arg v quaternion value to multiply
    mulConj,Quaterniond v
      Multiply this instance with conjugated quaternion v (Grassmann product)
      @arg v conjugated quaternion value to multiply
    conjMul,Quaterniond v
      Multiply this conjugated instance with quaternion v (Grassmann product)
      @arg v quaternion value to multiply
    dot,Quaterniond v:Double
      Calculate dot product (inner product) of this instance and quaternion v
      @arg v quaternion value to multiply
      @return dot product of quaternions
    outer,Quaterniond v:Quaterniond
      Calculate the outer product of this instance and quaternion v
      @arg v quaternion value to multiply
      @return outer product of quaternions
    invert
      Calculate the reciprocal value 1/q
      @return inverse quaternion
    getAbs:Double
      Return the absolute value of this instance
      @return length of quaternion
    getAbsSqr:Double
      Return the squared length of this instance
      @return length<sup>2</sup> of this instance
    unit
      Set length of quaternion to 1
    unitScale,Double s
      Set length of quaternion to s
      @arg s new length
    setAngle,Double a
      Set new quaternion angle
      @arg a new angle
    setRadius,Double a
      Set new quaternion radius
      @arg a new length
    setPureUnit,Quaterniond v
      Set new pure unit vector of quaternion
      @arg v pure unit quaternion with real part zero and length 1
    getAngle:Double
      Calculate quaternion angle
      @return quaternion angle
    getRadius:Double
      Calculate quaternion radius (_getAbs)
      @return length of quaternion
    getPureUnit:Quaterniond
      Returns pure unit quaternion from instance
      @return pure unit quaternion
    getMatrix4d:Matrix4d
      Get 4x4 matrix representation of quaternion
      @return matrix representation of quaternion
    initf,float a,float b,float c,float d
      Init quaternion to a+ib+jc+kd
      @arg a new real value
      @arg b new i value
      @arg c new j value
      @arg d new k value
    init,Double a,Double b,Double c,Double d
      Init quaternion to a+ib+jc+kd
      @arg a new real value
      @arg b new i value
      @arg c new j value
      @arg d new k value
    New,Double a,Double b,Double c,Double d:Quaterniond
      Init quaternion to a+ib+jc+kd and return new instance
      @arg a new real value
      @arg b new i value
      @arg c new j value
      @arg d new k value 
    quaterniond,Double a,Double b,Double c,Double d:Quaterniond
   Init quaternion to a+ib+jc+kd and return new instance
   @arg a new real value
   @arg b new i value
   @arg c new j value
   @arg d new k value 
 Quaternionf,Object
This class represents a single precision quaternion of the form a+ib+jc+kd.
 setR,float a
      Set real part to a
      @arg a new value for real value
    setI,float a
      Set imaginery i part to a
      @arg a new value for imaginery i value
    setJ,float a
      Set imaginery j part to a
      @arg a new value for imaginery j value
    setK,float a
      Set imagnery k part to a
      @arg a new value for imaginery k value
    setV,Vector3f v
      Set vector part to v
      @arg v new value for vector part
    getR:float
      Get Real value
      @return real value
    getI:float
      Get imaginery i value
      @return imaginery i value
    getJ:float
      Get imaginery j value
      @return imaginery j value
    getK:float
      Get imaginery k value
      qreturn imaginery k value
    getV:Vector3f
      Get vector value
      @return vector part
    getString:String
      Get string representation of quaternion number (a+ib+jc+kd)
      @return string representation (a+ib+jc+kd)
    add,Quaternionf v
      add quaternion v to this instance
      @arg v quaternion value to add
    sub,Quaternionf v
      substract quaternion v from this instance
      @arg v quaternion value to substract
    mulf,float v
      Multiply this instance with scalar v
      @arg v scalar value to multiply
    mul,Quaternionf v
      Multiply this instance with quaternion v (Grassmann product)
      @arg v quaternion value to multiply
    mulConj,Quaternionf v
      Multiply this instance with conjugated quaternion v (Grassmann product)
      @arg v conjugated quaternion value to multiply
    conjMul,Quaternionf v
      Multiply this conjugated instance with quaternion v (Grassmann product)
      @arg v quaternion value to multiply
    dot,Quaternionf v:float
      Calculate dot product (inner product) of this instance and quaternion v
      @arg v quaternion value to multiply
      @return dot product of quaternions
    outer,Quaternionf v:Quaternionf
      Calculate the outer product of this instance and quaternion v
      @arg v quaternion value to multiply
      @return outer product of quaternions
    invert
      Calculate the reciprocal value 1/q
      @return inverse quaternion
    getAbs:float
      Return the absolute value of this instance
      @return length of quaternion
    getAbsSqr:float
      Return the squared length of this instance
      @return length<sup>2</sup> of this instance
    unit
      Set length of quaternion to 1
    unitScale,float s
      Set length of quaternion to s
      @arg s new length
    setAngle,float a
      Set new quaternion angle
      @arg a new angle
    setRadius,float a
      Set new quaternion radius
      @arg a new length
    setPureUnit,Quaternionf v
      Set new pure unit vector of quaternion
      @arg v pure unit quaternion with real part zero and length 1
    getAngle:float
      Calculate quaternion angle
      @return quaternion angle
    getRadius:float
      Calculate quaternion radius (_getAbs)
      @return length of quaternion
    getPureUnit:Quaternionf
      Returns pure unit quaternion from instance
      @return pure unit quaternion
    getMatrix4f:Matrix4f
      Get 4x4 matrix representation of quaternion
      @return matrix representation of quaternion
    getRotateMatrix4f:Matrix4f
      Get 4x4 rotation matrix representation of quaternion q*conj q
      @return rotation matrix representation of quaternion
    init,float a,float b,float c,float d
      Init quaternion to a+ib+jc+kd
      @arg a new real value
      @arg b new i value
      @arg c new j value
      @arg d new k value
    New,float a,float b,float c,float d:Quaternionf
      Init quaternion to a+ib+jc+kd and return new instance
      @arg a new real value
      @arg b new i value
      @arg c new j value
      @arg d new k value 
    quaternionf,float a,float b,float c,float d:Quaternionf
   Init quaternion to a+ib+jc+kd and return new instance
   @arg a new real value
   @arg b new i value
   @arg c new j value
   @arg d new k value 
 Vector2d,Object
This class represents a double precision 2 dimensional coordinate vector.
 setX,Double a
      Set x element to a
      @arg a new value for x
    setY,Double a
      Set y element to a
      @arg a new value for y
    getX:Double
      Get value of x element
      @return value of x element
    getY:Double
      Get value of y element
      @return value of y element
    getString:String
      Get string representation (x, y) of vector
      @return string representation of vector
    add,Vector2d v
      Add another vector v to this instance
      @arg v Vector to add
    sub,Vector2d v
      Substract another vector v from this instance
      @arg v Vector to substract
    dot,Vector2d v:Double
      Calculate dot product from this instance and v
      @arg v Vector2d instance
      @return Scalar value
    tensor,Vector2d v:Matrix2d
      Create resulting matrix of tensor product from this instance and v
      @arg v Vector2d instance
      @return Matrix2d instance
    muld,Double v
      Multiply this instance by scalar value v
      @arg v scalar value
    mul,Vector2d v
      Multiply the x element of this instance by the x element of v and do the same with the y element
      @arg v Vector2d instance
    getAbs:Double
      Return length of vector
      @return length of vector
    getAbsSqr:Double
      Return squared length of vector
      @return length<sup>2</sup> of vector
    unit
      Set length to 1
    unitScale,Double s
      Set length to s
      @arg s New length of vector
    init,Double a,Double b
      Initialize values to x=a and y=b
      @arg a new x value
      @arg b new y value
    initf,float a,float b
      Initialize with single precision values to x=a and x=b
      @arg a new x value
      @arg b new y value
    initScaled,Vector2d v,Double s
      Initialize values to s*v
      @arg v Vector2d instance
      @arg s scale to multiply
    New,Double a,Double b:Vector2d
      Initialize and return new Vector2d instance with x=a and y=b
      @arg a new x value
      @arg b new y value
      @return new Vector2d instance
    vector2d,Double a,Double b:Vector2d
   Initialize and return new Vector2d instance with x=a and y=b
   @arg a new x value
   @arg b new y value
   @return new Vector2d instance
 Vector2f,Object
This class represents a single precision 2 dimensional coordinate vector.
 New,float x,float y:Vector2f
      Initialize and return new Vector2f instance
      @return new Vector2f instance
    init,float x,float y
      Initialize vector from scalars
    setX,float a
      Set x element to a
      @arg a new value for x
    setY,float a
      Set y element to a
      @arg a new value for y
    getX:float
      Get value of x element
      @return value of x element
    getY:float
      Get value of y element
      @return value of y element
    getYX:float
      Get yx vector
      @return yx vector
    getString:String
      Get string representation (x, y) of vector
      @return string representation of vector
    add,Vector2f v
      Add another vector v to this instance
      @arg v Vector to add
    sub,Vector2f v
      Substract another vector v from this instance
      @arg v Vector to substract
    dot,Vector2f v:float
      Calculate dot product from this instance and v
      @arg v Vector2f instance
      @return Scalar value
    tensor,Vector2f v:Matrix2f
      Create resulting matrix of tensor product from this instance and v
      @arg v Vector2f instance
      @return Matrix2f instance
    addf,float v
      Add scalar value to all components
      @arg v scalar value
    add2f,float tx, float ty
      Translate x / y components
      @arg tx
      @arg ty
    mulf,float s
      Multiply this instance by scalar value s
      @arg s scalar value
    mul2f,float sx,float sy
      Scale x / y components
      @arg sx
      @arg sy
    mul,Vector2f v
      Multiply the x element of this instance by the x element of v and do the same with the y element
      @arg v Vector2f instance
    transform,Matrix m
      Multiply matrix by this vector.
      @arg m Matrix2f (all call styles), or Matrix[34]f (rval,rarg)
    getAbs:float
      Return length of vector
      @return length of vector
    getAbsSqr:float
      Return squared length of vector
      @return length<sup>2</sup> of vector
    unit
      Scale vector to length 1 if possible
    unitScale,float s
      Set length to s
      @arg s New length of vector
    initScalef,Vector2f v,float s
      Initialise values to s*v
      @arg v Vector2f instance
      @arg s scale to multiply
    distanceToPlane,Vector2f q,Vector2f n:float
      Calc distance of vertex to plane defined by Vector2f q (on plane) and plane normal n
      @arg q Point on plane
      @arg n Plane normal
      @return distance
    intersect,Vector2f v,float s
      Returns intersection point in 'this'
      Returns normalized position on edge v2s<>v2e.
      @arg v1s Edge 1 start
      @arg v1e Edge 1 end
      @arg v2s Edge 2 start
      @arg v2e Edge 2 end
    bilinearQuadPos
      Calc interpolated quad position from normalized (0..1) coordinates (0;0=left/top)
    rotateCW90
      Rotate 90 degrees clock-wise (x = y, y = -x)
   rotateCCW90
      Rotate 90 degrees counter-clock-wise (x = -y, y = x)
   vector2f,float a,float b:Vector2f
   Initialise and return new Vector2f instance with x=a and y=b
   @arg a new x value
   @arg b new y value
   @return new Vector2f instance
 Vector3d
This class represents a double precision 3 dimensional coordinate vector.
 setX,Double a
      Set x element to a
      @arg a new value for x
    setY,Double a
      Set y element to a
      @arg a new value for y
    setZ,Double a
      Set z element to a
      @arg a new value for z
    getX:Double
      Get value of x element
      @return value of x element
    getY:Double
      Get value of y element
      @return value of y element
    getZ:Double
      Get value of z element
      @return value of z element
    getString:String
      Get string representation of vector (x, y, z)
      @return string representation of vector
    add,Vector3d v
      Add another vector v to this instance
      @arg v vector to add
    sub,Vector3d v
      Substract another vector v from this instance
      @arg v vector to substract
    dot,Vector3d v:Double
      Calculate scalar dot product from this instance and v
      @arg v Vector3d instance
      @return scalar value
    cross,Vector3d v:Vector3d
      Calculate cross product from this instance and v
      @arg v Vector3d instance
      @return orthogonal vector to this instance and v
    triple,Vector3d b,Vector3d c:Double
      Calculate triple product this.dot(b.cross(c)) (a*(bxc))
      ærg b second parameter of triple product
      arg c third parameter of triple product
      @return scalar value
    tensor,Vector3d v:Matrix3d
      Create resulting matrix of tensor product from this instance and v
      @arg a Vector3d instance
      @return Matrix3d instance
    muld,Double v
      Multiply this instance by scalar value v
      @arg v scalar value
    mul,Vector3d v
      Multiply the x element of this instance by the x element of v and do the same with the y and z element
      @arg v Vector3d instance
    getAbs:Double
      Return length of vector
      @return length of vector
    getAbsSqr:Double
      Return squared length of vector
      @return length<sup>2</sup> of vector
    unit
      Set length to 1
    unitScale,Double s
      Set length to s
      @arg s new length of vector
    initf,float a,float b,float c
      Initialise values to single precision x=a, y=b and z=c
      @arg a new x value
      @arg b new y value
      @arg c new z value
    init,Double a,Double b,Double c
      Initialise values to x=a, y=b and z=c
      @arg a new x value
      @arg b new y value
      @arg c new z value
    initScaled,Vector3d v,Double s
      Initialise vector to s*v
      @arg v Vector3d instance
      @arg s scale to multiply
    New,Double a,Double b,Double c:Vector3d
      Initialise and return new Vector3d instance with x=a, y=b and z=c
      @arg a new x value
      @arg b new y value
      @arg c new z value
    vector3d,Double a,Double b,Double c:Vector3d
   Initialise and return new Vector3d instance with x=a, y=b and z=c
   @arg a new x value
   @arg b new y value
   @arg c new z value
 Vector3f
This class represents a single precision 3 dimensional coordinate vector.
 New,float x,float y,float z:Vector3f
      Initialize and return new Vector3f instance
    setX,float a
      Set x element to a
      @arg a new value for x
    setY,float a
      Set y element to a
      @arg a new value for y
    setZ,float a
      Set z element to a
      @arg a new value for z
    getX:float
      Get value of x element
      @return value of x element
    getY:float
      Get value of y element
      @return value of y element
    getZ:float
      Get value of z element
      @return value of z element
    getXy:float
      Get xy vector
      @return xy vector
    getXz:float
      Get xz vector
      @return xz vector
    getYx:float
      Get yx vector
      @return yx vector
    getString:String
      Get string representation of vector (x, y, z)
      @return string representation of vector
    init,float x,float y,float z
      Initialize vector from scalars
    add,Vector3f v
      Add another vector v to this instance
      @arg v vector to add
    addf,float v
      Add scalar value to all components
      @arg v scalar value
    add3f,float tx, float ty, float tz
      Translate x / y / z components
      @arg tx
      @arg ty
      @arg tz
    sub,Vector3f v
      Substract another vector v from this instance
      @arg v vector to substract
    dot,Vector3f v:float
      Calculate scalar dot product from this instance and v
      @arg v Vector3f instance
      @return scalar value
    cross,Vector3f v:Vector3f
      Calculate cross product from this instance and v
      @arg v Vector3f instance
      @return orthogonal vector to this instance and v
    triple,Vector3f b,Vector3f c:float
      Calculate triple product this.dot(b.cross(c)) (a*(bxc))
      ærg b second parameter of triple product
      arg c third parameter of triple product
      @return scalar value
    tensor,Vector3f v:Matrix3f
      Create resulting matrix of tensor product from this instance and v
      @arg a Vector3f instance
      @return Matrix3f instance
    mulf,float v
      Multiply this instance by scalar value v
      @arg v scalar value
    mul3f,float sx,float sy,float sz
      Scale x / y / z components
      @arg sx
      @arg sy
      @arg sz
    mul,Vector3f v
      Multiply the x element of this instance by the x element of v and do the same with the y and z element
      @arg v Vector3f instance
    transform,Matrix m
      Multiply matrix by this vector.
      @arg m Matrix3f (all call styles), or Matrix4f (rval,rarg)
    getAbs:float
      Return length of vector
      @return length of vector
    getAbsSqr:float
      Return squared length of vector
      @return length<sup>2</sup> of vector
    unit
      Scale vector to length 1 if possible
    unitScale,float s
      Set length to s
      @arg s new length of vector
    initScalef,Vector3f v,float s
      Initialize vector to s*v
      @arg v Vector3f instance
      @arg s scale to multiply
    distanceToPlane,Vector3f q,Vector3f n:float
      Calc distance of vertex to plane defined by Vector3f q (on plane) and plane normal n
      @arg q Point on plane
      @arg n Plane normal
      @return distance
    intersectPlane,Vector3f q,Vector3f n,Vector3f p1,Vector3f p2:boolean
      Calc intersection between line (p1->p2) and plane (q,n).
      @arg q Point on plane
      @arg n Plane normal
      @arg p1 Line start point
      @arg p2 Line end point
      @return true when intersection was found. false when plane and line are colinear (or when any parameter object is invalid).
    divz
      Divide by Z and return (2D) Vector2f
    bilinearQuadPos
      Calc interpolated quad position from normalized (0..1) coordinates (0;0=left/top)
    vector3f,float a,float b,float c:Vector3f
   Initialize and return new Vector3f instance with x=a, y=b and z=c
   @arg a new x value
   @arg b new y value
   @arg c new z value
 Vector4d,Object
This class represents a double precision 4 dimensional euclidean space vector.
 setX,Double a
      Set x element to a
      @arg a new value for x
    setY,Double a
      Set y element to a
      @arg a new value for y
    setZ,Double a
      Set z element to a
      @arg a new value for z
    setW,Double a
      Set w element to a
      @arg a new value for w
    getX:Double
      Get value of x element
      @return value of x element
    getY:Double
      Get value of y element
      @return value of y element
    getZ:Double
      Get value of z element
      @return value of z element
    getW:Double
      Get value of w element
      @return value of w element
    getString:String
      Get string representation of vector (x, y, z, w)
      @return string representation of vector
    add,Vector4d v
      Add another vector v to this instance
      @arg v vector to add
    sub,Vector4d v
      Substract another vector v from this instance
      @arg v vector to substract
    dot,Vector4d v:Double
      Calculate scalar dot product from this instance and v
      @arg v Vector4d instance
      @return scalar value
    tensor,Vector4d v:Matrix4f
      Create resulting matrix of tensor product from this instance and v
      @arg a Vector4d instance
      @return Matrix4f instance
    muld,Double v
      Multiply this instance by scalar value v
      @arg v scalar value
    mul,Vector4d v
      Multiply the x element of this instance by the x element of v and do the same with the y, z and w elements
      @arg v Vector4d instance
    getAbs:Double
      Return length of vector
      @return length of vector
    getAbsSqr:Double
      Return squared length of vector
      @return length<sup>2</sup> of vector
    unit
      Set length to 1
    unitScale,Double s
      Set length to s
      @arg s new length of vector
    initf,float a,float b,float c,float d
      Initialise values to single precision x=a, y=b, z=c and w=d
      @arg a new x value
      @arg b new y value
      @arg c new z value
      @arg d new w value
    init,Double a,Double b,Double c,Double d
      Initialise values to x=a, y=b, z=c and w=d
      @arg a new x value
      @arg b new y value
      @arg c new z value
      @arg d new w value
    initScaled,Vector4d v,Double s
      Initialise vector to s*v
      @arg v Vector4d instance
      @arg s scale to multiply
    New,Double a,Double b,Double c,Double d:Vector4d
      Initialise and return new Vector4d instance with x=a, y=b, z=c and w=d
      @arg a new x value
      @arg b new y value
      @arg c new z value
      @arg d new w value
    vector4d,Double a,Double b,Double c,Double d:Vector4d
   Initialise and return new Vector4d instance with x=a, y=b, z=c and w=d
   @arg a new x value
   @arg b new y value
   @arg c new z value
   @arg d new w value
 Vector4f,Object
This class represents a single precision 4 dimensional euclidean space vector.
 New,float x,float y,float z,float w:Vector4f
      Initialize and return new Vector4f instance
    init,float x,float y,float z,float w
      Initialize vector from scalars
    setX,float a
      Set x element to a
      @arg a new value for x
    setY,float a
      Set y element to a
      @arg a new value for y
    setZ,float a
      Set z element to a
      @arg a new value for z
    setW,float a
      Set w element to a
      @arg a new value for w
    getX:float
      Get value of x element
      @return value of x element
    getY:float
      Get value of y element
      @return value of y element
    getZ:float
      Get value of z element
      @return value of z element
    getW:float
      Get value of w element
      @return value of w element
    getXy:float
      Get xy Vector2f
      @return xy Vector2f
    getXz:float
      Get xz Vector2f
      @return xz Vector2f
    getYz:float
      Get yz Vector2f
      @return yz Vector2f
    getXyz:float
      Get xyz Vector3f
      @return xyz Vector3f
    getString:String
      Get string representation of vector (x, y, z, w)
      @return string representation of vector
    add,Vector4f v
      Add vector or array-like object
      @arg v vector to add
    sub,Vector4f v
      Substract vector or array-like object
      @arg v vector to substract
    dot,Vector4f v:float
      Calculate scalar dot product from this instance and v
      @arg v Vector4f or array-like object
      @return scalar value
    tensor,Vector4f v:Matrix4f
      Create resulting matrix of tensor product from this instance and v
      @arg a Vector4f instance
      @return Matrix4f instance
    addf,float v
      Add scalar value to all components
      @arg v scalar value
    mulf,float v
      Multiply this instance by scalar value v
      @arg v scalar value
    mul,Vector4f v
      Multiply the x element of this instance by the x element of v and do the same with the y, z and w elements
      @arg v Vector4f or array-like object
    transform,Matrix4f m
      Multiply matrix by this vector
    getAbs:float
      Return length of vector
      @return length of vector
    getAbsSqr:float
      Return squared length of vector
      @return length<sup>2</sup> of vector
    unit
      Set length to 1
    unitScale,float s
      Set length to s
      @arg s new length of vector
    initScalef,Vector4f v,float s
      Initialise vector to s*v
      @arg v Vector4f or array-like object
      @arg s scale to multiply
    rotate,Matrix4f m
      Multiply matrix by this vector and replace this vector by the result

      This is a convenience method to remove the need for temporary Vector4f variables in scripts (the temporary is created on the stack instead).

      @arg m Matrix4f instance (rotation matrix)
    distanceToPlane,Vector4f q,Vector4f n:float
      Calc distance of vertex to plane defined by Vector4f q (on plane) and plane normal n
      @arg q Point on plane
      @arg n Plane normal
      @return distance
    intersectPlane,Vector4f q,Vector4f n,Vector4f p1,Vector4f p2:boolean
      Calc intersection between line (p1->p2) and plane (q,n).
      @arg q Point on plane
      @arg n Plane normal
      @arg p1 Line start point
      @arg p2 Line end point
      @return true when intersection was found. false when plane and line are colinear (or when any parameter object is invalid).
    divz
      Divide by Z and return Vector2f
    divw
      Divide by W and return Vector3f
    bilinearQuadPos
      Calc interpolated quad position from normalized (0..1) coordinates (0;0=left/top)
    project
      Convert clip to window coordinates
      @arg r Either a Vector2f, Vector3f, or Vector4f (returns projected coordinate)
      @arg vpX Viewport position X
      @arg vpX Viewport position Y
      @arg vpW Viewport width
      @arg vpH Viewport height
      @arg depthRangeNear Usually 0
      @arg depthRangeFar Usually 1
    vector4f,float x,float y,float z,float w:Vector4f
   Initialise and return new Vector4f instance
   @arg x new x value
   @arg y new y value
   @arg z new z value
   @arg w new w value
 