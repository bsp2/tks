tkopengl
tkopengl
ZGLShader
 SetDefaultVersion,String ver
      Set/Override default #version header (optional)

      (note) applies to all ZGLShader objects
      (note) e.g. ZGLShader.SetDefaultVersion("140\n");
      (note) must end with newline (and may contain additional, non-empty header lines)

      @arg ver Version string (e.g. "140\n")
   setVertexSource,String src
    Set GLSL vertex shader source
    getVertexSource:String
    Get GLSL vertex shader source
    setFragmentSource,String src
    Set GLSL fragment shader source
    getFragmentSource:String
    Get GLSL fragment shader source
    create:boolean
    Create program, compile vertex+fragment shader, and link program.
   bind
      Bind shader program
    unbind
      Unbind shader program
    destroy
      Destroy shader program and attached shaders
    getUniformLocation,String name:int
      Query uniform location
    getAttribLocation,String name:int
      Query attribute location
    getProgramId:int
      Get GL program id
    getFragmentShaderId:int
      Get GL fragment shader id
    getVertexShaderId:int
      Get GL vertex shader id
    getNumActiveAttributes:int
      Query number of active attributes
    getNumActiveUniforms:int
      Query number of active uniforms
    getProgramBinaryLength:int
      Query GL program binary size
    zglSetEnableGLCore,boolean bEnable
Enable GL 4.x core profile mode (false = compatibility).
Usually called by tksdl plugin during init (after reading TKSDL_GLCORE env var)
glActiveTexture,int texture
Select active texture unit


glActiveTexture selects which texture unit subsequent texture state calls will affect. The number of texture units an implementation supports is implementation dependent, but must be at least 2.


Vertex arrays are client-side GL resources, which are selected by the §glClientActiveTexture routine.

@arg texture Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTUREi, where i ranges from 0 to the larger of (GL_MAX_TEXTURE_COORDS - 1) and (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1). The initial value is §GL_TEXTURE0.
@see http://www.opengl.org/sdk/docs/man/html/glActiveTexture.xhtml

glAlphaFunc,int func,float ref
Specify the alpha test function

@arg func Specifies the alpha comparison function. Symbolic constants §GL_NEVER, §GL_LESS, §GL_EQUAL, §GL_LEQUAL, §GL_GREATER, §GL_NOTEQUAL, §GL_GEQUAL, and §GL_ALWAYS are accepted. The initial value is §GL_ALWAYS.
@arg ref Specifies the reference	value that incoming alpha values are compared to. This value is clamped to the range 0	through	1, where 0 represents the lowest possible alpha value and 1 the highest possible	value. The initial reference value is 0.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glAlphaFunc.xml
glArrayElement,int i
Render a vertex using the specified vertex array element

@arg i Specifies an index into the enabled vertex data arrays.
@see http://www.opengl.org/sdk/docs/man2/xhtml/glArrayElement.xml
glBegin,int mode
Delimit the vertices	of a primitive or a group of like primitives

@arg mode Specifies the primitive or primitives that will be created from vertices presented between glBegin and the subsequent glEnd. Ten symbolic constants are accepted: §GL_POINTS, §GL_LINES, §GL_LINE_STRIP, §GL_LINE_LOOP, §GL_TRIANGLES, §GL_TRIANGLE_STRIP, §GL_TRIANGLE_FAN, §GL_QUADS, §GL_QUAD_STRIP, and §GL_POLYGON.
@see http://www.opengl.org/sdk/docs/man2/xhtml/glBegin.xml
@see §glEnd
glBindTexture,int target,int texture
Bind a named texture to a texturing target

@arg target Specifies the target	to which the texture is	bound. Must be either §GL_TEXTURE_1D or §GL_TEXTURE_2D.
@arg texture Specifies the name of a texture.
@see http://www.opengl.org/sdk/docs/man/html/glBindTexture.xhtml
zglDeleteTexture:int texture
Delete texture object.


Please notice that the §Texture class usually handles texture handling.

@arg texture Texture name-id
@see http://www.opengl.org/sdk/docs/man/html/glDeleteTextures.xhtml
zglGenTexture:int
Generate texture name.


Please notice that the §Texture class usually handles texture handling.

@return generated texture name
@see http://www.opengl.org/sdk/docs/man/html/glGenTextures.xhtml
glBlendColor,float r,float g,float b,float a
Set the blend color

@arg r Red value
@arg g Green value
@arg b Blue value
@arg a Alpha value
@see http://www.opengl.org/sdk/docs/man/html/glBlendColor.xhtml
glBlendEquation,int mode
Specify the equation used for both the RGB blend equation and the Alpha blend equation

@arg Specifies how source and destination colors are combined. It must be §GL_FUNC_ADD, §GL_FUNC_SUBTRACT, §GL_FUNC_REVERSE_SUBTRACT, §GL_MIN, §GL_MAX.
@see http://www.opengl.org/sdk/docs/man/html/glBlendEquation.xhtml
glBlendFunc,int sfactor,int dfactor
Specify pixel arithmetic

@arg sfactor Specifies how the red, green, blue, and alpha source blending factors are computed.  Nine symbolic constants are accepted: §GL_ZERO, §GL_ONE, §GL_DST_COLOR, §GL_ONE_MINUS_DST_COLOR, §GL_SRC_ALPHA, §GL_ONE_MINUS_SRC_ALPHA, §GL_DST_ALPHA, §GL_ONE_MINUS_DST_ALPHA, and §GL_SRC_ALPHA_SATURATE. The initial value is	§GL_ONE.
@arg dfactor Specifies how the red, green, blue, and alpha destination blending factors are computed. Eight symbolic constants are accepted: §GL_ZERO, §GL_ONE, §GL_SRC_COLOR, §GL_ONE_MINUS_SRC_COLOR, §GL_SRC_ALPHA, §GL_ONE_MINUS_SRC_ALPHA, §GL_DST_ALPHA, and §GL_ONE_MINUS_DST_ALPHA. The initial value is §GL_ZERO.
@see http://www.opengl.org/sdk/docs/man/html/glBlendFunc.xhtml
glBlendFuncSeparate,int srcRGB,int dstRGB,int srcAlpha,int dstAlpha
Specify pixel arithmetic for RGB and alpha components separately

@arg srcRGB Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: §GL_ZERO, §GL_ONE, §GL_SRC_COLOR, §GL_ONE_MINUS_SRC_COLOR, §GL_DST_COLOR, §GL_ONE_MINUS_DST_COLOR, §GL_SRC_ALPHA, §GL_ONE_MINUS_SRC_ALPHA, §GL_DST_ALPHA, §GL_ONE_MINUS_DST_ALPHA, §GL_CONSTANT_COLOR, §GL_ONE_MINUS_CONSTANT_COLOR, §GL_CONSTANT_ALPHA, §GL_ONE_MINUS_CONSTANT_ALPHA, and §GL_SRC_ALPHA_SATURATE. The initial value is §GL_ONE.
@arg dstRGB Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: §GL_ZERO, §GL_ONE, §GL_SRC_COLOR, §GL_ONE_MINUS_SRC_COLOR, §GL_DST_COLOR, §GL_ONE_MINUS_DST_COLOR, §GL_SRC_ALPHA, §GL_ONE_MINUS_SRC_ALPHA, §GL_DST_ALPHA, §GL_ONE_MINUS_DST_ALPHA, §GL_CONSTANT_COLOR, §GL_ONE_MINUS_CONSTANT_COLOR, §GL_CONSTANT_ALPHA, and §GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is §GL_ZERO.
@arg srcAlpha Specifies how the alpha source blending factor is computed. The same symbolic constants are accepted as for srcRGB. The initial value is §GL_ONE.
@arg dstAlpha Specifies how the alpha destination blending factor is computed. The same symbolic constants are accepted as for dstRGB. The initial value is §GL_ZERO.
@see http://www.opengl.org/sdk/docs/man/html/glBlendFuncSeparate.xhtml
glCallList,int list
Execute a display list

@arg list Specifies the integer name of the display list to be executed.
@see http://www.opengl.org/sdk/docs/man2/xhtml/glCallList.xml
glClientActiveTexture,int texture
select active texture unit


glActiveTexture selects which texture unit subsequent texture state calls will affect. The number of texture units an implementation supports is implementation dependent, but must be at least 2.


glClientActiveTexture selects the vertex array client state parameters to be modified by glTexCoordPointer (see §zglTexCoordPointer1f, §zglTexCoordPointer2f, §zglTexCoordPointer3f), and enabled or disabled with §glEnableClientState or glDisableClientState, respectively, when called with a parameter of §GL_TEXTURE_COORD_ARRAY.


@arg texture Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTUREi, where i ranges from 0 to the larger of (GL_MAX_TEXTURE_COORDS - 1) and (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1). The initial value is §GL_TEXTURE0.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glClientActiveTexture.xml
glCullFace,int mode
Specify whether front- or back-facing facets can be culled

@arg mode Specifies whether front- or back-facing	facets are candidates for culling. Symbolic constants §GL_FRONT, §GL_BACK, and §GL_FRONT_AND_BACK are accepted. The initial value is §GL_BACK.

@see http://www.opengl.org/sdk/docs/man/html/glCullFace.xhtml
glClearColor,float r,float g,float b,float a
Specify clear values for the color buffers

@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man/html/glClearColor.xhtml
zglClearColorARGB,int argb
Specify clear values for the color buffers as packed ARGB32 color

@arg argb packed 32bit color

@see http://www.opengl.org/sdk/docs/man/html/glClearColor.xhtml
glClear,int mask
Clear buffers to preset values

@arg mask Bitwise	OR of masks that indicate the buffers to be cleared. The four masks are §GL_COLOR_BUFFER_BIT, §GL_DEPTH_BUFFER_BIT, §GL_ACCUM_BUFFER_BIT, and §GL_STENCIL_BUFFER_BIT.

@see http://www.opengl.org/sdk/docs/man/html/glClear.xhtml
glClearDepth,float depth
Specify the clear value for the depth buffer

@arg depth Specifies the depth value used when the depth buffer is cleared. The initial value is 1.

@see http://www.opengl.org/sdk/docs/man/html/glClearDepth.xhtml
glClearStencil,int s
Specify the clear value for the stencil buffer

@arg s Specifies the index used when the stencil buffer is cleared. The initial value is 0.

@see http://www.opengl.org/sdk/docs/man/html/glClearStencil.xhtml
zglColor1f,float lum
Set the current color (grayscale)

@arg lum Luminance component (replicated for red/green/blue/alpha)

@see http://www.opengl.org/sdk/docs/man2/xhtml/glColor.xml
glColor3f,float r,float g,float b
Set the current color

@arg r Red component
@arg g Green component
@arg b Blue component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glColor.xml
glColor3ub,byte r,byte g,byte b
Set the current color

@arg r Red component
@arg g Green component
@arg b Blue component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glColor.xml
glColor4f,float r,float g,float b,float a
Set the current color

@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glColor.xml
glColor4ub,byte r,byte g,byte b,byte a
Set the current color

@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glColor.xml
glColorMask,boolean r,boolean g,boolean b,boolean a
Enable and disable writing of frame buffer color components

@arg r Red mask
@arg g Green mask
@arg b Blue mask
@arg a Alpha mask

@see http://www.opengl.org/sdk/docs/man/html/glColorMask.xhtml
glCopyPixels,int x,int y,int w,int h,int type
Copy pixels in the frame buffer

@arg x Specify the window x coordinate of the lower left corner of the rectangular region of pixels to be copied
@arg y Specify the window y coordinate of the lower left corner of the rectangular region of pixels to be copied
@arg w Specify the width of the rectangular region of pixels to be copied. Must be nonnegative.
@arg h Specify the height of the rectangular region of pixels to be copied. Must be nonnegative.
@arg type Specifies whether color values, depth values, or stencil values are to be	copied. Symbolic constants §GL_COLOR, §GL_DEPTH, and §GL_STENCIL are accepted.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glCopyPixels.xml
glCopyTexSubImage2D,int target,int level,int xoffset,int yoffset,int x,int y,int width,int height
Copy a two-dimensional texture subimage

@arg target Specifies the target	texture. Must be §GL_TEXTURE_2D
@arg level Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
@arg xoffset Specifies a texel offset in the x direction within the texture array.
@arg yoffset Specifies a texel offset in the y direction within the texture array.
@arg x Specify the window x coordinate of the lower left corner of the rectangular region of pixels to be copied.
@arg y Specify the window y coordinate of the lower left corner of the rectangular region of pixels to be copied.
@arg width Specifies the width of the texture subimage.
@arg height Specifies the height	of the texture subimage.

@see http://www.opengl.org/sdk/docs/man/html/glCopyTexSubImage2D.xhtml
glTexImage1D,int target,int level,int internalformat,int width,int border,int format,int type
Reserve memory for a 1D texture.

The pixels parameter is ignored, for now.

Also see the §Texture class.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexImage1D.xml
glTexImage2D,int target,int level,int internalformat,int width,int height,int border,int format,int type
Reserve memory for a 2D texture.

The pixels parameter is ignored, for now.

Also see the §Texture class.

@see http://www.opengl.org/sdk/docs/man/html/glTexImage2D.xhtml
glTexImage3D,int target,int level,int internalFormat,int width,int height,int depth,int border,int format,int type,Object pixels
Specify a three-dimensional texture image

The pixels parameter is ignored, for now.

@arg target Specifies the target	texture. Must be §GL_TEXTURE_3D or §GL_PROXY_TEXTURE_3D
@arg level Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
@arg internalFormat Specifies the number of color components  in  the  texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: §GL_ALPHA, §GL_ALPHA4, §GL_ALPHA8, §GL_ALPHA12, §GL_ALPHA16, §GL_LUMINANCE, §GL_LUMINANCE4, §GL_LUMINANCE8, §GL_LUMINANCE12, §GL_LUMINANCE16, §GL_LUMINANCE_ALPHA, §GL_LUMINANCE4_ALPHA4, §GL_LUMINANCE6_ALPHA2, §GL_LUMINANCE8_ALPHA8, §GL_LUMINANCE12_ALPHA4, §GL_LUMINANCE12_ALPHA12, §GL_LUMINANCE16_ALPHA16, §GL_INTENSITY, §GL_INTENSITY4, §GL_INTENSITY8, §GL_INTENSITY12, §GL_INTENSITY16, §GL_R3_G3_B2, §GL_RGB, §GL_RGB4, §GL_RGB5, §GL_RGB8, §GL_RGB10, §GL_RGB12, §GL_RGB16, §GL_RGBA, §GL_RGBA2, §GL_RGBA4, §GL_RGB5_A1, §GL_RGBA8, §GL_RGB10_A2, §GL_RGBA12, or §GL_RGBA16.
@arg width Specifies the width of the texture image.
@arg height Specifies the height	of the texture image.
@arg depth Specifies the depth of the texture image
@arg border Specifies the width of the border. Must be either 0 or 1.
@arg format Specifies the format of the pixel data. The following symbolic values are accepted: §GL_COLOR_INDEX, §GL_RED, §GL_GREEN, §GL_BLUE, §GL_ALPHA, §GL_RGB, §GL_BGR, §GL_RGBA, §GL_BGRA, §GL_LUMINANCE, and §GL_LUMINANCE_ALPHA.
@arg type Specifies the data type of the pixel data. The following symbolic  values are accepted: §GL_UNSIGNED_BYTE, §GL_BYTE, §GL_BITMAP, §GL_UNSIGNED_SHORT, §GL_SHORT, §GL_UNSIGNED_INT, §GL_INT, §GL_FLOAT, §GL_UNSIGNED_BYTE_3_3_2, §GL_UNSIGNED_BYTE_2_3_3_REV, §GL_UNSIGNED_SHORT_5_6_5, §GL_UNSIGNED_SHORT_5_6_5_REV, §GL_UNSIGNED_SHORT_4_4_4_4, §GL_UNSIGNED_SHORT_4_4_4_4_REV, §GL_UNSIGNED_SHORT_5_5_5_1, §GL_UNSIGNED_SHORT_1_5_5_5_REV, §GL_UNSIGNED_INT_8_8_8_8, §GL_UNSIGNED_INT_8_8_8_8_REV, §GL_UNSIGNED_INT_10_10_10_2, and §GL_UNSIGNED_INT_2_10_10_10_REV.
@arg pixels Currently ignored. I.e, this call can currently only be used to allocate data for render-to-texture use.

@see http://www.opengl.org/sdk/docs/man/html/glTexImage3D.xhtml
glTexStorage2D,int target,int levels,int internalformat,int width,int height
Simultaneously specify storage for all levels of a two-dimensional texture

@see https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexStorage2D.xhtml
glTexStorage2DMultisample,int target,int levels,int internalformat,int width,int height,boolean fixedsamplelocations
Simultaneously specify storage for all levels of a two-dimensional texture

@see https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexStorage2DMultisample.xhtml
glTexStorage3D,int target,int levels,int internalformat,int width,int height,int depth
Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture

@see https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexStorage3D.xhtml
glTexStorage3DMultisample,int target,int levels,int internalformat,int width,int height,int depth,boolean fixedsamplelocations
Simultaneously specify storage for all levels of a two-dimensional texture

@see https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexStorage2DMultisample.xhtml
glCopyTexSubImage3D,int target,int level,int xoffset,int yoffset,int zoffset,int x,int y,int width,int height
Copy a three-dimensional texture subimage

@arg target Specifies the target	texture. Must be §GL_TEXTURE_3D or §GL_PROXY_TEXTURE_3D.
@arg level Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
@arg xoffset Specifies a texel offset in the x direction within the texture array.
@arg yoffset Specifies a texel offset in the y direction within the texture array.
@arg zoffset Specifies a texel offset in the z direction within the texture array.
@arg x Specify the horizontal window coordinate of the lower left corner of the rectangular region of pixels to be copied.
@arg y Specify the vertical window coordinate of the lower left corner of the rectangular region of pixels to be copied.
@arg width Specifies the width of the texture subimage.
@arg height Specifies the height of the texture subimage.

@see http://www.opengl.org/sdk/docs/man/html/glCopyTexSubImage3D.xhtml
glCopyTexImage2D,int target,int level,int internalFormat,int x,int y,int width,int height,int border
Copy pixels into a 2D texture image

@arg target Specifies the	target texture. Must be GL_TEXTURE_2D.
@arg level Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
@arg internalFormat Specifies the internal format of the texture. Must be one of the following symbolic constants:
           §GL_ALPHA, §GL_ALPHA4, §GL_ALPHA8, §GL_ALPHA12, §GL_ALPHA16, §GL_LUMINANCE, §GL_LUMINANCE4, §GL_LUMINANCE8, §GL_LUMINANCE12, §GL_LUMINANCE16, §GL_LUMINANCE_ALPHA, §GL_LUMINANCE4_ALPHA4, §GL_LUMINANCE6_ALPHA2, §GL_LUMINANCE8_ALPHA8, §GL_LUMINANCE12_ALPHA4, §GL_LUMINANCE12_ALPHA12, §GL_LUMINANCE16_ALPHA16, §GL_INTENSITY, §GL_INTENSITY4, §GL_INTENSITY8, §GL_INTENSITY12, §GL_INTENSITY16, §GL_RGB, §GL_R3_G3_B2, §GL_RGB4, §GL_RGB5, §GL_RGB8, §GL_RGB10, §GL_RGB12, §GL_RGB16, §GL_RGBA, §GL_RGBA2, §GL_RGBA4, §GL_RGB5_A1, §GL_RGBA8, §GL_RGB10_A2, §GL_RGBA12, or §GL_RGBA16.
@arg x Specify the window x coordinate of the lower left corner of the rectangular region of pixels to be copied.
@arg y Specify the window y coordinate of the lower left corner of the rectangular region of pixels to be copied.
@arg width Specifies the width of the texture image. Must be 0 or 2**n + 2*border for some integer n.
@arg height Specifies the height of the texture image. Must be 0 or 2**m + 2*border for some integer m.
@arg border Specifies the width of the border. Must be either 0 or 1.

@see http://www.opengl.org/sdk/docs/man/html/glCopyTexImage2D.xhtml
glDepthFunc,int func
Specify the value used for depth buffer comparisons

@arg func Specifies the depth comparison function. Symbolic constants §GL_NEVER, §GL_LESS, §GL_EQUAL, §GL_LEQUAL, §GL_GREATER, §GL_NOTEQUAL, §GL_GEQUAL, and §GL_ALWAYS are accepted. The initial value is §GL_LESS.

@see http://www.opengl.org/sdk/docs/man/html/glDepthFunc.xhtml
glDepthMask,boolean mask
Enable or disable writing into the depth buffer

@arg mask Specifies whether the depth buffer is enabled for writing. If flag is false, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.

@see http://www.opengl.org/sdk/docs/man/html/glDepthMask.xhtml
glDisable,int cap
Disable server-side GL capabilities

@arg cap Specifies a symbolic constant indicating a GL capability.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glDisable.xml
glDisableClientState,int cap
Disable client-side capability

@arg Specifies the capability to disable.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glDisableClientState.xml
glDrawArrays,int mode,int first,int count
Render primitives from array data

@arg mode Specifies what kind of primitives to render. Symbolic constants §GL_POINTS, §GL_LINE_STRIP, §GL_LINE_LOOP, §GL_LINES, §GL_TRIANGLE_STRIP, §GL_TRIANGLE_FAN, §GL_TRIANGLES, §GL_QUAD_STRIP, §GL_QUADS, and §GL_POLYGON are accepted.
@arg first Specifies the starting index in the enabled arrays.
@arg count Specifies the number of indices to be rendered.

@see http://www.opengl.org/sdk/docs/man/html/glDrawArrays.xhtml
glDrawArraysInstanced,int mode,int first,int count,int instancecount
Draw multiple instances of a range of elements

@arg mode Specifies what kind of primitives to render. Symbolic constants §GL_POINTS, §GL_LINE_STRIP, §GL_LINE_LOOP, §GL_LINES, §GL_TRIANGLE_STRIP, §GL_TRIANGLE_FAN, §GL_TRIANGLES, §GL_QUAD_STRIP, §GL_QUADS, and §GL_POLYGON are accepted.
@arg first Specifies the starting index in the enabled arrays.
@arg count Specifies the number of indices to be rendered.
@arg instancecount Specifies the number of instances of the specified range of indices to be rendered

@see http://www.opengl.org/sdk/docs/man/html/glDrawArrays.xhtml
glDrawElements,int mode,IntArray indices
Render primitives from array data

@arg mode Specifies what kind of primitives to render. Symbolic constants §GL_POINTS, §GL_LINE_STRIP, §GL_LINE_LOOP, §GL_LINES, §GL_TRIANGLE_STRIP, §GL_TRIANGLE_FAN, §GL_TRIANGLES, §GL_QUAD_STRIP, §GL_QUADS, and §GL_POLYGON are accepted.
@arg indices Specifies a pointer (and count) to the location where the indices are stored

@see http://www.opengl.org/sdk/docs/man/html/glDrawElements.xhtml
zglDrawElementsOffset,int mode,int count,int type,int offset
Render primitives from currently bound index buffer data

@arg mode Specifies what kind of primitives to render. Symbolic constants §GL_POINTS, §GL_LINE_STRIP, §GL_LINE_LOOP, §GL_LINES, §GL_TRIANGLE_STRIP, §GL_TRIANGLE_FAN, §GL_TRIANGLES, §GL_QUAD_STRIP, §GL_QUADS, and §GL_POLYGON are accepted.
@arg count Number of indices
@arg type Index type (e.g. §GL_UNSIGNED_INT)
@arg offset Buffer offset (bytes)

@see http://www.opengl.org/sdk/docs/man/html/glDrawElements.xhtml
glDrawBuffer,int mode
Specify which color buffers are to be drawn into

@arg mode Specifies up to four color buffers to be drawn into. Symbolic constants §GL_NONE, §GL_FRONT_LEFT, §GL_FRONT_RIGHT, §GL_BACK_LEFT, §GL_BACK_RIGHT, §GL_FRONT, §GL_BACK, §GL_LEFT, §GL_RIGHT, §GL_FRONT_AND_BACK, and GL_AUXi, where i is between 0 and GL_AUX_BUFFERS-1, are accepted (GL_AUX_BUFFERS is not the upper limit; use glGet to query the number of	available aux buffers.) The initial value is	§GL_FRONT for single-buffered contexts, and §GL_BACK for double-buffered contexts.

@see http://www.opengl.org/sdk/docs/man/html/glDrawBuffer.xhtml
glDrawBuffers,int n,IntArray a
Specifies a list of color buffers to be drawn into

@arg n Specifies the number of buffers in bufs.
@arg a Array of symbolic constants specifying the buffers into which fragment colors or data values will be written. The symbolic constants contained in
 bufs may be any of the following §GL_NONE, §GL_FRONT_LEFT, §GL_FRONT_RIGHT, §GL_BACK_LEFT, §GL_BACK_RIGHT, GL_AUXi

@see http://www.opengl.org/sdk/docs/man/html/glDrawBuffers.xhtml
glEdgeFlag,boolean flag
Flag edges as either boundary or nonboundary

@arg flag Specifies the current edge flag value, either true or false. The initial value is true.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glEdgeFlag.xml
glEnable,int cap
Enable server-side GL capabilities

@arg cap Specifies a symbolic constant indicating a GL capability.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glEnable.xml
glIsEnabled,int cap:int
Test whether a capability is enabled

@arg cap Specifies a symbolic constant indicating a GL capability.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glIsEnabled.xml
glEnableClientState,int cap
Enable client-side capability

@arg cap Specifies the capability to enable. Symbolic constants §GL_COLOR_ARRAY, §GL_EDGE_FLAG_ARRAY, §GL_INDEX_ARRAY, §GL_NORMAL_ARRAY, §GL_TEXTURE_COORD_ARRAY, and §GL_VERTEX_ARRAY are accepted.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glEnableClientState.xml
glEnd
Delimit the vertices of a primitive or a group of like primitives

@see §glBegin
@see http://www.opengl.org/sdk/docs/man2/xhtml/glEnd.xml
glFinish
Block until all GL execution is complete

@see http://www.opengl.org/sdk/docs/man/html/glFinish.xhtml
glFlush
Force execution of GL commands in finite time

@see http://www.opengl.org/sdk/docs/man/html/glFlush.xhtml
glFrontFace,int mode
Define front- and back-facing polygons

@arg mode Specifies the orientation of front-facing polygons. §GL_CW and §GL_CCW are accepted. The initial value is §GL_CCW.

@see http://www.opengl.org/sdk/docs/man/html/glFrontFace.xhtml
glFrustum,float left,float right,float bottom,float top,float znear,float zfar
Multiply the current matrix by a perspective matrix

@arg left Specify the coordinate for the left vertical clipping plane.
@arg right Specify the coordinate for the right vertical clipping plane.
@arg bottom Specify the coordinate for the bottom horizontal clipping plane.
@arg top Specify the coordinate for the top horizontal clipping plane.
@arg znear Specify the distances to the near depth clipping plane. The distance must be positive.
@arg zfar Specify the distances to the far depth clipping plane. The distance must be positive.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glFrustum.xml
glHint,int target,int mode
Specify implementation-specific hints

@arg target Specifies a symbolic constant indicating the behavior to be controlled. §GL_FOG_HINT, §GL_LINE_SMOOTH_HINT, §GL_PERSPECTIVE_CORRECTION_HINT, §GL_POINT_SMOOTH_HINT, and §GL_POLYGON_SMOOTH_HINT are accepted.
@arg mode Specifies a symbolic constant indicating the desired behavior. §GL_FASTEST, §GL_NICEST, and §GL_DONT_CARE are accepted.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glHint.xml
glLoadIdentity
Replace the current matrix with the identity matrix

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLoadIdentity.xml
glLineWidth,float width
Specify the width of rasterized lines

@arg width Specifies the width of rasterized lines. The initial value is 1.

@see http://www.opengl.org/sdk/docs/man/html/glLineWidth.xhtml
glLineStipple,int factor,short pattern
Specify the line stipple pattern

@arg factor Specifies a multiplier for each bit in the line stipple pattern. If factor is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used. factor is clamped to the range	[1, 256] and defaults to 1.
@arg pattern Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when	the line is rasterized. Bit zero is used first; the default pattern is all 1's.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLineStipple.xml
glLogicOp,int opcode
Specify a logical pixel operation for color index rendering

@arg opcode Specifies a symbolic constant	that selects a logical operation. The following symbols are accepted: §GL_CLEAR, §GL_SET, §GL_COPY, §GL_COPY_INVERTED, §GL_NOOP, §GL_INVERT, §GL_AND, §GL_NAND, §GL_OR, §GL_NOR, §GL_XOR, §GL_EQUIV, §GL_AND_REVERSE, §GL_AND_INVERTED, §GL_OR_REVERSE, and §GL_OR_INVERTED. The initial value is §GL_COPY.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLogicOp.xml
glMatrixMode,int mode
Specify which matrix is the current matrix

@arg mode Specifies which matrix stack is	the target for subsequent matrix operations. Three values are accepted: §GL_MODELVIEW, §GL_PROJECTION, and §GL_TEXTURE. The initial value is §GL_MODELVIEW.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMatrixMode.xml
glMultiTexCoord1f,int texture,float s
Set the current texture coordinate

@arg texture Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
@arg s Specify the s texture coordinate

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMultiTexCoord.xml
glMultiTexCoord2f,int texture,float s,float t
Set the current texture coordinates

@arg texture Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
@arg s Specify the s texture coordinate
@arg t Specify the t texture coordinate

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMultiTexCoord.xml
glMultiTexCoord3f,int texture,float s,float t,float r
Set the current texture coordinates

@arg texture Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
@arg s Specify the s texture coordinate
@arg t Specify the t texture coordinate
@arg r Specify the r texture coordinate

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMultiTexCoord.xml
glNormal3f,float nx,float ny,float nz
Set the current normal vector

@arg nx Specify the x coordinate of the new current normal
@arg ny Specify the y coordinate of the new current normal
@arg nz Specify the z coordinate of the new current normal

@see http://www.opengl.org/sdk/docs/man2/xhtml/glNormal.xml
glOrtho,float left,float right,float bottom,float top,float znear,float zfar
Multiply the current matrix with an orthographic matrix

@arg left Specify the coordinate for the left vertical clipping plane.
@arg right Specify the coordinate for the right vertical clipping plane.
@arg bottom Specify the coordinate for the bottom horizontal clipping plane.
@arg top Specify the coordinate for the top horizontal clipping plane.
@arg znear Specify the distance to the near depth clipping planes. These values are negative if the plane is to be behind the viewer.
@arg zfar Specify the distance to the far depth clipping planes. These values are negative if the plane is to be behind the viewer.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glOrtho.xml
glPointSize,float size
Specify the diameter of rasterized points

@arg size Specifies the diameter of rasterized points. The initial value is 1.

@see http://www.opengl.org/sdk/docs/man/html/glPointSize.xhtml
glPointParameterf,int pname,float param
Specify point parameter

@arg pname
Specifies a single-valued point parameter.
§GL_POINT_SIZE_MIN, §GL_POINT_SIZE_MAX, §GL_POINT_FADE_THRESHOLD_SIZE, and §GL_POINT_SPRITE_COORD_ORIGIN are accepted.

@arg param Specifies the value to be assigned to pname

@see http://www.opengl.org/sdk/docs/man2/xhtml/glPointParameter.xml
zglPointParameter3f,int pname,float param
Specify point parameters

@arg pname §GL_POINT_DISTANCE_ATTENUATION is accepted

@arg param Specifies the values to be assigned to pname

@see http://www.opengl.org/sdk/docs/man2/xhtml/glPointParameter.xml
glPixelZoom,float xfactor,float yfactor
Specify the pixel zoom factors

@arg xfactor Specify the x zoom factor for pixel write operations.
@arg yfactor Specify the y zoom factor for pixel write operations.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glPixelZoom.xml
glPolygonMode,int face,int mode
Select a polygon rasterization mode

@arg face Specifies the polygons that mode applies to. Must be §GL_FRONT for front-facing polygons, §GL_BACK for back-facing polygons, or §GL_FRONT_AND_BACK for front- and back-facing polygons.
@arg mode Specifies how polygons will be rasterized. Accepted values are §GL_POINT, §GL_LINE, and §GL_FILL. The initial	value is §GL_FILL for both front- and back-facing polygons.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glPolygonMode.xml
glPolygonOffset,float factor,float units
Set the scale and units used to calculate depth values

@arg factor  Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
@arg units Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.

@see http://www.opengl.org/sdk/docs/man/html/glPolygonOffset.xhtml
glPopAttrib
Pop the server attribute stack

@see http://www.opengl.org/sdk/docs/man2/xhtml/glPopAttrib.xml
glPushAttrib,int mask
Push the server attribute stack

@see http://www.opengl.org/sdk/docs/man2/xhtml/glPushAttrib.xml
glPopClientAttrib
Pop the client attribute stack

@see http://www.opengl.org/sdk/docs/man2/xhtml/glPopClientAttrib.xml
glPushClientAttrib,int mask
Push the client attribute stack

@see http://www.opengl.org/sdk/docs/man2/xhtml/glPushClientAttrib.xml
glPopMatrix
Pop the current matrix stack

@see http://www.opengl.org/sdk/docs/man2/xhtml/glPopMatrix.xml
glPushMatrix
Push the current matrix stack

@see http://www.opengl.org/sdk/docs/man2/xhtml/glPushMatrix.xml
glRasterPos2i,int x,int y
Specify the raster position for pixel operations

@arg x Specify the x object coordinate for the raster position.
@arg y Specify the y object coordinate for the raster position.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glRasterPos.xml
glRasterPos3f,float x,float y,float z
Specify the raster position for pixel operations

@arg x Specify the x object coordinate for the raster position.
@arg y Specify the y object coordinate for the raster position.
@arg z Specify the z object coordinate for the raster position.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glRasterPos.xml
glReadBuffer,int mode
Select a color buffer source for pixels

@arg mode Specifies a color buffer. Accepted values are §GL_FRONT_LEFT, §GL_FRONT_RIGHT, §GL_BACK_LEFT, §GL_BACK_RIGHT, §GL_FRONT, §GL_BACK, §GL_LEFT, §GL_RIGHT, and GL_AUXi, where i is between 0 and §GL_AUX_BUFFERS-1.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glReadBuffer.xml
glRectf,float x1,float y1,float x2,float y2
Draw a rectangle

@arg x1 Specify one vertex of a rectangle.
@arg y1 Specify one vertex of a rectangle.
@arg x2 Specify the opposite vertex of	the rectangle.
@arg y2 Specify the opposite vertex of	the rectangle.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glRect.xml
glRotatef,float angle,float x,float y,float z
Multiply the current matrix by a rotation matrix

@arg angle Specifies the angle of rotation, in degrees.
@arg x Specify the x coordinate of a vector, respectively.
@arg y Specify the y coordinate of a vector, respectively.
@arg z Specify the z coordinate of a vector, respectively.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glRotate.xml
glScalef,float x,float y,float z
Multiply the current matrix by a general scaling matrix

@arg x Specify scale factor along the x axis
@arg y Specify scale factor along the y axis
@arg z Specify scale factor along the z axis

@see http://www.opengl.org/sdk/docs/man2/xhtml/glScale.xml
glScissor,int x,int y,int width,int height
Define the scissor box

@arg x Specify the x coordinate of the lower left corner of the scissor box. Initially (0, 0)
@arg y Specify the y coordinate of the lower left corner of the scissor box. Initially (0, 0)
@arg width Specify the width of the scissor box
@arg height Specify the height of the scissor box

@see http://www.opengl.org/sdk/docs/man/html/glScissor.xhtml
glShadeModel,int mode
Select flat or smooth shading

@arg mode Specifies a symbolic value representing a shading technique. Accepted values are §GL_FLAT and §GL_SMOOTH. The initial value is §GL_SMOOTH.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glShadeModel.xml
glStencilFunc,int func,float ref,int mask
Set function and reference value for stencil testing

@arg func Specifies the test function. Eight tokens are valid: §GL_NEVER, §GL_LESS, §GL_LEQUAL, §GL_GREATER, §GL_GEQUAL, §GL_EQUAL, §GL_NOTEQUAL, and §GL_ALWAYS. The initial value is §GL_ALWAYS.
@arg ref Specifies the reference	value for the stencil test. ref is clamped to the range [0,2n-1], where n is the number of bitplanes in the stencil buffer. The initial value is 0.
@arg mask Specifies a mask that is ANDed with both the reference value and the stored stencil value when	the test is done. The initial value	is all 1's.

@see http://www.opengl.org/sdk/docs/man/html/glStencilFunc.xhtml
glStencilOp,int fail,int zfail,int zpass
Set stencil test actions

@arg fail Specifies the action to take when the stencil test fails. Six symbolic constants are accepted: §GL_KEEP, §GL_ZERO, §GL_REPLACE, §GL_INCR, §GL_DECR, and §GL_INVERT. The initial value is §GL_KEEP.
@arg zfail Specifies the stencil action when the stencil test passes, but the depth test fails. zfail accepts the same symbolic constants as fail. The initial value is §GL_KEEP.
@arg zpass Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either	there is no depth buffer or depth testing is not enabled. zpass accepts the same symbolic constants as fail. The initial value is §GL_KEEP.

@see http://www.opengl.org/sdk/docs/man/html/glStencilOp.xhtml
glStencilMask,int mask
Control the writing of individual bits in the stencil planes

@arg mask Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is	all 1's.

@see http://www.opengl.org/sdk/docs/man/html/glStencilMask.xhtml
glTexSubImage2D,int target,int level,int xoffset,int yoffset,int width,int height,int format,int type,int offset
Specify a two-dimensional texture subimage.

Please notice that texture uploads are usually handled in the §Texture class.
This function is merely useful when working with OpenGL 2.1 pixel buffer objects (PBO).

@arg target Specifies the target texture. Must be §GL_TEXTURE_2D.
@arg level Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
@arg xoffset Specifies a texel offset in the x direction within the texture array.
@arg yoffset Specifies a texel offset in the y direction within the texture array.
@arg width Specifies the width of the texture subimage.
@arg height Specifies the height of the texture subimage.
@arg Specifies the format of the pixel data. The following symbolic values are accepted: §GL_COLOR_INDEX, §GL_RED, §GL_GREEN, §GL_BLUE, §GL_ALPHA, §GL_RGB, §GL_BGR, §GL_RGBA, §GL_BGRA, §GL_LUMINANCE, and §GL_LUMINANCE_ALPHA.

@see http://www.opengl.org/sdk/docs/man/html/glTexSubImage2D.xhtml
glTexEnvf,int target,int pname,int param
Set texture environment parameters

@arg target Specifies a texture environment. Must be §GL_TEXTURE_ENV, §GL_TEXTURE_FILTER_CONTROL or §GL_POINT_SPRITE.
@arg pname Specifies the symbolic name of a single-valued texture environment parameter. Must be §GL_TEXTURE_ENV_MODE, §GL_TEXTURE_LOD_BIAS, §GL_COMBINE_RGB, §GL_COMBINE_ALPHA, §GL_SRC0_RGB, §GL_SRC1_RGB, §GL_SRC2_RGB, §GL_SRC0_ALPHA, §GL_SRC1_ALPHA, §GL_SRC2_ALPHA, §GL_OPERAND0_RGB, §GL_OPERAND1_RGB, §GL_OPERAND2_RGB, §GL_OPERAND0_ALPHA, §GL_OPERAND1_ALPHA, §GL_OPERAND2_ALPHA, §GL_RGB_SCALE, §GL_ALPHA_SCALE, or §GL_COORD_REPLACE
@arg param Specifies a single symbolic constant, one of §GL_ADD, §GL_ADD_SIGNED, §GL_INTERPOLATE, §GL_MODULATE, §GL_DECAL, §GL_BLEND, §GL_REPLACE, §GL_SUBTRACT, §GL_COMBINE, §GL_TEXTURE, §GL_CONSTANT, §GL_PRIMARY_COLOR, §GL_PREVIOUS, §GL_SRC_COLOR, §GL_ONE_MINUS_SRC_COLOR, §GL_SRC_ALPHA, §GL_ONE_MINUS_SRC_ALPHA, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the §GL_RGB_SCALE or §GL_ALPHA_SCALE.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexEnv.xml
zglTexEnvColor4f,float r,float g,float b,float a
Set texture environment color

@arg r Red value
@arg g Green value
@arg b Blue value
@arg a Alpha value

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexEnv.xml
glTexEnvi,int target,int pname,int param
Set texture environment parameters

@arg target Specifies a texture environment. Must be §GL_TEXTURE_ENV, §GL_TEXTURE_FILTER_CONTROL or §GL_POINT_SPRITE.
@arg pname Specifies the symbolic name of a single-valued texture environment parameter. Must be §GL_TEXTURE_ENV_MODE, §GL_TEXTURE_LOD_BIAS, §GL_COMBINE_RGB, §GL_COMBINE_ALPHA, §GL_SRC0_RGB, §GL_SRC1_RGB, §GL_SRC2_RGB, §GL_SRC0_ALPHA, §GL_SRC1_ALPHA, §GL_SRC2_ALPHA, §GL_OPERAND0_RGB, §GL_OPERAND1_RGB, §GL_OPERAND2_RGB, §GL_OPERAND0_ALPHA, §GL_OPERAND1_ALPHA, §GL_OPERAND2_ALPHA, §GL_RGB_SCALE, §GL_ALPHA_SCALE, or §GL_COORD_REPLACE
@arg param Specifies a single symbolic constant, one of §GL_ADD, §GL_ADD_SIGNED, §GL_INTERPOLATE, §GL_MODULATE, §GL_DECAL, §GL_BLEND, §GL_REPLACE, §GL_SUBTRACT, §GL_COMBINE, §GL_TEXTURE, §GL_CONSTANT, §GL_PRIMARY_COLOR, §GL_PREVIOUS, §GL_SRC_COLOR, §GL_ONE_MINUS_SRC_COLOR, §GL_SRC_ALPHA, §GL_ONE_MINUS_SRC_ALPHA, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the §GL_RGB_SCALE or §GL_ALPHA_SCALE.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexEnv.xml
glTexParameteri,int target,int pname,int param
Set texture parameters.


Note: For some obscure(?) reason, omitting this call before uploading a texture will cause GL to silently fail and simply render foreground-color filled triangles. (The §Texture class takes care of this automatically).

@arg target Specifies the target texture, which must be either §GL_TEXTURE_1D, §GL_TEXTURE_2D, §GL_TEXTURE_3D or §GL_TEXTURE_CUBE_MAP.
@arg pname Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: §GL_TEXTURE_MIN_FILTER, §GL_TEXTURE_MAG_FILTER, §GL_TEXTURE_MIN_LOD, §GL_TEXTURE_MAX_LOD, §GL_TEXTURE_BASE_LEVEL, §GL_TEXTURE_MAX_LEVEL, §GL_TEXTURE_WRAP_S, §GL_TEXTURE_WRAP_T, §GL_TEXTURE_WRAP_R, or §GL_TEXTURE_PRIORITY.
@arg Specifies the value of pname.

@see http://www.opengl.org/sdk/docs/man/html/glTexParameter.xhtml
glTexCoord1f,float s
Set the current texture coordinate

@arg s Specify the s texture coordinate

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexCoord.xml
glTexCoord2f,float s,float t
Set the current texture coordinates

@arg s Specify the s texture coordinate
@arg t Specify the t texture coordinate

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexCoord.xml
zglTexCoord2v,Object vec2
Set the current texture coordinates

@arg vec2 Array-type object (e.g. a Vector2f)

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexCoord.xml
glTexCoord3f,float s,float t,float r
Set the current texture coordinates

@arg s Specify the s texture coordinate
@arg t Specify the t texture coordinate
@arg r Specify the r texture coordinate

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexCoord.xml
zglTexCoord3v,Object vec3
Set the current texture coordinates

@arg vec3 Array-type object (e.g. a Vector3f)

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexCoord.xml
glTexCoord4f,float s,float t,float r,float q
Set the current texture coordinates

@arg s Specify the s texture coordinate
@arg t Specify the t texture coordinate
@arg r Specify the r texture coordinate
@arg q Specify the q texture coordinate

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexCoord.xml
zglTexCoord4v,Object vec4
Set the current texture coordinates

@arg vec4 Array-type object (e.g. a Vector4f)

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexCoord.xml
glTexCoord1i,int s
Set the current texture coordinate

@arg s Specify the s texture coordinate

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexCoord.xml
glTexCoord2i,int s,int t
Set the current texture coordinates

@arg s Specify the s texture coordinate
@arg t Specify the t texture coordinate

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexCoord.xml
glTexGeni,int coord,int pname,int param
Control the generation of texture coordinates

@arg coord Specifies a texture coordinate. Must	be one of GL_S, GL_T, GL_R, or GL_Q.
@arg pname Specifies the symbolic name of the texture-coordinate generation function. Must be §GL_TEXTURE_GEN_MODE.
@arg param Specifies a single-valued texture generation parameter, one of §GL_OBJECT_LINEAR, §GL_EYE_LINEAR, or §GL_SPHERE_MAP.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexGen.xml
zglTexGen4f,int coord,int pname,float p1,float p2,float p3,float p4
Control the generation of texture coordinates

@arg coord Specifies a texture coordinate. Must	be one of GL_S, GL_T, GL_R, or GL_Q.
@arg pname Specifies the symbolic name of the texture-coordinate generation function. Must be §GL_OBJECT_PLANE, or §GL_EYE_PLANE.
@arg p1 First coefficient for the texture-coordinate generation function specified by pname.
@arg p2 Second coefficient for the texture-coordinate generation function specified by pname.
@arg p3 Third coefficient for the texture-coordinate generation function specified by pname.
@arg p4 Fourth coefficient for the texture-coordinate generation function specified by pname.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexGen.xml
glTranslatef,float x,float y,float z
Multiply	the current matrix by a translation matrix

@arg x Specify the x coordinate of a translation vector
@arg y Specify the y coordinate of a translation vector
@arg z Specify the z coordinate of a translation vector

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTranslate.xml
glVertex2i,int x,int y
Specify a vertex

@arg x Specify x coordinate of a vertex
@arg y Specify y coordinate of a vertex

@see http://www.opengl.org/sdk/docs/man2/xhtml/glVertex.xml
glVertex2f,float x,float y
Specify a vertex

@arg x Specify x coordinate of a vertex
@arg y Specify y coordinate of a vertex

@see http://www.opengl.org/sdk/docs/man2/xhtml/glVertex.xml
zglVertex2v,Object vec2
Specify a vertex

@arg vec2 Array-type object (e.g. a Vector2f)

@see http://www.opengl.org/sdk/docs/man2/xhtml/glVertex.xml
glVertex3f,float x,float y,float z
Specify a vertex

@arg x Specify x coordinate of a vertex
@arg y Specify y coordinate of a vertex
@arg z Specify z coordinate of a vertex

@see http://www.opengl.org/sdk/docs/man2/xhtml/glVertex.xml
zglVertex3v,Object vec3
Specify a vertex

@arg vec3 Array-type object (e.g. a Vector3f)

@see http://www.opengl.org/sdk/docs/man2/xhtml/glVertex.xml
glVertex4f,float x,float y,float z,float w
Specify a vertex

@arg x Specify x coordinate of a vertex
@arg y Specify y coordinate of a vertex
@arg z Specify z coordinate of a vertex
@arg w Specify w coordinate of a vertex

@see http://www.opengl.org/sdk/docs/man2/xhtml/glVertex.xml
zglVertex4v,Object vec4
Specify a vertex

@arg vec4 Array-type object (e.g. a Vector4f)

@see http://www.opengl.org/sdk/docs/man2/xhtml/glVertex.xml
glViewport,int x,int y,int width,int height
Set the viewport

@arg x Specify the x coordinate of the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
@arg y Specify the y coordinate of the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
@arg width Specify the width of the viewport. When a GL context is first attached to a window, width is set to the dimension of that window.
@arg height Specify the height of the viewport. When a GL context is first attached to a window, height is set to the dimension of that window.

@see http://www.opengl.org/sdk/docs/man/html/glViewport.xhtml
zglInitPerspective,float aspect,float fov,float znear,float zfar
Load perspective projection matrix

@arg aspect Aspect ratio
@arg fov Field of view (1..180)
@arg znear Distance to near clipping plane
@arg zfar Distance to far clipping plane

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMatrixMode.xml
@see http://www.opengl.org/sdk/docs/man2/xhtml/glLoadIdentity.xml
@see http://www.opengl.org/sdk/docs/man2/xhtml/glFrustum.xml
zglInitOrtho,float w,float h
Load orthogonal projection matrix

(0; 0) is located at the center of the screen

@arg w Quadrant width
@arg h Quadrant height

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMatrixMode.xml
@see http://www.opengl.org/sdk/docs/man2/xhtml/glLoadIdentity.xml
@see http://www.opengl.org/sdk/docs/man2/xhtml/glOrtho.xml
zglInit2D,float w,float h
Load 2D projection matrix

(0; 0) is located in the top/left corner of the screen

@arg w Width
@arg h Height

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMatrixMode.xml
@see http://www.opengl.org/sdk/docs/man2/xhtml/glLoadIdentity.xml
@see http://www.opengl.org/sdk/docs/man2/xhtml/glOrtho.xml
zgluLookAt,Object eye,Object center,Object up
Define a viewing transformation


You may pass objects that support the yac array interface (e.g. §FloatArray, §ListNode, §tkmath.Vector3f and so on).

@arg eye Eye vector (3 elements)
@arg center Center vector (3 elements)
@arg up Up vector (3 elements)

@see http://www.opengl.org/sdk/docs/man2/xhtml/gluLookAt.xml
glLoadMatrixf,Object array
Replace the current matrix with the specified matrix

@arg array Must hold at least 16 elements (column major layout)

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLoadMatrix.xml
zglLoadMatrixTransposef,Object array
Replace the current matrix with the specified matrix (transpose row major to OpenGL column major)

@arg array Must hold at least 16 elements (row major layout)

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLoadMatrix.xml
zglFrustum,float left,float right,float bottom,float top,float znear,float zfar
Multiply the current matrix by a perspective matrix

@arg left Specify the coordinate of the left vertical clipping plane
@arg right Specify the coordinate of the right vertical clipping plane
@arg bottom Specify the coordinate of the bottom horizontal clipping plane
@arg top Specify the coordinate of the top horizontal clipping plane
@arg znear Specify the distance to the near depth clipping plane
@arg zfar Specify the distance to the far depth clipping plane

@see http://www.opengl.org/sdk/docs/man2/xhtml/glFrustum.xml
glColorMaterial,int face,int mode
Specify which material parameters track the current color

@arg face GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK
@arg mode GL_EMISSION, GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_AMBIENT_AND_DIFFUSE*

@see http://www.opengl.org/sdk/docs/man2/xhtml/glColorMaterial.xml
zglLightAmbient4f,int light,float r,float g,float b,float a
Set light source ambient color parameter

@arg light GL_LIGHTi
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLight.xml
zglLightDiffuse4f,int light,float r,float g,float b,float a
Set light source diffuse color parameter

@arg light GL_LIGHTi
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLight.xml
zglLightSpecular4f,int light,float r,float g,float b,float a
Set light source specular color parameter

@arg light GL_LIGHTi
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLight.xml
zglLightPositionf,int light,float x,float y,float z,float w
Set light source position

@arg light GL_LIGHTi
@arg x X position of light in homogeneous object coordinates
@arg y Y position of light in homogeneous object coordinates
@arg z Z position of light in homogeneous object coordinates
@arg w W position of light in homogeneous object coordinates

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLight.xml
zglLightSpotDirectionf,int light,float x,float y,float z
Set spotlight direction

@arg light GL_LIGHTi
@arg x X direction of spotlight in homogeneous object coordinates
@arg y Y direction of spotlight in homogeneous object coordinates
@arg z Z direction of spotlight in homogeneous object coordinates

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLight.xml
zglLightSpotExponent,int light,float exp
Set spotlight exponent

@arg light GL_LIGHTi
@arg exp 0..127

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLight.xml
zglLightSpotCutOff,int light,float cutoff
Set spotlight cutoff

@arg light GL_LIGHTi
@arg cutoff 0..90, 180

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLight.xml
zglLightConstantAttenuation,int light,float factor
Set light source constant attenuation

@arg light GL_LIGHTi
@arg factor Constant attenuation factor

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLight.xml
zglLightLinearAttenuation,int light,float factor
Set light source linear attenuation

@arg light GL_LIGHTi
@arg factor Linear attenuation factor

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLight.xml
zglLightQuadraticAttenuation,int light,float factor
Set light source quadratic attenuation

@arg light GL_LIGHTi
@arg factor Quadratic attenuation factor

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLight.xml
zglLightModelAmbient4f,float r,float g,float b,float a
Set ambient scene color

@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLightModel.xml
glLightModeli,int pname,int param
Configure light model

@arg pname Specifies a single-valued lighting model parameter. §GL_LIGHT_MODEL_LOCAL_VIEWER, §GL_LIGHT_MODEL_COLOR_CONTROL, and §GL_LIGHT_MODEL_TWO_SIDE are accepted.
@arg param 1(true) or (false) resp. §GL_SINGLE_COLOR or §GL_SEPARATE_SPECULAR_COLOR if pname is §GL_LIGHT_MODEL_COLOR_CONTROL.

@see §zglLightModelLocalViewer, §zglLightModelColorControl, §zglLightModelTwoSide

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLightModel.xml
zglLightModelLocalViewer,boolean param
Configure local viewer light model

@arg param If param is 0 (or 0.0), specular reflection angles take the view direction to be parallel to and in the direction of the -z axis, regardless of the location of the vertex in eye coordinates. Otherwise, specular reflections are computed from the origin of the eye coordinate system. The initial value is 0.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLightModel.xml
zglLightModelTwoSide,boolean param
Configure two sided light model

@arg param If params is 0 (or 0.0), one-sided lighting is specified, and only the front material parameters are used in the lighting equation. Otherwise, two-sided lighting is specified

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLightModel.xml
zglLightModelColorControl,int mode
Configure single color / separate specular color lighting mode.

When §GL_SEPARATE_SPECULAR_COLOR mode is selected, the specular component will be applied (added) after texture mapping.

@arg param §GL_SINGLE_COLOR or §GL_SEPARATE_SPECULAR_COLOR

@see http://www.opengl.org/sdk/docs/man2/xhtml/glLightModel.xml
zglLightMaterialAmbient4f,int face,float r,float g,float b,float a
Set ambient material color

@arg face Specifies which face or faces are being updated. Must be one of §GL_FRONT, §GL_BACK, or §GL_FRONT_AND_BACK.
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMaterial.xml
zglLightMaterialDiffuse4f,int face,float r,float g,float b,float a
Set diffuse material color

@arg face Specifies which face or faces are being updated. Must be one of §GL_FRONT, §GL_BACK, or §GL_FRONT_AND_BACK.
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMaterial.xml
zglLightMaterialSpecular4f,int face,float r,float g,float b,float a
Set specular material color

@arg face Specifies which face or faces are being updated. Must be one of §GL_FRONT, §GL_BACK, or §GL_FRONT_AND_BACK.
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMaterial.xml
zglLightMaterialEmission4f,int face,float r,float g,float b,float a
Set emissive material color

@arg face Specifies which face or faces are being updated. Must be one of §GL_FRONT, §GL_BACK, or §GL_FRONT_AND_BACK.
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMaterial.xml
zglLightMaterialShininess,int face,float exp
Set material shininess

@arg face Specifies which face or faces are being updated. Must be one of §GL_FRONT, §GL_BACK, or §GL_FRONT_AND_BACK.
@arg exp 0..127

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMaterial.xml
zglLightMaterialAmbientAndDiffuse4f,int face,float r,float g,float b,float a
Set both ambient and diffuse material colors

@arg face Specifies which face or faces are being updated. Must be one of §GL_FRONT, §GL_BACK, or §GL_FRONT_AND_BACK.
@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glMaterial.xml
zglFogMode,int mode
Specifies the equation to be used to compute the fog blend factor

@arg mode Three symbolic constants are accepted: §GL_LINEAR, §GL_EXP, and §GL_EXP2. The initial fog mode is §GL_EXP.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glFog.xml
zglFogAlphaMode,int mode
Specifies the equation to be used to compute the fog alpha color.

This is an extension to the regular OpenGL fog feature which is only available if tkopengl is compiled in emulation mode (DX_EMU_FOG / DX_EMU_FIXFXN).

When drawing transparent objects, §GL_BLEND can be used to fade-out primitives (if fog alpha is 0.0) resp. §GL_MULT alpha mode can be used to fade to an alpha relative to the primitive alpha (out_alpha = mix(frag_alpha*fog_alpha, frag_alpha, fog_amount)).

@arg mode Three symbolic constants are accepted: §GL_REPLACE (OpenGL behaviour, discard fogcolor.alpha, blend to fogcolor RGB and keep primitive alpha), §GL_BLEND (full fog color+alpha blending), and §GL_MULT (blend to fog alpha multiplied by primitive alpha). The initial fog alpha mode is §GL_REPLACE.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glFog.xml
zglFogDensity,float param
Specify the fog density

@arg param Only nonnegative densities are accepted. The initial fog density is 1.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glFog.xml
zglFogStart,float param
Specify fog near distance

@arg param Fog near distance. The initial near distance is 0.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glFog.xml
zglFogEnd,float param
Specify fog far distance

@arg param Fog far distance. The initial far distance is 1.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glFog.xml
zglFogColor4f,float r,float g,float b,float a
Set fog color


Note: OpenGL actually ignores the alpha component which means that fogging can NOT be used to fade out objects.

@arg r Red component
@arg g Green component
@arg b Blue component
@arg a Alpha component

@see http://www.opengl.org/sdk/docs/man2/xhtml/glFog.xml
zglColorARGB,int argb32
Set the current color

@arg argb32 Packed 32bit ARGB32 color

@see http://www.opengl.org/sdk/docs/man2/xhtml/glColor.xml
zglVertexPointer,Object array
Define an array of vertex data

Note: Stride is assumed to be 0, type is GL_FLOAT and size is 3.

@arg array Specifies the pointer to the vertex data

@see http://www.opengl.org/sdk/docs/man2/xhtml/glVertexPointer.xml
zglVertexPointer2f,Object array
Define an array of vertex data

Note: Stride is assumed to be 0, type is GL_FLOAT and size is 2.

@arg array Specifies the pointer to the vertex data

@see http://www.opengl.org/sdk/docs/man2/xhtml/glVertexPointer.xml
zglVertexOffset,int size,int type,int stride,int offset
Set vertex pointer offset within currently bound buffer object

@arg size Specifies the number of coordinates per vertex; must be 2, 3, or 4.
@arg type Specifies the data type of each coordinate in the array. Symbolic constants §GL_SHORT, §GL_INT, §GL_FLOAT, or §GL_DOUBLE are accepted.
@arg stride Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array.
@arg offset Specifies the offset to the first coordinate of the first vertex in the array.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glVertexPointer.xml
zglNormalPointer,Object array
Define an array of normal data

Note: Stride is assumed to be 0 and type is GL_FLOAT.

@arg array Specifies the pointer to the normal data

@see http://www.opengl.org/sdk/docs/man2/xhtml/glNormalPointer.xml
zglNormalOffset,int type,int stride,int offset
Set normal pointer offset within currently bound buffer object

@arg type Specifies the data type of each coordinate in the array. Symbolic constants §GL_BYTE, §GL_SHORT, §GL_INT, §GL_FLOAT, or §GL_DOUBLE are accepted.
@arg stride Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array.
@arg offset Specifies the offset to the first coordinate of the first normal in the array.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glNormalPointer.xml
zglColorPointer3f,Object array
Define an array of RGB color data

Note: Stride is assumed to be 0 and type is GL_FLOAT.

@arg array Specifies the pointer to the color data

@see http://www.opengl.org/sdk/docs/man2/xhtml/glColorPointer.xml
zglColorOffset,int size,int type,int stride,int offset
Set color pointer offset within currently bound buffer object

@arg size Specifies the number of components per color; must 3 or 4.
@arg type Specifies the data type of each color component in the array. Symbolic constants §GL_BYTE, §GL_UNSIGNED_BYTE, §GL_SHORT, §GL_UNSIGNED_SHORT, §GL_INT, §GL_UNSIGNED_INT, §GL_FLOAT, or §GL_DOUBLE are accepted.
@arg stride Specifies the byte offset between consecutive colors. If stride is zero (the initial value), the colors are understood to be tightly packed in the array.
@arg offset Specifies the offset to the first component of the first color element in the array.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glColorPointer.xml
zglColorPointer4f,Object array
Define an array of RGBA color data

Note: Stride is assumed to be 0 and type is GL_FLOAT.

@arg array Specifies the pointer to the color data

@see http://www.opengl.org/sdk/docs/man2/xhtml/glColorPointer.xml
zglColorPointer4b,Object array
Define an array of RGBA color data

Note: Stride is assumed to be 0 and type is GL_UNSIGNED_BYTE.

@arg array Specifies the pointer to the color data

@see http://www.opengl.org/sdk/docs/man2/xhtml/glColorPointer.xml
zglTexCoordPointer1f,Object array
Define an array of texture coordinate data

Note: Stride is assumed to be 0 and type is GL_FLOAT.

@arg array Specifies the pointer to the texture coordinate data

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexCoordPointer.xml
zglTexCoordPointer2f,Object array
Define an array of texture coordinate data

Note: Stride is assumed to be 0 and type is GL_FLOAT.

@arg array Specifies the pointer to the texture coordinate data

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexCoordPointer.xml
zglTexCoordOffset,int size,int type,int stride,int offset
Set texture coordinate pointer offset within currently bound buffer object

@arg size Specifies the number of coordinates per array element. Must be 1, 2, 3 or 4
@arg type  Specifies the data type of each texture coordinate. Symbolic constants §GL_SHORT, §GL_INT, §GL_FLOAT, or §GL_DOUBLE are accepted.
@arg stride Specifies the byte offset between consecutive array elements. If stride is 0, the array elements are understood to be tightly packed.
@arg offset Specifies an offset to the first coordinate of the first element in the array.

@see http://www.opengl.org/sdk/docs/man2/xhtml/glTexCoordPointer.xml
zglReadColorPixel,int x,int y:int
Read a single pixel from the frame buffer

@arg x Specify the window x coordinate of the pixel that is read from the frame buffer.
@arg y Specify the window y coordinate of the pixel that is read from the frame buffer.
@return Pixel (GL_RGBA in native host byte order)

@see http://www.opengl.org/sdk/docs/man/html/glReadPixels.xhtml
zglReadColorPixelsX,Object tex,int off,int x, int y,int sx
Read a line of pixels from the frame buffer

@arg tex Specify the target texture (or array)
@arg off Specify the texture pixel write offset
@arg x Specify the window x coordinate of the pixel that is read from the frame buffer.
@arg y Specify the window y coordinate of the pixel that is read from the frame buffer.
@arg sx Specify the number of pixels to read

@see http://www.opengl.org/sdk/docs/man/html/glReadPixels.xhtml
zglReadDepthPixel,int x,int y:float
Read a single depth value from the depth buffer

@arg x Specify the window x coordinate of the pixel that is read from the frame buffer.
@arg y Specify the window y coordinate of the pixel that is read from the frame buffer.
@return Depth value

@see http://www.opengl.org/sdk/docs/man/html/glReadPixels.xhtml
zglClipPlane,int plane,float eq0,float eq1,float eq2,float eq3
Specify a plane against which all geometry is clipped

@arg plane Specifies which clipping plane is being positioned. Symbolic names of the form GL_CLIP_PLANEi, where i is an integer between 0 and GL_MAX_CLIP_PLANES -1, are accepted.
@arg eq0
@arg eq1
@arg eq2
@arg eq3

@see http://www.opengl.org/sdk/docs/man2/xhtml/glClipPlane.xml
glGetString,int name:String
Return a string describing the current GL connection

@arg name Specifies a symbolic constant, one of §GL_VENDOR, §GL_RENDERER, §GL_VERSION, or §GL_EXTENSIONS.
@return String

@see http://www.opengl.org/sdk/docs/man/html/glGetString.xhtml
zglGetFloat,int name:float
Return the value of a selected parameter

@arg name Specifies a symbolic constant
@return current parameter value

@see http://www.opengl.org/sdk/docs/man/html/glGet.xhtml
glGetFloatv,int name,FloatArray ret
Use this for queries that return a float vector.

@see http://www.opengl.org/sdk/docs/man/html/glGet.xhtml
zglGetInteger,int name:int
Return the value of a selected parameter

@arg name Specifies a symbolic constant, e.g. §GL_MAX_TEXTURE_UNITS, §GL_MAX_TEXTURE_COORDS, §GL_MAX_ELEMENTS_VERTICES, §GL_MAX_ELEMENTS_INDICES, §GL_ACTIVE_TEXTURE, §GL_CLIENT_ACTIVE_TEXTURE. Note: Not all GL parameter names are exported in the tkopengl plugin but as a workaround you can still pass the raw hex value (see gl.h, glext.h)
@return current parameter value

@see http://www.opengl.org/sdk/docs/man/html/glGet.xhtml
glGetIntegerv,int name,IntArray ret
Use this for queries that return an integer vector.

@see http://www.opengl.org/sdk/docs/man/html/glGet.xhtml
glGetError:int
Return last GL error code and reset internal error state to GL_NO_ERROR.

@return OpenGL error code

@see http://www.opengl.org/sdk/docs/man/html/glGetError.xhtml
zglGenBuffer:int
Generate buffer object name id

@return Buffer object name id

@see http://www.opengl.org/sdk/docs/man/html/glGenBuffers.xhtml
zglDeleteBuffer,int id
Delete buffer object

@arg id Buffer object name id

@see http://www.opengl.org/sdk/docs/man/html/glDeleteBuffers.xhtml
zglBufferData,int target,int size,Object data,int usage
Creates and initializes a buffer object's data store

@arg target Specifies the target buffer object. The symbolic constant must be §GL_ARRAY_BUFFER or §GL_ELEMENT_ARRAY_BUFFER.
@arg size Initialize buffer size in bytes. If size is < 0, the size will be set to data.numElements*sizeof(float).
@data Specifies a pointer to data that will be copied into the data store for initialization, or null if no data is to be copied.
@arg usage Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STATIC_DRAW or GL_DYNAMIC_DRAW.

@see http://www.opengl.org/sdk/docs/man/html/glBufferData.xhtml
zglBufferSubData,int target,int offset,int size,Object data
Updates a subset of a buffer object's data store.

@arg target Specifies the target buffer object. The symbolic constant must be §GL_ARRAY_BUFFER or §GL_ELEMENT_ARRAY_BUFFER.
@arg offset Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
@arg size Specifies the size in bytes of the data store region being replaced.
@data Specifies a pointer to data that will be copied into the data store.

@see http://www.opengl.org/sdk/docs/man/html/glBufferSubData.xhtml
glBindBuffer,int target,int id
Bind a named buffer to a target

While a non-zero buffer object is bound to the §GL_ARRAY_BUFFER target, the vertex array pointer parameter that is traditionally interpreted as a pointer to client-side memory is instead interpreted as an offset within the buffer object measured in basic machine units.

While a non-zero buffer object is bound to the §GL_ELEMENT_ARRAY_BUFFER target, the indices parameter of §glDrawElements that is traditionally interpreted as a pointer to client-side memory is instead interpreted as an offset within the buffer object measured in basic machine units.

@arg target Specifies the target buffer object. The symbolic constant must be §GL_ARRAY_BUFFER, §GL_ELEMENT_ARRAY_BUFFER or §GL_PIXEL_UNPACK_BUFFER.
@arg id Specifies the name id of a buffer object.

@see http://www.opengl.org/sdk/docs/man/html/glBindBuffer.xhtml
zglGetBufferParameter,int target,int id:int
Return parameters of a buffer object via glGetBufferParameteriv()
@arg target GL_ARRAY_BUFFER, ..
@arg value  GL_BUFFER_SIZE, ..
@return buffer parameter
glIsBuffer,int id:boolean
Query whether the given name id is bound to a buffer object

@arg id Specifies the name id of a buffer object.
@return 1(true) if the name id represents a buffer object, 0(false) otherwise.

@see http://www.opengl.org/sdk/docs/man/html/glIsBuffer.xhtml
zglMapBuffer,int target,int access,Buffer buffer,int byteSize
Map a buffer object's data store

@arg target Specifies the target buffer object being mapped. The symbolic constant must be §GL_ARRAY_BUFFER, §GL_ELEMENT_ARRAY_BUFFER, §GL_PIXEL_PACK_BUFFER, or §GL_PIXEL_UNPACK_BUFFER.
@arg access Specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be §GL_READ_ONLY, §GL_WRITE_ONLY, or §GL_READ_WRITE.
@arg buffer Returns the data store address mapped to the client's address space. The old buffer contents,if any, will be freed prior to setting the new buffer pointer and size.
@arg byteSize Number of bytes. This should be the same size that was passed to §zglBufferData. Note: leaving this up to the application can result in access to unmapped memory. Be careful.

@see http://www.opengl.org/sdk/docs/man/html/glMapBuffer.xhtml
zglMapBufferRange,int target,int offset,int length,int access,Buffer buffer
Map a buffer object's data store

@arg target Specifies the target to which the buffer object is bound. (e.g. §GL_ARRAY_BUFFER)
@arg offset Specifies the starting offset within the buffer of the range to be mapped.
@arg length Specifies the length of the range to be mapped.
@arg access Specifies a combination of access flags indicating the desired access to the mapped range. GL_MAP_READ_BIT, GL_MAP_WRITE_BIT, GL_MAP_PERSISTENT_BIT, GL_MAP_COHERENT_BIT (if not set, app. must call glFlushMappedBufferRange()), GL_MAP_INVALIDATE_RANGE_BIT, GL_MAP_INVALIDATE_BUFFER_BIT, GL_MAP_FLUSH_EXPLICIT_BIT, GL_MAP_UNSYNCHRONIZED_BIT)
@arg buffer Returns the data store address mapped to the client's address space. The old buffer contents,if any, will be freed prior to setting the new buffer pointer and size.
glUnmapBuffer,int target:boolean
Unmap buffer object

@arg target Specifies the target buffer object being unmapped. The symbolic constant must be §GL_ARRAY_BUFFER, §GL_ELEMENT_ARRAY_BUFFER, §GL_PIXEL_PACK_BUFFER, or §GL_PIXEL_UNPACK_BUFFER.
@return true if the buffer has been unmapped, false otherwise

@see http://www.opengl.org/sdk/docs/man/html/glMapBuffer.xhtml
zglLoadExtensions
Resolve OpenGL extensions.

Must be called after window/screen has been openend if the application wishes to use >v1.1 GL functions (e.g. buffer objects, see §zglGenBuffer)

(note) tkopengl v0.9.9.10+ auto-loads the extensions when a viewport/window is opened

glIsRenderbuffer,int renderbuffer:boolean
Determine if a name corresponds to a renderbuffer object

@arg renderbuffer Specifies a value that may be the name of a renderbuffer object

@see http://www.opengl.org/sdk/docs/man/html/glIsRenderbuffer.xhtml
 glBindRenderbuffer,int target,int renderbuffer
Bind a renderbuffer to a renderbuffer target

@arg target Specifies the renderbuffer target of the binding operation. target must be §GL_RENDERBUFFER
@arg renderbuffer Specifies the name of the renderbuffer object to bind

@see http://www.opengl.org/sdk/docs/man/html/glBindRenderbuffer.xhtml
 zglDeleteRenderbuffer,int renderbuffer
Delete renderbuffer objects

@arg renderbuffer Specifies the number of renderbuffer objects to be deleted.

@see http://www.opengl.org/sdk/docs/man/html/glDeleteRenderbuffers.xhtml
 zglGenRenderbuffer:int
Generate renderbuffer object names

@return Renderbuffer object name

@see http://www.opengl.org/sdk/docs/man/html/glGenRenderbuffers.xhtml
 glRenderbufferStorage,int target,int internalformat,int width,int height
Establish data storage, format and dimensions of a renderbuffer object's image

@arg target Specifies a binding to which the target of the allocation and must be §GL_RENDERBUFFER
@arg internalformat Specifies the internal format to use for the renderbuffer object's image
@arg width Specifies the width of the renderbuffer, in pixels
@arg height Specifies the height of the renderbuffer, in pixels

@see http://www.opengl.org/sdk/docs/man/html/glRenderbufferStorage.xhtml
 glRenderbufferStorageMultisample,int target,int samples,int internalformat,int width,int height
Establish data storage, format, dimensions and sample count of a renderbuffer object's image

@arg target Specifies a binding to which the target of the allocation and must be §GL_RENDERBUFFER
@arg samples Specifies the number of samples to be used for the renderbuffer object's storage. (see §glGet / §GL_MAX_SAMPLES)
@arg internalformat Specifies the internal format to use for the renderbuffer object's image
@arg width Specifies the width of the renderbuffer, in pixels
@arg height Specifies the height of the renderbuffer, in pixels

@see https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glRenderbufferStorageMultisample.xhtml
 zglGetRenderbufferParameteri,int target,int pname:int

@see http://www.opengl.org/sdk/docs/man/html/glGetRenderbufferParameter.xhtml
 glIsFramebuffer,int framebuffer:boolean
Determine if a name corresponds to a framebuffer object

@arg framebuffer Specifies a value that may be the name of a framebuffer object

@see http://www.opengl.org/sdk/docs/man/html/glIsFramebuffer.xhtml
 glBindFramebuffer,int target,int framebuffer
Bind a framebuffer to a framebuffer target

@arg target Specifies the framebuffer target of the binding operation
@arg framebuffer Specifies the name of the framebuffer object to bind

@see http://www.opengl.org/sdk/docs/man/html/glBindFramebuffer.xhtml
 zglDeleteFramebuffer,int framebuffer
Delete framebuffer objects

@arg framebuffer Framebuffer object name

@see http://www.opengl.org/sdk/docs/man/html/glDeleteFramebuffers.xhtml
 zglGenFramebuffer:int
Generate framebuffer object names

@return Framebuffer object name

@see http://www.opengl.org/sdk/docs/man/html/glGenFramebuffers.xhtml
 glCheckFramebufferStatus,int target:int
Check the completeness status of a framebuffer

@arg target Specify the target of the framebuffer completeness check
@return The return value is §GL_FRAMEBUFFER_COMPLETE if the framebuffer bound to target is complete. Other return values are.. §GL_FRAMEBUFFER_UNDEFINED, §GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT, §GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT, §GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER, §GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER, §GL_FRAMEBUFFER_UNSUPPORTED, §GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE, §GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE, §GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS

@see http://www.opengl.org/sdk/docs/man/html/glCheckFramebufferStatus.xhtml
 glFramebufferTexture1D,int target,int attachment,int textarget,int texture,int level
Attach a level of a texture object as a logical buffer to the currently bound framebuffer object

@arg target Specifies the framebuffer target. target must be §GL_DRAW_FRAMEBUFFER, §GL_READ_FRAMEBUFFER, or §GL_FRAMEBUFFER. §GL_FRAMEBUFFER is equivalent to §GL_DRAW_FRAMEBUFFER
@arg attachment Specifies the attachment point of the framebuffer. attachment must be GL_COLOR_ATTACHMENTi, §GL_DEPTH_ATTACHMENT, §GL_STENCIL_ATTACHMENT or §GL_DEPTH_STENCIL_ATTACHMENT
@arg textarget For §glFramebufferTexture1D, §glFramebufferTexture2D and §glFramebufferTexture3D, specifies what type of texture is expected in the texture parameter, or for cube map textures, which face is to be attached
@arg texture Specifies the texture object to attach to the framebuffer attachment point named by attachment
@arg level Specifies the mipmap level of texture to attach

@see http://www.opengl.org/sdk/docs/man/html/glFramebufferTexture.xhtml
 glFramebufferTexture2D,int target,int attachment,int textarget,int texture,int level
Attach a level of a texture object as a logical buffer to the currently bound framebuffer object

@arg target Specifies the framebuffer target. target must be §GL_DRAW_FRAMEBUFFER, §GL_READ_FRAMEBUFFER, or §GL_FRAMEBUFFER. §GL_FRAMEBUFFER is equivalent to §GL_DRAW_FRAMEBUFFER
@arg attachment Specifies the attachment point of the framebuffer. attachment must be GL_COLOR_ATTACHMENTi, §GL_DEPTH_ATTACHMENT, §GL_STENCIL_ATTACHMENT or §GL_DEPTH_STENCIL_ATTACHMENT
@arg textarget For §glFramebufferTexture1D, §glFramebufferTexture2D and §glFramebufferTexture3D, specifies what type of texture is expected in the texture parameter, or for cube map textures, which face is to be attached
@arg texture Specifies the texture object to attach to the framebuffer attachment point named by attachment
@arg level Specifies the mipmap level of texture to attach


@see http://www.opengl.org/sdk/docs/man/html/glFramebufferTexture.xhtml
 glFramebufferTexture3D,int target,int attachment,int textarget,int texture,int level,int zoffset
Attach a level of a texture object as a logical buffer to the currently bound framebuffer object

@arg target Specifies the framebuffer target. target must be §GL_DRAW_FRAMEBUFFER, §GL_READ_FRAMEBUFFER, or §GL_FRAMEBUFFER. §GL_FRAMEBUFFER is equivalent to §GL_DRAW_FRAMEBUFFER
@arg attachment Specifies the attachment point of the framebuffer. attachment must be GL_COLOR_ATTACHMENTi, §GL_DEPTH_ATTACHMENT, §GL_STENCIL_ATTACHMENT or §GL_DEPTH_STENCIL_ATTACHMENT
@arg textarget For §glFramebufferTexture1D, §glFramebufferTexture2D and §glFramebufferTexture3D, specifies what type of texture is expected in the texture parameter, or for cube map textures, which face is to be attached
@arg texture Specifies the texture object to attach to the framebuffer attachment point named by attachment
@arg level Specifies the mipmap level of texture to attach

@see http://www.opengl.org/sdk/docs/man/html/glFramebufferTexture.xhtml
 glFramebufferRenderbuffer,int target,int attachment,int renderbuffertarget,int renderbuffer
Attach a renderbuffer as a logical buffer to the currently bound framebuffer object

@arg target Specifies the framebuffer target. target must be §GL_DRAW_FRAMEBUFFER, §GL_READ_FRAMEBUFFER, or §GL_FRAMEBUFFER. §GL_FRAMEBUFFER is equivalent to §GL_DRAW_FRAMEBUFFER
@arg attachment Specifies the attachment point of the framebuffer
@arg renderbuffertarget Specifies the renderbuffer target and must be §GL_RENDERBUFFER
@arg renderbuffer Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach

@see http://www.opengl.org/sdk/docs/man/html/glFramebufferRenderbuffer.xhtml
 zglGetFramebufferAttachmentParameteri,int target,int attachment,int pname:int
Retrieve information about attachments of a bound framebuffer object

@arg target Specifies the target of the query operation.
@arg attachment Specifies the attachment within target
@arg pname Specifies the parameter of attachment to query
@return The value of pname for attachment

@see http://www.opengl.org/sdk/docs/man/html/glGetFramebufferAttachmentParameter.xhtml
 glBlitFramebuffer,int srcX0,int srcY0,int srcX1,int srcY1,int dstX0,int dstY0,int dstX1,int dstY1,int mask,int filter
Copy a block of pixels from one framebuffer object to another

@arg srcX0 Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
@arg srcY0
@arg srcX1
@arg srcY1
@arg dstX0 Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
@arg dstY0
@arg dstX1
@arg dstY1
@arg mask The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are §GL_COLOR_BUFFER_BIT, §GL_DEPTH_BUFFER_BIT and §GL_STENCIL_BUFFER_BIT.
@arg filter Specifies the interpolation to be applied if the image is stretched. Must be GL_NEAREST or GL_LINEAR.

@see https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBlitFramebuffer.xhtml
 glGenerateMipmap,int target
Generate a complete set of mipmaps for a texture object

@arg target Specifies the texture target of the texture object whose mipmaps will be generated. Must be one of the following symbolic constants: §GL_TEXTURE_2D or §GL_TEXTURE_CUBE_MAP.

@see http://www.opengl.org/sdk/docs/man/html/glGenerateMipmap.xhtml
glCreateProgram:int
Creates a program object

@return creates an empty program object and returns a non-zero value by which it can be referenced. returns 0 if an error occurs creating the program object.

@see http://www.opengl.org/sdk/docs/man/html/glCreateProgram.xhtml
glDeleteProgram,int program
Deletes a program object

@arg program Specifies the program object to be deleted

@see http://www.opengl.org/sdk/docs/man/html/glDeleteProgram.xhtml
glCreateShader,int shaderType:int
Creates a shader object

@arg shaderType Specifies the type of shader to be created. Must be either §GL_VERTEX_SHADER or §GL_FRAGMENT_SHADER.

@return creates an empty shader object and returns a non-zero value by which it can be	referenced. returns 0 if an error occurs creating the	shader object

@see http://www.opengl.org/sdk/docs/man/html/glCreateShader.xhtml
glDeleteShader,int shader
Deletes a shader object

@arg program Specifies the shader object to be deleted

@see http://www.opengl.org/sdk/docs/man/html/glDeleteShader.xhtml
zglShaderSource,int shader,String source
Replaces the source code in a shader object

@arg shader Specifies the handle of the shader object whose source code is to be replaced

@arg source Specifies the source code to be loaded into the shader

@see http://www.opengl.org/sdk/docs/man/html/glShaderSource.xhtml
glCompileShader,int shader
Compiles a shader object

@arg shader Specifies the shader object to be compiled.

@see http://www.opengl.org/sdk/docs/man/html/glCompileShader.xhtml
 zglGetProgrami,int program,int pname:int
Returns a parameter from a program object

@arg shader Specifies the program object to be queried.
@return Returns the requested object parameter

@see http://www.opengl.org/sdk/docs/man/html/glGetProgram.xhtml
glGetProgramInfoLog,int program,String retLog
Returns the information log for a program object

@arg program Specifies the program object whose information log is to be queried.
@arg retLog Receives the info log. The string is resized/reallocated, if necessary.

@see http://www.opengl.org/sdk/docs/man/html/glGetProgramInfoLog.xhtml
zglGetShaderi,int shader,int pname:int
Returns a parameter from a shader object

@arg shader Specifies the shader object to be queried.
@return Returns the requested object parameter

@see http://www.opengl.org/sdk/docs/man/html/glGetShader.xhtml
glGetShaderInfoLog,int shader,String retLog
Returns the information log for a shader object

@arg program Specifies the shader object whose information log is to be queried.
@arg retLog Receives the info log. The string is resized/reallocated, if necessary.

@see http://www.opengl.org/sdk/docs/man/html/glGetShaderInfoLog.xhtml
glAttachShader,int program,int shader
Attaches a shader object to a program object

@arg program Specifies the program object to which a shader object will be attached
@arg shader Specifies the shader object that is to be attached

@see http://www.opengl.org/sdk/docs/man/html/glAttachShader.xhtml
 glDetachShader,int program,int shader
Detaches a shader object from a program object to which it is attached

@arg program Specifies the program object from which to detach the shader object
@arg shader Specifies the shader object to be detached

@see http://www.opengl.org/sdk/docs/man/html/glDetachShader.xhtml
 glLinkProgram,int program
Links a program object

@arg program Specifies the handle of the program object to be linked.

@see http://www.opengl.org/sdk/docs/man/html/glLinkProgram.xhtml
glValidateProgram,int program
Validates a program object

@arg program Specifies the handle of the program object to be validated.

@see http://www.opengl.org/sdk/docs/man/html/glValidateProgram.xhtml
glUseProgram,int program
Installs a program object as part of current rendering state

@arg program Specifies the handle of the program object whose executables are to be used as part of current rendering state

@see http://www.opengl.org/sdk/docs/man/html/glUseProgram.xhtml
glBindAttribLocation,int program,int index,String name
Associates a generic vertex attribute index with a named attribute variable

@arg program Specifies the handle of the program object in which the association is to be made
@arg index Specifies the index of the generic vertex attribute to be bound
@arg name Specifies the name of the vertex shader attribute variable to which index is to be bound

@see http://www.opengl.org/sdk/docs/man/html/glBindAttribLocation.xhtml
glGetAttribLocation,int program,String name
Returns the location of an attribute variable

@arg program Specifies the handle of the program object to be queried
@arg name Specifies the name of the attribute variable whose location is to be queried

@see http://www.opengl.org/sdk/docs/man/html/glGetAttribLocation.xhtml
glBindFragDataLocation,int program,int colorNumber,String name
Bind a user-defined varying out variable to a fragment shader color number

@arg program The name of the program containing varying out variable whose binding to modify
@arg colorNumber The color number to bind the user-defined varying out variable to
@arg name The name of the user-defined varying out variable whose binding to modify

@see http://www.opengl.org/sdk/docs/man/html/glBindFragDataLocation.xhtml
glBindFragDataLocationIndexed,int program,int colorNumber,int index,String name
Bind a user-defined varying out variable to a fragment shader color number and index

@arg program The name of the program containing varying out variable whose binding to modify
@arg colorNumber The color number to bind the user-defined varying out variable to
@arg index The index of the color input to bind the user-defined varying out variable to
@arg name The name of the user-defined varying out variable whose binding to modify

@see http://www.opengl.org/sdk/docs/man/html/glBindFragDataLocationIndexed.xhtml
glGetFragDataLocation,int program,String name:int
Query the bindings of color numbers to user-defined varying out variables

@arg program The name of the program containing varying out variable whose binding to modify
@arg name The name of the user-defined varying out variable whose binding to modify
@return The assigned color number binding for the user-defined varying out variable name for program program. program must have previously been linked

@see http://www.opengl.org/sdk/docs/man/html/glGetFragDataLocation.xhtml
glGetFragDataIndex,int program,String name:int
Query the bindings of color indices to user-defined varying out variables

@arg program The name of the program containing varying out variable whose binding to modify
@arg name The name of the user-defined varying out variable whose index to query
@return The index of the fragment color to which the variable name was bound when the program object program was last linked. If name is not a varying out variable of program, or if an error occurs, -1 will be returned

@see http://www.opengl.org/sdk/docs/man/html/glGetFragDataIndex.xhtml
glVertexAttrib1f,int index,float v0
Specifies the value of a generic vertex attribute

@arg index Specifies the index of the generic vertex attribute to be modified
@arg v0 Specifies the new value to be used for the specified vertex attribute

@see http://www.opengl.org/sdk/docs/man/html/glVertexAttrib.xhtml
glVertexAttrib2f,int index,float v0,float v1
Specifies the values of a generic vertex attribute

@arg index Specifies the index of the generic vertex attribute to be modified
@arg v0 Specifies the new value to be used for the specified vertex attribute
@arg v1 Specifies the new value to be used for the specified vertex attribute

@see http://www.opengl.org/sdk/docs/man/html/glVertexAttrib.xhtml
glVertexAttrib3f,int index,float v0,float v1,float v2
Specifies the values of a generic vertex attribute

@arg index Specifies the index of the generic vertex attribute to be modified
@arg v0 Specifies the new value to be used for the specified vertex attribute
@arg v1 Specifies the new value to be used for the specified vertex attribute
@arg v2 Specifies the new value to be used for the specified vertex attribute

@see http://www.opengl.org/sdk/docs/man/html/glVertexAttrib.xhtml
glVertexAttrib4f,int index,float v0,float v1,float v2,float v3
Specifies the values of a generic vertex attribute

@arg index Specifies the index of the generic vertex attribute to be modified
@arg v0 Specifies the new value to be used for the specified vertex attribute
@arg v1 Specifies the new value to be used for the specified vertex attribute
@arg v2 Specifies the new value to be used for the specified vertex attribute
@arg v3 Specifies the new value to be used for the specified vertex attribute

@see http://www.opengl.org/sdk/docs/man/html/glVertexAttrib.xhtml
glVertexAttrib4Nub,int index,byte v0,byte v1,byte v2,byte v3
Specifies the values of a generic vertex attribute

@arg index Specifies the index of the generic vertex attribute to be modified
@arg v0 Specifies the new value to be used for the specified vertex attribute
@arg v1 Specifies the new value to be used for the specified vertex attribute
@arg v2 Specifies the new value to be used for the specified vertex attribute
@arg v3 Specifies the new value to be used for the specified vertex attribute

@see http://www.opengl.org/sdk/docs/man/html/glVertexAttrib.xhtml
glVertexAttribPointer,int index,int size,int type,boolean normalized,int stride,Object a
Define an array of generic vertex attribute data

@arg index Specifies the index of the generic vertex attribute to be modified
@arg size Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
@arg type Specifies the data type of each component in the array. Symbolic constants §GL_BYTE, §GL_UNSIGNED_BYTE, §GL_SHORT, §GL_UNSIGNED_SHORT, §GL_INT, §GL_UNSIGNED_INT, §GL_FLOAT, or §GL_DOUBLE are accepted. The initial value is §GL_FLOAT.
@arg normalized Specifies whether fixed-point data values should be normalized (§GL_TRUE) or converted directly as fixed-point values (§GL_FALSE) when they are accessed
@arg stride Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
@arg a Specifies the array object holding the vertex attribute data

@see http://www.opengl.org/sdk/docs/man/html/glVertexAttribPointer.xhtml
zglVertexAttribOffset,int index,int size,int type,boolean normalized,int stride,int offset
Define an array of generic vertex attribute data

@arg index Specifies the index of the generic vertex attribute to be modified
@arg size Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
@arg type Specifies the data type of each component in the array. Symbolic constants §GL_BYTE, §GL_UNSIGNED_BYTE, §GL_SHORT, §GL_UNSIGNED_SHORT, §GL_INT, §GL_UNSIGNED_INT, §GL_FLOAT, or §GL_DOUBLE are accepted. The initial value is §GL_FLOAT.
@arg normalized Specifies whether fixed-point data values should be normalized (§GL_TRUE) or converted directly as fixed-point values (§GL_FALSE) when they are accessed
@arg stride Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
@arg offset Specifies the offset into the currently bound buffer object

@see http://www.opengl.org/sdk/docs/man/html/glVertexAttribPointer.xhtml
glEnableVertexAttribArray,int index
Enable a generic vertex attribute array

@arg index Specifies the index of the generic vertex attribute to be enabled

@see http://www.opengl.org/sdk/docs/man/html/glEnableVertexAttribArray.xhtml
glDisableVertexAttribArray,int index
Disable a generic vertex attribute array

@arg index Specifies the index of the generic vertex attribute to be disabled

@see http://www.opengl.org/sdk/docs/man/html/glEnableVertexAttribArray.xhtml
glGetUniformLocation,int program,String name:int
Returns the location of a uniform variable

@arg program Specifies the program object to be queried. The program must currently be bound, please see §glUseProgram.
@arg name The name of the uniform variable whose location is to be queried
@return location of the uniform variable

@see http://www.opengl.org/sdk/docs/man/html/glGetUniformLocation.xhtml
zglGetActiveUniform,int program,int index,Integer retSize,String retName:int
Returns information about an active uniform variable for the specified program object

@arg program Specifies the program object to be queried.
@arg index Specifies the index of the uniform variable to be queried
@arg retSize Returns the size of the uniform variable (can be null if not needed)
@arg retName Return the name of the uniform variable. The string is resized, if necessary.
@return Data type of the uniform variable

@see http://www.opengl.org/sdk/docs/man/html/glGetActiveUniform.xhtml
glUniform1f,int location,float v0
Specify the value of a uniform variable for the current program object

@arg location Specifies the location of the uniform variable to be modified.
@arg v0 Specifies the new value to be used for the specified uniform variable

@see http://www.opengl.org/sdk/docs/man/html/glUniform.xhtml
glUniform2f,int location,float v0,float v1
Specify the values of a uniform variable for the current program object

@arg location Specifies the location of the uniform variable to be modified.
@arg v0 Specifies the new value to be used for the specified uniform variable
@arg v1 Specifies the new value to be used for the specified uniform variable

@see http://www.opengl.org/sdk/docs/man/html/glUniform.xhtml
glUniform3f,int location,float v0,float v1,float v2
Specify the values of a uniform variable for the current program object

@arg location Specifies the location of the uniform variable to be modified.
@arg v0 Specifies the new value to be used for the specified uniform variable
@arg v1 Specifies the new value to be used for the specified uniform variable
@arg v2 Specifies the new value to be used for the specified uniform variable

@see http://www.opengl.org/sdk/docs/man/html/glUniform.xhtml
glUniform4f,int location,float v0,float v1,float v2,float v3
Specify the values of a uniform variable for the current program object

@arg location Specifies the location of the uniform variable to be modified.
@arg v0 Specifies the new value to be used for the specified uniform variable
@arg v1 Specifies the new value to be used for the specified uniform variable
@arg v2 Specifies the new value to be used for the specified uniform variable
@arg v3 Specifies the new value to be used for the specified uniform variable

@see http://www.opengl.org/sdk/docs/man/html/glUniform.xhtml
glUniform1i,int location,int v0
Specify the value of a uniform variable for the current program object

@arg location Specifies the location of the uniform variable to be modified.
@arg v0 Specifies the new value to be used for the specified uniform variable

@see http://www.opengl.org/sdk/docs/man/html/glUniform.xhtml
glUniform2i,int location,int v0,int v1
Specify the values of a uniform variable for the current program object

@arg location Specifies the location of the uniform variable to be modified.
@arg v0 Specifies the new value to be used for the specified uniform variable
@arg v1 Specifies the new value to be used for the specified uniform variable

@see http://www.opengl.org/sdk/docs/man/html/glUniform.xhtml
glUniform3i,int location,int v0,int v1,int v2
Specify the values of a uniform variable for the current program object

@arg location Specifies the location of the uniform variable to be modified.
@arg v0 Specifies the new value to be used for the specified uniform variable
@arg v1 Specifies the new value to be used for the specified uniform variable
@arg v2 Specifies the new value to be used for the specified uniform variable

@see http://www.opengl.org/sdk/docs/man/html/glUniform.xhtml
glUniform4i,int location,int v0,int v1,int v2,int v3
Specify the values of a uniform variable for the current program object

@arg location Specifies the location of the uniform variable to be modified.
@arg v0 Specifies the new value to be used for the specified uniform variable
@arg v1 Specifies the new value to be used for the specified uniform variable
@arg v2 Specifies the new value to be used for the specified uniform variable
@arg v3 Specifies the new value to be used for the specified uniform variable

@see http://www.opengl.org/sdk/docs/man/html/glUniform.xhtml
glUniformMatrix2fv,int location,int count,boolean tranpose,Object a
Specify the values of a uniform 2x2 matrix variable for the current program object

@arg location Specifies the location of the uniform variable to be modified.
@arg count Specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices (currently limited to 256 elements, i.e. 64 2x2 matrices)
@arg transpose Specifies whether to transpose the matrix as the values are loaded into the uniform variable
@arg a Array object (non-float array values will be converted to float)

@see http://www.opengl.org/sdk/docs/man/html/glUniform.xhtml
glUniformMatrix3fv,int location,int count,boolean tranpose,Object a
Specify the values of a uniform 3x3 matrix variable for the current program object

@arg location Specifies the location of the uniform variable to be modified.
@arg count Specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices (currently limited to 252 elements, i.e. 28 3x3 matrices)
@arg transpose Specifies whether to transpose the matrix as the values are loaded into the uniform variable
@arg a Array object (non-float array values will be converted to float)

@see http://www.opengl.org/sdk/docs/man/html/glUniform.xhtml
glUniformMatrix4fv,int location,int count,boolean tranpose,Object a
Specify the values of a uniform 4x4 matrix variable for the current program object

@arg location Specifies the location of the uniform variable to be modified.
@arg count Specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices (currently limited to 256 elements, i.e. 16 4x4 matrices)
@arg transpose Specifies whether to transpose the matrix as the values are loaded into the uniform variable
@arg a Array object (non-float array values will be converted to float)

@see http://www.opengl.org/sdk/docs/man/html/glUniform.xhtml
zglGenSampler:int
Generate sampler object name

@return The generated sampler object name

@see http://www.opengl.org/sdk/docs/man/html/glGenSamplers.xhtml
zglDeleteSampler,int id
Delete named sampler object

@arg Specifies the sampler object to be deleted

@see http://www.opengl.org/sdk/docs/man/html/glDeleteSamplers.xhtml
glBindSampler,int unit,int sampler
Bind a named sampler to a texturing target

@arg unit Specifies the index of the texture unit to which the sampler is bound.
@arg sampler Specifies the name of a sampler.

@see http://www.opengl.org/sdk/docs/man/html/glBindSampler.xhtml
glSamplerParameteri,int sampler,int pname,int param
Set sampler parameters

@arg sampler Specifies the sampler object whose parameter to modify.
@arg pname Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: §GL_TEXTURE_WRAP_S, §GL_TEXTURE_WRAP_T, §GL_TEXTURE_WRAP_R, §GL_TEXTURE_MIN_FILTER, §GL_TEXTURE_MAG_FILTER, §GL_TEXTURE_MIN_LOD, §GL_TEXTURE_MAX_LOD, §GL_TEXTURE_LOD_BIAS, §GL_TEXTURE_COMPARE_MODE, or §GL_TEXTURE_COMPARE_FUNC
@arg param Specifies the value of pname

@see http://www.opengl.org/sdk/docs/man/html/glSamplerParameter.xhtml
DisplayList,Object
Represents an OpenGL display list
GL_NONE,int
GL_TRUE,int
GL_FALSE,int
GL_BOOL,int
GL_BOOL_VEC2,int
GL_BOOL_VEC3,int
GL_BOOL_VEC4,int
GL_BYTE,int
GL_UNSIGNED_BYTE,int
GL_SHORT,int
GL_UNSIGNED_SHORT,int
GL_UNSIGNED_SHORT_5_6_5,int
GL_UNSIGNED_SHORT_5_6_5_REV,int
GL_UNSIGNED_INT_8_8_8_8,int
GL_UNSIGNED_INT_8_8_8_8_REV,int
GL_INT,int
GL_INT_VEC2,int
GL_INT_VEC3,int
GL_INT_VEC4,int
GL_UNSIGNED_INT,int
GL_FLOAT,int
GL_FLOAT_VEC2,int
GL_FLOAT_VEC3,int
GL_FLOAT_VEC4,int
GL_FLOAT_MAT2,int
GL_FLOAT_MAT3,int
GL_FLOAT_MAT4,int
GL_2_BYTES,int
GL_3_BYTES,int
GL_4_BYTES,int
GL_DOUBLE,int
GL_FRONT_LEFT,int
GL_FRONT_RIGHT,int
GL_BACK_LEFT,int
GL_BACK_RIGHT,int
GL_LEFT,int
GL_RIGHT,int
GL_AUX0,int
GL_AUX1,int
GL_AUX2,int
GL_AUX3,int
GL_INDEX_ARRAY,int
GL_EDGE_FLAG_ARRAY,int
GL_ALPHA4,int
GL_ALPHA8,int
GL_ALPHA12,int
GL_ALPHA16,int
GL_LUMINANCE4,int
GL_LUMINANCE8,int
GL_LUMINANCE12,int
GL_LUMINANCE16,int
GL_LUMINANCE4_ALPHA4,int
GL_LUMINANCE6_ALPHA2,int
GL_LUMINANCE8_ALPHA8,int
GL_LUMINANCE12_ALPHA4,int
GL_LUMINANCE12_ALPHA12,int
GL_LUMINANCE16_ALPHA16,int
GL_INTENSITY4,int
GL_INTENSITY8,int
GL_INTENSITY12,int
GL_INTENSITY16,int
GL_RGB4,int
GL_RGB10,int
GL_RGB12,int
GL_RGB16,int
GL_RGBA2,int
GL_RGBA4,int
GL_RGBA12,int
GL_RGBA16,int
GL_MODELVIEW,int
GL_PROJECTION,int
GL_TEXTURE,int
GL_FOG_HINT,int
GL_LINE_SMOOTH_HINT,int
GL_PERSPECTIVE_CORRECTION_HINT,int
GL_POINT_SMOOTH_HINT,int
GL_POLYGON_SMOOTH_HINT,int
GL_FASTEST,int
GL_NICEST,int
GL_DONT_CARE,int
GL_ALPHA_TEST,int
GL_AUTO_NORMAL,int
GL_BLEND,int
GL_BLEND_DST_RGB,int
GL_BLEND_SRC_RGB,int
GL_BLEND_DST_ALPHA,int
GL_BLEND_SRC_ALPHA,int
GL_CULL_FACE,int
GL_DEPTH_TEST,int
GL_DITHER,int
GL_FOG,int
GL_LIGHT0,int
GL_LIGHT1,int
GL_LIGHT2,int
GL_LIGHT3,int
GL_LIGHT4,int
GL_LIGHT5,int
GL_LIGHT6,int
GL_LIGHT7,int
GL_LIGHTING,int
GL_AMBIENT,int
GL_DIFFUSE,int
GL_EMISSION,int
GL_SPECULAR,int
GL_AMBIENT_AND_DIFFUSE,int
GL_COLOR_MATERIAL,int
GL_SINGLE_COLOR,int
GL_SEPARATE_SPECULAR_COLOR,int
GL_LINE_SMOOTH,int
GL_LINE_STIPPLE,int
GL_NORMALIZE,int
GL_POINT_SMOOTH,int
GL_POLYGON_OFFSET_FILL,int
GL_POLYGON_OFFSET_POINT,int
GL_POLYGON_SMOOTH,int
GL_POLYGON_STIPPLE,int
GL_SCISSOR_TEST,int
GL_STENCIL_TEST,int
GL_MULTISAMPLE,int
GL_TEXTURE_1D,int
GL_PROXY_TEXTURE_1D,int
Can be used to check if texture fits into memory.
GL_TEXTURE_2D,int
GL_PROXY_TEXTURE_2D,int
Can be used to check if texture fits into memory.
GL_TEXTURE_2D,int
GL_PROXY_TEXTURE_2D,int
Can be used to check if texture fits into memory.
GL_TEXTURE_2D_ARRAY,int
GL_PROXY_TEXTURE_2D_ARRAY,int
Can be used to check if texture fits into memory.
GL_TEXTURE_3D,int
GL_PROXY_TEXTURE_3D,int
Can be used to check if texture fits into memory.
GL_TEXTURE0,int
GL_TEXTURE1,int
GL_TEXTURE2,int
GL_TEXTURE3,int
GL_TEXTURE4,int
GL_TEXTURE5,int
GL_TEXTURE6,int
GL_TEXTURE7,int
GL_TEXTURE8,int
GL_TEXTURE9,int
GL_TEXTURE10,int
GL_TEXTURE11,int
GL_TEXTURE12,int
GL_TEXTURE13,int
GL_TEXTURE14,int
GL_TEXTURE15,int
GL_ACTIVE_TEXTURE,int
GL_CLIENT_ACTIVE_TEXTURE,int
GL_MAX_TEXTURE_UNITS,int
GL_MAX_TEXTURE_IMAGE_UNITS,int
GL_MAX_TEXTURE_SIZE,int
GL_MAX_TEXTURE_COORDS,int
GL_MAX_ELEMENTS_VERTICES,int
GL_MAX_ELEMENTS_INDICES,int
GL_TEXTURE_MAG_FILTER,int
 GL_TEXTURE_MIN_FILTER,int
 GL_TEXTURE_WRAP_S,int
 GL_TEXTURE_WRAP_T,int
 GL_TEXTURE_WRAP_R,int
 GL_TEXTURE_MIN_LOD,int
 GL_TEXTURE_MAX_LOD,int
 GL_TEXTURE_BASE_LEVEL,int
 GL_TEXTURE_MAX_LEVEL,int
 GL_TEXTURE_PRIORITY,int
 GL_TEXTURE_RESIDENT,int
 GL_GENERATE_MIPMAP,int
 GL_GENERATE_MIPMAP_HINT,int
 GL_DEPTH_COMPONENT16,int
 GL_DEPTH_COMPONENT24,int
 GL_DEPTH_COMPONENT32,int
 GL_DEPTH24_STENCIL8,int
 GL_DEPTH32F_STENCIL8,int
 GL_MIRRORED_REPEAT,int
 GL_FRAGMENT_DEPTH,int
 GL_CLEAR,int
GL_SET,int
GL_COPY,int
GL_COPY_INVERTED,int
GL_NOOP,int
GL_INVERT,int
GL_AND,int
GL_NAND,int
GL_OR,int
GL_NOR,int
GL_XOR,int
GL_EQUIV,int
GL_AND_REVERSE,int
GL_AND_INVERTED,int
GL_OR_REVERSE,int
GL_OR_INVERTED,int
GL_RENDER,int
GL_FEEDBACK,int
GL_SELECT,int
GL_FLAT,int
GL_SMOOTH,int
GL_FRONT,int
GL_BACK,int
GL_FRONT_AND_BACK,int
GL_POINT,int
GL_LINE,int
GL_FILL,int
GL_ZERO,int
GL_ONE,int
GL_SRC_COLOR,int
GL_ONE_MINUS_SRC_COLOR,int
GL_SRC_ALPHA,int
GL_ONE_MINUS_SRC_ALPHA,int
GL_DST_ALPHA,int
GL_ONE_MINUS_DST_ALPHA,int
GL_DST_COLOR,int
GL_ONE_MINUS_DST_COLOR,int
GL_SRC_ALPHA_SATURATE,int
GL_CONSTANT_COLOR,int
GL_ONE_MINUS_CONSTANT_COLOR,int
GL_CONSTANT_ALPHA,int
GL_ONE_MINUS_CONSTANT_ALPHA,int
GL_BLEND_COLOR,int
GL_CW,int
GL_CCW,int
GL_KEEP,int
GL_REPLACE,int
GL_INCR,int
GL_INCR_WRAP,int
GL_DECR,int
GL_DECR_WRAP,int
GL_NEVER,int
GL_LESS,int
GL_EQUAL,int
GL_LEQUAL,int
GL_GREATER,int
GL_NOTEQUAL,int
GL_GEQUAL,int
GL_ALWAYS,int
GL_POLYGON_OFFSET_LINE,int
GL_VERTEX_ARRAY,int
GL_NORMAL_ARRAY,int
GL_COLOR_ARRAY,int
GL_TEXTURE_COORD_ARRAY,int
GL_COLOR_LOGIC_OP,int
GL_S,int
GL_T,int
GL_R,int
GL_Q,int
GL_TEXTURE_GEN_S,int
GL_TEXTURE_GEN_T,int
GL_TEXTURE_GEN_R,int
GL_TEXTURE_GEN_Q,int
GL_TEXTURE_ENV,int
GL_TEXTURE_FILTER_CONTROL,int
GL_POINT_SPRITE,int
GL_COORD_REPLACE,int
GL_TEXTURE_ENV_MODE,int
GL_TEXTURE_ENV_COLOR,int
GL_TEXTURE_LOD_BIAS,int
GL_TEXTURE_COMPARE_MODE,int
GL_TEXTURE_COMPARE_FUNC,int
GL_TEXTURE_COMPARE_R_TO_TEXTURE,int
GL_COMBINE,int
GL_COMBINE_RGB,int
GL_COMBINE_ALPHA,int
GL_SRC0_RGB,int
GL_SRC1_RGB,int
GL_SRC2_RGB,int
GL_SRC0_ALPHA,int
GL_SRC1_ALPHA,int
GL_SRC2_ALPHA,int
GL_OPERAND0_RGB,int
GL_OPERAND1_RGB,int
GL_OPERAND2_RGB,int
GL_OPERAND0_ALPHA,int
GL_OPERAND1_ALPHA,int
GL_OPERAND2_ALPHA,int
GL_RGB_SCALE,int
GL_ALPHA_SCALE,int
GL_ADD_SIGNED,int
GL_INTERPOLATE,int
GL_SUBTRACT,int
GL_CONSTANT,int
GL_PRIMARY_COLOR,int
GL_PREVIOUS,int
GL_DOT3_RGB,int
GL_DOT3_RGBA,int
GL_DECAL,int
GL_MODULATE,int
GL_EYE_LINEAR,int
GL_OBJECT_LINEAR,int
GL_SPHERE_MAP,int
GL_TEXTURE_GEN_MODE,int
GL_OBJECT_PLANE,int
GL_EYE_PLANE,int
GL_COLOR,int
GL_DEPTH,int
GL_STENCIL,int
GL_COLOR_INDEX,int
GL_STENCIL_INDEX,int
GL_DEPTH_COMPONENT,int
GL_RED,int
GL_GREEN,int
GL_BLUE,int
GL_ALPHA,int
GL_TEXTURE_SWIZZLE_R,int
GL_ARB_texture_swizzle (not available on macOS / GL 4.1 core)
GL_TEXTURE_SWIZZLE_G,int
GL_ARB_texture_swizzle (not available on macOS / GL 4.1 core)
GL_TEXTURE_SWIZZLE_B,int
GL_ARB_texture_swizzle (not available on macOS / GL 4.1 core)
GL_TEXTURE_SWIZZLE_A,int
GL_ARB_texture_swizzle (not available on macOS / GL 4.1 core)
GL_TEXTURE_SWIZZLE_RGBA,int
GL_ARB_texture_swizzle (not available on macOS / GL 4.1 core)
GL_RGB,int
GL_RGBA,int
GL_LUMINANCE,int
GL_LUMINANCE8,int
GL_LUMINANCE_ALPHA,int
GL_LUMINANCE8_ALPHA8,int
GL_INTENSITY,int
GL_INTENSITY8,int
GL_RGB5,int
GL_RGB8,int
GL_RGB5_A1,int
GL_RGBA8,int
GL_RGB10_A2,int
GL_R3_G3_B2,int
GL_ALL_ATTRIB_BITS,int
GL_CLIENT_ALL_ATTRIB_BITS,int
GL_CURRENT_BIT,int
GL_ENABLE_BIT,int
GL_EVAL_BIT,int
GL_FOG_BIT,int
GL_HINT_BIT,int
GL_LIGHTING_BIT,int
GL_LINE_BIT,int
GL_LIST_BIT,int
GL_PIXEL_MODE_BIT,int
GL_POINT_BIT,int
GL_POLYGON_BIT,int
GL_POLYGON_STIPPLE_BIT,int
GL_SCISSOR_BIT,int
GL_TEXTURE_BIT,int
GL_TRANSFORM_BIT,int
GL_VIEWPORT_BIT,int
GL_ALL_ATTRIBS_BITS,int
GL_CLIENT_PIXEL_STORE_BIT,int
GL_CLIENT_VERTEX_ARRAY_BIT,int
GL_CLIENT_ALL_ATTRIB_BITS,int
GL_BGRA,int
GL_BGR,int
GL_SPOT_EXPONENT,int
GL_SPOT_CUTOFF,int
GL_CONSTANT_ATTENUATION,int
GL_LINEAR_ATTENUATION,int
GL_QUADRATIC_ATTENUATION,int
GL_POINTS,int
GL_LINES,int
GL_LINE_STRIP,int
GL_LINE_LOOP,int
GL_TRIANGLES,int
GL_TRIANGLE_STRIP,int
GL_TRIANGLE_FAN,int
GL_QUADS,int
GL_QUAD_STRIP,int
GL_POLYGON,int
GL_NEAREST,int
GL_LINEAR,int
GL_CLAMP,int
GL_REPEAT,int
GL_EXP,int
GL_EXP2,int
GL_COLOR_BUFFER_BIT,int
GL_DEPTH_BUFFER_BIT,int
GL_ACCUM_BUFFER_BIT,int
GL_STENCIL_BUFFER_BIT,int
GL_CLIP_PLANE0,int
GL_CLIP_PLANE1,int
GL_CLIP_PLANE2,int
GL_CLIP_PLANE3,int
GL_CLIP_PLANE4,int
GL_CLIP_PLANE5,int
GL_VENDOR,int
GL_RENDERER,int
GL_VERSION,int
GL_EXTENSIONS,int
GL_ACCUM,int
GL_LOAD,int
GL_RETURN,int
GL_MULT,int
GL_ADD,int
GL_POINT_SIZE_MIN,int
GL_POINT_SIZE_MAX,int
GL_POINT_FADE_THRESHOLD_SIZE,int
GL_POINT_DISTANCE_ATTENUATION,int
GL_POINT_SPRITE_COORD_ORIGIN,int
GL_LOWER_LEFT,int
GL_UPPER_LEFT,int
GL_CLAMP_TO_BORDER,int
GL_CLAMP_TO_EDGE,int
GL_NORMAL_MAP,int
GL_REFLECTION_MAP,int
GL_TEXTURE_CUBE_MAP,int
GL_TEXTURE_BINDING_CUBE_MAP,int
GL_TEXTURE_CUBE_MAP_POSITIVE_X,int
GL_TEXTURE_CUBE_MAP_NEGATIVE_X,int
GL_TEXTURE_CUBE_MAP_POSITIVE_Y,int
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,int
GL_TEXTURE_CUBE_MAP_POSITIVE_Z,int
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,int
GL_MAX_DRAW_BUFFERS,int
GL_DRAW_BUFFER0,int
GL_DRAW_BUFFER1,int
GL_DRAW_BUFFER2,int
GL_DRAW_BUFFER3,int
GL_DRAW_BUFFER4,int
GL_DRAW_BUFFER5,int
GL_DRAW_BUFFER6,int
GL_DRAW_BUFFER7,int
GL_FUNC_ADD,int
GL_MIN,int
GL_MAX,int
GL_BLEND_EQUATION_RGB,int
GL_BLEND_EQUATION_ALPHA,int
GL_FUNC_SUBTRACT,int
GL_FUNC_REVERSE_SUBTRACT,int
GL_ARRAY_BUFFER,int
GL_ELEMENT_ARRAY_BUFFER,int
GL_ARRAY_BUFFER_BINDING,int
GL_ELEMENT_ARRAY_BUFFER_BINDING,int
GL_VERTEX_ARRAY_BUFFER_BINDING,int
GL_NORMAL_ARRAY_BUFFER_BINDING,int
GL_COLOR_ARRAY_BUFFER_BINDING,int
GL_INDEX_ARRAY_BUFFER_BINDING,int
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING,int
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING,int
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING,int
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING,int
GL_WEIGHT_ARRAY_BUFFER_BINDING,int
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,int
GL_READ_ONLY,int
GL_WRITE_ONLY,int
GL_READ_WRITE,int
GL_BUFFER_ACCESS,int
GL_BUFFER_MAPPED,int
GL_BUFFER_MAP_POINTER,int
GL_STREAM_DRAW,int
GL_STREAM_READ,int
GL_STREAM_COPY,int
GL_STATIC_DRAW,int
GL_STATIC_READ,int
GL_STATIC_COPY,int
GL_DYNAMIC_DRAW,int
GL_DYNAMIC_READ,int
GL_DYNAMIC_COPY,int
GL_MAP_READ_BIT,int
GL_MAP_WRITE_BIT,int
GL_MAP_PERSISTENT_BIT,int
GL_MAP_COHERENT_BIT,int
GL_MAP_INVALIDATE_RANGE_BIT,int
GL_MAP_INVALIDATE_BUFFER_BIT,int
GL_MAP_FLUSH_EXPLICIT_BIT,int
GL_MAP_UNSYNCHRONIZED_BIT,int
GL_PIXEL_PACK_BUFFER,int
 GL_PIXEL_UNPACK_BUFFER,int
 GL_PIXEL_PACK_BUFFER_BINDING,int
 GL_PIXEL_UNPACK_BUFFER_BINDING,int
 GL_FRAMEBUFFER,int
Accepted by the <target> parameter of §glBindFramebuffer, §glCheckFramebufferStatus, §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
 GL_RENDERBUFFER,int
Accepted by the <target> parameter of §glBindRenderbuffer, §glRenderbufferStorage, §glGetRenderbufferParameteri, and returned by §zglGetFramebufferAttachmentParameteri
 GL_STENCIL_INDEX1,int
Accepted by the <internalformat> parameter of §glRenderbufferStorage
GL_STENCIL_INDEX4,int
Accepted by the <internalformat> parameter of §glRenderbufferStorage
GL_STENCIL_INDEX8,int
Accepted by the <internalformat> parameter of §glRenderbufferStorage
GL_STENCIL_INDEX16,int
Accepted by the <internalformat> parameter of §glRenderbufferStorage
GL_RENDERBUFFER_WIDTH,int
Accepted by the <pname> parameter of §zglGetRenderbufferParameteri
 GL_RENDERBUFFER_HEIGHT,int
Accepted by the <pname> parameter of §zglGetRenderbufferParameteri
 GL_RENDERBUFFER_INTERNAL_FORMAT,int
Accepted by the <pname> parameter of §zglGetRenderbufferParameteri
 GL_RENDERBUFFER_RED_SIZE,int
Accepted by the <pname> parameter of §zglGetRenderbufferParameteri
 GL_RENDERBUFFER_GREEN_SIZE,int
Accepted by the <pname> parameter of §zglGetRenderbufferParameteri
 GL_RENDERBUFFER_BLUE_SIZE,int
Accepted by the <pname> parameter of §zglGetRenderbufferParameteri
 GL_RENDERBUFFER_ALPHA_SIZE,int
Accepted by the <pname> parameter of §zglGetRenderbufferParameteri
 GL_RENDERBUFFER_DEPTH_SIZE,int
Accepted by the <pname> parameter of §zglGetRenderbufferParameteri
 GL_RENDERBUFFER_STENCIL_SIZE,int
Accepted by the <pname> parameter of §zglGetRenderbufferParameteri
 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE,int
Accepted by the <pname> parameter of §zglGetFramebufferAttachmentParameteri
 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,int
Accepted by the <pname> parameter of §zglGetFramebufferAttachmentParameteri
 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL,int
Accepted by the <pname> parameter of §zglGetFramebufferAttachmentParameteri
 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE,int
Accepted by the <pname> parameter of §zglGetFramebufferAttachmentParameteri
 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET,int
Accepted by the <pname> parameter of §zglGetFramebufferAttachmentParameteri
 GL_READ_FRAMEBUFFER,int
 GL_DRAW_FRAMEBUFFER,int
 GL_DEPTH_STENCIL_ATTACHMENT,int
 GL_COLOR_ATTACHMENT0,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT1,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT2,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT3,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT4,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT5,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT6,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT7,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT8,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT9,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT10,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT11,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT12,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT13,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT14,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_COLOR_ATTACHMENT15,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_DEPTH_ATTACHMENT,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_STENCIL_ATTACHMENT,int
Accepted by the <attachment> parameter of §glFramebufferTexture1D, §glFramebufferTexture2D, §glFramebufferTexture3D, §glFramebufferRenderbuffer, and §zglGetFramebufferAttachmentParameteri
GL_FRAMEBUFFER_COMPLETE,int
Returned by §glCheckFramebufferStatus
 GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT,int
Returned by §glCheckFramebufferStatus
 GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT,int
Returned by §glCheckFramebufferStatus
 GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS,int
Returned by §glCheckFramebufferStatus
 GL_FRAMEBUFFER_INCOMPLETE_FORMATS,int
Returned by §glCheckFramebufferStatus
 GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER,int
Returned by §glCheckFramebufferStatus
 GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER,int
Returned by §glCheckFramebufferStatus
 GL_FRAMEBUFFER_UNSUPPORTED,int
Returned by §glCheckFramebufferStatus
 GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE,int
Returned by §glCheckFramebufferStatus
 GL_FRAMEBUFFER_BINDING,int
Accepted by §zglGetInteger
GL_RENDERBUFFER_BINDING,int
Accepted by §zglGetInteger
GL_MAX_COLOR_ATTACHMENTS,int
Accepted by §zglGetInteger
GL_MAX_RENDERBUFFER_SIZE,int
Accepted by §glGetIntegerv
GL_MAX_SAMPLES,int
Accepted by §glGetIntegerv
GL_INVALID_FRAMEBUFFER_OPERATION,int
Returned by §glGetError
GL_BUFFER_SIZE,int
 GL_TEXTURE_RECTANGLE,int
Accepted by the <cap> parameter of §glEnable, §glDisable and §glIsEnabled, by the <pname> parameter of §glGetBooleanv, §glGetIntegerv, §glGetFloatv and §glGetDoublev, and by the <target> parameter of §glBindTexture, §zglGetTexParameterf, §zglGetTexParameteri, §glTexParameterf, §glTexParameteri, §glTexParameterfv and §glTexParameteriv

Accepted by the <target> parameter of §glGetTexImage, §glGetTexLevelParameteriv, §glGetTexLevelParameterfv, §glTexImage2D, §glCopyTexImage2D, §glTexSubImage2D and §glCopyTexSubImage2D

GL_TEXTURE_BINDING_RECTANGLE,int
Accepted by the <pname> parameter of §glGetBooleanv, §glGetIntegerv, §glGetFloatv and §glGetDoublev
GL_PROXY_TEXTURE_RECTANGLE,int
 Accepted by the <target> parameter of §glGetTexLevelParameteriv, §glGetTexLevelParameterfv, §glGetTexParameteriv and §glTexImage2D
Can be used to check if texture fits into memory.
GL_MAX_RECTANGLE_TEXTURE_SIZE,int
Accepted by the <pname> parameter of §glGetBooleanv, §glGetDoublev, §glGetIntegerv and §glGetFloatv
GL_SAMPLER_1D,int
GL_SAMPLER_2D,int
GL_SAMPLER_3D,int
GL_SAMPLER_CUBE,int
GL_SAMPLER_1D_SHADOW,int
GL_SAMPLER_2D_SHADOW,int
GL_SAMPLER_2D_RECT,int
Returned by <type> parameter of §glGetActiveUniform when the location <index> for program object <program> is of type sampler2DRect
GL_SAMPLER_2D_RECT_SHADOW,int
Returned by <type> parameter of §glGetActiveUniform when the location <index> for program object <program> is of type sampler2DRectShadow
GL_PROGRAM_OBJECT,int
 GL_SHADER_OBJECT,int
 GL_OBJECT_TYPE,int
 GL_MAX_VERTEX_ATTRIBS,int
 GL_VERTEX_ATTRIB_ARRAY_NORMALIZED,int
 GL_FRAGMENT_SHADER,int
 GL_VERTEX_SHADER,int
 GL_MAX_FRAGMENT_UNIFORM_COMPONENTS,int
 GL_MAX_VERTEX_UNIFORM_COMPONENTS,int
 GL_MAX_VARYING_FLOATS,int
 GL_SHADER_TYPE,int
 GL_DELETE_STATUS,int
 GL_LINK_STATUS,int
 GL_VALIDATE_STATUS,int
 GL_INFO_LOG_LENGTH,int
 GL_ATTACHED_SHADERS,int
 GL_ACTIVE_UNIFORMS,int
 GL_ACTIVE_UNIFORM_MAX_LENGTH,int
 GL_SHADER_SOURCE_LENGTH,int
 GL_ACTIVE_ATTRIBUTES,int
 GL_ACTIVE_ATTRIBUTE_MAX_LENGTH,int
 GL_FRAGMENT_SHADER_DERIVATIVE_HINT,int
 GL_SHADING_LANGUAGE_VERSION,int
 GL_CURRENT_PROGRAM,int
 GL_MAJOR_VERSION,int
 Since GL30
 GL_MINOR_VERSION,int
 Since GL30
 alloc
   Generate new display list name id

   This is a wrapper for the glGenLists() native function.
   free
   Free display list

   This is a wrapper for the glDeleteLists() native function.
   begin
   Begin recording of display list

   This is a wrapper for the glNewList() native function (GL_COMPILE_AND_EXECUTE)
   end
   End recording of display list and execute it.

   This is a wrapper for the glEndList() native function.
   draw
   Execute display list

   This is a wrapper for the glCallList() native function.
   setName,String name
   Set display list name

   @arg name String to copy to the name field
   getName:String
   Query the display list name

   @return Reference to name field
   getId:int
   Query display list name id

   @return Display list name id or -1 if this object stores no valid display list.
   @see glCallList
   Texture
Represents an OpenGL texture
TEX_16BIT,int
Hint OpenGL to store that texture in a 16bit per pixel format
TEX_REPEAT_S,int
Repeat texels along the x axis
TEX_REPEAT_T,int
Repeat texels along the y axis
TEX_DELETE,int
Delete bitmap after texture has been uploaded to OpenGL
TEX_AUTOMIPMAP,int
Automatically generate mip maps
TEX_MODULATE,int
Allow the texels to be modulated by the current OpenGL color
TEX_BLEND,int
TEX_DECAL,int
TEX_REPLACE,int
TEX_MINFILTERLINEAR,int
TEX_MINFILTERTRILINEAR,int
TEX_MAGFILTERLINEAR,int
TEX_MAGFILTERTRILINEAR,int

@deprecated Same as TEX_MAGFILTERLINEAR
TEX_ALPHA,int
Use alpha channel
TEX_UPLOADED,int
This flag is set when the texture has been uploaded to OpenGL
TEX_1D,int
Use GL_TEXTURE_1D texture target
TEX_FORCEHOSTBYTEORDER,int
Hint that the bitmap uses the host byte order (e.g. A,B,G,R on little endian)
TEX_INTENSITY,int
Upload 8bit texture in INTENSITY format
TEX_CLAMPTOEDGE_S,int
TEX_CLAMPTOEDGE_T,int
TEX_REPEATMASK,int
TEX_ENVMASK,int
TEX_FILTERMASK,int
TEX_POINTSPRITE,int
setFlags,int flags
    Set texture flags.

    These flags should usually be set before uploading the texture to OpenGL.
    getFlags:int
    loadImage,String pakFileName,int newWidth,int newHeight,int newNumBytes:boolean
    Load pakfile image and scale to the given geometry and depth.

    @arg pakFileName Logic PAK file name
    @arg newWidth If 0, keep original image width. Otherwise, scale loaded image to this width
    @arg newHeight If 0, keep original image height. Otherwise, scale loaded image to this height
    @arg newNumBytes If 0, keep original image depth. Otherwise, scale loaded image to the given number of bytes per pixel
    loadLocalImage,String localFileName,int newWidth,int newHeight,int newNumBytes:boolean
    Load local image and scale to the given geometry and depth.

    @arg localFileName Local file name
    @arg newWidth If 0, keep original image width. Otherwise, scale loaded image to this width
    @arg newHeight If 0, keep original image height. Otherwise, scale loaded image to this height
    @arg newNumBytes If 0, keep original image depth. Otherwise, scale loaded image to the given number of bytes per pixel
    loadImageStream,Stream ifs,int newWidth,int newHeight,int newNumBytes:boolean
    Load image from §Stream and scale to the given geometry and depth.

    @arg ifs Input Stream
    @arg newWidth If 0, keep original image width. Otherwise, scale loaded image to this width
    @arg newHeight If 0, keep original image height. Otherwise, scale loaded image to this height
    @arg newNumBytes If 0, keep original image depth. Otherwise, scale loaded image to the given number of bytes per pixel
    saveImage,String localFileName:boolean
    saveImageStream,Stream ofs:boolean
    upload
    setScreen,Texture srctex
    Share bitmap data with other Texture
    alloc,int width,int height,int numBytesPerPixel:boolean
    Allocate bitmap data
    scaleFrom,Texture src
    bind
    Bind texture to associated OpenGL texture target
    unbind
    Unbind texture target (bind name 0)
    enable
    Enable texture target (glEnable())
    disable
    Disable texture target (glDisable())
    free
    Free bitmap data and OpenGL texture handle
    freeImage
    Free bitmap data
    setFlags
    setScreenArea,Texture srctex,int ltx,int lty,int width,int height
    setPriority,float prio:float
    Set OpenGL texture priority
    setEnvColor,int argb32
    setFlags
    copyRegion,Texture srctex,int px,int py,int w,int h,int dx,int dy
    clear,int argb32
    Fill pixels with given clear color
    clearAlpha,int a
    Fill alpha channel (of ARGB32 texture) with constant value (0..255)
    unload
    Free OpenGL texture handle
    getSx:int
    Query texture width
    getSy:int
    Query texture height
    getZ:int
    Query number of bytes per pixel
    setSz,int sz
    Set OpenGL texture depth (3d textures, 2d texture arrays)
    Note: When texture target is GL_TEXTURE_3D, the texture height (sy) will be split into 'sz' depth slices during upload()
    @arg sz 1..256 (number of slices)
    getSz:int
    Query OpenGL texture depth (3d texture, 2d texture arrays)
    drawPixels2i,int x,int y
    Draw texture via glDrawPixels
    drawPixels2f,float x,float y
    Draw texture via glDrawPixels
    drawPixels3f,float x,float y,float z
    Draw texture via glDrawPixels
    swapScreen,Texture tex
    Swap bitmap data
    setFgcolor,int argb32
    Set foreground color for image manipulation helpers
    getFgcolor:int
    getId:int
    Query OpenGL texture name id
    setId,int name
    Set OpenGL texture name id
    lazyGenId
       Create OpenGL texture name id (if pending)
    applyColorMap,Texture tex,Texture cmap
    Apply colormap to tex and store result in this texture
    colorKeyToAlpha,int argb32
    grayscale:boolean
    interleaveAlpha,Texture alphaTex
    adjustGamma,float gamma
    adjustBrightness,float brightness
    blend,Texture srca,Texture srcb,byte ratio
    countPixels,int argb32:float

    multiply,Texture srca,Texture srcb
    getXYRaw,int x,int y:int
    Query pixel (8, 16, 24, or 32 bit)
    setXY32,int x,int y,int argb32
    Put raw pixel (, 16, 24, or 32 bit)
    setXY32,int x,int y,int argb32
    Put pixel
    getXY32,int x,int y:int
    Query pixel
    getUVVec4,float u,float v,Object retVec4
    Query pixel via normalized u/v coordinates and store (normalized) result in 'retVec4' array/vector. Clamp u/v to (0;0)..(1;1) range.
    Texel center is left/top and u/v (0;0) refers to top/left texel.
    @arg u X-Position (0..1)
    @arg v Y-Position (0..1)
    @arg retVec4 Array-like Object that receives the texel rgba vector.
    getUVFilterVec4,float u,float v,Object retVec4
    Query pixel via normalized u/v coordinates and store (normalized) result in 'retVec4' array/vector. Clamp u/v to (0;0)..(1;1) range.
    Texel center is left/top and u/v (0;0) refers to top/left texel.
    @arg u X-Position (0..1)
    @arg v Y-Position (0..1)
    @arg retVec4 Array-like Object that receives the texel rgba vector.
    getUVRepeatVec4,float u,float v,Object retVec4
    Query pixel via normalized u/v coordinates and store (normalized) result in 'retVec4' array/vector. Repeat u/v outside of (0;0)..(1;1) range.
    Texel center is left/top and u/v (0;0) refers to top/left texel.
    @arg u X-Position (0..1)
    @arg v Y-Position (0..1)
    @arg retVec4 Array-like Object that receives the texel rgba vector.
    getUVFilterRepeatVec4,float u,float v,Object retVec4
    Query pixel via normalized u/v coordinates and store (normalized) result in 'retVec4' array/vector. Repeat u/v outside of (0;0)..(1;1) range.
    Texel center is left/top and u/v (0;0) refers to top/left texel.
    @arg u X-Position (0..1)
    @arg v Y-Position (0..1)
    @arg retVec4 Array-like Object that receives the texel rgba vector.
    drawTriAA,Object v1,Object v2,Object v3,int c32,int numSamples,boolean bFixSharedEdge
        - renders a premultiplied image / triangle into an ARGB32 bitmap
        - supports clipping
        - supports sub-pixel precision
        - supports alpha blending
        - implements the top-left fill rule (input must be a clock-wise triangle)
        - uses barycentric coordinates
        - implements n-rook multisample-like anti-aliasing without the need for a resolve pass
           (0, 2, 4, 8, or 16 samples)
        - uses the framebuffer texture's alpha channel as a coverage buffer

        (note) v1..v3 should be Vector2f refs (or any other array-like object. [0]=x, [1]=y)
        (note) the fixedpoint version (_fx) uses 6 fractional coord bits
        (note) 'aaFixMode' should be set to 2 when numSamples > 0  (0 otherwise)  (1=inside+outside AA, 2=outside AA only(small tris))
        (note) 'aaBias' should be set to (-0.01f * (160.0f / _fb->s.x)) (float)  /  Dfixmul16(-655, ((160*65536) / _fb->s.x)) (fx)
    applyClearColorAfterDrawTriAA,int rgb24
    Apply clear color after drawTriAA*() calls.

    Alpha channel will be set to 255.
    applyClearColorAfterDrawTriAA4444,int rgb24
    Apply clear color after drawTriAA*() calls.

    To be used when triangle rasterizer is built in AAFX_4444 mode.

    Expands #0A0R0G0B to #AARRGGBB. Alpha channel will be set to 255.
    drawTri_fx,Object v1,Object v2,Object v3,int c32
        Renders a non-antialiased triangle into an ARGB32 bitmap
        (note) originally written for debugging the Amiga 68k version of this
        (note) the rasterizer uses fixed point math
                (v1..v3 in this script wrapper are Vector2f or FloatArray objects, though)
        (note) unlike drawTriAA*(), triangles need to be rendered back-to-front
        (note) no masking when c32Mask==0
    drawTriTex_fx,Object v1,Object v2,Object v3,Objecvt uv1,Object uv2,Object uv3
       Renders a texture-mapped (ARGB32) triangle into an ARGB32 bitmap
        (note) the rasterizer loops use fixed point math
                (v1..v3 / uv1..uv3 are Vector2f or FloatArray objects, though)
        (note) implements bilinear filtering
        (note) the texels are rendered via source-over blending
        (note) 'v' vertices are screen / framebuffer coordinates (scaled to 16 subpixel bits)
        (note) 'uv' coords are in the range 0..1 (scaled to 16 subpixel bits)
        (note) 'a' alpha is in the range 0..1
    drawPolygon,Object array,int argb32
    Simple (convex) polygon renderer

    Was once used as a collision detection helper
    drawLine,int qx,int qy,int px,int py,int argb32
    Simple bresenham line renderer

    Was once used as a collision detection helper
    drawFilledBox,int px,int py,int sx,int sy,int argb32
    simpleBlur,Texture src
    simpleBlurX,Texture src
    simpleBlurY,Texture src
    scroll,int dx,int dy
    expand2n
    Automatically resize image and add black borders if width or height is not a power of two.
    alloc2n,int width,int height,int bytesPerPixel:boolean
    Allocate bitmap
    createMask,int colorKey
    getStride:int
    Query number of bytes per scanline
    update
    (Re-)Upload to OpenGL
    updateRegion,int x,int y,int w,int h
    (Re-) upload region to OpenGL
    renderFixedText,Texture fontTex,int charWidth,String text,int x,int y,IntArray colors,IntArray attributes
    Simple fixed font text renderer
    setMipMapLevel,int level
    Set OpenGL mip map level
    getMipMapLevel:int
    Query OpenGL mip map level
    setTarget,int target
    Set OpenGL texture target
    getTarget:int
    Query OpenGL texture target
    flipY
    Rotate bitmap 180 degrees about the x axis

    Remember that (0; 0) is the left/bottom corner in OpenGL..
    invert
       Invert r,g,b,a values (linear)
    visitBuffer,Buffer buffer,int w,int h,int bpp
    Share (non-deletable) buffer view.

    @arg buffer Buffer object that holds the pixel data. Please notice that the buffer "offset" is taken into account when determing the effective buffer pointer and available size.
    @arg w Width
    @arg h Height
    @arg bpp Bytes per pixel
    calcAlphaSDF,Texture texSDF,int x,int y,int w,int h,int sdfRadius,float sdfMaxDist
       Distance field font_convert helper (experimental)
       ®arg texSDF 8bit texture storing the monochrome glyphs / icons. Will be updated with distance pixels.
       @arg x Glyph / icon X position
       @arg y Glyph / icon Y position
       @arg w Glyph / icon width
       @arg h Glyph / icon width
       @arg sdfRadius SDF padding around glyph / icon (e.g. 12px) (should be sdfMaxDist+1)
       @arg sdfMaxDist Max SDF distance (e.g. 11px)
    