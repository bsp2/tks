tksdl
tksdl
MIDINoteToFrequency,float note:float
 Convert MIDI note to frequency
AudioDevice,Object

Static class that represents a wrapper audio output via SDL.

This class emits the following signals:

onAudioFrame() - called whenever a new frame (according to PPQ and BPM) starts

onAudioPostProcess(FloatArray buf) - Called when a block of samples is about to be sent to the output device

onAudioRender(FloatArray buf) - Called when a new sample frame needs to be rendered

onAudioBeginBlock(FloatArray buf) - Called when a new block of samples needs to be rendered. The application may decide to call processTimeFrames() to trigger the onAudioFrame() and onAudioRender() callbacks. Note: This function runs in a separate thread.

 setVolume,float f
       Set master volume for sample mixer.
     getVolume:float
       Query master volume
     setSwapstereo,boolean b
       Enable stereo channel swapping
     getSwapstereo:boolean
       Query whether stereo channels are swapped
     openDSP,float freq,int bufSize:boolean
       Open sound device with the given parameters
     start
       Start sound output
     stop
       Stop sound output
     closeDSP
       Close sound device
     getBpm:float
       Query beats per minute
     setBpm,float bpm
       Set beats per minute
     setPpq,int ppq
       Set precision per quarter
     getPpq:int
       Query precision per quarter
    processTimeFrames
       Trigger onAudioFrame(), onAudioRender() signal callbacks
     finishBlock
       Finally send sample block to audio device
    setFileName,String fileName
       Where to write the sample data when file output is enabled
    enableFileOutput,boolean bEnabled
       Enable/disable file output
    setDefaultBufferSize,int bufSize
       Set output buffer size (and thus audio latency). Warning: Not all drivers can handle small buffer sizes. The default buffer size is 8192 samples
     AudioSample,Object
 allocBuffer,int l,float f,int ch,int sw:boolean
     Allocate new audio buffer
     @arg l Number of samples
     @arg f Frequency (Hz). Does not affect the buffer size.
     @arg ch Number of interleaved channels
     @arg sw Number of waves (usually 1..)
     @return True if buffer was allocated. False if not
  freeBuffer
     Free memory occupied by sample data
  visitBuffer,AudioSample o
     Share sample data with other sample
  normalize
     Normalize sample data
  loadAIFF,String name:boolean
     Load AIFF sample from pak file
  loadLocalAIFF,String name:boolean
     Load AIFF sample from local file
  getChannels:int
     Query number of channels
  getFrequency:float
     Query sample frequency
  getOffset:int
     Query sample offset
  setOffset,int off
     Set sample offset
  getLength:int
     Query sample length
  setLength,int len
     Set sample length
  getRepeatOffset:int
     Get sample repeat offset
  setRepeatOffset,int off
     Query sample repeat offset
  getRepeatLength:int
     Query sample repeat length
  setRepeatLength,int len
     Set sample repeat length
  copyBufferFrom,AudioSample o
     Copy audio sample data from other sample
  getBaseFrequency:float
     Query sample base frequency
  setBaseFrequency,float f
     Set sample base frequency
  setFrequency,float f
     Set sample frequency
  convertChannels,int ch
     Convert sample to given number of channels
  Cursor
   Represents a mouse cursor shape
create(String pixels,int w,int h,int hotx,int hoty:boolean
      Create new monochrome cursor shape from string. 'X' or 'x' means a set pixel and '.' means a cleared pixel.
      @arg w Width
      @arg h Height
      @arg hotx Hotspot x
      @arg hoty Hotspot y
      @return True if shape has been created, false if something went terribly wrong
   show:boolean
      Change cursor to this shape. 
      Remembers previous cursor shape so it can be reverted

      @return True if the new shape has been set, false if something went terribly wrong
   revert
      Revert to previous cursor shape
   FPS,Object
 Utility class for measuring/controlling frames per second
getCurrent:float
      Get current FPS (in Hz, extrapolated from last frame)
   getAverage:float
      Get average FPS rate (Hz)
   reset
      Reset FPS counters.
   setMax,float max
      Set maximum FPS rate (Hz).
      This affects the getPrecision() method
   getMax:float
      Query maximum FPS rate
   getReal:float
      Return real interpolated frames per second
   getPrecision:float
      Return current precision.

      This can be used to determine the deviation of the current FPS rate from the desired one (tickInterval).
      A value > 1 means that the rendering is slower than the desired rate, a value < 1 means that it is faster.
   getTotalTime:int
      Get total time (millisec)
   getNumFramesRendered
      Query total number of frames rendered
   setTickInterval,float interval
      Set desired tick interval in millisec.

      This affects the return value of the getPrecision() method. It also determines how often the tick() signal callback is invoked.
   getTickInterval:float
      Query current tick interval
   setTickBuffer,int size
      Set the maximum number of ticks to catch up to if the rendering is too slow.

      Mostly useful for constant timeframe physics.
   getTickBuffer:int
      Query current maximum number of ticks to catch up
   setLimit,int limit
      Set FPS limit (in Hz)

      This can be used to prevent the application from redrawing too often and thus can help to save CPU/GPU resources.

      @arg limit 0=unlimited, frame limit (Hz) otherwise
   getLimit:int
      Query current FPS limit
   SDL,Object
Static wrapper class for the SDL library.

Please notice that some functionality is placed in separate classes (§Mouse, §Viewport, §AudioDevice, §Cursor, §FPS)

This class uses the following signals/callbacks:

- onKeyboard(Key k) - Called when a key was pressed or released
- onMouse(int absx, int absy, int currbuttonstate, int changedbuttonstate) - Called when a mouse event occured
- onJoyAxisMotion(int dev, int axis, int val)
- onJoyButton(int dev, int button, int pressed)
- onJoyHatMotion(int dev, int hat, int state)
- onJoyBallMotion(int dev, int hat, int dx, int dy)
- onDraw() - Called when window/view needs to be redrawn
- onOpen() - Called after window/view has been opened
- onClose() - Called when window/view is about to be closed. By returning false in the callback function, the window/view can be prevented from closing (e.g. if the user has clicked the window close button)
- onResize() - Called after window/view has been resized (onOpen() is called immediately after)
- onEvent(Event ev) - Called when user event has been received (see §sendEvent())
- onExpose() - Called when (parts) of the window/view have become visible
- onApplicationActive(boolean bActive) - Called when application window/view becomes active
- onMouseFocusActive(boolean bActive)
- onInputFocusActive(boolean bActive)
- onIdle() - **Deprecated**, only called regularly when event polling is enabled (see §setEventPolling())
- onDropFiles() - Called when one or more files were dragged and dropped onto the window/view [win32 only]
- onTimer() - Called from timer thread when interval has been configured using setTimerInterval().

MOUSE_LBUTTON,int
 MOUSE_RBUTTON,int
 MOUSE_MBUTTON,int
 MOUSE_WHEELUP,int
 MOUSE_WHEELDOWN,int
 MOUSE_POINTER_ENTER,int
 MOUSE_POINTER_MOVE,int
 MOUSE_POINTER_MANUAL,int
 REDRAW_ALL,int
 REDRAW_DIRTY,int
 DEFAULT_KEYBOARD_REPEAT_DELAY,int
 DEFAULT_KEYBOARD_REPEAT_INTERVAL,int
 SDL_RESIZABLE,int
 SDL_NOFRAME,int
 eventLoop
   Enter SDL event loop. 
   This method does not return until the window is closed resp. §exitEventLoop is called.

   @see exitEventLoop
   exitEventLoop
    Exit SDL event loop.

    This causes the §eventLoop method to return.

    @see eventLoop
    getTicks:int
    Return number of ticks (millisec) since app. start

    @deprecated Use the §milliSeconds() core function instead
    @see milliSeconds
    triggerEvent,String ev
    Immediately send user event

    @deprecated Call your event handler directly instead
    @see sendEvent
    setRedrawFlag,int flags
    Control redraw behaviour

    @arg flags §REDRAW_ALL = redraw everytime §REDRAW_DIRTY = only redraw if §Viewport.needRedraw() was called
    getRedrawFlag:int
    Query redraw behaviour
    delay,int millisec
    Suspend thread for the given number of millisec

    @deprecated Use §TKS.sleep() instead
    sendEvent,String ev
    Post event message to event queue

    Useful for asynchronous thread communication.

    This method is usually called from a thread different to the main/UI thread.
    enableKeyRepeat,int delay,int rate
    Configure SDL key repeat

    This is a wrapper for the SDL_EnableKeyRepeat() native function.

    (note) in SDL2 build, key repeat events are filtered out when (0 == _rate).

    @deprecated Since this is a global setting it is recommend to use the §tkui (per widget) keyrepeat mechanism instead
    getNumJoysticks:int
    Query number of available joystick devices. Lazy-inits SDL JOYSTICK subsystem.
    getJoystick,int dev:Joystick
    Return Joystick device object. Lazy-inits SDL JOYSTICK subsystem.
    updateJoysticks
    Update joystick state

    This is a wrapper for the SDL_JoystickUpdate() native function.
    reportJoystickEvent,boolean bEnable
    Configure whether joystick events shall be reported

    This is a wrapper for the SDL_JoystickEventState() native function.
    setEventPolling,boolean bEnabled
    Configure whether blocking waits shall be used when retrieving the next SDL message

    @arg bEnabled If true, enable event polling (CPU intensive). It is recommended to set this to false and use the onTimer() callback instead of onIdle(). If event polling is disabled, onIdle() will only be called when a window event occurs.
    getEventPolling:boolean
    Query whether blocking waits shall be used when retrieving the next SDL message
    enableUNICODE,boolean bEnabled
    Configure whether unicode conversion shall be performed when processing keyboard events

    This is a wrapper for the SDL_EnableUNICODE() native function.

    No-Op in SDL2 build.
    isApplicationActive:boolean
    Query whether the application windows is currently in the foreground.
    setTimerInterval,int intervalMillisec
     Set timer interval for onTimer() signal/callback.

     The timer is started when §eventLoop() is called and stops when §exitEventLoop() is called.

     Warning: The timer callback runs in its own thread.

     @arg intervalMillisec Timer interval (milliseconds). 0 disables the timer.
     getTimerInterval:int
     Query timer interval.
     
     @return Current timer interval (milliseconds)
    setIconFromBMP,Buffer bmpData
       Set window icon

       @arg bmpData BMP buffer
    setCursorZoom,int zoom
       Sets cursor shape zoom factor (e.g. for Linux 4k screens)
       Default is 1.
       @arg zoom Zoom factor
    getCursorZoom:int
       Query cursor shape zoom factor
       @return Zoom factor
    Joystick,Object
Represents an SDL joystick device
SDL_HAT_CENTERED,int
   SDL_HAT_UP,int
   SDL_HAT_RIGHT,int
   SDL_HAT_DOWN,int
   SDL_HAT_LEFT,int
   SDL_HAT_RIGHTUP,int
   SDL_HAT_RIGHTDOWN,int
   SDL_HAT_LEFTUP,int
   SDL_HAT_LEFTDOWN,int
   getAxis,int axis:int
   Query current value of a joystick axis.

   This is a wrapper for the SDL_JoystickGetAxis() native function.
   getBall,int ball,Object ret:boolean
   Query relative trackball motion

   This is a wrapper for the SDL_JoystickGetBall() native function.

   @arg ball ball axis
   @arg array Receives the x/y position. Must be an array able to hold at least 2 integer values
   @return True if the values have been read successfully, false otherwise.
   getButton,int button:int
   Query joystick button state

   This is a wrapper for the SDL_JoystickGetButton() native function.

   @arg button Which button
   @return 0=button up, !0=button down
   getHat,int hat:int
   Query the current state of a joystick hat

   This is a wrapper for the SDL_JoystickGetHat() native function.

   The current state is returned as an unsigned byte is defined as an OR'd combination of one or more of the following:
   §SDL_HAT_CENTERED, §SDL_HAT_UP, §SDL_HAT_RIGHT, §SDL_HAT_DOWN, §SDL_HAT_LEFT, §SDL_HAT_RIGHTUP, §SDL_HAT_RIGHTDOWN, §SDL_HAT_LEFTUP, §SDL_HAT_LEFTDOWN

   @arg hat Which hat
   @return Hat state
   getIndex:int
   Get the instance ID of an opened joystick (SDL_JoystickInstanceID())
   getNumAxes:int
   Query number of joystick axes
   getNumBalls:int
   Query number of trackballs
   getNumButtons:int
   Query number of buttons
   getNumHats:int
   Query number of hats
   getName:String
   Query joystick device name
   Key,Object
Represents a keyboard event
VKEY_BACKSPACE,int
VKEY_TAB,int
VKEY_CLEAR,int
VKEY_RETURN,int
VKEY_PAUSE,int
VKEY_ESCAPE,int
VKEY_SPACE,int
VKEY_EXCLAIM,int
VKEY_QUOTEDBL,int
VKEY_HASH,int
VKEY_DOLLAR,int
VKEY_AMPERSAND,int
VKEY_QUOTE,int
VKEY_LEFTPAREN,int
VKEY_RIGHTPAREN,int
VKEY_ASTERISK,int
VKEY_PLUS,int
VKEY_COMMA,int
VKEY_MINUS,int
VKEY_PERIOD,int
VKEY_SLASH,int
VKEY_0,int
VKEY_1,int
VKEY_2,int
VKEY_3,int
VKEY_4,int
VKEY_5,int
VKEY_6,int
VKEY_7,int
VKEY_8,int
VKEY_9,int
VKEY_COLON,int
VKEY_SEMICOLON,int
VKEY_LESS,int
VKEY_EQUALS,int
VKEY_GREATER,int
VKEY_QUESTION,int
VKEY_AT,int
VKEY_LEFTBRACKET,int
VKEY_BACKSLASH,int
VKEY_RIGHTBRACKET,int
VKEY_CARET,int
VKEY_UNDERSCORE,int
VKEY_BACKQUOTE,int
VKEY_DELETE,int
VKEY_KP_0,int
VKEY_KP_1,int
VKEY_KP_2,int
VKEY_KP_3,int
VKEY_KP_4,int
VKEY_KP_5,int
VKEY_KP_6,int
VKEY_KP_7,int
VKEY_KP_8,int
VKEY_KP_9,int
VKEY_KP_PERIOD,int
VKEY_KP_DIVIDE,int
VKEY_KP_MULTIPLY,int
VKEY_KP_MINUS,int
VKEY_KP_PLUS,int
VKEY_KP_ENTER,int
VKEY_KP_EQUALS,int
VKEY_UP,int
VKEY_DOWN,int
VKEY_RIGHT,int
VKEY_LEFT,int
VKEY_INSERT,int
VKEY_HOME,int
VKEY_END,int
VKEY_PAGEUP,int
VKEY_PAGEDOWN,int
VKEY_F1,int
VKEY_F2,int
VKEY_F3,int
VKEY_F4,int
VKEY_F5,int
VKEY_F6,int
VKEY_F7,int
VKEY_F8,int
VKEY_F9,int
VKEY_F10,int
VKEY_F11,int
VKEY_F12,int
VKEY_F13,int
VKEY_F14,int
VKEY_F15,int
VKEY_NUMLOCK,int
VKEY_CAPSLOCK,int
VKEY_SCROLLOCK,int
VKEY_RSHIFT,int
VKEY_LSHIFT,int
VKEY_RCTRL,int
VKEY_LCTRL,int
VKEY_RALT,int
VKEY_LALT,int
 *  (note) left control key on macOS
VKEY_RMETA,int
VKEY_LMETA,int
 *  (note) left command key on macOS
VKEY_LSUPER,int
VKEY_RSUPER,int
VKEY_MODE,int
VKEY_COMPOSE,int
VKEY_HELP,int
VKEY_PRINT,int
VKEY_SYSREQ,int
VKEY_BREAK,int
VKEY_MENU,int
VKEY_POWER,int
VKEY_EURO,int
VKEY_MOUSEBUTTON0,int
VKEY_MOUSEBUTTON1,int
VKEY_MOUSEBUTTON2,int
VKEY_MOUSEBUTTON3,int
VKEY_MOUSEBUTTON4,int
VKEY_JOY0AXIS0NEG,int
VKEY_JOY0AXIS0POS,int
VKEY_JOY0AXIS1NEG,int
VKEY_JOY0AXIS1POS,int
VKEY_JOY0BUTTON0,int
VKEY_JOY0BUTTON1,int
VKEY_JOY0BUTTON2,int
VKEY_JOY0BUTTON3,int
VKEY_JOY0BUTTON4,int
VKEY_JOY0BUTTON5,int
VKEY_JOY0BUTTON6,int
VKEY_JOY0BUTTON7,int
VKEY_JOY0BUTTON8,int
VKEY_JOY1AXIS0NEG,int
VKEY_JOY1AXIS0POS,int
VKEY_JOY1AXIS1NEG,int
VKEY_JOY1AXIS1POS,int
VKEY_JOY1BUTTON0,int
VKEY_JOY1BUTTON1,int
VKEY_JOY1BUTTON2,int
VKEY_JOY1BUTTON3,int
VKEY_JOY1BUTTON4,int
VKEY_JOY1BUTTON5,int
VKEY_JOY1BUTTON6,int
VKEY_JOY1BUTTON7,int
VKEY_JOY1BUTTON8,int
VKEY_JOY2AXIS0NEG,int
VKEY_JOY2AXIS0POS,int
VKEY_JOY2AXIS1NEG,int
VKEY_JOY2AXIS1POS,int
VKEY_JOY2BUTTON0,int
VKEY_JOY2BUTTON1,int
VKEY_JOY2BUTTON2,int
VKEY_JOY2BUTTON3,int
VKEY_JOY2BUTTON4,int
VKEY_JOY2BUTTON5,int
VKEY_JOY2BUTTON6,int
VKEY_JOY2BUTTON7,int
VKEY_JOY2BUTTON8,int
VKEY_JOY3AXIS0NEG,int
VKEY_JOY3AXIS0POS,int
VKEY_JOY3AXIS1NEG,int
VKEY_JOY3AXIS1POS,int
VKEY_JOY3BUTTON0,int
VKEY_JOY3BUTTON1,int
VKEY_JOY3BUTTON2,int
VKEY_JOY3BUTTON3,int
VKEY_JOY3BUTTON4,int
VKEY_JOY3BUTTON5,int
VKEY_JOY3BUTTON6,int
VKEY_JOY3BUTTON7,int
VKEY_JOY3BUTTON8,int
VMOD_LSHIFT,int
VMOD_RSHIFT,int
VMOD_LCTRL,int
VMOD_RCTRL,int
VMOD_LALT,int
VMOD_RALT,int
VMOD_LMETA,int
 *  == KMOD_LGUI
VMOD_RMETA,int
 *  == KMOD_RGUI
VMOD_NUM,int
VMOD_CAPS,int
VMOD_MODE,int
DCON,int
UC_CTRL_A,int
UC_CTRL_B,int
UC_CTRL_C,int
UC_CTRL_D,int
UC_CTRL_E,int
UC_CTRL_F,int
UC_CTRL_G,int
UC_CTRL_H,int
UC_CTRL_I,int
UC_CTRL_J,int
UC_CTRL_K,int
UC_CTRL_L,int
UC_CTRL_M,int
UC_CTRL_N,int
UC_CTRL_O,int
UC_CTRL_P,int
UC_CTRL_Q,int
UC_CTRL_R,int
UC_CTRL_S,int
UC_CTRL_T,int
UC_CTRL_U,int
UC_CTRL_V,int
UC_CTRL_W,int
UC_CTRL_X,int
UC_CTRL_Y,int
UC_CTRL_Z,int
STDOUT,int
STDERR,int
getCode:int
   Query raw key code
   getMod:int
   Query modifier mask
   getPressed:int
   Query pressed (raw) key code. Returns 0 if this is not a keypress event.
   getReleased:int
   Query release (raw) key code. Return 0 if this is not a keyrelease event.
   getAlpha:int
   Return (untranslated) ASCII code or 0 if this is a special key event.
   getUnicode:int
   Return (translated) unicode char.

   @see SDL.enableUNICODE
   getCodeName:String
   Return raw keycode name
   getModName:String
   Return modifier mask name
   getName:String
   Return full keyevent name

   E.g. "lctrl-c"
   getNameFor,int key,int mod:String
   Return full name for given key code and modifier mask.
   setCode,int code
   Set raw keycode.

   Does not modify press/release mask.
   setMod,int mod
   Set modifier mask
   setPressed,int code
   Set raw keycode and set pressed flag.
   setReleased,int code
   Set raw keycode and set released flag.
   setUnicode,int c
   Set unicode char

   The character will *not* be translated back to its original raw key code!
   setAlpha,int c
   Set (untranslated) ASCII key code
   setCodeName,String s
   Set key code by name
   setModName,String s
   Set modifier mask by name
   setName,String s
   Set key code and modifier mask by name
   modNone:boolean
   Query whether no key modifiers are used
   modAlt:boolean
   Query whether left or right alt key modifiers are used
   modAltOnly:boolean
   Query whether only the left or right alt key modifiers are used
   modCmd:boolean
   Query whether left or right (macOS) command key modifiers are used
   (== Alt key on PC keyboards)
   modCmdOnly:boolean
   Query whether only the left or right alt key modifiers are used
   (== Alt key on PC keyboards)
   modShift:boolean
   Query whether left or right shift key modifiers are used
   modShiftOnly:boolean
   Query whether only the left or right shift key modifiers are used
   modCtrl:boolean
   Query whether left or right control key modifiers are used
   modCtrlOnly:boolean
   Query whether only the left or right control key modifiers are used
   modCaps:boolean
   Query whether capslock modifier is used
   modShiftOrCaps:boolean
   Query whether left or right shift key modifiers or capslock is used
   SetLocalToRawKeyTableByName,String name:boolean
      Install localized keycode to raw scancode translation table.
      (note) added for macOS where the SDL Key.code depends on the current input source setting
      @arg name Local name (domain suffix). "de", "us", "fr", ..
      @return true if table has been installed succesfully
   Mouse,Object
Static wrapper class for the Mouse device
grab
   Grab mouse
   ungrab
   Ungrab mouse
   toggleGrab
   Toggle mouse grab
   getX:int
   Get absolute horizontal mouse position
   getY:int
   Get absolute vertical mouse position
   getButtons:int
   Get current button mask
   isGrabbed:boolean
   Query whether the mouse is currently grabbed
   getDx:int
   Get relative horizontal mouse position
   getDy
   Get relative vertical mouse position
   unproject,Object nearRet,Object farRet
   Unproject mouse position and return near/far vectors

   @arg nearRet Receives the near vector. Must be able to hold at least 3 array elements.
   @arg farRet Receives the far vector. Must be able to hold at least 3 array elements.
   getChangedButtons
   Query changed button mask
   showPointer,boolean bVisible
   Show/hide the mouse pointer
   setPointerMode,int mode
   Set autohide pointer mode.

   @arg mode One of §MOUSE_POINTER_ENTER, §MOUSE_POINTER_MOVE or §MOUSE_POINTER_MANUAL
   getPointerMode:int
   Query current mouse pointer autohide mode.
   warpTo,int x,int y
   Move mouse cursor to specified window coordinates
      @arg x
      @arg y
    SamplePlayer,Object
A very basic sample player class.

It's probably only good enough for simple game sound effects. Never used it for anything else, anyway ;)

Maximum polyphony is 16 voices.
setPolyphony,int numVoices
    Set polyphony

    @arg numVoices 1..16
    getPolyphony:int
    Query polyphony
    setVolume,float v
    Set global volume

    @arg v 0..1
    getVolume:float
    Query global volume
    noteOn,int note,float v
    Trigger note using the currently active sample
    noteOff,int note
    Stop sample that is has been playing the given note for the longest time
    getSample:AudioSample
    Query currently active sample
    setSample,AudioSample sample
    Set active sample
    processSamples,FloatArray fa
    Render/mix samples to the given output stream
    setPan,float v
    Set panning offset for next noteOn

    TODO: why is this not a parameter to the §noteOn method
    getPan:float
    Query panning offset for next noteOn calls
    Viewport,Object
Static wrapper class for a couple of viewport related functions

@see SDL 
openWindow,int w, int h:boolean
    Open desktop window.

    This is a wrapper for the SDL_InitSubSystem(), SDL_GetVideoInfo(), SDL_GL_SetAttribute() and SDL_SetVideoMode() native functions.

    @arg w Window width
    @arg h Window height
    @return true if the window has been opened, false if something went terribly wrong.

    @see openScreen
    @see close
    openScreen,int w,int h,int z:boolean
    Open fullscreen window

    This is a wrapper for the SDL_InitSubSystem(), SDL_GetVideoInfo(), SDL_GL_SetAttribute() and SDL_SetVideoMode() native functions.

    @arg w Screen width
    @arg h Screen height
    @arg z 16,24,32 bits
    @return true if the screen has been opened, false if something went terribly wrong.

    @see openWindow
    @see close
    toggleFullScreen
    Toggle fullscreen mode

    @see setScreenResolution

    isFullScreen

    @see toggleFullScreen

    close
    Close desktop or fullscreen window
    beginPaint
    Begin painting

    Set viewport cliprect.
    Reset texture and modelview matrices to identity.
    endPaint
    Flush GL commandlist and swap buffers
    getWidth:int
    Query window/screen width
    getHeight:int
    Query window/screen height
    getDepth:int
    Query color depth

    @return Number of pixels (15,16,24,32)
    setCaption:String
    Set window title
    waitVBlank
    Wait for vertical retrace interrupt

    @deprecated Not the optimal way to achieve absolutely smooth scrolling with OpenGL. Use §swapInterval() instead.

    @see swapInterval
    getFrequency:int
    Query monitor frequency
    setFlags,int flags
    Set flags for openWindow() resp. openScreen() call

    This method should only be called prior to opening a window or screen.

    @arg flags A bitmask of §SDL_RESIZABLE and §SDL_NOFRAME.
    getFlags:int
    Query openWindow() resp. openScreen() flags
    resizeWindow,int w,int h:boolean
    Resize desktop window
    needRedraw
    If the repaint strategy is §REDRAW_DIRTY, this will cause a display redraw.
    setScreenResolution,int w,int h,int z
    Set fullscreen resolution and depth for next toggleFullScreen() call
    getDoubleBuffer:boolean
    Query whether a double buffered OpenGL surface shall be allocated
    setDoubleBuffer,boolean bEnabled
    Hint that a double buffered OpenGL surface shall be allocated

    This method should only be called prior to opening a window or screen.
    swapInterval,int interval
    A wrapper for the wglSwapIntervalEXT() resp. glXSwapIntervalSGI() native functions

    This function can effectively be used to disable or enable vertical blank synchronisation and it is, to my knowledge,
    the best way to achieve absolutely smooth vsync'd OpenGL graphics.

    In practice, the ATI/NVidia GL drivers act a bit different than how this GL extension was originally specified (different in a good sense).

    @arg interval 0=disable vsync, 1=enable vsync, 2..n only swap buffers every 2..nth frame.
    getMultisampleBuffers:int
    Query number of GL multisample buffers
    setMultisampleBuffers,int num
    Set number of GL multisample buffers.

    This method should only be called prior to opening a window or screen.
    getMultisampleSamples:int
    Query number of GL multisample samples
    setMultisampleSamples,int num
    Set number of GL multisample samples

    This method should only be called prior to opening a window or screen.
    setStencilBits,int num
    Set number of stencil buffer bits

    This method should only be called prior to opening a window or screen.
    interruptScreenSaver
    Try to interrupt the screensaver, usually by sending a synthetic event to the root/desktop window.
    setEnableRendering,boolean bEnabled
       Mainly for debugging purposes / CPU load measurement
    getDesktopWidth:int
       Query desktop width
    getDesktopHeight:int
       Query desktop height
    setEnableGLError,boolean bEnabled
       Enable/disable GL error reporting (default=false).

       Please notice that with some GL drivers (noticably the latest Win32 GF 9800 GT driver on Vista/32bit), a simple call to glGetError()
       will take 16ms at a ~60 FPS refresh rate after ~60 frames / glFlush() / SwapBuffers() calls have been made.

       This didn't happen with older driver releases although there are internet discussions about this going back to 2006. FIX IT, NVIDIA!!

       GL error reporting can also be enabled using the TKSDL_GLERROR environment variable (0=disable, 1=enable).

       @arg bEnabled true=enable glGetError() calls after each GL call outside of glBegin..glEnd. false=never call glGetError.
    getEnableGLError:boolean
       Query whether GL error reporting (see §setEnableGLError) is currently enabled.
       
       @return Status of GL error tracer
    getDpi:int
       Query dots-per-inch resolution for current window/screen.
       Fallback to 96 if API is not supported (requires Windows 10+)
       
       @return dpi
    setGeometry,int x,int y,int w,int h
       Move (desktop) window to another screen position and (optionally) resize it.

       This is a platform specific call that is currently only implemented in the Windows port of tksdl.

       @arg x Screen position X
       @arg y Screen position Y
       @arg w Width or 0 (== keep size) (must include border/title bar size)
       @arg h Height or 0 (== keep size)
    getPositionX:int
       Query (desktop) window position x

       This is a platform specific call that is currently only implemented in the Windows port of tksdl.
    getPositionY:int
       Query (desktop) window position y

       This is a platform specific call that is currently only implemented in the Windows port of tksdl.
    getSizeX:int
       Query (desktop) window width (including borders / title bar)

       This is a platform specific call that is currently only implemented in the Windows port of tksdl.
    getSizeY:int
       Query (desktop) window height (including borders / title bar)

       This is a platform specific call that is currently only implemented in the Windows port of tksdl.
    setMinimumSize,int w,int h
       Set minimum view size.

       @arg w Width
       @arg h Height
    