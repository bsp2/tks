ShaderVG
ShaderVG
ShaderVG_Constants
 SDVG_TEXFMT_ALPHA8
8bit alpha texture format
 SDVG_TEXFMT_RGB565
16bit RGB565 texture format
 SDVG_TEXFMT_BGRA8888
32bit B,G,R,A texture format (packed ARGB32 on little endian)
 SDVG_TEXFMT_ARGB32
alias for Â§SDVG_TEXFMT_BGRA8888 (little endian)
 SDVG_TEXFMT_RGBA8888
32bit R,G,B,A texture format (packed ABGR32 on little endian)
 sdvg_SetGLSLVersion,boolean bV3,boolean bGLES,String sVersionStringOrNull
Set GLSL version.

@arg bV3 true=Desktop GL 3.x / 4.x or GLES3.x
@arg bGLES true=OpenGL ES  false=Desktop GL
@arg sVersionStringOrNull Custom version string override or null (== auto-select)
sdvg_SetScratchBufferSize,int szBytes
Set vertex attrib ring buffer size
sdvg_Init,boolean bGLCore:boolean
Initialize ShaderVG library

@arg bGLCore true=use Desktop GL 4.x core profile   false=use compatibility profile
sdvg_Exit
Shutdown ShaderVG library
sdvg_OnOpen:boolean
Must be called after GL context has been lost, e.g. after the desktop window has been resized or opened.
sdvg_SetFramebufferSize,int w,int h
Set framebuffer size
sdvg_BeginFrame
Must be called at the beginning of a new frame

@see sdvg_EndFrame
sdvg_ReturnToGL
Should be called before issueing OpenGL calls (unmaps / unbinds current VBO, unbind shader)
sdvg_EndFrame
Should be called at the end of a frame (unmap / unbind current VBO, unbind shader, disable blending and scissor test)
sdvg_SetViewport,int x,int y,int w,int h
Set viewport.

@arg x Left viewport coordinate
@arg y Top viewport coordinate
@arg w Viewport width
@arg h Viewport height

@see sdvg_PushViewport
@see sdvg_PopViewport
sdvg_PushViewport,int x,int y,int w,int h
Push current viewport onto viewport stack and set new viewport.

@see sdvg_SetViewport
@see sdvg_PopViewport
sdvg_PopViewport
Pop viewport from viewport stack.

@see sdvg_SetViewport
@see sdvg_PushViewport
@see sdvg_PopViewport
sdvg_GetViewportWidth:int
Query current viewport width
sdvg_GetViewportHeight:int
Query current viewport height
sdvg_SetScissor,int x,int y,int w,int h
Set current scissor clipping rectangle

@arg x Left scissor position
@arg y Top scissor position
@arg w Scissor width
@arg h Scissor height

@see sdvg_PushScissor
@see sdvg_PopScissor
@see sdvg_EnableScissor
@see sdvg_DisableScissor
sdvg_PushScissor,int x,int y,int w,int h
Push current scissor clipping rectangle onto scissor stack and set new scissor rectangle.

@arg x Left scissor position
@arg y Top scissor position
@arg w Scissor width
@arg h Scissor height

@see sdvg_SetScissor
@see sdvg_PopScissor
@see sdvg_EnableScissor
@see sdvg_DisableScissor
sdvg_PopScissor
Pop scissor rectangle from scissor stack

@see sdvg_SetScissor
@see sdvg_PushScissor
@see sdvg_EnableScissor
@see sdvg_DisableScissor
sdvg_EnableScissor
Enable scissor test (clipping rectangle)

@see sdvg_SetScissor
@see sdvg_PushScissor
@see sdvg_PopScissor
@see sdvg_DisableScissor
sdvg_DisableScissor
Disable scissor test (clipping rectangle)

@see sdvg_SetScissor
@see sdvg_PushScissor
@see sdvg_PopScissor
@see sdvg_EnableScissor
sdvg_Flush
Flush pending GL state changes and draw calls to GPU
sdvg_SetTransform,Matrix4f mat4
Set modelview-projection transformation matrix 

@see sdvg_GetTransformRef
sdvg_GetTransformRef:Matrix4f
Get reference to modelview-projection matrix

@see sdvg_SetTransform
sdvg_SetEnableAA,boolean bEnable
Enable or disable (analytical) anti-aliasing
sdvg_SetAARange,float aaRange
Change (analytical) anti-aliasing range.

It is not recommended to change the default setting.
sdvg_SetAAExp,float aaExp
Set (analytical) anti-aliasing exponent.

Deprecated, will be removed in future versions.
sdvg_SetFillColor4f,float fillR,float fillG,float fillB,float A
Set fill color (normalized floats)
@arg fillR Red (0..1)
@arg fillG Green (0..1)
@arg fillB Blue (0..1)
@arg fillA Alpha (0..1)

@see sdvg_SetFillAlpha
@see sdvg_SetFillColorARGB
@see sdvg_SetStrokeColor4f
@see sdvg_SetStrokeColorARGB
@see sdvg_SetColorARGB
sdvg_SetFillAlpha,float fillA
Set fill alpha (normalized float)
@arg fillA Alpha (0..1)

@see sdvg_SetFillColor4f
@see sdvg_SetFillColorARGB
@see sdvg_SetStrokeColor4f
@see sdvg_SetStrokeColorARGB
@see sdvg_SetColorARGB
sdvg_SetFillColorARGB,int c32
Set fill color

@arg c32 packed ARGB32 color

@see sdvg_SetFillColor4f
@see sdvg_SetFillAlpha
@see sdvg_SetStrokeColor4f
@see sdvg_SetStrokeColorARGB
@see sdvg_SetColorARGB
sdvg_SetColorARGB,int c32
Set fill and stroke colors

@arg c32 packed ARGB32 color

@see sdvg_SetFillColor4f
@see sdvg_SetFillAlpha
@see sdvg_SetFillColorARGB
@see sdvg_SetStrokeColor4f
@see sdvg_SetStrokeColorARGB
sdvg_SetStrokeWidth,float strokeW
Set line stroke width.

@arg strokeW Stroke width

The total line width is (2 * strokeW)
sdvg_SetPointRadius,float radius
Set point radius

@see sdvg_DrawPointsSquareVBO32
@see sdvg_DrawPointsSquareAAVBO32
@see sdvg_DrawPointsRoundVBO32
@see sdvg_DrawPointsRoundAAVBO32
sdvg_SetPixelScaling,float s
Set pixel scaling for analytical anti-aliasing draw calls.

This is only required in rare corner cases, i.e. when using non-pixel-based coordinate systems.
sdvg_SetStrokeColor4f,float strokeR,float strokeG,float strokeB, float strokeA
Set stroke color (normalized floats)

@arg strokeR Red (0..1)
@arg strokeG Green(0..1)
@arg strokeB Blue (0..1)
@arg strokeA Alpha (0..1)

@see sdvg_SetStrokeColorARGB
sdvg_SetStrokeColorARGB,int c32
Set stroke color

@arg c32 Packed ARGB32 color

@see sdvg_SetStrokeColor4f
sdvg_SetGlobalAlpha,float a
Set global alpha. Applied to all draw calls.
sdvg_SetTextureDecalAlpha,float decalAlpha
Set texture opacity in Decal draw calls

@arg decalAlpha normalized opacity (0..1)

@see sdvg_DrawTrianglesTexUVFlatDecalVBO32
@see sdvg_DrawTrianglesTexUVGouraudDecalVBO32
sdvg_Clear4f,float r,float g,float b,float a
Clear screen (scissor clipping rectangle)

@arg r Normalized red value
@arg g Normalized green value
@arg b Normalized blue value
@arg a Normalized alpha value
sdvg_ClearARGB,int c32
Clear screen (scissor clipping rectangle)

@arg c32 Packed ARGB32 color
sdvg_EnableBlending
Enable source-over blending

@see sdvg_EnableBlendingKeepAlpha
@see sdvg_EnableBlendingAdditive
@see sdvg_EnableBlendingAdditiveKeepAlpha
@see sdvg_EnableBlendingSrcColorKeepAlpha
@see sdvg_EnableBlendingDstColorKeepAlpha
@see sdvg_DisableBlending
sdvg_EnableBlendingKeepAlpha
Enable source-over blending (do not modify destination alpha)

@see sdvg_EnableBlending
@see sdvg_EnableBlendingAdditive
@see sdvg_EnableBlendingAdditiveKeepAlpha
@see sdvg_EnableBlendingSrcColorKeepAlpha
@see sdvg_EnableBlendingDstColorKeepAlpha
@see sdvg_DisableBlending
sdvg_EnableBlendingAdditive
Enable additive blending

@see sdvg_EnableBlending
@see sdvg_EnableBlendingKeepAlpha
@see sdvg_EnableBlendingAdditiveKeepAlpha
@see sdvg_EnableBlendingSrcColorKeepAlpha
@see sdvg_EnableBlendingDstColorKeepAlpha
@see sdvg_DisableBlending
sdvg_EnableBlendingAdditiveKeepAlpha
Enable additive blending (do not modify destination alpha)

@see sdvg_EnableBlending
@see sdvg_EnableBlendingKeepAlpha
@see sdvg_EnableBlendingAdditive
@see sdvg_EnableBlendingSrcColorKeepAlpha
@see sdvg_EnableBlendingDstColorKeepAlpha
@see sdvg_DisableBlending
sdvg_EnableBlendingSrcColorKeepAlpha

@see sdvg_EnableBlending
@see sdvg_EnableBlendingKeepAlpha
@see sdvg_EnableBlendingAdditive
@see sdvg_EnableBlendingAdditiveKeepAlpha
@see sdvg_EnableBlendingDstColorKeepAlpha
@see sdvg_DisableBlending
sdvg_EnableBlendingDstColorKeepAlpha

@see sdvg_EnableBlending
@see sdvg_EnableBlendingKeepAlpha
@see sdvg_EnableBlendingAdditive
@see sdvg_EnableBlendingAdditiveKeepAlpha
@see sdvg_EnableBlendingSrcColorKeepAlpha
@see sdvg_DisableBlending
sdvg_DisableBlending
Disable blending

@see sdvg_EnableBlending
@see sdvg_EnableBlendingKeepAlpha
@see sdvg_EnableBlendingAdditive
@see sdvg_EnableBlendingAdditiveKeepAlpha
@see sdvg_EnableBlendingSrcColorKeepAlpha
@see sdvg_EnableBlendingDstColorKeepAlpha
sdvg_AlphaWrite,boolean bEnable
Enable or disable alpha channel writes

@arg bEnable Alpha channel write state
sdvg_GetEnableDebug:boolean
Query debug mode-enable

@see sdvg_SetEnableDebug
sdvg_SetEnableDebug,boolean bEnable
Enable or disable debug mode

@see sdvg_GetEnableDebug
sdvg_GetEnableDrawInner:boolean
Query draw-inner mode

@see sdvg_SetEnableDrawInner
sdvg_SetEnableDrawInner,boolean bEnable
Enable or disable(debug) draw-inner mode

@see sdvg_GetEnableDrawInner
sdvg_GetEnableDrawBorder:boolean
Query draw-border mode

@see sdvg_SetEnableDrawBorder
sdvg_SetEnableDrawBorder,boolean bEnable
Enable or disable(debug) draw-border mode

@see sdvg_GetEnableDrawBorder
sdvg_DebugSetEnableWriteVBO,boolean bEnable
Enable or disable VBO writes (false=debug)

sdvg_CreateVBO,int numBytes:int
Create vertex buffer object (VBO)

@arg numBytes Vertex buffer object size (bytes)
@return return OpenGL VBO id (0 == failed)

@see sdvg_BindVBO
@see sdvg_UpdateVBO
@see sdvg_MapVBO
@see sdvg_GetVBOSize
@see sdvg_GetMappedVBOOffset
@see sdvg_MapVBO
@see sdvg_UnmapVBO
@see sdvg_UnbindVBO
@see sdvg_DestroyVBO
sdvg_UpdateVBO,int vboId,int offset,int numBytes,Object data
Update vertex buffer object contents

@see sdvg_CreateVBO
@see sdvg_BindVBO
@see sdvg_MapVBO
@see sdvg_GetVBOSize
@see sdvg_GetMappedVBOOffset
@see sdvg_MapVBO
@see sdvg_UnmapVBO
@see sdvg_UnbindVBO
@see sdvg_DestroyVBO
sdvg_BindVBO,int vboId
Bind vertex buffer object

@see sdvg_CreateVBO
@see sdvg_UpdateVBO
@see sdvg_MapVBO
@see sdvg_GetVBOSize
@see sdvg_GetMappedVBOOffset
@see sdvg_MapVBO
@see sdvg_UnmapVBO
@see sdvg_UnbindVBO
@see sdvg_DestroyVBO
sdvg_GetVBOSize:int
Query vertex buffer object size

@see sdvg_CreateVBO
@see sdvg_BindVBO
@see sdvg_UpdateVBO
@see sdvg_MapVBO
@see sdvg_GetMappedVBOOffset
@see sdvg_MapVBO
@see sdvg_UnmapVBO
@see sdvg_UnbindVBO
@see sdvg_DestroyVBO
sdvg_GetMappedVBOOffset:int
Query write offset of currently mapped vertex buffer object

@see sdvg_CreateVBO
@see sdvg_BindVBO
@see sdvg_UpdateVBO
@see sdvg_MapVBO
@see sdvg_GetVBOSize
@see sdvg_MapVBO
@see sdvg_UnmapVBO
@see sdvg_UnbindVBO
@see sdvg_DestroyVBO
sdvg_MapVBO,int vboId
Map vertex buffer object VRAM into virtual address space.

Â§sdvg_BeginVBO can be used to start writing vertex attribute data to the mapped VBO.

@see sdvg_CreateVBO
@see sdvg_BindVBO
@see sdvg_UpdateVBO
@see sdvg_GetVBOSize
@see sdvg_GetMappedVBOOffset
@see sdvg_UnmapVBO
@see sdvg_UnbindVBO
@see sdvg_DestroyVBO
@see sdvg_BeginVBO
sdvg_UnmapVBO
Unmap vertex buffer object

@see sdvg_CreateVBO
@see sdvg_BindVBO
@see sdvg_UpdateVBO
@see sdvg_MapVBO
@see sdvg_GetVBOSize
@see sdvg_GetMappedVBOOffset
@see sdvg_MapVBO
@see sdvg_UnbindVBO
@see sdvg_DestroyVBO
sdvg_UnbindVBO
Unbind current vertex buffer object

@see sdvg_CreateVBO
@see sdvg_BindVBO
@see sdvg_UpdateVBO
@see sdvg_MapVBO
@see sdvg_GetVBOSize
@see sdvg_GetMappedVBOOffset
@see sdvg_MapVBO
@see sdvg_UnmapVBO
@see sdvg_DestroyVBO
sdvg_DestroyVBO,int vboId
Destroy vertex buffer object

@see sdvg_CreateVBO
@see sdvg_BindVBO
@see sdvg_UpdateVBO
@see sdvg_MapVBO
@see sdvg_GetVBOSize
@see sdvg_GetMappedVBOOffset
@see sdvg_MapVBO
@see sdvg_UnmapVBO
@see sdvg_UnbindVBO
@see sdvg_DestroyVBO
sdvg_CreateFBOEx,int w,int h,int bMSAA,int bDepth,int bStencil:int
Create framebuffer object

@arg w Width
@arg h Height
@arg bMSAA Enable multi-sample anti-aliasing (MSAA)
@arg bDepth Allocate depth buffer
@arg bStencil Allocate stencil buffer (non-standard extension in Desktop GL <4.5)

@return ShaderVG FBO index (0 == failed)

@see sdvg_CreateFBO
@see sdvg_BindFBO
@see sdvg_ResolveFBO
@see sdvg_UnbindFBO
@see sdvg_GetFBOTextureId
@see sdvg_BindFBOTexture
@see sdvg_DestroyFBO
sdvg_CreateFBO,int w,int h:int
Create framebuffer object

@arg w Width
@arg h Height

@return ShaderVG FBO index (0 == failed)

@see sdvg_CreateFBOEx
@see sdvg_BindFBO
@see sdvg_ResolveFBO
@see sdvg_UnbindFBO
@see sdvg_GetFBOTextureId
@see sdvg_BindFBOTexture
@see sdvg_DestroyFBO
sdvg_BindFBO,int fboIdx
Bind framebuffer object

@see sdvg_CreateFBOEx
@see sdvg_CreateFBO
@see sdvg_ResolveFBO
@see sdvg_UnbindFBO
@see sdvg_GetFBOTextureId
@see sdvg_BindFBOTexture
@see sdvg_DestroyFBO
sdvg_ResolveFBO,int fboIdx
Resolve MSAA framebuffer object

Must be called before FBO can be used as a texture map

@see sdvg_CreateFBOEx
@see sdvg_CreateFBO
@see sdvg_BindFBO
@see sdvg_UnbindFBO
@see sdvg_GetFBOTextureId
@see sdvg_BindFBOTexture
@see sdvg_DestroyFBO
sdvg_UnbindFBO
Unbind framebuffer object

@see sdvg_CreateFBOEx
@see sdvg_CreateFBO
@see sdvg_BindFBO
@see sdvg_ResolveFBO
@see sdvg_GetFBOTextureId
@see sdvg_BindFBOTexture
@see sdvg_DestroyFBO
sdvg_GetFBOTextureId,int fboIdx:int
Query framebuffer object OpenGL texture id

@arg fboIdx ShaderVG fbo index
@return GL texture id

@see sdvg_CreateFBOEx
@see sdvg_CreateFBO
@see sdvg_BindFBO
@see sdvg_ResolveFBO
@see sdvg_UnbindFBO
@see sdvg_BindFBOTexture
@see sdvg_DestroyFBO
sdvg_BindFBOTexture,int fboIdx,boolean bRepeat,boolean bFilter
Bind framebuffer object as texture

@see sdvg_CreateFBOEx
@see sdvg_CreateFBO
@see sdvg_BindFBO
@see sdvg_ResolveFBO
@see sdvg_UnbindFBO
@see sdvg_GetFBOTextureId
@see sdvg_DestroyFBO
sdvg_DestroyFBO,int fboIdx
Destroy framebuffer object

@see sdvg_CreateFBOEx
@see sdvg_CreateFBO
@see sdvg_BindFBO
@see sdvg_ResolveFBO
@see sdvg_UnbindFBO
@see sdvg_GetFBOTextureId
@see sdvg_BindFBOTexture
sdvg_CreateTexture2D,int texFmt,int w,int h,Object data:int
Create and allocate 2D texture
@arg texFmt  Â§SDVG_TEXFMT_ALPHA8, Â§SDVG_TEXFMT_RGB565, Â§SDVG_TEXFMT_BGRA8888, Â§SDVG_TEXFMT_ARGB32, Â§SDVG_TEXFMT_RGBA8888, Â§
@arg w Width
@arg h Height
@arg data Initial pixel data or null (only reserve memory)
@return OpenGL texture id

@see sdvg_BindMultiTexture2D
@see sdvg_UnbindMultiTexture2D
@see sdvg_BindTexture2D
@see sdvg_UnbindTexture2D
@see sdvg_DestroyTexture2D
sdvg_BindMultiTexture2D,int unitIdx,int texId,boolean bRepeat,boolean bFilter
Bind texture to given texture unit

@see sdvg_CreateTexture2D
@see sdvg_UnbindMultiTexture2D
@see sdvg_BindTexture2D
@see sdvg_UnbindTexture2D
@see sdvg_DestroyTexture2D
sdvg_UnbindMultiTexture2D,int unitIdx
Unbind texture from given texture unit

@see sdvg_CreateTexture2D
@see sdvg_BindMultiTexture2D
@see sdvg_BindTexture2D
@see sdvg_UnbindTexture2D
@see sdvg_DestroyTexture2D
sdvg_BindTexture2D,int texId,boolean bRepeat,boolean bFilter
Bind texture to default texture unit

@see sdvg_CreateTexture2D
@see sdvg_BindMultiTexture2D
@see sdvg_UnbindMultiTexture2D
@see sdvg_UnbindTexture2D
@see sdvg_DestroyTexture2D
sdvg_UnbindTexture2D
Unbind texture from default texture unit

@see sdvg_CreateTexture2D
@see sdvg_BindMultiTexture2D
@see sdvg_UnbindMultiTexture2D
@see sdvg_BindTexture2D
@see sdvg_DestroyTexture2D
sdvg_DestroyTexture2D,int texId
Destroy texture

@see sdvg_CreateTexture2D
@see sdvg_BindMultiTexture2D
@see sdvg_UnbindMultiTexture2D
@see sdvg_BindTexture2D
@see sdvg_UnbindTexture2D
sdvg_BufferAddRectTexUVFlat32,Buffer b,float x,float y,float w,float h,float ul,float vt,float ur,float vb
Append textured rectangle vertex attributes to buffer
sdvg_WriteC32AsRGBA8,Buffer b,int c32
Append r,g,b,a bytes to buffer

@arg c32 Packed ARGB32 color
sdvg_BufferAddRectTexUVGouraud32,Buffer b,float x,float y,float w,float h,float ul,float vt,float ur,float vb,int c32LT,int c32RT,int c32
Append textured, gouraud shaded rectangle vertex attributes to buffer

@arg x Rectangle X position
@arg y Rectangle Y position
@arg w Rectangle width
@arg h Rectangle height
@arg ul Left texture coordinate (0..1)
@arg vt Top texture coordinate (0..1)
@arg ur Right texture coordinate (0..1)
@arg vb Bottom texture coordinate (0..1)
@arg c32LT Left/Top packed ARGB32 color
@arg c32RT Right/Top packed ARGB32 color
@arg c32LB Left/Bottom packed ARGB32 color
@arg c32RB Right/Bottom packed ARGB32 color
sdvg_BufferAddLinePointFlat14_2,Buffer b,float x,float y
Append line / point vertex coordinate to buffer in 14.2 fixed point format
sdvg_BufferAddLinePointFlat32,Buffer b,float x,float y
Append line / point vertex coordinate to buffer in 32bit float format
sdvg_BufferAddLinePointFlatBevel14_2,Buffer b,float x,float y
Append bevel line-joint vertex coordinate to buffer in 14.2 fixed point format
sdvg_BufferAddLinePointFlatBevel32,Buffer b,float x,float y
Append bevel line-joint vertex coordinate to buffer in 32bit float format
sdvg_BufferAddLinesPointsFlat14_2,Buffer b,float x1,float y1,float x2,float y2
Append line segment vertex coordinates to buffer in 14.2 fixed point format

@arg x1 Line start point X
@arg y1 Line start point Y
@arg x2 Line end point X
@arg y2 Line end point Y
sdvg_BufferAddLinesPointsFlat32,Buffer b,float x1,float y1,float x2,float y2
Append line segment vertex coordinates to buffer in 32bit float fixed point

@arg x1 Line start point X
@arg y1 Line start point Y
@arg x2 Line end point X
@arg y2 Line end point Y
sdvg_DrawTrianglesFillFlatVBO32,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as filled triangles (32bit float format)

<pre>
VBO vertex format (8 bytes per vertex):<br>
  +0 f32 x<br>
  +4 f32 y<br>
</pre>
sdvg_DrawTrianglesFillFlatVBO14_2,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as filled triangles (14.2 fixed point format)

<pre>
VBO vertex format (4 bytes per vertex):<br>
  s14.2 x<br>
  s14.2 y<br>
</pre>
sdvg_DrawTrianglesFillGouraudVBO32,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as filled, gouraud shaded triangles (32bit float format)

<pre>
VBO vertex format (12 bytes per vertex):<br>
  f32 x<br>
  f32 y<br>
  u8  r<br>
  u8  g<br>
  u8  b<br>
  u8  a<br>
</pre>
sdvg_DrawTrianglesFillGouraudVBO14_2,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as filled, gouraud shaded triangles (14.2 fixed point format)

<pre>
VBO vertex format (8 bytes per vertex):<br>
  +0 s14.2 x<br>
  +2 s14.2 y<br>
  +4 u8    r<br>
  +5 u8    g<br>
  +6 u8    b<br>
  +7 u8    a<br>
</pre>
sdvg_DrawTrianglesFillFlatEdgeAAVBO32,int vboId,int byteOffset,int numVerts
experimental
sdvg_DrawTrianglesFillFlatEdgeAAVBO14_2,int vboId,int byteOffset,int numVerts
experimental
sdvg_DrawTrianglesFillGouraudEdgeAAVBO32,int vboId,int byteOffset,int numVerts
experimental
sdvg_DrawTrianglesFillGouraudEdgeAAVBO14_2,int vboId,int byteOffset,int numVerts
experimental
sdvg_DrawPolygonFillFlatVBO32,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as filled n-polygon (32bit float format)

<pre>
VBO vertex format (8 bytes per vertex):<br>
  +0 f32 x<br>
  +4 f32 y<br>
</pre>
sdvg_DrawPolygonFillFlatVBO14_2,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as filled n-polygon (14.2 fixed point format)

<pre>
VBO vertex format (4 bytes per vertex):<br>
  s14.2 x<br>
  s14.2 y<br>
</pre>
sdvg_DrawPolygonFillGouraudVBO32,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as filled n-polygon (32bit float format).

<pre>
VBO vertex format (12 bytes per vertex):<br>
  f32 x<br>
  f32 y<br>
  u8  r<br>
  u8  g<br>
  u8  b<br>
  u8  a<br>
</pre>
sdvg_DrawPolygonFillGouraudVBO14_2,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as filled n-polygon (14.2 fixed point format).

<pre>
VBO vertex format (8 bytes per vertex):<br>
  s14.2 x<br>
  s14.2 y<br>
  u8    r<br>
  u8    g<br>
  u8    b<br>
  u8    a<br>
</pre>
sdvg_SetupRectFillAAVBO32,Buffer vb,Buffer dl,float centerX,float centerY,float sizeX,float sizeY
Set up vertex buffer and draw list for filled, anti-aliased rectangle (32bit float format)
sdvg_DrawRectFillAAVBO32,int vboId,int byteOffsetInner,int numVertsInner,int byteOffsetBorder,int numVertsBorder,int glPrimTypeBorder,float centerX,float centerY,float sizeX,float sizeY
Draw previously prepared vertex buffer as filled, anti-aliased rectangle (32bit float format)
sdvg_DrawRectFillAA,float centerX,float centerY,float sizeX,float sizeY
Draw filled, anti-aliased rectangle via scratch buffer (32 bit float format)
sdvg_SetupRectFillStrokeAAVBO32,Buffer vb,Buffer dl,float centerX,float centerY,float sizeX,float sizeY,float strokeW
Set up vertex buffer and draw list for filled, stroked, and anti-aliased rectangle (32bit float format)
sdvg_DrawRectFillStrokeAAVBO32,int vboId,int byteOffsetInner,int numVertsInner,int byteOffsetBorder,int numVerts
Draw previously prepared vertex buffer as filled, stroked, and anti-aliased rectangle (32bit float format)
sdvg_DrawRectFillStrokeAA,float centerX,float centerY,float sizeX,float sizeY
Draw filled, stroked, and anti-aliased rectangle via scratch buffer (32 bit float format)
sdvg_SetupRectStrokeAAVBO32,Buffer vb,Buffer dl,float centerX,float centerY,float sizeX,float sizeY,float strokeW
Set up vertex buffer and draw list for stroked, anti-aliased rectangle (32bit float format)
sdvg_DrawRectStrokeAAVBO32,int vboId,int byteOffsetBorder,int numVertesBorder,int glPrimTypeBorder,float centerX,float centerY,float sizeX,float sizeY
Draw previously prepared vertex buffer as stroked, anti-aliased rectangle (32bit float format)
sdvg_DrawRectStrokeAA,float centerX,float centerY,float sizeX,float sizeY
Draw stroked, anti-aliased rectangle via scratch buffer (32 bit float format)
sdvg_SetupEllipseFillAAVBO32,Buffer vb,Buffer dl,float centerX,float centerY,float radiusX,float radiusY
Set up vertex buffer and draw list for filled, anti-aliased ellipse (32bit float format)
sdvg_DrawEllipseFillAAVBO32,int vboId,int byteOffsetInner,int numVertsInner,int byteOffsetBorder,int numVertsBorder,int glPrimTypeBorder,float centerX,float centerY,float radiusX,float radiusY
Draw previously prepared vertex buffer as filled, anti-aliased ellipse (32bit float format)
sdvg_DrawEllipseFillAA,float centerX,float centerY,float sizeX,float sizeY
Draw filled, anti-aliased ellipse via scratch buffer (32 bit float format)
sdvg_SetupEllipseFillStrokeAAVBO32,Buffer vb,Buffer dl,float centerX,float centerY,float radiusX,float radiusY,float strokeW
Set up vertex buffer and draw list for filled, stroked, and anti-aliased ellipse (32bit float format)
sdvg_DrawEllipseFillStrokeAAVBO32,int vboId,int byteOffsetInner,int numVertsInner,int byteOffsetBorder,int numVertsBorder,int glPrimTypeBorder,float centerX,float centerY,float radiusX,float radiusY
Draw previously prepared vertex buffer as filled, stroked, and anti-aliased ellipse (32bit float format)
sdvg_DrawEllipseFillStrokeAA,float centerX,float centerY,float sizeX,float sizeY
Draw filled, stroked, and anti-aliased ellipse via scratch buffer (32 bit float format)
sdvg_SetupEllipseStrokeAAVBO32,Buffer vb,Buffer dl,float centerX,float centerY,float radiusX,float radiusY,float strokeW
Set up vertex buffer and draw list for stroked, and anti-aliased ellipse (32bit float format)
sdvg_DrawEllipseStrokeAAVBO32,int vboId,int byteOffsetBorder,int numVertsBorder,int glPrimTypeBorder,float centerX,float centerY,float radiusX,float radiusY
Draw previously prepared vertex buffer as stroked, anti-aliased ellipse (32bit float format)
sdvg_DrawEllipseStrokeAA,float centerX,float centerY,float sizeX,float sizeY
Draw stroked, anti-aliased ellipse via scratch buffer (32 bit float format)
sdvg_SetupRoundRectFillAAVBO32,Buffer vb,Buffer dl,float centerX,float centerY,float sizeX,float sizeY,float radiusX,float radiusY
Set up vertex buffer and draw list for filled, and anti-aliased rounded rectangle (32bit float format)
sdvg_DrawRoundRectFillAAVBO32,int vboId,int byteOffsetInner,int numVertsInner,int byteOffsetBorder,int numVertsBorder,int glPrimTypeBorder,float centerX,float centerY,float sizeX,float sizeY,float radiusX,float radiusY
Draw previously prepared vertex buffer as filled, anti-aliased rounded rectangle (32bit float format)
sdvg_DrawRoundRectFillAA,float centerX,float centerY,float sizeX,float sizeY,float radiusX,float radiusY
Draw filled, anti-aliased rounded rectangle via scratch buffer (32 bit float format)
sdvg_SetupRoundRectFillStrokeAAVBO32,Buffer vb,Buffer dl,float centerX,float centerY,float sizeX,float sizeY,float radiusX,float radiusY,float strokeW
Set up vertex buffer and draw list for filled, stroked, and anti-aliased rounded rectangle (32bit float format)
sdvg_DrawRoundRectFillStrokeAAVBO32,int vboId,int byteOffsetInner,int numVertsInner,int byteOffsetBorder,int numVertsBorder,int glPrimTypeBorder,float centerX,float centerY,float sizeX,float sizeY,float radiusX,float radiusY
Draw previously prepared vertex buffer as filled, stroked, anti-aliased rounded rectangle (32bit float format)

<pre>
Draw-list format:<br>
  +0  u16 aaRange * 256<br>
  +2  i32 vbOffInner<br>
  +6  u16 numVertsInner  (GL_TRIANGLES)<br>
  +8  i32 vbOffBorder<br>
  +12 u16 numVertsBorder<br>
  +14 u16 primTypeBorder (GL_TRIANGLE_FAN(0x0006) or GL_TRIANGLES(0x0004))<br>
</pre>
sdvg_DrawRoundRectFillStrokeAA,float centerX,float centerY,float sizeX,float sizeY,float radiusX,float radiusY
Draw filled, stroked, anti-aliased rounded rectangle via scratch buffer (32 bit float format)
sdvg_SetupRoundRectStrokeAAVBO32,Buffer vb,Buffer dl,float centerX,float centerY,float sizeX,float sizeY,float radiusX,float radiusY,float strokeW
Set up vertex buffer and draw list for stroked, anti-aliased rounded rectangle (32bit float format)
sdvg_DrawRoundRectStrokeAAVBO32,int vboId,int byteOffsetBorder,int numVertsBorder,int glPrimTypeBorder,float centerX,float centerY,float sizeX,float sizeY,float radiusX,float radiusY
Draw previously prepared vertex buffer as stroked, anti-aliased rounded rectangle (32bit float format)
sdvg_DrawRoundRectStrokeAA,float centerX,float centerY,float sizeX,float sizeY,float radiusX,float radiusY
Draw stroked, anti-aliased rounded rectangle via scratch buffer (32 bit float format)
sdvg_DrawTrianglesTexUVFlatVBO32,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as textured mapped triangles (32bit float format)

<pre>
VBO vertex format (16 bytes per vertex):<br>
    +0  f32 x<br>
    +4  f32 y<br>
    +8  f32 u<br>
    +12 f32 v<br>
</pre>
sdvg_DrawTrianglesTexUVGouraudVBO32,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as textured mapped, gouraud shaded triangles (32bit float format)

<pre>
VBO vertex format (20 bytes per vertex):<br>
    +0  f32 x<br>
    +4  f32 y<br>
    +8  f32 u<br>
    +12 f32 v<br>
    +16  u8 r<br>
    +17  u8 g<br>
    +18  u8 b<br>
    +19  u8 a<br>
</pre>
sdvg_DrawTrianglesTexUVFlatDecalVBO32,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as decal-textured mapped triangles (32bit float format)

<pre>
VBO vertex format (16 bytes per vertex):<br>
    +0  f32 x<br>
    +4  f32 y<br>
    +8  f32 u<br>
    +12 f32 v<br>
</pre>
sdvg_DrawTrianglesTexUVGouraudDecalVBO32,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as decal-textured mapped, gouraud shaded triangles (32bit float format)

<pre>
VBO vertex format (20 bytes per vertex):<br>
    +0  f32 x<br>
    +4  f32 y<br>
    +8  f32 u<br>
    +12 f32 v<br>
    +16  u8 r<br>
    +17  u8 g<br>
    +18  u8 b<br>
    +19  u8 a<br>
</pre>
sdvg_DrawTrianglesTexUVFlatVBO32Alpha,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as alpha-texture mapped triangles (32bit float format)

<pre>
VBO vertex format (16 bytes per vertex):<br>
    +0  f32 x<br>
    +4  f32 y<br>
    +8  f32 u<br>
    +12 f32 v<br>
</pre>
sdvg_DrawTrianglesTexUVGouraudVBO32Alpha,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as alpha-texture mapped, gouraud shaded triangles (32bit float format)

<pre>
VBO vertex format (20 bytes per vertex):<br>
    +0  f32 x<br>
    +4  f32 y<br>
    +8  f32 u<br>
    +12 f32 v<br>
    +16  u8 r<br>
    +17  u8 g<br>
    +18  u8 b<br>
    +19  u8 a<br>
</pre>
sdvg_DrawTrianglesTexUVFlatDecalVBO32Alpha,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as alpha-decal-texture mapped triangles (32bit float format)

<pre>
VBO vertex format (16 bytes per vertex):<br>
    +0  f32 x<br>
    +4  f32 y<br>
    +8  f32 u<br>
    +12 f32 v<br>
</pre>
sdvg_DrawTrianglesTexUVGouraudDecalVBO32Alpha,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as alpha-decal-texture mapped, gouraud shaded triangles (32bit float format)

<pre>
VBO vertex format (20 bytes per vertex):<br>
    +0  f32 x<br>
    +4  f32 y<br>
    +8  f32 u<br>
    +12 f32 v<br>
    +16  u8 r<br>
    +17  u8 g<br>
    +18  u8 b<br>
    +19  u8 a<br>
</pre>
sdvg_DrawTrianglesTexUVFlatVBO32AlphaSDF,int vboId,int byteOffset,int numVerts
Draw previously prepared vertex buffer as alpha-SDF-texture mapped triangles (32bit float format)

<pre>
VBO vertex format (16 bytes per vertex):<br>
    +0  f32 x<br>
    +4  f32 y<br>
    +8  f32 u<br>
    +12 f32 v<br>
</pre>
sdvg_DrawLineStripFlatVBO14_2,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as line strip (14.2 fixed point format)

<pre>
VBO vertex format (6 bytes per vertex):<br>
  +0 s14.2 x<br>
  +2 s14.2 y<br>
  +4 i16   index (when !defined(USE_VERTEX_ATTRIB_DIVISOR))<br>
</pre>
sdvg_DrawLineStripFlatVBO32,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as line strip (32 bit float format)
sdvg_DrawLineStripFlatAAVBO14_2,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as anti-aliased line strip (14.2 fixed point format)

<pre>
VBO vertex format (6 bytes per vertex):<br>
  +0 s14.2 x<br>
  +2 s14.2 y<br>
  +4 i16   index (when !defined(USE_VERTEX_ATTRIB_DIVISOR))<br>
</pre>
sdvg_DrawLineStripFlatAAVBO32,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as anti-aliased line strip (32 bit float format)
sdvg_DrawLineStripFlatBevelVBO14_2,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as line strip with bevel line joints (14.2 fixed point format)

<pre>
VBO vertex format (6 bytes per vertex):<br>
  +0 s14.2 x<br>
  +2 s14.2 y<br>
  +4 i16   index (when !defined(USE_VERTEX_ATTRIB_DIVISOR))<br>
</pre>
sdvg_DrawLineStripFlatBevelVBO32,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as line strip with bevel line joints (32 bit float format)
sdvg_DrawLineStripFlatBevelAAVBO14_2,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as anti-aliased line strip with bevel line joints (14.2 fixed point format)

<pre>
VBO vertex format (6 bytes per vertex):<br>
  +0 s14.2 x<br>
  +2 s14.2 y<br>
  +4 i16   index (when !defined(USE_VERTEX_ATTRIB_DIVISOR))<br>
</pre>
sdvg_DrawLineStripFlatBevelAAVBO32,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as anti-aliased line strip with bevel line joints (32 bit float format)
sdvg_DrawLinesFlatVBO14_2,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as line segments (14.2 fixed point format)

<pre>
VBO vertex format (6 bytes per vertex):<br>
  +0 s14.2 x<br>
  +2 s14.2 y<br>
  +4 i16   index (when !defined(USE_VERTEX_ATTRIB_DIVISOR))<br>
</pre>
sdvg_DrawLinesFlatVBO32,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as line segments (32 bit float format)
sdvg_DrawLinesFlatAAVBO14_2,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as anti-aliased line segments (14.2 fixed point format)

<pre>
VBO vertex format (6 bytes per vertex):<br>
  +0 s14.2 x<br>
  +2 s14.2 y<br>
  +4 i16   index (when !defined(USE_VERTEX_ATTRIB_DIVISOR))<br>
</pre>
sdvg_DrawLinesFlatAAVBO32,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as anti-alised line segments (32 bit float format)
sdvg_DrawPointsSquareVBO32,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as square points (32 bit float format)

<pre>
VBO vertex format (10 bytes per vertex):<br>
  +0 f32 x<br>
  +4 f32 y<br>
  +8 i16   index (0..5) (when !defined(USE_VERTEX_ATTRIB_DIVISOR))<br>
</pre>
sdvg_DrawPointsSquareAAVBO32,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as anti-aliased, square points (32 bit float format)

<pre>
VBO vertex format (10 bytes per vertex):<br>
  +0 f32 x<br>
  +4 f32 y<br>
  +8 i16   index (0..5) (when !defined(USE_VERTEX_ATTRIB_DIVISOR))<br>
</pre>
sdvg_DrawPointsRoundVBO32,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as round points (32 bit float format)

<pre>
VBO vertex format (10 bytes per vertex):<br>
  +0 f32 x<br>
  +4 f32 y<br>
  +8 i16   index (0..5) (when !defined(USE_VERTEX_ATTRIB_DIVISOR))<br>
</pre>
sdvg_DrawPointsRoundAAVBO32,int vboId,int byteOffset,int numPoints
Draw previously prepared vertex buffer as anti-aliased, round points (32 bit float format)

<pre>
VBO vertex format (10 bytes per vertex):<br>
  +0 f32 x<br>
  +4 f32 y<br>
  +8 i16   index (0..5) (when !defined(USE_VERTEX_ATTRIB_DIVISOR))<br>
</pre>
sdvg_CreateShader,String vs,String fs:int
Create user-defined shader program

@arg vs Vertex shader source
@arg fs Fragment shader source

@return ShaderVG shader index

@see sdvg_DestroyShader
@see sdvg_BindShader
@see sdvg_UnbindShader
sdvg_DestroyShader,int shaderIdx
Destroy user-defined shader program

@see sdvg_CreateShader
@see sdvg_BindShader
@see sdvg_UnbindShader
sdvg_BindShader,int shaderIdx
Bind user-defined shader program

@see sdvg_CreateShader
@see sdvg_DestroyShader
@see sdvg_UnbindShader
sdvg_UnbindShader
Unbind current shader program

@see sdvg_CreateShader
@see sdvg_DestroyShader
@see sdvg_BindShader
sdvg_GetUniformLocation,String name:int
Query uniform location in currently bound shader program
sdvg_GetAttribLocation,String name:int
Query attribute location in currently bound shader program
sdvg_Uniform1f,String name,float f
Set scalar float uniform in currently bound shader program
sdvg_Uniform2f,String name,float f1,float f2
Set vec2 float uniform in currently bound shader program
sdvg_Uniform3f,String name,float f1,float f2,float f3
Set vec3 float uniform in currently bound shader program
sdvg_Uniform4f,String name,float f1,float f2,float f3,float f4
Set vec4 float uniform in currently bound shader program
sdvg_Uniform1i,String name,int i
Set integer / sampler uniform in currently bound shader program
sdvg_BeginVBO,int numVertices,int stride:boolean
Begin preparation of mapped vertex buffer

@arg numVertices Number of vertices
@arg stride Total number of attribute bytes per vertex

@see sdvg_MapVBO
sdvg_BeginTriangles,int numVertices,int stride:boolean
Begin preparation or rendering of triangles via user-defined shader

@arg numVertices Number of vertices
@arg stride Total number of attribute bytes per vertex
sdvg_BeginTriangleFan,int numVertices,int stride:boolean
Begin preparation or rendering of triangle-fan via user-defined shader

@arg numVertices Number of vertices
@arg stride Total number of attribute bytes per vertex
sdvg_BeginTriangleStrip,int numVertices,int stride:boolean
Begin preparation or rendering of triangle-strip via user-defined shader

@arg numVertices Number of vertices
@arg stride Total number of attribute bytes per vertex
sdvg_BeginFilledTriangles,int numVertices:boolean
Begin preparation or rendering of filled triangles

@arg numVertices Number of vertices
sdvg_BeginFilledTriangleFan,int numVertices:boolean
Begin preparation or rendering of filled triangle-fan

@arg numVertices Number of vertices
sdvg_BeginFilledTriangleStrip,int numVertices:boolean
Begin preparation or rendering of filled triangle-strip

@arg numVertices Number of vertices
sdvg_BeginFilledGouraudTriangles,int numVertices:boolean
Begin preparation or rendering of filled, gouraud shaded triangles

@arg numVertices Number of vertices
sdvg_BeginFilledGouraudTriangleFan,int numVertices:boolean
Begin preparation or rendering of filled, gouraud shaded triangle-fan

@arg numVertices Number of vertices
sdvg_BeginFilledGouraudTriangleStrip,int numVertices:boolean
Begin preparation or rendering of filled, gouraud shaded triangle-strip

@arg numVertices Number of vertices
sdvg_BeginTexturedTriangles,int numVertices:boolean
Begin preparation or rendering of textured triangles

@arg numVertices Number of vertices
sdvg_BeginTexturedTriangleFan,int numVertices:boolean
Begin preparation or rendering of textured triangle fan

@arg numVertices Number of vertices
sdvg_BeginTexturedTriangleStrip,int numVertices:boolean
Begin preparation or rendering of textured triangle strip

@arg numVertices Number of vertices
sdvg_BeginTexturedGouraudTriangles,int numVertices:boolean
Begin preparation or rendering of textured, gouraud shaded triangles

@arg numVertices Number of vertices
sdvg_BeginTexturedGouraudTriangleFan,int numVertices:boolean
Begin preparation or rendering of textured, gouraud shaded triangle-fan

@arg numVertices Number of vertices
sdvg_BeginTexturedGouraudTriangleStrip,int numVertices:boolean
Begin preparation or rendering of textured, gouraud shaded triangle-strip

@arg numVertices Number of vertices
sdvg_BeginTexturedTrianglesAlpha,int numVertices:boolean
Begin preparation or rendering of alpha-channel-only textured triangles

@arg numVertices Number of vertices
sdvg_BeginTexturedTriangleFanAlpha,int numVertices:boolean
Begin preparation or rendering of alpha-channel-only textured triangle-fan

@arg numVertices Number of vertices
sdvg_BeginTexturedTriangleStripAlpha,int numVertices:boolean
Begin preparation or rendering of alpha-channel-only textured triangle-strip

@arg numVertices Number of vertices
sdvg_BeginTexturedGouraudTrianglesAlpha,int numVertices:boolean
Begin preparation or rendering of alpha-channel-only textured, gouraud shaded triangles

@arg numVertices Number of vertices
sdvg_BeginTexturedGouraudTriangleFanAlpha,int numVertices:boolean
Begin preparation or rendering of alpha-channel-only textured, gouraud shaded triangle-fan

@arg numVertices Number of vertices
sdvg_BeginTexturedGouraudTriangleStripAlpha,int numVertices:boolean
Begin preparation or rendering of alpha-channel-only textured, gouraud shaded triangle-strip

@arg numVertices Number of vertices
sdvg_BeginTexturedTrianglesAlphaSDF,int numVertices:boolean
Begin preparation or rendering of alpha-SDF_channel-only textured triangles

@arg numVertices Number of vertices
sdvg_BeginLineStrip,int numPoints:boolean
Begin preparation or rendering of line strip

@arg numPoints Number of vertices
sdvg_BeginLineStripAA,int numPoints:boolean
Begin preparation or rendering of anti-aliased line strip

@arg numPoints Number of points
sdvg_BeginLineStripBevel,int numPoints:boolean
Begin preparation or rendering of line strip with bevel line joints

@arg numPoints Number of points
sdvg_BeginLineStripBevelAA,int numPoints:boolean
Begin preparation or rendering of anti-aliased line strip with bevel line joints

@arg numPoints Number of points
sdvg_BeginLines,int numPoints:boolean
Begin preparation or rendering of line segments

@arg numPoints Number of points
sdvg_BeginLinesAA,int numPoints:boolean
Begin preparation or rendering of anti-aliased line segments

@arg numPoints Number of points
sdvg_BeginPointsSquare,int numPoints:boolean
Begin preparation or rendering of square points

@arg numPoints Number of points
sdvg_BeginPointsSquareAA,int numPoints:boolean
Begin preparation or rendering of anti-aliased, square points

@arg numPoints Number of points
sdvg_BeginPointsRound,int numPoints:boolean
Begin preparation or rendering of round points

@arg numPoints Number of points
sdvg_BeginPointsRoundAA,int numPoints:boolean
Begin preparation or rendering of anti-aliased, round points

@arg numPoints Number of points
sdvg_VertexOffset2f
Set vertex coordinate buffer GPU read pointer to current write offset
sdvg_AttribOffsetf,String name,int size
Set vertex attribute buffer GPU read pointer to current write offset (n floats)

@arg name Attribute name
sdvg_AttribOffset1f,String name
Set vertex attribute buffer GPU read pointer to current write offset (1 float per vertex)

@arg name Attribute name
sdvg_AttribOffset2f,String name
Set vertex attribute buffer GPU read pointer to current write offset (2 floats per vertex)

@arg name Attribute name
sdvg_AttribOffset3f,String name
Set vertex attribute buffer GPU read pointer to current write offset (3 floats per vertex)

@arg name Attribute name
sdvg_AttribOffset4f,String name
Set vertex attribute buffer GPU read pointer to current write offset (4 floats per vertex)

@arg name Attribute name
sdvg_AttribOffsetARGB,String name
Set vertex attribute buffer GPU read pointer to current write offset (4 r,g,b,a bytes per vertex)

@arg name Attribute name
sdvg_Attribi16,short i
Emit signed 16bit short vertex attribute to currently mapped vertex buffer

@arg name Attribute name
sdvg_Attrib1f,float f
Emit 32bit float vertex attribute to currently mapped vertex buffer
sdvg_Attrib2f,float f1,float f2
Emit two 32bit float vertex attributes to currently mapped vertex attribute buffer
sdvg_Vertex2f,float x,float y
Emit 2-component (xy) 32bit float vertex coordinate to currently mapped vertex buffer
sdvg_Vertex3f,float x,float y,float z
Emit 3-component (xyz) 32bit float vertex coordinate to currently mapped vertex buffer
sdvg_TexCoord2f,float u,float v
Emit 2-component 32bit float UV coordinate to currently mapped vertex buffer
sdvg_Attrib3f,float f1,float f2,float f3
Emit 3-component 32bit float vertex attribute to currently mapped vertex buffer
sdvg_Color3f,float r,float g,float b
Emit 3-component 32bit float RGB color attribute to currently mapped vertex buffer
sdvg_Attrib4f,float f1,float f2,float f3,float f4
Emit 4-component 32bit float vertex attribute to currently mapped vertex buffer
sdvg_Color4f,float r,float g,float b,float a
Emit 4-component 32bit float RGBA color attribute to currently mapped vertex buffer
sdvg_AttribARGB,int c32
Emit 4-component unsigned byte r,g,b,a color attribute to currently mapped vertex buffer
sdvg_ColorARGB,int c32
Emit 4-component unsigned byte r,g,b,a color attribute to currently mapped vertex buffer
sdvg_End
Finalize vertex buffer and start rendering (unless buffer is currently mapped).
sdvg_DrawFilledRectangle,float x,float y,float w,float h
Render a filled rectangle via scratch buffer
sdvg_DrawRectangle,float x,float y,float w,float h,float b
Render a stroked rectangle via scratch buffer

@arg x X position
@arg y Y position
@arg w Width
@arg h Height
@arg b Border width
sdvg_ARGB,byte a,byte r,byte g,byte b:int
Compose packed ARGB32 color from a,r,g,b bytes

@arg a Alpha (0..255)
@arg r Red (0..255)
@arg g Green (0..255)
@arg b Blue (0..255)

@return Packed ARGB32 color
sdvg_ARGBf,float a,float r,float g,float b:int
Compose packed ARGB32 color from normalized a,r,g,b floats (0..1)

@arg a Normalized alpha (0..1)
@arg r Normalized red (0..1)
@arg g Normalized green (0..1)
@arg b Normalized blue (0..1)

@return Packed ARGB32 color
sdvg_MixARGBx,int x,int y,short t:int
Mix packed ARGB32 colors (fixed point weight)

@arg x First packed ARGB32 color
@arg y Second packed ARGB32 color
@arg t 0=x .. 256=y
@return Packed RGB24 color
sdvg_MixARGBf,int x,int y,float t:int
Mix packed ARGB32 colors (normalized float weight)

@arg x First packed ARGB32 color
@arg y Second packed ARGB32 color
@arg t 0.0=x .. 1.0=y

@return Packed RGB24 color
sdvg_MixRGBx,int x,int y,short t
Mix packed RGB24 colors (fixed point weight)

@arg x First packed RGB24 color
@arg y Second packed RGB24 color
@arg t 0=x .. 256=y

@return Packed RGB24 color
sdvg_MixRGBf,int x,int y,float t:int
Mix packed RGB24 colors (normalized float weight)

@arg x First packed RGB24 color
@arg y Second packed RGB24 color
@arg t 0.0=x .. 1.0=y

@return Packed RGB24 color
sdvg_TintARGB,int x,int y:int
Tint color

@arg x Packed ARGB32 base color
@arg y Packed ARGB32 tint color. Alpha channel determines blend amount.

@return Packed ARGB32 color
sdvg_TintRGBAlpha,int x,int y,byte a8:int
Tint color

@arg x Packed RGB24 base color
@arg y Packed RGB24 tint color. Alpha channel determines blend amount.
@arg a8 Alpha channel (0..25) to be inserted into returned color

@return Packed ARGB32 color
sdvg_RGBAlpha,int c32,byte a8:int
Replace alpha channel of packed ARGB32 color

@arg c32 Packed RGB24 color
@arg a8 Alpha channel (0..25) to be inserted into returned color

@return Packed ARGB32 color
sdvg_HSVAToARGB,float h,float s,float v,byte a8:int
Convert hue / saturation / value / alpha into packed ARGB32 color

@arg h Hue (0..360)
@arg s Saturation (0..1)
@arg v Value (0..1)
@arg a8 Alpha channel (0..255) to be inserted into returned color

@return Packed ARGB32 color
sdvg_ARGBToHSVA,int c32,Float retH,Float retS,Float retV:byte
Split packed ARGB32 color into hue / saturation / value / alpha components

@arg c32 Packed ARGB32 color
@arg retH Returns hue (0..360)
@arg retS Returns saturation (0..1)
@arg retV Returns value (0..1)

@return Alpha channel (0..255)
