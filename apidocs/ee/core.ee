core
core

The core TkScript API.

This is a set of classes and functions that are built into the TkScript engine.

Some of the classes are also available (as a stripped-down version) in the <code>YAC</code> plugin API.
Object

This is the baseclass for all scriptengine objects.

Please notice that normally you will not need to use these methods
directly but rather through specialized API classes like e.g. §File, §String, §Buffer
etc.
These methods are mostly useful when dealing with "generic" objects but please make
sure to also look at the §TKS class API.

yacClassName:String

Return the class name.

Also see @yacMetaClassName.

@return new String instance that holds the class name
@see yacMetaClassName
yacNew:Object

Return a new instance of this class and initializes it.

@return new Object
yacNewObject:Object

Return a new instance of this class.

Warning: When instantiating script classes, yacOperatorInit() must be called afterwards.

Applications should call yacNew() instead of yacNewObject() since yacNew() takes care of script class initialization.

Alternatively, Object(myscriptclass) can be used to clone any object (including script classes).

@return new Object
yacMemberGetNum:int

Return the number of C++ members.

@return Number of C++ members.
@see yacMemberGetNames
@see yacMemberGetObjectTypes
@see yacMemberGetOffsets
@see yacMemberGetTypes
yacMemberGetNames:StringArray

Return the C++ member names.

@return New StringArray object that holds the member names.
@see yacMemberGetNum
@see yacMemberGetObjectTypes
@see yacMemberGetOffsets
@see yacMemberGetTypes
yacMemberGetTypes:IntArray

Return the C++ member types.

The §Value type encoding is used, i.e. 0=void, 1=int, 2=float, 3=Object, 4=String.

@return New IntArray object that holds the member types.
@see yacMemberGetNames
@see yacMemberGetNum
@see yacMemberGetObjectTypes
@see yacMemberGetOffsets
yacMemberGetObjectTypes:StringArray

Return the class names of the C++ object members.

If a member is not an Object, an empty String will be returned for that member.

@return New StringArray that holds the member class names.
@see yacMemberGetNames
@see yacMemberGetNum
@see yacMemberGetOffsets
@see yacMemberGetTypes
yacMemberGetOffsets:IntArray

Return the byteoffsets of the C++ object members.

@return new IntArray instance that holds the member types
@see yacMemberGetNames
@see yacMemberGetNum
@see yacMemberGetObjectTypes
@see yacMemberGetTypes
yacMethodGetNum:int

Return the number of C++ methods exposed to the scriptengine.

@return Number of C++ methods
@see yacMethodGetNames
@see yacMethodGetNumParameters
@see yacMethodGetParameterTypes
@see yacMethodGetParameterObjectTypes
@see yacMethodGetReturnTypes
@see yacMethodGetReturnObjectTypes
yacMethodGetNames:StringArray

Return the C++ method names.

@return new StringArray object that holds the C++ method names.
@see yacMethodGetNum
@see yacMethodGetNumParameters
@see yacMethodGetParameterTypes
@see yacMethodGetParameterObjectTypes
@see yacMethodGetReturnTypes
@see yacMethodGetReturnObjectTypes
yacMethodGetNumParameters:IntArray

Return the number of parameters to each C++ method exposed to the scriptengine,

@return new IntArray object that holds the parameter counter for each method.
@see yacMethodGetNum
@see yacMethodGetNames
@see yacMethodGetParameterTypes
@see yacMethodGetParameterObjectTypes
@see yacMethodGetReturnTypes
@see yacMethodGetReturnObjectTypes
yacMethodGetParameterTypes:ValueArray

Return the parameter types arrays for each C++ method exposed to the scriptengine.

The §Value type encoding is used, i.e. 0=void, 1=int, 2=float, 3=Object, 4=String.

@return new ValueArray that holds the parameters types (IntArray) for each C++ method.
@see yacMethodGetNum
@see yacMethodGetNames
@see yacMethodGetNumParameters
@see yacMethodGetParameterObjectTypes
@see yacMethodGetReturnTypes
@see yacMethodGetReturnObjectTypes
yacMethodGetParameterObjectTypes:ValueArray

Return the object parameter class names for each C++ method exposed to the scriptengine.

@return new ValueArray that holds the parameter class names (StringArray) for each C++ method.
@see yacMethodGetNum
@see yacMethodGetNames
@see yacMethodGetNumParameters
@see yacMethodGetParameterTypes
@see yacMethodGetReturnTypes
@see yacMethodGetReturnObjectTypes
yacMethodGetReturnTypes:IntArray

Return the return types for each C++ method exposed to the scriptengine.

The §Value type encoding is used, i.e. 0=void, 1=int, 2=float, 3=Object with the exception
that the return type 4 means "variable".
The last parameter to a variable return type method must be <code>YAC_Value *_r</code>.
Methods that want to return <i>deletable</i> objects must also use return type 4.

@return new IntArray object that holds the return types for each C++ method.
@see yacMethodGetNum
@see yacMethodGetNames
@see yacMethodGetNumParameters
@see yacMethodGetParameterTypes
@see yacMethodGetParameterObjectTypes
@see yacMethodGetReturnObjectTypes
yacMethodGetReturnObjectTypes:StringArray

Return the return object classnames for each C++ method exposed to the scriptengine.

@return new StringArray object that holds the return object classnames for each C++ method.
@see yacMethodGetNum
@see yacMethodGetNames
@see yacMethodGetNumParameters
@see yacMethodGetParameterTypes
@see yacMethodGetParameterObjectTypes
@see yacMethodGetReturnTypes
yacConstantGetNum:int

Return the number of constants of a C++ class.

@return Number of constants
@see yacConstantGetNames
@see yacConstantGetTypes
@see yacConstantGetValues
yacConstantGetNames:StringArray

Return the names of the C++ constants.

@return new StringArray instance that holds the constant names
@see yacConstantGetNum
@see yacConstantGetTypes
@see yacConstantGetValues
yacConstantGetTypes:IntArray

Return the types of the C++ constants.

The §Value type encoding is used, i.e. 0=void, 1=int, 2=float, 3=Object, 4=String.

@return new IntArray that holds the constant types.
@see yacConstantGetNum
@see yacConstantGetNames
@see yacConstantGetValues
yacConstantGetValues:ValueArray

Return the C++ constant values.

@return new ValueArray that holds the constant values.
@see yacConstantGetNum
@see yacConstantGetNames
@see yacConstantGetTypes
yacCopy,Object o:boolean
Copy object data from "o".

@return true if copy succeded, false otherwise.
yacEquals,Object o:boolean

Compare this to object "o".

@return true if objects are equals, false otherwise.
yacOperator,int cmd,Object o:var

Invoke operator.

Usually this method returns nothing since the object is directly modified.
The scriptengine takes care of duplicating the lefthandside object (this)
if +,-,*,/ etc. commands are used.

@arg cmd Command, see <code>YAC_OP_xxx</code>
@arg o Righthandside object
@return Usually nothing, boolean if a comparison command was used (==, !=, ..)
@see yacOperatorI
@see yacOperatorF32
@see yacOperatorInit
@see yacOperatorAssign
@see yacOperatorAdd
@see yacOperatorSub
@see yacOperatorMul
@see yacOperatorDiv
@see yacOperatorClamp
@see yacOperatorWrap
yacOperatorInit,Object o

Initialize object from other object.

This is mostly used for meta classes, e.g. to call constructors, initialize
members etc.

@arg o Template object
@see yacOperator
@see yacOperatorI
@see yacOperatorF32
@see yacOperatorAssign
@see yacOperatorAdd
@see yacOperatorSub
@see yacOperatorMul
@see yacOperatorDiv
@see yacOperatorClamp
@see yacOperatorWrap
yacOperatorAssign,Object o

Assign other object "o" to this object.

@arg o Righthandside object
@see yacOperator
@see yacOperatorI
@see yacOperatorF32
@see yacOperatorInit
@see yacOperatorAdd
@see yacOperatorSub
@see yacOperatorMul
@see yacOperatorDiv
@see yacOperatorClamp
@see yacOperatorWrap
yacOperatorAdd,Object o

Add other object "o" to this object.

@arg o Righthandside object
@see yacOperator
@see yacOperatorI
@see yacOperatorF32
@see yacOperatorInit
@see yacOperatorAssign
@see yacOperatorSub
@see yacOperatorMul
@see yacOperatorDiv
@see yacOperatorClamp
@see yacOperatorWrap
yacOperatorSub,Object o

Subtract other object "o" from this object.

@arg o Righthandside object
@see yacOperator
@see yacOperatorI
@see yacOperatorF32
@see yacOperatorInit
@see yacOperatorAssign
@see yacOperatorAdd
@see yacOperatorSub
@see yacOperatorMul
@see yacOperatorDiv
@see yacOperatorClamp
@see yacOperatorWrap
yacOperatorMul,Object o

Multiply this object by other object "o".

@arg o Righthandside object
@see yacOperator
@see yacOperatorI
@see yacOperatorF32
@see yacOperatorInit
@see yacOperatorAssign
@see yacOperatorAdd
@see yacOperatorSub
@see yacOperatorDiv
@see yacOperatorClamp
@see yacOperatorWrap
yacOperatorDiv,Object o

Divide this object by other object "o".

@arg o Righthandside object
@see yacOperator
@see yacOperatorI
@see yacOperatorF32
@see yacOperatorInit
@see yacOperatorAssign
@see yacOperatorAdd
@see yacOperatorSub
@see yacOperatorMul
@see yacOperatorClamp
@see yacOperatorWrap
yacOperatorClamp,Object min,Object max

Clamp this object to the given range.

@arg min Minimum
@arg max Maximum
@see yacOperator
@see yacOperatorI
@see yacOperatorF32
@see yacOperatorInit
@see yacOperatorAssign
@see yacOperatorAdd
@see yacOperatorSub
@see yacOperatorMul
@see yacOperatorDiv
@see yacOperatorWrap
yacOperatorWrap,Object min,Object max

Wrap this object within the given range.

@arg min Minimum
@arg max Maximum
@see yacOperator
@see yacOperatorI
@see yacOperatorF32
@see yacOperatorInit
@see yacOperatorAssign
@see yacOperatorAdd
@see yacOperatorSub
@see yacOperatorMul
@see yacOperatorDiv
@see yacOperatorClamp
yacScanI32,Integer r:boolean

Convert this object to a 32bit integer and write to return
object "r".

@arg r Receives the 32bit integer value
@return true if the conversion succeeded, false otherwise.
@see yacValueOfI
@see yacValueOfF32
@see yacScanI64
@see yacScanF32
@see yacScanF64
@see yacToString
yacScanI64,Long r:boolean

Convert this object to a 64bit integer and write to return
object "r".

@arg r Receives the 64bit integer value
@return true if the conversion succeeded, false otherwise.
@see yacValueOfI
@see yacValueOfF32
@see yacScanI32
@see yacScanF32
@see yacScanF64
@see yacToString
yacScanF32,Float r:boolean

Convert this object to a 32bit float and write to return
object "r".

@arg r Receives the 32bit float value
@return true if the conversion succeeded, false otherwise.
@see yacValueOfI
@see yacValueOfF32
@see yacScanI32
@see yacScanI64
@see yacScanF64
@see yacToString
yacScanF64,Double r:boolean

Convert this object to a 64bit float and write to return
object "r".

@arg r Receives the 64bit float value
@return true if the conversion succeeded, false otherwise.
@see yacValueOfI
@see yacValueOfF32
@see yacScanI32
@see yacScanI64
@see yacScanF32
@see yacToString
yacToString,String r:boolean

Convert this object to a String and write to return object "r".

@arg r Receives the String value
@return true if the conversion succeeded, false otherwise.
@see yacValueOfI
@see yacValueOfF32
@see yacScanI32
@see yacScanI64
@see yacScanF32
@see yacScanF64
yacToParsableString,String r:boolean

Convert this object to a script-parsable String and write to return object "r".

@arg r Receives the String value
@return true if the conversion succeeded, false otherwise.
@see yacValueOfI
@see yacValueOfF32
@see yacScanI32
@see yacScanI64
@see yacScanF32
@see yacScanF64
yacOperatorI,int cmd,int i:var

Invoke integer operator.

Also see §yacOperator

@arg cmd Command, see <code>YAC_OP_xxx</code>
@arg i Righthandside integer value
@return Usually nothing, boolean if a comparison command was used (==, !=, ..)
@see yacOperator
@see yacOperatorF32
@see yacOperatorInit
@see yacOperatorAssign
@see yacOperatorAdd
@see yacOperatorSub
@see yacOperatorMul
@see yacOperatorDiv
@see yacOperatorWrap
@see yacOperatorClamp
yacOperatorF32,int cmd,float f:var

Invoke float operator.

Also see §yacOperator

@arg cmd Command, see <code>YAC_OP_xxx</code>
@arg f Righthandside float value
@return Usually nothing, boolean if a comparison command was used (==, !=, ..)
@see yacOperator
@see yacOperatorI
@see yacOperatorInit
@see yacOperatorAssign
@see yacOperatorAdd
@see yacOperatorSub
@see yacOperatorMul
@see yacOperatorDiv
@see yacOperatorWrap
@see yacOperatorClamp
yacValueOfI,int i

Initialize from 32bit integer value.

@arg i Integer value
@see yacValueOfF32
@see yacScanI32
@see yacScanI64
@see yacScanF32
@see yacScanF64
@see yacToString
yacValueOfF32,float f

Initialize from 32bit float value.

@arg f Float value
@see yacValueOfI
@see yacScanI32
@see yacScanI64
@see yacScanF32
@see yacScanF64
@see yacToString
yacIsStream:boolean

Check whether object is a §Stream.

@return true if the object implements the stream interface, false otherwise.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamClose

Close the stream.

@see yacIsStream
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamOpenLocal,String name,int access:boolean

Open a local file for streaming.

@arg name Local filename
@arg access 0=read, 1=write, 2=read-write
@return true if the file has been opened, false otherwise.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamOpenLogic,String name:boolean

Open a file in the current PAK (.tkx) file for streaming.

@arg name Logic filename
@return true if the file has been opened, false otherwise.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamGetByteOrder:int

Query the current byteorder.

@return Byteorder, <code>YAC_LITTLEENDIAN</code> (default) or <code>YAC_BIGENDIAN</code>.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamSetByteOrder,int byteorder

Set the stream byteorder.

@arg byteorder <code>YAC_LITTLEENDIAN</code> (default) or <code>YAC_BIGENDIAN</code>.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamEOF:boolean

Check whether the end of stream has been reached.

@return true if EOF was found, false otherwise.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamSeek,int off,int mode

Adjust stream offset.

@arg off Stream offset
@arg mode Seek mode. <code>YAC_BEG</code> (0), <code>YAC_CUR/<code> (1) or <code>YAC_END</code> (2)
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamGetOffset:int

Return the current stream offset.

@return Stream offset
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamSetOffset,int off

Set the current stream offset.

@arg off Stream offset
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamGetSize:int

Query the total stream size.

This obviously will only work for limited-size streams like e.g. §File.

@return Stream size or 0 (unknown)
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamRead,Buffer r,int num:int

Read "num" bytes from the stream into §Buffer r.

@arg r Destination §Buffer
@arg num Number of bytes to read
@return Number of bytes read from §Stream.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamReadI8:byte

Read a single byte from the stream.

@return Byte
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamReadI16:short

Read a single 16bit short from the stream.

Perform byteorder conversion if necessary.

@return Short
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamReadI32:short

Read a single 32bit integer from the stream.

Perform byteorder conversion if necessary.

@return integer value
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadI16
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamReadI64:Long

Read a single 64bit integer from the stream.

Perform byteorder conversion if necessary.

@return integer value
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamReadF32:float

Read a single 32bit float from the stream.

@return float value
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamReadF64:Double

Read a single 64bit float from the stream.

@return float value
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamReadObject,Object r

Read a single object from the stream and write to "r".

@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamReadString,String r:boolean

Read a single String from the stream and write to "r".

@return true if the String was read, false otherwise.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamReadBuffer,Buffer r,int off,int num,boolean resize:int

Read a sequence of bytes from the stream and write to §Buffer "r".

@arg r Destination §Buffer
@arg off Destination offset in buffer
@arg num Number of bytes to read
@arg resize If true, resize the §Buffer as required
@return Number of bytes read
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamReadLine,String r,int maxlen:int

Read a String from the stream and write to §String "r".

@arg r Destination §String
@arg maxlen Maximum number of chars to read
@return Number of chars read.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamWrite,Buffer b,int num:int

Write a sequence of bytes to the stream.

@arg b Source buffer
@arg num Number of bytes to write
@return Number of bytes written
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamWriteI8,byte b

Write a single byte to the stream.

@arg b Byte value to write
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamWriteI16,short s

Write a single 16bit short to the stream.

Automatic byteorder conversion is performed according
to the current stream byteorder.

@arg s Short value to write.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamWriteI32,int i

Write a single 32bit integer to the stream.

Automatic byteorder conversion is performed according
to the current stream byteorder.

@arg s Integer value to write.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI8
@see yacStreamWriteI16
@see yacStreamWriteI64
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamWriteI64,Long i

Write a single 64bit integer to the stream.

Automatic byteorder conversion is performed according
to the current stream byteorder.

@arg s Integer value to write.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI8
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamWriteF32,float f

Write a single 32bit float to the stream.

@arg f Float value to write.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamWriteF64,Double f

Write a single 64bit float to the stream.

@arg f Float value to write.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamWriteString,String s,int off,int len:int

Write a sequence of characters to the stream.

@arg s Source §String
@arg off Source offset
@arg len Number of characters to write
@return Number of characters written
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamWriteBuffer,Buffer b,int off,int len:int

Write a sequence of bytes to the stream.

@arg b Source §Buffer
@arg off Source offset
@arg len Number of bytes to write
@return Number of bytes written
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
@see yacStreamGetErrorStringByCode
yacStreamGetErrorCode:int

Return the last stream error code.

@return Error code. Except for 0=No error, the error code depends on the stream type.
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorStringByCode
yacStreamGetErrorStringByCode,int errorCode:String

Returns a String representation of the given error code.

@arg errorCode The stream error code
@return new String object
@see yacIsStream
@see yacStreamClose
@see yacStreamOpenLocal
@see yacStreamOpenLogic
@see yacStreamGetByteOrder
@see yacStreamSetByteOrder
@see yacStreamEOF
@see yacStreamSeek
@see yacStreamGetOffset
@see yacStreamSetOffset
@see yacStreamGetSize
@see yacStreamRead
@see yacStreamReadBuffer
@see yacStreamReadF32
@see yacStreamReadF64
@see yacStreamReadI16
@see yacStreamReadI32
@see yacStreamReadI64
@see yacStreamReadI8
@see yacStreamReadLine
@see yacStreamReadObject
@see yacStreamReadString
@see yacStreamWrite
@see yacStreamWriteBuffer
@see yacStreamWriteF32
@see yacStreamWriteF64
@see yacStreamWriteI16
@see yacStreamWriteI32
@see yacStreamWriteI64
@see yacStreamWriteI8
@see yacStreamWriteString
@see yacStreamGetErrorCode
yacSerializeClassName,Stream ofs

Serialize the class name String to the given outputstream.

@arg ofs Output stream
@see yacCanDeserializeClass
@see yacDeserialize
@see yacSerialize
yacSerialize,Stream ofs,boolean bTypeInfo

Serialize this object to the given outputstream.

@arg ofs Output stream
@arg bTypeInfo true to include type information, false to serialize just the raw object data
@see yacCanDeserializeClass
@see yacDeserialize
@see yacSerializeClassName
yacDeserialize,Stream ifs,boolean bTypeInfo

Deserialize object from the given inputstream.

@arg ifs Input stream
@arg bTypeInfo true to expect type information, false to serialize just the raw object data
@see yacCanDeserializeClass
@see yacSerialize
@see yacSerializeClassName
yacArrayNew:Object

Return new array object for this object.

This is used to create specialized Array objects for a given object type.

@return new array object
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArrayAlloc,int sx,int sy,int type,int elementByteSize:boolean

Allocate array elements.

Most arrays will only use the first argument ("sx").

@arg sx Array width
@arg sy Array height (e.g. for texture objects).
@arg type Array element type (see §Value type encoding)
@arg elementByteSize Size of an array element
@return true if elements were allocated successfully, false otherwise.
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArrayRealloc,int sx,int sy,int type,int elementByteSize:boolean

Re-allocate array elements.

Most arrays will only use the first argument ("sx").

@arg sx Array width
@arg sy Array height (e.g. for texture objects).
@arg type Array element type (see §Value type encoding)
@arg elementByteSize Size of an array element
@return true if elements were allocated successfully, false otherwise.
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArrayGetNumElements:int

Return the number of used array elements.

@return Number of used elements
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArrayGetMaxElements:int

Return the total number of array elements.

@return Total number of elements.
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArrayCopySize,Object o

Copy array size from object "o".

@arg o Array object to copy the size from
@see yacArrayAlloc
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArraySet,int index,Value v

Set array element.

@arg index Array index
@arg v New element value
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArrayGet,int index,Value r

Get array element

@arg index Array index
@arg r Receives the element value
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArrayGetDeref,int index,Value r

Get (deletable) array element.

If the array stores a deletable object, this method
will flag the element as non-deletable and return the deletable
object.


@arg index Array index
@arg r Receives the element value
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArrayGetWidth:int

Return the array width.

@return Array width
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArrayGetHeight:int

Return the array height.

@return Array height
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArrayGetElementType:int

Return the array element type.

@return Element type. The type is encoded using the §Value type encoding except that 0 means variable type.
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArrayGetElementByteSize:int

Return the size of a single array element.

@return Element byte size or 0 if the size is unknown.
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArrayGetStride:int

Return the number of bytes between two consecutive lines.

This is mostly used by e.g. the texture class (see tkopengl plugin).

@return Number of bytes per row.
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
@see yacArraySetWidth
yacArraySetWidth,int sx

Set the array width.

@arg sx New array width
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetTemplate
yacArraySetHeight,int sy

Set the array height.

@arg sy New array height
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetTemplate
@see yacArraySetWidth
yacArraySetTemplate,Object template

Set the template object to use for allocation of new array elements.

This is mostly used by e.g. the §ObjectArray or §ClassArray classes.

@arg template The new array element template object
@see yacArrayAlloc
@see yacArrayCopySize
@see yacArrayGet
@see yacArrayGetDeref
@see yacArrayGetElementByteSize
@see yacArrayGetElementType
@see yacArrayGetHeight
@see yacArrayGetMaxElements
@see yacArrayGetNumElements
@see yacArrayGetStride
@see yacArrayGetWidth
@see yacArrayNew
@see yacArrayRealloc
@see yacArraySet
@see yacArraySetHeight
@see yacArraySetWidth
yacHashSet,String key,Value value

Modify/create a hashtable entry.

@arg key The hash key name
@arg value The element value
@see yacHashGet
@see yacHashGetDeref
yacHashGet,String key,Value r

Get a hashtable entry.

@arg key The hash key name
@arg r Receives the hashtable entry value.
@see yacHashSet
@see yacHashGetDeref
yacHashGetDeref,String key,Value r

Get (deletable) hashtable element.

If the hashtable stores a deletable object, this method
will flag the element as non-deletable and return the deletable
object.

@arg key The hash key name
@arg r Receives the hashtable entry value
@see yacHashSet
@see yacHashGet
@see yacHashGetDeref
yacGetSignalStringList:String

Return a String that describe the signal names and callback signatures
exposed by a C++ object.
For an example, take a look at the tksdl plugin.

@return Signal string
yacMetaClassName:String

Return object meta class name.

This is mostly used with script classes. See §Class.

@return Meta class name
@see yacClassName
@see yacMetaClassInstanceOf
@see yacMetaClassMemberGet
@see yacMetaClassMemberGetAccessKeyByIndex
@see yacMetaClassMemberGetAccessKeyByName
@see yacMetaClassMemberGetName
@see yacMetaClassMemberGetNum
@see yacMetaClassMemberGetType
@see yacMetaClassMemberSet
@see yacMetaClassName
yacMetaClassMemberGetNum:int

Return number of meta class members.

@return Number of meta class members
@see yacMetaClassInstanceOf
@see yacMetaClassMemberGet
@see yacMetaClassMemberGetAccessKeyByIndex
@see yacMetaClassMemberGetAccessKeyByName
@see yacMetaClassMemberGetName
@see yacMetaClassMemberGetType
@see yacMetaClassMemberSet
@see yacMetaClassName
yacMetaClassMemberGetAccessKeyByIndex,int index:int

Return access key to meta class member by index.

@arg index Member index
@return Access key
@see yacMetaClassInstanceOf
@see yacMetaClassMemberGet
@see yacMetaClassMemberGetAccessKeyByName
@see yacMetaClassMemberGetName
@see yacMetaClassMemberGetNum
@see yacMetaClassMemberGetType
@see yacMetaClassMemberSet
@see yacMetaClassName
yacMetaClassMemberGetAccessKeyByName,String name:int

Return access key to meta class member by name.

@arg name Member name
@return Access key
@see yacMetaClassInstanceOf
@see yacMetaClassMemberGet
@see yacMetaClassMemberGetAccessKeyByIndex
@see yacMetaClassMemberGetName
@see yacMetaClassMemberGetNum
@see yacMetaClassMemberGetType
@see yacMetaClassMemberSet
@see yacMetaClassName
yacMetaClassMemberGetType,int ak

Return meta class member type.

The member type is encoded using the §Value type encoding.

@arg ak Access key
@return Member type
@see yacMetaClassInstanceOf
@see yacMetaClassMemberGet
@see yacMetaClassMemberGetAccessKeyByIndex
@see yacMetaClassMemberGetAccessKeyByName
@see yacMetaClassMemberGetName
@see yacMetaClassMemberGetNum
@see yacMetaClassMemberSet
@see yacMetaClassName
yacMetaClassMemberGetName,int ak:String

Return name of meta class member associated with the given access key.

@arg ak Access key
@return Meta class member name
@see yacMetaClassInstanceOf
@see yacMetaClassMemberGet
@see yacMetaClassMemberGetAccessKeyByIndex
@see yacMetaClassMemberGetAccessKeyByName
@see yacMetaClassMemberGetNum
@see yacMetaClassMemberGetType
@see yacMetaClassMemberSet
@see yacMetaClassName
yacMetaClassMemberSet,int ak,Value v

Set value of meta class member.

@arg ak Access key
@arg v New value of meta class member
@see yacMetaClassInstanceOf
@see yacMetaClassMemberGet
@see yacMetaClassMemberGetAccessKeyByIndex
@see yacMetaClassMemberGetAccessKeyByName
@see yacMetaClassMemberGetName
@see yacMetaClassMemberGetNum
@see yacMetaClassMemberGetType
@see yacMetaClassName
yacMetaClassMemberGet,int ak:var

Return value of meta class member.

@arg ak Access key
@return Member value
@see yacMetaClassInstanceOf
@see yacMetaClassMemberGetAccessKeyByIndex
@see yacMetaClassMemberGetAccessKeyByName
@see yacMetaClassMemberGetName
@see yacMetaClassMemberGetNum
@see yacMetaClassMemberGetType
@see yacMetaClassMemberSet
@see yacMetaClassName
yacMetaClassInstanceOf,Object o:boolean

Check whether this object is an instance of meta class "o".

@arg o Righthandside object
@return true if this is an instance of meta class "o", false otherwise.
@see yacInstanceOf
@see yacMetaClassMemberGet
@see yacMetaClassMemberGetAccessKeyByIndex
@see yacMetaClassMemberGetAccessKeyByName
@see yacMetaClassMemberGetName
@see yacMetaClassMemberGetNum
@see yacMetaClassMemberGetType
@see yacMetaClassMemberSet
@see yacMetaClassName
yacCanDeserializeClass,Stream ifs:boolean

Check whether this class can be deserialized from the given inputstream.

@arg ifs Input stream.
@return true If this object can be deserialized from the stream, false otherwise.
@see yacDeserialize
@see yacSerialize
@see yacSerializeClassName
yacInstanceOf,Object o:boolean

Check whether this C++ class is an instance of C++ class "o".

@arg o Righthandside C++ object
@return true if this is an instance of the C++ object/class "o", false otherwise
@see yacMetaClassInstanceOf
IntArray,Object

An arraylist of 32bit integer values.

@see IntArray8
@see IntArray16
@see IntArray32
@see IntArray64
@see IntArray128
alloc,int max:int

Allocate the given number of array elements.

The numElements member will be set to 0 after allocation and the maxElements member
will be set to "max".

@arg max Total number of elements to allocate
@return true if the allocation succeeded, false otherwise
@see free
@see realloc
free

Free array elements.
@see alloc
@see realloc
add,int i:boolean

Add the given integer value to this array.

Resize array if necessary.

@arg f Integer value
@return true if the value has been added successfully, false otherwise.
@see add2
@see add3
@see add4
@see delete
@see delete2
@see delete3
@see delete4
@see insert
add2,int i1,int i2:boolean

Add the given integer values to this array.

Resize array if necessary.

@arg i1 First integer value
@arg i2 Second integer value
@return true if the values have been added successfully, false otherwise.
@see add
@see add3
@see add4
@see delete
@see delete2
@see delete3
@see delete4
@see insert
add3,int i1,int i2,int i3:boolean

Add the given integer values to this array.

Resize array if necessary.

@arg i1 First integer value
@arg i2 Second integer value
@arg i3 Third integer value
@return true if the values have been added successfully, false otherwise.
@see add
@see add2
@see add4
@see delete
@see delete2
@see delete3
@see delete4
@see insert
add4,int i1,int i2,int i3,int i4:boolean

Add the given integer values to this array.

Resize array if necessary.

@arg i1 First integer value
@arg i2 Second integer value
@arg i3 Third integer value
@arg i4 Fourth integer value
@return true if the values have been added successfully, false otherwise.
@see add
@see add2
@see add3
@see delete
@see delete2
@see delete3
@see delete4
@see insert
addArray,Object array,int off,int len:boolean

Add the given array like object to this array.

Resize array if necessary.

@arg array Array-like object
@arg off Source offset
@arg len Number of elements
@return true if the array has been added successfully, false otherwise.
@see add
@see addEmpty
addEmpty,int num:int

Increase numElements by "num".

@arg num Number of elements to add
@return New number of elements
@see delete
@see insert
getNumElements:int

Return number of used array elements.

@return Number of used array elements
@see setNumElements
getMaxElements:int

Return total number of array elements.

@return Total number of elements
@see alloc
@see realloc
empty

Reset the number of used elements, numElements, to 0.
isEmpty:boolean

Check if array is empty (numElements == 0).
realloc,int num:boolean

Reallocate array.

Array elements will be discarded if the new array size is smaller
than the current size. New array elements are added if the new array
size is smaller than the current size.

@arg num New total number of elements
@return true when the allocation succeeded, false otherwise.
@see alloc
@see free
insert,int index,int i:boolean

Insert new array element "i" before index "index".

The array will be resized if necessary.

@arg index Where to insert the new element
@arg i New element value
@see add
delete,int index:boolean
Delete element at the given index.

@arg index Which element to delete
@return true if the element was deleted, false otherwise.
@see add
@see insert
delete2,int index:boolean
Delete two elements at the given index.

@arg index First element index
@return true if the element has been deleted, false otherwise.
@see add
@see insert
delete3,int index:boolean
Delete three elements at the given index.

@arg index First element index
@return true if the element has been deleted, false otherwise.
@see add
@see insert
delete4,int index:boolean
Delete four elements at the given index.

@arg index First element index
@return true if the element has been deleted, false otherwise.
@see add
@see insert
fill,int i

Set all used array elements to value "i".

@arg i Fill value
@see add
@see insert
allocAndFill,int num,int i:boolean

Allocate and set all used array elements to value "i".

@arg num Number of elements
@arg i Fill value
@return true when allocation succeeded
@see fill
@see alloc
fillRegion,int off,int len,int val
Fill a range of elements with a constant value.

The region start/end will be clipped to (0;numElements).

@arg off Start offset (element index)
@arg len Number of elements
@arg val Fill value
@see fill
reverse

Reverse element order.
setNumElements,int num

Set number of used elements to "num".

"num" is clamped to 0 resp. to the maxElements member.
@arg num New number of used elements
swapByteOrder

Swap byteorder of all elements.
visitBytes,Object src,int off,int num:boolean

Create a view into another array-like object.

Keep in mind not to delete the "src" array while this object is still alive!

@arg src Source array object. Must have integer element type and linear memory layout (i.e. stride=width*elementByteSize)
@arg off Source offset
@arg num Number of elements
@return true if the view was created, false otherwise.
copyFrom,IntArray src,int off,int len,int destOff

Copy elements from other array.

@arg src Source array
@arg off Source offset
@arg len Number of elements to copy
@arg destOff Destination offset in this array
indexOf,int i,int off:int

Return index of element with value "i". -1 if no matching element was found.

@arg i Value to look for
@arg off Start index
@return Index of element, -1 if not found.
indexOfNot,int i,int off:int

Return index of element that does not have value "i". -1 if no matching element was found.

@arg i Value to look for
@arg off Start index
@return Index of element, -1 if not found.
contains,int i:boolean
Check whether array contains the given integer value.

@arg i Value to look for
@return true(1) if this array contains the given value, false(0) otherwise.
remove,int i:boolean
Check whether array contains the given integer value and remove it if it does.

@arg i Value to look for
@return true(1) if this array contained the given value which is now removed, false(0) otherwise.
read8,Stream ifs,int num,int destOff:int

Read a sequence of bytes from the given input stream.

The bytes will be extended to 32bit integers.

@arg ifs Input stream
@arg num Number of bytes to read.
@arg destOff Destination offset in this array
@return Number of elements read
read16,Stream ifs,int num,int destOff:int

Read a sequence of 16bit short integers from the given input stream.

The shorts will be extended to 32bit integers.

@arg ifs Input stream
@arg num Number of bytes to read.
@arg destOff Destination offset in this array
@return Number of elements read
read32,Stream ifs,int num,int destOff:int

Read a sequence of 32bit integers from the given input stream.

@arg ifs Input stream
@arg num Number of bytes to read.
@arg destOff Destination offset in this array
@return Number of elements read
write8,Stream ifs,int num,int srcOff:int

Write a sequence of 8bit bytes to the given output stream.

The array elements will be truncated to 8bit.

@arg num Number of bytes to write
@arg srcOff Source offset in this array
@return Number of elements written
write16,Stream ifs,int num,int srcOff:int

Write a sequence of 16bit short integers to the given output stream.

The array elements will be truncated to 16bit.

@arg num Number of shorts to write
@arg srcOff Source offset in this array
@return Number of elements written
write32,Stream ifs,int num,int srcOff:int

Write a sequence of 32bit integers to the given output stream.

@arg num Number of shorts to write
@arg srcOff Source offset in this array
@return Number of elements written
getString:String

Return string representation of this array.

@return String representation of this array.
getString2:String

Return (x;y) pair string representation of this array.

@return new String
getString3:String

Return (x;y;z) tuple string representation of this array.

@return new String
getMin:int

Return smallest array element.

@return Minimum value
getMax:int

Return biggest array element.

@return Maximum value
getAbsMin:int

Return smallest array element, not regarding sign.

@return Minimum value
getAbsMax:int

Return biggest array element, not regarding sign.

@return Maximum value
getMean:float

Return average element value.

@return Average value
getAbsMean:float

Return average element value, not regarding sign.

@return Average value
get,int index:int

Return element at index "index".

Silently return 0 if index is out of bounds.

@arg index Array index
@return Element value
set,int index,int val

Set element at "index" to "val".
Updates numElements when index exceeds it (>=).

Silently do nothing when index exceed array size (>= maxElements).

@arg index Array index
@arg val New value
getRev,int index:int

Return element value at (numElements - 1 - index).

Silently return 0 if resulting index is out of bounds.

@arg index Which element to return (starting from numElements)
@return Element value
setRev,int index,int val

Set element at "numElements - 1 - index" to "val".

Silently do nothing when index exceed array size (<0 || >= maxElements).

@arg index Array index (starting from numElements)
@arg val New value
getDefault,int index,int def:int

Return array element at 'index', or return 'def' when index is out of bounds.

@arg index Array index
@arg def Default value (when index is out of bounds)
@return Array element or default value
 identity,int num

Reallocate array to "num" elements and set element[i] to i.

@arg num New number of elements
sortByValue,IntArray r

Sort elements by value and return new element order in "r".

@arg r Receives new element order
rearrange,IntArray order:boolean

Reorder elements according to given element order.

@arg order New element order
@return true if elements have been reordered successfully, false otherwise.
swap,int indexA,int indexB:boolean

Swap two elements.

@arg indexA Index of first element
@arg indexB Index of second element
@return true if elements have been swapped successfully, false otherwise.
visit,IntArray src,int off,int num

Create a view into another IntArray object.

@arg src Source array
@arg off Source offset
@arg num Number of elements
useAll

Mark all array elements used, i.e. set numElements = maxElements.

getFirst:int

Return first array element.

@return First array element or 0 if the array is empty.

getLast:int

Return last used array element.

@return Last used array element (numElements - 1) or 0 if the array is empty.

join,Object a,Object b
Join arrays 'a' and 'b'.

@arg a Other array (or this, or null)
@arg b Other array (or this, or null)

@return true if arrays were joined, false if new elements could not be allocated
replace,int a,int b:int
Replace all occurences of 'a' with 'b' and return number of elements replaced.

@arg a Value a
@arg b Value b that replaces a.

@return Number of elements replaced.
replaceNeg,int b:int
Replace all occurences of negative values with 'b' and return number of elements replaced.

@arg b Value b that replaces negative values.

@return Number of elements replaced.
inc,int idx
 Increment element at index 'idx'.

 If the index is out of bounds, simply do nothing.
dec,int idx
 Decrement element at index 'idx'.

 If the index is out of bounds, simply do nothing.
getNumUniqueValues:int
 Return number of unique values (ignore duplicates).
isEqual,Array o:boolean
  Compare to other array and return true if the array contents are equal.

  (note) typecast other array elements to int when necessary.

@arg o Other array
@return true if the array contents are equal
findSubArrayOffset,IntArray ia:int
 Find offset of subarray "ia".

@arg ia Sub-array
@return Offset in this array
IntArray8,IntArray

An IntArray that can store 8 elements without (re-)allocation.

@see IntArray
IntArray16,IntArray

An IntArray that can store 16 elements without (re-)allocation.

@see IntArray
IntArray32,IntArray

An IntArray that can store 32 elements without (re-)allocation.

@see IntArray
IntArray64,IntArray

An IntArray that can store 64 elements without (re-)allocation.

@see IntArray
IntArray128,IntArray

An IntArray that can store 128 elements without (re-)allocation.

@see IntArray
ObjectArray,Object

A homogenous array of objects.

A template object is used to allocate new objects.

@see PointerArray
add,Object o:boolean

Add the given object value to this arraylist.

The array will be reallocated if necessary.

@arg o If o is of type §Value, try to release the object from the value container, add an object reference otherwise.
@return true if the Object has been added, false otherwise.
@see delete
@see insert
@see remove
remove,Object o:boolean

Delete the first element whose object pointer equals the given pointer.

@arg o Object (pointer)
@return true if an element matching the given Object address was found and deleted, false otherwise.
@see add
@see delete
@see insert
insert,int index,Object o:boolean

Insert the given object before the given index.

The array will be reallocated if necessary.

@arg index Where to insert the object
@arg o Object to insert. Similar to add, §Value object receive a special treatment.
@return true if the Object was inserted successfully, false otherwise
@see add
@see delete
@see remove
delete,int index:boolean

Delete the array element at the given index.

@arg index Which element to delete
@return true if the element was deleted, false otherwise.
@see add
@see insert
@see remove
alloc,int max:boolean

Allocate the given number of array elements.

All previous elements will be discarded.
The number of used elements, numElements, will be reset to 0.

@arg max New total number of elements.
@return true if the elements have been allocated successfully, false otherwise.
@see free
@see realloc
free

Free all array elements
realloc,int max:boolean

Reallocate array.

Discard/add empty elements as required.

@arg max New total number of elements
@return true if the reallocation succeeded, false otherwise
@see alloc
@see realloc
getNumElements:int

Return the number of used elements.

@return Number of used elements
@see setNumElements
getMaxElements:int

Return the total number of elements.

@return Total number of elements
@see alloc
@see free
@see realloc
empty

Reset the number of used elements, numElements, to 0.
isEmpty:boolean

Check if array is empty (numElements == 0).
reverse

Reverse the element order.
getNextFree:Object

Return a reference to the next free object.

Increase numElements.

@return Next free object or null if the array is full.
@see setNumElements
setNumElements,int num

Set the number of used array elements.

@arg num New number of elements
@see getNextFree
setTemplate,Object template

Set the template object to use for allocation of new array objects.

@arg template Template object to use for allocations
@see getTemplate
getTemplate:Object

Return the template object that is currently being used for allocations of new objects.

@return Template object to use for allocations
@see setTemplate
getString:String

Return a string representation of this ObjectArray.

@return new String instance that holds a string representation of this ObjectArray
get,int index:Object

Return a reference to array element at the given index.

Silently return null if "index" exceeds the array bounds.

@arg index Array index
@return Object reference or null
@see getDeref
getDeref,int index:Object

Return a deletable reference to array element at the given index.

Silently return null if "index" exceeds the array bounds.

Note: The Object will become a non-deletable reference in this array afterwards.

@arg index Array index
@return Array element or null
@see get
@see unlink
unlink,Object o:Object
Return a deletable reference to array element at the given index and remove the element from this array.
Return null if 'o' was not found in this array.
@arg o Object
@return Deletable Object
@see getDeref
indexOfPointer,Object o:int

Return the index of the element that points to the given object.

@arg o The object pointer to look for
@arg startOff Start index
@return Array index or -1 if the object address was not found in this array
@see containsPointer
indexOfObject,Object o:int

Return the index of the element that equals the given object.

@arg o The object to look for
@arg startOff Start index
@return Array index or -1 if no matching object was found in this array
@see containsObject
containsObject,Object o:boolean

Check whether array contains an object that equals the given object.

@arg o The object to compare with. §Object.yacEquals is used for comparisons.
@return true if a matching object was found, false otherwise.
@see indexOfObject
containsPointer,Object o:boolean

Check whether array contains the given object address.

@arg o The object (address) to compare with.
@return true if a matching object was found, false otherwise.
@see indexOfPointer
swap,int indexA,int indexB:boolean

Swap two array elements

@arg indexA Index of first element
@arg indexB Index of second element
@return true if the elements have been swapped successfully, false otherwise.
useAll

Mark all array elements used, i.e. set numElements = maxElements.

getFirst:Object

Return first array element.

@return First array element or null if the array is empty. Objects are returned as non-deletable references.

getLast:Object

Return last used array element.

@return Last used array element (numElements - 1) or null if the array is empty. Objects are returned as non-deletable references.

FloatArray,Object

An arraylist of 32bit floating point values.

@see FloatArray8
@see FloatArray16
@see FloatArray32
@see FloatArray64
@see FloatArray128
alloc,int max:boolean

Allocate the given number of array elements.

The number of used elements, numElements, will be reset to 0.

@arg max New total number of elements
@return true if the allocation succeeded, false otherwise.
@see free
@see realloc
free

Free all array elements.
add,float f:boolean

Add the given float value to this array.

Resize array if necessary.

@arg f Float value
@return true if the value has been added successfully, false otherwise.
@see add2
@see add3
@see add4
@see delete
@see delete2
@see delete3
@see delete4
@see insert
add2,float f1,float f2:boolean

Add the given float values to this array.

Resize array if necessary.

@arg f1 First float value
@arg f2 Second float value
@return true if the values have been added successfully, false otherwise.
@see add
@see add3
@see add4
@see delete
@see delete2
@see delete3
@see delete4
@see insert
add3,float f1,float f2,float f3:boolean

Add the given float values to this array.

Resize array if necessary.

@arg f1 First float value
@arg f2 Second float value
@arg f3 Third float value
@return true if the values have been added successfully, false otherwise.
@see add
@see add2
@see add4
@see delete
@see delete2
@see delete3
@see delete4
@see insert
add4,float f1,float f2,float f3,float f4:boolean

Add the given float values to this array.

Resize array if necessary.

@arg f1 First float value
@arg f2 Second float value
@arg f3 Third float value
@arg f4 Fourth float value
@return true if the values have been added successfully, false otherwise.
@see add
@see add2
@see add3
@see delete
@see delete2
@see delete3
@see delete4
@see insert
addFromARGB32,int argb32:boolean
Add normalized R,G,B,A floats from packed ARGB32 integer.

@arg argb32 Packed ARGB32 color
@return true if the R,G,B,A float values have been added successfully, false otherwise.
addArray,Object array,int off,int len:boolean

Add the given array like object to this array.

Resize array if necessary.

@arg array Array-like object
@arg off Source offset
@arg len Number of elements
@return true if the array has been added successfully, false otherwise.
@see add
@see addEmpty
addEmpty,int num:int

Increase the number of used elements.

This will <b>not</b> resize the array!

@arg num Number of elements to add
@return New number of elements
@see empty
@see setNumElements
getNumElements:int

Return number of used elements.

@return Number of used elements
@see addEmpty
@see empty
@see setNumElements
getMaxElements:int

Return total number of elements.

@return Total number of elements.
@see alloc
@see free
@see realloc
empty

Reset the number of used elements, numElements, to 0.
@see addEmpty
@see setNumElements
isEmpty:boolean

Check if array is empty (numElements == 0).
realloc,int max:boolean

Reallocate array to given size.

Discard/add new elements as required.

@arg max New total number of elements
@return true if the reallocation succeeded, false otherwise.
@see alloc
@see free
@see getMaxElements
insert,int index,float f:boolean

Insert new element before the given index.

Resize the array if required.

@arg index Where to insert the new element
@arg f Value to insert
@return true if the new elements was inserted successfully, false otherwise.
@see add
@see delete
delete,int index:boolean
Delete element at the given index.

@arg index Which element to delete
@return true if the element was deleted, false otherwise.
@see add
@see insert
delete2,int index:boolean
Delete two elements at the given index.

@arg index First element index
@return true if the element has been deleted, false otherwise.
@see add
@see insert
delete3,int index:boolean
Delete three elements at the given index.

@arg index First element index
@return true if the element has been deleted, false otherwise.
@see add
@see insert
delete4,int index:boolean
Delete four elements at the given index.

@arg index First element index
@return true if the element has been deleted, false otherwise.
@see add
@see insert
fill,float f

Set all used elements to the given value.

@arg f Fill value
allocAndFill,int num,float f:boolean

Allocate and set all used array elements to value "f".

@arg num Number of elements
@arg f Fill value
@return true when allocation succeeded
@see fill
@see alloc
fillRegion,int off,int len,float val
Fill a range of elements with a constant value.

The region start/end will be clipped to (0;numElements).

@arg off Start offset (element index)
@arg len Number of elements
@arg val Fill value
@see fill
fillFromARGB32,int argb32
Unpack ARGB32 integer and fill used_elements in R,G,B,A order.

@arg argb32 Packed ARGB32 integer
reverse

Reverse element order
scale,Object src,float s

Read elements from source array, scale by s and write to this array.

Lazy-allocate elements as required.

@todo Use operator =>
@arg a Source array (IntArray or FloatArray)
@arg s Scale factor
setNumElements,int num

Set the number of used elements to the given value.

@arg num New number of used elements
@see addEmpty
@see empty
@see getNumElements
blend,FloatArray b,float weight

Blend with other array and write to this array.

Scale delta (otherValue-thisValue) by "weight" and write to this array.

@arg b Other array
@arg weight Scale factor for deltas. Range is 0..1
@see blendAB
blendAB,FloatArray a,FloatArray b,float weight

Blend two arrays and write to this array.

Scale delta (bValue-aValue) by "weight" and write to this array.

@arg a First array
@arg b Second array
@arg weight Blend factor. Range is 0..1
@see blend
copyFrom,FloatArray src,int off,int len,int destOff

Copy elements from source array.

@arg off Source offset in source array
@arg len Number of elements to copy
@arg destOff Destination offset in this array
read32,Stream ifs,int num,int destOff:int

Read 32bit floating point values from the given input stream.

@arg ifs Input stream
@arg num Number of elements to read
@arg destOff Destination offset in this array
@return Number of elements read
read64,Stream ifs,int num,int destOff:int

Read 64bit floating point values from the given input stream and truncate to 32bit.

@arg ifs Input stream
@arg num Number of elements to read
@arg destOff Destination offset in this array
@return Number of elements read
write32,Stream ofs,int num,int srcOff:int

Write 32bit floating point values to the given output stream.

@arg ofs Output stream
@arg num Number of elements to write
@arg srcOff Source offset in this array
@return Number of elements written
write64,Stream ofs,int num,int srcOff:int

Write 64bit floating point values to the given output stream.

@arg ofs Output stream
@arg num Number of elements to write
@arg srcOff Source offset in this array
@return Number of elements written
getString:String

Return string representation of this array.

@return new String
getString2:String

Return (x;y) pair string representation of this array.

@return new String
getString3:String

Return (x;y;z) tuple string representation of this array.

@return new String
getMin:float

Return smallest element value.

@return Minimum value
@see getMax
@see getAbsMin
@see getAbsMax
getMinIdx:int

Return index of smallest element value.

@return Minimum value index
@see getMin
@see getMax
@see getAbsMin
@see getAbsMax
getMax:float

Return biggest element value.

@return Maximum value
@see getMaxIdx
@see getMin
@see getMinIdx
@see getAbsMin
@see getAbsMax
getMaxIdx:int

Return index of biggest element value.

@return Maximum value index
@see getMax
@see getMin
@see getMinIdx
@see getAbsMin
@see getAbsMax
getAbsMin:float

Return smallest element value, not regarding sign.

@return Minimum value
@see getMin
@see getMinIdx
@see getMax
@see getMaxIdx
@see getAbsMax
getAbsMax:float

Return biggest element value, not regarding sign.

@return Maximum value
@see getMin
@see getMax
@see getAbsMin
getMean:float

Return average element value.

@return Average value
@see getAbsMean
getAbsMean:float

Return average element value, not regarding sign.

@return Average value
@see getMean
getRms:float

Return RMS (root mean square) for all values in the array.

@return RMS
getRmsMax:float

Return maximum RMS (root mean square).

@return Peak RMS
get,int index:float

Return element value at the given index.

Silently return 0.0f if "index" is out of bounds.

@arg index Which element to return
@return Element value
set,int index,float val

Set element at "index" to "val".
Updates numElements when index exceeds it (>=).

Silently do nothing when index exceed array size (>= maxElements).

@arg index Array index
@arg val New value
getRev,int index:float

Return element value at (numElements - 1 - index).

Silently return 0.0f if resulting index is out of bounds.

@arg index Which element to return (starting from numElements)
@return Element value
setRev,int index,float val

Set element at "numElements - 1 - index" to "val".

Silently do nothing when index exceed array size (<0 || >= maxElements).

@arg index Array index (starting from numElements)
@arg val New value
getDefault,int index,float def:float

Return array element at 'index', or return 'def' when index is out of bounds.

@arg index Array index
@arg def Default value (when index is out of bounds)
@return Array element or default value
 contains,float f:boolean

Check whether array contains the given value.

@arg f Element value to look for
@return true if an element with value "f" was found, false otherwise.
indexOf,float f,int off:int

Return index of element with value "f". -1 if no matching element was found.

@arg f Value to look for
@arg off Start index
@return Index of element, -1 if not found.
indexOfNot,float f,int off:int

Return index of element that does not have value "f". -1 if no matching element was found.

@arg f Value to look for
@arg off Start index
@return Index of element, -1 if not found.
fixNaNToZero
Replace NaN values by 0
sortByValue,IntArray order

Sort elements by value and write new element order to the given IntArray.

@arg order Receives the new element order
winLinear,float index:float

Return linear interpolation of elements.

@arg index Element index
@return Interpolated value
@see winCosine
@see winQuadratic
@see winCubic
@see winQuintic
winCosine,float index:float

Return cosine interpolation of elements.

@arg index Element index
@return Interpolated value
@see winLinear
@see winQuadratic
@see winCubic
@see winQuintic
winQuadratic,float index:float

Return quadratic interpolation of elements.

@arg index Element index
@return Interpolated value
@see winLinear
@see winCosine
@see winCubic
@see winQuintic
winCubic,float index:float

Return cubic interpolation of elements.

@arg index Element index
@return Interpolated value
@see winLinear
@see winCosine
@see winQuadratic
@see winQuintic
winQuintic,float index:float

Return quintic interpolation of elements.

@arg index Element index
@return Interpolated value
@see winLinear
@see winCosine
@see winCubic
@see winQuadratic
rearrange,IntArray order:boolean

Rearrange array elements according to the given IntArray.

@arg order Holds the new element array
@return true if the elements have been re-arranged successfully, false otherwise.
swap,int indexA,int indexB:boolean

Swap two array elements.

@arg indexA Index of first element
@arg indexB Index of second element
@return true if the elements have been swapped successfully, false otherwise.
visit,FloatArray src,int off,int len

Create a view into the given FloatArray.

@arg src Source array
@arg off Source offset
@arg len Number of elements
unlinkFrom,FloatArray src

Grab elements from 'src' and transfer elements ownership to this object.

@arg src Source array
useAll

Mark all array elements used, i.e. set numElements = maxElements.

getFirst:float

Return first array element.

@return First array element or 0.0f if the array is empty.

getLast:float

Return last used array element.

@return Last used array element (numElements - 1) or 0.0f if the array is empty.

interleave,int numDestCh,int destCh,FloatArray src,int numSrcCh,int srcCh,int numCh,int numElem
   Copy interleaved elements from multi-channel array.

   @arg numDestCh Number of channels (in this array)
   @arg destCh Destination channel index (in this array)
   @arg src Source buffer
   @arg numSrcCh Number of source channels
   @arg srcCh Source channel index
   @arg numCh Number of channels to copy
   @arg numElem Number of elements/frames to copy
bezierCubicDeCasteljau2d,float x0,float y0,float x1,float y1,float x2,float y2,float x3,float y3,float scaleX,float scaleY,int recMax,float thresholdB,float thresholdP,FloatArray retT
  Calculate bezier curve using the de Casteljau algorithm.

  Note: the array will first be emptied and then filled with the resulting vertices (check numElements afterwards).

@arg x0 Start point x
@arg y0 Start point y
@arg x1 Control point #1 x
@arg y1 Control point #1 y
@arg x2 Control point #2 x
@arg y2 Control point #2 y
@arg x3 End point x
@arg y3 End point y
@arg scaleX x scaling factor
@arg scaleY y scaling factor
@arg recMax recursion limit
@arg thresholdB bendiness threshold (max distance between bezier midpoint and plane (p3-p0 and perpendicular normal)
@arg thresholdP position threshold (max distance between start and end point)
@arg The (non-linear) per-point curve time is returned in this array
findNearestIdx1d,float x,int off,int stride,float maxDist:int
  Find index of x-element that has the smallest distance to point x.

@arg x Point x
@arg off Element start offset
@arg stride Element advance (must be >0)
@arg maxDist Maximum distance
@return Index of element or -1 if the point is too far away
findNearestIdx2d,float x,float y,int off,int stride,float maxDist,float aspect:int
  Treat elements as x/y 2d vectors and find index of x-element that has the smallest distance to point (x,y).

@arg x Point x
@arg y Point y
@arg off Element start offset
@arg stride Element advance (must be >0)
@arg maxDist Maximum distance
@arg aspect Aspect ratio (width/height) of graphical representation
@return Index of element (x-component of 2d vector) or -1 if the point is too far away
sum,int off,int num:float
  Sum elements

@arg off Index of first element
@arg num Number of elements to sum
@return Sum
sumPathLen1d,int off,int num:float
  Sum element deltas

@arg off Index of first element
@arg num Number of elements to sum
@return Path length
sumPathLen2d,int off,int num:float
  Treat elements as x/y 2d vectors and calculate path length.

@arg off Index of first vector (float element offset / 2)
@arg num Number of vectors to sum (number of float elements / 2)
@return Path length
loadFromStreamUnsigned8,Stream s,int num:boolean
  Read unsigned 8bit integers from stream, convert to float and normalize.

@arg Stream Stream to read from
@arg num Number of samples to read
@return true if the samples have been loaded successfully
loadFromStreamSigned16,Stream s,int num:boolean
  Read signed 16bit integers from stream, convert to float and normalize.

@arg Stream Stream to read from
@arg num Number of samples to read
@return true if the samples have been loaded successfully
loadFromStreamSigned24,Stream s,int num:boolean
  Read signed 24bit integers from stream, convert to float and normalize.

@arg Stream Stream to read from
@arg num Number of samples to read
@return true if the samples have been loaded successfully
loadFromStreamFloat32,Stream s,int num:boolean
  Read 24bit IEEE floats from stream.

@arg Stream Stream to read from
@arg num Number of samples to read
@return true if the samples have been loaded successfully
saveToStreamSigned16,Stream s,int numElements:boolean
  Write signed 16bit integers to stream (clip to -32768..+32767)
@arg Stream Stream to write to
@arg numElements Number of values to write. 0=write entire array
@return true if the samples have been written successfully
 saveToStreamSigned12FrameEnc,Stream s,int numElements:boolean
  Write signed 12bit integers to stream (clip to -2048..+2047).
  Encode in 8-value frames (4, 8, 16 bit deltas, or 16bit raw values)
@arg Stream Stream to write to
@arg numElements Number of values to write. 0=write entire array
@return true if the samples have been written successfully
 isEqual,FloatArray o:boolean
  Compare to other array and return true if the array contents are equal.

@arg o Other array
@return true if the array contents are equal
join,Object a,Object b
Join arrays 'a' and 'b'.

@arg a Other array (or this, or null)
@arg b Other array (or this, or null)

@return true if arrays were joined, false if new elements could not be allocated
getAbsMaxDiff,FloatArray o:float
Return absolute maximum difference of 'o' to this array.

@arg o Other array

@return Absolute maximum difference (o - this)
findIdxBefore,float f:int
Find index of last element that is smaller than 'f'.
@arg f
@return index
biquad,FloatArray faIn,int type,float dbGain,float freq,float res
Apply biquad filter to input samples and store result in this array.

Caller must resize this array if necessary.

@arg faIn Input samples (may be the same array)
@arg type Filter type, 1=LPF, 2=HPF, 3=BPF, 4=BRF, 5=PEQ, 6=LSH, 7=HSH
@arg dbGain Gain
@arg freq Cutoff frequency (0..1)
@arg res Resonance (0..1)
mergeArraySkipVal,FloatArray fa,float skipVal
Replace elements in this array by arrays from other array which do not equal 'skipVal'.

@arg fa Other array
@arg skipVal Array value not to be merged
FloatArray8,FloatArray

A §FloatArray that can store 8 elements without (re-)allocation.

@see FloatArray
FloatArray16,FloatArray

A §FloatArray that can store 16 elements without (re-)allocation.

@see FloatArray
FloatArray32,FloatArray

A §FloatArray that can store 32 elements without (re-)allocation.

@see FloatArray
FloatArray64,FloatArray

A §FloatArray that can store 64 elements without (re-)allocation.

@see FloatArray
FloatArray128,FloatArray

A §FloatArray that can store 128 elements without (re-)allocation.

@see FloatArray
StringArray,Object

An arraylist of Strings.

@see String
alloc,int max:boolean

Allocate the given number of array elements.

All previous elements will be discarded.
The number of used elements, numElements, will be reset to 0.

@arg max Total number of elements to allocate
@return true if the allocation succeeded, false otherwise.
@see free
@see getMaxElements
@see realloc
free

Free all array elements.
@see alloc
@see getMaxElements
@see realloc
add,String s:boolean

Add a copy of the given string to this arraylist.

The array will be resized as required.

@arg s The string to append to this arraylist
@return true if the String has been added successfully, false otherwise
@see delete
@see insert
addEmpty,int num:int

Increase the number of used elements.

This method will <b>not</b> reallocate the array.

@arg num Number of elements to add
@return New number of used elements.
@see empty
@see getNumElements
@see setNumElements
remove,String s:boolean

Remove the given string from the arraylist.

The array will be searched for an entry matching the given String content.

@arg s The String to remove.
@return true if the string has been removed successfully, false otherwise.
@see add
@see delete
@see insert
getNumElements:int

Return the number of used elements.

@return Number of used array elements
@see addEmpty
@see empty
@see setNumElements
getMaxElements:int

Return the total number of elements

@return Total number of array elements
@see alloc
@see free
@see realloc
empty

Reset the number of used elements, numElements, to 0.
@see addEmpty
@see getNumElements
@see setNumElements
isEmpty:boolean

Check if array is empty (numElements == 0).
realloc,int max:boolean

Reallocate array.

Discard/add elements as required.

@arg max Total number of elements
@return true if the array has been reallocated successfully, false otherwise.
@see alloc
@see free
@see getMaxElements
insert,int index,String s:boolean

Insert a copy of the given String into this array.

@arg index Where to insert the new element
@arg s Which string to insert
@return true if the String has been inserted successfully, false otherwise.
@see add
@see delete
delete,int index:boolean

Delete element at the given index.

@arg index Which element to delete
@return true if the element has been deleted successfully, false otherwise.
@see add
@see insert
unset

Empty all Strings
reverse

Reverse element order.
getNextFree:String

Return next free String.

Increase numElements.

@return Reference to next String or null if array is full.
@see empty
@see addEmpty
@see getNumElements
@see setNumElements
setNumElements,int num

Set number of used elements.

@arg num New number of used elements
@see empty
@see addEmpty
@see getNextFree
@see getNumElements
sortByLength,IntArray order

Sort strings by length and write new element order to "order".

@arg order Receives the new element order
@see sortByValue
@see rearrange
sortByValue,IntArray order,boolean bCaseSensitive

Sort strings by content and write new element order to "order".

@arg order Receives the new element order
@arg bCaseSensitive if true, sort case-sensitive, otherwise sort case-insensitive.
@see sortByLength
@see rearrange
getString:String

Return string representation of this array.

@return new String instance holding a string representation of this array.
get,int index:String

Return a reference to an array element.

Silently return null if the given index is out of bounds.

@arg int Array index
@return Reference to String object
@see getCopy
set,int index,String val

Set element at "index" to "val".
Updates numElements when index exceeds it (>=).

Silently do nothing when index exceed array size (>= maxElements).

@arg index Array index
@arg val New value
getRev,int index:String

Return a reference to array element at (numElements - 1 - index).

Silently return null if the given index is out of bounds.

@arg int Array index
@return Reference to String object
@see getCopy
setRev,int index,String val

Set element at (numElements - 1 -index) to "val".

Silently do nothing when index exceed array size (>= maxElements).

@arg index Array index
@arg val New value
getCopy,int index:String

Return a copy of an array element.

@arg index Array index
@return new String object holding a copy of the given array element.
@see get
getDefault,int index:var

Return a reference to the array element at 'index', or return 'valOrVO' when index is out of bounds.

If 'valOrVO' is a §Value object, take the ownership of the stored object and return it.

@arg index Array index
@return Array element or default value
 indexOfPointer,Object o:int

Return the index of the element that points to the given object.

@arg o The object pointer to look for
@arg startOff Start index
@return Array index or -1 if the object address was not found in this array
@see containsPointer
indexOfObject,Object o:int

Return the index of the element that equals the given object.

@arg o The object to look for
@arg startOff Start index
@return Array index or -1 if no matching object was found in this array
@see containsObject
containsObject,String s:boolean

Check whether this array contains the given String. @yacEquals is used to compare to the given string.

@arg s String to look for
@return true if the String was found, false otherwise.
@see indexOfObject
containsPointer,String s:boolean

Check whether this array contains the given String address.

@arg s String address to look for
@return true if the String address was found, false otherwise.
rearrange,IntArray order:boolean

Rearrange array elements according to given order array.

@arg order Holds the new element order
@return true if the elements have been reordered successfully, false otherwise.
@see sortByLength
@see sortByValue
swap,int indexA,int indexB:boolean

Swap two array elements.

@arg indexA Index of first element
@arg indexB Index of second element
@return true if the elements have been swapped successfully, false otherwise.
useAll

Mark all array elements used, i.e. set numElements = maxElements.

getFirst:Object

Return first array element.

@return First array element or null if the array is empty. Objects are returned as non-deletable references.

getLast:Object

Return last used array element.

@return Last used array element (numElements - 1) or null if the array is empty. Objects are returned as non-deletable references.

join,Object a,Object b
Join arrays 'a' and 'b'.

@arg a Other array (or this, or null)
@arg b Other array (or this, or null)

@returns True if arrays were joined. False if new elements could not be allocated.
getMaxChars:int
Return maximum string length (not counting ASCIIZ).

@return max string length w/o ASCIIz
mergeToString,String separatorOrNull:String
Merge all strings into one and optionally insert separator string between the elements.

No separator will be inserted before the first or after the last element.

@arg separatorOrNull optional separator §String
@return merged §String
ClassArray,Object

Array of scriptclass instances.

@see Class
alloc,int max:boolean

Allocate the given number of array elements.

The number of used element, numElements, will be reset to 0.

@arg max Total number of elements.
@return true if the allocation succeeded, false otherwise.
@see free
@see realloc
@see getMaxElements
free

Free array elements.
@see alloc
@see getMaxElements
@see realloc
realloc,int max:boolean

Reallocate array elements.

Discard/add new elements as required.

@arg max Total number of elements
@return true if the reallocation succeeded, false otherwise.
@see alloc
@see free
@see getMaxElements
getNumElements:int

Return number of used elements.

@return Number of used elements
@see getNextFree
@see empty
@see setNumElements
getMaxElements:int

Return total number of elements.

@return Total number of elements.
@see alloc
@see free
@see realloc
empty

Reset number of used elements, numElements, to 0.
@see getNumElements
@see setNumElements
isEmpty:boolean

Check if array is empty (numElements == 0).
reverse

Reverse element order.
getNextFree:Class

Return next free element.

Increase the number of used elements, numElements.

@return next free Class instance or null if the arraylist is full.
@see empty
@see getNumElements
@see setNumElements
setNumElements,int num

Set number of used elements.

@arg num New number of used elements.
@see empty
@see getNextFree
@see getNumElements
add,Class c:boolean

Add the given scriptclass instance to this array.

The array will be resized if necessary.

@arg c Scriptclass instance to add. If c is a §Value object, try to release the scriptclass instance pointer from the value container.
@return true if the scriptclass instance has been added successfully, false otherwise.
@see delete
@see insert
@see remove
remove,Class c:boolean

Delete the first element whose pointer equals the given scriptclass instance.

@arg c Scriptclass instance pointer to look for.
@return true if the given pointer was found and the corresponding array element has been removed, false otherwise.
insert,int index,Class c:boolean

Insert the given scriptclass instance into the array.

@arg index Where to insert the scriptclass instance
@arg c Scriptclass instance to insert. If c is a §Value object, try to release the scriptclass instance pointer from the value container.
@return true if the scriptclassinstance has been inserted successfully, false otherwise.
@see add
@see delete
@see remove
delete,int index:boolean

Delete the given array element.

@arg index Which element to delete
@return true if the given element has been deleted successfully, false otherwise.
@see add
@see insert
@see remove
get,int index:Class

Return the given array element.

Silently return null if "index" is out of bounds.

@arg index Which element to return
@return Scriptclass instance
@see getDeref
getDeref,int index:Class

Unlink and return the given (deletable) array element.

@arg index Which element to return
@return (deletable) Scriptclass instance
@see get
unlink,Object o:Object
Return a deletable reference to array element at the given index and remove the element from this array.
Return null if 'o' was not found in this array.
@arg o Object
@return Deletable Object
@see getDeref
contains,Class c:boolean

Check whether this array contains a scriptclass instance that equals the given object.

@arg c Scriptclass instance to compare to
@return true if the given scriptclass instance was found, false otherwise.
getTemplate:Class

Return the template object that is currently being used to allocate new array elements.

@return Scriptclass (instance)
@see setTemplate
setTemplate,Class sci

Set the template object that shall be used to allocate new array elements.
@see getTemplate
swap,int indexA,int indexB:boolean

Swap two array elements.

@arg indexA Index of first array element
@arg indexB index of second array element
@return true if the elements have been swapped successfully, false otherwise.
indexOfPointer,Object o:int

Return the index of the element that points to the given object.

@arg o The object pointer to look for
@arg startOff Start index
@return Array index or -1 if the object address was not found in this array
@see containsPointer
indexOfObject,Object o:int

Return the index of the element that equals the given object.

@arg o The object to look for
@arg startOff Start index
@return Array index or -1 if no matching object was found in this array
@see containsObject
containsObject,Object o:boolean

Check whether array contains an object that equals the given object.

@arg o The object to compare with. §Object.yacEquals is used for comparisons.
@return true if a matching object was found, false otherwise.
@see indexOfObject
containsPointer,Object o:boolean

Check whether array contains the given object address.

@arg o The object (address) to compare with.
@return true if a matching object was found, false otherwise.
@see indexOfPointer
getFirst:Object

Return first array element.

@return First array element or null if the array is empty. Objects are returned as non-deletable references.

getLast:Object

Return last used array element.

@return Last used array element (numElements - 1) or null if the array is empty. Objects are returned as non-deletable references.

useAll

Mark all array elements used, i.e. set numElements = maxElements.

PointerArray,Object

An heterogenous array of objects.

A "deleteme" flag is stored with each element.

Object class types may be arbitrarily mixed.

@see ObjectArray
add,Object o:boolean

Add the given object to the arraylist.

The array will be resized as required.

@arg o The object to add to the arraylist. If o is a §Value object, the contained (deletable) object will be released from the Value container.
@return true if the object has been added successfully, false otherwise.
@see delete
@see insert
@see remove
remove,Object o:boolean

Remove the given object from the arraylist.

The array will be searched for an entry matching the given object address.

@arg o The object to remove.
@return true if the object has been removed successfully, false otherwise.
@see add
@see delete
@see insert
insert,int index,Object o:boolean

Insert the given object into the arraylist.

The array will be resized as required.

@arg index Where to insert the object
@arg o The object to add. If "o" is a §Value object, the contained (deletable) object will be released from the Value container.
@return true if the object has been inserted successfully, false otherwise.
@see add
@see delete
@see remove
delete,int index

Delete the element at the given index.

@arg index Which element to delete
@return true if the elements has been deleted successfully, false otherwise.
@see add
@see insert
@see remove
alloc,int max:boolean

Allocate the given number of array elements.

The number of used elements, numElements, will be reset to 0.

@arg max Total number of elements to allocate.
@return true if the allocation succeeded, false otherwise.
@see free
@see realloc
@see getMaxElements
free

Free array elements and reset array size (num/max).
@see unsetAll
@see alloc
@see getMaxElements
@see realloc
unsetAll
Unset (free) all elements but keep array size (num/max).

@see free
realloc,int max:boolean

Resize array.

Element will be discarded/added as required.

@arg max New total number of elements.
@return true if the reallocation succeeded, false otherwise.
@see alloc
@see free
@see getMaxElements
getNumElements:int

Return the number of used elements.

@return Number of used elements
@see empty
@see setNumElements
getMaxElements:int

Return the total number of elements.

@return Total number of elements.
@see alloc
@see free
@see realloc
empty

Reset the number of used elements, numElements, to 0.

This will reset the number of used elements, numElements, back to 0.
@see getNumElements
@see setNumElements
isEmpty:boolean

Check if array is empty (numElements == 0).
reverse

Reverse element order.
setNumElements,int num

Set the number of used elements.

This will <b>not</b> reallocate the array.

@arg num New number of used elements
@see empty
@see getNextFree
@see getNumElements
getString:String

Return a string representation of this array.

@return new String instance holding a string representation of this array.
get,int index:Object

Return a reference to the given array element.

This will silently return null if "index" is out of bounds.

@arg index Which element to return
@return Reference to array element.
@see getDeref
getRev,int index:Object

Return element value at (numElements - 1 - index).

Silently return null if resulting index is out of bounds.

@arg index Which element to return (starting from numElements-1)
@return Element value
getDeref,int index:Object

Return a (deletable) reference to the given array element.

This will silently return null if "index" is out of bounds.

@arg index Which element to return
@return (deletable) reference to array element
@see get
unlink,Object o:Object
Return a deletable reference to array element at the given index and remove the element from this array.
Return null if 'o' was not found in this array.
@arg o Object
@return Deletable Object
@see getDeref
indexOfPointer,Object o:int

Return the index of the element that points to the given object.

@arg o The object pointer to look for
@arg startOff Start index
@return Array index or -1 if the object address was not found in this array
@see containsPointer
indexOfObject,Object o:int

Return the index of the element that equals the given object.

@arg o The object to look for
@arg startOff Start index
@return Array index or -1 if no matching object was found in this array
@see containsObject
containsObject,Object o:boolean

Check whether array contains an object that equals the given object.

@arg o The object to compare with. §Object.yacEquals is used for comparisons.
@return true if a matching object was found, false otherwise.
@see indexOfObject
containsPointer,Object o:boolean

Check whether array contains the given object address.

@arg o The object (address) to compare with.
@return true if a matching object was found, false otherwise.
@see indexOfPointer
getNextFree:Object

Return a reference to the next free array element.

This will increase the number of used elements, numElements.

@return Reference to next free element.
@see empty
@see getNumElements
@see setNumElements
swap,int indexA,int indexB:boolean

Swap two array elements.

@arg indexA Index of first element
@arg indexB Index of second element
@return true if the elements have been swapped successfully, false otherwise.
useAll

Mark all array elements used, i.e. set numElements = maxElements.

getFirst:Object

Return first array element.

@return First array element or null if the array is empty. Objects are returned as non-deletable references.

getLast:Object

Return last used array element.

@return Last used array element (numElements - 1) or null if the array is empty. Objects are returned as non-deletable references.

rearrange,IntArray order:boolean

Reorder elements according to given element order.

@arg order New element order
@return true if elements have been reordered successfully, false otherwise.
joinArrays,Object a,Object b,boolean bCopyA,boolean bCopyB,boolean bUnlinkA,boolean bUnlinkB:boolean

Join arrays 'a' and 'b'.

If none of the copy/unlink flags is set, object values will be copied by reference.

In case that 'a' or 'b' is 'this', object values will always be unlinked ("deref").

The §joinCC, §joinCR, §joinCD, §joinRR, §joinRC, §joinRC, §joinRD, §joinDD, §joinDC, §joinDC are provided
for reasons of convenience (permutations of the copyA/copyB/unlinkA/unlinkB arguments).

(C=copy, R=reference, D=deref (unlink))

@arg a Other array (or this, or null)
@arg b Other array (or this, or null)
@arg bCopyA If true, copy/duplicate array 'a' object values
@arg bCopyB If true, copy/duplicate array 'b' object values
@arg bUnlinkA If true, unlink object values from array 'a'. Takes precedence over bCopyA.
@arg bUnlinkB If true, unlink object values from array 'b'. Takes precedence over bCopyA.

@return True if arrays were joined. False when new array elements could not be allocated.
joinCC,Object a,Object b:boolean
Join arrays a and b. Copy elements.
   joinCR,Object a,Object b:boolean
Join arrays a and b. Copy 'A' elements, reference 'B' elements.
   joinCD,Object a,Object b:boolean
Join arrays a and b. Copy 'A' elements, dereference 'B' elements.
   joinRR,Object a,Object b:boolean
Join arrays a and b. Reference elements.
   joinRC,Object a,Object b:boolean
Join arrays a and b. Reference 'A' elements, copy 'B' elements.
   joinRD,Object a,Object b:boolean
Join arrays a and b. Reference 'A' elements, dereference 'B' elements.
   joinDD,Object a,Object b:boolean
Join arrays a and b. Dereference elements.
   joinDC,Object a,Object b:boolean
Join arrays a and b. Dereference 'A' elements, copy 'B' elements.
   joinDR,Object a,Object b:boolean
Join arrays a and b. Dereference 'A' elements, reference 'B' elements.
   isFirst,Object o:boolean
Check if 'o' is the first element in this array.
   isLast,Object o:boolean
Check if 'o' is the last element in this array.
   Boolean,Object

A number object that wraps a boolean 1bit integer value.

@see Byte
@see Double
@see Float
@see Integer
@see Long
@see Short
@see UnsignedByte
@see UnsignedInteger
@see UnsignedLong
@see UnsignedShort
operator&nbsp;unary!:Boolean
Logical not
@return new Boolean object holding the result
operator&nbsp;unary~:Boolean
Bitwise not
@return new Boolean object holding the result
operator&nbsp;+,boolean v:Boolean
Add the given value
@arg v Addend
@return new Boolean object holding the result
operator&nbsp;-,boolean v:Boolean
Subtract the given value
@arg v Minuend
@return new Boolean object holding the result
operator&nbsp;*,boolean v:Boolean
Multiply by the given value
@arg v Factor
@return new Boolean object holding the result
operator&nbsp;/,boolean v:Boolean
Divide by the given value
@arg v Dividend
@return new Boolean object holding the result
operator&nbsp;&#38;,boolean v:Boolean
Calculate reminder of this divided by the given value
@arg v Dividend
@return new Boolean object holding the result
operator&nbsp;&lt;&lt;,boolean v:Boolean
Logical shift left
@arg v How many bits to shift left
@return new Boolean object holding the result
operator&nbsp;&gt;&gt;,boolean v:Boolean
Logical shift right
@arg v How many bits to shift right
@return new Boolean object holding the result
operator&nbsp;==,boolean v:boolean
Compare to the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;!=,boolean v:boolean
Check whether the given value does not equal this value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;=,boolean v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;,boolean v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;=,boolean v:boolean
Check whether this value is equal to or greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;,boolean v:boolean
Check whether this value is greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&amp;,boolean v:Boolean
Bitwise AND
@arg v Right-hand side operand
@return new Boolean object holding the result
operator&nbsp;|,boolean v:Boolean
Bitwise OR
@arg v Right-hand side operand
@return new Boolean object holding the result
operator&nbsp;^,boolean v:Boolean
Bitwise EOR/XOR (exclusive or)
@arg v Right-hand side operand
@return new Boolean object holding the result
operator&nbsp;&amp;&amp;,boolean v:boolean
Logical AND
@arg v Right-hand side operand
@return Result value
operator&nbsp;||,boolean v:boolean
Logical OR
@arg v Right-hand side operand
@return Result value
operator&nbsp;^^,boolean v:boolean
Logical EOR/XOR (exclusive OR)
@arg v Right-hand side operand
@return Result value
setValue,boolean v

Set a new value.

@arg v The new value
@see getValue
getValue:boolean

Return the current value.

@return Current value
@see setValue
getString:String

Return a string representation of this number object.

@return a new §String instance holding a string representation of this number object
New,boolean v:Boolean

Create a new Boolean object and initialize it with the given value.

@arg v The value to assign the new object
@return new Boolean object
News,String s:Boolean

Create a new Boolean object and initialize it with the given String.

The §String will be converted to an integer number before assignment.

The strings "true","1" and "false","0" will map to 1 resp. 0.

@return new Boolean object
UnsignedByte,Object

A number object that wraps an unsigned 8bit integer value.

@see Boolean
@see Byte
@see Double
@see Float
@see Integer
@see Long
@see Short
@see UnsignedInteger
@see UnsignedLong
@see UnsignedShort
operator&nbsp;unary-:UnsignedByte
Negate value
@return new UnsignedByte object holding the result
operator&nbsp;unary!:UnsignedByte
Logical not
@return new UnsignedByte object holding the result
operator&nbsp;unary~:UnsignedByte
Bitwise not
@return new UnsignedByte object holding the result
operator&nbsp;+,int v:UnsignedByte
Add the given value
@arg v Addend
@return new UnsignedByte object holding the result
operator&nbsp;-,int v:UnsignedByte
Subtract the given value
@arg v Minuend
@return new UnsignedByte object holding the result
operator&nbsp;*,int v:UnsignedByte
Multiply by the given value
@arg v Factor
@return new UnsignedByte object holding the result
operator&nbsp;/,int v:UnsignedByte
Divide by the given value
@arg v Dividend
@return new UnsignedByte object holding the result
operator&nbsp;&#38;,int v:UnsignedByte
Calculate reminder of this divided by the given value
@arg v Dividend
@return new UnsignedByte object holding the result
operator&nbsp;&lt;&lt;,int v:UnsignedByte
Logical shift left
@arg v How many bits to shift left
@return new UnsignedByte object holding the result
operator&nbsp;&gt;&gt;,int v:UnsignedByte
Logical shift right
@arg v How many bits to shift right
@return new UnsignedByte object holding the result
operator&nbsp;==,int v:boolean
Compare to the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;!=,int v:boolean
Check whether the given value does not equal this value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;=,int v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;,int v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;=,int v:boolean
Check whether this value is equal to or greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;,int v:boolean
Check whether this value is greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&amp;,int v:UnsignedByte
Bitwise AND
@arg v Right-hand side operand
@return new UnsignedByte object holding the result
operator&nbsp;|,int v:UnsignedByte
Bitwise OR
@arg v Right-hand side operand
@return new UnsignedByte object holding the result
operator&nbsp;^,int v:UnsignedByte
Bitwise EOR/XOR (exclusive or)
@arg v Right-hand side operand
@return new UnsignedByte object holding the result
operator&nbsp;&amp;&amp;,int v:boolean
Logical AND
@arg v Right-hand side operand
@return Result value
operator&nbsp;||,int v:boolean
Logical OR
@arg v Right-hand side operand
@return Result value
operator&nbsp;^^,int v:boolean
Logical EOR/XOR (exclusive OR)
@arg v Right-hand side operand
@return Result value
setValue,byte v

Set a new value.

@arg v The new value
@see getValue
getValue:byte

Return the current value.

@return Current value
@see setValue
printf,String fmt:String

Return a string representation of this number object that is formatted using the given ANSI-C format string.

@arg fmt ANSI-C style format string.
@return new String instance holding a formatted string representation of this number object.
getString:String

Return a string representation of this number object.

@return a new §String instance holding a string representation of this number object
New,byte v:UnsignedByte

Create a new UnsignedByte object and initialize it with the given value.

@arg v The value to assign the new object
@return new UnsignedByte object
Byte,Object

A number object that wraps a signed 8bit integer value.

@see Boolean
@see Double
@see Float
@see Integer
@see Long
@see Short
@see UnsignedByte
@see UnsignedInteger
@see UnsignedLong
@see UnsignedShort
operator&nbsp;unary-:Byte
Negate value
@return new Byte object holding the result
operator&nbsp;unary!:Byte
Logical not
@return new Byte object holding the result
operator&nbsp;unary~:Byte
Bitwise not
@return new Byte object holding the result
operator&nbsp;+,int v:Byte
Add the given value
@arg v Addend
@return new Byte object holding the result
operator&nbsp;-,int v:Byte
Subtract the given value
@arg v Minuend
@return new Byte object holding the result
operator&nbsp;*,int v:Byte
Multiply by the given value
@arg v Factor
@return new Byte object holding the result
operator&nbsp;/,int v:Byte
Divide by the given value
@arg v Dividend
@return new Byte object holding the result
operator&nbsp;&#38;,int v:Byte
Calculate reminder of this divided by the given value
@arg v Dividend
@return new Byte object holding the result
operator&nbsp;&lt;&lt;,int v:Byte
Logical shift left
@arg v How many bits to shift left
@return new Byte object holding the result
operator&nbsp;&gt;&gt;,int v:Byte
Logical shift right
@arg v How many bits to shift right
@return new Byte object holding the result
operator&nbsp;==,int v:boolean
Compare to the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;!=,int v:boolean
Check whether the given value does not equal this value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;=,int v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;,int v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;=,int v:boolean
Check whether this value is equal to or greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;,int v:boolean
Check whether this value is greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&amp;,int v:Byte
Bitwise AND
@arg v Right-hand side operand
@return new Byte object holding the result
operator&nbsp;|,int v:Byte
Bitwise OR
@arg v Right-hand side operand
@return new Byte object holding the result
operator&nbsp;^,int v:Byte
Bitwise EOR/XOR (exclusive or)
@arg v Right-hand side operand
@return new Byte object holding the result
operator&nbsp;&amp;&amp;,int v:boolean
Logical AND
@arg v Right-hand side operand
@return Result value
operator&nbsp;||,int v:boolean
Logical OR
@arg v Right-hand side operand
@return Result value
operator&nbsp;^^,int v:boolean
Logical EOR/XOR (exclusive OR)
@arg v Right-hand side operand
@return Result value
setValue,byte v

Set a new value.

@arg v The new value
@see getValue
getValue:byte

Return the current value.

@return Current value
@see setValue
printf,String fmt:String

Return a string representation of this number object that is formatted using the given ANSI-C format string.

@arg fmt ANSI-C style format string.
@return new String instance holding a formatted string representation of this number object.
getString:String

Return a string representation of this number object.

@return a new §String instance holding a string representation of this number object
New,byte v:Byte

Create a new Byte object and initialize it with the given value.

@arg v The value to assign the new object
@return new Byte object
UnsignedShort,Object

A number object that wraps an unsigned 16bit integer value.

@see Boolean
@see Byte
@see Double
@see Float
@see Integer
@see Long
@see Short
@see UnsignedByte
@see UnsignedInteger
@see UnsignedLong
operator&nbsp;unary-:UnsignedShort
Negate value
@return new UnsignedShort object holding the result
operator&nbsp;unary!:UnsignedShort
Logical not
@return new UnsignedShort object holding the result
operator&nbsp;unary~:UnsignedShort
Bitwise not
@return new UnsignedShort object holding the result
operator&nbsp;+,int v:UnsignedShort
Add the given value
@arg v Addend
@return new UnsignedShort object holding the result
operator&nbsp;-,int v:UnsignedShort
Subtract the given value
@arg v Minuend
@return new UnsignedShort object holding the result
operator&nbsp;*,int v:UnsignedShort
Multiply by the given value
@arg v Factor
@return new UnsignedShort object holding the result
operator&nbsp;/,int v:UnsignedShort
Divide by the given value
@arg v Dividend
@return new UnsignedShort object holding the result
operator&nbsp;&#38;,int v:UnsignedShort
Calculate reminder of this divided by the given value
@arg v Dividend
@return new UnsignedShort object holding the result
operator&nbsp;&lt;&lt;,int v:UnsignedShort
Logical shift left
@arg v How many bits to shift left
@return new UnsignedShort object holding the result
operator&nbsp;&gt;&gt;,int v:UnsignedShort
Logical shift right
@arg v How many bits to shift right
@return new UnsignedShort object holding the result
operator&nbsp;==,int v:boolean
Compare to the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;!=,int v:boolean
Check whether the given value does not equal this value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;=,int v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;,int v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;=,int v:boolean
Check whether this value is equal to or greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;,int v:boolean
Check whether this value is greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&amp;,int v:UnsignedShort
Bitwise AND
@arg v Right-hand side operand
@return new UnsignedShort object holding the result
operator&nbsp;|,int v:UnsignedShort
Bitwise OR
@arg v Right-hand side operand
@return new UnsignedShort object holding the result
operator&nbsp;^,int v:UnsignedShort
Bitwise EOR/XOR (exclusive or)
@arg v Right-hand side operand
@return new UnsignedShort object holding the result
operator&nbsp;&amp;&amp;,int v:boolean
Logical AND
@arg v Right-hand side operand
@return Result value
operator&nbsp;||,int v:boolean
Logical OR
@arg v Right-hand side operand
@return Result value
operator&nbsp;^^,int v:boolean
Logical EOR/XOR (exclusive OR)
@arg v Right-hand side operand
@return Result value
setValue,short v

Set a new value.

@arg v The new value
@see getValue
getValue:short

Return the current value.

@return Current value
@see setValue
printf,String fmt:String

Return a string representation of this number object that is formatted using the given ANSI-C format string.

@arg fmt ANSI-C style format string.
@return new String instance holding a formatted string representation of this number object.
getString:String

Return a string representation of this number object.

@return a new §String instance holding a string representation of this number object
New,short v:UnsignedShort

Create a new UnsignedShort object and initialize it with the given value.

@arg v The value to assign the new object
@return new UnsignedShort object
Short,Object

A number object that wraps a signed 16bit integer value.

@see Boolean
@see Byte
@see Double
@see Float
@see Integer
@see Long
@see UnsignedByte
@see UnsignedInteger
@see UnsignedLong
@see UnsignedShort
operator&nbsp;unary-:Short
Negate value
@return new Short object holding the result
operator&nbsp;unary!:Short
Logical not
@return new Short object holding the result
operator&nbsp;unary~:Short
Bitwise not
@return new Short object holding the result
operator&nbsp;+,int v:Short
Add the given value
@arg v Addend
@return new Short object holding the result
operator&nbsp;-,int v:Short
Subtract the given value
@arg v Minuend
@return new Short object holding the result
operator&nbsp;*,int v:Short
Multiply by the given value
@arg v Factor
@return new Short object holding the result
operator&nbsp;/,int v:Short
Divide by the given value
@arg v Dividend
@return new Short object holding the result
operator&nbsp;&#38;,int v:Short
Calculate reminder of this divided by the given value
@arg v Dividend
@return new Short object holding the result
operator&nbsp;&lt;&lt;,int v:Short
Logical shift left
@arg v How many bits to shift left
@return new Short object holding the result
operator&nbsp;&gt;&gt;,int v:Short
Logical shift right
@arg v How many bits to shift right
@return new Short object holding the result
operator&nbsp;==,int v:boolean
Compare to the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;!=,int v:boolean
Check whether the given value does not equal this value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;=,int v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;,int v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;=,int v:boolean
Check whether this value is equal to or greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;,int v:boolean
Check whether this value is greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&amp;,int v:Short
Bitwise AND
@arg v Right-hand side operand
@return new Short object holding the result
operator&nbsp;|,int v:Short
Bitwise OR
@arg v Right-hand side operand
@return new Short object holding the result
operator&nbsp;^,int v:Short
Bitwise EOR/XOR (exclusive or)
@arg v Right-hand side operand
@return new Short object holding the result
operator&nbsp;&amp;&amp;,int v:boolean
Logical AND
@arg v Right-hand side operand
@return Result value
operator&nbsp;||,int v:boolean
Logical OR
@arg v Right-hand side operand
@return Result value
operator&nbsp;^^,int v:boolean
Logical EOR/XOR (exclusive OR)
@arg v Right-hand side operand
@return Result value
setValue,short v

Set a new value.

@arg v The new value
@see getValue
getValue:short

Return the current value.

@return Current value
@see setValue
printf,String fmt:String

Return a string representation of this number object that is formatted using the given ANSI-C format string.

@arg fmt ANSI-C style format string.
@return new String instance holding a formatted string representation of this number object.
getString:String

Return a string representation of this number object.

@return a new §String instance holding a string representation of this number object
New,short v:Short

Create a new Short object and initialize it with the given value.

@arg v The value to assign the new object
@return new Short object
UnsignedInteger,Object

A number object that wraps an unsigned 32bit integer value.

@see Boolean
@see Byte
@see Double
@see Float
@see Integer
@see Long
@see Short
@see UnsignedByte
@see UnsignedLong
@see UnsignedShort
operator&nbsp;unary-:UnsignedInteger
Negate value
@return new UnsignedInteger object holding the result
operator&nbsp;unary!:UnsignedInteger
Logical not
@return new UnsignedInteger object holding the result
operator&nbsp;unary~:UnsignedInteger
Bitwise not
@return new UnsignedInteger object holding the result
operator&nbsp;+,int v:UnsignedInteger
Add the given value
@arg v Addend
@return new UnsignedInteger object holding the result
operator&nbsp;-,int v:UnsignedInteger
Subtract the given value
@arg v Minuend
@return new UnsignedInteger object holding the result
operator&nbsp;*,int v:UnsignedInteger
Multiply by the given value
@arg v Factor
@return new UnsignedInteger object holding the result
operator&nbsp;/,int v:UnsignedInteger
Divide by the given value
@arg v Dividend
@return new UnsignedInteger object holding the result
operator&nbsp;&#38;,int v:UnsignedInteger
Calculate reminder of this divided by the given value
@arg v Dividend
@return new UnsignedInteger object holding the result
operator&nbsp;&lt;&lt;,int v:UnsignedInteger
Logical shift left
@arg v How many bits to shift left
@return new UnsignedInteger object holding the result
operator&nbsp;&gt;&gt;,int v:UnsignedInteger
Logical shift right
@arg v How many bits to shift right
@return new UnsignedInteger object holding the result
operator&nbsp;==,int v:boolean
Compare to the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;!=,int v:boolean
Check whether the given value does not equal this value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;=,int v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;,int v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;=,int v:boolean
Check whether this value is equal to or greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;,int v:boolean
Check whether this value is greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&amp;,int v:UnsignedInteger
Bitwise AND
@arg v Right-hand side operand
@return new UnsignedInteger object holding the result
operator&nbsp;|,int v:UnsignedInteger
Bitwise OR
@arg v Right-hand side operand
@return new UnsignedInteger object holding the result
operator&nbsp;^,int v:UnsignedInteger
Bitwise EOR/XOR (exclusive or)
@arg v Right-hand side operand
@return new UnsignedInteger object holding the result
operator&nbsp;&amp;&amp;,int v:boolean
Logical AND
@arg v Right-hand side operand
@return Result value
operator&nbsp;||,int v:boolean
Logical OR
@arg v Right-hand side operand
@return Result value
operator&nbsp;^^,int v:boolean
Logical EOR/XOR (exclusive OR)
@arg v Right-hand side operand
@return Result value
setValue,int v

Set a new value.

@arg v The new value
@see getValue
getValue:int

Return the current value.

@return Current value
@see setValue
printf,String fmt:String

Return a string representation of this number object that is formatted using the given ANSI-C format string.

@arg fmt ANSI-C style format string.
@return new String instance holding a formatted string representation of this number object.
getString:String

Return a string representation of this number object.

@return a new §String instance holding a string representation of this number object
New,int v:UnsignedInteger

Create a new UnsignedInteger object and initialize it with the given value.

@arg v The value to assign the new object
@return new UnsignedInteger object
Integer,Object

A number object that wraps a signed 32bit integer value.

@see Boolean
@see Byte
@see Double
@see Float
@see Long
@see Short
@see UnsignedByte
@see UnsignedInteger
@see UnsignedLong
@see UnsignedShort
operator&nbsp;unary-:Integer
Negate value
@return new Integer object holding the result
operator&nbsp;unary!:Integer
Logical not
@return new Integer object holding the result
operator&nbsp;unary~:Integer
Bitwise not
@return new Integer object holding the result
operator&nbsp;+,int v:Integer
Add the given value
@arg v Addend
@return new Integer object holding the result
operator&nbsp;-,int v:Integer
Subtract the given value
@arg v Minuend
@return new Integer object holding the result
operator&nbsp;*,int v:Integer
Multiply by the given value
@arg v Factor
@return new Integer object holding the result
operator&nbsp;/,int v:Integer
Divide by the given value
@arg v Dividend
@return new Integer object holding the result
operator&nbsp;&#38;,int v:Integer
Calculate reminder of this divided by the given value
@arg v Dividend
@return new Integer object holding the result
operator&nbsp;&lt;&lt;,int v:Integer
Logical shift left
@arg v How many bits to shift left
@return new Integer object holding the result
operator&nbsp;&gt;&gt;,int v:Integer
Logical shift right
@arg v How many bits to shift right
@return new Integer object holding the result
operator&nbsp;==,int v:boolean
Compare to the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;!=,int v:boolean
Check whether the given value does not equal this value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;=,int v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;,int v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;=,int v:boolean
Check whether this value is equal to or greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;,int v:boolean
Check whether this value is greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&amp;,int v:Integer
Bitwise AND
@arg v Right-hand side operand
@return new Integer object holding the result
operator&nbsp;|,int v:Integer
Bitwise OR
@arg v Right-hand side operand
@return new Integer object holding the result
operator&nbsp;^,int v:Integer
Bitwise EOR/XOR (exclusive or)
@arg v Right-hand side operand
@return new Integer object holding the result
operator&nbsp;&amp;&amp;,int v:boolean
Logical AND
@arg v Right-hand side operand
@return Result value
operator&nbsp;||,int v:boolean
Logical OR
@arg v Right-hand side operand
@return Result value
operator&nbsp;^^,int v:boolean
Logical EOR/XOR (exclusive OR)
@arg v Right-hand side operand
@return Result value
setValue,int v

Set a new value.

@arg v The new value
@see getValue
getValue:int

Return the current value.

@return Current value
@see setValue
printf,String fmt:String

Return a string representation of this number object that is formatted using the given ANSI-C format string.

@arg fmt ANSI-C style format string.
@return new String instance holding a formatted string representation of this number object.
getString:String

Return a string representation of this number object.

@return a new §String instance holding a string representation of this number object
New,int v:Integer

Create a new Integer object and initialize it with the given value.

@arg v The value to assign the new object
@return new Integer object
UnsignedLong,Object

A number object that wraps an unsigned 64bit integer value.

@see Boolean
@see Byte
@see Double
@see Float
@see Integer
@see Long
@see Short
@see UnsignedByte
@see UnsignedInteger
@see UnsignedShort
operator&nbsp;unary-:UnsignedLong
Negate value
@return new UnsignedLong object holding the result
operator&nbsp;unary!:UnsignedLong
Logical not
@return new UnsignedLong object holding the result
operator&nbsp;unary~:UnsignedLong
Bitwise not
@return new UnsignedLong object holding the result
operator&nbsp;+,UnsignedLong v:UnsignedLong
Add the given value
@arg v Addend
@return new UnsignedLong object holding the result
operator&nbsp;-,UnsignedLong v:UnsignedLong
Subtract the given value
@arg v Minuend
@return new UnsignedLong object holding the result
operator&nbsp;*,UnsignedLong v:UnsignedLong
Multiply by the given value
@arg v Factor
@return new UnsignedLong object holding the result
operator&nbsp;/,UnsignedLong v:UnsignedLong
Divide by the given value
@arg v Dividend
@return new UnsignedLong object holding the result
operator&nbsp;&#38;,UnsignedLong v:UnsignedLong
Calculate reminder of this divided by the given value
@arg v Dividend
@return new UnsignedLong object holding the result
operator&nbsp;&lt;&lt;,UnsignedLong v:UnsignedLong
Logical shift left
@arg v How many bits to shift left
@return new UnsignedLong object holding the result
operator&nbsp;&gt;&gt;,UnsignedLong v:UnsignedLong
Logical shift right
@arg v How many bits to shift right
@return new UnsignedLong object holding the result
operator&nbsp;==,UnsignedLong v:boolean
Compare to the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;!=,UnsignedLong v:boolean
Check whether the given value does not equal this value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;=,UnsignedLong v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;,UnsignedLong v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;=,UnsignedLong v:boolean
Check whether this value is equal to or greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;,UnsignedLong v:boolean
Check whether this value is greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&amp;,UnsignedLong v:UnsignedLong
Bitwise AND
@arg v Right-hand side operand
@return new UnsignedLong object holding the result
operator&nbsp;|,UnsignedLong v:UnsignedLong
Bitwise OR
@arg v Right-hand side operand
@return new UnsignedLong object holding the result
operator&nbsp;^,UnsignedLong v:UnsignedLong
Bitwise EOR/XOR (exclusive or)
@arg v Right-hand side operand
@return new UnsignedLong object holding the result
operator&nbsp;&amp;&amp;,UnsignedLong v:boolean
Logical AND
@arg v Right-hand side operand
@return Result value
operator&nbsp;||,UnsignedLong v:boolean
Logical OR
@arg v Right-hand side operand
@return Result value
operator&nbsp;^^,UnsignedLong v:boolean
Logical EOR/XOR (exclusive OR)
@arg v Right-hand side operand
@return Result value
setValue,int v

Set a new value.

@arg v The new value
@see getValue
getValue:int

Return the current value.

@return Current value
@see setValue
printf,String fmt:String

Return a string representation of this number object that is formatted using the given ANSI-C format string.

@arg fmt ANSI-C style format string.
@return new String instance holding a formatted string representation of this number object.
getString:String

Return a string representation of this number object.

@return a new §String instance holding a string representation of this number object
Newi,int v:UnsignedLong

Create a new UnsignedLong object and initialize it with the given value.

@arg v The value to assign the new object
@return new UnsignedLong object
News,String s:UnsignedLong

Create a new UnsignedLong object and initialize it with the given String.

The §String will be converted to an unsigned 64bit integer number before assignment.

@return new UnsignedLong object
Long,Object

A number object that wraps a signed 32bit integer value.

@see Boolean
@see Byte
@see Double
@see Float
@see Integer
@see Short
@see UnsignedByte
@see UnsignedInteger
@see UnsignedLong
@see UnsignedShort
operator&nbsp;unary-:Long
Negate value
@return new Long object holding the result
operator&nbsp;unary!:Long
Logical not
@return new Long object holding the result
operator&nbsp;unary~:Long
Bitwise not
@return new Long object holding the result
operator&nbsp;+,Long v:Long
Add the given value
@arg v Addend
@return new Long object holding the result
operator&nbsp;-,Long v:Long
Subtract the given value
@arg v Minuend
@return new Long object holding the result
operator&nbsp;*,Long v:Long
Multiply by the given value
@arg v Factor
@return new Long object holding the result
operator&nbsp;/,Long v:Long
Divide by the given value
@arg v Dividend
@return new Long object holding the result
operator&nbsp;&#38;,Long v:Long
Calculate reminder of this divided by the given value
@arg v Dividend
@return new Long object holding the result
operator&nbsp;&lt;&lt;,Long v:Long
Logical shift left
@arg v How many bits to shift left
@return new Long object holding the result
operator&nbsp;&gt;&gt;,Long v:Long
Logical shift right
@arg v How many bits to shift right
@return new Long object holding the result
operator&nbsp;==,Long v:boolean
Compare to the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;!=,Long v:boolean
Check whether the given value does not equal this value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;=,Long v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;,Long v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;=,Long v:boolean
Check whether this value is equal to or greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;,Long v:boolean
Check whether this value is greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&amp;,Long v:Long
Bitwise AND
@arg v Right-hand side operand
@return new Long object holding the result
operator&nbsp;|,Long v:Long
Bitwise OR
@arg v Right-hand side operand
@return new Long object holding the result
operator&nbsp;^,Long v:Long
Bitwise EOR/XOR (exclusive or)
@arg v Right-hand side operand
@return new Long object holding the result
operator&nbsp;&amp;&amp;,Long v:boolean
Logical AND
@arg v Right-hand side operand
@return Result value
operator&nbsp;||,Long v:boolean
Logical OR
@arg v Right-hand side operand
@return Result value
operator&nbsp;^^,Long v:boolean
Logical EOR/XOR (exclusive OR)
@arg v Right-hand side operand
@return Result value
setValue,int v

Set a new value.

@arg v The new value
@see getValue
getValue:int

Return the current value.

The upper 32 bits will be silently stripped off.

@return Current value
@see setValue
printf,String fmt:String

Return a string representation of this number object that is formatted using the given ANSI-C format string.

@arg fmt ANSI-C style format string.
@return new String instance holding a formatted string representation of this number object.
getString:String

Return a string representation of this number object.

@return a new §String instance holding a string representation of this number object
Newi,int v:Long

Create a new Long object and initialize it with the given value.

@arg v The value to assign the new object
@return new Long object
News,String s:Long

Create a new Long object and initialize it with the given String.

The §String will be converted to a signed 64bit integer number before assignment.

@return new Long object
Float,Object

A number object that wraps a 32bit IEEE floating point value.

@see Boolean
@see Byte
@see Double
@see Integer
@see Long
@see Short
@see UnsignedByte
@see UnsignedInteger
@see UnsignedLong
@see UnsignedShort
operator&nbsp;unary-:Float
Negate value
@return new Float object holding the result
operator&nbsp;unary!:Float
Logical not.

This value is temporarily converted to an integer before the operation is performed.
@return new Float object holding the result
operator&nbsp;unary~:Float
Bitwise not

This value is temporarily converted to an integer before the operation is performed.
@return new Float object holding the result
operator&nbsp;+,float v:Float
Add the given value
@arg v Addend
@return new Float object holding the result
operator&nbsp;-,float v:Float
Subtract the given value
@arg v Minuend
@return new Float object holding the result
operator&nbsp;*,float v:Float
Multiply by the given value
@arg v Factor
@return new Float object holding the result
operator&nbsp;/,float v:Float
Divide by the given value
@arg v Dividend
@return new Float object holding the result
operator&nbsp;&#38;,int v:Float
Calculate reminder of this divided by the given value.

This value is temporarily converted to an integer before the operation is performed.
@arg v Dividend
@return new Float object holding the result
operator&nbsp;&lt;&lt;,int v:Float
Logical shift left

This value is temporarily converted to an integer before the operation is performed.

@arg v How many bits to shift left
@return new Float object holding the result
operator&nbsp;&gt;&gt;,int v:Float
Logical shift right

This value is temporarily converted to an integer before the operation is performed.
@arg v How many bits to shift right
@return new Float object holding the result
operator&nbsp;==,float v:boolean
Compare to the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;!=,float v:boolean
Check whether the given value does not equal this value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;=,float v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;,float v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;=,float v:boolean
Check whether this value is equal to or greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;,float v:boolean
Check whether this value is greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&amp;,int v:Float
Bitwise AND

This value is temporarily converted to an integer before the operation is performed.

@arg v Right-hand side operand
@return new Float object holding the result
operator&nbsp;|,int v:Float
Bitwise OR

This value is temporarily converted to an integer before the operation is performed.
@arg v Right-hand side operand
@return new Float object holding the result
operator&nbsp;^,int v:Float
Bitwise EOR/XOR (exclusive or)

This value is temporarily converted to an integer before the operation is performed.
@arg v Right-hand side operand
@return new Float object holding the result
operator&nbsp;&amp;&amp;,int v:boolean
Logical AND
@arg v Right-hand side operand
@return Result value
operator&nbsp;||,int v:boolean
Logical OR
@arg v Right-hand side operand
@return Result value
operator&nbsp;^^,int v:boolean
Logical EOR/XOR (exclusive OR)
@arg v Right-hand side operand
@return Result value
setValue,float v

Set a new value.

@arg v The new value
@see getValue
getValue:float

Return the current value.

@return Current value
@see setValue
printf,String fmt:String

Return a string representation of this number object that is formatted using the given ANSI-C format string.

@arg fmt ANSI-C style format string.
@return new String instance holding a formatted string representation of this number object.
getString:String

Return a string representation of this number object.

@return a new §String instance holding a string representation of this number object
New,float v:Float

Create a new Float object and initialize it with the given value.

@arg v The value to assign the new object
@return new Float object
Double,Object

A number object that wraps a 64bit IEEE floating point value.

@see Boolean
@see Byte
@see Float
@see Integer
@see Long
@see Short
@see UnsignedByte
@see UnsignedInteger
@see UnsignedLong
@see UnsignedShort
operator&nbsp;unary-:Double
Negate value
@return new Double object holding the result
operator&nbsp;unary!:Double
Logical not

This value is temporarily converted to an integer before the operation is performed.
@return new Double object holding the result
operator&nbsp;unary~:Double
Bitwise not

This value is temporarily converted to an integer before the operation is performed.
@return new Double object holding the result
operator&nbsp;+,Double v:Double
Add the given value
@arg v Addend
@return new Double object holding the result
operator&nbsp;-,Double v:Double
Subtract the given value
@arg v Minuend
@return new Double object holding the result
operator&nbsp;*,Double v:Double
Multiply by the given value
@arg v Factor
@return new Double object holding the result
operator&nbsp;/,Double v:Double
Divide by the given value
@arg v Dividend
@return new Double object holding the result
operator&nbsp;&#38;,int v:Double
Calculate reminder of this divided by the given value.

This value is temporarily converted to an integer before the operation is performed.
@arg v Dividend
@return new Double object holding the result
operator&nbsp;&lt;&lt;,int v:Double
Logical shift left

This value is temporarily converted to an integer before the operation is performed.

@arg v How many bits to shift left
@return new Double object holding the result
operator&nbsp;&gt;&gt;,int v:Double
Logical shift right

This value is temporarily converted to an integer before the operation is performed.
@arg v How many bits to shift right
@return new Double object holding the result
operator&nbsp;==,Double v:boolean
Compare to the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;!=,Double v:boolean
Check whether the given value does not equal this value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;=,Double v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&lt;,Double v:boolean
Check whether this value is less than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;=,Double v:boolean
Check whether this value is equal to or greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&gt;,Double v:boolean
Check whether this value is greater than the given value
@arg v Value to compare to
@return Comparison result
operator&nbsp;&amp;,int v:Double
Bitwise AND

This value is temporarily converted to an integer before the operation is performed.
@arg v Right-hand side operand
@return new Double object holding the result
operator&nbsp;|,int v:Double
Bitwise OR

This value is temporarily converted to an integer before the operation is performed.
@arg v Right-hand side operand
@return new Double object holding the result
operator&nbsp;^,int v:Double
Bitwise EOR/XOR (exclusive or)

This value is temporarily converted to an integer before the operation is performed.
@arg v Right-hand side operand
@return new Double object holding the result
operator&nbsp;&amp;&amp;,int v:boolean
Logical AND
@arg v Right-hand side operand
@return Result value
operator&nbsp;||,int v:boolean
Logical OR
@arg v Right-hand side operand
@return Result value
operator&nbsp;^^,int v:boolean
Logical EOR/XOR (exclusive OR)
@arg v Right-hand side operand
@return Result value
setValue,float v

Set a new value.

@arg v The new value
@see getValue
getValue:double

Return the current value.

The value will silently be converted to a single precision float value.

@return Current value
@see setValue
printf,String fmt:String

Return a string representation of this number object that is formatted using the given ANSI-C format string.

@arg fmt ANSI-C style format string.
@return new String instance holding a formatted string representation of this number object.
getString:String

Return a string representation of this number object.

@return a new §String instance holding a string representation of this number object
Newi,int v:Double

Create a new Double object and initialize it with the given value.

@arg v The value to assign the new object
@return new Double object
Newf,float v:Double

Create a new Double object and initialize it with the given value.

@arg v The value to assign the new object
@return new Double object
News,String s:Double

Create a new Double object and initialize it with the given String.

The §String will be converted to a 64bit double precision floating point value before assignment.

@return new Double object
Buffer,Stream

An array of bytes.

setSize,int num:boolean

Allocate the given number of bytes.

@arg num New buffer size
@return true if the allocation succeeded, false otherwise
resize,int num:boolean

Change the size of the buffer.

@arg num New buffer size
@return true if the reallocation succeeded, false otherwise
free

Free buffer bytes
pokeI8,int off,byte value

Store byte at the given buffer offset

@arg off Where to storethe byte
@arg value Which byte to store
pokeI14,int off,short value

Store short 7:7 integer at the given buffer offset.

The value byteorder will be swapped according to the current buffer byteorder.

@arg off Where to store the short
@arg value Which short to store
pokeI16,int off,short value

Store short integer at the given buffer offset.

The value byteorder will be swapped according to the current buffer byteorder.

@arg off Where to store the short
@arg value Which short to store
pokeI32,int off,int value

Store 32bit integer at the given buffer offset.

The value byteorder will be swapped according to the current buffer byteorder.

@arg off Where to store the 32bit integer
@arg value Which 32bit integer to store
pokeF32,int off,float value

Store 32bit single precision floating point value at the given buffer offset.

@arg off Where to store the floating point value
@arg value Which floating point value to store
peekI8,int off:byte

Read unsigned byte from the given buffer offset

@arg off Where to read the byte from
@return Byte
peekS8,int off:byte

Read signed byte from the given buffer offset

@arg off Where to read the byte from
@return Byte
peekI14,int off:short

Read short 7:7 integer from the given buffer offset.

The return value byteorder will be swapped according to the current buffer byteorder.

@arg off Where to read the short integer from
@return Short integer
peekI16,int off:short

Read unsigned short integer from the given buffer offset.

The return value byteorder will be swapped according to the current buffer byteorder.

@arg off Where to read the short integer from
@return Short integer
peekS16,int off:short

Read signed short integer from the given buffer offset.

The return value byteorder will be swapped according to the current buffer byteorder.

@arg off Where to read the short integer from
@return Short integer
peekI32,int off:int

Read unsigned 32bit integer from the given buffer offset.

The return value byteorder will be swapped according to the current buffer byteorder.

@arg off Where to read the 32bit integer from
@return 32bit integer
peekS32,int off:int

Read signed 32bit integer from the given buffer offset.

The return value byteorder will be swapped according to the current buffer byteorder.

@arg off Where to read the 32bit integer from
@return 32bit integer
peekF32,int off:float

Read 32bit single precision floating point value from the given buffer offset.

@arg off Where to read the 32bit floating point value from
@return 32bit single precision floating point value
fillZero

Fill the entire buffer with 0.
fillI8

Fill the entire buffer with byte 'c'.

@arg c Fill byte
substring,String r,int off,int max

Extract 0 terminated string from buffer.

The result will be written to §String "r".
At most "max" characters will be written.

@arg r Receives the extracted string
@arg off Buffer offset
@arg max Maximum number of characters to extract
@return true when substring has been extracted successfully
getString,int off,int max:String

Extract 0 terminated string from buffer.

At most "max" characters will be extracted.

@arg off Buffer offset
@arg max Maximum number of characters to extract
@return new String instance holding the extracted string
setString,int off,String s:boolean

Store 0 terminated string at the given buffer offset.

@arg off Where to store the string
@arg s Which string to store
@return true if the string has been stored successfully, false otherwise
gzip,Buffer src,int off,int len,int level:boolean

Compress the given source buffer.

This buffer will be resized to the compressed size.

@arg src Which buffer to compress
@arg off Source offset
@arg len Number of bytes to compress
@arg level Compression level (0..9)
@return true if the given buffer has been compressed successfully, false otherwise.
gunzip,Buffer src,int off,int len,int uncompressedSize

Uncompress the given source buffer.

This buffer will be resized to the uncompressed size.

@arg src Which buffer to uncompress
@arg off Source buffer offset
@arg len Compressed size
@arg uncompressedSize (maximum) Uncompressed size
@return true if the given buffer has been uncompressed successfully, false otherwise.
getChecksum:int
Return checksum for this Buffer.

@return 32bit buffer checksum
visit:Buffer b,int off,int len
Create view into other buffer.

The previous content of this buffer will be freed.

Make sure to keep the source buffer alive as long as the visited data in this buffer is accessed.

@arg buffer Which buffer to visit (source buffer)
@arg off Source buffer offset
@arg len Area size
@return true if the source buffer is allocated and the area is within bounds, false otherwise.
base64Encode:String out:int
Base64-encode buffer region 0..io_offset and write to out §String.

@return Number of encoded chars (excluding ASCIIZ)
base64Decode:String in:int
Base64-decode String to buffer. Set io_offset to decoded size.

@return Number of decoded chars (excluding ASCIIZ)
compareBuffer:Buffer o:boolean
Compare buffer to other buffer (io_offset bytes).

@return true when bytes match, false otherwise
truncate:int sz
Truncate buffer size (w/o reallocation).

Current size must be >= 'sz'.

@arg sz New buffer size (<= old size)
readBufferBits:int startBit,int numBits:int
Treat buffer as bitstream and read up to 32 bits from the given start bit offset.

@arg startBit Start bit offset
@arg numBits Number of bits (up to 32)
@return Value
writeBufferBits:int startBit,int numBits,int val
Treat buffer as bitstream and write up to 32 bits to the given start bit offset.

@arg startBit Start bit offset
@arg numBits Number of bits (up to 32)
@arg val Value to store into buffer
@return Value
hexdump:int start,int num
Debug-print buffer(area) to console.

@arg Start offset
@arg Number of bytes
 ringWriteBuffer,int ringStartOff,int ringSz,Buffer src,int srcOff,int numBytes
   Copy buffer data to ringbuffer area within this buffer.

@arg ringStartOff Start of ringbuffer area
@arg ringSz Ringbuffer size
@arg writeOff Write offset (relative to start of ringbuffer area)
@arg src Source buffer
@arg srcOff Read offset
@arg numBytes Number of bytes
@return New write offset
ringReadBuffer,int ringStartOff,int ringSz,Buffer dst,int dstOff,int numBytes
   Copy ringbuffer area within this buffer to dst buffer.

@arg ringStartOff Start of ringbuffer area
@arg ringSz Ringbuffer size
@arg readOff Read offset (relative to start of ringbuffer area)
@arg src Destination buffer
@arg dstOff Write offset
@arg numBytes Number of bytes
@return New read offset
SharedBuffer,Object

A shared memory buffer.

Use §peekI32, §pokeI32, §ringReadBuffer, §ringWriteBuffer to atomatically read / write 32bit integers.

Ring buffer sizes must be dword-aligned (but support un-aligned read/write offsets and sizes).

allocSharedMemory,int size:boolean

Create shared memory key (name) and allocate the given number of bytes.

@arg size How many bytes to allocate
@return true if the shared memory has been created successfully, false otherwise.
allocSharedMemoryByKey,String key,int size:boolean

Allocate shared memory using the given key (name).

@arg key Name of the shared memory area
@arg size Size of the shared memory area (number of bytes)
@return true if the shared memory has been created successfully, false otherwise
getSharedMemoryKey:String

Return a (non-deletable) reference to the shared memory key (name).

@return (non-deletable) reference to the shared memory key (name).
visitSharedMemory,String key,int size

Open an already existing shared memory area using the given key (name) and size.

@arg key Name of the shared memory area
@arg size Size of the shared memory area (number of bytes)
@return true if the shared memory has been opened successfully, false otherwise
lock,float timeoutMS:boolean
Lock shared buffer.

@arg timeoutMS Time out in milliseconds (0=return immediately)
@return true when buffer has been locked, false when an error or timeout occured
unlock
Unlock shared buffer.
isOpen:boolean
Check if shared memory handle is valid.

@return true when handle is valid
isOpen:boolean
Check if shared memory is owned by this process.
Class,Object

A scriptclass (instance).

@see ClassArray
Envelope,FloatArray

An array of time/value pairs.

Most of the methods assume that time is actually a number of ticks, i.e. an integer number.

The current time offset may be a fractional number resulting in a smooth interpolation of
successive event values if the current interpolation function is set to something other than
§ENV_SHRESET or §ENV_SH.

ENV_SH

Sample and hold (no interpolation)
ENV_LINEAR

Linear interpolation.

<code>y = y1 + (y2 - y1) * x</code>
ENV_COSINE

Cosine interpolation

<code>y = y1 + (y2 - y1) * (1 - cos(PI * x)) / 2</code>
ENV_QUADRATIC

Quadratic interpolation.

<code>y = (y1 + (y2 - y1) * x) * (1 - x<sup>2</sup>) + (y2 + (y3 - y2) * (x - 1)) * x<sup>2</sup></code>
ENV_CUBIC

Cubic interpolation

<code>y = (y1 + y3 - (y0 + y2) * x<sup>3</sup> + (2 * (y0 - y1) + y2 - y3) * x<sup>2</sup> + (y2 - y0) * x + y1</code>
ENV_QUINTIC

Quintic interpolation

<code>y = 3 * (y1 + y3 - y2 - y4) * x<sup>5</sup> + (8 * (y2 - y1) + 7 * (y4 - y3)) * x<sup>4</sup> + (6 * (y1 - y2) + 4 * (y3 - y4)) * x<sup>3</sup> + (y3 - y1) * x + y2</code>

ENV_SHRESET

Sample and hold + reset (no interpolation).

After reading a new key value, reset current value back to 0. Useful for one-shot triggers.
get:float

Return (interpolated) value and reset new_event flag (SH, SHRESET).

@return Interpolated value
getAndResetNew,boolean:float

Return (interpolated) value. Only reset new event flag if bResetNew is true.

@return Interpolated value
@arg bResetNew If true, reset new_event flag after reading.
reset

Reset time offset
setInterpolation,int interpol

Set the interpolation function.

@arg interpol Interpolation function id. Must be one of §ENV_SH, §ENV_LINEAR, §ENV_COSINE, §ENV_QUADRATIC, §ENV_CUBIC, §ENV_QUINTIC, §ENV_SHRESET.
getInterpolation:int

Return current interpolation function.

@return Interpolation function id. See ENV_xxx.
tickPrecise,float dt

Increase time offset by the given time delta.

@arg dt Time delta
setSpeed,float speed

Set envelope base speed.

The default speed is 1.0f

@arg speed Base time delta
getSpeed:float

Return the current envelope base speed.

@return The current envelope base speed.
getTime:float

Return the current time offset.

@return The current time offset
setTime,float t

Seek to the current time offset.

@arg t New (absolute) time offset
getDeltaTime:float

Return delta time to the next event

@return Delta time to the next event
isNewEvent:boolean

Check whether the last §tickPrecise call hit a new key event.

@return true If a new event has been reached, false otherwise
valueAtTimeRaster,float t,float res:var

Return the value at the given absolute time offset in the given time window.

@arg t Absolute time
@arg res Window size
@return Event value or <code>void</code> if there is no event within the given window
valueAtTimeSH,float t:var

Return the value of the last event before the given point in time.

@arg t Absolute time
@return Event value or <code>void</code> if there is no event before the given point in time
valueAtTime,float t:float

Seek and return (interpolated) value.

@arg t Absolute time
@return Float value
timeToIndex,float t:int

Return the last event number (<b>not</b> array offset!) before the given time offset.

@arg Absolute time
@return Event number (array index / 2)
indexToTime,int event:float

Return the absolute time offset of the given event number.

@arg event Event number (array index / 2)
@return Absolute time
insertReplaceEvent,float t,float v,float w

Insert or replace an event at the given time offset.
Keep deltatime if event already exists within [t..t+w].

@arg t Absolute time
@arg v New event value
@arg w Time window size
insertReplaceEventMSB4,float t,byte v,float w

Insert or replace part of an (8bit) event at the given time offset (most significant nibble).
Keep deltatime if event already exists within [t..t+w].

@arg t Absolute time
@arg v New event value (most significant nibble)
@arg w Time window size
insertReplaceEventLSB4,float t,byte v,float w

Insert or replace part of an (8bit) event at the given time offset (least significant nibble).
Keep deltatime if event already exists within [t..t+w].

@arg t Absolute time
@arg v New event value (most significant nibble)
@arg w Time window size
insertReplaceEventPat1,float t,byte v,float w

Insert or replace part of an (7bit) event, formatted as '01A'..'32D' at the given time offset.
Keep deltatime if event already exists within [t..t+w].

@arg t Absolute time
@arg v New event value (first digit)
@arg w Time window size
insertReplaceEventPat2,float t,byte v,float w

Insert or replace part of an (7bit) event, formatted as '01A'..'32D' at the given time offset.
Keep deltatime if event already exists within [t..t+w].

@arg t Absolute time
@arg v New event value (second digit)
@arg w Time window size
insertReplaceEventPat3,float t,byte v,float w

Insert or replace part of an (7bit) event, formatted as '01A'..'32D' at the given time offset.
Keep deltatime if event already exists within [t..t+w].

@arg t Absolute time
@arg v New event value (third digit)
@arg w Time window size
removeEvent,float t

Remove event at the given time offset and shift all succeeding events.

@arg t Absolute time
removeRange,float t,float len

Remove all events within the given time window and shift the succeeding events.

@arg t Absolute time (window start)
@arg len Window size
removeRangeUntilNext,float t,float len,float maxT
Remove range until next event and keep abstime of following event (if any)

@arg t Absolute time (window start)
@arg len Window size
@arg maxT Do not delete events after this point
removeRangeSH,float t,float len
Remove range of sample&hold style envelope.

In contrary to §removeRange, events will only be delete if they are
entirely with the given range. If only covered partly, their delta
times will be adjusted.

@arg t Absolute time (window start)
@arg len Window size
shiftEvents,float t,float l
Shift all events after the given time offset by the given number of ticks.

@arg t Absolute time
@arg l Time shift
shiftNextEvent,float t,float l,float maxT
Shift only next event and keep abstime of following event (if any / in range t..maxT)

@arg t Absolute time
@arg l Time shift
@arg maxT Do not shift event after this point
getNextEventTimeAfter,float t:float
Return absolute time of event after _t, or -1 if there is no event.

@arg t Absolute time
@return Absolute time of event after 't' or -1 if there is no event
rotateEvents,float r,float startT,float maxT
Rotate events within (startT..maxT) by delta time 'r'.

@arg r Rotation delta time
@arg startT Rotation window start (must be >= 0)
@arg maxT Rotation window end (must be > startT)
getPreviousEventTimeBefore,float t:float
Return absolute time of event before _t, or -1 if there is no event.

@arg t Absolute time
@return Absolute time of event before 't' or -1 if there is no event
getCurrentIndex:int
Return current envelope index (debug).

@return Current envelope index
File,Stream

Represents a file in the local file system.

@see PakFile
IOS_IN,int

File access mode "read-only".

@see IOS_OUT
@see IOS_INOUT
IOS_OUT,int

File access mode "write/create".

@see IOS_IN
@see IOS_INOUT
IOS_INOUT,int

File access mode "read-write".

@see IOS_IN
@see IOS_OUT
SEEK_SET,int

Seek to absolute file offset.

@see SEEK_CUR
@see SEEK_END
SEEK_CUR,int

Seek relative to current file offset.

@see SEEK_SET
@see SEEK_END
SEEK_END,int

Seek relative to end of file.

@see SEEK_SET
@see SEEK_CUR
open,String name,int accessFlags:boolean

Open a file in the local file system.

@arg name Which file to open (pathname)
@arg accessFlags §IOS_OUT for writing, §IOS_IN for reading and §IOS_INOUT for read-write access
@return true if the file has been opened successfully, false otherwise

@see openLocal
@see isOpen
@see close
openLocal,String name,int accessFlags:boolean

Open a file in the local file system.

@deprecated
@arg name Which file to open (pathname)
@arg accessFlags §IOS_OUT for writing, §IOS_IN for reading and §IOS_INOUT for read-write access
@return true if the file has been opened successfully, false otherwise

@see open
@see isOpen
@see close
  isOpen:boolean

Check whether the File object has a valid file handle.

@return true if there is a valid file handle, false otherwise.
@see open
@see openLocal
@see close
setOffset,int offset

Seek to the given absolute file offset (bytes).

@arg offset New absolute file offset (bytes)
@see seek
seek,int offset,int mode

Seek to the given file offset.

@arg offset Byte offset
@arg mode One of §SEEK_SET, §SEEK_CUR, §SEEK_END
flush

Write pending buffers to disk..
close

Close the current file.

@see isOpen
@see open
@see openLocal
StdOutStream,Stream

Represents the stdout output stream.

@see StdInStream
@see StdErrStream

isOpen:boolean

Check whether the stream is open (always true).

@return 1(true)
flush

Write pending/cached output buffers into the stream.
StdErrStream,Stream

Represents the stderr output stream.

@see StdInStream
@see StdOutStream

isOpen:boolean

Check whether the stream is open (always true).

@return 1(true)
flush

Write pending/cached output buffers into the stream.
StdInStream,Stream

Represents the stdin input stream.

@see StdOutStream
@see StdErrStream

isOpen:boolean

Check whether the stream is open (always true).

@return 1(true)
PakFile,Stream

Represents a file in a <code>.tkx</code> resp. <code>.tsl</code> archive.

@see File
isOpen:boolean

Check whether the last §open call has succeeded.

@return True if there is valid file handle, false otherwise
open,String name:boolean

Open a file in the current application pak file (<code>.tkx</code> resp. <code>.tsl</code>).

@arg name Which file to open
@return true if the given file has been opened successfully, false otherwise
close

Close the current file.

@see isOpen
@see open
TKS,Object

Static class that provides various TkScript related utility functions (e.g. reflection helpers).

SIGINT,int
 SIGILL,int
 SIGFPE,int
 SIGSEGV,int
 SIGTERM,int
 SIGABRT,int
 YAC_LITTLE_ENDIAN,int
Stream byteorder (LSB first)
YAC_BIG_ENDIAN,int
Stream byteorder (MSB first)
YAC_TYPE_VOID,int
YAC_TYPE_INT,int
YAC_TYPE_FLOAT,int
YAC_TYPE_OBJECT,int
YAC_TYPE_STRING,int
YAC_OP_ASSIGN,int

§Object.yacOperator command id (assign)
YAC_OP_ADD,int

§Object.yacOperator command id (add)
YAC_OP_SUB,int

§Object.yacOperator command id (subtract)
YAC_OP_MUL,int

§Object.yacOperator command id (multiply)
YAC_OP_DIV,int

§Object.yacOperator command id (divide)
YAC_OP_MOD,int

§Object.yacOperator command id (modulo)
YAC_OP_SHL,int

§Object.yacOperator command id (shift left)
YAC_OP_SHR,int

§Object.yacOperator command id (shift right)
YAC_OP_CEQ,int

§Object.yacOperator command id (compare equal)
YAC_OP_CNE,int

§Object.yacOperator command id (compare not equal)
YAC_OP_CLE,int

§Object.yacOperator command id (compare less equal)
YAC_OP_CLT,int

§Object.yacOperator command id (compare less than)
YAC_OP_CGE,int

§Object.yacOperator command id (compare greater equal)
YAC_OP_CGT,int

§Object.yacOperator command id (compare greater than)
YAC_OP_AND,int

§Object.yacOperator command id (bitwise and)
YAC_OP_OR,int

§Object.yacOperator command id (bitwise or)
YAC_OP_EOR,int

§Object.yacOperator command id (bitwise exclusive or)
YAC_OP_NOT,int

§Object.yacOperator command id (logical not)
YAC_OP_BITNOT,int

§Object.yacOperator command id (bitwise not)
YAC_OP_LAND,int

§Object.yacOperator command id (logical and)
YAC_OP_LOR,int

§Object.yacOperator command id (logical or)
YAC_OP_LEOR,int

§Object.yacOperator command id (logical exclusive or)
YAC_OP_NEG,int

§Object.yacOperator command id (negate)
YAC_OP_INIT,int

§Object.yacOperator command id (init)
constantToString,int c,String prefix:String

Try to map a constant integer value to a literal.

@arg c Integer constant
@arg prefix Prefix of constant name
scriptClassConstantToString,Value vo,Class clazz,String prefix:String

Try to map a constant to script class constant name.

@arg vo §ValueObject that the constants are compared with
@arg clazz §Class in which to search
@arg prefix Prefix of constant name
stringToConstant,String name:var

Try to map a named constant to its value.

@arg name Name of the constant
@return Constant value or <code>void</code> if the given name does not map to any constant
findScriptClass,String nspaceName,String className:Class

Find the template object for the given script class.

@arg nspaceName Name of the namespace or NULL (default namespace)
@arg className Name of the script class
@return template object for the given script class or null if the given name does not map to a script class.
findClassesByPrefix,String nspaceName,String prefix:PointerArray
Find all script and/or C++ classes that match the given class name prefix.

If nspaceName is "yac", only C++ will be searched.

This method supports the => operator.

@arg nspaceName "yac" to only search C++ classes, null to search all classes (script classes first), or namespace name to match.
@arg prefix null to match all class names, class name prefix otherwise.
@return PointerArray that holds template object references to all matching classes.
findClassesByBaseClass,String nspaceName,Class baseClass:PointerArray
Find all script classes that are derived from the given base class.

@arg nspaceName null to search all classes, or namespace name to match.
@arg baseClass base class type
@return PointerArray that holds template object references to all matching classes.
getClassName,Object o:String

Return the name of the given object

@arg o The object in question
@return new String instance holding the class name or null if "o" is not a valid object.
@see Object.yacClassName
@see Object.yacMetaClassName
getNamespaceName,Object o:String

Return the namespace name of the given object

@arg o The object in question
@return new String instance holding the namespace name or null if "o" is not a valid object.
@see getClassName
getVersion:int

Return TkScript version identifier.

The format is 0xmmiirrpp, where mm=major version, ii=minor version major, rr=release number, pp=patch.

@return TkScript version 32bit integer value
@see getVersionString
getVersionString:String

Return TkScript version string.

Each byte is converted to decimal, sub-version numbers are separated by the '.' char.
@return Version string
@see getVersion
setIntPropertyByName,Object o,String name,int i

Set an integer member of a meta class object.

This is a tool method to handle meta class objects like e.g. script classes.

@arg o The object in question
@arg name Name of the property to modify
@arg i New value for the integer property
@see Object.yacMetaClassMemberGetAccessKeyByName
@see Object.yacMetaClassMemberSet
setFloatPropertyByName,Object o,String name,float f

Set a float member of a meta class object.

This is a tool method to handle meta class objects like e.g. script classes.

@arg o The object in question
@arg name Name of the property to modify
@arg f New value for the float property
@see Object.yacMetaClassMemberGetAccessKeyByName
@see Object.yacMetaClassMemberSet
setObjectPropertyByName,Object o,String name,Object o

Set an object member of a meta class object.

This is a tool method to handle meta class objects like e.g. script classes.

@arg o The object in question
@arg name Name of the property to modify
@arg o New value for the object property.
@see Object.yacMetaClassMemberGetAccessKeyByName
@see Object.yacMetaClassMemberSet
getPropertyAccessKeyByName,Object o,String name:int

Query the access key for a member of a meta class object.

This is a tool method to handle meta class objects like e.g. script classes.

@arg o The object in question
@arg name Member name
@see getPropertyAccessKeyByIndex
@see Object.yacMetaClassMemberGetAccessKeyByName
getPropertyAccessKeyByIndex,Object o,int index:int

Query the access key for the <i>n</i>th member of a meta class object.

This is a tool method to handle meta class objects like e.g. script classes.

@arg o The object in question
@arg name Member name
@see getPropertyAccessKeyByName
@see Object.yacMetaClassMemberGetAccessKeyByIndex
getPropertyByAccessKey,int ak:var

Read meta class member.

@arg o The object in question
@arg ak Access key to the meta class member
@return Member value
@see Object.yacMetaClassMemberGet
getPropertyNameByAccessKey,int ak:String

Return meta class member name.

@arg o The object in question
@arg ak Access key to the meta class member
@return Member name
@see Object.yacMetaClassMemberGet
getPropertyByName,String name:var

Return meta class member value by name.

@arg o The object in question
@arg name Member name
@return Member value
@see Object.yacMetaClassMemberGet
@see Object.yacMetaClassMemberGetAccessKeyByName
getNumProperties,Object o:int

Return the number of meta class members.

@arg o The object in question
@return Number of meta class members

@see Object.yacMetaClassMemberGetNum
getPropertyClassName,Object o:String

Return the name of a meta class object.

@arg o The object in question
@return Meta class name

@see Object.yacMetaClassName
newObjectByName,String nspace,String name:Object

Create a new instance of a script or C++ class.

@arg nspace Namespace name or null
@arg name Class name
@return New object instance or <code>null</code> if the given name does not map to a script or C++ class.
newObjectArrayByName,String nspace,String name:Object

Resolve object name and create an empty array of equally typed objects.

If the object class has a special array object (see §Object.yacArrayNew), an instance of the
given array object class will be returned.
A generic §ObjectArray will be created, otherwise.

@arg nspace Namespace name or null
@arg name Name of the element object class
@return Array object
@see Object.yacArrayNew
newObjectByID,int classID:Object

Return a new instance of the given C++ class.

This method has to be used with care since classIDs are not constants and may vary between different releases of TkScript.
Plugin classes always have dynamic class IDs.

@arg classID Name-id of a C++ class
@return C++ class instance
getClassID,Object o:int

Return the classID of the given C++ object.

@arg o The object in question
@return C++ classID
evalMethodByName,Object o,String name,Object arglist,Value returnValue:boolean

Evaluate the given C++ or meta class method.

@arg o Object to operate on
@arg name Method name
@arg arglist Argument list (array, list, ..)
@arg returnValue Receives the method return value
@return true if the method has been called successfully, false otherwise
classToHashTable,Object c,HashTable ht:boolean

Write the members of the given meta class instance to the given hash table.

@arg c Meta class instance (script class)
@arg ht Target hashtable
@return true if all object members have been written to the hashtable or false otherwise
hashTableToClass,HashTable ht,Object c:boolean

Iterate hash table and copy the elements to members of "c".

All deletable objects will be unlinked from the hashtable.

@arg ht Source hashtable
@arg c Destination metaclass instance (scriptclass object)
@return true if all hash table entries were copied to the object or false, otherwise.
getMethodArgumentNames,String namespaceName,String scriptClassName,String methodName:StringArray

Query the parameter names of the given script class method.

@arg namespaceName Name of the namespace, null to search default namespace
@arg scriptClassName Name of the script class
@arg methodName Method name
@return new StringArray instance holding the method parameter names or null if the class or method was not found.
sleep,int milliSec

Suspend the current thread for the given number of milli seconds.

@arg milliSec Number of milli seconds
yield

Yield CPU time to the next thread.
getMethodNames,Object o:StringArray

Query the method names of the given C++ or script class.

@arg o C++ or script (meta) class instance
@return new StringArray instance holding the method names for the given class or null if "o" is not a valid object.
isBigEndian

Check whether TKS is running on a big endian host.

@return 1(true) if host architecture uses big endian, 0(false) if it uses little endian.
is64Bit:boolean
Query whether it's a 64bit runtime environment.

@return True if it's 64bit, false if 32bit (less is not supported).
reinstallDebugHandler

Hack to re-install exception filter after a DLL has changed it.
getTksExePath:String
Query absolute pathname of tks executable.

@return Absolute pathname of tks executable
getTksExeDir:String
Query absolute dirname of tks executable.

@return Absolute dirname of tks executable
getTksPluginPath:String
Query absolute pathname of tks plugins directory.

@return Absolute pathname of tks plugins directory
getTksModulePath:String
Query absolute pathname of tks modules directory.

@return Absolute pathname of tks modules directory
getTksLibraryPath:String
Query absolute pathname of tks library directory.

@return Absolute pathname of tks library directory
getTksApplicationPath:String
Query absolute pathname of tks application directory.

@return Absolute pathname of tks application directory
getDllPrefix:String
Query prefix for native code DLLs / shared objects.

@return "" on Windows and macOS, "lib" on Linux, ..
getDllSuffix:String
Query suffix for native code DLLs / shared objects.

@return ".dll" on Windows, ".so" on Linux, "dylib" on macOS, ..
newThreadFromCurrent:Thread
Create new thread object and initialize with current thread id.

Sets tks_current_thread TLS (if compiled in).

The returned object must not be deleted until the thread has terminated.

@return new Thread object
forceUnlockNamedMutex,name
Unlock mutex. Should only be called in case something horribly wrent wrong (e.g. a thread holding the mutex has crashed)

This method might be removed, pls don't call.

@arg name Mutex name
unlockNamedMutex,name
Unlock mutex that was declared using the =mutexname= syntax.

@arg name Mutex name
lockNamedMutex,name
Lock mutex that was declared using the =mutexname= syntax.

@arg name Mutex name
getHomeDir:String
Query absolute pathname of user home directory.

@return Absolute pathname of user home directory
getCurrentDir:String
Query current working directory

@return Absolute pathname of current working directory
getExtraFiles:StringArray
Query array of extra files added to script engine startup (e.g. local config files).

@return §StringArray of extra files
loadLocalTSL,libName:boolean
Dynamically load TSL (library) file

@arg libName  e.g. "mylib.tsl"
@return true if lib has been loaded, compiled, and initialized
evalScript,String src:String
Compile and evaluate script and return output string buffer (trace/print/stdout/stderr/..).

This allocates a new §Script object, installs a print hook, loads the given source, eval()s the global statements, and returns the print hook output buffer.

@arg src Script source (e.g. 'trace "hello, world.";')
@return a deletable copy of the output string buffer (never null)
Stream,Object

Base class for input/output stream objects.

deserialize,Object o,boolean bTypeInfo:boolean

@arg o
@arg bTypeInfo
@return
eof:boolean

@return
getByteOrder:int

@return
getErrorCode:int

@return
getErrorStringByCode,int errorCode:String

@arg errorCode
@return
getI8:byte

Read unsigned byte from stream.

@return
getU8:byte

Read unsigned byte from stream.

@return
getS8:byte

Read signed byte from stream (extend to int).

@return
getB8:boolean

Read 8bit boolean from stream (either 1 or 0).

@return
getI16:short

Read unsigned short from stream.

@return
getU16:short

Read unsigned short from stream.

@return
getS16:short

Read signed short from stream (extend to int).

@return
getI32:int

@return
getF32:float

@return
getF64:float

@todo Make it return a Double object
@return
getOffset:int

@return
getSize:int

@return
readBuffer,Buffer buf,int off,int num,boolean bResize:int

@arg buf
@arg off
@arg num
@arg bResize
@return
readLine,String s,int max:boolean

@arg s
@arg num
@return
readString,String s,int num:boolean

@arg s
@arg num
@return
seek,int off,int mode

@arg off
@arg mode
serialize,Object src,boolean bTypeInfo

@arg src
@arg bTypeInfo
setByteOrder,int byteOrder

@arg byteOrder
setOffset,int offset

@arg offset
writeBuffer,Buffer buf,int off,int num:boolean

@arg buf
@arg off
@arg num
@return
writeString,String s,int off,int num:boolean

@arg s
@arg off
@arg num
@return
setObject,Object src

@arg src
getObject,Object dest

@arg dest
setI8,byte v

@arg v
setI16,short v

@arg v
setI32,int v

@arg v
setF32,float v

@arg v
setF64,float v

@todo make this method take a Double object argument
@arg v
close

setI8a,Object a
Write bytes from generic array object
setI16a,Object a
Write shorts from generic array object
setI32a,Object a
Write double words from generic array object
setF32a,Object a
Write floats from generic array object
setF64a,Object a
Write doubles from generic array object
getI8a,Object a,int num
Read signed bytes and store in array object (will be reallocated).
getU8a,Object a,int num
Read unsigned bytes and store in array object (will be reallocated).
getI16a,Object a,int num
Read signed shorts and store in array object (will be reallocated).
getU16a,Object a,int num
Read unsigned shorts and store in array object (will be reallocated).
getI32a,Object a,int num
Read signed dwords and store in array object (will be reallocated).
getF32a,Object a,int num
Read 32bit floats and store in array object (will be reallocated).
getF64a,Object a,int num
Read 64bit doubles and store in array object (will be reallocated).
add2f,float f1,float f2
Write two 32bit floats to the stream.
add3f,float f1,float f2,float f3
Write three 32bit floats to the stream.
add4f,float f1,float f2,float f3,float f4
Write four 32bit floats to the stream.
setRgba,int argb32
Write r,g,b,a bytes from packed ARGB32 integer
 setBgra,int argb32
Write b,g,r,a bytes from packed ARGB32 integer
 String,Object

A buffered String class that can handle ASCII character sequences.

@see StringArray
freeStack
replace,String a,String b

Replace all occurences of String a by String b.

This method supports the => operator.
@arg a
@arg b
replaceReturnNum,String a,String b:int

@arg a
@arg b
@return
split,char delimiter:int

@deprecated Use §splitChar instead
@arg delimiter
@return
words,boolean bQuotes:int

@deprecated Use §splitSpace instead
@arg bQuotes
@return
fixLength
getLength:int
Return number of chars, including ASCIIZ.

@return
getNumChars:int
Return number of chars, excluding ASCIIZ.

@return
substring,int off,int len:String

This method supports the => operator
@arg off
@arg len
@return
indexOf,String s,int off:int

@arg s
@arg off
@return
lastIndexOf,String s:int

@arg s
@return
loadLocal,String fileName,boolean bRemoveCR:boolean

@arg fileName
@arg bRemoveCR
@return
saveLocal,String fileName:boolean

@arg fileName
@return
trim:String

This method supports the => operator.
@return
alloc,int bufSize

@arg bufSize
@return
getc,int offset:char

@arg offset
@return
putc,int offset,char c

@arg offset
@arg c
isBlank:boolean
@return
copy,Object o

@arg o
getWord,int wordNr:String

@deprecated Use §splitSpace, §splitChar, §splitCharset, §tokenize instead
@arg wordNr
@return
startsWith,String s:boolean

@arg s
@return
endsWith,String s:boolean

@arg s
@return
patternMatch,String pattern:int

@arg pattern
@return
numIndicesOf,String s:int

@arg s
@return
insert,int index,String s:String

This method supports the => operator.

@arg index
@arg s
@return
append,String s:String

This method supports the => operator.

@arg s
@return
appendRepeat,String s,int numRepeats

Append the given §String 'numRepeats' times.

Does nothing when 's' is empty or numRepeats is <= 0.

This method supports the => operator.

@arg s
@arg count
@return
load,String fileName,boolean bRemoveCR:boolean

@arg fileName
@arg bRemoveCR
@return
@see loadLocal
parseXML:TreeNode

@return
splitSpace,boolean bQuotes:StringArray

This method supports the => operator.

@arg bQuotes
@return
splitChar,char delimiter:StringArray

This method supports the => operator.

@arg delimiter
@return
splitCharset,String delimiterCharset:StringArray

This method supports the => operator.

@arg delimiterCharset
@return
wordIndexAtCharIndex,int charIndex,boolean bQuot:int

Find word index at char index.

@arg charIndex
@arg bQuot true=conside words enclosed in \"\" or \'\' as one word
@return wordIndex or -1 if not found
tokenize,String delimiterCharset:StringArray
Split string at delimiter chars and return substring array.

This method supports the => operator.

Unlike §splitCharset, the result array will contain the delimiter chars and this method will consider quoted strings.

@arg delimiterCharset
@return
tokenizeWithRanges,String delimiterCharset,IntArray retRanges:StringArray
Split string at delimiter chars and return substring and startoffset+numchars arrays.

This method supports the => operator.

Unlike §splitCharset, the result array will contain the delimiter chars and this method will consider quoted strings.

@arg delimiterCharset
@arg retRanges returns the substring start offsets and lengths (two elements for each substring)
@return
toLower:String

This method supports the => operator.

@return
toUpper:String

This method supports the => operator.

@return
empty
free

@see alloc
charsetIndexOf,String charset,int off:int

@arg charset
@arg off
@return
indexOfControlCharacter,char c:int

@arg c
@return
abbrev,int length:String

This method supports the => operator.

@arg length
@return
realloc,int bufSize:boolean

@arg bufSize
@return
deleteRegion,int off,int len:String

This method supports the => operator.

@arg off
@arg len
@return
indexOfWordStart,int off:int

@arg off
@return
charsetIndexOfWordStart,String charset,int off:int

@arg charset
@arg off
@return
indexOfWordEnd,int off:int

@arg off
@return
charsetIndexOfWordEnd,String charset,int off:int

@arg charset
@arg off
@return
compare,String s:boolean

@arg s
@return
compareIgnoreCase,String s:boolean

@arg s
@return
compareIgnoreWhitespace,String s:boolean

@arg s
@return
replaceCharReturnNum,char a,char b:int

@arg a
@arg b
@return
replaceChar,char a,char b:String

This method supports the => operator.

@arg a
@arg b
@return
indexOfChar,char c,int off:int

@arg c
@arg off
@return
revIndexOfChar,char c,int off:int

@arg c
@arg off
@return
indexOfFirstDifference,String o:int

@arg o
@return
charsetBlacklist,String charset
Remove all chars present in 'charset'.

@arg charset
charsetWhitelist,String charset
Keep all chars present in 'charset'.

@arg charset
New,String s:String

@arg s
@return
replaceRegion,int startOff,int endOff,String s:String

This method supports the => operator.
@arg startOff
@arg endOff
@arg s
@return
replaceIncludes,String optFilePrefix:int

@arg optFilePrefix
@return
visit,String s,int off,int len

@arg s
@arg off
@arg len
getChecksum:int
Return checksum for the given String.

@return 32bit string checksum
getChecksumIgnoreWhitespace:int
Return checksum for the given String, ignoring all white space (< 32) characters.

@return 32bit string checksum
getDirName:String
Return directory part of file.

This method supports the => operator.

@return Directory name (including trailing forward/backward slash resp. drive letter)
getDebugString:String

@return
checkConversions:int
Check available type conversions

@return YAC_TYPE_INT if string can be converted to int (dec/hex), or YAC_TYPE_FLOAT, or YAC_TYPE_OBJECT (arbitrary string)
checkIntConversion:boolean
Check if string is an integer

@return true if string can be converted to integer
checkFloatConversion:boolean
Check if string is a float

@return true if string can be converted to float
getMetaFlags:int
Get string meta flags (e.g. whether String was originally enclosed in \"\", TKS_STRFL_QUOT)

@return flags
wasQuoted:boolean
Check whether String was originally enclosed in \"\" or \'\'

@return flags
wasQuotedSingle:boolean
Check whether String was originally enclosed in \'\'

@return flags
wasQuotedDouble:boolean
Check whether String was originally enclosed in \"\"

@return flags
isPredecessor,String o,boolean bCaseSensitive:boolean
Check whether String is lexicographical predecessor of other string.

@arg o Other string
@arg bCaseSensitive true=perform case sensitive comparison
@return true or false
numCharsAt,char c:int
Count number of consecutive characters at the given string offset.

@arg char Character
@arg off Start offset
@return Number of consecutive chars
setQuotFlag,int flag
Set quotation flag

@arg flag
@return Number of consecutive chars
getQuotFlag:int
Get quotation flag.

@return flag 1 when String was wrapped in \"\", 2 when String was wrapped in \'\'.
utf8ToASCII
Convert UTF-8 string to ASCII.
Replace non-ASCII chars (>=128) with SUB (26) character.
utf8ToCP1252
Convert UTF-8 string to CP1252 extended ASCII.
Replace non-convertable chars with SUB (26) character.

(note) CP1252 is the same as ISO8859-1 except for the 0x80..0x9F area (ctl codes in ISO)
(note) CP1252 is the HTML5 default encoding for text labeled as ISO8859-1
cp1252ToUTF8,boolean bBOM
Convert CP1252 extended ASCII string to UTF-8

(note) CP1252 is the HTML5 default encoding for text labeled as ISO8859-1

@arg bBom When true, add U+FEFF byte order mark.
hasUTFBOM:boolean
Check if string starts with UTF-8 byte order mark (U+FEFF encoded as 0xEF 0xBB 0xBF)

@return True if BOM is present
isUTF8:boolean
Check if string starts with UTF-8 byte order mark (see §hasUTF8BOM) or if it contains any UTF-8 multi-byte chars

@return True if BOM or UTF-8 multi-byte chars are present
escapeControlChars
Replace control characters and "' by escape sequences

substEscapeSeq
Replace ASCII-style escape sequences by internal ones.

This method is mostly useful when generating script source.
Please see script engine source for details.
@see resubstEscapeSeq,resubstEscapeSeq2
resubstEscapeSeq
Replace internal escape sequences by ASCII-style ones.

Please see script engine source for details.
@see substEscapeSeq,resubstEscapeSeq2
resubstEscapeSeq2
Replace internal escape sequences by script-parseable ASCII-style ones.

Please see script engine source for details.
@see substEscapeSeq,resubstEscapeSeq
String8

A String that can store 8 characters without (re-)allocation.

@see String
String16

A String that can store 16 characters without (re-)allocation.

@see String
String32

A String that can store 32 characters without (re-)allocation.

@see String
String64

A String that can store 64 characters without (re-)allocation.

@see String
String128

A String that can store 128 characters without (re-)allocation.

@see String
StringIterator,Object

Used to iterate a String word stack.

@deprecated Use §String.splitSpace, §String.splitChar, §String.splitCharset, §String.tokenize instead
@see String
begin,String s

@arg s
end
head
tail:int

@return
next:int

@return
previous:int

@return
getCurrent:String

@return
Event,Value

A generic event.

The user-definable integers "id" and "subId" can be used to implement timestamps, event class ids etc.

setId,int id
@return
getId:int
@return
setSubId,int subId
@return
getSubId:int
@return
Mailbox

A generic event mailbox.


getNumQueuedEvents:int
 thread-safe way to get the number of queued events
@return
freeEventQueue
 Discard all events
allocEventQueue,int size
 Discard events and allocate new (empty) queue
@arg size Queue size
sendEvent,Event ev
 Create a copy of "ev" (deref value) and add to queue
@arg ev Event to send to this mailbox
peekEvent:Event
 Return reference to oldest event without removing it from the queue
@return Event
peekEvent,int id:Event
 Return reference to oldest event that matches the given id
@arg id Id to match
@return Event
waitEvent,int timeout:Event
 Wait until next event arrives or until timeout expires. return null or next event
@arg timeout Timeout (in millisec). 0=forever
@return Event
waitEvent,int id,int timeout:Event
 Wait until next event arrives that matches the given id or until timeout expires. return null or next event
@arg id Id to match
@arg timeout Timeout (in millisec). 0=forever
@return Event
HashTable

A dictionary that maps Strings to arbitrary values.
addInt,String key,int i:int

@arg key
@arg i
@return
addFloat,String key,float f:int

@arg key
@arg f
@return
addString,String key,String s:int

@arg key
@arg s
@return
addObject,String key,Object o:int

@arg key
@arg o
@return
addObjectRef,String key,Value v:int

@arg key
@arg v
@return
get,String key:var

@arg key
@return
getDeref,String key:var

@arg key
@return
exists,String key:boolean

@arg key
@return
delete,String key

@arg key
free


@see alloc
alloc,int cacheSize:boolean
Set new capacity and discard all entries.

@arg cacheSize
@return
@see free
@see realloc
realloc,int cacheSize:boolean
Set new capacity while keeping current entries.

@arg cacheSize
@return
@see free
@see alloc
getNumElements:int

@return

getMaxElements:int

@return
getString:String

@return
getReparsableString:String
Prepare keys and string values so they can be reparsed.

Mostly usuable for generating script source code.
@return
set,String key,Object value

@arg key
@arg value
setInt,String key,int i

@arg key
@arg i
setFloat,String key,float f

@arg key
@arg f
setObject,String key,Object value

@arg key
@arg value
setCopy,String key,Object o

@arg key
@arg o
setString,String key,String s

@arg key
@arg s
keyToArray,Object array:int

@arg array
@return
valuesToArray,Object array:int

@arg array
@return
replaceKey,String oldKey,String newKey:boolean

@arg oldKey
@arg newKey
@return true if key has been replaced
Condition,Object

A boolean condition variable that can be used for multi-threaded notifications resp. barriers.

create,boolean bManualReset:int
   Initialize condition object.

@arg bManualReset - 1=all waiting threads return (must call §reset after §wait), 0=one thread returns, auto-reset condition to 0

@return 0 (success) or error code
raise:int
   Raise condition and notify threads

@return 0 (success) or error code
wait,int timeout:int
   Wait for condition to be raised.

   Auto-reset condition to 0 (false) if this not a manual reset condition (see §create).

@arg timeout 0=wait forever, millisec. otherwise

@return 0 (success) or error code
reset:int
   Reset condition.

@return 0 (success) or error code
Configuration,Object

Provides access to various TkScript related configuration options.

setDebugLevel,int level

Set the TkScript debug level.

@arg level Debug level (0..99)
getDebugLevel:int

Return the current TkScript debug level.

@return Current debug level (0..99)
setForceInt,boolean b

Enable/disable forced interpretation.

Setting "forceInt" to true will cause all JITted code to be executed by the interpreter.
@arg b Whether to use JIT acceleration (true) or not (false)
getForceInt:boolean

Query whether JIT acceleration is enabled.

@return true if JIT acceleration is enabled, false otherwise.
Pool,Object

Manages a fixed number of homogenous objects.

Features quite fast alloc/free methods.
setTemplate,Object o

@arg o

getTemplate:Object

@return
alloc,int num:boolean

@arg num
@return
@see free
free

@see alloc
qAlloc:int

@return
@see qFree
@see qFreeByObject
qFree:int id

@arg id
@see qAlloc
@see qFreeByObject
empty

isEmpty:boolean

Check if Pool is empty (numElements == 0).
getNumElements:int

Query number of used elements.

@return
getMaxElements:int

@return
qFreeByObject,Object o

@arg o
@see qAlloc
@see qFree
getIDByObject,Object o:int

@arg o
@return
Stack,Object

A LIFO stack of objects.

Dates back to the time when TkScript did not have local variables, yet :-)
setTemplate,Object o

@arg o
getTemplate:Object

@return

push:Object

@return

pop:Object

@return
setSize,int size

@arg size

getSize:int

@return

setIndex,int index

@arg index
getIndex:int

@return

init,Object template,int size

@arg template
@arg size
TreeNode,Value

An L/R tree that can store arbitrary user data along with a String identifier.

@see ListNode
@see Value
insertLeft,Object o:TreeNode

Insert a copy of the given object into the tree.

@arg o
@return
@todo Provide script context for object clone
insertRight,Object o:TreeNode

Insert a copy of the given object into the tree.

@arg o
@return
@todo Provide script context for object clone

findByName,String name,int depth:TreeNode
Find TreeNode by type name

@arg name
@arg depth
@return
findById,String id,int depth:TreeNode
Find TreeNode by id.

Note: It might be necessary to replace "name=" by "id=". SGML/HTML usually uses "id" to set the node id, XML uses "name" (not to be confused by type name!).

@arg id
@arg depth
@return
free

getLeft:TreeNode

@return
@see setLeft
@see setRight
@see getRight
getName:String

@return
@see getId
@see setId
@see setName
getParent:TreeNode

@return
getRight:TreeNode

@return
@see setRight
getRoot:TreeNode

@return
seekByPathName,String pathName:TreeNode

@arg pathName
@return
setName,String name

@arg name
@see getId
@see getName
@see setId
setLeft,TreeNode n

@arg n
@see getLeft
@see getRight
@see setRight
setRight,TreeNode n

@arg n
@see setLeft
@see getLeft
@see getRight
writeToHashTable,HashTable ht

@arg ht
getNumNodes:int

@return
getId:String

@return
@see setId
@see setName
@see getName
setId,String id

@arg id
@see getId
@see setName
@see getName
Thread,Object

Represents a simultaneously running program task.

A thread may run on a different processor (if available).

Each thread has a mailbox that can be used to receive messages from other threads.

@see Mutex
@see GetCurrentThread
THREAD_PRIORITY_ABOVE_NORMAL,int
THREAD_PRIORITY_BELOW_NORMAL,int
THREAD_PRIORITY_HIGHEST,int
THREAD_PRIORITY_IDLE,int
THREAD_PRIORITY_LOWEST,int
THREAD_PRIORITY_NORMAL,int
THREAD_PRIORITY_TIME_CRITICAL,int
PROCESS_PRIORITY_CLASS_IDLE,int
PROCESS_PRIORITY_CLASS_NORMAL,int
PROCESS_PRIORITY_CLASS_HIGH,int
PROCESS_PRIORITY_CLASS_REALTIME,int
create,Function entryFunction:boolean

@arg entryFunction §Function object to be used for thread startup. The arbitrary user argument can be accessed by using the §Thread.getUserData getter function.
@return

kill

wait:int

@return
getId:int

@return
setUserData,Object o

@arg o

getUserData:Object

@return

isRunning:boolean

@return
setName,String name

@arg name
getName:String

@return

setPriority,int prio

@arg prio

getPriority:int

@return
SetProcessPriorityClass,int priorityClass
  Set process priority class (Windows only).

@arg priorityClass One of PROCESS_PRIORITY_CLASS_IDLE, PROCESS_PRIORITY_CLASS_NORMAL, PROCESS_PRIORITY_CLASS_HIGH, or PROCESS_PRIORITY_CLASS_REALTIME
SetProcessAffinityMask32,int mask:boolean
Set process affinity mask (Windows only).

@arg mask Logical processor core bit mask
@return true when the system call succeeded, false otherwise.
SetProcessAffinityMaskByString,String mask:boolean
Set process affinity mask (Windows only).

The mask is currently limited to 64 logical processors (todo: support processor groups).

This method is not supported on macOS.

@arg mask Logical processor core bit mask. 'x' denotes set bits, '.' denotes cleared bits, space/tab/CR/LF are ignored and can be used for grouping logical processors
@return true when the system call succeeded, false otherwise.
IsAffinityMaskStringBitSet:String mask,int bit:boolean
Pseudo-static method. Test if the given bit is set in the affinity string mask.

@arg mask Logical processor core bit mask. 'x' denotes set bits, '.' denotes cleared bits, space/tab/CR/LF are ignored and can be used for grouping logical processors
@arg bit 0..63
GetMaxAffinityMask32:int
Pseudo-static method. Queries maximum supported affinity mask ( (1<<numProcessors)-1 ).

@arg mask
setAffinityMask32,int mask
Set thread affinity mask.

Keep in mind that this call will fail on Windows if the mask contains bits for non-available processor cores.
Please use §GetMaxAffinityMask32 to query the maximum supported mask.

This method is not supported on macOS.

@arg mask Logical processor core bit mask
setAffinityMaskByString,String mask
Set thread affinity mask.

The mask is currently limited to 64 logical processors (todo: support processor groups).

Keep in mind that this call will fail on Windows if the mask contains bits for non-available processor cores.
Please use §GetMaxAffinityMask32 to query the maximum supported mask.

On macOS the mask should contain only a single set bit and the method will fall back to §setCPUCore.

@arg mask Logical processor core bit mask. 'x' denotes set bits, '.' denotes cleared bits, space/tab/CR/LF are ignored and can be used for grouping logical processors
@return true when affinity mask has been updated
setCPUCore,int coreIdx
  Assign thread to specified CPU core.

  Fall back to §setAffinityMask32 when tks was not compiled with HAVE_WIN10 define.

@arg coreIdx Logical CPU core index
allocEventQueue,int size
  Allocate mailbox event queue/ring buffer.

@arg size Maximum number of events that can be posted without discarding old events.
sendEvent,Event ev
  Post new message in mailbox.

  This will clone the given §Event object and unlink any deletable userdata object from "ev".

@arg ev New message
peekEvent:Event
  Return next pending event without removing it from the queue.

@return Pending event or null
peekEventById,int id:Event
  Return next pending event whose id matches "id" without removing it from the queue.

@return Pending event or null
waitEvent,int timeoutMS:Event
  Return next pending event or wait for new event to arrive.

  Please notice that this method returns null in case the wait() timed out or got interrupted.

@arg timeoutMS 0=wait forever, millisec. until timeout otherwise
@return Event or null (timeout or interrupt)
waitEventById,int id,int timeoutMS:Event
   Return next pending event whose id matches "id" or wait for new matching event to arrive.

  Please notice that this method returns null in case the wait() timed out or got interrupted.

@arg Event id filter
@arg timeoutMS 0=wait forever, millisec. until timeout otherwise
@return Event or null (timeout or interrupt)
SwitchToThread
Schedule next waiting thread.
 Yield
Schedule next waiting thread (same as §SwitchToThread)

Can cause high CPU load when no other threads are waiting to be scheduled.
 Delay
Put thread to sleep for a short time (low CPU load).
 GetNumCPUCores:int
Query number of logical CPU cores
@ret number of logical CPU cores
IsCPUCoreShared,int coreIdx:boolean
@arg coreIdx Logical CPU core index
@ret true when logical CPU shares HW resources with other core (hyper threading)
   IsPerformanceCPUCore,int coreIdx:boolean
@arg coreIdx Logical CPU core index
@ret true when logical CPU is a performance core (big/little systems)
   IsCPUCoreShared,int coreIdx:boolean
@arg coreIdx Logical CPU core index
@ret true when logical CPU is an efficiency performance core (big/little systems)
   Mutex,Object

A mutual exclusive lock is used to avoid the simultaneous execution of a specific code path.

Please notice that TkScript provides for automatic use of mutexes when the <code>=</code>, <code>==</code> resp. <code>=<i>name</i>=</code>
keywords are used in a method declaration.

@see Thread
lock

@see timedLock
@see unlock
timedLock,int timeoutSec:boolean
Lock with timeout

@arg timeoutSec Maximum number of seconds to wait
@return true when lock was acquired, false when timeout expired

@see lock
@see unlock
unlock

@see lock
@see timedLock
Process,Stream

Represents an external process that communicates with its parent via anonymous pipes.

Writing to the stream sends data to the standard input of the external process.

The standard output (and error output) can be accessed by reading data from the stream.

The stream size indicates how many bytes can be read from the child process.

The §waitAvail() method supports an additional timeout parameter (uses select() on Linux and a polling loop on Windows).

@see Stream
exec,String cmd,StringArray args
      Create new process and execute command

      @arg cmd Command pathname (e.g. "/bin/ls").
      @arg args Command arguments. §StringArray or null.
      @return true when the process has been started.
   waitAvail,int timeoutMillisec
      Query number of available bytes. Wait up to <timeoutMillisec> for new data to arrive.

      @arg timeoutMillisec Timeout. 0=no timeout.
      @return Number of bytes available for reading
   kill
      Kill child process.

      On Linux, this sends the SIGTERM signal, and after one second SIGKILL.
      On Windows, TerminateProcess() is called.
   GetPID:int
   Get pid of current process.
   @return pid
   SendSignal,int pid,int signal
   Send signal to other process. Not implemented on Windows.
   Time,Object

A utility class to handle time stamps. Provides date conversion.

calc
getMin:int

@return
setMin,int min

@arg min
getHour:int

@return
getMonth:int

@return
getMonthday:int

@return
getNanoSec:int

@return
getSec:int

@return
getUtime:int

@return
getWeekday:int

@return
getYear:int

@return
getYearDay:int

@return
gmtime

localtime

now

setHour,int h

@arg h
setMonth,int m

@arg m
setNanoSec,int ns

@arg ns

setSec,int s

@arg s
setUtime,int u

@arg u
setMonthday,int md

@arg md
setYear,int yr

@arg yr
getString:String
liesBetween,Time tStart,Time tEnd:boolean
Check if date lies between tStart and tEnd (inclusive).

@return true when (tStart <= this <= tEnd)
Value,Object

An object container for arbitrary script values.

@see ValueArray
YAC_TYPE_VOID,int

Script type id (0) for void values.
YAC_TYPE_INT,int

Script type id (1) for 32bit signed integer values.
YAC_TYPE_FLOAT,int

Script type id (2) for 32bit single precision IEEE floating point values.
YAC_TYPE_OBJECT,int

Script type id (3) for object pointer values.
YAC_TYPE_STRING,int

Script type id (4) for string values.

The string type id is more like a hint for the script engine.

Strings are just Objects, too.
yacOperatorAssign,Object o

@arg o
getIntValue:int

@return
getFloatValue:float

@return
getObjectValue:Object

@return
getValue:var

@return
getType:int

@return
setObjectValue,Object o

@arg o
setStringValue,String s

@arg s
typecast,int type

@arg type
unset
setNewObject,Object template:Object

@arg template
@return
setValue,Value value

@arg value
getString:String

@return
getStringValue:String

@return
setIntValue,int i

@arg i
setFloatValue,float f

@arg f
initNull
initVoid
derefObjectValue:var

@return
getDeref:var

@return
isDeletable:boolean
Check whether the associated object value is deletable.

@return 1(true) if object value is deletable, 0(false) if value is not an object or the object is not deletable.
unlinkObject:var
Unlink deletable object pointer from value container.
The object will be tagged as non-deletable in this container.

@return Deletable object value or regular int/float/Object value.
assign,Value v

Assign value and keep original value type (typecast if necessary).

@return
pointerAssign,Value v

Assign/Dereference §Object pointer. Both values must have type §Object or §String.
isVoid:boolean
      @return true when value has type void
    isInt:boolean
      @return true when value has type int
    isFloat:boolean
      @return true when value has type float
    isObject:boolean
      @return true when value has type §Object
    isString:boolean
      @return true when value has type §String or has type §Object and object is a §String
    Variable,Object

Represents a script variable.

@see Function
@see Script
query:boolean

@return
store:boolean

@return
storeDeref

@return
getName:String

@return
Function,Object

Represents a script function.

@see Variable
@see Script
getName:String

@return
eval,Object va:var

@arg va Argument list (or null)
@return
findVariable,String name:Variable

@arg name
@return
Script,Object

Represents a dynamically loaded/compiled script.

@see Function
@see Variable
setClassNamespace,String nspName
Set namespace name for classes declared in this (temporary) script module.

(note) a unique namespace must be set in case the script source is loaded in multiple §Script instances
@arg nspName Unique namespace name
@return true if namespace was set
installPrintHook
Install trace / print / stdout / stderr hook and capture output to string buffer.
uninstallPrintHook
Uninstall trace / print / stdout / stderr hook.
getPrintHookOutputAndClear:String
Return a copy of the current trace / print / stdout / stderr capture buffer and clear the buffer.
setLineOffset,int
Skip line numbers, e.g. after adding implicit header lines to script source.
@arg offset 0..n
load,String script:boolean

@arg script
@return
unload
getLastErrorLineIndex:int
findVariable,String name:Variable

@arg name
@return
findTaggedVariableByIndex,int index:Variable

@arg index
@return
findFunction,String name:Function

@arg name
@return
eval
Run script statements
ListNode,Value

Represents a single node in a double linked list. Can store arbitrary script values.

@see List
@see TreeNode
@see Value
getHead:ListNode

@return
getTail:ListNode

@return
getPrev:ListNode

@return
getNext:ListNode

@return
freeList
appendEmpty:ListNode

@return
appendValue,Value v:ListNode

@deprecated superceeded by §append
@arg v
@return
append,Object value:ListNode
Append empty list node and copy value.

@arg value Which value to copy. Will grab deletable objects if argument is a §Value object.
@return
getString:String

@return
getDebugString:String

@return
getDebugStrings:StringArray

@return
getCopy:var

@return
getSize:int

@return
getSubList,int off:ListNode

@arg off
@return
List,Object

A container for list nodes.

@see ListNode
addFirst,Object o:ListNode

@arg o
@return
addFirstInt,int i:ListNode

@arg i
@return
addFirstFloat,float f:ListNode

@arg f
@return
addFirstObject,Object o:ListNode

@arg o
@return
addFirstCopy,Object o:ListNode

@arg o
@return
addFirstString,String s:ListNode

@arg s
@return
addLast,Object o:ListNode

@arg o
@return
addLastInt,int i:ListNode

@arg i
@return
addLastFloat,float f:ListNode

@arg f
@return
addLastObject,Object o:ListNode

@arg o
@return
addLastCopy,Object o:ListNode

@arg o
@return
addLastString,String s:ListNode

@arg s
@return
getCopy:var

@return
getHead:ListNode

@return
getSize:int

@return
getString:String

@return
getTail:ListNode

@return
isEmpty:boolean

@return
removeAll:ListNode

@return
removeFirst:ListNode

@return
removeLast:ListNode

@return
inverse
findPointer,Object o:ListNode

@arg o
@return
remove,Object o:ListNode

@arg
@return
getSubList,int off:ListNode

@arg off
@return
insert,Object o, Object ln:ListNode

@arg o
@arg ln
@return
ValueArray,Object

An array of dynamically typed script values.

@see Value
alloc,int max:boolean

Allocate the given number of array elements.

@arg max Total number of elements to allocate
@return true when the allocation succeeded, false otherwise.
@see free
@see realloc
@see getMaxElements
free

Free all array elements.
@see alloc
@see realloc
@see getMaxElements
realloc,int max:boolean

Resize array.

Elements will be discarded/added as required.

@arg max New total number of elements
@return true when the reallocation succeeded, false otherwise.
@see alloc
@see free
@see getMaxElements
getNumElements:int

Return the number of used elements, numElements.

@return Number of used elements
@see empty
@see setNumElements
getMaxElements:int

Return the total number of elements.

@return Total number of elements
@see alloc
@see free
@see realloc
empty

Reset number of elements.

@see getNumElements
@see setNumElements
isEmpty:boolean

Check if array is empty (numElements == 0).
add,Value val

Add new §Value.
addVoid

Add void value.
insert

Insert §Value at index
delete

Delete §Value at index
reverse

Reverse element order
setNumElements,int num

Set the number of used elements.

@arg num New number of used elements
@see empty
@see getNumElements
indexOfPointer,Object o:int

Return the index of the element that points to the given object.

@arg o The object pointer to look for
@arg startOff Start index
@return Array index or -1 if the object address was not found in this array
@see containsPointer
indexOfObject,Object o:int

Return the index of the element that equals the given object.

@arg o The object to look for
@arg startOff Start index
@return Array index or -1 if no matching object was found in this array
@see containsObject
containsObject,Object o:boolean

Check whether array contains an object that equals the given object.

@arg o The object to compare with. §Object.yacEquals is used for comparisons.
@return true if a matching object was found, false otherwise.
@see indexOfObject
containsPointer,Object o:boolean

Check whether array contains the given object address.

@arg o The object (address) to compare with.
@return true if a matching object was found, false otherwise.
@see indexOfPointer
getString:String

Return a string representation of this array.

@return new String instance holding a string representation of this array.
get,int index:var

Return the given array element.

Silently return <code>void</code> if the given index is out of bounds.

@arg index Which array element to return
@return element value (non-deletable reference if the element holds an §Object)
@see getDeref
set,int index,Object val

Set element at "index" to "val".
Updates numElements when index exceeds it (>=).

Silently do nothing when index exceed array size (>= maxElements).

Transfers pointer ownership if "val" is a §Value object which stores a deletable object.

@arg index Array index
@arg val New value
getRev,int index:var

Return the array element at (numElements - 1 - index).

Silently return <code>void</code> if the given index is out of bounds.

@arg index Which array element to return
@return element value (non-deletable reference if the element holds an §Object)
@see getDeref
setRev,int index,Object val

Set element at (numElements - 1 - index) to "val".

Silently do nothing when index exceed array size (>= maxElements).

Transfers pointer ownership if "val" is a §Value object which stores a deletable object.

@arg index Array index
@arg val New value
getDeref,int index:var

Return the given (deletable) array element.

Silently return <code>void</code> if the given index is out of bounds.

@arg index Which array element to return
@return element value (deletable reference if the elements holds an §Object)
@see get
swap:int indexA,int indexB:boolean

Swap two array elements.

@arg indexA Index of first element
@arg indexB Index of second element
@return true if the elements have been swapped successfully, false otherwise.
useAll

Mark all array elements used, i.e. set numElements = maxElements.

getFirst:var

Return first array element.

@return First array element or void if the array is empty. Objects are returned as non-deletable references.

getLast:var

Return last used array element.

@return Last used array element (numElements - 1) or void if the array is empty. Objects are returned as non-deletable references.

joinArrays,Object a,Object b,boolean bCopyA,boolean bCopyB,boolean bUnlinkA,boolean bUnlinkB:boolean

Join arrays 'a' and 'b'.

If none of the copy/unlink flags is set, object values will be copied by reference.

In case that 'a' or 'b' is 'this', object values will always be unlinked ("deref").

The §joinCC, §joinCR, §joinCD, §joinRR, §joinRC, §joinRC, §joinRD, §joinDD, §joinDC, §joinDC are provided
for reasons of convenience (permutations of the copyA/copyB/unlinkA/unlinkB arguments).

(C=copy, R=reference, D=deref (unlink))

@arg a Other array (or this, or null)
@arg b Other array (or this, or null)
@arg bCopyA If true, copy/duplicate array 'a' object values
@arg bCopyB If true, copy/duplicate array 'b' object values
@arg bUnlinkA If true, unlink object values from array 'a'. Takes precedence over bCopyA.
@arg bUnlinkB If true, unlink object values from array 'b'. Takes precedence over bCopyA.

@return True if arrays were joined. False when new array elements could not be allocated.
joinCC,Object a,Object b:boolean
Join arrays a and b. Copy elements.
   joinCR,Object a,Object b:boolean
Join arrays a and b. Copy 'A' elements, reference 'B' elements.
   joinCD,Object a,Object b:boolean
Join arrays a and b. Copy 'A' elements, dereference 'B' elements.
   joinRR,Object a,Object b:boolean
Join arrays a and b. Reference elements.
   joinRC,Object a,Object b:boolean
Join arrays a and b. Reference 'A' elements, copy 'B' elements.
   joinRD,Object a,Object b:boolean
Join arrays a and b. Reference 'A' elements, dereference 'B' elements.
   joinDD,Object a,Object b:boolean
Join arrays a and b. Dereference elements.
   joinDC,Object a,Object b:boolean
Join arrays a and b. Dereference 'A' elements, copy 'B' elements.
   joinDR,Object a,Object b:boolean
Join arrays a and b. Dereference 'A' elements, reference 'B' elements.
   Exception,Object

Represents an Error object generated by the <code>throw</code> statement.

getId:int

Get exception/error id.

@return Exception/error id
getName:String

Get exception/error class name
@return Exception/error class name
getFullName:String

Get exception/error class name, prefixed by parent class name (if any)

@return Exception/error class name
getMessage:String

Get the user defined error message.

@return Error message
getStackTrace:String

Return a string-representation of the stack trace (as seen when the error occured).

@return Stack trace debug string
DummyStream,Object

A no-op §Stream that can be used to determine buffer sizes for real write ops.

setSize,int num:boolean

Set stream size.

@arg num New stream size
@return true
LFSR

Pseudo random number generator (linear feedback shift register).
init,int seed

@arg seed Random seed
@arg numPre Number of warm-up rands() calls
rands:int
@return Pseudo-random signed integer
randu:int
@return Pseudo-random unsigned integer
randf:float max
@return Pseudo-random float between 0..max
LFSR_NR

Non-repeating Pseudo random number generator (linear feedback shift register).

Warning: This is meant for _small_ random arrays (e.g. a sequence of 32 random values).
 It becomes exponentially slower with larger array sizes, e.g.:
    len=   8: ~9.1 mrand/sec
    len=  16: ~7.0 mrand/sec
    len=  32: ~5.8 mrand/sec
    len=  64: ~4.2 mrand/sec
    len= 128: ~2.9 mrand/sec
    len= 256: ~1.9 mrand/sec
    len= 512: ~1.1 mrand/sec
    len=1024: ~0.6 mrand/sec
    len=2048: ~0.3 mrand/sec
    len=4096: ~0.15 mrand/sec
 (see tks-examples/lfsr.tks)
init,int seed,int len
@arg seed 0=use address of this (pseudo-random seed). >0: use given uint32 value
@arg len Number of random values
@arg numPre Number of warm-up rands() calls (suggested value: 8)
getNext
Return next random value in the range 0..(len-1)
exit,int return
Exit with the given return code
GetCurrentThread:Thread
Query current thread object

TkScript must have been compiled with thread local storage support (HAVE_TLS)
or this function will always return null.

@return Current §Thread object
@see Thread
getenv,String name:String
Get environment variable

This is a wrapper for the getenv() native function.
putenv,String name:String
Set environment variable

This is a wrapper for the putenv() native function.
mathPowerf,float x,float y:float
Return x raised to the power of y.

This is different to pow() in regard to negative 'x': mathPowerf() returns (sign(x) * pow(abs(x), y)).
mathPowerfC,float x,float y:float
Return x raised to the power of y (pow())
mathMaxf,float x,float y:float
Return bigger value
mathMinf,float x,float y:float
Return smaller value
mathAbsMaxf,float x,float y:float
Return absolutely bigger value
mathAbsMinf,float x,float y:float
Return absolutely smaller value
mathPoweri,int x,int y:int
Return x raised to the power of y
mathMaxi,int x,int y:int
Return bigger value
mathMini,int x,int y:int
Return smaller value
mathAbsMini,int x,int y:int
Return absolutely bigger value
mathAbsMini,int x,int y:int
Return absolutely smaller value
floor,float f:float
Round to next smaller integer
ceil,float f:float
Round to next bigger integer
mathLerpf,float a,float b,float t:float
Return linear interpolation of values a and b according to t (0..1) (a + (b-a)*t)
mathSerpf,float a,float b,float t:float
Return sine interpolation of values a and b according to t (0..1)
mathCerpf,float a,float b,float t:float
Return cosine interpolation of values a and b according to t (0..1)
mathLerpCyclicf,float x,float y,float c,float t:float
Cyclic interpolation

@arg x
@arg y
@arg c Cycle interval (e.g. 2PI or 360)
@return interpolated value
mathNextCyclicf,float c,float n,float cycle:float
Return next 'n' (shortest distance between last 'c' and next 'n' with cyclic period = 'cycle', e.g. 360.0 or "PI)
@arg c current value
@arg n next value
@arg cycle Period len, e.g. 360.0 or 2PI
mathSmoothStepf,float a,float b,float s:float
Return smooth-step interpolation of values a and b according to s (0..1) (a*(1-t)+b*t, with t=(s*s*(3-2*s)) )
mathSmoothStepNf,float a,float b,float s,int n:float
Return (higher-order) smooth-step interpolation of values a and b. n must be in the range (0..6).
mathClampf,float a,float b,float t:float
Clamp value to min/max range
mathClampi,int a,int b,int c:int
Clamp value to min/max range
mathWrapf,float a,float b,float t:float
Wrap value around min/max range
mathWrapi,int a,int b,int t:int
Wrap value around min/max range
mathFoldf,float a,float b,float t:float
Fold value into min/max range
mathFoldi,int a,int b,int t:int
Fold value into min/max range
mathDistancePointPlane2d,float px,float py,float qx,float qy,float nx,float ny:float
Return distance of point p to infinite plane.


q is a point on the plane and n is the plane normal.

@arg px a point
@arg py a point
@arg qx a point on the plane
@arg qy a point on the plane
@arg nx the plane normal
@arg ny the plane normal
@return distance of point to plane
mathGCD,int x,int y:int
Return greatest common divisor via Euclidean algorithm
system,String cmd
Invoke system command

@arg cmd Command line
psystem,String cmd,char access,String buf:int
Invoke system command

@arg cmd Command line
@arg access r to read result to buf, w to read input from buf
@arg buf Input resp. output buffer
@return Number of bytes read resp. written
lcchar,char c:char
Convert character to lower case
ucchar,char c:char
Convert character to upper case
srand,int seed
Set random seed
milliSeconds:int
Return milliseconds since system start
milliSecondsDouble,Double d
For profiling purposes only, cannot be used to measure long time spans.

@arg d Preallocated Double object that will be used to store the timestamp
