tksampler
tksampler
StLFO,Object
 StModSeq,Object
 STSAMPLE_DEFAULT_MAXVOICES,int
 StSamplePlayer,Object
  Manages a finite number of §StSampleVoice objects
 STSAMPLEPLAYER_MAXVOICES,int
 STSAMPLEPLAYER_POLYMODE_OLDEST,int
 STSAMPLEPLAYER_POLYMODE_LOWEST,int
 STSAMPLEPLAYER_POLYMODE_HIGHEST,int
 STSAMPLEPLAYER_NUM_POLYMODES,int
 resetModulator
      Reset all modulators
   allocVoices,int maxPolyphony:boolean
      Allocate internal voice pool

     @arg mayPolyphony Number of voices to allocate
     @return 1(true) if the allocation succeeded, 0(false) otherwise.
   getNumVoices:int
      Query polyphony
   getNumUsedVoices:int
      Query number of currently used voices
   getNumActiveVoices:int
      Query number of currently used (allocated) voices
   getNumPlayingVoices:int
      Query number of currently used (allocated+playing) voices
   getNumActiveNotes:int
      Query number of currently (pressed) notes
   getVoice,int idx:StSampleVoice
      Query voice object
   findFirstActiveSampleVoice,StSample sample:StSampleVoice
      Query voice object
   findLastStartedVoice,StSample sample:StSampleVoice
      Query voice object
   setDefaultMixRate,float mixRate
      Set default mixrate for new sample voices

      (initial value is 48000Hz)
   getDefaultMixRate:float
      Query default mixrate
   setDefaultFreqTable,FloatArray freqTable
      Set default frequency table for new sample voices

      This table is used when the freqTable argument in calls to §startSample or §startSampleBank is null
       and the sample bank's default_tuning_table_idx / forced_tuning_table_idx does ot map to a valid table.
   getDefaultFreqTable:FloatArray
      Query default frequency table
   setVolume,float volume
    getVolume:float
    setPolyMode,int mode
      Select voice allocation strategy

      @mode See STSAMPLEPLAYER_POLYMODE_xxx constants, e.g. STSAMPLEPLAYER_POLYMODE_OLDEST
   getPolyMode:int
      Query voice allocation strategy

      @return Current poly mode (default = §STSAMPLEPLAYER_POLYMODE_OLDEST)
   allNotesOff
      Stop all currently playing voices (with fadeout but no release)
   allNotesOffRelease
      Release all currently playing voices (like regular note offs)
   reset
      Immediately reset / stop all voices (no fadeout)
   stopVoicesBySample,StSample sample
      Immediately stop all voices that play the given sample (no fadeout)
      This is called when modifying the sample's waveform.
   stopVoicesByKey,int voiceKey
      Immediately stop all voices that are assigned the given key (no fadeout)
      This is called when muting a track.
   stopVoicesBySample,StSample sample
      Stop all voices that play the given sample (with fadeout)
   stopLFOVolBySample,StSample sample
      Immediately stop all volume LFOs that belong to voices that play the given sample.
      This is called when deleting an LFO in the UI while the voice is playing.
   stopLFOPanBySample,StSample sample
      Immediately stop all pan LFOs that belong to voices that play the given sample.
      This is called when deleting an LFO in the UI while the voice is playing.
   stopLFOFreqBySample,StSample sample
      Immediately stop all frequency LFOs that belong to voices that play the given sample.
      This is called when deleting an LFO in the UI while the voice is playing.
   stopADSRVolBySample,StSample sample
      Immediately stop all volume ADSRs that belong to voices that play the given sample.
      This is called when deleting an ADSR in the UI while the voice is playing.
   stopADSRPanBySample,StSample sample
      Immediately stop all pan ADSRs that belong to voices that play the given sample.
      This is called when deleting an LFO in the UI while the voice is playing.
   stopADSRFreqBySample,StSample sample
      Immediately stop all frequency ADSRs that belong to voices that play the given sample.
      This is called when deleting an ADSR in the UI while the voice is playing.
   noteOff,int note,float velocity:int
      Begin release phase of all voices that were triggered on the given key

      @arg note MIDI note (0..127)
      @arg velocity Note-off velocity (0..1)
      @return Number of voices affected (0..n)
   noteOffByKey,int voiceKey,float velocity:int
      Begin release phase of all voices that share the given voice key

      @arg voiceKey Voice key
      @arg velocity Note-off velocity (0..1)
      @return Number of voices affected (0..n)
   startSample,StSample sample,FloatArray freqTableOrNull,int note,float velocity,float mod:int
      Allocate voice and prepare to play the given sample.

      Any voice that plays a sample belonging to the same mutex group will be canceled.

      initStartedVoicesByKey() must be called to actually initialize the voice.

      @arg sample Which sample to play
      @arg freqTable Frequency table override (scale)
      @arg note Which note to play (0..127)
      @arg velocity Note-on velocity (0..1)
      @arg mod Modulation
      @return Voice key (incremental)

      @see startSampleBank
      @see noteOff
      @see allNotesOff
   startSampleBank,StSampleBank sampleBank,FloatArray freqTableOrNull,int note,float velocity,float mod:int
      Allocate voice(s) and play the samplebank samples that match the given note/velo/mod zones.

      Any voice that plays a sample belonging to the same mutex group(s) will be canceled.

      initStartedVoicesByKey() must be called to actually initialize the voice.

      @arg sample Which sample to play
      @arg freqTableOrNull Frequency table override (scale)
      @arg note Which note to play (0..127)
      @arg velocity Note-on velocity (0..1)
      @arg mod Modulation
      @return Voice key (incremental)

      @see startSample
      @see noteOff
      @see allNotesOff
   findVoicesByKey,int key,PointerArray ret:int
      Find all voices that are assigned the given key.

      @return Number of voices added to array.
   findPreviousGlideNoteByKey,int key:int historyIdx:int
      Return -1 or glide_prev_note for first gliding voice that is assigned the given voicekey.

      @arg key voice key
      @arg historyIdx 0=newest, 'n'=oldest
   removeFromGlideNoteHistory,int note,boolean bLastOnly
      Iterate voices and remove given note from glide note histories

      @arg bLastOnly Only remove when note is latest in history
      @return true if one or more voice histories have changed
   initStartedVoicesByKey,int key
      Really trigger note-on. Should be called after (initial) params have been set.
    restartVoicesByKey,int key
      Reset playing voices.
    render,FloatArray buf
      Render currently playing voices to the given (stereo) buffer (add).

      @arg buf Render buffer. numElements/2 determines the number of samples to render.
   renderWithInputs,FloatArray buf,PointerArray paInputs,boolean bRender
      Render currently playing voices to the given (stereo) buffer (add).

      @arg buf Render buffer. numElements/2 determines the number of samples to render.
      @arg paInputs PointerArray of FloatArrays (mono inputs, up to STSAMPLE_MAX_INPUTS (4) FloatArrays)
      @arg bRender 1=generate outputs, 0=process inputs only
      @arg processTickNr Used to limit input processing to one sampleplayer per samplebank
   updateVol,float v
      Update volume modulation of all active voices
   updatePan,float v
      Update panning modulation of all active voices
   updateFreq,float v
      Update frequency modulation of all active voices
   updateFreq2,float v
      Update frequency modulation #2 of all active voices
   updateMod,float v
      Update modulation of all active voices
   updateTimestretch,float v
      Update timestretch modulation of all active voices
   updateTimestretchBend,float v
      Update timestretch phase bend modulation of all active voices
   updateSampleOff,float v
      Update sample offset modulation of all active voices
   updateCycleLen,float v
      Update timestretch granularity modulation of all active voices
   updateSampleShift,float v
      Update sample shift modulation of all active voices
   updateSampleShiftEndOfLoop,float v
      Update sample shift modulation of all active voices (queue until end of loop)
   updateAltVolume,float v
      Update alternative volume modulation of all active voices
   updateRetrigMask,int v
      Retrigger envelope/LFO of all active voices
         0x01: reset freq envelope
         0x02: reset volume envelope
         0x04: reset pan envelope
         0x08: reset aux envelope
         0x10: reset freq LFO
         0x20: reset volume LFO
         0x40: reset pan LFO
         0x80: reset aux LFO
   updateLFOFreqSpd,float spd
      Update frequency LFO speed of all active voices
   updateLFOFreqLvl,float lvl
      Update frequency LFO level of all active voices
   updateLFOFreqAmt,float amt
      Update frequency LFO => frequency amount modifier
    updateLFOVolSpd,float spd
      Update volume LFO speed of all active voices
   updateLFOVolLvl,float lvl
      Update volume LFO level of all active voices
   updateLFOVolAmt,float amt
      Update volume LFO => volume amount modifier
    updateLFOPanSpd,float spd
      Update pan LFO speed of all active voices
   updateLFOPanLvl,float lvl
      Update pan LFO level of all active voices
   updateLFOPanAmt,float amt
      Update pan LFO => pan amount modifier
    updateLFOAuxSpd,float spd
      Update aux LFO speed of all active voices
   updateLFOAuxLvl,float lvl
      Update aux LFO level of all active voices
   updateLFOAuxFltAmt,float amt
      Update aux LFO => filter cutoff amount modifier
    updateADSRFreqSpd,float spd
      Update frequency ADSR speed of all active voices
   updateADSRFreqLvl,float lvl
      Update frequency ADSR level of all active voices
   updateADSFreqInt,float int
      Update frequency ADSR intensity of all active voices
   updateADSRVolSpd,float spd
      Update volume ADSR speed of all active voices
   updateADSRVolLvl,float lvl
      Update volume ADSR level of all active voices
   updateADSRVolInt,float int
      Update volume ADSR intensity of all active voices
   updateADSRPanSpd,float spd
      Update pan ADSR speed of all active voices
   updateADSRPanLvl,float lvl
      Update pan ADSR level of all active voices
   updateADSRPanInt,float int
      Update pan ADSR intensity of all active voices
   updateADSRAuxSpd,float spd
      Update aux ADSR speed of all active voices
   updateADSRAuxLvl,float lvl
      Update aux ADSR level of all active voices
   updateADSRAuxInt,float int
      Update aux ADSR intensity of all active voices
   updateJumpToLoop,int idx
      Make all playing voices jump to the given loop
   updateJumpToLoopRel,int idx
      Make all playing voices jump to the given loop (0..1 => 0..num_loops-1)
   updateWavepathIndex,int idx
      Make all playing voices jump to the given cycle index (granular mode)
   updateAFreqSpd,float int
      Update freq attack speed of all active voices
   updateSFreqSpd,float int
      Update freq sustain speed of all active voices
   updateRFreqSpd,float int
      Update freq release speed of all active voices
   updateAVolSpd,float int
      Update volume attack speed of all active voices
   updateSVolSpd,float int
      Update volume sustain speed of all active voices
   updateRVolSpd,float int
      Update volume release speed of all active voices
   updateAPanSpd,float int
      Update pan attack speed of all active voices
   updateSPanSpd,float int
      Update pan sustain speed of all active voices
   updateRPanSpd,float int
      Update pan release speed of all active voices
   updateAAuxSpd,float int
      Update aux attack speed of all active voices
   updateSAuxSpd,float int
      Update aux sustain speed of all active voices
   updateRAuxSpd,float int
      Update aux release speed of all active voices
   updateGlideSwitch,boolean bEnable
      Update glide switch of all active voices
   updateGlideSpeed,float speed
      Update glide speed of all active voices
   updateFltCutOff,float f
      Update filter cutoff of all active voices
   updateFltPan,float f
      Update filter panning of all active voices
   updateFltOffset,float f
      Update filter offset of all active voices
   updateFltRes,float f
      Update filter resonance of all active voices
   resetLFOFreqPhase
      Reset frequency LFO phase
   resetLFOVolPhase
      Reset volume LFO phase
   resetLFOPanPhase
      Reset panning LFO phase
   resetLFOAuxPhase
      Reset aux LFO phase
   updatePerfCtl,int idx,float val
      Update performance controller (original MIDI range, 0..127 or 0..16383)
   updatePerfCtls,FloatArray initialPerfCtl
      Update performance controllers. Skip when value is <0.
   setSustainPedal,float val
      Update sustain pedal state (0..1) (for zone mod matrix)
   setSoftPedal,float val
      Update soft pedal state (0..1) (for zone mod matrix)
   StSampleVoice,Object
 *
 *  The replayer (linearly) interpolates frequency/volume and panning across a "sample block".
 *  Samples are also interpolated linearly.
 *  Volume ramping can be done via the A(DS)R envelopes.
 *
 *  Updated vol/pan/freq modulation info is read when a new block is started (copied from "queued" shadow members).
 *  The default block size/length is STSAMPLEVOICE_BLOCK_LEN seconds, or 44.1 samples @44100Hz mixrate.
 *
 *  The update mechanism is not "sample realtime" but behaves more like a hardware MIDI/USB sampler.
 *  The latency depends on the output buffer size.
 *  I recommend 256 samples @ 48Khz, i.e. 5 millisec latency. This should be fast enough for LFOs and arpeggiators..
 *  (also see the tkportaudio plugin for low latency audio I/O via Steinberg's ASIO2 API on Win32)
 *
 *  The voice is marked inactive when
 *    a) The end of the sample has been reached and there are no more loops
 *    b) The volume release envelope finishes (i.e. some time after a note-off or immediately if there is no vol. envelope)
 *
 *  The current replay note+finetune is mapped via a user-defined frequency table (can be changed per-voice).
 *
 *  Reverse play and "scratch" fx currently only work with loop samples (i.e. the whole sample will be looped).
 getVoiceIndex:int
    Query index of sample voice in sample player voice array
   init,StSample sample,FloatArray freqTable,float mixRate,int note
      Initialize sample voice.

      @arg sample - Which sample to play
      @arg freqTable - Used to convert MIDI note number to frequency (Hz). At least 128 entries.
      @arg note - Which MIDI note to play (fraction is used for detune)
      @arg mod - Initial modulation
      @arg vol - Initial volume modulation
      @arg pan - Initial pan modulation
      @arg freq - Initial frequency modulation
   restartVoice
      Reset currently playing voice
   stopVoice
      Mark voice inactive (no fadeout)
   softStopVoice
      Fadeout voice and stop it
   noteOff,float velocity
      Start release phase

      If there is no release envelope, the voice is stopped immediately

      @arg velocity Note-off velocity (0..1)
   noteToFreq,float note:float
      Map MIDI note to frequency (Hz) using currently set freq_table.

      @arg note MIDI note number (fraction for detune)
      @return Frequency (Hz)
   setVol,float vol
      Set volume modulation
   getVol:float
      Return volume modulation
   setVol2,float vol
      Set volume modulation 2 (randomization)
   getVol2:float
      Return volume modulation (randomization)
   setPan,float pan
      Set panning modulation
   getPan:float
      Return panning modulation
   setPan2,float pan
      Set panning modulation (randomization)
   getPan2:float
      Return panning modulation (randomization)
   setFreq,float freq
      Set frequency modulation
   getFreq:float
      Return frequency modulation
   setFreq2,float freq
      Set frequency modulation 2 (additive, randomization)
   getFreq2:float
      Return frequency modulation
   setMod,float mod
      Set modulation

      This only has an effect when there is a mod range defined
   getMod:float
      Return modulation
   setTimestretch,float ts
      Set timestretch modulation

      This only has an effect when timestretching is enabled
   getTimestretch:float
      Return timestretch modulation
   setTimestretchBend,float ts
      Set timestretch phase bend modulation

      This only has an effect when timestretching is enabled
   getTimestretchBend:float
      Return timestretch phase bend modulation
   setSampleOff,float so
      Set sample offset modulation

   getSampleOff:float
      Return sample offset modulation
   setSampleOff2,float so
      Set sample offset modulation (randomization)

   getSampleOff2:float
      Return sample offset modulation (randomization)
   setCycleLen,float so
      Set granular cycle length modulation

   getCycleLen:float
      Return sample cycle length modulation
   setSampleShift,float sh
      Set sample shift modulation

   getSampleShift:float
      Return sample shift modulation
   setSampleShiftEndOfLoop,float sh
      Set sample shift modulation (queued until end of loop)

   getSampleShiftEndOfLoop:float
      Return sample shift modulation (queued until end of loop)
   setAltVolume,float av
      Set alternative volume modulation

   getAltVolume:float
      Return alternative volume modulation
   retrigEnvLFO,int mask
      Retrigger envelopes/LFOs

   setTimedLoopBase,float base
      Set timedloop repeat frequency (1sec/base)

      This only has an effect when the sample uses timed loops.
    getTimedLoopBase:float
    setLFOFreqSpd,float spd
      Set frequency LFO speed modifier
    setLFOFreqLvl,float lvl
      Set frequency LFO level modifier
    setLFOFreqAmt,float amt
      Set frequency LFO => frequency amount modifier
    setLFOVolSpd,float spd
      Set volume LFO speed modifier
    setLFOVolLvl,float lvl
      Set volume LFO level modifier
    setLFOVolAmt,float amt
      Set volume LFO => volume amount modifier
    setLFOPanSpd,float spd
      Set pan LFO speed modifier
    setLFOPanLvl,float lvl
      Set pan LFO level modifier
    setLFOPanAmt,float amt
      Set pan LFO => pan amount modifier
    setLFOAuxSpd,float spd
      Set aux LFO speed modifier
    setLFOAuxLvl,float lvl
      Set aux LFO level modifier
    setLFOAuxFltAmt,float amt
      Set aux LFO => flt amount modifier
    setADSRFreqSpd,float spd
      Set frequency ADSR speed modifier
    setADSRFreqLvl,float lvl
      Set frequency ADSR level modifier
    setADSRFreqInt,float int
      Set frequency ADSR intensity modifier
    setADSRVolSpd,float spd
      Set volume ADSR speed modifier
    setADSRVolLvl,float lvl
      Set volume ADSR level modifier
    setADSRVolInt,float int
      Set volume ADSR intensity modifier
    setADSRPanSpd,float spd
      Set pan ADSR speed modifier
    setADSRPanLvl,float lvl
      Set pan ADSR level modifier
    setADSRPanInt,float int
      Set pan ADSR intensity modifier
    setADSRAuxSpd,float spd
      Set aux ADSR speed modifier
    setADSRAuxLvl,float lvl
      Set aux ADSR level modifier
    setADSRAuxInt,float int
      Set aux ADSR intensity modifier
    setAFreqSpd,float int
      Set freq attack speed modifier
    setSFreqSpd,float int
      Set freq sustain speed modifier
    setRFreqSpd,float int
      Set freq release speed modifier
    setAVolSpd,float int
      Set volume attack speed modifier
    setSVolSpd,float int
      Set volume sustain speed modifier
    setRVolSpd,float int
      Set volume release speed modifier
    setAPanSpd,float int
      Set pan attack speed modifier
    setSPanSpd,float int
      Set pan sustain speed modifier
    setRPanSpd,float int
      Set pan release speed modifier
    setAAuxSpd,float int
      Set aux attack speed modifier
    setSAuxSpd,float int
      Set aux sustain speed modifier
    setRAuxSpd,float int
      Set aux release speed modifier
    setJumpToLoop,int idx
      Queue jump to loop
    setJumpToLoopRel,float relIdx
      Queue jump to loop (0..1 => 0..num_loops-1)
    setWavepathIndex,int idx
      Queue next cycle
    setModSeqRetrigMask,int mask
    setModSeqSpeed,float speed
    setModSeqLevel,float level
    setModSeqNumStepsRel,float numStepsRel
    setModSeqAdvance,float advance
    render,FloatArray buf
    PrintDebugStats
      Pseudo-static method that prints mixer codepath statistics (for debugging/optimization)
   setFilterCutOff,float f
      Set filter cutoff modifier
    setFilterPan,float f
      Set filter stereo pan modifier
    setFilterOffset,float f
      Set filter offset modifier
    setFilterResonance,float f
      Set filter resonance modifier
    setGlideSwitch,boolean bEnable
      Set glide switch
    setGlideSpeed,float speed
      Set glide speed
    resetLFOFreqPhase
      Reset frequency LFO phase
   resetLFOVolPhase
      Reset volume LFO phase
   resetLFOPanPhase
      Reset panning LFO phase
   resetLFOAuxPhase
      Reset aux LFO phase
   updatePerfCtlPolyPressure,float value
      Update poly pressure (0..127)
    mmVarGetIdx:int
      Returns currently playing mod matrix variation index (0..15)
   