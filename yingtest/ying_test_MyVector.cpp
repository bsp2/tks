// ---- ying_test_MyVector.cpp: auto generated by YInG - the YAC interface generator (Wed, 14/Dec/2022 11:42:32)

sF32  YAC_CALL MyVector__getAbs     (void *                        );
sF32  YAC_CALL MyVector__getX       (void *                        );
void YAC_CALL MyVector__setX        (void *, yacmemptr             );
sF32  YAC_CALL MyVector__getY       (void *                        );
void YAC_CALL MyVector__setY        (void *, yacmemptr             );
sF32  YAC_CALL MyVector__getZ       (void *                        );
void YAC_CALL MyVector__setZ        (void *, yacmemptr             );

// ------------------ YAC class "MyVector" reflection map (implementation) ------------------
sUI          YAC_VCALL MyVector::yacMemberGetNum                  (void) {return 3;}
const char **YAC_VCALL MyVector::yacMemberGetNames                (void) {static const char*r[]={"x", "y", "z"};return r; }
const sUI   *YAC_VCALL MyVector::yacMemberGetTypes                (void) {static const sUI r[]={2, 2, 2}; return r; }
const char **YAC_VCALL MyVector::yacMemberGetObjectTypes          (void) {static const char*r[]={(const char*)0, (const char*)0, (const char*)0};return r; }
const sU8  **YAC_VCALL MyVector::yacMemberGetOffsets              (void) {static const sU8*r[]={((sU8*)((((sU8*)&x)-((sU8*)this)))), ((sU8*)((((sU8*)&y)-((sU8*)this)))), ((sU8*)((((sU8*)&z)-((sU8*)this))))};return r;}
sUI          YAC_VCALL MyVector::yacMethodGetNum                  (void) {return 8;}
const char **YAC_VCALL MyVector::yacMethodGetNames                (void) {static const char *r[]={"operator", "getAbs", "getX", "setX", "getY", "setY", "getZ", "setZ"}; return r;}
const sUI   *YAC_VCALL MyVector::yacMethodGetNumParameters        (void) {static const sUI r[]={2, 0, 0, 1, 0, 1, 0, 1}; return r;}
const sUI  **YAC_VCALL MyVector::yacMethodGetParameterTypes       (void) {static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={2,};static const sUI rt4[]={0,};static const sUI rt5[]={2,};static const sUI rt6[]={0,};static const sUI rt7[]={2,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7}; return r;}
const char***YAC_VCALL MyVector::yacMethodGetParameterObjectTypes (void) {static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={"", };static const char *rs3[]={"", };static const char *rs4[]={"", };static const char *rs5[]={"", };static const char *rs6[]={"", };static const char *rs7[]={"", };static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7}; return r;}
const sUI   *YAC_VCALL MyVector::yacMethodGetReturnTypes          (void) {static const sUI r[]={4, 2, 2, 0, 2, 0, 2, 0}; return r;}
const char **YAC_VCALL MyVector::yacMethodGetReturnObjectTypes    (void) {static const char *r[]={"", (const char*)0, "", "", "", "", "", ""}; return r;}
const void **YAC_VCALL MyVector::yacMethodGetAdr                  (void) {static const void *r[]={(void*)Object__operator, (void*)MyVector__getAbs, (void*)MyVector__getX, (void*)MyVector__setX, (void*)MyVector__getY, (void*)MyVector__setY, (void*)MyVector__getZ, (void*)MyVector__setZ}; return r;}
sUI          YAC_VCALL MyVector::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL MyVector::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL MyVector::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL MyVector::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(MyVector, "MyVector");

sF32  YAC_CALL MyVector__getAbs     (void *_o                                ) {return (sF32)((MyVector*)_o)->getAbs();}
sF32 MyVector__getX                 (void *_o                                ) {return (sF32)((MyVector*)_o)->x;}
void YAC_CALL MyVector__setX        (void *_o, yacmemptr _args               ) {((MyVector*)_o)->x=_args.mem[0].f32;}
sF32 MyVector__getY                 (void *_o                                ) {return (sF32)((MyVector*)_o)->y;}
void YAC_CALL MyVector__setY        (void *_o, yacmemptr _args               ) {((MyVector*)_o)->y=_args.mem[0].f32;}
sF32 MyVector__getZ                 (void *_o                                ) {return (sF32)((MyVector*)_o)->z;}
void YAC_CALL MyVector__setZ        (void *_o, yacmemptr _args               ) {((MyVector*)_o)->z=_args.mem[0].f32;}
