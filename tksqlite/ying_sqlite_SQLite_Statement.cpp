// ---- ying_sqlite_SQLite_Statement.cpp: auto generated by YInG - the YAC interface generator (Sat, 21/Jan/2023 15:19:31)

void  YAC_CALL SQLite_Statement__clearParameters(void *            );
void  YAC_CALL SQLite_Statement__getHashTableResult(void *, YAC_Value *);
void  YAC_CALL SQLite_Statement__getValueArrayResult(void *, YAC_Value *);
void  YAC_CALL SQLite_Statement__getStringArrayResult(void *, YAC_Value *);
void* YAC_CALL SQLite_Statement__getDatabase(void *                );
sSI   YAC_CALL SQLite_Statement__getColumnCount(void *             );
void  YAC_CALL SQLite_Statement__getColumnDeclType(void *, yacmemptr, YAC_Value *);
void  YAC_CALL SQLite_Statement__getColumnName(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL SQLite_Statement__getColumnType(void *, yacmemptr   );
void  YAC_CALL SQLite_Statement__getColumnValue(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL SQLite_Statement__getParameterCount(void *          );
void  YAC_CALL SQLite_Statement__getParameterName(void *, yacmemptr, YAC_Value *);
void  YAC_CALL SQLite_Statement__reset(void *                      );
void  YAC_CALL SQLite_Statement__setBlob(void *, yacmemptr         );
void  YAC_CALL SQLite_Statement__setBlobByName(void *, yacmemptr   );
void  YAC_CALL SQLite_Statement__setDouble(void *, yacmemptr       );
void  YAC_CALL SQLite_Statement__setDoubleByName(void *, yacmemptr );
void  YAC_CALL SQLite_Statement__setFloat(void *, yacmemptr        );
void  YAC_CALL SQLite_Statement__setFloatByName(void *, yacmemptr  );
void  YAC_CALL SQLite_Statement__setInt(void *, yacmemptr          );
void  YAC_CALL SQLite_Statement__setIntByName(void *, yacmemptr    );
void  YAC_CALL SQLite_Statement__setLong(void *, yacmemptr         );
void  YAC_CALL SQLite_Statement__setLongByName(void *, yacmemptr   );
void  YAC_CALL SQLite_Statement__setNull(void *, yacmemptr         );
void  YAC_CALL SQLite_Statement__setNullByName(void *, yacmemptr   );
void  YAC_CALL SQLite_Statement__setText(void *, yacmemptr         );
void  YAC_CALL SQLite_Statement__setTextByName(void *, yacmemptr   );
sSI   YAC_CALL SQLite_Statement__step(void *                       );
void  YAC_CALL SQLite_Statement__storeHashTableResult(void *, yacmemptr);
void  YAC_CALL SQLite_Statement__storeValueArrayResult(void *, yacmemptr);
void  YAC_CALL SQLite_Statement__storeStringArrayResult(void *, yacmemptr);

// ------------------ YAC class "SQLite_Statement" reflection map (implementation) ------------------
sUI          YAC_VCALL SQLite_Statement::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL SQLite_Statement::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL SQLite_Statement::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL SQLite_Statement::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL SQLite_Statement::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL SQLite_Statement::yacMethodGetNum                  (void) {return 32;}
const char **YAC_VCALL SQLite_Statement::yacMethodGetNames                (void) {static const char *r[]={"operator", "clearParameters", "getHashTableResult", "getValueArrayResult", "getStringArrayResult", "getDatabase", "getColumnCount", "getColumnDeclType", "getColumnName", "getColumnType", "getColumnValue", "getParameterCount", "getParameterName", "reset", "setBlob", "setBlobByName", "setDouble", "setDoubleByName", "setFloat", "setFloatByName", "setInt", "setIntByName", "setLong", "setLongByName", "setNull", "setNullByName", "setText", "setTextByName", "step", "storeHashTableResult", "storeValueArrayResult", "storeStringArrayResult"}; return r;}
const sUI   *YAC_VCALL SQLite_Statement::yacMethodGetNumParameters        (void) {static const sUI r[]={2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 0, 1, 1, 1}; return r;}
const sUI  **YAC_VCALL SQLite_Statement::yacMethodGetParameterTypes       (void) {static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={1,};static const sUI rt8[]={1,};static const sUI rt9[]={1,};static const sUI rt10[]={1,};static const sUI rt11[]={0,};static const sUI rt12[]={1,};static const sUI rt13[]={0,};static const sUI rt14[]={1, 3,};static const sUI rt15[]={3, 3,};static const sUI rt16[]={1, 3,};static const sUI rt17[]={3, 3,};static const sUI rt18[]={1, 2,};static const sUI rt19[]={3, 2,};static const sUI rt20[]={1, 1,};static const sUI rt21[]={3, 1,};static const sUI rt22[]={1, 3,};static const sUI rt23[]={3, 3,};static const sUI rt24[]={1,};static const sUI rt25[]={3,};static const sUI rt26[]={1, 3,};static const sUI rt27[]={3, 3,};static const sUI rt28[]={0,};static const sUI rt29[]={3,};static const sUI rt30[]={3,};static const sUI rt31[]={3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31}; return r;}
const char***YAC_VCALL SQLite_Statement::yacMethodGetParameterObjectTypes (void) {static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0, (const char*)0,};static const char *rs15[]={(const char*)0, (const char*)0,};static const char *rs16[]={(const char*)0, (const char*)0,};static const char *rs17[]={(const char*)0, (const char*)0,};static const char *rs18[]={(const char*)0, (const char*)0,};static const char *rs19[]={(const char*)0, (const char*)0,};static const char *rs20[]={(const char*)0, (const char*)0,};static const char *rs21[]={(const char*)0, (const char*)0,};static const char *rs22[]={(const char*)0, (const char*)0,};static const char *rs23[]={(const char*)0, (const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0, (const char*)0,};static const char *rs27[]={(const char*)0, (const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31}; return r;}
const sUI   *YAC_VCALL SQLite_Statement::yacMethodGetReturnTypes          (void) {static const sUI r[]={4, 0, 4, 4, 4, 3, 1, 4, 4, 1, 4, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0}; return r;}
const char **YAC_VCALL SQLite_Statement::yacMethodGetReturnObjectTypes    (void) {static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;}
const void **YAC_VCALL SQLite_Statement::yacMethodGetAdr                  (void) {static const void *r[]={(void*)Object__operator, (void*)SQLite_Statement__clearParameters, (void*)SQLite_Statement__getHashTableResult, (void*)SQLite_Statement__getValueArrayResult, (void*)SQLite_Statement__getStringArrayResult, (void*)SQLite_Statement__getDatabase, (void*)SQLite_Statement__getColumnCount, (void*)SQLite_Statement__getColumnDeclType, (void*)SQLite_Statement__getColumnName, (void*)SQLite_Statement__getColumnType, (void*)SQLite_Statement__getColumnValue, (void*)SQLite_Statement__getParameterCount, (void*)SQLite_Statement__getParameterName, (void*)SQLite_Statement__reset, (void*)SQLite_Statement__setBlob, (void*)SQLite_Statement__setBlobByName, (void*)SQLite_Statement__setDouble, (void*)SQLite_Statement__setDoubleByName, (void*)SQLite_Statement__setFloat, (void*)SQLite_Statement__setFloatByName, (void*)SQLite_Statement__setInt, (void*)SQLite_Statement__setIntByName, (void*)SQLite_Statement__setLong, (void*)SQLite_Statement__setLongByName, (void*)SQLite_Statement__setNull, (void*)SQLite_Statement__setNullByName, (void*)SQLite_Statement__setText, (void*)SQLite_Statement__setTextByName, (void*)SQLite_Statement__step, (void*)SQLite_Statement__storeHashTableResult, (void*)SQLite_Statement__storeValueArrayResult, (void*)SQLite_Statement__storeStringArrayResult}; return r;}
sUI          YAC_VCALL SQLite_Statement::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL SQLite_Statement::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL SQLite_Statement::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL SQLite_Statement::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(SQLite_Statement, "SQLite_Statement");

void  YAC_CALL SQLite_Statement__clearParameters(void *_o                    ) {((SQLite_Statement*)_o)->clearParameters();}
void  YAC_CALL SQLite_Statement__getHashTableResult(void *_o, YAC_Value *_r  ) {((SQLite_Statement*)_o)->getHashTableResult(_r);}
void  YAC_CALL SQLite_Statement__getValueArrayResult(void *_o, YAC_Value *_r ) {((SQLite_Statement*)_o)->getValueArrayResult(_r);}
void  YAC_CALL SQLite_Statement__getStringArrayResult(void *_o, YAC_Value *_r) {((SQLite_Statement*)_o)->getStringArrayResult(_r);}
void* YAC_CALL SQLite_Statement__getDatabase(void *_o                        ) {return (void*)((SQLite_Statement*)_o)->getDatabase();}
sSI   YAC_CALL SQLite_Statement__getColumnCount(void *_o                     ) {return (sSI)((SQLite_Statement*)_o)->getColumnCount();}
void  YAC_CALL SQLite_Statement__getColumnDeclType(void *_o, yacmemptr _args, YAC_Value *_r) {((SQLite_Statement*)_o)->getColumnDeclType(_args.mem[0].si, _r);}
void  YAC_CALL SQLite_Statement__getColumnName(void *_o, yacmemptr _args, YAC_Value *_r) {((SQLite_Statement*)_o)->getColumnName(_args.mem[0].si, _r);}
sSI   YAC_CALL SQLite_Statement__getColumnType(void *_o, yacmemptr _args     ) {return (sSI)((SQLite_Statement*)_o)->getColumnType(_args.mem[0].si);}
void  YAC_CALL SQLite_Statement__getColumnValue(void *_o, yacmemptr _args, YAC_Value *_r) {((SQLite_Statement*)_o)->getColumnValue(_args.mem[0].si, _r);}
sSI   YAC_CALL SQLite_Statement__getParameterCount(void *_o                  ) {return (sSI)((SQLite_Statement*)_o)->getParameterCount();}
void  YAC_CALL SQLite_Statement__getParameterName(void *_o, yacmemptr _args, YAC_Value *_r) {((SQLite_Statement*)_o)->getParameterName(_args.mem[0].si, _r);}
void  YAC_CALL SQLite_Statement__reset(void *_o                              ) {((SQLite_Statement*)_o)->reset();}
void  YAC_CALL SQLite_Statement__setBlob(void *_o, yacmemptr _args           ) {((SQLite_Statement*)_o)->setBlob(_args.mem[0].si, _args.mem[1].o);}
void  YAC_CALL SQLite_Statement__setBlobByName(void *_o, yacmemptr _args     ) {((SQLite_Statement*)_o)->setBlobByName(_args.mem[0].o, _args.mem[1].o);}
void  YAC_CALL SQLite_Statement__setDouble(void *_o, yacmemptr _args         ) {((SQLite_Statement*)_o)->setDouble(_args.mem[0].si, _args.mem[1].o);}
void  YAC_CALL SQLite_Statement__setDoubleByName(void *_o, yacmemptr _args   ) {((SQLite_Statement*)_o)->setDoubleByName(_args.mem[0].o, _args.mem[1].o);}
void  YAC_CALL SQLite_Statement__setFloat(void *_o, yacmemptr _args          ) {((SQLite_Statement*)_o)->setFloat(_args.mem[0].si, _args.mem[1].f32);}
void  YAC_CALL SQLite_Statement__setFloatByName(void *_o, yacmemptr _args    ) {((SQLite_Statement*)_o)->setFloatByName(_args.mem[0].o, _args.mem[1].f32);}
void  YAC_CALL SQLite_Statement__setInt(void *_o, yacmemptr _args            ) {((SQLite_Statement*)_o)->setInt(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL SQLite_Statement__setIntByName(void *_o, yacmemptr _args      ) {((SQLite_Statement*)_o)->setIntByName(_args.mem[0].o, _args.mem[1].si);}
void  YAC_CALL SQLite_Statement__setLong(void *_o, yacmemptr _args           ) {((SQLite_Statement*)_o)->setLong(_args.mem[0].si, _args.mem[1].o);}
void  YAC_CALL SQLite_Statement__setLongByName(void *_o, yacmemptr _args     ) {((SQLite_Statement*)_o)->setLongByName(_args.mem[0].o, _args.mem[1].o);}
void  YAC_CALL SQLite_Statement__setNull(void *_o, yacmemptr _args           ) {((SQLite_Statement*)_o)->setNull(_args.mem[0].si);}
void  YAC_CALL SQLite_Statement__setNullByName(void *_o, yacmemptr _args     ) {((SQLite_Statement*)_o)->setNullByName(_args.mem[0].o);}
void  YAC_CALL SQLite_Statement__setText(void *_o, yacmemptr _args           ) {((SQLite_Statement*)_o)->setText(_args.mem[0].si, _args.mem[1].o);}
void  YAC_CALL SQLite_Statement__setTextByName(void *_o, yacmemptr _args     ) {((SQLite_Statement*)_o)->setTextByName(_args.mem[0].o, _args.mem[1].o);}
sSI   YAC_CALL SQLite_Statement__step(void *_o                               ) {return (sSI)((SQLite_Statement*)_o)->step();}
void  YAC_CALL SQLite_Statement__storeHashTableResult(void *_o, yacmemptr _args) {((SQLite_Statement*)_o)->storeHashTableResult(_args.mem[0].o);}
void  YAC_CALL SQLite_Statement__storeValueArrayResult(void *_o, yacmemptr _args) {((SQLite_Statement*)_o)->storeValueArrayResult(_args.mem[0].o);}
void  YAC_CALL SQLite_Statement__storeStringArrayResult(void *_o, yacmemptr _args) {((SQLite_Statement*)_o)->storeStringArrayResult(_args.mem[0].o);}
