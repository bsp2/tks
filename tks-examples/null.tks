function getString1() { return "0"; }

function getString1_int():int { return "0"; }

function getDouble():Double { Double d; return d; }

String s="1";

function testJIT_null() compile {
   String s<=null; // "null" is object pointer 0 within JIT code
   if(!s)
      print "JIT: !s           ok (true)";
   else
      print "JIT: !s           NOK (false!=true)";
   if(s)
      print "JIT: s            NOK (true!=false)";
   else
      print "JIT: s            ok (false)";
   if(s==null) 
      print "JIT: s==null      ok (true)";
   else
      print "JIT: s==null      NOK (false!=true)";
}

function main() {
   // ---- within non-JIT code, null is represented by an empty YAC_Object.
   if(null)
      print "null              NOK (true!=false)";
   else
      print "null              ok (false)";

   if(s) // variable expr is never optimized to constant value
      print "s                 ok (true )"; 
   else
      print "s                 NOK (false!=true)";

   if(!s) // variable expr is never optimized to constant value
      print "!s                NOK (true!=false)"; 
   else
      print "!s                ok (false)";

   if(s!=null) // compare with "null" Object constant (class ID = YAC_Object)
      print "s!=null           ok (true )";
   else
      print "s!=null           NOK (false!=true)";
   
   if("0"==0) // compare with 0 integer constant, string is converted to integer
      print "\"0\"==0            ok (true)";

   if("0") //  constant value is typecasted to int during optimization
      print "\"0\"               NOK (true!=false)";
   else
      print "\"0\"               ok (false)";

   if("0"==null) // compare String constant with constant null Object
      print "\"0\"==null         NOK (true!=false)";
   else
      print "\"0\"==null         ok (false)";

   if("0"!=null)
      print "\"0\"!=null         ok (true )";
   else
      print "\"0\"!=null         NOK (false!=true)";

   if(null==null)
      print "null==null        ok (true )";
   else
      print "null==null        NOK (false!=true)";

   if(null!=null)
      print "null!=null        NOK (true!=false)";
   else
      print "null!=null        ok (false)";
   
   // this should not be written as (getString1()) !
   if(getString1()!=null) 
      print "getString1()      ok (true )";
   else
      print "getString1()      NOK (false!=true)";
   
   if(getString1_int()) // string "0" is casted to integer in return statement
      print "getString1_int()  NOK (true!=false)";
   else
      print "getString1_int()  ok (false)";
   
   if(getDouble()!=null) // also see getString1()
      print "getDouble()!=null ok (true )";
   else
      print "getDouble()!=null NOK (false!=true)";

   if(getDouble()!=0) // also see getString1()
      print "getDouble()!=0    NOK (true!=false)";
   else
      print "getDouble()!=0    ok (false)";

   if(null != new Double) // variant value is
      print "new Double        ok (true )";
   else
      print "new Double        NOK (false!=true)";
   
   if(Double) // constant value is typecasted to int (default value==0) during optimization
      print "Double            NOK (true!=false)";
   else
      print "Double            ok (false)";

   testJIT_null();
}
