// name: test script for 
//         dynamically typed variables
//         arrays of dynamically typed values (ValueArrays)
//         Object() "objectcopy" expression
//         File streams
//         (de) serialization
//         
// date: 22-Sep-2004
//

// ---- create and initialize ValueArray
var a[];

a[0]="hallo";             // store a reference to read-only, constant String "hallo" *SPECIAL SERIALIZATION CASE*
a[1]=42;                  // store the int value 42
a[2]=PI;                  // store the float value PI
a[3]=Object([1,2,3,4]); // store read-write reference to copy of constant array [1,2,3,4]
a[4]=Object(#["hello"="world"]); // store read-write reference to copy of constant HashTable #["hello"="world"]
a[5]=[1,2,3,4];           // store read-only reference to constant array [1,2,3,4] *NOT SERIALIZED*
a[6]=#["hello"="world"];  // store read-only reference to constant HashTable  *NOT SERIALIZED*

// ---- test generic array -> ValueArray copy
var c[];
c=a; // copy elements from a[] by read-only reference (dont create object copies)
print "hello, "+c[6]["hello"];

// ---- serialize ValueArray "a" to filestream 
File ofs;
ofs.open("out", IOS_OUT);
ofs << a;
ofs.close();

// ---- deserialize ValueArray "b" from filestream
var b[];

File ifs;
ifs.open("out", IOS_IN);
b << ifs;
ifs.close();

// ---- print contents of ValueArray "b"
var v;
foreach v in b 
    print "value=\""+v+"\"\ttypeid=\""+typeid(v)+"\" typename=\""+typename(v)+"\"";

// ---- store array values in "typed" variables (dont create object copies, just store references)
String    s <=b[0];
int       i  =b[1];
float     f  =b[2];
IntArray  ia<=b[3];
HashTable ht<=b[4];

print "i="              +i;
print "f="              +f;
print "s="              +s;
print "ia[2]="          +ia[2];
print "ht[\"hello\"]=\""+ht["hello"]+"\"";
// notice that read-only references to objects are not serialized because this would allow
// for recursion which in turn might trap the serialization code in an infinite loop.
// (i.e. array elements a[5] and a[6] are not serialized)
// for convenience, Strings are always serialized, even if they are "read-only".

