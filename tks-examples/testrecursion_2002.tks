
// NOTE: this example was written in 2002 when TKS did not have local variables :)

// file:   testrecursion.tks
// date:   05Mar2002
// author: Bastian Spiegel <bs@tkscript.de>
// rem   : a recursive implementation of the fibonacci algorithm.
//         this example demonstrates how to do recursive programming despite the lack
//         of internal function stacks.
//         the stack handling is left to the application programmer who has to use
//         a Stack object and define his/her own StackFrame class.
//         if you increase the Fib parameter be sure to also increase the stack size!

module Main;

class FibStackFrame {
   int i;
}
Stack stFib; 
stFib.init(FibStackFrame, 8);
function Fib(int _i) {
   int r;
   if(_i==0)
      return 0;
   else
      if(_i==1)
         return 1;
      else
      {
         FibStackFrame st<=stFib.push(); // get new function stackframe
         st.i=_i;
         r= Fib(st.i-1) + Fib(st.i-2);   // the Fib calls overwrite function variable _i
         st<=stFib.pop();                // restore old function stackframe
         return r;
      }
}

function  main() {
   trace("fib(9)="+Fib(9));
}

/* equivalent "C" implementation:
 * 
 *
 * #include <stdio.h>
 *
 * int Fib(int _i) {
 *    if(_i==0)
 *       return 0;
 *    else
 *       if(_i==1)
 *          return 1;
 *       else
 *          return Fib(_i-1)+Fib(_i-2);
 * }
 *
 * int main(int,char**) {
 *    printf("Fib(9)=%i\n", Fib(9));
 * }
 *
 *
 */







