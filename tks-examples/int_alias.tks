// ---- file: int_alias.tks
// ----
// ---- tests the variable type 'int' aliases short/byte and boolean.
// ----
// ---- the short/byte/boolean type names are just provided
// ---- to make your code more readable! Actually they will
// ---- all result in an "int" variable type,
// ---- so dont expect byte b=255+1; to result in 0!! (at least currently).
// ----
// ---- Please notice if you need "real" (signed and unsigned) bytes/shorts
// ---- you should use the number objects (Integer,Byte,UnsignedShort etc..)
// ---- 
class  IntegerAliasesTest
{
   bool    my_bool    =true^false;
   boolean my_boolean =      true;
   byte    my_byte    =       255;
   short   my_short   =     65535;
   int     my_int     =0xffffffff;

   Boolean my_Boolean = my_boolean;
   Byte    my_Byte    = my_byte;
   Short   my_Short   = my_short;
   Integer my_Integer = my_int; // 32bit integer

   UnsignedByte    my_UnsignedByte   =my_Byte;
   UnsignedShort   my_UnsignedShort  =my_Short;
   UnsignedInteger my_UnsignedInteger=my_Integer;
   Long            my_Long           =my_Integer; // 64bit integer
   
   
   public method test() 
      {
         print "my_bool      ="+my_bool;
         print "my_boolean   ="+my_boolean; // not really a 1bit value in tkscript!
         print "my_byte      ="+my_byte;  // not really an unsigned 8bit value in tkscript!
         print "my_short     ="+my_short; // not really an unsigned 8bit value in tkscript!
         print "my_int       ="+my_int;

         print "my_bool+1    ="+(my_bool+1);    // should be 0 if it was a real builtin byte datatype
         print "my_byte+1    ="+(my_byte+1);    // should be 0 if it was a real builtin byte datatype
         print "my_short+1   ="+(my_short+1);   // should be 0 if it was a real builtin short datatype
         print "my_int+1     ="+(my_int+1);

         print "my_Boolean   ="+(my_Boolean);
         print "my_Byte      ="+(my_Byte);
         print "my_Short     ="+(my_Short);
         print "my_Integer   ="+(my_Integer);
         print "my_Long      ="+(my_Long);
         
         print "my_Boolean+1 ="+(++my_Boolean); // =2, boolean is converted to int in expression
         print "my_Byte+1    ="+(++my_Byte);    // signed byte is -1, +1 = 0
         print "my_Short+1   ="+(++my_Short);
         print "my_Integer+1 ="+(++my_Integer);
         print "my_Long+1    ="+(++my_Long);

         print "my_Boolean +my_Boolean ="+(my_Boolean+my_Boolean);
         print "my_Byte    +my_Byte    ="+(my_Byte+my_Byte);   
         print "my_Short   +my_Short   ="+(my_Short+my_Short);
         print "my_Integer +my_Integer ="+(my_Integer+my_Integer);
         print "my_Long    +my_Long    ="+(my_Long+my_Long);

         print "my_UnsignedByte   ="+((my_UnsignedByte   ).printf("0x%02x"));   
         print "my_UnsignedShort  ="+((my_UnsignedShort  ).printf("0x%04x"));
         print "my_UnsignedInteger="+((my_UnsignedInteger).printf("0x%08x"));

         print "my_UnsignedByte   ="+((++my_UnsignedByte   ).printf("0x%02x"));   
         print "my_UnsignedShort  ="+((++my_UnsignedShort  ).printf("0x%04x"));
         print "my_UnsignedInteger="+((++my_UnsignedInteger).printf("0x%08x"));
         
         print "my_UnsignedByte   +my_UnsignedByte   ="+((my_UnsignedByte   +my_UnsignedByte)   .printf("0x%02x"));   
         print "my_UnsignedShort  +my_UnsignedShort  ="+((my_UnsignedShort  +my_UnsignedShort)  .printf("0x%04x"));
         print "my_UnsignedInteger+my_UnsignedInteger="+((my_UnsignedInteger+my_UnsignedInteger).printf("0x%08x"));
      }
   
}

IntegerAliasesTest s;
s.test();
