// - renders a "fire" effect (256x256, 8 and 32bit modes)
// - the highlevel version uses 32bit colors because bytes cannot be addressed without assembler (in tks)
// - the assembler optimized version uses 8bit colors and runs at triple speed (inline assembler removed in 2003)

// - video output has been removed in this release (Texture replaced by IntArray)


// -- for maximum speed run with "tks -nbc fire.tks"  (disables array boundary checks)


module Main;

int use_asm=1;
IntArray firetexpa;
IntArray firetexpb;
IntArray firetexa;
IntArray firetexb;
int framecount=0;

function FireInit() {
   firetexa.alloc(256*256); // __32bits/perpixel__ is required for normal mode
   firetexb.alloc(256*256);
   firetexa.numElements=firetexa.maxElements;
   firetexb.numElements=firetexb.maxElements;
   firetexa.fill(0);
   firetexb.fill(0);
   int x=0;
   loop(256) {
      int r=rnd(255);
      firetexa[256*255+x++]=r;
   }
   firetexpa<=firetexa;
   firetexpb<=firetexb;
}

function FireRenderHi() {
   IntArray tex<=firetexpa;
   IntArray texb<=firetexpb;
   compile {
      local int ox;
      local int oyox=257;
      local int coyox=1;
      loop(255)
         {
            // 3:15 a.m. :)
            loop(254)
               {
                  texb[coyox]=(tex[oyox-1]+tex[oyox+1]+tex[coyox-1]+tex[coyox+1]+tex[coyox])*(0.6/5)+tex[oyox]*0.415;
                  coyox++;
                  oyox++;
               }
            coyox+=2;
            oyox+=2;
         }
   }
   // ---- process last line ----
   int idx=256*255;
   loop(256)
      {
         int c=tex[idx];
         if(c) texb[idx]=c-1;
         else  texb[idx]=rnd(255);
         idx++;
      }
}

function FireRender() {
   FireRenderHi();
   IntArray t;
   t<=firetexpb;
   firetexpb<=firetexpa;
   firetexpa<=t;
}

function main {
   int t=milliSeconds();
   FireInit();
   loop(Arguments.numElements? Arguments[0] : 1000)
      FireRender();
   t=milliSeconds()-t;
   trace "t="+t+" fps="+ (1000.0/ (t/1000.0));
}

