
// requires tkscript version >=0.8.0.8

int ver=TKS.getVersion();
trace "using TKS version " +(ver>>24)+"."+((ver>>16)&0xFF)+"."+((ver>>8)&0xFF)+"."+(ver&255);

#define MYCONST_A "test123"
#define MYCONST_B 42
#define MYCONST_C 3.14
enum { MYCONST_D, MYCONST_E, MYCONST_F };

String s=TKS.stringToConstant("MYCONST_A");
trace "s=\""+s+"\"";

s=TKS.constantToString(MYCONST_B, "MYCONST_");
trace "s=\""+s+"\"";

trace TKS.getClassName(s);

// ---- dynamically lookup a method and evaluate it ----
s="hello, ";
Value v_ret;
// Note: in earlier versions of TKS the call returned <void>
//       However, since RVAL/RSELF/RARG supported was added,
//       the runtime now chooses the RSELF method if available.
//       This will NOT modify "s".
if(TKS.evalMethodByName(s, "append", {"world."}, v_ret))
{
    trace "v_ret="+v_ret.string; // => "hello, world."
    trace "s=\""+s+"\""; // => "hello, "
}
else
{
    die "TKS.evalMethodByName() failed.";
}




class MyClass {
    int mc_int;
    float mc_float;
    String mc_string;
}

MyClass mco;

mco.mc_int=64;
mco.mc_float=1.23456789;
mco.mc_string="test123";

trace "mco.mc_int="+mco.mc_int;
trace "mco.mc_float="+mco.mc_float;
trace "mco.mc_string="+mco.mc_string;

/** output Object datatype, class name and number of properties. **/
trace TKS.getClassName(mco)+" "+TKS.getPropertyClassName(mco)+" has "+TKS.getNumProperties(mco)+" properties.";

/** read the class properties using the YAC property interface **/
trace "mco.mc_int="+TKS.getPropertyByName(mco, "mc_int");
trace "mco.mc_float="+TKS.getPropertyByName(mco, "mc_float");
trace "mco.mc_string="+TKS.getPropertyByName(mco, "mc_string");

/** set the class properties using the YAC property interface **/
TKS.setIntPropertyByName(mco, "mc_int", 42);
TKS.setFloatPropertyByName(mco, "mc_float", 3.1415);
TKS.setObjectPropertyByName(mco, "mc_string", "hello, world");

/** verify the class properties again **/
trace "2mco.mc_int="+TKS.getPropertyByName(mco, "mc_int");
trace "2mco.mc_float="+TKS.getPropertyByName(mco, "mc_float");
trace "2mco.mc_string="+TKS.getPropertyByName(mco, "mc_string");

int mco_class_ID=TKS.getClassID(mco);
trace "user defined object uses class_ID "+mco_class_ID;

/** create a new instance of the datatype called "MyClass" **/
Object mco2 <=TKS.newObjectByName(null, "MyClass");
trace TKS.getClassName(mco2)+" "+TKS.getPropertyClassName(mco2)+" has "+TKS.getNumProperties(mco2)+" properties.";


