// tests ~;..~; region quotes / string constants
//  (note) useful for
//           1) 'tricking' text editors into highlighting text within string constants
//           2) auto-escaping sub-strings and control characters (\", \', \n, \t, ..)


String s <= ~;int i = 42;~;;  // => "int i = 42;"
trace "test1: s=>>"+s+"<<";

function test2() {
   s <= ~;
   // the lines until ~; are part of the string constant
   // end markers enclosed in "~;" or '~;' are skipped
   String t1 <= "~; not the end";
   String t2 <= '~; not the end';
   /* ~; also not the end ~; */
   int i = 42;
   String s <= "hello, world. i="+i;
   stdout s;
   ~;; // ~; ends the string constant, last ; terminates the 's <= ' statement
   String sPrintRet <= TKS.evalScript(s);
   trace "\ntest2: script=>>"+s+"<< eval:>>"+sPrintRet+"<<";
}
test2();

function test3() {
   // inline GLSL shader. trim() removes the leading and trailing whitespace (#version must be placed on first line)
   String s <= ~;
   #version 100
   precision mediump float;
   uniform sampler2D u_tex;
   varying vec2 v_uv;
   void main() {
      gl_FragColor = texture2D(u_tex, v_uv);
   }
   ~;/*end s*/;
   trace "\ntest3: GLSL=>>"+s.trim()/*.replace("\n   ","\n")*/+"<<";
}
test3();

function test4a() {
   // not using ~; ~; here. same result as test4()
   String sVarName = "myvar";
   String s <= "\n   int "+sVarName+" = 42;\n   stdout \"hello, world.\\nvalue=\"+"+sVarName+"+\"\\n\";\n   ";
   String sPrintRet <= TKS.evalScript(s);
   trace "\ntest4a: script=>>"+s+"<< eval:>>"+sPrintRet+"<<";
}
test4a();

function test4() {
   String sVarName = "myvar";
   String s <= ~;
   int ~;+sVarName+~; = 42;
   stdout "hello, world.\nvalue="+~;+sVarName+~;+"\n";
   ~;;
   String sPrintRet <= TKS.evalScript(s);
   trace "\ntest4: script=>>"+s+"<< eval:>>"+sPrintRet+"<<";
}
test4();
