
use namespace ui;


// <class.png>
class RootForm : XMLForm {
   Button *bt_quit;
   FloatParam *fp_test;

   protected float drag_start_x;
   protected float drag_start_y;


   // <ui_init.png>
   public method init() : boolean {
      if(initPakFile("testui.xfm"))
      {
         autoResolveIds(this);
         return true;
      }
      return false;
   }

   // <ui.png>
   public virtual onDropFiles(StringArray _fileNames) : boolean {
      explain "Called when one or many files have been dropped on this layer";
      trace "[...] onDropFile: fileNames="+_fileNames;
   }

   // <ui_mouse.png>
   public virtual blockMouseDrag(MouseEvent _ev) : boolean {
      return false;
   }

   // <ui_mouse.png>
   public virtual onMouseBeginDrag(MouseEvent _dragStart, MouseEvent _ev) : boolean {
      trace "[trc] RootForm::onMouseBeginDrag: dragStart.mouse_rel=("+_dragStart.mouse_rel_x+";"+_dragStart.mouse_rel_y+")";
      drag_start_x = _ev.mouse_rel_x;
      drag_start_y = _ev.mouse_rel_y;
      UI.GrabMouse(/*_ev*/);
      return true;
   }

   // <ui_mouse.png>
   public virtual onMouseDrag(MouseEvent _lastEv, MouseEvent _currentEv) : boolean {
      trace "[trc] RootForm::onMouseDrag: dragOff=("+(_currentEv.mouse_rel_x - drag_start_x)+";"+(_currentEv.mouse_rel_y - drag_start_y)+")";
      return true;
   }

   // <ui_mouse.png>
   public virtual onMouseCancelDrag(MouseEvent _ev) {
      UI.UngrabMouse();
   }

   // <ui_mouse.png>
   public virtual onMouseEndDrag(MouseEvent _ev) {
      trace "[trc] RootForm::onMouseEndDrag: ev.mouse_rel=("+_ev.mouse_rel_x+";"+_ev.mouse_rel_y+")";
      UI.UngrabMouse();
   }

   // <ui_mouse.png>
   public virtual onMouse(MouseEvent _ev) : boolean {
      // trace "[trc] ... RootForm::onMouse: ev.mouse_abs=("+_ev.mouse_abs_x+";"+_ev.mouse_abs_y+") ev.mouse_rel=("+_ev.mouse_rel_x+";"+_ev.mouse_rel_y+")";
   }

   // <ui_mouse.png>
   public virtual isMouseFocusLocked() : boolean {
      return UI.b_mouse_grab;
   }

   // <ui_kbd.png>
   public virtual onKey(Key _k) : boolean {
      trace "[...] k.name="+_k.name+" k.code="+_k.code+" k.mod="+_k.mod+" k.unicode="+_k.unicode;
      switch(_k.pressed)
      {
         case VKEY_ESCAPE:
            UI.Stop();
            return true;
      }
      return false;
   }

   // <ui_consume.png>
   public virtual consumeAction(Action _ac) : boolean {
      String acName <= _ac.getActionName();
      ActionProvider ap <= _ac.getActionProvider();

      // // trace "[trc] RootForm::consumeAction: acName=\""+acName+"\".";

      switch(@(ap))
      {
         case @(bt_quit):
            UI.Stop();
            return true;

         case @(fp_test):
            trace "fp_test acName="+acName+" value="+fp_test.getFloatValue();
            return true;
      }

      return false;
   }

}


UI.ConfigureHiDPI();
UI.ConfigureGL(true/*bGLCore*/, false/*bDrawGL*/);
UI.Initialize(Arguments);
UI.SetLocalToRawKeyTableByName("auto");
// UI.SetLocalToRawKeyTableByName("bg");
// UI.SetEnableForceUSUnicode(true);

RootForm root_form;
if(!root_form.init())
   die "failed to init RootForm";

UI.SetRootForm(root_form);
UI.OpenWindow(800, 80);
UI.Run();
UI.Exit();

trace "cu";
