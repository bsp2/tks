
// 02Nov2007, 23Jan2023

module Main;

use namespace ui;

int current_tile_id = 0;

class MyTileRenderer : Layer {

   protected int tile_id;

   public method initTile(String _name, int _tileId) {
      initLayer();
      tile_id = _tileId;
      setToolTipCaption("Click to select tile \""+_name+"\"");
   }

   public method onDraw() {
      UIRenderer.DrawFilledRectangle(0, 0, getSizeX(), getSizeY(), #ffff0000 + tile_id*0x33);
   }

   public method getPreferredSizeX() : float {
      return 32;
   }

   public method getPreferredSizeY() : float {
      return 32;
   }

   public method getMinimumSizeX() : float {
      return 32;
   }

   public method getMinimumSizeY() : float {
      return 32;
   }

}

class MyTileWidget : Control {

   define String ACTION_TILESELECTED = "onTileSelected";

   protected int tile_id;
  
   public method getNumProvidedActions() : int {
      return 1;
   }

   public method getProvidedActionName(int _index) : String {
      switch(_index)
      {
         case 0:
            return ACTION_TILESELECTED;
      }
   }

   public method initMyTileWidget(String _name, int _tileId) {
      initControl();
      setLayout(SuperBorderLayout);

      tile_id = _tileId;

      MyTileRenderer tr <= new MyTileRenderer();
      tr.initTile(_name, _tileId);
      tr.setPadding4f(4, 4, 4, 4);
      tr.setAlignment(Layout.CENTER);
      addLayer(deref tr, Layout.TOP);

      Label lb <= Label.New();
      lb.setCaption(_name);
      lb.setEnableFillBackground(false);

      addLayer(deref lb, Layout.BOTTOM);
   }

   public method onMouse(MouseEvent _ev) : boolean {
      if(_ev.leftButtonDown())
      {
         provideAction(IntAction.New(ACTION_TILESELECTED, this, tile_id));
         return true;
      }
   }

   public method onDraw() {
      if(tile_id == current_tile_id)
      {
         UIRenderer.DrawSoftShadowRaisedBorder(0, 0, getSizeX(), getSizeY());
      }
      else
      {
         UIRenderer.DrawDefaultBackground(0, 0, getSizeX(), getSizeY());
      }
   }
}

class MyForm : Form {

   protected ScrollPane *scroll_pane;

   public method initMyForm() {
      initForm();

      Panel p <= Panel.New();
      int tileId = 0;
      loop(32) // Add some tiles!
      {
         MyTileWidget w <= new MyTileWidget();
         w.initMyTileWidget("tile number "+tileId, tileId);
         p.addLayer(deref w, Layout.RIGHT);
         tileId++;
      }
      p.setSize2f(p.getPreferredSizePadX(), p.getPreferredSizePadY());

      scroll_pane <= ScrollPane.New(deref p);
      scroll_pane.setViewSize2f(p.getSizeX(), p.getSizeY());
      scroll_pane.updateLayout();

      addLayer(scroll_pane, Layout.CENTER);
   }

   public virtual onKey(Key _k) : boolean {
      if(VKEY_ESCAPE == _k.pressed)
         UI.Stop();
      return true;
   }

   public virtual consumeAction(Action _ac) : boolean {
      String name=_ac.getActionName();
      trace "[...] MyForm::consumeAction: got action \""+name+"\" sent by \""+#(_ac.getActionProvider())+"\".";
      if(MyTileWidget.ACTION_TILESELECTED == name)
      {
         IntAction ia <= _ac;
         current_tile_id = ia.getIntValue();
         scroll_pane.redraw();
      }
      return true;
   }

}

UI.Initialize(Arguments);
UI.SetEnableTransparentLayers(false);

MyForm myForm;
myForm.initMyForm();

UI.SetRootForm(myForm);
UI.OpenWindow(800, 80);
UI.ShowCursor("normal");
Mouse.pointerMode = MOUSE_POINTER_MANUAL;
UI.Run();
