
class CClass2 {
   float x,y,z,w;
}

class CClass {
   int i;
   float f;
   String s;
   IntArray ia;
   FloatArray fa;
   StringArray sa;
   HashTable ht;
   Pool p;
   Stack st;
   CClass2 c;
}

CClass cobj;

cobj.i=42;
cobj.f=PI;
cobj.s="hello, world.";
cobj.ia=[1,2,3,4,5,6,7,8];
cobj.fa=[0.1, 0.2, 0.3, 0.4];
cobj.sa=["abc","def","ghi","jkl", "mno", "pqr", "stu", "vwxyz"];
cobj.ht=#["hti"=64, "htf"=2PI, "hts"="*foo*bar*foo*bar*foo*bar*"];
Pool p<=cobj.p; p.template=String; p.alloc(10); 
String s<=p[p.qAlloc()];
s="a pool entry..";

int prop_num=TKS.getNumProperties(cobj);
trace "class "+TKS.getPropertyClassName(cobj)+" has "+prop_num+" properties.";
int i=0;
loop(prop_num) {
   int ak=TKS.getPropertyAccessKeyByIndex(cobj, i++);
   String prop_name=TKS.getPropertyNameByAccessKey(cobj, ak);
   Object prop_valp<=null;
   prop_valp<=TKS.getPropertyByAccessKey(cobj, ak);
   String prop_val;
   if(!prop_valp)  prop_val=TKS.getPropertyByAccessKey(cobj, ak);
   else {
      String prop_cl=TKS.getClassName(prop_valp);
      switch(prop_cl)
      {
         case "String":
            prop_val="String: "+prop_valp;
            break;
         case "Pool":
            p<=prop_valp;
            prop_val="Pool: numElements="+p.numElements;
            break;
         case "Class":
            Class c;
            c<=prop_valp;
            prop_val="Class: name="+TKS.getClassName(c)+" numProperties="+TKS.getNumProperties(c);
            break;
         case "IntArray":
            IntArray ia<=prop_valp;
            prop_val="IntArray: numElements="+ia.numElements+" maxElements="+ia.maxElements;
            break;
         case "FloatArray":
            FloatArray fa<=prop_valp;
            prop_val="FloatArray: numElements="+fa.numElements+" maxElements="+fa.maxElements;
            break;
         case "StringArray":
            StringArray sa<=prop_valp;
            prop_val="StringArray: numElements="+sa.numElements+" maxElements="+sa.maxElements;
            break;
         case "HashTable":
            HashTable ht<=prop_valp;
            prop_val="HashTable: numElements="+ht.numElements+" maxElements="+ht.maxElements;
            break;
         case "Stack":
            Stack st<=prop_valp;
            prop_val="Stack: index="+st.index+" size="+st.size;
            break;
      }
   }
   trace "  property #"+i+": name=\""+prop_name+"\" value=\""+prop_val+"\".";
}
