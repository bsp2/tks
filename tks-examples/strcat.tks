
// Laufzeit: Variante1: 223ms
//           Variante2: 257ms
//           Variante3: 72ms  (JIT)

function HTML_A_Get(String _target, String _label) {
    // erzeugt temporären String ("<a href=\"" string wird vor "+" operation dupliziert
    // gibt neues String objekt zurück
    return "<a href=\'"+_target+"\'>"+_label+"</a>";
}
function HTML_A_Slow(String _buf, String _target, String _label) {
    // erzeugt temporären String ("<a href=\"" string wird vor "+" operation dupliziert
    _buf.append("<a href=\'"+_target+"\'>"+_label+"</a>");
}
function HTML_A_Fast(String _buf, String _target, String _label) compile {
    // mehr Text, läuft aber 300% schneller als die HTML_A_Get() bzw. HTML_A_Slow() Varianten
    // benutzt den JIT compiler (ohne JIT nur etwa 25% schneller)
    _buf.append("<a href=\'");
    _buf.append(_target);
    _buf.append("\'>");
    _buf.append(_label);
    _buf.append("</a>");
}

// einen Buffer von ~4MByte anlegen und als "leer" kennzeichnen (length=0) :)
String buf; buf.alloc(1024*4004); buf.empty();
int t;

// ----- Variante 1: Funktion generiert substring, welcher dann an den buffer angehängt wird
t=milliSeconds();
loop(100000)
{
    buf.append(HTML_A_Get("http://www.google.de", "Google"));
}
trace "t="+(milliSeconds()-t);


// ---- Variante 2: Verkettet die Strings über "+" operator, ändert direkt das "buf" objekt in der funktion
t=milliSeconds();
loop(100000)
{
    HTML_A_Slow(buf, "http://www.google.de", "Google");
}
trace "t="+(milliSeconds()-t);

// ---- Variante 3: Verkettet Strings mittels sukzessiver "append" Aufrufe, ändert das "buf" objekt direkt.
buf.empty();
t=milliSeconds();
loop(100000)
{
    HTML_A_Fast(buf, "http://www.google.de", "Google"); // circa 3 mal schneller als HTML_A_Get() / HTML_A_Slow()!
}
trace "t="+(milliSeconds()-t);
