//   file: trycatchfinally_uncritical.tks
// author: Bastian Spiegel <bs@tkscript.de>
//   date: 28-May-2006
//   info: Demonstrates how to use uncritical errors
//
define exception UErr1 : UncriticalError; // "Base" exception type
define exception UErr2 : UErr1;

define exception CErr1 : CriticalError; // "Base" exception type
define exception CErr2 : CErr1;


class C {

   static ThrowUncritical():String {
      // Set pascal-style return value so this function can return something and throw an (uncritical)
      // exception at the same time
      return="hello, world."; 
      // Throw new "UErr2" exception, if it is not caught, it will just be absorbed by the caller
      throw UErr2 "test uerr1"; 
      trace "TestUncritical(): never reached";
   }

   static Test_Absorb() {
      trace ThrowUncritical();
      // Simply "absorb"/discard uncritical error "UErr1" (thrown in ThrowUncritical()) 
      // since there is no try/catch in this frame that can handle the exception
   }

   static Test_Catch() {
      try {
         trace ThrowUncritical(); // The returned String is never printed (return value is discarded)
         trace "Test_Catch(): never reached";
      } 
      catch(UErr1 e) {
         // Catch uncritical error "UErr2"
         trace "Test_Catch(): caught "+e.name+" msg=\""+e.message+"\".";
         // Throw new "CErr2" exception; this one *must* be caught! (otherwise the program terminates)
         throw CErr2 "here we go"; 
      }
      finally {
         trace "Test_Catch(): finally: never reached.";
      }
   }
}

C.Test_Absorb();
try {
   C.Test_Catch();
} catch(CErr1 e) {
   // Catch the critical error "CErr2" (thrown in Test_Catch())
   trace "Main: caught critical error CErr1, msg=\""+e.message+"\".";
}
finally {
   trace "cu!";
}
