
class RegularClass {
   test() {}
}
RegularClass rc;
trace "rc="+#(rc); // => ! null


abstract class AbstractClass {
   abstract test() {}
}
AbstractClass ac;
trace "ac="+#(ac); // => null


class AbstractClass2 {
   abstract test() {} // => class becomes abstract, implicitely
}
AbstractClass2 ac2;
trace "ac2="+#(ac2); // => null


function TestAbstractClass() {
   AbstractClass ac;
   trace "TestAbstractClass: ac="+#(ac); // => null
}
TestAbstractClass();


function TestAbstractClass2() {
   local AbstractClass ac;
   trace "TestAbstractClass2: ac="+#(ac); // => null
}
TestAbstractClass2();





class DerivedClass extends BaseClass {
   AbstractClass ref_only;

   virtual test2 { trace "derived test2. ref_only="+#(ref_only); }

   public virtual method test() { trace "derived test"; }

   //public virtual test_error() { }
}


class BaseClass {

   public abstract method test()  { trace "BaseClass::test (incomplete)."; }
   public abstract method test2() { trace "BaseClass::test2 (incomplete)."; }
   public abstract method test3() { /* pure abstract, derived class may still be instantiated */ }
}

BaseClass b;
DerivedClass d;

try {
   b.test();
   trace " ==> b.test(): InvalidPointer exception NOT caught (FAIL).";
} catch(InvalidPointer e) {
   trace " ==> b.test(): caught InvalidPointer exception (OK).";
}

b <= new BaseClass;
trace #(b);
try {
   _Debug();
   b.test();
   trace " ==> b.test(): ScriptClassMethodNotFound exception NOT caught (FAIL).";
} catch(ScriptClassMethodNotFound e) {
   trace " ==> b.test(): caught ScriptClassMethodNotFound exception (OK).";
}

// d.test();
// d.test2();
