
SharedBuffer sh;

if(sh.visitSharedMemory("sharedbuffer_test", 75))
{
   print "shared memory visited.";
   boolean bBenchmark = sh.peekI8(0);
   boolean bLock = sh.peekI8(1);
   int numIter = sh.peekI32(2);
   print "string at offset 6 : " + sh.getString(6, 64);

   int iter = 0;
   if(bLock)
   {
      for(;;)
      {
         if(sh.lock(0.1))
         {
            if(1 == sh.peekI8(6)) // may r/w ?
            {
               if(!bBenchmark)
               {
                  trace "["+iter+"] sh.string=\""+sh.getString(11, 64)+"\"";
                  sh.setString(11, "hello from task2 iter="+iter);
               }
               sh.pokeI8(6, 0);
               iter++;
            }
            sh.unlock();
            if(!bBenchmark)
               TKS.sleep(rand(20));
            else if(iter >= numIter)
               break;
         }
      }
   }
   else
   {
      int lastIOCount = 0;
      for(;;)
      {
         int ioCount = sh.peekI32(7);
         if(ioCount != lastIOCount) // may r/w ?
         {
            lastIOCount = ioCount + 1;
            if(!bBenchmark)
            {
               trace "["+iter+"] sh.string=\""+sh.getString(11, 64)+"\"";
               sh.setString(11, "hello from task2 ioCount="+ioCount+" iter="+iter);
            }

            // Next iteration
            sh.pokeI32(7, ioCount + 1);
            iter++;
            if(!bBenchmark)
               TKS.sleep(rand(20));
            else if(iter >= numIter)
               break;
         }
      }
   }
}
else
{
   die "failed to visit shared memory.";
}

