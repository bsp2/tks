
define exception Anything;// "User defined base exception..";
define exception Something extends Anything;// "Some exception..";

function Test2() {
   throw Something "Test2: test exception message";
   print "Test2: never reached.";
}

function Test() {
   try {
      try {
         try  {
            loop(100) {
               die "test";
               trace "Test::die: never reached";
            }
         }
         catch Death e { // "e" shadows all other variables/members.
            trace "DeathException message=\""+e.message+"\" caught.";
            //throw Anything(e); // throw new exception with inner exception
            throw Anything;
            trace "Test::catch Death: never reached.";
         }
      }
      catch Anything a {
         // Catch "Something" exception
         trace "caught \""+a.name+"\" message=\""+a.message+"\".";
         String s <= null; // "s" is added to the variable namespace of the "Test" function
         print s.length; // triggers InvalidPointer error
         trace "Test::<null>.length: never reached.";
      }
   }
   catch(Error e) { 
      // Never reached, CriticalError is a better match 
      trace "Test::catch Error: never reached.";
   }
   catch CriticalError e {
      // Catch "InvalidPointer" exception
      trace "caught "+e.name+" message=\""+e.message+"\". Stacktrace:\n"+e.stackTrace;
   }
   finally print "finally..";

   try {
      try 
         throw Something("test");
      catch(Error e)
      {
         try {
            die "nested exception";
         }
         catch Death e {
            trace "Nested exception caught";
         }
         throw e;
      }
      finally
         trace "finally: never reached.";
   }
   catch(Anything e)
      trace "caught Anything \""+e.message+"\""; 
   finally 
      stdout "c";
   print "u";
}

Test();
