
print "// Convert ht_c HashTable entries to class C object members";

class C {
   int i;
   float f;
   String s;
   Object o;
   IntArray ia <= null;
}

HashTable ht_c <= #[ "i"=42 "f"=PI s="hello, world." o=#["key"="value"] "ia"=[1,2,3,4] ];
C c;
if(TKS.hashTableToClass(ht_c, c))
{
   print "C OK";
   print "c.i  = " + c.i;
   print "c.f  = " + c.f;
   print "c.s  = " + c.s;
   print "c.o  = " + #(c.o);
   print "c.ia = " + #(c.ia);
}
else
{
   print "C failed";
}

print "// Convert class D object members to ht_d HashTable entries";

class D {
   int some_integer = 23;
   float some_float = 1.23;
   String some_String = "goto 10";
   Object some_Object <= Long.Newi(64);
   IntArray some_IntArray <= [2,4,6,8,10];
}

D d; 
HashTable ht_d;
if(TKS.classToHashTable(d, ht_d))
{
   print "D OK";
   print "ht_d = " + ht_d;
}
else
{
   print "D failed";
}


print "// Assign type incompatible classes T1/T2/T3 (\"duck typing\" :-))";
class T1 { String x="1",y="2",z="3"; } 
class T2 { float x,y,z; }
class T3 { int x,y,z; }
T1 t1,t1_2; T2 t2; T3 t3;
HashTable h;
print "TKS.classToHashTable(t1, h)  = "+TKS.classToHashTable(t1, h);
print "h.1 = " + h;
print "TKS.hashTableToClass(h, t2)  = "+TKS.hashTableToClass(h, t2);
print "t2 = <x="+t2.x+" y="+t2.y+" z="+t2.z+">";
print "TKS.classToHashTable(t2, h)  = "+TKS.classToHashTable(t2, h);
print "h.2 = " + h;
print "TKS.hashTableToClass(h, t3)  = "+TKS.hashTableToClass(h, t3);
print "t3 = <x="+t3.x+" y="+t3.y+" z="+t3.z+">";
t3.x+=10; t3.y+=10; t3.z+=10;
print "TKS.classToHashTable(t3, h)  = "+TKS.classToHashTable(t3, h);
print "h.3 = " + h;
print "TKS.hashTableToClass(h, t12) = "+TKS.hashTableToClass(h, t1_2);
print "t1_2 = <x="+#(t1_2.x)+" y="+#(t1_2.y)+" z="+#(t1_2.z)+">";


/// Console-snapshot:

/// $ tks ../../tks-examples/class_hashtable.tks
/// // Convert class C members to HashTable entries
/// C OK
/// c.i  = 42
/// c.f  = 3.14159
/// c.s  = hello, world.
/// c.o  = <HashTable#0x009cd5e0(#[key="value"])>
/// c.ia = <IntArray#0x00930f78([1, 2, 3, 4])>
/// // Convert HashTable entries to Class D members
/// D OK
/// ht_d = #[some_IntArray=[2, 4, 6, 8, 10], some_String="goto 10", some_integer=23, some_float=1.23, some_Object=64]
/// // Assign type incompatible classes ;also known as duck typing :-)
/// TKS.classToHashTable(t1, h)  = 1
/// h.1 = #[x="1", y="2", z="3"]
/// TKS.hashTableToClass(h, t2)  = 1
/// t2 = <x=1 y=2 z=3>
/// TKS.classToHashTable(t2, h)  = 1
/// h.2 = #[x=1, y=2, z=3]
/// TKS.hashTableToClass(h, t3)  = 1
/// t3 = <x=1 y=2 z=3>
/// TKS.classToHashTable(t3, h)  = 1
/// h.3 = #[x=11, y=12, z=13]
/// TKS.hashTableToClass(h, t12) = 1
/// t1_2 = <x=<String#0x009e20a0("11")> y=<String#0x009cb798("12")> z=<String#0x009cb7c0("13")>>
