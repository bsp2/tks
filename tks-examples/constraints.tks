// ----   file: constraints.tks
// ---- author: Bastian Spiegel <bs@tkscript.de>
// ----   date: 26-Jul-2005, 28-Jul-2005
// ----
// ---- Demonstrates how to attach constraints to argument lists 
// ---- and return values of class methods and functions.
// ----
// ----
constraint cs1 [0,2,4,6,8].contains(_) "value must be one of [0,2,4,6,8]";
constraint csneg  _<0 "< 0";
constraint cspos _>=0 ">= 0";
constraint csasin -1<=_<=1 "-1<=value<=1";
constraint cssin -2PI<=_<=2PI "-2PI<=value<=2PI";
constraint csbyte 0<=_<=255 "0<=value<=255";
constraint csnotempty ((_!=null)?( (_.yacArrayGetNumElements())>0 ):false) "array must not be empty";

class MyClass {} class MyClass2 : MyClass {} class NotMyClass {}

class C {
   static test1(C _c, int _i.cs1, _j.cspos, _k.csneg) {
      print "_i="+_i;
   }

   static testsin(float _f.cssin) : float{
      return sin(_f);
   }

   static testasin(float _f.csasin) {
      print "asin("+_f+")="+asin(_f);
   }

   static testnull(String _s.notnull) {
      _s.append(", world");
      print "testnull: s="+_s;
   }

   static testnull2(Stream _s.notnull) {
   }

   static testarraynotempty(Object _a.csnotempty) {
      print "testarraynotempty: array has "+_a.yacArrayGetNumElements()+" elements.";
   }

   static testaddbytes(int _a.csbyte, int _b.csbyte) {
      return (_a+_b)&255;
   }
   
   static testr1() : Object.notnull {
      return [0,1,2,3,4,5];
      // ---- return null; // triggers "notnull" constraint violation
   }

   static testr2() returns Object.csnotempty {
      return [0,1,2,3,4,5];
      // ---- return []; // triggers "csnotempty" constraint violation
   }

   static testr3() returns MyClass.notnull {
      return NotMyClass; // triggers "notnull" constraint violation (instanceof failed)
   }

   static testr4() returns MyClass.notnull {
      return MyClass2; // ok since MyClass2 is derived from MyClass
   }

}

//C.testasin(C.testsin(0.15));
//C.testnull("hello");
// ---- C.testnull(null);         // trigger "notnull" constraint violation
// ---- C.testnull(new Integer);  // also triggers "notnull" constraint v.
// ---- C.testnull2(new File);    // also triggers "notnull" constraint v.
// ---- C.testnull2(new Buffer);  // also triggers "notnull" constraint v.
//C.testarraynotempty([1,2,3,4]);
// ---- C.test2([]);  // empty array triggers "csnotempty" constraint violation
//print "testaddbytes="+C.testaddbytes(90, 240);
// ---- C.testaddbytes(255, 257); // triggers "csbyte" constraint violation
print #(C.testr1());
print #(C.testr2());
// ---- print #(C.testr3()); // triggers "notnull" constraint violation (MyClass instanceof NotMyClass failed)
print #(C.testr4());


int i=0;
C c;
loop(5+1) // the 6th call triggers constraint violation "cs1"
   C.test1(c, i++*2, 3, -3);

// ----
// ---- Program output:
// ---- 
// ---- $ tks test
// ---- <IntArray#0x009ab1e0([0, 1, 2, 3, 4, 5])>
// ---- <IntArray#0x009aaef0([0, 1, 2, 3, 4, 5])>
// ---- <class<MyClass2>#0x009e2fc0((null))>
// ---- _i=0
// ---- _i=2
// ---- _i=4
// ---- _i=6
// ---- _i=8
// ---- [---] constraint violation "cs1" (_i==<int:10>).
// ---- [---]  >>>"value must be one of [0,2,4,6,8]"<<<
// ---- [---] in call to C::test1(C _c, ***int _i.cs1***, int _j.cspos, int _k.csneg) : var
// ---- [---] runtime error 31 "check constraint failed" in module "Main" line 9.
// ---- [---] Runtime callstack:
// ---- [---]    1.: "Main":87: C::test1() (in "Main":20).
