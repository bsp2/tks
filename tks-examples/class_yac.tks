// ---- 
// ---- file: class_yac.tks
// ---- date: 19-April-2005
// ---- 
// ---- demonstrates how to overwrite the (object) operator in script classes
// ---- and how to convert a script class to a String. (e.g. in "print myclassinstance;")
// ----

class MyIntValue {
   int value=0;
   yacOperator(int _cmd, Object _o) {
      print "MyIntValue::yacOperator("+TKS.constantToString(_cmd, "YAC_OP_")+", "+_o+")";
      if(!_o)return;
      int oval;
      if(_o instanceof MyIntValue)
      { MyIntValue o=_o; oval=o.value; }
      else 
      { Integer io; if(_o.yacScanF32(io)) oval=io.value; else return; }
      switch(_cmd)
      {
         case YAC_OP_ADD:    value+=oval;        break;
         case YAC_OP_SUB:    value-=oval;        break;
         case YAC_OP_MUL:    value*=oval;        break;
         case YAC_OP_DIV:    value/=oval;        break;
         case YAC_OP_MOD:    value%=oval;        break;
         case YAC_OP_SHL:    value<<=oval;       break;
         case YAC_OP_SHR:    value>>=oval;       break;
         case YAC_OP_CEQ:    return value==oval; 
         case YAC_OP_CNE:    return value!=oval; 
         case YAC_OP_CLE:    return value<=oval;
         case YAC_OP_CLT:    return value< oval;
         case YAC_OP_CGE:    return value>=oval;
         case YAC_OP_CGT:    return value> oval;
         case YAC_OP_AND:    return value&oval;
         case YAC_OP_OR:     return value|oval;
         case YAC_OP_EOR:    return value^oval;
         case YAC_OP_NOT:    value=!value;       break;
         case YAC_OP_BITNOT: value=~value;       break;
         case YAC_OP_LAND:   return value&&oval; 
         case YAC_OP_LOR:    return value||oval; 
         case YAC_OP_NEG:    value=-value;       break;
      }
   }

   yacToString(String _s) { // convert object to String (_s is a pre-allocated String)
      _s="MyIntValue("+value+")";
   }
}
function MyIntValue(int _value) { local MyIntValue r; r.value=_value; return deref r; }

MyIntValue mc; mc.value=1; print mc;
print (((mc+mc+mc)-mc)+MyIntValue(3));

// ---- 
// ---- $ tks class_yac.tks
// ---- outputs:
// ---- MyIntValue(1)
// ---- MyIntValue::yacOperator(YAC_OP_ADD, MyIntValue(1))
// ---- MyIntValue::yacOperator(YAC_OP_ADD, MyIntValue(1))
// ---- MyIntValue::yacOperator(YAC_OP_SUB, MyIntValue(1))
// ---- MyIntValue::yacOperator(YAC_OP_ADD, MyIntValue(3))
// ---- MyIntValue(5)
// ---- 
