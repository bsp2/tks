// ---- 
// ---- file: fannkuch.tks
// ---- 
// ---- Contributed by Paul Lofte (in Java) to "The Great Computer Language Shootout".
// ---- <http://shootout.alioth.debian.org/>
// ----
// ---- Ported to tkscript by Bastian Spiegel <bs@tkscript.de>
// ---- on 13-Apr-2005.
// ----
// ---- Results: (N=9)
// ----          java1.4.2_04: 94ms    (*1.0)
// ----   java1.4.2_04<-Xint>: 1953ms  (*20,78)
// ----           tks0.9.0.58: 265ms   (*2,81)
// ----    tks0.9.0.58<-Xint>: 5110ms  (*54,362)
// ----
// ---- Program-Output:
// ---- t(ms)=265
// ---- Pfannkuchen(9) = 30
//
//  Results: intel q9900@2.83Ghz, NUM=10
//       tks v0.9.10.72
//          1934ms (JIT)
//         21590ms (interpreted)
//
//       lua v5.1.4.23
//          8908ms (interpreted)
// ----
//  (note) updated for tks 0.9.9.x on 16Dec2024

function fannkuch(int n) {
   // -------------alloc elements------this is for the jit boundary check-----
   int perm[];    perm.alloc(n);    perm.useAll();
   int perm1[];   perm1.alloc(n);   perm1.useAll();
   int count[];   count.alloc(n);   count.useAll();
   int maxPerm[]; maxPerm.alloc(n); maxPerm.useAll();
   int ms = milliSeconds();
   int maxFlipsCount = 0;
   int m = n - 1;
   int i;
   perm1.identity(n);
   int r = n;
      
   int ret = -1;
       
   while(ret < 0)
   {
      while(r != 1) { count[r - 1] = r; r--; }
      if(perm1[0])
      { 
         if(perm1[m] != m)
         {
            perm = perm1;
            int flipsCount = 0;
            int k;
                
            while(perm[0]) 
            {
               k = perm[0];
               i = 0;
               loop((k + 1) >> 1)
               {
                  perm.swap(i, k - i);
                  i++;
               }
               flipsCount++;
            }
                
            if(flipsCount > maxFlipsCount)
            {
               maxFlipsCount = flipsCount;
               maxPerm = perm1;
            }
         }
      }
      for(;;)
      {
         if(r == n) 
         {
            ret = maxFlipsCount;
            break;
         }
         else
         {
            int perm0 = perm1[0];
            perm1.copyFrom(perm1, 1, r, 0);
            perm1[r] = perm0;              
            count[r] = count[r] - 1;
            if(count[r] > 0) 
               break;
            else
               r++;
         }
      }
   }
   ms = milliSeconds() - ms;
   print "t(ms)="+ms;
   return ret;
}

int n = Arguments.numElements ? Arguments[0] : 7;
print "Pfannkuchen(" + n + ") = " + fannkuch(n);
