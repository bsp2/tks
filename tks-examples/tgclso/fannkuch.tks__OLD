// ---- 
// ---- file: fannkuch.tks
// ---- 
// ---- Contributed by Paul Lofte (in Java) to "The Great Computer Language Shootout".
// ---- <http://shootout.alioth.debian.org/>
// ----
// ---- Ported to tkscript by Bastian Spiegel <bs@tkscript.de>
// ---- on 13-Apr-2005.
// ----
// ---- Results: (N=9)
// ----          java1.4.2_04: 94ms    (*1.0)
// ----   java1.4.2_04<-Xint>: 1953ms  (*20,78)
// ----           tks0.9.0.58: 265ms   (*2,81)
// ----    tks0.9.0.58<-Xint>: 5110ms  (*54,362)
// ----
// ---- Program-Output:
// ---- t(ms)=265
// ---- Pfannkuchen(9) = 30
//
//  Results: intel q9900@2.83Ghz, NUM=10
//       tks v0.9.10.72
//          1934ms (JIT)
//         21590ms (interpreted)
//
//       lua v5.1.4.23
//          8908ms (interpreted)
// ----

function fannkuch(int n) {
   // -------------alloc elements------this is for the jit boundary check-----
   int perm[];    perm.alloc(n);    perm.useAll();
   int perm1[];   perm1.alloc(n);   perm1.useAll();
   int count[];   count.alloc(n);   count.useAll();
   int maxPerm[]; maxPerm.alloc(n); maxPerm.useAll();
   compile {
      int milliseconds=milliSeconds();
      int maxFlipsCount = 0;
      int m = n - 1;
      int i;
      for (i = 0; i < n; i++) perm1[i] = i;
      int r = n;
       
      int ret=-1;
       
      while (ret<0) {
         while (r != 1) { count[r - 1] = r; r--; }
         if(perm1[0])
         { 
            if(perm1[m]!=m)
            {
               for (i = 0; i < n; i++) 
                  perm[i] = perm1[i];
               int flipsCount = 0;
               int k;
                
               while (perm[0]) 
               {
                  k=perm[0];
                  int k2 = (k + 1) >> 1;
                  for (i = 0; i < k2; i++) 
                  {
                     int temp = perm[i]; 
                     perm[i] = perm[k - i]; 
                     perm[k - i] = temp;
                  }
                  flipsCount++;
               }
                
               if (flipsCount > maxFlipsCount) {
                  maxFlipsCount = flipsCount;
                  for (i = 0; i < n; i++) maxPerm[i] = perm1[i];
               }
            }
         }
         boolean b_cont=true;
         while (b_cont)
         {
            if (r == n) 
            {
               ret=maxFlipsCount;
               b_cont=false;
            }
            else
            {
               int perm0 = perm1[0];
               i = 0;
               while (i < r) {
                  int j = i + 1;
                  perm1[i] = perm1[j];
                  i = j;
               }
               perm1[r] = perm0;
                
               count[r] = count[r] - 1;
               if (count[r] > 0) 
                  b_cont=false;//break;
               else
                  r++;
            }
         }
      }
      milliseconds=milliSeconds()-milliseconds;
   }
   print "t(ms)="+milliseconds;
   return ret;
}

function main() {
   int n = 7;
   n=Arguments.numElements?Arguments[0]:7;
   
   print "Pfannkuchen(" + n + ") = " + fannkuch(n);
}


