/*
 *  http://www.bagley.org/~doug/shootout/bench/wordfreq/
 *  http://shootout.alioth.debian.org/
 *
 *  0,078s (amd athlon 2500+; tkscript 0.9.4.16; no stdout console output)
 *  0,782s (amd athlon 2500+; tkscript 0.9.4.16; with stdout console output (cygwin))
 *
 */

#define MAX_WORDS 5000   // Maximum number of words in input file
#define MAX_SIZE  174000 // Maximum size of input file

int i, t=milliSeconds();
Integer io;
String s, buf, k;
HashTable uniq;  // holds unique words
IntArray    ia;  // index sort table
IntArray   via;  // holds number of word occurences (uniq hash values)
StringArray ka;  // unique words in <num> <word> form

// ---- Read input string from stdin stream 
StdInStream.readString(buf, MAX_SIZE);

//// ---- Read input string from local file
////buf.loadLocal("wordfreq.txt", true);

// ---- Tokenize and count number of occurences for each unique word
uniq.alloc(MAX_WORDS); 
foreach k in buf.splitCharset("\"\'()[];,.-:*\n\t ")
{ 
   k.toLower();
   uniq[k] = uniq[k]+1; 
}

// ---- Convert the hash keys to a StringArray
uniq.keysToArray(ka);
uniq.valuesToArray(via);

// ---- Prepend number of occurence to each word
i=0; 
foreach s in ka 
{
   io.value = via[i++];
   s=io.printf("%7d")+" "+s;
}

// ---- Sort number of occurences into index table
ka.sortByValue(ia, false/*case-sensitivity*/);

// ---- Print the sorted word array
i=via.numElements-1;
loop(via.numElements)
{
   print ka[ia[i--]];
}

// ---- Print elapsed time
t=milliSeconds()-t;
stderr "time(ms)="+t+"\n";
