/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Mark C. Williams

   ported to TKScript by Bastian Spiegel <bs@tkscript.de> on 16-Jan-2005/23-Jan-2005

   intel q9550@2.83Ghz, NUM=1000000
     tks v0.9.10.72 
        10343ms (JIT)
        14180ms (interpreted)

     lua v5.1.4.23 
         8517ms (interpreted)

     python v2.5.1
        29234ms (interpreted)
*/
class NBodySystem {
   private Body bodies[];
   
   public NBodySystem(){
      bodies.add(#(Body.sun    () ));
      bodies.add(#(Body.jupiter() ));
      bodies.add(#(Body.saturn () ));
      bodies.add(#(Body.uranus () ));
      bodies.add(#(Body.neptune() ));
      
      float px = 0.0;
      float py = 0.0;
      float pz = 0.0;
      Body body; foreach body in bodies {
         px += body.vx * body.mass;
         py += body.vy * body.mass;
         pz += body.vz * body.mass;
      }
       
      body <= bodies[0];
      body.offsetMomentum(px,py,pz);
   }
   
   public method advance(float dt) compile {
      float dx, dy, dz, distance, mag;
      int numBodies=bodies.numElements;
      for(int i=0; i < numBodies; i++) 
      {
         Body bodi <= bodies[i];
         for(int j=i+1; j < numBodies; j++) 
         {
            Body bodj<=bodies[j];
            dx = bodi.x - bodj.x;
            dy = bodi.y - bodj.y;
            dz = bodi.z - bodj.z;
            
            distance = sqrt(dx*dx + dy*dy + dz*dz);
            mag = dt / (distance * distance * distance);
            
            bodi.vx -= dx * bodj.mass * mag;
            bodi.vy -= dy * bodj.mass * mag;
            bodi.vz -= dz * bodj.mass * mag;
            
            bodj.vx += dx * bodi.mass * mag;
            bodj.vy += dy * bodi.mass * mag;
            bodj.vz += dz * bodi.mass * mag;
         }
         
         bodi.x += dt * bodi.vx;
         bodi.y += dt * bodi.vy;
         bodi.z += dt * bodi.vz;
      }
   }
   
   public method energy() {
      float dx, dy, dz, distance;
      float e = 0;

      int numBodies=bodies.numElements;
      compile for (int i=0; i < numBodies; i++) {
         Body bodi<=bodies[i];
         e += 0.5 * bodi.mass *
            (     bodi.vx * bodi.vx
                + bodi.vy * bodi.vy
                + bodi.vz * bodi.vz );
         
         for (int j=i+1; j < numBodies; j++) {
            Body bodj<=bodies[j];
            dx = bodi.x - bodj.x;
            dy = bodi.y - bodj.y;
            dz = bodi.z - bodj.z;
            
            distance = sqrt(dx*dx + dy*dy + dz*dz);
            e -= (bodi.mass * bodj.mass) / distance;
         }
      }
      return e;
   }
   
}

class Body {
   define float SOLAR_MASS    = 4*PI*PI;
   define float DAYS_PER_YEAR = 365.24;
   
   module float x, y, z, vx, vy, vz, mass;
   
   public Body(){}
   
   module method offsetMomentum(float px, float py, float pz) {
      vx = -px / SOLAR_MASS;
      vy = -py / SOLAR_MASS;
      vz = -pz / SOLAR_MASS;
   }
   
   public function jupiter(){
      Body p <= new Body();
      p.x    =   4.84143144246472090e+00;
      p.y    =  -1.16032004402742839e+00;
      p.z    =  -1.03622044471123109e-01;
      p.vx   =   1.66007664274403694e-03  * DAYS_PER_YEAR;
      p.vy   =   7.69901118419740425e-03  * DAYS_PER_YEAR;
      p.vz   =  -6.90460016972063023e-05  * DAYS_PER_YEAR;
      p.mass =   9.54791938424326609e-04  * SOLAR_MASS;
      return deref p;
   }
   
   public function saturn(){
      Body p <= new Body();
      p.x    =  8.34336671824457987e+00;
      p.y    =  4.12479856412430479e+00;
      p.z    = -4.03523417114321381e-01;
      p.vx   = -2.76742510726862411e-03 * DAYS_PER_YEAR;
      p.vy   =  4.99852801234917238e-03 * DAYS_PER_YEAR;
      p.vz   =  2.30417297573763929e-05 * DAYS_PER_YEAR;
      p.mass =  2.85885980666130812e-04 * SOLAR_MASS;
      return deref p;
   }
   
   public function uranus(){
      Body p <= new Body();
      p.x    =  1.28943695621391310e+01;
      p.y    = -1.51111514016986312e+01;
      p.z    = -2.23307578892655734e-01;
      p.vx   =  2.96460137564761618e-03 * DAYS_PER_YEAR;
      p.vy   =  2.37847173959480950e-03 * DAYS_PER_YEAR;
      p.vz   = -2.96589568540237556e-05 * DAYS_PER_YEAR;
      p.mass =  4.36624404335156298e-05 * SOLAR_MASS;
      return deref p;
   }
   
   public function neptune(){
      Body p <= new Body();
      p.x    =  1.53796971148509165e+01;
      p.y    = -2.59193146099879641e+01;
      p.z    =  1.79258772950371181e-01;
      p.vx   =  2.68067772490389322e-03 * DAYS_PER_YEAR;
      p.vy   =  1.62824170038242295e-03 * DAYS_PER_YEAR;
      p.vz   = -9.51592254519715870e-05 * DAYS_PER_YEAR;
      p.mass =  5.15138902046611451e-05 * SOLAR_MASS;
      return deref p;
   }
   
   public function sun(){
      Body p <= new Body();
      p.mass = SOLAR_MASS;
      return deref p;
   }
}

function main {
   int n = Arguments.numElements?Arguments[0]:1000000;
   print "n="+n;
   int t=milliSeconds();
   NBodySystem bodies;
   print bodies.energy();
   loop(n)
      bodies.advance(0.01);
   print bodies.energy();
   print "time(ms)="+(milliSeconds()-t);
}
