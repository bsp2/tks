
class SomeOtherClass {
    private   int i;
    protected int j;
    public    int k;

    private   method print_i() { print "i="+i; }
    protected method print_j() { print "j="+j; }
    public    method print_k() { print "k="+k; }
}

class BaseClass {
              int    j;
    public    int    i;
    private   float  f;
    protected String s;

    private   method privateMethod   () { }
    protected method protectedMethod () { }
}

class DerivedClass extends BaseClass {
    SomeOtherClass soc;

    //print_soc_member_i() { print soc.i; }
    //print_soc_member_j() { print soc.j; }
    print_soc_member_k() { print soc.k; }

    //print_soc_i() { soc.print_i(); }
    //print_soc_j() { soc.print_j(); }
    print_soc_k() { soc.print_k(); }

    print_i() { print "i="+i; }
    print_j() { print "j="+j; }
    print_s() { print "s=\""+s+"\""; }
    //     print_f() { print "f=\""+f+"\""; }
}

// ---- in contrary to c++ protected methods and members are visible in all derived classes
class NextDerivedClass extends DerivedClass {
    callProtectedMethod() { protectedMethod(); }
}


BaseClass bc; bc.i=42;

//print "bc.j="+bc.j;
//print "bc.i="+bc.i;
//print "bc.f="+bc.f;
//print "bc.s="+bc.s;

DerivedClass dc;

dc.print_i();
dc.print_j();
dc.print_s();
// dc.print_f();

//dc.privateMethod();
//dc.protectedMethod();

// ---- try to call a method in other module
//MyModuleClass mmc; mmc.sayHello();
