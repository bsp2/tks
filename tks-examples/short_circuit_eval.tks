
var v0; // void

int i0 = 0;
int i1 = 42;

float f0 = 0.1234;
float f1 = 3.1415;

Object o0 <= null;
Integer io0 = 0;
Integer io1 = 1234;

Float if0 = 0.1234;
Float if1 = 12.34;

String s0 = "";
String s1 = "hello, world.";

int num_passed = 0;
int num_failed = 0;
int num_sidefx = 0;

//
//
// Logical AND
//
//

class Test {

   test(boolean _b, String _msg) {
      if(_b)
      {
         trace "[+++] "+_msg+": OK";
         num_passed++;
      }
      else
      {
         trace "[---] "+_msg+": FAILED";
         num_failed++;
      }
   }

   test_SideEffect() {
      trace "[---] test_SideEffect: expr should not be reachable";
      num_sidefx++;
   }

   test_Chain() {
      int i = 42;

      test(i == 42 || test_SideEffect(), "i == 42 || test_SideEffect()");
      test(!((null != o0) && test_SideEffect()), "!(null != o0) && test_SideEffect()");
   }

   // test_DoSomeInit() : boolean {
   // }

   run_LAND() {
       _Debug();
      test(!(v0 && v0), "!(v0 && v0)");

      // void-int
      test(!(v0 && i0), "!(v0 && i0)");
      test(!(i0 && v0), "!(i0 && v0)");
      test(!(v0 && i1), "!(v0 && i1)");
      test(!(i1 && v0), " (i1 && v0)");
      test( (i1 && i1), " (i1 && i1)");

      // void-float
      test(!(v0 && f0), "!(v0 && f0)");
      test(!(f0 && v0), "!(f0 && v0)");
      test(!(v0 && f1), "!(v0 && f1)");
      test(!(f1 && v0), "!(f1 && v0)");
      test( (f1 && f1), " (f1 && f1)");

      // void-Object
      test(!(v0  && io0), "!(v0  && io0)");
      test(!(v0  && o0),  "!(v0  && o0)");
      test(!(io0 && v0),  "!(io0 && v0)");
      test(!(o0  && v0),  "!(o0  && v0)");
      test(!(v0  && io1), "!(v0  && io1)");
      test(!(io1 && v0),  "!(io1 && v0)");
      test( (io1 && io1), " (io1 && io1)");

      // void-String
      test(!(v0 && s0), "!(v0 && s0)");
      test(!(s0 && v0), "!(s0 && v0)");
      test(!(o0 && s0), "!(o0 && s0)");
      test(!(s0 && o0), "!(s0 && o0)");
      test(!(v0 && s1), "!(v0 && s1)");
      test(!(s1 && v0), "!(s1 && v0)");
      test( (s1 && s1), " (s1 && s1)");

      // int-int
      test(!(i0 && i0), "!(i0 && i0)");
      test(!(i0 && i1), "!(i0 && i1)");
      test(!(i1 && i0), "!(i1 && i0)");
      test( (i1 && i1), " (i1 && i1)");

      // int-float
      test(!(i0 && f0), "!(i0 && f0)");
      test(!(f0 && i0), "!(f0 && i0)");
      test(!(f0 && f0), "!(f0 && f0)");
      test(!(i0 && f1), "!(i0 && f1)");
      test(!(f1 && i0), "!(f1 && i0)");
      test(!(f1 && f0), "!(f1 && f0)");
      test( (f1 && f1), " (f1 && f1)");

      // int-Object<null>
      test(!(i0 && o0), "!(i0 && o0)");
      test(!(o0 && i0), "!(o0 && i0)");
      test(!(o0 && o0), "!(o0 && o0)");
      test(!(i1 && o0), "!(i1 && o0)");
      test(!(o0 && i1), "!(i0 && i1)");

      // int-Object
      test(!(i0  && io0), "!(i0  && io0)");
      test(!(io0 && i0),  "!(io0 && i0)");
      test(!(io0 && io0), "!(io0 && io0)");
      test(!(i0  && io1), "!(i0  && io1)");
      test(!(io1 && i0),  "!(io1 && i0)");
      test( (io1 && io1), " (io1 && io1)");

      // int-String
      test(!(i0 && s0), "!(i0 && s0)");
      test(!(s0 && i0), "!(s0 && i0)");
      test(!(s0 && s0), "!(s0 && s0)");
      test(!(i0 && s1), "!(i0 && s1)");
      test(!(s1 && i0), "!(s1 && i0)");
      test( (s1 && s1), " (s1 && s1)");

      // float-Object<null>
      test(!(o0 && f0), "!(o0 && f0)");
      test(!(f0 && o0), "!(f0 && o0)");
      test(!(f0 && f0), "!(f0 && f0)");
      test(!(o0 && f1), "!(o0 && f1)");
      test(!(f1 && o0), "!(f1 && o0)");
      test(!(f1 && f0), "!(f1 && f0)");
      test( (f1 && f1), " (f1 && f1)");

      // float-Object<0>
      test(!(io0 && f0),  "!(io0 && f0)");
      test(!(f0  && io0), "!(f0  && io0)");
      test(!(f0  && f0),  "!(f0  && f0)");
      test(!(io0 && f1),  "!(io0 && f1)");
      test(!(f1  && io0), "!(f1  && io0)");
      test(!(f1  && f0),  "!(f1  && f0)");
      test( (f1  && f1),  " (f1  && f1)");
   }

   run_LOR() {
       // _Debug();
      test(!(v0 || v0), "!(v0 || v0)");

      // void-int
      test(!(v0 || i0), "!(v0 || i0)");
      test(!(i0 || v0), "!(i0 || v0)");
      test( (v0 || i1), " (v0 || i1)");
      test( (i1 || v0), " (i1 || v0)");
      test( (i1 || i1), " (i1 || i1)");

      // void-float
      test(!(v0 || f0), "!(v0 || f0)");
      test(!(f0 || v0), "!(f0 || v0)");
      test( (v0 || f1), " (v0 || f1)");
      test( (f1 || v0), " (f1 || v0)");
      test( (f1 || f1), " (f1 || f1)");

      // void-Object
      test(!(v0  || io0), "!(v0  || io0)");
      test(!(v0  || o0),  "!(v0  || o0)");
      test(!(io0 || v0),  "!(io0 || v0)");
      test(!(o0  || v0),  "!(o0  || v0)");
      test( (v0  || io1), " (v0  || io1)");
      test( (io1 || v0),  " (io1 || v0)");
      test( (io1 || io1), " (io1 || io1)");

      // void-String
      test(!(v0 || s0), "!(v0 || s0)");
      test(!(s0 || v0), "!(s0 || v0)");
      test(!(o0 || s0), "!(o0 || s0)");
      test(!(s0 || o0), "!(s0 || o0)");
      test( (v0 || s1), " (v0 || s1)");
      test( (s1 || v0), " (s1 || v0)");
      test( (s1 || s1), " (s1 || s1)");

      // int-int
      test(!(i0 || i0), "!(i0 || i0)");
      test( (i0 || i1), " (i0 || i1)");
      test( (i1 || i0), " (i1 || i0)");
      test( (i1 || i1), " (i1 || i1)");

      // int-float
      test(!(i0 || f0), "!(i0 || f0)");
      test(!(f0 || i0), "!(f0 || i0)");
      test(!(f0 || f0), "!(f0 || f0)");
      test( (i0 || f1), " (i0 || f1)");
      test( (f1 || i0), " (f1 || i0)");
      test( (f1 || f0), " (f1 || f0)");
      test( (f1 || f1), " (f1 || f1)");

      // int-Object<null>
      test(!(i0 || o0), "!(i0 || o0)");
      test(!(o0 || i0),  "!(o0 || i0)");
      test(!(o0 || o0),  "!(o0 || o0)");
      test( (i1 || o0),  " (i1 || o0)");
      test( (o0 || i1),  " (i0 || i1)");

      // int-Object
      test(!(i0  || io0), "!(i0  || io0)");
      test(!(io0 || i0),  "!(io0 || i0)");
      test(!(io0 || io0), "!(io0 || io0)");
      test( (i0  || io1), " (i0  || io1)");
      test( (io1 || i0),  " (io1 || i0)");
      test( (io1 || io1), " (io1 || io1)");

      // int-String
      test(!(i0 || s0), "!(i0 || s0)");
      test(!(s0 || i0), "!(s0 || i0)");
      test(!(s0 || s0), "!(s0 || s0)");
      test( (i0 || s1), " (i0 || s1)");
      test( (s1 || i0), " (s1 || i0)");
      test( (s1 || s1), " (s1 || s1)");

      // float-Object<null>
      test(!(o0 || f0), "!(o0 || f0)");
      test(!(f0 || o0), "!(f0 || o0)");
      test(!(f0 || f0), "!(f0 || f0)");
      test( (o0 || f1), " (o0 || f1)");
      test( (f1 || o0), " (f1 || o0)");
      test( (f1 || f0), " (f1 || f0)");
      test( (f1 || f1), " (f1 || f1)");

      // float-Object<0>
      test(!(io0 || f0),  "!(io0 || f0)");
      test(!(f0  || io0), "!(f0  || io0)");
      test(!(f0  || f0),  "!(f0  || f0)");
      test( (io0 || f1),  " (io0 || f1)");
      test( (f1  || io0), " (f1  || io0)");
      test( (f1  || f0),  " (f1  || f0)");
      test( (f1  || f1),  " (f1  || f1)");
   }
}

Test test;
test.run_LAND();
test.run_LOR();
test.test_Chain();

trace num_passed+" tests passed, "+num_failed+" tests failed ("+num_sidefx+" sidefx)";

