
use tksdl;
use tkopengl;

int numframesrendered=0;

class Verlet {
   float target_val;
   float cur_val;
   float cur_speed;   

   // float speed_scl = 0.08;
   // float speed_dcy = 0.9;

   float speed_scl = 0.5;
   float speed_dcy = 0.7;

   tick() {
      float delta = target_val - cur_val;
      cur_speed += delta * speed_scl;
      cur_val += cur_speed;
      cur_speed *= speed_dcy;
   }
}

Verlet verlet;


function onDraw() {

   verlet.tick();

   float dt=FPS.precision;
   glClearColor(0,0,0.2,1);
   // glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
   glClear(GL_COLOR_BUFFER_BIT);
   glDisable(GL_DEPTH_TEST);

   if( !(++numframesrendered&127) )
      trace "FPS.real="+FPS.real;

   zglInitOrtho(2*float(Viewport.width)/Viewport.height, 2);
   float px = 0.0f;
   float py;
   float s = 0.05f;

   glColor3f(0.0,0.9,0.9);
   py = verlet.target_val;
   glBegin(GL_QUADS);
   glVertex2f(px,   py);
   glVertex2f(px,   py+s);
   glVertex2f(px+s, py+s);
   glVertex2f(px+s, py);
   glEnd();

   glColor3f(0.9,0.9,0.9);
   py = verlet.cur_val;
   glBegin(GL_QUADS);
   glVertex2f(px,   py);
   glVertex2f(px,   py+s);
   glVertex2f(px+s, py+s);
   glVertex2f(px+s, py);
   glEnd();
}

function onMouse(int _x, int _y, int _cbs, int _nbs) {
   print "x="+_x+" y="+_y+" cbs="+_cbs+" nbs="+_nbs;
   if(_cbs&1)
      verlet.target_val = 2.0 * ((_y / (-0.5*Viewport.height)) + 1.0);
}

function onKeyboard(Key _k) {
   trace "xxx onKeyboard: k.code="+_k.code+" mod="+_k.mod+" unicode="+_k.unicode+" "+tcchar(_k.unicode);
   switch(_k.pressed)
   {
      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;
   }
}

function main() {
   use callbacks;

   FPS.tickInterval=1000.0/60;
   FPS.limit=60;

   SDL.eventPolling = false; // tksdl default is "true" (do not block while waiting for an SDL event)
   SDL.timerInterval = 20;
   SDL.dpiAwareness = true;  // no OS scaling
   Viewport.openWindow(640, 480);

   SDL.eventLoop();
}
