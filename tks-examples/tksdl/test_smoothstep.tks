
use tksdl;
use tkopengl;

int numframesrendered=0;

float smoothAnim = 0;
float smoothMax = 4;
float smoothMin = -4;

int order = 1;

function onDraw() {

    float dt=FPS.precision;

    float smoothAmount = smoothMin + (smoothMax-smoothMin) * (0.5 + 0.5 * sin(smoothAnim));
    wrap smoothAnim 0 2PI;
    smoothAnim += 0.05235;

    glClearColor(0,0,0.2,1);
    glClear(GL_COLOR_BUFFER_BIT);
    if( !(++numframesrendered&127) )
      trace "FPS.real="+FPS.real;
    zglInitOrtho(0.5, 0.5);
    glLoadIdentity();
    glTranslatef(-0.5, -0.5, 0);
    int numSteps = 256;
    float lx, ly;
    float cx, cy;
    float cxstep = 1.0 / numSteps;

    zglColorARGB(#ffff0000);
    glLineWidth(1);
    glBegin(GL_LINES);
    glVertex2f(0,0);
    glVertex2f(1,1);
    glEnd();

    zglColorARGB(#ff7f7f7f);
    glLineWidth(16);
    glBegin(GL_LINES);
    lx = 0;
    ly = 0;
    cx = 0;
    loop(numSteps)
    {
       cy = (cx*cx*(3-2*cx));
       glVertex2f(lx, ly);
       glVertex2f(cx, cy);
       lx = cx;
       ly = cy;
       cx += cxstep;
    }
    glEnd();

    zglColorARGB(#ffffff00);
    glLineWidth(1);
    glBegin(GL_LINES);
    lx = 0;
    ly = 0;
    cx = 0;
    smoothAmount = 1;
    float smoothAmountAbs = abs(smoothAmount);
    loop(numSteps)
    {
       cy = cx;
       loop((int)smoothAmountAbs)
       {
          cy = mathSmoothStepNf(0,1,cy, order);
       }
       // float ty = mathSmoothStepNf(0,1,cy, order);
       // float t = frac(smoothAmountAbs);
       // cy = mathLerpf(cy, ty, t);
       if(smoothAmount < 0)
          cy = cx + (cx-cy);

//        // test falloff:
//        cy = cx;
//        loop(2)
//           {
//              cy = (1.0f - cy);
//              cy = (1.0f - cy*cy);
//              cy *= cy;
//           }

       glVertex2f(lx, ly);
       glVertex2f(cx, cy);
       lx = cx;
       ly = cy;
       cx += cxstep;
    }
    glEnd();
}

function onKeyboard(Key _k) {
   switch(_k.pressed)
   {
      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;

      case '0': order = 0; break;
      case '1': order = 1; break;
      case '2': order = 2; break;
      case '3': order = 3; break;
      case '4': order = 4; break;
      case '5': order = 5; break;
      case '6': order = 6; break;
   }
}

function main() {
    Viewport.openWindow(640, 480);
    use callbacks;
    FPS.tickInterval=1000.0/60;
    FPS.limit=30;
    trace "xxx entering eventloop";
    SDL.eventLoop();
}

