
// tests GL_TRIANGLES and glPolygonMode()

use tksdl;
use tkopengl;

int numframesrendered=0;

FloatArray verts = [
   -0.6, 0.6,
   -0.5, -0.6,
   -0.6, -0.6,

   -0.6, 0.6,
   -0.5, 0.6,
   -0.5, -0.6,

   -0.5, 0.6,
   -0.4, -0.5,
   -0.5, -0.6,

   -0.5, 0.6,
   -0.4, 0.5,
   -0.4, -0.5,

   -0.4, 0.5,
   -0.3, -0.7,
   -0.4, -0.5,

   -0.4, 0.5,
   -0.3, 0.7,
   -0.3, -0.7,

   -0.3, 0.7,
   -0.2, -0.4,
   -0.3, -0.7,

   -0.3, 0.7,
   -0.2, 0.4,
   -0.2, -0.4,

   -0.2, 0.4,
   -0.1, -0.9,
   -0.2, -0.4,

   -0.2, 0.4,
   -0.1, 0.9,
   -0.1, -0.9,

   // mirrored
   -0.1, 0.9,
    0.1, -0.9,
   -0.1, -0.9,

   -0.1, 0.9,
    0.1, 0.9,
    0.1, -0.9,

    0.1, 0.9,
    0.2, -0.4,
    0.1, -0.9,

    0.1, 0.9,
    0.2, 0.4,
    0.2, -0.4,

    0.2, 0.4,
    0.3, -0.7,
    0.2, -0.4,

    0.2, 0.4,
    0.3, 0.7,
    0.3, -0.7,

    0.3, 0.7,
    0.4, -0.5,
    0.3, -0.7,

    0.3, 0.7,
    0.4, 0.5,
    0.4, -0.5,

    0.4, 0.5,
    0.5, -0.6,
    0.4, -0.5,

    0.4, 0.5,
    0.5, 0.6,
    0.5, -0.6,

    0.5, 0.6,
    0.6, -0.6,
    0.5, -0.6,

    0.5, 0.6,
    0.6, 0.6,
    0.6, -0.6
                         ];

int offset = 0;
int num = verts.numElements/2;

boolean b_color_array = false;

// gen colors
FloatArray colors;
colors.alloc(4* num);
loop(num/6)
{
   colors.addArray([0.0, 1.0, 0.0, 1.0], 0, -1);
   colors.addArray([0.0, 0.6, 0.0, 1.0], 0, -1);
   colors.addArray([0.0, 1.0, 0.0, 1.0], 0, -1);

   colors.addArray([0.0, 1.0, 0.0, 1.0], 0, -1);
   colors.addArray([0.0, 0.6, 0.0, 1.0], 0, -1);
   colors.addArray([0.0, 0.6, 0.0, 1.0], 0, -1);


}

function DrawTriangles(boolean _bAllowColorArray) {
   int n = num;

   if((offset + n) > (verts.numElements/2))
   {
      n = (verts.numElements/2) - offset;
   }

   zglVertexPointer2f(verts);
   glEnableClientState(GL_VERTEX_ARRAY);

   if(b_color_array && _bAllowColorArray)
   {
      zglColorPointer4f(colors);
      glEnableClientState(GL_COLOR_ARRAY);
   }

   glDrawArrays(GL_TRIANGLES, offset, n);

   if(b_color_array && _bAllowColorArray)
   {
      glDisableClientState(GL_COLOR_ARRAY);
   }

   glDisableClientState(GL_VERTEX_ARRAY);
}

function onDraw() {

   float dt=FPS.precision;
   glClearColor(0,0,0.2,1);
   glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

   if( !(++numframesrendered&127) )
      trace "FPS.real="+FPS.real;

   zglInitOrtho(1, 1);

   glLineWidth(2);
   glPointSize(4);

   zglColorARGB(#ff00ff00);
   glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
   DrawTriangles(true);

   zglColorARGB(#ffff0000);
   glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
   DrawTriangles(false);

   zglColorARGB(#ffffffff);
   glPolygonMode(GL_FRONT_AND_BACK, GL_POINT);
   DrawTriangles(false);
}

function onKeyboard(Key _k) {
   switch(_k.pressed)
   {
      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;

      case VKEY_LEFT:
         if(offset > 0)
            offset -= 3;
         trace "[...] offset is now "+offset;
         break;

      case VKEY_RIGHT:
         if(offset < ((verts.numElements/2) -4))
            offset += 3;
         trace "[...] offset is now "+offset;
         break;

      case VKEY_DOWN:
         if(num > 0)
            num -= 3;
         trace "[...] num is now "+num;
         break;

      case VKEY_UP:
         if(num < (verts.numElements/2))
            num += 3;
         trace "[...] num is now "+num;
         break;

      case VKEY_SPACE:
         b_color_array = !b_color_array;
         trace "[...] b_color_array is now "+b_color_array;
         break;
   }
}

function main() {
   use callbacks;

   FPS.tickInterval=1000.0/60;
   FPS.limit=60;

   Viewport.openWindow(640, 480);
   Viewport.swapInterval(1);

   SDL.enableKeyRepeat(150, 50);

   trace "xxx entering eventloop";
   SDL.eventLoop();
}
