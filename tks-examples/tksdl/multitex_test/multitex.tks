//
//    file: multitex.tks
//  author: Bastian Spiegel <bs@tkscript.de>
// created: 30-Mar-2009
//    info: a simple multi-texturing example.
//          press keys 1..3 to toggle texture units 0..2
//


use tksdl;
use tkopengl;

float frot=0;
int numframesrendered=0;

float TEX_SX = 512;
float TEX_SY = 384;
Texture tex;

boolean b_tex0 = true;
boolean b_tex1 = true;
boolean b_tex2 = true;

function onDraw() {

   float ul0 = 0.0;
   float ur0 = 1.0;
   float vb0 = TEX_SY / tex.sy;
   float vt0 = 0.0;

   float scl = 0.005;
   float ua = sin(frot) * scl;
   float va = cos(frot) * scl;
   
   float vb1 = TEX_SY / tex.sy + va;
   float vt1 = 0.0 + va;
   float ul1 = 0.0 + ua;//-1.0 / TEX_SX + ua;
   float ur1 = 1.0 + ua;//1.0 - (1.0 / TEX_SX) + ua;

   float ul2 = 0.0;
   float ur2 = 1.0;
   float vb2 = TEX_SY / tex.sy;
   float vt2 = 0.0;

   float dt=FPS.precision;
   glClearColor(0,0,0.2,1);
   glClear(GL_COLOR_BUFFER_BIT);
   if( !(++numframesrendered&127) )
      trace "FPS.real="+FPS.real;

   zglInit2D(TEX_SX, TEX_SY);

//    glEnable(GL_BLEND);
//    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

   // Enable texture units 0 - 2
   if(b_tex0)
   {
      glActiveTexture(GL_TEXTURE0);
      tex.bind();
      glEnable(GL_TEXTURE_2D);
      zglTexEnvColor4f(0.95, 0.95, 0.95, 1.0);
      glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
      glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_MODULATE);
      glTexEnvi(GL_TEXTURE_ENV, GL_SRC0_RGB, GL_TEXTURE);
      glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND0_RGB, GL_SRC_COLOR); // use texel color
      glTexEnvi(GL_TEXTURE_ENV, GL_SRC1_RGB, GL_CONSTANT);
      glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND1_RGB, GL_SRC_COLOR); // use texenv color
      
      glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_ALPHA, GL_MODULATE);
      glTexEnvi(GL_TEXTURE_ENV, GL_SRC0_ALPHA, GL_TEXTURE);
      glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA); // use texel alpha (1)
      glTexEnvi(GL_TEXTURE_ENV, GL_SRC1_ALPHA, GL_CONSTANT);
      glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND1_ALPHA, GL_SRC_ALPHA); // use texenv color
   }

   if(b_tex1)
   {
      glActiveTexture(GL_TEXTURE1);
      tex.bind();
      glEnable(GL_TEXTURE_2D);
      zglTexEnvColor4f(1,1,1,1);
      glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
      glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_SUBTRACT);
      glTexEnvi(GL_TEXTURE_ENV, GL_SRC0_RGB, GL_TEXTURE1);
      glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND0_RGB, GL_SRC_COLOR); // use texel color
      glTexEnvi(GL_TEXTURE_ENV, GL_SRC1_RGB, GL_PREVIOUS);
      glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND1_RGB, GL_SRC_COLOR); // use texture0 output color

      glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_ALPHA, GL_ADD);
      glTexEnvi(GL_TEXTURE_ENV, GL_SRC0_ALPHA, GL_TEXTURE0);
      glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA); // use texel alpha (1)
      glTexEnvi(GL_TEXTURE_ENV, GL_SRC1_ALPHA, GL_PREVIOUS);
      glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND1_ALPHA, GL_SRC_ALPHA);
   }

   if(b_tex2)
   {
      glActiveTexture(GL_TEXTURE2);
      tex.bind(); // must bind texture, even if it is not actually used as SRCx_RGB
      glEnable(GL_TEXTURE_2D);
      zglTexEnvColor4f(1,1,1,1);
      glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
      glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_SUBTRACT);
      glTexEnvi(GL_TEXTURE_ENV, GL_SRC0_RGB, GL_TEXTURE1); // use texture1, again
      glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND0_RGB, GL_SRC_COLOR); // use texel color
      glTexEnvi(GL_TEXTURE_ENV, GL_SRC1_RGB, GL_PREVIOUS);
      glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND1_RGB, GL_SRC_COLOR); // use texture0 output color

      glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_ALPHA, GL_ADD);
      glTexEnvi(GL_TEXTURE_ENV, GL_SRC0_ALPHA, GL_TEXTURE1);
      glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA); // use texel alpha (1)
      glTexEnvi(GL_TEXTURE_ENV, GL_SRC1_ALPHA, GL_PREVIOUS);
      glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND1_ALPHA, GL_SRC_ALPHA);
   }

   // Draw a textured quad
   glBegin(GL_QUADS);
   zglColorARGB(#ffffffff);

   glTexCoord2f(ul0, vt0);
   glMultiTexCoord2f(GL_TEXTURE1, ul1, vt1);
   glMultiTexCoord2f(GL_TEXTURE2, ul2, vt2);
   glVertex2f(0, 0);

   glTexCoord2f(ur0, vt0);
   glMultiTexCoord2f(GL_TEXTURE1, ur1, vt1);
   glMultiTexCoord2f(GL_TEXTURE2, ur2, vt2);
   glVertex2f(TEX_SX, 0);

   glTexCoord2f(ur0, vb0);
   glMultiTexCoord2f(GL_TEXTURE1, ur1, vb1);
   glMultiTexCoord2f(GL_TEXTURE2, ur2, vb2);
   glVertex2f(TEX_SX, TEX_SY);

   glTexCoord2f(ul0, vb0);
   glMultiTexCoord2f(GL_TEXTURE1, ul1, vb1);
   glMultiTexCoord2f(GL_TEXTURE2, ul2, vb2);
   glVertex2f(0, TEX_SY);
   glEnd();

   // Disable texture units 0 - 2
   if(b_tex0)
   {
      glActiveTexture(GL_TEXTURE0);
      glDisable(GL_TEXTURE_2D);
   }

   if(b_tex1)
   {
      glActiveTexture(GL_TEXTURE1);
      glDisable(GL_TEXTURE_2D);
   }

   if(b_tex2)
   {
      glActiveTexture(GL_TEXTURE2);
      glDisable(GL_TEXTURE_2D);
   }

   frot += dt * 0.04;
   wrap frot 0 2PI;
}

function onMouse(int _x, int _y, int _cbs, int _nbs) {
   //print "x="+_x+" y="+_y+" cbs="+_cbs+" nbs="+_nbs;
}

function onOpen() {
   zglLoadExtensions();

   tex.loadImage("image.png", 0,0,0);
   tex.expand2n();
   tex.unload();
   tex.flags = TEX_MODULATE | TEX_MINFILTERLINEAR | TEX_MAGFILTERLINEAR;
}

function onKeyboard(Key _k) {
   switch(_k.pressed)
   {
      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;

      case '1':
         b_tex0 = ! b_tex0;
         trace "[...] b_tex0 is now " + b_tex0;
         break;

      case '2':
         b_tex1 = ! b_tex1;
         trace "[...] b_tex1 is now " + b_tex1;
         break;

      case '3':
         b_tex2 = ! b_tex2;
         trace "[...] b_tex2 is now " + b_tex2;
         break;
   }
}

function main() {
   use callbacks;

   FPS.tickInterval=1000.0/60;
   FPS.limit=60;

   Viewport.openWindow(512, 384);
   Viewport.swapInterval(1);

   SDL.eventLoop();
}
