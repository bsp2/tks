
use tksdl;
use tkopengl;

int NUM_FRAMES = 1000;

int num_frames;

Double tStart;
Double tEnd;
float tx, ty;

function onDraw() {
   // trace "[...] onDraw";
   if(100 == num_frames++)
      milliSecondsDouble(tStart);

   if((NUM_FRAMES+101) == num_frames)
   {
      milliSecondsDouble(tEnd);
      SDL.exitEventLoop();
   }

   float dt = FPS.precision;

   glClearColor(0,0,0.2,1);
   glClear(GL_COLOR_BUFFER_BIT);

   zglInitOrtho(1,1);
   glColor3f(1,1,1);
   glBegin(GL_QUADS);
   float step = 0.75;
   float iy = ty - 2*step;
   loop(5)
   {
      float ix = tx - 2*step;
      loop(5)
      {
         glVertex2f(ix,     iy);
         glVertex2f(ix    , iy+0.5);
         glVertex2f(ix+0.5, iy+0.5);
         glVertex2f(ix+0.5, iy    );

         ix += step;
      }

      iy+= step;
   }
   glEnd();

   tx -= 0.01*0.5 * dt;
   ty -= 0.0123*0.5 * dt;
   if(tx <= -step)
      tx += step;
   if(ty <= -step)
      ty += step;
}

function onKeyboard(Key _k) {
   switch(_k.pressed)
   {
      case 'f':
         Viewport.toggleFullScreen();
         break;

      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;
   }
}

function main() {
   use callbacks;

   FPS.tickInterval = 1000.0/60;
   FPS.limit=0;

   SDL.eventPolling = true; // tksdl default is "true" (do not block while waiting for an SDL event)
   SDL.dpiAwareness = true;  // no OS scaling

   Viewport.multisampleSamples = 4;
   Viewport.multisampleBuffers = 1;
   Viewport.openWindow(1024, 1024);
   Viewport.swapInterval(1);

   SDL.enableUNICODE(true);
   SDL.enableKeyRepeat(0,0);

   trace "[...] Viewport.dpi="+Viewport.dpi;
   trace "[...] entering eventloop (auto-quit after "+NUM_FRAMES+" frames)";

   SDL.eventLoop();

   if((NUM_FRAMES+101) != num_frames)
   {
      // premature exit
      milliSecondsDouble(tEnd);
   }
   float tDiff = tEnd - tStart;
   num_frames -= 101;
   trace num_frames+" frames in "+tDiff+" milliseconds => "+(tDiff / num_frames)+" ms/frame => "+(1000.0/(tDiff/num_frames))+"Hz";
}
