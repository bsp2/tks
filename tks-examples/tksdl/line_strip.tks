use tksdl;
use tkopengl;

float vp_zoom = 2;

int numframesrendered = 0;


function onDraw() {
   // trace "[...] onDraw";

   float dt = FPS.precision;
   glClearColor(0,0,0.2,1);
   glClear(GL_COLOR_BUFFER_BIT);

   if( !(++numframesrendered&127) )
      trace "FPS.real="+FPS.real;

   zglInitOrtho(1, 1);

   float x = -1;
   int num = 64;
   float a = 0;
   if(0)
   {
      glHint(GL_LINE_SMOOTH_HINT, GL_NICEST);
      glEnable(GL_LINE_SMOOTH);
   }
   glBlendFunc(GL_SRC_ALPHA, GL_ONE);
   glEnable(GL_BLEND);
   glColor3f(0.9,0.9,0.4);
   glLineWidth(16.0);
   glBegin(GL_LINE_STRIP);
   loop(num + 1)
   {
      float y = sin(a) * 0.75;
      glVertex2f(x, y);
      x += 2.0 / num;
      a += 2PI / num;
   }
   glEnd();
}

function onKeyboard(Key _k) {
   trace "[...] onKeyboard: k.code="+_k.code+" ("+TKS.constantToString(_k.code, "VKEY_")+") mod="+_k.mod+" pressed="+_k.pressed+" released="+_k.released+" unicode="+_k.unicode+" "+tcchar(_k.unicode);
   switch(_k.pressed)
   {
      case 'f':
         Viewport.toggleFullScreen();
         break;

      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;
   }
}

function main() {
   use callbacks;

   FPS.tickInterval = 1000.0f / 60;
   FPS.limit = 60;

   SDL.dpiAwareness = true;  // no OS scaling

   if(0)
   {
      Viewport.multisampleSamples = 4;
      Viewport.multisampleBuffers = 1;
   }
   Viewport.openWindow(800*vp_zoom, 600*vp_zoom);

   SDL.enableUNICODE(true);
   SDL.enableKeyRepeat(0,0);

   trace "[dbg] Viewport.dpi="+Viewport.dpi;
   trace "[...] entering eventloop";

   SDL.eventLoop();
}
