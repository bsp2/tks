
use tksdl;
use tkopengl;

class Utils {
   // <method.png>
   public static AlignString(String _s, int _numCols) : String {
      local String r = _s;
      int num = _s.numChars;
      if(num < _numCols)
      {
         r.appendRepeat(" ", (_numCols - num));
      }
      return deref r;
   }
}

// raw scancodes (US PC keyboards)
//  (note) see Key.code, Key.pressed, Key.released

StringArray row_names = [
   // 0:
   "esc..f12",

   // 1:
   "print  / scroll / pause\n"
   "ins    / home   / pageup\n"
   "delete / end    / pagedown",

   // 2:
   "`1..9-=BACKSPACE",

   // 3:
   "TABq..p[]RETURN",

   // 4:
   "CAPSLOCK,a..l;'\\",

   // 5:
   "lshift<z..m,./rshift",

   // 6:
   "lctrlLWINLALTSPACERALTRWINMENUrctrl",

   // 7:
   "numpad row 1  /*-",

   // 8:
   "numpad row 2  789+",

   // 9:
   "numpad row 3  456",

   // 10:
   "numpad row 4  123enter",

   // 11:
   "numpad row 5  0.",
                         ];

IntArray raw_key_codes = [
   // 0: esc..f12 row
   0,
   VKEY_ESCAPE,
   VKEY_F1,
   VKEY_F2,
   VKEY_F3,
   VKEY_F4,
   VKEY_F5,
   VKEY_F6,
   VKEY_F7,
   VKEY_F8,
   VKEY_F9,
   VKEY_F10,
   VKEY_F11,
   VKEY_F12,

   // 1:
   // print/roll/break,
   // ins/home/pageup
   // delete/end/pagedown
   -1,
   VKEY_SYSREQ, VKEY_SCROLLOCK, VKEY_PAUSE,
   VKEY_INSERT, VKEY_HOME,      VKEY_PAGEUP,
   VKEY_DELETE, VKEY_END,       VKEY_PAGEDOWN,

   // 2: `1..9-=BACKSPACE row
   -2,
   VKEY_BACKQUOTE,
   VKEY_1,
   VKEY_2,
   VKEY_3,
   VKEY_4,
   VKEY_5,
   VKEY_6,
   VKEY_7,
   VKEY_8,
   VKEY_9,
   VKEY_0,
   VKEY_MINUS,
   VKEY_EQUALS,
   VKEY_BACKSPACE,

   // 3: TABq..p[]RETURN row
   -3,
   VKEY_TAB,
   'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 
   VKEY_LEFTBRACKET,
   VKEY_RIGHTBRACKET,
   VKEY_RETURN,

   // 4: CAPSLOCK,a..l;'\ row
   -4,
   VKEY_CAPSLOCK,
   'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',
   VKEY_SEMICOLON,
   VKEY_QUOTE,
   VKEY_BACKSLASH,

   // 5: lshift§z..m,./rshift row
   -5,
   VKEY_LSHIFT,
   VKEY_LESS,  // uk:\ de:<
   'z', 'x', 'c', 'v', 'b', 'n', 'm', 
   VKEY_COMMA,
   VKEY_PERIOD,
   VKEY_SLASH,
   VKEY_RSHIFT,

   // 6: lctrlLWINLALTSPACERALTRWINMENUrctrl row
   -6,
   VKEY_LCTRL,
   VKEY_LSUPER,	/* Left "Windows" key or Option key on macOS */
   VKEY_LALT,     /* Command key on macOS */
   VKEY_SPACE,
   VKEY_RALT,   /* right Command key on macOS */
   VKEY_RSUPER,
   VKEY_MENU,
   VKEY_RCTRL,

   // 7: numpad row 1
   -7,
   VKEY_KP_DIVIDE,
   VKEY_KP_MULTIPLY,
   VKEY_KP_MINUS,

   // 8: numpad row 2
   -8,
   VKEY_KP7,
   VKEY_KP8,
   VKEY_KP9,
   VKEY_KP_PLUS,

   // 9: numpad row 3
   -9,
   VKEY_KP4,
   VKEY_KP5,
   VKEY_KP6,

   // 10: numpad row 4
   -10,
   VKEY_KP1,
   VKEY_KP2,
   VKEY_KP3,
   VKEY_KP_ENTER,

   // 11: numpad row 5
   -11,
   VKEY_KP0,
   VKEY_KP_PERIOD,

                          ];

// local key code => raw key code mapping
String s_local_key_codes;
int raw_key_idx = 0;
int raw_key_code;

function QueryNextKey() : boolean {
   if(raw_key_idx >= raw_key_codes.numElements)
      return false;

   int code = raw_key_codes.get(raw_key_idx++);
   if(code <= 0)
   {
      code = -code;
      trace "\nROW "+code+": "+row_names.get(code);
      code = raw_key_codes.get(raw_key_idx++);
      s_local_key_codes.append("\n");
   }
   String sKey <= TKS.constantToString(code, "VKEY_");
   if(null == sKey)
      sKey <= "\'"+tcchar(code)+"\'";
   stdout "key "+sKey+":";
   raw_key_code = code;
   Viewport.needRedraw();
   return true;
}

function onDraw() {
   glClearColor(rand(1.0),rand(1.0),rand(1.0),1);
   glClear(GL_COLOR_BUFFER_BIT);
}

function onMouse(int _x, int _y, int _cbs, int _nbs) {
   // print "x="+_x+" y="+_y+" cbs="+_cbs+" nbs="+_nbs;

   if( (_cbs & MOUSE_LBUTTON) && (_nbs & MOUSE_LBUTTON) )
   {
      String sKey <= TKS.constantToString(raw_key_code, "VKEY_");
      if(null != sKey)
         s_local_key_codes.append("   "+Utils.AlignString(sKey+"/*"+raw_key_code+"*/", 30)+", ");
      else
         s_local_key_codes.append("   "+Utils.AlignString("\'"+tcchar(raw_key_code)+"\'/*"+raw_key_code+"*/", 30)+", ");
      s_local_key_codes.append(String(raw_key_code)+"/*skip*/,\n");
      trace "<skip>";
      QueryNextKey();
   }
   else if( (_cbs & MOUSE_RBUTTON) && (_nbs & MOUSE_RBUTTON) )
   {
      trace "<aborting>";
      SDL.exitEventLoop();
   }
}

function onKeyboard(Key _k) {
   // trace "xxx onKeyboard: k.code="+_k.code+" ("+TKS.constantToString(_k.code, "VKEY_")+") mod="+_k.mod+" unicode="+_k.unicode+" "+tcchar(_k.unicode);
   if(_k.pressed >= 1)
   {
      String sKey <= TKS.constantToString(raw_key_code, "VKEY_");
      if(null != sKey)
         s_local_key_codes.append("   "+Utils.AlignString(sKey+"/*"+raw_key_code+"*/", 30)+", ");
      else
         s_local_key_codes.append("   "+Utils.AlignString("\'"+tcchar(raw_key_code)+"\'/*"+raw_key_code+"*/", 30)+", ");  // a..z
      s_local_key_codes.append(String(_k.pressed)+"/*"+_k.name+"*/,\n");
      trace _k.name+" ("+_k.pressed+")";
      if(!QueryNextKey())
      {
         s_local_key_codes.append("};\n");
         trace "";
         trace s_local_key_codes;
         SDL_SetClipboard(s_local_key_codes);

         SDL.exitEventLoop();
      }
   }
}

function main() {
   use callbacks;

   FPS.tickInterval=1000.0/60;
   FPS.limit=30;

   SDL.eventPolling = false; // tksdl default is "true" (do not block while waiting for an SDL event)
   SDL.redrawFlag   = REDRAW_DIRTY; 

   Viewport.openWindow(320, 240);
   SDL.enableUNICODE(true);
   SDL.enableKeyRepeat(0,0);

   int numKeyCodes = (raw_key_codes.numElements-12/*groups*/);
   trace "[dbg] number of raw key codes: "+numKeyCodes;

   trace "\n(note) result will be copied to clipboard\n\n";
   trace "\n(note) click LMB to skip key (assign raw key code), RMB to quit\n\n";

   s_local_key_codes = "sUI macos_local_to_raw_key_table_<lc>["+numKeyCodes+"*2] = {\n";
   raw_key_idx = 0;
   QueryNextKey();

   SDL.eventLoop();
}
