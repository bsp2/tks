
use tksdl;
use tkopengl;

boolean b_use_vbo = true;//false;
//boolean b_use_vbo = false;

float frot=0;
int numframesrendered=0;

int bufobj_test = -1;

FloatArray fa_verts = 
[ -1, -1,
  1, -1,
  1,  1,
  -1,  1
  ];

// FloatArray fa_cols =
// [ 0.9, 0.9, 0.9, 1.0,
//   0.8, 0.8, 0.9, 1.0,
//   0.9, 0.8, 0.8, 1.0,
//   0.8, 0.9, 0.8, 0.7
//   ];

FloatArray fa_cols =
[ 1.0, 0.0, 0.0, 1.0,
  1.0, 1.0, 0.0, 1.0,
  0.0, 0.0, 1.0, 1.0,
  0.0, 1.0, 0.0, 1.0
  ];

int sz_verts = fa_verts.numElements *4;
int sz_cols  = fa_cols .numElements *4;

function CreateVBO() {
   bufobj_test = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, bufobj_test);
   zglBufferData(GL_ARRAY_BUFFER, sz_verts + sz_cols, null, GL_STATIC_DRAW);
   zglBufferSubData(GL_ARRAY_BUFFER, 0, sz_verts, fa_verts);
   zglBufferSubData(GL_ARRAY_BUFFER, sz_verts, sz_cols, fa_cols);
   glBindBuffer(GL_ARRAY_BUFFER, 0); // remove binding
   trace "CreateVBO: last error = " +glGetError();
}


function onDraw() {
    float dt=FPS.precision;
    glClearColor(0,0,0.2,1);
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
    if( !(++numframesrendered&127) )
      trace "FPS.real="+FPS.real;

    zglInitOrtho(1, 1);
    //zglRotate3f(0,0,frot);
    glDisable(GL_CULL_FACE);

    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_COLOR_ARRAY);
    if(b_use_vbo)
    {
       glBindBuffer(GL_ARRAY_BUFFER, bufobj_test);
       zglColorOffset(4, GL_FLOAT, 0, sz_verts);
       zglVertexOffset(2, GL_FLOAT, 0, 0);
       glDrawArrays(GL_QUADS, 0, fa_verts.numElements/2);
       glBindBuffer(GL_ARRAY_BUFFER, 0);
    }
    else
    {
       zglColorPointer4f(fa_cols);
       zglVertexPointer2f(fa_verts);
       glDrawArrays(GL_QUADS, 0, fa_verts.numElements/2);
    }
    glDisableClientState(GL_COLOR_ARRAY);
    glDisableClientState(GL_VERTEX_ARRAY);

    frot+=dt;
    wrap frot 0 360;
}

function onOpen() {
   if(b_use_vbo)
   {
      zglLoadExtensions();
      CreateVBO();
   }
}

function onMouse(int _x, int _y, int _cbs, int _nbs) {
   //print "x="+_x+" y="+_y+" cbs="+_cbs+" nbs="+_nbs;
}

function onKeyboard(Key _k) {
   switch(_k.pressed)
   {
      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;
      case VKEY_SPACE:
         b_use_vbo = ! b_use_vbo;
         trace "[...] b_use_vbo is now " + b_use_vbo;
         break;
   }
}

function main() {
    use callbacks;

    FPS.tickInterval=1000.0/60;
    FPS.limit=60;

    Viewport.openWindow(640, 480);

    trace "xxx entering eventloop";
    SDL.eventLoop();
}
