
use tksdl;
use tkopengl;

float frot=0;
int numframesrendered=0;
boolean bClear;

IntArray colors=[#ffffff, #FFFFff, #FFFFFF, #FFFFFF, #FFFFFF, #000000, #000000, #000000, #FFFFFF, #000000, #000000, #FFFFFF, #FFFFFF, #000000];

float spr_animx_val=0;
float spr_animx_spd=0.243245;
float spr_animy_val=0;
float spr_animy_spd=0.15346357;


function onDraw() {
    float dt=FPS.precision;

    if( !(++numframesrendered&127) )
      trace "FPS.real="+FPS.real;

    zglInit2D(Viewport.width, Viewport.height);

    //zglRotate3f(0,0,frot);
//     glColor3f(0.9,0.9,0.9);
//     glPointSize(16);
//     glBegin(GL_POINTS);
//     loop(16)
//     {
//        zglColorARGB(colors[rnd(colors.maxElements)]);
//        glVertex2f(Viewport.width/2 +rnd(16)-16, Viewport.height/2 +rnd(16)-16);
//     }
//     glEnd();

//     glColor3f(1,1,1);
//     glPointSize(2);
//     glBegin(GL_POINTS);
//     loop(10)
//     {
//        zglColorARGB(colors[rnd(colors.maxElements)]);
//        glVertex2f(Viewport.width/2 + sin(spr_animx_val)*16, Viewport.height/2 + sin(spr_animy_val)*16);
//     }
//     glEnd();

    glColor3f(0,0,0);
    glPointSize(20);
    glBegin(GL_POINTS);
    glVertex2f(Viewport.width/2, Viewport.height/2);
    glEnd();

    spr_animx_val+=spr_animx_spd*dt;
    spr_animy_val+=spr_animy_spd*dt;

//     glColor3f(0,0,0);
//     glBegin(GL_QUADS);
//     glVertex2i(Viewport.width/4-8, Viewport.height/4-8);
//     glVertex2i(Viewport.width/4+8, Viewport.height/4-8);
//     glVertex2i(Viewport.width/4+8, Viewport.height/4+8);
//     glVertex2i(Viewport.width/4-8, Viewport.height/4+8);
//     glEnd();

    glEnable(GL_COLOR_LOGIC_OP);
    glLogicOp(GL_COPY);
    float r=1.0;
    float rstep = 1.0/8;
    loop(8)
    {
       float a=rnd(2PI);
       int sdiv=64+r*16;//4;//+r*8;
       float astep=2PI/sdiv;
       loop(sdiv)
       {
          int sx= Viewport.width/2 + sin(a)*r* Viewport.width/2;
          int sy= Viewport.height/2 + cos(a)*r * Viewport.height/2;
          int dx= Viewport.width/2 + sin(a-0.0151)*(r*1.0135)* Viewport.width/2;
          int dy= Viewport.height/2 + cos(a-0.0151)*(r*1.0135) * Viewport.height/2;
          //print "copy ("+sx+";"+sy+") to ("+dx+";"+dy+")";
          glRasterPos2i(dx, dy);//+rnd(8)-2,dy-8+rnd(8)-2);
          glCopyPixels(sx,Viewport.height-sy,16, 16, GL_COLOR);
//           glColor3f(1,1,1);
//           glBegin(GL_QUADS);
//           glVertex2i(sx, sy);
//           glVertex2i(sx+16, sy);
//           glVertex2i(sx+16, sy+16);
//           glVertex2i(sx, sy+16);
//           glEnd();
          a-=astep+rnd(0.1);
       }
       r-=rstep;
    }

    glDisable(GL_COLOR_LOGIC_OP);
    
    if(Mouse.buttons&MOUSE_RBUTTON)
       glColor3f(0,0,0);
    else if(Mouse.buttons&MOUSE_LBUTTON)
       glColor3f(1,1,1);
    if(Mouse.buttons)
    {
       glPointSize(8);
       glBegin(GL_POINTS);
       glVertex2f(Mouse.x, Mouse.y);
       glEnd();
    }

    if(bClear)
    {
       glColor3f(1,1,1);
       glPointSize(8);
       glBegin(GL_POINTS);
       glVertex2f(138, 117);
       glVertex2f(138+2, 117+1);
       glVertex2f(138-2, 117-1);
       glVertex2f(138+2, 117+2);
       glEnd();
       bClear=0;
    }

//     glColor3f(0,0,0);
//     glBegin(GL_QUADS);
//     glVertex2i(0, 0);
//     glVertex2i(Viewport.width, 0);
//     glVertex2i(Viewport.width, 32);
//     glVertex2i(0, 32);
//     glEnd();

//     glColor3f(0,0,0);
//     glBegin(GL_QUADS);
//     glVertex2i(Viewport.width-32, 0);
//     glVertex2i(Viewport.width, 0);
//     glVertex2i(Viewport.width, Viewport.height);
//     glVertex2i(Viewport.width-32, Viewport.height);
//     glEnd();


//     glBegin(GL_QUADS);
//     glVertex2i(Viewport.width/2-8, Viewport.height/2-8);
//     glVertex2i(Viewport.width/2+8, Viewport.height/2-8);
//     glVertex2i(Viewport.width/2+8, Viewport.height/2+8);
//     glVertex2i(Viewport.width/2-8, Viewport.height/2+8);

//     glVertex2i(Viewport.width/2-8, Viewport.height/2-8);
//     glVertex2i(Viewport.width/2+8, Viewport.height/2-8);
//     glVertex2i(Viewport.width/2+8, Viewport.height/2+8);
//     glVertex2i(Viewport.width/2-8, Viewport.height/2+8);
//     glEnd();

//     glRasterPos2i(100,100);
//     glCopyPixels(320,240,32,32,GL_COLOR);
    

    //frot+=dt*0.1;
    wrap frot 0 2PI;
}

function onMouse(int x, int y, int _cbs, int _nbs) {
   print "x="+x+" y="+y;
   if(Mouse.buttons) print "click**";
   
}

function onKeyboard(Key _k) {
   if(_k.pressed==VKEY_ESCAPE) SDL.exitEventLoop();
}

function onOpen() {
   bClear = 1;
   trace "reopen";
   glClearColor(0,0,0,1);
   glClear(GL_COLOR_BUFFER_BIT);
}

function main() {
   use callbacks;
   Viewport.doubleBuffer = false;
   Viewport.openWindow(320, 240);
   FPS.tickInterval=1000.0/60;
   FPS.limit=60;
   SDL.eventLoop();
}
