///
/// file   : nehelesson5.tks
/// author : Bastian Spiegel <bastian.spiegel@web.de>
/// descr. : converted line by line from Neon Helium Productions <nehe.gamedev.net> Open GL lesson #5 
///          please visit nehe.gamedev.net.
/// license: provided "AS IS". no copyright, no liability. use as you want.
/// created: 080901
///
///

module Main;
use tksdl;
use tkopengl;
use tkoldmath;

float rtri=0.0;                           // Angle For The Triangle ( NEW )
float rquad=0.0;                          // Angle For The Quad ( NEW )
int vsync=1;
int rtri_type=0; // tests different ways to rotate pyramid (using deprecated "tkoldmath" API)

function onDraw() {
   Matrix m,m2;
   Vector v;
   
   //viewport.waitVBlank();
   zglInitPerspective(1.3, 45.0, 0.1, 100.0);
   glCullFace(GL_BACK);
   glEnable(GL_CULL_FACE);
   glFrontFace(GL_CCW);
   glEnable(GL_DEPTH_TEST);
   glClearColor(0.1,0.1,0.1,1);
   glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);   // Clear Screen And Depth Buffer
   
   switch(rtri_type)
   {
      case 0:
         glLoadIdentity();                   // Reset The Current Modelview Matrix
         glTranslatef(-1.5,0.0,-6.0);        // Move Left 1.5 Units And Into The Screen 6.0
         glRotatef( rtri, 0.0, 1.0, 0.0 );   // Rotate The Triangle On The Y axis ( NEW )  
         break;

      case 1:
         m.initDeg( 0, rtri , 0);
         zglLoadMatrix(m, vector(-1.5,0.0,-6.0));
         break;

      case 2:
         m.initv(vector(0,rtri*2PI/360.0,0));
         zglLoadMatrix(m, vector(-1.5,0.0,-6.0));
         break;

      case 3:
         glLoadIdentity();
         glTranslatef(-1.5,0.0,-6.0);
         zglRotate3f(0.0, rtri, 0.0);
         break;

      case 4:
         glLoadIdentity();
         zglTranslatev(vector(-1.5,0.0,-6.0));
         zglRotatev(vector(0,rtri,0));
         break;
   }
   

   // Draw pyramid
   glBegin(GL_TRIANGLES);        // Start Drawing A Triangle

   zglColorARGB($ff0000);        // Red
   glVertex3f(0.0, 1.0, 0.0);    // Top Of Triangle (Front)

   zglColorARGB($00ff00);        // Green
   glVertex3f(-1.0,-1.0, 1.0);   // Left Of Triangle (Front)

   zglColorARGB($0000FF);        // Blue
   glVertex3f( 1.0,-1.0, 1.0);   // Right Of Triangle (Front)

   zglColorARGB($FF0000);        // Red
   glVertex3f(0.0, 1.0, 0.0);    // Top Of Triangle (Right)

   zglColorARGB($0000FF);        // Blue
   glVertex3f(1.0, -1.0, 1.0);   // Left Of Triangle (Right)

   zglColorARGB($00FF00);        // Green
   glVertex3f(1.0, -1.0, -1.0);  // Right Of Triangle (Right)

   zglColorARGB($FF0000);        // Red
   glVertex3f(0.0, 1.0, 0.0);    // Top Of Triangle (Back)

   zglColorARGB($00FF00);        // Green
   glVertex3f(1.0, -1.0, -1.0);  // Left Of Triangle (Back)

   zglColorARGB($0000FF);        // Blue
   glVertex3f(-1.0, -1.0, -1.0); // Right Of Triangle (Back)

   zglColorARGB($FF0000);        // Red
   glVertex3f(0.0, 1.0, 0.0);    // Top Of Triangle (Left)

   zglColorARGB($0000FF);        // Blue
   glVertex3f(-1.0, -1.0, -1.0); // Left Of Triangle (Left)

   zglColorARGB($00FF00);        // Green
   glVertex3f(-1.0, -1.0, 1.0);  // Right Of Triangle (Left)

   glEnd();                      // Done Drawing The Pyramid
   

   // Draw cube
   glLoadIdentity();                       // Reset The Current Modelview Matrix
   glTranslatef(1.5, 0.0, -7.0);           // Move Right 1.5 Units And Into The Screen 7.0
   glRotatef(rquad, 1,1,1);                // Rotate The Quad On The X axis ( NEW )

   glBegin(GL_QUADS);                      // Draw A Quad

   zglColorARGB($00FF00);                  // Set The Color To Green
   glVertex3f(1.0, 1.0, -1.0);             // Top Right Of The Quad (Top)
   glVertex3f(-1.0, 1.0, -1.0);            // Top Left Of The Quad (Top)
   glVertex3f(-1.0, 1.0, 1.0);             // Bottom Left Of The Quad (Top)
   glVertex3f(1.0, 1.0, 1.0);              // Bottom Right Of The Quad (Top)

   zglColorARGB($FF8000);                  // Set The Color To Orange
   glVertex3f(1.0, -1.0, 1.0);             // Top Right Of The Quad (Bottom)
   glVertex3f(-1.0, -1.0, 1.0);            // Top Left Of The Quad (Bottom)
   glVertex3f(-1.0, -1.0, -1.0);           // Bottom Left Of The Quad (Bottom)
   glVertex3f(1.0, -1.0, -1.0);            // Bottom Right Of The Quad (Bottom)

   zglColorARGB($FF0000);                  // Set The Color To Red
   glVertex3f(1.0, 1.0, 1.0);              // Top Right Of The Quad (Front)
   glVertex3f(-1.0, 1.0, 1.0);             // Top Left Of The Quad (Front)
   glVertex3f(-1.0, -1.0, 1.0);            // Bottom Left Of The Quad (Front)
   glVertex3f(1.0, -1.0, 1.0);             // Bottom Right Of The Quad (Front)

   zglColorARGB($FFFF00);                  // Set The Color To Yellow
   glVertex3f(1.0, -1.0, -1.0);            // Top Right Of The Quad (Back)
   glVertex3f(-1.0,-1.0,-1.0);             // Top Left Of The Quad (Back)
   glVertex3f(-1.0, 1.0,-1.0);             // Bottom Left Of The Quad (Back)
   glVertex3f(1.0, 1.0, -1.0);             // Bottom Right Of The Quad (Back)

   zglColorARGB($0000FF);                  // Set The Color To Blue
   glVertex3f(-1.0, 1.0, 1.0);             // Top Right Of The Quad (Left)
   glVertex3f(-1.0, 1.0, -1.0);            // Top Left Of The Quad (Left)
   glVertex3f(-1.0, -1.0, -1.0);           // Bottom Left Of The Quad (Left)
   glVertex3f(-1.0, -1.0, 1.0);            // Bottom Right Of The Quad (Left)

   zglColorARGB($FF00FF);                  // Set The Color To Violet
   glVertex3f(1.0, 1.0, -1.0);             // Top Right Of The Quad (Right)
   glVertex3f(1.0, 1.0, 1.0);              // Top Left Of The Quad (Right)
   glVertex3f(1.0, -1.0, 1.0);             // Bottom Left Of The Quad (Right)
   glVertex3f(1.0, -1.0, -1.0);            // Bottom Right Of The Quad (Right)

   glEnd();                                // Done Drawing The Quad
   
   glDisable(GL_CULL_FACE);
   
   if(vsync) Viewport.waitVBlank();
   float dt=FPS.precision;
   rtri+=2.0*dt;                 // Increase The Rotation Variable For The Triangle ( NEW )
   rquad-=1.0*dt;                // Decrease The Rotation Variable For The Quad ( NEW )
}

function onKeyboard(Key _k) {
   if(_k.pressed==VKEY_ESCAPE) SDL.exitEventLoop();
}

function main() {

   use callbacks;

   FPS.tickInterval=1000.0/50.0;
   FPS.tickBuffer=0;

   Viewport.openWindow(320, 240);
   
   trace "-------- nehelesson5 --------";
   trace "   esc : exit";
   trace "\n\n";
   
   SDL.eventLoop();
}
