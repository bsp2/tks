/// ---- file   : camera.tks
/// ---- author : bastian spiegel <bs@tkscript.de>
/// ---- date   : 04-02-2003
/// ---- license: public domain. provided "AS IS". no copyright, no liability. use as you want.
/// ----
/// ---- a simple camera that is controllable via cursor keys+mouse
/// ----
/// ----
/// ----

module MCamera;

class Camera {
    float lookatx;
    float lookaty;
    float lookatz;
    float roty;
    float rotx;
    int   b_rot;
    int   b_rotx;
    int   b_zoom;
    float xrotmin;
    float xrotmax;
    int   xrotclamp;

    init();
    load();
    loadTransform();
    onMouse(int _dx, int _dy, int _cbs, int _nbs);
    /** int **/ onKey(Key _key);
    tickPrecise(float _dt);
}

Camera::init() {
    lookatx=0;
    lookaty=0;
    lookatz=-4;
    roty=0;
    rotx=0;
    b_rot=false;
    b_rotx=false;
    b_zoom=false;
    xrotmin=-89.0;
    xrotmax=89.0;
    xrotclamp=true;
}

Camera::load() {
    zglInitPerspective(1.3, 65.0, 0.1, 100.0);
    glLoadIdentity();
    loadTransform();
}

Camera::loadTransform() {
    glTranslatef(lookatx, lookaty, lookatz);
    glRotatef(rotx, 1,0,0);
    glRotatef(roty, 0,1,0);
}

Camera::tickPrecise {
    roty+=_dt*1.5*b_rot;
    rotx+=_dt*1.5*b_rotx;
    lookatz+=_dt*0.4*b_zoom;
}

Camera::onMouse {
    _dx=Mouse.dx;
    _dy=Mouse.dy;
    if(_dx>40) _dx=40;
    else if(_dx<-40) _dx=-40;
    if(_dy>40) _dy=40;
    else if(_dy<-40) _dy=-40;
    if(_cbs&MOUSE_RBUTTON) lookatz+=_dy*0.01;
    roty+=0.5*_dx;
    rotx-=0.5*_dy;
    if(xrotclamp)
	{
	    if(rotx>xrotmax) rotx=xrotmax;
	    else if(rotx<xrotmin) rotx=xrotmin;
	}
    if(rotx>=360.0) rotx-=360.0;
    else if(rotx<=-360.0) rotx+=360.0;
}

Camera::onKey {
    switch(_key.pressed)
	{
	case 'k'       : b_rot=-1;  return true;
	case 'l'       : b_rot=1;   return true;
	case VKEY_UP   : b_zoom=1;  return true;
	case VKEY_DOWN : b_zoom=-1; return true;
	case 'i'       : b_rotx=-1; return true;
	case 'o'       : b_rotx=1;  return true;
	}
    switch(_key.released)
	{
	case 'k'       : b_rot=(b_rot==1)?1:0;     return true;
	case 'l'       : b_rot=(b_rot==-1)?-1:0;   return true;
	case VKEY_UP   : b_zoom=(b_zoom==-1)?-1:0; return true;
	case VKEY_DOWN : b_zoom=(b_zoom==1)?1:0;   return true;
	case 'i'       : b_rotx=(b_rotx==1)?1:0;   return true;
	case 'o'       : b_rotx=(b_rotx==-1)?-1:0; return true;
	}
    return false;
}

