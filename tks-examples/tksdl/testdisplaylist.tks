///
/// file   : testdisplaylist.tks
/// author : Bastian Spiegel <bastian.spiegel@web.de>
/// descr. : TKS video test
/// created: 050901
/// changed:
///          070901 <fli> added boromean ring and knot generators
///          260703 <fli> 
///
module Main;

Texture t;
DisplayList dl0;
DisplayList dl1;
Vector cam_rot;
Vector cam_rotspd;
cam_rot.init(0.0, 0.0, 0.0);
cam_rotspd.init(0.3123, 0.102315, 0.2021);
int draw_mode=0;
int have_lists=0;
int vsync=1;

function DrawStuff() compile {
   Vector vp;
   Vector vs;
   int i;
   float u=0.0;
   float ustep=PI*2.0/32.0;
   float r=sqrt(3.0)/3.0;
   float cosu;
   float sinu;


   glEnable(GL_TEXTURE_2D);
   glEnable(GL_BLEND);
   glDisable(GL_ALPHA_TEST);
   glBlendFunc(GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR );
   glDisable(GL_DEPTH_TEST);
   t.bind();

   ustep=2.0*PI/64.0;
   u=0.0;
   vs.init(512.0, 512.0, 512.0);
   Vector tv;
   Matrix modelview; zglStoreMatrix(modelview, tv);
   Vector vlt; vlt.init(-vs.x, -vs.y, 0); vlt.rotateInv(modelview); vlt.scalef(130);
   Vector vrt; vrt.init(vs.x, -vs.y, 0); vrt.rotateInv(modelview); vrt.scalef(130);
   Vector vrb; vrb.init(vs.x, vs.y, 0); vrb.rotateInv(modelview); vrb.scalef(130);
   Vector vlb; vlb.init(-vs.x, vs.y, 0); vlb.rotateInv(modelview); vlb.scalef(130);
   float x,y,z;
   glBegin(GL_QUADS);
   loop(64)
   {
      x=130*(10.0*(cos(u)+cos(3.0*u)) + cos(2*u)+cos(4*u));
      y=130*(6.0*sin(u) + 10.0*sin(3.0*u));
      z=130*(4.0*sin(3.0*u)*sin(5.0*u*0.5)+4.0*sin(4.0*u)-2.0*sin(6.0*u));
      glTexCoord2f(0.0, 0.0);
      glVertex3f(vlt.x+x, vlt.y+y, vlt.z+z);
      glTexCoord2f(1.0, 0.0);
      glVertex3f(vrt.x+x, vrt.y+y, vrt.z+z);
      glTexCoord2f(1.0, 1.0);
      glVertex3f(vrb.x+x, vrb.y+y, vrb.z+z);
      glTexCoord2f(0.0, 1.0);
      glVertex3f(vlb.x+x, vlb.y+y, vlb.z+z);
      //pdev.drawBBSprite(vp, vs);
      u+=ustep;
   }
   glEnd();
   glDisable(GL_BLEND);
   glDisable(GL_TEXTURE_2D);
}

function CreateDisplayLists() {
   DisplayList d;
   d<=dl1; d.alloc(); d.begin();
   DrawStuff();
   d.end();
}

function onDraw() {
   zglInitPerspective(4.0/3.0, 128.0, 0.1, 256.0);
   glClearColor(0.03125, 0.03125, 0.125, 1);
   glClear(GL_COLOR_BUFFER_BIT);
   glScalef(1.0/400.0, 1.0/300.0, 1.0/256.0);
   glTranslatef(0.0, 0.0, -2700.0);
   zglRotate3f(cam_rot.x, cam_rot.y, cam_rot.z);

   if(!have_lists)
   {
      have_lists=1;
      CreateDisplayLists();
   }

   glLoadIdentity();
   glScalef(1.0/400.0, 1.0/300.0, 1.0/256.0);
   glTranslatef(0.0, 0.0, -2700.0);
   zglRotate3f(cam_rot.x, cam_rot.y, cam_rot.z);
   glColor4f(0.125, 0.434, 0.86, 1);//  #1f6fdcff

   if(draw_mode)
   {
      DisplayList d; d<=dl1; //draw_mode?dl1:dl0;
      d.draw();
      zglRotate3f(cam_rot.x, cam_rot.y, cam_rot.z);
      glColor4f(1, 0.86, 0.434, 0.5); //#7fffdc6f
      d.draw();
      zglRotate3f(cam_rot.x, cam_rot.y, cam_rot.z);
      glColor4f(0.9336, 0.9336, 1, 0.25 ); //#3fefefff
      d.draw();
      zglRotate3f(cam_rot.x, cam_rot.y, cam_rot.z);
      glColor4f(0.434, 0.86, 1, 0.125); //#1f6fdcff
      d.draw();
      zglRotate3f(cam_rot.x, cam_rot.y, cam_rot.z);
      glColor4f(0.8086, 0.8086, 1, 0.0625); //#0fcfcfff
      d.draw();
   }
   else
   {
      DrawStuff();
      zglRotate3f(cam_rot.x, cam_rot.y, cam_rot.z);
      glColor4f(1, 0.86, 0.434, 0.5); //#7fffdc6f
      DrawStuff();
      zglRotate3f(cam_rot.x, cam_rot.y, cam_rot.z);
      glColor4f(0.9336, 0.9336, 1, 0.25 ); //#3fefefff
      DrawStuff();
      zglRotate3f(cam_rot.x, cam_rot.y, cam_rot.z);
      glColor4f(0.434, 0.86, 1, 0.125); //#1f6fdcff
      DrawStuff();
      zglRotate3f(cam_rot.x, cam_rot.y, cam_rot.z);
      glColor4f(0.8086, 0.8086, 1, 0.0625); //#0fcfcfff
      DrawStuff();
   }

   Debug.Draw();

   if(vsync) Viewport.waitVBlank();
   cam_rot.addScale(cam_rotspd, FPS.precision);
}

function ChangeDrawMode() {
   if ++draw_mode>1 draw_mode=0;
   trace("ChangeDrawMode: drawmode set to "+draw_mode);
}

function onOpen() {
   t.upload();
   have_lists=0;
   Debug.Init();
}

function onKeyboard(Key _k) {
   if(_k.pressed)
   {
      switch(_k.pressed) {
         case VKEY_SPACE: ChangeDrawMode(); break;
         case 'v': vsync=1-vsync; trace "vsync set to "+vsync; break;
         default: Debug.OnKeyboard(_k); break;
      }
   }
}

function main() {
   use callbacks;
   
   t.loadImage("gfx/webd14-64x64x4.png", 64, 64, 4);
   t.setFlags(TEX_16BIT|TEX_MODULATE|TEX_MAGFILTERLINEAR|TEX_MINFILTERLINEAR);
   
   FPS.tickInterval=1000.0/50;
   
   Viewport.openWindow(512, 384);
   
   SDL.eventLoop();
}
