
/*
 *    file: envelope.tks
 *  author: Bastian Spiegel <bs@tkscript.de>
 * changed: 03-Oct-2005
 *
 */

use tksdl;
use tkopengl;

class EnvelopeTest {
   
   define int LINEAR    = 1;
   define int COSINE    = 2;
   define int QUADRATIC = 3;
   define int CUBIC     = 4;
   define int QUINTIC   = 5;

   private FloatArray data;
   private int num_samples;
   private int bg_color32;
   private int fg_color32;
   private int interpolation = LINEAR;

   init(FloatArray _data, int _interpolation, int _fg_color32, int _bg_color32) 
      {
         num_samples = _data.numElements;
         interpolation = _interpolation;
         fg_color32 = _fg_color32;
         bg_color32 = _bg_color32;
         data = _data;
      }

   draw(float _dt) 
      {
         float scy=(480f/5)/2;
         glPushMatrix();
         glTranslatef(0,scy,0);

         zglColorARGB(bg_color32);
         glBegin(GL_QUADS);
         glVertex2f(0,-scy);
         glVertex2f(640,-scy);
         glVertex2f(640,scy);
         glVertex2f(0,scy);
         glEnd();

         glColor3f(1,0,0);
         glBegin(GL_LINES);
         glVertex2f(0,0);
         glVertex2f(640,0);
         glEnd();

         zglColorARGB(fg_color32);
         glBegin(GL_LINE_STRIP);
         float a, x = 0;
         float index = 0, indexadd=num_samples/640f;
         loop 640
         {
            switch(interpolation)
            {
               case LINEAR:
                  a = data.winLinear(index);
                  break;
               case COSINE:
                  a = data.winCosine(index);
                  break;
               case QUADRATIC:
                  a = data.winQuadratic(index);
                  break;
               case CUBIC:
                  a = data.winCubic(index);
                  break;
               case QUINTIC:
                  a = data.winQuintic(index);
                  break;

            }
            glVertex2f(x++, a*scy);
            index += indexadd;
         }
         glVertex2f(640f, a*scy);
         glEnd();

         zglColorARGB(#ffdddddd);
         glPointSize(2f);
         glBegin(GL_POINTS);
         //glBegin(GL_LINE_LOOP);
         x=0f;
         float xa = 640f/num_samples;
         int i=0;
         loop num_samples
         {
            a = data[i];
            glVertex2f(x, a*scy);
            x += xa;
            i++;
         }
         glEnd();

         glPopMatrix();
      }

}

EnvelopeTest et_linear, et_cosine, et_quadratic, et_cubic, et_quintic;
PointerArray et_all<=[et_linear, et_cosine, et_quadratic, et_cubic, et_quintic];

function InitEnvelopes {
   FloatArray data;
   data.alloc(32); 
   int i=0; 
   loop data.maxElements 
   { 
      data[i++] = 0.75f * (rnd(2f)-1f);
   }

   et_linear   .init(data, EnvelopeTest.LINEAR   , #11EE11, #222233);
   et_cosine   .init(data, EnvelopeTest.COSINE   , #11CC11, #22223e);
   et_quadratic.init(data, EnvelopeTest.QUADRATIC, #11EE11, #222233);
   et_cubic    .init(data, EnvelopeTest.CUBIC    , #11CC11, #22223e);
   et_quintic  .init(data, EnvelopeTest.QUINTIC  , #11EE11, #222233);
}

function onKeyboard(Key _k)
{
   switch(_k.pressed)
   {
      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;
   }
}

function onDraw {
   float dt = FPS.precision;
   glClearColor(0.05,0.05,0.10,1);
   glClear(GL_COLOR_BUFFER_BIT);
   zglInit2D(640, 480);
   EnvelopeTest et; foreach et in et_all
   {
      et.draw(dt);
      glTranslatef(0,480/5,0);
   }
}

function onOpen {
}

function main {
   use callbacks;

   InitEnvelopes();

   FPS.tickInterval=1000.0/60;
   FPS.limit=30;

   Viewport.openWindow(640,480);

   SDL.eventLoop();
}
