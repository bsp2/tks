
use tksdl;
use tkopengl;

float frot=0;
int numframesrendered=0;

ZGLShader shader;

float A = 1.0;
int a_uv;
FloatArray fa_uv = [
   0.0f,  1.0f,
   1.0f,  1.0f,
   1.0f,  0.0f,

   0.0f,  0.0f,
   0.0f,  1.0f,
   1.0f,  0.0f,
                    ];

FloatArray a_vtx = {
   -A,  A,
   A,  A,
   A, -A,

   -A, -A,
   -A,  A,
   A, -A,
};

// FloatArray fa_uv = [
//    0.0f,  0.0f,
//    0.0f,  0.0f,
//    0.0f,  0.0f,

//    0.0f,  0.0f,
//    0.0f,  0.0f,
//    0.0f,  0.0f,
//                     ];

String vs_src = "#version 120
attribute vec2 a_uv;
varying vec2 v_uv;
varying vec2 v_xy;

void main(void) {
   v_uv = a_uv;
   gl_Position = ftransform();
   v_xy = gl_Position.xy;
}
";

String fs_src = "#version 120
varying vec2 v_uv;
varying vec2 v_xy;
void main(void) {
   vec3 vacos = acos(vec3(v_xy, 0.5));
   gl_FragColor = vec4(vacos.x/*3.1415..*/ *0.25, vacos.y, vacos.z*0.5, 1);
}
";

function onDraw() {

   float dt = FPS.precision;

   if( !(++numframesrendered&127) )
      trace "FPS.real="+FPS.real;

   zglInitOrtho(1, 1);

   shader.bind();
   
   a_uv = shader.getAttribLocation("a_uv");
   // trace "xxx programId="+shader.programId+" a_uv="+a_uv+" #attribs="+shader.getNumActiveAttributes();
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   glVertexAttribPointer(a_uv, 2, GL_FLOAT, GL_FALSE/*bNormalized*/, 0/*stride*/, fa_uv);
   glEnableVertexAttribArray(a_uv);

   zglVertexPointer2f(a_vtx);
   glEnableClientState(GL_VERTEX_ARRAY);
   glDrawArrays(GL_TRIANGLES, 0, 2*3);
   glDisableClientState(GL_VERTEX_ARRAY);

   // glBegin(GL_TRIANGLES);
   // glVertex2f(-A,  A);
   // glVertex2f(A,  A);
   // glVertex2f(A, -A);

   // glVertex2f(-A, -A);
   // glVertex2f(-A,  A);
   // glVertex2f(A, -A);
   // glEnd();

   // glBegin(GL_QUADS);
   // glVertex2f(-1,-1);
   // glVertex2f( 1,-1);
   // glVertex2f( 1, 1);
   // glVertex2f(-1, 1);
   // glEnd();

   glDisableVertexAttribArray(a_uv);

   shader.unbind();

   frot+=dt;
   wrap frot 0 360;
}

function onKeyboard(Key _k) {
   switch(_k.pressed)
   {
      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;
   }
}

function main() {
   use callbacks;

   FPS.tickInterval=1000.0/60;
   FPS.limit=60;

   Viewport.openWindow(640, 480);

   shader.vertexSource = vs_src;
   shader.fragmentSource = fs_src;

   if(!shader.create())
      die "failed to create shader";


   trace "xxx entering eventloop";

   SDL.eventLoop();
}
