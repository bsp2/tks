// (note) requires 4.1 core profile to be selected in tksdl2/HAL.cpp (set env var TKSDL_GLCORE=1)

putenv("TKSDL_GLERROR=1");
putenv("TKSDL_GLCORE=1");

use tksdl;
use tkopengl;
use tkmath;

int numframesrendered;
float t;


String vert_src = "#version 410 core\n
uniform mat4 u_transform;

in float a_vertex;

void main()
{
   int triIdx = int(gl_VertexID) - 1;

   float aStep = (6.28318530718 / 128.0);
   float a = float(triIdx) * aStep + a_vertex/*0*/;
   vec2 p;
   if(-1 == triIdx)
      p = vec2(0,0);
   else
      p = vec2(sin(a), cos(a));
      
   gl_Position = u_transform * vec4(p, 0, 1);
}
";

String frag_src = "#version 410 core\n

out vec4 fragColor;

void main()
{
   fragColor = vec4(1,1,1,1);
}
";

int vbo_id;
int vao_id;
int program;
int vert;
int frag;
int u_transform;
int a_vertex;

function onDraw() {
   float dt=FPS.precision;
   // trace "xxx dt="+dt;
   glClearColor(0,0,0.2,1);
   glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
   if( !(++numframesrendered&127) )
      trace "FPS.real="+FPS.real;

   glUseProgram(program);
   // glTranslatef(0, sin(t), 0);

   // // zglInitOrtho(-1*2,1*2);
   Matrix4f projMatrix;
   projMatrix.initIdentity();
   {
      float projR = 2 * (float(Viewport.width)/Viewport.height);
      float projT = 2;
      projMatrix.ortho(  -projR/*left*/,    projR/*right*/,
                         -projT/*bottom*/,  projT/*top*/,
                         0.0f/*znear*/,   10.0f/*zfar*/
                         );
   }
   glUniformMatrix4fv(u_transform, 1/*count*/, GL_TRUE/*transpose*/, projMatrix);

   t += dt*0.05;
   wrap t 0 2PI;

   glBindVertexArray(vao_id);

   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 128+2/*count*/);

   glBindVertexArray(0);
   glUseProgram(0);

   // SDL.exitEventLoop();
}

function onMouse(int _x, int _y, int _cbs, int _nbs) {
   //print "x="+_x+" y="+_y+" cbs="+_cbs+" nbs="+_nbs;
}

function onKeyboard(Key _k) {
   switch(_k.pressed)
   {
      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;
   }
}

function InitShader() {
   String log;

   program = glCreateProgram();

   vert = glCreateShader(GL_VERTEX_SHADER);
   zglShaderSource(vert, vert_src);
   glCompileShader(vert);
   glGetShaderInfoLog(vert, log);
   trace "[...] vertex shader log=\""+log+"\".";
   glAttachShader(program, vert);

   frag = glCreateShader(GL_FRAGMENT_SHADER);
   zglShaderSource(frag, frag_src);
   glCompileShader(frag);
   glGetShaderInfoLog(frag, log);
   trace "[...] fragment shader log=\""+log+"\".";
   glAttachShader(program, frag);

   glBindFragDataLocation(program, 0, "fragColor");

   glLinkProgram(program);

   glGetProgramInfoLog(program, log);
   trace "[...] program log=\""+log+"\".";

   glUseProgram(program);

   u_transform = glGetUniformLocation(program, "u_transform");
   if(u_transform < 0)
      die "u_transform="+u_transform;

   a_vertex = glGetAttribLocation(program, "a_vertex");

   if(a_vertex < 0)
      die "a_vertex="+a_vertex;
}

function InitVBO_VAO() {
   vbo_id = zglGenBuffer();
   glBindBuffer(GL_ARRAY_BUFFER, vbo_id);
   zglBufferData(GL_ARRAY_BUFFER, 128+2, null, GL_STATIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER, 0);

   vao_id = zglGenVertexArray();
   glBindVertexArray(vao_id);
   glBindBuffer(GL_ARRAY_BUFFER, vbo_id);
   zglVertexAttribOffset(a_vertex, 1/*size*/, GL_UNSIGNED_BYTE, GL_TRUE/*normalize*/, 0/*stride*/, 0/*offset*/);
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   glBindVertexArray(0);
}

function onOpen() {
   String log;

   zglLoadExtensions();

   InitShader();
   InitVBO_VAO();
}

function main() {
   use callbacks;

   Configuration.debugLevel = 1;

   FPS.tickInterval=16;
   FPS.limit=60;

   SDL.dpiAwareness = true;  // no OS scaling
   Viewport.openWindow(800, 600);
   //Viewport.enableGLError = true;
   Viewport.swapInterval(1);

   trace "[...]                   GL_VENDOR = \"" + glGetString(GL_VENDOR) + "\"";
   trace "[...]                  GL_VERSION = \"" + glGetString(GL_VERSION) + "\"";
   trace "[...] GL_SHADING_LANGUAGE_VERSION = \"" + glGetString(GL_SHADING_LANGUAGE_VERSION) + "\"";

   trace "xxx entering eventloop";
   SDL.eventLoop();
}
