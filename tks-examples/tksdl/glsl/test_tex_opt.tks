
use tksdl;
use tkopengl;

float frot=0;
int numframesrendered=0;

ZGLShader shader;
Texture tex;

float A = 1.0;
int a_uv;
FloatArray fa_uv = [
   0.0f,  1.0f,
   1.0f,  1.0f,
   1.0f,  0.0f,

   0.0f,  0.0f,
   0.0f,  1.0f,
   1.0f,  0.0f,
                    ];

FloatArray a_vtx = {
   -A,  A,
   A,  A,
   A, -A,

   -A, -A,
   -A,  A,
   A, -A,
};

// FloatArray fa_uv = [
//    0.0f,  0.0f,
//    0.0f,  0.0f,
//    0.0f,  0.0f,

//    0.0f,  0.0f,
//    0.0f,  0.0f,
//    0.0f,  0.0f,
//                     ];

String vs_src = "#version 120 \n"
   "attribute vec2 a_uv;\n"
   "varying vec2 v_uv;\n"
   "\n"
   "void main(void) { \n"
   "  v_uv = a_uv;\n"
   "  gl_Position = ftransform(); \n"
   "}"
   ;

String fs_src = "#version 120 \n"
   "varying vec2 v_uv;\n"
   "uniform sampler2D u_tex; \n"

   "const float c1 = 1.0; \n"
   "const float c2 = 1.0; \n"
   "const float c3 = 1.0; \n"
   "const float c4 = 1.0; \n"
   "const float c5 = 1.0; \n"
   "const float c6 = 1.0; \n"
   "const float c7 = 1.0; \n"
   "const float c8 = 1.0; \n"
   "const float c9 = 1.0; \n"
   "const float c10= 1.0; \n"
   "const float c11= 1.0; \n"
   "const float c12= 1.0; \n"
   "const float c13= 1.0; \n"
   "const float c14= 1.0; \n"
   "const float c15= 1.0; \n"
   "const float c16= 1.0; \n"
   "const float c17= 1.0; \n"

   // "const float c1 = 1.0; \n"
   // "const float c2 = 0.0; \n"
   // "const float c3 = 0.0; \n"
   // "const float c4 = 0.0; \n"
   // "const float c5 = 0.0; \n"
   // "const float c6 = 0.0; \n"
   // "const float c7 = 0.0; \n"
   // "const float c8 = 0.0; \n"
   // "const float c9 = 0.0; \n"
   // "const float c10= 0.0; \n"
   // "const float c11= 0.0; \n"
   // "const float c12= 0.0; \n"
   // "const float c13= 0.0; \n"
   // "const float c14= 0.0; \n"
   // "const float c15= 0.0; \n"
   // "const float c16= 0.0; \n"
   // "const float c17= 0.0; \n"

   "void main(void) { \n"
   "  float dx = dFdx(v_uv.x) * 640.0; \n"
   "  float dy = dFdy(v_uv.y) * 480.0; \n"
   "  dx = dx*0.25 + 0.5; \n"
   "  dy = dy*0.25 + 0.5; \n"
   "  gl_FragColor = \n"
   "      texture2D(u_tex, vec2(dx,     dy    )) * c1 \n"
   "    + texture2D(u_tex, vec2(dx,     dy*2.0)) * c2  \n"
   "    + texture2D(u_tex, vec2(dx*2.0, dy    )) * c3  \n"
   "    + texture2D(u_tex, vec2(dx*2.0, dy*2.0)) * c4  \n"
   "    + texture2D(u_tex, vec2(dx,     dy*3.0)) * c5  \n"
   "    + texture2D(u_tex, vec2(dx*3.0, dy    )) * c6  \n"
   "    + texture2D(u_tex, vec2(dx*3.0, dy*3.0)) * c7  \n"
   "    + texture2D(u_tex, vec2(dx,     dy    )) * c8  \n"
   "    + texture2D(u_tex, vec2(dx,     dy*2.0)) * c9  \n"
   "    + texture2D(u_tex, vec2(dx*2.0, dy    )) * c10 \n"
   "    + texture2D(u_tex, vec2(dx*2.0, dy*2.0)) * c11 \n"
   "    + texture2D(u_tex, vec2(dx,     dy*3.0)) * c12 \n"
   "    + texture2D(u_tex, vec2(dx*3.0, dy    )) * c13 \n"
   "    + texture2D(u_tex, vec2(dx*3.0, dy*3.0)) * c14; \n"
   "    + texture2D(u_tex, vec2(dx,     dy*4.1)) * c15 \n"
   "    + texture2D(u_tex, vec2(dx*4.1, dy    )) * c16 \n"
   "    + texture2D(u_tex, vec2(dx*4.1, dy*4.1)) * c17; \n"
   // "  gl_FragColor = vec4(1,1,1,1); \n"
   "}"
   ;

function onDraw() {

   if(0 == numframesrendered)
   {
      tex.alloc(256, 256, 4);
      tex.clear(#ff00ff00);
      tex.bind();
      tex.upload();

      int loc = shader.getUniformLocation("u_tex");
      trace "xxx loc="+loc;
      shader.bind();
      glUniform1i(loc, 0);
   }

   float dt = FPS.precision;

   if( !(++numframesrendered&127) )
      trace "FPS.real="+FPS.real;

   zglInitOrtho(1, 1);

   shader.bind();

   glDisable(GL_DEPTH_TEST);
   
   a_uv = shader.getAttribLocation("a_uv");
   // trace "xxx programId="+shader.programId+" a_uv="+a_uv+" #attribs="+shader.getNumActiveAttributes();
   glBindBuffer(GL_ARRAY_BUFFER, 0);
   glVertexAttribPointer(a_uv, 2, GL_FLOAT, GL_FALSE/*bNormalized*/, 0/*stride*/, fa_uv);
   glEnableVertexAttribArray(a_uv);

   zglVertexPointer2f(a_vtx);
   glEnableClientState(GL_VERTEX_ARRAY);
   loop(100)
      glDrawArrays(GL_TRIANGLES, 0, 2*3);
   glDisableClientState(GL_VERTEX_ARRAY);

   glDisableVertexAttribArray(a_uv);

   shader.unbind();

   frot+=dt;
   wrap frot 0 360;
}

function onKeyboard(Key _k) {
   switch(_k.pressed)
   {
      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;
   }
}

function main() {
   use callbacks;

   FPS.tickInterval=1000.0/60;
   FPS.limit=0;

   Viewport.openWindow(1920/2, 1080/2);
   Viewport.setGeometry(0,0,0,0);

   shader.vertexSource = vs_src;
   shader.fragmentSource = fs_src;
   Viewport.swapInterval(0);

   if(!shader.create())
      die "failed to create shader";

   trace "xxx entering eventloop";

   SDL.eventLoop();
}
