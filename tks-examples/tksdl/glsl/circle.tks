
// (note) does not work on macOS (missing gl_VertexID)

use tksdl;
use tkopengl;

int numframesrendered;
float t;


String vert_src = "
#version 130
void main()
{
   int triIdx = int(gl_VertexID) - 1;

   float aStep = (6.28318530718 / 128.0);
   float a = float(triIdx) * aStep;
   vec2 p;
   if(-1 == triIdx)
      p = vec2(0,0);
   else
      p = vec2(sin(a), cos(a));
      
   gl_Position = vec4(p, 0, 1);
}
";

String frag_src = "
#version 130

out vec4 fragColor;

void main()
{
   fragColor = vec4(1,1,1,1);
}
";

int program;
int vert;
int frag;

function onDraw() {
   float dt=FPS.precision;
   // trace "xxx dt="+dt;
   glClearColor(0,0,0.2,1);
   glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
   if( !(++numframesrendered&127) )
      trace "FPS.real="+FPS.real;

   zglInitOrtho(-1*2,1*2);

   t += dt*0.05;
   wrap t 0 2PI;

   glUseProgram(program);

   // glTranslatef(0, sin(t), 0);

   glDrawArrays(GL_TRIANGLE_FAN, 0/*first*/, 128+2/*count*/);

   glUseProgram(0);
}

function onMouse(int _x, int _y, int _cbs, int _nbs) {
   //print "x="+_x+" y="+_y+" cbs="+_cbs+" nbs="+_nbs;
}

function onKeyboard(Key _k) {
   switch(_k.pressed)
   {
      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;
   }
}

function onOpen() {
   String log;

   zglLoadExtensions();

   program = glCreateProgram();

   vert = glCreateShader(GL_VERTEX_SHADER);
   zglShaderSource(vert, vert_src);
   glCompileShader(vert);
   glGetShaderInfoLog(vert, log);
   trace "[...] vertex shader log=\""+log+"\".";
   glAttachShader(program, vert);

   frag = glCreateShader(GL_FRAGMENT_SHADER);
   zglShaderSource(frag, frag_src);
   glCompileShader(frag);
   glGetShaderInfoLog(frag, log);
   trace "[...] fragment shader log=\""+log+"\".";
   glAttachShader(program, frag);

   glBindFragDataLocation(program, 0, "fragColor");

   glLinkProgram(program);

   glGetProgramInfoLog(program, log);
   trace "[...] program log=\""+log+"\".";

   glUseProgram(program);
}

function main() {
   use callbacks;

   Configuration.debugLevel = 1;

   FPS.tickInterval=16;
   FPS.limit=60;

   SDL.dpiAwareness = true;  // no OS scaling
   Viewport.openWindow(800, 600);
   //Viewport.enableGLError = true;
   Viewport.swapInterval(1);

   trace "[...]                   GL_VENDOR = \"" + glGetString(GL_VENDOR) + "\"";
   trace "[...]                  GL_VERSION = \"" + glGetString(GL_VERSION) + "\"";
   trace "[...] GL_SHADING_LANGUAGE_VERSION = \"" + glGetString(GL_SHADING_LANGUAGE_VERSION) + "\"";

   trace "xxx entering eventloop";
   SDL.eventLoop();
}
