
class D {
}

class C extends TestCase {

   public method newD() {
      return new D;
   }

   public method getInt() {
      return 23;
   }

   public method getFloat() {
      return 1.232424;
   }

   public method getString() {
      return "hello, world.";
   }

   public method testTest() {

      assertqType(D, newD());

      assertqType(42, getInt());

      assertqType(PI, getFloat());

      assertqType(String, getString());

      assertq(true, true);

      //assertMsg(true, false, "ha!");
   }

   public method testIgnored() {
      ignore("not implemented, yet");
   }

}

class C2 extends TestCase {

   public method testAdd() {
      assertInt(1+1, 2, "1+1");

      //assertInt(1+2, 4, "1+2==4..wtf:)");
   }
}

class C3 : TestCase {

   Double d;

   pre() {
      d <= Double.Newf(42);
   }

   post() {
      d <= null;
   }

   testAdd() {
      assertqFloat(d +1, 43);
   }
}

class C4 : TestCase {

   testFailure() {
      assert(true, false, "Fail on purpose.");
   }

   testOOB() {
      // Fail on purpose (array out of bounds)
      IntArray ia;
      ia.alloc(1);
      trace ia[100000];
   }
}


TestRunnerConsole tr;

// Run single testcase
tr.run(C);

// Run multiple testcases
tr.run( [C, C2, C3, C4] );


TestRunnerHTML trhtml;
/// Prints result HTML document to stdout (not recommended)
//trhtml.run([C, C2, C3]);

/// Prints result HTML document to file
trhtml.runHTML("test_results.html", [C, C2, C3, C4]);
trace "[...] wrote HTML file \"test_results.html\".";
