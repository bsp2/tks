// ----
// ---- file   : TestRunnerHTML.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2008-2015 by Bastian Spiegel.
// ----          Distributed under terms of the GNU GENERAL PUBLIC LICENSE (GPL). See
// ----          http://www.gnu.org/licenses/licenses.html#GPL or COPYING for further information.
// ----
// ---- info   : This is part of the "tkunit" package.
// ----
// ---- created: 10Feb2008
// ---- changed: 25Sep2025
// ----
// ----
// ----

module MTestRunnerHTML;


function TextToHTML(String s) {
   compile {
      // Note: the replacement list is far from complete
      s.replace("&",  "&amp;");
      s.replace("<",  "&lt;");
      s.replace(">",  "&gt;");
      s.replace("\"", "&quot;");
      s.replace("\'", "&apos;");
      s.replace("§",  "&sect;");
      s.replace("©",  "&copy;");
      s.replace("®",  "&reg;");
      s.replace("×",  "&times;");
      s.replace("÷",  "&divide;");
      s.replace("|",  "&brbar;");
      s.replace("«",  "&laquo;");
      s.replace("»",  "&raquo;");
      s.replace("µ",  "&micro;");
      s.replace("£",  "&pound;");
      s.replace("~",  "&tilde;");

      s.replace("ä",  "&auml;");
      s.replace("Ä",  "&Auml;");
      s.replace("ö",  "&ouml;");
      s.replace("Ö",  "&Ouml;");
      s.replace("ü",  "&uuml;");
      s.replace("Ü",  "&Uuml;");
      s.replace("ß",  "&szlig;");

      s.replace("é",  "&eacute;");
      s.replace("É",  "&Eacute;");
      s.replace("ê",  "&ecirc;");
      s.replace("Ê",  "&Ecirc;");
      s.replace("è",  "&egrave;");
      s.replace("È",  "&Egrave;");
      // Other
      s.replace("½",  "&frac12;");
      s.replace("¼",  "&frac14;");
      s.replace("¾",  "&frac34;");

      s.replace("Í",  "&Iacute;");
      s.replace("í",  "&iacute;");
      s.replace("Î",  "&Icirc;");
      s.replace("î",  "&icirc;");
      s.replace("Ì",  "&Igrave;");
      s.replace("ì",  "&igrave;");
      s.replace("¡",  "&iexcl;");
      s.replace("¿",  "&iquest;");
      s.replace("Ï",  "&Iuml;");
      s.replace("ï",  "&iuml;");
      s.replace("Ñ",  "&Ntilde;");
      s.replace("ñ",  "&ntilde;");
      s.replace("Ó",  "&Oacute;");
      s.replace("ó",  "&oacute;");
      s.replace("Ô",  "&Ocirc;");
      s.replace("ô",  "&ocirc;");
      s.replace("Ò",  "&Ograve;");
      s.replace("ò",  "&ograve;");
   }
   return s;
}


class TestRunnerHTML extends TestRunner {

   protected Stream ofs;

   protected method write(String _s) {
      ofs.writeString(_s, 0, _s.length-1);
   }

   protected method onBegin() {
      write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">
<html>
<head>
<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\">
<title>tkunit results</title>
<style type=\"text/css\">
TD.test_failed  { font-family:courier; color: #cc0000; font-weight:bold; }
TD.test_ignored { font-family:courier; color: #1111aa; }
TD.test_ok      { font-family:courier; color: #008800; }

TD.test_failed_msg  { color: #991111; }
TD.test_ignored_msg { color: #111177; }

PRE.final_failed { color: #880000; }
PRE.final_ok     { color: #008800; }

</style>
<body>\n");
   }

   protected method onTestCaseBegin(TestCase _testCase) {
      write("<h2>TestCase: "+_testCase.yacMetaClassName()+"</h2>\n<p>\n");
      write("  <table border=0 width=\"60%\"><tr><th align=left width=\"33%\">Test<th align=left width=\"33%\">Result<th align=left width=\"34%\">Message</tr>\n");
   }

   protected method onTestBegin(TestCase _testCase, String _methodName) {
      write("    <tr><td>"+_methodName);
   }

   protected method onTestSucceeded(TestCase _testCase, String _methodName) {
      write("<td class=test_ok>OK<td>&nbsp;</tr>\n");
   }

   protected method onTestFailed(TestCase _testCase, String _methodName, String _msg) {
      write("<td class=test_failed>FAILED<td class=test_failed_msg>"+TextToHTML(_msg)+"</tr>\n");
   }

   protected method onTestIgnored(TestCase _testCase, String _methodName, String _reason) {
      write("<td class=test_ignored>IGNORED<td class=test_ignored_msg>"+TextToHTML(_reason)+"</tr>\n");
   }

   protected method onTestCaseEnd(TestCase _testCase) {
      write("  </table>\n</p>\n<hr>\n");
   }

   protected method onEnd() {
      write("<h1>Unit Test Results</h1>\n");
      write("<p>All <b>"+total_num_tests+"</b> tests finished.</p>\n");
      write("<p><table border=0><tr><th colspan=2 align=left>Detail results</tr>\n");
      write("  <tr><td>Failed&nbsp;:&nbsp;<td class=test_failed><b>"+total_num_failed+"</b></tr>\n");
      write("  <tr><td>Ignored&nbsp;:&nbsp;<td class=test_ignored>"+total_num_ignored+"</tr>\n");
      write("  <tr><td>Succeeded&nbsp;:&nbsp;<td class=test_succeeded>"+total_num_succeeded+" ("+ (int(10000*float(total_num_succeeded)/(total_num_tests-total_num_ignored))/100)+"&#37;)</tr>\n");
      write("</table></p>\n");


      if(total_num_failed)
      {
         write("<p><pre class=final_failed>");
         write("    ##### ##### ##### #     ##### ####        \n");
         write("    #     #   #   #   #     #     #   #       \n");
         write("    ###   #####   #   #     ##### #   #       \n");
         write("    #     #   #   #   #     #     #   #       \n");
         write("    #     #   # ##### ##### ##### ####        \n");
         write("</pre></p>\n");
      }
      else
      {
         write("<p><pre class=final_ok>");
         write("     ###  #   #       #     #                 \n");
         write("    #   # #   #       #     #                 \n");
         write("    #   # ####        #     #                 \n");
         write("    #   # #   #                               \n");
         write("     ###  #   #       #     #                 \n");
         write("</pre></p>\n");
      }

      write("\n</body></html>");
   }

   public method runHTML(String _outputFile, Object _tests) {
      explain "Call this method to print the results to a dedicated file.";

      File f;


      if(!f.openLocal(_outputFile, IOS_OUT))
      {
         trace "[---] TestRunnerHTML::runHTML: failed to open output file \""+_outputFile+"\".";

      }
      else
      {
         ofs <= f;
         TestRunner::run(_tests);
         f.close();
      }
   }

   public method run(Object _tests) {
      explain "Call this method to output the results to stdout.";

      ofs <= StdOutStream;
      TestRunner::run(_tests);
   }

}
