// ----
// ---- file   : TestCase.tks
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2008-2025 by Bastian Spiegel.
// ----          Distributed under terms of the GNU GENERAL PUBLIC LICENSE (GPL). See
// ----          http://www.gnu.org/licenses/licenses.html#GPL or COPYING for further information.
// ----
// ---- info   : This is part of the "tkunit" package.
// ----
// ---- created: 07Feb2008
// ---- changed: 10Feb2008, 11Feb2008, 24Sep2025
// ----
// ----
// ----
// ----

module MTestCase;


define exception TKUnitException : CriticalError;
define exception TKUnitTestIgnoredException : TKUnitException;
define exception TKUnitAssertionFailedError : TKUnitException;
define exception TKUnitBooleanAssertionFailedError : TKUnitAssertionFailedError;
define exception TKUnitIntegerAssertionFailedError : TKUnitAssertionFailedError;
define exception TKUnitFloatAssertionFailedError   : TKUnitAssertionFailedError;
define exception TKUnitObjectAssertionFailedError  : TKUnitAssertionFailedError;
define exception TKUnitTypeAssertionFailedError    : TKUnitAssertionFailedError;


class TestCase {

   public method pre() {
      explain "Set up test fixture. A test fixture is a set of conditions shared by all test*() methods in this test case.";
   }

   public method post() {
      explain "Tear down test fixture.";
   }

   protected method ignoreq() {
      throw TKUnitTestIgnoredException("");
   }

   protected method ignore(String _reason) {
      explain "Should be used whenever a test shall be ignored. Ignored tests still show up in the final report so that they can not be forgotten so easily.";

      throw TKUnitTestIgnoredException(_reason);
   }

   protected method assert(boolean _expect, boolean _have, String _msg) {
      explain "Check whether _have equals _expect. Raise a TKUnitBooleanAssertionFailedError if the check fails.";
      if(_have != _expect)
      {
         throw TKUnitBooleanAssertionFailedError(_msg+"("+(_have?"true":"false")+" != "+(_expect?"true":"false")+")");
      }
   }

   protected method assertq(boolean _expect, boolean _have) {
      explain "Check whether _have equals _expect. Raise a TKUnitBooleanAssertionFailedError if the check fails.";
      assert(_expect, _have, "");
   }

   protected method assertqInt(int _expect, int _have) {
      explain "Check whether _have equals _expect. Raise a TKUnitIntegerAssertionFailedError if the check fails.";

      assertInt(_expect, _have, "");
   }

   protected method assertInt(int _expect, int _have, String _msg) {
      explain "Check whether _have equals _expect. Raise a TKUnitIntegerAssertionFailedError if the check fails.";

      if(_have != _expect)
      {
         throw TKUnitIntegerAssertionFailedError(_msg+"("+_have+" != "+_expect+")");
      }
   }

   protected method assertqFloat(float _expect, float _have) {
      explain "Check whether _have equals _expect. Raise a TKUnitFloatAssertionFailedError if the check fails.";

      assertFloat(_expect, _have, "");
   }

   protected method assertFloat(float _expect, float _have, String _msg) {
      explain "Check whether _have equals _expect. Raise a TKUnitFloatAssertionFailedError if the check fails.";

      if(_have != _expect)
      {
         throw TKUnitFloatAssertionFailedError(_msg+"("+_have+" != "+_expect+")");
      }
   }

   protected method assertqFloatEpsilon(float _expect, float _have, float _epsilon) {
      explain "Check whether _have roughly equals _expect. Raise a TKUnitFloatAssertionFailedError if the check fails.";

      assertFloatEpsilon(_expect, _have, _epsilon, "");
   }

   protected method assertFloatEpsilon(float _expect, float _have, float _epsilon, String _msg) {
      explain "Check whether _have roughly equals _expect. Raise a TKUnitFloatAssertionFailedError if the check fails.";

      if( ((_expect-_epsilon) > _have) || ((_expect+_epsilon) < _have) )
      {
         throw TKUnitFloatAssertionFailedError(_msg+"("+_have+" !=~ "+_expect+")");
      }
   }

   protected method assertqObject(Object _expect, Object _have) {
      assertObject(deref _expect, deref _have, "");
   }

   protected method assertObject(Object _expect, Object _have, String _msg) {
      explain "Check whether _have equals _expect. Raise a TKUnitObjectAssertionFailedError if the check fails.";

      if(_expect != null)
      {
         if(_have != null)
         {
            if(_have != _expect)
            {
               throw TKUnitObjectAssertionFailedError(_msg+"("+#(_have)+" != "+#(_expect)+")");
            }
         }
         else
         {
            throw TKUnitObjectAssertionFailedError(_msg+"have is null");
         }
      }
      else
      {
         if(_have != null)
         {
            throw TKUnitObjectAssertionFailedError(_msg+"have is not null");
         }
      }
   }

   protected method assertqType(var _expect, var _have) {
      explain "Check whether _have and _require are of the same type. Raise a TKUnitTypeAssertionFailedError if the check fails.";

      assertType(_expect, _have, "");
   }

   protected method assertType(var _expect, var _have, String _msg) {
      explain "Check whether _have and _require are of the same type. Raise a TKUnitTypeAssertionFailedError if the check fails.";

      int idHave = typeid(_have);
      int idRequired = typeid(_expect);
      if(idHave == YAC_TYPE_STRING)
      {
         idHave = YAC_TYPE_OBJECT;
      }
      if(idRequired == YAC_TYPE_STRING)
      {
         idRequired = YAC_TYPE_OBJECT;
      }
      if(idHave == idRequired)
      {
         if(idRequired >= YAC_TYPE_OBJECT)
         {
            if(_expect != null)
            {
               if(_have != null)
               {
                  if(_have instanceof _expect)
                  {
                     // Passed !
                     return;
                  }
                  else
                  {
                     throw TKUnitTypeAssertionFailedError(_msg+"_have has different objecttype ("+typename(_have)+" != "+typename(_expect)+")");
                  }
               }
               else
               {
                  throw TKUnitTypeAssertionFailedError(_msg+"_have is null");
               }
            }
            else
            {
               if(_have == null)
               {
                  // Passed !
                  return;
               }
               else
               {
                  throw TKUnitTypeAssertionFailedError(_msg+"_have is not null");
               }
            }
         }
         else
         {
            // Passed !
            return;
         }
      }
      else
      {
         throw TKUnitTypeAssertionFailedError(_msg+"type mismatch (_have="+typename(_have)+" _expect="+typename(_expect)+")");
      }
   }

}
