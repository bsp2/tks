
* DONE rect/ellipse/roundrect: bad tesselation (t-junctions)
   ! 30Aug2025
   ! C:01Sep2025
   + rewrite mesh generation code

* DONE RoundRectFillStrokeSym shader
   ! 02Sep2025
   ! simplified and more precise when rx==ry

* DONE LineStripFlatBevelEdgeAA14_2
   ! 03Sep2025

* TEST use glVertexAttribDivisor for line strips, lines, points
   ! 07Sep2025
   + 14Sep2025
   + -DUSE_VERTEX_ATTRIB_DIVISOR build option
   + -DTKMINNIE_DUPLICATE_POINT_VERTICES
   ! also requires GLSL3 gl_VertexID

* DONE framebuffer size
   ! 07Sep2025
   + sdvg_SetFramebufferSize (sUI _w, sUI _h)
      ! required for bottom/left => top/left conversions

* DONE viewport stack
   ! 06Sep2025
   ! C:09Sep2025
   + (0;0) = top/left
   + reset in sdvg_BeginFrame()

* DONE scissor functions and stack
   ! 06Sep2025
   ! C:10Sep2025
   ! C:17Sep2025
   + (0;0) = top/left
   + reset in sdvg_BeginFrame()
   + sdvg_EnableScissor(), sdvg_DisableScissor()

* ACTV fbo functions
   ! 06Sep2025
   ! C:07Sep2025
   + depth
   + stencil
   + msaa
   + resolve
   + test case (tkminnie/test.tks)
   - rewrite ui::FBO

* DONE global alpha scaling (fade drawables)
   ! 07Sep2025
   + sdvg_SetGlobalAlpha(float _a)
      + set global_a
   + if shader has color uniform(s): pre-multiply fill/stroke a by global_a
   + else add u_alpha and pass global_a to Draw*() function (gouraud*)

* DONE test 44 line strip bevel AA issue
   ! 07Sep2025
   + add v_join

* TODO line strip bevel t-junction issue
   ! 07Sep2025
   - ideally need to draw 4 triangles (instead of 2) per segment (excl. joint) and connect v2

* DONT add ShaderVG_VBO class
   ! 08Sep2025
   - sUI gl_vbo_id
   - sUI size
   ! ==> use glGetBufferParameteriv(GL_ARRAY_BUFFER, GL_BUFFER_SIZE, GLint *ret) to query buffer size

* TEST custom shader functions + OpenGL immediate-like buffer API
   ! 08Sep2025
   ! e.g. for tkui post processing shaders
   + add MAX_CUSTOM_SHADERS
   + add shaders array
      + reset in sdvg_OnOpen()
   + add sdvg_CreateShader(String vs, String fs) utility function
      + must have a_vertex attribute and u_transform uniform
      + derived from Shape class
         ! cache commonly used attribute and uniform locations
   + add sdvg_DestroyShader() utility function
   + add sdvg_BindShader(int _shaderIdx)
   x add sdvg_BindFillShader()
      - and set fill_r/g/b/a uniforms
   + add sdvg_Uniform1f(String name, float f)
   + add sdvg_Uniform2f(String name, float f1, float f2)
   + add sdvg_Uniform3f(String name, float f1, float f2, float f3)
   + add sdvg_Uniform4f(String name, float f1, float f2, float f3, float f4)
   + add sdvg_Uniform1i(String name, int i)
   x add sdvg_UniformMat4 function
      ! probably not needed, auto-set 'u_transform' to mvp_matrix
   x add sdvg_CopyToScratch(Buffer _data)
      - copy io_offset bytes to scratch buffer and return buffer offset
   + add sdvg_BeginTriangles(int _numVertices, int _stride) : boolean
      + flush scratch if numBytes(=numVertices*stride) won't fit
      + reset internal current_scratch_attrib_offset counter
      + returns true if scratch bytes were reserved successfully
      + also: sdvg_BeginTriangleFan(), sdvg_BeginTriangleStrip()
      + when sdvg_MapVBO() was called prior to sdvg_Begin*():
         + use mapped VBO as target for sdvg_Vertex/Attrib/Color/TexCoord() calls (write to buffer)
         + ignore sdvg_*Offset()
         + do not call glDrawArrays() in sdvg_glEnd()
      + when sdvg_BindVBO() was called prior to sdvg_Begin*():
         - ignore sdvg_Vertex/Attrib/Color/TexCoord() calls (do not allow writes to buffer)
         + use sdvg_*Offset() to setup VertexAttribPointer and enable vertex arrays
         + call glDrawArrays() in sdvg_glEnd()
   + add sdvg_VertexOffset2f()
      + set 'a_vertex' and enable
      x must/should be first call after AllocScratch()
      + inc attrib_offset by 8
      + add debug-build option that boundary-checks offset (against stride)
   ? add sdvg_VertexOffset2_14_2()
      - 16bit fixed point
   ? add sdvg_VertexOffset3f()
      - inc attrib_offset by 12
   ? add sdvg_VertexOffset4f()
      - inc attrib_offset by 16
   + add sdvg_AttribOffset1f(String name)
      + set custom attribute pointer and enable
      + inc attrib_offset by 4
   + add sdvg_AttribOffset2f(String name)
      + set custom attribute pointer and enable
      + inc attrib_offset by 8
   + add sdvg_AttribOffset3f(String name)
      + set custom attribute pointer and enable
      + inc attrib_offset by 12
   + add sdvg_AttribOffset4f(String name)
      + set custom attribute pointer and enable
      + inc attrib_offset by 16
   + add sdvg_AttribOffsetARGB(String name)
      + set custom attribute pointer and enable
      + inc attrib_offset by 4  (4ub)
   x add sdvg_MapVBO(int _vboId)
      - becomes target for Attrib*/Vertex2f functions
         - default = scratch_buffer
   x add sdvg_UnmapVBO()
   + add sdvg_Attrib1f(float f)
      - copy float to scratch buffer
      - add debug-build option that boundary-checks write-offset (against numVertices*stride)
   + add sdvg_Vertex2f(float f1, float f2) alias (macro)
      - copy 2 floats to scratch buffer
      ! maps to sdvg_Attrib2f()
   + add sdvg_TexCoord2f(float f1, float f2) alias (macro)
      - copy 2 floats to scratch buffer
      ! maps to sdvg_Attrib2f()
   + add sdvg_Color3f(float r, float g, float b) alias (macro)
      - copy 3 floats to scratch buffer
      ! maps to sdvg_Attrib3f()
   + add sdvg_Color4f(float r, float g, float b, float a) alias (macro)
      - copy 4 floats to scratch buffer
      ! maps to sdvg_Attrib4f()
   + add sdvg_ColorARGB(int c32) alias (macro)
      ! maps to sdvg_AttribARGB32()
      - use sdvg_WriteC32AsRGBA8
   + add sdvg_Attrib2f(float f1, float f2)
      - copy 2 floats to scratch buffer
   + add sdvg_Attrib3f(float f1, float f2, float f3)
      - copy 3 floats to scratch buffer
   + add sdvg_Attrib4f(float f1, float f2, float f3, float f4)
      - copy 4 floats to scratch buffer
   + add sdvg_AttribARGB(int c32)
      - convert to R,G,B,A bytes and write to scratch buffer
   + add sdvg_End()
      - set u_ob_fb_w, u_ob_fb_h uniforms when defined
         ! gl_FragCoord => -1..1
      - set u_fb_w, u_fb_h uniforms when defined
         ! y-flip
      + set u_transform (mandatory)
      + set u_color_fill when defined (fill_r, fill_g, fill_b, fill_a * global_a)
      + set u_color_stroke when defined (stroke_r, stroke_g, stroke_b, stroke_a * global_a)
      + set u_texture_decal_alpha when defined
      + set u_alpha when defined (global_a)
      + set u_debug when defined
      + set u_tex_0 when defined
      + set u_tex_1 when defined
      + call glDrawArrays
      + disable vertex attributes afterwards
   x add sdvg_DrawQuadShader(float _x, float _y, float _w, float _h)
      - write to scratch buffer
   x add sdvg_DrawQuadUVShader(float _x, float _y, float _w, float _h, float ul, float vt, float ur, float vb)
   x add sdvg_DrawQuadUV2Shader(float _x, float _y, float _w, float _h, float ul, float vt, float ur, float vb, float ul2, float vt2, float ur2, float vb2)
   x add sdvg_DrawTrianglesShader(FloatArray _vertices)
      - copy to scratch_buffer
      - 2 floats per vertex
   x add sdvg_DrawTrianglesUVShader(FloatArray _vertices)
      - 4 floats per vertex
      - copy to scratch_buffer
   x add sdvg_DrawTrianglesUV2Shader(FloatArray _vertices)
      - 6 floats per vertex
      - copy to scratch_buffer
   x add sdvg_DrawQuadsShader(FloatArray _vertices)
      - convert to triangles or treat as triangle fan if #vertices=4 and copy to scratch_buffer
      - 2 floats per vertex
   x add sdvg_DrawQuadsUVShader(FloatArray _interleavedVerticesAndUV)
      - convert to triangles or treat as triangle fan if #vertices=4 and copy to scratch_buffer
      - 4 floats per vertex
   x add sdvg_DrawQuadsUV2Shader(FloatArray _interleavedVerticesAndUVs)
      - convert to triangles or treat as triangle fan if #vertices=4 and copy to scratch_buffer
      - 6 floats per vertex
   x add sdvg_DrawPolygonShader(FloatArray _vertices)
      - copy to scratch_buffer
      - 2 floats per vertex
      - draw (convex) GL_TRIANGLE_FAN (== GL_POLYGON)
   x add sdvg_DrawPolygonUVShader(FloatArray _interleavedVerticesAndUV)
      - copy to scratch_buffer
      - 4 floats per vertex
      - draw (convex) GL_TRIANGLE_FAN (== GL_POLYGON)
   x add sdvg_DrawPolygonUV2Shader(FloatArray _interleavedVerticesAndUVs)
      - copy to scratch_buffer
      - 6 floats per vertex
      - draw (convex) GL_TRIANGLE_FAN (== GL_POLYGON)

* TEST multi-texturing
   ! 08Sep2025
   ! C:17Sep2025
   x add sdvg_BindTexture2DEx(sUI _unitIdx, sUI _texId, sBool _bRepeat, sBool _bFilter)
   x add sdvg_UnbindTexture2DEx(sUI _unitIdx)
   x or: add unitIdx by default (w/o Ex suffix)
   ! or:
      + add sdvg_BindMultiTexture2D(sUI _unitIdx, sUI _texId, sBool _bRepeat, sBool _bFilter)
      + add sdvg_UnbindMultiTexture2D(sUI _unitIdx)

* DONE use Dsdvg_errorprintf macro
   ! 08Sep2025

* DONE use Dsdvg_printf, Dsdvg_printfv macros
   ! 08Sep2025

* TODO easings
   ! 08Sep2025
   ! convert from gmodtween.tks

* TEST color functions
   ! 09Sep2025
   ! C:10Sep2025
   + sU32 sdvg_ARGBx (sU8 _a, sU8 _r, sU8 _g, sU8 _b)
   + sU32 sdvg_ARGBf (sF32 _a, sF32 _r, sF32 _g, sF32 _b)
   + sU32 sdvg_MixARGBx (sU32 _x, sU32 _y, sU16 _t)
   + sU32 sdvg_MixARGBf (sU32 _x, sU32 _y, sF32 _t)
   + sU32 sdvg_TintARGB (sU32 _x, sU32 _y)
   + sU32 sdvg_TintARGBAlpha (sU32 _x, sU32 _y, sU8 _a8)
   + sU32 sdvg_HSVAToARGB (sF32 _h, sF32 _s, sF32 _v, sU8 _a8)
   + sU8 sdvg_ARGBToHSVA (sU32 _c32, sF32 *_retH, sF32 *_retS, sF32 *_retV)

* DONE add AA suffix to RectFill, Ellipse, RoundRect, .. classes and setup/draw functions
   ! 10Sep2025
   ! e.g. sdvg_DrawRoundRectFillStrokeVBO32() => sdvg_DrawRoundRectFillStrokeAAVBO32()

* DONE rename LineStrip*EdgeAA* to LineStripAA
   ! 10Sep2025

* DONE add non-AA draw functions, e.g. sdvg_DrawFilledRectangle(), sdvg_DrawRectangle()
   ! 10Sep2025
   ! C:11Sep2025

* DONE add sdvg_DrawLinesFlatAA()
   ! 10Sep2025

* DONE add sdvg_BeginLineStrip(sUI _numPoints)
   ! 10Sep2025
   + emit line vertices into scratch buffer or user vbo
   + redirect sdvg_Vertex2f() to sdvg_BufferAddLinePointFlat14_2()
   + call sdvg_DrawLineStripFlatVBO14_2() in sdvg_End()

* DONE add sdvg_BeginLineStripAA(sUI _numPoints)
   ! 10Sep2025
   + emit line vertices into scratch buffer or user vbo
   + redirect sdvg_Vertex2f() to sdvg_BufferAddLinePointFlat14_2()
   + call sdvg_DrawLineStripFlatAAVBO14_2() in sdvg_End()

* DONE add sdvg_BeginLineStripBevel(sUI _numPoints)
   ! 10Sep2025
   + emit line vertices into scratch buffer or user vbo
   + redirect sdvg_Vertex2f() to sdvg_BufferAddLinePointFlatBevel14_2()
   + call sdvg_DrawLineStripFlatBevelVBO14_2() in sdvg_End()

* DONE add sdvg_BeginLineStripBevelAA(sUI _numPoints)
   ! 10Sep2025
   + emit line vertices into scratch buffer or user vbo
   + redirect sdvg_Vertex2f() to sdvg_BufferAddLinePointFlatBevel14_2()
   + call sdvg_DrawLineStripFlatBevelAAVBO14_2() in sdvg_End()

* DONE add sdvg_BeginLines(sUI _numPoints)
   ! 10Sep2025
   + emit line vertices into scratch buffer or user vbo
   + redirect sdvg_Vertex2f() to sdvg_BufferAddLinePointFlat14_2()
   + call sdvg_DrawLinesFlatVBO14_2() in sdvg_End()

* DONE add sdvg_BeginLinesAA(sUI _numPoints)
   ! 10Sep2025
   + emit line vertices into scratch buffer or user vbo
   + redirect sdvg_Vertex2f() to sdvg_BufferAddLinePointFlat14_2()
   + call sdvg_DrawLinesFlatAAVBO14_2() in sdvg_End()

* DONE make b_vbo mandatory
   ! 10Sep2025
   ! C:17Sep2025
   ! sdvg_BeginLineStrip() etc depend on it
      ! sdvg_DrawLineStrip*() requires vboId argument

* TEST need to scale StrokeWidth() if viewport != fb && projection != fb
   ! 11Sep2025
   ! e.g. Bezier01Edit sets up Ortho(1,1) projection and viewport for widget area
   ! app must call UIRenderer.SetLineWidth() after changing viewport/projection
   + sdvg_SetPixelScaling()
   ! ==> BUT: see below, this should be avoided b/c of non-square-pixel issues

* DONE script: sdvg_SetPixelScaling(), Line*32, BufferAddLine*32
   ! 11Sep2025

* DONE add PointsRect, PointsRoundAA shaders
   ! 12Sep2025
   + center per point
   + tesselate point in vs
   + reuse BufferAddLinePointFlat32(YAC_Buffer *_b, sF32 _x1, sF32 _y1)
      ! duplicate 6 times (two triangles, 6 vertices)
      ! add another 6 'pad' vertices (similar to Lines*())
   + uniform u_points_radius (x==y) (+u_color_fill)

* TEST lineStripAA, linesAA, pointsAA: non-square-pixel projection+viewport issue
   ! 12Sep2025
   - e.g. BezierEdit ortho(1,-1))
      + transform points in app from normalized coordinate system to 2D coordinates
         + Matrix2x3f.initOrtho()

* DONE update UI shaders to ShaderVG
   ! 12Sep2025
   ! 13Sep2025
   + e.g. GraphForm gradient/pattern fill
   + PNGIcon Shader_InvertColor
   + FBO Shader_ColorGrading, Shader_SharpenFilterAndColorGrading
   + Panel: use beginFilledTriangle*Ex() when shader != null  (gradient, patternfill, ..)
      + DrawFilledRectangle
      + DrawRoundedRectangleTriEx
      + rhomb
      + diamond
      + tri

* DONE move UIRenderer shader_fill / shader_tex related functions to ShaderVG
   ! 12Sep2025
   ! duplicate shaders (see shadervg.cpp:fill_shader and TrianglesTexUVFlat32 shape)
   + UIRenderer.BeginFilledTriangles()
   + UIRenderer.BeginFilledTriangleFan()
   + UIRenderer.BeginFilledTriangleStrip()
   + UIRenderer.BeginFilledGouraudTriangles()
   + UIRenderer.BeginFilledGouraudTriangleFan()
   + UIRenderer.BeginFilledGouraudTriangleStrip()
   + UIRenderer.BeginTexturedTriangles()
   + UIRenderer.BeginTexturedTriangleFan()
   + UIRenderer.BeginTexturedTriangleStrip()

* TEST update tksampleedit
   ! 13Sep2025
   + render_sample.cpp
   + render_rms.cpp
      ! uses glPushMatrix()
         + replace by offY
   ! 'gradient' / 'gradient+lines' render modes very slow (compared to just lines or dots)
      + disable gradient when zoomed out

* NOTE mapped VBO writes rather slow (macOS)
   ! 14Sep2025
   ? use mirror buffer and call glBufferSubData() in sdvg_End()
   ? use GL_UNSYCHRONIZED (and fences? or simply wait when buffer size is exceeded ?)
   + add -DSHADERVG_USE_SCRATCHBUFFERSUBDATA
      ! ==> still slow
   ! ==> but: it's still roughly as fast as the immediate mode.
          ! the built-in GL lines are properly faster (but not as 'pretty')

* DONE add TriangleTexAlphaUV variants
   ! 16Sep2025
   ! GLcore profile requires GL_RED instead of GL_ALPHA (must use texture(..).r instead of texture(..).a)
      ! GL_ARB_texture_swizzle extension not available on macOS (4.1 core)
      + TEX_ALPHA string replace
   ! besides, need to handle rgb modulate differently, anyway (texture rgb is 0, cannot multiply this)
   + TrianglesTexUVFlat32Alpha
   + TrianglesTexUVFlatDecal32Alpha
   + TrianglesTexUVGouraudAlpha
   + TrianglesTexUVGouraudDecal32Alpha
   + YF sBool YAC_CALL sdvg_BeginTexturedTrianglesAlpha (sUI _numVertices);
   + YF sBool YAC_CALL sdvg_BeginTexturedTriangleFanAlpha (sUI _numVertices);
   + YF sBool YAC_CALL sdvg_BeginTexturedTriangleStripAlpha (sUI _numVertices);
   + YF sBool YAC_CALL sdvg_BeginTexturedGouraudTrianglesAlpha (sUI _numVertices);
   + YF sBool YAC_CALL sdvg_BeginTexturedGouraudTriangleFanAlpha (sUI _numVertices);
   + YF sBool YAC_CALL sdvg_BeginTexturedGouraudTriangleStripAlpha (sUI _numVertices);
   + remove (temporary) 32bit tex_font in NT_PatternView

* IDEA LinesColorAA
   ! 16Sep2025
   - ARGB color attribute per line
   x e.g. for modcv_scope

* DONE sdvg_EnableScissor(), sdvg_DisableScissor()
   ! 16Sep2025
   ! C:17Sep2025

* TEST texture memory allocation and uploads
   ! 17Sep2025
   ! glTexStorage, glTexImage2D, glTexImage3D, ..
   x sdvg_AllocTexture2D(w,h)
   x sdvg_AllocTexture2DAlpha(w,h)
   x sdvg_UploadTexture2D(w,h,void*data)
   x sdvg_UploadTexture2DAlpha(w,h,void*data)
   x sUI sdvg_CreateTexture2D(sUI format, sUI w, sUI h, const void *data, sUI dataSz, sUI dataStride)
   x sUI sdvg_CreateTexture2D(sUI format, sUI w, sUI h, const void *data, sUI dataSz, sBool bFlipY)
   + sUI sdvg_CreateTexture2D(sUI format, sUI w, sUI h, const void *data, sUI dataSz)
      + SDVG_TEXFMT_ALPHA8
      ? SDVG_TEXFMT_LUM8
         ! would require shader duplication and additional draw functions
         ? maybe leave this to custom shaders (rare use case?)
      o SDVG_TEXFMT_RGB565
      + SDVG_TEXFMT_RGBA8888
      + SDVG_TEXFMT_BGRA8888
      ? SDVG_TEXFMT_BC1
   x sUI sdvg_CreateTexture2DAlpha(sUI format,w,h,void *data,sUI dataSz)
   ? sUI sdvg_CreateTexture2DPhys(sUI format,sUI w, sUI h,const void *dataPhys)
   ? void sdvg_DestroyTexture(sUI _texId);

* TODO compile time switch for glGetError reporting
   ! 17Sep2025

* DONE use macros for tkopeng_shared calls
   ! 18Sep2025
   + Dsdvg_glcall

* TODO dashed lines (line stipple)
   ! 18Sep2025

* TODO (polygon) fill pattern and texture matrix
   ! 18Sep2025

* TODO linear, radial, conical fill gradients
   ! 18Sep2025

* TODO sdvg_BindTexture2D: add mirrored repeat option
   ! 18Sep2025
   - SDVG_REPEAT_UV = 1
   - SDVG_MIRRORED_REPEAT_UV = 2
   - SDVG_REPEAT_U = 3
   - SDVG_MIRRORED_REPEAT_U = 4
   - SDVG_REPEAT_V = 5
   - SDVG_MIRRORED_REPEAT_V = 6

* ACTV bitmap fonts
   ! 18Sep2025
   ! C:19Sep2025
   ! ../../../../tkui/utils/font_convert.tks
      ! out: ../../../../tkui/utils/default_15.cpp
      ! out: ../../../../tkui/utils/default_15.png
   + minnie/tools/font_convert/
   - unicode support
      - codepoint to glyph index table
   + sdvg_InitFont()
   + sdvg_FontOnOpen();
   + sdvg_BindFont()
   + sdvg_DrawString()
   + sdvg_UnbindFont()
   + sdvg_StringExtents();
   + sdvg_StringWidth();
   + sdvg_StringHeight();
   o sdvg_StringGlyphBBox()
   o sdvg_StringIndexAtPixelX()
   o render
      + skip accelerator key escape seq \a
   + render clipped
   + render underlines
   + render underlines clipped
   - render accelerator key underlines
      + accelerator key escape seq \a
   - render accelerator key underlines
   - render accelerator key underlines clipped

* NOTE moved from tks-projects/libs/shadervg/doc/todo.txt
   ! 19Sep2025

* TODO LineStripFlatMiterAA14_2, LineStripFlatMiterAA32
   ! 19Sep2025

* TODO polygon fill mode (hw)
   ! 20Sep2025
