// ----
// ---- file   : main.tks
// ---- author : bsp
// ---- legal  : Distributed under terms of the MIT LICENSE.
// ----
// ---- info   : "minnie" script to binary compiler: main
// ---- note   :
// ----
// ---- created: 27May2024
// ---- changed: 28May2024, 29May2024, 31May2024, 01Jun2024, 02Jun2024, 03Jun2024, 04Jun2024
// ----          05Jun2024, 07Jun2024, 08Jun2024, 09Jun2024, 10Jun2024, 11Jun2024, 02Aug2025
// ----          03Aug2025, 10Aug2025, 11Aug2025, 16Aug2025, 17Aug2025, 30Aug2025, 01Sep2025
// ----
// ----
// ----

module Main;

StringArray tests = [
   "tests/test000_rect.min",
   "tests/test001_lines.min",
   "tests/test002_fill.min",
   "tests/test003_concave.min",
   "tests/test004_fill.min",
   "tests/test005_concave.min",
   "tests/test006_cubic.min",
   "tests/test007_svg.min",
   "tests/test008_ellipse.min",
   "tests/test009_cake.min",
   "tests/test010_d2d.min",
   "tests/test011_cursor.min",
   "tests/test012_stars.min",
   "tests/test013_reverse.min",
   "tests/test014_mask.min",
   "tests/test015_minnie.min",
   "tests/test016_aa.mib",
   "tests/test017_minnie_aa.min",
   "tests/test018_cake_aa.min",
   "tests/test019_3d_aa.min",
   "tests/test020_clip2d.min",    // clip pre-tesselate polyline
   "tests/test021_clip2d.min",    // clip post-tesselate polyline
   "tests/test022_clip2d.min",    // clip thin line
   "tests/test023_clip2d.min",    // clip concave pre-tesselate
   "tests/test024_clip2d.min",    // clip concave post-tesselate
   "tests/test025_clip2d.min",    // clip concave post-tesselate ("minnie")
   "tests/test026_clip2d.min",    // transform2d + clip concave post-tesselate
   "tests/test027_clip2dfb.min",  // clip against fb
   "tests/test028_3d.min",        // fill convex transform3d clip3d
   "tests/test029_3d.min",        // extrude polyline transform3d clip3d
   "tests/test030_minnie_3d.min", // concave transform3d clip3d
   "tests/test031_tf2dclip.min",
   "tests/test032_subpath.min",
   "tests/test033_valentines.min",
   "tests/test034_ducky.min",
   "tests/test035_bicycle.min",
   "tests/test036_crab.min",
   "tests/test037_logo.min",
   "tests/test038_logo_noaa.min",
   "tests/test039_wildboar.min",
   "tests/test040_tiger.min",
   "tests/test041_rabbit.min",
   "tests/test042_oil_lamp.min",
   "tests/test043_elefant.min",
   "tests/test044_linejoin_miterlimit.min",
   "tests/test045_linejoin.min",
   "tests/test046_evenodd.min",
   "tests/test047_shapes.min",
   "tests/test048_nano.min",
   "tests/test049_debug.min",
   "tests/test050_world.min",
   "tests/test051_rect.min",
   "tests/test052_ellipse.min",
   "tests/test053_elephant.min",
   "tests/test054_365845.min",
   "tests/test055_dragon_986054.min",
   "tests/test056_satellite.min",
   "tests/test057_lightbulb.min",
   "tests/test058_motorbike.min",
   "tests/test059_abstractbike.min",
   "tests/test060_watermelon.min",
   "tests/test061_man.min",
   "tests/test062_gorilla.min",
   "tests/test063_quill.min",
   "tests/test064_fairy.min",
   "tests/test065_fish.min",
   "tests/test066_cat.min",
   "tests/test067_reaper.min",
   "tests/test068_pidgeon.min",
   "tests/test069_bluejay.min",
   "tests/test070_fox1.min",
   "tests/test071_fox2.min",
   "tests/test072_fox3.min",
   "tests/test073_cookie.min",
   "tests/test074_roundrect.min",
   "tests/test075_roundrect_svg.min",
   "tests/test076_hamster.min",
   "tests/test077_giraffe.min",
   "tests/test078_butterfly.min",
   "tests/test079_minimal.min",
   "tests/test080_debug_l1.min",
   "tests/test081_debug_l2.min",
   "tests/test082_circle.min",
   "tests/test083_ellipse_fill.min",
   "tests/test084_ellipse_stroke.min",
   "tests/test085_ellipse_fill_stroke.min",
   "tests/test086_rect_fill.min",
   "tests/test087_rect_fill_stroke.min",
   "tests/test088_rect_stroke.min",
   "tests/test089_roundrect_fill_stroke.min",
   "tests/test090_roundrect_fill.min",
   "tests/test091_roundrect_stroke.min",
                     ];

function Usage() {
   trace "Usage: tks app:mib <input.min> <output.mib>";
}

minnie::Minnie minnie;
minnie.init();

minnie.setEnableForceRev( (-1 != Arguments.indexOfObject("REV=y", 0)) ? true :
                          (-1 != Arguments.indexOfObject("REV=n", 0)) ? false :
                          maybe
                          );

minnie.setEnableConvertPHWithoutSubPathsToPT(true);

String pathNameIn;
String pathNameOut;

if(Arguments.numElements >= 1)
   pathNameIn = Arguments[0];

if(Arguments.numElements >= 2)
   pathNameOut = Arguments[1];

if(!pathNameIn.isBlank())
{
   if(pathNameIn.numChars <= 3)
      pathNameIn = tests.get(int(pathNameIn));

   if(minnie.parseFile(pathNameIn))
   {
      if(!pathNameOut.isBlank())
      {
         // trace "xxx out="+pathNameOut;
         if(minnie.emitFile(pathNameOut))
         {
            exit(0);
         }
      }
      else
         Usage();
   }
}
else
   Usage();
exit(10);
