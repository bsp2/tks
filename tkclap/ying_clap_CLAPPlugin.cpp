// ---- ying_clap_CLAPPlugin.cpp: auto generated by YInG - the YAC interface generator (Fri, 27/Sep/2024 20:30:44)

#ifndef YAC_NO_HOST
void  YAC_CALL CLAPPlugin__setEnableDebug(void *, yacmemptr        );
void  YAC_CALL CLAPPlugin__setSampleRate(void *, yacmemptr         );
void  YAC_CALL CLAPPlugin__setBlockSize(void *, yacmemptr          );
void* YAC_CALL CLAPPlugin__getPluginBundle(void *                  );
void  YAC_CALL CLAPPlugin__getId    (void *, YAC_Value *           );
void  YAC_CALL CLAPPlugin__getName  (void *, YAC_Value *           );
void  YAC_CALL CLAPPlugin__getVendor(void *, YAC_Value *           );
sSI   YAC_CALL CLAPPlugin__createPluginInstance(void *             );
void  YAC_CALL CLAPPlugin__destroyPluginInstance(void *            );
sSI   YAC_CALL CLAPPlugin__getNumInputPorts(void *                 );
sSI   YAC_CALL CLAPPlugin__getNumOutputPorts(void *                );
sSI   YAC_CALL CLAPPlugin__getNumInputPortChannels(void *, yacmemptr);
sSI   YAC_CALL CLAPPlugin__getNumOutputPortChannels(void *, yacmemptr);
sSI   YAC_CALL CLAPPlugin__getNumInputChannels(void *              );
sSI   YAC_CALL CLAPPlugin__getNumOutputChannels(void *             );
void  YAC_CALL CLAPPlugin__getInputChannelName(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CLAPPlugin__getOutputChannelName(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL CLAPPlugin__setExtInputChannelBuffer(void *, yacmemptr);
sSI   YAC_CALL CLAPPlugin__setExtOutputChannelBuffer(void *, yacmemptr);
sSI   YAC_CALL CLAPPlugin__getLatency(void *                       );
void  YAC_CALL CLAPPlugin__rescanParamInfos(void *                 );
void  YAC_CALL CLAPPlugin__lockEvents(void *                       );
void  YAC_CALL CLAPPlugin__unlockEvents(void *                     );
sSI   YAC_CALL CLAPPlugin__isInstrument(void *                     );
sSI   YAC_CALL CLAPPlugin__isEffect (void *                        );
sSI   YAC_CALL CLAPPlugin__hasEditor(void *                        );
sSI   YAC_CALL CLAPPlugin__getNumParameters(void *                 );
sSI   YAC_CALL CLAPPlugin__isParameterStepped(void *, yacmemptr    );
sSI   YAC_CALL CLAPPlugin__isParameterPeriodic(void *, yacmemptr   );
sSI   YAC_CALL CLAPPlugin__isParameterHidden(void *, yacmemptr     );
sSI   YAC_CALL CLAPPlugin__isParameterReadOnly(void *, yacmemptr   );
sSI   YAC_CALL CLAPPlugin__isParameterBypass(void *, yacmemptr     );
sSI   YAC_CALL CLAPPlugin__isParameterModulatable(void *, yacmemptr);
void  YAC_CALL CLAPPlugin__setParameter(void *, yacmemptr          );
void  YAC_CALL CLAPPlugin__setParameter_Sync(void *, yacmemptr     );
void  YAC_CALL CLAPPlugin__setParameterMod(void *, yacmemptr       );
void  YAC_CALL CLAPPlugin__setParameterMod_Sync(void *, yacmemptr  );
void  YAC_CALL CLAPPlugin__resetParameterMods(void *               );
void  YAC_CALL CLAPPlugin__resetParameterMods_Sync(void *          );
sF32  YAC_CALL CLAPPlugin__getParameter(void *, yacmemptr          );
sF32  YAC_CALL CLAPPlugin__getParameterMod(void *, yacmemptr       );
void  YAC_CALL CLAPPlugin__getParameterName(void *, yacmemptr, YAC_Value *);
void  YAC_CALL CLAPPlugin__getParameterPath(void *, yacmemptr, YAC_Value *);
sF32  YAC_CALL CLAPPlugin__getParameterMinValue(void *, yacmemptr  );
sF32  YAC_CALL CLAPPlugin__getParameterMaxValue(void *, yacmemptr  );
sF32  YAC_CALL CLAPPlugin__getParameterDefValue(void *, yacmemptr  );
void  YAC_CALL CLAPPlugin__parameterValueToText(void *, yacmemptr, YAC_Value *);
sF32  YAC_CALL CLAPPlugin__parameterTextToValue(void *, yacmemptr  );
sSI   YAC_CALL CLAPPlugin__queueHostMIDIEventsByFlt(void *, yacmemptr);
sSI   YAC_CALL CLAPPlugin__saveState(void *, yacmemptr             );
sSI   YAC_CALL CLAPPlugin__loadState(void *, yacmemptr             );
void  YAC_CALL CLAPPlugin__startProcessing(void *                  );
void  YAC_CALL CLAPPlugin__stopProcessing(void *                   );
void  YAC_CALL CLAPPlugin__reset    (void *                        );
void  YAC_CALL CLAPPlugin__queueCallOnMainThread(void *            );
void  YAC_CALL CLAPPlugin__callOnMainThread(void *                 );
void  YAC_CALL CLAPPlugin__setTransientNativeWindowHandle(void *, yacmemptr);
void  YAC_CALL CLAPPlugin__showEditor(void *                       );
void  YAC_CALL CLAPPlugin__hideEditor(void *                       );
void  YAC_CALL CLAPPlugin__closeEditor(void *                      );
sSI   YAC_CALL CLAPPlugin__isEditorVisible(void *                  );
sSI   YAC_CALL CLAPPlugin__isEditorOpen(void *                     );
void  YAC_CALL CLAPPlugin__setEnableReportTransportPlaying(void *, yacmemptr);
sSI   YAC_CALL CLAPPlugin__getEnableReportTransportPlaying(void *  );
void  YAC_CALL CLAPPlugin__processSilence(void *, yacmemptr        );
void  YAC_CALL CLAPPlugin__process  (void *, yacmemptr             );
#endif // YAC_NO_HOST

// ------------------ YAC class "CLAPPlugin" reflection map (implementation) ------------------
sUI          YAC_VCALL CLAPPlugin::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL CLAPPlugin::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL CLAPPlugin::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL CLAPPlugin::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL CLAPPlugin::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL CLAPPlugin::yacMethodGetNum                  (void) {return 67;}
const char **YAC_VCALL CLAPPlugin::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "setEnableDebug", "setSampleRate", "setBlockSize", "getPluginBundle", "getId", "getName", "getVendor", "createPluginInstance", "destroyPluginInstance", "getNumInputPorts", "getNumOutputPorts", "getNumInputPortChannels", "getNumOutputPortChannels", "getNumInputChannels", "getNumOutputChannels", "getInputChannelName", "getOutputChannelName", "setExtInputChannelBuffer", "setExtOutputChannelBuffer", "getLatency", "rescanParamInfos", "lockEvents", "unlockEvents", "isInstrument", "isEffect", "hasEditor", "getNumParameters", "isParameterStepped", "isParameterPeriodic", "isParameterHidden", "isParameterReadOnly", "isParameterBypass", "isParameterModulatable", "setParameter", "setParameter_Sync", "setParameterMod", "setParameterMod_Sync", "resetParameterMods", "resetParameterMods_Sync", "getParameter", "getParameterMod", "getParameterName", "getParameterPath", "getParameterMinValue", "getParameterMaxValue", "getParameterDefValue", "parameterValueToText", "parameterTextToValue", "queueHostMIDIEventsByFlt", "saveState", "loadState", "startProcessing", "stopProcessing", "reset", "queueCallOnMainThread", "callOnMainThread", "setTransientNativeWindowHandle", "showEditor", "hideEditor", "closeEditor", "isEditorVisible", "isEditorOpen", "setEnableReportTransportPlaying", "getEnableReportTransportPlaying", "processSilence", "process"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL CLAPPlugin::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 8, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL CLAPPlugin::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={2,};static const sUI rt3[]={1,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={1,};static const sUI rt13[]={1,};static const sUI rt14[]={0,};static const sUI rt15[]={0,};static const sUI rt16[]={1,};static const sUI rt17[]={1,};static const sUI rt18[]={1, 3,};static const sUI rt19[]={1, 3,};static const sUI rt20[]={0,};static const sUI rt21[]={0,};static const sUI rt22[]={0,};static const sUI rt23[]={0,};static const sUI rt24[]={0,};static const sUI rt25[]={0,};static const sUI rt26[]={0,};static const sUI rt27[]={0,};static const sUI rt28[]={1,};static const sUI rt29[]={1,};static const sUI rt30[]={1,};static const sUI rt31[]={1,};static const sUI rt32[]={1,};static const sUI rt33[]={1,};static const sUI rt34[]={1, 2,};static const sUI rt35[]={1, 2,};static const sUI rt36[]={1, 2,};static const sUI rt37[]={1, 2,};static const sUI rt38[]={0,};static const sUI rt39[]={0,};static const sUI rt40[]={1,};static const sUI rt41[]={1,};static const sUI rt42[]={1,};static const sUI rt43[]={1,};static const sUI rt44[]={1,};static const sUI rt45[]={1,};static const sUI rt46[]={1,};static const sUI rt47[]={1, 2,};static const sUI rt48[]={1, 3,};static const sUI rt49[]={3, 1, 1, 1, 1, 3, 1, 1,};static const sUI rt50[]={3,};static const sUI rt51[]={3,};static const sUI rt52[]={0,};static const sUI rt53[]={0,};static const sUI rt54[]={0,};static const sUI rt55[]={0,};static const sUI rt56[]={0,};static const sUI rt57[]={3,};static const sUI rt58[]={0,};static const sUI rt59[]={0,};static const sUI rt60[]={0,};static const sUI rt61[]={0,};static const sUI rt62[]={0,};static const sUI rt63[]={1,};static const sUI rt64[]={0,};static const sUI rt65[]={1,};static const sUI rt66[]={1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39, rt40, rt41, rt42, rt43, rt44, rt45, rt46, rt47, rt48, rt49, rt50, rt51, rt52, rt53, rt54, rt55, rt56, rt57, rt58, rt59, rt60, rt61, rt62, rt63, rt64, rt65, rt66}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL CLAPPlugin::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0, (const char*)0,};static const char *rs19[]={(const char*)0, (const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char *rs34[]={(const char*)0, (const char*)0,};static const char *rs35[]={(const char*)0, (const char*)0,};static const char *rs36[]={(const char*)0, (const char*)0,};static const char *rs37[]={(const char*)0, (const char*)0,};static const char *rs38[]={(const char*)0,};static const char *rs39[]={(const char*)0,};static const char *rs40[]={(const char*)0,};static const char *rs41[]={(const char*)0,};static const char *rs42[]={(const char*)0,};static const char *rs43[]={(const char*)0,};static const char *rs44[]={(const char*)0,};static const char *rs45[]={(const char*)0,};static const char *rs46[]={(const char*)0,};static const char *rs47[]={(const char*)0, (const char*)0,};static const char *rs48[]={(const char*)0, "String",};static const char *rs49[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs50[]={(const char*)0,};static const char *rs51[]={(const char*)0,};static const char *rs52[]={(const char*)0,};static const char *rs53[]={(const char*)0,};static const char *rs54[]={(const char*)0,};static const char *rs55[]={(const char*)0,};static const char *rs56[]={(const char*)0,};static const char *rs57[]={"String",};static const char *rs58[]={(const char*)0,};static const char *rs59[]={(const char*)0,};static const char *rs60[]={(const char*)0,};static const char *rs61[]={(const char*)0,};static const char *rs62[]={(const char*)0,};static const char *rs63[]={(const char*)0,};static const char *rs64[]={(const char*)0,};static const char *rs65[]={(const char*)0,};static const char *rs66[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39, rs40, rs41, rs42, rs43, rs44, rs45, rs46, rs47, rs48, rs49, rs50, rs51, rs52, rs53, rs54, rs55, rs56, rs57, rs58, rs59, rs60, rs61, rs62, rs63, rs64, rs65, rs66}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL CLAPPlugin::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 0, 3, 4, 4, 4, 1, 0, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 4, 4, 2, 2, 2, 4, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL CLAPPlugin::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, "CLAPPluginBundle", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL CLAPPlugin::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)CLAPPlugin__setEnableDebug, (void*)CLAPPlugin__setSampleRate, (void*)CLAPPlugin__setBlockSize, (void*)CLAPPlugin__getPluginBundle, (void*)CLAPPlugin__getId, (void*)CLAPPlugin__getName, (void*)CLAPPlugin__getVendor, (void*)CLAPPlugin__createPluginInstance, (void*)CLAPPlugin__destroyPluginInstance, (void*)CLAPPlugin__getNumInputPorts, (void*)CLAPPlugin__getNumOutputPorts, (void*)CLAPPlugin__getNumInputPortChannels, (void*)CLAPPlugin__getNumOutputPortChannels, (void*)CLAPPlugin__getNumInputChannels, (void*)CLAPPlugin__getNumOutputChannels, (void*)CLAPPlugin__getInputChannelName, (void*)CLAPPlugin__getOutputChannelName, (void*)CLAPPlugin__setExtInputChannelBuffer, (void*)CLAPPlugin__setExtOutputChannelBuffer, (void*)CLAPPlugin__getLatency, (void*)CLAPPlugin__rescanParamInfos, (void*)CLAPPlugin__lockEvents, (void*)CLAPPlugin__unlockEvents, (void*)CLAPPlugin__isInstrument, (void*)CLAPPlugin__isEffect, (void*)CLAPPlugin__hasEditor, (void*)CLAPPlugin__getNumParameters, (void*)CLAPPlugin__isParameterStepped, (void*)CLAPPlugin__isParameterPeriodic, (void*)CLAPPlugin__isParameterHidden, (void*)CLAPPlugin__isParameterReadOnly, (void*)CLAPPlugin__isParameterBypass, (void*)CLAPPlugin__isParameterModulatable, (void*)CLAPPlugin__setParameter, (void*)CLAPPlugin__setParameter_Sync, (void*)CLAPPlugin__setParameterMod, (void*)CLAPPlugin__setParameterMod_Sync, (void*)CLAPPlugin__resetParameterMods, (void*)CLAPPlugin__resetParameterMods_Sync, (void*)CLAPPlugin__getParameter, (void*)CLAPPlugin__getParameterMod, (void*)CLAPPlugin__getParameterName, (void*)CLAPPlugin__getParameterPath, (void*)CLAPPlugin__getParameterMinValue, (void*)CLAPPlugin__getParameterMaxValue, (void*)CLAPPlugin__getParameterDefValue, (void*)CLAPPlugin__parameterValueToText, (void*)CLAPPlugin__parameterTextToValue, (void*)CLAPPlugin__queueHostMIDIEventsByFlt, (void*)CLAPPlugin__saveState, (void*)CLAPPlugin__loadState, (void*)CLAPPlugin__startProcessing, (void*)CLAPPlugin__stopProcessing, (void*)CLAPPlugin__reset, (void*)CLAPPlugin__queueCallOnMainThread, (void*)CLAPPlugin__callOnMainThread, (void*)CLAPPlugin__setTransientNativeWindowHandle, (void*)CLAPPlugin__showEditor, (void*)CLAPPlugin__hideEditor, (void*)CLAPPlugin__closeEditor, (void*)CLAPPlugin__isEditorVisible, (void*)CLAPPlugin__isEditorOpen, (void*)CLAPPlugin__setEnableReportTransportPlaying, (void*)CLAPPlugin__getEnableReportTransportPlaying, (void*)CLAPPlugin__processSilence, (void*)CLAPPlugin__process}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL CLAPPlugin::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL CLAPPlugin::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL CLAPPlugin::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL CLAPPlugin::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(CLAPPlugin, "CLAPPlugin");

#ifndef YAC_NO_HOST
void  YAC_CALL CLAPPlugin__setEnableDebug(void *_o, yacmemptr _args          ) {((CLAPPlugin*)_o)->setEnableDebug(_args.mem[0].si);}
void  YAC_CALL CLAPPlugin__setSampleRate(void *_o, yacmemptr _args           ) {((CLAPPlugin*)_o)->setSampleRate(_args.mem[0].f32);}
void  YAC_CALL CLAPPlugin__setBlockSize(void *_o, yacmemptr _args            ) {((CLAPPlugin*)_o)->setBlockSize(_args.mem[0].si);}
void* YAC_CALL CLAPPlugin__getPluginBundle(void *_o                          ) {return (void*)((CLAPPlugin*)_o)->getPluginBundle();}
void  YAC_CALL CLAPPlugin__getId    (void *_o, YAC_Value *_r                 ) {((CLAPPlugin*)_o)->getId(_r);}
void  YAC_CALL CLAPPlugin__getName  (void *_o, YAC_Value *_r                 ) {((CLAPPlugin*)_o)->getName(_r);}
void  YAC_CALL CLAPPlugin__getVendor(void *_o, YAC_Value *_r                 ) {((CLAPPlugin*)_o)->getVendor(_r);}
sSI   YAC_CALL CLAPPlugin__createPluginInstance(void *_o                     ) {return (sSI)((CLAPPlugin*)_o)->createPluginInstance();}
void  YAC_CALL CLAPPlugin__destroyPluginInstance(void *_o                    ) {((CLAPPlugin*)_o)->destroyPluginInstance();}
sSI   YAC_CALL CLAPPlugin__getNumInputPorts(void *_o                         ) {return (sSI)((CLAPPlugin*)_o)->getNumInputPorts();}
sSI   YAC_CALL CLAPPlugin__getNumOutputPorts(void *_o                        ) {return (sSI)((CLAPPlugin*)_o)->getNumOutputPorts();}
sSI   YAC_CALL CLAPPlugin__getNumInputPortChannels(void *_o, yacmemptr _args ) {return (sSI)((CLAPPlugin*)_o)->getNumInputPortChannels(_args.mem[0].si);}
sSI   YAC_CALL CLAPPlugin__getNumOutputPortChannels(void *_o, yacmemptr _args) {return (sSI)((CLAPPlugin*)_o)->getNumOutputPortChannels(_args.mem[0].si);}
sSI   YAC_CALL CLAPPlugin__getNumInputChannels(void *_o                      ) {return (sSI)((CLAPPlugin*)_o)->getNumInputChannels();}
sSI   YAC_CALL CLAPPlugin__getNumOutputChannels(void *_o                     ) {return (sSI)((CLAPPlugin*)_o)->getNumOutputChannels();}
void  YAC_CALL CLAPPlugin__getInputChannelName(void *_o, yacmemptr _args, YAC_Value *_r) {((CLAPPlugin*)_o)->getInputChannelName(_args.mem[0].si, _r);}
void  YAC_CALL CLAPPlugin__getOutputChannelName(void *_o, yacmemptr _args, YAC_Value *_r) {((CLAPPlugin*)_o)->getOutputChannelName(_args.mem[0].si, _r);}
sSI   YAC_CALL CLAPPlugin__setExtInputChannelBuffer(void *_o, yacmemptr _args) {return (sSI)((CLAPPlugin*)_o)->setExtInputChannelBuffer(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL CLAPPlugin__setExtOutputChannelBuffer(void *_o, yacmemptr _args) {return (sSI)((CLAPPlugin*)_o)->setExtOutputChannelBuffer(_args.mem[0].si, _args.mem[1].o);}
sSI   YAC_CALL CLAPPlugin__getLatency(void *_o                               ) {return (sSI)((CLAPPlugin*)_o)->getLatency();}
void  YAC_CALL CLAPPlugin__rescanParamInfos(void *_o                         ) {((CLAPPlugin*)_o)->rescanParamInfos();}
void  YAC_CALL CLAPPlugin__lockEvents(void *_o                               ) {((CLAPPlugin*)_o)->lockEvents();}
void  YAC_CALL CLAPPlugin__unlockEvents(void *_o                             ) {((CLAPPlugin*)_o)->unlockEvents();}
sSI   YAC_CALL CLAPPlugin__isInstrument(void *_o                             ) {return (sSI)((CLAPPlugin*)_o)->isInstrument();}
sSI   YAC_CALL CLAPPlugin__isEffect (void *_o                                ) {return (sSI)((CLAPPlugin*)_o)->isEffect();}
sSI   YAC_CALL CLAPPlugin__hasEditor(void *_o                                ) {return (sSI)((CLAPPlugin*)_o)->hasEditor();}
sSI   YAC_CALL CLAPPlugin__getNumParameters(void *_o                         ) {return (sSI)((CLAPPlugin*)_o)->getNumParameters();}
sSI   YAC_CALL CLAPPlugin__isParameterStepped(void *_o, yacmemptr _args      ) {return (sSI)((CLAPPlugin*)_o)->isParameterStepped(_args.mem[0].si);}
sSI   YAC_CALL CLAPPlugin__isParameterPeriodic(void *_o, yacmemptr _args     ) {return (sSI)((CLAPPlugin*)_o)->isParameterPeriodic(_args.mem[0].si);}
sSI   YAC_CALL CLAPPlugin__isParameterHidden(void *_o, yacmemptr _args       ) {return (sSI)((CLAPPlugin*)_o)->isParameterHidden(_args.mem[0].si);}
sSI   YAC_CALL CLAPPlugin__isParameterReadOnly(void *_o, yacmemptr _args     ) {return (sSI)((CLAPPlugin*)_o)->isParameterReadOnly(_args.mem[0].si);}
sSI   YAC_CALL CLAPPlugin__isParameterBypass(void *_o, yacmemptr _args       ) {return (sSI)((CLAPPlugin*)_o)->isParameterBypass(_args.mem[0].si);}
sSI   YAC_CALL CLAPPlugin__isParameterModulatable(void *_o, yacmemptr _args  ) {return (sSI)((CLAPPlugin*)_o)->isParameterModulatable(_args.mem[0].si);}
void  YAC_CALL CLAPPlugin__setParameter(void *_o, yacmemptr _args            ) {((CLAPPlugin*)_o)->setParameter(_args.mem[0].si, _args.mem[1].f32);}
void  YAC_CALL CLAPPlugin__setParameter_Sync(void *_o, yacmemptr _args       ) {((CLAPPlugin*)_o)->setParameter_Sync(_args.mem[0].si, _args.mem[1].f32);}
void  YAC_CALL CLAPPlugin__setParameterMod(void *_o, yacmemptr _args         ) {((CLAPPlugin*)_o)->setParameterMod(_args.mem[0].si, _args.mem[1].f32);}
void  YAC_CALL CLAPPlugin__setParameterMod_Sync(void *_o, yacmemptr _args    ) {((CLAPPlugin*)_o)->setParameterMod_Sync(_args.mem[0].si, _args.mem[1].f32);}
void  YAC_CALL CLAPPlugin__resetParameterMods(void *_o                       ) {((CLAPPlugin*)_o)->resetParameterMods();}
void  YAC_CALL CLAPPlugin__resetParameterMods_Sync(void *_o                  ) {((CLAPPlugin*)_o)->resetParameterMods_Sync();}
sF32  YAC_CALL CLAPPlugin__getParameter(void *_o, yacmemptr _args            ) {return (sF32)((CLAPPlugin*)_o)->getParameter(_args.mem[0].si);}
sF32  YAC_CALL CLAPPlugin__getParameterMod(void *_o, yacmemptr _args         ) {return (sF32)((CLAPPlugin*)_o)->getParameterMod(_args.mem[0].si);}
void  YAC_CALL CLAPPlugin__getParameterName(void *_o, yacmemptr _args, YAC_Value *_r) {((CLAPPlugin*)_o)->getParameterName(_args.mem[0].si, _r);}
void  YAC_CALL CLAPPlugin__getParameterPath(void *_o, yacmemptr _args, YAC_Value *_r) {((CLAPPlugin*)_o)->getParameterPath(_args.mem[0].si, _r);}
sF32  YAC_CALL CLAPPlugin__getParameterMinValue(void *_o, yacmemptr _args    ) {return (sF32)((CLAPPlugin*)_o)->getParameterMinValue(_args.mem[0].si);}
sF32  YAC_CALL CLAPPlugin__getParameterMaxValue(void *_o, yacmemptr _args    ) {return (sF32)((CLAPPlugin*)_o)->getParameterMaxValue(_args.mem[0].si);}
sF32  YAC_CALL CLAPPlugin__getParameterDefValue(void *_o, yacmemptr _args    ) {return (sF32)((CLAPPlugin*)_o)->getParameterDefValue(_args.mem[0].si);}
void  YAC_CALL CLAPPlugin__parameterValueToText(void *_o, yacmemptr _args, YAC_Value *_r) {((CLAPPlugin*)_o)->parameterValueToText(_args.mem[0].si, _args.mem[1].f32, _r);}
sF32  YAC_CALL CLAPPlugin__parameterTextToValue(void *_o, yacmemptr _args    ) {if(YAC_BCHK(_args.mem[1].o, YAC_CLID_STRING)){ return (sF32)((CLAPPlugin*)_o)->parameterTextToValue(_args.mem[0].si, (YAC_String*)_args.mem[1].o);}return 0.0f;}
sSI   YAC_CALL CLAPPlugin__queueHostMIDIEventsByFlt(void *_o, yacmemptr _args) {return (sSI)((CLAPPlugin*)_o)->queueHostMIDIEventsByFlt(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si, _args.mem[4].si, _args.mem[5].o, _args.mem[6].si, _args.mem[7].si);}
sSI   YAC_CALL CLAPPlugin__saveState(void *_o, yacmemptr _args               ) {return (sSI)((CLAPPlugin*)_o)->saveState(_args.mem[0].o);}
sSI   YAC_CALL CLAPPlugin__loadState(void *_o, yacmemptr _args               ) {return (sSI)((CLAPPlugin*)_o)->loadState(_args.mem[0].o);}
void  YAC_CALL CLAPPlugin__startProcessing(void *_o                          ) {((CLAPPlugin*)_o)->startProcessing();}
void  YAC_CALL CLAPPlugin__stopProcessing(void *_o                           ) {((CLAPPlugin*)_o)->stopProcessing();}
void  YAC_CALL CLAPPlugin__reset    (void *_o                                ) {((CLAPPlugin*)_o)->reset();}
void  YAC_CALL CLAPPlugin__queueCallOnMainThread(void *_o                    ) {((CLAPPlugin*)_o)->queueCallOnMainThread();}
void  YAC_CALL CLAPPlugin__callOnMainThread(void *_o                         ) {((CLAPPlugin*)_o)->callOnMainThread();}
void  YAC_CALL CLAPPlugin__setTransientNativeWindowHandle(void *_o, yacmemptr _args) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ ((CLAPPlugin*)_o)->setTransientNativeWindowHandle((YAC_String*)_args.mem[0].o);}}
void  YAC_CALL CLAPPlugin__showEditor(void *_o                               ) {((CLAPPlugin*)_o)->showEditor();}
void  YAC_CALL CLAPPlugin__hideEditor(void *_o                               ) {((CLAPPlugin*)_o)->hideEditor();}
void  YAC_CALL CLAPPlugin__closeEditor(void *_o                              ) {((CLAPPlugin*)_o)->closeEditor();}
sSI   YAC_CALL CLAPPlugin__isEditorVisible(void *_o                          ) {return (sSI)((CLAPPlugin*)_o)->isEditorVisible();}
sSI   YAC_CALL CLAPPlugin__isEditorOpen(void *_o                             ) {return (sSI)((CLAPPlugin*)_o)->isEditorOpen();}
void  YAC_CALL CLAPPlugin__setEnableReportTransportPlaying(void *_o, yacmemptr _args) {((CLAPPlugin*)_o)->setEnableReportTransportPlaying(_args.mem[0].si);}
sSI   YAC_CALL CLAPPlugin__getEnableReportTransportPlaying(void *_o          ) {return (sSI)((CLAPPlugin*)_o)->getEnableReportTransportPlaying();}
void  YAC_CALL CLAPPlugin__processSilence(void *_o, yacmemptr _args          ) {((CLAPPlugin*)_o)->processSilence(_args.mem[0].si);}
void  YAC_CALL CLAPPlugin__process  (void *_o, yacmemptr _args               ) {((CLAPPlugin*)_o)->process(_args.mem[0].si);}
#endif // YAC_NO_HOST
