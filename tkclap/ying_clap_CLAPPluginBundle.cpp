// ---- ying_clap_CLAPPluginBundle.cpp: auto generated by YInG - the YAC interface generator (Fri, 27/Sep/2024 20:30:44)

#ifndef YAC_NO_HOST
void  YAC_CALL CLAPPluginBundle__setEnableDebug(void *, yacmemptr  );
sSI   YAC_CALL CLAPPluginBundle__openPluginBundle(void *, yacmemptr);
void  YAC_CALL CLAPPluginBundle__closePluginBundle(void *          );
sSI   YAC_CALL CLAPPluginBundle__getNumPlugins(void *              );
void  YAC_CALL CLAPPluginBundle__createPluginByIndex(void *, yacmemptr, YAC_Value *);
sSI   YAC_CALL CLAPPluginBundle__getNumOpenPlugins(void *          );
#endif // YAC_NO_HOST

// ------------------ YAC class "CLAPPluginBundle" reflection map (implementation) ------------------
sUI          YAC_VCALL CLAPPluginBundle::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL CLAPPluginBundle::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL CLAPPluginBundle::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL CLAPPluginBundle::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL CLAPPluginBundle::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL CLAPPluginBundle::yacMethodGetNum                  (void) {return 7;}
const char **YAC_VCALL CLAPPluginBundle::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "setEnableDebug", "openPluginBundle", "closePluginBundle", "getNumPlugins", "createPluginByIndex", "getNumOpenPlugins"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL CLAPPluginBundle::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 1, 0, 0, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL CLAPPluginBundle::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={3,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={1,};static const sUI rt6[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL CLAPPluginBundle::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={"String",};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL CLAPPluginBundle::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 1, 0, 1, 4, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL CLAPPluginBundle::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL CLAPPluginBundle::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)CLAPPluginBundle__setEnableDebug, (void*)CLAPPluginBundle__openPluginBundle, (void*)CLAPPluginBundle__closePluginBundle, (void*)CLAPPluginBundle__getNumPlugins, (void*)CLAPPluginBundle__createPluginByIndex, (void*)CLAPPluginBundle__getNumOpenPlugins}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL CLAPPluginBundle::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL CLAPPluginBundle::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL CLAPPluginBundle::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL CLAPPluginBundle::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(CLAPPluginBundle, "CLAPPluginBundle");

#ifndef YAC_NO_HOST
void  YAC_CALL CLAPPluginBundle__setEnableDebug(void *_o, yacmemptr _args    ) {((CLAPPluginBundle*)_o)->setEnableDebug(_args.mem[0].si);}
sSI   YAC_CALL CLAPPluginBundle__openPluginBundle(void *_o, yacmemptr _args  ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((CLAPPluginBundle*)_o)->openPluginBundle((YAC_String*)_args.mem[0].o);}return 0;}
void  YAC_CALL CLAPPluginBundle__closePluginBundle(void *_o                  ) {((CLAPPluginBundle*)_o)->closePluginBundle();}
sSI   YAC_CALL CLAPPluginBundle__getNumPlugins(void *_o                      ) {return (sSI)((CLAPPluginBundle*)_o)->getNumPlugins();}
void  YAC_CALL CLAPPluginBundle__createPluginByIndex(void *_o, yacmemptr _args, YAC_Value *_r) {((CLAPPluginBundle*)_o)->createPluginByIndex(_args.mem[0].si, _r);}
sSI   YAC_CALL CLAPPluginBundle__getNumOpenPlugins(void *_o                  ) {return (sSI)((CLAPPluginBundle*)_o)->getNumOpenPlugins();}
#endif // YAC_NO_HOST
