// 01Jul2024, 02Jul2024, 04Jul2024, 05Jul2024, 06Jul2024

use tkclap;
use tksdl;

CLAPPluginBundle bundle;
bundle.setEnableDebug(true);

CLAPPlugin *plugin;

boolean b_hexdump = false;

function onKeyboard(Key _k) {
   // (note) macOS: called when key is pressed in plugin editor OR main window
   // (note) win32: called only when main window is focused
   switch(_k.pressed)
   {
      case VKEY_ESCAPE:
         SDL.exitEventLoop();
         break;

      case VKEY_SPACE:
         if(plugin.isEditorVisible())
            plugin.hideEditor();
         else
            plugin.showEditor();
         break;
   }
         
}

String CLAP_PATH =
   (".dylib" == TKS.dllSuffix)/*macOS*/   ? "/Library/Audio/Plug-Ins/CLAP/"
   : (".dll" == TKS.dllSuffix)/*Windows*/ ? "c:/Program Files/Common Files/CLAP/"
   : /*Linux*/ "/usr/lib/clap/"
   ;

// -------- FabFilter --------
//  (note) does NOT support parameter modulation (CLAP_EVENT_PARAM_MOD)
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter Micro.clap"))  // (note) unlicensed
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter One.clap"))  // (note) unlicensed
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter Pro-C 2.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter Pro-DS.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter Pro-G.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter Pro-L 2.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter Pro-MB.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter Pro-Q 3.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter Pro-R 2.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter Saturn 2.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter Timeless 3.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter Twin 3.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"FabFilter Volcano 3.clap"))

// -------- U-He --------
//  (note) properly supports parameter modulation (CLAP_EVENT_PARAM_MOD)
// if(bundle.openPluginBundle(CLAP_PATH+"u-he/Diva.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"u-he/ACE.clap"))  // beta. crashes while loading state.
// if(bundle.openPluginBundle(CLAP_PATH+"u-he/Satin.clap"))

// -------- AudioThing --------
//  (note) does NOT support parameter modulation (CLAP_EVENT_PARAM_MOD)
// if(bundle.openPluginBundle(CLAP_PATH+"AlborosieDubStation.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"DubFilter.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Filterjam.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"FogConvolver2.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"GongAmp.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"OuterSpace2.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Reels.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Springs.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"ThingsTexture.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"WaveBox.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Wires.clap"))

// -------- TAL --------
//  (note) does NOT support parameter modulation (CLAP_EVENT_PARAM_MOD)
// if(bundle.openPluginBundle(CLAP_PATH+"tal/TAL-BassLine-101.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"tal/TAL-Chorus-LX.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"tal/TAL-Filter-2.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"tal/TAL-J-8.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"tal/TAL-Mod.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"tal/TAL-NoiseMaker.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"tal/TAL-Pha.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"tal/TAL-Reverb-4.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"tal/TAL-Sampler.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"tal/TAL-U-NO-LX-V2.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"tal/TAL-Vocoder-2.clap"))

// -------- Surge Team --------
//  (note) properly supports parameter modulation (CLAP_EVENT_PARAM_MOD)
// if(bundle.openPluginBundle(CLAP_PATH+"Surge XT.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Surge XT Effects.clap"))

// -------- FullBucketMusic --------
//  (note) all? plugins: UI menu issues ("fixes" itself ~5sec after opening the plugin UI)
//  (note) does NOT support parameter modulation (CLAP_EVENT_PARAM_MOD)
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/Blooo.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/BucketOne.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/BucketPops.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/FB7999.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/FBDelay.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/FBPhaser.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/FBVC.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/FreqShifter.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/Fury800.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/GrainStrain.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/ModulAir.clap"))     // cannot instantiate modules
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/MonoFury.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/NY.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/Nabla.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/Oxid.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/Qyooo.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/Scrooo.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/SixTraq.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/Stigma.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"fullbucketmusic/Tricent.clap"))

// -------- DISTRHO : Cardinal (VCV Rack) --------
//  (note) must create ~/Documents/Cardinal/ dir manually (main.json, fx.json config files)
//  (note) ext_gui->get_size() returned (1228,666) but main.json windowSize says 1024x768
//  (note) stdout print: [dpf] createNextWindow 2456 1332 2.000000
// if(bundle.openPluginBundle(CLAP_PATH+"Cardinal.clap"))  // window created but not visible
// if(bundle.openPluginBundle(CLAP_PATH+"CardinalFX.clap"))  // window created but not visible
// if(bundle.openPluginBundle(CLAP_PATH+"CardinalSynth.clap"))  // window created but not visible

// -------- Vital --------
// if(bundle.openPluginBundle(CLAP_PATH+"Vital.clap"))  // requested window size is 4x the actual UI size (known issue)

// -------- Audiority --------
//  (note) does NOT support parameter modulation (CLAP_EVENT_PARAM_MOD)
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Big Goat.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Blue Face.clap"))
if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Chief Chorus.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Chorus Ensembler.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Dark Memory.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Deleight.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Distortion 1 mkII.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Doomagorgon.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Dr Drive.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Dr Phase.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Echoes T7E mkII.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Electric Matter.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/GrainSpace.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Green Reaper.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Harmonic Maximizer.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Heavy Pedal mkII.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Klirrton Grindstein.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/L12X Solid State Amplifier.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/LDC2-Compander.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Octaver 82.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/PlexiTape.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Polaris.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/PolyComp.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Pre-X7.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Pyros.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Solidus VS8100.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Space Station UM282.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/Tube Modulator.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/VertiVerb VRS23.clap"))
// if(bundle.openPluginBundle(CLAP_PATH+"Audiority/XenoVerb.clap"))
{
   trace "xxx openPluginBundle ok, #plugins="+bundle.numPlugins;

   plugin <= bundle.createPluginByIndex(0);
   if(null != plugin)
   {
      trace "xxx createPluginByIndex ok.";
      trace "          id=\""+plugin.id+"\"";
      trace "        name=\""+plugin.name+"\"";
      trace "      vendor=\""+plugin.vendor+"\"";

      if(plugin.createPluginInstance())
      {
         trace "xxx createPluginInstance ok";

         if(0)
         {
            int numParams = plugin.numParameters;
            trace "xxx numParams="+numParams;
            Integer paramIdx = 0;
            loop(numParams)
            {
               trace "   param["+paramIdx.printf("%3u")+"] name=\""+plugin.getParameterName(paramIdx)+"\" min="+plugin.getParameterMinValue(paramIdx)+" max="+plugin.getParameterMaxValue(paramIdx)+" def="+plugin.getParameterDefValue(paramIdx);
               paramIdx++;
            }
         }

         // Save/Load plugin state
         if(1)
         {
            DummyStream ds;
            ds.offset = 0;
            plugin.saveState(ds);
            trace "xxx saveState: plugin state size is "+ds.offset;
            Buffer b;
            b.size = ds.offset;
            plugin.saveState(b);
            trace "xxx saveState: wrote "+b.offset+" plugin state bytes";
            if(b_hexdump) b.hexdump(0, b.size);

            // Load plugin state
            b.offset = 0;
            plugin.loadState(b);
            trace "xxx loadState: restored "+b.offset+" plugin state bytes";

            // Debug: save again
            b.offset = 0;
            b.fillZero();
            plugin.saveState(b);
            trace "xxx saveState: DEBUG wrote "+b.offset+" plugin state bytes (again)";
            if(b_hexdump) b.hexdump(0, b.size);
         }

         // Process samples
         if(1)
         {
            FloatArray inBuf1; inBuf1.allocAndFill(512, 0);  // L
            FloatArray inBuf2; inBuf2.allocAndFill(512, 0);  // R
            plugin.setExtInputChannelBuffer(0, inBuf1);
            plugin.setExtInputChannelBuffer(1, inBuf2);

            FloatArray outBuf1; outBuf1.allocAndFill(512, 0);  // L
            FloatArray outBuf2; outBuf2.allocAndFill(512, 0); // R
            plugin.setExtOutputChannelBuffer(0, outBuf1);
            plugin.setExtOutputChannelBuffer(1, outBuf2);

            plugin.startProcessing();
            plugin.process(64);
            plugin.stopProcessing();
         }

         // Show UI
         //   (note) (macOS) the toplevel window will only be visible when this is called from a UI app (=> openWindow())
         if(1)
         {
            use callbacks;
            Viewport.openWindow(640, 480);
            trace "xxx call plugin.showEditor()";
            plugin.setTransientNativeWindowHandle(SDL.getNativeWindowHandle());
            plugin.showEditor();
            trace "xxx call SDL.eventLoop()";
            SDL.eventLoop();
            trace "xxx call plugin.closeEditor()";
            plugin.closeEditor();
         }

         plugin.destroyPluginInstance();
         plugin <= null;
      }
   }

   bundle.closePluginBundle();
}

trace "cu";
