// autogenerated by gen_plugin_alg_int.tks on 5-Aug-2024 17:26:47
//  ($FXN methods, $TBL table entries)

#include "../tksampler.h"

#define Dpro(a,m,i,o) plugin_cache_entries[(a)]->voice->voice_bus_read_offset = render_buf_sample_offset; sample->plugins[(a)].shared->info->info->process_replace(plugin_cache_entries[(a)]->voice, (m), (i), (o), 1u)

void StSampleVoice::process_algint_16837(void) {  // fxn_8447 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16837

void StSampleVoice::process_algint_16838(void) {  // fxn_8448 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16838

void StSampleVoice::process_algint_16839(void) {  // fxn_8449 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16839

void StSampleVoice::process_algint_16840(void) {  // fxn_8450 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16840

void StSampleVoice::process_algint_16841(void) {  // fxn_8451 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16841

void StSampleVoice::process_algint_16842(void) {  // fxn_8452 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16842

void StSampleVoice::process_algint_16843(void) {  // fxn_8453 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16843

void StSampleVoice::process_algint_16844(void) {  // fxn_8454 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16844

void StSampleVoice::process_algint_16845(void) {  // fxn_8455 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16845

void StSampleVoice::process_algint_16846(void) {  // fxn_8456 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16846

void StSampleVoice::process_algint_16847(void) {  // fxn_8457 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16847

void StSampleVoice::process_algint_16848(void) {  // fxn_8458 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16848

void StSampleVoice::process_algint_16849(void) {  // fxn_8459 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16849

void StSampleVoice::process_algint_16850(void) {  // fxn_8460 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16850

void StSampleVoice::process_algint_16851(void) {  // fxn_8461 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16851

void StSampleVoice::process_algint_16852(void) {  // fxn_8462 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16852

void StSampleVoice::process_algint_16853(void) {  // fxn_8463 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16853

void StSampleVoice::process_algint_16854(void) {  // fxn_8464 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16854

void StSampleVoice::process_algint_16855(void) {  // fxn_8465 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16855

void StSampleVoice::process_algint_16856(void) {  // fxn_8466 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16856

void StSampleVoice::process_algint_16857(void) {  // fxn_8467 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16857

void StSampleVoice::process_algint_16858(void) {  // fxn_8468 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16858

void StSampleVoice::process_algint_16859(void) {  // fxn_8469 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16859

void StSampleVoice::process_algint_16860(void) {  // fxn_8470 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16860

void StSampleVoice::process_algint_16861(void) {  // fxn_8471 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16861

void StSampleVoice::process_algint_16862(void) {  // fxn_8472 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16862

void StSampleVoice::process_algint_16863(void) {  // fxn_8473 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16863

void StSampleVoice::process_algint_16864(void) {  // fxn_8474 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16864

void StSampleVoice::process_algint_16865(void) {  // fxn_8475 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16865

void StSampleVoice::process_algint_16866(void) {  // fxn_8476 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16866

void StSampleVoice::process_algint_16867(void) {  // fxn_8477 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16867

void StSampleVoice::process_algint_16868(void) {  // fxn_8478 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16868

void StSampleVoice::process_algint_16869(void) {  // fxn_8479 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16869

void StSampleVoice::process_algint_16870(void) {  // fxn_8480 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16870

void StSampleVoice::process_algint_16871(void) {  // fxn_8481 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16871

void StSampleVoice::process_algint_16872(void) {  // fxn_8482 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16872

void StSampleVoice::process_algint_16873(void) {  // fxn_8483 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16873

void StSampleVoice::process_algint_16874(void) {  // fxn_8484 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16874

void StSampleVoice::process_algint_16875(void) {  // fxn_8485 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16875

void StSampleVoice::process_algint_16876(void) {  // fxn_8486 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16876

void StSampleVoice::process_algint_16877(void) {  // fxn_8487 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16877

void StSampleVoice::process_algint_16878(void) {  // fxn_8488 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16878

void StSampleVoice::process_algint_16879(void) {  // fxn_8489 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16879

void StSampleVoice::process_algint_16880(void) {  // fxn_8490 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16880

void StSampleVoice::process_algint_16881(void) {  // fxn_8491 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16881

void StSampleVoice::process_algint_16882(void) {  // fxn_8492 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16882

void StSampleVoice::process_algint_16883(void) {  // fxn_8493 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16883

void StSampleVoice::process_algint_16884(void) {  // fxn_8494 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16884

void StSampleVoice::process_algint_16885(void) {  // fxn_8495 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16885

void StSampleVoice::process_algint_16886(void) {  // fxn_8496 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16886

void StSampleVoice::process_algint_16887(void) {  // fxn_8497 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16887

void StSampleVoice::process_algint_16888(void) {  // fxn_8498 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16888

void StSampleVoice::process_algint_16889(void) {  // fxn_8499 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16889

void StSampleVoice::process_algint_16890(void) {  // fxn_8500 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16890

void StSampleVoice::process_algint_16891(void) {  // fxn_8501 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16891

void StSampleVoice::process_algint_16892(void) {  // fxn_8502 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16892

void StSampleVoice::process_algint_16893(void) {  // fxn_8503 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16893

void StSampleVoice::process_algint_16894(void) {  // fxn_8504 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16894

void StSampleVoice::process_algint_16895(void) {  // fxn_8505 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16895

void StSampleVoice::process_algint_16896(void) {  // fxn_8506 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16896

void StSampleVoice::process_algint_16897(void) {  // fxn_8507 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16897

void StSampleVoice::process_algint_16898(void) {  // fxn_8508 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16898

void StSampleVoice::process_algint_16899(void) {  // fxn_8509 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16899

void StSampleVoice::process_algint_16900(void) {  // fxn_8510 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16900

void StSampleVoice::process_algint_16901(void) {  // fxn_8511 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16901

void StSampleVoice::process_algint_16902(void) {  // fxn_8512 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16902

void StSampleVoice::process_algint_16903(void) {  // fxn_8513 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16903

void StSampleVoice::process_algint_16904(void) {  // fxn_8514 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16904

void StSampleVoice::process_algint_16905(void) {  // fxn_8515 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16905

void StSampleVoice::process_algint_16906(void) {  // fxn_8516 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16906

void StSampleVoice::process_algint_16907(void) {  // fxn_8517 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16907

void StSampleVoice::process_algint_16908(void) {  // fxn_8518 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16908

void StSampleVoice::process_algint_16909(void) {  // fxn_8519 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16909

void StSampleVoice::process_algint_16910(void) {  // fxn_8520 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16910

void StSampleVoice::process_algint_16911(void) {  // fxn_8521 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16911

void StSampleVoice::process_algint_16912(void) {  // fxn_8522 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16912

void StSampleVoice::process_algint_16913(void) {  // fxn_8523 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16913

void StSampleVoice::process_algint_16914(void) {  // fxn_8524 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16914

void StSampleVoice::process_algint_16915(void) {  // fxn_8525 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16915

void StSampleVoice::process_algint_16916(void) {  // fxn_8526 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16916

void StSampleVoice::process_algint_16917(void) {  // fxn_8527 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16917

void StSampleVoice::process_algint_16918(void) {  // fxn_8528 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16918

void StSampleVoice::process_algint_16919(void) {  // fxn_8529 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16919

void StSampleVoice::process_algint_16920(void) {  // fxn_8530 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16920

void StSampleVoice::process_algint_16921(void) {  // fxn_8531 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16921

void StSampleVoice::process_algint_16922(void) {  // fxn_8532 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16922

void StSampleVoice::process_algint_16923(void) {  // fxn_8533 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16923

void StSampleVoice::process_algint_16924(void) {  // fxn_8534 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16924

void StSampleVoice::process_algint_16925(void) {  // fxn_8535 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16925

void StSampleVoice::process_algint_16926(void) {  // fxn_8536 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16926

void StSampleVoice::process_algint_16927(void) {  // fxn_8537 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=16927

void StSampleVoice::process_algint_16928(void) {  // fxn_8538 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16928

void StSampleVoice::process_algint_16929(void) {  // fxn_8539 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16929

void StSampleVoice::process_algint_16930(void) {  // fxn_8540 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16930

void StSampleVoice::process_algint_16931(void) {  // fxn_8541 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16931

void StSampleVoice::process_algint_16932(void) {  // fxn_8542 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16932

void StSampleVoice::process_algint_16933(void) {  // fxn_8543 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16933

void StSampleVoice::process_algint_16934(void) {  // fxn_8544 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16934

void StSampleVoice::process_algint_16935(void) {  // fxn_8545 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16935

void StSampleVoice::process_algint_16936(void) {  // fxn_8546 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16936

void StSampleVoice::process_algint_16937(void) {  // fxn_8547 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16937

void StSampleVoice::process_algint_16938(void) {  // fxn_8548 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16938

void StSampleVoice::process_algint_16939(void) {  // fxn_8549 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16939

void StSampleVoice::process_algint_16940(void) {  // fxn_8550 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16940

void StSampleVoice::process_algint_16941(void) {  // fxn_8551 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16941

void StSampleVoice::process_algint_16942(void) {  // fxn_8552 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16942

void StSampleVoice::process_algint_16943(void) {  // fxn_8553 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16943

void StSampleVoice::process_algint_16944(void) {  // fxn_8554 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16944

void StSampleVoice::process_algint_16945(void) {  // fxn_8555 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16945

void StSampleVoice::process_algint_16946(void) {  // fxn_8556 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16946

void StSampleVoice::process_algint_16947(void) {  // fxn_8557 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16947

void StSampleVoice::process_algint_16948(void) {  // fxn_8558 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16948

void StSampleVoice::process_algint_16949(void) {  // fxn_8559 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16949

void StSampleVoice::process_algint_16950(void) {  // fxn_8560 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16950

void StSampleVoice::process_algint_16951(void) {  // fxn_8561 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16951

void StSampleVoice::process_algint_16952(void) {  // fxn_8562 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16952

void StSampleVoice::process_algint_16953(void) {  // fxn_8563 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16953

void StSampleVoice::process_algint_16954(void) {  // fxn_8564 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16954

void StSampleVoice::process_algint_16955(void) {  // fxn_8565 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16955

void StSampleVoice::process_algint_16956(void) {  // fxn_8566 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16956

void StSampleVoice::process_algint_16957(void) {  // fxn_8567 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16957

void StSampleVoice::process_algint_16958(void) {  // fxn_8568 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16958

void StSampleVoice::process_algint_16959(void) {  // fxn_8569 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=16959

void StSampleVoice::process_algint_17152(void) {  // fxn_8570 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17152

void StSampleVoice::process_algint_17153(void) {  // fxn_8571 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17153

void StSampleVoice::process_algint_17154(void) {  // fxn_8572 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17154

void StSampleVoice::process_algint_17155(void) {  // fxn_8573 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17155

void StSampleVoice::process_algint_17156(void) {  // fxn_8574 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17156

void StSampleVoice::process_algint_17157(void) {  // fxn_8575 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17157

void StSampleVoice::process_algint_17158(void) {  // fxn_8576 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17158

void StSampleVoice::process_algint_17159(void) {  // fxn_8577 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17159

void StSampleVoice::process_algint_17160(void) {  // fxn_8578 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17160

void StSampleVoice::process_algint_17161(void) {  // fxn_8579 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17161

void StSampleVoice::process_algint_17162(void) {  // fxn_8580 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17162

void StSampleVoice::process_algint_17163(void) {  // fxn_8581 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17163

void StSampleVoice::process_algint_17164(void) {  // fxn_8582 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17164

void StSampleVoice::process_algint_17165(void) {  // fxn_8583 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17165

void StSampleVoice::process_algint_17166(void) {  // fxn_8584 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17166

void StSampleVoice::process_algint_17167(void) {  // fxn_8585 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17167

void StSampleVoice::process_algint_17168(void) {  // fxn_8586 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17168

void StSampleVoice::process_algint_17169(void) {  // fxn_8587 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17169

void StSampleVoice::process_algint_17170(void) {  // fxn_8588 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17170

void StSampleVoice::process_algint_17171(void) {  // fxn_8589 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17171

void StSampleVoice::process_algint_17172(void) {  // fxn_8590 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17172

void StSampleVoice::process_algint_17173(void) {  // fxn_8591 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17173

void StSampleVoice::process_algint_17174(void) {  // fxn_8592 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17174

void StSampleVoice::process_algint_17175(void) {  // fxn_8593 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17175

void StSampleVoice::process_algint_17176(void) {  // fxn_8594 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17176

void StSampleVoice::process_algint_17177(void) {  // fxn_8595 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17177

void StSampleVoice::process_algint_17178(void) {  // fxn_8596 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17178

void StSampleVoice::process_algint_17179(void) {  // fxn_8597 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17179

void StSampleVoice::process_algint_17180(void) {  // fxn_8598 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17180

void StSampleVoice::process_algint_17181(void) {  // fxn_8599 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17181

void StSampleVoice::process_algint_17182(void) {  // fxn_8600 (stereo)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17182

void StSampleVoice::process_algint_17183(void) {  // fxn_8601 (mono)
   // ****** alg=17 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=17183

void StSampleVoice::process_algint_17184(void) {  // fxn_8602 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17184

void StSampleVoice::process_algint_17185(void) {  // fxn_8603 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17185

void StSampleVoice::process_algint_17186(void) {  // fxn_8604 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17186

void StSampleVoice::process_algint_17187(void) {  // fxn_8605 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17187

void StSampleVoice::process_algint_17188(void) {  // fxn_8606 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17188

void StSampleVoice::process_algint_17189(void) {  // fxn_8607 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17189

void StSampleVoice::process_algint_17190(void) {  // fxn_8608 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17190

void StSampleVoice::process_algint_17191(void) {  // fxn_8609 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17191

void StSampleVoice::process_algint_17192(void) {  // fxn_8610 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17192

void StSampleVoice::process_algint_17193(void) {  // fxn_8611 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17193

void StSampleVoice::process_algint_17194(void) {  // fxn_8612 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17194

void StSampleVoice::process_algint_17195(void) {  // fxn_8613 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17195

void StSampleVoice::process_algint_17196(void) {  // fxn_8614 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17196

void StSampleVoice::process_algint_17197(void) {  // fxn_8615 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17197

void StSampleVoice::process_algint_17198(void) {  // fxn_8616 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17198

void StSampleVoice::process_algint_17199(void) {  // fxn_8617 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17199

void StSampleVoice::process_algint_17200(void) {  // fxn_8618 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17200

void StSampleVoice::process_algint_17201(void) {  // fxn_8619 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17201

void StSampleVoice::process_algint_17202(void) {  // fxn_8620 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17202

void StSampleVoice::process_algint_17203(void) {  // fxn_8621 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17203

void StSampleVoice::process_algint_17204(void) {  // fxn_8622 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17204

void StSampleVoice::process_algint_17205(void) {  // fxn_8623 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17205

void StSampleVoice::process_algint_17206(void) {  // fxn_8624 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17206

void StSampleVoice::process_algint_17207(void) {  // fxn_8625 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17207

void StSampleVoice::process_algint_17208(void) {  // fxn_8626 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17208

void StSampleVoice::process_algint_17209(void) {  // fxn_8627 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17209

void StSampleVoice::process_algint_17210(void) {  // fxn_8628 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17210

void StSampleVoice::process_algint_17211(void) {  // fxn_8629 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17211

void StSampleVoice::process_algint_17212(void) {  // fxn_8630 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17212

void StSampleVoice::process_algint_17213(void) {  // fxn_8631 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17213

void StSampleVoice::process_algint_17214(void) {  // fxn_8632 (stereo)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17214

void StSampleVoice::process_algint_17215(void) {  // fxn_8633 (mono)
   // ****** alg=17 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=17215

void StSampleVoice::process_algint_17408(void) {  // fxn_8634 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17408

void StSampleVoice::process_algint_17409(void) {  // fxn_8635 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17409

void StSampleVoice::process_algint_17410(void) {  // fxn_8636 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17410

void StSampleVoice::process_algint_17411(void) {  // fxn_8637 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17411

void StSampleVoice::process_algint_17412(void) {  // fxn_8638 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17412

void StSampleVoice::process_algint_17413(void) {  // fxn_8639 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17413

void StSampleVoice::process_algint_17414(void) {  // fxn_8640 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17414

void StSampleVoice::process_algint_17415(void) {  // fxn_8641 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17415

void StSampleVoice::process_algint_17416(void) {  // fxn_8642 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17416

void StSampleVoice::process_algint_17417(void) {  // fxn_8643 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17417

void StSampleVoice::process_algint_17418(void) {  // fxn_8644 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17418

void StSampleVoice::process_algint_17419(void) {  // fxn_8645 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17419

void StSampleVoice::process_algint_17420(void) {  // fxn_8646 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17420

void StSampleVoice::process_algint_17421(void) {  // fxn_8647 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17421

void StSampleVoice::process_algint_17422(void) {  // fxn_8648 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17422

void StSampleVoice::process_algint_17423(void) {  // fxn_8649 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17423

void StSampleVoice::process_algint_17424(void) {  // fxn_8650 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17424

void StSampleVoice::process_algint_17425(void) {  // fxn_8651 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17425

void StSampleVoice::process_algint_17426(void) {  // fxn_8652 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17426

void StSampleVoice::process_algint_17427(void) {  // fxn_8653 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17427

void StSampleVoice::process_algint_17428(void) {  // fxn_8654 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17428

void StSampleVoice::process_algint_17429(void) {  // fxn_8655 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17429

void StSampleVoice::process_algint_17430(void) {  // fxn_8656 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17430

void StSampleVoice::process_algint_17431(void) {  // fxn_8657 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17431

void StSampleVoice::process_algint_17432(void) {  // fxn_8658 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17432

void StSampleVoice::process_algint_17433(void) {  // fxn_8659 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17433

void StSampleVoice::process_algint_17434(void) {  // fxn_8660 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17434

void StSampleVoice::process_algint_17435(void) {  // fxn_8661 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17435

void StSampleVoice::process_algint_17436(void) {  // fxn_8662 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17436

void StSampleVoice::process_algint_17437(void) {  // fxn_8663 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17437

void StSampleVoice::process_algint_17438(void) {  // fxn_8664 (stereo)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17438

void StSampleVoice::process_algint_17439(void) {  // fxn_8665 (mono)
   // ****** alg=18 fltAll=0 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17439

void StSampleVoice::process_algint_17472(void) {  // fxn_8666 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17472

void StSampleVoice::process_algint_17473(void) {  // fxn_8667 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17473

void StSampleVoice::process_algint_17474(void) {  // fxn_8668 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17474

void StSampleVoice::process_algint_17475(void) {  // fxn_8669 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17475

void StSampleVoice::process_algint_17476(void) {  // fxn_8670 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17476

void StSampleVoice::process_algint_17477(void) {  // fxn_8671 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17477

void StSampleVoice::process_algint_17478(void) {  // fxn_8672 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17478

void StSampleVoice::process_algint_17479(void) {  // fxn_8673 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17479

void StSampleVoice::process_algint_17480(void) {  // fxn_8674 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17480

void StSampleVoice::process_algint_17481(void) {  // fxn_8675 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17481

void StSampleVoice::process_algint_17482(void) {  // fxn_8676 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17482

void StSampleVoice::process_algint_17483(void) {  // fxn_8677 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17483

void StSampleVoice::process_algint_17484(void) {  // fxn_8678 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17484

void StSampleVoice::process_algint_17485(void) {  // fxn_8679 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17485

void StSampleVoice::process_algint_17486(void) {  // fxn_8680 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17486

void StSampleVoice::process_algint_17487(void) {  // fxn_8681 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17487

void StSampleVoice::process_algint_17488(void) {  // fxn_8682 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17488

void StSampleVoice::process_algint_17489(void) {  // fxn_8683 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17489

void StSampleVoice::process_algint_17490(void) {  // fxn_8684 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17490

void StSampleVoice::process_algint_17491(void) {  // fxn_8685 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17491

void StSampleVoice::process_algint_17492(void) {  // fxn_8686 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17492

void StSampleVoice::process_algint_17493(void) {  // fxn_8687 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17493

void StSampleVoice::process_algint_17494(void) {  // fxn_8688 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17494

void StSampleVoice::process_algint_17495(void) {  // fxn_8689 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17495

void StSampleVoice::process_algint_17496(void) {  // fxn_8690 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17496

void StSampleVoice::process_algint_17497(void) {  // fxn_8691 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17497

void StSampleVoice::process_algint_17498(void) {  // fxn_8692 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17498

void StSampleVoice::process_algint_17499(void) {  // fxn_8693 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17499

void StSampleVoice::process_algint_17500(void) {  // fxn_8694 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17500

void StSampleVoice::process_algint_17501(void) {  // fxn_8695 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17501

void StSampleVoice::process_algint_17502(void) {  // fxn_8696 (stereo)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17502

void StSampleVoice::process_algint_17503(void) {  // fxn_8697 (mono)
   // ****** alg=18 fltAll=0 fltPos=2 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17503

void StSampleVoice::process_algint_17504(void) {  // fxn_8698 (stereo)
   // ****** alg=18 fltAll=0 fltPos=3 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17504

void StSampleVoice::process_algint_17505(void) {  // fxn_8699 (mono)
   // ****** alg=18 fltAll=0 fltPos=3 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17505

void StSampleVoice::process_algint_17506(void) {  // fxn_8700 (stereo)
   // ****** alg=18 fltAll=0 fltPos=3 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17506

void StSampleVoice::process_algint_17507(void) {  // fxn_8701 (mono)
   // ****** alg=18 fltAll=0 fltPos=3 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17507

void StSampleVoice::process_algint_17508(void) {  // fxn_8702 (stereo)
   // ****** alg=18 fltAll=0 fltPos=3 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=ta out=tc
   tc[0] = ta[0] * plugin_levels[2][0];
   tc[1] = ta[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=17508

