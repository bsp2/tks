// autogenerated by gen_plugin_alg_int.tks on 5-Aug-2024 17:26:47
//  ($FXN methods, $TBL table entries)

#include "../tksampler.h"

#define Dpro(a,m,i,o) plugin_cache_entries[(a)]->voice->voice_bus_read_offset = render_buf_sample_offset; sample->plugins[(a)].shared->info->info->process_replace(plugin_cache_entries[(a)]->voice, (m), (i), (o), 1u)

void StSampleVoice::process_algint_12773(void) {  // fxn_6399 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12773

void StSampleVoice::process_algint_12774(void) {  // fxn_6400 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12774

void StSampleVoice::process_algint_12775(void) {  // fxn_6401 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12775

void StSampleVoice::process_algint_12776(void) {  // fxn_6402 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12776

void StSampleVoice::process_algint_12777(void) {  // fxn_6403 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12777

void StSampleVoice::process_algint_12778(void) {  // fxn_6404 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12778

void StSampleVoice::process_algint_12779(void) {  // fxn_6405 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12779

void StSampleVoice::process_algint_12780(void) {  // fxn_6406 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12780

void StSampleVoice::process_algint_12781(void) {  // fxn_6407 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12781

void StSampleVoice::process_algint_12782(void) {  // fxn_6408 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12782

void StSampleVoice::process_algint_12783(void) {  // fxn_6409 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12783

void StSampleVoice::process_algint_12784(void) {  // fxn_6410 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12784

void StSampleVoice::process_algint_12785(void) {  // fxn_6411 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12785

void StSampleVoice::process_algint_12786(void) {  // fxn_6412 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12786

void StSampleVoice::process_algint_12787(void) {  // fxn_6413 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12787

void StSampleVoice::process_algint_12788(void) {  // fxn_6414 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12788

void StSampleVoice::process_algint_12789(void) {  // fxn_6415 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12789

void StSampleVoice::process_algint_12790(void) {  // fxn_6416 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12790

void StSampleVoice::process_algint_12791(void) {  // fxn_6417 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12791

void StSampleVoice::process_algint_12792(void) {  // fxn_6418 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12792

void StSampleVoice::process_algint_12793(void) {  // fxn_6419 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12793

void StSampleVoice::process_algint_12794(void) {  // fxn_6420 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12794

void StSampleVoice::process_algint_12795(void) {  // fxn_6421 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12795

void StSampleVoice::process_algint_12796(void) {  // fxn_6422 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12796

void StSampleVoice::process_algint_12797(void) {  // fxn_6423 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12797

void StSampleVoice::process_algint_12798(void) {  // fxn_6424 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12798

void StSampleVoice::process_algint_12799(void) {  // fxn_6425 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12799

void StSampleVoice::process_algint_12800(void) {  // fxn_6426 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12800

void StSampleVoice::process_algint_12801(void) {  // fxn_6427 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12801

void StSampleVoice::process_algint_12802(void) {  // fxn_6428 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12802

void StSampleVoice::process_algint_12803(void) {  // fxn_6429 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12803

void StSampleVoice::process_algint_12804(void) {  // fxn_6430 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12804

void StSampleVoice::process_algint_12805(void) {  // fxn_6431 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12805

void StSampleVoice::process_algint_12806(void) {  // fxn_6432 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12806

void StSampleVoice::process_algint_12807(void) {  // fxn_6433 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12807

void StSampleVoice::process_algint_12808(void) {  // fxn_6434 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12808

void StSampleVoice::process_algint_12809(void) {  // fxn_6435 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12809

void StSampleVoice::process_algint_12810(void) {  // fxn_6436 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12810

void StSampleVoice::process_algint_12811(void) {  // fxn_6437 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12811

void StSampleVoice::process_algint_12812(void) {  // fxn_6438 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12812

void StSampleVoice::process_algint_12813(void) {  // fxn_6439 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12813

void StSampleVoice::process_algint_12814(void) {  // fxn_6440 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12814

void StSampleVoice::process_algint_12815(void) {  // fxn_6441 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12815

void StSampleVoice::process_algint_12816(void) {  // fxn_6442 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12816

void StSampleVoice::process_algint_12817(void) {  // fxn_6443 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12817

void StSampleVoice::process_algint_12818(void) {  // fxn_6444 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12818

void StSampleVoice::process_algint_12819(void) {  // fxn_6445 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12819

void StSampleVoice::process_algint_12820(void) {  // fxn_6446 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12820

void StSampleVoice::process_algint_12821(void) {  // fxn_6447 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12821

void StSampleVoice::process_algint_12822(void) {  // fxn_6448 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12822

void StSampleVoice::process_algint_12823(void) {  // fxn_6449 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12823

void StSampleVoice::process_algint_12824(void) {  // fxn_6450 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12824

void StSampleVoice::process_algint_12825(void) {  // fxn_6451 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12825

void StSampleVoice::process_algint_12826(void) {  // fxn_6452 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12826

void StSampleVoice::process_algint_12827(void) {  // fxn_6453 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12827

void StSampleVoice::process_algint_12828(void) {  // fxn_6454 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12828

void StSampleVoice::process_algint_12829(void) {  // fxn_6455 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12829

void StSampleVoice::process_algint_12830(void) {  // fxn_6456 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12830

void StSampleVoice::process_algint_12831(void) {  // fxn_6457 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12831

void StSampleVoice::process_algint_12832(void) {  // fxn_6458 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12832

void StSampleVoice::process_algint_12833(void) {  // fxn_6459 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12833

void StSampleVoice::process_algint_12834(void) {  // fxn_6460 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12834

void StSampleVoice::process_algint_12835(void) {  // fxn_6461 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12835

void StSampleVoice::process_algint_12836(void) {  // fxn_6462 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12836

void StSampleVoice::process_algint_12837(void) {  // fxn_6463 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12837

void StSampleVoice::process_algint_12838(void) {  // fxn_6464 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12838

void StSampleVoice::process_algint_12839(void) {  // fxn_6465 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12839

void StSampleVoice::process_algint_12840(void) {  // fxn_6466 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12840

void StSampleVoice::process_algint_12841(void) {  // fxn_6467 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12841

void StSampleVoice::process_algint_12842(void) {  // fxn_6468 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12842

void StSampleVoice::process_algint_12843(void) {  // fxn_6469 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12843

void StSampleVoice::process_algint_12844(void) {  // fxn_6470 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12844

void StSampleVoice::process_algint_12845(void) {  // fxn_6471 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12845

void StSampleVoice::process_algint_12846(void) {  // fxn_6472 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12846

void StSampleVoice::process_algint_12847(void) {  // fxn_6473 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12847

void StSampleVoice::process_algint_12848(void) {  // fxn_6474 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12848

void StSampleVoice::process_algint_12849(void) {  // fxn_6475 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12849

void StSampleVoice::process_algint_12850(void) {  // fxn_6476 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12850

void StSampleVoice::process_algint_12851(void) {  // fxn_6477 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12851

void StSampleVoice::process_algint_12852(void) {  // fxn_6478 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12852

void StSampleVoice::process_algint_12853(void) {  // fxn_6479 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12853

void StSampleVoice::process_algint_12854(void) {  // fxn_6480 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12854

void StSampleVoice::process_algint_12855(void) {  // fxn_6481 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12855

void StSampleVoice::process_algint_12856(void) {  // fxn_6482 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12856

void StSampleVoice::process_algint_12857(void) {  // fxn_6483 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12857

void StSampleVoice::process_algint_12858(void) {  // fxn_6484 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12858

void StSampleVoice::process_algint_12859(void) {  // fxn_6485 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12859

void StSampleVoice::process_algint_12860(void) {  // fxn_6486 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12860

void StSampleVoice::process_algint_12861(void) {  // fxn_6487 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12861

void StSampleVoice::process_algint_12862(void) {  // fxn_6488 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12862

void StSampleVoice::process_algint_12863(void) {  // fxn_6489 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12863

void StSampleVoice::process_algint_13056(void) {  // fxn_6490 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13056

void StSampleVoice::process_algint_13057(void) {  // fxn_6491 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13057

void StSampleVoice::process_algint_13058(void) {  // fxn_6492 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13058

void StSampleVoice::process_algint_13059(void) {  // fxn_6493 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13059

void StSampleVoice::process_algint_13060(void) {  // fxn_6494 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13060

void StSampleVoice::process_algint_13061(void) {  // fxn_6495 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13061

void StSampleVoice::process_algint_13062(void) {  // fxn_6496 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13062

void StSampleVoice::process_algint_13063(void) {  // fxn_6497 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13063

void StSampleVoice::process_algint_13064(void) {  // fxn_6498 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13064

void StSampleVoice::process_algint_13065(void) {  // fxn_6499 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13065

void StSampleVoice::process_algint_13066(void) {  // fxn_6500 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13066

void StSampleVoice::process_algint_13067(void) {  // fxn_6501 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13067

void StSampleVoice::process_algint_13068(void) {  // fxn_6502 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13068

void StSampleVoice::process_algint_13069(void) {  // fxn_6503 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13069

void StSampleVoice::process_algint_13070(void) {  // fxn_6504 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13070

void StSampleVoice::process_algint_13071(void) {  // fxn_6505 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13071

void StSampleVoice::process_algint_13072(void) {  // fxn_6506 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13072

void StSampleVoice::process_algint_13073(void) {  // fxn_6507 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13073

void StSampleVoice::process_algint_13074(void) {  // fxn_6508 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13074

void StSampleVoice::process_algint_13075(void) {  // fxn_6509 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13075

void StSampleVoice::process_algint_13076(void) {  // fxn_6510 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13076

void StSampleVoice::process_algint_13077(void) {  // fxn_6511 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13077

void StSampleVoice::process_algint_13078(void) {  // fxn_6512 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13078

void StSampleVoice::process_algint_13079(void) {  // fxn_6513 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13079

void StSampleVoice::process_algint_13080(void) {  // fxn_6514 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13080

void StSampleVoice::process_algint_13081(void) {  // fxn_6515 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13081

void StSampleVoice::process_algint_13082(void) {  // fxn_6516 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13082

void StSampleVoice::process_algint_13083(void) {  // fxn_6517 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13083

void StSampleVoice::process_algint_13084(void) {  // fxn_6518 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13084

void StSampleVoice::process_algint_13085(void) {  // fxn_6519 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13085

void StSampleVoice::process_algint_13086(void) {  // fxn_6520 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13086

void StSampleVoice::process_algint_13087(void) {  // fxn_6521 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=13087

void StSampleVoice::process_algint_13088(void) {  // fxn_6522 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13088

void StSampleVoice::process_algint_13089(void) {  // fxn_6523 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13089

void StSampleVoice::process_algint_13090(void) {  // fxn_6524 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13090

void StSampleVoice::process_algint_13091(void) {  // fxn_6525 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13091

void StSampleVoice::process_algint_13092(void) {  // fxn_6526 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13092

void StSampleVoice::process_algint_13093(void) {  // fxn_6527 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13093

void StSampleVoice::process_algint_13094(void) {  // fxn_6528 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13094

void StSampleVoice::process_algint_13095(void) {  // fxn_6529 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13095

void StSampleVoice::process_algint_13096(void) {  // fxn_6530 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13096

void StSampleVoice::process_algint_13097(void) {  // fxn_6531 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13097

void StSampleVoice::process_algint_13098(void) {  // fxn_6532 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13098

void StSampleVoice::process_algint_13099(void) {  // fxn_6533 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13099

void StSampleVoice::process_algint_13100(void) {  // fxn_6534 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13100

void StSampleVoice::process_algint_13101(void) {  // fxn_6535 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13101

void StSampleVoice::process_algint_13102(void) {  // fxn_6536 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13102

void StSampleVoice::process_algint_13103(void) {  // fxn_6537 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13103

void StSampleVoice::process_algint_13104(void) {  // fxn_6538 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13104

void StSampleVoice::process_algint_13105(void) {  // fxn_6539 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13105

void StSampleVoice::process_algint_13106(void) {  // fxn_6540 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13106

void StSampleVoice::process_algint_13107(void) {  // fxn_6541 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13107

void StSampleVoice::process_algint_13108(void) {  // fxn_6542 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13108

void StSampleVoice::process_algint_13109(void) {  // fxn_6543 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13109

void StSampleVoice::process_algint_13110(void) {  // fxn_6544 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13110

void StSampleVoice::process_algint_13111(void) {  // fxn_6545 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13111

void StSampleVoice::process_algint_13112(void) {  // fxn_6546 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13112

void StSampleVoice::process_algint_13113(void) {  // fxn_6547 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13113

void StSampleVoice::process_algint_13114(void) {  // fxn_6548 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13114

void StSampleVoice::process_algint_13115(void) {  // fxn_6549 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13115

void StSampleVoice::process_algint_13116(void) {  // fxn_6550 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13116

void StSampleVoice::process_algint_13117(void) {  // fxn_6551 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13117

void StSampleVoice::process_algint_13118(void) {  // fxn_6552 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13118

void StSampleVoice::process_algint_13119(void) {  // fxn_6553 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=13119

void StSampleVoice::process_algint_13312(void) {  // fxn_6554 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13312

void StSampleVoice::process_algint_13313(void) {  // fxn_6555 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13313

void StSampleVoice::process_algint_13314(void) {  // fxn_6556 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13314

void StSampleVoice::process_algint_13315(void) {  // fxn_6557 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13315

void StSampleVoice::process_algint_13316(void) {  // fxn_6558 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13316

void StSampleVoice::process_algint_13317(void) {  // fxn_6559 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13317

void StSampleVoice::process_algint_13318(void) {  // fxn_6560 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13318

void StSampleVoice::process_algint_13319(void) {  // fxn_6561 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13319

void StSampleVoice::process_algint_13320(void) {  // fxn_6562 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13320

void StSampleVoice::process_algint_13321(void) {  // fxn_6563 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13321

void StSampleVoice::process_algint_13322(void) {  // fxn_6564 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13322

void StSampleVoice::process_algint_13323(void) {  // fxn_6565 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13323

void StSampleVoice::process_algint_13324(void) {  // fxn_6566 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13324

void StSampleVoice::process_algint_13325(void) {  // fxn_6567 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13325

void StSampleVoice::process_algint_13326(void) {  // fxn_6568 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13326

void StSampleVoice::process_algint_13327(void) {  // fxn_6569 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13327

void StSampleVoice::process_algint_13328(void) {  // fxn_6570 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13328

void StSampleVoice::process_algint_13329(void) {  // fxn_6571 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13329

void StSampleVoice::process_algint_13330(void) {  // fxn_6572 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13330

void StSampleVoice::process_algint_13331(void) {  // fxn_6573 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13331

void StSampleVoice::process_algint_13332(void) {  // fxn_6574 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13332

void StSampleVoice::process_algint_13333(void) {  // fxn_6575 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13333

void StSampleVoice::process_algint_13334(void) {  // fxn_6576 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13334

void StSampleVoice::process_algint_13335(void) {  // fxn_6577 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13335

void StSampleVoice::process_algint_13336(void) {  // fxn_6578 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13336

void StSampleVoice::process_algint_13337(void) {  // fxn_6579 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13337

void StSampleVoice::process_algint_13338(void) {  // fxn_6580 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13338

void StSampleVoice::process_algint_13339(void) {  // fxn_6581 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13339

void StSampleVoice::process_algint_13340(void) {  // fxn_6582 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13340

void StSampleVoice::process_algint_13341(void) {  // fxn_6583 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13341

void StSampleVoice::process_algint_13342(void) {  // fxn_6584 (stereo)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13342

void StSampleVoice::process_algint_13343(void) {  // fxn_6585 (mono)
   // ****** alg=14 fltAll=0 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13343

void StSampleVoice::process_algint_13376(void) {  // fxn_6586 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13376

void StSampleVoice::process_algint_13377(void) {  // fxn_6587 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13377

void StSampleVoice::process_algint_13378(void) {  // fxn_6588 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13378

void StSampleVoice::process_algint_13379(void) {  // fxn_6589 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13379

void StSampleVoice::process_algint_13380(void) {  // fxn_6590 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13380

void StSampleVoice::process_algint_13381(void) {  // fxn_6591 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13381

void StSampleVoice::process_algint_13382(void) {  // fxn_6592 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13382

void StSampleVoice::process_algint_13383(void) {  // fxn_6593 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13383

void StSampleVoice::process_algint_13384(void) {  // fxn_6594 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13384

void StSampleVoice::process_algint_13385(void) {  // fxn_6595 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13385

void StSampleVoice::process_algint_13386(void) {  // fxn_6596 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13386

void StSampleVoice::process_algint_13387(void) {  // fxn_6597 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13387

void StSampleVoice::process_algint_13388(void) {  // fxn_6598 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13388

void StSampleVoice::process_algint_13389(void) {  // fxn_6599 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13389

void StSampleVoice::process_algint_13390(void) {  // fxn_6600 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13390

void StSampleVoice::process_algint_13391(void) {  // fxn_6601 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13391

void StSampleVoice::process_algint_13392(void) {  // fxn_6602 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13392

void StSampleVoice::process_algint_13393(void) {  // fxn_6603 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13393

void StSampleVoice::process_algint_13394(void) {  // fxn_6604 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13394

void StSampleVoice::process_algint_13395(void) {  // fxn_6605 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13395

void StSampleVoice::process_algint_13396(void) {  // fxn_6606 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13396

void StSampleVoice::process_algint_13397(void) {  // fxn_6607 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13397

void StSampleVoice::process_algint_13398(void) {  // fxn_6608 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13398

void StSampleVoice::process_algint_13399(void) {  // fxn_6609 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13399

void StSampleVoice::process_algint_13400(void) {  // fxn_6610 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13400

void StSampleVoice::process_algint_13401(void) {  // fxn_6611 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13401

void StSampleVoice::process_algint_13402(void) {  // fxn_6612 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13402

void StSampleVoice::process_algint_13403(void) {  // fxn_6613 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13403

void StSampleVoice::process_algint_13404(void) {  // fxn_6614 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13404

void StSampleVoice::process_algint_13405(void) {  // fxn_6615 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13405

void StSampleVoice::process_algint_13406(void) {  // fxn_6616 (stereo)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13406

void StSampleVoice::process_algint_13407(void) {  // fxn_6617 (mono)
   // ****** alg=14 fltAll=0 fltPos=2 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13407

void StSampleVoice::process_algint_13408(void) {  // fxn_6618 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13408

void StSampleVoice::process_algint_13409(void) {  // fxn_6619 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13409

void StSampleVoice::process_algint_13410(void) {  // fxn_6620 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13410

void StSampleVoice::process_algint_13411(void) {  // fxn_6621 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13411

void StSampleVoice::process_algint_13412(void) {  // fxn_6622 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13412

void StSampleVoice::process_algint_13413(void) {  // fxn_6623 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13413

void StSampleVoice::process_algint_13414(void) {  // fxn_6624 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13414

void StSampleVoice::process_algint_13415(void) {  // fxn_6625 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13415

void StSampleVoice::process_algint_13416(void) {  // fxn_6626 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13416

void StSampleVoice::process_algint_13417(void) {  // fxn_6627 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13417

void StSampleVoice::process_algint_13418(void) {  // fxn_6628 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13418

void StSampleVoice::process_algint_13419(void) {  // fxn_6629 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13419

void StSampleVoice::process_algint_13420(void) {  // fxn_6630 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13420

void StSampleVoice::process_algint_13421(void) {  // fxn_6631 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13421

void StSampleVoice::process_algint_13422(void) {  // fxn_6632 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13422

void StSampleVoice::process_algint_13423(void) {  // fxn_6633 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13423

void StSampleVoice::process_algint_13424(void) {  // fxn_6634 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13424

void StSampleVoice::process_algint_13425(void) {  // fxn_6635 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13425

void StSampleVoice::process_algint_13426(void) {  // fxn_6636 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13426

void StSampleVoice::process_algint_13427(void) {  // fxn_6637 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13427

void StSampleVoice::process_algint_13428(void) {  // fxn_6638 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13428

void StSampleVoice::process_algint_13429(void) {  // fxn_6639 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13429

void StSampleVoice::process_algint_13430(void) {  // fxn_6640 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13430

void StSampleVoice::process_algint_13431(void) {  // fxn_6641 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13431

void StSampleVoice::process_algint_13432(void) {  // fxn_6642 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13432

void StSampleVoice::process_algint_13433(void) {  // fxn_6643 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13433

void StSampleVoice::process_algint_13434(void) {  // fxn_6644 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13434

void StSampleVoice::process_algint_13435(void) {  // fxn_6645 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13435

void StSampleVoice::process_algint_13436(void) {  // fxn_6646 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13436

void StSampleVoice::process_algint_13437(void) {  // fxn_6647 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13437

void StSampleVoice::process_algint_13438(void) {  // fxn_6648 (stereo)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13438

void StSampleVoice::process_algint_13439(void) {  // fxn_6649 (mono)
   // ****** alg=14 fltAll=0 fltPos=3 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13439

void StSampleVoice::process_algint_13440(void) {  // fxn_6650 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13440

void StSampleVoice::process_algint_13441(void) {  // fxn_6651 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13441

void StSampleVoice::process_algint_13442(void) {  // fxn_6652 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13442

void StSampleVoice::process_algint_13443(void) {  // fxn_6653 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13443

void StSampleVoice::process_algint_13444(void) {  // fxn_6654 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13444

