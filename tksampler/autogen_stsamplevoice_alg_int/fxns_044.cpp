// autogenerated by gen_plugin_alg_int.tks on 5-Aug-2024 17:26:47
//  ($FXN methods, $TBL table entries)

#include "../tksampler.h"

#define Dpro(a,m,i,o) plugin_cache_entries[(a)]->voice->voice_bus_read_offset = render_buf_sample_offset; sample->plugins[(a)].shared->info->info->process_replace(plugin_cache_entries[(a)]->voice, (m), (i), (o), 1u)

void StSampleVoice::process_algint_21289(void) {  // fxn_11263 (mono)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21289

void StSampleVoice::process_algint_21290(void) {  // fxn_11264 (stereo)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21290

void StSampleVoice::process_algint_21291(void) {  // fxn_11265 (mono)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21291

void StSampleVoice::process_algint_21292(void) {  // fxn_11266 (stereo)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21292

void StSampleVoice::process_algint_21293(void) {  // fxn_11267 (mono)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21293

void StSampleVoice::process_algint_21294(void) {  // fxn_11268 (stereo)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21294

void StSampleVoice::process_algint_21295(void) {  // fxn_11269 (mono)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21295

void StSampleVoice::process_algint_21296(void) {  // fxn_11270 (stereo)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21296

void StSampleVoice::process_algint_21297(void) {  // fxn_11271 (mono)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21297

void StSampleVoice::process_algint_21298(void) {  // fxn_11272 (stereo)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21298

void StSampleVoice::process_algint_21299(void) {  // fxn_11273 (mono)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21299

void StSampleVoice::process_algint_21300(void) {  // fxn_11274 (stereo)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21300

void StSampleVoice::process_algint_21301(void) {  // fxn_11275 (mono)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21301

void StSampleVoice::process_algint_21302(void) {  // fxn_11276 (stereo)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21302

void StSampleVoice::process_algint_21303(void) {  // fxn_11277 (mono)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21303

void StSampleVoice::process_algint_21304(void) {  // fxn_11278 (stereo)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21304

void StSampleVoice::process_algint_21305(void) {  // fxn_11279 (mono)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21305

void StSampleVoice::process_algint_21306(void) {  // fxn_11280 (stereo)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21306

void StSampleVoice::process_algint_21307(void) {  // fxn_11281 (mono)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21307

void StSampleVoice::process_algint_21308(void) {  // fxn_11282 (stereo)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21308

void StSampleVoice::process_algint_21309(void) {  // fxn_11283 (mono)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21309

void StSampleVoice::process_algint_21310(void) {  // fxn_11284 (stereo)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21310

void StSampleVoice::process_algint_21311(void) {  // fxn_11285 (mono)
   // ****** alg=21 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
   filter(last_sample);
}  // end algInt=21311

void StSampleVoice::process_algint_21504(void) {  // fxn_11286 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21504

void StSampleVoice::process_algint_21505(void) {  // fxn_11287 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21505

void StSampleVoice::process_algint_21506(void) {  // fxn_11288 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21506

void StSampleVoice::process_algint_21507(void) {  // fxn_11289 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21507

void StSampleVoice::process_algint_21508(void) {  // fxn_11290 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21508

void StSampleVoice::process_algint_21509(void) {  // fxn_11291 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21509

void StSampleVoice::process_algint_21510(void) {  // fxn_11292 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21510

void StSampleVoice::process_algint_21511(void) {  // fxn_11293 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21511

void StSampleVoice::process_algint_21512(void) {  // fxn_11294 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21512

void StSampleVoice::process_algint_21513(void) {  // fxn_11295 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21513

void StSampleVoice::process_algint_21514(void) {  // fxn_11296 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21514

void StSampleVoice::process_algint_21515(void) {  // fxn_11297 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21515

void StSampleVoice::process_algint_21516(void) {  // fxn_11298 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21516

void StSampleVoice::process_algint_21517(void) {  // fxn_11299 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21517

void StSampleVoice::process_algint_21518(void) {  // fxn_11300 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21518

void StSampleVoice::process_algint_21519(void) {  // fxn_11301 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21519

void StSampleVoice::process_algint_21520(void) {  // fxn_11302 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21520

void StSampleVoice::process_algint_21521(void) {  // fxn_11303 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21521

void StSampleVoice::process_algint_21522(void) {  // fxn_11304 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21522

void StSampleVoice::process_algint_21523(void) {  // fxn_11305 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21523

void StSampleVoice::process_algint_21524(void) {  // fxn_11306 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21524

void StSampleVoice::process_algint_21525(void) {  // fxn_11307 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21525

void StSampleVoice::process_algint_21526(void) {  // fxn_11308 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21526

void StSampleVoice::process_algint_21527(void) {  // fxn_11309 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21527

void StSampleVoice::process_algint_21528(void) {  // fxn_11310 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21528

void StSampleVoice::process_algint_21529(void) {  // fxn_11311 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21529

void StSampleVoice::process_algint_21530(void) {  // fxn_11312 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21530

void StSampleVoice::process_algint_21531(void) {  // fxn_11313 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21531

void StSampleVoice::process_algint_21532(void) {  // fxn_11314 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21532

void StSampleVoice::process_algint_21533(void) {  // fxn_11315 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21533

void StSampleVoice::process_algint_21534(void) {  // fxn_11316 (stereo)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21534

void StSampleVoice::process_algint_21535(void) {  // fxn_11317 (mono)
   // ****** alg=22 fltAll=0 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21535

void StSampleVoice::process_algint_21568(void) {  // fxn_11318 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21568

void StSampleVoice::process_algint_21569(void) {  // fxn_11319 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21569

void StSampleVoice::process_algint_21570(void) {  // fxn_11320 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21570

void StSampleVoice::process_algint_21571(void) {  // fxn_11321 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21571

void StSampleVoice::process_algint_21572(void) {  // fxn_11322 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21572

void StSampleVoice::process_algint_21573(void) {  // fxn_11323 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21573

void StSampleVoice::process_algint_21574(void) {  // fxn_11324 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21574

void StSampleVoice::process_algint_21575(void) {  // fxn_11325 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21575

void StSampleVoice::process_algint_21576(void) {  // fxn_11326 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21576

void StSampleVoice::process_algint_21577(void) {  // fxn_11327 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21577

void StSampleVoice::process_algint_21578(void) {  // fxn_11328 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21578

void StSampleVoice::process_algint_21579(void) {  // fxn_11329 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21579

void StSampleVoice::process_algint_21580(void) {  // fxn_11330 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21580

void StSampleVoice::process_algint_21581(void) {  // fxn_11331 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21581

void StSampleVoice::process_algint_21582(void) {  // fxn_11332 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21582

void StSampleVoice::process_algint_21583(void) {  // fxn_11333 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21583

void StSampleVoice::process_algint_21584(void) {  // fxn_11334 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21584

void StSampleVoice::process_algint_21585(void) {  // fxn_11335 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21585

void StSampleVoice::process_algint_21586(void) {  // fxn_11336 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21586

void StSampleVoice::process_algint_21587(void) {  // fxn_11337 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21587

void StSampleVoice::process_algint_21588(void) {  // fxn_11338 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21588

void StSampleVoice::process_algint_21589(void) {  // fxn_11339 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21589

void StSampleVoice::process_algint_21590(void) {  // fxn_11340 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21590

void StSampleVoice::process_algint_21591(void) {  // fxn_11341 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21591

void StSampleVoice::process_algint_21592(void) {  // fxn_11342 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21592

void StSampleVoice::process_algint_21593(void) {  // fxn_11343 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21593

void StSampleVoice::process_algint_21594(void) {  // fxn_11344 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21594

void StSampleVoice::process_algint_21595(void) {  // fxn_11345 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21595

void StSampleVoice::process_algint_21596(void) {  // fxn_11346 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21596

void StSampleVoice::process_algint_21597(void) {  // fxn_11347 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21597

void StSampleVoice::process_algint_21598(void) {  // fxn_11348 (stereo)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21598

void StSampleVoice::process_algint_21599(void) {  // fxn_11349 (mono)
   // ****** alg=22 fltAll=0 fltPos=2 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21599

void StSampleVoice::process_algint_21600(void) {  // fxn_11350 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21600

void StSampleVoice::process_algint_21601(void) {  // fxn_11351 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21601

void StSampleVoice::process_algint_21602(void) {  // fxn_11352 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21602

void StSampleVoice::process_algint_21603(void) {  // fxn_11353 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21603

void StSampleVoice::process_algint_21604(void) {  // fxn_11354 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21604

void StSampleVoice::process_algint_21605(void) {  // fxn_11355 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21605

void StSampleVoice::process_algint_21606(void) {  // fxn_11356 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21606

void StSampleVoice::process_algint_21607(void) {  // fxn_11357 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21607

void StSampleVoice::process_algint_21608(void) {  // fxn_11358 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21608

void StSampleVoice::process_algint_21609(void) {  // fxn_11359 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21609

void StSampleVoice::process_algint_21610(void) {  // fxn_11360 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21610

void StSampleVoice::process_algint_21611(void) {  // fxn_11361 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21611

void StSampleVoice::process_algint_21612(void) {  // fxn_11362 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21612

void StSampleVoice::process_algint_21613(void) {  // fxn_11363 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21613

void StSampleVoice::process_algint_21614(void) {  // fxn_11364 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21614

void StSampleVoice::process_algint_21615(void) {  // fxn_11365 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21615

void StSampleVoice::process_algint_21616(void) {  // fxn_11366 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21616

void StSampleVoice::process_algint_21617(void) {  // fxn_11367 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21617

void StSampleVoice::process_algint_21618(void) {  // fxn_11368 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21618

void StSampleVoice::process_algint_21619(void) {  // fxn_11369 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21619

void StSampleVoice::process_algint_21620(void) {  // fxn_11370 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21620

void StSampleVoice::process_algint_21621(void) {  // fxn_11371 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21621

void StSampleVoice::process_algint_21622(void) {  // fxn_11372 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21622

void StSampleVoice::process_algint_21623(void) {  // fxn_11373 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21623

void StSampleVoice::process_algint_21624(void) {  // fxn_11374 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21624

void StSampleVoice::process_algint_21625(void) {  // fxn_11375 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21625

void StSampleVoice::process_algint_21626(void) {  // fxn_11376 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21626

void StSampleVoice::process_algint_21627(void) {  // fxn_11377 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21627

void StSampleVoice::process_algint_21628(void) {  // fxn_11378 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21628

void StSampleVoice::process_algint_21629(void) {  // fxn_11379 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21629

void StSampleVoice::process_algint_21630(void) {  // fxn_11380 (stereo)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21630

void StSampleVoice::process_algint_21631(void) {  // fxn_11381 (mono)
   // ****** alg=22 fltAll=0 fltPos=3 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21631

void StSampleVoice::process_algint_21632(void) {  // fxn_11382 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21632

void StSampleVoice::process_algint_21633(void) {  // fxn_11383 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21633

void StSampleVoice::process_algint_21634(void) {  // fxn_11384 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21634

void StSampleVoice::process_algint_21635(void) {  // fxn_11385 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21635

void StSampleVoice::process_algint_21636(void) {  // fxn_11386 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21636

void StSampleVoice::process_algint_21637(void) {  // fxn_11387 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21637

void StSampleVoice::process_algint_21638(void) {  // fxn_11388 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21638

void StSampleVoice::process_algint_21639(void) {  // fxn_11389 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21639

void StSampleVoice::process_algint_21640(void) {  // fxn_11390 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21640

void StSampleVoice::process_algint_21641(void) {  // fxn_11391 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21641

void StSampleVoice::process_algint_21642(void) {  // fxn_11392 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21642

void StSampleVoice::process_algint_21643(void) {  // fxn_11393 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21643

void StSampleVoice::process_algint_21644(void) {  // fxn_11394 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21644

void StSampleVoice::process_algint_21645(void) {  // fxn_11395 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21645

void StSampleVoice::process_algint_21646(void) {  // fxn_11396 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21646

void StSampleVoice::process_algint_21647(void) {  // fxn_11397 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21647

void StSampleVoice::process_algint_21648(void) {  // fxn_11398 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21648

void StSampleVoice::process_algint_21649(void) {  // fxn_11399 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21649

void StSampleVoice::process_algint_21650(void) {  // fxn_11400 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21650

void StSampleVoice::process_algint_21651(void) {  // fxn_11401 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21651

void StSampleVoice::process_algint_21652(void) {  // fxn_11402 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21652

void StSampleVoice::process_algint_21653(void) {  // fxn_11403 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21653

void StSampleVoice::process_algint_21654(void) {  // fxn_11404 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21654

void StSampleVoice::process_algint_21655(void) {  // fxn_11405 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21655

void StSampleVoice::process_algint_21656(void) {  // fxn_11406 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21656

void StSampleVoice::process_algint_21657(void) {  // fxn_11407 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21657

void StSampleVoice::process_algint_21658(void) {  // fxn_11408 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21658

void StSampleVoice::process_algint_21659(void) {  // fxn_11409 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21659

void StSampleVoice::process_algint_21660(void) {  // fxn_11410 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21660

void StSampleVoice::process_algint_21661(void) {  // fxn_11411 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21661

void StSampleVoice::process_algint_21662(void) {  // fxn_11412 (stereo)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21662

void StSampleVoice::process_algint_21663(void) {  // fxn_11413 (mono)
   // ****** alg=22 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21663

void StSampleVoice::process_algint_21664(void) {  // fxn_11414 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21664

void StSampleVoice::process_algint_21665(void) {  // fxn_11415 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21665

void StSampleVoice::process_algint_21666(void) {  // fxn_11416 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21666

void StSampleVoice::process_algint_21667(void) {  // fxn_11417 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21667

void StSampleVoice::process_algint_21668(void) {  // fxn_11418 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21668

void StSampleVoice::process_algint_21669(void) {  // fxn_11419 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21669

void StSampleVoice::process_algint_21670(void) {  // fxn_11420 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21670

void StSampleVoice::process_algint_21671(void) {  // fxn_11421 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21671

void StSampleVoice::process_algint_21672(void) {  // fxn_11422 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21672

void StSampleVoice::process_algint_21673(void) {  // fxn_11423 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21673

void StSampleVoice::process_algint_21674(void) {  // fxn_11424 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21674

void StSampleVoice::process_algint_21675(void) {  // fxn_11425 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21675

void StSampleVoice::process_algint_21676(void) {  // fxn_11426 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21676

void StSampleVoice::process_algint_21677(void) {  // fxn_11427 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21677

void StSampleVoice::process_algint_21678(void) {  // fxn_11428 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21678

void StSampleVoice::process_algint_21679(void) {  // fxn_11429 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21679

void StSampleVoice::process_algint_21680(void) {  // fxn_11430 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21680

void StSampleVoice::process_algint_21681(void) {  // fxn_11431 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21681

void StSampleVoice::process_algint_21682(void) {  // fxn_11432 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21682

void StSampleVoice::process_algint_21683(void) {  // fxn_11433 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21683

void StSampleVoice::process_algint_21684(void) {  // fxn_11434 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21684

void StSampleVoice::process_algint_21685(void) {  // fxn_11435 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21685

void StSampleVoice::process_algint_21686(void) {  // fxn_11436 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21686

void StSampleVoice::process_algint_21687(void) {  // fxn_11437 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21687

void StSampleVoice::process_algint_21688(void) {  // fxn_11438 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21688

void StSampleVoice::process_algint_21689(void) {  // fxn_11439 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21689

void StSampleVoice::process_algint_21690(void) {  // fxn_11440 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21690

void StSampleVoice::process_algint_21691(void) {  // fxn_11441 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21691

void StSampleVoice::process_algint_21692(void) {  // fxn_11442 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21692

void StSampleVoice::process_algint_21693(void) {  // fxn_11443 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21693

void StSampleVoice::process_algint_21694(void) {  // fxn_11444 (stereo)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21694

void StSampleVoice::process_algint_21695(void) {  // fxn_11445 (mono)
   // ****** alg=22 fltAll=0 fltPos=5 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21695

void StSampleVoice::process_algint_21696(void) {  // fxn_11446 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21696

void StSampleVoice::process_algint_21697(void) {  // fxn_11447 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21697

void StSampleVoice::process_algint_21698(void) {  // fxn_11448 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21698

void StSampleVoice::process_algint_21699(void) {  // fxn_11449 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21699

void StSampleVoice::process_algint_21700(void) {  // fxn_11450 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21700

void StSampleVoice::process_algint_21701(void) {  // fxn_11451 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21701

void StSampleVoice::process_algint_21702(void) {  // fxn_11452 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21702

void StSampleVoice::process_algint_21703(void) {  // fxn_11453 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21703

void StSampleVoice::process_algint_21704(void) {  // fxn_11454 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21704

void StSampleVoice::process_algint_21705(void) {  // fxn_11455 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21705

void StSampleVoice::process_algint_21706(void) {  // fxn_11456 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21706

void StSampleVoice::process_algint_21707(void) {  // fxn_11457 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21707

void StSampleVoice::process_algint_21708(void) {  // fxn_11458 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21708

void StSampleVoice::process_algint_21709(void) {  // fxn_11459 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21709

void StSampleVoice::process_algint_21710(void) {  // fxn_11460 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21710

void StSampleVoice::process_algint_21711(void) {  // fxn_11461 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21711

void StSampleVoice::process_algint_21712(void) {  // fxn_11462 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21712

void StSampleVoice::process_algint_21713(void) {  // fxn_11463 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21713

void StSampleVoice::process_algint_21714(void) {  // fxn_11464 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21714

void StSampleVoice::process_algint_21715(void) {  // fxn_11465 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21715

void StSampleVoice::process_algint_21716(void) {  // fxn_11466 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21716

void StSampleVoice::process_algint_21717(void) {  // fxn_11467 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21717

void StSampleVoice::process_algint_21718(void) {  // fxn_11468 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21718

void StSampleVoice::process_algint_21719(void) {  // fxn_11469 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21719

void StSampleVoice::process_algint_21720(void) {  // fxn_11470 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21720

void StSampleVoice::process_algint_21721(void) {  // fxn_11471 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21721

void StSampleVoice::process_algint_21722(void) {  // fxn_11472 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21722

void StSampleVoice::process_algint_21723(void) {  // fxn_11473 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21723

void StSampleVoice::process_algint_21724(void) {  // fxn_11474 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21724

void StSampleVoice::process_algint_21725(void) {  // fxn_11475 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21725

void StSampleVoice::process_algint_21726(void) {  // fxn_11476 (stereo)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21726

void StSampleVoice::process_algint_21727(void) {  // fxn_11477 (mono)
   // ****** alg=22 fltAll=0 fltPos=6 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21727

void StSampleVoice::process_algint_21728(void) {  // fxn_11478 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21728

void StSampleVoice::process_algint_21729(void) {  // fxn_11479 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21729

void StSampleVoice::process_algint_21730(void) {  // fxn_11480 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21730

void StSampleVoice::process_algint_21731(void) {  // fxn_11481 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21731

void StSampleVoice::process_algint_21732(void) {  // fxn_11482 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21732

void StSampleVoice::process_algint_21733(void) {  // fxn_11483 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21733

void StSampleVoice::process_algint_21734(void) {  // fxn_11484 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21734

void StSampleVoice::process_algint_21735(void) {  // fxn_11485 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21735

void StSampleVoice::process_algint_21736(void) {  // fxn_11486 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21736

void StSampleVoice::process_algint_21737(void) {  // fxn_11487 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21737

void StSampleVoice::process_algint_21738(void) {  // fxn_11488 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21738

void StSampleVoice::process_algint_21739(void) {  // fxn_11489 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21739

void StSampleVoice::process_algint_21740(void) {  // fxn_11490 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21740

void StSampleVoice::process_algint_21741(void) {  // fxn_11491 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21741

void StSampleVoice::process_algint_21742(void) {  // fxn_11492 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21742

void StSampleVoice::process_algint_21743(void) {  // fxn_11493 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21743

void StSampleVoice::process_algint_21744(void) {  // fxn_11494 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21744

void StSampleVoice::process_algint_21745(void) {  // fxn_11495 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21745

void StSampleVoice::process_algint_21746(void) {  // fxn_11496 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21746

void StSampleVoice::process_algint_21747(void) {  // fxn_11497 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21747

void StSampleVoice::process_algint_21748(void) {  // fxn_11498 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21748

void StSampleVoice::process_algint_21749(void) {  // fxn_11499 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21749

void StSampleVoice::process_algint_21750(void) {  // fxn_11500 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21750

void StSampleVoice::process_algint_21751(void) {  // fxn_11501 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21751

void StSampleVoice::process_algint_21752(void) {  // fxn_11502 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21752

void StSampleVoice::process_algint_21753(void) {  // fxn_11503 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21753

void StSampleVoice::process_algint_21754(void) {  // fxn_11504 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21754

void StSampleVoice::process_algint_21755(void) {  // fxn_11505 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21755

void StSampleVoice::process_algint_21756(void) {  // fxn_11506 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21756

void StSampleVoice::process_algint_21757(void) {  // fxn_11507 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21757

void StSampleVoice::process_algint_21758(void) {  // fxn_11508 (stereo)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21758

void StSampleVoice::process_algint_21759(void) {  // fxn_11509 (mono)
   // ****** alg=22 fltAll=0 fltPos=7 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21759

void StSampleVoice::process_algint_21760(void) {  // fxn_11510 (stereo)
   // ****** alg=22 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21760

void StSampleVoice::process_algint_21761(void) {  // fxn_11511 (mono)
   // ****** alg=22 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21761

void StSampleVoice::process_algint_21762(void) {  // fxn_11512 (stereo)
   // ****** alg=22 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21762

void StSampleVoice::process_algint_21763(void) {  // fxn_11513 (mono)
   // ****** alg=22 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21763

void StSampleVoice::process_algint_21764(void) {  // fxn_11514 (stereo)
   // ****** alg=22 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21764

void StSampleVoice::process_algint_21765(void) {  // fxn_11515 (mono)
   // ****** alg=22 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21765

void StSampleVoice::process_algint_21766(void) {  // fxn_11516 (stereo)
   // ****** alg=22 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21766

void StSampleVoice::process_algint_21767(void) {  // fxn_11517 (mono)
   // ****** alg=22 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21767

void StSampleVoice::process_algint_21768(void) {  // fxn_11518 (stereo)
   // ****** alg=22 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=21768

