// autogenerated by gen_plugin_alg_int.tks on 5-Aug-2024 17:26:47
//  ($FXN methods, $TBL table entries)

#include "../tksampler.h"

#define Dpro(a,m,i,o) plugin_cache_entries[(a)]->voice->voice_bus_read_offset = render_buf_sample_offset; sample->plugins[(a)].shared->info->info->process_replace(plugin_cache_entries[(a)]->voice, (m), (i), (o), 1u)

void StSampleVoice::process_algint_3586(void) {  // fxn_1791 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3586

void StSampleVoice::process_algint_3587(void) {  // fxn_1792 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3587

void StSampleVoice::process_algint_3588(void) {  // fxn_1793 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3588

void StSampleVoice::process_algint_3589(void) {  // fxn_1794 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3589

void StSampleVoice::process_algint_3590(void) {  // fxn_1795 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3590

void StSampleVoice::process_algint_3591(void) {  // fxn_1796 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3591

void StSampleVoice::process_algint_3592(void) {  // fxn_1797 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3592

void StSampleVoice::process_algint_3593(void) {  // fxn_1798 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3593

void StSampleVoice::process_algint_3594(void) {  // fxn_1799 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3594

void StSampleVoice::process_algint_3595(void) {  // fxn_1800 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3595

void StSampleVoice::process_algint_3596(void) {  // fxn_1801 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3596

void StSampleVoice::process_algint_3597(void) {  // fxn_1802 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3597

void StSampleVoice::process_algint_3598(void) {  // fxn_1803 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3598

void StSampleVoice::process_algint_3599(void) {  // fxn_1804 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3599

void StSampleVoice::process_algint_3600(void) {  // fxn_1805 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3600

void StSampleVoice::process_algint_3601(void) {  // fxn_1806 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3601

void StSampleVoice::process_algint_3602(void) {  // fxn_1807 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3602

void StSampleVoice::process_algint_3603(void) {  // fxn_1808 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3603

void StSampleVoice::process_algint_3604(void) {  // fxn_1809 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3604

void StSampleVoice::process_algint_3605(void) {  // fxn_1810 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3605

void StSampleVoice::process_algint_3606(void) {  // fxn_1811 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3606

void StSampleVoice::process_algint_3607(void) {  // fxn_1812 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3607

void StSampleVoice::process_algint_3608(void) {  // fxn_1813 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3608

void StSampleVoice::process_algint_3609(void) {  // fxn_1814 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3609

void StSampleVoice::process_algint_3610(void) {  // fxn_1815 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3610

void StSampleVoice::process_algint_3611(void) {  // fxn_1816 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3611

void StSampleVoice::process_algint_3612(void) {  // fxn_1817 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3612

void StSampleVoice::process_algint_3613(void) {  // fxn_1818 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3613

void StSampleVoice::process_algint_3614(void) {  // fxn_1819 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3614

void StSampleVoice::process_algint_3615(void) {  // fxn_1820 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3615

void StSampleVoice::process_algint_3616(void) {  // fxn_1821 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3616

void StSampleVoice::process_algint_3617(void) {  // fxn_1822 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3617

void StSampleVoice::process_algint_3618(void) {  // fxn_1823 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3618

void StSampleVoice::process_algint_3619(void) {  // fxn_1824 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3619

void StSampleVoice::process_algint_3620(void) {  // fxn_1825 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3620

void StSampleVoice::process_algint_3621(void) {  // fxn_1826 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3621

void StSampleVoice::process_algint_3622(void) {  // fxn_1827 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3622

void StSampleVoice::process_algint_3623(void) {  // fxn_1828 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3623

void StSampleVoice::process_algint_3624(void) {  // fxn_1829 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3624

void StSampleVoice::process_algint_3625(void) {  // fxn_1830 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3625

void StSampleVoice::process_algint_3626(void) {  // fxn_1831 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3626

void StSampleVoice::process_algint_3627(void) {  // fxn_1832 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3627

void StSampleVoice::process_algint_3628(void) {  // fxn_1833 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3628

void StSampleVoice::process_algint_3629(void) {  // fxn_1834 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3629

void StSampleVoice::process_algint_3630(void) {  // fxn_1835 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3630

void StSampleVoice::process_algint_3631(void) {  // fxn_1836 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3631

void StSampleVoice::process_algint_3632(void) {  // fxn_1837 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3632

void StSampleVoice::process_algint_3633(void) {  // fxn_1838 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3633

void StSampleVoice::process_algint_3634(void) {  // fxn_1839 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3634

void StSampleVoice::process_algint_3635(void) {  // fxn_1840 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3635

void StSampleVoice::process_algint_3636(void) {  // fxn_1841 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3636

void StSampleVoice::process_algint_3637(void) {  // fxn_1842 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3637

void StSampleVoice::process_algint_3638(void) {  // fxn_1843 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3638

void StSampleVoice::process_algint_3639(void) {  // fxn_1844 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3639

void StSampleVoice::process_algint_3640(void) {  // fxn_1845 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3640

void StSampleVoice::process_algint_3641(void) {  // fxn_1846 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3641

void StSampleVoice::process_algint_3642(void) {  // fxn_1847 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3642

void StSampleVoice::process_algint_3643(void) {  // fxn_1848 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3643

void StSampleVoice::process_algint_3644(void) {  // fxn_1849 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3644

void StSampleVoice::process_algint_3645(void) {  // fxn_1850 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3645

void StSampleVoice::process_algint_3646(void) {  // fxn_1851 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3646

void StSampleVoice::process_algint_3647(void) {  // fxn_1852 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3647

void StSampleVoice::process_algint_3840(void) {  // fxn_1853 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3840

void StSampleVoice::process_algint_3841(void) {  // fxn_1854 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3841

void StSampleVoice::process_algint_3842(void) {  // fxn_1855 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3842

void StSampleVoice::process_algint_3843(void) {  // fxn_1856 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3843

void StSampleVoice::process_algint_3844(void) {  // fxn_1857 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3844

void StSampleVoice::process_algint_3845(void) {  // fxn_1858 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3845

void StSampleVoice::process_algint_3846(void) {  // fxn_1859 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3846

void StSampleVoice::process_algint_3847(void) {  // fxn_1860 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3847

void StSampleVoice::process_algint_3848(void) {  // fxn_1861 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3848

void StSampleVoice::process_algint_3849(void) {  // fxn_1862 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3849

void StSampleVoice::process_algint_3850(void) {  // fxn_1863 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3850

void StSampleVoice::process_algint_3851(void) {  // fxn_1864 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3851

void StSampleVoice::process_algint_3852(void) {  // fxn_1865 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3852

void StSampleVoice::process_algint_3853(void) {  // fxn_1866 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3853

void StSampleVoice::process_algint_3854(void) {  // fxn_1867 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3854

void StSampleVoice::process_algint_3855(void) {  // fxn_1868 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3855

void StSampleVoice::process_algint_3856(void) {  // fxn_1869 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3856

void StSampleVoice::process_algint_3857(void) {  // fxn_1870 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3857

void StSampleVoice::process_algint_3858(void) {  // fxn_1871 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3858

void StSampleVoice::process_algint_3859(void) {  // fxn_1872 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3859

void StSampleVoice::process_algint_3860(void) {  // fxn_1873 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3860

void StSampleVoice::process_algint_3861(void) {  // fxn_1874 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3861

void StSampleVoice::process_algint_3862(void) {  // fxn_1875 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3862

void StSampleVoice::process_algint_3863(void) {  // fxn_1876 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3863

void StSampleVoice::process_algint_3864(void) {  // fxn_1877 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3864

void StSampleVoice::process_algint_3865(void) {  // fxn_1878 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3865

void StSampleVoice::process_algint_3866(void) {  // fxn_1879 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3866

void StSampleVoice::process_algint_3867(void) {  // fxn_1880 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3867

void StSampleVoice::process_algint_3868(void) {  // fxn_1881 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3868

void StSampleVoice::process_algint_3869(void) {  // fxn_1882 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3869

void StSampleVoice::process_algint_3870(void) {  // fxn_1883 (stereo)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3870

void StSampleVoice::process_algint_3871(void) {  // fxn_1884 (mono)
   // ****** alg=4 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3871

void StSampleVoice::process_algint_3872(void) {  // fxn_1885 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3872

void StSampleVoice::process_algint_3873(void) {  // fxn_1886 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3873

void StSampleVoice::process_algint_3874(void) {  // fxn_1887 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3874

void StSampleVoice::process_algint_3875(void) {  // fxn_1888 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3875

void StSampleVoice::process_algint_3876(void) {  // fxn_1889 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3876

void StSampleVoice::process_algint_3877(void) {  // fxn_1890 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3877

void StSampleVoice::process_algint_3878(void) {  // fxn_1891 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3878

void StSampleVoice::process_algint_3879(void) {  // fxn_1892 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3879

void StSampleVoice::process_algint_3880(void) {  // fxn_1893 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3880

void StSampleVoice::process_algint_3881(void) {  // fxn_1894 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3881

void StSampleVoice::process_algint_3882(void) {  // fxn_1895 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3882

void StSampleVoice::process_algint_3883(void) {  // fxn_1896 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3883

void StSampleVoice::process_algint_3884(void) {  // fxn_1897 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3884

void StSampleVoice::process_algint_3885(void) {  // fxn_1898 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3885

void StSampleVoice::process_algint_3886(void) {  // fxn_1899 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3886

void StSampleVoice::process_algint_3887(void) {  // fxn_1900 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3887

void StSampleVoice::process_algint_3888(void) {  // fxn_1901 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3888

void StSampleVoice::process_algint_3889(void) {  // fxn_1902 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3889

void StSampleVoice::process_algint_3890(void) {  // fxn_1903 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3890

void StSampleVoice::process_algint_3891(void) {  // fxn_1904 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3891

void StSampleVoice::process_algint_3892(void) {  // fxn_1905 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3892

void StSampleVoice::process_algint_3893(void) {  // fxn_1906 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3893

void StSampleVoice::process_algint_3894(void) {  // fxn_1907 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3894

void StSampleVoice::process_algint_3895(void) {  // fxn_1908 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3895

void StSampleVoice::process_algint_3896(void) {  // fxn_1909 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3896

void StSampleVoice::process_algint_3897(void) {  // fxn_1910 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3897

void StSampleVoice::process_algint_3898(void) {  // fxn_1911 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3898

void StSampleVoice::process_algint_3899(void) {  // fxn_1912 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3899

void StSampleVoice::process_algint_3900(void) {  // fxn_1913 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3900

void StSampleVoice::process_algint_3901(void) {  // fxn_1914 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3901

void StSampleVoice::process_algint_3902(void) {  // fxn_1915 (stereo)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3902

void StSampleVoice::process_algint_3903(void) {  // fxn_1916 (mono)
   // ****** alg=4 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=3903

void StSampleVoice::process_algint_4096(void) {  // fxn_1917 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4096

void StSampleVoice::process_algint_4097(void) {  // fxn_1918 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4097

void StSampleVoice::process_algint_4098(void) {  // fxn_1919 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4098

void StSampleVoice::process_algint_4099(void) {  // fxn_1920 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4099

void StSampleVoice::process_algint_4100(void) {  // fxn_1921 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4100

void StSampleVoice::process_algint_4101(void) {  // fxn_1922 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4101

void StSampleVoice::process_algint_4102(void) {  // fxn_1923 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4102

void StSampleVoice::process_algint_4103(void) {  // fxn_1924 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4103

void StSampleVoice::process_algint_4104(void) {  // fxn_1925 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4104

void StSampleVoice::process_algint_4105(void) {  // fxn_1926 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4105

void StSampleVoice::process_algint_4106(void) {  // fxn_1927 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4106

void StSampleVoice::process_algint_4107(void) {  // fxn_1928 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4107

void StSampleVoice::process_algint_4108(void) {  // fxn_1929 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4108

void StSampleVoice::process_algint_4109(void) {  // fxn_1930 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4109

void StSampleVoice::process_algint_4110(void) {  // fxn_1931 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4110

void StSampleVoice::process_algint_4111(void) {  // fxn_1932 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4111

void StSampleVoice::process_algint_4112(void) {  // fxn_1933 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4112

void StSampleVoice::process_algint_4113(void) {  // fxn_1934 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4113

void StSampleVoice::process_algint_4114(void) {  // fxn_1935 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4114

void StSampleVoice::process_algint_4115(void) {  // fxn_1936 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4115

void StSampleVoice::process_algint_4116(void) {  // fxn_1937 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4116

void StSampleVoice::process_algint_4117(void) {  // fxn_1938 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4117

void StSampleVoice::process_algint_4118(void) {  // fxn_1939 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4118

void StSampleVoice::process_algint_4119(void) {  // fxn_1940 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4119

void StSampleVoice::process_algint_4120(void) {  // fxn_1941 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4120

void StSampleVoice::process_algint_4121(void) {  // fxn_1942 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4121

void StSampleVoice::process_algint_4122(void) {  // fxn_1943 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4122

void StSampleVoice::process_algint_4123(void) {  // fxn_1944 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4123

void StSampleVoice::process_algint_4124(void) {  // fxn_1945 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4124

void StSampleVoice::process_algint_4125(void) {  // fxn_1946 (mono)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4125

void StSampleVoice::process_algint_4126(void) {  // fxn_1947 (stereo)
   // ****** alg=5 fltAll=0 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4126

void StSampleVoice::process_algint_4160(void) {  // fxn_1948 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4160

void StSampleVoice::process_algint_4161(void) {  // fxn_1949 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4161

void StSampleVoice::process_algint_4162(void) {  // fxn_1950 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4162

void StSampleVoice::process_algint_4163(void) {  // fxn_1951 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4163

void StSampleVoice::process_algint_4164(void) {  // fxn_1952 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4164

void StSampleVoice::process_algint_4165(void) {  // fxn_1953 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4165

void StSampleVoice::process_algint_4166(void) {  // fxn_1954 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4166

void StSampleVoice::process_algint_4167(void) {  // fxn_1955 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4167

void StSampleVoice::process_algint_4168(void) {  // fxn_1956 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4168

void StSampleVoice::process_algint_4169(void) {  // fxn_1957 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4169

void StSampleVoice::process_algint_4170(void) {  // fxn_1958 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4170

void StSampleVoice::process_algint_4171(void) {  // fxn_1959 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4171

void StSampleVoice::process_algint_4172(void) {  // fxn_1960 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4172

void StSampleVoice::process_algint_4173(void) {  // fxn_1961 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4173

void StSampleVoice::process_algint_4174(void) {  // fxn_1962 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4174

void StSampleVoice::process_algint_4175(void) {  // fxn_1963 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4175

void StSampleVoice::process_algint_4176(void) {  // fxn_1964 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4176

void StSampleVoice::process_algint_4177(void) {  // fxn_1965 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4177

void StSampleVoice::process_algint_4178(void) {  // fxn_1966 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4178

void StSampleVoice::process_algint_4179(void) {  // fxn_1967 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4179

void StSampleVoice::process_algint_4180(void) {  // fxn_1968 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4180

void StSampleVoice::process_algint_4181(void) {  // fxn_1969 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4181

void StSampleVoice::process_algint_4182(void) {  // fxn_1970 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4182

void StSampleVoice::process_algint_4183(void) {  // fxn_1971 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4183

void StSampleVoice::process_algint_4184(void) {  // fxn_1972 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4184

void StSampleVoice::process_algint_4185(void) {  // fxn_1973 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4185

void StSampleVoice::process_algint_4186(void) {  // fxn_1974 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4186

void StSampleVoice::process_algint_4187(void) {  // fxn_1975 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4187

void StSampleVoice::process_algint_4188(void) {  // fxn_1976 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4188

void StSampleVoice::process_algint_4189(void) {  // fxn_1977 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4189

void StSampleVoice::process_algint_4190(void) {  // fxn_1978 (stereo)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4190

void StSampleVoice::process_algint_4191(void) {  // fxn_1979 (mono)
   // ****** alg=5 fltAll=0 fltPos=2 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4191

void StSampleVoice::process_algint_4192(void) {  // fxn_1980 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4192

void StSampleVoice::process_algint_4193(void) {  // fxn_1981 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4193

void StSampleVoice::process_algint_4194(void) {  // fxn_1982 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4194

void StSampleVoice::process_algint_4195(void) {  // fxn_1983 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4195

void StSampleVoice::process_algint_4196(void) {  // fxn_1984 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4196

void StSampleVoice::process_algint_4197(void) {  // fxn_1985 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4197

void StSampleVoice::process_algint_4198(void) {  // fxn_1986 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4198

void StSampleVoice::process_algint_4199(void) {  // fxn_1987 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4199

void StSampleVoice::process_algint_4200(void) {  // fxn_1988 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4200

void StSampleVoice::process_algint_4201(void) {  // fxn_1989 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4201

void StSampleVoice::process_algint_4202(void) {  // fxn_1990 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4202

void StSampleVoice::process_algint_4203(void) {  // fxn_1991 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4203

void StSampleVoice::process_algint_4204(void) {  // fxn_1992 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4204

void StSampleVoice::process_algint_4205(void) {  // fxn_1993 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4205

void StSampleVoice::process_algint_4206(void) {  // fxn_1994 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4206

void StSampleVoice::process_algint_4207(void) {  // fxn_1995 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4207

void StSampleVoice::process_algint_4208(void) {  // fxn_1996 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4208

void StSampleVoice::process_algint_4209(void) {  // fxn_1997 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4209

void StSampleVoice::process_algint_4210(void) {  // fxn_1998 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4210

void StSampleVoice::process_algint_4211(void) {  // fxn_1999 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4211

void StSampleVoice::process_algint_4212(void) {  // fxn_2000 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4212

void StSampleVoice::process_algint_4213(void) {  // fxn_2001 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4213

void StSampleVoice::process_algint_4214(void) {  // fxn_2002 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4214

void StSampleVoice::process_algint_4215(void) {  // fxn_2003 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4215

void StSampleVoice::process_algint_4216(void) {  // fxn_2004 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4216

void StSampleVoice::process_algint_4217(void) {  // fxn_2005 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4217

void StSampleVoice::process_algint_4218(void) {  // fxn_2006 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4218

void StSampleVoice::process_algint_4219(void) {  // fxn_2007 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4219

void StSampleVoice::process_algint_4220(void) {  // fxn_2008 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4220

void StSampleVoice::process_algint_4221(void) {  // fxn_2009 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4221

void StSampleVoice::process_algint_4222(void) {  // fxn_2010 (stereo)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4222

void StSampleVoice::process_algint_4223(void) {  // fxn_2011 (mono)
   // ****** alg=5 fltAll=0 fltPos=3 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4223

void StSampleVoice::process_algint_4224(void) {  // fxn_2012 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4224

void StSampleVoice::process_algint_4225(void) {  // fxn_2013 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4225

void StSampleVoice::process_algint_4226(void) {  // fxn_2014 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4226

void StSampleVoice::process_algint_4227(void) {  // fxn_2015 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4227

void StSampleVoice::process_algint_4228(void) {  // fxn_2016 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4228

void StSampleVoice::process_algint_4229(void) {  // fxn_2017 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4229

void StSampleVoice::process_algint_4230(void) {  // fxn_2018 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4230

void StSampleVoice::process_algint_4231(void) {  // fxn_2019 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4231

void StSampleVoice::process_algint_4232(void) {  // fxn_2020 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4232

void StSampleVoice::process_algint_4233(void) {  // fxn_2021 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4233

void StSampleVoice::process_algint_4234(void) {  // fxn_2022 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4234

void StSampleVoice::process_algint_4235(void) {  // fxn_2023 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4235

void StSampleVoice::process_algint_4236(void) {  // fxn_2024 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4236

void StSampleVoice::process_algint_4237(void) {  // fxn_2025 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4237

void StSampleVoice::process_algint_4238(void) {  // fxn_2026 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4238

void StSampleVoice::process_algint_4239(void) {  // fxn_2027 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4239

void StSampleVoice::process_algint_4240(void) {  // fxn_2028 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4240

void StSampleVoice::process_algint_4241(void) {  // fxn_2029 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4241

void StSampleVoice::process_algint_4242(void) {  // fxn_2030 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4242

void StSampleVoice::process_algint_4243(void) {  // fxn_2031 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4243

void StSampleVoice::process_algint_4244(void) {  // fxn_2032 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4244

void StSampleVoice::process_algint_4245(void) {  // fxn_2033 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4245

void StSampleVoice::process_algint_4246(void) {  // fxn_2034 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4246

void StSampleVoice::process_algint_4247(void) {  // fxn_2035 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4247

void StSampleVoice::process_algint_4248(void) {  // fxn_2036 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4248

void StSampleVoice::process_algint_4249(void) {  // fxn_2037 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4249

void StSampleVoice::process_algint_4250(void) {  // fxn_2038 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4250

void StSampleVoice::process_algint_4251(void) {  // fxn_2039 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4251

void StSampleVoice::process_algint_4252(void) {  // fxn_2040 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4252

void StSampleVoice::process_algint_4253(void) {  // fxn_2041 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4253

void StSampleVoice::process_algint_4254(void) {  // fxn_2042 (stereo)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4254

void StSampleVoice::process_algint_4255(void) {  // fxn_2043 (mono)
   // ****** alg=5 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4255

void StSampleVoice::process_algint_4256(void) {  // fxn_2044 (stereo)
   // ****** alg=5 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4256

void StSampleVoice::process_algint_4257(void) {  // fxn_2045 (mono)
   // ****** alg=5 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4257

void StSampleVoice::process_algint_4258(void) {  // fxn_2046 (stereo)
   // ****** alg=5 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=4258

