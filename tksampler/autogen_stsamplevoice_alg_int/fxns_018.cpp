// autogenerated by gen_plugin_alg_int.tks on 5-Aug-2024 17:26:47
//  ($FXN methods, $TBL table entries)

#include "../tksampler.h"

#define Dpro(a,m,i,o) plugin_cache_entries[(a)]->voice->voice_bus_read_offset = render_buf_sample_offset; sample->plugins[(a)].shared->info->info->process_replace(plugin_cache_entries[(a)]->voice, (m), (i), (o), 1u)

void StSampleVoice::process_algint_9349(void) {  // fxn_4607 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9349

void StSampleVoice::process_algint_9350(void) {  // fxn_4608 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9350

void StSampleVoice::process_algint_9351(void) {  // fxn_4609 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9351

void StSampleVoice::process_algint_9352(void) {  // fxn_4610 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9352

void StSampleVoice::process_algint_9353(void) {  // fxn_4611 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9353

void StSampleVoice::process_algint_9354(void) {  // fxn_4612 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9354

void StSampleVoice::process_algint_9355(void) {  // fxn_4613 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9355

void StSampleVoice::process_algint_9356(void) {  // fxn_4614 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9356

void StSampleVoice::process_algint_9357(void) {  // fxn_4615 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9357

void StSampleVoice::process_algint_9358(void) {  // fxn_4616 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9358

void StSampleVoice::process_algint_9359(void) {  // fxn_4617 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9359

void StSampleVoice::process_algint_9360(void) {  // fxn_4618 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9360

void StSampleVoice::process_algint_9361(void) {  // fxn_4619 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9361

void StSampleVoice::process_algint_9362(void) {  // fxn_4620 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9362

void StSampleVoice::process_algint_9363(void) {  // fxn_4621 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9363

void StSampleVoice::process_algint_9364(void) {  // fxn_4622 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9364

void StSampleVoice::process_algint_9365(void) {  // fxn_4623 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9365

void StSampleVoice::process_algint_9366(void) {  // fxn_4624 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9366

void StSampleVoice::process_algint_9367(void) {  // fxn_4625 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9367

void StSampleVoice::process_algint_9368(void) {  // fxn_4626 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9368

void StSampleVoice::process_algint_9369(void) {  // fxn_4627 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9369

void StSampleVoice::process_algint_9370(void) {  // fxn_4628 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9370

void StSampleVoice::process_algint_9371(void) {  // fxn_4629 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9371

void StSampleVoice::process_algint_9372(void) {  // fxn_4630 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9372

void StSampleVoice::process_algint_9373(void) {  // fxn_4631 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9373

void StSampleVoice::process_algint_9374(void) {  // fxn_4632 (stereo)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9374

void StSampleVoice::process_algint_9375(void) {  // fxn_4633 (mono)
   // ****** alg=10 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9375

void StSampleVoice::process_algint_9376(void) {  // fxn_4634 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9376

void StSampleVoice::process_algint_9377(void) {  // fxn_4635 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9377

void StSampleVoice::process_algint_9378(void) {  // fxn_4636 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9378

void StSampleVoice::process_algint_9379(void) {  // fxn_4637 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9379

void StSampleVoice::process_algint_9380(void) {  // fxn_4638 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9380

void StSampleVoice::process_algint_9381(void) {  // fxn_4639 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9381

void StSampleVoice::process_algint_9382(void) {  // fxn_4640 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9382

void StSampleVoice::process_algint_9383(void) {  // fxn_4641 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9383

void StSampleVoice::process_algint_9384(void) {  // fxn_4642 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9384

void StSampleVoice::process_algint_9385(void) {  // fxn_4643 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9385

void StSampleVoice::process_algint_9386(void) {  // fxn_4644 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9386

void StSampleVoice::process_algint_9387(void) {  // fxn_4645 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9387

void StSampleVoice::process_algint_9388(void) {  // fxn_4646 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9388

void StSampleVoice::process_algint_9389(void) {  // fxn_4647 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9389

void StSampleVoice::process_algint_9390(void) {  // fxn_4648 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9390

void StSampleVoice::process_algint_9391(void) {  // fxn_4649 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9391

void StSampleVoice::process_algint_9392(void) {  // fxn_4650 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9392

void StSampleVoice::process_algint_9393(void) {  // fxn_4651 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9393

void StSampleVoice::process_algint_9394(void) {  // fxn_4652 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9394

void StSampleVoice::process_algint_9395(void) {  // fxn_4653 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9395

void StSampleVoice::process_algint_9396(void) {  // fxn_4654 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9396

void StSampleVoice::process_algint_9397(void) {  // fxn_4655 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9397

void StSampleVoice::process_algint_9398(void) {  // fxn_4656 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9398

void StSampleVoice::process_algint_9399(void) {  // fxn_4657 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9399

void StSampleVoice::process_algint_9400(void) {  // fxn_4658 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9400

void StSampleVoice::process_algint_9401(void) {  // fxn_4659 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9401

void StSampleVoice::process_algint_9402(void) {  // fxn_4660 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9402

void StSampleVoice::process_algint_9403(void) {  // fxn_4661 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9403

void StSampleVoice::process_algint_9404(void) {  // fxn_4662 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9404

void StSampleVoice::process_algint_9405(void) {  // fxn_4663 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9405

void StSampleVoice::process_algint_9406(void) {  // fxn_4664 (stereo)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9406

void StSampleVoice::process_algint_9407(void) {  // fxn_4665 (mono)
   // ****** alg=10 fltAll=0 fltPos=5 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9407

void StSampleVoice::process_algint_9408(void) {  // fxn_4666 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9408

void StSampleVoice::process_algint_9409(void) {  // fxn_4667 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9409

void StSampleVoice::process_algint_9410(void) {  // fxn_4668 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9410

void StSampleVoice::process_algint_9411(void) {  // fxn_4669 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9411

void StSampleVoice::process_algint_9412(void) {  // fxn_4670 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9412

void StSampleVoice::process_algint_9413(void) {  // fxn_4671 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9413

void StSampleVoice::process_algint_9414(void) {  // fxn_4672 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9414

void StSampleVoice::process_algint_9415(void) {  // fxn_4673 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9415

void StSampleVoice::process_algint_9416(void) {  // fxn_4674 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9416

void StSampleVoice::process_algint_9417(void) {  // fxn_4675 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9417

void StSampleVoice::process_algint_9418(void) {  // fxn_4676 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9418

void StSampleVoice::process_algint_9419(void) {  // fxn_4677 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9419

void StSampleVoice::process_algint_9420(void) {  // fxn_4678 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9420

void StSampleVoice::process_algint_9421(void) {  // fxn_4679 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9421

void StSampleVoice::process_algint_9422(void) {  // fxn_4680 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9422

void StSampleVoice::process_algint_9423(void) {  // fxn_4681 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9423

void StSampleVoice::process_algint_9424(void) {  // fxn_4682 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9424

void StSampleVoice::process_algint_9425(void) {  // fxn_4683 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9425

void StSampleVoice::process_algint_9426(void) {  // fxn_4684 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9426

void StSampleVoice::process_algint_9427(void) {  // fxn_4685 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9427

void StSampleVoice::process_algint_9428(void) {  // fxn_4686 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9428

void StSampleVoice::process_algint_9429(void) {  // fxn_4687 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9429

void StSampleVoice::process_algint_9430(void) {  // fxn_4688 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9430

void StSampleVoice::process_algint_9431(void) {  // fxn_4689 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9431

void StSampleVoice::process_algint_9432(void) {  // fxn_4690 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9432

void StSampleVoice::process_algint_9433(void) {  // fxn_4691 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9433

void StSampleVoice::process_algint_9434(void) {  // fxn_4692 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9434

void StSampleVoice::process_algint_9435(void) {  // fxn_4693 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9435

void StSampleVoice::process_algint_9436(void) {  // fxn_4694 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9436

void StSampleVoice::process_algint_9437(void) {  // fxn_4695 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9437

void StSampleVoice::process_algint_9438(void) {  // fxn_4696 (stereo)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9438

void StSampleVoice::process_algint_9439(void) {  // fxn_4697 (mono)
   // ****** alg=10 fltAll=0 fltPos=6 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9439

void StSampleVoice::process_algint_9440(void) {  // fxn_4698 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9440

void StSampleVoice::process_algint_9441(void) {  // fxn_4699 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9441

void StSampleVoice::process_algint_9442(void) {  // fxn_4700 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9442

void StSampleVoice::process_algint_9443(void) {  // fxn_4701 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9443

void StSampleVoice::process_algint_9444(void) {  // fxn_4702 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9444

void StSampleVoice::process_algint_9445(void) {  // fxn_4703 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9445

void StSampleVoice::process_algint_9446(void) {  // fxn_4704 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9446

void StSampleVoice::process_algint_9447(void) {  // fxn_4705 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9447

void StSampleVoice::process_algint_9448(void) {  // fxn_4706 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9448

void StSampleVoice::process_algint_9449(void) {  // fxn_4707 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9449

void StSampleVoice::process_algint_9450(void) {  // fxn_4708 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9450

void StSampleVoice::process_algint_9451(void) {  // fxn_4709 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9451

void StSampleVoice::process_algint_9452(void) {  // fxn_4710 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9452

void StSampleVoice::process_algint_9453(void) {  // fxn_4711 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9453

void StSampleVoice::process_algint_9454(void) {  // fxn_4712 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9454

void StSampleVoice::process_algint_9455(void) {  // fxn_4713 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9455

void StSampleVoice::process_algint_9456(void) {  // fxn_4714 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9456

void StSampleVoice::process_algint_9457(void) {  // fxn_4715 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9457

void StSampleVoice::process_algint_9458(void) {  // fxn_4716 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9458

void StSampleVoice::process_algint_9459(void) {  // fxn_4717 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9459

void StSampleVoice::process_algint_9460(void) {  // fxn_4718 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9460

void StSampleVoice::process_algint_9461(void) {  // fxn_4719 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9461

void StSampleVoice::process_algint_9462(void) {  // fxn_4720 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9462

void StSampleVoice::process_algint_9463(void) {  // fxn_4721 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9463

void StSampleVoice::process_algint_9464(void) {  // fxn_4722 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9464

void StSampleVoice::process_algint_9465(void) {  // fxn_4723 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9465

void StSampleVoice::process_algint_9466(void) {  // fxn_4724 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9466

void StSampleVoice::process_algint_9467(void) {  // fxn_4725 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9467

void StSampleVoice::process_algint_9468(void) {  // fxn_4726 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9468

void StSampleVoice::process_algint_9469(void) {  // fxn_4727 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9469

void StSampleVoice::process_algint_9470(void) {  // fxn_4728 (stereo)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9470

void StSampleVoice::process_algint_9471(void) {  // fxn_4729 (mono)
   // ****** alg=10 fltAll=0 fltPos=7 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9471

void StSampleVoice::process_algint_9472(void) {  // fxn_4730 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9472

void StSampleVoice::process_algint_9473(void) {  // fxn_4731 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9473

void StSampleVoice::process_algint_9474(void) {  // fxn_4732 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9474

void StSampleVoice::process_algint_9475(void) {  // fxn_4733 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9475

void StSampleVoice::process_algint_9476(void) {  // fxn_4734 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9476

void StSampleVoice::process_algint_9477(void) {  // fxn_4735 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9477

void StSampleVoice::process_algint_9478(void) {  // fxn_4736 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9478

void StSampleVoice::process_algint_9479(void) {  // fxn_4737 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9479

void StSampleVoice::process_algint_9480(void) {  // fxn_4738 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9480

void StSampleVoice::process_algint_9481(void) {  // fxn_4739 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9481

void StSampleVoice::process_algint_9482(void) {  // fxn_4740 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9482

void StSampleVoice::process_algint_9483(void) {  // fxn_4741 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9483

void StSampleVoice::process_algint_9484(void) {  // fxn_4742 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9484

void StSampleVoice::process_algint_9485(void) {  // fxn_4743 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9485

void StSampleVoice::process_algint_9486(void) {  // fxn_4744 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9486

void StSampleVoice::process_algint_9487(void) {  // fxn_4745 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9487

void StSampleVoice::process_algint_9488(void) {  // fxn_4746 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9488

void StSampleVoice::process_algint_9489(void) {  // fxn_4747 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9489

void StSampleVoice::process_algint_9490(void) {  // fxn_4748 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9490

void StSampleVoice::process_algint_9491(void) {  // fxn_4749 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9491

void StSampleVoice::process_algint_9492(void) {  // fxn_4750 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9492

void StSampleVoice::process_algint_9493(void) {  // fxn_4751 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9493

void StSampleVoice::process_algint_9494(void) {  // fxn_4752 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9494

void StSampleVoice::process_algint_9495(void) {  // fxn_4753 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9495

void StSampleVoice::process_algint_9496(void) {  // fxn_4754 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9496

void StSampleVoice::process_algint_9497(void) {  // fxn_4755 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9497

void StSampleVoice::process_algint_9498(void) {  // fxn_4756 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9498

void StSampleVoice::process_algint_9499(void) {  // fxn_4757 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9499

void StSampleVoice::process_algint_9500(void) {  // fxn_4758 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9500

void StSampleVoice::process_algint_9501(void) {  // fxn_4759 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9501

void StSampleVoice::process_algint_9502(void) {  // fxn_4760 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9502

void StSampleVoice::process_algint_9503(void) {  // fxn_4761 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9503

void StSampleVoice::process_algint_9504(void) {  // fxn_4762 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9504

void StSampleVoice::process_algint_9505(void) {  // fxn_4763 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9505

void StSampleVoice::process_algint_9506(void) {  // fxn_4764 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9506

void StSampleVoice::process_algint_9507(void) {  // fxn_4765 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9507

void StSampleVoice::process_algint_9508(void) {  // fxn_4766 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9508

void StSampleVoice::process_algint_9509(void) {  // fxn_4767 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9509

void StSampleVoice::process_algint_9510(void) {  // fxn_4768 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9510

void StSampleVoice::process_algint_9511(void) {  // fxn_4769 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9511

void StSampleVoice::process_algint_9512(void) {  // fxn_4770 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9512

void StSampleVoice::process_algint_9513(void) {  // fxn_4771 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9513

void StSampleVoice::process_algint_9514(void) {  // fxn_4772 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9514

void StSampleVoice::process_algint_9515(void) {  // fxn_4773 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9515

void StSampleVoice::process_algint_9516(void) {  // fxn_4774 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9516

void StSampleVoice::process_algint_9517(void) {  // fxn_4775 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9517

void StSampleVoice::process_algint_9518(void) {  // fxn_4776 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9518

void StSampleVoice::process_algint_9519(void) {  // fxn_4777 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9519

void StSampleVoice::process_algint_9520(void) {  // fxn_4778 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9520

void StSampleVoice::process_algint_9521(void) {  // fxn_4779 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9521

void StSampleVoice::process_algint_9522(void) {  // fxn_4780 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9522

void StSampleVoice::process_algint_9523(void) {  // fxn_4781 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9523

void StSampleVoice::process_algint_9524(void) {  // fxn_4782 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9524

void StSampleVoice::process_algint_9525(void) {  // fxn_4783 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9525

void StSampleVoice::process_algint_9526(void) {  // fxn_4784 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9526

void StSampleVoice::process_algint_9527(void) {  // fxn_4785 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9527

void StSampleVoice::process_algint_9528(void) {  // fxn_4786 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9528

void StSampleVoice::process_algint_9529(void) {  // fxn_4787 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9529

void StSampleVoice::process_algint_9530(void) {  // fxn_4788 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9530

void StSampleVoice::process_algint_9531(void) {  // fxn_4789 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9531

void StSampleVoice::process_algint_9532(void) {  // fxn_4790 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9532

void StSampleVoice::process_algint_9533(void) {  // fxn_4791 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9533

void StSampleVoice::process_algint_9534(void) {  // fxn_4792 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9534

void StSampleVoice::process_algint_9535(void) {  // fxn_4793 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   filter(tc);
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9535

void StSampleVoice::process_algint_9664(void) {  // fxn_4794 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9664

void StSampleVoice::process_algint_9665(void) {  // fxn_4795 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9665

void StSampleVoice::process_algint_9666(void) {  // fxn_4796 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9666

void StSampleVoice::process_algint_9667(void) {  // fxn_4797 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9667

void StSampleVoice::process_algint_9668(void) {  // fxn_4798 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9668

void StSampleVoice::process_algint_9669(void) {  // fxn_4799 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9669

void StSampleVoice::process_algint_9670(void) {  // fxn_4800 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9670

void StSampleVoice::process_algint_9671(void) {  // fxn_4801 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9671

void StSampleVoice::process_algint_9672(void) {  // fxn_4802 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9672

void StSampleVoice::process_algint_9673(void) {  // fxn_4803 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9673

void StSampleVoice::process_algint_9674(void) {  // fxn_4804 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9674

void StSampleVoice::process_algint_9675(void) {  // fxn_4805 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9675

void StSampleVoice::process_algint_9676(void) {  // fxn_4806 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9676

void StSampleVoice::process_algint_9677(void) {  // fxn_4807 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9677

void StSampleVoice::process_algint_9678(void) {  // fxn_4808 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9678

void StSampleVoice::process_algint_9679(void) {  // fxn_4809 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9679

void StSampleVoice::process_algint_9680(void) {  // fxn_4810 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9680

void StSampleVoice::process_algint_9681(void) {  // fxn_4811 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9681

void StSampleVoice::process_algint_9682(void) {  // fxn_4812 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9682

void StSampleVoice::process_algint_9683(void) {  // fxn_4813 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9683

void StSampleVoice::process_algint_9684(void) {  // fxn_4814 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9684

void StSampleVoice::process_algint_9685(void) {  // fxn_4815 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9685

void StSampleVoice::process_algint_9686(void) {  // fxn_4816 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9686

void StSampleVoice::process_algint_9687(void) {  // fxn_4817 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9687

void StSampleVoice::process_algint_9688(void) {  // fxn_4818 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9688

void StSampleVoice::process_algint_9689(void) {  // fxn_4819 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9689

void StSampleVoice::process_algint_9690(void) {  // fxn_4820 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9690

void StSampleVoice::process_algint_9691(void) {  // fxn_4821 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9691

void StSampleVoice::process_algint_9692(void) {  // fxn_4822 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9692

void StSampleVoice::process_algint_9693(void) {  // fxn_4823 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9693

void StSampleVoice::process_algint_9694(void) {  // fxn_4824 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=9694

void StSampleVoice::process_algint_9695(void) {  // fxn_4825 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=9695

void StSampleVoice::process_algint_9696(void) {  // fxn_4826 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9696

void StSampleVoice::process_algint_9697(void) {  // fxn_4827 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9697

void StSampleVoice::process_algint_9698(void) {  // fxn_4828 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9698

void StSampleVoice::process_algint_9699(void) {  // fxn_4829 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9699

void StSampleVoice::process_algint_9700(void) {  // fxn_4830 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9700

void StSampleVoice::process_algint_9701(void) {  // fxn_4831 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9701

void StSampleVoice::process_algint_9702(void) {  // fxn_4832 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9702

void StSampleVoice::process_algint_9703(void) {  // fxn_4833 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9703

void StSampleVoice::process_algint_9704(void) {  // fxn_4834 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9704

void StSampleVoice::process_algint_9705(void) {  // fxn_4835 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9705

void StSampleVoice::process_algint_9706(void) {  // fxn_4836 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9706

void StSampleVoice::process_algint_9707(void) {  // fxn_4837 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9707

void StSampleVoice::process_algint_9708(void) {  // fxn_4838 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9708

void StSampleVoice::process_algint_9709(void) {  // fxn_4839 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9709

void StSampleVoice::process_algint_9710(void) {  // fxn_4840 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9710

void StSampleVoice::process_algint_9711(void) {  // fxn_4841 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=9711

void StSampleVoice::process_algint_9712(void) {  // fxn_4842 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9712

void StSampleVoice::process_algint_9713(void) {  // fxn_4843 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9713

void StSampleVoice::process_algint_9714(void) {  // fxn_4844 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9714

void StSampleVoice::process_algint_9715(void) {  // fxn_4845 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9715

void StSampleVoice::process_algint_9716(void) {  // fxn_4846 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9716

void StSampleVoice::process_algint_9717(void) {  // fxn_4847 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9717

void StSampleVoice::process_algint_9718(void) {  // fxn_4848 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9718

void StSampleVoice::process_algint_9719(void) {  // fxn_4849 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9719

void StSampleVoice::process_algint_9720(void) {  // fxn_4850 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9720

void StSampleVoice::process_algint_9721(void) {  // fxn_4851 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9721

void StSampleVoice::process_algint_9722(void) {  // fxn_4852 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9722

void StSampleVoice::process_algint_9723(void) {  // fxn_4853 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9723

void StSampleVoice::process_algint_9724(void) {  // fxn_4854 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9724

void StSampleVoice::process_algint_9725(void) {  // fxn_4855 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9725

void StSampleVoice::process_algint_9726(void) {  // fxn_4856 (stereo)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9726

void StSampleVoice::process_algint_9727(void) {  // fxn_4857 (mono)
   // ****** alg=10 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=9727

void StSampleVoice::process_algint_9728(void) {  // fxn_4858 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9728

void StSampleVoice::process_algint_9729(void) {  // fxn_4859 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9729

void StSampleVoice::process_algint_9730(void) {  // fxn_4860 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9730

void StSampleVoice::process_algint_9731(void) {  // fxn_4861 (mono)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9731

void StSampleVoice::process_algint_9732(void) {  // fxn_4862 (stereo)
   // ****** alg=10 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=9732

