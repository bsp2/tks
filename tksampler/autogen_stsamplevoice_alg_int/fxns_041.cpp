// autogenerated by gen_plugin_alg_int.tks on 5-Aug-2024 17:26:47
//  ($FXN methods, $TBL table entries)

#include "../tksampler.h"

#define Dpro(a,m,i,o) plugin_cache_entries[(a)]->voice->voice_bus_read_offset = render_buf_sample_offset; sample->plugins[(a)].shared->info->info->process_replace(plugin_cache_entries[(a)]->voice, (m), (i), (o), 1u)

void StSampleVoice::process_algint_19977(void) {  // fxn_10495 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=19977

void StSampleVoice::process_algint_19978(void) {  // fxn_10496 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=19978

void StSampleVoice::process_algint_19979(void) {  // fxn_10497 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=19979

void StSampleVoice::process_algint_19980(void) {  // fxn_10498 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=19980

void StSampleVoice::process_algint_19981(void) {  // fxn_10499 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=19981

void StSampleVoice::process_algint_19982(void) {  // fxn_10500 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=19982

void StSampleVoice::process_algint_19983(void) {  // fxn_10501 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=19983

void StSampleVoice::process_algint_19984(void) {  // fxn_10502 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=19984

void StSampleVoice::process_algint_19985(void) {  // fxn_10503 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=19985

void StSampleVoice::process_algint_19986(void) {  // fxn_10504 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=19986

void StSampleVoice::process_algint_19987(void) {  // fxn_10505 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=19987

void StSampleVoice::process_algint_19988(void) {  // fxn_10506 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=19988

void StSampleVoice::process_algint_19989(void) {  // fxn_10507 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=19989

void StSampleVoice::process_algint_19990(void) {  // fxn_10508 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=19990

void StSampleVoice::process_algint_19991(void) {  // fxn_10509 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=19991

void StSampleVoice::process_algint_19992(void) {  // fxn_10510 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=19992

void StSampleVoice::process_algint_19993(void) {  // fxn_10511 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=19993

void StSampleVoice::process_algint_19994(void) {  // fxn_10512 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=19994

void StSampleVoice::process_algint_19995(void) {  // fxn_10513 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=19995

void StSampleVoice::process_algint_19996(void) {  // fxn_10514 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=19996

void StSampleVoice::process_algint_19997(void) {  // fxn_10515 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=19997

void StSampleVoice::process_algint_19998(void) {  // fxn_10516 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=19998

void StSampleVoice::process_algint_19999(void) {  // fxn_10517 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=19999

void StSampleVoice::process_algint_20000(void) {  // fxn_10518 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20000

void StSampleVoice::process_algint_20001(void) {  // fxn_10519 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20001

void StSampleVoice::process_algint_20002(void) {  // fxn_10520 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20002

void StSampleVoice::process_algint_20003(void) {  // fxn_10521 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20003

void StSampleVoice::process_algint_20004(void) {  // fxn_10522 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20004

void StSampleVoice::process_algint_20005(void) {  // fxn_10523 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20005

void StSampleVoice::process_algint_20006(void) {  // fxn_10524 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20006

void StSampleVoice::process_algint_20007(void) {  // fxn_10525 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20007

void StSampleVoice::process_algint_20008(void) {  // fxn_10526 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20008

void StSampleVoice::process_algint_20009(void) {  // fxn_10527 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20009

void StSampleVoice::process_algint_20010(void) {  // fxn_10528 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20010

void StSampleVoice::process_algint_20011(void) {  // fxn_10529 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20011

void StSampleVoice::process_algint_20012(void) {  // fxn_10530 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20012

void StSampleVoice::process_algint_20013(void) {  // fxn_10531 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20013

void StSampleVoice::process_algint_20014(void) {  // fxn_10532 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20014

void StSampleVoice::process_algint_20015(void) {  // fxn_10533 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20015

void StSampleVoice::process_algint_20016(void) {  // fxn_10534 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20016

void StSampleVoice::process_algint_20017(void) {  // fxn_10535 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20017

void StSampleVoice::process_algint_20018(void) {  // fxn_10536 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20018

void StSampleVoice::process_algint_20019(void) {  // fxn_10537 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20019

void StSampleVoice::process_algint_20020(void) {  // fxn_10538 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20020

void StSampleVoice::process_algint_20021(void) {  // fxn_10539 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20021

void StSampleVoice::process_algint_20022(void) {  // fxn_10540 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20022

void StSampleVoice::process_algint_20023(void) {  // fxn_10541 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20023

void StSampleVoice::process_algint_20024(void) {  // fxn_10542 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20024

void StSampleVoice::process_algint_20025(void) {  // fxn_10543 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20025

void StSampleVoice::process_algint_20026(void) {  // fxn_10544 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20026

void StSampleVoice::process_algint_20027(void) {  // fxn_10545 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20027

void StSampleVoice::process_algint_20028(void) {  // fxn_10546 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20028

void StSampleVoice::process_algint_20029(void) {  // fxn_10547 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20029

void StSampleVoice::process_algint_20030(void) {  // fxn_10548 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20030

void StSampleVoice::process_algint_20031(void) {  // fxn_10549 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20031

void StSampleVoice::process_algint_20224(void) {  // fxn_10550 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20224

void StSampleVoice::process_algint_20225(void) {  // fxn_10551 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20225

void StSampleVoice::process_algint_20226(void) {  // fxn_10552 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20226

void StSampleVoice::process_algint_20227(void) {  // fxn_10553 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20227

void StSampleVoice::process_algint_20228(void) {  // fxn_10554 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20228

void StSampleVoice::process_algint_20229(void) {  // fxn_10555 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20229

void StSampleVoice::process_algint_20230(void) {  // fxn_10556 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20230

void StSampleVoice::process_algint_20231(void) {  // fxn_10557 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20231

void StSampleVoice::process_algint_20232(void) {  // fxn_10558 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20232

void StSampleVoice::process_algint_20233(void) {  // fxn_10559 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20233

void StSampleVoice::process_algint_20234(void) {  // fxn_10560 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20234

void StSampleVoice::process_algint_20235(void) {  // fxn_10561 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20235

void StSampleVoice::process_algint_20236(void) {  // fxn_10562 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20236

void StSampleVoice::process_algint_20237(void) {  // fxn_10563 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20237

void StSampleVoice::process_algint_20238(void) {  // fxn_10564 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20238

void StSampleVoice::process_algint_20239(void) {  // fxn_10565 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
}  // end algInt=20239

void StSampleVoice::process_algint_20240(void) {  // fxn_10566 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=20240

void StSampleVoice::process_algint_20241(void) {  // fxn_10567 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=20241

void StSampleVoice::process_algint_20242(void) {  // fxn_10568 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=20242

void StSampleVoice::process_algint_20243(void) {  // fxn_10569 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=20243

void StSampleVoice::process_algint_20244(void) {  // fxn_10570 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=20244

void StSampleVoice::process_algint_20245(void) {  // fxn_10571 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=20245

void StSampleVoice::process_algint_20246(void) {  // fxn_10572 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=20246

void StSampleVoice::process_algint_20247(void) {  // fxn_10573 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=20247

void StSampleVoice::process_algint_20248(void) {  // fxn_10574 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=20248

void StSampleVoice::process_algint_20249(void) {  // fxn_10575 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=20249

void StSampleVoice::process_algint_20250(void) {  // fxn_10576 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=20250

void StSampleVoice::process_algint_20251(void) {  // fxn_10577 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=20251

void StSampleVoice::process_algint_20252(void) {  // fxn_10578 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=20252

void StSampleVoice::process_algint_20253(void) {  // fxn_10579 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=20253

void StSampleVoice::process_algint_20254(void) {  // fxn_10580 (stereo)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
}  // end algInt=20254

void StSampleVoice::process_algint_20255(void) {  // fxn_10581 (mono)
   // ****** alg=20 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
}  // end algInt=20255

void StSampleVoice::process_algint_20256(void) {  // fxn_10582 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20256

void StSampleVoice::process_algint_20257(void) {  // fxn_10583 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20257

void StSampleVoice::process_algint_20258(void) {  // fxn_10584 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20258

void StSampleVoice::process_algint_20259(void) {  // fxn_10585 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20259

void StSampleVoice::process_algint_20260(void) {  // fxn_10586 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20260

void StSampleVoice::process_algint_20261(void) {  // fxn_10587 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20261

void StSampleVoice::process_algint_20262(void) {  // fxn_10588 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20262

void StSampleVoice::process_algint_20263(void) {  // fxn_10589 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20263

void StSampleVoice::process_algint_20264(void) {  // fxn_10590 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20264

void StSampleVoice::process_algint_20265(void) {  // fxn_10591 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20265

void StSampleVoice::process_algint_20266(void) {  // fxn_10592 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20266

void StSampleVoice::process_algint_20267(void) {  // fxn_10593 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20267

void StSampleVoice::process_algint_20268(void) {  // fxn_10594 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20268

void StSampleVoice::process_algint_20269(void) {  // fxn_10595 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20269

void StSampleVoice::process_algint_20270(void) {  // fxn_10596 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20270

void StSampleVoice::process_algint_20271(void) {  // fxn_10597 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
}  // end algInt=20271

void StSampleVoice::process_algint_20272(void) {  // fxn_10598 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20272

void StSampleVoice::process_algint_20273(void) {  // fxn_10599 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20273

void StSampleVoice::process_algint_20274(void) {  // fxn_10600 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20274

void StSampleVoice::process_algint_20275(void) {  // fxn_10601 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20275

void StSampleVoice::process_algint_20276(void) {  // fxn_10602 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20276

void StSampleVoice::process_algint_20277(void) {  // fxn_10603 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20277

void StSampleVoice::process_algint_20278(void) {  // fxn_10604 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20278

void StSampleVoice::process_algint_20279(void) {  // fxn_10605 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20279

void StSampleVoice::process_algint_20280(void) {  // fxn_10606 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20280

void StSampleVoice::process_algint_20281(void) {  // fxn_10607 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20281

void StSampleVoice::process_algint_20282(void) {  // fxn_10608 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20282

void StSampleVoice::process_algint_20283(void) {  // fxn_10609 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20283

void StSampleVoice::process_algint_20284(void) {  // fxn_10610 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20284

void StSampleVoice::process_algint_20285(void) {  // fxn_10611 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20285

void StSampleVoice::process_algint_20286(void) {  // fxn_10612 (stereo)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20286

void StSampleVoice::process_algint_20287(void) {  // fxn_10613 (mono)
   // ****** alg=20 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = ta[0] + tc[0];
   tc[1] = ta[1] + tc[1];
   // process #4 in=tc out=last_sample
   last_sample[0] = tc[0] * plugin_levels[3][0];
   last_sample[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, last_sample, last_sample);
   filter(last_sample);
}  // end algInt=20287

void StSampleVoice::process_algint_20480(void) {  // fxn_10614 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20480

void StSampleVoice::process_algint_20481(void) {  // fxn_10615 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20481

void StSampleVoice::process_algint_20482(void) {  // fxn_10616 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20482

void StSampleVoice::process_algint_20483(void) {  // fxn_10617 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20483

void StSampleVoice::process_algint_20484(void) {  // fxn_10618 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20484

void StSampleVoice::process_algint_20485(void) {  // fxn_10619 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20485

void StSampleVoice::process_algint_20486(void) {  // fxn_10620 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20486

void StSampleVoice::process_algint_20487(void) {  // fxn_10621 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20487

void StSampleVoice::process_algint_20488(void) {  // fxn_10622 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20488

void StSampleVoice::process_algint_20489(void) {  // fxn_10623 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20489

void StSampleVoice::process_algint_20490(void) {  // fxn_10624 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20490

void StSampleVoice::process_algint_20491(void) {  // fxn_10625 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20491

void StSampleVoice::process_algint_20492(void) {  // fxn_10626 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20492

void StSampleVoice::process_algint_20493(void) {  // fxn_10627 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20493

void StSampleVoice::process_algint_20494(void) {  // fxn_10628 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20494

void StSampleVoice::process_algint_20495(void) {  // fxn_10629 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20495

void StSampleVoice::process_algint_20496(void) {  // fxn_10630 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20496

void StSampleVoice::process_algint_20497(void) {  // fxn_10631 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20497

void StSampleVoice::process_algint_20498(void) {  // fxn_10632 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20498

void StSampleVoice::process_algint_20499(void) {  // fxn_10633 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20499

void StSampleVoice::process_algint_20500(void) {  // fxn_10634 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20500

void StSampleVoice::process_algint_20501(void) {  // fxn_10635 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20501

void StSampleVoice::process_algint_20502(void) {  // fxn_10636 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20502

void StSampleVoice::process_algint_20503(void) {  // fxn_10637 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20503

void StSampleVoice::process_algint_20504(void) {  // fxn_10638 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20504

void StSampleVoice::process_algint_20505(void) {  // fxn_10639 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20505

void StSampleVoice::process_algint_20506(void) {  // fxn_10640 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20506

void StSampleVoice::process_algint_20507(void) {  // fxn_10641 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20507

void StSampleVoice::process_algint_20508(void) {  // fxn_10642 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20508

void StSampleVoice::process_algint_20509(void) {  // fxn_10643 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20509

void StSampleVoice::process_algint_20510(void) {  // fxn_10644 (stereo)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20510

void StSampleVoice::process_algint_20511(void) {  // fxn_10645 (mono)
   // ****** alg=21 fltAll=0 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20511

void StSampleVoice::process_algint_20544(void) {  // fxn_10646 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20544

void StSampleVoice::process_algint_20545(void) {  // fxn_10647 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20545

void StSampleVoice::process_algint_20546(void) {  // fxn_10648 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20546

void StSampleVoice::process_algint_20547(void) {  // fxn_10649 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20547

void StSampleVoice::process_algint_20548(void) {  // fxn_10650 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20548

void StSampleVoice::process_algint_20549(void) {  // fxn_10651 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20549

void StSampleVoice::process_algint_20550(void) {  // fxn_10652 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20550

void StSampleVoice::process_algint_20551(void) {  // fxn_10653 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20551

void StSampleVoice::process_algint_20552(void) {  // fxn_10654 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20552

void StSampleVoice::process_algint_20553(void) {  // fxn_10655 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20553

void StSampleVoice::process_algint_20554(void) {  // fxn_10656 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20554

void StSampleVoice::process_algint_20555(void) {  // fxn_10657 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20555

void StSampleVoice::process_algint_20556(void) {  // fxn_10658 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20556

void StSampleVoice::process_algint_20557(void) {  // fxn_10659 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20557

void StSampleVoice::process_algint_20558(void) {  // fxn_10660 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20558

void StSampleVoice::process_algint_20559(void) {  // fxn_10661 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20559

void StSampleVoice::process_algint_20560(void) {  // fxn_10662 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20560

void StSampleVoice::process_algint_20561(void) {  // fxn_10663 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20561

void StSampleVoice::process_algint_20562(void) {  // fxn_10664 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20562

void StSampleVoice::process_algint_20563(void) {  // fxn_10665 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20563

void StSampleVoice::process_algint_20564(void) {  // fxn_10666 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20564

void StSampleVoice::process_algint_20565(void) {  // fxn_10667 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20565

void StSampleVoice::process_algint_20566(void) {  // fxn_10668 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20566

void StSampleVoice::process_algint_20567(void) {  // fxn_10669 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20567

void StSampleVoice::process_algint_20568(void) {  // fxn_10670 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20568

void StSampleVoice::process_algint_20569(void) {  // fxn_10671 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20569

void StSampleVoice::process_algint_20570(void) {  // fxn_10672 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20570

void StSampleVoice::process_algint_20571(void) {  // fxn_10673 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20571

void StSampleVoice::process_algint_20572(void) {  // fxn_10674 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20572

void StSampleVoice::process_algint_20573(void) {  // fxn_10675 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20573

void StSampleVoice::process_algint_20574(void) {  // fxn_10676 (stereo)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20574

void StSampleVoice::process_algint_20575(void) {  // fxn_10677 (mono)
   // ****** alg=21 fltAll=0 fltPos=2 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20575

void StSampleVoice::process_algint_20576(void) {  // fxn_10678 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20576

void StSampleVoice::process_algint_20577(void) {  // fxn_10679 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20577

void StSampleVoice::process_algint_20578(void) {  // fxn_10680 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20578

void StSampleVoice::process_algint_20579(void) {  // fxn_10681 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20579

void StSampleVoice::process_algint_20580(void) {  // fxn_10682 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20580

void StSampleVoice::process_algint_20581(void) {  // fxn_10683 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20581

void StSampleVoice::process_algint_20582(void) {  // fxn_10684 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20582

void StSampleVoice::process_algint_20583(void) {  // fxn_10685 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20583

void StSampleVoice::process_algint_20584(void) {  // fxn_10686 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20584

void StSampleVoice::process_algint_20585(void) {  // fxn_10687 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20585

void StSampleVoice::process_algint_20586(void) {  // fxn_10688 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20586

void StSampleVoice::process_algint_20587(void) {  // fxn_10689 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20587

void StSampleVoice::process_algint_20588(void) {  // fxn_10690 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20588

void StSampleVoice::process_algint_20589(void) {  // fxn_10691 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20589

void StSampleVoice::process_algint_20590(void) {  // fxn_10692 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20590

void StSampleVoice::process_algint_20591(void) {  // fxn_10693 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20591

void StSampleVoice::process_algint_20592(void) {  // fxn_10694 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20592

void StSampleVoice::process_algint_20593(void) {  // fxn_10695 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20593

void StSampleVoice::process_algint_20594(void) {  // fxn_10696 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20594

void StSampleVoice::process_algint_20595(void) {  // fxn_10697 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20595

void StSampleVoice::process_algint_20596(void) {  // fxn_10698 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20596

void StSampleVoice::process_algint_20597(void) {  // fxn_10699 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20597

void StSampleVoice::process_algint_20598(void) {  // fxn_10700 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20598

void StSampleVoice::process_algint_20599(void) {  // fxn_10701 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20599

void StSampleVoice::process_algint_20600(void) {  // fxn_10702 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20600

void StSampleVoice::process_algint_20601(void) {  // fxn_10703 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20601

void StSampleVoice::process_algint_20602(void) {  // fxn_10704 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20602

void StSampleVoice::process_algint_20603(void) {  // fxn_10705 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20603

void StSampleVoice::process_algint_20604(void) {  // fxn_10706 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20604

void StSampleVoice::process_algint_20605(void) {  // fxn_10707 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20605

void StSampleVoice::process_algint_20606(void) {  // fxn_10708 (stereo)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20606

void StSampleVoice::process_algint_20607(void) {  // fxn_10709 (mono)
   // ****** alg=21 fltAll=0 fltPos=3 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20607

void StSampleVoice::process_algint_20608(void) {  // fxn_10710 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20608

void StSampleVoice::process_algint_20609(void) {  // fxn_10711 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20609

void StSampleVoice::process_algint_20610(void) {  // fxn_10712 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20610

void StSampleVoice::process_algint_20611(void) {  // fxn_10713 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20611

void StSampleVoice::process_algint_20612(void) {  // fxn_10714 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20612

void StSampleVoice::process_algint_20613(void) {  // fxn_10715 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20613

void StSampleVoice::process_algint_20614(void) {  // fxn_10716 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20614

void StSampleVoice::process_algint_20615(void) {  // fxn_10717 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20615

void StSampleVoice::process_algint_20616(void) {  // fxn_10718 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20616

void StSampleVoice::process_algint_20617(void) {  // fxn_10719 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20617

void StSampleVoice::process_algint_20618(void) {  // fxn_10720 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20618

void StSampleVoice::process_algint_20619(void) {  // fxn_10721 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20619

void StSampleVoice::process_algint_20620(void) {  // fxn_10722 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20620

void StSampleVoice::process_algint_20621(void) {  // fxn_10723 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20621

void StSampleVoice::process_algint_20622(void) {  // fxn_10724 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20622

void StSampleVoice::process_algint_20623(void) {  // fxn_10725 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20623

void StSampleVoice::process_algint_20624(void) {  // fxn_10726 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20624

void StSampleVoice::process_algint_20625(void) {  // fxn_10727 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20625

void StSampleVoice::process_algint_20626(void) {  // fxn_10728 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20626

void StSampleVoice::process_algint_20627(void) {  // fxn_10729 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20627

void StSampleVoice::process_algint_20628(void) {  // fxn_10730 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20628

void StSampleVoice::process_algint_20629(void) {  // fxn_10731 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20629

void StSampleVoice::process_algint_20630(void) {  // fxn_10732 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20630

void StSampleVoice::process_algint_20631(void) {  // fxn_10733 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20631

void StSampleVoice::process_algint_20632(void) {  // fxn_10734 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20632

void StSampleVoice::process_algint_20633(void) {  // fxn_10735 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20633

void StSampleVoice::process_algint_20634(void) {  // fxn_10736 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20634

void StSampleVoice::process_algint_20635(void) {  // fxn_10737 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20635

void StSampleVoice::process_algint_20636(void) {  // fxn_10738 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20636

void StSampleVoice::process_algint_20637(void) {  // fxn_10739 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20637

void StSampleVoice::process_algint_20638(void) {  // fxn_10740 (stereo)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20638

void StSampleVoice::process_algint_20639(void) {  // fxn_10741 (mono)
   // ****** alg=21 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20639

void StSampleVoice::process_algint_20640(void) {  // fxn_10742 (stereo)
   // ****** alg=21 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20640

void StSampleVoice::process_algint_20641(void) {  // fxn_10743 (mono)
   // ****** alg=21 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20641

void StSampleVoice::process_algint_20642(void) {  // fxn_10744 (stereo)
   // ****** alg=21 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20642

void StSampleVoice::process_algint_20643(void) {  // fxn_10745 (mono)
   // ****** alg=21 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20643

void StSampleVoice::process_algint_20644(void) {  // fxn_10746 (stereo)
   // ****** alg=21 fltAll=0 fltPos=5 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20644

void StSampleVoice::process_algint_20645(void) {  // fxn_10747 (mono)
   // ****** alg=21 fltAll=0 fltPos=5 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20645

void StSampleVoice::process_algint_20646(void) {  // fxn_10748 (stereo)
   // ****** alg=21 fltAll=0 fltPos=5 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20646

void StSampleVoice::process_algint_20647(void) {  // fxn_10749 (mono)
   // ****** alg=21 fltAll=0 fltPos=5 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20647

void StSampleVoice::process_algint_20648(void) {  // fxn_10750 (stereo)
   // ****** alg=21 fltAll=0 fltPos=5 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=20648

