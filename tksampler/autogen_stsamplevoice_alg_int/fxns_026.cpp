// autogenerated by gen_plugin_alg_int.tks on 5-Aug-2024 17:26:47
//  ($FXN methods, $TBL table entries)

#include "../tksampler.h"

#define Dpro(a,m,i,o) plugin_cache_entries[(a)]->voice->voice_bus_read_offset = render_buf_sample_offset; sample->plugins[(a)].shared->info->info->process_replace(plugin_cache_entries[(a)]->voice, (m), (i), (o), 1u)

void StSampleVoice::process_algint_13445(void) {  // fxn_6655 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13445

void StSampleVoice::process_algint_13446(void) {  // fxn_6656 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13446

void StSampleVoice::process_algint_13447(void) {  // fxn_6657 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13447

void StSampleVoice::process_algint_13448(void) {  // fxn_6658 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13448

void StSampleVoice::process_algint_13449(void) {  // fxn_6659 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13449

void StSampleVoice::process_algint_13450(void) {  // fxn_6660 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13450

void StSampleVoice::process_algint_13451(void) {  // fxn_6661 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13451

void StSampleVoice::process_algint_13452(void) {  // fxn_6662 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13452

void StSampleVoice::process_algint_13453(void) {  // fxn_6663 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13453

void StSampleVoice::process_algint_13454(void) {  // fxn_6664 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13454

void StSampleVoice::process_algint_13455(void) {  // fxn_6665 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13455

void StSampleVoice::process_algint_13456(void) {  // fxn_6666 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13456

void StSampleVoice::process_algint_13457(void) {  // fxn_6667 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13457

void StSampleVoice::process_algint_13458(void) {  // fxn_6668 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13458

void StSampleVoice::process_algint_13459(void) {  // fxn_6669 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13459

void StSampleVoice::process_algint_13460(void) {  // fxn_6670 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13460

void StSampleVoice::process_algint_13461(void) {  // fxn_6671 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13461

void StSampleVoice::process_algint_13462(void) {  // fxn_6672 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13462

void StSampleVoice::process_algint_13463(void) {  // fxn_6673 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13463

void StSampleVoice::process_algint_13464(void) {  // fxn_6674 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13464

void StSampleVoice::process_algint_13465(void) {  // fxn_6675 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13465

void StSampleVoice::process_algint_13466(void) {  // fxn_6676 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13466

void StSampleVoice::process_algint_13467(void) {  // fxn_6677 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13467

void StSampleVoice::process_algint_13468(void) {  // fxn_6678 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13468

void StSampleVoice::process_algint_13469(void) {  // fxn_6679 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13469

void StSampleVoice::process_algint_13470(void) {  // fxn_6680 (stereo)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13470

void StSampleVoice::process_algint_13471(void) {  // fxn_6681 (mono)
   // ****** alg=14 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13471

void StSampleVoice::process_algint_13472(void) {  // fxn_6682 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13472

void StSampleVoice::process_algint_13473(void) {  // fxn_6683 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13473

void StSampleVoice::process_algint_13474(void) {  // fxn_6684 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13474

void StSampleVoice::process_algint_13475(void) {  // fxn_6685 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13475

void StSampleVoice::process_algint_13476(void) {  // fxn_6686 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13476

void StSampleVoice::process_algint_13477(void) {  // fxn_6687 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13477

void StSampleVoice::process_algint_13478(void) {  // fxn_6688 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13478

void StSampleVoice::process_algint_13479(void) {  // fxn_6689 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13479

void StSampleVoice::process_algint_13480(void) {  // fxn_6690 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13480

void StSampleVoice::process_algint_13481(void) {  // fxn_6691 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13481

void StSampleVoice::process_algint_13482(void) {  // fxn_6692 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13482

void StSampleVoice::process_algint_13483(void) {  // fxn_6693 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13483

void StSampleVoice::process_algint_13484(void) {  // fxn_6694 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13484

void StSampleVoice::process_algint_13485(void) {  // fxn_6695 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13485

void StSampleVoice::process_algint_13486(void) {  // fxn_6696 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13486

void StSampleVoice::process_algint_13487(void) {  // fxn_6697 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13487

void StSampleVoice::process_algint_13488(void) {  // fxn_6698 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13488

void StSampleVoice::process_algint_13489(void) {  // fxn_6699 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13489

void StSampleVoice::process_algint_13490(void) {  // fxn_6700 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13490

void StSampleVoice::process_algint_13491(void) {  // fxn_6701 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13491

void StSampleVoice::process_algint_13492(void) {  // fxn_6702 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13492

void StSampleVoice::process_algint_13493(void) {  // fxn_6703 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13493

void StSampleVoice::process_algint_13494(void) {  // fxn_6704 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13494

void StSampleVoice::process_algint_13495(void) {  // fxn_6705 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13495

void StSampleVoice::process_algint_13496(void) {  // fxn_6706 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13496

void StSampleVoice::process_algint_13497(void) {  // fxn_6707 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13497

void StSampleVoice::process_algint_13498(void) {  // fxn_6708 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13498

void StSampleVoice::process_algint_13499(void) {  // fxn_6709 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13499

void StSampleVoice::process_algint_13500(void) {  // fxn_6710 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13500

void StSampleVoice::process_algint_13501(void) {  // fxn_6711 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13501

void StSampleVoice::process_algint_13502(void) {  // fxn_6712 (stereo)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13502

void StSampleVoice::process_algint_13503(void) {  // fxn_6713 (mono)
   // ****** alg=14 fltAll=0 fltPos=5 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13503

void StSampleVoice::process_algint_13504(void) {  // fxn_6714 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13504

void StSampleVoice::process_algint_13505(void) {  // fxn_6715 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13505

void StSampleVoice::process_algint_13506(void) {  // fxn_6716 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13506

void StSampleVoice::process_algint_13507(void) {  // fxn_6717 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13507

void StSampleVoice::process_algint_13508(void) {  // fxn_6718 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13508

void StSampleVoice::process_algint_13509(void) {  // fxn_6719 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13509

void StSampleVoice::process_algint_13510(void) {  // fxn_6720 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13510

void StSampleVoice::process_algint_13511(void) {  // fxn_6721 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13511

void StSampleVoice::process_algint_13512(void) {  // fxn_6722 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13512

void StSampleVoice::process_algint_13513(void) {  // fxn_6723 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13513

void StSampleVoice::process_algint_13514(void) {  // fxn_6724 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13514

void StSampleVoice::process_algint_13515(void) {  // fxn_6725 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13515

void StSampleVoice::process_algint_13516(void) {  // fxn_6726 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13516

void StSampleVoice::process_algint_13517(void) {  // fxn_6727 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13517

void StSampleVoice::process_algint_13518(void) {  // fxn_6728 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13518

void StSampleVoice::process_algint_13519(void) {  // fxn_6729 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13519

void StSampleVoice::process_algint_13520(void) {  // fxn_6730 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13520

void StSampleVoice::process_algint_13521(void) {  // fxn_6731 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13521

void StSampleVoice::process_algint_13522(void) {  // fxn_6732 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13522

void StSampleVoice::process_algint_13523(void) {  // fxn_6733 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13523

void StSampleVoice::process_algint_13524(void) {  // fxn_6734 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13524

void StSampleVoice::process_algint_13525(void) {  // fxn_6735 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13525

void StSampleVoice::process_algint_13526(void) {  // fxn_6736 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13526

void StSampleVoice::process_algint_13527(void) {  // fxn_6737 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13527

void StSampleVoice::process_algint_13528(void) {  // fxn_6738 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13528

void StSampleVoice::process_algint_13529(void) {  // fxn_6739 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13529

void StSampleVoice::process_algint_13530(void) {  // fxn_6740 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13530

void StSampleVoice::process_algint_13531(void) {  // fxn_6741 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13531

void StSampleVoice::process_algint_13532(void) {  // fxn_6742 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13532

void StSampleVoice::process_algint_13533(void) {  // fxn_6743 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13533

void StSampleVoice::process_algint_13534(void) {  // fxn_6744 (stereo)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13534

void StSampleVoice::process_algint_13535(void) {  // fxn_6745 (mono)
   // ****** alg=14 fltAll=0 fltPos=6 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13535

void StSampleVoice::process_algint_13536(void) {  // fxn_6746 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13536

void StSampleVoice::process_algint_13537(void) {  // fxn_6747 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13537

void StSampleVoice::process_algint_13538(void) {  // fxn_6748 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13538

void StSampleVoice::process_algint_13539(void) {  // fxn_6749 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13539

void StSampleVoice::process_algint_13540(void) {  // fxn_6750 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13540

void StSampleVoice::process_algint_13541(void) {  // fxn_6751 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13541

void StSampleVoice::process_algint_13542(void) {  // fxn_6752 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13542

void StSampleVoice::process_algint_13543(void) {  // fxn_6753 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13543

void StSampleVoice::process_algint_13544(void) {  // fxn_6754 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13544

void StSampleVoice::process_algint_13545(void) {  // fxn_6755 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13545

void StSampleVoice::process_algint_13546(void) {  // fxn_6756 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13546

void StSampleVoice::process_algint_13547(void) {  // fxn_6757 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13547

void StSampleVoice::process_algint_13548(void) {  // fxn_6758 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13548

void StSampleVoice::process_algint_13549(void) {  // fxn_6759 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13549

void StSampleVoice::process_algint_13550(void) {  // fxn_6760 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13550

void StSampleVoice::process_algint_13551(void) {  // fxn_6761 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13551

void StSampleVoice::process_algint_13552(void) {  // fxn_6762 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13552

void StSampleVoice::process_algint_13553(void) {  // fxn_6763 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13553

void StSampleVoice::process_algint_13554(void) {  // fxn_6764 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13554

void StSampleVoice::process_algint_13555(void) {  // fxn_6765 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13555

void StSampleVoice::process_algint_13556(void) {  // fxn_6766 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13556

void StSampleVoice::process_algint_13557(void) {  // fxn_6767 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13557

void StSampleVoice::process_algint_13558(void) {  // fxn_6768 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13558

void StSampleVoice::process_algint_13559(void) {  // fxn_6769 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13559

void StSampleVoice::process_algint_13560(void) {  // fxn_6770 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13560

void StSampleVoice::process_algint_13561(void) {  // fxn_6771 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13561

void StSampleVoice::process_algint_13562(void) {  // fxn_6772 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13562

void StSampleVoice::process_algint_13563(void) {  // fxn_6773 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13563

void StSampleVoice::process_algint_13564(void) {  // fxn_6774 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13564

void StSampleVoice::process_algint_13565(void) {  // fxn_6775 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13565

void StSampleVoice::process_algint_13566(void) {  // fxn_6776 (stereo)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13566

void StSampleVoice::process_algint_13567(void) {  // fxn_6777 (mono)
   // ****** alg=14 fltAll=0 fltPos=7 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13567

void StSampleVoice::process_algint_13568(void) {  // fxn_6778 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13568

void StSampleVoice::process_algint_13569(void) {  // fxn_6779 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13569

void StSampleVoice::process_algint_13570(void) {  // fxn_6780 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13570

void StSampleVoice::process_algint_13571(void) {  // fxn_6781 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13571

void StSampleVoice::process_algint_13572(void) {  // fxn_6782 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13572

void StSampleVoice::process_algint_13573(void) {  // fxn_6783 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13573

void StSampleVoice::process_algint_13574(void) {  // fxn_6784 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13574

void StSampleVoice::process_algint_13575(void) {  // fxn_6785 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13575

void StSampleVoice::process_algint_13576(void) {  // fxn_6786 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13576

void StSampleVoice::process_algint_13577(void) {  // fxn_6787 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13577

void StSampleVoice::process_algint_13578(void) {  // fxn_6788 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13578

void StSampleVoice::process_algint_13579(void) {  // fxn_6789 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13579

void StSampleVoice::process_algint_13580(void) {  // fxn_6790 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13580

void StSampleVoice::process_algint_13581(void) {  // fxn_6791 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13581

void StSampleVoice::process_algint_13582(void) {  // fxn_6792 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13582

void StSampleVoice::process_algint_13583(void) {  // fxn_6793 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13583

void StSampleVoice::process_algint_13584(void) {  // fxn_6794 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13584

void StSampleVoice::process_algint_13585(void) {  // fxn_6795 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13585

void StSampleVoice::process_algint_13586(void) {  // fxn_6796 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13586

void StSampleVoice::process_algint_13587(void) {  // fxn_6797 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13587

void StSampleVoice::process_algint_13588(void) {  // fxn_6798 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13588

void StSampleVoice::process_algint_13589(void) {  // fxn_6799 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13589

void StSampleVoice::process_algint_13590(void) {  // fxn_6800 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13590

void StSampleVoice::process_algint_13591(void) {  // fxn_6801 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13591

void StSampleVoice::process_algint_13592(void) {  // fxn_6802 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13592

void StSampleVoice::process_algint_13593(void) {  // fxn_6803 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13593

void StSampleVoice::process_algint_13594(void) {  // fxn_6804 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13594

void StSampleVoice::process_algint_13595(void) {  // fxn_6805 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13595

void StSampleVoice::process_algint_13596(void) {  // fxn_6806 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13596

void StSampleVoice::process_algint_13597(void) {  // fxn_6807 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13597

void StSampleVoice::process_algint_13598(void) {  // fxn_6808 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13598

void StSampleVoice::process_algint_13599(void) {  // fxn_6809 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(last_sample);
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13599

void StSampleVoice::process_algint_13600(void) {  // fxn_6810 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13600

void StSampleVoice::process_algint_13601(void) {  // fxn_6811 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13601

void StSampleVoice::process_algint_13602(void) {  // fxn_6812 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13602

void StSampleVoice::process_algint_13603(void) {  // fxn_6813 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13603

void StSampleVoice::process_algint_13604(void) {  // fxn_6814 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13604

void StSampleVoice::process_algint_13605(void) {  // fxn_6815 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13605

void StSampleVoice::process_algint_13606(void) {  // fxn_6816 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13606

void StSampleVoice::process_algint_13607(void) {  // fxn_6817 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13607

void StSampleVoice::process_algint_13608(void) {  // fxn_6818 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13608

void StSampleVoice::process_algint_13609(void) {  // fxn_6819 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13609

void StSampleVoice::process_algint_13610(void) {  // fxn_6820 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13610

void StSampleVoice::process_algint_13611(void) {  // fxn_6821 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13611

void StSampleVoice::process_algint_13612(void) {  // fxn_6822 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13612

void StSampleVoice::process_algint_13613(void) {  // fxn_6823 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13613

void StSampleVoice::process_algint_13614(void) {  // fxn_6824 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13614

void StSampleVoice::process_algint_13615(void) {  // fxn_6825 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13615

void StSampleVoice::process_algint_13616(void) {  // fxn_6826 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13616

void StSampleVoice::process_algint_13617(void) {  // fxn_6827 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13617

void StSampleVoice::process_algint_13618(void) {  // fxn_6828 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13618

void StSampleVoice::process_algint_13619(void) {  // fxn_6829 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13619

void StSampleVoice::process_algint_13620(void) {  // fxn_6830 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13620

void StSampleVoice::process_algint_13621(void) {  // fxn_6831 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13621

void StSampleVoice::process_algint_13622(void) {  // fxn_6832 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13622

void StSampleVoice::process_algint_13623(void) {  // fxn_6833 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13623

void StSampleVoice::process_algint_13624(void) {  // fxn_6834 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13624

void StSampleVoice::process_algint_13625(void) {  // fxn_6835 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13625

void StSampleVoice::process_algint_13626(void) {  // fxn_6836 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13626

void StSampleVoice::process_algint_13627(void) {  // fxn_6837 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13627

void StSampleVoice::process_algint_13628(void) {  // fxn_6838 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13628

void StSampleVoice::process_algint_13629(void) {  // fxn_6839 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13629

void StSampleVoice::process_algint_13630(void) {  // fxn_6840 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13630

void StSampleVoice::process_algint_13631(void) {  // fxn_6841 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13631

void StSampleVoice::process_algint_13728(void) {  // fxn_6842 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13728

void StSampleVoice::process_algint_13729(void) {  // fxn_6843 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13729

void StSampleVoice::process_algint_13730(void) {  // fxn_6844 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13730

void StSampleVoice::process_algint_13731(void) {  // fxn_6845 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13731

void StSampleVoice::process_algint_13732(void) {  // fxn_6846 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13732

void StSampleVoice::process_algint_13733(void) {  // fxn_6847 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13733

void StSampleVoice::process_algint_13734(void) {  // fxn_6848 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13734

void StSampleVoice::process_algint_13735(void) {  // fxn_6849 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13735

void StSampleVoice::process_algint_13736(void) {  // fxn_6850 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13736

void StSampleVoice::process_algint_13737(void) {  // fxn_6851 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13737

void StSampleVoice::process_algint_13738(void) {  // fxn_6852 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13738

void StSampleVoice::process_algint_13739(void) {  // fxn_6853 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13739

void StSampleVoice::process_algint_13740(void) {  // fxn_6854 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13740

void StSampleVoice::process_algint_13741(void) {  // fxn_6855 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13741

void StSampleVoice::process_algint_13742(void) {  // fxn_6856 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13742

void StSampleVoice::process_algint_13743(void) {  // fxn_6857 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13743

void StSampleVoice::process_algint_13744(void) {  // fxn_6858 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13744

void StSampleVoice::process_algint_13745(void) {  // fxn_6859 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13745

void StSampleVoice::process_algint_13746(void) {  // fxn_6860 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13746

void StSampleVoice::process_algint_13747(void) {  // fxn_6861 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13747

void StSampleVoice::process_algint_13748(void) {  // fxn_6862 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13748

void StSampleVoice::process_algint_13749(void) {  // fxn_6863 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13749

void StSampleVoice::process_algint_13750(void) {  // fxn_6864 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13750

void StSampleVoice::process_algint_13751(void) {  // fxn_6865 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13751

void StSampleVoice::process_algint_13752(void) {  // fxn_6866 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13752

void StSampleVoice::process_algint_13753(void) {  // fxn_6867 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13753

void StSampleVoice::process_algint_13754(void) {  // fxn_6868 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13754

void StSampleVoice::process_algint_13755(void) {  // fxn_6869 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13755

void StSampleVoice::process_algint_13756(void) {  // fxn_6870 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13756

void StSampleVoice::process_algint_13757(void) {  // fxn_6871 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13757

void StSampleVoice::process_algint_13758(void) {  // fxn_6872 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13758

void StSampleVoice::process_algint_13759(void) {  // fxn_6873 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13759

void StSampleVoice::process_algint_13824(void) {  // fxn_6874 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13824

void StSampleVoice::process_algint_13825(void) {  // fxn_6875 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13825

void StSampleVoice::process_algint_13826(void) {  // fxn_6876 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13826

void StSampleVoice::process_algint_13827(void) {  // fxn_6877 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13827

void StSampleVoice::process_algint_13828(void) {  // fxn_6878 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13828

void StSampleVoice::process_algint_13829(void) {  // fxn_6879 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13829

void StSampleVoice::process_algint_13830(void) {  // fxn_6880 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13830

void StSampleVoice::process_algint_13831(void) {  // fxn_6881 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13831

void StSampleVoice::process_algint_13832(void) {  // fxn_6882 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13832

void StSampleVoice::process_algint_13833(void) {  // fxn_6883 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13833

void StSampleVoice::process_algint_13834(void) {  // fxn_6884 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13834

void StSampleVoice::process_algint_13835(void) {  // fxn_6885 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13835

void StSampleVoice::process_algint_13836(void) {  // fxn_6886 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13836

void StSampleVoice::process_algint_13837(void) {  // fxn_6887 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13837

void StSampleVoice::process_algint_13838(void) {  // fxn_6888 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13838

void StSampleVoice::process_algint_13839(void) {  // fxn_6889 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13839

void StSampleVoice::process_algint_13840(void) {  // fxn_6890 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13840

void StSampleVoice::process_algint_13841(void) {  // fxn_6891 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13841

void StSampleVoice::process_algint_13842(void) {  // fxn_6892 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13842

void StSampleVoice::process_algint_13843(void) {  // fxn_6893 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13843

void StSampleVoice::process_algint_13844(void) {  // fxn_6894 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13844

void StSampleVoice::process_algint_13845(void) {  // fxn_6895 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13845

void StSampleVoice::process_algint_13846(void) {  // fxn_6896 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13846

void StSampleVoice::process_algint_13847(void) {  // fxn_6897 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13847

void StSampleVoice::process_algint_13848(void) {  // fxn_6898 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13848

void StSampleVoice::process_algint_13849(void) {  // fxn_6899 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13849

void StSampleVoice::process_algint_13850(void) {  // fxn_6900 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13850

void StSampleVoice::process_algint_13851(void) {  // fxn_6901 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13851

void StSampleVoice::process_algint_13852(void) {  // fxn_6902 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13852

void StSampleVoice::process_algint_13853(void) {  // fxn_6903 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13853

void StSampleVoice::process_algint_13854(void) {  // fxn_6904 (stereo)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13854

void StSampleVoice::process_algint_13855(void) {  // fxn_6905 (mono)
   // ****** alg=14 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
}  // end algInt=13855

void StSampleVoice::process_algint_13856(void) {  // fxn_6906 (stereo)
   // ****** alg=14 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=13856

void StSampleVoice::process_algint_13857(void) {  // fxn_6907 (mono)
   // ****** alg=14 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=13857

void StSampleVoice::process_algint_13858(void) {  // fxn_6908 (stereo)
   // ****** alg=14 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=13858

void StSampleVoice::process_algint_13859(void) {  // fxn_6909 (mono)
   // ****** alg=14 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=13859

void StSampleVoice::process_algint_13860(void) {  // fxn_6910 (stereo)
   // ****** alg=14 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=ta out=tb
   tb[0] = ta[0] * plugin_levels[1][0];
   tb[1] = ta[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=tc out=td
   td[0] = tc[0] * plugin_levels[3][0];
   td[1] = tc[1] * plugin_levels[3][1];
   last_sample[0] = tb[0] + td[0];
   last_sample[1] = tb[1] + td[1];
   filter(last_sample);
}  // end algInt=13860

