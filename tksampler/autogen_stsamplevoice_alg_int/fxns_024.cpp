// autogenerated by gen_plugin_alg_int.tks on 5-Aug-2024 17:26:47
//  ($FXN methods, $TBL table entries)

#include "../tksampler.h"

#define Dpro(a,m,i,o) plugin_cache_entries[(a)]->voice->voice_bus_read_offset = render_buf_sample_offset; sample->plugins[(a)].shared->info->info->process_replace(plugin_cache_entries[(a)]->voice, (m), (i), (o), 1u)

void StSampleVoice::process_algint_12421(void) {  // fxn_6143 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12421

void StSampleVoice::process_algint_12422(void) {  // fxn_6144 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12422

void StSampleVoice::process_algint_12423(void) {  // fxn_6145 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12423

void StSampleVoice::process_algint_12424(void) {  // fxn_6146 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12424

void StSampleVoice::process_algint_12425(void) {  // fxn_6147 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12425

void StSampleVoice::process_algint_12426(void) {  // fxn_6148 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12426

void StSampleVoice::process_algint_12427(void) {  // fxn_6149 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12427

void StSampleVoice::process_algint_12428(void) {  // fxn_6150 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12428

void StSampleVoice::process_algint_12429(void) {  // fxn_6151 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12429

void StSampleVoice::process_algint_12430(void) {  // fxn_6152 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12430

void StSampleVoice::process_algint_12431(void) {  // fxn_6153 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12431

void StSampleVoice::process_algint_12432(void) {  // fxn_6154 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12432

void StSampleVoice::process_algint_12433(void) {  // fxn_6155 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12433

void StSampleVoice::process_algint_12434(void) {  // fxn_6156 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12434

void StSampleVoice::process_algint_12435(void) {  // fxn_6157 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12435

void StSampleVoice::process_algint_12436(void) {  // fxn_6158 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12436

void StSampleVoice::process_algint_12437(void) {  // fxn_6159 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12437

void StSampleVoice::process_algint_12438(void) {  // fxn_6160 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12438

void StSampleVoice::process_algint_12439(void) {  // fxn_6161 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12439

void StSampleVoice::process_algint_12440(void) {  // fxn_6162 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12440

void StSampleVoice::process_algint_12441(void) {  // fxn_6163 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12441

void StSampleVoice::process_algint_12442(void) {  // fxn_6164 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12442

void StSampleVoice::process_algint_12443(void) {  // fxn_6165 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12443

void StSampleVoice::process_algint_12444(void) {  // fxn_6166 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12444

void StSampleVoice::process_algint_12445(void) {  // fxn_6167 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12445

void StSampleVoice::process_algint_12446(void) {  // fxn_6168 (stereo)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12446

void StSampleVoice::process_algint_12447(void) {  // fxn_6169 (mono)
   // ****** alg=13 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12447

void StSampleVoice::process_algint_12448(void) {  // fxn_6170 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12448

void StSampleVoice::process_algint_12449(void) {  // fxn_6171 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12449

void StSampleVoice::process_algint_12450(void) {  // fxn_6172 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12450

void StSampleVoice::process_algint_12451(void) {  // fxn_6173 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12451

void StSampleVoice::process_algint_12452(void) {  // fxn_6174 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12452

void StSampleVoice::process_algint_12453(void) {  // fxn_6175 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12453

void StSampleVoice::process_algint_12454(void) {  // fxn_6176 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12454

void StSampleVoice::process_algint_12455(void) {  // fxn_6177 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12455

void StSampleVoice::process_algint_12456(void) {  // fxn_6178 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12456

void StSampleVoice::process_algint_12457(void) {  // fxn_6179 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12457

void StSampleVoice::process_algint_12458(void) {  // fxn_6180 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12458

void StSampleVoice::process_algint_12459(void) {  // fxn_6181 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12459

void StSampleVoice::process_algint_12460(void) {  // fxn_6182 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12460

void StSampleVoice::process_algint_12461(void) {  // fxn_6183 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12461

void StSampleVoice::process_algint_12462(void) {  // fxn_6184 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12462

void StSampleVoice::process_algint_12463(void) {  // fxn_6185 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12463

void StSampleVoice::process_algint_12464(void) {  // fxn_6186 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12464

void StSampleVoice::process_algint_12465(void) {  // fxn_6187 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12465

void StSampleVoice::process_algint_12466(void) {  // fxn_6188 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12466

void StSampleVoice::process_algint_12467(void) {  // fxn_6189 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12467

void StSampleVoice::process_algint_12468(void) {  // fxn_6190 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12468

void StSampleVoice::process_algint_12469(void) {  // fxn_6191 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12469

void StSampleVoice::process_algint_12470(void) {  // fxn_6192 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12470

void StSampleVoice::process_algint_12471(void) {  // fxn_6193 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12471

void StSampleVoice::process_algint_12472(void) {  // fxn_6194 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12472

void StSampleVoice::process_algint_12473(void) {  // fxn_6195 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12473

void StSampleVoice::process_algint_12474(void) {  // fxn_6196 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12474

void StSampleVoice::process_algint_12475(void) {  // fxn_6197 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12475

void StSampleVoice::process_algint_12476(void) {  // fxn_6198 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12476

void StSampleVoice::process_algint_12477(void) {  // fxn_6199 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12477

void StSampleVoice::process_algint_12478(void) {  // fxn_6200 (stereo)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12478

void StSampleVoice::process_algint_12479(void) {  // fxn_6201 (mono)
   // ****** alg=13 fltAll=0 fltPos=5 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12479

void StSampleVoice::process_algint_12480(void) {  // fxn_6202 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12480

void StSampleVoice::process_algint_12481(void) {  // fxn_6203 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12481

void StSampleVoice::process_algint_12482(void) {  // fxn_6204 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12482

void StSampleVoice::process_algint_12483(void) {  // fxn_6205 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12483

void StSampleVoice::process_algint_12484(void) {  // fxn_6206 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12484

void StSampleVoice::process_algint_12485(void) {  // fxn_6207 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12485

void StSampleVoice::process_algint_12486(void) {  // fxn_6208 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12486

void StSampleVoice::process_algint_12487(void) {  // fxn_6209 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12487

void StSampleVoice::process_algint_12488(void) {  // fxn_6210 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12488

void StSampleVoice::process_algint_12489(void) {  // fxn_6211 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12489

void StSampleVoice::process_algint_12490(void) {  // fxn_6212 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12490

void StSampleVoice::process_algint_12491(void) {  // fxn_6213 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12491

void StSampleVoice::process_algint_12492(void) {  // fxn_6214 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12492

void StSampleVoice::process_algint_12493(void) {  // fxn_6215 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12493

void StSampleVoice::process_algint_12494(void) {  // fxn_6216 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12494

void StSampleVoice::process_algint_12495(void) {  // fxn_6217 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12495

void StSampleVoice::process_algint_12496(void) {  // fxn_6218 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12496

void StSampleVoice::process_algint_12497(void) {  // fxn_6219 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12497

void StSampleVoice::process_algint_12498(void) {  // fxn_6220 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12498

void StSampleVoice::process_algint_12499(void) {  // fxn_6221 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12499

void StSampleVoice::process_algint_12500(void) {  // fxn_6222 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12500

void StSampleVoice::process_algint_12501(void) {  // fxn_6223 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12501

void StSampleVoice::process_algint_12502(void) {  // fxn_6224 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12502

void StSampleVoice::process_algint_12503(void) {  // fxn_6225 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12503

void StSampleVoice::process_algint_12504(void) {  // fxn_6226 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12504

void StSampleVoice::process_algint_12505(void) {  // fxn_6227 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12505

void StSampleVoice::process_algint_12506(void) {  // fxn_6228 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12506

void StSampleVoice::process_algint_12507(void) {  // fxn_6229 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12507

void StSampleVoice::process_algint_12508(void) {  // fxn_6230 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12508

void StSampleVoice::process_algint_12509(void) {  // fxn_6231 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12509

void StSampleVoice::process_algint_12510(void) {  // fxn_6232 (stereo)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12510

void StSampleVoice::process_algint_12511(void) {  // fxn_6233 (mono)
   // ****** alg=13 fltAll=0 fltPos=6 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12511

void StSampleVoice::process_algint_12512(void) {  // fxn_6234 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12512

void StSampleVoice::process_algint_12513(void) {  // fxn_6235 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12513

void StSampleVoice::process_algint_12514(void) {  // fxn_6236 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12514

void StSampleVoice::process_algint_12515(void) {  // fxn_6237 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12515

void StSampleVoice::process_algint_12516(void) {  // fxn_6238 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12516

void StSampleVoice::process_algint_12517(void) {  // fxn_6239 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12517

void StSampleVoice::process_algint_12518(void) {  // fxn_6240 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12518

void StSampleVoice::process_algint_12519(void) {  // fxn_6241 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12519

void StSampleVoice::process_algint_12520(void) {  // fxn_6242 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12520

void StSampleVoice::process_algint_12521(void) {  // fxn_6243 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12521

void StSampleVoice::process_algint_12522(void) {  // fxn_6244 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12522

void StSampleVoice::process_algint_12523(void) {  // fxn_6245 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12523

void StSampleVoice::process_algint_12524(void) {  // fxn_6246 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12524

void StSampleVoice::process_algint_12525(void) {  // fxn_6247 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12525

void StSampleVoice::process_algint_12526(void) {  // fxn_6248 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12526

void StSampleVoice::process_algint_12527(void) {  // fxn_6249 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12527

void StSampleVoice::process_algint_12528(void) {  // fxn_6250 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12528

void StSampleVoice::process_algint_12529(void) {  // fxn_6251 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12529

void StSampleVoice::process_algint_12530(void) {  // fxn_6252 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12530

void StSampleVoice::process_algint_12531(void) {  // fxn_6253 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12531

void StSampleVoice::process_algint_12532(void) {  // fxn_6254 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12532

void StSampleVoice::process_algint_12533(void) {  // fxn_6255 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12533

void StSampleVoice::process_algint_12534(void) {  // fxn_6256 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12534

void StSampleVoice::process_algint_12535(void) {  // fxn_6257 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12535

void StSampleVoice::process_algint_12536(void) {  // fxn_6258 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12536

void StSampleVoice::process_algint_12537(void) {  // fxn_6259 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12537

void StSampleVoice::process_algint_12538(void) {  // fxn_6260 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12538

void StSampleVoice::process_algint_12539(void) {  // fxn_6261 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12539

void StSampleVoice::process_algint_12540(void) {  // fxn_6262 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12540

void StSampleVoice::process_algint_12541(void) {  // fxn_6263 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12541

void StSampleVoice::process_algint_12542(void) {  // fxn_6264 (stereo)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12542

void StSampleVoice::process_algint_12543(void) {  // fxn_6265 (mono)
   // ****** alg=13 fltAll=0 fltPos=7 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   filter(td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12543

void StSampleVoice::process_algint_12544(void) {  // fxn_6266 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12544

void StSampleVoice::process_algint_12545(void) {  // fxn_6267 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12545

void StSampleVoice::process_algint_12546(void) {  // fxn_6268 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12546

void StSampleVoice::process_algint_12547(void) {  // fxn_6269 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12547

void StSampleVoice::process_algint_12548(void) {  // fxn_6270 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12548

void StSampleVoice::process_algint_12549(void) {  // fxn_6271 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12549

void StSampleVoice::process_algint_12550(void) {  // fxn_6272 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12550

void StSampleVoice::process_algint_12551(void) {  // fxn_6273 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12551

void StSampleVoice::process_algint_12552(void) {  // fxn_6274 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12552

void StSampleVoice::process_algint_12553(void) {  // fxn_6275 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12553

void StSampleVoice::process_algint_12554(void) {  // fxn_6276 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12554

void StSampleVoice::process_algint_12555(void) {  // fxn_6277 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12555

void StSampleVoice::process_algint_12556(void) {  // fxn_6278 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12556

void StSampleVoice::process_algint_12557(void) {  // fxn_6279 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12557

void StSampleVoice::process_algint_12558(void) {  // fxn_6280 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12558

void StSampleVoice::process_algint_12559(void) {  // fxn_6281 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12559

void StSampleVoice::process_algint_12560(void) {  // fxn_6282 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12560

void StSampleVoice::process_algint_12561(void) {  // fxn_6283 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12561

void StSampleVoice::process_algint_12562(void) {  // fxn_6284 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12562

void StSampleVoice::process_algint_12563(void) {  // fxn_6285 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12563

void StSampleVoice::process_algint_12564(void) {  // fxn_6286 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12564

void StSampleVoice::process_algint_12565(void) {  // fxn_6287 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12565

void StSampleVoice::process_algint_12566(void) {  // fxn_6288 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12566

void StSampleVoice::process_algint_12567(void) {  // fxn_6289 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12567

void StSampleVoice::process_algint_12568(void) {  // fxn_6290 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12568

void StSampleVoice::process_algint_12569(void) {  // fxn_6291 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12569

void StSampleVoice::process_algint_12570(void) {  // fxn_6292 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12570

void StSampleVoice::process_algint_12571(void) {  // fxn_6293 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12571

void StSampleVoice::process_algint_12572(void) {  // fxn_6294 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12572

void StSampleVoice::process_algint_12573(void) {  // fxn_6295 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12573

void StSampleVoice::process_algint_12574(void) {  // fxn_6296 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12574

void StSampleVoice::process_algint_12575(void) {  // fxn_6297 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12575

void StSampleVoice::process_algint_12576(void) {  // fxn_6298 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12576

void StSampleVoice::process_algint_12577(void) {  // fxn_6299 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12577

void StSampleVoice::process_algint_12578(void) {  // fxn_6300 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12578

void StSampleVoice::process_algint_12579(void) {  // fxn_6301 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12579

void StSampleVoice::process_algint_12580(void) {  // fxn_6302 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12580

void StSampleVoice::process_algint_12581(void) {  // fxn_6303 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12581

void StSampleVoice::process_algint_12582(void) {  // fxn_6304 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12582

void StSampleVoice::process_algint_12583(void) {  // fxn_6305 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12583

void StSampleVoice::process_algint_12584(void) {  // fxn_6306 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12584

void StSampleVoice::process_algint_12585(void) {  // fxn_6307 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12585

void StSampleVoice::process_algint_12586(void) {  // fxn_6308 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12586

void StSampleVoice::process_algint_12587(void) {  // fxn_6309 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12587

void StSampleVoice::process_algint_12588(void) {  // fxn_6310 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12588

void StSampleVoice::process_algint_12589(void) {  // fxn_6311 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12589

void StSampleVoice::process_algint_12590(void) {  // fxn_6312 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12590

void StSampleVoice::process_algint_12591(void) {  // fxn_6313 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12591

void StSampleVoice::process_algint_12592(void) {  // fxn_6314 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12592

void StSampleVoice::process_algint_12593(void) {  // fxn_6315 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12593

void StSampleVoice::process_algint_12594(void) {  // fxn_6316 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12594

void StSampleVoice::process_algint_12595(void) {  // fxn_6317 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12595

void StSampleVoice::process_algint_12596(void) {  // fxn_6318 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12596

void StSampleVoice::process_algint_12597(void) {  // fxn_6319 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12597

void StSampleVoice::process_algint_12598(void) {  // fxn_6320 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12598

void StSampleVoice::process_algint_12599(void) {  // fxn_6321 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12599

void StSampleVoice::process_algint_12600(void) {  // fxn_6322 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12600

void StSampleVoice::process_algint_12601(void) {  // fxn_6323 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12601

void StSampleVoice::process_algint_12602(void) {  // fxn_6324 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12602

void StSampleVoice::process_algint_12603(void) {  // fxn_6325 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12603

void StSampleVoice::process_algint_12604(void) {  // fxn_6326 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12604

void StSampleVoice::process_algint_12605(void) {  // fxn_6327 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12605

void StSampleVoice::process_algint_12606(void) {  // fxn_6328 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12606

void StSampleVoice::process_algint_12607(void) {  // fxn_6329 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   filter(tb);
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12607

void StSampleVoice::process_algint_12608(void) {  // fxn_6330 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12608

void StSampleVoice::process_algint_12609(void) {  // fxn_6331 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12609

void StSampleVoice::process_algint_12610(void) {  // fxn_6332 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12610

void StSampleVoice::process_algint_12611(void) {  // fxn_6333 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12611

void StSampleVoice::process_algint_12612(void) {  // fxn_6334 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12612

void StSampleVoice::process_algint_12613(void) {  // fxn_6335 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12613

void StSampleVoice::process_algint_12614(void) {  // fxn_6336 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12614

void StSampleVoice::process_algint_12615(void) {  // fxn_6337 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12615

void StSampleVoice::process_algint_12616(void) {  // fxn_6338 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12616

void StSampleVoice::process_algint_12617(void) {  // fxn_6339 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12617

void StSampleVoice::process_algint_12618(void) {  // fxn_6340 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12618

void StSampleVoice::process_algint_12619(void) {  // fxn_6341 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12619

void StSampleVoice::process_algint_12620(void) {  // fxn_6342 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12620

void StSampleVoice::process_algint_12621(void) {  // fxn_6343 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12621

void StSampleVoice::process_algint_12622(void) {  // fxn_6344 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12622

void StSampleVoice::process_algint_12623(void) {  // fxn_6345 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12623

void StSampleVoice::process_algint_12624(void) {  // fxn_6346 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12624

void StSampleVoice::process_algint_12625(void) {  // fxn_6347 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12625

void StSampleVoice::process_algint_12626(void) {  // fxn_6348 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12626

void StSampleVoice::process_algint_12627(void) {  // fxn_6349 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12627

void StSampleVoice::process_algint_12628(void) {  // fxn_6350 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12628

void StSampleVoice::process_algint_12629(void) {  // fxn_6351 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12629

void StSampleVoice::process_algint_12630(void) {  // fxn_6352 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12630

void StSampleVoice::process_algint_12631(void) {  // fxn_6353 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12631

void StSampleVoice::process_algint_12632(void) {  // fxn_6354 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12632

void StSampleVoice::process_algint_12633(void) {  // fxn_6355 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12633

void StSampleVoice::process_algint_12634(void) {  // fxn_6356 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12634

void StSampleVoice::process_algint_12635(void) {  // fxn_6357 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12635

void StSampleVoice::process_algint_12636(void) {  // fxn_6358 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12636

void StSampleVoice::process_algint_12637(void) {  // fxn_6359 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12637

void StSampleVoice::process_algint_12638(void) {  // fxn_6360 (stereo)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12638

void StSampleVoice::process_algint_12639(void) {  // fxn_6361 (mono)
   // ****** alg=13 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=12639

void StSampleVoice::process_algint_12704(void) {  // fxn_6362 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12704

void StSampleVoice::process_algint_12705(void) {  // fxn_6363 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12705

void StSampleVoice::process_algint_12706(void) {  // fxn_6364 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12706

void StSampleVoice::process_algint_12707(void) {  // fxn_6365 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12707

void StSampleVoice::process_algint_12708(void) {  // fxn_6366 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12708

void StSampleVoice::process_algint_12709(void) {  // fxn_6367 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12709

void StSampleVoice::process_algint_12710(void) {  // fxn_6368 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12710

void StSampleVoice::process_algint_12711(void) {  // fxn_6369 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12711

void StSampleVoice::process_algint_12712(void) {  // fxn_6370 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12712

void StSampleVoice::process_algint_12713(void) {  // fxn_6371 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12713

void StSampleVoice::process_algint_12714(void) {  // fxn_6372 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12714

void StSampleVoice::process_algint_12715(void) {  // fxn_6373 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12715

void StSampleVoice::process_algint_12716(void) {  // fxn_6374 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12716

void StSampleVoice::process_algint_12717(void) {  // fxn_6375 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12717

void StSampleVoice::process_algint_12718(void) {  // fxn_6376 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12718

void StSampleVoice::process_algint_12719(void) {  // fxn_6377 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12719

void StSampleVoice::process_algint_12720(void) {  // fxn_6378 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12720

void StSampleVoice::process_algint_12721(void) {  // fxn_6379 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12721

void StSampleVoice::process_algint_12722(void) {  // fxn_6380 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12722

void StSampleVoice::process_algint_12723(void) {  // fxn_6381 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12723

void StSampleVoice::process_algint_12724(void) {  // fxn_6382 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12724

void StSampleVoice::process_algint_12725(void) {  // fxn_6383 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12725

void StSampleVoice::process_algint_12726(void) {  // fxn_6384 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12726

void StSampleVoice::process_algint_12727(void) {  // fxn_6385 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12727

void StSampleVoice::process_algint_12728(void) {  // fxn_6386 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12728

void StSampleVoice::process_algint_12729(void) {  // fxn_6387 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12729

void StSampleVoice::process_algint_12730(void) {  // fxn_6388 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12730

void StSampleVoice::process_algint_12731(void) {  // fxn_6389 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12731

void StSampleVoice::process_algint_12732(void) {  // fxn_6390 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12732

void StSampleVoice::process_algint_12733(void) {  // fxn_6391 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12733

void StSampleVoice::process_algint_12734(void) {  // fxn_6392 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12734

void StSampleVoice::process_algint_12735(void) {  // fxn_6393 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12735

void StSampleVoice::process_algint_12768(void) {  // fxn_6394 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12768

void StSampleVoice::process_algint_12769(void) {  // fxn_6395 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12769

void StSampleVoice::process_algint_12770(void) {  // fxn_6396 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12770

void StSampleVoice::process_algint_12771(void) {  // fxn_6397 (mono)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12771

void StSampleVoice::process_algint_12772(void) {  // fxn_6398 (stereo)
   // ****** alg=13 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   // process #3 in=tb out=tc
   tc[0] = tb[0] * plugin_levels[2][0];
   tc[1] = tb[1] * plugin_levels[2][1];
   // process #4 in=tb out=td
   td[0] = tb[0] * plugin_levels[3][0];
   td[1] = tb[1] * plugin_levels[3][1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=12772

