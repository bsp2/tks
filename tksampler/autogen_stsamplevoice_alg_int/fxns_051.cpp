// autogenerated by gen_plugin_alg_int.tks on 5-Aug-2024 17:26:47
//  ($FXN methods, $TBL table entries)

#include "../tksampler.h"

#define Dpro(a,m,i,o) plugin_cache_entries[(a)]->voice->voice_bus_read_offset = render_buf_sample_offset; sample->plugins[(a)].shared->info->info->process_replace(plugin_cache_entries[(a)]->voice, (m), (i), (o), 1u)

void StSampleVoice::process_algint_23885(void) {  // fxn_13055 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23885

void StSampleVoice::process_algint_23886(void) {  // fxn_13056 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23886

void StSampleVoice::process_algint_23887(void) {  // fxn_13057 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23887

void StSampleVoice::process_algint_23888(void) {  // fxn_13058 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23888

void StSampleVoice::process_algint_23889(void) {  // fxn_13059 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23889

void StSampleVoice::process_algint_23890(void) {  // fxn_13060 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23890

void StSampleVoice::process_algint_23891(void) {  // fxn_13061 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23891

void StSampleVoice::process_algint_23892(void) {  // fxn_13062 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23892

void StSampleVoice::process_algint_23893(void) {  // fxn_13063 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23893

void StSampleVoice::process_algint_23894(void) {  // fxn_13064 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23894

void StSampleVoice::process_algint_23895(void) {  // fxn_13065 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23895

void StSampleVoice::process_algint_23896(void) {  // fxn_13066 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23896

void StSampleVoice::process_algint_23897(void) {  // fxn_13067 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23897

void StSampleVoice::process_algint_23898(void) {  // fxn_13068 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23898

void StSampleVoice::process_algint_23899(void) {  // fxn_13069 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23899

void StSampleVoice::process_algint_23900(void) {  // fxn_13070 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23900

void StSampleVoice::process_algint_23901(void) {  // fxn_13071 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23901

void StSampleVoice::process_algint_23902(void) {  // fxn_13072 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23902

void StSampleVoice::process_algint_23903(void) {  // fxn_13073 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   filter(last_sample);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23903

void StSampleVoice::process_algint_23904(void) {  // fxn_13074 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23904

void StSampleVoice::process_algint_23905(void) {  // fxn_13075 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23905

void StSampleVoice::process_algint_23906(void) {  // fxn_13076 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23906

void StSampleVoice::process_algint_23907(void) {  // fxn_13077 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23907

void StSampleVoice::process_algint_23908(void) {  // fxn_13078 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23908

void StSampleVoice::process_algint_23909(void) {  // fxn_13079 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23909

void StSampleVoice::process_algint_23910(void) {  // fxn_13080 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23910

void StSampleVoice::process_algint_23911(void) {  // fxn_13081 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23911

void StSampleVoice::process_algint_23912(void) {  // fxn_13082 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23912

void StSampleVoice::process_algint_23913(void) {  // fxn_13083 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23913

void StSampleVoice::process_algint_23914(void) {  // fxn_13084 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23914

void StSampleVoice::process_algint_23915(void) {  // fxn_13085 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23915

void StSampleVoice::process_algint_23916(void) {  // fxn_13086 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23916

void StSampleVoice::process_algint_23917(void) {  // fxn_13087 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23917

void StSampleVoice::process_algint_23918(void) {  // fxn_13088 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23918

void StSampleVoice::process_algint_23919(void) {  // fxn_13089 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23919

void StSampleVoice::process_algint_23920(void) {  // fxn_13090 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23920

void StSampleVoice::process_algint_23921(void) {  // fxn_13091 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23921

void StSampleVoice::process_algint_23922(void) {  // fxn_13092 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23922

void StSampleVoice::process_algint_23923(void) {  // fxn_13093 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23923

void StSampleVoice::process_algint_23924(void) {  // fxn_13094 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23924

void StSampleVoice::process_algint_23925(void) {  // fxn_13095 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23925

void StSampleVoice::process_algint_23926(void) {  // fxn_13096 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23926

void StSampleVoice::process_algint_23927(void) {  // fxn_13097 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23927

void StSampleVoice::process_algint_23928(void) {  // fxn_13098 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23928

void StSampleVoice::process_algint_23929(void) {  // fxn_13099 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23929

void StSampleVoice::process_algint_23930(void) {  // fxn_13100 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23930

void StSampleVoice::process_algint_23931(void) {  // fxn_13101 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23931

void StSampleVoice::process_algint_23932(void) {  // fxn_13102 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23932

void StSampleVoice::process_algint_23933(void) {  // fxn_13103 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23933

void StSampleVoice::process_algint_23934(void) {  // fxn_13104 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23934

void StSampleVoice::process_algint_23935(void) {  // fxn_13105 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   filter(td);
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23935

void StSampleVoice::process_algint_23936(void) {  // fxn_13106 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23936

void StSampleVoice::process_algint_23937(void) {  // fxn_13107 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23937

void StSampleVoice::process_algint_23938(void) {  // fxn_13108 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23938

void StSampleVoice::process_algint_23939(void) {  // fxn_13109 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23939

void StSampleVoice::process_algint_23940(void) {  // fxn_13110 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23940

void StSampleVoice::process_algint_23941(void) {  // fxn_13111 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23941

void StSampleVoice::process_algint_23942(void) {  // fxn_13112 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23942

void StSampleVoice::process_algint_23943(void) {  // fxn_13113 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23943

void StSampleVoice::process_algint_23944(void) {  // fxn_13114 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23944

void StSampleVoice::process_algint_23945(void) {  // fxn_13115 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23945

void StSampleVoice::process_algint_23946(void) {  // fxn_13116 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23946

void StSampleVoice::process_algint_23947(void) {  // fxn_13117 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23947

void StSampleVoice::process_algint_23948(void) {  // fxn_13118 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23948

void StSampleVoice::process_algint_23949(void) {  // fxn_13119 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23949

void StSampleVoice::process_algint_23950(void) {  // fxn_13120 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23950

void StSampleVoice::process_algint_23951(void) {  // fxn_13121 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23951

void StSampleVoice::process_algint_23952(void) {  // fxn_13122 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23952

void StSampleVoice::process_algint_23953(void) {  // fxn_13123 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23953

void StSampleVoice::process_algint_23954(void) {  // fxn_13124 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23954

void StSampleVoice::process_algint_23955(void) {  // fxn_13125 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23955

void StSampleVoice::process_algint_23956(void) {  // fxn_13126 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23956

void StSampleVoice::process_algint_23957(void) {  // fxn_13127 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23957

void StSampleVoice::process_algint_23958(void) {  // fxn_13128 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23958

void StSampleVoice::process_algint_23959(void) {  // fxn_13129 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23959

void StSampleVoice::process_algint_23960(void) {  // fxn_13130 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23960

void StSampleVoice::process_algint_23961(void) {  // fxn_13131 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23961

void StSampleVoice::process_algint_23962(void) {  // fxn_13132 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23962

void StSampleVoice::process_algint_23963(void) {  // fxn_13133 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23963

void StSampleVoice::process_algint_23964(void) {  // fxn_13134 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23964

void StSampleVoice::process_algint_23965(void) {  // fxn_13135 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23965

void StSampleVoice::process_algint_23966(void) {  // fxn_13136 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23966

void StSampleVoice::process_algint_23967(void) {  // fxn_13137 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(last_sample);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23967

void StSampleVoice::process_algint_23968(void) {  // fxn_13138 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23968

void StSampleVoice::process_algint_23969(void) {  // fxn_13139 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23969

void StSampleVoice::process_algint_23970(void) {  // fxn_13140 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23970

void StSampleVoice::process_algint_23971(void) {  // fxn_13141 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23971

void StSampleVoice::process_algint_23972(void) {  // fxn_13142 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23972

void StSampleVoice::process_algint_23973(void) {  // fxn_13143 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23973

void StSampleVoice::process_algint_23974(void) {  // fxn_13144 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23974

void StSampleVoice::process_algint_23975(void) {  // fxn_13145 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23975

void StSampleVoice::process_algint_23976(void) {  // fxn_13146 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23976

void StSampleVoice::process_algint_23977(void) {  // fxn_13147 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23977

void StSampleVoice::process_algint_23978(void) {  // fxn_13148 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23978

void StSampleVoice::process_algint_23979(void) {  // fxn_13149 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23979

void StSampleVoice::process_algint_23980(void) {  // fxn_13150 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23980

void StSampleVoice::process_algint_23981(void) {  // fxn_13151 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23981

void StSampleVoice::process_algint_23982(void) {  // fxn_13152 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23982

void StSampleVoice::process_algint_23983(void) {  // fxn_13153 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23983

void StSampleVoice::process_algint_23984(void) {  // fxn_13154 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23984

void StSampleVoice::process_algint_23985(void) {  // fxn_13155 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23985

void StSampleVoice::process_algint_23986(void) {  // fxn_13156 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23986

void StSampleVoice::process_algint_23987(void) {  // fxn_13157 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23987

void StSampleVoice::process_algint_23988(void) {  // fxn_13158 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23988

void StSampleVoice::process_algint_23989(void) {  // fxn_13159 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23989

void StSampleVoice::process_algint_23990(void) {  // fxn_13160 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23990

void StSampleVoice::process_algint_23991(void) {  // fxn_13161 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23991

void StSampleVoice::process_algint_23992(void) {  // fxn_13162 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23992

void StSampleVoice::process_algint_23993(void) {  // fxn_13163 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23993

void StSampleVoice::process_algint_23994(void) {  // fxn_13164 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23994

void StSampleVoice::process_algint_23995(void) {  // fxn_13165 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23995

void StSampleVoice::process_algint_23996(void) {  // fxn_13166 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23996

void StSampleVoice::process_algint_23997(void) {  // fxn_13167 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23997

void StSampleVoice::process_algint_23998(void) {  // fxn_13168 (stereo)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23998

void StSampleVoice::process_algint_23999(void) {  // fxn_13169 (mono)
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   td[0] = tc[0] + td[0];
   td[1] = tc[1] + td[1];
   filter(td);
   td[0] = tb[0] + td[0];
   td[1] = tb[1] + td[1];
   last_sample[0] = ta[0] + td[0];
   last_sample[1] = ta[1] + td[1];
}  // end algInt=23999

void StSampleVoice::process_algint_24064(void) {  // fxn_13170 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24064

void StSampleVoice::process_algint_24065(void) {  // fxn_13171 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24065

void StSampleVoice::process_algint_24066(void) {  // fxn_13172 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24066

void StSampleVoice::process_algint_24067(void) {  // fxn_13173 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24067

void StSampleVoice::process_algint_24068(void) {  // fxn_13174 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24068

void StSampleVoice::process_algint_24069(void) {  // fxn_13175 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24069

void StSampleVoice::process_algint_24070(void) {  // fxn_13176 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24070

void StSampleVoice::process_algint_24071(void) {  // fxn_13177 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24071

void StSampleVoice::process_algint_24072(void) {  // fxn_13178 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24072

void StSampleVoice::process_algint_24073(void) {  // fxn_13179 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24073

void StSampleVoice::process_algint_24074(void) {  // fxn_13180 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24074

void StSampleVoice::process_algint_24075(void) {  // fxn_13181 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24075

void StSampleVoice::process_algint_24076(void) {  // fxn_13182 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24076

void StSampleVoice::process_algint_24077(void) {  // fxn_13183 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24077

void StSampleVoice::process_algint_24078(void) {  // fxn_13184 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24078

void StSampleVoice::process_algint_24079(void) {  // fxn_13185 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24079

void StSampleVoice::process_algint_24080(void) {  // fxn_13186 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24080

void StSampleVoice::process_algint_24081(void) {  // fxn_13187 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24081

void StSampleVoice::process_algint_24082(void) {  // fxn_13188 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24082

void StSampleVoice::process_algint_24083(void) {  // fxn_13189 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24083

void StSampleVoice::process_algint_24084(void) {  // fxn_13190 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24084

void StSampleVoice::process_algint_24085(void) {  // fxn_13191 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24085

void StSampleVoice::process_algint_24086(void) {  // fxn_13192 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24086

void StSampleVoice::process_algint_24087(void) {  // fxn_13193 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24087

void StSampleVoice::process_algint_24088(void) {  // fxn_13194 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24088

void StSampleVoice::process_algint_24089(void) {  // fxn_13195 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24089

void StSampleVoice::process_algint_24090(void) {  // fxn_13196 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24090

void StSampleVoice::process_algint_24091(void) {  // fxn_13197 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24091

void StSampleVoice::process_algint_24092(void) {  // fxn_13198 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24092

void StSampleVoice::process_algint_24093(void) {  // fxn_13199 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24093

void StSampleVoice::process_algint_24094(void) {  // fxn_13200 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24094

void StSampleVoice::process_algint_24095(void) {  // fxn_13201 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24095

void StSampleVoice::process_algint_24096(void) {  // fxn_13202 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24096

void StSampleVoice::process_algint_24097(void) {  // fxn_13203 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24097

void StSampleVoice::process_algint_24098(void) {  // fxn_13204 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24098

void StSampleVoice::process_algint_24099(void) {  // fxn_13205 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24099

void StSampleVoice::process_algint_24100(void) {  // fxn_13206 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24100

void StSampleVoice::process_algint_24101(void) {  // fxn_13207 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24101

void StSampleVoice::process_algint_24102(void) {  // fxn_13208 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24102

void StSampleVoice::process_algint_24103(void) {  // fxn_13209 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24103

void StSampleVoice::process_algint_24104(void) {  // fxn_13210 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24104

void StSampleVoice::process_algint_24105(void) {  // fxn_13211 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24105

void StSampleVoice::process_algint_24106(void) {  // fxn_13212 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24106

void StSampleVoice::process_algint_24107(void) {  // fxn_13213 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24107

void StSampleVoice::process_algint_24108(void) {  // fxn_13214 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24108

void StSampleVoice::process_algint_24109(void) {  // fxn_13215 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24109

void StSampleVoice::process_algint_24110(void) {  // fxn_13216 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24110

void StSampleVoice::process_algint_24111(void) {  // fxn_13217 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24111

void StSampleVoice::process_algint_24112(void) {  // fxn_13218 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24112

void StSampleVoice::process_algint_24113(void) {  // fxn_13219 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24113

void StSampleVoice::process_algint_24114(void) {  // fxn_13220 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24114

void StSampleVoice::process_algint_24115(void) {  // fxn_13221 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24115

void StSampleVoice::process_algint_24116(void) {  // fxn_13222 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24116

void StSampleVoice::process_algint_24117(void) {  // fxn_13223 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24117

void StSampleVoice::process_algint_24118(void) {  // fxn_13224 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24118

void StSampleVoice::process_algint_24119(void) {  // fxn_13225 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24119

void StSampleVoice::process_algint_24120(void) {  // fxn_13226 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24120

void StSampleVoice::process_algint_24121(void) {  // fxn_13227 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24121

void StSampleVoice::process_algint_24122(void) {  // fxn_13228 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24122

void StSampleVoice::process_algint_24123(void) {  // fxn_13229 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24123

void StSampleVoice::process_algint_24124(void) {  // fxn_13230 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24124

void StSampleVoice::process_algint_24125(void) {  // fxn_13231 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24125

void StSampleVoice::process_algint_24126(void) {  // fxn_13232 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24126

void StSampleVoice::process_algint_24127(void) {  // fxn_13233 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24127

void StSampleVoice::process_algint_24128(void) {  // fxn_13234 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24128

void StSampleVoice::process_algint_24129(void) {  // fxn_13235 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24129

void StSampleVoice::process_algint_24130(void) {  // fxn_13236 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24130

void StSampleVoice::process_algint_24131(void) {  // fxn_13237 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24131

void StSampleVoice::process_algint_24132(void) {  // fxn_13238 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24132

void StSampleVoice::process_algint_24133(void) {  // fxn_13239 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24133

void StSampleVoice::process_algint_24134(void) {  // fxn_13240 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24134

void StSampleVoice::process_algint_24135(void) {  // fxn_13241 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24135

void StSampleVoice::process_algint_24136(void) {  // fxn_13242 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24136

void StSampleVoice::process_algint_24137(void) {  // fxn_13243 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24137

void StSampleVoice::process_algint_24138(void) {  // fxn_13244 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24138

void StSampleVoice::process_algint_24139(void) {  // fxn_13245 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24139

void StSampleVoice::process_algint_24140(void) {  // fxn_13246 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24140

void StSampleVoice::process_algint_24141(void) {  // fxn_13247 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24141

void StSampleVoice::process_algint_24142(void) {  // fxn_13248 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24142

void StSampleVoice::process_algint_24143(void) {  // fxn_13249 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24143

void StSampleVoice::process_algint_24144(void) {  // fxn_13250 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24144

void StSampleVoice::process_algint_24145(void) {  // fxn_13251 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24145

void StSampleVoice::process_algint_24146(void) {  // fxn_13252 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24146

void StSampleVoice::process_algint_24147(void) {  // fxn_13253 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24147

void StSampleVoice::process_algint_24148(void) {  // fxn_13254 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24148

void StSampleVoice::process_algint_24149(void) {  // fxn_13255 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24149

void StSampleVoice::process_algint_24150(void) {  // fxn_13256 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24150

void StSampleVoice::process_algint_24151(void) {  // fxn_13257 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24151

void StSampleVoice::process_algint_24152(void) {  // fxn_13258 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24152

void StSampleVoice::process_algint_24153(void) {  // fxn_13259 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24153

void StSampleVoice::process_algint_24154(void) {  // fxn_13260 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24154

void StSampleVoice::process_algint_24155(void) {  // fxn_13261 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24155

void StSampleVoice::process_algint_24156(void) {  // fxn_13262 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24156

void StSampleVoice::process_algint_24157(void) {  // fxn_13263 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24157

void StSampleVoice::process_algint_24158(void) {  // fxn_13264 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24158

void StSampleVoice::process_algint_24159(void) {  // fxn_13265 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24159

void StSampleVoice::process_algint_24160(void) {  // fxn_13266 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24160

void StSampleVoice::process_algint_24161(void) {  // fxn_13267 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24161

void StSampleVoice::process_algint_24162(void) {  // fxn_13268 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24162

void StSampleVoice::process_algint_24163(void) {  // fxn_13269 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24163

void StSampleVoice::process_algint_24164(void) {  // fxn_13270 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24164

void StSampleVoice::process_algint_24165(void) {  // fxn_13271 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24165

void StSampleVoice::process_algint_24166(void) {  // fxn_13272 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24166

void StSampleVoice::process_algint_24167(void) {  // fxn_13273 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24167

void StSampleVoice::process_algint_24168(void) {  // fxn_13274 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24168

void StSampleVoice::process_algint_24169(void) {  // fxn_13275 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24169

void StSampleVoice::process_algint_24170(void) {  // fxn_13276 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24170

void StSampleVoice::process_algint_24171(void) {  // fxn_13277 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24171

void StSampleVoice::process_algint_24172(void) {  // fxn_13278 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24172

void StSampleVoice::process_algint_24173(void) {  // fxn_13279 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24173

void StSampleVoice::process_algint_24174(void) {  // fxn_13280 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24174

void StSampleVoice::process_algint_24175(void) {  // fxn_13281 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24175

void StSampleVoice::process_algint_24176(void) {  // fxn_13282 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24176

void StSampleVoice::process_algint_24177(void) {  // fxn_13283 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24177

void StSampleVoice::process_algint_24178(void) {  // fxn_13284 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24178

void StSampleVoice::process_algint_24179(void) {  // fxn_13285 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24179

void StSampleVoice::process_algint_24180(void) {  // fxn_13286 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24180

void StSampleVoice::process_algint_24181(void) {  // fxn_13287 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24181

void StSampleVoice::process_algint_24182(void) {  // fxn_13288 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24182

void StSampleVoice::process_algint_24183(void) {  // fxn_13289 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24183

void StSampleVoice::process_algint_24184(void) {  // fxn_13290 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24184

void StSampleVoice::process_algint_24185(void) {  // fxn_13291 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24185

void StSampleVoice::process_algint_24186(void) {  // fxn_13292 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24186

void StSampleVoice::process_algint_24187(void) {  // fxn_13293 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24187

void StSampleVoice::process_algint_24188(void) {  // fxn_13294 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24188

void StSampleVoice::process_algint_24189(void) {  // fxn_13295 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24189

void StSampleVoice::process_algint_24190(void) {  // fxn_13296 (stereo)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24190

void StSampleVoice::process_algint_24191(void) {  // fxn_13297 (mono)
   // ****** alg=24 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=24191

void StSampleVoice::process_algint_24320(void) {  // fxn_13298 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24320

void StSampleVoice::process_algint_24321(void) {  // fxn_13299 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24321

void StSampleVoice::process_algint_24322(void) {  // fxn_13300 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24322

void StSampleVoice::process_algint_24323(void) {  // fxn_13301 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24323

void StSampleVoice::process_algint_24324(void) {  // fxn_13302 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24324

void StSampleVoice::process_algint_24325(void) {  // fxn_13303 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24325

void StSampleVoice::process_algint_24326(void) {  // fxn_13304 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24326

void StSampleVoice::process_algint_24327(void) {  // fxn_13305 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24327

void StSampleVoice::process_algint_24328(void) {  // fxn_13306 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24328

void StSampleVoice::process_algint_24329(void) {  // fxn_13307 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24329

void StSampleVoice::process_algint_24330(void) {  // fxn_13308 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24330

void StSampleVoice::process_algint_24331(void) {  // fxn_13309 (mono)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24331

void StSampleVoice::process_algint_24332(void) {  // fxn_13310 (stereo)
   // ****** alg=24 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=24332

