// autogenerated by gen_plugin_alg_int.tks on 5-Aug-2024 17:26:47
//  ($FXN methods, $TBL table entries)

#include "../tksampler.h"

#define Dpro(a,m,i,o) plugin_cache_entries[(a)]->voice->voice_bus_read_offset = render_buf_sample_offset; sample->plugins[(a)].shared->info->info->process_replace(plugin_cache_entries[(a)]->voice, (m), (i), (o), 1u)

void StSampleVoice::process_algint_2593(void) {  // fxn_1279 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2593

void StSampleVoice::process_algint_2594(void) {  // fxn_1280 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2594

void StSampleVoice::process_algint_2595(void) {  // fxn_1281 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2595

void StSampleVoice::process_algint_2596(void) {  // fxn_1282 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2596

void StSampleVoice::process_algint_2597(void) {  // fxn_1283 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2597

void StSampleVoice::process_algint_2598(void) {  // fxn_1284 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2598

void StSampleVoice::process_algint_2599(void) {  // fxn_1285 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2599

void StSampleVoice::process_algint_2600(void) {  // fxn_1286 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2600

void StSampleVoice::process_algint_2601(void) {  // fxn_1287 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2601

void StSampleVoice::process_algint_2602(void) {  // fxn_1288 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2602

void StSampleVoice::process_algint_2603(void) {  // fxn_1289 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2603

void StSampleVoice::process_algint_2604(void) {  // fxn_1290 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2604

void StSampleVoice::process_algint_2605(void) {  // fxn_1291 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2605

void StSampleVoice::process_algint_2606(void) {  // fxn_1292 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2606

void StSampleVoice::process_algint_2607(void) {  // fxn_1293 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2607

void StSampleVoice::process_algint_2608(void) {  // fxn_1294 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2608

void StSampleVoice::process_algint_2609(void) {  // fxn_1295 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2609

void StSampleVoice::process_algint_2610(void) {  // fxn_1296 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2610

void StSampleVoice::process_algint_2611(void) {  // fxn_1297 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2611

void StSampleVoice::process_algint_2612(void) {  // fxn_1298 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2612

void StSampleVoice::process_algint_2613(void) {  // fxn_1299 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2613

void StSampleVoice::process_algint_2614(void) {  // fxn_1300 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2614

void StSampleVoice::process_algint_2615(void) {  // fxn_1301 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2615

void StSampleVoice::process_algint_2616(void) {  // fxn_1302 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2616

void StSampleVoice::process_algint_2617(void) {  // fxn_1303 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2617

void StSampleVoice::process_algint_2618(void) {  // fxn_1304 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2618

void StSampleVoice::process_algint_2619(void) {  // fxn_1305 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2619

void StSampleVoice::process_algint_2620(void) {  // fxn_1306 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2620

void StSampleVoice::process_algint_2621(void) {  // fxn_1307 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2621

void StSampleVoice::process_algint_2622(void) {  // fxn_1308 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2622

void StSampleVoice::process_algint_2623(void) {  // fxn_1309 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2623

void StSampleVoice::process_algint_2816(void) {  // fxn_1310 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2816

void StSampleVoice::process_algint_2817(void) {  // fxn_1311 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=---- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2817

void StSampleVoice::process_algint_2818(void) {  // fxn_1312 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2818

void StSampleVoice::process_algint_2819(void) {  // fxn_1313 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=---1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2819

void StSampleVoice::process_algint_2820(void) {  // fxn_1314 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2820

void StSampleVoice::process_algint_2821(void) {  // fxn_1315 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=--2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2821

void StSampleVoice::process_algint_2822(void) {  // fxn_1316 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2822

void StSampleVoice::process_algint_2823(void) {  // fxn_1317 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=--21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2823

void StSampleVoice::process_algint_2824(void) {  // fxn_1318 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2824

void StSampleVoice::process_algint_2825(void) {  // fxn_1319 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=-3-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2825

void StSampleVoice::process_algint_2826(void) {  // fxn_1320 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2826

void StSampleVoice::process_algint_2827(void) {  // fxn_1321 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=-3-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2827

void StSampleVoice::process_algint_2828(void) {  // fxn_1322 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2828

void StSampleVoice::process_algint_2829(void) {  // fxn_1323 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=-32- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2829

void StSampleVoice::process_algint_2830(void) {  // fxn_1324 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2830

void StSampleVoice::process_algint_2831(void) {  // fxn_1325 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=-321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2831

void StSampleVoice::process_algint_2832(void) {  // fxn_1326 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2832

void StSampleVoice::process_algint_2833(void) {  // fxn_1327 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=4--- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2833

void StSampleVoice::process_algint_2834(void) {  // fxn_1328 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2834

void StSampleVoice::process_algint_2835(void) {  // fxn_1329 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=4--1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2835

void StSampleVoice::process_algint_2836(void) {  // fxn_1330 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2836

void StSampleVoice::process_algint_2837(void) {  // fxn_1331 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=4-2- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2837

void StSampleVoice::process_algint_2838(void) {  // fxn_1332 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2838

void StSampleVoice::process_algint_2839(void) {  // fxn_1333 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=4-21 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2839

void StSampleVoice::process_algint_2840(void) {  // fxn_1334 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2840

void StSampleVoice::process_algint_2841(void) {  // fxn_1335 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=43-- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2841

void StSampleVoice::process_algint_2842(void) {  // fxn_1336 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2842

void StSampleVoice::process_algint_2843(void) {  // fxn_1337 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=43-1 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2843

void StSampleVoice::process_algint_2844(void) {  // fxn_1338 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2844

void StSampleVoice::process_algint_2845(void) {  // fxn_1339 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=432- ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2845

void StSampleVoice::process_algint_2846(void) {  // fxn_1340 (stereo)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2846

void StSampleVoice::process_algint_2847(void) {  // fxn_1341 (mono)
   // ****** alg=3 fltAll=1 fltPos=0 pluginMask=4321 ******
   filter(last_sample);
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=2847

void StSampleVoice::process_algint_2848(void) {  // fxn_1342 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2848

void StSampleVoice::process_algint_2849(void) {  // fxn_1343 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2849

void StSampleVoice::process_algint_2850(void) {  // fxn_1344 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2850

void StSampleVoice::process_algint_2851(void) {  // fxn_1345 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2851

void StSampleVoice::process_algint_2852(void) {  // fxn_1346 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2852

void StSampleVoice::process_algint_2853(void) {  // fxn_1347 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2853

void StSampleVoice::process_algint_2854(void) {  // fxn_1348 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2854

void StSampleVoice::process_algint_2855(void) {  // fxn_1349 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2855

void StSampleVoice::process_algint_2856(void) {  // fxn_1350 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2856

void StSampleVoice::process_algint_2857(void) {  // fxn_1351 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2857

void StSampleVoice::process_algint_2858(void) {  // fxn_1352 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2858

void StSampleVoice::process_algint_2859(void) {  // fxn_1353 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2859

void StSampleVoice::process_algint_2860(void) {  // fxn_1354 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2860

void StSampleVoice::process_algint_2861(void) {  // fxn_1355 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2861

void StSampleVoice::process_algint_2862(void) {  // fxn_1356 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2862

void StSampleVoice::process_algint_2863(void) {  // fxn_1357 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2863

void StSampleVoice::process_algint_2864(void) {  // fxn_1358 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2864

void StSampleVoice::process_algint_2865(void) {  // fxn_1359 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2865

void StSampleVoice::process_algint_2866(void) {  // fxn_1360 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2866

void StSampleVoice::process_algint_2867(void) {  // fxn_1361 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2867

void StSampleVoice::process_algint_2868(void) {  // fxn_1362 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2868

void StSampleVoice::process_algint_2869(void) {  // fxn_1363 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2869

void StSampleVoice::process_algint_2870(void) {  // fxn_1364 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2870

void StSampleVoice::process_algint_2871(void) {  // fxn_1365 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2871

void StSampleVoice::process_algint_2872(void) {  // fxn_1366 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2872

void StSampleVoice::process_algint_2873(void) {  // fxn_1367 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2873

void StSampleVoice::process_algint_2874(void) {  // fxn_1368 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2874

void StSampleVoice::process_algint_2875(void) {  // fxn_1369 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2875

void StSampleVoice::process_algint_2876(void) {  // fxn_1370 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2876

void StSampleVoice::process_algint_2877(void) {  // fxn_1371 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2877

void StSampleVoice::process_algint_2878(void) {  // fxn_1372 (stereo)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2878

void StSampleVoice::process_algint_2879(void) {  // fxn_1373 (mono)
   // ****** alg=3 fltAll=2 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
   filter(last_sample);
}  // end algInt=2879

void StSampleVoice::process_algint_3072(void) {  // fxn_1374 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3072

void StSampleVoice::process_algint_3073(void) {  // fxn_1375 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3073

void StSampleVoice::process_algint_3074(void) {  // fxn_1376 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3074

void StSampleVoice::process_algint_3075(void) {  // fxn_1377 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3075

void StSampleVoice::process_algint_3076(void) {  // fxn_1378 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3076

void StSampleVoice::process_algint_3077(void) {  // fxn_1379 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3077

void StSampleVoice::process_algint_3078(void) {  // fxn_1380 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3078

void StSampleVoice::process_algint_3079(void) {  // fxn_1381 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3079

void StSampleVoice::process_algint_3080(void) {  // fxn_1382 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3080

void StSampleVoice::process_algint_3081(void) {  // fxn_1383 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3081

void StSampleVoice::process_algint_3082(void) {  // fxn_1384 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3082

void StSampleVoice::process_algint_3083(void) {  // fxn_1385 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3083

void StSampleVoice::process_algint_3084(void) {  // fxn_1386 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3084

void StSampleVoice::process_algint_3085(void) {  // fxn_1387 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3085

void StSampleVoice::process_algint_3086(void) {  // fxn_1388 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3086

void StSampleVoice::process_algint_3087(void) {  // fxn_1389 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3087

void StSampleVoice::process_algint_3088(void) {  // fxn_1390 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3088

void StSampleVoice::process_algint_3089(void) {  // fxn_1391 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3089

void StSampleVoice::process_algint_3090(void) {  // fxn_1392 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3090

void StSampleVoice::process_algint_3091(void) {  // fxn_1393 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3091

void StSampleVoice::process_algint_3092(void) {  // fxn_1394 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3092

void StSampleVoice::process_algint_3093(void) {  // fxn_1395 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3093

void StSampleVoice::process_algint_3094(void) {  // fxn_1396 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3094

void StSampleVoice::process_algint_3095(void) {  // fxn_1397 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3095

void StSampleVoice::process_algint_3096(void) {  // fxn_1398 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3096

void StSampleVoice::process_algint_3097(void) {  // fxn_1399 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3097

void StSampleVoice::process_algint_3098(void) {  // fxn_1400 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3098

void StSampleVoice::process_algint_3099(void) {  // fxn_1401 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3099

void StSampleVoice::process_algint_3100(void) {  // fxn_1402 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3100

void StSampleVoice::process_algint_3101(void) {  // fxn_1403 (mono)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3101

void StSampleVoice::process_algint_3102(void) {  // fxn_1404 (stereo)
   // ****** alg=4 fltAll=0 fltPos=0 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   filter(ta);
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3102

void StSampleVoice::process_algint_3136(void) {  // fxn_1405 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3136

void StSampleVoice::process_algint_3137(void) {  // fxn_1406 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3137

void StSampleVoice::process_algint_3138(void) {  // fxn_1407 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3138

void StSampleVoice::process_algint_3139(void) {  // fxn_1408 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3139

void StSampleVoice::process_algint_3140(void) {  // fxn_1409 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3140

void StSampleVoice::process_algint_3141(void) {  // fxn_1410 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3141

void StSampleVoice::process_algint_3142(void) {  // fxn_1411 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3142

void StSampleVoice::process_algint_3143(void) {  // fxn_1412 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3143

void StSampleVoice::process_algint_3144(void) {  // fxn_1413 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3144

void StSampleVoice::process_algint_3145(void) {  // fxn_1414 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3145

void StSampleVoice::process_algint_3146(void) {  // fxn_1415 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3146

void StSampleVoice::process_algint_3147(void) {  // fxn_1416 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3147

void StSampleVoice::process_algint_3148(void) {  // fxn_1417 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3148

void StSampleVoice::process_algint_3149(void) {  // fxn_1418 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3149

void StSampleVoice::process_algint_3150(void) {  // fxn_1419 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3150

void StSampleVoice::process_algint_3151(void) {  // fxn_1420 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3151

void StSampleVoice::process_algint_3152(void) {  // fxn_1421 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3152

void StSampleVoice::process_algint_3153(void) {  // fxn_1422 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3153

void StSampleVoice::process_algint_3154(void) {  // fxn_1423 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3154

void StSampleVoice::process_algint_3155(void) {  // fxn_1424 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3155

void StSampleVoice::process_algint_3156(void) {  // fxn_1425 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3156

void StSampleVoice::process_algint_3157(void) {  // fxn_1426 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3157

void StSampleVoice::process_algint_3158(void) {  // fxn_1427 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3158

void StSampleVoice::process_algint_3159(void) {  // fxn_1428 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3159

void StSampleVoice::process_algint_3160(void) {  // fxn_1429 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3160

void StSampleVoice::process_algint_3161(void) {  // fxn_1430 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3161

void StSampleVoice::process_algint_3162(void) {  // fxn_1431 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3162

void StSampleVoice::process_algint_3163(void) {  // fxn_1432 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3163

void StSampleVoice::process_algint_3164(void) {  // fxn_1433 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3164

void StSampleVoice::process_algint_3165(void) {  // fxn_1434 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3165

void StSampleVoice::process_algint_3166(void) {  // fxn_1435 (stereo)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3166

void StSampleVoice::process_algint_3167(void) {  // fxn_1436 (mono)
   // ****** alg=4 fltAll=0 fltPos=2 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3167

void StSampleVoice::process_algint_3168(void) {  // fxn_1437 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3168

void StSampleVoice::process_algint_3169(void) {  // fxn_1438 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3169

void StSampleVoice::process_algint_3170(void) {  // fxn_1439 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3170

void StSampleVoice::process_algint_3171(void) {  // fxn_1440 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3171

void StSampleVoice::process_algint_3172(void) {  // fxn_1441 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3172

void StSampleVoice::process_algint_3173(void) {  // fxn_1442 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3173

void StSampleVoice::process_algint_3174(void) {  // fxn_1443 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3174

void StSampleVoice::process_algint_3175(void) {  // fxn_1444 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3175

void StSampleVoice::process_algint_3176(void) {  // fxn_1445 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3176

void StSampleVoice::process_algint_3177(void) {  // fxn_1446 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3177

void StSampleVoice::process_algint_3178(void) {  // fxn_1447 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3178

void StSampleVoice::process_algint_3179(void) {  // fxn_1448 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3179

void StSampleVoice::process_algint_3180(void) {  // fxn_1449 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3180

void StSampleVoice::process_algint_3181(void) {  // fxn_1450 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3181

void StSampleVoice::process_algint_3182(void) {  // fxn_1451 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3182

void StSampleVoice::process_algint_3183(void) {  // fxn_1452 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3183

void StSampleVoice::process_algint_3184(void) {  // fxn_1453 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3184

void StSampleVoice::process_algint_3185(void) {  // fxn_1454 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3185

void StSampleVoice::process_algint_3186(void) {  // fxn_1455 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3186

void StSampleVoice::process_algint_3187(void) {  // fxn_1456 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3187

void StSampleVoice::process_algint_3188(void) {  // fxn_1457 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3188

void StSampleVoice::process_algint_3189(void) {  // fxn_1458 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3189

void StSampleVoice::process_algint_3190(void) {  // fxn_1459 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3190

void StSampleVoice::process_algint_3191(void) {  // fxn_1460 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3191

void StSampleVoice::process_algint_3192(void) {  // fxn_1461 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3192

void StSampleVoice::process_algint_3193(void) {  // fxn_1462 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3193

void StSampleVoice::process_algint_3194(void) {  // fxn_1463 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3194

void StSampleVoice::process_algint_3195(void) {  // fxn_1464 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3195

void StSampleVoice::process_algint_3196(void) {  // fxn_1465 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3196

void StSampleVoice::process_algint_3197(void) {  // fxn_1466 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3197

void StSampleVoice::process_algint_3198(void) {  // fxn_1467 (stereo)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3198

void StSampleVoice::process_algint_3199(void) {  // fxn_1468 (mono)
   // ****** alg=4 fltAll=0 fltPos=3 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   filter(tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3199

void StSampleVoice::process_algint_3200(void) {  // fxn_1469 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3200

void StSampleVoice::process_algint_3201(void) {  // fxn_1470 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3201

void StSampleVoice::process_algint_3202(void) {  // fxn_1471 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3202

void StSampleVoice::process_algint_3203(void) {  // fxn_1472 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3203

void StSampleVoice::process_algint_3204(void) {  // fxn_1473 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3204

void StSampleVoice::process_algint_3205(void) {  // fxn_1474 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3205

void StSampleVoice::process_algint_3206(void) {  // fxn_1475 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3206

void StSampleVoice::process_algint_3207(void) {  // fxn_1476 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3207

void StSampleVoice::process_algint_3208(void) {  // fxn_1477 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3208

void StSampleVoice::process_algint_3209(void) {  // fxn_1478 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3209

void StSampleVoice::process_algint_3210(void) {  // fxn_1479 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3210

void StSampleVoice::process_algint_3211(void) {  // fxn_1480 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3211

void StSampleVoice::process_algint_3212(void) {  // fxn_1481 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3212

void StSampleVoice::process_algint_3213(void) {  // fxn_1482 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3213

void StSampleVoice::process_algint_3214(void) {  // fxn_1483 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3214

void StSampleVoice::process_algint_3215(void) {  // fxn_1484 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3215

void StSampleVoice::process_algint_3216(void) {  // fxn_1485 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3216

void StSampleVoice::process_algint_3217(void) {  // fxn_1486 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3217

void StSampleVoice::process_algint_3218(void) {  // fxn_1487 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3218

void StSampleVoice::process_algint_3219(void) {  // fxn_1488 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3219

void StSampleVoice::process_algint_3220(void) {  // fxn_1489 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3220

void StSampleVoice::process_algint_3221(void) {  // fxn_1490 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3221

void StSampleVoice::process_algint_3222(void) {  // fxn_1491 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3222

void StSampleVoice::process_algint_3223(void) {  // fxn_1492 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3223

void StSampleVoice::process_algint_3224(void) {  // fxn_1493 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3224

void StSampleVoice::process_algint_3225(void) {  // fxn_1494 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3225

void StSampleVoice::process_algint_3226(void) {  // fxn_1495 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3226

void StSampleVoice::process_algint_3227(void) {  // fxn_1496 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3227

void StSampleVoice::process_algint_3228(void) {  // fxn_1497 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3228

void StSampleVoice::process_algint_3229(void) {  // fxn_1498 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3229

void StSampleVoice::process_algint_3230(void) {  // fxn_1499 (stereo)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 0, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3230

void StSampleVoice::process_algint_3231(void) {  // fxn_1500 (mono)
   // ****** alg=4 fltAll=0 fltPos=4 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   Dpro(2, 1, tc, tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3231

void StSampleVoice::process_algint_3232(void) {  // fxn_1501 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3232

void StSampleVoice::process_algint_3233(void) {  // fxn_1502 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3233

void StSampleVoice::process_algint_3234(void) {  // fxn_1503 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3234

void StSampleVoice::process_algint_3235(void) {  // fxn_1504 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=---1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3235

void StSampleVoice::process_algint_3236(void) {  // fxn_1505 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3236

void StSampleVoice::process_algint_3237(void) {  // fxn_1506 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=--2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3237

void StSampleVoice::process_algint_3238(void) {  // fxn_1507 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3238

void StSampleVoice::process_algint_3239(void) {  // fxn_1508 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=--21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3239

void StSampleVoice::process_algint_3240(void) {  // fxn_1509 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3240

void StSampleVoice::process_algint_3241(void) {  // fxn_1510 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=-3-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3241

void StSampleVoice::process_algint_3242(void) {  // fxn_1511 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3242

void StSampleVoice::process_algint_3243(void) {  // fxn_1512 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=-3-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3243

void StSampleVoice::process_algint_3244(void) {  // fxn_1513 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3244

void StSampleVoice::process_algint_3245(void) {  // fxn_1514 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=-32- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3245

void StSampleVoice::process_algint_3246(void) {  // fxn_1515 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3246

void StSampleVoice::process_algint_3247(void) {  // fxn_1516 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=-321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3247

void StSampleVoice::process_algint_3248(void) {  // fxn_1517 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3248

void StSampleVoice::process_algint_3249(void) {  // fxn_1518 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=4--- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3249

void StSampleVoice::process_algint_3250(void) {  // fxn_1519 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3250

void StSampleVoice::process_algint_3251(void) {  // fxn_1520 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=4--1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3251

void StSampleVoice::process_algint_3252(void) {  // fxn_1521 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3252

void StSampleVoice::process_algint_3253(void) {  // fxn_1522 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=4-2- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3253

void StSampleVoice::process_algint_3254(void) {  // fxn_1523 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3254

void StSampleVoice::process_algint_3255(void) {  // fxn_1524 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=4-21 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3255

void StSampleVoice::process_algint_3256(void) {  // fxn_1525 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3256

void StSampleVoice::process_algint_3257(void) {  // fxn_1526 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=43-- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3257

void StSampleVoice::process_algint_3258(void) {  // fxn_1527 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3258

void StSampleVoice::process_algint_3259(void) {  // fxn_1528 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=43-1 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3259

void StSampleVoice::process_algint_3260(void) {  // fxn_1529 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3260

void StSampleVoice::process_algint_3261(void) {  // fxn_1530 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=432- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3261

void StSampleVoice::process_algint_3262(void) {  // fxn_1531 (stereo)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 0, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 0, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 0, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 0, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3262

void StSampleVoice::process_algint_3263(void) {  // fxn_1532 (mono)
   // ****** alg=4 fltAll=0 fltPos=5 pluginMask=4321 ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   Dpro(0, 1, ta, ta);
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   Dpro(1, 1, tb, tb);
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   Dpro(2, 1, tc, tc);
   filter(tc);
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   Dpro(3, 1, td, td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3263

void StSampleVoice::process_algint_3264(void) {  // fxn_1533 (stereo)
   // ****** alg=4 fltAll=0 fltPos=6 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   filter(td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3264

void StSampleVoice::process_algint_3265(void) {  // fxn_1534 (mono)
   // ****** alg=4 fltAll=0 fltPos=6 pluginMask=---- ******
   sF32 ta[2];
   sF32 tb[2];
   sF32 tc[2];
   sF32 td[2];
   // process #1 in=last_sample out=ta
   ta[0] = last_sample[0] * plugin_levels[0][0];
   ta[1] = last_sample[1] * plugin_levels[0][1];
   // process #2 in=last_sample out=tb
   tb[0] = last_sample[0] * plugin_levels[1][0];
   tb[1] = last_sample[1] * plugin_levels[1][1];
   // process #3 in=last_sample out=tc
   tc[0] = last_sample[0] * plugin_levels[2][0];
   tc[1] = last_sample[1] * plugin_levels[2][1];
   // process #4 in=last_sample out=td
   td[0] = last_sample[0] * plugin_levels[3][0];
   td[1] = last_sample[1] * plugin_levels[3][1];
   filter(td);
   tb[0] = ta[0] + tb[0];
   tb[1] = ta[1] + tb[1];
   tc[0] = tb[0] + tc[0];
   tc[1] = tb[1] + tc[1];
   last_sample[0] = tc[0] + td[0];
   last_sample[1] = tc[1] + td[1];
}  // end algInt=3265

