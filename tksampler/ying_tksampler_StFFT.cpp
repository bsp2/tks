// ---- ying_tksampler_StFFT.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 23:42:34)

#ifndef YAC_NO_HOST
sSI   YAC_CALL StFFT__setWindowSize (void *, yacmemptr             );
void  YAC_CALL StFFT___setInputSamples(void *, yacmemptr           );
sSI   YAC_CALL StFFT___fft          (void *, yacmemptr             );
void  YAC_CALL StFFT___setEnableMagnitudeScaling(void *, yacmemptr );
sSI   YAC_CALL StFFT___getEnableMagnitudeScaling(void *            );
sSI   YAC_CALL StFFT___calcMagnitudes(void *, yacmemptr            );
void  YAC_CALL StFFT___calcPhases   (void *, yacmemptr             );
void  YAC_CALL StFFT___blueNoiseFilter(void *                      );
void  YAC_CALL StFFT___pinkNoiseFilter(void *                      );
void  YAC_CALL StFFT___brownNoiseFilter(void *                     );
void  YAC_CALL StFFT___violetNoiseFilter(void *                    );
void  YAC_CALL StFFT___ifft         (void *, yacmemptr             );
void  YAC_CALL StFFT__freeFFTBuffers(void *                        );
void  YAC_CALL StFFT__setEnableWindow(void *, yacmemptr            );
sSI   YAC_CALL StFFT__getEnableWindow(void *                       );
void  YAC_CALL StFFT__shiftBins     (void *, yacmemptr             );
void  YAC_CALL StFFT___testConvPolar(void *                        );
void  YAC_CALL StFFT___testIFFTSin  (void *, yacmemptr             );
void  YAC_CALL StFFT___testIFFTSin_MaxBin(void *, yacmemptr        );
void  YAC_CALL StFFT___testIFFTSin_ModLFOSin(void *, yacmemptr     );
void  YAC_CALL StFFT___testIFFTSin_TrueFreq(void *, yacmemptr      );
void  YAC_CALL StFFT___setTestIFFTMinBin(void *, yacmemptr         );
void  YAC_CALL StFFT___setTestIFFTMaxBin(void *, yacmemptr         );
sF32  YAC_CALL StFFT___getTestIFFTMinBin(void *                    );
sF32  YAC_CALL StFFT___getTestIFFTMaxBin(void *                    );
#endif // YAC_NO_HOST

// ------------------ YAC class "StFFT" reflection map (implementation) ------------------
sUI          YAC_VCALL StFFT::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL StFFT::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL StFFT::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL StFFT::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL StFFT::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL StFFT::yacMethodGetNum                  (void) {return 26;}
const char **YAC_VCALL StFFT::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "setWindowSize", "setInputSamples", "fft", "setEnableMagnitudeScaling", "getEnableMagnitudeScaling", "calcMagnitudes", "calcPhases", "blueNoiseFilter", "pinkNoiseFilter", "brownNoiseFilter", "violetNoiseFilter", "ifft", "freeFFTBuffers", "setEnableWindow", "getEnableWindow", "shiftBins", "testConvPolar", "testIFFTSin", "testIFFTSin_MaxBin", "testIFFTSin_ModLFOSin", "testIFFTSin_TrueFreq", "setTestIFFTMinBin", "setTestIFFTMaxBin", "getTestIFFTMinBin", "getTestIFFTMaxBin"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StFFT::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 4, 2, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 11, 5, 8, 13, 1, 1, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL StFFT::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={1,};static const sUI rt2[]={3, 1, 3, 1,};static const sUI rt3[]={1, 1,};static const sUI rt4[]={1,};static const sUI rt5[]={0,};static const sUI rt6[]={3,};static const sUI rt7[]={3,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={3,};static const sUI rt13[]={0,};static const sUI rt14[]={1,};static const sUI rt15[]={0,};static const sUI rt16[]={1,};static const sUI rt17[]={0,};static const sUI rt18[]={3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3,};static const sUI rt19[]={3, 1, 2, 2, 2,};static const sUI rt20[]={3, 1, 2, 2, 2, 2, 2, 2,};static const sUI rt21[]={3, 1, 1, 2, 2, 2, 2, 2, 2, 3, 1, 2, 3,};static const sUI rt22[]={2,};static const sUI rt23[]={2,};static const sUI rt24[]={0,};static const sUI rt25[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL StFFT::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs3[]={(const char*)0, (const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={"FloatArray",};static const char *rs7[]={"FloatArray",};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={"FloatArray",};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs19[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs20[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs21[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StFFT::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL StFFT::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL StFFT::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)StFFT__setWindowSize, (void*)StFFT___setInputSamples, (void*)StFFT___fft, (void*)StFFT___setEnableMagnitudeScaling, (void*)StFFT___getEnableMagnitudeScaling, (void*)StFFT___calcMagnitudes, (void*)StFFT___calcPhases, (void*)StFFT___blueNoiseFilter, (void*)StFFT___pinkNoiseFilter, (void*)StFFT___brownNoiseFilter, (void*)StFFT___violetNoiseFilter, (void*)StFFT___ifft, (void*)StFFT__freeFFTBuffers, (void*)StFFT__setEnableWindow, (void*)StFFT__getEnableWindow, (void*)StFFT__shiftBins, (void*)StFFT___testConvPolar, (void*)StFFT___testIFFTSin, (void*)StFFT___testIFFTSin_MaxBin, (void*)StFFT___testIFFTSin_ModLFOSin, (void*)StFFT___testIFFTSin_TrueFreq, (void*)StFFT___setTestIFFTMinBin, (void*)StFFT___setTestIFFTMaxBin, (void*)StFFT___getTestIFFTMinBin, (void*)StFFT___getTestIFFTMaxBin}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL StFFT::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL StFFT::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL StFFT::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL StFFT::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(StFFT, "StFFT");

#ifndef YAC_NO_HOST
sSI   YAC_CALL StFFT__setWindowSize (void *_o, yacmemptr _args               ) {return (sSI)((StFFT*)_o)->setWindowSize(_args.mem[0].si);}
void  YAC_CALL StFFT___setInputSamples(void *_o, yacmemptr _args             ) {((StFFT*)_o)->_setInputSamples(_args.mem[0].o, _args.mem[1].si, _args.mem[2].o, _args.mem[3].si);}
sSI   YAC_CALL StFFT___fft          (void *_o, yacmemptr _args               ) {return (sSI)((StFFT*)_o)->_fft(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL StFFT___setEnableMagnitudeScaling(void *_o, yacmemptr _args   ) {((StFFT*)_o)->_setEnableMagnitudeScaling(_args.mem[0].si);}
sSI   YAC_CALL StFFT___getEnableMagnitudeScaling(void *_o                    ) {return (sSI)((StFFT*)_o)->_getEnableMagnitudeScaling();}
sSI   YAC_CALL StFFT___calcMagnitudes(void *_o, yacmemptr _args              ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_FLOATARRAY)){ return (sSI)((StFFT*)_o)->_calcMagnitudes((YAC_FloatArray*)_args.mem[0].o);}return 0;}
void  YAC_CALL StFFT___calcPhases   (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_FLOATARRAY)){ ((StFFT*)_o)->_calcPhases((YAC_FloatArray*)_args.mem[0].o);}}
void  YAC_CALL StFFT___blueNoiseFilter(void *_o                              ) {((StFFT*)_o)->_blueNoiseFilter();}
void  YAC_CALL StFFT___pinkNoiseFilter(void *_o                              ) {((StFFT*)_o)->_pinkNoiseFilter();}
void  YAC_CALL StFFT___brownNoiseFilter(void *_o                             ) {((StFFT*)_o)->_brownNoiseFilter();}
void  YAC_CALL StFFT___violetNoiseFilter(void *_o                            ) {((StFFT*)_o)->_violetNoiseFilter();}
void  YAC_CALL StFFT___ifft         (void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_FLOATARRAY)){ ((StFFT*)_o)->_ifft((YAC_FloatArray*)_args.mem[0].o);}}
void  YAC_CALL StFFT__freeFFTBuffers(void *_o                                ) {((StFFT*)_o)->freeFFTBuffers();}
void  YAC_CALL StFFT__setEnableWindow(void *_o, yacmemptr _args              ) {((StFFT*)_o)->setEnableWindow(_args.mem[0].si);}
sSI   YAC_CALL StFFT__getEnableWindow(void *_o                               ) {return (sSI)((StFFT*)_o)->getEnableWindow();}
void  YAC_CALL StFFT__shiftBins     (void *_o, yacmemptr _args               ) {((StFFT*)_o)->shiftBins(_args.mem[0].si);}
void  YAC_CALL StFFT___testConvPolar(void *_o                                ) {((StFFT*)_o)->_testConvPolar();}
void  YAC_CALL StFFT___testIFFTSin  (void *_o, yacmemptr _args               ) {((StFFT*)_o)->_testIFFTSin(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].f32, _args.mem[4].f32, _args.mem[5].f32, _args.mem[6].f32, _args.mem[7].f32, _args.mem[8].f32, _args.mem[9].f32, _args.mem[10].o);}
void  YAC_CALL StFFT___testIFFTSin_MaxBin(void *_o, yacmemptr _args          ) {((StFFT*)_o)->_testIFFTSin_MaxBin(_args.mem[0].o, _args.mem[1].si, _args.mem[2].f32, _args.mem[3].f32, _args.mem[4].f32);}
void  YAC_CALL StFFT___testIFFTSin_ModLFOSin(void *_o, yacmemptr _args       ) {((StFFT*)_o)->_testIFFTSin_ModLFOSin(_args.mem[0].o, _args.mem[1].si, _args.mem[2].f32, _args.mem[3].f32, _args.mem[4].f32, _args.mem[5].f32, _args.mem[6].f32, _args.mem[7].f32);}
void  YAC_CALL StFFT___testIFFTSin_TrueFreq(void *_o, yacmemptr _args        ) {((StFFT*)_o)->_testIFFTSin_TrueFreq(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].f32, _args.mem[4].f32, _args.mem[5].f32, _args.mem[6].f32, _args.mem[7].f32, _args.mem[8].f32, _args.mem[9].o, _args.mem[10].si, _args.mem[11].f32, _args.mem[12].o);}
void  YAC_CALL StFFT___setTestIFFTMinBin(void *_o, yacmemptr _args           ) {((StFFT*)_o)->_setTestIFFTMinBin(_args.mem[0].f32);}
void  YAC_CALL StFFT___setTestIFFTMaxBin(void *_o, yacmemptr _args           ) {((StFFT*)_o)->_setTestIFFTMaxBin(_args.mem[0].f32);}
sF32  YAC_CALL StFFT___getTestIFFTMinBin(void *_o                            ) {return (sF32)((StFFT*)_o)->_getTestIFFTMinBin();}
sF32  YAC_CALL StFFT___getTestIFFTMaxBin(void *_o                            ) {return (sF32)((StFFT*)_o)->_getTestIFFTMaxBin();}
#endif // YAC_NO_HOST
