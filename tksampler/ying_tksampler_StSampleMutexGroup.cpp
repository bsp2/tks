// ---- ying_tksampler_StSampleMutexGroup.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 23:42:34)

#ifndef YAC_NO_HOST
void* YAC_CALL StSampleMutexGroup___getNext(void *                 );
void  YAC_CALL StSampleMutexGroup___setNext(void *, yacmemptr      );
void* YAC_CALL StSampleMutexGroup___getName(void *                 );
void  YAC_CALL StSampleMutexGroup___setName(void *, yacmemptr      );
#endif // YAC_NO_HOST

// ------------------ YAC class "StSampleMutexGroup" reflection map (implementation) ------------------
sUI          YAC_VCALL StSampleMutexGroup::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL StSampleMutexGroup::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL StSampleMutexGroup::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL StSampleMutexGroup::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL StSampleMutexGroup::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL StSampleMutexGroup::yacMethodGetNum                  (void) {return 5;}
const char **YAC_VCALL StSampleMutexGroup::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "getNext", "setNext", "getName", "setName"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StSampleMutexGroup::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 1, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL StSampleMutexGroup::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={3,};static const sUI rt3[]={0,};static const sUI rt4[]={3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL StSampleMutexGroup::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StSampleMutexGroup::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 3, 0, 3, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL StSampleMutexGroup::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL StSampleMutexGroup::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)StSampleMutexGroup___getNext, (void*)StSampleMutexGroup___setNext, (void*)StSampleMutexGroup___getName, (void*)StSampleMutexGroup___setName}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL StSampleMutexGroup::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL StSampleMutexGroup::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL StSampleMutexGroup::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL StSampleMutexGroup::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(StSampleMutexGroup, "StSampleMutexGroup");

#ifndef YAC_NO_HOST
void* YAC_CALL StSampleMutexGroup___getNext(void *_o                         ) {return (void*)((StSampleMutexGroup*)_o)->_getNext();}
void  YAC_CALL StSampleMutexGroup___setNext(void *_o, yacmemptr _args        ) {((StSampleMutexGroup*)_o)->_setNext(_args.mem[0].o);}
void* YAC_CALL StSampleMutexGroup___getName(void *_o                         ) {return (void*)((StSampleMutexGroup*)_o)->_getName();}
void  YAC_CALL StSampleMutexGroup___setName(void *_o, yacmemptr _args        ) {((StSampleMutexGroup*)_o)->_setName(_args.mem[0].o);}
#endif // YAC_NO_HOST
