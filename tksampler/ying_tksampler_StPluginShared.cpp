// ---- ying_tksampler_StPluginShared.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 23:42:34)

#ifndef YAC_NO_HOST
void* YAC_CALL StPluginShared__getInfo(void *                      );
void  YAC_CALL StPluginShared__queryDynamicParamName(void *, yacmemptr, YAC_Value *);
void  YAC_CALL StPluginShared__queryDynamicModName(void *, yacmemptr, YAC_Value *);
void  YAC_CALL StPluginShared__queryDynamicParamPresetValues(void *, yacmemptr, YAC_Value *);
void  YAC_CALL StPluginShared__queryDynamicParamPresetName(void *, yacmemptr, YAC_Value *);
void  YAC_CALL StPluginShared__getArrayParamVariationPtr(void *, yacmemptr, YAC_Value *);
void  YAC_CALL StPluginShared__setArrayParamEditVariationIdx(void *, yacmemptr);
sF32  YAC_CALL StPluginShared__getParamValue(void *, yacmemptr     );
void  YAC_CALL StPluginShared__setParamValue(void *, yacmemptr     );
void  YAC_CALL StPluginShared__getParamValueString(void *, yacmemptr, YAC_Value *);
void  YAC_CALL StPluginShared__benchmarkSingle(void *, yacmemptr   );
void  YAC_CALL StPluginShared__benchmarkChunk(void *, yacmemptr    );
void  YAC_CALL StPluginShared__createVoiceInstance(void *, yacmemptr, YAC_Value *);
#endif // YAC_NO_HOST

// ------------------ YAC class "StPluginShared" reflection map (implementation) ------------------
sUI          YAC_VCALL StPluginShared::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL StPluginShared::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL StPluginShared::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL StPluginShared::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL StPluginShared::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL StPluginShared::yacMethodGetNum                  (void) {return 14;}
const char **YAC_VCALL StPluginShared::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "getInfo", "queryDynamicParamName", "queryDynamicModName", "queryDynamicParamPresetValues", "queryDynamicParamPresetName", "getArrayParamVariationPtr", "setArrayParamEditVariationIdx", "getParamValue", "setParamValue", "getParamValueString", "benchmarkSingle", "benchmarkChunk", "createVoiceInstance"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StPluginShared::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 1, 1, 1, 2, 2, 2, 1, 2, 1, 3, 3, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL StPluginShared::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={1,};static const sUI rt3[]={1,};static const sUI rt4[]={1,};static const sUI rt5[]={1, 1,};static const sUI rt6[]={1, 1,};static const sUI rt7[]={1, 1,};static const sUI rt8[]={1,};static const sUI rt9[]={1, 2,};static const sUI rt10[]={1,};static const sUI rt11[]={3, 1, 1,};static const sUI rt12[]={3, 1, 1,};static const sUI rt13[]={2, 1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL StPluginShared::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0, (const char*)0,};static const char *rs6[]={(const char*)0, (const char*)0,};static const char *rs7[]={(const char*)0, (const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0, (const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={"FloatArray", (const char*)0, (const char*)0,};static const char *rs12[]={"FloatArray", (const char*)0, (const char*)0,};static const char *rs13[]={(const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StPluginShared::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 3, 4, 4, 4, 4, 4, 0, 2, 0, 4, 0, 0, 4}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL StPluginShared::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL StPluginShared::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)StPluginShared__getInfo, (void*)StPluginShared__queryDynamicParamName, (void*)StPluginShared__queryDynamicModName, (void*)StPluginShared__queryDynamicParamPresetValues, (void*)StPluginShared__queryDynamicParamPresetName, (void*)StPluginShared__getArrayParamVariationPtr, (void*)StPluginShared__setArrayParamEditVariationIdx, (void*)StPluginShared__getParamValue, (void*)StPluginShared__setParamValue, (void*)StPluginShared__getParamValueString, (void*)StPluginShared__benchmarkSingle, (void*)StPluginShared__benchmarkChunk, (void*)StPluginShared__createVoiceInstance}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL StPluginShared::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL StPluginShared::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL StPluginShared::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL StPluginShared::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(StPluginShared, "StPluginShared");

#ifndef YAC_NO_HOST
void* YAC_CALL StPluginShared__getInfo(void *_o                              ) {return (void*)((StPluginShared*)_o)->getInfo();}
void  YAC_CALL StPluginShared__queryDynamicParamName(void *_o, yacmemptr _args, YAC_Value *_r) {((StPluginShared*)_o)->queryDynamicParamName(_args.mem[0].si, _r);}
void  YAC_CALL StPluginShared__queryDynamicModName(void *_o, yacmemptr _args, YAC_Value *_r) {((StPluginShared*)_o)->queryDynamicModName(_args.mem[0].si, _r);}
void  YAC_CALL StPluginShared__queryDynamicParamPresetValues(void *_o, yacmemptr _args, YAC_Value *_r) {((StPluginShared*)_o)->queryDynamicParamPresetValues(_args.mem[0].si, _r);}
void  YAC_CALL StPluginShared__queryDynamicParamPresetName(void *_o, yacmemptr _args, YAC_Value *_r) {((StPluginShared*)_o)->queryDynamicParamPresetName(_args.mem[0].si, _args.mem[1].si, _r);}
void  YAC_CALL StPluginShared__getArrayParamVariationPtr(void *_o, yacmemptr _args, YAC_Value *_r) {((StPluginShared*)_o)->getArrayParamVariationPtr(_args.mem[0].si, _args.mem[1].si, _r);}
void  YAC_CALL StPluginShared__setArrayParamEditVariationIdx(void *_o, yacmemptr _args) {((StPluginShared*)_o)->setArrayParamEditVariationIdx(_args.mem[0].si, _args.mem[1].si);}
sF32  YAC_CALL StPluginShared__getParamValue(void *_o, yacmemptr _args       ) {return (sF32)((StPluginShared*)_o)->getParamValue(_args.mem[0].si);}
void  YAC_CALL StPluginShared__setParamValue(void *_o, yacmemptr _args       ) {((StPluginShared*)_o)->setParamValue(_args.mem[0].si, _args.mem[1].f32);}
void  YAC_CALL StPluginShared__getParamValueString(void *_o, yacmemptr _args, YAC_Value *_r) {((StPluginShared*)_o)->getParamValueString(_args.mem[0].si, _r);}
void  YAC_CALL StPluginShared__benchmarkSingle(void *_o, yacmemptr _args     ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_FLOATARRAY)){ ((StPluginShared*)_o)->benchmarkSingle((YAC_FloatArray*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}}
void  YAC_CALL StPluginShared__benchmarkChunk(void *_o, yacmemptr _args      ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_FLOATARRAY)){ ((StPluginShared*)_o)->benchmarkChunk((YAC_FloatArray*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}}
void  YAC_CALL StPluginShared__createVoiceInstance(void *_o, yacmemptr _args, YAC_Value *_r) {((StPluginShared*)_o)->createVoiceInstance(_args.mem[0].f32, _args.mem[1].si, _r);}
#endif // YAC_NO_HOST
