// ---- ying_tksampler_StSample.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 23:42:34)

#ifndef YAC_NO_HOST
void  YAC_CALL StSample__reinit     (void *                        );
void  YAC_CALL StSample__free       (void *                        );
void* YAC_CALL StSample___getNext   (void *                        );
void  YAC_CALL StSample___setNext   (void *, yacmemptr             );
void* YAC_CALL StSample___getName   (void *                        );
void  YAC_CALL StSample___setName   (void *, yacmemptr             );
void* YAC_CALL StSample___getWaveform(void *                       );
void  YAC_CALL StSample___setWaveform(void *, yacmemptr            );
void* YAC_CALL StSample___getPartialMagnitudes(void *              );
void  YAC_CALL StSample___setPartialMagnitudes(void *, yacmemptr   );
void* YAC_CALL StSample___getPartialSpeeds(void *                  );
void  YAC_CALL StSample___setPartialSpeeds(void *, yacmemptr       );
void* YAC_CALL StSample___getPartialPhases(void *                  );
void  YAC_CALL StSample___setPartialPhases(void *, yacmemptr       );
void  YAC_CALL StSample___setNumPartials(void *, yacmemptr         );
sF32  YAC_CALL StSample___getNumPartials(void *                    );
void  YAC_CALL StSample___setPartialCycleLenReset(void *, yacmemptr);
sF32  YAC_CALL StSample___getPartialCycleLenReset(void *           );
void  YAC_CALL StSample___setEnablePartialPhase0(void *, yacmemptr );
sSI   YAC_CALL StSample___getEnablePartialPhase0(void *            );
void  YAC_CALL StSample___handleShiftSampleArea(void *, yacmemptr  );
void  YAC_CALL StSample___handleMoveSampleArea(void *, yacmemptr   );
sSI   YAC_CALL StSample___verifySampleAreas(void *                 );
void* YAC_CALL StSample___getMutexGroup(void *                     );
void  YAC_CALL StSample___setMutexGroup(void *, yacmemptr          );
void* YAC_CALL StSample___getKeyRange(void *                       );
void* YAC_CALL StSample___getVelRange(void *                       );
void* YAC_CALL StSample___getModRange(void *                       );
void* YAC_CALL StSample___getOrCreateKeyRange(void *               );
void* YAC_CALL StSample___getOrCreateVelRange(void *               );
void* YAC_CALL StSample___getOrCreateModRange(void *               );
void* YAC_CALL StSample___getFreqADSR(void *                       );
void* YAC_CALL StSample___getVolADSR(void *                        );
void* YAC_CALL StSample___getPanADSR(void *                        );
void* YAC_CALL StSample___getAuxADSR(void *                        );
void* YAC_CALL StSample___getOrCreateFreqADSR(void *               );
void* YAC_CALL StSample___getOrCreateVolADSR(void *                );
void* YAC_CALL StSample___getOrCreatePanADSR(void *                );
void* YAC_CALL StSample___getOrCreateAuxADSR(void *                );
void* YAC_CALL StSample___getFreqLFO(void *                        );
void* YAC_CALL StSample___getVolLFO (void *                        );
void* YAC_CALL StSample___getPanLFO (void *                        );
void* YAC_CALL StSample___getAuxLFO (void *                        );
void* YAC_CALL StSample___getLFOByIndex(void *, yacmemptr          );
void* YAC_CALL StSample___getOrCreateLFOByIndex(void *, yacmemptr  );
void* YAC_CALL StSample___getOrCreateFreqLFO(void *                );
void* YAC_CALL StSample___getOrCreateVolLFO(void *                 );
void* YAC_CALL StSample___getOrCreatePanLFO(void *                 );
void* YAC_CALL StSample___getOrCreateAuxLFO(void *                 );
void  YAC_CALL StSample___deleteFreqLFO(void *                     );
void  YAC_CALL StSample___deleteVolLFO(void *                      );
void  YAC_CALL StSample___deletePanLFO(void *                      );
void  YAC_CALL StSample___deleteAuxLFO(void *                      );
void* YAC_CALL StSample___getModSeqByIndexAndPatch(void *, yacmemptr);
void* YAC_CALL StSample___getOrCreateModSeqByIndexAndPatch(void *, yacmemptr);
void  YAC_CALL StSample___deleteModSeqByIndexAndPatch(void *, yacmemptr);
void  YAC_CALL StSample___setDefaultModSeqPatch(void *, yacmemptr  );
sSI   YAC_CALL StSample___getDefaultModSeqPatch(void *, yacmemptr  );
sSI   YAC_CALL StSample___findLastUsedModSeqPatch(void *, yacmemptr);
void  YAC_CALL StSample___allocSampleLoops(void *                  );
void* YAC_CALL StSample___getOrCreateSampleLoops(void *            );
void* YAC_CALL StSample___getSampleLoops(void *                    );
void  YAC_CALL StSample___freeSampleLoops(void *                   );
sSI   YAC_CALL StSample___getNumSampleLoops(void *                 );
void  YAC_CALL StSample___uiSetEnableSyncFirstLoopIndex(void *, yacmemptr);
sSI   YAC_CALL StSample___uiGetEnableSyncFirstLoopIndex(void *     );
void  YAC_CALL StSample___setFirstLoopIndex(void *, yacmemptr      );
sSI   YAC_CALL StSample___getFirstLoopIndex(void *                 );
void  YAC_CALL StSample___setNoteOffLoopIndex(void *, yacmemptr    );
sSI   YAC_CALL StSample___getNoteOffLoopIndex(void *               );
void  YAC_CALL StSample___setEnableNoteOffLoopImmediately(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableNoteOffLoopImmediately(void *   );
void  YAC_CALL StSample___setEnableJumpToLoopImmediately(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableJumpToLoopImmediately(void *    );
void  YAC_CALL StSample___setPlayMode(void *, yacmemptr            );
sSI   YAC_CALL StSample___getPlayMode(void *                       );
sSI   YAC_CALL StSample___getFirstOffset(void *                    );
void  YAC_CALL StSample___setFirstOffset(void *, yacmemptr         );
sSI   YAC_CALL StSample___getFirstLen(void *                       );
void  YAC_CALL StSample___setFirstLen(void *, yacmemptr            );
sSI   YAC_CALL StSample___getFirstLoopOffset(void *                );
void  YAC_CALL StSample___setFirstLoopOffset(void *, yacmemptr     );
sSI   YAC_CALL StSample___getFirstLoopLen(void *                   );
void  YAC_CALL StSample___setFirstLoopLen(void *, yacmemptr        );
sSI   YAC_CALL StSample___getFirstLoopRep(void *                   );
void  YAC_CALL StSample___setFirstLoopRep(void *, yacmemptr        );
sSI   YAC_CALL StSample___getLastLoopOffset(void *                 );
sSI   YAC_CALL StSample___getLastLoopLen(void *                    );
sSI   YAC_CALL StSample___getOffset (void *                        );
void  YAC_CALL StSample___setOffset (void *, yacmemptr             );
sSI   YAC_CALL StSample___getLen    (void *                        );
void  YAC_CALL StSample___setLen    (void *, yacmemptr             );
sSI   YAC_CALL StSample___getMinOffset(void *                      );
sSI   YAC_CALL StSample___getMaxOffset(void *                      );
void  YAC_CALL StSample___setMaxVoices(void *, yacmemptr           );
sSI   YAC_CALL StSample___getMaxVoices(void *                      );
sF32  YAC_CALL StSample___getVolume (void *                        );
void  YAC_CALL StSample___setVolume (void *, yacmemptr             );
void  YAC_CALL StSample___setVolLFOAmt(void *, yacmemptr           );
sF32  YAC_CALL StSample___getVolLFOAmt(void *                      );
sF32  YAC_CALL StSample___getVolumeVelocityAmount(void *           );
void  YAC_CALL StSample___setVolumeVelocityAmount(void *, yacmemptr);
void  YAC_CALL StSample___setSampleOffsetRel(void *, yacmemptr     );
sF32  YAC_CALL StSample___getSampleOffsetRel(void *                );
sF32  YAC_CALL StSample___getSampleOffsetVelocityAmount(void *     );
void  YAC_CALL StSample___setSampleOffsetVelocityAmount(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableInvertSampleOffsetVelocityAmount(void *);
void  YAC_CALL StSample___setEnableInvertSampleOffsetVelocityAmount(void *, yacmemptr);
sF32  YAC_CALL StSample___getSampleOffsetRandAmount(void *         );
void  YAC_CALL StSample___setSampleOffsetRandAmount(void *, yacmemptr);
sF32  YAC_CALL StSample___getPan    (void *                        );
void  YAC_CALL StSample___setPan    (void *, yacmemptr             );
void  YAC_CALL StSample___setPanEnvAmt(void *, yacmemptr           );
sF32  YAC_CALL StSample___getPanEnvAmt(void *                      );
void  YAC_CALL StSample___setPanLFOAmt(void *, yacmemptr           );
sF32  YAC_CALL StSample___getPanLFOAmt(void *                      );
sF32  YAC_CALL StSample___getTranspose(void *                      );
void  YAC_CALL StSample___setTranspose(void *, yacmemptr           );
void  YAC_CALL StSample___setTransposeAndUpdateOctSemiCents(void *, yacmemptr);
sF32  YAC_CALL StSample___getSampleRateRatio(void *                );
void  YAC_CALL StSample___setSampleRateRatio(void *, yacmemptr     );
void  YAC_CALL StSample___setUiTransposeOct(void *, yacmemptr      );
sSI   YAC_CALL StSample___getUiTransposeOct(void *                 );
void  YAC_CALL StSample___setUiTransposeSemi(void *, yacmemptr     );
sSI   YAC_CALL StSample___getUiTransposeSemi(void *                );
void  YAC_CALL StSample___setUiTransposeCents(void *, yacmemptr    );
sF32  YAC_CALL StSample___getUiTransposeCents(void *               );
void  YAC_CALL StSample___setTransposeAndUpdateOctSemi(void *, yacmemptr);
void  YAC_CALL StSample___setBeatFrequency(void *, yacmemptr       );
sF32  YAC_CALL StSample___getBeatFrequency(void *                  );
void  YAC_CALL StSample___setEnableLerpFreq(void *, yacmemptr      );
sSI   YAC_CALL StSample___getEnableLerpFreq(void *                 );
void  YAC_CALL StSample___setEnableLerpVol(void *, yacmemptr       );
sSI   YAC_CALL StSample___getEnableLerpVol(void *                  );
void  YAC_CALL StSample___setFreqEnvAmt(void *, yacmemptr          );
sF32  YAC_CALL StSample___getFreqEnvAmt(void *                     );
void  YAC_CALL StSample___setFreqLFOAmt(void *, yacmemptr          );
sF32  YAC_CALL StSample___getFreqLFOAmt(void *                     );
sF32  YAC_CALL StSample___getDelay  (void *                        );
void  YAC_CALL StSample___setDelay  (void *, yacmemptr             );
sF32  YAC_CALL StSample___getDelayMultiplier(void *                );
void  YAC_CALL StSample___setDelayMultiplier(void *, yacmemptr     );
sF32  YAC_CALL StSample__calcVelZoneVolume(void *, yacmemptr       );
sF32  YAC_CALL StSample__calcKeyModZoneVolume(void *, yacmemptr    );
void  YAC_CALL StSample__setEnableTimestretch(void *, yacmemptr    );
sSI   YAC_CALL StSample__getEnableTimestretch(void *               );
void  YAC_CALL StSample__setEnableTimestretchAdditive(void *, yacmemptr);
sSI   YAC_CALL StSample__getEnableTimestretchAdditive(void *       );
void  YAC_CALL StSample__setEnableTimestretchXFade(void *, yacmemptr);
sSI   YAC_CALL StSample__getEnableTimestretchXFade(void *          );
void  YAC_CALL StSample__setTimestretch(void *, yacmemptr          );
sF32  YAC_CALL StSample__getTimestretch(void *                     );
void  YAC_CALL StSample__setTimestretchGranularity(void *, yacmemptr);
sF32  YAC_CALL StSample__getTimestretchGranularity(void *          );
void  YAC_CALL StSample__setTimestretchGranularityAmount(void *, yacmemptr);
sF32  YAC_CALL StSample__getTimestretchGranularityAmount(void *    );
void  YAC_CALL StSample__setEnableStaticCyclelen(void *, yacmemptr );
sSI   YAC_CALL StSample__getEnableStaticCyclelen(void *            );
void  YAC_CALL StSample__setEnableAbsoluteTimestretch(void *, yacmemptr);
sSI   YAC_CALL StSample__getEnableAbsoluteTimestretch(void *       );
void  YAC_CALL StSample__setTimestretchInterpolType(void *, yacmemptr);
sSI   YAC_CALL StSample__getTimestretchInterpolType(void *         );
void  YAC_CALL StSample__setTimestretchGrainWindowType(void *, yacmemptr);
sSI   YAC_CALL StSample__getTimestretchGrainWindowType(void *      );
void  YAC_CALL StSample__setTimestretchBend(void *, yacmemptr      );
sF32  YAC_CALL StSample__getTimestretchBend(void *                 );
void  YAC_CALL StSample__setTimestretchStartPhaseRandAmount(void *, yacmemptr);
sF32  YAC_CALL StSample__getTimestretchStartPhaseRandAmount(void * );
void  YAC_CALL StSample__setTimestretch2DWidth(void *, yacmemptr   );
sSI   YAC_CALL StSample__getTimestretch2DWidth(void *              );
void  YAC_CALL StSample__setTimestretch2DHeight(void *, yacmemptr  );
sSI   YAC_CALL StSample__getTimestretch2DHeight(void *             );
void  YAC_CALL StSample___setEnableTimedLoop(void *, yacmemptr     );
sSI   YAC_CALL StSample___getEnableTimedLoop(void *                );
void  YAC_CALL StSample___setEnableTimedLoopFade(void *, yacmemptr );
sSI   YAC_CALL StSample___getEnableTimedLoopFade(void *            );
void  YAC_CALL StSample___setTimedLoopBase(void *, yacmemptr       );
sF32  YAC_CALL StSample___getTimedLoopBase(void *                  );
void  YAC_CALL StSample___setEnableOneShotLoopStep(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableOneShotLoopStep(void *          );
void  YAC_CALL StSample___setVolumeRampStepsMillisecIn(void *, yacmemptr);
sF32  YAC_CALL StSample___getVolumeRampStepsMillisecIn(void *      );
void  YAC_CALL StSample___setVolumeRampStepsMillisecOut(void *, yacmemptr);
sF32  YAC_CALL StSample___getVolumeRampStepsMillisecOut(void *     );
void  YAC_CALL StSample___setEnableFreezeSampleOffWhenQuiet(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableFreezeSampleOffWhenQuiet(void * );
void  YAC_CALL StSample___setEnableModShiftOrig(void *, yacmemptr  );
sSI   YAC_CALL StSample___getEnableModShiftOrig(void *             );
void  YAC_CALL StSample___setEnableSampleOffNoteOn(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableSampleOffNoteOn(void *          );
void  YAC_CALL StSample___setEnabled(void *, yacmemptr             );
sSI   YAC_CALL StSample___getEnabled(void *                        );
void  YAC_CALL StSample___setInterpolType(void *, yacmemptr        );
sSI   YAC_CALL StSample___getInterpolType(void *                   );
void  YAC_CALL StSample___setInterpolOrder(void *, yacmemptr       );
sSI   YAC_CALL StSample___getInterpolOrder(void *                  );
void  YAC_CALL StSample___setBitReductionPreAmp(void *, yacmemptr  );
sF32  YAC_CALL StSample___getBitReductionPreAmp(void *             );
void  YAC_CALL StSample___setBitReduction(void *, yacmemptr        );
sSI   YAC_CALL StSample___getBitReduction(void *                   );
void  YAC_CALL StSample___setBitReductionMask(void *, yacmemptr    );
sSI   YAC_CALL StSample___getBitReductionMask(void *               );
void  YAC_CALL StSample___setRateReduction(void *, yacmemptr       );
sSI   YAC_CALL StSample___getRateReduction(void *                  );
void  YAC_CALL StSample___setRateReductionMask(void *, yacmemptr   );
sSI   YAC_CALL StSample___getRateReductionMask(void *              );
void  YAC_CALL StSample___setEnableFromStart(void *, yacmemptr     );
sSI   YAC_CALL StSample___getEnableFromStart(void *                );
void* YAC_CALL StSample___getOrCreateWavepathTable(void *          );
void  YAC_CALL StSample___setEnableWavepath(void *, yacmemptr      );
sSI   YAC_CALL StSample___getEnableWavepath(void *                 );
void  YAC_CALL StSample___setWavepathIndex(void *, yacmemptr       );
sSI   YAC_CALL StSample___getWavepathIndex(void *                  );
void  YAC_CALL StSample___setEnableSkipRange(void *, yacmemptr     );
void  YAC_CALL StSample___setEnableAlt(void *, yacmemptr           );
sSI   YAC_CALL StSample___getEnableAlt(void *                      );
void  YAC_CALL StSample___setEnableFilter(void *, yacmemptr        );
sSI   YAC_CALL StSample___getEnableFilter(void *                   );
void  YAC_CALL StSample___setFilterType(void *, yacmemptr          );
sSI   YAC_CALL StSample___getFilterType(void *                     );
void  YAC_CALL StSample___setFilterCutOff(void *, yacmemptr        );
sF32  YAC_CALL StSample___getFilterCutOff(void *                   );
void  YAC_CALL StSample___setFilterPan(void *, yacmemptr           );
sF32  YAC_CALL StSample___getFilterPan(void *                      );
void  YAC_CALL StSample___setFilterOffset(void *, yacmemptr        );
sF32  YAC_CALL StSample___getFilterOffset(void *                   );
void  YAC_CALL StSample___setFilterEQGain(void *, yacmemptr        );
sF32  YAC_CALL StSample___getFilterEQGain(void *                   );
void  YAC_CALL StSample___setFilterResonance(void *, yacmemptr     );
sF32  YAC_CALL StSample___getFilterResonance(void *                );
void  YAC_CALL StSample___setFilterAuxEnvAmount(void *, yacmemptr  );
sF32  YAC_CALL StSample___getFilterAuxEnvAmount(void *             );
void  YAC_CALL StSample___setFilterAuxEnvVelocityAmount(void *, yacmemptr);
sF32  YAC_CALL StSample___getFilterAuxEnvVelocityAmount(void *     );
void  YAC_CALL StSample___setFilterAuxLFOAmount(void *, yacmemptr  );
sF32  YAC_CALL StSample___getFilterAuxLFOAmount(void *             );
void  YAC_CALL StSample___setFilterKeyboardAmount(void *, yacmemptr);
sF32  YAC_CALL StSample___getFilterKeyboardAmount(void *           );
void  YAC_CALL StSample___setGlideType(void *, yacmemptr           );
sSI   YAC_CALL StSample___getGlideType(void *                      );
void  YAC_CALL StSample___setGlideSpeedTimeUp(void *, yacmemptr    );
sF32  YAC_CALL StSample___getGlideSpeedTimeUp(void *               );
void  YAC_CALL StSample___setGlideSpeedTimeDown(void *, yacmemptr  );
sF32  YAC_CALL StSample___getGlideSpeedTimeDown(void *             );
void  YAC_CALL StSample___setGlideSpeedFreqUp(void *, yacmemptr    );
sF32  YAC_CALL StSample___getGlideSpeedFreqUp(void *               );
void  YAC_CALL StSample___setGlideSpeedFreqDown(void *, yacmemptr  );
sF32  YAC_CALL StSample___getGlideSpeedFreqDown(void *             );
void  YAC_CALL StSample___setEnableGlideRelease(void *, yacmemptr  );
sSI   YAC_CALL StSample___getEnableGlideRelease(void *             );
void  YAC_CALL StSample___setGlideMaxNoteDist(void *, yacmemptr    );
sSI   YAC_CALL StSample___getGlideMaxNoteDist(void *               );
void  YAC_CALL StSample___setEnableGlideGlissando(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableGlideGlissando(void *           );
void  YAC_CALL StSample___setGlideMinTime(void *, yacmemptr        );
sSI   YAC_CALL StSample___getGlideMinTime(void *                   );
void  YAC_CALL StSample___setGlideMaxTime(void *, yacmemptr        );
sSI   YAC_CALL StSample___getGlideMaxTime(void *                   );
void  YAC_CALL StSample___setEnableGlideRetrigSample(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableGlideRetrigSample(void *        );
void  YAC_CALL StSample___setEnableGlideRetrigEnvFreq(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableGlideRetrigEnvFreq(void *       );
void  YAC_CALL StSample___setEnableGlideRetrigEnvVol(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableGlideRetrigEnvVol(void *        );
void  YAC_CALL StSample___setEnableGlideRetrigEnvPan(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableGlideRetrigEnvPan(void *        );
void  YAC_CALL StSample___setEnableGlideRetrigEnvAux(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableGlideRetrigEnvAux(void *        );
void  YAC_CALL StSample___setEnableGlideRetrigLFOFreq(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableGlideRetrigLFOFreq(void *       );
void  YAC_CALL StSample___setEnableGlideRetrigLFOVol(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableGlideRetrigLFOVol(void *        );
void  YAC_CALL StSample___setEnableGlideRetrigLFOPan(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableGlideRetrigLFOPan(void *        );
void  YAC_CALL StSample___setEnableGlideRetrigLFOAux(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableGlideRetrigLFOAux(void *        );
void  YAC_CALL StSample___setEnableGlideRetrigModSeq(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableGlideRetrigModSeq(void *, yacmemptr);
void  YAC_CALL StSample___setMMKeyboardCenter(void *, yacmemptr    );
sF32  YAC_CALL StSample___getMMKeyboardCenter(void *               );
void  YAC_CALL StSample___setMMKeyboardMin(void *, yacmemptr       );
sF32  YAC_CALL StSample___getMMKeyboardMin(void *                  );
void  YAC_CALL StSample___setMMKeyboardMax(void *, yacmemptr       );
sF32  YAC_CALL StSample___getMMKeyboardMax(void *                  );
void  YAC_CALL StSample___setMMEnable(void *, yacmemptr            );
sSI   YAC_CALL StSample___getMMEnable(void *, yacmemptr            );
void  YAC_CALL StSample___setMMOp   (void *, yacmemptr             );
sSI   YAC_CALL StSample___getMMOp   (void *, yacmemptr             );
void  YAC_CALL StSample___setMMSlewUp(void *, yacmemptr            );
sF32  YAC_CALL StSample___getMMSlewUp(void *, yacmemptr            );
void  YAC_CALL StSample___setMMSlewDown(void *, yacmemptr          );
sF32  YAC_CALL StSample___getMMSlewDown(void *, yacmemptr          );
void  YAC_CALL StSample___setMMSlewReset(void *, yacmemptr         );
sSI   YAC_CALL StSample___getMMSlewReset(void *, yacmemptr         );
void  YAC_CALL StSample___setMMSrc  (void *, yacmemptr             );
sSI   YAC_CALL StSample___getMMSrc  (void *, yacmemptr             );
void  YAC_CALL StSample___setMMCurve(void *, yacmemptr             );
sF32  YAC_CALL StSample___getMMCurve(void *, yacmemptr             );
void  YAC_CALL StSample___setMMDst  (void *, yacmemptr             );
sSI   YAC_CALL StSample___getMMDst  (void *, yacmemptr             );
void  YAC_CALL StSample___setMMAmt  (void *, yacmemptr             );
sF32  YAC_CALL StSample___getMMAmt  (void *, yacmemptr             );
void  YAC_CALL StSample___setMMSignalTap(void *, yacmemptr         );
sSI   YAC_CALL StSample___getMMSignalTap(void *, yacmemptr         );
void  YAC_CALL StSample___setLiveRecEnable(void *, yacmemptr       );
sSI   YAC_CALL StSample___getLiveRecEnable(void *                  );
void  YAC_CALL StSample___setLiveRecPause(void *, yacmemptr        );
sSI   YAC_CALL StSample___getLiveRecPause(void *                   );
void  YAC_CALL StSample___setLiveRecMonitor(void *, yacmemptr      );
sSI   YAC_CALL StSample___getLiveRecMonitor(void *                 );
void  YAC_CALL StSample___setLiveRecInput(void *, yacmemptr        );
sSI   YAC_CALL StSample___getLiveRecInput(void *                   );
void  YAC_CALL StSample___setLiveRecStereo(void *, yacmemptr       );
sSI   YAC_CALL StSample___getLiveRecStereo(void *                  );
void  YAC_CALL StSample___setLiveRecInputPan(void *, yacmemptr     );
sF32  YAC_CALL StSample___getLiveRecInputPan(void *                );
void  YAC_CALL StSample___setLiveRecLoopIdx(void *, yacmemptr      );
sSI   YAC_CALL StSample___getLiveRecLoopIdx(void *                 );
void  YAC_CALL StSample___setLiveRecCopy(void *, yacmemptr         );
sSI   YAC_CALL StSample___getLiveRecCopy(void *                    );
void  YAC_CALL StSample___setLiveRecClear(void *, yacmemptr        );
sSI   YAC_CALL StSample___getLiveRecClear(void *                   );
void  YAC_CALL StSample___setLiveRecDoubleBufferMode(void *, yacmemptr);
sSI   YAC_CALL StSample___getLiveRecDoubleBufferMode(void *        );
void  YAC_CALL StSample___setLiveRecDoubleBufferXFade(void *, yacmemptr);
sSI   YAC_CALL StSample___getLiveRecDoubleBufferXFade(void *       );
void  YAC_CALL StSample___setLiveRecOscMode(void *, yacmemptr      );
sSI   YAC_CALL StSample___getLiveRecOscMode(void *                 );
void  YAC_CALL StSample___setLiveRecOscSingleCycle(void *, yacmemptr);
sSI   YAC_CALL StSample___getLiveRecOscSingleCycle(void *          );
void  YAC_CALL StSample___setLiveRecOscTune(void *, yacmemptr      );
sF32  YAC_CALL StSample___getLiveRecOscTune(void *                 );
void  YAC_CALL StSample___setLiveRecOscFadeAmt(void *, yacmemptr   );
sF32  YAC_CALL StSample___getLiveRecOscFadeAmt(void *              );
void  YAC_CALL StSample___setLiveRecSkipInputNumFrames(void *, yacmemptr);
sSI   YAC_CALL StSample___getLiveRecSkipInputNumFrames(void *      );
void  YAC_CALL StSample___setLiveRecOscPreFilter(void *, yacmemptr );
sF32  YAC_CALL StSample___getLiveRecOscPreFilter(void *            );
void  YAC_CALL StSample___setLiveRecOscResample(void *, yacmemptr  );
sSI   YAC_CALL StSample___getLiveRecOscResample(void *             );
void  YAC_CALL StSample___setLiveRecOscSustain(void *, yacmemptr   );
sSI   YAC_CALL StSample___getLiveRecOscSustain(void *              );
void  YAC_CALL StSample___setLiveRecMode(void *, yacmemptr         );
sSI   YAC_CALL StSample___getLiveRecMode(void *                    );
void  YAC_CALL StSample___setLiveRecThresholdOn(void *, yacmemptr  );
sF32  YAC_CALL StSample___getLiveRecThresholdOn(void *             );
void  YAC_CALL StSample___setLiveRecThresholdOff(void *, yacmemptr );
sF32  YAC_CALL StSample___getLiveRecThresholdOff(void *            );
void  YAC_CALL StSample___startLiveRecording(void *                );
void  YAC_CALL StSample___stopLiveRecording(void *                 );
void  YAC_CALL StSample___setEnableSumInput(void *, yacmemptr      );
sSI   YAC_CALL StSample___getEnableSumInput(void *                 );
void  YAC_CALL StSample___setSumInputXFade(void *, yacmemptr       );
sF32  YAC_CALL StSample___getSumInputXFade(void *                  );
sSI   YAC_CALL StSample__hasPlugins (void *                        );
sSI   YAC_CALL StSample__hasPluginsEnabled(void *                  );
sSI   YAC_CALL StSample__areAllPluginSlotsUsed(void *              );
void  YAC_CALL StSample__freePlugins(void *                        );
void  YAC_CALL StSample___setVoicePluginShared(void *, yacmemptr   );
void* YAC_CALL StSample___getVoicePluginShared(void *, yacmemptr   );
void  YAC_CALL StSample___setVoicePluginSharedMissing(void *, yacmemptr);
void* YAC_CALL StSample___getVoicePluginSharedMissing(void *, yacmemptr);
void  YAC_CALL StSample___setEnableVoicePluginPreFilter(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableVoicePluginPreFilter(void *, yacmemptr);
void  YAC_CALL StSample___setVoicePluginAlg(void *, yacmemptr      );
sSI   YAC_CALL StSample___getVoicePluginAlg(void *                 );
void  YAC_CALL StSample___setVoicePluginAlgFilterPos(void *, yacmemptr);
sSI   YAC_CALL StSample___getVoicePluginAlgFilterPos(void *        );
void  YAC_CALL StSample___setVoicePluginAlgOuter(void *, yacmemptr );
sSI   YAC_CALL StSample___getVoicePluginAlgOuter(void *            );
void  YAC_CALL StSample___setEnableVoicePlugin(void *, yacmemptr   );
sSI   YAC_CALL StSample___getEnableVoicePlugin(void *, yacmemptr   );
void  YAC_CALL StSample___setVoicePluginLevel(void *, yacmemptr    );
sF32  YAC_CALL StSample___getVoicePluginLevel(void *, yacmemptr    );
void  YAC_CALL StSample___setVoicePluginDst(void *, yacmemptr      );
sSI   YAC_CALL StSample___getVoicePluginDst(void *, yacmemptr      );
void  YAC_CALL StSample___setVoicePluginPan(void *, yacmemptr      );
sF32  YAC_CALL StSample___getVoicePluginPan(void *, yacmemptr      );
void  YAC_CALL StSample___setEnableVoicePluginInvertPhase(void *, yacmemptr);
sSI   YAC_CALL StSample___getEnableVoicePluginInvertPhase(void *, yacmemptr);
void  YAC_CALL StSample__swapPluginSlots(void *, yacmemptr         );
void  YAC_CALL StSample__reorderPluginSlots(void *, yacmemptr      );
void  YAC_CALL StSample___uiSetLastPluginRowIdx(void *, yacmemptr  );
sSI   YAC_CALL StSample___uiGetLastPluginRowIdx(void *             );
void  YAC_CALL StSample___setEnableFX(void *, yacmemptr            );
sSI   YAC_CALL StSample___getEnableFX(void *                       );
void  YAC_CALL StSample___setVoiceBus(void *, yacmemptr            );
sSI   YAC_CALL StSample___getVoiceBus(void *                       );
sSI   YAC_CALL StSample__uiCheckResetRedrawFlag(void *             );
void  YAC_CALL StSample__setUiSVOffset(void *, yacmemptr           );
sF32  YAC_CALL StSample__getUiSVOffset(void *                      );
void  YAC_CALL StSample__setUiSVZoom(void *, yacmemptr             );
void  YAC_CALL StSample__getUiSVZoom(void *, YAC_Value *           );
void  YAC_CALL StSample__setUiSVZoomYIdx(void *, yacmemptr         );
sSI   YAC_CALL StSample__getUiSVZoomYIdx(void *                    );
void  YAC_CALL StSample__setUiEnableAuxToWav(void *, yacmemptr     );
sSI   YAC_CALL StSample__getUiEnableAuxToWav(void *                );
void  YAC_CALL StSample__setVoiceCalibrationValue(void *, yacmemptr);
sF32  YAC_CALL StSample__getVoiceCalibrationValue(void *, yacmemptr);
void  YAC_CALL StSample__setVoiceCalibrationModulo(void *, yacmemptr);
sSI   YAC_CALL StSample__getVoiceCalibrationModulo(void *, yacmemptr);
void  YAC_CALL StSample__setVoiceCalibrationAmount(void *, yacmemptr);
sF32  YAC_CALL StSample__getVoiceCalibrationAmount(void *, yacmemptr);
void  YAC_CALL StSample__setVoiceCalibrationEnable(void *, yacmemptr);
sSI   YAC_CALL StSample__getVoiceCalibrationEnable(void *, yacmemptr);
void  YAC_CALL StSample__setTimestretchAdditiveXFade(void *, yacmemptr);
sF32  YAC_CALL StSample__getTimestretchAdditiveXFade(void *        );
void  YAC_CALL StSample__setAdditiveCfgValid(void *, yacmemptr     );
sSI   YAC_CALL StSample__getAdditiveCfgValid(void *, yacmemptr     );
void  YAC_CALL StSample__setAdditiveEditCfg(void *, yacmemptr      );
sF32  YAC_CALL StSample__getAdditiveEditCfg(void *                 );
void  YAC_CALL StSample__setEnableForceAdditiveEditCfg(void *, yacmemptr);
sSI   YAC_CALL StSample__getEnableForceAdditiveEditCfg(void *      );
void  YAC_CALL StSample__setAdditiveNormalize(void *, yacmemptr    );
sSI   YAC_CALL StSample__getAdditiveNormalize(void *, yacmemptr    );
void  YAC_CALL StSample__setAdditiveLevel(void *, yacmemptr        );
sF32  YAC_CALL StSample__getAdditiveLevel(void *, yacmemptr        );
void  YAC_CALL StSample__setAdditivePhase(void *, yacmemptr        );
sF32  YAC_CALL StSample__getAdditivePhase(void *, yacmemptr        );
void  YAC_CALL StSample__setAdditiveExpA(void *, yacmemptr         );
sF32  YAC_CALL StSample__getAdditiveExpA(void *, yacmemptr         );
void  YAC_CALL StSample__setAdditiveFilter(void *, yacmemptr       );
sF32  YAC_CALL StSample__getAdditiveFilter(void *, yacmemptr       );
void  YAC_CALL StSample__setAdditiveExpL(void *, yacmemptr         );
sF32  YAC_CALL StSample__getAdditiveExpL(void *, yacmemptr         );
void  YAC_CALL StSample___setAdditiveBitReductionPreAmp(void *, yacmemptr);
sF32  YAC_CALL StSample___getAdditiveBitReductionPreAmp(void *, yacmemptr);
void  YAC_CALL StSample___setAdditiveBitReduction(void *, yacmemptr);
sSI   YAC_CALL StSample___getAdditiveBitReduction(void *, yacmemptr);
void  YAC_CALL StSample___setAdditiveBitReductionMask(void *, yacmemptr);
sSI   YAC_CALL StSample___getAdditiveBitReductionMask(void *, yacmemptr);
void  YAC_CALL StSample___setAdditiveRateReduction(void *, yacmemptr);
sSI   YAC_CALL StSample___getAdditiveRateReduction(void *, yacmemptr);
void  YAC_CALL StSample___setAdditiveRateReductionMask(void *, yacmemptr);
sSI   YAC_CALL StSample___getAdditiveRateReductionMask(void *, yacmemptr);
void  YAC_CALL StSample___setAdditiveStereoSpread(void *, yacmemptr);
sF32  YAC_CALL StSample___getAdditiveStereoSpread(void *           );
void  YAC_CALL StSample__recalcAdditiveTbl(void *, yacmemptr       );
void  YAC_CALL StSample__exportAdditiveWavetable(void *, yacmemptr );
void  YAC_CALL StSample___setAiNumPoles(void *, yacmemptr          );
sSI   YAC_CALL StSample___getAiNumPoles(void *                     );
void  YAC_CALL StSample___setAiQ    (void *, yacmemptr             );
sF32  YAC_CALL StSample___getAiQ    (void *                        );
void  YAC_CALL StSample___setAiExpUp(void *, yacmemptr             );
sF32  YAC_CALL StSample___getAiExpUp(void *                        );
void  YAC_CALL StSample___setAiExpDown(void *, yacmemptr           );
sF32  YAC_CALL StSample___getAiExpDown(void *                      );
void  YAC_CALL StSample___setAiLinOct(void *, yacmemptr            );
sF32  YAC_CALL StSample___getAiLinOct(void *                       );
void  YAC_CALL StSample___setAiLinMax(void *, yacmemptr            );
sF32  YAC_CALL StSample___getAiLinMax(void *                       );
void  YAC_CALL StSample___setStartEndFadeNumFrames(void *, yacmemptr);
sSI   YAC_CALL StSample___getStartEndFadeNumFrames(void *          );
void  YAC_CALL StSample___uiSetEnableAutoSelect(void *, yacmemptr  );
sSI   YAC_CALL StSample___uiGetEnableAutoSelect(void *             );
sSI   YAC_CALL StSample___setTuningTable(void *, yacmemptr         );
void  YAC_CALL StSample___getTuningTable(void *, yacmemptr, YAC_Value *);
void  YAC_CALL StSample___setDefaultTuningTableIdx(void *, yacmemptr);
sSI   YAC_CALL StSample___getDefaultTuningTableIdx(void *          );
void  YAC_CALL StSample___setForcedTuningTableIdx(void *, yacmemptr);
sSI   YAC_CALL StSample___getForcedTuningTableIdx(void *           );
void  YAC_CALL StSample___setTuningTableMetaData(void *, yacmemptr );
void* YAC_CALL StSample___getTuningTableMetaData(void *, yacmemptr );
void  YAC_CALL StSample___freeTuningTables(void *                  );
void  YAC_CALL StSample___freeTuningTablesMetaData(void *          );
void  YAC_CALL StSample___mmVarSetEnable(void *, yacmemptr         );
sSI   YAC_CALL StSample___mmVarGetEnable(void *                    );
void  YAC_CALL StSample___mmVarSetNum(void *, yacmemptr            );
sSI   YAC_CALL StSample___mmVarGetNum(void *                       );
void  YAC_CALL StSample___mmVarSetEnableSmooth(void *, yacmemptr   );
sSI   YAC_CALL StSample___mmVarGetEnableSmooth(void *              );
void  YAC_CALL StSample___mmVarSetEditIdx(void *, yacmemptr        );
sSI   YAC_CALL StSample___mmVarGetEditIdx(void *                   );
void  YAC_CALL StSample___mmVarSetEnableForceEditIdx(void *, yacmemptr);
sSI   YAC_CALL StSample___mmVarGetEnableForceEditIdx(void *        );
void  YAC_CALL StSample___mmVarGetData(void *, YAC_Value *         );
#endif // YAC_NO_HOST

// ------------------ YAC class "StSample" reflection map (implementation) ------------------
sUI          YAC_VCALL StSample::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL StSample::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL StSample::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL StSample::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL StSample::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL StSample::yacMethodGetNum                  (void) {return 477;}
const char **YAC_VCALL StSample::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "reinit", "free", "getNext", "setNext", "getName", "setName", "getWaveform", "setWaveform", "getPartialMagnitudes", "setPartialMagnitudes", "getPartialSpeeds", "setPartialSpeeds", "getPartialPhases", "setPartialPhases", "setNumPartials", "getNumPartials", "setPartialCycleLenReset", "getPartialCycleLenReset", "setEnablePartialPhase0", "getEnablePartialPhase0", "handleShiftSampleArea", "handleMoveSampleArea", "verifySampleAreas", "getMutexGroup", "setMutexGroup", "getKeyRange", "getVelRange", "getModRange", "getOrCreateKeyRange", "getOrCreateVelRange", "getOrCreateModRange", "getFreqADSR", "getVolADSR", "getPanADSR", "getAuxADSR", "getOrCreateFreqADSR", "getOrCreateVolADSR", "getOrCreatePanADSR", "getOrCreateAuxADSR", "getFreqLFO", "getVolLFO", "getPanLFO", "getAuxLFO", "getLFOByIndex", "getOrCreateLFOByIndex", "getOrCreateFreqLFO", "getOrCreateVolLFO", "getOrCreatePanLFO", "getOrCreateAuxLFO", "deleteFreqLFO", "deleteVolLFO", "deletePanLFO", "deleteAuxLFO", "getModSeqByIndexAndPatch", "getOrCreateModSeqByIndexAndPatch", "deleteModSeqByIndexAndPatch", "setDefaultModSeqPatch", "getDefaultModSeqPatch", "findLastUsedModSeqPatch", "allocSampleLoops", "getOrCreateSampleLoops", "getSampleLoops", "freeSampleLoops", "getNumSampleLoops", "uiSetEnableSyncFirstLoopIndex", "uiGetEnableSyncFirstLoopIndex", "setFirstLoopIndex", "getFirstLoopIndex", "setNoteOffLoopIndex", "getNoteOffLoopIndex", "setEnableNoteOffLoopImmediately", "getEnableNoteOffLoopImmediately", "setEnableJumpToLoopImmediately", "getEnableJumpToLoopImmediately", "setPlayMode", "getPlayMode", "getFirstOffset", "setFirstOffset", "getFirstLen", "setFirstLen", "getFirstLoopOffset", "setFirstLoopOffset", "getFirstLoopLen", "setFirstLoopLen", "getFirstLoopRep", "setFirstLoopRep", "getLastLoopOffset", "getLastLoopLen", "getOffset", "setOffset", "getLen", "setLen", "getMinOffset", "getMaxOffset", "setMaxVoices", "getMaxVoices", "getVolume", "setVolume", "setVolLFOAmt", "getVolLFOAmt", "getVolumeVelocityAmount", "setVolumeVelocityAmount", "setSampleOffsetRel", "getSampleOffsetRel", "getSampleOffsetVelocityAmount", "setSampleOffsetVelocityAmount", "getEnableInvertSampleOffsetVelocityAmount", "setEnableInvertSampleOffsetVelocityAmount", "getSampleOffsetRandAmount", "setSampleOffsetRandAmount", "getPan", "setPan", "setPanEnvAmt", "getPanEnvAmt", "setPanLFOAmt", "getPanLFOAmt", "getTranspose", "setTranspose", "setTransposeAndUpdateOctSemiCents", "getSampleRateRatio", "setSampleRateRatio", "setUiTransposeOct", "getUiTransposeOct", "setUiTransposeSemi", "getUiTransposeSemi", "setUiTransposeCents", "getUiTransposeCents", "setTransposeAndUpdateOctSemi", "setBeatFrequency", "getBeatFrequency", "setEnableLerpFreq", "getEnableLerpFreq", "setEnableLerpVol", "getEnableLerpVol", "setFreqEnvAmt", "getFreqEnvAmt", "setFreqLFOAmt", "getFreqLFOAmt", "getDelay", "setDelay", "getDelayMultiplier", "setDelayMultiplier", "calcVelZoneVolume", "calcKeyModZoneVolume", "setEnableTimestretch", "getEnableTimestretch", "setEnableTimestretchAdditive", "getEnableTimestretchAdditive", "setEnableTimestretchXFade", "getEnableTimestretchXFade", "setTimestretch", "getTimestretch", "setTimestretchGranularity", "getTimestretchGranularity", "setTimestretchGranularityAmount", "getTimestretchGranularityAmount", "setEnableStaticCyclelen", "getEnableStaticCyclelen", "setEnableAbsoluteTimestretch", "getEnableAbsoluteTimestretch", "setTimestretchInterpolType", "getTimestretchInterpolType", "setTimestretchGrainWindowType", "getTimestretchGrainWindowType", "setTimestretchBend", "getTimestretchBend", "setTimestretchStartPhaseRandAmount", "getTimestretchStartPhaseRandAmount", "setTimestretch2DWidth", "getTimestretch2DWidth", "setTimestretch2DHeight", "getTimestretch2DHeight", "setEnableTimedLoop", "getEnableTimedLoop", "setEnableTimedLoopFade", "getEnableTimedLoopFade", "setTimedLoopBase", "getTimedLoopBase", "setEnableOneShotLoopStep", "getEnableOneShotLoopStep", "setVolumeRampStepsMillisecIn", "getVolumeRampStepsMillisecIn", "setVolumeRampStepsMillisecOut", "getVolumeRampStepsMillisecOut", "setEnableFreezeSampleOffWhenQuiet", "getEnableFreezeSampleOffWhenQuiet", "setEnableModShiftOrig", "getEnableModShiftOrig", "setEnableSampleOffNoteOn", "getEnableSampleOffNoteOn", "setEnabled", "getEnabled", "setInterpolType", "getInterpolType", "setInterpolOrder", "getInterpolOrder", "setBitReductionPreAmp", "getBitReductionPreAmp", "setBitReduction", "getBitReduction", "setBitReductionMask", "getBitReductionMask", "setRateReduction", "getRateReduction", "setRateReductionMask", "getRateReductionMask", "setEnableFromStart", "getEnableFromStart", "getOrCreateWavepathTable", "setEnableWavepath", "getEnableWavepath", "setWavepathIndex", "getWavepathIndex", "setEnableSkipRange", "setEnableAlt", "getEnableAlt", "setEnableFilter", "getEnableFilter", "setFilterType", "getFilterType", "setFilterCutOff", "getFilterCutOff", "setFilterPan", "getFilterPan", "setFilterOffset", "getFilterOffset", "setFilterEQGain", "getFilterEQGain", "setFilterResonance", "getFilterResonance", "setFilterAuxEnvAmount", "getFilterAuxEnvAmount", "setFilterAuxEnvVelocityAmount", "getFilterAuxEnvVelocityAmount", "setFilterAuxLFOAmount", "getFilterAuxLFOAmount", "setFilterKeyboardAmount", "getFilterKeyboardAmount", "setGlideType", "getGlideType", "setGlideSpeedTimeUp", "getGlideSpeedTimeUp", "setGlideSpeedTimeDown", "getGlideSpeedTimeDown", "setGlideSpeedFreqUp", "getGlideSpeedFreqUp", "setGlideSpeedFreqDown", "getGlideSpeedFreqDown", "setEnableGlideRelease", "getEnableGlideRelease", "setGlideMaxNoteDist", "getGlideMaxNoteDist", "setEnableGlideGlissando", "getEnableGlideGlissando", "setGlideMinTime", "getGlideMinTime", "setGlideMaxTime", "getGlideMaxTime", "setEnableGlideRetrigSample", "getEnableGlideRetrigSample", "setEnableGlideRetrigEnvFreq", "getEnableGlideRetrigEnvFreq", "setEnableGlideRetrigEnvVol", "getEnableGlideRetrigEnvVol", "setEnableGlideRetrigEnvPan", "getEnableGlideRetrigEnvPan", "setEnableGlideRetrigEnvAux", "getEnableGlideRetrigEnvAux", "setEnableGlideRetrigLFOFreq", "getEnableGlideRetrigLFOFreq", "setEnableGlideRetrigLFOVol", "getEnableGlideRetrigLFOVol", "setEnableGlideRetrigLFOPan", "getEnableGlideRetrigLFOPan", "setEnableGlideRetrigLFOAux", "getEnableGlideRetrigLFOAux", "setEnableGlideRetrigModSeq", "getEnableGlideRetrigModSeq", "setMMKeyboardCenter", "getMMKeyboardCenter", "setMMKeyboardMin", "getMMKeyboardMin", "setMMKeyboardMax", "getMMKeyboardMax", "setMMEnable", "getMMEnable", "setMMOp", "getMMOp", "setMMSlewUp", "getMMSlewUp", "setMMSlewDown", "getMMSlewDown", "setMMSlewReset", "getMMSlewReset", "setMMSrc", "getMMSrc", "setMMCurve", "getMMCurve", "setMMDst", "getMMDst", "setMMAmt", "getMMAmt", "setMMSignalTap", "getMMSignalTap", "setLiveRecEnable", "getLiveRecEnable", "setLiveRecPause", "getLiveRecPause", "setLiveRecMonitor", "getLiveRecMonitor", "setLiveRecInput", "getLiveRecInput", "setLiveRecStereo", "getLiveRecStereo", "setLiveRecInputPan", "getLiveRecInputPan", "setLiveRecLoopIdx", "getLiveRecLoopIdx", "setLiveRecCopy", "getLiveRecCopy", "setLiveRecClear", "getLiveRecClear", "setLiveRecDoubleBufferMode", "getLiveRecDoubleBufferMode", "setLiveRecDoubleBufferXFade", "getLiveRecDoubleBufferXFade", "setLiveRecOscMode", "getLiveRecOscMode", "setLiveRecOscSingleCycle", "getLiveRecOscSingleCycle", "setLiveRecOscTune", "getLiveRecOscTune", "setLiveRecOscFadeAmt", "getLiveRecOscFadeAmt", "setLiveRecSkipInputNumFrames", "getLiveRecSkipInputNumFrames", "setLiveRecOscPreFilter", "getLiveRecOscPreFilter", "setLiveRecOscResample", "getLiveRecOscResample", "setLiveRecOscSustain", "getLiveRecOscSustain", "setLiveRecMode", "getLiveRecMode", "setLiveRecThresholdOn", "getLiveRecThresholdOn", "setLiveRecThresholdOff", "getLiveRecThresholdOff", "startLiveRecording", "stopLiveRecording", "setEnableSumInput", "getEnableSumInput", "setSumInputXFade", "getSumInputXFade", "hasPlugins", "hasPluginsEnabled", "areAllPluginSlotsUsed", "freePlugins", "setVoicePluginShared", "getVoicePluginShared", "setVoicePluginSharedMissing", "getVoicePluginSharedMissing", "setEnableVoicePluginPreFilter", "getEnableVoicePluginPreFilter", "setVoicePluginAlg", "getVoicePluginAlg", "setVoicePluginAlgFilterPos", "getVoicePluginAlgFilterPos", "setVoicePluginAlgOuter", "getVoicePluginAlgOuter", "setEnableVoicePlugin", "getEnableVoicePlugin", "setVoicePluginLevel", "getVoicePluginLevel", "setVoicePluginDst", "getVoicePluginDst", "setVoicePluginPan", "getVoicePluginPan", "setEnableVoicePluginInvertPhase", "getEnableVoicePluginInvertPhase", "swapPluginSlots", "reorderPluginSlots", "uiSetLastPluginRowIdx", "uiGetLastPluginRowIdx", "setEnableFX", "getEnableFX", "setVoiceBus", "getVoiceBus", "uiCheckResetRedrawFlag", "setUiSVOffset", "getUiSVOffset", "setUiSVZoom", "getUiSVZoom", "setUiSVZoomYIdx", "getUiSVZoomYIdx", "setUiEnableAuxToWav", "getUiEnableAuxToWav", "setVoiceCalibrationValue", "getVoiceCalibrationValue", "setVoiceCalibrationModulo", "getVoiceCalibrationModulo", "setVoiceCalibrationAmount", "getVoiceCalibrationAmount", "setVoiceCalibrationEnable", "getVoiceCalibrationEnable", "setTimestretchAdditiveXFade", "getTimestretchAdditiveXFade", "setAdditiveCfgValid", "getAdditiveCfgValid", "setAdditiveEditCfg", "getAdditiveEditCfg", "setEnableForceAdditiveEditCfg", "getEnableForceAdditiveEditCfg", "setAdditiveNormalize", "getAdditiveNormalize", "setAdditiveLevel", "getAdditiveLevel", "setAdditivePhase", "getAdditivePhase", "setAdditiveExpA", "getAdditiveExpA", "setAdditiveFilter", "getAdditiveFilter", "setAdditiveExpL", "getAdditiveExpL", "setAdditiveBitReductionPreAmp", "getAdditiveBitReductionPreAmp", "setAdditiveBitReduction", "getAdditiveBitReduction", "setAdditiveBitReductionMask", "getAdditiveBitReductionMask", "setAdditiveRateReduction", "getAdditiveRateReduction", "setAdditiveRateReductionMask", "getAdditiveRateReductionMask", "setAdditiveStereoSpread", "getAdditiveStereoSpread", "recalcAdditiveTbl", "exportAdditiveWavetable", "setAiNumPoles", "getAiNumPoles", "setAiQ", "getAiQ", "setAiExpUp", "getAiExpUp", "setAiExpDown", "getAiExpDown", "setAiLinOct", "getAiLinOct", "setAiLinMax", "getAiLinMax", "setStartEndFadeNumFrames", "getStartEndFadeNumFrames", "uiSetEnableAutoSelect", "uiGetEnableAutoSelect", "setTuningTable", "getTuningTable", "setDefaultTuningTableIdx", "getDefaultTuningTableIdx", "setForcedTuningTableIdx", "getForcedTuningTableIdx", "setTuningTableMetaData", "getTuningTableMetaData", "freeTuningTables", "freeTuningTablesMetaData", "mmVarSetEnable", "mmVarGetEnable", "mmVarSetNum", "mmVarGetNum", "mmVarSetEnableSmooth", "mmVarGetEnableSmooth", "mmVarSetEditIdx", "mmVarGetEditIdx", "mmVarSetEnableForceEditIdx", "mmVarGetEnableForceEditIdx", "mmVarGetData"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StSample::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 2, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 2, 2, 1, 2, 1, 2, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 0, 1, 5, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL StSample::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={3,};static const sUI rt5[]={0,};static const sUI rt6[]={3,};static const sUI rt7[]={0,};static const sUI rt8[]={3,};static const sUI rt9[]={0,};static const sUI rt10[]={3,};static const sUI rt11[]={0,};static const sUI rt12[]={3,};static const sUI rt13[]={0,};static const sUI rt14[]={3,};static const sUI rt15[]={2,};static const sUI rt16[]={0,};static const sUI rt17[]={2,};static const sUI rt18[]={0,};static const sUI rt19[]={1,};static const sUI rt20[]={0,};static const sUI rt21[]={1, 1,};static const sUI rt22[]={1, 1, 1,};static const sUI rt23[]={0,};static const sUI rt24[]={0,};static const sUI rt25[]={3,};static const sUI rt26[]={0,};static const sUI rt27[]={0,};static const sUI rt28[]={0,};static const sUI rt29[]={0,};static const sUI rt30[]={0,};static const sUI rt31[]={0,};static const sUI rt32[]={0,};static const sUI rt33[]={0,};static const sUI rt34[]={0,};static const sUI rt35[]={0,};static const sUI rt36[]={0,};static const sUI rt37[]={0,};static const sUI rt38[]={0,};static const sUI rt39[]={0,};static const sUI rt40[]={0,};static const sUI rt41[]={0,};static const sUI rt42[]={0,};static const sUI rt43[]={0,};static const sUI rt44[]={1,};static const sUI rt45[]={1,};static const sUI rt46[]={0,};static const sUI rt47[]={0,};static const sUI rt48[]={0,};static const sUI rt49[]={0,};static const sUI rt50[]={0,};static const sUI rt51[]={0,};static const sUI rt52[]={0,};static const sUI rt53[]={0,};static const sUI rt54[]={1, 1,};static const sUI rt55[]={1, 1,};static const sUI rt56[]={1, 1,};static const sUI rt57[]={1, 1,};static const sUI rt58[]={1,};static const sUI rt59[]={1,};static const sUI rt60[]={0,};static const sUI rt61[]={0,};static const sUI rt62[]={0,};static const sUI rt63[]={0,};static const sUI rt64[]={0,};static const sUI rt65[]={1,};static const sUI rt66[]={0,};static const sUI rt67[]={1,};static const sUI rt68[]={0,};static const sUI rt69[]={1,};static const sUI rt70[]={0,};static const sUI rt71[]={1,};static const sUI rt72[]={0,};static const sUI rt73[]={1,};static const sUI rt74[]={0,};static const sUI rt75[]={1,};static const sUI rt76[]={0,};static const sUI rt77[]={0,};static const sUI rt78[]={1,};static const sUI rt79[]={0,};static const sUI rt80[]={1,};static const sUI rt81[]={0,};static const sUI rt82[]={1,};static const sUI rt83[]={0,};static const sUI rt84[]={1,};static const sUI rt85[]={0,};static const sUI rt86[]={1,};static const sUI rt87[]={0,};static const sUI rt88[]={0,};static const sUI rt89[]={0,};static const sUI rt90[]={1,};static const sUI rt91[]={0,};static const sUI rt92[]={1,};static const sUI rt93[]={0,};static const sUI rt94[]={0,};static const sUI rt95[]={1,};static const sUI rt96[]={0,};static const sUI rt97[]={0,};static const sUI rt98[]={2,};static const sUI rt99[]={2,};static const sUI rt100[]={0,};static const sUI rt101[]={0,};static const sUI rt102[]={2,};static const sUI rt103[]={2,};static const sUI rt104[]={0,};static const sUI rt105[]={0,};static const sUI rt106[]={2,};static const sUI rt107[]={0,};static const sUI rt108[]={1,};static const sUI rt109[]={0,};static const sUI rt110[]={2,};static const sUI rt111[]={0,};static const sUI rt112[]={2,};static const sUI rt113[]={2,};static const sUI rt114[]={0,};static const sUI rt115[]={2,};static const sUI rt116[]={0,};static const sUI rt117[]={0,};static const sUI rt118[]={2,};static const sUI rt119[]={2,};static const sUI rt120[]={0,};static const sUI rt121[]={2,};static const sUI rt122[]={1,};static const sUI rt123[]={0,};static const sUI rt124[]={1,};static const sUI rt125[]={0,};static const sUI rt126[]={2,};static const sUI rt127[]={0,};static const sUI rt128[]={1,};static const sUI rt129[]={2,};static const sUI rt130[]={0,};static const sUI rt131[]={1,};static const sUI rt132[]={0,};static const sUI rt133[]={1,};static const sUI rt134[]={0,};static const sUI rt135[]={2,};static const sUI rt136[]={0,};static const sUI rt137[]={2,};static const sUI rt138[]={0,};static const sUI rt139[]={0,};static const sUI rt140[]={2,};static const sUI rt141[]={0,};static const sUI rt142[]={2,};static const sUI rt143[]={2,};static const sUI rt144[]={2, 2,};static const sUI rt145[]={1,};static const sUI rt146[]={0,};static const sUI rt147[]={1,};static const sUI rt148[]={0,};static const sUI rt149[]={1,};static const sUI rt150[]={0,};static const sUI rt151[]={2,};static const sUI rt152[]={0,};static const sUI rt153[]={2,};static const sUI rt154[]={0,};static const sUI rt155[]={2,};static const sUI rt156[]={0,};static const sUI rt157[]={1,};static const sUI rt158[]={0,};static const sUI rt159[]={1,};static const sUI rt160[]={0,};static const sUI rt161[]={1,};static const sUI rt162[]={0,};static const sUI rt163[]={1,};static const sUI rt164[]={0,};static const sUI rt165[]={2,};static const sUI rt166[]={0,};static const sUI rt167[]={2,};static const sUI rt168[]={0,};static const sUI rt169[]={1,};static const sUI rt170[]={0,};static const sUI rt171[]={1,};static const sUI rt172[]={0,};static const sUI rt173[]={1,};static const sUI rt174[]={0,};static const sUI rt175[]={1,};static const sUI rt176[]={0,};static const sUI rt177[]={2,};static const sUI rt178[]={0,};static const sUI rt179[]={1,};static const sUI rt180[]={0,};static const sUI rt181[]={2,};static const sUI rt182[]={0,};static const sUI rt183[]={2,};static const sUI rt184[]={0,};static const sUI rt185[]={1,};static const sUI rt186[]={0,};static const sUI rt187[]={1,};static const sUI rt188[]={0,};static const sUI rt189[]={1,};static const sUI rt190[]={0,};static const sUI rt191[]={1,};static const sUI rt192[]={0,};static const sUI rt193[]={1,};static const sUI rt194[]={0,};static const sUI rt195[]={1,};static const sUI rt196[]={0,};static const sUI rt197[]={2,};static const sUI rt198[]={0,};static const sUI rt199[]={1,};static const sUI rt200[]={0,};static const sUI rt201[]={1,};static const sUI rt202[]={0,};static const sUI rt203[]={1,};static const sUI rt204[]={0,};static const sUI rt205[]={1,};static const sUI rt206[]={0,};static const sUI rt207[]={1,};static const sUI rt208[]={0,};static const sUI rt209[]={0,};static const sUI rt210[]={1,};static const sUI rt211[]={0,};static const sUI rt212[]={1,};static const sUI rt213[]={0,};static const sUI rt214[]={1,};static const sUI rt215[]={1,};static const sUI rt216[]={0,};static const sUI rt217[]={1,};static const sUI rt218[]={0,};static const sUI rt219[]={1,};static const sUI rt220[]={0,};static const sUI rt221[]={2,};static const sUI rt222[]={0,};static const sUI rt223[]={2,};static const sUI rt224[]={0,};static const sUI rt225[]={2,};static const sUI rt226[]={0,};static const sUI rt227[]={2,};static const sUI rt228[]={0,};static const sUI rt229[]={2,};static const sUI rt230[]={0,};static const sUI rt231[]={2,};static const sUI rt232[]={0,};static const sUI rt233[]={2,};static const sUI rt234[]={0,};static const sUI rt235[]={2,};static const sUI rt236[]={0,};static const sUI rt237[]={2,};static const sUI rt238[]={0,};static const sUI rt239[]={1,};static const sUI rt240[]={0,};static const sUI rt241[]={2,};static const sUI rt242[]={0,};static const sUI rt243[]={2,};static const sUI rt244[]={0,};static const sUI rt245[]={2,};static const sUI rt246[]={0,};static const sUI rt247[]={2,};static const sUI rt248[]={0,};static const sUI rt249[]={1,};static const sUI rt250[]={0,};static const sUI rt251[]={1,};static const sUI rt252[]={0,};static const sUI rt253[]={1,};static const sUI rt254[]={0,};static const sUI rt255[]={1,};static const sUI rt256[]={0,};static const sUI rt257[]={1,};static const sUI rt258[]={0,};static const sUI rt259[]={1,};static const sUI rt260[]={0,};static const sUI rt261[]={1,};static const sUI rt262[]={0,};static const sUI rt263[]={1,};static const sUI rt264[]={0,};static const sUI rt265[]={1,};static const sUI rt266[]={0,};static const sUI rt267[]={1,};static const sUI rt268[]={0,};static const sUI rt269[]={1,};static const sUI rt270[]={0,};static const sUI rt271[]={1,};static const sUI rt272[]={0,};static const sUI rt273[]={1,};static const sUI rt274[]={0,};static const sUI rt275[]={1,};static const sUI rt276[]={0,};static const sUI rt277[]={1, 1,};static const sUI rt278[]={1,};static const sUI rt279[]={2,};static const sUI rt280[]={0,};static const sUI rt281[]={2,};static const sUI rt282[]={0,};static const sUI rt283[]={2,};static const sUI rt284[]={0,};static const sUI rt285[]={1, 1,};static const sUI rt286[]={1,};static const sUI rt287[]={1, 1,};static const sUI rt288[]={1,};static const sUI rt289[]={1, 2,};static const sUI rt290[]={1,};static const sUI rt291[]={1, 2,};static const sUI rt292[]={1,};static const sUI rt293[]={1, 1,};static const sUI rt294[]={1,};static const sUI rt295[]={1, 1,};static const sUI rt296[]={1,};static const sUI rt297[]={1, 2,};static const sUI rt298[]={1,};static const sUI rt299[]={1, 1,};static const sUI rt300[]={1,};static const sUI rt301[]={1, 2,};static const sUI rt302[]={1,};static const sUI rt303[]={1, 1,};static const sUI rt304[]={1,};static const sUI rt305[]={1,};static const sUI rt306[]={0,};static const sUI rt307[]={1,};static const sUI rt308[]={0,};static const sUI rt309[]={1,};static const sUI rt310[]={0,};static const sUI rt311[]={1,};static const sUI rt312[]={0,};static const sUI rt313[]={1,};static const sUI rt314[]={0,};static const sUI rt315[]={2,};static const sUI rt316[]={0,};static const sUI rt317[]={1,};static const sUI rt318[]={0,};static const sUI rt319[]={1,};static const sUI rt320[]={0,};static const sUI rt321[]={1,};static const sUI rt322[]={0,};static const sUI rt323[]={1,};static const sUI rt324[]={0,};static const sUI rt325[]={1,};static const sUI rt326[]={0,};static const sUI rt327[]={1,};static const sUI rt328[]={0,};static const sUI rt329[]={1,};static const sUI rt330[]={0,};static const sUI rt331[]={2,};static const sUI rt332[]={0,};static const sUI rt333[]={2,};static const sUI rt334[]={0,};static const sUI rt335[]={1,};static const sUI rt336[]={0,};static const sUI rt337[]={2,};static const sUI rt338[]={0,};static const sUI rt339[]={1,};static const sUI rt340[]={0,};static const sUI rt341[]={1,};static const sUI rt342[]={0,};static const sUI rt343[]={1,};static const sUI rt344[]={0,};static const sUI rt345[]={2,};static const sUI rt346[]={0,};static const sUI rt347[]={2,};static const sUI rt348[]={0,};static const sUI rt349[]={0,};static const sUI rt350[]={0,};static const sUI rt351[]={1,};static const sUI rt352[]={0,};static const sUI rt353[]={2,};static const sUI rt354[]={0,};static const sUI rt355[]={0,};static const sUI rt356[]={0,};static const sUI rt357[]={0,};static const sUI rt358[]={0,};static const sUI rt359[]={1, 3,};static const sUI rt360[]={1,};static const sUI rt361[]={1, 3,};static const sUI rt362[]={1,};static const sUI rt363[]={1, 1,};static const sUI rt364[]={1,};static const sUI rt365[]={1,};static const sUI rt366[]={0,};static const sUI rt367[]={1,};static const sUI rt368[]={0,};static const sUI rt369[]={1,};static const sUI rt370[]={0,};static const sUI rt371[]={1, 1,};static const sUI rt372[]={1,};static const sUI rt373[]={1, 2,};static const sUI rt374[]={1,};static const sUI rt375[]={1, 1,};static const sUI rt376[]={1,};static const sUI rt377[]={1, 2,};static const sUI rt378[]={1,};static const sUI rt379[]={1, 1,};static const sUI rt380[]={1,};static const sUI rt381[]={1, 1,};static const sUI rt382[]={3,};static const sUI rt383[]={1,};static const sUI rt384[]={0,};static const sUI rt385[]={1,};static const sUI rt386[]={0,};static const sUI rt387[]={1,};static const sUI rt388[]={0,};static const sUI rt389[]={0,};static const sUI rt390[]={2,};static const sUI rt391[]={0,};static const sUI rt392[]={3,};static const sUI rt393[]={0,};static const sUI rt394[]={1,};static const sUI rt395[]={0,};static const sUI rt396[]={1,};static const sUI rt397[]={0,};static const sUI rt398[]={1, 1, 2,};static const sUI rt399[]={1, 1,};static const sUI rt400[]={1, 1,};static const sUI rt401[]={1,};static const sUI rt402[]={1, 2,};static const sUI rt403[]={1,};static const sUI rt404[]={1, 1,};static const sUI rt405[]={1,};static const sUI rt406[]={2,};static const sUI rt407[]={0,};static const sUI rt408[]={1, 1,};static const sUI rt409[]={1,};static const sUI rt410[]={2,};static const sUI rt411[]={0,};static const sUI rt412[]={1,};static const sUI rt413[]={0,};static const sUI rt414[]={1, 1,};static const sUI rt415[]={1,};static const sUI rt416[]={1, 1, 2,};static const sUI rt417[]={1, 1,};static const sUI rt418[]={1, 1, 2,};static const sUI rt419[]={1, 1,};static const sUI rt420[]={1, 1, 2,};static const sUI rt421[]={1, 1,};static const sUI rt422[]={1, 1, 2,};static const sUI rt423[]={1, 1,};static const sUI rt424[]={1, 1, 2,};static const sUI rt425[]={1, 1,};static const sUI rt426[]={1, 2,};static const sUI rt427[]={1,};static const sUI rt428[]={1, 1,};static const sUI rt429[]={1,};static const sUI rt430[]={1, 1,};static const sUI rt431[]={1,};static const sUI rt432[]={1, 1,};static const sUI rt433[]={1,};static const sUI rt434[]={1, 1,};static const sUI rt435[]={1,};static const sUI rt436[]={2,};static const sUI rt437[]={0,};static const sUI rt438[]={1,};static const sUI rt439[]={3, 1, 1, 2, 1,};static const sUI rt440[]={1,};static const sUI rt441[]={0,};static const sUI rt442[]={2,};static const sUI rt443[]={0,};static const sUI rt444[]={2,};static const sUI rt445[]={0,};static const sUI rt446[]={2,};static const sUI rt447[]={0,};static const sUI rt448[]={2,};static const sUI rt449[]={0,};static const sUI rt450[]={2,};static const sUI rt451[]={0,};static const sUI rt452[]={1,};static const sUI rt453[]={0,};static const sUI rt454[]={1,};static const sUI rt455[]={0,};static const sUI rt456[]={1, 3,};static const sUI rt457[]={1,};static const sUI rt458[]={1,};static const sUI rt459[]={0,};static const sUI rt460[]={1,};static const sUI rt461[]={0,};static const sUI rt462[]={1, 3,};static const sUI rt463[]={1,};static const sUI rt464[]={0,};static const sUI rt465[]={0,};static const sUI rt466[]={1,};static const sUI rt467[]={0,};static const sUI rt468[]={1,};static const sUI rt469[]={0,};static const sUI rt470[]={1,};static const sUI rt471[]={0,};static const sUI rt472[]={1,};static const sUI rt473[]={0,};static const sUI rt474[]={1,};static const sUI rt475[]={0,};static const sUI rt476[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39, rt40, rt41, rt42, rt43, rt44, rt45, rt46, rt47, rt48, rt49, rt50, rt51, rt52, rt53, rt54, rt55, rt56, rt57, rt58, rt59, rt60, rt61, rt62, rt63, rt64, rt65, rt66, rt67, rt68, rt69, rt70, rt71, rt72, rt73, rt74, rt75, rt76, rt77, rt78, rt79, rt80, rt81, rt82, rt83, rt84, rt85, rt86, rt87, rt88, rt89, rt90, rt91, rt92, rt93, rt94, rt95, rt96, rt97, rt98, rt99, rt100, rt101, rt102, rt103, rt104, rt105, rt106, rt107, rt108, rt109, rt110, rt111, rt112, rt113, rt114, rt115, rt116, rt117, rt118, rt119, rt120, rt121, rt122, rt123, rt124, rt125, rt126, rt127, rt128, rt129, rt130, rt131, rt132, rt133, rt134, rt135, rt136, rt137, rt138, rt139, rt140, rt141, rt142, rt143, rt144, rt145, rt146, rt147, rt148, rt149, rt150, rt151, rt152, rt153, rt154, rt155, rt156, rt157, rt158, rt159, rt160, rt161, rt162, rt163, rt164, rt165, rt166, rt167, rt168, rt169, rt170, rt171, rt172, rt173, rt174, rt175, rt176, rt177, rt178, rt179, rt180, rt181, rt182, rt183, rt184, rt185, rt186, rt187, rt188, rt189, rt190, rt191, rt192, rt193, rt194, rt195, rt196, rt197, rt198, rt199, rt200, rt201, rt202, rt203, rt204, rt205, rt206, rt207, rt208, rt209, rt210, rt211, rt212, rt213, rt214, rt215, rt216, rt217, rt218, rt219, rt220, rt221, rt222, rt223, rt224, rt225, rt226, rt227, rt228, rt229, rt230, rt231, rt232, rt233, rt234, rt235, rt236, rt237, rt238, rt239, rt240, rt241, rt242, rt243, rt244, rt245, rt246, rt247, rt248, rt249, rt250, rt251, rt252, rt253, rt254, rt255, rt256, rt257, rt258, rt259, rt260, rt261, rt262, rt263, rt264, rt265, rt266, rt267, rt268, rt269, rt270, rt271, rt272, rt273, rt274, rt275, rt276, rt277, rt278, rt279, rt280, rt281, rt282, rt283, rt284, rt285, rt286, rt287, rt288, rt289, rt290, rt291, rt292, rt293, rt294, rt295, rt296, rt297, rt298, rt299, rt300, rt301, rt302, rt303, rt304, rt305, rt306, rt307, rt308, rt309, rt310, rt311, rt312, rt313, rt314, rt315, rt316, rt317, rt318, rt319, rt320, rt321, rt322, rt323, rt324, rt325, rt326, rt327, rt328, rt329, rt330, rt331, rt332, rt333, rt334, rt335, rt336, rt337, rt338, rt339, rt340, rt341, rt342, rt343, rt344, rt345, rt346, rt347, rt348, rt349, rt350, rt351, rt352, rt353, rt354, rt355, rt356, rt357, rt358, rt359, rt360, rt361, rt362, rt363, rt364, rt365, rt366, rt367, rt368, rt369, rt370, rt371, rt372, rt373, rt374, rt375, rt376, rt377, rt378, rt379, rt380, rt381, rt382, rt383, rt384, rt385, rt386, rt387, rt388, rt389, rt390, rt391, rt392, rt393, rt394, rt395, rt396, rt397, rt398, rt399, rt400, rt401, rt402, rt403, rt404, rt405, rt406, rt407, rt408, rt409, rt410, rt411, rt412, rt413, rt414, rt415, rt416, rt417, rt418, rt419, rt420, rt421, rt422, rt423, rt424, rt425, rt426, rt427, rt428, rt429, rt430, rt431, rt432, rt433, rt434, rt435, rt436, rt437, rt438, rt439, rt440, rt441, rt442, rt443, rt444, rt445, rt446, rt447, rt448, rt449, rt450, rt451, rt452, rt453, rt454, rt455, rt456, rt457, rt458, rt459, rt460, rt461, rt462, rt463, rt464, rt465, rt466, rt467, rt468, rt469, rt470, rt471, rt472, rt473, rt474, rt475, rt476}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL StSample::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0, (const char*)0,};static const char *rs22[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char *rs34[]={(const char*)0,};static const char *rs35[]={(const char*)0,};static const char *rs36[]={(const char*)0,};static const char *rs37[]={(const char*)0,};static const char *rs38[]={(const char*)0,};static const char *rs39[]={(const char*)0,};static const char *rs40[]={(const char*)0,};static const char *rs41[]={(const char*)0,};static const char *rs42[]={(const char*)0,};static const char *rs43[]={(const char*)0,};static const char *rs44[]={(const char*)0,};static const char *rs45[]={(const char*)0,};static const char *rs46[]={(const char*)0,};static const char *rs47[]={(const char*)0,};static const char *rs48[]={(const char*)0,};static const char *rs49[]={(const char*)0,};static const char *rs50[]={(const char*)0,};static const char *rs51[]={(const char*)0,};static const char *rs52[]={(const char*)0,};static const char *rs53[]={(const char*)0,};static const char *rs54[]={(const char*)0, (const char*)0,};static const char *rs55[]={(const char*)0, (const char*)0,};static const char *rs56[]={(const char*)0, (const char*)0,};static const char *rs57[]={(const char*)0, (const char*)0,};static const char *rs58[]={(const char*)0,};static const char *rs59[]={(const char*)0,};static const char *rs60[]={(const char*)0,};static const char *rs61[]={(const char*)0,};static const char *rs62[]={(const char*)0,};static const char *rs63[]={(const char*)0,};static const char *rs64[]={(const char*)0,};static const char *rs65[]={(const char*)0,};static const char *rs66[]={(const char*)0,};static const char *rs67[]={(const char*)0,};static const char *rs68[]={(const char*)0,};static const char *rs69[]={(const char*)0,};static const char *rs70[]={(const char*)0,};static const char *rs71[]={(const char*)0,};static const char *rs72[]={(const char*)0,};static const char *rs73[]={(const char*)0,};static const char *rs74[]={(const char*)0,};static const char *rs75[]={(const char*)0,};static const char *rs76[]={(const char*)0,};static const char *rs77[]={(const char*)0,};static const char *rs78[]={(const char*)0,};static const char *rs79[]={(const char*)0,};static const char *rs80[]={(const char*)0,};static const char *rs81[]={(const char*)0,};static const char *rs82[]={(const char*)0,};static const char *rs83[]={(const char*)0,};static const char *rs84[]={(const char*)0,};static const char *rs85[]={(const char*)0,};static const char *rs86[]={(const char*)0,};static const char *rs87[]={(const char*)0,};static const char *rs88[]={(const char*)0,};static const char *rs89[]={(const char*)0,};static const char *rs90[]={(const char*)0,};static const char *rs91[]={(const char*)0,};static const char *rs92[]={(const char*)0,};static const char *rs93[]={(const char*)0,};static const char *rs94[]={(const char*)0,};static const char *rs95[]={(const char*)0,};static const char *rs96[]={(const char*)0,};static const char *rs97[]={(const char*)0,};static const char *rs98[]={(const char*)0,};static const char *rs99[]={(const char*)0,};static const char *rs100[]={(const char*)0,};static const char *rs101[]={(const char*)0,};static const char *rs102[]={(const char*)0,};static const char *rs103[]={(const char*)0,};static const char *rs104[]={(const char*)0,};static const char *rs105[]={(const char*)0,};static const char *rs106[]={(const char*)0,};static const char *rs107[]={(const char*)0,};static const char *rs108[]={(const char*)0,};static const char *rs109[]={(const char*)0,};static const char *rs110[]={(const char*)0,};static const char *rs111[]={(const char*)0,};static const char *rs112[]={(const char*)0,};static const char *rs113[]={(const char*)0,};static const char *rs114[]={(const char*)0,};static const char *rs115[]={(const char*)0,};static const char *rs116[]={(const char*)0,};static const char *rs117[]={(const char*)0,};static const char *rs118[]={(const char*)0,};static const char *rs119[]={(const char*)0,};static const char *rs120[]={(const char*)0,};static const char *rs121[]={(const char*)0,};static const char *rs122[]={(const char*)0,};static const char *rs123[]={(const char*)0,};static const char *rs124[]={(const char*)0,};static const char *rs125[]={(const char*)0,};static const char *rs126[]={(const char*)0,};static const char *rs127[]={(const char*)0,};static const char *rs128[]={(const char*)0,};static const char *rs129[]={(const char*)0,};static const char *rs130[]={(const char*)0,};static const char *rs131[]={(const char*)0,};static const char *rs132[]={(const char*)0,};static const char *rs133[]={(const char*)0,};static const char *rs134[]={(const char*)0,};static const char *rs135[]={(const char*)0,};static const char *rs136[]={(const char*)0,};static const char *rs137[]={(const char*)0,};static const char *rs138[]={(const char*)0,};static const char *rs139[]={(const char*)0,};static const char *rs140[]={(const char*)0,};static const char *rs141[]={(const char*)0,};static const char *rs142[]={(const char*)0,};static const char *rs143[]={(const char*)0,};static const char *rs144[]={(const char*)0, (const char*)0,};static const char *rs145[]={(const char*)0,};static const char *rs146[]={(const char*)0,};static const char *rs147[]={(const char*)0,};static const char *rs148[]={(const char*)0,};static const char *rs149[]={(const char*)0,};static const char *rs150[]={(const char*)0,};static const char *rs151[]={(const char*)0,};static const char *rs152[]={(const char*)0,};static const char *rs153[]={(const char*)0,};static const char *rs154[]={(const char*)0,};static const char *rs155[]={(const char*)0,};static const char *rs156[]={(const char*)0,};static const char *rs157[]={(const char*)0,};static const char *rs158[]={(const char*)0,};static const char *rs159[]={(const char*)0,};static const char *rs160[]={(const char*)0,};static const char *rs161[]={(const char*)0,};static const char *rs162[]={(const char*)0,};static const char *rs163[]={(const char*)0,};static const char *rs164[]={(const char*)0,};static const char *rs165[]={(const char*)0,};static const char *rs166[]={(const char*)0,};static const char *rs167[]={(const char*)0,};static const char *rs168[]={(const char*)0,};static const char *rs169[]={(const char*)0,};static const char *rs170[]={(const char*)0,};static const char *rs171[]={(const char*)0,};static const char *rs172[]={(const char*)0,};static const char *rs173[]={(const char*)0,};static const char *rs174[]={(const char*)0,};static const char *rs175[]={(const char*)0,};static const char *rs176[]={(const char*)0,};static const char *rs177[]={(const char*)0,};static const char *rs178[]={(const char*)0,};static const char *rs179[]={(const char*)0,};static const char *rs180[]={(const char*)0,};static const char *rs181[]={(const char*)0,};static const char *rs182[]={(const char*)0,};static const char *rs183[]={(const char*)0,};static const char *rs184[]={(const char*)0,};static const char *rs185[]={(const char*)0,};static const char *rs186[]={(const char*)0,};static const char *rs187[]={(const char*)0,};static const char *rs188[]={(const char*)0,};static const char *rs189[]={(const char*)0,};static const char *rs190[]={(const char*)0,};static const char *rs191[]={(const char*)0,};static const char *rs192[]={(const char*)0,};static const char *rs193[]={(const char*)0,};static const char *rs194[]={(const char*)0,};static const char *rs195[]={(const char*)0,};static const char *rs196[]={(const char*)0,};static const char *rs197[]={(const char*)0,};static const char *rs198[]={(const char*)0,};static const char *rs199[]={(const char*)0,};static const char *rs200[]={(const char*)0,};static const char *rs201[]={(const char*)0,};static const char *rs202[]={(const char*)0,};static const char *rs203[]={(const char*)0,};static const char *rs204[]={(const char*)0,};static const char *rs205[]={(const char*)0,};static const char *rs206[]={(const char*)0,};static const char *rs207[]={(const char*)0,};static const char *rs208[]={(const char*)0,};static const char *rs209[]={(const char*)0,};static const char *rs210[]={(const char*)0,};static const char *rs211[]={(const char*)0,};static const char *rs212[]={(const char*)0,};static const char *rs213[]={(const char*)0,};static const char *rs214[]={(const char*)0,};static const char *rs215[]={(const char*)0,};static const char *rs216[]={(const char*)0,};static const char *rs217[]={(const char*)0,};static const char *rs218[]={(const char*)0,};static const char *rs219[]={(const char*)0,};static const char *rs220[]={(const char*)0,};static const char *rs221[]={(const char*)0,};static const char *rs222[]={(const char*)0,};static const char *rs223[]={(const char*)0,};static const char *rs224[]={(const char*)0,};static const char *rs225[]={(const char*)0,};static const char *rs226[]={(const char*)0,};static const char *rs227[]={(const char*)0,};static const char *rs228[]={(const char*)0,};static const char *rs229[]={(const char*)0,};static const char *rs230[]={(const char*)0,};static const char *rs231[]={(const char*)0,};static const char *rs232[]={(const char*)0,};static const char *rs233[]={(const char*)0,};static const char *rs234[]={(const char*)0,};static const char *rs235[]={(const char*)0,};static const char *rs236[]={(const char*)0,};static const char *rs237[]={(const char*)0,};static const char *rs238[]={(const char*)0,};static const char *rs239[]={(const char*)0,};static const char *rs240[]={(const char*)0,};static const char *rs241[]={(const char*)0,};static const char *rs242[]={(const char*)0,};static const char *rs243[]={(const char*)0,};static const char *rs244[]={(const char*)0,};static const char *rs245[]={(const char*)0,};static const char *rs246[]={(const char*)0,};static const char *rs247[]={(const char*)0,};static const char *rs248[]={(const char*)0,};static const char *rs249[]={(const char*)0,};static const char *rs250[]={(const char*)0,};static const char *rs251[]={(const char*)0,};static const char *rs252[]={(const char*)0,};static const char *rs253[]={(const char*)0,};static const char *rs254[]={(const char*)0,};static const char *rs255[]={(const char*)0,};static const char *rs256[]={(const char*)0,};static const char *rs257[]={(const char*)0,};static const char *rs258[]={(const char*)0,};static const char *rs259[]={(const char*)0,};static const char *rs260[]={(const char*)0,};static const char *rs261[]={(const char*)0,};static const char *rs262[]={(const char*)0,};static const char *rs263[]={(const char*)0,};static const char *rs264[]={(const char*)0,};static const char *rs265[]={(const char*)0,};static const char *rs266[]={(const char*)0,};static const char *rs267[]={(const char*)0,};static const char *rs268[]={(const char*)0,};static const char *rs269[]={(const char*)0,};static const char *rs270[]={(const char*)0,};static const char *rs271[]={(const char*)0,};static const char *rs272[]={(const char*)0,};static const char *rs273[]={(const char*)0,};static const char *rs274[]={(const char*)0,};static const char *rs275[]={(const char*)0,};static const char *rs276[]={(const char*)0,};static const char *rs277[]={(const char*)0, (const char*)0,};static const char *rs278[]={(const char*)0,};static const char *rs279[]={(const char*)0,};static const char *rs280[]={(const char*)0,};static const char *rs281[]={(const char*)0,};static const char *rs282[]={(const char*)0,};static const char *rs283[]={(const char*)0,};static const char *rs284[]={(const char*)0,};static const char *rs285[]={(const char*)0, (const char*)0,};static const char *rs286[]={(const char*)0,};static const char *rs287[]={(const char*)0, (const char*)0,};static const char *rs288[]={(const char*)0,};static const char *rs289[]={(const char*)0, (const char*)0,};static const char *rs290[]={(const char*)0,};static const char *rs291[]={(const char*)0, (const char*)0,};static const char *rs292[]={(const char*)0,};static const char *rs293[]={(const char*)0, (const char*)0,};static const char *rs294[]={(const char*)0,};static const char *rs295[]={(const char*)0, (const char*)0,};static const char *rs296[]={(const char*)0,};static const char *rs297[]={(const char*)0, (const char*)0,};static const char *rs298[]={(const char*)0,};static const char *rs299[]={(const char*)0, (const char*)0,};static const char *rs300[]={(const char*)0,};static const char *rs301[]={(const char*)0, (const char*)0,};static const char *rs302[]={(const char*)0,};static const char *rs303[]={(const char*)0, (const char*)0,};static const char *rs304[]={(const char*)0,};static const char *rs305[]={(const char*)0,};static const char *rs306[]={(const char*)0,};static const char *rs307[]={(const char*)0,};static const char *rs308[]={(const char*)0,};static const char *rs309[]={(const char*)0,};static const char *rs310[]={(const char*)0,};static const char *rs311[]={(const char*)0,};static const char *rs312[]={(const char*)0,};static const char *rs313[]={(const char*)0,};static const char *rs314[]={(const char*)0,};static const char *rs315[]={(const char*)0,};static const char *rs316[]={(const char*)0,};static const char *rs317[]={(const char*)0,};static const char *rs318[]={(const char*)0,};static const char *rs319[]={(const char*)0,};static const char *rs320[]={(const char*)0,};static const char *rs321[]={(const char*)0,};static const char *rs322[]={(const char*)0,};static const char *rs323[]={(const char*)0,};static const char *rs324[]={(const char*)0,};static const char *rs325[]={(const char*)0,};static const char *rs326[]={(const char*)0,};static const char *rs327[]={(const char*)0,};static const char *rs328[]={(const char*)0,};static const char *rs329[]={(const char*)0,};static const char *rs330[]={(const char*)0,};static const char *rs331[]={(const char*)0,};static const char *rs332[]={(const char*)0,};static const char *rs333[]={(const char*)0,};static const char *rs334[]={(const char*)0,};static const char *rs335[]={(const char*)0,};static const char *rs336[]={(const char*)0,};static const char *rs337[]={(const char*)0,};static const char *rs338[]={(const char*)0,};static const char *rs339[]={(const char*)0,};static const char *rs340[]={(const char*)0,};static const char *rs341[]={(const char*)0,};static const char *rs342[]={(const char*)0,};static const char *rs343[]={(const char*)0,};static const char *rs344[]={(const char*)0,};static const char *rs345[]={(const char*)0,};static const char *rs346[]={(const char*)0,};static const char *rs347[]={(const char*)0,};static const char *rs348[]={(const char*)0,};static const char *rs349[]={(const char*)0,};static const char *rs350[]={(const char*)0,};static const char *rs351[]={(const char*)0,};static const char *rs352[]={(const char*)0,};static const char *rs353[]={(const char*)0,};static const char *rs354[]={(const char*)0,};static const char *rs355[]={(const char*)0,};static const char *rs356[]={(const char*)0,};static const char *rs357[]={(const char*)0,};static const char *rs358[]={(const char*)0,};static const char *rs359[]={(const char*)0, (const char*)0,};static const char *rs360[]={(const char*)0,};static const char *rs361[]={(const char*)0, (const char*)0,};static const char *rs362[]={(const char*)0,};static const char *rs363[]={(const char*)0, (const char*)0,};static const char *rs364[]={(const char*)0,};static const char *rs365[]={(const char*)0,};static const char *rs366[]={(const char*)0,};static const char *rs367[]={(const char*)0,};static const char *rs368[]={(const char*)0,};static const char *rs369[]={(const char*)0,};static const char *rs370[]={(const char*)0,};static const char *rs371[]={(const char*)0, (const char*)0,};static const char *rs372[]={(const char*)0,};static const char *rs373[]={(const char*)0, (const char*)0,};static const char *rs374[]={(const char*)0,};static const char *rs375[]={(const char*)0, (const char*)0,};static const char *rs376[]={(const char*)0,};static const char *rs377[]={(const char*)0, (const char*)0,};static const char *rs378[]={(const char*)0,};static const char *rs379[]={(const char*)0, (const char*)0,};static const char *rs380[]={(const char*)0,};static const char *rs381[]={(const char*)0, (const char*)0,};static const char *rs382[]={(const char*)0,};static const char *rs383[]={(const char*)0,};static const char *rs384[]={(const char*)0,};static const char *rs385[]={(const char*)0,};static const char *rs386[]={(const char*)0,};static const char *rs387[]={(const char*)0,};static const char *rs388[]={(const char*)0,};static const char *rs389[]={(const char*)0,};static const char *rs390[]={(const char*)0,};static const char *rs391[]={(const char*)0,};static const char *rs392[]={(const char*)0,};static const char *rs393[]={(const char*)0,};static const char *rs394[]={(const char*)0,};static const char *rs395[]={(const char*)0,};static const char *rs396[]={(const char*)0,};static const char *rs397[]={(const char*)0,};static const char *rs398[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs399[]={(const char*)0, (const char*)0,};static const char *rs400[]={(const char*)0, (const char*)0,};static const char *rs401[]={(const char*)0,};static const char *rs402[]={(const char*)0, (const char*)0,};static const char *rs403[]={(const char*)0,};static const char *rs404[]={(const char*)0, (const char*)0,};static const char *rs405[]={(const char*)0,};static const char *rs406[]={(const char*)0,};static const char *rs407[]={(const char*)0,};static const char *rs408[]={(const char*)0, (const char*)0,};static const char *rs409[]={(const char*)0,};static const char *rs410[]={(const char*)0,};static const char *rs411[]={(const char*)0,};static const char *rs412[]={(const char*)0,};static const char *rs413[]={(const char*)0,};static const char *rs414[]={(const char*)0, (const char*)0,};static const char *rs415[]={(const char*)0,};static const char *rs416[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs417[]={(const char*)0, (const char*)0,};static const char *rs418[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs419[]={(const char*)0, (const char*)0,};static const char *rs420[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs421[]={(const char*)0, (const char*)0,};static const char *rs422[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs423[]={(const char*)0, (const char*)0,};static const char *rs424[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs425[]={(const char*)0, (const char*)0,};static const char *rs426[]={(const char*)0, (const char*)0,};static const char *rs427[]={(const char*)0,};static const char *rs428[]={(const char*)0, (const char*)0,};static const char *rs429[]={(const char*)0,};static const char *rs430[]={(const char*)0, (const char*)0,};static const char *rs431[]={(const char*)0,};static const char *rs432[]={(const char*)0, (const char*)0,};static const char *rs433[]={(const char*)0,};static const char *rs434[]={(const char*)0, (const char*)0,};static const char *rs435[]={(const char*)0,};static const char *rs436[]={(const char*)0,};static const char *rs437[]={(const char*)0,};static const char *rs438[]={(const char*)0,};static const char *rs439[]={"FloatArray", (const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs440[]={(const char*)0,};static const char *rs441[]={(const char*)0,};static const char *rs442[]={(const char*)0,};static const char *rs443[]={(const char*)0,};static const char *rs444[]={(const char*)0,};static const char *rs445[]={(const char*)0,};static const char *rs446[]={(const char*)0,};static const char *rs447[]={(const char*)0,};static const char *rs448[]={(const char*)0,};static const char *rs449[]={(const char*)0,};static const char *rs450[]={(const char*)0,};static const char *rs451[]={(const char*)0,};static const char *rs452[]={(const char*)0,};static const char *rs453[]={(const char*)0,};static const char *rs454[]={(const char*)0,};static const char *rs455[]={(const char*)0,};static const char *rs456[]={(const char*)0, (const char*)0,};static const char *rs457[]={(const char*)0,};static const char *rs458[]={(const char*)0,};static const char *rs459[]={(const char*)0,};static const char *rs460[]={(const char*)0,};static const char *rs461[]={(const char*)0,};static const char *rs462[]={(const char*)0, (const char*)0,};static const char *rs463[]={(const char*)0,};static const char *rs464[]={(const char*)0,};static const char *rs465[]={(const char*)0,};static const char *rs466[]={(const char*)0,};static const char *rs467[]={(const char*)0,};static const char *rs468[]={(const char*)0,};static const char *rs469[]={(const char*)0,};static const char *rs470[]={(const char*)0,};static const char *rs471[]={(const char*)0,};static const char *rs472[]={(const char*)0,};static const char *rs473[]={(const char*)0,};static const char *rs474[]={(const char*)0,};static const char *rs475[]={(const char*)0,};static const char *rs476[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39, rs40, rs41, rs42, rs43, rs44, rs45, rs46, rs47, rs48, rs49, rs50, rs51, rs52, rs53, rs54, rs55, rs56, rs57, rs58, rs59, rs60, rs61, rs62, rs63, rs64, rs65, rs66, rs67, rs68, rs69, rs70, rs71, rs72, rs73, rs74, rs75, rs76, rs77, rs78, rs79, rs80, rs81, rs82, rs83, rs84, rs85, rs86, rs87, rs88, rs89, rs90, rs91, rs92, rs93, rs94, rs95, rs96, rs97, rs98, rs99, rs100, rs101, rs102, rs103, rs104, rs105, rs106, rs107, rs108, rs109, rs110, rs111, rs112, rs113, rs114, rs115, rs116, rs117, rs118, rs119, rs120, rs121, rs122, rs123, rs124, rs125, rs126, rs127, rs128, rs129, rs130, rs131, rs132, rs133, rs134, rs135, rs136, rs137, rs138, rs139, rs140, rs141, rs142, rs143, rs144, rs145, rs146, rs147, rs148, rs149, rs150, rs151, rs152, rs153, rs154, rs155, rs156, rs157, rs158, rs159, rs160, rs161, rs162, rs163, rs164, rs165, rs166, rs167, rs168, rs169, rs170, rs171, rs172, rs173, rs174, rs175, rs176, rs177, rs178, rs179, rs180, rs181, rs182, rs183, rs184, rs185, rs186, rs187, rs188, rs189, rs190, rs191, rs192, rs193, rs194, rs195, rs196, rs197, rs198, rs199, rs200, rs201, rs202, rs203, rs204, rs205, rs206, rs207, rs208, rs209, rs210, rs211, rs212, rs213, rs214, rs215, rs216, rs217, rs218, rs219, rs220, rs221, rs222, rs223, rs224, rs225, rs226, rs227, rs228, rs229, rs230, rs231, rs232, rs233, rs234, rs235, rs236, rs237, rs238, rs239, rs240, rs241, rs242, rs243, rs244, rs245, rs246, rs247, rs248, rs249, rs250, rs251, rs252, rs253, rs254, rs255, rs256, rs257, rs258, rs259, rs260, rs261, rs262, rs263, rs264, rs265, rs266, rs267, rs268, rs269, rs270, rs271, rs272, rs273, rs274, rs275, rs276, rs277, rs278, rs279, rs280, rs281, rs282, rs283, rs284, rs285, rs286, rs287, rs288, rs289, rs290, rs291, rs292, rs293, rs294, rs295, rs296, rs297, rs298, rs299, rs300, rs301, rs302, rs303, rs304, rs305, rs306, rs307, rs308, rs309, rs310, rs311, rs312, rs313, rs314, rs315, rs316, rs317, rs318, rs319, rs320, rs321, rs322, rs323, rs324, rs325, rs326, rs327, rs328, rs329, rs330, rs331, rs332, rs333, rs334, rs335, rs336, rs337, rs338, rs339, rs340, rs341, rs342, rs343, rs344, rs345, rs346, rs347, rs348, rs349, rs350, rs351, rs352, rs353, rs354, rs355, rs356, rs357, rs358, rs359, rs360, rs361, rs362, rs363, rs364, rs365, rs366, rs367, rs368, rs369, rs370, rs371, rs372, rs373, rs374, rs375, rs376, rs377, rs378, rs379, rs380, rs381, rs382, rs383, rs384, rs385, rs386, rs387, rs388, rs389, rs390, rs391, rs392, rs393, rs394, rs395, rs396, rs397, rs398, rs399, rs400, rs401, rs402, rs403, rs404, rs405, rs406, rs407, rs408, rs409, rs410, rs411, rs412, rs413, rs414, rs415, rs416, rs417, rs418, rs419, rs420, rs421, rs422, rs423, rs424, rs425, rs426, rs427, rs428, rs429, rs430, rs431, rs432, rs433, rs434, rs435, rs436, rs437, rs438, rs439, rs440, rs441, rs442, rs443, rs444, rs445, rs446, rs447, rs448, rs449, rs450, rs451, rs452, rs453, rs454, rs455, rs456, rs457, rs458, rs459, rs460, rs461, rs462, rs463, rs464, rs465, rs466, rs467, rs468, rs469, rs470, rs471, rs472, rs473, rs474, rs475, rs476}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StSample::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 0, 2, 0, 1, 0, 0, 1, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 0, 3, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 1, 0, 2, 0, 2, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 1, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 3, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 2, 0, 2, 0, 1, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 0, 0, 1, 0, 2, 1, 1, 1, 0, 0, 3, 0, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 2, 0, 4, 0, 1, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 1, 4, 0, 1, 0, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 4}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL StSample::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL StSample::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)StSample__reinit, (void*)StSample__free, (void*)StSample___getNext, (void*)StSample___setNext, (void*)StSample___getName, (void*)StSample___setName, (void*)StSample___getWaveform, (void*)StSample___setWaveform, (void*)StSample___getPartialMagnitudes, (void*)StSample___setPartialMagnitudes, (void*)StSample___getPartialSpeeds, (void*)StSample___setPartialSpeeds, (void*)StSample___getPartialPhases, (void*)StSample___setPartialPhases, (void*)StSample___setNumPartials, (void*)StSample___getNumPartials, (void*)StSample___setPartialCycleLenReset, (void*)StSample___getPartialCycleLenReset, (void*)StSample___setEnablePartialPhase0, (void*)StSample___getEnablePartialPhase0, (void*)StSample___handleShiftSampleArea, (void*)StSample___handleMoveSampleArea, (void*)StSample___verifySampleAreas, (void*)StSample___getMutexGroup, (void*)StSample___setMutexGroup, (void*)StSample___getKeyRange, (void*)StSample___getVelRange, (void*)StSample___getModRange, (void*)StSample___getOrCreateKeyRange, (void*)StSample___getOrCreateVelRange, (void*)StSample___getOrCreateModRange, (void*)StSample___getFreqADSR, (void*)StSample___getVolADSR, (void*)StSample___getPanADSR, (void*)StSample___getAuxADSR, (void*)StSample___getOrCreateFreqADSR, (void*)StSample___getOrCreateVolADSR, (void*)StSample___getOrCreatePanADSR, (void*)StSample___getOrCreateAuxADSR, (void*)StSample___getFreqLFO, (void*)StSample___getVolLFO, (void*)StSample___getPanLFO, (void*)StSample___getAuxLFO, (void*)StSample___getLFOByIndex, (void*)StSample___getOrCreateLFOByIndex, (void*)StSample___getOrCreateFreqLFO, (void*)StSample___getOrCreateVolLFO, (void*)StSample___getOrCreatePanLFO, (void*)StSample___getOrCreateAuxLFO, (void*)StSample___deleteFreqLFO, (void*)StSample___deleteVolLFO, (void*)StSample___deletePanLFO, (void*)StSample___deleteAuxLFO, (void*)StSample___getModSeqByIndexAndPatch, (void*)StSample___getOrCreateModSeqByIndexAndPatch, (void*)StSample___deleteModSeqByIndexAndPatch, (void*)StSample___setDefaultModSeqPatch, (void*)StSample___getDefaultModSeqPatch, (void*)StSample___findLastUsedModSeqPatch, (void*)StSample___allocSampleLoops, (void*)StSample___getOrCreateSampleLoops, (void*)StSample___getSampleLoops, (void*)StSample___freeSampleLoops, (void*)StSample___getNumSampleLoops, (void*)StSample___uiSetEnableSyncFirstLoopIndex, (void*)StSample___uiGetEnableSyncFirstLoopIndex, (void*)StSample___setFirstLoopIndex, (void*)StSample___getFirstLoopIndex, (void*)StSample___setNoteOffLoopIndex, (void*)StSample___getNoteOffLoopIndex, (void*)StSample___setEnableNoteOffLoopImmediately, (void*)StSample___getEnableNoteOffLoopImmediately, (void*)StSample___setEnableJumpToLoopImmediately, (void*)StSample___getEnableJumpToLoopImmediately, (void*)StSample___setPlayMode, (void*)StSample___getPlayMode, (void*)StSample___getFirstOffset, (void*)StSample___setFirstOffset, (void*)StSample___getFirstLen, (void*)StSample___setFirstLen, (void*)StSample___getFirstLoopOffset, (void*)StSample___setFirstLoopOffset, (void*)StSample___getFirstLoopLen, (void*)StSample___setFirstLoopLen, (void*)StSample___getFirstLoopRep, (void*)StSample___setFirstLoopRep, (void*)StSample___getLastLoopOffset, (void*)StSample___getLastLoopLen, (void*)StSample___getOffset, (void*)StSample___setOffset, (void*)StSample___getLen, (void*)StSample___setLen, (void*)StSample___getMinOffset, (void*)StSample___getMaxOffset, (void*)StSample___setMaxVoices, (void*)StSample___getMaxVoices, (void*)StSample___getVolume, (void*)StSample___setVolume, (void*)StSample___setVolLFOAmt, (void*)StSample___getVolLFOAmt, (void*)StSample___getVolumeVelocityAmount, (void*)StSample___setVolumeVelocityAmount, (void*)StSample___setSampleOffsetRel, (void*)StSample___getSampleOffsetRel, (void*)StSample___getSampleOffsetVelocityAmount, (void*)StSample___setSampleOffsetVelocityAmount, (void*)StSample___getEnableInvertSampleOffsetVelocityAmount, (void*)StSample___setEnableInvertSampleOffsetVelocityAmount, (void*)StSample___getSampleOffsetRandAmount, (void*)StSample___setSampleOffsetRandAmount, (void*)StSample___getPan, (void*)StSample___setPan, (void*)StSample___setPanEnvAmt, (void*)StSample___getPanEnvAmt, (void*)StSample___setPanLFOAmt, (void*)StSample___getPanLFOAmt, (void*)StSample___getTranspose, (void*)StSample___setTranspose, (void*)StSample___setTransposeAndUpdateOctSemiCents, (void*)StSample___getSampleRateRatio, (void*)StSample___setSampleRateRatio, (void*)StSample___setUiTransposeOct, (void*)StSample___getUiTransposeOct, (void*)StSample___setUiTransposeSemi, (void*)StSample___getUiTransposeSemi, (void*)StSample___setUiTransposeCents, (void*)StSample___getUiTransposeCents, (void*)StSample___setTransposeAndUpdateOctSemi, (void*)StSample___setBeatFrequency, (void*)StSample___getBeatFrequency, (void*)StSample___setEnableLerpFreq, (void*)StSample___getEnableLerpFreq, (void*)StSample___setEnableLerpVol, (void*)StSample___getEnableLerpVol, (void*)StSample___setFreqEnvAmt, (void*)StSample___getFreqEnvAmt, (void*)StSample___setFreqLFOAmt, (void*)StSample___getFreqLFOAmt, (void*)StSample___getDelay, (void*)StSample___setDelay, (void*)StSample___getDelayMultiplier, (void*)StSample___setDelayMultiplier, (void*)StSample__calcVelZoneVolume, (void*)StSample__calcKeyModZoneVolume, (void*)StSample__setEnableTimestretch, (void*)StSample__getEnableTimestretch, (void*)StSample__setEnableTimestretchAdditive, (void*)StSample__getEnableTimestretchAdditive, (void*)StSample__setEnableTimestretchXFade, (void*)StSample__getEnableTimestretchXFade, (void*)StSample__setTimestretch, (void*)StSample__getTimestretch, (void*)StSample__setTimestretchGranularity, (void*)StSample__getTimestretchGranularity, (void*)StSample__setTimestretchGranularityAmount, (void*)StSample__getTimestretchGranularityAmount, (void*)StSample__setEnableStaticCyclelen, (void*)StSample__getEnableStaticCyclelen, (void*)StSample__setEnableAbsoluteTimestretch, (void*)StSample__getEnableAbsoluteTimestretch, (void*)StSample__setTimestretchInterpolType, (void*)StSample__getTimestretchInterpolType, (void*)StSample__setTimestretchGrainWindowType, (void*)StSample__getTimestretchGrainWindowType, (void*)StSample__setTimestretchBend, (void*)StSample__getTimestretchBend, (void*)StSample__setTimestretchStartPhaseRandAmount, (void*)StSample__getTimestretchStartPhaseRandAmount, (void*)StSample__setTimestretch2DWidth, (void*)StSample__getTimestretch2DWidth, (void*)StSample__setTimestretch2DHeight, (void*)StSample__getTimestretch2DHeight, (void*)StSample___setEnableTimedLoop, (void*)StSample___getEnableTimedLoop, (void*)StSample___setEnableTimedLoopFade, (void*)StSample___getEnableTimedLoopFade, (void*)StSample___setTimedLoopBase, (void*)StSample___getTimedLoopBase, (void*)StSample___setEnableOneShotLoopStep, (void*)StSample___getEnableOneShotLoopStep, (void*)StSample___setVolumeRampStepsMillisecIn, (void*)StSample___getVolumeRampStepsMillisecIn, (void*)StSample___setVolumeRampStepsMillisecOut, (void*)StSample___getVolumeRampStepsMillisecOut, (void*)StSample___setEnableFreezeSampleOffWhenQuiet, (void*)StSample___getEnableFreezeSampleOffWhenQuiet, (void*)StSample___setEnableModShiftOrig, (void*)StSample___getEnableModShiftOrig, (void*)StSample___setEnableSampleOffNoteOn, (void*)StSample___getEnableSampleOffNoteOn, (void*)StSample___setEnabled, (void*)StSample___getEnabled, (void*)StSample___setInterpolType, (void*)StSample___getInterpolType, (void*)StSample___setInterpolOrder, (void*)StSample___getInterpolOrder, (void*)StSample___setBitReductionPreAmp, (void*)StSample___getBitReductionPreAmp, (void*)StSample___setBitReduction, (void*)StSample___getBitReduction, (void*)StSample___setBitReductionMask, (void*)StSample___getBitReductionMask, (void*)StSample___setRateReduction, (void*)StSample___getRateReduction, (void*)StSample___setRateReductionMask, (void*)StSample___getRateReductionMask, (void*)StSample___setEnableFromStart, (void*)StSample___getEnableFromStart, (void*)StSample___getOrCreateWavepathTable, (void*)StSample___setEnableWavepath, (void*)StSample___getEnableWavepath, (void*)StSample___setWavepathIndex, (void*)StSample___getWavepathIndex, (void*)StSample___setEnableSkipRange, (void*)StSample___setEnableAlt, (void*)StSample___getEnableAlt, (void*)StSample___setEnableFilter, (void*)StSample___getEnableFilter, (void*)StSample___setFilterType, (void*)StSample___getFilterType, (void*)StSample___setFilterCutOff, (void*)StSample___getFilterCutOff, (void*)StSample___setFilterPan, (void*)StSample___getFilterPan, (void*)StSample___setFilterOffset, (void*)StSample___getFilterOffset, (void*)StSample___setFilterEQGain, (void*)StSample___getFilterEQGain, (void*)StSample___setFilterResonance, (void*)StSample___getFilterResonance, (void*)StSample___setFilterAuxEnvAmount, (void*)StSample___getFilterAuxEnvAmount, (void*)StSample___setFilterAuxEnvVelocityAmount, (void*)StSample___getFilterAuxEnvVelocityAmount, (void*)StSample___setFilterAuxLFOAmount, (void*)StSample___getFilterAuxLFOAmount, (void*)StSample___setFilterKeyboardAmount, (void*)StSample___getFilterKeyboardAmount, (void*)StSample___setGlideType, (void*)StSample___getGlideType, (void*)StSample___setGlideSpeedTimeUp, (void*)StSample___getGlideSpeedTimeUp, (void*)StSample___setGlideSpeedTimeDown, (void*)StSample___getGlideSpeedTimeDown, (void*)StSample___setGlideSpeedFreqUp, (void*)StSample___getGlideSpeedFreqUp, (void*)StSample___setGlideSpeedFreqDown, (void*)StSample___getGlideSpeedFreqDown, (void*)StSample___setEnableGlideRelease, (void*)StSample___getEnableGlideRelease, (void*)StSample___setGlideMaxNoteDist, (void*)StSample___getGlideMaxNoteDist, (void*)StSample___setEnableGlideGlissando, (void*)StSample___getEnableGlideGlissando, (void*)StSample___setGlideMinTime, (void*)StSample___getGlideMinTime, (void*)StSample___setGlideMaxTime, (void*)StSample___getGlideMaxTime, (void*)StSample___setEnableGlideRetrigSample, (void*)StSample___getEnableGlideRetrigSample, (void*)StSample___setEnableGlideRetrigEnvFreq, (void*)StSample___getEnableGlideRetrigEnvFreq, (void*)StSample___setEnableGlideRetrigEnvVol, (void*)StSample___getEnableGlideRetrigEnvVol, (void*)StSample___setEnableGlideRetrigEnvPan, (void*)StSample___getEnableGlideRetrigEnvPan, (void*)StSample___setEnableGlideRetrigEnvAux, (void*)StSample___getEnableGlideRetrigEnvAux, (void*)StSample___setEnableGlideRetrigLFOFreq, (void*)StSample___getEnableGlideRetrigLFOFreq, (void*)StSample___setEnableGlideRetrigLFOVol, (void*)StSample___getEnableGlideRetrigLFOVol, (void*)StSample___setEnableGlideRetrigLFOPan, (void*)StSample___getEnableGlideRetrigLFOPan, (void*)StSample___setEnableGlideRetrigLFOAux, (void*)StSample___getEnableGlideRetrigLFOAux, (void*)StSample___setEnableGlideRetrigModSeq, (void*)StSample___getEnableGlideRetrigModSeq, (void*)StSample___setMMKeyboardCenter, (void*)StSample___getMMKeyboardCenter, (void*)StSample___setMMKeyboardMin, (void*)StSample___getMMKeyboardMin, (void*)StSample___setMMKeyboardMax, (void*)StSample___getMMKeyboardMax, (void*)StSample___setMMEnable, (void*)StSample___getMMEnable, (void*)StSample___setMMOp, (void*)StSample___getMMOp, (void*)StSample___setMMSlewUp, (void*)StSample___getMMSlewUp, (void*)StSample___setMMSlewDown, (void*)StSample___getMMSlewDown, (void*)StSample___setMMSlewReset, (void*)StSample___getMMSlewReset, (void*)StSample___setMMSrc, (void*)StSample___getMMSrc, (void*)StSample___setMMCurve, (void*)StSample___getMMCurve, (void*)StSample___setMMDst, (void*)StSample___getMMDst, (void*)StSample___setMMAmt, (void*)StSample___getMMAmt, (void*)StSample___setMMSignalTap, (void*)StSample___getMMSignalTap, (void*)StSample___setLiveRecEnable, (void*)StSample___getLiveRecEnable, (void*)StSample___setLiveRecPause, (void*)StSample___getLiveRecPause, (void*)StSample___setLiveRecMonitor, (void*)StSample___getLiveRecMonitor, (void*)StSample___setLiveRecInput, (void*)StSample___getLiveRecInput, (void*)StSample___setLiveRecStereo, (void*)StSample___getLiveRecStereo, (void*)StSample___setLiveRecInputPan, (void*)StSample___getLiveRecInputPan, (void*)StSample___setLiveRecLoopIdx, (void*)StSample___getLiveRecLoopIdx, (void*)StSample___setLiveRecCopy, (void*)StSample___getLiveRecCopy, (void*)StSample___setLiveRecClear, (void*)StSample___getLiveRecClear, (void*)StSample___setLiveRecDoubleBufferMode, (void*)StSample___getLiveRecDoubleBufferMode, (void*)StSample___setLiveRecDoubleBufferXFade, (void*)StSample___getLiveRecDoubleBufferXFade, (void*)StSample___setLiveRecOscMode, (void*)StSample___getLiveRecOscMode, (void*)StSample___setLiveRecOscSingleCycle, (void*)StSample___getLiveRecOscSingleCycle, (void*)StSample___setLiveRecOscTune, (void*)StSample___getLiveRecOscTune, (void*)StSample___setLiveRecOscFadeAmt, (void*)StSample___getLiveRecOscFadeAmt, (void*)StSample___setLiveRecSkipInputNumFrames, (void*)StSample___getLiveRecSkipInputNumFrames, (void*)StSample___setLiveRecOscPreFilter, (void*)StSample___getLiveRecOscPreFilter, (void*)StSample___setLiveRecOscResample, (void*)StSample___getLiveRecOscResample, (void*)StSample___setLiveRecOscSustain, (void*)StSample___getLiveRecOscSustain, (void*)StSample___setLiveRecMode, (void*)StSample___getLiveRecMode, (void*)StSample___setLiveRecThresholdOn, (void*)StSample___getLiveRecThresholdOn, (void*)StSample___setLiveRecThresholdOff, (void*)StSample___getLiveRecThresholdOff, (void*)StSample___startLiveRecording, (void*)StSample___stopLiveRecording, (void*)StSample___setEnableSumInput, (void*)StSample___getEnableSumInput, (void*)StSample___setSumInputXFade, (void*)StSample___getSumInputXFade, (void*)StSample__hasPlugins, (void*)StSample__hasPluginsEnabled, (void*)StSample__areAllPluginSlotsUsed, (void*)StSample__freePlugins, (void*)StSample___setVoicePluginShared, (void*)StSample___getVoicePluginShared, (void*)StSample___setVoicePluginSharedMissing, (void*)StSample___getVoicePluginSharedMissing, (void*)StSample___setEnableVoicePluginPreFilter, (void*)StSample___getEnableVoicePluginPreFilter, (void*)StSample___setVoicePluginAlg, (void*)StSample___getVoicePluginAlg, (void*)StSample___setVoicePluginAlgFilterPos, (void*)StSample___getVoicePluginAlgFilterPos, (void*)StSample___setVoicePluginAlgOuter, (void*)StSample___getVoicePluginAlgOuter, (void*)StSample___setEnableVoicePlugin, (void*)StSample___getEnableVoicePlugin, (void*)StSample___setVoicePluginLevel, (void*)StSample___getVoicePluginLevel, (void*)StSample___setVoicePluginDst, (void*)StSample___getVoicePluginDst, (void*)StSample___setVoicePluginPan, (void*)StSample___getVoicePluginPan, (void*)StSample___setEnableVoicePluginInvertPhase, (void*)StSample___getEnableVoicePluginInvertPhase, (void*)StSample__swapPluginSlots, (void*)StSample__reorderPluginSlots, (void*)StSample___uiSetLastPluginRowIdx, (void*)StSample___uiGetLastPluginRowIdx, (void*)StSample___setEnableFX, (void*)StSample___getEnableFX, (void*)StSample___setVoiceBus, (void*)StSample___getVoiceBus, (void*)StSample__uiCheckResetRedrawFlag, (void*)StSample__setUiSVOffset, (void*)StSample__getUiSVOffset, (void*)StSample__setUiSVZoom, (void*)StSample__getUiSVZoom, (void*)StSample__setUiSVZoomYIdx, (void*)StSample__getUiSVZoomYIdx, (void*)StSample__setUiEnableAuxToWav, (void*)StSample__getUiEnableAuxToWav, (void*)StSample__setVoiceCalibrationValue, (void*)StSample__getVoiceCalibrationValue, (void*)StSample__setVoiceCalibrationModulo, (void*)StSample__getVoiceCalibrationModulo, (void*)StSample__setVoiceCalibrationAmount, (void*)StSample__getVoiceCalibrationAmount, (void*)StSample__setVoiceCalibrationEnable, (void*)StSample__getVoiceCalibrationEnable, (void*)StSample__setTimestretchAdditiveXFade, (void*)StSample__getTimestretchAdditiveXFade, (void*)StSample__setAdditiveCfgValid, (void*)StSample__getAdditiveCfgValid, (void*)StSample__setAdditiveEditCfg, (void*)StSample__getAdditiveEditCfg, (void*)StSample__setEnableForceAdditiveEditCfg, (void*)StSample__getEnableForceAdditiveEditCfg, (void*)StSample__setAdditiveNormalize, (void*)StSample__getAdditiveNormalize, (void*)StSample__setAdditiveLevel, (void*)StSample__getAdditiveLevel, (void*)StSample__setAdditivePhase, (void*)StSample__getAdditivePhase, (void*)StSample__setAdditiveExpA, (void*)StSample__getAdditiveExpA, (void*)StSample__setAdditiveFilter, (void*)StSample__getAdditiveFilter, (void*)StSample__setAdditiveExpL, (void*)StSample__getAdditiveExpL, (void*)StSample___setAdditiveBitReductionPreAmp, (void*)StSample___getAdditiveBitReductionPreAmp, (void*)StSample___setAdditiveBitReduction, (void*)StSample___getAdditiveBitReduction, (void*)StSample___setAdditiveBitReductionMask, (void*)StSample___getAdditiveBitReductionMask, (void*)StSample___setAdditiveRateReduction, (void*)StSample___getAdditiveRateReduction, (void*)StSample___setAdditiveRateReductionMask, (void*)StSample___getAdditiveRateReductionMask, (void*)StSample___setAdditiveStereoSpread, (void*)StSample___getAdditiveStereoSpread, (void*)StSample__recalcAdditiveTbl, (void*)StSample__exportAdditiveWavetable, (void*)StSample___setAiNumPoles, (void*)StSample___getAiNumPoles, (void*)StSample___setAiQ, (void*)StSample___getAiQ, (void*)StSample___setAiExpUp, (void*)StSample___getAiExpUp, (void*)StSample___setAiExpDown, (void*)StSample___getAiExpDown, (void*)StSample___setAiLinOct, (void*)StSample___getAiLinOct, (void*)StSample___setAiLinMax, (void*)StSample___getAiLinMax, (void*)StSample___setStartEndFadeNumFrames, (void*)StSample___getStartEndFadeNumFrames, (void*)StSample___uiSetEnableAutoSelect, (void*)StSample___uiGetEnableAutoSelect, (void*)StSample___setTuningTable, (void*)StSample___getTuningTable, (void*)StSample___setDefaultTuningTableIdx, (void*)StSample___getDefaultTuningTableIdx, (void*)StSample___setForcedTuningTableIdx, (void*)StSample___getForcedTuningTableIdx, (void*)StSample___setTuningTableMetaData, (void*)StSample___getTuningTableMetaData, (void*)StSample___freeTuningTables, (void*)StSample___freeTuningTablesMetaData, (void*)StSample___mmVarSetEnable, (void*)StSample___mmVarGetEnable, (void*)StSample___mmVarSetNum, (void*)StSample___mmVarGetNum, (void*)StSample___mmVarSetEnableSmooth, (void*)StSample___mmVarGetEnableSmooth, (void*)StSample___mmVarSetEditIdx, (void*)StSample___mmVarGetEditIdx, (void*)StSample___mmVarSetEnableForceEditIdx, (void*)StSample___mmVarGetEnableForceEditIdx, (void*)StSample___mmVarGetData}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL StSample::yacConstantGetNum                (void) {return 580;}
const char **YAC_VCALL StSample::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"STSAMPLE_DEFAULT_MAXVOICES", "STSAMPLE_MAX_TUNING_TABLES", "STSAMPLE_PLAY_MODE_FWDNOLOOP", "STSAMPLE_PLAY_MODE_FORWARD", "STSAMPLE_PLAY_MODE_BACKWARD", "STSAMPLE_PLAY_MODE_PINGPONG", "STSAMPLE_PLAY_MODE_XFADE_ALL", "STSAMPLE_PLAY_MODE_XFADE_16", "STSAMPLE_PLAY_MODE_XFADE_32", "STSAMPLE_PLAY_MODE_XFADE_64", "STSAMPLE_PLAY_MODE_XFADE_128", "STSAMPLE_PLAY_MODE_XFADE_256", "STSAMPLE_PLAY_MODE_XFADE_512", "STSAMPLE_PLAY_MODE_XFADE_1024", "STSAMPLE_PLAY_MODE_XFADE_2048", "STSAMPLE_PLAY_MODE_XFADE_4096", "STSAMPLE_PLAY_MODE_XFADE_8192", "STSAMPLE_PLAY_MODE_XFADE_16384", "STSAMPLE_LOOP_OP_MASK", "STSAMPLE_LOOP_OP_SHIFT", "STSAMPLE_LOOP_OP_JMP", "STSAMPLE_LOOP_OP_JNZ", "STSAMPLE_LOOP_OP_SET", "STSAMPLE_LOOP_OP_MOV", "STSAMPLE_LOOP_VAR_MASK", "STSAMPLE_LOOP_VAR_SHIFT", "STSAMPLE_LOOP_VAL_MASK", "STSAMPLE_TIMESTRETCH_INTERPOL_NONE", "STSAMPLE_TIMESTRETCH_INTERPOL_LINEAR", "STSAMPLE_TIMESTRETCH_INTERPOL_SMOOTHSTEP", "STSAMPLE_TIMESTRETCH_INTERPOL_CLIP25", "STSAMPLE_TIMESTRETCH_INTERPOL_CLIP50", "STSAMPLE_TIMESTRETCH_INTERPOL_CLIP75", "STSAMPLE_TIMESTRETCH_INTERPOL_CLIPMOD", "STSAMPLE_TIMESTRETCH_INTERPOL_CLIPVEL", "STSAMPLE_TIMESTRETCH_INTERPOL_OFF25", "STSAMPLE_TIMESTRETCH_INTERPOL_OFF50", "STSAMPLE_TIMESTRETCH_INTERPOL_OFF75", "STSAMPLE_TIMESTRETCH_INTERPOL_OFFMOD", "STSAMPLE_TIMESTRETCH_INTERPOL_OFFVEL", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASE25W00", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASE25W25", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASE25W50", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASE25W75", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASE50W00", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASE50W25", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASE50W50", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASE50W75", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASE75W00", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASE75W25", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASE75W50", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASE75W75", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASEMODW00", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASEMODW25", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASEMODW50", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASEMODW75", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASEMODVEL", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASEVELW00", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASEVELW25", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASEVELW50", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASEVELW75", "STSAMPLE_TIMESTRETCH_INTERPOL_PHASEVELMOD", "STSAMPLE_TIMESTRETCH_INTERPOL_ORDER2", "STSAMPLE_TIMESTRETCH_INTERPOL_ORDER3", "STSAMPLE_TIMESTRETCH_INTERPOL_ORDER4", "STSAMPLE_TIMESTRETCH_INTERPOL_ORDER5", "STSAMPLE_TIMESTRETCH_INTERPOL_ORDER6", "STSAMPLE_TIMESTRETCH_INTERPOL_ORDER7", "STSAMPLE_TIMESTRETCH_GRAIN_WINDOW_NONE", "STSAMPLE_TIMESTRETCH_GRAIN_WINDOW_SINE", "STSAMPLE_TIMESTRETCH_GRAIN_WINDOW_TRI", "STSAMPLE_NUM_MODSEQ", "STSAMPLE_MAX_MODSEQ_PATCHES", "STSAMPLE_INTERPOL_NONE", "STSAMPLE_INTERPOL_LINEAR", "STSAMPLE_INTERPOL_VSR2", "STSAMPLE_INTERPOL_VSR4", "STSAMPLE_INTERPOL_VSR8", "STSAMPLE_INTERPOL_VSR16", "STSAMPLE_INTERPOL_VSR32", "STSAMPLE_INTERPOL_VSR64", "STSAMPLE_INTERPOL_LANCZOS4", "STSAMPLE_INTERPOL_LANCZOS8", "STSAMPLE_INTERPOL_LANCZOS16", "STSAMPLE_INTERPOL_LANCZOS32", "STSAMPLE_INTERPOL_LANCZOS64", "STSAMPLE_FLT_TYPE_NONE", "STSAMPLE_FLT_TYPE_LP", "STSAMPLE_FLT_TYPE_LPLP", "STSAMPLE_FLT_TYPE_HP", "STSAMPLE_FLT_TYPE_HPHP", "STSAMPLE_FLT_TYPE_BP", "STSAMPLE_FLT_TYPE_BPBP", "STSAMPLE_FLT_TYPE_BR", "STSAMPLE_FLT_TYPE_BRBR", "STSAMPLE_FLT_TYPE_PEQ", "STSAMPLE_FLT_TYPE_PEQ2", "STSAMPLE_FLT_TYPE_LSH", "STSAMPLE_FLT_TYPE_LSH2", "STSAMPLE_FLT_TYPE_HSH", "STSAMPLE_FLT_TYPE_HSH2", "STSAMPLE_FLT_TYPE_LPHP", "STSAMPLE_FLT_TYPE_LPBP", "STSAMPLE_FLT_TYPE_LPBR", "STSAMPLE_FLT_TYPE_HPLP", "STSAMPLE_FLT_TYPE_HPBP", "STSAMPLE_FLT_TYPE_HPBR", "STSAMPLE_FLT_TYPE_BPLP", "STSAMPLE_FLT_TYPE_BPHP", "STSAMPLE_FLT_TYPE_BPBR", "STSAMPLE_FLT_TYPE_BRLP", "STSAMPLE_FLT_TYPE_BRHP", "STSAMPLE_FLT_TYPE_BRBP", "STSAMPLE_GLIDE_NONE", "STSAMPLE_GLIDE_TIME_LIN", "STSAMPLE_GLIDE_TIME_EXP2", "STSAMPLE_GLIDE_TIME_EXP3", "STSAMPLE_GLIDE_TIME_EXP4", "STSAMPLE_GLIDE_FREQ_LIN", "STSAMPLE_GLIDE_FREQ_EXP2", "STSAMPLE_GLIDE_FREQ_EXP3", "STSAMPLE_GLIDE_FREQ_EXP4", "STSAMPLE_NUM_MODMATRIX_ENTRIES", "STSAMPLE_MMVAR_NUM", "STSAMPLE_MM_SLEW_RESET_OFF", "STSAMPLE_MM_SLEW_RESET_ZERO", "STSAMPLE_MM_SLEW_RESET_ONE", "STSAMPLE_MM_OP_AUTO", "STSAMPLE_MM_OP_ADD", "STSAMPLE_MM_OP_MUL", "STSAMPLE_MM_OP_REPLACE", "STSAMPLE_MM_OP_REPLACE_INIT", "STSAMPLE_MM_OP_BLEND_SRC", "STSAMPLE_MM_OP_BLEND_AMT", "STSAMPLE_MM_OP_COMPARE", "STSAMPLE_MM_OP_ZEROCROSSING", "STSAMPLE_MM_OP_MODULO", "STSAMPLE_MM_OP_TRI", "STSAMPLE_MM_OP_TRI_NR", "STSAMPLE_MM_OP_STEP", "STSAMPLE_MM_NUM_OP", "STSAMPLE_MM_SRC_NONE", "STSAMPLE_MM_SRC_CONST_1", "STSAMPLE_MM_SRC_CONST_M1", "STSAMPLE_MM_SRC_CONST_0", "STSAMPLE_MM_SRC_CONST_4", "STSAMPLE_MM_SRC_CONST_16", "STSAMPLE_MM_SRC_CONST_100", "STSAMPLE_MM_SRC_CONST_127", "STSAMPLE_MM_SRC_CONST_255", "STSAMPLE_MM_SRC_RAND_1_PM", "STSAMPLE_MM_SRC_RAND_1_P", "STSAMPLE_MM_SRC_RAND_2_PM", "STSAMPLE_MM_SRC_RAND_2_P", "STSAMPLE_MM_SRC_RAND_3_PM", "STSAMPLE_MM_SRC_RAND_3_P", "STSAMPLE_MM_SRC_RAND_4_PM", "STSAMPLE_MM_SRC_RAND_4_P", "STSAMPLE_MM_SRC_KEYBOARD_PM", "STSAMPLE_MM_SRC_KEYBOARD_P", "STSAMPLE_MM_SRC_KEYBOARD_M", "STSAMPLE_MM_SRC_KEYBOARD_ABS", "STSAMPLE_MM_SRC_VOICE_NR", "STSAMPLE_MM_SRC_VOICE_NR_EVEN", "STSAMPLE_MM_SRC_VOICE_NR_ODD", "STSAMPLE_MM_SRC_VOICE_NR_EVENODD", "STSAMPLE_MM_SRC_VOICE_NR_ODDEVEN", "STSAMPLE_MM_SRC_ACTIVE_NOTES", "STSAMPLE_MM_SRC_ACTIVE_NOTE_EVEN", "STSAMPLE_MM_SRC_ACTIVE_NOTE_ODD", "STSAMPLE_MM_SRC_ACTIVE_NOTE_EVENODD", "STSAMPLE_MM_SRC_ACTIVE_NOTE_ODDEVEN", "STSAMPLE_MM_SRC_LAYER_NR", "STSAMPLE_MM_SRC_LAYER_NR_EVEN", "STSAMPLE_MM_SRC_LAYER_NR_ODD", "STSAMPLE_MM_SRC_LAYER_NR_EVENODD", "STSAMPLE_MM_SRC_LAYER_NR_ODDEVEN", "STSAMPLE_MM_SRC_VELOCITY", "STSAMPLE_MM_SRC_VELOCITY_HI", "STSAMPLE_MM_SRC_VELOCITY_EXP2", "STSAMPLE_MM_SRC_VELOCITY_EXP3", "STSAMPLE_MM_SRC_VELOCITY_SMOOTHSTEP", "STSAMPLE_MM_SRC_VELOCITY_INV", "STSAMPLE_MM_SRC_VELOCITY_BIP", "STSAMPLE_MM_SRC_RELEASE_VELOCITY", "STSAMPLE_MM_SRC_RELEASE_VELOCITY_HI", "STSAMPLE_MM_SRC_GATE", "STSAMPLE_MM_SRC_TRIG_PULSE", "STSAMPLE_MM_SRC_RELEASE", "STSAMPLE_MM_SRC_RELEASE_PULSE", "STSAMPLE_MM_SRC_SUSTAIN_PEDAL", "STSAMPLE_MM_SRC_SOFT_PEDAL", "STSAMPLE_MM_SRC_PITCHBEND_PM", "STSAMPLE_MM_SRC_PITCHBEND_PM_ON", "STSAMPLE_MM_SRC_PITCHBEND_P", "STSAMPLE_MM_SRC_PITCHBEND_P_ON", "STSAMPLE_MM_SRC_PITCHBEND_M", "STSAMPLE_MM_SRC_PITCHBEND_M_ON", "STSAMPLE_MM_SRC_PRESSURE", "STSAMPLE_MM_SRC_PRESSURE_ON", "STSAMPLE_MM_SRC_PRESSURE_HI", "STSAMPLE_MM_SRC_PRESSURE_HI_ON", "STSAMPLE_MM_SRC_PRESSURE_MAX", "STSAMPLE_MM_SRC_CC1_MODWHEEL", "STSAMPLE_MM_SRC_CC1_MODWHEEL_ON", "STSAMPLE_MM_SRC_CC1_MODWHEEL_INV", "STSAMPLE_MM_SRC_CC1_MODWHEEL_INV_ON", "STSAMPLE_MM_SRC_CC1_MODWHEEL_BIP", "STSAMPLE_MM_SRC_CC1_MODWHEEL_BIP_ON", "STSAMPLE_MM_SRC_CC2_BREATHCTL", "STSAMPLE_MM_SRC_CC2_BREATHCTL_ON", "STSAMPLE_MM_SRC_CC2_BREATHCTL_INV", "STSAMPLE_MM_SRC_CC2_BREATHCTL_INV_ON", "STSAMPLE_MM_SRC_CC2_BREATHCTL_BIP", "STSAMPLE_MM_SRC_CC2_BREATHCTL_BIP_ON", "STSAMPLE_MM_SRC_CC4_FOOTCTL", "STSAMPLE_MM_SRC_CC4_FOOTCTL_ON", "STSAMPLE_MM_SRC_CC4_FOOTCTL_INV", "STSAMPLE_MM_SRC_CC4_FOOTCTL_INV_ON", "STSAMPLE_MM_SRC_CC4_FOOTCTL_BIP", "STSAMPLE_MM_SRC_CC4_FOOTCTL_BIP_ON", "STSAMPLE_MM_SRC_CC7_VOLUME", "STSAMPLE_MM_SRC_CC7_VOLUME_ON", "STSAMPLE_MM_SRC_CC8_BALANCE", "STSAMPLE_MM_SRC_CC8_BALANCE_ON", "STSAMPLE_MM_SRC_CC10_PAN", "STSAMPLE_MM_SRC_CC10_PAN_ON", "STSAMPLE_MM_SRC_CC11_EXPR", "STSAMPLE_MM_SRC_CC11_EXPR_ON", "STSAMPLE_MM_SRC_CC11_EXPR_INV", "STSAMPLE_MM_SRC_CC11_EXPR_INV_ON", "STSAMPLE_MM_SRC_CC11_EXPR_BIP", "STSAMPLE_MM_SRC_CC11_EXPR_BIP_ON", "STSAMPLE_MM_SRC_CC16_GENERAL_1", "STSAMPLE_MM_SRC_CC16_GENERAL_1_ON", "STSAMPLE_MM_SRC_CC17_GENERAL_2", "STSAMPLE_MM_SRC_CC17_GENERAL_2_ON", "STSAMPLE_MM_SRC_CC18_GENERAL_3", "STSAMPLE_MM_SRC_CC18_GENERAL_3_ON", "STSAMPLE_MM_SRC_CC19_GENERAL_4", "STSAMPLE_MM_SRC_CC19_GENERAL_4_ON", "STSAMPLE_MM_SRC_CC74_BRIGHT", "STSAMPLE_MM_SRC_CC74_BRIGHT_ON", "STSAMPLE_MM_SRC_CC80_GENERAL_5", "STSAMPLE_MM_SRC_CC80_GENERAL_5_ON", "STSAMPLE_MM_SRC_CC81_GENERAL_6", "STSAMPLE_MM_SRC_CC81_GENERAL_6_ON", "STSAMPLE_MM_SRC_CC82_GENERAL_7", "STSAMPLE_MM_SRC_CC82_GENERAL_7_ON", "STSAMPLE_MM_SRC_CC83_GENERAL_8", "STSAMPLE_MM_SRC_CC83_GENERAL_8_ON", "STSAMPLE_MM_SRC_LFO_FREQ", "STSAMPLE_MM_SRC_LFO_VOL", "STSAMPLE_MM_SRC_LFO_PAN", "STSAMPLE_MM_SRC_LFO_AUX", "STSAMPLE_MM_SRC_ENV_FREQ", "STSAMPLE_MM_SRC_ENV_VOL", "STSAMPLE_MM_SRC_ENV_PAN", "STSAMPLE_MM_SRC_ENV_AUX", "STSAMPLE_MM_SRC_MODSEQ1", "STSAMPLE_MM_SRC_MODSEQ2", "STSAMPLE_MM_SRC_MODSEQ3", "STSAMPLE_MM_SRC_MODSEQ4", "STSAMPLE_MM_SRC_MODSEQ1_BY_VOICEKEY", "STSAMPLE_MM_SRC_MODSEQ2_BY_VOICEKEY", "STSAMPLE_MM_SRC_MODSEQ3_BY_VOICEKEY", "STSAMPLE_MM_SRC_MODSEQ4_BY_VOICEKEY", "STSAMPLE_MM_SRC_MODSEQ4_STEP_1", "STSAMPLE_MM_SRC_MODSEQ4_STEP_2", "STSAMPLE_MM_SRC_MODSEQ4_STEP_3", "STSAMPLE_MM_SRC_MODSEQ4_STEP_4", "STSAMPLE_MM_SRC_MODSEQ4_STEP_5", "STSAMPLE_MM_SRC_MODSEQ4_STEP_6", "STSAMPLE_MM_SRC_MODSEQ4_STEP_7", "STSAMPLE_MM_SRC_MODSEQ4_STEP_8", "STSAMPLE_MM_SRC_MODSEQ4_STEP_9", "STSAMPLE_MM_SRC_MODSEQ4_STEP_10", "STSAMPLE_MM_SRC_MODSEQ4_STEP_11", "STSAMPLE_MM_SRC_MODSEQ4_STEP_12", "STSAMPLE_MM_SRC_MODSEQ4_STEP_13", "STSAMPLE_MM_SRC_MODSEQ4_STEP_14", "STSAMPLE_MM_SRC_MODSEQ4_STEP_15", "STSAMPLE_MM_SRC_MODSEQ4_STEP_16", "STSAMPLE_MM_SRC_REG1", "STSAMPLE_MM_SRC_REG2", "STSAMPLE_MM_SRC_REG3", "STSAMPLE_MM_SRC_REG4", "STSAMPLE_MM_SRC_CC", "STSAMPLE_MM_SRC_VOICE_CALIBRATION_1", "STSAMPLE_MM_SRC_VOICE_CALIBRATION_1_R", "STSAMPLE_MM_SRC_VOICE_CALIBRATION_2", "STSAMPLE_MM_SRC_VOICE_CALIBRATION_2_R", "STSAMPLE_MM_SRC_VOICE_CALIBRATION_3", "STSAMPLE_MM_SRC_VOICE_CALIBRATION_3_R", "STSAMPLE_MM_SRC_VOICE_CALIBRATION_4", "STSAMPLE_MM_SRC_VOICE_CALIBRATION_4_R", "STSAMPLE_MM_SRC_VOICE_CALIBRATION_5", "STSAMPLE_MM_SRC_VOICE_CALIBRATION_5_R", "STSAMPLE_MM_SRC_VOICE_CALIBRATION_6", "STSAMPLE_MM_SRC_VOICE_CALIBRATION_6_R", "STSAMPLE_MM_SRC_PLAYPOS_Z1", "STSAMPLE_MM_SRC_PLAYPOS_Z2", "STSAMPLE_MM_SRC_PLAYPOS_Z3", "STSAMPLE_MM_SRC_PLAYPOS_Z4", "STSAMPLE_MM_SRC_GLIDE_TIME", "STSAMPLE_MM_SRC_GLIDE_TIME_INV", "STSAMPLE_MM_SRC_GLIDE_TIME_TRI", "STSAMPLE_MM_SRC_GLIDE_TIME_TRI_INV", "STSAMPLE_MM_SRC_VOICE_BUS_1", "STSAMPLE_MM_SRC_VOICE_BUS_1_ABS", "STSAMPLE_MM_SRC_VOICE_BUS_2", "STSAMPLE_MM_SRC_VOICE_BUS_2_ABS", "STSAMPLE_MM_SRC_VOICE_BUS_3", "STSAMPLE_MM_SRC_VOICE_BUS_3_ABS", "STSAMPLE_MM_SRC_VOICE_BUS_4", "STSAMPLE_MM_SRC_VOICE_BUS_4_ABS", "STSAMPLE_MM_SRC_VOICE_BUS_5", "STSAMPLE_MM_SRC_VOICE_BUS_5_ABS", "STSAMPLE_MM_SRC_VOICE_BUS_6", "STSAMPLE_MM_SRC_VOICE_BUS_6_ABS", "STSAMPLE_MM_SRC_VOICE_BUS_7", "STSAMPLE_MM_SRC_VOICE_BUS_7_ABS", "STSAMPLE_MM_SRC_VOICE_BUS_8", "STSAMPLE_MM_SRC_VOICE_BUS_8_ABS", "STSAMPLE_MM_NUM_SRC", "STSAMPLE_MM_DST_NONE", "STSAMPLE_MM_DST_FREQ", "STSAMPLE_MM_DST_FREQ_OCT", "STSAMPLE_MM_DST_FREQ_FIFTH", "STSAMPLE_MM_DST_FREQ_FOURTH", "STSAMPLE_MM_DST_FREQ_SEMI", "STSAMPLE_MM_DST_FREQ_FINE", "STSAMPLE_MM_DST_FREQ_BEAT", "STSAMPLE_MM_DST_TUNING_TBL_ABS", "STSAMPLE_MM_DST_TUNING_TBL_REL", "STSAMPLE_MM_DST_NOTE_2", "STSAMPLE_MM_DST_FREQ_2", "STSAMPLE_MM_DST_VOLUME", "STSAMPLE_MM_DST_PAN", "STSAMPLE_MM_DST_FILTER_CUTOFF", "STSAMPLE_MM_DST_FILTER_PAN", "STSAMPLE_MM_DST_FILTER_OFFSET", "STSAMPLE_MM_DST_FILTER_RESONANCE", "STSAMPLE_MM_DST_SAMPLE_OFFSET", "STSAMPLE_MM_DST_SAMPLE_SHIFT", "STSAMPLE_MM_DST_SAMPLE_SHIFT_EOL", "STSAMPLE_MM_DST_LOOP_RESTART", "STSAMPLE_MM_DST_CYCLE_LEN", "STSAMPLE_MM_DST_CYCLE_LEN_EOL", "STSAMPLE_MM_DST_CYCLE_LEN_SAMPLE_OFFSET", "STSAMPLE_MM_DST_WT_2D_X_ABS", "STSAMPLE_MM_DST_WT_2D_X_REL", "STSAMPLE_MM_DST_WT_2D_Y_ABS", "STSAMPLE_MM_DST_WT_2D_Y_REL", "STSAMPLE_MM_DST_LOOP_REPEATS_SCALE", "STSAMPLE_MM_DST_JUMPTOLOOP_REL", "STSAMPLE_MM_DST_JUMPTOLOOP_ABS127", "STSAMPLE_MM_DST_JUMPTOLOOP_ABS", "STSAMPLE_MM_DST_FREQ_LFO_SPEED", "STSAMPLE_MM_DST_FREQ_LFO_SPEED_ABS", "STSAMPLE_MM_DST_FREQ_LFO_LEVEL", "STSAMPLE_MM_DST_FREQ_LFO_FREQ_AMT", "STSAMPLE_MM_DST_VOL_LFO_SPEED", "STSAMPLE_MM_DST_VOL_LFO_SPEED_ABS", "STSAMPLE_MM_DST_VOL_LFO_LEVEL", "STSAMPLE_MM_DST_VOL_LFO_VOL_AMT", "STSAMPLE_MM_DST_PAN_LFO_SPEED", "STSAMPLE_MM_DST_PAN_LFO_SPEED_ABS", "STSAMPLE_MM_DST_PAN_LFO_LEVEL", "STSAMPLE_MM_DST_PAN_LFO_PAN_AMT", "STSAMPLE_MM_DST_AUX_LFO_SPEED", "STSAMPLE_MM_DST_AUX_LFO_SPEED_ABS", "STSAMPLE_MM_DST_AUX_LFO_LEVEL", "STSAMPLE_MM_DST_AUX_LFO_FLT_AMT", "STSAMPLE_MM_DST_FREQ_ENV_SPEED", "STSAMPLE_MM_DST_FREQ_ENV_SPEED_ABS", "STSAMPLE_MM_DST_FREQ_ENV_LEVEL", "STSAMPLE_MM_DST_FREQ_ENV_INTENSITY", "STSAMPLE_MM_DST_FREQ_ENV_ATTACK_SPEED", "STSAMPLE_MM_DST_FREQ_ENV_ATTACK_SPEED_ABS", "STSAMPLE_MM_DST_FREQ_ENV_SUSTAIN_SPEED", "STSAMPLE_MM_DST_FREQ_ENV_SUSTAIN_SPEED_ABS", "STSAMPLE_MM_DST_FREQ_ENV_RELEASE_SPEED", "STSAMPLE_MM_DST_FREQ_ENV_RELEASE_SPEED_ABS", "STSAMPLE_MM_DST_VOL_ENV_SPEED", "STSAMPLE_MM_DST_VOL_ENV_SPEED_ABS", "STSAMPLE_MM_DST_VOL_ENV_LEVEL", "STSAMPLE_MM_DST_VOL_ENV_INTENSITY", "STSAMPLE_MM_DST_VOL_ENV_ATTACK_SPEED", "STSAMPLE_MM_DST_VOL_ENV_ATTACK_SPEED_ABS", "STSAMPLE_MM_DST_VOL_ENV_SUSTAIN_SPEED", "STSAMPLE_MM_DST_VOL_ENV_SUSTAIN_SPEED_ABS", "STSAMPLE_MM_DST_VOL_ENV_RELEASE_SPEED", "STSAMPLE_MM_DST_VOL_ENV_RELEASE_SPEED_ABS", "STSAMPLE_MM_DST_PAN_ENV_SPEED", "STSAMPLE_MM_DST_PAN_ENV_SPEED_ABS", "STSAMPLE_MM_DST_PAN_ENV_LEVEL", "STSAMPLE_MM_DST_PAN_ENV_INTENSITY", "STSAMPLE_MM_DST_PAN_ENV_ATTACK_SPEED", "STSAMPLE_MM_DST_PAN_ENV_ATTACK_SPEED_ABS", "STSAMPLE_MM_DST_PAN_ENV_SUSTAIN_SPEED", "STSAMPLE_MM_DST_PAN_ENV_SUSTAIN_SPEED_ABS", "STSAMPLE_MM_DST_PAN_ENV_RELEASE_SPEED", "STSAMPLE_MM_DST_PAN_ENV_RELEASE_SPEED_ABS", "STSAMPLE_MM_DST_AUX_ENV_SPEED", "STSAMPLE_MM_DST_AUX_ENV_SPEED_ABS", "STSAMPLE_MM_DST_AUX_ENV_LEVEL", "STSAMPLE_MM_DST_AUX_ENV_INTENSITY", "STSAMPLE_MM_DST_AUX_ENV_ATTACK_SPEED", "STSAMPLE_MM_DST_AUX_ENV_ATTACK_SPEED_ABS", "STSAMPLE_MM_DST_AUX_ENV_SUSTAIN_SPEED", "STSAMPLE_MM_DST_AUX_ENV_SUSTAIN_SPEED_ABS", "STSAMPLE_MM_DST_AUX_ENV_RELEASE_SPEED", "STSAMPLE_MM_DST_AUX_ENV_RELEASE_SPEED_ABS", "STSAMPLE_MM_DST_MOD_1_AMOUNT", "STSAMPLE_MM_DST_MOD_2_AMOUNT", "STSAMPLE_MM_DST_MOD_3_AMOUNT", "STSAMPLE_MM_DST_MOD_4_AMOUNT", "STSAMPLE_MM_DST_MOD_5_AMOUNT", "STSAMPLE_MM_DST_MOD_6_AMOUNT", "STSAMPLE_MM_DST_MOD_7_AMOUNT", "STSAMPLE_MM_DST_MOD_8_AMOUNT", "STSAMPLE_MM_DST_MOD_9_AMOUNT", "STSAMPLE_MM_DST_MOD_10_AMOUNT", "STSAMPLE_MM_DST_MOD_11_AMOUNT", "STSAMPLE_MM_DST_MOD_12_AMOUNT", "STSAMPLE_MM_DST_MOD_13_AMOUNT", "STSAMPLE_MM_DST_MOD_14_AMOUNT", "STSAMPLE_MM_DST_MOD_15_AMOUNT", "STSAMPLE_MM_DST_MOD_16_AMOUNT", "STSAMPLE_MM_DST_GLIDE_SPEED", "STSAMPLE_MM_DST_TIMESTRETCH", "STSAMPLE_MM_DST_TIMESTRETCH_BEND", "STSAMPLE_MM_DST_MODSEQ1_PATCH", "STSAMPLE_MM_DST_MODSEQ1_SPEED", "STSAMPLE_MM_DST_MODSEQ1_SPEED_ABS", "STSAMPLE_MM_DST_MODSEQ1_LEVEL", "STSAMPLE_MM_DST_MODSEQ1_NUMSTEPS", "STSAMPLE_MM_DST_MODSEQ1_ADVANCE", "STSAMPLE_MM_DST_MODSEQ1_STEP", "STSAMPLE_MM_DST_MODSEQ2_PATCH", "STSAMPLE_MM_DST_MODSEQ2_SPEED", "STSAMPLE_MM_DST_MODSEQ2_SPEED_ABS", "STSAMPLE_MM_DST_MODSEQ2_LEVEL", "STSAMPLE_MM_DST_MODSEQ2_NUMSTEPS", "STSAMPLE_MM_DST_MODSEQ2_ADVANCE", "STSAMPLE_MM_DST_MODSEQ2_STEP", "STSAMPLE_MM_DST_MODSEQ3_PATCH", "STSAMPLE_MM_DST_MODSEQ3_SPEED", "STSAMPLE_MM_DST_MODSEQ3_SPEED_ABS", "STSAMPLE_MM_DST_MODSEQ3_LEVEL", "STSAMPLE_MM_DST_MODSEQ3_NUMSTEPS", "STSAMPLE_MM_DST_MODSEQ3_ADVANCE", "STSAMPLE_MM_DST_MODSEQ3_STEP", "STSAMPLE_MM_DST_MODSEQ4_PATCH", "STSAMPLE_MM_DST_MODSEQ4_SPEED", "STSAMPLE_MM_DST_MODSEQ4_SPEED_ABS", "STSAMPLE_MM_DST_MODSEQ4_LEVEL", "STSAMPLE_MM_DST_MODSEQ4_NUMSTEPS", "STSAMPLE_MM_DST_MODSEQ4_ADVANCE", "STSAMPLE_MM_DST_MODSEQ4_STEP", "STSAMPLE_MM_DST_RETRIG_FREQ_ENV", "STSAMPLE_MM_DST_RETRIG_VOL_ENV", "STSAMPLE_MM_DST_RETRIG_PAN_ENV", "STSAMPLE_MM_DST_RETRIG_AUX_ENV", "STSAMPLE_MM_DST_RETRIG_FREQ_LFO", "STSAMPLE_MM_DST_RETRIG_VOL_LFO", "STSAMPLE_MM_DST_RETRIG_PAN_LFO", "STSAMPLE_MM_DST_RETRIG_AUX_LFO", "STSAMPLE_MM_DST_RETRIG_MODSEQ1", "STSAMPLE_MM_DST_RETRIG_MODSEQ2", "STSAMPLE_MM_DST_RETRIG_MODSEQ3", "STSAMPLE_MM_DST_RETRIG_MODSEQ4", "STSAMPLE_MM_DST_REG_1_ON", "STSAMPLE_MM_DST_REG_2_ON", "STSAMPLE_MM_DST_REG_3_ON", "STSAMPLE_MM_DST_REG_4_ON", "STSAMPLE_MM_DST_REG_1", "STSAMPLE_MM_DST_REG_2", "STSAMPLE_MM_DST_REG_3", "STSAMPLE_MM_DST_REG_4", "STSAMPLE_MM_DST_LIVEREC_START", "STSAMPLE_MM_DST_LIVEREC_CONTINUE", "STSAMPLE_MM_DST_LIVEREC_STOP", "STSAMPLE_MM_DST_PLUGIN_1_MOD_1", "STSAMPLE_MM_DST_PLUGIN_1_MOD_2", "STSAMPLE_MM_DST_PLUGIN_1_MOD_3", "STSAMPLE_MM_DST_PLUGIN_1_MOD_4", "STSAMPLE_MM_DST_PLUGIN_1_MOD_5", "STSAMPLE_MM_DST_PLUGIN_1_MOD_6", "STSAMPLE_MM_DST_PLUGIN_1_MOD_7", "STSAMPLE_MM_DST_PLUGIN_1_MOD_8", "STSAMPLE_MM_DST_PLUGIN_2_MOD_1", "STSAMPLE_MM_DST_PLUGIN_2_MOD_2", "STSAMPLE_MM_DST_PLUGIN_2_MOD_3", "STSAMPLE_MM_DST_PLUGIN_2_MOD_4", "STSAMPLE_MM_DST_PLUGIN_2_MOD_5", "STSAMPLE_MM_DST_PLUGIN_2_MOD_6", "STSAMPLE_MM_DST_PLUGIN_2_MOD_7", "STSAMPLE_MM_DST_PLUGIN_2_MOD_8", "STSAMPLE_MM_DST_PLUGIN_3_MOD_1", "STSAMPLE_MM_DST_PLUGIN_3_MOD_2", "STSAMPLE_MM_DST_PLUGIN_3_MOD_3", "STSAMPLE_MM_DST_PLUGIN_3_MOD_4", "STSAMPLE_MM_DST_PLUGIN_3_MOD_5", "STSAMPLE_MM_DST_PLUGIN_3_MOD_6", "STSAMPLE_MM_DST_PLUGIN_3_MOD_7", "STSAMPLE_MM_DST_PLUGIN_3_MOD_8", "STSAMPLE_MM_DST_PLUGIN_4_MOD_1", "STSAMPLE_MM_DST_PLUGIN_4_MOD_2", "STSAMPLE_MM_DST_PLUGIN_4_MOD_3", "STSAMPLE_MM_DST_PLUGIN_4_MOD_4", "STSAMPLE_MM_DST_PLUGIN_4_MOD_5", "STSAMPLE_MM_DST_PLUGIN_4_MOD_6", "STSAMPLE_MM_DST_PLUGIN_4_MOD_7", "STSAMPLE_MM_DST_PLUGIN_4_MOD_8", "STSAMPLE_MM_DST_PLUGIN_1_LEVEL", "STSAMPLE_MM_DST_PLUGIN_2_LEVEL", "STSAMPLE_MM_DST_PLUGIN_3_LEVEL", "STSAMPLE_MM_DST_PLUGIN_4_LEVEL", "STSAMPLE_MM_DST_SYNC_SPEED", "STSAMPLE_MM_DST_SYNC_SLEW", "STSAMPLE_MM_DST_SAMPLE_RATE_REDUCTION", "STSAMPLE_MM_DST_BIT_REDUCTION", "STSAMPLE_MM_DST_WT_ADDITIVE_CFG", "STSAMPLE_MM_DST_WT_ADDITIVE_STEREO_SPREAD", "STSAMPLE_MM_DST_WT_ADDITIVE_PARTIALS", "STSAMPLE_MM_DST_VARIATION", "STSAMPLE_MM_NUM_DST", "STSAMPLE_MAX_INPUTS", "STSAMPLE_LIVEREC_DBLBUF_MODE_OFF", "STSAMPLE_LIVEREC_DBLBUF_MODE_END", "STSAMPLE_LIVEREC_DBLBUF_MODE_VOICE", "STSAMPLE_LIVEREC_DBLBUF_MODE_REC", "STSAMPLE_LIVEREC_DBLBUF_MODE_PARAM", "STSAMPLE_LIVEREC_MODE_TRIG", "STSAMPLE_LIVEREC_MODE_ZERO", "STSAMPLE_LIVEREC_MODE_KEEP", "STSAMPLE_LIVEREC_MODE_WAIT_ONCE", "STSAMPLE_LIVEREC_MODE_WAIT_REPEAT", "STSAMPLE_LIVEREC_MODE_WAIT_SILENCE_REPEAT", "STSAMPLE_LIVEREC_MODE_CONTINUOUS", "STSAMPLE_LIVEREC_MODE_CONTINUOUS_RING", "STSAMPLE_LIVEREC_OSC_MODE_OFF", "STSAMPLE_LIVEREC_OSC_MODE_ON", "STSAMPLE_LIVEREC_OSC_MODE_EVEN", "STSAMPLE_LIVEREC_OSC_MODE_TUNED", "STSAMPLE_LIVEREC_OSC_MODE_EVEN_TUNED", "STSAMPLE_LIVEREC_OSC_MODE_EDGE_P_TUNED", "STSAMPLE_LIVEREC_OSC_MODE_EDGE_P_SLOPE_TUNED", "STSAMPLE_LIVEREC_OSC_MODE_PEAK_TUNED", "STSAMPLE_LIVEREC_OSC_MODE_ZC_PEAK_TUNED", "STSAMPLE_NUM_PLUGINS", "STSAMPLE_NUM_MODS_PER_PLUGIN", "STSAMPLE_ADDITIVE_OSC_SIN", "STSAMPLE_ADDITIVE_OSC_TRI", "STSAMPLE_ADDITIVE_OSC_SUP", "STSAMPLE_ADDITIVE_OSC_SDN", "STSAMPLE_ADDITIVE_OSC_PUL", "STSAMPLE_ADDITIVE_OSC_NUM", "STSAMPLE_ADDITIVE_CFG_NUM", "STSAMPLE_VOICEPLUGIN_DST_DEF", "STSAMPLE_VOICEPLUGIN_DST_SR", "STSAMPLE_VOICEPLUGIN_DST_AM", "STSAMPLE_VOICEPLUGIN_DST_VB1", "STSAMPLE_VOICEPLUGIN_DST_VB2", "STSAMPLE_VOICEPLUGIN_DST_VB3", "STSAMPLE_VOICEPLUGIN_DST_VB4", "STSAMPLE_VOICEPLUGIN_DST_VB5", "STSAMPLE_VOICEPLUGIN_DST_VB6", "STSAMPLE_VOICEPLUGIN_DST_VB7", "STSAMPLE_VOICEPLUGIN_DST_VB8", "STSAMPLE_VOICEPLUGIN_DST_VM1", "STSAMPLE_VOICEPLUGIN_DST_VM2", "STSAMPLE_VOICEPLUGIN_DST_VM3", "STSAMPLE_VOICEPLUGIN_DST_VM4", "STSAMPLE_VOICEPLUGIN_DST_VM5", "STSAMPLE_VOICEPLUGIN_DST_VM6", "STSAMPLE_VOICEPLUGIN_DST_VM7", "STSAMPLE_VOICEPLUGIN_DST_VM8"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StSample::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL StSample::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[580]; m.ui=r; m.si[0]=(sSI)8;m.si[1]=(sSI)16;m.si[2]=(sSI)0;m.si[3]=(sSI)1;m.si[4]=(sSI)2;m.si[5]=(sSI)3;m.si[6]=(sSI)4;m.si[7]=(sSI)5;m.si[8]=(sSI)6;m.si[9]=(sSI)7;m.si[10]=(sSI)8;m.si[11]=(sSI)9;m.si[12]=(sSI)10;m.si[13]=(sSI)11;m.si[14]=(sSI)12;m.si[15]=(sSI)13;m.si[16]=(sSI)14;m.si[17]=(sSI)15;m.si[18]=(sSI)((1u<<31)|(1u<<30)|(1u<<29)|(1u<<28));m.si[19]=(sSI)28;m.si[20]=(sSI)(1u<<LOOP_OP_SHIFT);m.si[21]=(sSI)(2u<<LOOP_OP_SHIFT);m.si[22]=(sSI)(3u<<LOOP_OP_SHIFT);m.si[23]=(sSI)(4u<<LOOP_OP_SHIFT);m.si[24]=(sSI)((1u<<24)|(1u<<25)|(1u<<26)|(1u<<27));m.si[25]=(sSI)24;m.si[26]=(sSI)0xffffu;m.si[27]=(sSI)0;m.si[28]=(sSI)1;m.si[29]=(sSI)2;m.si[30]=(sSI)3;m.si[31]=(sSI)4;m.si[32]=(sSI)5;m.si[33]=(sSI)6;m.si[34]=(sSI)7;m.si[35]=(sSI)8;m.si[36]=(sSI)9;m.si[37]=(sSI)10;m.si[38]=(sSI)11;m.si[39]=(sSI)12;m.si[40]=(sSI)13;m.si[41]=(sSI)14;m.si[42]=(sSI)15;m.si[43]=(sSI)16;m.si[44]=(sSI)17;m.si[45]=(sSI)18;m.si[46]=(sSI)19;m.si[47]=(sSI)20;m.si[48]=(sSI)21;m.si[49]=(sSI)22;m.si[50]=(sSI)23;m.si[51]=(sSI)24;m.si[52]=(sSI)25;m.si[53]=(sSI)26;m.si[54]=(sSI)27;m.si[55]=(sSI)28;m.si[56]=(sSI)29;m.si[57]=(sSI)30;m.si[58]=(sSI)31;m.si[59]=(sSI)32;m.si[60]=(sSI)33;m.si[61]=(sSI)34;m.si[62]=(sSI)35;m.si[63]=(sSI)36;m.si[64]=(sSI)37;m.si[65]=(sSI)38;m.si[66]=(sSI)39;m.si[67]=(sSI)40;m.si[68]=(sSI)0;m.si[69]=(sSI)1;m.si[70]=(sSI)2;m.si[71]=(sSI)4;m.si[72]=(sSI)16;m.si[73]=(sSI)0;m.si[74]=(sSI)1;m.si[75]=(sSI)2;m.si[76]=(sSI)3;m.si[77]=(sSI)4;m.si[78]=(sSI)5;m.si[79]=(sSI)6;m.si[80]=(sSI)7;m.si[81]=(sSI)8;m.si[82]=(sSI)9;m.si[83]=(sSI)10;m.si[84]=(sSI)11;m.si[85]=(sSI)12;m.si[86]=(sSI)0;m.si[87]=(sSI)1;m.si[88]=(sSI)2;m.si[89]=(sSI)3;m.si[90]=(sSI)4;m.si[91]=(sSI)5;m.si[92]=(sSI)6;m.si[93]=(sSI)7;m.si[94]=(sSI)8;m.si[95]=(sSI)9;m.si[96]=(sSI)10;m.si[97]=(sSI)11;m.si[98]=(sSI)12;m.si[99]=(sSI)13;m.si[100]=(sSI)14;m.si[101]=(sSI)15;m.si[102]=(sSI)16;m.si[103]=(sSI)17;m.si[104]=(sSI)18;m.si[105]=(sSI)19;m.si[106]=(sSI)20;m.si[107]=(sSI)21;m.si[108]=(sSI)22;m.si[109]=(sSI)23;m.si[110]=(sSI)24;m.si[111]=(sSI)25;m.si[112]=(sSI)26;m.si[113]=(sSI)0;m.si[114]=(sSI)1;m.si[115]=(sSI)2;m.si[116]=(sSI)3;m.si[117]=(sSI)4;m.si[118]=(sSI)5;m.si[119]=(sSI)6;m.si[120]=(sSI)7;m.si[121]=(sSI)8;m.si[122]=(sSI)16;m.si[123]=(sSI)16;m.si[124]=(sSI)0;m.si[125]=(sSI)1;m.si[126]=(sSI)2;m.si[127]=(sSI)0;m.si[128]=(sSI)1;m.si[129]=(sSI)2;m.si[130]=(sSI)3;m.si[131]=(sSI)4;m.si[132]=(sSI)5;m.si[133]=(sSI)6;m.si[134]=(sSI)7;m.si[135]=(sSI)8;m.si[136]=(sSI)9;m.si[137]=(sSI)10;m.si[138]=(sSI)11;m.si[139]=(sSI)12;m.si[140]=(sSI)13;m.si[141]=(sSI)0;m.si[142]=(sSI)1;m.si[143]=(sSI)2;m.si[144]=(sSI)3;m.si[145]=(sSI)4;m.si[146]=(sSI)5;m.si[147]=(sSI)6;m.si[148]=(sSI)7;m.si[149]=(sSI)8;m.si[150]=(sSI)9;m.si[151]=(sSI)10;m.si[152]=(sSI)11;m.si[153]=(sSI)12;m.si[154]=(sSI)13;m.si[155]=(sSI)14;m.si[156]=(sSI)15;m.si[157]=(sSI)16;m.si[158]=(sSI)17;m.si[159]=(sSI)18;m.si[160]=(sSI)19;m.si[161]=(sSI)20;m.si[162]=(sSI)21;m.si[163]=(sSI)22;m.si[164]=(sSI)23;m.si[165]=(sSI)24;m.si[166]=(sSI)25;m.si[167]=(sSI)26;m.si[168]=(sSI)27;m.si[169]=(sSI)28;m.si[170]=(sSI)29;m.si[171]=(sSI)30;m.si[172]=(sSI)31;m.si[173]=(sSI)32;m.si[174]=(sSI)33;m.si[175]=(sSI)34;m.si[176]=(sSI)35;m.si[177]=(sSI)36;m.si[178]=(sSI)37;m.si[179]=(sSI)38;m.si[180]=(sSI)39;m.si[181]=(sSI)40;m.si[182]=(sSI)41;m.si[183]=(sSI)42;m.si[184]=(sSI)43;m.si[185]=(sSI)44;m.si[186]=(sSI)45;m.si[187]=(sSI)46;m.si[188]=(sSI)47;m.si[189]=(sSI)48;m.si[190]=(sSI)49;m.si[191]=(sSI)50;m.si[192]=(sSI)51;m.si[193]=(sSI)52;m.si[194]=(sSI)53;m.si[195]=(sSI)54;m.si[196]=(sSI)55;m.si[197]=(sSI)56;m.si[198]=(sSI)57;m.si[199]=(sSI)58;m.si[200]=(sSI)59;m.si[201]=(sSI)60;m.si[202]=(sSI)61;m.si[203]=(sSI)62;m.si[204]=(sSI)63;m.si[205]=(sSI)64;m.si[206]=(sSI)65;m.si[207]=(sSI)66;m.si[208]=(sSI)67;m.si[209]=(sSI)68;m.si[210]=(sSI)69;m.si[211]=(sSI)70;m.si[212]=(sSI)71;m.si[213]=(sSI)72;m.si[214]=(sSI)73;m.si[215]=(sSI)74;m.si[216]=(sSI)75;m.si[217]=(sSI)76;m.si[218]=(sSI)77;m.si[219]=(sSI)78;m.si[220]=(sSI)79;m.si[221]=(sSI)80;m.si[222]=(sSI)81;m.si[223]=(sSI)82;m.si[224]=(sSI)83;m.si[225]=(sSI)84;m.si[226]=(sSI)85;m.si[227]=(sSI)86;m.si[228]=(sSI)87;m.si[229]=(sSI)88;m.si[230]=(sSI)89;m.si[231]=(sSI)90;m.si[232]=(sSI)91;m.si[233]=(sSI)92;m.si[234]=(sSI)93;m.si[235]=(sSI)94;m.si[236]=(sSI)95;m.si[237]=(sSI)96;m.si[238]=(sSI)97;m.si[239]=(sSI)98;m.si[240]=(sSI)99;m.si[241]=(sSI)100;m.si[242]=(sSI)101;m.si[243]=(sSI)102;m.si[244]=(sSI)103;m.si[245]=(sSI)104;m.si[246]=(sSI)105;m.si[247]=(sSI)106;m.si[248]=(sSI)107;m.si[249]=(sSI)108;m.si[250]=(sSI)109;m.si[251]=(sSI)110;m.si[252]=(sSI)111;m.si[253]=(sSI)112;m.si[254]=(sSI)113;m.si[255]=(sSI)114;m.si[256]=(sSI)115;m.si[257]=(sSI)116;m.si[258]=(sSI)117;m.si[259]=(sSI)118;m.si[260]=(sSI)119;m.si[261]=(sSI)120;m.si[262]=(sSI)121;m.si[263]=(sSI)122;m.si[264]=(sSI)123;m.si[265]=(sSI)124;m.si[266]=(sSI)125;m.si[267]=(sSI)126;m.si[268]=(sSI)127;m.si[269]=(sSI)128;m.si[270]=(sSI)129;m.si[271]=(sSI)130;m.si[272]=(sSI)131;m.si[273]=(sSI)132;m.si[274]=(sSI)133;m.si[275]=(sSI)134;m.si[276]=(sSI)135;m.si[277]=(sSI)136;m.si[278]=(sSI)137;m.si[279]=(sSI)138;m.si[280]=(sSI)139;m.si[281]=(sSI)140;m.si[282]=(sSI)141;m.si[283]=(sSI)142;m.si[284]=(sSI)143;m.si[285]=(sSI)144;m.si[286]=(sSI)145;m.si[287]=(sSI)146;m.si[288]=(sSI)147;m.si[289]=(sSI)148;m.si[290]=(sSI)149;m.si[291]=(sSI)150;m.si[292]=(sSI)151;m.si[293]=(sSI)152;m.si[294]=(sSI)153;m.si[295]=(sSI)154;m.si[296]=(sSI)155;m.si[297]=(sSI)156;m.si[298]=(sSI)157;m.si[299]=(sSI)158;m.si[300]=(sSI)159;m.si[301]=(sSI)160;m.si[302]=(sSI)161;m.si[303]=(sSI)162;m.si[304]=(sSI)163;m.si[305]=(sSI)164;m.si[306]=(sSI)165;m.si[307]=(sSI)166;m.si[308]=(sSI)167;m.si[309]=(sSI)168;m.si[310]=(sSI)169;m.si[311]=(sSI)170;m.si[312]=(sSI)171;m.si[313]=(sSI)172;m.si[314]=(sSI)173;m.si[315]=(sSI)174;m.si[316]=(sSI)175;m.si[317]=(sSI)176;m.si[318]=(sSI)177;m.si[319]=(sSI)178;m.si[320]=(sSI)179;m.si[321]=(sSI)180;m.si[322]=(sSI)181;m.si[323]=(sSI)182;m.si[324]=(sSI)183;m.si[325]=(sSI)0;m.si[326]=(sSI)1;m.si[327]=(sSI)2;m.si[328]=(sSI)3;m.si[329]=(sSI)4;m.si[330]=(sSI)5;m.si[331]=(sSI)6;m.si[332]=(sSI)7;m.si[333]=(sSI)8;m.si[334]=(sSI)9;m.si[335]=(sSI)10;m.si[336]=(sSI)11;m.si[337]=(sSI)12;m.si[338]=(sSI)13;m.si[339]=(sSI)14;m.si[340]=(sSI)15;m.si[341]=(sSI)16;m.si[342]=(sSI)17;m.si[343]=(sSI)18;m.si[344]=(sSI)19;m.si[345]=(sSI)20;m.si[346]=(sSI)21;m.si[347]=(sSI)22;m.si[348]=(sSI)23;m.si[349]=(sSI)24;m.si[350]=(sSI)25;m.si[351]=(sSI)26;m.si[352]=(sSI)27;m.si[353]=(sSI)28;m.si[354]=(sSI)29;m.si[355]=(sSI)30;m.si[356]=(sSI)31;m.si[357]=(sSI)32;m.si[358]=(sSI)33;m.si[359]=(sSI)34;m.si[360]=(sSI)35;m.si[361]=(sSI)36;m.si[362]=(sSI)37;m.si[363]=(sSI)38;m.si[364]=(sSI)39;m.si[365]=(sSI)40;m.si[366]=(sSI)41;m.si[367]=(sSI)42;m.si[368]=(sSI)43;m.si[369]=(sSI)44;m.si[370]=(sSI)45;m.si[371]=(sSI)46;m.si[372]=(sSI)47;m.si[373]=(sSI)48;m.si[374]=(sSI)49;m.si[375]=(sSI)50;m.si[376]=(sSI)51;m.si[377]=(sSI)52;m.si[378]=(sSI)53;m.si[379]=(sSI)54;m.si[380]=(sSI)55;m.si[381]=(sSI)56;m.si[382]=(sSI)57;m.si[383]=(sSI)58;m.si[384]=(sSI)59;m.si[385]=(sSI)60;m.si[386]=(sSI)61;m.si[387]=(sSI)62;m.si[388]=(sSI)63;m.si[389]=(sSI)64;m.si[390]=(sSI)65;m.si[391]=(sSI)66;m.si[392]=(sSI)67;m.si[393]=(sSI)68;m.si[394]=(sSI)69;m.si[395]=(sSI)70;m.si[396]=(sSI)71;m.si[397]=(sSI)72;m.si[398]=(sSI)73;m.si[399]=(sSI)74;m.si[400]=(sSI)75;m.si[401]=(sSI)76;m.si[402]=(sSI)77;m.si[403]=(sSI)78;m.si[404]=(sSI)79;m.si[405]=(sSI)80;m.si[406]=(sSI)81;m.si[407]=(sSI)82;m.si[408]=(sSI)83;m.si[409]=(sSI)84;m.si[410]=(sSI)85;m.si[411]=(sSI)86;m.si[412]=(sSI)87;m.si[413]=(sSI)88;m.si[414]=(sSI)89;m.si[415]=(sSI)90;m.si[416]=(sSI)91;m.si[417]=(sSI)92;m.si[418]=(sSI)93;m.si[419]=(sSI)94;m.si[420]=(sSI)95;m.si[421]=(sSI)96;m.si[422]=(sSI)97;m.si[423]=(sSI)98;m.si[424]=(sSI)99;m.si[425]=(sSI)100;m.si[426]=(sSI)101;m.si[427]=(sSI)102;m.si[428]=(sSI)103;m.si[429]=(sSI)104;m.si[430]=(sSI)105;m.si[431]=(sSI)106;m.si[432]=(sSI)107;m.si[433]=(sSI)108;m.si[434]=(sSI)109;m.si[435]=(sSI)110;m.si[436]=(sSI)111;m.si[437]=(sSI)112;m.si[438]=(sSI)113;m.si[439]=(sSI)114;m.si[440]=(sSI)115;m.si[441]=(sSI)116;m.si[442]=(sSI)117;m.si[443]=(sSI)118;m.si[444]=(sSI)119;m.si[445]=(sSI)120;m.si[446]=(sSI)121;m.si[447]=(sSI)122;m.si[448]=(sSI)123;m.si[449]=(sSI)124;m.si[450]=(sSI)125;m.si[451]=(sSI)126;m.si[452]=(sSI)127;m.si[453]=(sSI)128;m.si[454]=(sSI)129;m.si[455]=(sSI)130;m.si[456]=(sSI)131;m.si[457]=(sSI)132;m.si[458]=(sSI)133;m.si[459]=(sSI)134;m.si[460]=(sSI)135;m.si[461]=(sSI)136;m.si[462]=(sSI)137;m.si[463]=(sSI)138;m.si[464]=(sSI)139;m.si[465]=(sSI)140;m.si[466]=(sSI)141;m.si[467]=(sSI)142;m.si[468]=(sSI)143;m.si[469]=(sSI)144;m.si[470]=(sSI)145;m.si[471]=(sSI)146;m.si[472]=(sSI)147;m.si[473]=(sSI)148;m.si[474]=(sSI)149;m.si[475]=(sSI)150;m.si[476]=(sSI)151;m.si[477]=(sSI)152;m.si[478]=(sSI)153;m.si[479]=(sSI)154;m.si[480]=(sSI)155;m.si[481]=(sSI)156;m.si[482]=(sSI)157;m.si[483]=(sSI)158;m.si[484]=(sSI)159;m.si[485]=(sSI)160;m.si[486]=(sSI)161;m.si[487]=(sSI)162;m.si[488]=(sSI)163;m.si[489]=(sSI)164;m.si[490]=(sSI)165;m.si[491]=(sSI)166;m.si[492]=(sSI)167;m.si[493]=(sSI)168;m.si[494]=(sSI)169;m.si[495]=(sSI)170;m.si[496]=(sSI)171;m.si[497]=(sSI)172;m.si[498]=(sSI)173;m.si[499]=(sSI)174;m.si[500]=(sSI)175;m.si[501]=(sSI)176;m.si[502]=(sSI)177;m.si[503]=(sSI)178;m.si[504]=(sSI)179;m.si[505]=(sSI)180;m.si[506]=(sSI)181;m.si[507]=(sSI)182;m.si[508]=(sSI)183;m.si[509]=(sSI)184;m.si[510]=(sSI)185;m.si[511]=(sSI)186;m.si[512]=(sSI)187;m.si[513]=(sSI)188;m.si[514]=(sSI)189;m.si[515]=(sSI)190;m.si[516]=(sSI)191;m.si[517]=(sSI)192;m.si[518]=(sSI)193;m.si[519]=(sSI)194;m.si[520]=(sSI)195;m.si[521]=(sSI)196;m.si[522]=(sSI)197;m.si[523]=(sSI)198;m.si[524]=(sSI)199;m.si[525]=(sSI)200;m.si[526]=(sSI)201;m.si[527]=(sSI)202;m.si[528]=(sSI)203;m.si[529]=(sSI)4;m.si[530]=(sSI)0;m.si[531]=(sSI)1;m.si[532]=(sSI)2;m.si[533]=(sSI)3;m.si[534]=(sSI)4;m.si[535]=(sSI)0;m.si[536]=(sSI)1;m.si[537]=(sSI)2;m.si[538]=(sSI)3;m.si[539]=(sSI)4;m.si[540]=(sSI)5;m.si[541]=(sSI)6;m.si[542]=(sSI)7;m.si[543]=(sSI)0;m.si[544]=(sSI)1;m.si[545]=(sSI)2;m.si[546]=(sSI)3;m.si[547]=(sSI)4;m.si[548]=(sSI)5;m.si[549]=(sSI)6;m.si[550]=(sSI)7;m.si[551]=(sSI)8;m.si[552]=(sSI)4;m.si[553]=(sSI)8;m.si[554]=(sSI)0;m.si[555]=(sSI)1;m.si[556]=(sSI)2;m.si[557]=(sSI)3;m.si[558]=(sSI)4;m.si[559]=(sSI)5;m.si[560]=(sSI)8;m.si[561]=(sSI)0;m.si[562]=(sSI)1;m.si[563]=(sSI)2;m.si[564]=(sSI)3;m.si[565]=(sSI)4;m.si[566]=(sSI)5;m.si[567]=(sSI)6;m.si[568]=(sSI)7;m.si[569]=(sSI)8;m.si[570]=(sSI)9;m.si[571]=(sSI)10;m.si[572]=(sSI)11;m.si[573]=(sSI)12;m.si[574]=(sSI)13;m.si[575]=(sSI)14;m.si[576]=(sSI)15;m.si[577]=(sSI)16;m.si[578]=(sSI)17;m.si[579]=(sSI)18;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(StSample, "StSample");

#ifndef YAC_NO_HOST
void  YAC_CALL StSample__reinit     (void *_o                                ) {((StSample*)_o)->reinit();}
void  YAC_CALL StSample__free       (void *_o                                ) {((StSample*)_o)->free();}
void* YAC_CALL StSample___getNext   (void *_o                                ) {return (void*)((StSample*)_o)->_getNext();}
void  YAC_CALL StSample___setNext   (void *_o, yacmemptr _args               ) {((StSample*)_o)->_setNext(_args.mem[0].o);}
void* YAC_CALL StSample___getName   (void *_o                                ) {return (void*)((StSample*)_o)->_getName();}
void  YAC_CALL StSample___setName   (void *_o, yacmemptr _args               ) {((StSample*)_o)->_setName(_args.mem[0].o);}
void* YAC_CALL StSample___getWaveform(void *_o                               ) {return (void*)((StSample*)_o)->_getWaveform();}
void  YAC_CALL StSample___setWaveform(void *_o, yacmemptr _args              ) {((StSample*)_o)->_setWaveform(_args.mem[0].o);}
void* YAC_CALL StSample___getPartialMagnitudes(void *_o                      ) {return (void*)((StSample*)_o)->_getPartialMagnitudes();}
void  YAC_CALL StSample___setPartialMagnitudes(void *_o, yacmemptr _args     ) {((StSample*)_o)->_setPartialMagnitudes(_args.mem[0].o);}
void* YAC_CALL StSample___getPartialSpeeds(void *_o                          ) {return (void*)((StSample*)_o)->_getPartialSpeeds();}
void  YAC_CALL StSample___setPartialSpeeds(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setPartialSpeeds(_args.mem[0].o);}
void* YAC_CALL StSample___getPartialPhases(void *_o                          ) {return (void*)((StSample*)_o)->_getPartialPhases();}
void  YAC_CALL StSample___setPartialPhases(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setPartialPhases(_args.mem[0].o);}
void  YAC_CALL StSample___setNumPartials(void *_o, yacmemptr _args           ) {((StSample*)_o)->_setNumPartials(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getNumPartials(void *_o                            ) {return (sF32)((StSample*)_o)->_getNumPartials();}
void  YAC_CALL StSample___setPartialCycleLenReset(void *_o, yacmemptr _args  ) {((StSample*)_o)->_setPartialCycleLenReset(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getPartialCycleLenReset(void *_o                   ) {return (sF32)((StSample*)_o)->_getPartialCycleLenReset();}
void  YAC_CALL StSample___setEnablePartialPhase0(void *_o, yacmemptr _args   ) {((StSample*)_o)->_setEnablePartialPhase0(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnablePartialPhase0(void *_o                    ) {return (sSI)((StSample*)_o)->_getEnablePartialPhase0();}
void  YAC_CALL StSample___handleShiftSampleArea(void *_o, yacmemptr _args    ) {((StSample*)_o)->_handleShiftSampleArea(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL StSample___handleMoveSampleArea(void *_o, yacmemptr _args     ) {((StSample*)_o)->_handleMoveSampleArea(_args.mem[0].si, _args.mem[1].si, _args.mem[2].si);}
sSI   YAC_CALL StSample___verifySampleAreas(void *_o                         ) {return (sSI)((StSample*)_o)->_verifySampleAreas();}
void* YAC_CALL StSample___getMutexGroup(void *_o                             ) {return (void*)((StSample*)_o)->_getMutexGroup();}
void  YAC_CALL StSample___setMutexGroup(void *_o, yacmemptr _args            ) {((StSample*)_o)->_setMutexGroup(_args.mem[0].o);}
void* YAC_CALL StSample___getKeyRange(void *_o                               ) {return (void*)((StSample*)_o)->_getKeyRange();}
void* YAC_CALL StSample___getVelRange(void *_o                               ) {return (void*)((StSample*)_o)->_getVelRange();}
void* YAC_CALL StSample___getModRange(void *_o                               ) {return (void*)((StSample*)_o)->_getModRange();}
void* YAC_CALL StSample___getOrCreateKeyRange(void *_o                       ) {return (void*)((StSample*)_o)->_getOrCreateKeyRange();}
void* YAC_CALL StSample___getOrCreateVelRange(void *_o                       ) {return (void*)((StSample*)_o)->_getOrCreateVelRange();}
void* YAC_CALL StSample___getOrCreateModRange(void *_o                       ) {return (void*)((StSample*)_o)->_getOrCreateModRange();}
void* YAC_CALL StSample___getFreqADSR(void *_o                               ) {return (void*)((StSample*)_o)->_getFreqADSR();}
void* YAC_CALL StSample___getVolADSR(void *_o                                ) {return (void*)((StSample*)_o)->_getVolADSR();}
void* YAC_CALL StSample___getPanADSR(void *_o                                ) {return (void*)((StSample*)_o)->_getPanADSR();}
void* YAC_CALL StSample___getAuxADSR(void *_o                                ) {return (void*)((StSample*)_o)->_getAuxADSR();}
void* YAC_CALL StSample___getOrCreateFreqADSR(void *_o                       ) {return (void*)((StSample*)_o)->_getOrCreateFreqADSR();}
void* YAC_CALL StSample___getOrCreateVolADSR(void *_o                        ) {return (void*)((StSample*)_o)->_getOrCreateVolADSR();}
void* YAC_CALL StSample___getOrCreatePanADSR(void *_o                        ) {return (void*)((StSample*)_o)->_getOrCreatePanADSR();}
void* YAC_CALL StSample___getOrCreateAuxADSR(void *_o                        ) {return (void*)((StSample*)_o)->_getOrCreateAuxADSR();}
void* YAC_CALL StSample___getFreqLFO(void *_o                                ) {return (void*)((StSample*)_o)->_getFreqLFO();}
void* YAC_CALL StSample___getVolLFO (void *_o                                ) {return (void*)((StSample*)_o)->_getVolLFO();}
void* YAC_CALL StSample___getPanLFO (void *_o                                ) {return (void*)((StSample*)_o)->_getPanLFO();}
void* YAC_CALL StSample___getAuxLFO (void *_o                                ) {return (void*)((StSample*)_o)->_getAuxLFO();}
void* YAC_CALL StSample___getLFOByIndex(void *_o, yacmemptr _args            ) {return (void*)((StSample*)_o)->_getLFOByIndex(_args.mem[0].si);}
void* YAC_CALL StSample___getOrCreateLFOByIndex(void *_o, yacmemptr _args    ) {return (void*)((StSample*)_o)->_getOrCreateLFOByIndex(_args.mem[0].si);}
void* YAC_CALL StSample___getOrCreateFreqLFO(void *_o                        ) {return (void*)((StSample*)_o)->_getOrCreateFreqLFO();}
void* YAC_CALL StSample___getOrCreateVolLFO(void *_o                         ) {return (void*)((StSample*)_o)->_getOrCreateVolLFO();}
void* YAC_CALL StSample___getOrCreatePanLFO(void *_o                         ) {return (void*)((StSample*)_o)->_getOrCreatePanLFO();}
void* YAC_CALL StSample___getOrCreateAuxLFO(void *_o                         ) {return (void*)((StSample*)_o)->_getOrCreateAuxLFO();}
void  YAC_CALL StSample___deleteFreqLFO(void *_o                             ) {((StSample*)_o)->_deleteFreqLFO();}
void  YAC_CALL StSample___deleteVolLFO(void *_o                              ) {((StSample*)_o)->_deleteVolLFO();}
void  YAC_CALL StSample___deletePanLFO(void *_o                              ) {((StSample*)_o)->_deletePanLFO();}
void  YAC_CALL StSample___deleteAuxLFO(void *_o                              ) {((StSample*)_o)->_deleteAuxLFO();}
void* YAC_CALL StSample___getModSeqByIndexAndPatch(void *_o, yacmemptr _args ) {return (void*)((StSample*)_o)->_getModSeqByIndexAndPatch(_args.mem[0].si, _args.mem[1].si);}
void* YAC_CALL StSample___getOrCreateModSeqByIndexAndPatch(void *_o, yacmemptr _args) {return (void*)((StSample*)_o)->_getOrCreateModSeqByIndexAndPatch(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL StSample___deleteModSeqByIndexAndPatch(void *_o, yacmemptr _args) {((StSample*)_o)->_deleteModSeqByIndexAndPatch(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL StSample___setDefaultModSeqPatch(void *_o, yacmemptr _args    ) {((StSample*)_o)->_setDefaultModSeqPatch(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getDefaultModSeqPatch(void *_o, yacmemptr _args    ) {return (sSI)((StSample*)_o)->_getDefaultModSeqPatch(_args.mem[0].si);}
sSI   YAC_CALL StSample___findLastUsedModSeqPatch(void *_o, yacmemptr _args  ) {return (sSI)((StSample*)_o)->_findLastUsedModSeqPatch(_args.mem[0].si);}
void  YAC_CALL StSample___allocSampleLoops(void *_o                          ) {((StSample*)_o)->_allocSampleLoops();}
void* YAC_CALL StSample___getOrCreateSampleLoops(void *_o                    ) {return (void*)((StSample*)_o)->_getOrCreateSampleLoops();}
void* YAC_CALL StSample___getSampleLoops(void *_o                            ) {return (void*)((StSample*)_o)->_getSampleLoops();}
void  YAC_CALL StSample___freeSampleLoops(void *_o                           ) {((StSample*)_o)->_freeSampleLoops();}
sSI   YAC_CALL StSample___getNumSampleLoops(void *_o                         ) {return (sSI)((StSample*)_o)->_getNumSampleLoops();}
void  YAC_CALL StSample___uiSetEnableSyncFirstLoopIndex(void *_o, yacmemptr _args) {((StSample*)_o)->_uiSetEnableSyncFirstLoopIndex(_args.mem[0].si);}
sSI   YAC_CALL StSample___uiGetEnableSyncFirstLoopIndex(void *_o             ) {return (sSI)((StSample*)_o)->_uiGetEnableSyncFirstLoopIndex();}
void  YAC_CALL StSample___setFirstLoopIndex(void *_o, yacmemptr _args        ) {((StSample*)_o)->_setFirstLoopIndex(_args.mem[0].si);}
sSI   YAC_CALL StSample___getFirstLoopIndex(void *_o                         ) {return (sSI)((StSample*)_o)->_getFirstLoopIndex();}
void  YAC_CALL StSample___setNoteOffLoopIndex(void *_o, yacmemptr _args      ) {((StSample*)_o)->_setNoteOffLoopIndex(_args.mem[0].si);}
sSI   YAC_CALL StSample___getNoteOffLoopIndex(void *_o                       ) {return (sSI)((StSample*)_o)->_getNoteOffLoopIndex();}
void  YAC_CALL StSample___setEnableNoteOffLoopImmediately(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableNoteOffLoopImmediately(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableNoteOffLoopImmediately(void *_o           ) {return (sSI)((StSample*)_o)->_getEnableNoteOffLoopImmediately();}
void  YAC_CALL StSample___setEnableJumpToLoopImmediately(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableJumpToLoopImmediately(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableJumpToLoopImmediately(void *_o            ) {return (sSI)((StSample*)_o)->_getEnableJumpToLoopImmediately();}
void  YAC_CALL StSample___setPlayMode(void *_o, yacmemptr _args              ) {((StSample*)_o)->_setPlayMode(_args.mem[0].si);}
sSI   YAC_CALL StSample___getPlayMode(void *_o                               ) {return (sSI)((StSample*)_o)->_getPlayMode();}
sSI   YAC_CALL StSample___getFirstOffset(void *_o                            ) {return (sSI)((StSample*)_o)->_getFirstOffset();}
void  YAC_CALL StSample___setFirstOffset(void *_o, yacmemptr _args           ) {((StSample*)_o)->_setFirstOffset(_args.mem[0].si);}
sSI   YAC_CALL StSample___getFirstLen(void *_o                               ) {return (sSI)((StSample*)_o)->_getFirstLen();}
void  YAC_CALL StSample___setFirstLen(void *_o, yacmemptr _args              ) {((StSample*)_o)->_setFirstLen(_args.mem[0].si);}
sSI   YAC_CALL StSample___getFirstLoopOffset(void *_o                        ) {return (sSI)((StSample*)_o)->_getFirstLoopOffset();}
void  YAC_CALL StSample___setFirstLoopOffset(void *_o, yacmemptr _args       ) {((StSample*)_o)->_setFirstLoopOffset(_args.mem[0].si);}
sSI   YAC_CALL StSample___getFirstLoopLen(void *_o                           ) {return (sSI)((StSample*)_o)->_getFirstLoopLen();}
void  YAC_CALL StSample___setFirstLoopLen(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setFirstLoopLen(_args.mem[0].si);}
sSI   YAC_CALL StSample___getFirstLoopRep(void *_o                           ) {return (sSI)((StSample*)_o)->_getFirstLoopRep();}
void  YAC_CALL StSample___setFirstLoopRep(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setFirstLoopRep(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLastLoopOffset(void *_o                         ) {return (sSI)((StSample*)_o)->_getLastLoopOffset();}
sSI   YAC_CALL StSample___getLastLoopLen(void *_o                            ) {return (sSI)((StSample*)_o)->_getLastLoopLen();}
sSI   YAC_CALL StSample___getOffset (void *_o                                ) {return (sSI)((StSample*)_o)->_getOffset();}
void  YAC_CALL StSample___setOffset (void *_o, yacmemptr _args               ) {((StSample*)_o)->_setOffset(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLen    (void *_o                                ) {return (sSI)((StSample*)_o)->_getLen();}
void  YAC_CALL StSample___setLen    (void *_o, yacmemptr _args               ) {((StSample*)_o)->_setLen(_args.mem[0].si);}
sSI   YAC_CALL StSample___getMinOffset(void *_o                              ) {return (sSI)((StSample*)_o)->_getMinOffset();}
sSI   YAC_CALL StSample___getMaxOffset(void *_o                              ) {return (sSI)((StSample*)_o)->_getMaxOffset();}
void  YAC_CALL StSample___setMaxVoices(void *_o, yacmemptr _args             ) {((StSample*)_o)->_setMaxVoices(_args.mem[0].si);}
sSI   YAC_CALL StSample___getMaxVoices(void *_o                              ) {return (sSI)((StSample*)_o)->_getMaxVoices();}
sF32  YAC_CALL StSample___getVolume (void *_o                                ) {return (sF32)((StSample*)_o)->_getVolume();}
void  YAC_CALL StSample___setVolume (void *_o, yacmemptr _args               ) {((StSample*)_o)->_setVolume(_args.mem[0].f32);}
void  YAC_CALL StSample___setVolLFOAmt(void *_o, yacmemptr _args             ) {((StSample*)_o)->_setVolLFOAmt(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getVolLFOAmt(void *_o                              ) {return (sF32)((StSample*)_o)->_getVolLFOAmt();}
sF32  YAC_CALL StSample___getVolumeVelocityAmount(void *_o                   ) {return (sF32)((StSample*)_o)->_getVolumeVelocityAmount();}
void  YAC_CALL StSample___setVolumeVelocityAmount(void *_o, yacmemptr _args  ) {((StSample*)_o)->_setVolumeVelocityAmount(_args.mem[0].f32);}
void  YAC_CALL StSample___setSampleOffsetRel(void *_o, yacmemptr _args       ) {((StSample*)_o)->_setSampleOffsetRel(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getSampleOffsetRel(void *_o                        ) {return (sF32)((StSample*)_o)->_getSampleOffsetRel();}
sF32  YAC_CALL StSample___getSampleOffsetVelocityAmount(void *_o             ) {return (sF32)((StSample*)_o)->_getSampleOffsetVelocityAmount();}
void  YAC_CALL StSample___setSampleOffsetVelocityAmount(void *_o, yacmemptr _args) {((StSample*)_o)->_setSampleOffsetVelocityAmount(_args.mem[0].f32);}
sSI   YAC_CALL StSample___getEnableInvertSampleOffsetVelocityAmount(void *_o ) {return (sSI)((StSample*)_o)->_getEnableInvertSampleOffsetVelocityAmount();}
void  YAC_CALL StSample___setEnableInvertSampleOffsetVelocityAmount(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableInvertSampleOffsetVelocityAmount(_args.mem[0].si);}
sF32  YAC_CALL StSample___getSampleOffsetRandAmount(void *_o                 ) {return (sF32)((StSample*)_o)->_getSampleOffsetRandAmount();}
void  YAC_CALL StSample___setSampleOffsetRandAmount(void *_o, yacmemptr _args) {((StSample*)_o)->_setSampleOffsetRandAmount(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getPan    (void *_o                                ) {return (sF32)((StSample*)_o)->_getPan();}
void  YAC_CALL StSample___setPan    (void *_o, yacmemptr _args               ) {((StSample*)_o)->_setPan(_args.mem[0].f32);}
void  YAC_CALL StSample___setPanEnvAmt(void *_o, yacmemptr _args             ) {((StSample*)_o)->_setPanEnvAmt(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getPanEnvAmt(void *_o                              ) {return (sF32)((StSample*)_o)->_getPanEnvAmt();}
void  YAC_CALL StSample___setPanLFOAmt(void *_o, yacmemptr _args             ) {((StSample*)_o)->_setPanLFOAmt(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getPanLFOAmt(void *_o                              ) {return (sF32)((StSample*)_o)->_getPanLFOAmt();}
sF32  YAC_CALL StSample___getTranspose(void *_o                              ) {return (sF32)((StSample*)_o)->_getTranspose();}
void  YAC_CALL StSample___setTranspose(void *_o, yacmemptr _args             ) {((StSample*)_o)->_setTranspose(_args.mem[0].f32);}
void  YAC_CALL StSample___setTransposeAndUpdateOctSemiCents(void *_o, yacmemptr _args) {((StSample*)_o)->_setTransposeAndUpdateOctSemiCents(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getSampleRateRatio(void *_o                        ) {return (sF32)((StSample*)_o)->_getSampleRateRatio();}
void  YAC_CALL StSample___setSampleRateRatio(void *_o, yacmemptr _args       ) {((StSample*)_o)->_setSampleRateRatio(_args.mem[0].f32);}
void  YAC_CALL StSample___setUiTransposeOct(void *_o, yacmemptr _args        ) {((StSample*)_o)->_setUiTransposeOct(_args.mem[0].si);}
sSI   YAC_CALL StSample___getUiTransposeOct(void *_o                         ) {return (sSI)((StSample*)_o)->_getUiTransposeOct();}
void  YAC_CALL StSample___setUiTransposeSemi(void *_o, yacmemptr _args       ) {((StSample*)_o)->_setUiTransposeSemi(_args.mem[0].si);}
sSI   YAC_CALL StSample___getUiTransposeSemi(void *_o                        ) {return (sSI)((StSample*)_o)->_getUiTransposeSemi();}
void  YAC_CALL StSample___setUiTransposeCents(void *_o, yacmemptr _args      ) {((StSample*)_o)->_setUiTransposeCents(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getUiTransposeCents(void *_o                       ) {return (sF32)((StSample*)_o)->_getUiTransposeCents();}
void  YAC_CALL StSample___setTransposeAndUpdateOctSemi(void *_o, yacmemptr _args) {((StSample*)_o)->_setTransposeAndUpdateOctSemi(_args.mem[0].si);}
void  YAC_CALL StSample___setBeatFrequency(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setBeatFrequency(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getBeatFrequency(void *_o                          ) {return (sF32)((StSample*)_o)->_getBeatFrequency();}
void  YAC_CALL StSample___setEnableLerpFreq(void *_o, yacmemptr _args        ) {((StSample*)_o)->_setEnableLerpFreq(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableLerpFreq(void *_o                         ) {return (sSI)((StSample*)_o)->_getEnableLerpFreq();}
void  YAC_CALL StSample___setEnableLerpVol(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setEnableLerpVol(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableLerpVol(void *_o                          ) {return (sSI)((StSample*)_o)->_getEnableLerpVol();}
void  YAC_CALL StSample___setFreqEnvAmt(void *_o, yacmemptr _args            ) {((StSample*)_o)->_setFreqEnvAmt(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getFreqEnvAmt(void *_o                             ) {return (sF32)((StSample*)_o)->_getFreqEnvAmt();}
void  YAC_CALL StSample___setFreqLFOAmt(void *_o, yacmemptr _args            ) {((StSample*)_o)->_setFreqLFOAmt(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getFreqLFOAmt(void *_o                             ) {return (sF32)((StSample*)_o)->_getFreqLFOAmt();}
sF32  YAC_CALL StSample___getDelay  (void *_o                                ) {return (sF32)((StSample*)_o)->_getDelay();}
void  YAC_CALL StSample___setDelay  (void *_o, yacmemptr _args               ) {((StSample*)_o)->_setDelay(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getDelayMultiplier(void *_o                        ) {return (sF32)((StSample*)_o)->_getDelayMultiplier();}
void  YAC_CALL StSample___setDelayMultiplier(void *_o, yacmemptr _args       ) {((StSample*)_o)->_setDelayMultiplier(_args.mem[0].f32);}
sF32  YAC_CALL StSample__calcVelZoneVolume(void *_o, yacmemptr _args         ) {return (sF32)((StSample*)_o)->calcVelZoneVolume(_args.mem[0].f32);}
sF32  YAC_CALL StSample__calcKeyModZoneVolume(void *_o, yacmemptr _args      ) {return (sF32)((StSample*)_o)->calcKeyModZoneVolume(_args.mem[0].f32, _args.mem[1].f32);}
void  YAC_CALL StSample__setEnableTimestretch(void *_o, yacmemptr _args      ) {((StSample*)_o)->setEnableTimestretch(_args.mem[0].si);}
sSI   YAC_CALL StSample__getEnableTimestretch(void *_o                       ) {return (sSI)((StSample*)_o)->getEnableTimestretch();}
void  YAC_CALL StSample__setEnableTimestretchAdditive(void *_o, yacmemptr _args) {((StSample*)_o)->setEnableTimestretchAdditive(_args.mem[0].si);}
sSI   YAC_CALL StSample__getEnableTimestretchAdditive(void *_o               ) {return (sSI)((StSample*)_o)->getEnableTimestretchAdditive();}
void  YAC_CALL StSample__setEnableTimestretchXFade(void *_o, yacmemptr _args ) {((StSample*)_o)->setEnableTimestretchXFade(_args.mem[0].si);}
sSI   YAC_CALL StSample__getEnableTimestretchXFade(void *_o                  ) {return (sSI)((StSample*)_o)->getEnableTimestretchXFade();}
void  YAC_CALL StSample__setTimestretch(void *_o, yacmemptr _args            ) {((StSample*)_o)->setTimestretch(_args.mem[0].f32);}
sF32  YAC_CALL StSample__getTimestretch(void *_o                             ) {return (sF32)((StSample*)_o)->getTimestretch();}
void  YAC_CALL StSample__setTimestretchGranularity(void *_o, yacmemptr _args ) {((StSample*)_o)->setTimestretchGranularity(_args.mem[0].f32);}
sF32  YAC_CALL StSample__getTimestretchGranularity(void *_o                  ) {return (sF32)((StSample*)_o)->getTimestretchGranularity();}
void  YAC_CALL StSample__setTimestretchGranularityAmount(void *_o, yacmemptr _args) {((StSample*)_o)->setTimestretchGranularityAmount(_args.mem[0].f32);}
sF32  YAC_CALL StSample__getTimestretchGranularityAmount(void *_o            ) {return (sF32)((StSample*)_o)->getTimestretchGranularityAmount();}
void  YAC_CALL StSample__setEnableStaticCyclelen(void *_o, yacmemptr _args   ) {((StSample*)_o)->setEnableStaticCyclelen(_args.mem[0].si);}
sSI   YAC_CALL StSample__getEnableStaticCyclelen(void *_o                    ) {return (sSI)((StSample*)_o)->getEnableStaticCyclelen();}
void  YAC_CALL StSample__setEnableAbsoluteTimestretch(void *_o, yacmemptr _args) {((StSample*)_o)->setEnableAbsoluteTimestretch(_args.mem[0].si);}
sSI   YAC_CALL StSample__getEnableAbsoluteTimestretch(void *_o               ) {return (sSI)((StSample*)_o)->getEnableAbsoluteTimestretch();}
void  YAC_CALL StSample__setTimestretchInterpolType(void *_o, yacmemptr _args) {((StSample*)_o)->setTimestretchInterpolType(_args.mem[0].si);}
sSI   YAC_CALL StSample__getTimestretchInterpolType(void *_o                 ) {return (sSI)((StSample*)_o)->getTimestretchInterpolType();}
void  YAC_CALL StSample__setTimestretchGrainWindowType(void *_o, yacmemptr _args) {((StSample*)_o)->setTimestretchGrainWindowType(_args.mem[0].si);}
sSI   YAC_CALL StSample__getTimestretchGrainWindowType(void *_o              ) {return (sSI)((StSample*)_o)->getTimestretchGrainWindowType();}
void  YAC_CALL StSample__setTimestretchBend(void *_o, yacmemptr _args        ) {((StSample*)_o)->setTimestretchBend(_args.mem[0].f32);}
sF32  YAC_CALL StSample__getTimestretchBend(void *_o                         ) {return (sF32)((StSample*)_o)->getTimestretchBend();}
void  YAC_CALL StSample__setTimestretchStartPhaseRandAmount(void *_o, yacmemptr _args) {((StSample*)_o)->setTimestretchStartPhaseRandAmount(_args.mem[0].f32);}
sF32  YAC_CALL StSample__getTimestretchStartPhaseRandAmount(void *_o         ) {return (sF32)((StSample*)_o)->getTimestretchStartPhaseRandAmount();}
void  YAC_CALL StSample__setTimestretch2DWidth(void *_o, yacmemptr _args     ) {((StSample*)_o)->setTimestretch2DWidth(_args.mem[0].si);}
sSI   YAC_CALL StSample__getTimestretch2DWidth(void *_o                      ) {return (sSI)((StSample*)_o)->getTimestretch2DWidth();}
void  YAC_CALL StSample__setTimestretch2DHeight(void *_o, yacmemptr _args    ) {((StSample*)_o)->setTimestretch2DHeight(_args.mem[0].si);}
sSI   YAC_CALL StSample__getTimestretch2DHeight(void *_o                     ) {return (sSI)((StSample*)_o)->getTimestretch2DHeight();}
void  YAC_CALL StSample___setEnableTimedLoop(void *_o, yacmemptr _args       ) {((StSample*)_o)->_setEnableTimedLoop(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableTimedLoop(void *_o                        ) {return (sSI)((StSample*)_o)->_getEnableTimedLoop();}
void  YAC_CALL StSample___setEnableTimedLoopFade(void *_o, yacmemptr _args   ) {((StSample*)_o)->_setEnableTimedLoopFade(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableTimedLoopFade(void *_o                    ) {return (sSI)((StSample*)_o)->_getEnableTimedLoopFade();}
void  YAC_CALL StSample___setTimedLoopBase(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setTimedLoopBase(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getTimedLoopBase(void *_o                          ) {return (sF32)((StSample*)_o)->_getTimedLoopBase();}
void  YAC_CALL StSample___setEnableOneShotLoopStep(void *_o, yacmemptr _args ) {((StSample*)_o)->_setEnableOneShotLoopStep(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableOneShotLoopStep(void *_o                  ) {return (sSI)((StSample*)_o)->_getEnableOneShotLoopStep();}
void  YAC_CALL StSample___setVolumeRampStepsMillisecIn(void *_o, yacmemptr _args) {((StSample*)_o)->_setVolumeRampStepsMillisecIn(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getVolumeRampStepsMillisecIn(void *_o              ) {return (sF32)((StSample*)_o)->_getVolumeRampStepsMillisecIn();}
void  YAC_CALL StSample___setVolumeRampStepsMillisecOut(void *_o, yacmemptr _args) {((StSample*)_o)->_setVolumeRampStepsMillisecOut(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getVolumeRampStepsMillisecOut(void *_o             ) {return (sF32)((StSample*)_o)->_getVolumeRampStepsMillisecOut();}
void  YAC_CALL StSample___setEnableFreezeSampleOffWhenQuiet(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableFreezeSampleOffWhenQuiet(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableFreezeSampleOffWhenQuiet(void *_o         ) {return (sSI)((StSample*)_o)->_getEnableFreezeSampleOffWhenQuiet();}
void  YAC_CALL StSample___setEnableModShiftOrig(void *_o, yacmemptr _args    ) {((StSample*)_o)->_setEnableModShiftOrig(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableModShiftOrig(void *_o                     ) {return (sSI)((StSample*)_o)->_getEnableModShiftOrig();}
void  YAC_CALL StSample___setEnableSampleOffNoteOn(void *_o, yacmemptr _args ) {((StSample*)_o)->_setEnableSampleOffNoteOn(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableSampleOffNoteOn(void *_o                  ) {return (sSI)((StSample*)_o)->_getEnableSampleOffNoteOn();}
void  YAC_CALL StSample___setEnabled(void *_o, yacmemptr _args               ) {((StSample*)_o)->_setEnabled(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnabled(void *_o                                ) {return (sSI)((StSample*)_o)->_getEnabled();}
void  YAC_CALL StSample___setInterpolType(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setInterpolType(_args.mem[0].si);}
sSI   YAC_CALL StSample___getInterpolType(void *_o                           ) {return (sSI)((StSample*)_o)->_getInterpolType();}
void  YAC_CALL StSample___setInterpolOrder(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setInterpolOrder(_args.mem[0].si);}
sSI   YAC_CALL StSample___getInterpolOrder(void *_o                          ) {return (sSI)((StSample*)_o)->_getInterpolOrder();}
void  YAC_CALL StSample___setBitReductionPreAmp(void *_o, yacmemptr _args    ) {((StSample*)_o)->_setBitReductionPreAmp(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getBitReductionPreAmp(void *_o                     ) {return (sF32)((StSample*)_o)->_getBitReductionPreAmp();}
void  YAC_CALL StSample___setBitReduction(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setBitReduction(_args.mem[0].si);}
sSI   YAC_CALL StSample___getBitReduction(void *_o                           ) {return (sSI)((StSample*)_o)->_getBitReduction();}
void  YAC_CALL StSample___setBitReductionMask(void *_o, yacmemptr _args      ) {((StSample*)_o)->_setBitReductionMask(_args.mem[0].si);}
sSI   YAC_CALL StSample___getBitReductionMask(void *_o                       ) {return (sSI)((StSample*)_o)->_getBitReductionMask();}
void  YAC_CALL StSample___setRateReduction(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setRateReduction(_args.mem[0].si);}
sSI   YAC_CALL StSample___getRateReduction(void *_o                          ) {return (sSI)((StSample*)_o)->_getRateReduction();}
void  YAC_CALL StSample___setRateReductionMask(void *_o, yacmemptr _args     ) {((StSample*)_o)->_setRateReductionMask(_args.mem[0].si);}
sSI   YAC_CALL StSample___getRateReductionMask(void *_o                      ) {return (sSI)((StSample*)_o)->_getRateReductionMask();}
void  YAC_CALL StSample___setEnableFromStart(void *_o, yacmemptr _args       ) {((StSample*)_o)->_setEnableFromStart(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableFromStart(void *_o                        ) {return (sSI)((StSample*)_o)->_getEnableFromStart();}
void* YAC_CALL StSample___getOrCreateWavepathTable(void *_o                  ) {return (void*)((StSample*)_o)->_getOrCreateWavepathTable();}
void  YAC_CALL StSample___setEnableWavepath(void *_o, yacmemptr _args        ) {((StSample*)_o)->_setEnableWavepath(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableWavepath(void *_o                         ) {return (sSI)((StSample*)_o)->_getEnableWavepath();}
void  YAC_CALL StSample___setWavepathIndex(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setWavepathIndex(_args.mem[0].si);}
sSI   YAC_CALL StSample___getWavepathIndex(void *_o                          ) {return (sSI)((StSample*)_o)->_getWavepathIndex();}
void  YAC_CALL StSample___setEnableSkipRange(void *_o, yacmemptr _args       ) {((StSample*)_o)->_setEnableSkipRange(_args.mem[0].si);}
void  YAC_CALL StSample___setEnableAlt(void *_o, yacmemptr _args             ) {((StSample*)_o)->_setEnableAlt(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableAlt(void *_o                              ) {return (sSI)((StSample*)_o)->_getEnableAlt();}
void  YAC_CALL StSample___setEnableFilter(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setEnableFilter(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableFilter(void *_o                           ) {return (sSI)((StSample*)_o)->_getEnableFilter();}
void  YAC_CALL StSample___setFilterType(void *_o, yacmemptr _args            ) {((StSample*)_o)->_setFilterType(_args.mem[0].si);}
sSI   YAC_CALL StSample___getFilterType(void *_o                             ) {return (sSI)((StSample*)_o)->_getFilterType();}
void  YAC_CALL StSample___setFilterCutOff(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setFilterCutOff(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getFilterCutOff(void *_o                           ) {return (sF32)((StSample*)_o)->_getFilterCutOff();}
void  YAC_CALL StSample___setFilterPan(void *_o, yacmemptr _args             ) {((StSample*)_o)->_setFilterPan(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getFilterPan(void *_o                              ) {return (sF32)((StSample*)_o)->_getFilterPan();}
void  YAC_CALL StSample___setFilterOffset(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setFilterOffset(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getFilterOffset(void *_o                           ) {return (sF32)((StSample*)_o)->_getFilterOffset();}
void  YAC_CALL StSample___setFilterEQGain(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setFilterEQGain(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getFilterEQGain(void *_o                           ) {return (sF32)((StSample*)_o)->_getFilterEQGain();}
void  YAC_CALL StSample___setFilterResonance(void *_o, yacmemptr _args       ) {((StSample*)_o)->_setFilterResonance(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getFilterResonance(void *_o                        ) {return (sF32)((StSample*)_o)->_getFilterResonance();}
void  YAC_CALL StSample___setFilterAuxEnvAmount(void *_o, yacmemptr _args    ) {((StSample*)_o)->_setFilterAuxEnvAmount(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getFilterAuxEnvAmount(void *_o                     ) {return (sF32)((StSample*)_o)->_getFilterAuxEnvAmount();}
void  YAC_CALL StSample___setFilterAuxEnvVelocityAmount(void *_o, yacmemptr _args) {((StSample*)_o)->_setFilterAuxEnvVelocityAmount(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getFilterAuxEnvVelocityAmount(void *_o             ) {return (sF32)((StSample*)_o)->_getFilterAuxEnvVelocityAmount();}
void  YAC_CALL StSample___setFilterAuxLFOAmount(void *_o, yacmemptr _args    ) {((StSample*)_o)->_setFilterAuxLFOAmount(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getFilterAuxLFOAmount(void *_o                     ) {return (sF32)((StSample*)_o)->_getFilterAuxLFOAmount();}
void  YAC_CALL StSample___setFilterKeyboardAmount(void *_o, yacmemptr _args  ) {((StSample*)_o)->_setFilterKeyboardAmount(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getFilterKeyboardAmount(void *_o                   ) {return (sF32)((StSample*)_o)->_getFilterKeyboardAmount();}
void  YAC_CALL StSample___setGlideType(void *_o, yacmemptr _args             ) {((StSample*)_o)->_setGlideType(_args.mem[0].si);}
sSI   YAC_CALL StSample___getGlideType(void *_o                              ) {return (sSI)((StSample*)_o)->_getGlideType();}
void  YAC_CALL StSample___setGlideSpeedTimeUp(void *_o, yacmemptr _args      ) {((StSample*)_o)->_setGlideSpeedTimeUp(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getGlideSpeedTimeUp(void *_o                       ) {return (sF32)((StSample*)_o)->_getGlideSpeedTimeUp();}
void  YAC_CALL StSample___setGlideSpeedTimeDown(void *_o, yacmemptr _args    ) {((StSample*)_o)->_setGlideSpeedTimeDown(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getGlideSpeedTimeDown(void *_o                     ) {return (sF32)((StSample*)_o)->_getGlideSpeedTimeDown();}
void  YAC_CALL StSample___setGlideSpeedFreqUp(void *_o, yacmemptr _args      ) {((StSample*)_o)->_setGlideSpeedFreqUp(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getGlideSpeedFreqUp(void *_o                       ) {return (sF32)((StSample*)_o)->_getGlideSpeedFreqUp();}
void  YAC_CALL StSample___setGlideSpeedFreqDown(void *_o, yacmemptr _args    ) {((StSample*)_o)->_setGlideSpeedFreqDown(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getGlideSpeedFreqDown(void *_o                     ) {return (sF32)((StSample*)_o)->_getGlideSpeedFreqDown();}
void  YAC_CALL StSample___setEnableGlideRelease(void *_o, yacmemptr _args    ) {((StSample*)_o)->_setEnableGlideRelease(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableGlideRelease(void *_o                     ) {return (sSI)((StSample*)_o)->_getEnableGlideRelease();}
void  YAC_CALL StSample___setGlideMaxNoteDist(void *_o, yacmemptr _args      ) {((StSample*)_o)->_setGlideMaxNoteDist(_args.mem[0].si);}
sSI   YAC_CALL StSample___getGlideMaxNoteDist(void *_o                       ) {return (sSI)((StSample*)_o)->_getGlideMaxNoteDist();}
void  YAC_CALL StSample___setEnableGlideGlissando(void *_o, yacmemptr _args  ) {((StSample*)_o)->_setEnableGlideGlissando(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableGlideGlissando(void *_o                   ) {return (sSI)((StSample*)_o)->_getEnableGlideGlissando();}
void  YAC_CALL StSample___setGlideMinTime(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setGlideMinTime(_args.mem[0].si);}
sSI   YAC_CALL StSample___getGlideMinTime(void *_o                           ) {return (sSI)((StSample*)_o)->_getGlideMinTime();}
void  YAC_CALL StSample___setGlideMaxTime(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setGlideMaxTime(_args.mem[0].si);}
sSI   YAC_CALL StSample___getGlideMaxTime(void *_o                           ) {return (sSI)((StSample*)_o)->_getGlideMaxTime();}
void  YAC_CALL StSample___setEnableGlideRetrigSample(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableGlideRetrigSample(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableGlideRetrigSample(void *_o                ) {return (sSI)((StSample*)_o)->_getEnableGlideRetrigSample();}
void  YAC_CALL StSample___setEnableGlideRetrigEnvFreq(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableGlideRetrigEnvFreq(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableGlideRetrigEnvFreq(void *_o               ) {return (sSI)((StSample*)_o)->_getEnableGlideRetrigEnvFreq();}
void  YAC_CALL StSample___setEnableGlideRetrigEnvVol(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableGlideRetrigEnvVol(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableGlideRetrigEnvVol(void *_o                ) {return (sSI)((StSample*)_o)->_getEnableGlideRetrigEnvVol();}
void  YAC_CALL StSample___setEnableGlideRetrigEnvPan(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableGlideRetrigEnvPan(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableGlideRetrigEnvPan(void *_o                ) {return (sSI)((StSample*)_o)->_getEnableGlideRetrigEnvPan();}
void  YAC_CALL StSample___setEnableGlideRetrigEnvAux(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableGlideRetrigEnvAux(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableGlideRetrigEnvAux(void *_o                ) {return (sSI)((StSample*)_o)->_getEnableGlideRetrigEnvAux();}
void  YAC_CALL StSample___setEnableGlideRetrigLFOFreq(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableGlideRetrigLFOFreq(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableGlideRetrigLFOFreq(void *_o               ) {return (sSI)((StSample*)_o)->_getEnableGlideRetrigLFOFreq();}
void  YAC_CALL StSample___setEnableGlideRetrigLFOVol(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableGlideRetrigLFOVol(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableGlideRetrigLFOVol(void *_o                ) {return (sSI)((StSample*)_o)->_getEnableGlideRetrigLFOVol();}
void  YAC_CALL StSample___setEnableGlideRetrigLFOPan(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableGlideRetrigLFOPan(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableGlideRetrigLFOPan(void *_o                ) {return (sSI)((StSample*)_o)->_getEnableGlideRetrigLFOPan();}
void  YAC_CALL StSample___setEnableGlideRetrigLFOAux(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableGlideRetrigLFOAux(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableGlideRetrigLFOAux(void *_o                ) {return (sSI)((StSample*)_o)->_getEnableGlideRetrigLFOAux();}
void  YAC_CALL StSample___setEnableGlideRetrigModSeq(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableGlideRetrigModSeq(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getEnableGlideRetrigModSeq(void *_o, yacmemptr _args) {return (sSI)((StSample*)_o)->_getEnableGlideRetrigModSeq(_args.mem[0].si);}
void  YAC_CALL StSample___setMMKeyboardCenter(void *_o, yacmemptr _args      ) {((StSample*)_o)->_setMMKeyboardCenter(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getMMKeyboardCenter(void *_o                       ) {return (sF32)((StSample*)_o)->_getMMKeyboardCenter();}
void  YAC_CALL StSample___setMMKeyboardMin(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setMMKeyboardMin(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getMMKeyboardMin(void *_o                          ) {return (sF32)((StSample*)_o)->_getMMKeyboardMin();}
void  YAC_CALL StSample___setMMKeyboardMax(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setMMKeyboardMax(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getMMKeyboardMax(void *_o                          ) {return (sF32)((StSample*)_o)->_getMMKeyboardMax();}
void  YAC_CALL StSample___setMMEnable(void *_o, yacmemptr _args              ) {((StSample*)_o)->_setMMEnable(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getMMEnable(void *_o, yacmemptr _args              ) {return (sSI)((StSample*)_o)->_getMMEnable(_args.mem[0].si);}
void  YAC_CALL StSample___setMMOp   (void *_o, yacmemptr _args               ) {((StSample*)_o)->_setMMOp(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getMMOp   (void *_o, yacmemptr _args               ) {return (sSI)((StSample*)_o)->_getMMOp(_args.mem[0].si);}
void  YAC_CALL StSample___setMMSlewUp(void *_o, yacmemptr _args              ) {((StSample*)_o)->_setMMSlewUp(_args.mem[0].si, _args.mem[1].f32);}
sF32  YAC_CALL StSample___getMMSlewUp(void *_o, yacmemptr _args              ) {return (sF32)((StSample*)_o)->_getMMSlewUp(_args.mem[0].si);}
void  YAC_CALL StSample___setMMSlewDown(void *_o, yacmemptr _args            ) {((StSample*)_o)->_setMMSlewDown(_args.mem[0].si, _args.mem[1].f32);}
sF32  YAC_CALL StSample___getMMSlewDown(void *_o, yacmemptr _args            ) {return (sF32)((StSample*)_o)->_getMMSlewDown(_args.mem[0].si);}
void  YAC_CALL StSample___setMMSlewReset(void *_o, yacmemptr _args           ) {((StSample*)_o)->_setMMSlewReset(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getMMSlewReset(void *_o, yacmemptr _args           ) {return (sSI)((StSample*)_o)->_getMMSlewReset(_args.mem[0].si);}
void  YAC_CALL StSample___setMMSrc  (void *_o, yacmemptr _args               ) {((StSample*)_o)->_setMMSrc(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getMMSrc  (void *_o, yacmemptr _args               ) {return (sSI)((StSample*)_o)->_getMMSrc(_args.mem[0].si);}
void  YAC_CALL StSample___setMMCurve(void *_o, yacmemptr _args               ) {((StSample*)_o)->_setMMCurve(_args.mem[0].si, _args.mem[1].f32);}
sF32  YAC_CALL StSample___getMMCurve(void *_o, yacmemptr _args               ) {return (sF32)((StSample*)_o)->_getMMCurve(_args.mem[0].si);}
void  YAC_CALL StSample___setMMDst  (void *_o, yacmemptr _args               ) {((StSample*)_o)->_setMMDst(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getMMDst  (void *_o, yacmemptr _args               ) {return (sSI)((StSample*)_o)->_getMMDst(_args.mem[0].si);}
void  YAC_CALL StSample___setMMAmt  (void *_o, yacmemptr _args               ) {((StSample*)_o)->_setMMAmt(_args.mem[0].si, _args.mem[1].f32);}
sF32  YAC_CALL StSample___getMMAmt  (void *_o, yacmemptr _args               ) {return (sF32)((StSample*)_o)->_getMMAmt(_args.mem[0].si);}
void  YAC_CALL StSample___setMMSignalTap(void *_o, yacmemptr _args           ) {((StSample*)_o)->_setMMSignalTap(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getMMSignalTap(void *_o, yacmemptr _args           ) {return (sSI)((StSample*)_o)->_getMMSignalTap(_args.mem[0].si);}
void  YAC_CALL StSample___setLiveRecEnable(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setLiveRecEnable(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecEnable(void *_o                          ) {return (sSI)((StSample*)_o)->_getLiveRecEnable();}
void  YAC_CALL StSample___setLiveRecPause(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setLiveRecPause(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecPause(void *_o                           ) {return (sSI)((StSample*)_o)->_getLiveRecPause();}
void  YAC_CALL StSample___setLiveRecMonitor(void *_o, yacmemptr _args        ) {((StSample*)_o)->_setLiveRecMonitor(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecMonitor(void *_o                         ) {return (sSI)((StSample*)_o)->_getLiveRecMonitor();}
void  YAC_CALL StSample___setLiveRecInput(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setLiveRecInput(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecInput(void *_o                           ) {return (sSI)((StSample*)_o)->_getLiveRecInput();}
void  YAC_CALL StSample___setLiveRecStereo(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setLiveRecStereo(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecStereo(void *_o                          ) {return (sSI)((StSample*)_o)->_getLiveRecStereo();}
void  YAC_CALL StSample___setLiveRecInputPan(void *_o, yacmemptr _args       ) {((StSample*)_o)->_setLiveRecInputPan(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getLiveRecInputPan(void *_o                        ) {return (sF32)((StSample*)_o)->_getLiveRecInputPan();}
void  YAC_CALL StSample___setLiveRecLoopIdx(void *_o, yacmemptr _args        ) {((StSample*)_o)->_setLiveRecLoopIdx(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecLoopIdx(void *_o                         ) {return (sSI)((StSample*)_o)->_getLiveRecLoopIdx();}
void  YAC_CALL StSample___setLiveRecCopy(void *_o, yacmemptr _args           ) {((StSample*)_o)->_setLiveRecCopy(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecCopy(void *_o                            ) {return (sSI)((StSample*)_o)->_getLiveRecCopy();}
void  YAC_CALL StSample___setLiveRecClear(void *_o, yacmemptr _args          ) {((StSample*)_o)->_setLiveRecClear(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecClear(void *_o                           ) {return (sSI)((StSample*)_o)->_getLiveRecClear();}
void  YAC_CALL StSample___setLiveRecDoubleBufferMode(void *_o, yacmemptr _args) {((StSample*)_o)->_setLiveRecDoubleBufferMode(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecDoubleBufferMode(void *_o                ) {return (sSI)((StSample*)_o)->_getLiveRecDoubleBufferMode();}
void  YAC_CALL StSample___setLiveRecDoubleBufferXFade(void *_o, yacmemptr _args) {((StSample*)_o)->_setLiveRecDoubleBufferXFade(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecDoubleBufferXFade(void *_o               ) {return (sSI)((StSample*)_o)->_getLiveRecDoubleBufferXFade();}
void  YAC_CALL StSample___setLiveRecOscMode(void *_o, yacmemptr _args        ) {((StSample*)_o)->_setLiveRecOscMode(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecOscMode(void *_o                         ) {return (sSI)((StSample*)_o)->_getLiveRecOscMode();}
void  YAC_CALL StSample___setLiveRecOscSingleCycle(void *_o, yacmemptr _args ) {((StSample*)_o)->_setLiveRecOscSingleCycle(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecOscSingleCycle(void *_o                  ) {return (sSI)((StSample*)_o)->_getLiveRecOscSingleCycle();}
void  YAC_CALL StSample___setLiveRecOscTune(void *_o, yacmemptr _args        ) {((StSample*)_o)->_setLiveRecOscTune(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getLiveRecOscTune(void *_o                         ) {return (sF32)((StSample*)_o)->_getLiveRecOscTune();}
void  YAC_CALL StSample___setLiveRecOscFadeAmt(void *_o, yacmemptr _args     ) {((StSample*)_o)->_setLiveRecOscFadeAmt(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getLiveRecOscFadeAmt(void *_o                      ) {return (sF32)((StSample*)_o)->_getLiveRecOscFadeAmt();}
void  YAC_CALL StSample___setLiveRecSkipInputNumFrames(void *_o, yacmemptr _args) {((StSample*)_o)->_setLiveRecSkipInputNumFrames(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecSkipInputNumFrames(void *_o              ) {return (sSI)((StSample*)_o)->_getLiveRecSkipInputNumFrames();}
void  YAC_CALL StSample___setLiveRecOscPreFilter(void *_o, yacmemptr _args   ) {((StSample*)_o)->_setLiveRecOscPreFilter(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getLiveRecOscPreFilter(void *_o                    ) {return (sF32)((StSample*)_o)->_getLiveRecOscPreFilter();}
void  YAC_CALL StSample___setLiveRecOscResample(void *_o, yacmemptr _args    ) {((StSample*)_o)->_setLiveRecOscResample(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecOscResample(void *_o                     ) {return (sSI)((StSample*)_o)->_getLiveRecOscResample();}
void  YAC_CALL StSample___setLiveRecOscSustain(void *_o, yacmemptr _args     ) {((StSample*)_o)->_setLiveRecOscSustain(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecOscSustain(void *_o                      ) {return (sSI)((StSample*)_o)->_getLiveRecOscSustain();}
void  YAC_CALL StSample___setLiveRecMode(void *_o, yacmemptr _args           ) {((StSample*)_o)->_setLiveRecMode(_args.mem[0].si);}
sSI   YAC_CALL StSample___getLiveRecMode(void *_o                            ) {return (sSI)((StSample*)_o)->_getLiveRecMode();}
void  YAC_CALL StSample___setLiveRecThresholdOn(void *_o, yacmemptr _args    ) {((StSample*)_o)->_setLiveRecThresholdOn(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getLiveRecThresholdOn(void *_o                     ) {return (sF32)((StSample*)_o)->_getLiveRecThresholdOn();}
void  YAC_CALL StSample___setLiveRecThresholdOff(void *_o, yacmemptr _args   ) {((StSample*)_o)->_setLiveRecThresholdOff(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getLiveRecThresholdOff(void *_o                    ) {return (sF32)((StSample*)_o)->_getLiveRecThresholdOff();}
void  YAC_CALL StSample___startLiveRecording(void *_o                        ) {((StSample*)_o)->_startLiveRecording();}
void  YAC_CALL StSample___stopLiveRecording(void *_o                         ) {((StSample*)_o)->_stopLiveRecording();}
void  YAC_CALL StSample___setEnableSumInput(void *_o, yacmemptr _args        ) {((StSample*)_o)->_setEnableSumInput(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableSumInput(void *_o                         ) {return (sSI)((StSample*)_o)->_getEnableSumInput();}
void  YAC_CALL StSample___setSumInputXFade(void *_o, yacmemptr _args         ) {((StSample*)_o)->_setSumInputXFade(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getSumInputXFade(void *_o                          ) {return (sF32)((StSample*)_o)->_getSumInputXFade();}
sSI   YAC_CALL StSample__hasPlugins (void *_o                                ) {return (sSI)((StSample*)_o)->hasPlugins();}
sSI   YAC_CALL StSample__hasPluginsEnabled(void *_o                          ) {return (sSI)((StSample*)_o)->hasPluginsEnabled();}
sSI   YAC_CALL StSample__areAllPluginSlotsUsed(void *_o                      ) {return (sSI)((StSample*)_o)->areAllPluginSlotsUsed();}
void  YAC_CALL StSample__freePlugins(void *_o                                ) {((StSample*)_o)->freePlugins();}
void  YAC_CALL StSample___setVoicePluginShared(void *_o, yacmemptr _args     ) {((StSample*)_o)->_setVoicePluginShared(_args.mem[0].si, _args.mem[1].o);}
void* YAC_CALL StSample___getVoicePluginShared(void *_o, yacmemptr _args     ) {return (void*)((StSample*)_o)->_getVoicePluginShared(_args.mem[0].si);}
void  YAC_CALL StSample___setVoicePluginSharedMissing(void *_o, yacmemptr _args) {((StSample*)_o)->_setVoicePluginSharedMissing(_args.mem[0].si, _args.mem[1].o);}
void* YAC_CALL StSample___getVoicePluginSharedMissing(void *_o, yacmemptr _args) {return (void*)((StSample*)_o)->_getVoicePluginSharedMissing(_args.mem[0].si);}
void  YAC_CALL StSample___setEnableVoicePluginPreFilter(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableVoicePluginPreFilter(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getEnableVoicePluginPreFilter(void *_o, yacmemptr _args) {return (sSI)((StSample*)_o)->_getEnableVoicePluginPreFilter(_args.mem[0].si);}
void  YAC_CALL StSample___setVoicePluginAlg(void *_o, yacmemptr _args        ) {((StSample*)_o)->_setVoicePluginAlg(_args.mem[0].si);}
sSI   YAC_CALL StSample___getVoicePluginAlg(void *_o                         ) {return (sSI)((StSample*)_o)->_getVoicePluginAlg();}
void  YAC_CALL StSample___setVoicePluginAlgFilterPos(void *_o, yacmemptr _args) {((StSample*)_o)->_setVoicePluginAlgFilterPos(_args.mem[0].si);}
sSI   YAC_CALL StSample___getVoicePluginAlgFilterPos(void *_o                ) {return (sSI)((StSample*)_o)->_getVoicePluginAlgFilterPos();}
void  YAC_CALL StSample___setVoicePluginAlgOuter(void *_o, yacmemptr _args   ) {((StSample*)_o)->_setVoicePluginAlgOuter(_args.mem[0].si);}
sSI   YAC_CALL StSample___getVoicePluginAlgOuter(void *_o                    ) {return (sSI)((StSample*)_o)->_getVoicePluginAlgOuter();}
void  YAC_CALL StSample___setEnableVoicePlugin(void *_o, yacmemptr _args     ) {((StSample*)_o)->_setEnableVoicePlugin(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getEnableVoicePlugin(void *_o, yacmemptr _args     ) {return (sSI)((StSample*)_o)->_getEnableVoicePlugin(_args.mem[0].si);}
void  YAC_CALL StSample___setVoicePluginLevel(void *_o, yacmemptr _args      ) {((StSample*)_o)->_setVoicePluginLevel(_args.mem[0].si, _args.mem[1].f32);}
sF32  YAC_CALL StSample___getVoicePluginLevel(void *_o, yacmemptr _args      ) {return (sF32)((StSample*)_o)->_getVoicePluginLevel(_args.mem[0].si);}
void  YAC_CALL StSample___setVoicePluginDst(void *_o, yacmemptr _args        ) {((StSample*)_o)->_setVoicePluginDst(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getVoicePluginDst(void *_o, yacmemptr _args        ) {return (sSI)((StSample*)_o)->_getVoicePluginDst(_args.mem[0].si);}
void  YAC_CALL StSample___setVoicePluginPan(void *_o, yacmemptr _args        ) {((StSample*)_o)->_setVoicePluginPan(_args.mem[0].si, _args.mem[1].f32);}
sF32  YAC_CALL StSample___getVoicePluginPan(void *_o, yacmemptr _args        ) {return (sF32)((StSample*)_o)->_getVoicePluginPan(_args.mem[0].si);}
void  YAC_CALL StSample___setEnableVoicePluginInvertPhase(void *_o, yacmemptr _args) {((StSample*)_o)->_setEnableVoicePluginInvertPhase(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getEnableVoicePluginInvertPhase(void *_o, yacmemptr _args) {return (sSI)((StSample*)_o)->_getEnableVoicePluginInvertPhase(_args.mem[0].si);}
void  YAC_CALL StSample__swapPluginSlots(void *_o, yacmemptr _args           ) {((StSample*)_o)->swapPluginSlots(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL StSample__reorderPluginSlots(void *_o, yacmemptr _args        ) {((StSample*)_o)->reorderPluginSlots(_args.mem[0].o);}
void  YAC_CALL StSample___uiSetLastPluginRowIdx(void *_o, yacmemptr _args    ) {((StSample*)_o)->_uiSetLastPluginRowIdx(_args.mem[0].si);}
sSI   YAC_CALL StSample___uiGetLastPluginRowIdx(void *_o                     ) {return (sSI)((StSample*)_o)->_uiGetLastPluginRowIdx();}
void  YAC_CALL StSample___setEnableFX(void *_o, yacmemptr _args              ) {((StSample*)_o)->_setEnableFX(_args.mem[0].si);}
sSI   YAC_CALL StSample___getEnableFX(void *_o                               ) {return (sSI)((StSample*)_o)->_getEnableFX();}
void  YAC_CALL StSample___setVoiceBus(void *_o, yacmemptr _args              ) {((StSample*)_o)->_setVoiceBus(_args.mem[0].si);}
sSI   YAC_CALL StSample___getVoiceBus(void *_o                               ) {return (sSI)((StSample*)_o)->_getVoiceBus();}
sSI   YAC_CALL StSample__uiCheckResetRedrawFlag(void *_o                     ) {return (sSI)((StSample*)_o)->uiCheckResetRedrawFlag();}
void  YAC_CALL StSample__setUiSVOffset(void *_o, yacmemptr _args             ) {((StSample*)_o)->setUiSVOffset(_args.mem[0].f32);}
sF32  YAC_CALL StSample__getUiSVOffset(void *_o                              ) {return (sF32)((StSample*)_o)->getUiSVOffset();}
void  YAC_CALL StSample__setUiSVZoom(void *_o, yacmemptr _args               ) {((StSample*)_o)->setUiSVZoom(_args.mem[0].o);}
void  YAC_CALL StSample__getUiSVZoom(void *_o, YAC_Value *_r                 ) {((StSample*)_o)->getUiSVZoom(_r);}
void  YAC_CALL StSample__setUiSVZoomYIdx(void *_o, yacmemptr _args           ) {((StSample*)_o)->setUiSVZoomYIdx(_args.mem[0].si);}
sSI   YAC_CALL StSample__getUiSVZoomYIdx(void *_o                            ) {return (sSI)((StSample*)_o)->getUiSVZoomYIdx();}
void  YAC_CALL StSample__setUiEnableAuxToWav(void *_o, yacmemptr _args       ) {((StSample*)_o)->setUiEnableAuxToWav(_args.mem[0].si);}
sSI   YAC_CALL StSample__getUiEnableAuxToWav(void *_o                        ) {return (sSI)((StSample*)_o)->getUiEnableAuxToWav();}
void  YAC_CALL StSample__setVoiceCalibrationValue(void *_o, yacmemptr _args  ) {((StSample*)_o)->setVoiceCalibrationValue(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
sF32  YAC_CALL StSample__getVoiceCalibrationValue(void *_o, yacmemptr _args  ) {return (sF32)((StSample*)_o)->getVoiceCalibrationValue(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL StSample__setVoiceCalibrationModulo(void *_o, yacmemptr _args ) {((StSample*)_o)->setVoiceCalibrationModulo(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample__getVoiceCalibrationModulo(void *_o, yacmemptr _args ) {return (sSI)((StSample*)_o)->getVoiceCalibrationModulo(_args.mem[0].si);}
void  YAC_CALL StSample__setVoiceCalibrationAmount(void *_o, yacmemptr _args ) {((StSample*)_o)->setVoiceCalibrationAmount(_args.mem[0].si, _args.mem[1].f32);}
sF32  YAC_CALL StSample__getVoiceCalibrationAmount(void *_o, yacmemptr _args ) {return (sF32)((StSample*)_o)->getVoiceCalibrationAmount(_args.mem[0].si);}
void  YAC_CALL StSample__setVoiceCalibrationEnable(void *_o, yacmemptr _args ) {((StSample*)_o)->setVoiceCalibrationEnable(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample__getVoiceCalibrationEnable(void *_o, yacmemptr _args ) {return (sSI)((StSample*)_o)->getVoiceCalibrationEnable(_args.mem[0].si);}
void  YAC_CALL StSample__setTimestretchAdditiveXFade(void *_o, yacmemptr _args) {((StSample*)_o)->setTimestretchAdditiveXFade(_args.mem[0].f32);}
sF32  YAC_CALL StSample__getTimestretchAdditiveXFade(void *_o                ) {return (sF32)((StSample*)_o)->getTimestretchAdditiveXFade();}
void  YAC_CALL StSample__setAdditiveCfgValid(void *_o, yacmemptr _args       ) {((StSample*)_o)->setAdditiveCfgValid(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample__getAdditiveCfgValid(void *_o, yacmemptr _args       ) {return (sSI)((StSample*)_o)->getAdditiveCfgValid(_args.mem[0].si);}
void  YAC_CALL StSample__setAdditiveEditCfg(void *_o, yacmemptr _args        ) {((StSample*)_o)->setAdditiveEditCfg(_args.mem[0].f32);}
sF32  YAC_CALL StSample__getAdditiveEditCfg(void *_o                         ) {return (sF32)((StSample*)_o)->getAdditiveEditCfg();}
void  YAC_CALL StSample__setEnableForceAdditiveEditCfg(void *_o, yacmemptr _args) {((StSample*)_o)->setEnableForceAdditiveEditCfg(_args.mem[0].si);}
sSI   YAC_CALL StSample__getEnableForceAdditiveEditCfg(void *_o              ) {return (sSI)((StSample*)_o)->getEnableForceAdditiveEditCfg();}
void  YAC_CALL StSample__setAdditiveNormalize(void *_o, yacmemptr _args      ) {((StSample*)_o)->setAdditiveNormalize(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample__getAdditiveNormalize(void *_o, yacmemptr _args      ) {return (sSI)((StSample*)_o)->getAdditiveNormalize(_args.mem[0].si);}
void  YAC_CALL StSample__setAdditiveLevel(void *_o, yacmemptr _args          ) {((StSample*)_o)->setAdditiveLevel(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
sF32  YAC_CALL StSample__getAdditiveLevel(void *_o, yacmemptr _args          ) {return (sF32)((StSample*)_o)->getAdditiveLevel(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL StSample__setAdditivePhase(void *_o, yacmemptr _args          ) {((StSample*)_o)->setAdditivePhase(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
sF32  YAC_CALL StSample__getAdditivePhase(void *_o, yacmemptr _args          ) {return (sF32)((StSample*)_o)->getAdditivePhase(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL StSample__setAdditiveExpA(void *_o, yacmemptr _args           ) {((StSample*)_o)->setAdditiveExpA(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
sF32  YAC_CALL StSample__getAdditiveExpA(void *_o, yacmemptr _args           ) {return (sF32)((StSample*)_o)->getAdditiveExpA(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL StSample__setAdditiveFilter(void *_o, yacmemptr _args         ) {((StSample*)_o)->setAdditiveFilter(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
sF32  YAC_CALL StSample__getAdditiveFilter(void *_o, yacmemptr _args         ) {return (sF32)((StSample*)_o)->getAdditiveFilter(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL StSample__setAdditiveExpL(void *_o, yacmemptr _args           ) {((StSample*)_o)->setAdditiveExpL(_args.mem[0].si, _args.mem[1].si, _args.mem[2].f32);}
sF32  YAC_CALL StSample__getAdditiveExpL(void *_o, yacmemptr _args           ) {return (sF32)((StSample*)_o)->getAdditiveExpL(_args.mem[0].si, _args.mem[1].si);}
void  YAC_CALL StSample___setAdditiveBitReductionPreAmp(void *_o, yacmemptr _args) {((StSample*)_o)->_setAdditiveBitReductionPreAmp(_args.mem[0].si, _args.mem[1].f32);}
sF32  YAC_CALL StSample___getAdditiveBitReductionPreAmp(void *_o, yacmemptr _args) {return (sF32)((StSample*)_o)->_getAdditiveBitReductionPreAmp(_args.mem[0].si);}
void  YAC_CALL StSample___setAdditiveBitReduction(void *_o, yacmemptr _args  ) {((StSample*)_o)->_setAdditiveBitReduction(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getAdditiveBitReduction(void *_o, yacmemptr _args  ) {return (sSI)((StSample*)_o)->_getAdditiveBitReduction(_args.mem[0].si);}
void  YAC_CALL StSample___setAdditiveBitReductionMask(void *_o, yacmemptr _args) {((StSample*)_o)->_setAdditiveBitReductionMask(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getAdditiveBitReductionMask(void *_o, yacmemptr _args) {return (sSI)((StSample*)_o)->_getAdditiveBitReductionMask(_args.mem[0].si);}
void  YAC_CALL StSample___setAdditiveRateReduction(void *_o, yacmemptr _args ) {((StSample*)_o)->_setAdditiveRateReduction(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getAdditiveRateReduction(void *_o, yacmemptr _args ) {return (sSI)((StSample*)_o)->_getAdditiveRateReduction(_args.mem[0].si);}
void  YAC_CALL StSample___setAdditiveRateReductionMask(void *_o, yacmemptr _args) {((StSample*)_o)->_setAdditiveRateReductionMask(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StSample___getAdditiveRateReductionMask(void *_o, yacmemptr _args) {return (sSI)((StSample*)_o)->_getAdditiveRateReductionMask(_args.mem[0].si);}
void  YAC_CALL StSample___setAdditiveStereoSpread(void *_o, yacmemptr _args  ) {((StSample*)_o)->_setAdditiveStereoSpread(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getAdditiveStereoSpread(void *_o                   ) {return (sF32)((StSample*)_o)->_getAdditiveStereoSpread();}
void  YAC_CALL StSample__recalcAdditiveTbl(void *_o, yacmemptr _args         ) {((StSample*)_o)->recalcAdditiveTbl(_args.mem[0].si);}
void  YAC_CALL StSample__exportAdditiveWavetable(void *_o, yacmemptr _args   ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_FLOATARRAY)){ ((StSample*)_o)->exportAdditiveWavetable((YAC_FloatArray*)_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].f32, _args.mem[4].si);}}
void  YAC_CALL StSample___setAiNumPoles(void *_o, yacmemptr _args            ) {((StSample*)_o)->_setAiNumPoles(_args.mem[0].si);}
sSI   YAC_CALL StSample___getAiNumPoles(void *_o                             ) {return (sSI)((StSample*)_o)->_getAiNumPoles();}
void  YAC_CALL StSample___setAiQ    (void *_o, yacmemptr _args               ) {((StSample*)_o)->_setAiQ(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getAiQ    (void *_o                                ) {return (sF32)((StSample*)_o)->_getAiQ();}
void  YAC_CALL StSample___setAiExpUp(void *_o, yacmemptr _args               ) {((StSample*)_o)->_setAiExpUp(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getAiExpUp(void *_o                                ) {return (sF32)((StSample*)_o)->_getAiExpUp();}
void  YAC_CALL StSample___setAiExpDown(void *_o, yacmemptr _args             ) {((StSample*)_o)->_setAiExpDown(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getAiExpDown(void *_o                              ) {return (sF32)((StSample*)_o)->_getAiExpDown();}
void  YAC_CALL StSample___setAiLinOct(void *_o, yacmemptr _args              ) {((StSample*)_o)->_setAiLinOct(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getAiLinOct(void *_o                               ) {return (sF32)((StSample*)_o)->_getAiLinOct();}
void  YAC_CALL StSample___setAiLinMax(void *_o, yacmemptr _args              ) {((StSample*)_o)->_setAiLinMax(_args.mem[0].f32);}
sF32  YAC_CALL StSample___getAiLinMax(void *_o                               ) {return (sF32)((StSample*)_o)->_getAiLinMax();}
void  YAC_CALL StSample___setStartEndFadeNumFrames(void *_o, yacmemptr _args ) {((StSample*)_o)->_setStartEndFadeNumFrames(_args.mem[0].si);}
sSI   YAC_CALL StSample___getStartEndFadeNumFrames(void *_o                  ) {return (sSI)((StSample*)_o)->_getStartEndFadeNumFrames();}
void  YAC_CALL StSample___uiSetEnableAutoSelect(void *_o, yacmemptr _args    ) {((StSample*)_o)->_uiSetEnableAutoSelect(_args.mem[0].si);}
sSI   YAC_CALL StSample___uiGetEnableAutoSelect(void *_o                     ) {return (sSI)((StSample*)_o)->_uiGetEnableAutoSelect();}
sSI   YAC_CALL StSample___setTuningTable(void *_o, yacmemptr _args           ) {return (sSI)((StSample*)_o)->_setTuningTable(_args.mem[0].si, _args.mem[1].o);}
void  YAC_CALL StSample___getTuningTable(void *_o, yacmemptr _args, YAC_Value *_r) {((StSample*)_o)->_getTuningTable(_args.mem[0].si, _r);}
void  YAC_CALL StSample___setDefaultTuningTableIdx(void *_o, yacmemptr _args ) {((StSample*)_o)->_setDefaultTuningTableIdx(_args.mem[0].si);}
sSI   YAC_CALL StSample___getDefaultTuningTableIdx(void *_o                  ) {return (sSI)((StSample*)_o)->_getDefaultTuningTableIdx();}
void  YAC_CALL StSample___setForcedTuningTableIdx(void *_o, yacmemptr _args  ) {((StSample*)_o)->_setForcedTuningTableIdx(_args.mem[0].si);}
sSI   YAC_CALL StSample___getForcedTuningTableIdx(void *_o                   ) {return (sSI)((StSample*)_o)->_getForcedTuningTableIdx();}
void  YAC_CALL StSample___setTuningTableMetaData(void *_o, yacmemptr _args   ) {((StSample*)_o)->_setTuningTableMetaData(_args.mem[0].si, _args.mem[1].o);}
void* YAC_CALL StSample___getTuningTableMetaData(void *_o, yacmemptr _args   ) {return (void*)((StSample*)_o)->_getTuningTableMetaData(_args.mem[0].si);}
void  YAC_CALL StSample___freeTuningTables(void *_o                          ) {((StSample*)_o)->_freeTuningTables();}
void  YAC_CALL StSample___freeTuningTablesMetaData(void *_o                  ) {((StSample*)_o)->_freeTuningTablesMetaData();}
void  YAC_CALL StSample___mmVarSetEnable(void *_o, yacmemptr _args           ) {((StSample*)_o)->_mmVarSetEnable(_args.mem[0].si);}
sSI   YAC_CALL StSample___mmVarGetEnable(void *_o                            ) {return (sSI)((StSample*)_o)->_mmVarGetEnable();}
void  YAC_CALL StSample___mmVarSetNum(void *_o, yacmemptr _args              ) {((StSample*)_o)->_mmVarSetNum(_args.mem[0].si);}
sSI   YAC_CALL StSample___mmVarGetNum(void *_o                               ) {return (sSI)((StSample*)_o)->_mmVarGetNum();}
void  YAC_CALL StSample___mmVarSetEnableSmooth(void *_o, yacmemptr _args     ) {((StSample*)_o)->_mmVarSetEnableSmooth(_args.mem[0].si);}
sSI   YAC_CALL StSample___mmVarGetEnableSmooth(void *_o                      ) {return (sSI)((StSample*)_o)->_mmVarGetEnableSmooth();}
void  YAC_CALL StSample___mmVarSetEditIdx(void *_o, yacmemptr _args          ) {((StSample*)_o)->_mmVarSetEditIdx(_args.mem[0].si);}
sSI   YAC_CALL StSample___mmVarGetEditIdx(void *_o                           ) {return (sSI)((StSample*)_o)->_mmVarGetEditIdx();}
void  YAC_CALL StSample___mmVarSetEnableForceEditIdx(void *_o, yacmemptr _args) {((StSample*)_o)->_mmVarSetEnableForceEditIdx(_args.mem[0].si);}
sSI   YAC_CALL StSample___mmVarGetEnableForceEditIdx(void *_o                ) {return (sSI)((StSample*)_o)->_mmVarGetEnableForceEditIdx();}
void  YAC_CALL StSample___mmVarGetData(void *_o, YAC_Value *_r               ) {((StSample*)_o)->_mmVarGetData(_r);}
#endif // YAC_NO_HOST
