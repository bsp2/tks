// ---- ying_tksampler_StModSeq.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 23:42:34)

#ifndef YAC_NO_HOST
void  YAC_CALL StModSeq__reset      (void *                        );
void  YAC_CALL StModSeq___setPlayMode(void *, yacmemptr            );
sSI   YAC_CALL StModSeq___getPlayMode(void *                       );
void  YAC_CALL StModSeq___setStepMode(void *, yacmemptr            );
sSI   YAC_CALL StModSeq___getStepMode(void *                       );
void  YAC_CALL StModSeq___setNumSteps(void *, yacmemptr            );
sSI   YAC_CALL StModSeq___getNumSteps(void *                       );
void  YAC_CALL StModSeq___setRepeatOffset(void *, yacmemptr        );
sSI   YAC_CALL StModSeq___getRepeatOffset(void *                   );
void  YAC_CALL StModSeq___setStepValue(void *, yacmemptr           );
sF32  YAC_CALL StModSeq___getStepValue(void *, yacmemptr           );
sF32  YAC_CALL StModSeq___getEffectiveStepValue(void *, yacmemptr  );
void  YAC_CALL StModSeq___setStepDuration(void *, yacmemptr        );
sSI   YAC_CALL StModSeq___getStepDuration(void *, yacmemptr        );
void  YAC_CALL StModSeq___setSpeed  (void *, yacmemptr             );
sF32  YAC_CALL StModSeq___getSpeed  (void *                        );
void  YAC_CALL StModSeq___setEnableTempoSync(void *, yacmemptr     );
sSI   YAC_CALL StModSeq___getEnableTempoSync(void *                );
void  YAC_CALL StModSeq___setValueScl(void *, yacmemptr            );
sF32  YAC_CALL StModSeq___getValueScl(void *                       );
void  YAC_CALL StModSeq___setValueOff(void *, yacmemptr            );
sF32  YAC_CALL StModSeq___getValueOff(void *                       );
void  YAC_CALL StModSeq___setSlewAmt(void *, yacmemptr             );
sF32  YAC_CALL StModSeq___getSlewAmt(void *                        );
void  YAC_CALL StModSeq___setEnableOneShot(void *, yacmemptr       );
sSI   YAC_CALL StModSeq___getEnableOneShot(void *                  );
void  YAC_CALL StModSeq___setEnableGlobal(void *, yacmemptr        );
sSI   YAC_CALL StModSeq___getEnableGlobal(void *                   );
void  YAC_CALL StModSeq___setEnableReset(void *, yacmemptr         );
sSI   YAC_CALL StModSeq___getEnableReset(void *                    );
void  YAC_CALL StModSeq___setEnablePulse(void *, yacmemptr         );
sSI   YAC_CALL StModSeq___getEnablePulse(void *                    );
sSI   YAC_CALL StModSeq___uiGetLastPlayedIdx(void *                );
#endif // YAC_NO_HOST

// ------------------ YAC class "StModSeq" reflection map (implementation) ------------------
sUI          YAC_VCALL StModSeq::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL StModSeq::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL StModSeq::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL StModSeq::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL StModSeq::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL StModSeq::yacMethodGetNum                  (void) {return 34;}
const char **YAC_VCALL StModSeq::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "reset", "setPlayMode", "getPlayMode", "setStepMode", "getStepMode", "setNumSteps", "getNumSteps", "setRepeatOffset", "getRepeatOffset", "setStepValue", "getStepValue", "getEffectiveStepValue", "setStepDuration", "getStepDuration", "setSpeed", "getSpeed", "setEnableTempoSync", "getEnableTempoSync", "setValueScl", "getValueScl", "setValueOff", "getValueOff", "setSlewAmt", "getSlewAmt", "setEnableOneShot", "getEnableOneShot", "setEnableGlobal", "getEnableGlobal", "setEnableReset", "getEnableReset", "setEnablePulse", "getEnablePulse", "uiGetLastPlayedIdx"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StModSeq::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 1, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL StModSeq::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={1,};static const sUI rt3[]={0,};static const sUI rt4[]={1,};static const sUI rt5[]={0,};static const sUI rt6[]={1,};static const sUI rt7[]={0,};static const sUI rt8[]={1,};static const sUI rt9[]={0,};static const sUI rt10[]={1, 2,};static const sUI rt11[]={1,};static const sUI rt12[]={1,};static const sUI rt13[]={1, 1,};static const sUI rt14[]={1,};static const sUI rt15[]={2,};static const sUI rt16[]={0,};static const sUI rt17[]={1,};static const sUI rt18[]={0,};static const sUI rt19[]={2,};static const sUI rt20[]={0,};static const sUI rt21[]={2,};static const sUI rt22[]={0,};static const sUI rt23[]={2,};static const sUI rt24[]={0,};static const sUI rt25[]={1,};static const sUI rt26[]={0,};static const sUI rt27[]={1,};static const sUI rt28[]={0,};static const sUI rt29[]={1,};static const sUI rt30[]={0,};static const sUI rt31[]={1,};static const sUI rt32[]={0,};static const sUI rt33[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL StModSeq::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0, (const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0, (const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StModSeq::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL StModSeq::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL StModSeq::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)StModSeq__reset, (void*)StModSeq___setPlayMode, (void*)StModSeq___getPlayMode, (void*)StModSeq___setStepMode, (void*)StModSeq___getStepMode, (void*)StModSeq___setNumSteps, (void*)StModSeq___getNumSteps, (void*)StModSeq___setRepeatOffset, (void*)StModSeq___getRepeatOffset, (void*)StModSeq___setStepValue, (void*)StModSeq___getStepValue, (void*)StModSeq___getEffectiveStepValue, (void*)StModSeq___setStepDuration, (void*)StModSeq___getStepDuration, (void*)StModSeq___setSpeed, (void*)StModSeq___getSpeed, (void*)StModSeq___setEnableTempoSync, (void*)StModSeq___getEnableTempoSync, (void*)StModSeq___setValueScl, (void*)StModSeq___getValueScl, (void*)StModSeq___setValueOff, (void*)StModSeq___getValueOff, (void*)StModSeq___setSlewAmt, (void*)StModSeq___getSlewAmt, (void*)StModSeq___setEnableOneShot, (void*)StModSeq___getEnableOneShot, (void*)StModSeq___setEnableGlobal, (void*)StModSeq___getEnableGlobal, (void*)StModSeq___setEnableReset, (void*)StModSeq___getEnableReset, (void*)StModSeq___setEnablePulse, (void*)StModSeq___getEnablePulse, (void*)StModSeq___uiGetLastPlayedIdx}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL StModSeq::yacConstantGetNum                (void) {return 17;}
const char **YAC_VCALL StModSeq::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"STMODSEQ_MAX_STEPS", "STMODSEQ_PLAYMODE_FWD", "STMODSEQ_PLAYMODE_BWD", "STMODSEQ_PLAYMODE_PINGPONG", "STMODSEQ_PLAYMODE_PINGPONG_NR", "STMODSEQ_PLAYMODE_RANDOM", "STMODSEQ_PLAYMODE_RANDOM_ND", "STMODSEQ_PLAYMODE_RANDOM_NR", "STMODSEQ_STEPMODE_TIME", "STMODSEQ_STEPMODE_NOTEON", "STMODSEQ_STEPMODE_NOTEOFF", "STMODSEQ_STEPMODE_MOD_RISE", "STMODSEQ_STEPMODE_MOD_FALL", "STMODSEQ_STEPMODE_MOD_EDGE", "STMODSEQ_STEPMODE_MOD_XCROSS", "STMODSEQ_STEPMODE_START_MOD_NZ", "STMODSEQ_STEPMODE_RESTART_MOD_NZ"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StModSeq::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL StModSeq::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[17]; m.ui=r; m.si[0]=(sSI)16;m.si[1]=(sSI)0;m.si[2]=(sSI)1;m.si[3]=(sSI)2;m.si[4]=(sSI)3;m.si[5]=(sSI)4;m.si[6]=(sSI)5;m.si[7]=(sSI)6;m.si[8]=(sSI)0;m.si[9]=(sSI)1;m.si[10]=(sSI)2;m.si[11]=(sSI)3;m.si[12]=(sSI)4;m.si[13]=(sSI)5;m.si[14]=(sSI)6;m.si[15]=(sSI)7;m.si[16]=(sSI)8;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(StModSeq, "StModSeq");

#ifndef YAC_NO_HOST
void  YAC_CALL StModSeq__reset      (void *_o                                ) {((StModSeq*)_o)->reset();}
void  YAC_CALL StModSeq___setPlayMode(void *_o, yacmemptr _args              ) {((StModSeq*)_o)->_setPlayMode(_args.mem[0].si);}
sSI   YAC_CALL StModSeq___getPlayMode(void *_o                               ) {return (sSI)((StModSeq*)_o)->_getPlayMode();}
void  YAC_CALL StModSeq___setStepMode(void *_o, yacmemptr _args              ) {((StModSeq*)_o)->_setStepMode(_args.mem[0].si);}
sSI   YAC_CALL StModSeq___getStepMode(void *_o                               ) {return (sSI)((StModSeq*)_o)->_getStepMode();}
void  YAC_CALL StModSeq___setNumSteps(void *_o, yacmemptr _args              ) {((StModSeq*)_o)->_setNumSteps(_args.mem[0].si);}
sSI   YAC_CALL StModSeq___getNumSteps(void *_o                               ) {return (sSI)((StModSeq*)_o)->_getNumSteps();}
void  YAC_CALL StModSeq___setRepeatOffset(void *_o, yacmemptr _args          ) {((StModSeq*)_o)->_setRepeatOffset(_args.mem[0].si);}
sSI   YAC_CALL StModSeq___getRepeatOffset(void *_o                           ) {return (sSI)((StModSeq*)_o)->_getRepeatOffset();}
void  YAC_CALL StModSeq___setStepValue(void *_o, yacmemptr _args             ) {((StModSeq*)_o)->_setStepValue(_args.mem[0].si, _args.mem[1].f32);}
sF32  YAC_CALL StModSeq___getStepValue(void *_o, yacmemptr _args             ) {return (sF32)((StModSeq*)_o)->_getStepValue(_args.mem[0].si);}
sF32  YAC_CALL StModSeq___getEffectiveStepValue(void *_o, yacmemptr _args    ) {return (sF32)((StModSeq*)_o)->_getEffectiveStepValue(_args.mem[0].si);}
void  YAC_CALL StModSeq___setStepDuration(void *_o, yacmemptr _args          ) {((StModSeq*)_o)->_setStepDuration(_args.mem[0].si, _args.mem[1].si);}
sSI   YAC_CALL StModSeq___getStepDuration(void *_o, yacmemptr _args          ) {return (sSI)((StModSeq*)_o)->_getStepDuration(_args.mem[0].si);}
void  YAC_CALL StModSeq___setSpeed  (void *_o, yacmemptr _args               ) {((StModSeq*)_o)->_setSpeed(_args.mem[0].f32);}
sF32  YAC_CALL StModSeq___getSpeed  (void *_o                                ) {return (sF32)((StModSeq*)_o)->_getSpeed();}
void  YAC_CALL StModSeq___setEnableTempoSync(void *_o, yacmemptr _args       ) {((StModSeq*)_o)->_setEnableTempoSync(_args.mem[0].si);}
sSI   YAC_CALL StModSeq___getEnableTempoSync(void *_o                        ) {return (sSI)((StModSeq*)_o)->_getEnableTempoSync();}
void  YAC_CALL StModSeq___setValueScl(void *_o, yacmemptr _args              ) {((StModSeq*)_o)->_setValueScl(_args.mem[0].f32);}
sF32  YAC_CALL StModSeq___getValueScl(void *_o                               ) {return (sF32)((StModSeq*)_o)->_getValueScl();}
void  YAC_CALL StModSeq___setValueOff(void *_o, yacmemptr _args              ) {((StModSeq*)_o)->_setValueOff(_args.mem[0].f32);}
sF32  YAC_CALL StModSeq___getValueOff(void *_o                               ) {return (sF32)((StModSeq*)_o)->_getValueOff();}
void  YAC_CALL StModSeq___setSlewAmt(void *_o, yacmemptr _args               ) {((StModSeq*)_o)->_setSlewAmt(_args.mem[0].f32);}
sF32  YAC_CALL StModSeq___getSlewAmt(void *_o                                ) {return (sF32)((StModSeq*)_o)->_getSlewAmt();}
void  YAC_CALL StModSeq___setEnableOneShot(void *_o, yacmemptr _args         ) {((StModSeq*)_o)->_setEnableOneShot(_args.mem[0].si);}
sSI   YAC_CALL StModSeq___getEnableOneShot(void *_o                          ) {return (sSI)((StModSeq*)_o)->_getEnableOneShot();}
void  YAC_CALL StModSeq___setEnableGlobal(void *_o, yacmemptr _args          ) {((StModSeq*)_o)->_setEnableGlobal(_args.mem[0].si);}
sSI   YAC_CALL StModSeq___getEnableGlobal(void *_o                           ) {return (sSI)((StModSeq*)_o)->_getEnableGlobal();}
void  YAC_CALL StModSeq___setEnableReset(void *_o, yacmemptr _args           ) {((StModSeq*)_o)->_setEnableReset(_args.mem[0].si);}
sSI   YAC_CALL StModSeq___getEnableReset(void *_o                            ) {return (sSI)((StModSeq*)_o)->_getEnableReset();}
void  YAC_CALL StModSeq___setEnablePulse(void *_o, yacmemptr _args           ) {((StModSeq*)_o)->_setEnablePulse(_args.mem[0].si);}
sSI   YAC_CALL StModSeq___getEnablePulse(void *_o                            ) {return (sSI)((StModSeq*)_o)->_getEnablePulse();}
sSI   YAC_CALL StModSeq___uiGetLastPlayedIdx(void *_o                        ) {return (sSI)((StModSeq*)_o)->_uiGetLastPlayedIdx();}
#endif // YAC_NO_HOST
