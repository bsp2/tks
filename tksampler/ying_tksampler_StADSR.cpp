// ---- ying_tksampler_StADSR.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 23:42:34)

#ifndef YAC_NO_HOST
void* YAC_CALL StADSR___getEnvAttack(void *                        );
void* YAC_CALL StADSR___getEnvSustain(void *                       );
void* YAC_CALL StADSR___getEnvRelease(void *                       );
void* YAC_CALL StADSR___getOrCreateEnvAttack(void *                );
void* YAC_CALL StADSR___getOrCreateEnvSustain(void *               );
void* YAC_CALL StADSR___getOrCreateEnvRelease(void *               );
void* YAC_CALL StADSR___getEnvAttackMetaData(void *                );
void* YAC_CALL StADSR___getEnvSustainMetaData(void *               );
void* YAC_CALL StADSR___getEnvReleaseMetaData(void *               );
void* YAC_CALL StADSR___getOrCreateEnvAttackData(void *            );
void* YAC_CALL StADSR___getOrCreateEnvSustainData(void *           );
void* YAC_CALL StADSR___getOrCreateEnvReleaseData(void *           );
void  YAC_CALL StADSR___deleteEnvAttack(void *                     );
void  YAC_CALL StADSR___deleteEnvSustain(void *                    );
void  YAC_CALL StADSR___deleteEnvRelease(void *                    );
sF32  YAC_CALL StADSR___getIntensity(void *                        );
void  YAC_CALL StADSR___setIntensity(void *, yacmemptr             );
sF32  YAC_CALL StADSR___getLevel    (void *                        );
void  YAC_CALL StADSR___setLevel    (void *, yacmemptr             );
sF32  YAC_CALL StADSR___getTimescale(void *                        );
void  YAC_CALL StADSR___setTimescale(void *, yacmemptr             );
sF32  YAC_CALL StADSR___getTimescaleMillisec(void *                );
void  YAC_CALL StADSR___setTimescaleMillisec(void *, yacmemptr     );
sSI   YAC_CALL StADSR___getStageOp  (void *                        );
void  YAC_CALL StADSR___setStageOp  (void *, yacmemptr             );
sSI   YAC_CALL StADSR___getEnableSustainLoop(void *                );
void  YAC_CALL StADSR___setEnableSustainLoop(void *, yacmemptr     );
#endif // YAC_NO_HOST

// ------------------ YAC class "StADSR" reflection map (implementation) ------------------
sUI          YAC_VCALL StADSR::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL StADSR::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL StADSR::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL StADSR::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL StADSR::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL StADSR::yacMethodGetNum                  (void) {return 28;}
const char **YAC_VCALL StADSR::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "getEnvAttack", "getEnvSustain", "getEnvRelease", "getOrCreateEnvAttack", "getOrCreateEnvSustain", "getOrCreateEnvRelease", "getEnvAttackMetaData", "getEnvSustainMetaData", "getEnvReleaseMetaData", "getOrCreateEnvAttackData", "getOrCreateEnvSustainData", "getOrCreateEnvReleaseData", "deleteEnvAttack", "deleteEnvSustain", "deleteEnvRelease", "getIntensity", "setIntensity", "getLevel", "setLevel", "getTimescale", "setTimescale", "getTimescaleMillisec", "setTimescaleMillisec", "getStageOp", "setStageOp", "getEnableSustainLoop", "setEnableSustainLoop"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StADSR::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL StADSR::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={0,};static const sUI rt8[]={0,};static const sUI rt9[]={0,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={0,};static const sUI rt13[]={0,};static const sUI rt14[]={0,};static const sUI rt15[]={0,};static const sUI rt16[]={0,};static const sUI rt17[]={2,};static const sUI rt18[]={0,};static const sUI rt19[]={2,};static const sUI rt20[]={0,};static const sUI rt21[]={2,};static const sUI rt22[]={0,};static const sUI rt23[]={2,};static const sUI rt24[]={0,};static const sUI rt25[]={1,};static const sUI rt26[]={0,};static const sUI rt27[]={1,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL StADSR::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StADSR::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL StADSR::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL StADSR::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)StADSR___getEnvAttack, (void*)StADSR___getEnvSustain, (void*)StADSR___getEnvRelease, (void*)StADSR___getOrCreateEnvAttack, (void*)StADSR___getOrCreateEnvSustain, (void*)StADSR___getOrCreateEnvRelease, (void*)StADSR___getEnvAttackMetaData, (void*)StADSR___getEnvSustainMetaData, (void*)StADSR___getEnvReleaseMetaData, (void*)StADSR___getOrCreateEnvAttackData, (void*)StADSR___getOrCreateEnvSustainData, (void*)StADSR___getOrCreateEnvReleaseData, (void*)StADSR___deleteEnvAttack, (void*)StADSR___deleteEnvSustain, (void*)StADSR___deleteEnvRelease, (void*)StADSR___getIntensity, (void*)StADSR___setIntensity, (void*)StADSR___getLevel, (void*)StADSR___setLevel, (void*)StADSR___getTimescale, (void*)StADSR___setTimescale, (void*)StADSR___getTimescaleMillisec, (void*)StADSR___setTimescaleMillisec, (void*)StADSR___getStageOp, (void*)StADSR___setStageOp, (void*)StADSR___getEnableSustainLoop, (void*)StADSR___setEnableSustainLoop}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL StADSR::yacConstantGetNum                (void) {return 3;}
const char **YAC_VCALL StADSR::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"STADSR_STAGEOP_MUL", "STADSR_STAGEOP_MUL_INTENSITY", "STADSR_STAGEOP_ADD"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StADSR::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL StADSR::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[3]; m.ui=r; m.si[0]=(sSI)0;m.si[1]=(sSI)1;m.si[2]=(sSI)2;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(StADSR, "StADSR");

#ifndef YAC_NO_HOST
void* YAC_CALL StADSR___getEnvAttack(void *_o                                ) {return (void*)((StADSR*)_o)->_getEnvAttack();}
void* YAC_CALL StADSR___getEnvSustain(void *_o                               ) {return (void*)((StADSR*)_o)->_getEnvSustain();}
void* YAC_CALL StADSR___getEnvRelease(void *_o                               ) {return (void*)((StADSR*)_o)->_getEnvRelease();}
void* YAC_CALL StADSR___getOrCreateEnvAttack(void *_o                        ) {return (void*)((StADSR*)_o)->_getOrCreateEnvAttack();}
void* YAC_CALL StADSR___getOrCreateEnvSustain(void *_o                       ) {return (void*)((StADSR*)_o)->_getOrCreateEnvSustain();}
void* YAC_CALL StADSR___getOrCreateEnvRelease(void *_o                       ) {return (void*)((StADSR*)_o)->_getOrCreateEnvRelease();}
void* YAC_CALL StADSR___getEnvAttackMetaData(void *_o                        ) {return (void*)((StADSR*)_o)->_getEnvAttackMetaData();}
void* YAC_CALL StADSR___getEnvSustainMetaData(void *_o                       ) {return (void*)((StADSR*)_o)->_getEnvSustainMetaData();}
void* YAC_CALL StADSR___getEnvReleaseMetaData(void *_o                       ) {return (void*)((StADSR*)_o)->_getEnvReleaseMetaData();}
void* YAC_CALL StADSR___getOrCreateEnvAttackData(void *_o                    ) {return (void*)((StADSR*)_o)->_getOrCreateEnvAttackData();}
void* YAC_CALL StADSR___getOrCreateEnvSustainData(void *_o                   ) {return (void*)((StADSR*)_o)->_getOrCreateEnvSustainData();}
void* YAC_CALL StADSR___getOrCreateEnvReleaseData(void *_o                   ) {return (void*)((StADSR*)_o)->_getOrCreateEnvReleaseData();}
void  YAC_CALL StADSR___deleteEnvAttack(void *_o                             ) {((StADSR*)_o)->_deleteEnvAttack();}
void  YAC_CALL StADSR___deleteEnvSustain(void *_o                            ) {((StADSR*)_o)->_deleteEnvSustain();}
void  YAC_CALL StADSR___deleteEnvRelease(void *_o                            ) {((StADSR*)_o)->_deleteEnvRelease();}
sF32  YAC_CALL StADSR___getIntensity(void *_o                                ) {return (sF32)((StADSR*)_o)->_getIntensity();}
void  YAC_CALL StADSR___setIntensity(void *_o, yacmemptr _args               ) {((StADSR*)_o)->_setIntensity(_args.mem[0].f32);}
sF32  YAC_CALL StADSR___getLevel    (void *_o                                ) {return (sF32)((StADSR*)_o)->_getLevel();}
void  YAC_CALL StADSR___setLevel    (void *_o, yacmemptr _args               ) {((StADSR*)_o)->_setLevel(_args.mem[0].f32);}
sF32  YAC_CALL StADSR___getTimescale(void *_o                                ) {return (sF32)((StADSR*)_o)->_getTimescale();}
void  YAC_CALL StADSR___setTimescale(void *_o, yacmemptr _args               ) {((StADSR*)_o)->_setTimescale(_args.mem[0].f32);}
sF32  YAC_CALL StADSR___getTimescaleMillisec(void *_o                        ) {return (sF32)((StADSR*)_o)->_getTimescaleMillisec();}
void  YAC_CALL StADSR___setTimescaleMillisec(void *_o, yacmemptr _args       ) {((StADSR*)_o)->_setTimescaleMillisec(_args.mem[0].f32);}
sSI   YAC_CALL StADSR___getStageOp  (void *_o                                ) {return (sSI)((StADSR*)_o)->_getStageOp();}
void  YAC_CALL StADSR___setStageOp  (void *_o, yacmemptr _args               ) {((StADSR*)_o)->_setStageOp(_args.mem[0].si);}
sSI   YAC_CALL StADSR___getEnableSustainLoop(void *_o                        ) {return (sSI)((StADSR*)_o)->_getEnableSustainLoop();}
void  YAC_CALL StADSR___setEnableSustainLoop(void *_o, yacmemptr _args       ) {((StADSR*)_o)->_setEnableSustainLoop(_args.mem[0].si);}
#endif // YAC_NO_HOST
