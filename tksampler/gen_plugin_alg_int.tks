// ----
// ---- file   : gen_plugin_alg_int.cpp
// ---- author : Bastian Spiegel <bs@tkscript.de>
// ---- legal  : (c) 2020-2024 by Bastian Spiegel. 
// ----          Distributed under terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL). See 
// ----          http://www.gnu.org/licenses/licenses.html#LGPL or COPYING for further information.
// ----
// ---- info   : Generate alg processing methods (outfile is included in StSampleVoice.cpp)
// ----
// ---- created: 22May2020
// ---- changed: 23May2020, 24May2020, 25May2020, 28May2020, 31May2020, 08Jun2020, 05Aug2024
// ----
// ----
// ----

// (todo) use dynamic bypass check ? (would reduce #methods to 1/16 but adds three "if"s per plugin)
// (todo) ..or use dummy plugin so plugin slots are always in use ?
// (done) split output into multiple files and write to sub-directory (256 fxns per module)

class Utils {
   // <method_get.png>
   static GetCurrentDateString() : String {
      Time t; t.now();
      return 
         t.monthday+"-"+
         ((["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])[t.month])+"-"+t.year;
   }

   // <method_get.png>
   static GetCurrentTimeString() : String {
      Time t;
      Integer io_h;
      Integer io_m;
      Integer io_s;
      t.now();
      io_h.value=t.hour;
      io_m.value=t.min;
      io_s.value=t.sec;
      return io_h.printf("%02i")+":"+io_m.printf("%02i")+":"+io_s.printf("%02i");
   }
}

String buf;
String bufHdr;
String bufTbl;
String bufFxn;

function BeginModule(String _buf, boolean _bIncParent) {
   _buf.empty();
   _buf.append("// autogenerated by gen_plugin_alg_int.tks on "+Utils.GetCurrentDateString()+" "+Utils.GetCurrentTimeString()+"\n");
   _buf.append("//  ($FXN methods, $TBL table entries)\n\n");
   _buf.append("#include \""+(_bIncParent?"../":"")+"tksampler.h\"\n\n");
   _buf.append("#define Dpro(a,m,i,o) plugin_cache_entries[(a)]->voice->voice_bus_read_offset = render_buf_sample_offset; sample->plugins[(a)].shared->info->info->process_replace(plugin_cache_entries[(a)]->voice, (m), (i), (o), 1u)\n\n");
}

BeginModule(buf, true/*bIncParent*/);
bufHdr.append("   static stsamplevoice_process_alg_fxn_t process_algint_tbl[$TBL];\n");
bufTbl.append("stsamplevoice_process_alg_fxn_t StSampleVoice::process_algint_tbl[$TBL] = {\n");


// (note) plugin_alg_int = ((plugin_alg-1u) << 10) + (plugin_alg_outer << 8) + (plugin_alg_filter_pos << 5) + (plugin_mask << 1) + 0u/*_bMonoIn*/;
int algInt = 0;
int fxnIdx = 0;

int algIntOuter1First;
int algIntOuter2First;
int algIntOuter3First;

int total_num_fxns;

HashTable ht_fxn;
ht_fxn.alloc(20000);  // maps alg signature to algInt idx

Integer fxn_file_idx = 0;
function SaveBufFxn() {
   if(!bufFxn.isBlank())
   {
      String pathName <= "autogen_stsamplevoice_alg_int/fxns_"+fxn_file_idx.printf("%03d")+".cpp";
      bufFxn.saveLocal(pathName);
      trace "[...] wrote \""+pathName+"\"";
      fxn_file_idx++;
   }
}

function AddToTbl() {
   if(algInt > 0)
      bufTbl.append(", ");
   bufTbl.append("&StSampleVoice::process_algint_"+algInt);
}

function RepeatTbl(int _algInt) {
   bufTbl.append(", &StSampleVoice::process_algint_"+_algInt);
   algInt++; // skip
}

function RepeatTblOuter1(int fltPos, int pluginMask, boolean bMonoIn) {
   int idx = algIntOuter1First + (fltPos << 5) + (pluginMask << 1) + bMonoIn;
   RepeatTbl(idx);
}

function RepeatTblOuter2(int fltPos, int pluginMask, boolean bMonoIn) {
   int idx = algIntOuter2First + (fltPos << 5) + (pluginMask << 1) + bMonoIn;
   RepeatTbl(idx);
}

function RepeatTblOuter3(int fltPos, int pluginMask, boolean bMonoIn) {
   int idx = algIntOuter3First + ((fltPos&1) << 5) + (pluginMask << 1) + bMonoIn;
   RepeatTbl(idx);
}

function BeginRaw(String alg, int pluginMask, boolean bMonoIn) : boolean {
   String key = alg+"_"+pluginMask+"_"+bMonoIn;
   if(ht_fxn.exists(key))
   {
      // use cached function
      RepeatTbl(ht_fxn.get(key));
      return false;
   }
   else
   {
      // new cache entry
      ht_fxn[key] = algInt;
      bufHdr.append("void process_algint_"+algInt+" (void);\n");

      if(255 == (fxnIdx++ & 255))
      {
         SaveBufFxn();
         bufFxn.empty();
      }

      if(bufFxn.isBlank())
         BeginModule(bufFxn, true/*bIncParent*/);

      bufFxn.append("void StSampleVoice::process_algint_"+algInt+"(void) {  // fxn_"+total_num_fxns+" ("+(bMonoIn?"mono":"stereo")+")\n");
      AddToTbl();
      // // buf.append("   sBool bMono0 = "+_bMonoIn+";\n");
      // // buf.append("   sBool bMono1 = "+_bMonoIn+";\n");
      // // buf.append("   sBool bMono2 = "+_bMonoIn+";\n");
      // // buf.append("   sBool bMono3 = "+_bMonoIn+";\n");
      return true;
   }
}

function Begin(String alg, int fltAll, int fltPos, int pluginMask, boolean bMonoIn) : boolean {
   if(1 == fltAll)
      alg = "f*"+alg;
   else if(2 == fltAll)
      alg.append("*f");
   else
   {
      if(fltPos&1)
         alg.replace(String(fltPos>>1), String(fltPos>>1)+"*f");
      else
         alg.replace(String(fltPos>>1), "f*"+String(fltPos>>1));
   }
   return BeginRaw(alg, pluginMask, bMonoIn);
}

function End() {
   bufFxn.append("}  // end algInt="+algInt+"\n\n");
   algInt++;
   total_num_fxns++;
}

function GenInfo(int alg, int fltAll, int fltPos, int pluginMask) {
   bufFxn.append("   // ****** alg="+alg+" fltAll="+fltAll+" fltPos="+fltPos+" pluginMask="+((pluginMask&8)?"4":"-")+((pluginMask&4)?"3":"-")+((pluginMask&2)?"2":"-")+((pluginMask&1)?"1":"-")+" ******\n");
}

function GenAdd2(String _d, String _a, String _b) {
   bufFxn.append("   "+_d+"[0] = "+_a+"[0] + "+_b+"[0];\n");
   bufFxn.append("   "+_d+"[1] = "+_a+"[1] + "+_b+"[1];\n");
}

function GenFilter(String _io) {
   bufFxn.append("   filter("+_io+");\n");
}

function GenTmp(String _name) {
   bufFxn.append("   sF32 "+_name+"[2];\n");
}

function Gen(int pluginMask, int pluginIdx, int fltPos, int fltAll, boolean _bMonoIn, String _in, String _out) {
   bufFxn.append("   // process #"+(pluginIdx+1)+" in="+_in+" out="+_out+"\n");

   if(0)
   {
      // plugin level controls output gain

      if((0 == fltAll) && (fltPos == ((pluginIdx << 1)|0)))
      {
         bufFxn.append("   "+_out+"[0] = "+_in+"[0];\n");
         bufFxn.append("   "+_out+"[1] = "+_in+"[1];\n");
         _in <= _out;
         GenFilter(_in);
      }
      if(pluginMask & (1 << pluginIdx))
      {
         bufFxn.append("   Dpro("+pluginIdx+", "+_bMonoIn+", "+_in+", "+_out+");\n");
         // (todo) update mono hint when plugin produces true stereo output
         bufFxn.append("   "+_out+"[0] *= plugin_levels["+pluginIdx+"][0];\n");
         bufFxn.append("   "+_out+"[1] *= plugin_levels["+pluginIdx+"][1];\n");
      }
      else
      {
         bufFxn.append("   "+_out+"[0] = "+_in+"[0] * plugin_levels["+pluginIdx+"][0];\n");
         bufFxn.append("   "+_out+"[1] = "+_in+"[1] * plugin_levels["+pluginIdx+"][1];\n");
      }
   }
   else
   {
      // plugin level controls input gain
      bufFxn.append("   "+_out+"[0] = "+_in+"[0] * plugin_levels["+pluginIdx+"][0];\n");
      bufFxn.append("   "+_out+"[1] = "+_in+"[1] * plugin_levels["+pluginIdx+"][1];\n");

      if((0 == fltAll) && (fltPos == ((pluginIdx << 1)|0)))
      {
         GenFilter(_out);
      }
      if(pluginMask & (1 << pluginIdx))
      {
         bufFxn.append("   Dpro("+pluginIdx+", "+_bMonoIn+", "+_out+", "+_out+");\n");
         // (todo) update mono hint when plugin produces true stereo output
      }
   }

   if((0 == fltAll) && (fltPos == ((pluginIdx << 1)|1)))
      GenFilter(_out);
}

function GenDefFxn(int alg, int fltAll, int fltPos, int pluginMask, boolean _bMonoIn) {

   switch(alg)
   {
      case 1:  // "1+2+3+4"
      case 2:  // "1+(2+3+4)"
      case 3:  // "(1+2+3)+4"
      case 4:  // "1+2+(3+4)"
      case 5:  // "1+(2+3)+4"
      case 6:  // "(1+2)+3+4"
      case 7:  // "(1+2)+(3+4)"
      case 24: // "1+(2+(3+4))"
         if(Begin("(1+2+3+4)", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            GenTmp("td");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "td");
            GenAdd2("tb",          "ta", "tb");
            GenAdd2("tc",          "tb", "tc");
            GenAdd2("last_sample", "tc", "td");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 8:  // "1*(2+3+4)"
         if(Begin("1*(2+3+4)", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
       
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            GenTmp("td");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "ta", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "ta", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "ta", "td");
            GenAdd2("tc",          "tb", "tc");
            GenAdd2("last_sample", "tc", "td");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 9: // "1*(2+3)*4"
         if(Begin("1*(2+3)*4", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "ta", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "ta", "tc");
            GenAdd2("tc",          "tb", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tc", "last_sample");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 10: // "(1+2+3)*4"
         if(Begin("(1+2+3)*4", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tc");
            GenAdd2("tb",          "ta", "tb");
            GenAdd2("tc",          "tb", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tc", "last_sample");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 11: // "(1+2)*3*4"
         if(Begin("(1+2)*3*4", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tb");
            GenAdd2("tb",          "ta", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tb", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tc", "last_sample");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 12: // "1+(2*3*4)"
         if(Begin("(1+(2*3*4))", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            GenTmp("td");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tb", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tc", "td");
            GenAdd2("last_sample",  "ta", "td");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 13: // "(1+2)*(3+4)"
         if(Begin("(1+2)*(3+4)", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            GenTmp("td");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tb");
            GenAdd2("tb",  "ta", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tb", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tb", "td");
            GenAdd2("last_sample",  "tc", "td");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 14: // "(1*2)+(3*4)"
         if(Begin("((1*2)+(3*4))", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            GenTmp("td");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "ta", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tc", "td");
            GenAdd2("last_sample",  "tb", "td");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 15: // "1+2+(3*4)"
         if(Begin("(1+2+(3*4))", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            GenTmp("td");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tb");
            GenAdd2("tb",  "ta", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tc", "td");
            GenAdd2("last_sample",  "tb", "td");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 16: // "1+(2*3)+4"
         if(Begin("(1+(2*3)+4)", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            GenTmp("td");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "td");
            GenAdd2("td",  "ta", "td");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tb", "tc");
            GenAdd2("last_sample",  "tc", "td");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 17: // "(1*2)+3+4"
         if(Begin("((1*2)+3+4)", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            GenTmp("td");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "td");
            GenAdd2("td",  "tc", "td");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "ta", "tb");
            GenAdd2("last_sample",  "tb", "td");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 18: // "(1*(2+3))+4"
         if(Begin("((1*(2+3))+4)", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            GenTmp("td");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "ta", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "ta", "tc");
            GenAdd2("tc",  "tb", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "td");
            GenAdd2("last_sample",  "tc", "td");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 19: // "((1*2)+3)*4"
         if(Begin("((1*2)+3)*4", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "ta", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tc");
            GenAdd2("tc",  "tb", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tc", "last_sample");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 20: // "(1+(2*3))*4"
         if(Begin("(1+(2*3))*4", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tb", "tc");
            GenAdd2("tc",  "ta", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tc", "last_sample");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 21: // "1+((2+3)*4)"
         if(Begin("(1+((2+3)*4))", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            GenTmp("td");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tc");
            GenAdd2("tc",  "tb", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tc", "td");
            GenAdd2("last_sample",  "ta", "td");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 22: // "1+(2*(3+4))"
         if(Begin("(1+(2*(3+4)))", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            GenTmp("td");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tb", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tb", "td");
            GenAdd2("td",           "tc", "td");
            GenAdd2("last_sample",  "ta", "td");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;

      case 23: // "1*(2+(3*4))"
         if(Begin("1*(2+(3*4))", fltAll, fltPos, pluginMask, _bMonoIn))
         {
            GenInfo(alg, fltAll, fltPos, pluginMask);
            if(1 == fltAll)
               GenFilter("last_sample");
            GenTmp("ta");
            GenTmp("tb");
            GenTmp("tc");
            GenTmp("td");
            Gen(pluginMask, 0/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "last_sample", "ta");
            Gen(pluginMask, 1/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "ta", "tb");
            Gen(pluginMask, 2/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "ta", "tc");
            Gen(pluginMask, 3/*pluginIdx*/, fltPos, fltAll, _bMonoIn, "tc", "td");
            GenAdd2("last_sample",  "tb", "td");
            if(2 == fltAll)
               GenFilter("last_sample");
            End();
         }
         break;
   }
}

function GenOuter1Fxn(int alg, int fltPos, int pluginMask, boolean _bMonoIn) {
   int fltPosIdx = (fltPos >> 1);
   switch(alg)
   {
      //
      // "1+2+3+4"
      //
      case 1:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(0 == fltPosIdx)
            {
               // "f*(1+2+3+4)"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               RepeatTblOuter1(0/*fltPos=pre*/, pluginMask, _bMonoIn);
            }
         }
         else
         {
            if(0 == fltPosIdx)
            {
               // "(1+2+3+4)*f"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               RepeatTblOuter1(1/*fltPos=post*/, pluginMask, _bMonoIn);
            }
         }
         break;


      //
      // 1+(2+3+4)
      //
      case 2:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(0 == fltPosIdx)
            {
               // 2: f*(1+(2+3+4))
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 2: "1+f*(2+3+4)"
               if(BeginRaw("1+f*(2+3+4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  GenFilter("last_sample");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("tb",          "ta", "tb");
                  GenAdd2("tc",          "tb", "tc");
                  GenAdd2("last_sample", "tc", "td");
                  End();
               }
            }
         }
         else
         {
            if(0 == fltPosIdx)
            {
               // 2: (1+(2+3+4))*f
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 2: "1+(2+3+4)*f"
               if(BeginRaw("1+(2+3+4)*f", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("tc",          "tb", "tc");
                  GenAdd2("td",          "tc", "td");
                  GenFilter("td");
                  GenAdd2("last_sample", "td", "ta");
                  End();
               }
            }
         }
         break;

      //
      // "(1+2+3)+4"
      //
      case 3:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(3 == fltPosIdx)
            {
               // 3: f*((1+2+3)+4)
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 3: "f*(1+2+3)+4"
               if(BeginRaw("f*(1+2+3)+4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenFilter("last_sample");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  GenAdd2("tb",          "ta", "tb");
                  GenAdd2("tc",          "tb", "tc");
                  GenAdd2("last_sample", "tc", "td");
                  End();
               }
            }
         }
         else
         {
            if(3 == fltPosIdx)
            {
               // 3: ((1+2+3)+4)*f
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 3: "(1+2+3)*f+4"
               if(BeginRaw("(1+2+3)*f+4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("tb",          "ta", "tb");
                  GenAdd2("tc",          "tb", "tc");
                  GenFilter("tc");
                  GenAdd2("last_sample", "tc", "td");
                  End();
               }
            }
         }
         break;


      //
      // "1+2+(3+4)"
      //
      case 4:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(fltPosIdx < 2)
            {
               // 4: f*(1+2+(3+4))
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 4: "1+2+f*(3+4)"
               if(BeginRaw("1+2+f*(3+4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenFilter("last_sample");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("tb",          "ta", "tb");
                  GenAdd2("tc",          "tb", "tc");
                  GenAdd2("last_sample", "tc", "td");
                  End();
               }
            }
         }
         else
         {
            if(fltPosIdx < 2)
            {
               // 4: (1+2+(3+4))*f
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 4: "1+2+(3+4)*f"
               if(BeginRaw("1+2+(3+4)*f", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("tb",          "ta", "tb");
                  GenAdd2("td",          "tc", "td");
                  GenFilter("td");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
         }
         break;


      //
      // "1+(2+3)+4"
      //
      case 5:
         if(0 == (fltPos & 1))  // pre ?
         {
            if((0 == fltPosIdx) || (3 == fltPosIdx))
            {
               // 5: f*(1+(2+3)+4)
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 5: "1+f*(2+3)+4"
               if(BeginRaw("1+f*(2+3)+4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td",          "ta", "td");
                  GenFilter("last_sample");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  GenAdd2("tc",          "tb", "tc");
                  GenAdd2("last_sample", "tc", "td");
                  End();
               }
            }
         }
         else
         {
            if((0 == fltPosIdx) || (3 == fltPosIdx))
            {
               // 5: (1+(2+3)+4)*f
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 5: "1+(2+3)*f+4"
               if(BeginRaw("1+(2+3)*f+4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td",          "ta", "td");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  GenAdd2("tc",          "tb", "tc");
                  GenFilter("tc");
                  GenAdd2("last_sample", "tc", "td");
                  End();
               }
            }
         }
         break;


      //
      // "(1+2)+3+4"
      //
      case 6:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(fltPosIdx >= 2)
            {
               // 6: f*((1+2)+3+4)
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 6: "f*(1+2)+3+4"
               if(BeginRaw("f*(1+2)+3+4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td",          "tc", "td");
                  GenFilter("last_sample");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenAdd2("tb",          "ta", "tb");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
         }
         else
         {
            if(fltPosIdx >= 2)
            {
               // 6: ((1+2)+3+4)*f
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 6: "(1+2)*f+3+4"
               if(BeginRaw("(1+2)*f+3+4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td",          "tc", "td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenAdd2("tb",          "ta", "tb");
                  GenFilter("tb");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
         }
         break;


      //
      // "(1+2)+(3+4)"
      //
      case 7:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(fltPosIdx < 2)
            {
               // 7: f*(1+2)+(3+4)
               if(BeginRaw("f*(1+2)+(3+4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td",          "tc", "td");
                  GenFilter("last_sample");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenAdd2("tb",          "ta", "tb");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
            else
            {
               // 7: (1+2)+f*(3+4)
               if(BeginRaw("(1+2)+f*(3+4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenAdd2("tb",          "ta", "tb");
                  GenFilter("last_sample");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td",          "tc", "td");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
         }
         else
         {
            if(fltPosIdx < 2)
            {
               // 7: (1+2)*f+(3+4)
               if(BeginRaw("(1+2)*f+(3+4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenAdd2("tb",          "ta", "tb");
                  GenFilter("tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td",          "tc", "td");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
            else
            {
               // 7: (1+2)+(3+4)*f
               if(BeginRaw("(1+2)+(3+4)*f", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenAdd2("tb",          "ta", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td",          "tc", "td");
                  GenFilter("td");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
         }
         break;


      //
      // "1*(2+3+4)"
      //
      case 8:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(0 == fltPosIdx)
            {
               // 8: f*(1*(2+3+4))
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 8: "1*f*(2+3+4)"
               if(BeginRaw("1*f*(2+3+4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  GenFilter("ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "td");
                  GenAdd2("tc",          "tb", "tc");
                  GenAdd2("last_sample", "tc", "td");
                  End();
               }
            }
         }
         else
         {
            if(0 == fltPosIdx)
            {
               // 8: (1*(2+3+4))*f
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 8: "1*(2+3+4)*f"
               if(BeginRaw("1*(2+3+4)*f", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "td");
                  GenAdd2("tc",          "tb", "tc");
                  GenAdd2("last_sample", "tc", "td");
                  GenFilter("last_sample");
                  End();
               }
            }
         }
         break;


      //
      // "1*(2+3)*4"
      //
      case 9:
         if(0 == (fltPos & 1))  // pre ?
         {
            if((0 == fltPosIdx) || (3 == fltPosIdx))
            {
               // 9: f*(1*(2+3)*4)
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 9: "1*f*(2+3)*4"
               if(BeginRaw("1*f*(2+3)*4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  GenFilter("ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tc");
                  GenAdd2("tc",          "tb", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "last_sample");
                  End();
               }
            }
         }
         else
         {
            if((0 == fltPosIdx) || (3 == fltPosIdx))
            {
               // 9: (1*(2+3)*4)*f
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 9: "1*(2+3)*f*4"
               if(BeginRaw("1*(2+3)*f*4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tc");
                  GenAdd2("tc",          "tb", "tc");
                  GenFilter("tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "last_sample");
                  End();
               }
            }
         }
         break;


      //
      // "(1+2+3)*4"
      //
      case 10:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(3 == fltPosIdx)
            {
               // 10: f*((1+2+3)*4)
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 10: "f*(1+2+3)*4"
               if(BeginRaw("f*(1+2+3)*4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenFilter("last_sample");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  GenAdd2("tb",          "ta", "tb");
                  GenAdd2("tc",          "tb", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "last_sample");
                  End();
               }
            }
         }
         else
         {
            if(3 == fltPosIdx)
            {
               // 10: ((1+2+3)*4)*f
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 10: "(1+2+3)*f*4"
               if(BeginRaw("(1+2+3)*f*4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  GenAdd2("tb",          "ta", "tb");
                  GenAdd2("tc",          "tb", "tc");
                  GenFilter("tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "last_sample");
                  End();
               }
            }
         }
         break;


      //
      // "(1+2)*3*4"
      //
      case 11:
         if(0 == (fltPos & 1))  // pre ?
         {
            // 11: f*((1+2)*3*4)
            GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
         }
         else
         {
            if(fltPosIdx >= 2)
            {
               // 11: ((1+2)*3*4)*f
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 11: "(1+2)*f*3*4"
               if(BeginRaw("(1+2)*f*3*4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenAdd2("tb",          "ta", "tb");
                  GenFilter("tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tb", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "last_sample");
                  End();
               }
            }
         }
         break;


      //
      // "1+(2*3*4)"
      //
      case 12:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(0 == fltPosIdx)
            {
               // 12: f*(1+(2*3*4))
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 12: "1+f*(2*3*4)"
               if(BeginRaw("1+f*(2*3*4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  GenFilter("last_sample");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tb", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "td");
                  GenAdd2("last_sample", "ta", "td");
                  End();
               }
            }
         }
         else
         {
            if(0 == fltPosIdx)
            {
               // 12: (1+(2*3*4))*f
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 12: "1+(2*3*4)*f"
               if(BeginRaw("1+(2*3*4)*f", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tb", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "td");
                  GenFilter("td");
                  GenAdd2("last_sample", "ta", "td");
                  End();
               }
            }
         }
         break;


      //
      // "(1+2)*(3+4)"
      //
      case 13:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(fltPosIdx < 2)
            {
               // 13: f*(1+2)*(3+4)
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 13: "(1+2)*f*(3+4)"
               if(BeginRaw("(1+2)*f*(3+4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenAdd2("tb", "ta", "tb");
                  GenFilter("tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tb", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tb", "td");
                  GenAdd2("last_sample", "tc", "td");
                  End();
               }
            }
         }
         else
         {
            if(fltPosIdx >= 2)
            {
               // 13: (1+2)*(3+4)*f
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 13: "(1+2)*f*(3+4)"   (same as pre 3/4)
               if(BeginRaw("(1+2)*f*(3+4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenAdd2("tb", "ta", "tb");
                  GenFilter("tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tb", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tb", "td");
                  GenAdd2("last_sample", "tc", "td");
                  End();
               }
            }
         }
         break;


      //
      // "(1*2)+(3*4)"
      //
      case 14:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(fltPosIdx < 2)
            {
               // 14: "f*(1*2)+(3*4)"
               if(BeginRaw("f*(1*2)+(3*4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "td");
                  GenFilter("last_sample");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tb");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
            else
            {
               // 14: "(1*2)+f*(3*4)"
               if(BeginRaw("(1*2)+f*(3*4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tb");
                  GenFilter("last_sample");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "td");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
         }
         else
         {
            if(fltPosIdx < 2)
            {
               // 14: (1*2)*f+(3*4)
               if(BeginRaw("(1*2)+f*(3*4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tb");
                  GenFilter("tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "td");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
            else
            {
               // 14: (1*2)+(3*4)*f
               if(BeginRaw("(1*2)+(3*4)*f", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "td");
                  GenFilter("td");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
         }
         break;


      //
      // "1+2+(3*4)"
      //
      case 15:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(fltPosIdx < 2)
            {
               // 15: "f*(1+2+(3*4))"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 15: "1+2+f*(3*4)"
               if(BeginRaw("1+2+f*(3*4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenAdd2("tb", "ta", "tb");
                  GenFilter("last_sample");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "td");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
         }
         else
         {
            if(fltPosIdx < 2)
            {
               // 15: "(1+2+(3*4))*f"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 15: "1+2+(3*4)*f"
               if(BeginRaw("1+2+(3*4)*f", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenAdd2("tb", "ta", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "td");
                  GenFilter("td");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
         }
         break;


      //
      // "1+(2*3)+4"
      //
      case 16:
         if(0 == (fltPos & 1))  // pre ?
         {
            if((0 == fltPosIdx) || (3 == fltPosIdx))
            {
               // 16: "1+(2*3)+4"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 16: "1+f*(2*3)+4"
               if(BeginRaw("1+f*(2*3)+4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td", "ta", "td");
                  GenFilter("last_sample");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tb", "tc");
                  GenAdd2("last_sample", "tc", "td");
                  End();
               }
            }
         }
         else
         {
            if((0 == fltPosIdx) || (3 == fltPosIdx))
            {
               // 16: "1+(2*3)+4"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 16: "1+(2*3)*f+4"
               if(BeginRaw("1+(2*3)*f+4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td", "ta", "td");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tb", "tc");
                  GenFilter("tc");
                  GenAdd2("last_sample", "tc", "td");
                  End();
               }
            }
         }
         break;


      //
      // "(1*2)+3+4"
      //
      case 17:
         if(0 == (fltPos & 1))  // pre ?
         {
            if((2 == fltPosIdx) || (3 == fltPosIdx))
            {
               // 17: "(1*2)+3+4"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 17: "f*(1*2)+3+4"
               if(BeginRaw("f*(1*2)+3+4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td", "tc", "td");
                  GenFilter("last_sample");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tb");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
         }
         else
         {
            if((2 == fltPosIdx) || (3 == fltPosIdx))
            {
               // 17: "(1*2)+3+4"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 17: "(1*2)*f+3+4"
               if(BeginRaw("(1*2)+3+4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td", "tc", "td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tb");
                  GenFilter("tb");
                  GenAdd2("last_sample", "tb", "td");
                  End();
               }
            }
         }
         break;


      //
      // "(1*(2+3))+4"
      //
      case 18:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(3 == fltPosIdx)
            {
               // 18: "(1*(2+3))+4"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else if(0 == fltPosIdx)
            {
               // 18: "f*(1*(2+3))+4"
               GenDefFxn(alg, 0/*fltAll*/, 0/*fltpos=pre1*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 18: "(1*f*(2+3))+4"
               GenDefFxn(alg, 0/*fltAll*/, 1/*fltpos=post1*/, pluginMask, _bMonoIn);
            }
         }
         else
         {
            if(3 == fltPosIdx)
            {
               // 18: "(1*(2+3))+4"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 18: "(1*(2+3))*f+4"  post 1
               // 18: "(1*(2+3)*f)+4"  post 2/3
               if(BeginRaw("(1*(2+3))*f+4", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "ta", "tc");
                  GenAdd2("tc", "tb", "tc");
                  GenFilter("tc");
                  GenAdd2("last_sample", "tc", "td");
                  End();
               }
            }
         }
         break;


      //
      // "((1*2)+3)*4"
      //
      case 19:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(fltPosIdx >= 2)
            {
               // 19: "((1*2)+3)*4"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 19: "(f*(1*2)+3)*4"
               GenDefFxn(alg, 0/*fltAll*/, 0/*fltPos=pre1*/, pluginMask, _bMonoIn);
            }
         }
         else
         {
            if(3 == fltPosIdx)
            {
               // 19: "((1*2)+3)*4"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else if(2 == fltPosIdx)
            {
               // 19: "((1*2)+3)*f*4"
               GenDefFxn(alg, 0/*fltAll*/, 6/*fltPos=pre4*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 19: "((1*2)*f+3)*4"
               GenDefFxn(alg, 0/*fltAll*/, 3/*fltPos=post2*/, pluginMask, _bMonoIn);
            }
         }
         break;


      //
      // "(1+(2*3))*4"
      //
      case 20:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(1 <= fltPosIdx <= 2)
            {
               // 20: "(1+f*(2*3))*4"
               GenDefFxn(alg, 0/*fltAll*/, 2/*fltPos=pre2*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 20: "f*(1+(2*3))*4"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
         }
         else
         {
            if(0 == fltPosIdx)
            {
               // 20: "(1+(2*3))*f*4"
               GenDefFxn(alg, 0/*fltAll*/, 6/*fltPos=pre4*/, pluginMask, _bMonoIn);
            }
            else if(1 <= fltPosIdx <= 2)
            {
               // 20: "(1+(2*3)*f)*4"
               GenDefFxn(alg, 0/*fltAll*/, 5/*fltPos=post3*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 20: "(1+(2*3))*4*f"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
         }
         break;


      //
      // "1+((2+3)*4)"
      //
      case 21:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(0 == fltPosIdx)
            {
               // 21: "f*(1+((2+3)*4))"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 21: "1+(f*(2+3)*4)"
               // 21: "1+f*((2+3)*4)"
               if(BeginRaw("1+(f*(2+3)*4)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  GenFilter("last_sample");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  GenAdd2("tc", "tb", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tc", "td");
                  GenAdd2("last_sample", "ta", "td");
                  End();
               }
            }
         }
         else
         {
            if(0 == fltPosIdx)
            {
               // 21: "(1+((2+3)*4))*f"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else if(1 <= fltPosIdx <= 2)
            {
               // 21: "1+((2+3)*f*4)"
               GenDefFxn(alg, 0/*fltAll*/, 6/*fltPos=pre4*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 21: "1+((2+3)*4)*f"
               GenDefFxn(alg, 0/*fltAll*/, 7/*fltPos=post4*/, pluginMask, _bMonoIn);
            }
         }
         break;


      //
      // "1+(2*(3+4))"
      //
      case 22:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(0 == fltPosIdx)
            {
               // 22: "f*(1+(2*(3+4)))"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else if(1 == fltPosIdx)
            {
               // 22: "1+f*(2*(3+4))"
               GenDefFxn(alg, 0/*fltAll*/, 2/*fltPos=pre2*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 22: "1+(2*f*(3+4))"
               GenDefFxn(alg, 0/*fltAll*/, 3/*fltPos=post2*/, pluginMask, _bMonoIn);
            }
         }
         else
         {
            if(0 == fltPosIdx)
            {
               // 22: "(1+(2*(3+4)))*f"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 22: "1+(2*(3+4))*f"  post2
               // 22: "1+(2*(3+4)*f)"  post3/4
               if(BeginRaw("1+(2*(3+4))*f", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tb", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "tb", "td");
                  GenAdd2("td", "tc", "td");
                  GenFilter("td");
                  GenAdd2("last_sample", "ta", "td");
                  End();
               }
            }
         }
         break;


      //
      // "1*(2+(3*4))"
      //
      case 23:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(0 == fltPosIdx)
            {
               // 23: "f*(1*(2+(3*4)))"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else if(1 == fltPosIdx)
            {
               // 23: "1*f*(2+(3*4))"
               GenDefFxn(alg, 0/*fltAll*/, 1/*fltPos=post1*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 23: "1*(2+f*(3*4))"
               GenDefFxn(alg, 0/*fltAll*/, 4/*fltPos=pre3*/, pluginMask, _bMonoIn);
            }
         }
         else
         {
            if(fltPosIdx <= 1)
            {
               // 23: "(1*(2+(3*4)))*f"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 23: "1*(2+(3*4)*f)"
               GenDefFxn(alg, 0/*fltAll*/, 7/*fltPos=post4*/, pluginMask, _bMonoIn);
            }
         }
         break;

      //
      // "1+(2+(3+4))"
      //
      case 24:
         if(0 == (fltPos & 1))  // pre ?
         {
            if(0 == fltPosIdx)
            {
               // 24: "f*(1+(2+(3+4)))"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else if(1 == fltPosIdx)
            {
               // 24: "1+f*(2+(3+4))"
               if(BeginRaw("1+f*(2+(3+4))", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  GenFilter("last_sample");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td", "tc", "td");
                  GenAdd2("td", "tb", "td");
                  GenAdd2("last_sample", "ta", "td");
                  End();
               }
            }
            else
            {
               // 24: "1+(2+f*(3+4))"
               if(BeginRaw("1+(2+f*(3+4))", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  GenFilter("last_sample");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td", "tc", "td");
                  GenAdd2("td", "tb", "td");
                  GenAdd2("last_sample", "ta", "td");
                  End();
               }
            }
         }
         else
         {
            if(0 == fltPosIdx)
            {
               // 24: "(1+(2+(3+4)))*f"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else if(1 == fltPosIdx)
            {
               // 24: "1+(2+(3+4))*f"
               if(BeginRaw("1+(2+(3+4))*f", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td", "tc", "td");
                  GenAdd2("td", "tb", "td");
                  GenFilter("td");
                  GenAdd2("last_sample", "ta", "td");
                  End();
               }
            }
            else
            {
               // 24: "1+(2+(3+4)*f)"
               if(BeginRaw("1+(2+(3+4)*f)", pluginMask, _bMonoIn))
               {
                  GenTmp("ta");
                  GenTmp("tb");
                  GenTmp("tc");
                  GenTmp("td");
                  Gen(pluginMask, 0/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "ta");
                  Gen(pluginMask, 1/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tb");
                  Gen(pluginMask, 2/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "tc");
                  Gen(pluginMask, 3/*pluginIdx*/, -1/*fltPos*/, -1/*fltAll*/, _bMonoIn, "last_sample", "td");
                  GenAdd2("td", "tc", "td");
                  GenFilter("td");
                  GenAdd2("td", "tb", "td");
                  GenAdd2("last_sample", "ta", "td");
                  End();
               }
            }
         }
         break;
   }
}

function GenOuter2Fxn(int alg, int fltPos, int pluginMask, boolean _bMonoIn) {
   int fltPosIdx = (fltPos >> 1);
   switch(alg)
   {
      case  1:  // "1+2+3+4"
      case  2:  // "1+(2+3+4)"
      case  3:  // "(1+2+3)+4"
      case  4:  // "1+2+(3+4)"
      case  5:  // "1+(2+3)+4"
      case  6:  // "(1+2)+3+4"
      case  7:  // "(1+2)+(3+4)"
      case  8:  // "1*(2+3+4)"
      case  9:  // "1*(2+3)*4"
      case 10:  // "(1+2+3)*4"
      case 11:  // "(1+2)*3*4"
      case 12:  // "1+(2*3*4)"
      case 13:  // "(1+2)*(3+4)"
      case 14:  // "(1*2)+(3*4)"
      case 15:  // "1+2+(3*4)"
      case 16:  // "1+(2*3)+4"
      case 17:  // "(1*2)+3+4"
      case 20:  // "(1+(2*3))*4"
         if(0 == (fltPos & 1))  // pre ?
         {
            if(0 == fltPosIdx)
            {
               // "f*(<alg>)"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               RepeatTblOuter2(0/*fltPos=pre*/, pluginMask, _bMonoIn);
            }
         }
         else
         {
            // "(<alg>)*f"
            if(0 == fltPosIdx)
            {
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               RepeatTblOuter2(1/*fltPos=post*/, pluginMask, _bMonoIn);
            }
         }
         break;

      case 18:  // "(1*(2+3))+4"
         if(0 == (fltPos & 1))  // pre ?
         {
            if((0 == fltPosIdx) || (3 == fltPosIdx))
            {
               // "f*(<alg>)"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 18: "f*(1*(2+3))+4"
               GenOuter1Fxn(alg, 0/*fltPos=pre1*/, pluginMask, _bMonoIn);
            }
         }
         else
         {
            if((0 == fltPosIdx) || (3 == fltPosIdx))
            {
               // "(<alg>)*f"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 18: "(1*(2+3))*f+4"
               GenOuter1Fxn(alg, 1/*fltPos=post1*/, pluginMask, _bMonoIn);
            }
         }
         break;

      case 19:  // "((1*2)+3)*4"
         if(0 == (fltPos & 1))  // pre ?
         {
            // 19: "f*(((1*2)+3)*4)"
            GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
         }
         else
         {
            if(fltPosIdx >= 2)
            {
               // 19: "((1*2)+3)*4*f"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 19: "((1*2)+3)*f*4"
               GenDefFxn(alg, 0/*fltAll*/, 6/*fltPos=pre4*/, pluginMask, _bMonoIn);
            }
         }
         break;

      case 21:  // "1+((2+3)*4)"
         if(0 == (fltPos & 1))  // pre ?
         {
            if((0 == fltPosIdx) || (3 == fltPosIdx))
            {
               // 21: "f*(1+((2+3)*4))"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 21: "1+f*((2+3)*4)"
               GenOuter1Fxn(alg, 2/*fltPos=pre2*/, pluginMask, _bMonoIn);
            }
         }
         else
         {
            if((0 == fltPosIdx) || (3 == fltPosIdx))
            {
               // 21: "(1+((2+3)*4))*f"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 21: "1+((2+3)*4)*f"
               GenDefFxn(alg, 0/*fltAll*/, 7/*fltPos=post4*/, pluginMask, _bMonoIn);
            }
         }
         break;

      case 22:  // "1+(2*(3+4))"
         if(0 == (fltPos & 1))  // pre ?
         {
            if((0 == fltPosIdx) || (2 == fltPosIdx))
            {
               // 22: "f*(1+(2*(3+4)))"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 22: "1+f*(2*(3+4))"
               GenOuter1Fxn(alg, 2/*fltPos=pre2*/, pluginMask, _bMonoIn);
            }
         }
         else
         {
            if((0 == fltPosIdx) || (3 == fltPosIdx))
            {
               // 22: "(1+(2*(3+4)))*f"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 22: "1+(2*(3+4))*f"
               GenOuter1Fxn(alg, 3/*fltPos=post2*/, pluginMask, _bMonoIn);
            }
         }
         break;

      case 23:  // "1*(2+(3*4))"
         if(0 == (fltPos & 1))  // pre ?
         {
            if(fltPosIdx <= 1)
            {
               // 23: "f*(1*(2+(3*4)))"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 23: "1*f*(2+(3*4))"
               GenDefFxn(alg, 0/*fltAll*/, 1/*fltPos=post1*/, pluginMask, _bMonoIn);
            }
         }
         else
         {
            // 23: "(1*(2+(3*4)))*f"
            // 23: "1*(2+(3*4))*f"
            GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
         }
         break;

      case 24:  // "1+(2+(3+4))"
         if(0 == (fltPos & 1))  // pre ?
         {
            if(fltPosIdx <= 1)
            {
               // 24: "f*(1+(2+(3+4)))"
               GenDefFxn(alg, 1/*fltAll=pre*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 24: "1+f*(2+(3+4))"
               GenOuter1Fxn(alg, 2/*fltPos=pre2*/, pluginMask, _bMonoIn);
            }
         }
         else
         {
            if(fltPosIdx <= 1)
            {
               // 24: "(1+(2+(3+4)))*f"
               GenDefFxn(alg, 2/*fltAll=post*/, 0/*fltPos,ignored*/, pluginMask, _bMonoIn);
            }
            else
            {
               // 24: "1+(2+(3+4))*f"
               GenOuter1Fxn(alg, 3/*fltPos=post2*/, pluginMask, _bMonoIn);
            }
         }
         break;
   }
}

function GenDef(int alg) {
   int fltPos = 0;
   loop(8)  // *1..4*
   {
      int pluginMask = 0;
      loop(16)  // ---- .. 4321
      {
         GenDefFxn(alg, 0/*fltAll*/, fltPos, pluginMask, false/*bMono*/);
         GenDefFxn(alg, 0/*fltAll*/, fltPos, pluginMask, true/*bMono*/);
         pluginMask++;
      }
      fltPos++;
   }
}

function GenOuter1(int alg) {
   int fltPos = 0;
   algIntOuter1First = algInt;
   loop(8)  // *1..4*
   {
      int pluginMask = 0;
      loop(16)  // ---- .. 4321
      {
         GenOuter1Fxn(alg, fltPos, pluginMask, false/*bMono*/);
         GenOuter1Fxn(alg, fltPos, pluginMask, true/*bMono*/);
         pluginMask++;
      }
      fltPos++;
   }
}

function GenOuter2(int alg) {
   int fltPos = 0;
   algIntOuter2First = algInt;
   loop(8)  // *1..4*
   {
      int pluginMask = 0;
      loop(16)  // ---- .. 4321
      {
         GenOuter2Fxn(alg, fltPos, pluginMask, false/*bMono*/);
         GenOuter2Fxn(alg, fltPos, pluginMask, true/*bMono*/);
         pluginMask++;
      }
      fltPos++;
   }
}

function GenOuter3(int alg) {
   // (note) outer3 = filter before or after entire plugin chain
   algIntOuter3First = algInt;
   int fltPos = 0;
   loop(8)
   {
      int pluginMask = 0;
      loop(16)  // ---- .. 4321
      {
         if(0 == (fltPos>>1))
         {
            GenDefFxn(alg, (0 == fltPos) ? 1/*pre*/:2/*post*/, 0/*fltPos,ignored*/, pluginMask, false/*bMono*/);
            GenDefFxn(alg, (0 == fltPos) ? 1/*pre*/:2/*post*/, 0/*fltPos,ignored*/, pluginMask, true/*bMono*/);
         }
         else
         {
            // repeat table entries for all fltPos
            RepeatTblOuter3(fltPos, pluginMask, false/*bMonoIn*/);
            RepeatTblOuter3(fltPos, pluginMask, true/*bMonoIn*/);
         }
         pluginMask++;
      }
      fltPos++;
   }
}

function GenAll(int _alg) {
   GenDef   (_alg);  // 8*16*2  = 256 entries+fxns
   GenOuter1(_alg);  // 8*16*2  = 256 entries, up to 256 fxns
   GenOuter2(_alg);  // 8*16*2  = 256 entries, up to 256 fxns
   GenOuter3(_alg);  // 8*16*2  = 256 entries, 2*16*2=64 fxns (repeated 4 times)
}

// (note) the internal order differs from the name tables in that the
//         are 'outer' version are interleaved as follows
//         outer1 fx1 pre stereo
//         outer1 fx1 pre mono
//         outer1 fx1 post stereo
//         outer1 fx1 post mono
//         ..
//         outer1 fx4 pre stereo
//         outer1 fx4 pre mono
//         outer1 fx4 post stereo
//         outer1 fx4 post mono
//         ..
//         outer2 fx4 pre stereo
//         outer2 fx4 pre mono
//         outer2 fx4 post stereo
//         outer2 fx4 post mono

// 1:
// ["1+2+3+4",      //  0: def
//  "f*(1+2+3+4)",  //  1: outer 1.1 pre
//  "f*(1+2+3+4)",  //  2: outer 1.2 pre
//  "f*(1+2+3+4)",  //  3: outer 1.3 pre
//  "f*(1+2+3+4)",  //  4: outer 1.4 pre
//  "f*(1+2+3+4)",  //  5: outer 2.1 pre
//  "f*(1+2+3+4)",  //  6: outer 2.2 pre
//  "f*(1+2+3+4)",  //  7: outer 2.3 pre
//  "f*(1+2+3+4)",  //  8: outer 2.4 pre
//  "(1+2+3+4)*f",  //  9: outer 1.1 post
//  "(1+2+3+4)*f",  // 10: outer 1.2 post
//  "(1+2+3+4)*f",  // 11: outer 1.3 post
//  "(1+2+3+4)*f",  // 12: outer 1.4 post
//  "(1+2+3+4)*f",  // 13: outer 2.1 post
//  "(1+2+3+4)*f",  // 14: outer 2.2 post
//  "(1+2+3+4)*f",  // 15: outer 2.3 post
//  "(1+2+3+4)*f",  // 16: outer 2.4 post
//  ],
GenAll(1/*alg*/);
trace "xxx algIntOuter1First="+algIntOuter1First;
trace "xxx algIntOuter2First="+algIntOuter2First;
trace "xxx algIntOuter3First="+algIntOuter3First;


// 2
// ["1+(2+3+4)",       //  0: def
//  "f*(1+(2+3+4))",   //  1: outer 1.1 pre
//  "1+f*(2+3+4)",     //  2: outer 1.2 pre
//  "1+f*(2+3+4)",     //  3: outer 1.3 pre
//  "1+f*(2+3+4)",     //  4: outer 1.4 pre
//  "f*(1+(2+3+4))",   //  5: outer 2.1 pre
//  "f*(1+(2+3+4))",   //  6: outer 2.2 pre
//  "f*(1+(2+3+4))",   //  7: outer 2.3 pre
//  "f*(1+(2+3+4))",   //  8: outer 2.4 pre
//  "(1+(2+3+4))*f",   //  9: outer 1.1 post
//  "1+((2+3+4)*f)",   // 10: outer 1.2 post
//  "1+((2+3+4)*f)",   // 11: outer 1.3 post
//  "1+((2+3+4)*f)",   // 12: outer 1.4 post
//  "(1+((2+3+4))*f",  // 13: outer 2.1 post
//  "(1+((2+3+4))*f",  // 14: outer 2.2 post
//  "(1+((2+3+4))*f",  // 15: outer 2.3 post
//  "(1+((2+3+4))*f",  // 16: outer 2.4 post
//  ],
GenAll(2/*alg*/);


// 3
// ["(1+2+3)+4",      //  0: def
//  "(f*(1+2+3))+4",  //  1: outer 1.1 pre
//  "(f*(1+2+3))+4",  //  2: outer 1.2 pre
//  "(f*(1+2+3))+4",  //  3: outer 1.3 pre
//  "(f*(1+2+3))+4",  //  4: outer 1.4 pre
//  "f*((1+2+3)+4)",  //  5: outer 2.1 pre
//  "f*((1+2+3)+4)",  //  6: outer 2.2 pre
//  "f*((1+2+3)+4)",  //  7: outer 2.3 pre
//  "f*((1+2+3)+4)",  //  8: outer 2.4 pre
//  "((1+2+3)*f)+4",  //  9: outer 1.1 post
//  "((1+2+3)*f)+4",  // 10: outer 1.2 post
//  "((1+2+3)*f)+4",  // 11: outer 1.3 post
//  "((1+2+3)+4)*f",  // 12: outer 1.4 post
//  "((1+2+3)+4)*f",  // 13: outer 2.1 post
//  "((1+2+3)+4)*f",  // 14: outer 2.2 post
//  "((1+2+3)+4)*f",  // 15: outer 2.3 post
//  "((1+2+3)+4)*f",  // 16: outer 2.4 post
//  ],
GenAll(3/*alg*/);


// 4
// ["1+2+(3+4)",      //  0: def
//  "f*(1+2+(3+4))",  //  1: outer 1.1 pre
//  "f*(1+2+(3+4))",  //  2: outer 1.2 pre
//  "1+2+f*(3+4)",    //  3: outer 1.3 pre
//  "1+2+f*(3+4)",    //  4: outer 1.4 pre
//  "f*(1+2+(3+4))",  //  5: outer 2.1 pre
//  "f*(1+2+(3+4))",  //  6: outer 2.2 pre
//  "f*(1+2+(3+4))",  //  7: outer 2.3 pre
//  "f*(1+2+(3+4))",  //  8: outer 2.4 pre
//  "(1+2+(3+4))*f",  //  9: outer 1.1 post
//  "(1+2+(3+4))*f",  // 10: outer 1.2 post
//  "1+2+(3+4)*f",    // 11: outer 1.3 post
//  "1+2+(3+4)*f",    // 12: outer 1.4 post
//  "(1+2+(3+4))*f",  // 13: outer 2.1 post
//  "(1+2+(3+4))*f",  // 14: outer 2.2 post
//  "(1+2+(3+4))*f",  // 15: outer 2.3 post
//  "(1+2+(3+4))*f",  // 16: outer 2.4 post
//  ],
GenAll(4/*alg*/);


// 5
// ["1+(2+3)+4",      //  0: def
//  "f*(1+(2+3)+4)",  //  1: outer 1.1 pre
//  "1+f*(2+3)+4",    //  2: outer 1.2 pre
//  "1+f*(2+3)+4",    //  3: outer 1.3 pre
//  "f*(1+(2+3)+4)",  //  4: outer 1.4 pre
//  "f*(1+(2+3)+4)",  //  5: outer 2.1 pre
//  "f*(1+(2+3)+4)",  //  6: outer 2.2 pre
//  "f*(1+(2+3)+4)",  //  7: outer 2.3 pre
//  "f*(1+(2+3)+4)",  //  8: outer 2.4 pre
//  "(1+(2+3)+4)*f",  //  9: outer 1.1 post
//  "1+(2+3)*f+4",    // 10: outer 1.2 post
//  "1+(2+3)*f+4",    // 11: outer 1.3 post
//  "(1+(2+3)+4)*f",  // 12: outer 1.4 post
//  "(1+(2+3)+4)*f",  // 13: outer 2.1 post
//  "(1+(2+3)+4)*f",  // 14: outer 2.2 post
//  "(1+(2+3)+4)*f",  // 15: outer 2.3 post
//  "(1+(2+3)+4)*f",  // 16: outer 2.4 post
//  ],
GenAll(5/*alg*/);


// 6
// ["(1+2)+3+4",      //  0: def
//  "f*(1+2)+3+4",    //  1: outer 1.1 pre
//  "f*(1+2)+3+4",    //  2: outer 1.2 pre
//  "f*((1+2)+3+4)",  //  3: outer 1.3 pre
//  "f*((1+2)+3+4)",  //  4: outer 1.4 pre
//  "f*((1+2)+3+4)",  //  5: outer 2.1 pre
//  "f*((1+2)+3+4)",  //  6: outer 2.2 pre
//  "f*((1+2)+3+4)",  //  7: outer 2.3 pre
//  "f*((1+2)+3+4)",  //  8: outer 2.4 pre
//  "(1+2)*f+3+4",    //  9: outer 1.1 post
//  "(1+2)*f+3+4",    // 10: outer 1.2 post
//  "((1+2)+3+4)*f",  // 11: outer 1.3 post
//  "((1+2)+3+4)*f",  // 12: outer 1.4 post
//  "((1+2)+3+4)*f",  // 13: outer 2.1 post
//  "((1+2)+3+4)*f",  // 14: outer 2.2 post
//  "((1+2)+3+4)*f",  // 15: outer 2.3 post
//  "((1+2)+3+4)*f",  // 16: outer 2.4 post
//  ],
GenAll(6/*alg*/);


// 7
// ["(1+2)+(3+4)",      //  0: def
//  "f*(1+2)+(3+4)",    //  1: outer 1.1 pre
//  "f*(1+2)+(3+4)",    //  2: outer 1.2 pre
//  "(1+2)+f*(3+4)",    //  3: outer 1.3 pre
//  "(1+2)+f*(3+4)",    //  4: outer 1.4 pre
//  "f*((1+2)+(3+4))",  //  5: outer 2.1 pre
//  "f*((1+2)+(3+4))",  //  6: outer 2.2 pre
//  "f*((1+2)+(3+4))",  //  7: outer 2.3 pre
//  "f*(((1+2)+(3+4))", //  8: outer 2.4 pre
//  "(1+2)*f+(3+4)",    //  9: outer 1.1 post
//  "(1+2)*f+(3+4)",    // 10: outer 1.2 post
//  "(1+2)+(3+4)*f" ,   // 11: outer 1.3 post
//  "(1+2)+(3+4)*f",    // 12: outer 1.4 post
//  "((1+2)+(3+4))*f",  // 13: outer 2.1 post
//  "((1+2)+(3+4))*f",  // 14: outer 2.2 post
//  "((1+2)+(3+4))*f",  // 15: outer 2.3 post
//  "((1+2)+(3+4))*f",  // 16: outer 2.4 post
//  ],
GenAll(7/*alg*/);


// 8
// ["1*(2+3+4)",      //  0: def
//  "f*(1*(2+3+4))",  //  1: outer 1.1 pre
//  "1*f*(2+3+4)",    //  2: outer 1.2 pre
//  "1*f*(2+3+4)",    //  3: outer 1.3 pre
//  "1*f*(2+3+4)",    //  4: outer 1.4 pre
//  "f*(1*(2+3+4))",  //  5: outer 2.1 pre
//  "f*(1*(2+3+4))",  //  6: outer 2.2 pre
//  "f*(1*(2+3+4))",  //  7: outer 2.3 pre
//  "f*(1*(2+3+4))",  //  8: outer 2.4 pre
//  "(1*(2+3+4))*f",  //  9: outer 1.1 post
//  "1*(2+3+4)*f",    // 10: outer 1.2 post
//  "1*(2+3+4)*f",    // 11: outer 1.3 post
//  "1*(2+3+4)*f",    // 12: outer 1.4 post
//  "(1*(2+3+4))*f",  // 13: outer 2.1 post
//  "(1*(2+3+4))*f",  // 14: outer 2.2 post
//  "(1*(2+3+4))*f",  // 15: outer 2.3 post
//  "(1*(2+3+4))*f",  // 16: outer 2.4 post
//  ],
GenAll(8/*alg*/);


// 9
// ["1*(2+3)*4",      //  0: def
//  "f*(1*(2+3)*4)",  //  1: outer 1.1 pre
//  "1*f*(2+3)*4",    //  2: outer 1.2 pre
//  "1*f*(2+3)*4",    //  3: outer 1.3 pre
//  "f*(1*(2+3)*4)",  //  4: outer 1.4 pre
//  "f*(1*(2+3)*4)",  //  5: outer 2.1 pre
//  "f*(1*(2+3)*4)",  //  6: outer 2.2 pre
//  "f*(1*(2+3)*4)",  //  7: outer 2.3 pre
//  "f*(1*(2+3)*4)",  //  8: outer 2.4 pre
//  "(1*(2+3)*4)*f",  //  9: outer 1.1 post
//  "1*(2+3)*f*4",    // 10: outer 1.2 post
//  "1*(2+3)*f*4",    // 11: outer 1.3 post
//  "(1*(2+3)*4)*f",  // 12: outer 1.4 post
//  "(1*(2+3)*4)*f",  // 13: outer 2.1 post
//  "(1*(2+3)*4)*f",  // 14: outer 2.2 post
//  "(1*(2+3)*4)*f",  // 15: outer 2.3 post
//  "(1*(2+3)*4)*f",  // 16: outer 2.4 post
//  ],
GenAll(9/*alg*/);


// 10
// ["(1+2+3)*4",      //  0: def
//  "f*(1+2+3)*4",    //  1: outer 1.1 pre
//  "f*(1+2+3)*4",    //  2: outer 1.2 pre
//  "f*(1+2+3)*4",    //  3: outer 1.3 pre
//  "f*((1+2+3)*4)",  //  4: outer 1.4 pre
//  "f*((1+2+3)*4)",  //  5: outer 2.1 pre
//  "f*((1+2+3)*4)",  //  6: outer 2.2 pre
//  "f*((1+2+3)*4)",  //  7: outer 2.3 pre
//  "f*((1+2+3)*4)",  //  8: outer 2.4 pre
//  "(1+2+3)*f*4",    //  9: outer 1.1 post
//  "(1+2+3)*f*4",    // 10: outer 1.2 post
//  "(1+2+3)*f*4",    // 11: outer 1.3 post
//  "((1+2+3)*4)*f",  // 12: outer 1.4 post
//  "((1+2+3)*4)*f",  // 13: outer 2.1 post
//  "((1+2+3)*4)*f",  // 14: outer 2.2 post
//  "((1+2+3)*4)*f",  // 15: outer 2.3 post
//  "((1+2+3)*4)*f",  // 16: outer 2.4 post
//  ],
GenAll(10/*alg*/);


// 11
// ["(1+2)*3*4",      //  0: def
//  "f*(1+2)*3*4",    //  1: outer 1.1 pre
//  "f*(1+2)*3*4",    //  2: outer 1.2 pre
//  "f*((1+2)*3*4)",  //  3: outer 1.3 pre
//  "f*((1+2)*3*4)",  //  4: outer 1.4 pre
//  "f*((1+2)*3*4)",  //  5: outer 2.1 pre
//  "f*((1+2)*3*4)",  //  6: outer 2.2 pre
//  "f*((1+2)*3*4)",  //  7: outer 2.3 pre
//  "f*((1+2)*3*4)",  //  8: outer 2.4 pre
//  "(1+2)*f*3*4",    //  9: outer 1.1 post
//  "(1+2)*f*3*4",    // 10: outer 1.2 post
//  "((1+2)*3*4)*f",  // 11: outer 1.3 post
//  "((1+2)*3*4)*f",  // 12: outer 1.4 post
//  "((1+2)*3*4)*f",  // 13: outer 2.1 post
//  "((1+2)*3*4)*f",  // 14: outer 2.2 post
//  "((1+2)*3*4)*f",  // 15: outer 2.3 post
//  "((1+2)*3*4)*f",  // 16: outer 2.4 post
//  ],
GenAll(11/*alg*/);


// 12
// ["1+(2*3*4)",      //  0: def
//  "f*(1+(2*3*4))",  //  1: outer 1.1 pre
//  "1+f*(2*3*4)",    //  2: outer 1.2 pre
//  "1+f*(2*3*4)",    //  3: outer 1.3 pre
//  "1+f*(2*3*4)",    //  4: outer 1.4 pre
//  "f*(1+(2*3*4))",  //  5: outer 2.1 pre
//  "f*(1+(2*3*4))",  //  6: outer 2.2 pre
//  "f*(1+(2*3*4))",  //  7: outer 2.3 pre
//  "f*(1+(2*3*4))",  //  8: outer 2.4 pre
//  "(1+(2*3*4))*f",  //  9: outer 1.1 post
//  "1+(2*3*4)*f",    // 10: outer 1.2 post
//  "1+(2*3*4)*f",    // 11: outer 1.3 post
//  "1+(2*3*4)*f",    // 12: outer 1.4 post
//  "(1+(2*3*4))*f",  // 13: outer 2.1 post
//  "(1+(2*3*4))*f",  // 14: outer 2.2 post
//  "(1+(2*3*4))*f",  // 15: outer 2.3 post
//  "(1+(2*3*4))*f",  // 16: outer 2.4 post
//  ],
GenAll(12/*alg*/);


// 13
// ["(1+2)*(3+4)",      //  0: def
//  "f*(1+2)*(3+4)",    //  1: outer 1.1 pre
//  "f*(1+2)*(3+4)",    //  2: outer 1.2 pre
//  "(1+2)*f*(3+4)",    //  3: outer 1.3 pre
//  "(1+2)*f*(3+4)",    //  4: outer 1.4 pre
//  "f*((1+2)*(3+4))",  //  5: outer 2.1 pre
//  "f*((1+2)*(3+4))",  //  6: outer 2.2 pre
//  "f*((1+2)*(3+4))",  //  7: outer 2.3 pre
//  "f*((1+2)*(3+4))",  //  8: outer 2.4 pre
//  "(1+2)*f*(3+4)",    //  9: outer 1.1 post
//  "(1+2)*f*(3+4)",    // 10: outer 1.2 post
//  "(1+2)*(3+4)*f",    // 11: outer 1.3 post
//  "(1+2)*(3+4)*f",    // 12: outer 1.4 post
//  "((1+2)*(3+4))*f",  // 13: outer 2.1 post
//  "((1+2)*(3+4))*f",  // 14: outer 2.2 post
//  "((1+2)*(3+4))*f",  // 15: outer 2.3 post
//  "((1+2)*(3+4))*f",  // 16: outer 2.4 post
//  ],
GenAll(13/*alg*/);


// 14
// ["(1*2)+(3*4)",      //  0: def
//  "f*(1*2)+(3*4)",    //  1: outer 1.1 pre
//  "f*(1*2)+(3*4)",    //  2: outer 1.2 pre
//  "(1*2)+f*(3*4)",    //  3: outer 1.3 pre
//  "(1*2)+f*(3*4)",    //  4: outer 1.4 pre
//  "f*((1*2)+(3*4))",  //  5: outer 2.1 pre
//  "f*((1*2)+(3*4))",  //  6: outer 2.2 pre
//  "f*((1*2)+(3*4))",  //  7: outer 2.3 pre
//  "f*((1*2)+(3*4))",  //  8: outer 2.4 pre
//  "(1*2)*f+(3*4)",    //  9: outer 1.1 post
//  "(1*2)*f+(3*4)",    // 10: outer 1.2 post
//  "(1*2)+(3*4)*f",    // 11: outer 1.3 post
//  "(1*2)+(3*4)*f",    // 12: outer 1.4 post
//  "((1*2)+(3*4))*f",  // 13: outer 2.1 post
//  "((1*2)+(3*4))*f",  // 14: outer 2.2 post
//  "((1*2)+(3*4))*f",  // 15: outer 2.3 post
//  "((1*2)+(3*4))*f",  // 16: outer 2.4 post
//  ],
GenAll(14/*alg*/);


// 15
// ["1+2+(3*4)",        //  0: def
//  "f*(1+2+(3*4))",    //  1: outer 1.1 pre
//  "f*(1+2+(3*4))",    //  2: outer 1.2 pre
//  "1+2+f*(3*4)",      //  3: outer 1.3 pre
//  "1+2+f*(3*4)",      //  4: outer 1.4 pre
//  "f*(1+2+(3*4))",    //  5: outer 2.1 pre
//  "f*(1+2+(3*4))",    //  6: outer 2.2 pre
//  "f*(1+2+(3*4))",    //  7: outer 2.3 pre
//  "f*(1+2+(3*4))",    //  8: outer 2.4 pre
//  "(1+2+(3*4))*f",    //  9: outer 1.1 post
//  "(1+2+(3*4))*f",    // 10: outer 1.2 post
//  "1+2+(3*4)*f",      // 11: outer 1.3 post
//  "1+2+(3*4)*f",      // 12: outer 1.4 post
//  "(1+2+(3*4))*f",    // 13: outer 2.1 post
//  "(1+2+(3*4))*f",    // 14: outer 2.2 post
//  "(1+2+(3*4))*f",    // 15: outer 2.3 post
//  "(1+2+(3*4))*f",    // 16: outer 2.4 post
//  ],
GenAll(15/*alg*/);


// 16
// ["1+(2*3)+4",        //  0: def
//  "f*(1+(2*3)+4)",    //  1: outer 1.1 pre
//  "1+f*(2*3)+4",      //  2: outer 1.2 pre
//  "1+f*(2*3)+4",      //  3: outer 1.3 pre
//  "f*(1+(2*3)+4)",    //  4: outer 1.4 pre
//  "f*(1+(2*3)+4)",    //  5: outer 2.1 pre
//  "f*(1+(2*3)+4)",    //  6: outer 2.2 pre
//  "f*(1+(2*3)+4)",    //  7: outer 2.3 pre
//  "f*(1+(2*3)+4)",    //  8: outer 2.4 pre
//  "(1+(2*3)+4)*f",    //  9: outer 1.1 post
//  "1+(2*3)*f+4",      // 10: outer 1.2 post
//  "1+(2*3)*f+4",      // 11: outer 1.3 post
//  "(1+(2*3)+4)*f",    // 12: outer 1.4 post
//  "(1+(2*3)+4)*f",    // 13: outer 2.1 post
//  "(1+(2*3)+4)*f",    // 14: outer 2.2 post
//  "(1+(2*3)+4)*f",    // 15: outer 2.3 post
//  "(1+(2*3)+4)*f",    // 16: outer 2.4 post
//  ],
GenAll(16/*alg*/);


// 17
// ["(1*2)+3+4",        //  0: def
//  "f*(1*2)+3+4",      //  1: outer 1.1 pre
//  "f*(1*2)+3+4",      //  2: outer 1.2 pre
//  "f*((1*2)+3+4)",    //  3: outer 1.3 pre
//  "f*((1*2)+3+4)",    //  4: outer 1.4 pre
//  "f*((1*2)+3+4)",    //  5: outer 2.1 pre
//  "f*((1*2)+3+4)",    //  6: outer 2.2 pre
//  "f*((1*2)+3+4)",    //  7: outer 2.3 pre
//  "f*((1*2)+3+4)",    //  8: outer 2.4 pre
//  "(1*2)*f+3+4",      //  9: outer 1.1 post
//  "(1*2)*f+3+4",      // 10: outer 1.2 post
//  "((1*2)+3+4)*f",    // 11: outer 1.3 post
//  "((1*2)+3+4)*f",    // 12: outer 1.4 post
//  "((1*2)+3+4)*f",    // 13: outer 2.1 post
//  "((1*2)+3+4)*f",    // 14: outer 2.2 post
//  "((1*2)+3+4)*f",    // 15: outer 2.3 post
//  "((1*2)+3+4)*f",    // 16: outer 2.4 post
//  ],
GenAll(17/*alg*/);


// 18
// ["(1*(2+3))+4",      //  0: def
//  "f*(1*(2+3))+4",    //  1: outer 1.1 pre
//  "(1*f*(2+3))+4",    //  2: outer 1.2 pre
//  "(1*f*(2+3))+4",    //  3: outer 1.3 pre
//  "f*((1*(2+3))+4)",  //  4: outer 1.4 pre
//  "f*((1*(2+3))+4)",  //  5: outer 2.1 pre
//  "f*(1*(2+3))+4",    //  6: outer 2.2 pre
//  "f*(1*(2+3))+4",    //  7: outer 2.3 pre
//  "f*((1*(2+3))+4)",  //  8: outer 2.4 pre
//  "(1*(2+3))*f+4",    //  9: outer 1.1 post
//  "(1*(2+3)*f)+4",    // 10: outer 1.2 post
//  "(1*(2+3)*f)+4",    // 11: outer 1.3 post
//  "((1*(2+3))+4)*f"   // 12: outer 1.4 post
//  "((1*(2+3))+4)*f",  // 13: outer 2.1 post
//  "(1*(2+3))*f+4",    // 14: outer 2.2 post
//  "(1*(2+3))*f+4",    // 15: outer 2.3 post
//  "((1*(2+3))+4)*f",  // 16: outer 2.4 post
//  ],
GenAll(18/*alg*/);


// 19
// ["((1*2)+3)*4",      //  0: def
//  "(f*(1*2)+3)*4",    //  1: outer 1.1 pre
//  "(f*(1*2)+3)*4",    //  2: outer 1.2 pre
//  "f*((1*2)+3)*4",    //  3: outer 1.3 pre
//  "f*(((1*2)+3)*4)",  //  4: outer 1.4 pre
//  "f*((1*2)+3)*4",    //  5: outer 2.1 pre
//  "f*((1*2)+3)*4",    //  6: outer 2.2 pre
//  "f*(((1*2)+3)*4)"   //  7: outer 2.3 pre
//  "f*(((1*2)+3)*4)",  //  8: outer 2.4 pre
//  "((1*2)*f+3)*4",    //  9: outer 1.1 post
//  "((1*2)*f+3)*4",    // 10: outer 1.2 post
//  "((1*2)+3)*f*4",    // 11: outer 1.3 post
//  "(((1*2)+3)*4)*f"   // 12: outer 1.4 post
//  "((1*2)+3)*f*4",    // 13: outer 2.1 post
//  "((1*2)+3)*f*4",    // 14: outer 2.2 post
//  "(((1*2)+3)*4)*f"   // 15: outer 2.3 post
//  "(((1*2)+3)*4)*f",  // 16: outer 2.4 post
//  ],
GenAll(19/*alg*/);


// 20
// ["(1+(2*3))*4",      //  0: def
//  "f*(1+(2*3))*4",    //  1: outer 1.1 pre
//  "(1+f*(2*3))*4",    //  2: outer 1.2 pre
//  "(1+f*(2*3))*4",    //  3: outer 1.3 pre
//  "(1+(2*3))*4*f ",   //  4: outer 1.4 pre
//  "f*(1+(2*3))*4",    //  5: outer 2.1 pre
//  "f*(1+(2*3))*4",    //  6: outer 2.2 pre
//  "f*(1+(2*3))*4"     //  7: outer 2.3 pre
//  "f*(1+(2*3))*4",    //  8: outer 2.4 pre
//  "(1+(2*3))*f*4",    //  9: outer 1.1 post
//  "(1+(2*3)*f)*4",    // 10: outer 1.2 post
//  "(1+(2*3)*f)*4",    // 11: outer 1.3 post
//  "(1+(2*3))*4*f"  ,  // 12: outer 1.4 post
//  "(1+(2*3))*4*f",    // 13: outer 2.1 post
//  "(1+(2*3))*4*f",    // 14: outer 2.2 post
//  "(1+(2*3))*4*f",    // 15: outer 2.3 post
//  "(1+(2*3))*4*f",    // 16: outer 2.4 post
//  ],
GenAll(20/*alg*/);


// 21
// ["1+((2+3)*4)",      //  0: def
//  "f*(1+((2+3)*4))",  //  1: outer 1.1 pre
//  "1+(f*(2+3)*4)",    //  2: outer 1.2 pre
//  "1+(f*(2+3)*4)",    //  3: outer 1.3 pre
//  "1+f*((2+3)*4)",    //  4: outer 1.4 pre
//  "f*(1+((2+3)*4))",  //  5: outer 2.1 pre
//  "1+f*((2+3)*4)",    //  6: outer 2.2 pre
//  "1+f*((2+3)*4)"     //  7: outer 2.3 pre
//  "f*(1+((2+3)*4))",  //  8: outer 2.4 pre
//  "(1+((2+3)*4))*f",  //  9: outer 1.1 post
//  "1+((2+3)*f*4)",    // 10: outer 1.2 post
//  "1+((2+3)*f*4)",    // 11: outer 1.3 post
//  "1+((2+3)*4)*f"  ,  // 12: outer 1.4 post
//  "(1+((2+3)*4))*f",  // 13: outer 2.1 post
//  "1+((2+3)*4)*f",    // 14: outer 2.2 post
//  "1+((2+3)*4)*f",    // 15: outer 2.3 post
//  "(1+((2+3)*4))*f",  // 16: outer 2.4 post
//  ],
GenAll(21/*alg*/);


// 22
// ["1+(2*(3+4))",      //  0: def
//  "f*(1+(2*(3+4)))",  //  1: outer 1.1 pre
//  "1+f*(2*(3+4))",    //  2: outer 1.2 pre
//  "1+(2*f*(3+4))",    //  3: outer 1.3 pre
//  "1+(2*f*(3+4))",    //  4: outer 1.4 pre
//  "f*(1+(2*(3+4)))",  //  5: outer 2.1 pre
//  "f*(1+(2*(3+4)))",  //  6: outer 2.2 pre
//  "1+f*(2*(3+4))",    //  7: outer 2.3 pre
//  "1+f*(2*(3+4))",    //  8: outer 2.4 pre
//  "(1+(2*(3+4)))*f",  //  9: outer 1.1 post
//  "1+(2*(3+4))*f",    // 10: outer 1.2 post
//  "1+(2*(3+4)*f)",    // 11: outer 1.3 post
//  "1+(2*(3+4)*f)",    // 12: outer 1.4 post
//  "(1+(2*(3+4)))*f",  // 13: outer 2.1 post
//  "(1+(2*(3+4)))*f"   // 14: outer 2.2 post
//  "1+(2*(3+4))*f",    // 15: outer 2.3 post
//  "1+(2*(3+4))*f",    // 16: outer 2.4 post
//  ],
GenAll(22/*alg*/);


// 23
// ["1*(2+(3*4))",      //  0: def
//  "f*(1*(2+(3*4)))",  //  1: outer 1.1 pre
//  "1*f*(2+(3*4))",    //  2: outer 1.2 pre
//  "1*(2+f*(3*4))",    //  3: outer 1.3 pre
//  "1*(2+f*(3*4))",    //  4: outer 1.4 pre
//  "f*(1*(2+(3*4)))",  //  5: outer 2.1 pre
//  "f*(1*(2+(3*4)))",  //  6: outer 2.2 pre
//  "1*f*(2+(3*4))",    //  7: outer 2.3 pre
//  "1*f*(2+(3*4))",    //  8: outer 2.4 pre
//  "(1*(2+(3*4)))*f",  //  9: outer 1.1 post
//  "1*(2+(3*4))*f",    // 10: outer 1.2 post
//  "1*(2+(3*4)*f)",    // 11: outer 1.3 post
//  "1*(2+(3*4)*f)",    // 12: outer 1.4 post
//  "(1*(2+(3*4)))*f",  // 13: outer 2.1 post
//  "(1*(2+(3*4)))*f"   // 14: outer 2.2 post
//  "1*(2+(3*4))*f",    // 15: outer 2.3 post
//  "1*(2+(3*4))*f",    // 16: outer 2.4 post
//  ],
GenAll(23/*alg*/);


// 24
// ["1+(2+(3+4))",      //  0: def
//  "f*(1+(2+(3+4)))",  //  1: outer 1.1 pre
//  "1+f*(2+(3+4))",    //  2: outer 1.2 pre
//  "1+(2+f*(3+4))",    //  3: outer 1.3 pre
//  "1+(2+f*(3+4))",    //  4: outer 1.4 pre
//  "f*(1+(2+(3+4)))",  //  5: outer 2.1 pre
//  "f*(1+(2+(3+4)))",  //  6: outer 2.2 pre
//  "1+f*(2+(3+4))",    //  7: outer 2.3 pre
//  "1+f*(2+(3+4))",    //  8: outer 2.4 pre
//  "(1+(2+(3+4)))*f",  //  9: outer 1.1 post
//  "1+(2+(3+4))*f",    // 10: outer 1.2 post
//  "1+(2+(3+4)*f)",    // 11: outer 1.3 post
//  "1+(2+(3+4)*f)",    // 12: outer 1.4 post
//  "(1+(2+(3+4)))*f",  // 13: outer 2.1 post
//  "(1+(2+(3+4)))*f",  // 14: outer 2.2 post
//  "1+(2+(3+4))*f",    // 15: outer 2.3 post
//  "1+(2+(3+4))*f",    // 16: outer 2.4 post
//  ],
GenAll(24/*alg*/);




//
// done
//
SaveBufFxn();

bufHdr.replace("$TBL", String(algInt));
bufTbl.append("};\n");
buf.append(bufTbl);
buf.replace("$FXN", String(total_num_fxns));
buf.replace("$TBL", String(algInt));

trace "[...] generated "+total_num_fxns+" methods and "+algInt+" table entries ("+buf.numIndicesOf("\n")+" LOC)";


buf.saveLocal("autogen_stsamplevoice_alg_int/index.cpp");
trace "[...] wrote \"autogen_stsamplevoice_alg_int/index.cpp\"";
bufHdr.saveLocal("autogen_stsamplevoice_alg_int/index.h");
trace "[...] wrote \"autogen_stsamplevoice_alg_int/index.h\"";
