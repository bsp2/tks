// ---- ying_tksampler_StPluginLibrary.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 23:42:34)

#ifndef YAC_NO_HOST
sSI   YAC_CALL StPluginLibrary__open(void *, yacmemptr             );
void  YAC_CALL StPluginLibrary__close(void *                       );
void  YAC_CALL StPluginLibrary__getPluginInfoByIndex(void *, yacmemptr, YAC_Value *);
#endif // YAC_NO_HOST

// ------------------ YAC class "StPluginLibrary" reflection map (implementation) ------------------
sUI          YAC_VCALL StPluginLibrary::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL StPluginLibrary::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL StPluginLibrary::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL StPluginLibrary::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL StPluginLibrary::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL StPluginLibrary::yacMethodGetNum                  (void) {return 4;}
const char **YAC_VCALL StPluginLibrary::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "open", "close", "getPluginInfoByIndex"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StPluginLibrary::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 1, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL StPluginLibrary::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={3,};static const sUI rt2[]={0,};static const sUI rt3[]={1,};static const sUI *r[]={rt0, rt1, rt2, rt3}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL StPluginLibrary::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={"String",};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StPluginLibrary::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 1, 0, 4}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL StPluginLibrary::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL StPluginLibrary::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)StPluginLibrary__open, (void*)StPluginLibrary__close, (void*)StPluginLibrary__getPluginInfoByIndex}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL StPluginLibrary::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL StPluginLibrary::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL StPluginLibrary::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL StPluginLibrary::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(StPluginLibrary, "StPluginLibrary");

#ifndef YAC_NO_HOST
sSI   YAC_CALL StPluginLibrary__open(void *_o, yacmemptr _args               ) {if(YAC_BCHK(_args.mem[0].o, YAC_CLID_STRING)){ return (sSI)((StPluginLibrary*)_o)->open((YAC_String*)_args.mem[0].o);}return 0;}
void  YAC_CALL StPluginLibrary__close(void *_o                               ) {((StPluginLibrary*)_o)->close();}
void  YAC_CALL StPluginLibrary__getPluginInfoByIndex(void *_o, yacmemptr _args, YAC_Value *_r) {((StPluginLibrary*)_o)->getPluginInfoByIndex(_args.mem[0].si, _r);}
#endif // YAC_NO_HOST
