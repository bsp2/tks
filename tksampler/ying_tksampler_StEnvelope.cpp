// ---- ying_tksampler_StEnvelope.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 23:42:34)

#ifndef YAC_NO_HOST
void* YAC_CALL StEnvelope___getData (void *                        );
void* YAC_CALL StEnvelope___getOrCreateData(void *                 );
void  YAC_CALL StEnvelope___setMetaData(void *, yacmemptr          );
void* YAC_CALL StEnvelope___getMetaData(void *                     );
sF32  YAC_CALL StEnvelope___getIntensity(void *                    );
void  YAC_CALL StEnvelope___setIntensity(void *, yacmemptr         );
sF32  YAC_CALL StEnvelope___getTimescale(void *                    );
void  YAC_CALL StEnvelope___setTimescale(void *, yacmemptr         );
sF32  YAC_CALL StEnvelope___getTimescaleMillisec(void *            );
void  YAC_CALL StEnvelope___setTimescaleMillisec(void *, yacmemptr );
sF32  YAC_CALL StEnvelope___getExponent(void *                     );
void  YAC_CALL StEnvelope___setExponent(void *, yacmemptr          );
void  YAC_CALL StEnvelope___setUiPresetName(void *, yacmemptr      );
void* YAC_CALL StEnvelope___getUiPresetName(void *                 );
#endif // YAC_NO_HOST

// ------------------ YAC class "StEnvelope" reflection map (implementation) ------------------
sUI          YAC_VCALL StEnvelope::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL StEnvelope::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL StEnvelope::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL StEnvelope::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL StEnvelope::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL StEnvelope::yacMethodGetNum                  (void) {return 15;}
const char **YAC_VCALL StEnvelope::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "getData", "getOrCreateData", "setMetaData", "getMetaData", "getIntensity", "setIntensity", "getTimescale", "setTimescale", "getTimescaleMillisec", "setTimescaleMillisec", "getExponent", "setExponent", "setUiPresetName", "getUiPresetName"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StEnvelope::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL StEnvelope::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={3,};static const sUI rt4[]={0,};static const sUI rt5[]={0,};static const sUI rt6[]={2,};static const sUI rt7[]={0,};static const sUI rt8[]={2,};static const sUI rt9[]={0,};static const sUI rt10[]={2,};static const sUI rt11[]={0,};static const sUI rt12[]={2,};static const sUI rt13[]={3,};static const sUI rt14[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL StEnvelope::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StEnvelope::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 3, 3, 0, 3, 2, 0, 2, 0, 2, 0, 2, 0, 0, 3}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL StEnvelope::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL StEnvelope::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)StEnvelope___getData, (void*)StEnvelope___getOrCreateData, (void*)StEnvelope___setMetaData, (void*)StEnvelope___getMetaData, (void*)StEnvelope___getIntensity, (void*)StEnvelope___setIntensity, (void*)StEnvelope___getTimescale, (void*)StEnvelope___setTimescale, (void*)StEnvelope___getTimescaleMillisec, (void*)StEnvelope___setTimescaleMillisec, (void*)StEnvelope___getExponent, (void*)StEnvelope___setExponent, (void*)StEnvelope___setUiPresetName, (void*)StEnvelope___getUiPresetName}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL StEnvelope::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL StEnvelope::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL StEnvelope::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL StEnvelope::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(StEnvelope, "StEnvelope");

#ifndef YAC_NO_HOST
void* YAC_CALL StEnvelope___getData (void *_o                                ) {return (void*)((StEnvelope*)_o)->_getData();}
void* YAC_CALL StEnvelope___getOrCreateData(void *_o                         ) {return (void*)((StEnvelope*)_o)->_getOrCreateData();}
void  YAC_CALL StEnvelope___setMetaData(void *_o, yacmemptr _args            ) {((StEnvelope*)_o)->_setMetaData(_args.mem[0].o);}
void* YAC_CALL StEnvelope___getMetaData(void *_o                             ) {return (void*)((StEnvelope*)_o)->_getMetaData();}
sF32  YAC_CALL StEnvelope___getIntensity(void *_o                            ) {return (sF32)((StEnvelope*)_o)->_getIntensity();}
void  YAC_CALL StEnvelope___setIntensity(void *_o, yacmemptr _args           ) {((StEnvelope*)_o)->_setIntensity(_args.mem[0].f32);}
sF32  YAC_CALL StEnvelope___getTimescale(void *_o                            ) {return (sF32)((StEnvelope*)_o)->_getTimescale();}
void  YAC_CALL StEnvelope___setTimescale(void *_o, yacmemptr _args           ) {((StEnvelope*)_o)->_setTimescale(_args.mem[0].f32);}
sF32  YAC_CALL StEnvelope___getTimescaleMillisec(void *_o                    ) {return (sF32)((StEnvelope*)_o)->_getTimescaleMillisec();}
void  YAC_CALL StEnvelope___setTimescaleMillisec(void *_o, yacmemptr _args   ) {((StEnvelope*)_o)->_setTimescaleMillisec(_args.mem[0].f32);}
sF32  YAC_CALL StEnvelope___getExponent(void *_o                             ) {return (sF32)((StEnvelope*)_o)->_getExponent();}
void  YAC_CALL StEnvelope___setExponent(void *_o, yacmemptr _args            ) {((StEnvelope*)_o)->_setExponent(_args.mem[0].f32);}
void  YAC_CALL StEnvelope___setUiPresetName(void *_o, yacmemptr _args        ) {((StEnvelope*)_o)->_setUiPresetName(_args.mem[0].o);}
void* YAC_CALL StEnvelope___getUiPresetName(void *_o                         ) {return (void*)((StEnvelope*)_o)->_getUiPresetName();}
#endif // YAC_NO_HOST
