// ---- ying_tksampler_StSampleBank.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 23:42:34)

#ifndef YAC_NO_HOST
void  YAC_CALL StSampleBank___freeSamples(void *                   );
void  YAC_CALL StSampleBank___freeMutexGroups(void *               );
void* YAC_CALL StSampleBank___getFirstSample(void *                );
void  YAC_CALL StSampleBank___unlinkFirstSample(void *, YAC_Value *);
void* YAC_CALL StSampleBank___getSampleByIdx(void *, yacmemptr     );
sSI   YAC_CALL StSampleBank___getSampleIdx(void *, yacmemptr       );
void  YAC_CALL StSampleBank___addSample(void *, yacmemptr          );
void  YAC_CALL StSampleBank___addSampleAfter(void *, yacmemptr     );
void  YAC_CALL StSampleBank___removeSample(void *, yacmemptr       );
sSI   YAC_CALL StSampleBank___getNumSamples(void *                 );
void  YAC_CALL StSampleBank___setEnableSkipRange(void *, yacmemptr );
void  YAC_CALL StSampleBank___swapSamples(void *, yacmemptr        );
void* YAC_CALL StSampleBank___getFirstMutexGroup(void *            );
void* YAC_CALL StSampleBank___getMutexGroupByIdx(void *, yacmemptr );
void  YAC_CALL StSampleBank___addMutexGroup(void *, yacmemptr      );
void  YAC_CALL StSampleBank___removeMutexGroup(void *, yacmemptr   );
sSI   YAC_CALL StSampleBank___getMutexGroupIndexByObject(void *, yacmemptr);
sSI   YAC_CALL StSampleBank___getNumMutexGroups(void *             );
void* YAC_CALL StSampleBank___getName(void *                       );
void  YAC_CALL StSampleBank___setName(void *, yacmemptr            );
void  YAC_CALL StSampleBank___setMaxVoices(void *, yacmemptr       );
sSI   YAC_CALL StSampleBank___getMaxVoices(void *                  );
void  YAC_CALL StSampleBank___setTranspose(void *, yacmemptr       );
sF32  YAC_CALL StSampleBank___getTranspose(void *                  );
void  YAC_CALL StSampleBank___setFreqRandAmount(void *, yacmemptr  );
sF32  YAC_CALL StSampleBank___getFreqRandAmount(void *             );
void  YAC_CALL StSampleBank___setVolume(void *, yacmemptr          );
sF32  YAC_CALL StSampleBank___getVolume(void *                     );
void  YAC_CALL StSampleBank___setVolumeRandAmount(void *, yacmemptr);
sF32  YAC_CALL StSampleBank___getVolumeRandAmount(void *           );
void  YAC_CALL StSampleBank___setPan(void *, yacmemptr             );
sF32  YAC_CALL StSampleBank___getPan(void *                        );
void  YAC_CALL StSampleBank___setPanRandAmount(void *, yacmemptr   );
sF32  YAC_CALL StSampleBank___getPanRandAmount(void *              );
void  YAC_CALL StSampleBank___setSampleOffsetRandAmount(void *, yacmemptr);
sF32  YAC_CALL StSampleBank___getSampleOffsetRandAmount(void *     );
void  YAC_CALL StSampleBank___setEnableRealloc(void *, yacmemptr   );
sSI   YAC_CALL StSampleBank___getEnableRealloc(void *              );
void  YAC_CALL StSampleBank___setEnableUniqueNotes(void *, yacmemptr);
sSI   YAC_CALL StSampleBank___getEnableUniqueNotes(void *          );
void  YAC_CALL StSampleBank__updateAltGroups(void *                );
sSI   YAC_CALL StSampleBank___getNumAltGroups(void *               );
void  YAC_CALL StSampleBank___setEnablePerfCtlFreezeNoteOff(void *, yacmemptr);
sSI   YAC_CALL StSampleBank___getEnablePerfCtlFreezeNoteOff(void * );
sSI   YAC_CALL StSampleBank___setTuningTable(void *, yacmemptr     );
void  YAC_CALL StSampleBank___getTuningTable(void *, yacmemptr, YAC_Value *);
void  YAC_CALL StSampleBank___setDefaultTuningTableIdx(void *, yacmemptr);
sSI   YAC_CALL StSampleBank___getDefaultTuningTableIdx(void *      );
void  YAC_CALL StSampleBank___setForcedTuningTableIdx(void *, yacmemptr);
sSI   YAC_CALL StSampleBank___getForcedTuningTableIdx(void *       );
void  YAC_CALL StSampleBank___setTuningTableMetaData(void *, yacmemptr);
void* YAC_CALL StSampleBank___getTuningTableMetaData(void *, yacmemptr);
void  YAC_CALL StSampleBank___freeTuningTables(void *              );
void  YAC_CALL StSampleBank___freeTuningTablesMetaData(void *      );
#endif // YAC_NO_HOST

// ------------------ YAC class "StSampleBank" reflection map (implementation) ------------------
sUI          YAC_VCALL StSampleBank::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL StSampleBank::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL StSampleBank::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL StSampleBank::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL StSampleBank::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL StSampleBank::yacMethodGetNum                  (void) {return 55;}
const char **YAC_VCALL StSampleBank::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "freeSamples", "freeMutexGroups", "getFirstSample", "unlinkFirstSample", "getSampleByIdx", "getSampleIdx", "addSample", "addSampleAfter", "removeSample", "getNumSamples", "setEnableSkipRange", "swapSamples", "getFirstMutexGroup", "getMutexGroupByIdx", "addMutexGroup", "removeMutexGroup", "getMutexGroupIndexByObject", "getNumMutexGroups", "getName", "setName", "setMaxVoices", "getMaxVoices", "setTranspose", "getTranspose", "setFreqRandAmount", "getFreqRandAmount", "setVolume", "getVolume", "setVolumeRandAmount", "getVolumeRandAmount", "setPan", "getPan", "setPanRandAmount", "getPanRandAmount", "setSampleOffsetRandAmount", "getSampleOffsetRandAmount", "setEnableRealloc", "getEnableRealloc", "setEnableUniqueNotes", "getEnableUniqueNotes", "updateAltGroups", "getNumAltGroups", "setEnablePerfCtlFreezeNoteOff", "getEnablePerfCtlFreezeNoteOff", "setTuningTable", "getTuningTable", "setDefaultTuningTableIdx", "getDefaultTuningTableIdx", "setForcedTuningTableIdx", "getForcedTuningTableIdx", "setTuningTableMetaData", "getTuningTableMetaData", "freeTuningTables", "freeTuningTablesMetaData"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StSampleBank::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 0, 1, 1, 1, 2, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 2, 1, 1, 0, 1, 0, 2, 1, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL StSampleBank::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={0,};static const sUI rt5[]={1,};static const sUI rt6[]={3,};static const sUI rt7[]={3,};static const sUI rt8[]={3, 3,};static const sUI rt9[]={3,};static const sUI rt10[]={0,};static const sUI rt11[]={1,};static const sUI rt12[]={1,};static const sUI rt13[]={0,};static const sUI rt14[]={1,};static const sUI rt15[]={3,};static const sUI rt16[]={3,};static const sUI rt17[]={3,};static const sUI rt18[]={0,};static const sUI rt19[]={0,};static const sUI rt20[]={3,};static const sUI rt21[]={1,};static const sUI rt22[]={0,};static const sUI rt23[]={2,};static const sUI rt24[]={0,};static const sUI rt25[]={2,};static const sUI rt26[]={0,};static const sUI rt27[]={2,};static const sUI rt28[]={0,};static const sUI rt29[]={2,};static const sUI rt30[]={0,};static const sUI rt31[]={2,};static const sUI rt32[]={0,};static const sUI rt33[]={2,};static const sUI rt34[]={0,};static const sUI rt35[]={2,};static const sUI rt36[]={0,};static const sUI rt37[]={1,};static const sUI rt38[]={0,};static const sUI rt39[]={1,};static const sUI rt40[]={0,};static const sUI rt41[]={0,};static const sUI rt42[]={0,};static const sUI rt43[]={1,};static const sUI rt44[]={0,};static const sUI rt45[]={1, 3,};static const sUI rt46[]={1,};static const sUI rt47[]={1,};static const sUI rt48[]={0,};static const sUI rt49[]={1,};static const sUI rt50[]={0,};static const sUI rt51[]={1, 3,};static const sUI rt52[]={1,};static const sUI rt53[]={0,};static const sUI rt54[]={0,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18, rt19, rt20, rt21, rt22, rt23, rt24, rt25, rt26, rt27, rt28, rt29, rt30, rt31, rt32, rt33, rt34, rt35, rt36, rt37, rt38, rt39, rt40, rt41, rt42, rt43, rt44, rt45, rt46, rt47, rt48, rt49, rt50, rt51, rt52, rt53, rt54}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL StSampleBank::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0, (const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0,};static const char *rs16[]={(const char*)0,};static const char *rs17[]={(const char*)0,};static const char *rs18[]={(const char*)0,};static const char *rs19[]={(const char*)0,};static const char *rs20[]={(const char*)0,};static const char *rs21[]={(const char*)0,};static const char *rs22[]={(const char*)0,};static const char *rs23[]={(const char*)0,};static const char *rs24[]={(const char*)0,};static const char *rs25[]={(const char*)0,};static const char *rs26[]={(const char*)0,};static const char *rs27[]={(const char*)0,};static const char *rs28[]={(const char*)0,};static const char *rs29[]={(const char*)0,};static const char *rs30[]={(const char*)0,};static const char *rs31[]={(const char*)0,};static const char *rs32[]={(const char*)0,};static const char *rs33[]={(const char*)0,};static const char *rs34[]={(const char*)0,};static const char *rs35[]={(const char*)0,};static const char *rs36[]={(const char*)0,};static const char *rs37[]={(const char*)0,};static const char *rs38[]={(const char*)0,};static const char *rs39[]={(const char*)0,};static const char *rs40[]={(const char*)0,};static const char *rs41[]={(const char*)0,};static const char *rs42[]={(const char*)0,};static const char *rs43[]={(const char*)0,};static const char *rs44[]={(const char*)0,};static const char *rs45[]={(const char*)0, (const char*)0,};static const char *rs46[]={(const char*)0,};static const char *rs47[]={(const char*)0,};static const char *rs48[]={(const char*)0,};static const char *rs49[]={(const char*)0,};static const char *rs50[]={(const char*)0,};static const char *rs51[]={(const char*)0, (const char*)0,};static const char *rs52[]={(const char*)0,};static const char *rs53[]={(const char*)0,};static const char *rs54[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15, rs16, rs17, rs18, rs19, rs20, rs21, rs22, rs23, rs24, rs25, rs26, rs27, rs28, rs29, rs30, rs31, rs32, rs33, rs34, rs35, rs36, rs37, rs38, rs39, rs40, rs41, rs42, rs43, rs44, rs45, rs46, rs47, rs48, rs49, rs50, rs51, rs52, rs53, rs54}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StSampleBank::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 3, 4, 3, 1, 0, 0, 0, 1, 0, 0, 3, 3, 0, 0, 1, 1, 3, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 1, 4, 0, 1, 0, 1, 0, 3, 0, 0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL StSampleBank::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL StSampleBank::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)StSampleBank___freeSamples, (void*)StSampleBank___freeMutexGroups, (void*)StSampleBank___getFirstSample, (void*)StSampleBank___unlinkFirstSample, (void*)StSampleBank___getSampleByIdx, (void*)StSampleBank___getSampleIdx, (void*)StSampleBank___addSample, (void*)StSampleBank___addSampleAfter, (void*)StSampleBank___removeSample, (void*)StSampleBank___getNumSamples, (void*)StSampleBank___setEnableSkipRange, (void*)StSampleBank___swapSamples, (void*)StSampleBank___getFirstMutexGroup, (void*)StSampleBank___getMutexGroupByIdx, (void*)StSampleBank___addMutexGroup, (void*)StSampleBank___removeMutexGroup, (void*)StSampleBank___getMutexGroupIndexByObject, (void*)StSampleBank___getNumMutexGroups, (void*)StSampleBank___getName, (void*)StSampleBank___setName, (void*)StSampleBank___setMaxVoices, (void*)StSampleBank___getMaxVoices, (void*)StSampleBank___setTranspose, (void*)StSampleBank___getTranspose, (void*)StSampleBank___setFreqRandAmount, (void*)StSampleBank___getFreqRandAmount, (void*)StSampleBank___setVolume, (void*)StSampleBank___getVolume, (void*)StSampleBank___setVolumeRandAmount, (void*)StSampleBank___getVolumeRandAmount, (void*)StSampleBank___setPan, (void*)StSampleBank___getPan, (void*)StSampleBank___setPanRandAmount, (void*)StSampleBank___getPanRandAmount, (void*)StSampleBank___setSampleOffsetRandAmount, (void*)StSampleBank___getSampleOffsetRandAmount, (void*)StSampleBank___setEnableRealloc, (void*)StSampleBank___getEnableRealloc, (void*)StSampleBank___setEnableUniqueNotes, (void*)StSampleBank___getEnableUniqueNotes, (void*)StSampleBank__updateAltGroups, (void*)StSampleBank___getNumAltGroups, (void*)StSampleBank___setEnablePerfCtlFreezeNoteOff, (void*)StSampleBank___getEnablePerfCtlFreezeNoteOff, (void*)StSampleBank___setTuningTable, (void*)StSampleBank___getTuningTable, (void*)StSampleBank___setDefaultTuningTableIdx, (void*)StSampleBank___getDefaultTuningTableIdx, (void*)StSampleBank___setForcedTuningTableIdx, (void*)StSampleBank___getForcedTuningTableIdx, (void*)StSampleBank___setTuningTableMetaData, (void*)StSampleBank___getTuningTableMetaData, (void*)StSampleBank___freeTuningTables, (void*)StSampleBank___freeTuningTablesMetaData}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL StSampleBank::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL StSampleBank::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL StSampleBank::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL StSampleBank::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(StSampleBank, "StSampleBank");

#ifndef YAC_NO_HOST
void  YAC_CALL StSampleBank___freeSamples(void *_o                           ) {((StSampleBank*)_o)->_freeSamples();}
void  YAC_CALL StSampleBank___freeMutexGroups(void *_o                       ) {((StSampleBank*)_o)->_freeMutexGroups();}
void* YAC_CALL StSampleBank___getFirstSample(void *_o                        ) {return (void*)((StSampleBank*)_o)->_getFirstSample();}
void  YAC_CALL StSampleBank___unlinkFirstSample(void *_o, YAC_Value *_r      ) {((StSampleBank*)_o)->_unlinkFirstSample(_r);}
void* YAC_CALL StSampleBank___getSampleByIdx(void *_o, yacmemptr _args       ) {return (void*)((StSampleBank*)_o)->_getSampleByIdx(_args.mem[0].si);}
sSI   YAC_CALL StSampleBank___getSampleIdx(void *_o, yacmemptr _args         ) {return (sSI)((StSampleBank*)_o)->_getSampleIdx(_args.mem[0].o);}
void  YAC_CALL StSampleBank___addSample(void *_o, yacmemptr _args            ) {((StSampleBank*)_o)->_addSample(_args.mem[0].o);}
void  YAC_CALL StSampleBank___addSampleAfter(void *_o, yacmemptr _args       ) {((StSampleBank*)_o)->_addSampleAfter(_args.mem[0].o, _args.mem[1].o);}
void  YAC_CALL StSampleBank___removeSample(void *_o, yacmemptr _args         ) {((StSampleBank*)_o)->_removeSample(_args.mem[0].o);}
sSI   YAC_CALL StSampleBank___getNumSamples(void *_o                         ) {return (sSI)((StSampleBank*)_o)->_getNumSamples();}
void  YAC_CALL StSampleBank___setEnableSkipRange(void *_o, yacmemptr _args   ) {((StSampleBank*)_o)->_setEnableSkipRange(_args.mem[0].si);}
void  YAC_CALL StSampleBank___swapSamples(void *_o, yacmemptr _args          ) {((StSampleBank*)_o)->_swapSamples(_args.mem[0].si);}
void* YAC_CALL StSampleBank___getFirstMutexGroup(void *_o                    ) {return (void*)((StSampleBank*)_o)->_getFirstMutexGroup();}
void* YAC_CALL StSampleBank___getMutexGroupByIdx(void *_o, yacmemptr _args   ) {return (void*)((StSampleBank*)_o)->_getMutexGroupByIdx(_args.mem[0].si);}
void  YAC_CALL StSampleBank___addMutexGroup(void *_o, yacmemptr _args        ) {((StSampleBank*)_o)->_addMutexGroup(_args.mem[0].o);}
void  YAC_CALL StSampleBank___removeMutexGroup(void *_o, yacmemptr _args     ) {((StSampleBank*)_o)->_removeMutexGroup(_args.mem[0].o);}
sSI   YAC_CALL StSampleBank___getMutexGroupIndexByObject(void *_o, yacmemptr _args) {return (sSI)((StSampleBank*)_o)->_getMutexGroupIndexByObject(_args.mem[0].o);}
sSI   YAC_CALL StSampleBank___getNumMutexGroups(void *_o                     ) {return (sSI)((StSampleBank*)_o)->_getNumMutexGroups();}
void* YAC_CALL StSampleBank___getName(void *_o                               ) {return (void*)((StSampleBank*)_o)->_getName();}
void  YAC_CALL StSampleBank___setName(void *_o, yacmemptr _args              ) {((StSampleBank*)_o)->_setName(_args.mem[0].o);}
void  YAC_CALL StSampleBank___setMaxVoices(void *_o, yacmemptr _args         ) {((StSampleBank*)_o)->_setMaxVoices(_args.mem[0].si);}
sSI   YAC_CALL StSampleBank___getMaxVoices(void *_o                          ) {return (sSI)((StSampleBank*)_o)->_getMaxVoices();}
void  YAC_CALL StSampleBank___setTranspose(void *_o, yacmemptr _args         ) {((StSampleBank*)_o)->_setTranspose(_args.mem[0].f32);}
sF32  YAC_CALL StSampleBank___getTranspose(void *_o                          ) {return (sF32)((StSampleBank*)_o)->_getTranspose();}
void  YAC_CALL StSampleBank___setFreqRandAmount(void *_o, yacmemptr _args    ) {((StSampleBank*)_o)->_setFreqRandAmount(_args.mem[0].f32);}
sF32  YAC_CALL StSampleBank___getFreqRandAmount(void *_o                     ) {return (sF32)((StSampleBank*)_o)->_getFreqRandAmount();}
void  YAC_CALL StSampleBank___setVolume(void *_o, yacmemptr _args            ) {((StSampleBank*)_o)->_setVolume(_args.mem[0].f32);}
sF32  YAC_CALL StSampleBank___getVolume(void *_o                             ) {return (sF32)((StSampleBank*)_o)->_getVolume();}
void  YAC_CALL StSampleBank___setVolumeRandAmount(void *_o, yacmemptr _args  ) {((StSampleBank*)_o)->_setVolumeRandAmount(_args.mem[0].f32);}
sF32  YAC_CALL StSampleBank___getVolumeRandAmount(void *_o                   ) {return (sF32)((StSampleBank*)_o)->_getVolumeRandAmount();}
void  YAC_CALL StSampleBank___setPan(void *_o, yacmemptr _args               ) {((StSampleBank*)_o)->_setPan(_args.mem[0].f32);}
sF32  YAC_CALL StSampleBank___getPan(void *_o                                ) {return (sF32)((StSampleBank*)_o)->_getPan();}
void  YAC_CALL StSampleBank___setPanRandAmount(void *_o, yacmemptr _args     ) {((StSampleBank*)_o)->_setPanRandAmount(_args.mem[0].f32);}
sF32  YAC_CALL StSampleBank___getPanRandAmount(void *_o                      ) {return (sF32)((StSampleBank*)_o)->_getPanRandAmount();}
void  YAC_CALL StSampleBank___setSampleOffsetRandAmount(void *_o, yacmemptr _args) {((StSampleBank*)_o)->_setSampleOffsetRandAmount(_args.mem[0].f32);}
sF32  YAC_CALL StSampleBank___getSampleOffsetRandAmount(void *_o             ) {return (sF32)((StSampleBank*)_o)->_getSampleOffsetRandAmount();}
void  YAC_CALL StSampleBank___setEnableRealloc(void *_o, yacmemptr _args     ) {((StSampleBank*)_o)->_setEnableRealloc(_args.mem[0].si);}
sSI   YAC_CALL StSampleBank___getEnableRealloc(void *_o                      ) {return (sSI)((StSampleBank*)_o)->_getEnableRealloc();}
void  YAC_CALL StSampleBank___setEnableUniqueNotes(void *_o, yacmemptr _args ) {((StSampleBank*)_o)->_setEnableUniqueNotes(_args.mem[0].si);}
sSI   YAC_CALL StSampleBank___getEnableUniqueNotes(void *_o                  ) {return (sSI)((StSampleBank*)_o)->_getEnableUniqueNotes();}
void  YAC_CALL StSampleBank__updateAltGroups(void *_o                        ) {((StSampleBank*)_o)->updateAltGroups();}
sSI   YAC_CALL StSampleBank___getNumAltGroups(void *_o                       ) {return (sSI)((StSampleBank*)_o)->_getNumAltGroups();}
void  YAC_CALL StSampleBank___setEnablePerfCtlFreezeNoteOff(void *_o, yacmemptr _args) {((StSampleBank*)_o)->_setEnablePerfCtlFreezeNoteOff(_args.mem[0].si);}
sSI   YAC_CALL StSampleBank___getEnablePerfCtlFreezeNoteOff(void *_o         ) {return (sSI)((StSampleBank*)_o)->_getEnablePerfCtlFreezeNoteOff();}
sSI   YAC_CALL StSampleBank___setTuningTable(void *_o, yacmemptr _args       ) {return (sSI)((StSampleBank*)_o)->_setTuningTable(_args.mem[0].si, _args.mem[1].o);}
void  YAC_CALL StSampleBank___getTuningTable(void *_o, yacmemptr _args, YAC_Value *_r) {((StSampleBank*)_o)->_getTuningTable(_args.mem[0].si, _r);}
void  YAC_CALL StSampleBank___setDefaultTuningTableIdx(void *_o, yacmemptr _args) {((StSampleBank*)_o)->_setDefaultTuningTableIdx(_args.mem[0].si);}
sSI   YAC_CALL StSampleBank___getDefaultTuningTableIdx(void *_o              ) {return (sSI)((StSampleBank*)_o)->_getDefaultTuningTableIdx();}
void  YAC_CALL StSampleBank___setForcedTuningTableIdx(void *_o, yacmemptr _args) {((StSampleBank*)_o)->_setForcedTuningTableIdx(_args.mem[0].si);}
sSI   YAC_CALL StSampleBank___getForcedTuningTableIdx(void *_o               ) {return (sSI)((StSampleBank*)_o)->_getForcedTuningTableIdx();}
void  YAC_CALL StSampleBank___setTuningTableMetaData(void *_o, yacmemptr _args) {((StSampleBank*)_o)->_setTuningTableMetaData(_args.mem[0].si, _args.mem[1].o);}
void* YAC_CALL StSampleBank___getTuningTableMetaData(void *_o, yacmemptr _args) {return (void*)((StSampleBank*)_o)->_getTuningTableMetaData(_args.mem[0].si);}
void  YAC_CALL StSampleBank___freeTuningTables(void *_o                      ) {((StSampleBank*)_o)->_freeTuningTables();}
void  YAC_CALL StSampleBank___freeTuningTablesMetaData(void *_o              ) {((StSampleBank*)_o)->_freeTuningTablesMetaData();}
#endif // YAC_NO_HOST
