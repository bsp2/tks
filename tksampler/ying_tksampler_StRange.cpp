// ---- ying_tksampler_StRange.cpp: auto generated by YInG - the YAC interface generator (Fri, 13/Jun/2025 23:42:34)

#ifndef YAC_NO_HOST
sF32  YAC_CALL StRange___getLo      (void *                        );
void  YAC_CALL StRange___setLo      (void *, yacmemptr             );
sF32  YAC_CALL StRange___getHi      (void *                        );
void  YAC_CALL StRange___setHi      (void *, yacmemptr             );
sF32  YAC_CALL StRange___getFadeIn  (void *                        );
void  YAC_CALL StRange___setFadeIn  (void *, yacmemptr             );
sF32  YAC_CALL StRange___getFadeOut (void *                        );
void  YAC_CALL StRange___setFadeOut (void *, yacmemptr             );
void  YAC_CALL StRange___setEnableNoteOnFilter(void *, yacmemptr   );
sSI   YAC_CALL StRange___getEnableNoteOnFilter(void *              );
sSI   YAC_CALL StRange___isNoteOnFilterEnabled(void *              );
void  YAC_CALL StRange___setEnableHighInclusive(void *, yacmemptr  );
sSI   YAC_CALL StRange___getEnableHighInclusive(void *             );
sF32  YAC_CALL StRange__calcAmount  (void *, yacmemptr             );
#endif // YAC_NO_HOST

// ------------------ YAC class "StRange" reflection map (implementation) ------------------
sUI          YAC_VCALL StRange::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL StRange::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL StRange::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL StRange::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL StRange::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL StRange::yacMethodGetNum                  (void) {return 15;}
const char **YAC_VCALL StRange::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "getLo", "setLo", "getHi", "setHi", "getFadeIn", "setFadeIn", "getFadeOut", "setFadeOut", "setEnableNoteOnFilter", "getEnableNoteOnFilter", "isNoteOnFilterEnabled", "setEnableHighInclusive", "getEnableHighInclusive", "calcAmount"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StRange::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL StRange::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={2,};static const sUI rt3[]={0,};static const sUI rt4[]={2,};static const sUI rt5[]={0,};static const sUI rt6[]={2,};static const sUI rt7[]={0,};static const sUI rt8[]={2,};static const sUI rt9[]={1,};static const sUI rt10[]={0,};static const sUI rt11[]={0,};static const sUI rt12[]={1,};static const sUI rt13[]={0,};static const sUI rt14[]={2,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL StRange::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0,};static const char *rs8[]={(const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0,};static const char *rs12[]={(const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL StRange::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 2, 0, 2, 0, 2, 0, 2, 0, 0, 1, 1, 0, 1, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL StRange::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL StRange::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)StRange___getLo, (void*)StRange___setLo, (void*)StRange___getHi, (void*)StRange___setHi, (void*)StRange___getFadeIn, (void*)StRange___setFadeIn, (void*)StRange___getFadeOut, (void*)StRange___setFadeOut, (void*)StRange___setEnableNoteOnFilter, (void*)StRange___getEnableNoteOnFilter, (void*)StRange___isNoteOnFilterEnabled, (void*)StRange___setEnableHighInclusive, (void*)StRange___getEnableHighInclusive, (void*)StRange__calcAmount}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL StRange::yacConstantGetNum                (void) {return 0;}
const char **YAC_VCALL StRange::yacConstantGetNames              (void) {static const char*r[]={""}; return r;}
const sUI   *YAC_VCALL StRange::yacConstantGetTypes              (void) {static const sUI r[]={0}; return r;}
yacmemptr    YAC_VCALL StRange::yacConstantGetValues             (void) {static sUI r[]={0,};yacmemptr m; m.ui=(sUI*)r; return m;}

YAC_C(StRange, "StRange");

#ifndef YAC_NO_HOST
sF32  YAC_CALL StRange___getLo      (void *_o                                ) {return (sF32)((StRange*)_o)->_getLo();}
void  YAC_CALL StRange___setLo      (void *_o, yacmemptr _args               ) {((StRange*)_o)->_setLo(_args.mem[0].f32);}
sF32  YAC_CALL StRange___getHi      (void *_o                                ) {return (sF32)((StRange*)_o)->_getHi();}
void  YAC_CALL StRange___setHi      (void *_o, yacmemptr _args               ) {((StRange*)_o)->_setHi(_args.mem[0].f32);}
sF32  YAC_CALL StRange___getFadeIn  (void *_o                                ) {return (sF32)((StRange*)_o)->_getFadeIn();}
void  YAC_CALL StRange___setFadeIn  (void *_o, yacmemptr _args               ) {((StRange*)_o)->_setFadeIn(_args.mem[0].f32);}
sF32  YAC_CALL StRange___getFadeOut (void *_o                                ) {return (sF32)((StRange*)_o)->_getFadeOut();}
void  YAC_CALL StRange___setFadeOut (void *_o, yacmemptr _args               ) {((StRange*)_o)->_setFadeOut(_args.mem[0].f32);}
void  YAC_CALL StRange___setEnableNoteOnFilter(void *_o, yacmemptr _args     ) {((StRange*)_o)->_setEnableNoteOnFilter(_args.mem[0].si);}
sSI   YAC_CALL StRange___getEnableNoteOnFilter(void *_o                      ) {return (sSI)((StRange*)_o)->_getEnableNoteOnFilter();}
sSI   YAC_CALL StRange___isNoteOnFilterEnabled(void *_o                      ) {return (sSI)((StRange*)_o)->_isNoteOnFilterEnabled();}
void  YAC_CALL StRange___setEnableHighInclusive(void *_o, yacmemptr _args    ) {((StRange*)_o)->_setEnableHighInclusive(_args.mem[0].si);}
sSI   YAC_CALL StRange___getEnableHighInclusive(void *_o                     ) {return (sSI)((StRange*)_o)->_getEnableHighInclusive();}
sF32  YAC_CALL StRange__calcAmount  (void *_o, yacmemptr _args               ) {return (sF32)((StRange*)_o)->calcAmount(_args.mem[0].f32);}
#endif // YAC_NO_HOST
