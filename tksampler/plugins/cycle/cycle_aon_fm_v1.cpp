// ----
// ---- file   : aon_fm_v1.cpp
// ---- author : bsp
// ---- legal  : Distributed under terms of the MIT license (https://opensource.org/licenses/MIT)
// ----
// ----          Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// ----          associated documentation files (the "Software"), to deal in the Software without restriction, including
// ----          without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// ----          copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to
// ----          the following conditions:
// ----
// ----          The above copyright notice and this permission notice shall be included in all copies or substantial
// ----          portions of the Software.
// ----
// ----          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// ----          NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// ----          IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// ----          WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// ----          SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ----
// ---- info   : auto-generated by "Cycle"
// ----           $ g++ -Wall -Wno-unused-function -Wno-unused-variable -I../../tksampler -c aon_fm_v1.cpp -o aon_fm_v1.o
// ---- created: 21Dec2024 18:32:54
// ----
// ----
// ----

// (note) pre-define CYCLE_SKIP_UI to skip all code used only for UI/editing purposes (e.g. when compiling for standalone replay)
// #define CYCLE_SKIP_UI  defined

#include <plugin.h>

#include <stdlib.h>
#include <math.h>
#include <string.h>
#define OVERSAMPLE_FACTOR  4.0f

#define PARAM_CARRIER_WAVE       0
#define PARAM_CARRIER_FREQ       1
#define PARAM_MOD_WAVE           2
#define PARAM_MOD_FREQ           3
#define PARAM_MOD_AMP            4
#define PARAM_MOD_KBD            5
#define PARAM_CARRIER_KBD        6
#define PARAM_MOD_FLT            7
#define NUM_PARAMS               8
#ifndef CYCLE_SKIP_UI
static const char *loc_param_names[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   +1
#endif
                                   ] = {
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   ""
#else
   "carrier_wave",            // 0: CARRIER_WAVE
   "carrier_freq",            // 1: CARRIER_FREQ
   "mod_wave",                // 2: MOD_WAVE
   "mod_freq",                // 3: MOD_FREQ
   "mod_amp",                 // 4: MOD_AMP
   "mod_kbd",                 // 5: MOD_KBD
   "carrier_kbd",             // 6: CARRIER_KBD
   "mod_flt",                 // 7: MOD_FLT

#endif
};
#endif // CYCLE_SKIP_UI
static float loc_param_resets[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   +1
#endif
                              ] = {
#if defined(_MSC_VER) && 0 == NUM_PARAMS
   0.0f
#else
   0.0f,                      // 0: CARRIER_WAVE
   0.5f,                      // 1: CARRIER_FREQ
   0.0f,                      // 2: MOD_WAVE
   0.5f,                      // 3: MOD_FREQ
   0.5f,                      // 4: MOD_AMP
   0.625f,                    // 5: MOD_KBD
   0.625f,                    // 6: CARRIER_KBD
   0.8f,                      // 7: MOD_FLT

#endif
};

#define MOD_CARRIER_WAVE         0
#define MOD_CARRIER_FREQ         1
#define MOD_MOD_WAVE             2
#define MOD_MOD_FREQ             3
#define MOD_MOD_AMP              4
#define MOD_MOD_FLT              5
#define NUM_MODS                 6
#ifndef CYCLE_SKIP_UI
static const char *loc_mod_names[NUM_MODS
#if defined(_MSC_VER) && 0 == NUM_MODS
   +1
#endif
                                 ] = {
#if defined(_MSC_VER) && 0 == NUM_MODS
   ""
#else
   "carrier_wave",         // 0: CARRIER_WAVE
   "carrier_freq",         // 1: CARRIER_FREQ
   "mod_wave",             // 2: MOD_WAVE
   "mod_freq",             // 3: MOD_FREQ
   "mod_amp",              // 4: MOD_AMP
   "mod_flt",              // 5: MOD_FLT

#endif
};
#endif // CYCLE_SKIP_UI

typedef struct aon_fm_v1_info_s {
   st_plugin_info_t base;
} aon_fm_v1_info_t;

typedef struct aon_fm_v1_shared_s {
   st_plugin_shared_t base;
   float params[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                +1
#endif
                ];

} aon_fm_v1_shared_t;

typedef struct aon_fm_v1_voice_s {
   st_plugin_voice_t base;
   float             sample_rate;
   float             bpm;
   float             velocity;
   float             note_speed_fixed;
   float             note_speed_cur;
   float             note_speed_inc;
   float             note_cur;
   float             note_inc;
   float             mods[NUM_MODS
#if defined(_MSC_VER) && 0 == NUM_MODS
                          +1
#endif
                          ];
   float mod_carrier_wave_cur;
   float mod_carrier_wave_inc;
   float mod_carrier_freq_cur;
   float mod_carrier_freq_inc;
   float mod_mod_wave_cur;
   float mod_mod_wave_inc;
   float mod_mod_freq_cur;
   float mod_mod_freq_inc;
   float mod_mod_amp_cur;
   float mod_mod_amp_inc;
   float mod_mod_flt_cur;
   float mod_mod_flt_inc;

   float tmp1;
   float tmp2;
   float tmp3;
   int tmp4_zlp_pos;
   float tmp5;
   int tmp6;
   float tmp7;
   float tmp8;
   int tmp9_zlp_pos;
   float tmp10;
   int tmp11;
   float tmp12;
   float tmp13;
   float tmp14_svf_lp;
   float tmp15_svf_hp;
   float tmp16_svf_bp;
   float var_x;
   float var_v_carrier_kbd;
   float var_v_mod_kbd;
   float var_v_mod_flt;
   float sr_factor;

} aon_fm_v1_voice_t;

#define loop(X)  for(unsigned int i = 0u; i < (X); i++)
#define clamp(a,b,c) (((a)<(b))?(b):(((a)>(c))?(c):(a)))

static inline float mathLerpf(float _a, float _b, float _t) { return _a + (_b - _a) * _t; }
static inline float mathClampf(float a, float b, float c) { return (((a)<(b))?(b):(((a)>(c))?(c):(a))); }
static inline float mathMinf(float a, float b) { return (a<b)?a:b; }
static inline float mathMaxf(float a, float b) { return (a>b)?a:b; }
static inline float mathAbsMaxf(float _x, float _y) { return ( ( (_x<0.0f)?-_x:_x)>((_y<0.0f)?-_y:_y)?_x:_y ); }
static inline float mathAbsMinf(float _x, float _y) { return ( ((_x<0.0f)?-_x:_x)<((_y<0.0f)?-_y:_y)?_x:_y ); }
static inline float frac(float _x) { return _x - ((int)_x); }

static inline float winLinear(const float *_s, float _index) {
   int idx = (int)_index;
   float r = _index - (float)idx;
   return mathLerpf(_s[idx], _s[idx+1], r);
}

static float ffrac_s(float _f) { int i; if(_f >= 0.0f) { i = (int)_f; return _f - (float)i; } else { i = (int)-_f; return 1.0f - (-_f - (float)i); } }

static float loc_bipolar_to_scale(const float _t, const float _div, const float _mul) {
   // t (-1..1) => /_div .. *_mul
   
   float s;

   if(_t < 0.0f)
   {
      s = (1.0f / _div);
      s = 1.0f + (s - 1.0f) * -_t;
      if(s < 0.0f)
         s = 0.0f;
   }
   else
   {
      s = _mul;
      s = 1.0f + (s - 1.0f) * _t;
   }
   
   return s;
}

static const float loc_smp_aon_fm_oscwaves[1536] = {
   0.0224609f, 0.069519f, 0.116577f, 0.163635f, 0.210693f, 0.257751f, 0.30481f, 0.351868f
   , 0.398926f, 0.445984f, 0.485229f, 0.532257f, 0.571472f, 0.610687f, 0.649902f, 0.681305f
   , 0.72052f, 0.751892f, 0.783264f, 0.814636f, 0.838165f, 0.861725f, 0.885254f, 0.908752f
   , 0.924469f, 0.940155f, 0.955841f, 0.963715f, 0.97937f, 0.987213f, 0.995056f, 0.995087f
   , 0.995087f, 0.995087f, 0.987274f, 0.979431f, 0.971588f, 0.963715f, 0.948059f, 0.932373f
   , 0.908844f, 0.885345f, 0.861816f, 0.838257f, 0.806915f, 0.775543f, 0.744171f, 0.712799f
   , 0.673615f, 0.634399f, 0.602997f, 0.555969f, 0.516754f, 0.477509f, 0.430481f, 0.383423f
   , 0.336365f, 0.29715f, 0.250092f, 0.203033f, 0.155975f, 0.108917f, 0.0618591f, 0.014801f
   , -0.0224609f, -0.069519f, -0.116577f, -0.163635f, -0.210693f, -0.257751f, -0.30481f, -0.351868f
   , -0.398926f, -0.445984f, -0.485199f, -0.532257f, -0.571472f, -0.610687f, -0.649902f, -0.681305f
   , -0.72049f, -0.751892f, -0.783264f, -0.806824f, -0.838165f, -0.861725f, -0.885254f, -0.908752f
   , -0.924469f, -0.940155f, -0.955841f, -0.963715f, -0.97937f, -0.987213f, -0.987244f, -0.987244f
   , -0.987244f, -0.987244f, -0.979431f, -0.971588f, -0.963745f, -0.955872f, -0.940216f, -0.92453f
   , -0.901031f, -0.885315f, -0.861786f, -0.830444f, -0.806915f, -0.775543f, -0.744171f, -0.712799f
   , -0.673615f, -0.642212f, -0.602997f, -0.563782f, -0.524567f, -0.477539f, -0.438293f, -0.399109f
   , -0.352051f, -0.304993f, -0.257935f, -0.210876f, -0.163818f, -0.11676f, -0.0697021f, -0.014801f
   , 0.0146484f, 0.0460205f, 0.0773926f, 0.108765f, 0.140137f, 0.171509f, 0.202881f, 0.234253f
   , 0.265625f, 0.296997f, 0.328369f, 0.359741f, 0.391113f, 0.422485f, 0.453857f, 0.485229f
   , 0.516602f, 0.547974f, 0.579346f, 0.610718f, 0.64209f, 0.673462f, 0.704834f, 0.736206f
   , 0.767578f, 0.79895f, 0.830322f, 0.861694f, 0.893066f, 0.924438f, 0.955811f, 0.987183f
   , 0.979462f, 0.94809f, 0.916718f, 0.885345f, 0.853973f, 0.822601f, 0.791229f, 0.759857f
   , 0.728485f, 0.697113f, 0.665741f, 0.634369f, 0.602997f, 0.571625f, 0.540253f, 0.508881f
   , 0.477509f, 0.446136f, 0.414764f, 0.383392f, 0.35202f, 0.320648f, 0.289276f, 0.257904f
   , 0.226532f, 0.19516f, 0.163788f, 0.132416f, 0.101044f, 0.0696716f, 0.0382996f, 0.00692749f
   , -0.0146484f, -0.0460205f, -0.0773926f, -0.108765f, -0.140137f, -0.171509f, -0.202881f, -0.234253f
   , -0.265625f, -0.296997f, -0.328369f, -0.359741f, -0.391113f, -0.422485f, -0.453857f, -0.485229f
   , -0.516602f, -0.547974f, -0.579346f, -0.610718f, -0.64209f, -0.673462f, -0.704834f, -0.736206f
   , -0.767578f, -0.79895f, -0.830322f, -0.861694f, -0.893066f, -0.924438f, -0.955811f, -0.994995f
   , -0.979431f, -0.94809f, -0.916718f, -0.885345f, -0.853973f, -0.822601f, -0.791229f, -0.759857f
   , -0.728485f, -0.697113f, -0.665741f, -0.634369f, -0.602997f, -0.571625f, -0.540253f, -0.508881f
   , -0.477509f, -0.446136f, -0.414764f, -0.383392f, -0.35202f, -0.320648f, -0.289276f, -0.257904f
   , -0.226532f, -0.19516f, -0.163788f, -0.132416f, -0.101044f, -0.0696716f, -0.0382996f, -0.00692749f
   , -0.995087f, -0.995087f, -0.987274f, -0.987244f, -0.979401f, -0.971558f, -0.963745f, -0.955902f
   , -0.948059f, -0.948029f, -0.940186f, -0.932343f, -0.9245f, -0.916656f, -0.908813f, -0.893158f
   , -0.885315f, -0.877472f, -0.869629f, -0.861755f, -0.8461f, -0.838257f, -0.830414f, -0.814728f
   , -0.806885f, -0.799011f, -0.783356f, -0.775482f, -0.759827f, -0.744141f, -0.736267f, -0.720612f
   , -0.704926f, -0.68924f, -0.673553f, -0.657867f, -0.642181f, -0.626495f, -0.610809f, -0.595123f
   , -0.571594f, -0.555908f, -0.53241f, -0.516693f, -0.493195f, -0.469666f, -0.453949f, -0.43042f
   , -0.406891f, -0.383392f, -0.359833f, -0.336304f, -0.312775f, -0.281433f, -0.257904f, -0.234344f
   , -0.203003f, -0.179474f, -0.148102f, -0.124573f, -0.0932007f, -0.0696411f, -0.0382996f, -0.00692749f
   , 0.00683594f, 0.0381775f, 0.0695496f, 0.0930786f, 0.124451f, 0.14801f, 0.179352f, 0.202911f
   , 0.234253f, 0.257782f, 0.281342f, 0.312683f, 0.336212f, 0.359741f, 0.38327f, 0.40683f
   , 0.430328f, 0.453857f, 0.469574f, 0.493103f, 0.516632f, 0.532318f, 0.555847f, 0.571533f
   , 0.595032f, 0.610748f, 0.626434f, 0.64212f, 0.657806f, 0.673492f, 0.689178f, 0.704865f
   , 0.720551f, 0.736237f, 0.74408f, 0.759766f, 0.775452f, 0.783295f, 0.798981f, 0.806824f
   , 0.814697f, 0.830353f, 0.838226f, 0.846069f, 0.861725f, 0.869568f, 0.877441f, 0.885284f
   , 0.893127f, 0.908783f, 0.916626f, 0.924469f, 0.932312f, 0.940155f, 0.947998f, 0.948029f
   , 0.955872f, 0.963715f, 0.971558f, 0.97937f, 0.987213f, 0.987244f, 0.995087f, 0.995087f
   , 0.971649f, 0.908936f, 0.846191f, 0.783447f, 0.728546f, 0.673615f, 0.610901f, 0.556f
   , 0.501099f, 0.446198f, 0.391296f, 0.344208f, 0.289337f, 0.242249f, 0.19519f, 0.148132f
   , 0.101074f, 0.0540161f, 0.00695801f, -0.030304f, -0.069519f, -0.116577f, -0.155792f, -0.195007f
   , -0.234222f, -0.273438f, -0.312653f, -0.344055f, -0.38324f, -0.414642f, -0.446014f, -0.477386f
   , -0.508759f, -0.540131f, -0.571503f, -0.602875f, -0.626404f, -0.657776f, -0.681305f, -0.704834f
   , -0.728363f, -0.751892f, -0.775421f, -0.791138f, -0.814636f, -0.830353f, -0.846039f, -0.861725f
   , -0.877411f, -0.893097f, -0.908783f, -0.924469f, -0.932312f, -0.947998f, -0.955841f, -0.963684f
   , -0.971527f, -0.97937f, -0.987213f, -0.987244f, -0.995056f, -0.995087f, -0.995087f, -0.995087f
   , -0.995087f, -0.995087f, -0.995087f, -0.995087f, -0.987274f, -0.987244f, -0.979401f, -0.971558f
   , -0.963745f, -0.955872f, -0.948029f, -0.932373f, -0.92453f, -0.908844f, -0.893158f, -0.885284f
   , -0.869629f, -0.8461f, -0.830414f, -0.814728f, -0.791229f, -0.775513f, -0.751984f, -0.728455f
   , -0.704956f, -0.681396f, -0.657867f, -0.626526f, -0.602997f, -0.571625f, -0.540253f, -0.516693f
   , -0.485352f, -0.446167f, -0.414764f, -0.383392f, -0.344208f, -0.312805f, -0.27359f, -0.234406f
   , -0.19519f, -0.155975f, -0.11673f, -0.0697021f, -0.0304871f, 0.0145874f, 0.053833f, 0.0930481f
   , 0.140106f, 0.194977f, 0.242065f, 0.289124f, 0.343994f, 0.391083f, 0.445984f, 0.500854f
   , 0.555756f, 0.610657f, 0.665588f, 0.728302f, 0.783203f, 0.845947f, 0.908691f, 0.963593f
   , -0.995087f, -0.995087f, -0.979431f, -0.971588f, -0.94809f, -0.932373f, -0.908844f, -0.877502f
   , -0.84613f, -0.814758f, -0.783386f, -0.752014f, -0.712799f, -0.673615f, -0.634399f, -0.595184f
   , -0.563782f, -0.524567f, -0.485352f, -0.446136f, -0.406921f, -0.367706f, -0.328522f, -0.297119f
   , -0.257935f, -0.226532f, -0.19516f, -0.163788f, -0.132416f, -0.101044f, -0.0775146f, -0.0539551f
   , -0.0226135f, -0.00689697f, 0.00683594f, 0.0303345f, 0.046051f, 0.0617371f, 0.0774231f, 0.0852661f
   , 0.100952f, 0.108795f, 0.116638f, 0.116669f, 0.124512f, 0.124512f, 0.132355f, 0.132355f
   , 0.124542f, 0.124512f, 0.124512f, 0.116669f, 0.108856f, 0.101013f, 0.0931702f, 0.0853271f
   , 0.0774841f, 0.0696106f, 0.0539551f, 0.0460815f, 0.030426f, 0.0225525f, 0.00689697f, 0.0f
   , -0.00683594f, -0.022522f, -0.030365f, -0.046051f, -0.0539246f, -0.0695801f, -0.0774231f, -0.0852966f
   , -0.100952f, -0.108795f, -0.116638f, -0.124481f, -0.124512f, -0.132355f, -0.132355f, -0.140198f
   , -0.140198f, -0.140198f, -0.140198f, -0.132355f, -0.132355f, -0.124512f, -0.116669f, -0.108826f
   , -0.0931702f, -0.0852966f, -0.0696411f, -0.0539551f, -0.030426f, -0.01474f, 0.00680542f, 0.0224915f
   , 0.0460205f, 0.0695801f, 0.100922f, 0.132294f, 0.155823f, 0.187195f, 0.22641f, 0.257782f
   , 0.296967f, 0.328369f, 0.367584f, 0.406769f, 0.445984f, 0.485199f, 0.524414f, 0.563629f
   , 0.602844f, 0.642059f, 0.673462f, 0.712677f, 0.751862f, 0.783264f, 0.814636f, 0.853851f
   , 0.87738f, 0.908752f, 0.932281f, 0.955811f, 0.971527f, 0.987213f, 0.995056f, 0.995087f
   , -0.948212f, -0.854095f, -0.752136f, -0.65802f, -0.556091f, -0.461945f, -0.367828f, -0.273712f
   , -0.187439f, -0.0933228f, -0.00704956f, 0.061615f, 0.147888f, 0.226318f, 0.304749f, 0.375336f
   , 0.445953f, 0.508698f, 0.571442f, 0.634186f, 0.689087f, 0.736176f, 0.783234f, 0.830292f
   , 0.861694f, 0.900909f, 0.924438f, 0.947998f, 0.971527f, 0.987213f, 0.995056f, 0.995087f
   , 0.995087f, 0.995087f, 0.987244f, 0.971588f, 0.94809f, 0.924561f, 0.901001f, 0.861847f
   , 0.830444f, 0.783417f, 0.736359f, 0.689301f, 0.634399f, 0.571686f, 0.508942f, 0.446198f
   , 0.375641f, 0.305023f, 0.226624f, 0.148193f, 0.0619507f, -0.0145264f, -0.0929871f, -0.187073f
   , -0.273376f, -0.367462f, -0.461578f, -0.555695f, -0.657654f, -0.75177f, -0.853699f, -0.947845f
   , 0.901154f, 0.799225f, 0.705078f, 0.610962f, 0.509003f, 0.414886f, 0.32077f, 0.234467f
   , 0.140381f, 0.0540771f, -0.0302124f, -0.108643f, -0.187103f, -0.265533f, -0.336151f, -0.414551f
   , -0.477325f, -0.54007f, -0.602814f, -0.657745f, -0.712646f, -0.759705f, -0.806763f, -0.846008f
   , -0.885193f, -0.908783f, -0.940125f, -0.963654f, -0.97937f, -0.987244f, -0.995087f, -0.995087f
   , -0.995087f, -0.987274f, -0.979431f, -0.963745f, -0.940216f, -0.908875f, -0.885345f, -0.84613f
   , -0.806946f, -0.759888f, -0.71283f, -0.657959f, -0.603058f, -0.540314f, -0.47757f, -0.414825f
   , -0.336426f, -0.265839f, -0.187408f, -0.108978f, -0.0227051f, 0.0537415f, 0.140015f, 0.234131f
   , 0.320404f, 0.41452f, 0.508636f, 0.610565f, 0.704712f, 0.798828f, 0.900787f, 0.994904f
   , -0.00683594f, -0.022522f, -0.038208f, -0.053894f, -0.0695801f, -0.0852661f, -0.100952f, -0.116638f
   , -0.132324f, -0.14801f, -0.163696f, -0.179382f, -0.195068f, -0.210754f, -0.22644f, -0.242126f
   , -0.257812f, -0.273499f, -0.289185f, -0.304871f, -0.320557f, -0.336243f, -0.351929f, -0.367615f
   , -0.383301f, -0.398987f, -0.414673f, -0.430359f, -0.446045f, -0.461731f, -0.477417f, -0.493103f
   , 0.508789f, 0.524475f, 0.540161f, 0.555847f, 0.571533f, 0.587219f, 0.602905f, 0.618591f
   , 0.634277f, 0.649963f, 0.665649f, 0.681335f, 0.697021f, 0.712708f, 0.728394f, 0.74408f
   , 0.759766f, 0.775452f, 0.791138f, 0.806824f, 0.82251f, 0.838196f, 0.853882f, 0.869568f
   , 0.885254f, 0.90094f, 0.916626f, 0.932312f, 0.947998f, 0.963684f, 0.97937f, 0.995056f
   , -0.987274f, -0.971588f, -0.955902f, -0.940216f, -0.92453f, -0.908844f, -0.893158f, -0.877472f
   , -0.861786f, -0.8461f, -0.830414f, -0.814728f, -0.799042f, -0.783356f, -0.76767f, -0.751984f
   , -0.736298f, -0.720612f, -0.704926f, -0.68924f, -0.673553f, -0.657867f, -0.642181f, -0.626495f
   , -0.610809f, -0.595123f, -0.579437f, -0.563751f, -0.548065f, -0.532379f, -0.516693f, -0.501007f
   , 0.485321f, 0.469635f, 0.453949f, 0.438263f, 0.422577f, 0.406891f, 0.391205f, 0.375519f
   , 0.359833f, 0.344147f, 0.328461f, 0.312775f, 0.297089f, 0.281403f, 0.265717f, 0.250031f
   , 0.234344f, 0.218658f, 0.202972f, 0.187286f, 0.1716f, 0.155914f, 0.140228f, 0.124542f
   , 0.108856f, 0.0931702f, 0.0774841f, 0.0617981f, 0.0461121f, 0.030426f, 0.01474f, 0.0f
   , -0.963837f, -0.901093f, -0.838348f, -0.775604f, -0.71286f, -0.650116f, -0.587372f, -0.524628f
   , -0.461884f, -0.399139f, -0.336395f, -0.273651f, -0.210907f, -0.148163f, -0.0854187f, -0.0226746f
   , 0.0302734f, 0.0930176f, 0.155762f, 0.218506f, 0.28125f, 0.343994f, 0.406738f, 0.469482f
   , 0.532227f, 0.594971f, 0.657715f, 0.720459f, 0.783203f, 0.845947f, 0.908691f, 0.971436f
   , 0.979462f, 0.94809f, 0.916718f, 0.885345f, 0.853973f, 0.822601f, 0.791229f, 0.759857f
   , 0.728485f, 0.697113f, 0.665741f, 0.634369f, 0.602997f, 0.571625f, 0.540253f, 0.508881f
   , 0.477509f, 0.446136f, 0.414764f, 0.383392f, 0.35202f, 0.320648f, 0.289276f, 0.257904f
   , 0.226532f, 0.19516f, 0.163788f, 0.132416f, 0.101044f, 0.0696716f, 0.0382996f, 0.00692749f
   , 0.0146484f, 0.0460205f, 0.0773926f, 0.108765f, 0.140137f, 0.171509f, 0.202881f, 0.234253f
   , 0.265625f, 0.296997f, 0.328369f, 0.359741f, 0.391113f, 0.422485f, 0.453857f, 0.485229f
   , 0.516602f, 0.547974f, 0.579346f, 0.610718f, 0.64209f, 0.673462f, 0.704834f, 0.736206f
   , 0.767578f, 0.79895f, 0.830322f, 0.861694f, 0.893066f, 0.924438f, 0.955811f, 0.987183f
   , 0.948151f, 0.885406f, 0.822662f, 0.759918f, 0.697174f, 0.63443f, 0.571686f, 0.508942f
   , 0.446198f, 0.383453f, 0.320709f, 0.257965f, 0.195221f, 0.132477f, 0.0697327f, 0.00698853f
   , -0.0459595f, -0.108704f, -0.171448f, -0.234192f, -0.296936f, -0.35968f, -0.422424f, -0.485168f
   , -0.547913f, -0.610657f, -0.673401f, -0.736145f, -0.798889f, -0.861633f, -0.924377f, -0.987122f
   , 0.367828f, 0.321503f, 0.290497f, 0.243805f, 0.197113f, 0.165985f, 0.134857f, 0.103668f
   , 0.0725403f, 0.0569763f, 0.0257874f, 0.0102234f, -0.0032959f, -0.0188599f, -0.0344238f, -0.0656738f
   , -0.0812378f, -0.0968018f, -0.112366f, -0.127991f, -0.143555f, -0.15918f, -0.174805f, -0.19043f
   , -0.206055f, -0.22168f, -0.237305f, -0.25293f, -0.28418f, -0.28418f, -0.31543f, -0.331055f
   , -0.346741f, -0.362366f, -0.377991f, -0.393677f, -0.409363f, -0.424988f, -0.440674f, -0.45636f
   , -0.471985f, -0.487671f, -0.503357f, -0.519043f, -0.534729f, -0.550415f, -0.566101f, -0.581787f
   , -0.597473f, -0.613159f, -0.628906f, -0.644592f, -0.660278f, -0.691589f, -0.707336f, -0.738647f
   , -0.77002f, -0.785706f, -0.817078f, -0.832764f, -0.864075f, -0.895447f, -0.942444f, -0.973816f
   , -0.989502f, -0.95813f, -0.926758f, -0.879761f, -0.84845f, -0.832703f, -0.801392f, -0.785645f
   , -0.754333f, -0.722961f, -0.69165f, -0.675964f, -0.660278f, -0.644531f, -0.628845f, -0.597534f
   , -0.597473f, -0.566162f, -0.550476f, -0.53479f, -0.519104f, -0.503418f, -0.487732f, -0.472046f
   , -0.471985f, -0.456299f, -0.440674f, -0.409363f, -0.393677f, -0.378052f, -0.377991f, -0.362366f
   , -0.346741f, -0.31543f, -0.299805f, -0.28418f, -0.268555f, -0.25293f, -0.237305f, -0.206055f
   , -0.19043f, -0.174805f, -0.174805f, -0.15918f, -0.143616f, -0.127991f, -0.0968018f, -0.0968018f
   , -0.0656128f, -0.0500488f, -0.0344849f, -0.0189209f, -0.00335693f, 0.0258484f, 0.0414124f, 0.0725403f
   , 0.0881042f, 0.119293f, 0.150421f, 0.181549f, 0.212677f, 0.259308f, 0.306f, 0.352509f
   , -0.987274f, -0.971588f, -0.955902f, -0.940216f, -0.92453f, -0.908844f, -0.893158f, -0.877472f
   , -0.861786f, -0.8461f, -0.830414f, -0.814728f, -0.799042f, -0.783356f, -0.76767f, -0.751984f
   , -0.736298f, -0.720612f, -0.704926f, -0.68924f, -0.673553f, -0.657867f, -0.642181f, -0.626495f
   , -0.610809f, -0.595123f, -0.579437f, -0.563751f, -0.548065f, -0.532379f, -0.516693f, -0.501007f
   , -0.485321f, -0.469635f, -0.453949f, -0.438263f, -0.422577f, -0.406891f, -0.391205f, -0.375519f
   , -0.359833f, -0.344147f, -0.328461f, -0.312775f, -0.297089f, -0.281403f, -0.265717f, -0.250031f
   , -0.234344f, -0.218658f, -0.202972f, -0.187286f, -0.1716f, -0.155914f, -0.140228f, -0.124542f
   , -0.108856f, -0.0931702f, -0.0774841f, -0.0617981f, -0.0461121f, -0.030426f, -0.01474f, 0.0f
   , 0.00683594f, 0.022522f, 0.038208f, 0.053894f, 0.0695801f, 0.0852661f, 0.100952f, 0.116638f
   , 0.132324f, 0.14801f, 0.163696f, 0.179382f, 0.195068f, 0.210754f, 0.22644f, 0.242126f
   , 0.257812f, 0.273499f, 0.289185f, 0.304871f, 0.320557f, 0.336243f, 0.351929f, 0.367615f
   , 0.383301f, 0.398987f, 0.414673f, 0.430359f, 0.446045f, 0.461731f, 0.477417f, 0.493103f
   , 0.508789f, 0.524475f, 0.540161f, 0.555847f, 0.571533f, 0.587219f, 0.602905f, 0.618591f
   , 0.634277f, 0.649963f, 0.665649f, 0.681335f, 0.697021f, 0.712708f, 0.728394f, 0.74408f
   , 0.759766f, 0.775452f, 0.791138f, 0.806824f, 0.82251f, 0.838196f, 0.853882f, 0.869568f
   , 0.885254f, 0.90094f, 0.916626f, 0.932312f, 0.947998f, 0.963684f, 0.97937f, 0.995056f
   , -0.76825f, -0.626709f, -0.383911f, -0.234497f, -0.132507f, -0.163696f, -0.179413f, -0.140259f
   , -0.0933228f, 0.0771179f, 0.226196f, 0.320374f, 0.453705f, 0.469635f, 0.430389f, 0.540039f
   , 0.555817f, 0.571564f, 0.602875f, 0.735931f, 0.775513f, 0.658203f, 0.516846f, 0.485382f
   , 0.414917f, 0.344238f, 0.367584f, 0.344208f, 0.312744f, 0.21106f, 0.242035f, 0.367401f
   , 0.328674f, 0.171906f, 0.116638f, 0.124542f, 0.179321f, 0.20285f, 0.171692f, 0.155884f
   , 0.20282f, 0.19516f, 0.249878f, 0.187378f, 0.101196f, 0.00698853f, -0.022522f, 0.0f
   , 0.116302f, 0.187164f, 0.242126f, 0.242096f, 0.234344f, 0.148254f, 0.17926f, 0.281219f
   , 0.383209f, 0.41452f, 0.493011f, 0.610565f, 0.712494f, 0.775421f, 0.767731f, 0.728394f
   , 0.806702f, 0.877411f, 0.806946f, 0.752014f, 0.759857f, 0.681488f, 0.657898f, 0.775177f
   , 0.900757f, 0.97934f, 0.955963f, 0.830658f, 0.705139f, 0.587433f, 0.508942f, 0.516663f
   , 0.587006f, 0.649872f, 0.728302f, 0.751892f, 0.59552f, 0.407227f, 0.273621f, 0.234375f
   , 0.289062f, 0.367462f, 0.49295f, 0.56366f, 0.469849f, 0.461761f, 0.446075f, 0.406982f
   , 0.359924f, 0.218933f, 0.140381f, 0.0697021f, -0.0771179f, -0.108795f, -0.116669f, -0.0619202f
   , 0.0301208f, -0.0145264f, 0.0929565f, 0.226257f, 0.242157f, 0.132629f, 0.0305176f, -0.0302429f
   , -0.022522f, 0.0536499f, 0.147888f, 0.28894f, 0.289276f, 0.171875f, 0.0f, -0.155609f
   , -0.195099f, -0.0934143f, 0.0223694f, 0.116425f, 0.194977f, 0.249939f, 0.163879f, 0.0f
   , 0.0380859f, 0.124329f, 0.202789f, 0.281219f, 0.367493f, 0.43808f, 0.51651f, 0.587097f
   , 0.649872f, 0.712616f, 0.767517f, 0.814606f, 0.861664f, 0.900879f, 0.932281f, 0.955841f
   , 0.97937f, 0.987244f, 0.995087f, 0.995087f, 0.995087f, 0.979431f, 0.963745f, 0.940216f
   , 0.908875f, 0.877502f, 0.838287f, 0.799072f, 0.752045f, 0.697174f, 0.650085f, 0.595184f
   , 0.540283f, 0.47757f, 0.422668f, 0.367737f, 0.305023f, 0.250122f, 0.195221f, 0.148132f
   , 0.0932312f, 0.0461731f, 0.0f, -0.030304f, -0.069519f, -0.100922f, -0.124481f, -0.14801f
   , -0.171539f, -0.187225f, -0.195099f, -0.202942f, -0.202942f, -0.202942f, -0.195129f, -0.187286f
   , -0.1716f, -0.155914f, -0.132416f, -0.116699f, -0.0931702f, -0.0618286f, -0.0382996f, -0.00692749f
   , 0.00683594f, 0.0381775f, 0.0617371f, 0.0930786f, 0.116608f, 0.132324f, 0.155853f, 0.171539f
   , 0.187225f, 0.195099f, 0.202942f, 0.202942f, 0.202942f, 0.195129f, 0.187286f, 0.1716f
   , 0.148102f, 0.124573f, 0.101044f, 0.0696716f, 0.0304565f, -0.0067749f, -0.04599f, -0.0930481f
   , -0.147919f, -0.195007f, -0.249908f, -0.30481f, -0.367523f, -0.422424f, -0.477356f, -0.54007f
   , -0.594971f, -0.649872f, -0.69696f, -0.751862f, -0.79892f, -0.838135f, -0.87735f, -0.908752f
   , -0.940125f, -0.963654f, -0.97937f, -0.995056f, -0.995087f, -0.995087f, -0.987274f, -0.979431f
   , -0.955933f, -0.932404f, -0.901031f, -0.861816f, -0.814789f, -0.767731f, -0.71283f, -0.650116f
   , -0.587372f, -0.516785f, -0.438385f, -0.367767f, -0.281555f, -0.203094f, -0.124664f, -0.0383911f
};
static const float *loc_smp_aon_fm_oscwaves_zone0 = loc_smp_aon_fm_oscwaves + 0;  // ref 1/1, zone 1/14 #frames=1536
static void loc_prepare(st_plugin_voice_t *_voice);

void loc_prepare(st_plugin_voice_t *_voice) {
   ST_PLUGIN_VOICE_CAST(aon_fm_v1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(aon_fm_v1_shared_t);

   int tmp4_zlp_pos;
   int tmp9_zlp_pos;
   float out = 0.0f;
   (void)out;
   // -------- lane "prepare" modIdx=0 modString=1
   
   // -- mod="1" dstVar=out
   out = 1.0f;
   
   // -- mod="kbd" dstVar=out
   
   // ---- mod="kbd" input "amt" seq 1/1
   
   // -- mod="$p_carrier_kbd" dstVar=voice->tmp1/*amt*/
   voice->tmp1/*amt*/ = shared->params[PARAM_CARRIER_KBD] * 8.0f - 4.0f;
   
   // ---- mod="kbd" input "off" seq 1/1
   
   // -- mod="0.0833333" dstVar=voice->tmp2/*off*/
   voice->tmp2/*off*/ = 0.0833333f;
   out *= 127.0f;
   voice->tmp3/*scl*/ = 4;
   out += (voice->note_cur + (voice->tmp2/*off*/ * 12.0f) - 64.0f) * voice->tmp1/*amt*/;
   #ifdef OVERSAMPLE_FACTOR
   out = ((440.0f/32.0f)*expf( ((out-9.0f)/12.0f)*logf(2.0f) )) / (voice->sample_rate * OVERSAMPLE_FACTOR);
   #else
   out = ((440.0f/32.0f)*expf( ((out-9.0f)/12.0f)*logf(2.0f) )) / voice->sample_rate;
   #endif
   out *= voice->tmp3/*scl*/;
   
   // -- mod="sto v_carrier_kbd" dstVar=out
   voice->var_v_carrier_kbd = out;
   
   // -- mod="1" dstVar=out
   out = 1.0f;
   
   // -- mod="kbd" dstVar=out
   
   // ---- mod="kbd" input "amt" seq 1/1
   
   // -- mod="$p_mod_kbd" dstVar=voice->tmp1/*amt*/
   voice->tmp1/*amt*/ = shared->params[PARAM_MOD_KBD] * 8.0f - 4.0f;
   
   // ---- mod="kbd" input "off" seq 1/1
   
   // -- mod="0.0833333" dstVar=voice->tmp2/*off*/
   voice->tmp2/*off*/ = 0.0833333f;
   out *= 127.0f;
   voice->tmp3/*scl*/ = 4;
   out += (voice->note_cur + (voice->tmp2/*off*/ * 12.0f) - 64.0f) * voice->tmp1/*amt*/;
   #ifdef OVERSAMPLE_FACTOR
   out = ((440.0f/32.0f)*expf( ((out-9.0f)/12.0f)*logf(2.0f) )) / (voice->sample_rate * OVERSAMPLE_FACTOR);
   #else
   out = ((440.0f/32.0f)*expf( ((out-9.0f)/12.0f)*logf(2.0f) )) / voice->sample_rate;
   #endif
   out *= voice->tmp3/*scl*/;
   
   // -- mod="sto v_mod_kbd" dstVar=out
   voice->var_v_mod_kbd = out;
   
   // -- mod="$m_mod_flt" dstVar=out
   out = voice->mod_mod_flt_cur;
   
   // -- mod="kbd" dstVar=out
   
   // ---- mod="kbd" input "amt" seq 1/1
   
   // -- mod="1" dstVar=voice->tmp1/*amt*/
   voice->tmp1/*amt*/ = 1.0f;
   
   // ---- mod="kbd" input "off" seq 1/1
   
   // -- mod="0" dstVar=voice->tmp2/*off*/
   voice->tmp2/*off*/ = 0.0f;
   out *= 127.0f;
   voice->tmp3/*scl*/ = 4;
   out += (voice->note_cur + (voice->tmp2/*off*/ * 12.0f) - 64.0f) * voice->tmp1/*amt*/;
   out = clamp(out, 0.0f, 127.0f);
   #ifdef OVERSAMPLE_FACTOR
   out = ((440.0f/32.0f)*expf( ((out-9.0f)/12.0f)*logf(2.0f) )) / (voice->sample_rate * OVERSAMPLE_FACTOR);
   #else
   out = ((440.0f/32.0f)*expf( ((out-9.0f)/12.0f)*logf(2.0f) )) / voice->sample_rate;
   #endif
   out *= voice->tmp3/*scl*/;
   
   // -- mod="sto v_mod_flt" dstVar=out
   voice->var_v_mod_flt = out;
} /* end prepare */


#ifndef CYCLE_SKIP_UI
static unsigned int loc_copy_chars(char *_d, const unsigned int _dSize, const char *_s) {
   unsigned int r = 0u;
   if(NULL != _d)
   {
      // Write min(dSize,len(s)) characters to 'd'
      char *d = _d;
      if(NULL != _s)
      {
         const char *s = _s;
         for(;;)
         {
            if(r < _dSize)
            {
               char c = s[r++];
               *d++ = c;
               if(0 == c)
                  break;
            }
            else
            {
               if(r > 0u)
                  d[-1] = 0;  // force ASCIIZ
               break;
            }
         }
      }
      else
      {
         if(_dSize > 0u)
         {
            _d[0] = 0;
            r = 1u;
         }
      }
   }
   else
   {
      // Return total length of source string
      if(NULL != _s)
      {
         const char *s = _s;
         for(;;)
         {
            char c = s[r++];
            if(0 == c)
               break;
         }
      }
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int loc_copy_floats(float              *_d,
                                    const unsigned int  _dSize,
                                    const float        *_s,
                                    const unsigned int  _sNum
                                    ) {
   unsigned int r = 0u;
   if(NULL != _d)
   {
      // Write min(dSize,sNum) characters to 'd'
      if(NULL != _s)
      {
         unsigned int num = (_sNum > _dSize) ? _dSize : _sNum;
         memcpy((void*)_d, (const void*)_s, num * sizeof(float));
         r = num;
      }
   }
   else
   {
      // Query total number of presets
      r = _sNum;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_name(st_plugin_info_t *_info,
                                                    unsigned int      _paramIdx
                                                    ) {
   (void)_info;
   return loc_param_names[_paramIdx];
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_group_name(st_plugin_info_t *_info,
                                                          unsigned int      _paramGroupIdx
                                                          ) {
   (void)_info;
   const char *r = NULL;
   static const char *groupNames[4] = { "shape", "freq", "amp", "filter" };
   if(_paramGroupIdx < 4u)
      r = groupNames[_paramGroupIdx];
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_param_group_idx(st_plugin_info_t *_info,
                                                          unsigned int      _paramIdx
                                                          ) {
   (void)_info;
   unsigned int r = ~0u;
   static unsigned int groupIndices[NUM_PARAMS] = { 0, 1, 0, 1, 2, ~0u, ~0u, 3 };
   r = groupIndices[_paramIdx];
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_section_name(st_plugin_info_t *_info,
                                                            unsigned int      _paramSectionIdx
                                                            ) {
   (void)_info;
   const char *r = NULL;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_param_section_idx(st_plugin_info_t *_info,
                                                            unsigned int      _paramIdx
                                                            ) {
   (void)_info;
   unsigned int r = ~0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float ST_PLUGIN_API loc_get_param_reset(st_plugin_info_t *_info,
                                               unsigned int      _paramIdx
                                               ) {
   (void)_info;
   return loc_param_resets[_paramIdx];
}
#endif // CYCLE_SKIP_UI

static float ST_PLUGIN_API loc_get_param_value(st_plugin_shared_t *_shared,
                                               unsigned int        _paramIdx
                                               ) {
   ST_PLUGIN_SHARED_CAST(aon_fm_v1_shared_t);
   return shared->params[_paramIdx];
}

static void ST_PLUGIN_API loc_set_param_value(st_plugin_shared_t *_shared,
                                              unsigned int        _paramIdx,
                                              float               _value
                                              ) {
   ST_PLUGIN_SHARED_CAST(aon_fm_v1_shared_t);
   shared->params[_paramIdx] = _value;
}

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_query_dynamic_param_preset_values(st_plugin_shared_t *_shared,
                                                                        const unsigned int  _paramIdx,
                                                                        float              *_retValues,
                                                                        const unsigned int  _retValuesSize
                                                                        ) {
   ST_PLUGIN_SHARED_CAST(aon_fm_v1_shared_t);
   unsigned int r = 0u;
   if(PARAM_CARRIER_WAVE == _paramIdx)
   {
      static const float presetValues_0[12] = { 0.0f, 0.090909f, 0.181818f, 0.272727f, 0.363636f, 0.454545f, 0.545454f, 0.636363f, 0.727272f, 0.818181f, 0.90909f, 1.0f };
      r = loc_copy_floats(_retValues, _retValuesSize, presetValues_0, 12);
   }
   if(PARAM_MOD_WAVE == _paramIdx)
   {
      static const float presetValues_2[12] = { 0.0f, 0.090909f, 0.181818f, 0.272727f, 0.363636f, 0.454545f, 0.545454f, 0.636363f, 0.727272f, 0.818181f, 0.90909f, 1.0f };
      r = loc_copy_floats(_retValues, _retValuesSize, presetValues_2, 12);
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_query_dynamic_param_preset_name(st_plugin_shared_t *_shared,
                                                                      const unsigned int  _paramIdx,
                                                                      const unsigned int  _presetIdx,
                                                                      char               *_retBuf,
                                                                      const unsigned int  _retBufSize
                                                                      ) {
   ST_PLUGIN_SHARED_CAST(aon_fm_v1_shared_t);
   unsigned int r = 0u;
   if(PARAM_CARRIER_WAVE == _paramIdx)
   {
      static const char *presetName_0[12] = { "Sinus", "Triangle", "Turnpoint", "Parabola", "Extremes", "Up&Down", "LineMix", "M-Shape", "Heart", "Sawtooth", "Sample", "DoubleSinus" };
      r = loc_copy_chars(_retBuf, _retBufSize, presetName_0[_presetIdx]);
   }
   if(PARAM_MOD_WAVE == _paramIdx)
   {
      static const char *presetName_2[12] = { "Sinus", "Triangle", "Turnpoint", "Parabola", "Extremes", "Up&Down", "LineMix", "M-Shape", "Heart", "Sawtooth", "Sample", "DoubleSinus" };
      r = loc_copy_chars(_retBuf, _retBufSize, presetName_2[_presetIdx]);
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_array_param_size(st_plugin_info_t   *_info,
                                                           const unsigned int  _paramIdx
                                                           ) {
   unsigned int r = 0u;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_array_param_num_variations(st_plugin_info_t   *_info,
                                                                     const unsigned int  _paramIdx
                                                                     ) {
   unsigned int r = 0u;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float * ST_PLUGIN_API loc_get_array_param_variation_ptr(st_plugin_shared_t *_shared,
                                                               const unsigned int  _paramIdx,
                                                               const unsigned int  _variationIdx
                                                               ) {
   ST_PLUGIN_SHARED_CAST(aon_fm_v1_shared_t);
   float *r = NULL;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static void ST_PLUGIN_API loc_set_array_param_edit_variation_idx(st_plugin_shared_t *_shared,
                                                                 const unsigned int  _paramIdx,
                                                                 const int           _variationIdx
                                                                 ) {
   ST_PLUGIN_SHARED_CAST(aon_fm_v1_shared_t);
   switch(_paramIdx)
   {
      default:
         break;
   }
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_array_param_element_name(st_plugin_info_t   *_info,
                                                                  const unsigned int  _paramIdx,
                                                                  const unsigned int  _elementIdx
                                                                  ) {
   ST_PLUGIN_INFO_CAST(aon_fm_v1_info_t);
   const char *r = NULL;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static int ST_PLUGIN_API loc_get_array_param_element_value_range(st_plugin_info_t   *_info,
                                                                 const unsigned int  _paramIdx,
                                                                 const unsigned int  _elementIdx,
                                                                 float              *_retStorageMin,
                                                                 float              *_retStorageMax,
                                                                 float              *_retDisplayMin,
                                                                 float              *_retDisplayMax,
                                                                 unsigned int       *_retDisplayPrecision
                                                                 ) {
   (void)_elementIdx;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return 0;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float ST_PLUGIN_API loc_get_array_param_element_reset(st_plugin_info_t   *_info,
                                                             const unsigned int  _paramIdx,
                                                             const unsigned int  _elementIdx
                                                             ) {
   ST_PLUGIN_INFO_CAST(aon_fm_v1_info_t);
   float r = -999999.0f/*INVALID_VALUE*/;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static void ST_PLUGIN_API loc_update_lut(st_plugin_info_t   *_info,
                                         unsigned int        _idx,
                                         const float        *_src,
                                         const unsigned int  _srcNumElements
                                         ) {
   (void)_info;
   unsigned int copySz = 0u;
   (void)copySz;
   switch(_idx)
   {
      default:
         break;
   }
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_mod_name(st_plugin_info_t *_info,
                                                  unsigned int      _modIdx
                                                  ) {
   (void)_info;
   return loc_mod_names[_modIdx];
}
#endif // CYCLE_SKIP_UI

static void ST_PLUGIN_API loc_set_sample_rate(st_plugin_voice_t *_voice,
                                              float              _sampleRate
                                              ) {
   ST_PLUGIN_VOICE_CAST(aon_fm_v1_voice_t);
   if(_sampleRate != voice->sample_rate)
   {
      voice->sr_factor = 12000.0f / _sampleRate;
   }
   voice->sample_rate = _sampleRate;
}

static void ST_PLUGIN_API loc_set_bpm(st_plugin_voice_t *_voice,
                                      float              _bpm
                                      ) {
   ST_PLUGIN_VOICE_CAST(aon_fm_v1_voice_t);
   voice->bpm = _bpm;
}

static void ST_PLUGIN_API loc_note_on(st_plugin_voice_t  *_voice,
                                      int                 _bGlide,
                                      unsigned char       _note,
                                      float               _vel
                                      ) {
   ST_PLUGIN_VOICE_CAST(aon_fm_v1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(aon_fm_v1_shared_t);
   (void)_bGlide;
   (void)_note;
   (void)_vel;
   if(!_bGlide)
   {
      memset((void*)voice->mods, 0, sizeof(voice->mods));
#ifdef OVERSAMPLE_FACTOR
      voice->note_speed_fixed = (261.63f/*C-5*/ / (voice->sample_rate * OVERSAMPLE_FACTOR));
#else
      voice->note_speed_fixed = (261.63f/*C-5*/ / voice->sample_rate);
#endif // OVERSAMPLE_FACTOR
      voice->velocity = _vel;
   int tmp4_zlp_pos;
   int tmp9_zlp_pos;
      voice->tmp4_zlp_pos = 0;
      voice->tmp9_zlp_pos = 0;
      voice->tmp14_svf_lp = 0.0f;
      voice->tmp15_svf_hp = 0.0f;
      voice->tmp16_svf_bp = 0.0f;
      voice->var_x = 0.0f;
      voice->var_v_carrier_kbd = 0.0f;
      voice->var_v_mod_kbd = 0.0f;
      voice->var_v_mod_flt = 0.0f;
   }
}

static void ST_PLUGIN_API loc_set_mod_value(st_plugin_voice_t *_voice,
                                            unsigned int       _modIdx,
                                            float              _value,
                                            unsigned           _frameOffset
                                            ) {
   ST_PLUGIN_VOICE_CAST(aon_fm_v1_voice_t);
   (void)_frameOffset;
   voice->mods[_modIdx] = _value;
}

static void ST_PLUGIN_API loc_prepare_block(st_plugin_voice_t *_voice,
                                            unsigned int       _numFrames,
                                            float              _freqHz,
                                            float              _note,
                                            float              _vol,
                                            float              _pan
                                            ) {
   ST_PLUGIN_VOICE_CAST(aon_fm_v1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(aon_fm_v1_shared_t);
   (void)_note;
   (void)_vol;
   (void)_pan;

#ifdef OVERSAMPLE_FACTOR
   float noteSpeed = _freqHz / (voice->sample_rate * OVERSAMPLE_FACTOR);
#else
   float noteSpeed = _freqHz / voice->sample_rate;
#endif // OVERSAMPLE_FACTOR

   float modcarrier_wave = shared->params[PARAM_CARRIER_WAVE] * 11.0f               + voice->mods[MOD_CARRIER_WAVE ];
   float modcarrier_freq = shared->params[PARAM_CARRIER_FREQ] * 2.0f - 1.0f         + voice->mods[MOD_CARRIER_FREQ ];
   float modmod_wave     = shared->params[PARAM_MOD_WAVE    ] * 11.0f               + voice->mods[MOD_MOD_WAVE     ];
   float modmod_freq     = shared->params[PARAM_MOD_FREQ    ] * 2.0f - 1.0f         + voice->mods[MOD_MOD_FREQ     ];
   float modmod_amp      = shared->params[PARAM_MOD_AMP     ] * 32.0f - 16.0f       + voice->mods[MOD_MOD_AMP      ];
   float modmod_flt      = shared->params[PARAM_MOD_FLT     ]                       + voice->mods[MOD_MOD_FLT      ];

   if(_numFrames > 0u)
   {
      // lerp
#ifdef OVERSAMPLE_FACTOR
      float recBlockSize = (1.0f / (_numFrames * OVERSAMPLE_FACTOR));
#else
      float recBlockSize = (1.0f / _numFrames);
#endif // OVERSAMPLE_FACTOR
      voice->note_speed_inc = (noteSpeed - voice->note_speed_cur) * recBlockSize;
      voice->note_inc       = (_note - voice->note_cur) * recBlockSize;
      voice->mod_carrier_wave_inc = (modcarrier_wave    - voice->mod_carrier_wave_cur  ) * recBlockSize;
      voice->mod_carrier_freq_inc = (modcarrier_freq    - voice->mod_carrier_freq_cur  ) * recBlockSize;
      voice->mod_mod_wave_inc     = (modmod_wave        - voice->mod_mod_wave_cur      ) * recBlockSize;
      voice->mod_mod_freq_inc     = (modmod_freq        - voice->mod_mod_freq_cur      ) * recBlockSize;
      voice->mod_mod_amp_inc      = (modmod_amp         - voice->mod_mod_amp_cur       ) * recBlockSize;
      voice->mod_mod_flt_inc      = (modmod_flt         - voice->mod_mod_flt_cur       ) * recBlockSize;
      loc_prepare(&voice->base);
   }
   else
   {
      // initial params/modulation (first block, not rendered)
      voice->note_speed_cur = noteSpeed;
      voice->note_speed_inc = 0.0f;
      voice->note_cur       = _note;
      voice->note_inc       = 0.0f;
      voice->mod_carrier_wave_cur = modcarrier_wave;
      voice->mod_carrier_wave_inc = 0.0f;
      voice->mod_carrier_freq_cur = modcarrier_freq;
      voice->mod_carrier_freq_inc = 0.0f;
      voice->mod_mod_wave_cur     = modmod_wave;
      voice->mod_mod_wave_inc     = 0.0f;
      voice->mod_mod_freq_cur     = modmod_freq;
      voice->mod_mod_freq_inc     = 0.0f;
      voice->mod_mod_amp_cur      = modmod_amp;
      voice->mod_mod_amp_inc      = 0.0f;
      voice->mod_mod_flt_cur      = modmod_flt;
      voice->mod_mod_flt_inc      = 0.0f;
      loc_prepare(&voice->base);
   }

   // printf("xxx note_cur=%f\n", voice->note_cur);
   // printf("xxx prepare_block: numFrames=%u moda=%f\n", _numFrames, moda);
   // printf("xxx voice->voicebus_idx_0=%u voice->base.voice_bus_read_offset=%u\n", voice->voicebus_idx_0, voice->base.voice_bus_read_offset);
}

static void ST_PLUGIN_API loc_process_replace(st_plugin_voice_t  *_voice,
                                              int                 _bMonoIn,
                                              const float        *_samplesIn,
                                              float              *_samplesOut,
                                              unsigned int        _numFrames
                                              ) {
   (void)_bMonoIn;
   (void)_samplesIn;

   ST_PLUGIN_VOICE_CAST(aon_fm_v1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(aon_fm_v1_shared_t);

   // Mono output (replicate left to right channel)
   unsigned int j = 0u;
#ifndef STEREO
   unsigned int jStep = _bMonoIn ? 1u : 2u;
#endif // STEREO
   unsigned int k = 0u;
   for(unsigned int i = 0u; i < _numFrames; i++)
   {
      const float inL = _samplesIn[j];
#ifdef STEREO
      float outL;
      float outR;
      const float inR = _samplesIn[j + 1u];
#endif // STEREO
      float out;
#ifdef OVERSAMPLE_FACTOR
#ifdef STEREO
      float outOSL = 0.0f;
      float outOSR = 0.0f;
#else
      float outOS = 0.0f;
#endif // STEREO
#endif // OVERSAMPLE_FACTOR

#ifdef OVERSAMPLE_FACTOR
      for(unsigned int osi = 0u; osi < OVERSAMPLE_FACTOR; osi++)
#endif // OVERSAMPLE_FACTOR
      {
#ifdef STEREO
         out = outL = inL;
         outR = inR;
#else
         out = inL;
#endif // STEREO
         float tmp_f; (void)tmp_f;
         float tmp2_f; (void)tmp2_f;
         
         // ========
         // ======== lane "out" modIdx=0 modString=zlp
         // ========
         
         // -- mod="zlp" dstVar=out
         
         // ---- mod="zlp" input "sub" seq 1/1
         
         // -- mod="$m_carrier_wave" dstVar=voice->tmp5/*zlp_sub_off_f*/
         voice->tmp5/*zlp_sub_off_f*/ = voice->mod_carrier_wave_cur;
         voice->tmp6/*zlp_sub_off*/ = (int)(voice->tmp5/*zlp_sub_off_f*/ * 128);
         if((voice->tmp6/*zlp_sub_off*/ + 128) > 1536)
            voice->tmp6/*zlp_sub_off*/ = 1408;
         else if(voice->tmp6/*zlp_sub_off*/ < 0)
            voice->tmp6/*zlp_sub_off*/ = 0;
         voice->tmp5/*zlp_smp_next*/ = loc_smp_aon_fm_oscwaves_zone0[voice->tmp6/*zlp_sub_off*/+(((voice->tmp4_zlp_pos >> 16) + 1) & 127)];
         out = loc_smp_aon_fm_oscwaves_zone0[voice->tmp6/*zlp_sub_off*/+( (voice->tmp4_zlp_pos >> 16)      & 127)];
         out = out + (voice->tmp5/*zlp_smp_next*/ - out) * ((voice->tmp4_zlp_pos & 65535) * (1.0f / 65536.0f));
         
         // ---- mod="zlp" input "rate" seq 1/1
         
         // -- mod="$p_carrier_freq" dstVar=voice->tmp7/*rate*/
         voice->tmp7/*rate*/ = shared->params[PARAM_CARRIER_FREQ] * 2.0f - 1.0f;
         
         // -- mod="$m_carrier_freq" dstVar=voice->tmp7/*rate*/
         voice->tmp8/*seq*/ = voice->tmp7/*rate*/;
         voice->tmp8/*seq*/ = voice->mod_carrier_freq_cur;
         voice->tmp7/*rate*/ += voice->tmp8/*seq*/;
         
         // -- mod="bts" dstVar=voice->tmp7/*rate*/
         voice->tmp7/*rate*/ = loc_bipolar_to_scale(voice->tmp7/*rate*/, 16.0f, 16.0f);
         
         // -- mod="zlp" dstVar=voice->tmp7/*rate*/
         voice->tmp8/*seq*/ = voice->tmp7/*rate*/;
         
         // ---- mod="zlp" input "sub" seq 1/1
         
         // -- mod="$m_mod_wave" dstVar=voice->tmp10/*zlp_sub_off_f*/
         voice->tmp10/*zlp_sub_off_f*/ = voice->mod_mod_wave_cur;
         voice->tmp11/*zlp_sub_off*/ = (int)(voice->tmp10/*zlp_sub_off_f*/ * 128);
         if((voice->tmp11/*zlp_sub_off*/ + 128) > 1536)
            voice->tmp11/*zlp_sub_off*/ = 1408;
         else if(voice->tmp11/*zlp_sub_off*/ < 0)
            voice->tmp11/*zlp_sub_off*/ = 0;
         voice->tmp10/*zlp_smp_next*/ = loc_smp_aon_fm_oscwaves_zone0[voice->tmp11/*zlp_sub_off*/+(((voice->tmp9_zlp_pos >> 16) + 1) & 127)];
         voice->tmp8/*seq*/ = loc_smp_aon_fm_oscwaves_zone0[voice->tmp11/*zlp_sub_off*/+( (voice->tmp9_zlp_pos >> 16)      & 127)];
         voice->tmp8/*seq*/ = voice->tmp8/*seq*/ + (voice->tmp10/*zlp_smp_next*/ - voice->tmp8/*seq*/) * ((voice->tmp9_zlp_pos & 65535) * (1.0f / 65536.0f));
         
         // ---- mod="zlp" input "rate" seq 1/1
         
         // -- mod="$p_mod_freq" dstVar=voice->tmp12/*rate*/
         voice->tmp12/*rate*/ = shared->params[PARAM_MOD_FREQ] * 2.0f - 1.0f;
         
         // -- mod="$m_mod_freq" dstVar=voice->tmp12/*rate*/
         voice->tmp13/*seq*/ = voice->tmp12/*rate*/;
         voice->tmp13/*seq*/ = voice->mod_mod_freq_cur;
         voice->tmp12/*rate*/ += voice->tmp13/*seq*/;
         
         // -- mod="bts" dstVar=voice->tmp12/*rate*/
         voice->tmp12/*rate*/ = loc_bipolar_to_scale(voice->tmp12/*rate*/, 16.0f, 16.0f);
         
         // -- mod="$v_mod_kbd" dstVar=voice->tmp12/*rate*/
         voice->tmp13/*seq*/ = voice->tmp12/*rate*/;
         voice->tmp13/*seq*/ = voice->var_v_mod_kbd;
         voice->tmp12/*rate*/ *= voice->tmp13/*seq*/;
         voice->tmp9_zlp_pos += int(voice->tmp12/*rate*/ * 65536);
         
         // -- mod="svf" dstVar=voice->tmp8/*seq*/
         
         // ---- mod="svf" input "freq" seq 1/1
         
         // -- mod="$v_mod_flt" dstVar=voice->tmp10/*addsr_freq*/
         voice->tmp10/*addsr_freq*/ = voice->var_v_mod_flt;
         voice->tmp10/*addsr_freq*/ *= voice->sr_factor;
         voice->tmp14_svf_lp = voice->tmp14_svf_lp + (voice->tmp16_svf_bp * voice->tmp10/*addsr_freq*/);
         voice->tmp15_svf_hp = voice->tmp8/*seq*/ - voice->tmp14_svf_lp - (voice->tmp16_svf_bp * 1.0f);
         voice->tmp16_svf_bp = voice->tmp16_svf_bp + (voice->tmp15_svf_hp * voice->tmp10/*addsr_freq*/);
         voice->tmp8/*seq*/ = voice->tmp14_svf_lp;
         
         // -- mod="$m_mod_amp" dstVar=voice->tmp8/*seq*/
         voice->tmp10/*seq*/ = voice->tmp8/*seq*/;
         voice->tmp10/*seq*/ = voice->mod_mod_amp_cur;
         voice->tmp8/*seq*/ *= voice->tmp10/*seq*/;
         voice->tmp7/*rate*/ += voice->tmp8/*seq*/;
         
         // -- mod="$v_carrier_kbd" dstVar=voice->tmp7/*rate*/
         voice->tmp8/*seq*/ = voice->tmp7/*rate*/;
         voice->tmp8/*seq*/ = voice->var_v_carrier_kbd;
         voice->tmp7/*rate*/ *= voice->tmp8/*seq*/;
         voice->tmp4_zlp_pos += int(voice->tmp7/*rate*/ * 65536);
   
         /* end calc */

#ifdef OVERSAMPLE_FACTOR
#ifdef STEREO
         outOSL += outL;
         outOSR += outR;
#else
         outOS += out;
#endif // STEREO
#endif // OVERSAMPLE_FACTOR
         voice->note_speed_cur += voice->note_speed_inc;
         voice->note_cur       += voice->note_inc;
         voice->mod_carrier_wave_cur  += voice->mod_carrier_wave_inc;
         voice->mod_carrier_freq_cur  += voice->mod_carrier_freq_inc;
         voice->mod_mod_wave_cur   += voice->mod_mod_wave_inc;
         voice->mod_mod_freq_cur   += voice->mod_mod_freq_inc;
         voice->mod_mod_amp_cur    += voice->mod_mod_amp_inc;
         voice->mod_mod_flt_cur    += voice->mod_mod_flt_inc;
      }
#ifdef OVERSAMPLE_FACTOR
      // Apply lowpass filter before downsampling
      //   (note) normalized Fc = F/Fs = 0.442947 / sqrt(oversample_factor^2 - 1)
#ifdef STEREO
      outL = outOSL * (1.0f / OVERSAMPLE_FACTOR);
      outR = outOSR * (1.0f / OVERSAMPLE_FACTOR);
#else
      out = outOS * (1.0f / OVERSAMPLE_FACTOR);
#endif // STEREO
#endif // OVERSAMPLE_FACTOR
#ifdef STEREO
      outL = Dstplugin_fix_denorm_32(outL);
      outR = Dstplugin_fix_denorm_32(outR);
#else
      out = Dstplugin_fix_denorm_32(out);
#endif // STEREO
#ifdef STEREO
      _samplesOut[k]      = outL;
      _samplesOut[k + 1u] = outR;
#else
      _samplesOut[k]      = out;
      _samplesOut[k + 1u] = out;
#endif // STEREO

      // Next frame
      k += 2u;
#ifdef STEREO
      j += 2u;
#else
      j += jStep;
#endif // STEREO
   } /* loop numFrames */
}

static st_plugin_shared_t *ST_PLUGIN_API loc_shared_new(st_plugin_info_t *_info) {
   aon_fm_v1_shared_t *ret = (aon_fm_v1_shared_t *)malloc(sizeof(aon_fm_v1_shared_t));
   if(NULL != ret)
   {
      memset((void*)ret, 0, sizeof(*ret));
      ret->base.info  = _info;
      memcpy((void*)ret->params, (void*)loc_param_resets, NUM_PARAMS * sizeof(float));
   }
   return &ret->base;
}

static void ST_PLUGIN_API loc_shared_delete(st_plugin_shared_t *_shared) {
   free((void*)_shared);
}

static st_plugin_voice_t *ST_PLUGIN_API loc_voice_new(st_plugin_info_t *_info, unsigned int _voiceIdx) {
   aon_fm_v1_voice_t *voice = (aon_fm_v1_voice_t *)malloc(sizeof(aon_fm_v1_voice_t));
   if(NULL != voice)
   {
      memset((void*)voice, 0, sizeof(*voice));
      voice->base.info = _info;
      voice->tmp4_zlp_pos = 0;
      voice->tmp9_zlp_pos = 0;
   }
   return &voice->base;
}

static void ST_PLUGIN_API loc_voice_delete(st_plugin_voice_t *_voice) {
   ST_PLUGIN_VOICE_CAST(aon_fm_v1_voice_t);

   free((void*)_voice);
   }

static void ST_PLUGIN_API loc_plugin_exit(st_plugin_info_t *_info) {
   free((void*)_info);
}

#ifdef USE_CYCLE_SINE_TBL
static void loc_calc_sine_tbl(void) {
#define QCOS_BITS 16
#define QCOS_ONE  (1 << QCOS_BITS)
#define QCOS_MASK (QCOS_ONE - 1)
   // (note) same as in TSR "C" implementation
   float *qcos = cycle_sine_tbl_f + 4096; // quarter cos tbl

   // calc quarter cos tbl
   int k = 0;
   for(int a = 0; a < (QCOS_ONE/4); a += (QCOS_ONE/16384)/*4*/)  // 4096 elements
   {
      int x = a - ((int)(QCOS_ONE * 0.25 + 0.5)) + ((a + ((int)(QCOS_ONE * 0.25 + 0.5)))&~QCOS_MASK);
      x = ((x * ((x<0?-x:x) - ((int)(QCOS_ONE * 0.5 + 0.5)))) >> QCOS_BITS) << 4;
      x += (((((int)(QCOS_ONE * 0.225 + 0.5)) * x) >> QCOS_BITS) * ((x<0?-x:x) - QCOS_ONE)) >> QCOS_BITS;
      qcos[k++] = x / float(QCOS_ONE);
   }

   // 0..90deg (rev qtbl)
   int j = 4096;
   k = 0;
   loop(4096)
      cycle_sine_tbl_f[k++] = qcos[--j];

   // 90..180deg = cos tbl
   k += 4096;

   // 180..360deg (y-flip first half of tbl)
   j = 0;
   loop(8192)
      cycle_sine_tbl_f[k++] = -cycle_sine_tbl_f[j++];

#ifdef USE_CYCLE_SINE_TBL_I
   loop(16384)
      cycle_sine_tbl_i[i] = (short)(cycle_sine_tbl_f[i] * 2048.0f/*FX_ONE*/);
#endif // USE_CYCLE_SINE_TBL_I
}
#endif // USE_CYCLE_SINE_TBL

#ifdef USE_CYCLE_HSE_TBL
#endif // USE_CYCLE_HSE_TBL

extern "C" {
st_plugin_info_t *aon_fm_v1_init(void) {
   aon_fm_v1_info_t *ret = (aon_fm_v1_info_t *)malloc(sizeof(aon_fm_v1_info_t));

   if(NULL != ret)
   {
      memset(ret, 0, sizeof(*ret));

      ret->base.api_version = ST_PLUGIN_API_VERSION;
      ret->base.id          = "aon_fm_v1";  // unique id. don't change this in future builds.
      ret->base.author      = "bsp";
      ret->base.name        = "aon_fm_v1";
      ret->base.short_name  = "aon_fm_v1";
      ret->base.flags       = ST_PLUGIN_FLAG_OSC;
      ret->base.category    = ST_PLUGIN_CAT_UNKNOWN;
      ret->base.num_params  = NUM_PARAMS;
      ret->base.num_mods    = NUM_MODS;

      ret->base.shared_new                          = &loc_shared_new;
      ret->base.shared_delete                       = &loc_shared_delete;
      ret->base.voice_new                           = &loc_voice_new;
      ret->base.voice_delete                        = &loc_voice_delete;
#ifndef CYCLE_SKIP_UI
      ret->base.get_param_name                      = &loc_get_param_name;
      ret->base.get_param_group_name                = &loc_get_param_group_name;
      ret->base.get_param_group_idx                 = &loc_get_param_group_idx;
      ret->base.get_param_section_name              = &loc_get_param_section_name;
      ret->base.get_param_section_idx               = &loc_get_param_section_idx;
      ret->base.get_param_reset                     = &loc_get_param_reset;
      ret->base.query_dynamic_param_preset_values   = &loc_query_dynamic_param_preset_values;
      ret->base.query_dynamic_param_preset_name     = &loc_query_dynamic_param_preset_name;
      ret->base.get_array_param_size                = &loc_get_array_param_size;
      ret->base.get_array_param_num_variations      = &loc_get_array_param_num_variations;
      ret->base.get_array_param_variation_ptr       = &loc_get_array_param_variation_ptr;
      ret->base.set_array_param_edit_variation_idx  = &loc_set_array_param_edit_variation_idx;
      ret->base.get_array_param_element_name        = &loc_get_array_param_element_name;
      ret->base.get_array_param_element_value_range = &loc_get_array_param_element_value_range;
      ret->base.get_array_param_element_reset       = &loc_get_array_param_element_reset;
      ret->base.update_lut                          = &loc_update_lut;
#endif // CYCLE_SKIP_UI
      ret->base.get_param_value                     = &loc_get_param_value;
      ret->base.set_param_value                     = &loc_set_param_value;
#ifndef CYCLE_SKIP_UI
      ret->base.get_mod_name                        = &loc_get_mod_name;
#endif // CYCLE_SKIP_UI
      ret->base.set_sample_rate                     = &loc_set_sample_rate;
      ret->base.set_bpm                             = &loc_set_bpm;
      ret->base.note_on                             = &loc_note_on;
      ret->base.set_mod_value                       = &loc_set_mod_value;
      ret->base.prepare_block                       = &loc_prepare_block;
      ret->base.process_replace                     = &loc_process_replace;
      ret->base.plugin_exit                         = &loc_plugin_exit;

#ifdef USE_CYCLE_SINE_TBL
      loc_calc_sine_tbl();
#endif // USE_CYCLE_SINE_TBL
   }

   return &ret->base;
}

#ifndef STFX_SKIP_MAIN_INIT
ST_PLUGIN_APICALL st_plugin_info_t *ST_PLUGIN_API st_plugin_init(unsigned int _pluginIdx) {
   switch(_pluginIdx)
   {
      case 0u:
         return aon_fm_v1_init();
   }
   return NULL;
}
#endif // STFX_SKIP_MAIN_INIT

} // extern "C"
