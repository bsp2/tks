// ----
// ---- file   : cycle_rms_comp_stereo_1.cpp
// ---- author : bsp
// ---- legal  : Distributed under terms of the MIT license (https://opensource.org/licenses/MIT)
// ----
// ----          Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// ----          associated documentation files (the "Software"), to deal in the Software without restriction, including
// ----          without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// ----          copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to
// ----          the following conditions:
// ----
// ----          The above copyright notice and this permission notice shall be included in all copies or substantial
// ----          portions of the Software.
// ----
// ----          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// ----          NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// ----          IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// ----          WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// ----          SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ----
// ---- info   : auto-generated by "Cycle"
// ----           $ g++ -Wall -Wno-unused-function -Wno-unused-variable -I../../tksampler -c cycle_rms_comp_stereo_1.cpp -o cycle_rms_comp_stereo_1.o
// ---- created: 08Jan2025 19:20:45
// ----
// ----
// ----

// (note) pre-define CYCLE_SKIP_UI to skip all code used only for UI/editing purposes (e.g. when compiling for standalone replay)
// #define CYCLE_SKIP_UI  defined

#include <plugin.h>

#include <stdlib.h>
#include <math.h>
#include <string.h>

#define STEREO  defined

#define PARAM_WET                0
#define PARAM_PUNCH              1
#define PARAM_EXP                2
#define PARAM_ATK                3
#define PARAM_RLS                4
#define PARAM_THREE_D            5
#define PARAM_SC_HPF             6
#define PARAM_SC_GAIN            7
#define PARAM_WET_GAIN           8
#define NUM_PARAMS               9
#ifndef CYCLE_SKIP_UI
static const char *loc_param_names[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   +1
#endif
                                   ] = {
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   ""
#else
   "wet",                     // 0: WET
   "punch",                   // 1: PUNCH
   "exp",                     // 2: EXP
   "atk",                     // 3: ATK
   "rls",                     // 4: RLS
   "three_d",                 // 5: THREE_D
   "sc_hpf",                  // 6: SC_HPF
   "sc_gain",                 // 7: SC_GAIN
   "wet_gain",                // 8: WET_GAIN

#endif
};
#endif // CYCLE_SKIP_UI
static float loc_param_resets[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                                   +1
#endif
                              ] = {
#if defined(_MSC_VER) && 0 == NUM_PARAMS
   0.0f
#else
   0.7f,                      // 0: WET
   0.29f,                     // 1: PUNCH
   0.2f,                      // 2: EXP
   0.08f,                     // 3: ATK
   0.35f,                     // 4: RLS
   0.5f,                      // 5: THREE_D
   0.25f,                     // 6: SC_HPF
   0.5f,                      // 7: SC_GAIN
   0.5f,                      // 8: WET_GAIN

#endif
};

#define MOD_WET                  0
#define MOD_PUNCH                1
#define MOD_EXP                  2
#define MOD_ATK                  3
#define MOD_RLS                  4
#define MOD_THREE_D              5
#define MOD_SC_HPF               6
#define MOD_SC_GAIN              7
#define MOD_WET_GAIN             8
#define NUM_MODS                 9
#ifndef CYCLE_SKIP_UI
static const char *loc_mod_names[NUM_MODS
#if defined(_MSC_VER) && 0 == NUM_MODS
   +1
#endif
                                 ] = {
#if defined(_MSC_VER) && 0 == NUM_MODS
   ""
#else
   "wet",                  // 0: WET
   "punch",                // 1: PUNCH
   "exp",                  // 2: EXP
   "atk",                  // 3: ATK
   "rls",                  // 4: RLS
   "three_d",              // 5: THREE_D
   "sc_hpf",               // 6: SC_HPF
   "sc_gain",              // 7: SC_GAIN
   "wet_gain",             // 8: WET_GAIN

#endif
};
#endif // CYCLE_SKIP_UI

typedef struct cycle_rms_comp_stereo_1_info_s {
   st_plugin_info_t base;
} cycle_rms_comp_stereo_1_info_t;

typedef struct cycle_rms_comp_stereo_1_shared_s {
   st_plugin_shared_t base;
   float params[NUM_PARAMS
#if defined(_MSC_VER) && 0 == NUM_PARAMS
                +1
#endif
                ];

} cycle_rms_comp_stereo_1_shared_t;

typedef struct cycle_rms_comp_stereo_1_voice_s {
   st_plugin_voice_t base;
   float             sample_rate;
   float             bpm;
   float             velocity;
   float             note_speed_fixed;
   float             note_speed_cur;
   float             note_speed_inc;
   float             note_cur;
   float             note_inc;
   float             mods[NUM_MODS
#if defined(_MSC_VER) && 0 == NUM_MODS
                          +1
#endif
                          ];
   float mod_wet_cur;
   float mod_wet_inc;
   float mod_punch_cur;
   float mod_punch_inc;
   float mod_exp_cur;
   float mod_exp_inc;
   float mod_atk_cur;
   float mod_atk_inc;
   float mod_rls_cur;
   float mod_rls_inc;
   float mod_three_d_cur;
   float mod_three_d_inc;
   float mod_sc_hpf_cur;
   float mod_sc_hpf_inc;
   float mod_sc_gain_cur;
   float mod_sc_gain_inc;
   float mod_wet_gain_cur;
   float mod_wet_gain_inc;

   float tmp1;
   float tmp2;
   float tmp3_svf_lp;
   float tmp4_svf_hp;
   float tmp5_svf_bp;
   float tmp6;
   int tmp7_rms_write_idx;
   float tmp8_rms_sum;
   float arr0_rms_history[16];
   float arr1_rms_win[16];
   int tmp9_rms_init_i;
   float tmp10_rms_init_weight;
   float tmp11_rms_init_sum;
   int tmp12;
   float tmp13_slw_last;
   float tmp14;
   float tmp15;
   float tmp16_svf_lp;
   float tmp17_svf_hp;
   float tmp18_svf_bp;
   int tmp19_rms_write_idx;
   float tmp20_rms_sum;
   float arr2_rms_history[16];
   float arr3_rms_win[16];
   int tmp21_rms_init_i;
   float tmp22_rms_init_weight;
   float tmp23_rms_init_sum;
   float tmp24_slw_last;
   float var_x;
   float var_v_threed_l;
   float var_v_threed_r;
   float var___ti_rms_comp_1;
   float var_v_punch1;
   float var_v_exp1;
   float var_v_atk1;
   float var_v_rls1;
   float var_v_sc_hpf1;
   float var_v_sc_gain1;
   float var_v_wet_gain1;
   float var___ti_rms_comp_1_out__v_in;
   float var___ti_rms_comp_1_out__v_rms;
   float var___ti_rms_comp_1_out__v_slw;
   float var___ti_rms_comp_2;
   float var_v_punch2;
   float var_v_exp2;
   float var_v_atk2;
   float var_v_rls2;
   float var_v_sc_hpf2;
   float var_v_sc_gain2;
   float var_v_wet_gain2;
   float var___ti_rms_comp_2_out__v_in;
   float var___ti_rms_comp_2_out__v_rms;
   float var___ti_rms_comp_2_out__v_slw;
   float sr_factor;

} cycle_rms_comp_stereo_1_voice_t;

#define loop(X)  for(unsigned int i = 0u; i < (X); i++)
#define clamp(a,b,c) (((a)<(b))?(b):(((a)>(c))?(c):(a)))

static inline float mathLerpf(float _a, float _b, float _t) { return _a + (_b - _a) * _t; }
static inline float mathClampf(float a, float b, float c) { return (((a)<(b))?(b):(((a)>(c))?(c):(a))); }
static inline float mathMinf(float a, float b) { return (a<b)?a:b; }
static inline float mathMaxf(float a, float b) { return (a>b)?a:b; }
static inline float mathAbsMaxf(float _x, float _y) { return ( ( (_x<0.0f)?-_x:_x)>((_y<0.0f)?-_y:_y)?_x:_y ); }
static inline float mathAbsMinf(float _x, float _y) { return ( ((_x<0.0f)?-_x:_x)<((_y<0.0f)?-_y:_y)?_x:_y ); }
static inline float frac(float _x) { return _x - ((int)_x); }

static inline float winLinear(const float *_s, float _index) {
   int idx = (int)_index;
   float r = _index - (float)idx;
   return mathLerpf(_s[idx], _s[idx+1], r);
}

static float ffrac_s(float _f) { int i; if(_f >= 0.0f) { i = (int)_f; return _f - (float)i; } else { i = (int)-_f; return 1.0f - (-_f - (float)i); } }

static float mathLogf(const float _x) {
   union {
      float f;
      unsigned int u;
   } bx;
   bx.f = _x;
   const unsigned int ex = bx.u >> 23;
   const signed int t = (signed int)ex - (signed int)127;
   const unsigned int s = (t < 0) ? (-t) : t;
   bx.u = 1065353216u | (bx.u & 8388607u);
   return
      -1.7417939f + (2.8212026f + (-1.4699568f + (0.44717955f - 0.056570851f * bx.f)*bx.f)*bx.f)*bx.f
      + 0.6931471806f * t;
}

static float mathPowerf(float _x, float _y) {
   float r;
   if(_y != 0.0f)
   {
      if(_x < 0.0f)
      {
         r = (float)( -expf(_y*mathLogf(-_x)) );
      }
      else if(_x > 0.0f)
      {
         r = (float)( expf(_y*mathLogf(_x)) );
      }
      else
      {
         r = 0.0f;
      }
   }
   else
   {
      r = 1.0f;
   }
   return Dstplugin_fix_denorm_32(r);
}

static void loc_prepare(st_plugin_voice_t *_voice);

void loc_prepare(st_plugin_voice_t *_voice) {
   ST_PLUGIN_VOICE_CAST(cycle_rms_comp_stereo_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(cycle_rms_comp_stereo_1_shared_t);

   int tmp7_rms_write_idx;
   voice->tmp11_rms_init_sum = 0.0f;
   for(voice->tmp9_rms_init_i = 0; voice->tmp9_rms_init_i < 16; voice->tmp9_rms_init_i++)
   {
      voice->tmp10_rms_init_weight = sinf(voice->tmp9_rms_init_i * 0.19635f);
      voice->tmp11_rms_init_sum += voice->tmp10_rms_init_weight;
      voice->arr1_rms_win[voice->tmp9_rms_init_i] = voice->tmp10_rms_init_weight;
   }
   for(voice->tmp9_rms_init_i = 0; voice->tmp9_rms_init_i < 16; voice->tmp9_rms_init_i++)
   {
      voice->arr1_rms_win[voice->tmp9_rms_init_i] = voice->arr1_rms_win[voice->tmp9_rms_init_i] / voice->tmp11_rms_init_sum;
   }
   int tmp19_rms_write_idx;
   voice->tmp23_rms_init_sum = 0.0f;
   for(voice->tmp21_rms_init_i = 0; voice->tmp21_rms_init_i < 16; voice->tmp21_rms_init_i++)
   {
      voice->tmp22_rms_init_weight = sinf(voice->tmp21_rms_init_i * 0.19635f);
      voice->tmp23_rms_init_sum += voice->tmp22_rms_init_weight;
      voice->arr3_rms_win[voice->tmp21_rms_init_i] = voice->tmp22_rms_init_weight;
   }
   for(voice->tmp21_rms_init_i = 0; voice->tmp21_rms_init_i < 16; voice->tmp21_rms_init_i++)
   {
      voice->arr3_rms_win[voice->tmp21_rms_init_i] = voice->arr3_rms_win[voice->tmp21_rms_init_i] / voice->tmp23_rms_init_sum;
   }
   float out = 0.0f;
   (void)out;
   // -------- lane "prepare" modIdx=0 modString=$m_punch
   
   // -- mod="$m_punch" dstVar=out
   out = voice->mod_punch_cur;
   
   // -- mod="$v_threed_l" dstVar=out
   voice->tmp1/*seq*/ = out;
   voice->tmp1/*seq*/ = voice->var_v_threed_l;
   
   // -- mod="fma" dstVar=voice->tmp1/*seq*/
   voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * 0.5f) + 1.0f;
   out *= voice->tmp1/*seq*/;
   
   // -- mod="fma" dstVar=out
   out = (out * 7.5f) + 0.5f;
   
   // -- mod="sto v_punch1" dstVar=out
   voice->var_v_punch1 = out;
   
   // -- mod="$m_exp" dstVar=out
   out = voice->mod_exp_cur;
   
   // -- mod="$v_threed_l" dstVar=out
   voice->tmp1/*seq*/ = out;
   voice->tmp1/*seq*/ = voice->var_v_threed_l;
   
   // -- mod="fma" dstVar=voice->tmp1/*seq*/
   voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * 0.05f) + 1.0f;
   out *= voice->tmp1/*seq*/;
   
   // -- mod="fma" dstVar=out
   out = (out * 3.5f) + 0.5f;
   
   // -- mod="sto v_exp1" dstVar=out
   voice->var_v_exp1 = out;
   
   // -- mod="$m_atk" dstVar=out
   out = voice->mod_atk_cur;
   
   // -- mod="$v_threed_l" dstVar=out
   voice->tmp1/*seq*/ = out;
   voice->tmp1/*seq*/ = voice->var_v_threed_l;
   
   // -- mod="fma" dstVar=voice->tmp1/*seq*/
   voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * 0.4f) + 1.0f;
   out *= voice->tmp1/*seq*/;
   
   // -- mod="pow" dstVar=out
   out = out * out * out;
   
   // -- mod="fma" dstVar=out
   out = (out * 0.4f) + 1e-05f;
   
   // -- mod="sto v_atk1" dstVar=out
   voice->var_v_atk1 = out;
   
   // -- mod="$m_rls" dstVar=out
   out = voice->mod_rls_cur;
   
   // -- mod="$v_threed_l" dstVar=out
   voice->tmp1/*seq*/ = out;
   voice->tmp1/*seq*/ = voice->var_v_threed_l;
   
   // -- mod="fma" dstVar=voice->tmp1/*seq*/
   voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * 0.4f) + 1.0f;
   out *= voice->tmp1/*seq*/;
   
   // -- mod="pow" dstVar=out
   out = out * out;
   
   // -- mod="fma" dstVar=out
   out = (out * 0.002f) + 5e-05f;
   
   // -- mod="sto v_rls1" dstVar=out
   voice->var_v_rls1 = out;
   
   // -- mod="$m_sc_hpf" dstVar=out
   out = voice->mod_sc_hpf_cur;
   
   // -- mod="$v_threed_l" dstVar=out
   voice->tmp1/*seq*/ = out;
   voice->tmp1/*seq*/ = voice->var_v_threed_l;
   
   // -- mod="fma" dstVar=voice->tmp1/*seq*/
   voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * 0.1f) + 1.0f;
   out *= voice->tmp1/*seq*/;
   
   // -- mod="clp" dstVar=out
   if(out > 1.0f) out = 1.0f;
   else if(out < 0.0f) out = 0.0f;
   
   // -- mod="p2s" dstVar=out
   out  = (mathPowerf(2.0f, out * 7.0f) - 1.0f);
   out *= 0.00787402f;
   
   // -- mod="sto v_sc_hpf1" dstVar=out
   voice->var_v_sc_hpf1 = out;
   
   // -- mod="$m_sc_gain" dstVar=out
   out = voice->mod_sc_gain_cur;
   
   // -- mod="$v_threed_l" dstVar=out
   voice->tmp1/*seq*/ = out;
   voice->tmp1/*seq*/ = voice->var_v_threed_l;
   
   // -- mod="fma" dstVar=voice->tmp1/*seq*/
   voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * -0.1f) + 1.0f;
   out *= voice->tmp1/*seq*/;
   
   // -- mod="fma" dstVar=out
   out = (out * 4.0f) + -2.0f;
   
   // -- mod="pow" dstVar=out
   
   // ---- mod="pow" input "base" seq 1/1
   
   // -- mod="10" dstVar=voice->tmp1/*base*/
   voice->tmp1/*base*/ = 10.0f;
   out = mathPowerf(voice->tmp1/*base*/, out);
   
   // -- mod="sto v_sc_gain1" dstVar=out
   voice->var_v_sc_gain1 = out;
   
   // -- mod="$m_wet_gain" dstVar=out
   out = voice->mod_wet_gain_cur;
   
   // -- mod="fma" dstVar=out
   out = (out * 2.0f) + -1.0f;
   
   // -- mod="pow" dstVar=out
   
   // ---- mod="pow" input "base" seq 1/1
   
   // -- mod="10" dstVar=voice->tmp1/*base*/
   voice->tmp1/*base*/ = 10.0f;
   out = mathPowerf(voice->tmp1/*base*/, out);
   
   // -- mod="sto v_wet_gain1" dstVar=out
   voice->var_v_wet_gain1 = out;
   // -------- lane "prepare" modIdx=1 modString=$m_punch
   
   // -- mod="$m_punch" dstVar=out
   out = voice->mod_punch_cur;
   
   // -- mod="$v_threed_r" dstVar=out
   voice->tmp1/*seq*/ = out;
   voice->tmp1/*seq*/ = voice->var_v_threed_r;
   
   // -- mod="fma" dstVar=voice->tmp1/*seq*/
   voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * 0.5f) + 1.0f;
   out *= voice->tmp1/*seq*/;
   
   // -- mod="fma" dstVar=out
   out = (out * 7.5f) + 0.5f;
   
   // -- mod="sto v_punch2" dstVar=out
   voice->var_v_punch2 = out;
   
   // -- mod="$m_exp" dstVar=out
   out = voice->mod_exp_cur;
   
   // -- mod="$v_threed_r" dstVar=out
   voice->tmp1/*seq*/ = out;
   voice->tmp1/*seq*/ = voice->var_v_threed_r;
   
   // -- mod="fma" dstVar=voice->tmp1/*seq*/
   voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * 0.05f) + 1.0f;
   out *= voice->tmp1/*seq*/;
   
   // -- mod="fma" dstVar=out
   out = (out * 3.5f) + 0.5f;
   
   // -- mod="sto v_exp2" dstVar=out
   voice->var_v_exp2 = out;
   
   // -- mod="$m_atk" dstVar=out
   out = voice->mod_atk_cur;
   
   // -- mod="$v_threed_r" dstVar=out
   voice->tmp1/*seq*/ = out;
   voice->tmp1/*seq*/ = voice->var_v_threed_r;
   
   // -- mod="fma" dstVar=voice->tmp1/*seq*/
   voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * 0.4f) + 1.0f;
   out *= voice->tmp1/*seq*/;
   
   // -- mod="pow" dstVar=out
   out = out * out * out;
   
   // -- mod="fma" dstVar=out
   out = (out * 0.4f) + 1e-05f;
   
   // -- mod="sto v_atk2" dstVar=out
   voice->var_v_atk2 = out;
   
   // -- mod="$m_rls" dstVar=out
   out = voice->mod_rls_cur;
   
   // -- mod="$v_threed_r" dstVar=out
   voice->tmp1/*seq*/ = out;
   voice->tmp1/*seq*/ = voice->var_v_threed_r;
   
   // -- mod="fma" dstVar=voice->tmp1/*seq*/
   voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * 0.4f) + 1.0f;
   out *= voice->tmp1/*seq*/;
   
   // -- mod="pow" dstVar=out
   out = out * out;
   
   // -- mod="fma" dstVar=out
   out = (out * 0.002f) + 5e-05f;
   
   // -- mod="sto v_rls2" dstVar=out
   voice->var_v_rls2 = out;
   
   // -- mod="$m_sc_hpf" dstVar=out
   out = voice->mod_sc_hpf_cur;
   
   // -- mod="$v_threed_r" dstVar=out
   voice->tmp1/*seq*/ = out;
   voice->tmp1/*seq*/ = voice->var_v_threed_r;
   
   // -- mod="fma" dstVar=voice->tmp1/*seq*/
   voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * 0.1f) + 1.0f;
   out *= voice->tmp1/*seq*/;
   
   // -- mod="clp" dstVar=out
   if(out > 1.0f) out = 1.0f;
   else if(out < 0.0f) out = 0.0f;
   
   // -- mod="p2s" dstVar=out
   out  = (mathPowerf(2.0f, out * 7.0f) - 1.0f);
   out *= 0.00787402f;
   
   // -- mod="sto v_sc_hpf2" dstVar=out
   voice->var_v_sc_hpf2 = out;
   
   // -- mod="$m_sc_gain" dstVar=out
   out = voice->mod_sc_gain_cur;
   
   // -- mod="$v_threed_r" dstVar=out
   voice->tmp1/*seq*/ = out;
   voice->tmp1/*seq*/ = voice->var_v_threed_r;
   
   // -- mod="fma" dstVar=voice->tmp1/*seq*/
   voice->tmp1/*seq*/ = (voice->tmp1/*seq*/ * -0.1f) + 1.0f;
   out *= voice->tmp1/*seq*/;
   
   // -- mod="fma" dstVar=out
   out = (out * 4.0f) + -2.0f;
   
   // -- mod="pow" dstVar=out
   
   // ---- mod="pow" input "base" seq 1/1
   
   // -- mod="10" dstVar=voice->tmp1/*base*/
   voice->tmp1/*base*/ = 10.0f;
   out = mathPowerf(voice->tmp1/*base*/, out);
   
   // -- mod="sto v_sc_gain2" dstVar=out
   voice->var_v_sc_gain2 = out;
   
   // -- mod="$m_wet_gain" dstVar=out
   out = voice->mod_wet_gain_cur;
   
   // -- mod="fma" dstVar=out
   out = (out * 2.0f) + -1.0f;
   
   // -- mod="pow" dstVar=out
   
   // ---- mod="pow" input "base" seq 1/1
   
   // -- mod="10" dstVar=voice->tmp1/*base*/
   voice->tmp1/*base*/ = 10.0f;
   out = mathPowerf(voice->tmp1/*base*/, out);
   
   // -- mod="sto v_wet_gain2" dstVar=out
   voice->var_v_wet_gain2 = out;
} /* end prepare */


#ifndef CYCLE_SKIP_UI
static unsigned int loc_copy_chars(char *_d, const unsigned int _dSize, const char *_s) {
   unsigned int r = 0u;
   if(NULL != _d)
   {
      // Write min(dSize,len(s)) characters to 'd'
      char *d = _d;
      if(NULL != _s)
      {
         const char *s = _s;
         for(;;)
         {
            if(r < _dSize)
            {
               char c = s[r++];
               *d++ = c;
               if(0 == c)
                  break;
            }
            else
            {
               if(r > 0u)
                  d[-1] = 0;  // force ASCIIZ
               break;
            }
         }
      }
      else
      {
         if(_dSize > 0u)
         {
            _d[0] = 0;
            r = 1u;
         }
      }
   }
   else
   {
      // Return total length of source string
      if(NULL != _s)
      {
         const char *s = _s;
         for(;;)
         {
            char c = s[r++];
            if(0 == c)
               break;
         }
      }
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int loc_copy_floats(float              *_d,
                                    const unsigned int  _dSize,
                                    const float        *_s,
                                    const unsigned int  _sNum
                                    ) {
   unsigned int r = 0u;
   if(NULL != _d)
   {
      // Write min(dSize,sNum) characters to 'd'
      if(NULL != _s)
      {
         unsigned int num = (_sNum > _dSize) ? _dSize : _sNum;
         memcpy((void*)_d, (const void*)_s, num * sizeof(float));
         r = num;
      }
   }
   else
   {
      // Query total number of presets
      r = _sNum;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_name(st_plugin_info_t *_info,
                                                    unsigned int      _paramIdx
                                                    ) {
   (void)_info;
   return loc_param_names[_paramIdx];
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_group_name(st_plugin_info_t *_info,
                                                          unsigned int      _paramGroupIdx
                                                          ) {
   (void)_info;
   const char *r = NULL;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_param_group_idx(st_plugin_info_t *_info,
                                                          unsigned int      _paramIdx
                                                          ) {
   (void)_info;
   unsigned int r = ~0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_param_section_name(st_plugin_info_t *_info,
                                                            unsigned int      _paramSectionIdx
                                                            ) {
   (void)_info;
   const char *r = NULL;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_param_section_idx(st_plugin_info_t *_info,
                                                            unsigned int      _paramIdx
                                                            ) {
   (void)_info;
   unsigned int r = ~0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float ST_PLUGIN_API loc_get_param_reset(st_plugin_info_t *_info,
                                               unsigned int      _paramIdx
                                               ) {
   (void)_info;
   return loc_param_resets[_paramIdx];
}
#endif // CYCLE_SKIP_UI

static float ST_PLUGIN_API loc_get_param_value(st_plugin_shared_t *_shared,
                                               unsigned int        _paramIdx
                                               ) {
   ST_PLUGIN_SHARED_CAST(cycle_rms_comp_stereo_1_shared_t);
   return shared->params[_paramIdx];
}

static void ST_PLUGIN_API loc_set_param_value(st_plugin_shared_t *_shared,
                                              unsigned int        _paramIdx,
                                              float               _value
                                              ) {
   ST_PLUGIN_SHARED_CAST(cycle_rms_comp_stereo_1_shared_t);
   shared->params[_paramIdx] = _value;
}

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_query_dynamic_param_preset_values(st_plugin_shared_t *_shared,
                                                                        const unsigned int  _paramIdx,
                                                                        float              *_retValues,
                                                                        const unsigned int  _retValuesSize
                                                                        ) {
   ST_PLUGIN_SHARED_CAST(cycle_rms_comp_stereo_1_shared_t);
   unsigned int r = 0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_query_dynamic_param_preset_name(st_plugin_shared_t *_shared,
                                                                      const unsigned int  _paramIdx,
                                                                      const unsigned int  _presetIdx,
                                                                      char               *_retBuf,
                                                                      const unsigned int  _retBufSize
                                                                      ) {
   ST_PLUGIN_SHARED_CAST(cycle_rms_comp_stereo_1_shared_t);
   unsigned int r = 0u;
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_array_param_size(st_plugin_info_t   *_info,
                                                           const unsigned int  _paramIdx
                                                           ) {
   unsigned int r = 0u;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static unsigned int ST_PLUGIN_API loc_get_array_param_num_variations(st_plugin_info_t   *_info,
                                                                     const unsigned int  _paramIdx
                                                                     ) {
   unsigned int r = 0u;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float * ST_PLUGIN_API loc_get_array_param_variation_ptr(st_plugin_shared_t *_shared,
                                                               const unsigned int  _paramIdx,
                                                               const unsigned int  _variationIdx
                                                               ) {
   ST_PLUGIN_SHARED_CAST(cycle_rms_comp_stereo_1_shared_t);
   float *r = NULL;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static void ST_PLUGIN_API loc_set_array_param_edit_variation_idx(st_plugin_shared_t *_shared,
                                                                 const unsigned int  _paramIdx,
                                                                 const int           _variationIdx
                                                                 ) {
   ST_PLUGIN_SHARED_CAST(cycle_rms_comp_stereo_1_shared_t);
   switch(_paramIdx)
   {
      default:
         break;
   }
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_array_param_element_name(st_plugin_info_t   *_info,
                                                                  const unsigned int  _paramIdx,
                                                                  const unsigned int  _elementIdx
                                                                  ) {
   ST_PLUGIN_INFO_CAST(cycle_rms_comp_stereo_1_info_t);
   const char *r = NULL;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static int ST_PLUGIN_API loc_get_array_param_element_value_range(st_plugin_info_t   *_info,
                                                                 const unsigned int  _paramIdx,
                                                                 const unsigned int  _elementIdx,
                                                                 float              *_retStorageMin,
                                                                 float              *_retStorageMax,
                                                                 float              *_retDisplayMin,
                                                                 float              *_retDisplayMax,
                                                                 unsigned int       *_retDisplayPrecision
                                                                 ) {
   (void)_elementIdx;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return 0;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static float ST_PLUGIN_API loc_get_array_param_element_reset(st_plugin_info_t   *_info,
                                                             const unsigned int  _paramIdx,
                                                             const unsigned int  _elementIdx
                                                             ) {
   ST_PLUGIN_INFO_CAST(cycle_rms_comp_stereo_1_info_t);
   float r = -999999.0f/*INVALID_VALUE*/;
   switch(_paramIdx)
   {
      default:
         break;
   }
   return r;
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static void ST_PLUGIN_API loc_update_lut(st_plugin_info_t   *_info,
                                         unsigned int        _idx,
                                         const float        *_src,
                                         const unsigned int  _srcNumElements
                                         ) {
   (void)_info;
   unsigned int copySz = 0u;
   (void)copySz;
   switch(_idx)
   {
      default:
         break;
   }
}
#endif // CYCLE_SKIP_UI

#ifndef CYCLE_SKIP_UI
static const char *ST_PLUGIN_API loc_get_mod_name(st_plugin_info_t *_info,
                                                  unsigned int      _modIdx
                                                  ) {
   (void)_info;
   return loc_mod_names[_modIdx];
}
#endif // CYCLE_SKIP_UI

static void ST_PLUGIN_API loc_set_sample_rate(st_plugin_voice_t *_voice,
                                              float              _sampleRate
                                              ) {
   ST_PLUGIN_VOICE_CAST(cycle_rms_comp_stereo_1_voice_t);
   if(_sampleRate != voice->sample_rate)
   {
      voice->sr_factor = 48000.0f / _sampleRate;
   }
   voice->sample_rate = _sampleRate;
}

static void ST_PLUGIN_API loc_set_bpm(st_plugin_voice_t *_voice,
                                      float              _bpm
                                      ) {
   ST_PLUGIN_VOICE_CAST(cycle_rms_comp_stereo_1_voice_t);
   voice->bpm = _bpm;
}

static void ST_PLUGIN_API loc_note_on(st_plugin_voice_t  *_voice,
                                      int                 _bGlide,
                                      unsigned char       _note,
                                      float               _vel
                                      ) {
   ST_PLUGIN_VOICE_CAST(cycle_rms_comp_stereo_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(cycle_rms_comp_stereo_1_shared_t);
   (void)_bGlide;
   (void)_note;
   (void)_vel;
   if(!_bGlide)
   {
      memset((void*)voice->mods, 0, sizeof(voice->mods));
#ifdef OVERSAMPLE_FACTOR
      voice->note_speed_fixed = (261.63f/*C-5*/ / (voice->sample_rate * OVERSAMPLE_FACTOR));
#else
      voice->note_speed_fixed = (261.63f/*C-5*/ / voice->sample_rate);
#endif // OVERSAMPLE_FACTOR
      voice->velocity = _vel;
   int tmp7_rms_write_idx;
   voice->tmp11_rms_init_sum = 0.0f;
   for(voice->tmp9_rms_init_i = 0; voice->tmp9_rms_init_i < 16; voice->tmp9_rms_init_i++)
   {
      voice->tmp10_rms_init_weight = sinf(voice->tmp9_rms_init_i * 0.19635f);
      voice->tmp11_rms_init_sum += voice->tmp10_rms_init_weight;
      voice->arr1_rms_win[voice->tmp9_rms_init_i] = voice->tmp10_rms_init_weight;
   }
   for(voice->tmp9_rms_init_i = 0; voice->tmp9_rms_init_i < 16; voice->tmp9_rms_init_i++)
   {
      voice->arr1_rms_win[voice->tmp9_rms_init_i] = voice->arr1_rms_win[voice->tmp9_rms_init_i] / voice->tmp11_rms_init_sum;
   }
   int tmp19_rms_write_idx;
   voice->tmp23_rms_init_sum = 0.0f;
   for(voice->tmp21_rms_init_i = 0; voice->tmp21_rms_init_i < 16; voice->tmp21_rms_init_i++)
   {
      voice->tmp22_rms_init_weight = sinf(voice->tmp21_rms_init_i * 0.19635f);
      voice->tmp23_rms_init_sum += voice->tmp22_rms_init_weight;
      voice->arr3_rms_win[voice->tmp21_rms_init_i] = voice->tmp22_rms_init_weight;
   }
   for(voice->tmp21_rms_init_i = 0; voice->tmp21_rms_init_i < 16; voice->tmp21_rms_init_i++)
   {
      voice->arr3_rms_win[voice->tmp21_rms_init_i] = voice->arr3_rms_win[voice->tmp21_rms_init_i] / voice->tmp23_rms_init_sum;
   }
      voice->tmp10_rms_init_weight = 0.0f;
      voice->tmp11_rms_init_sum = 0.0f;
      voice->tmp22_rms_init_weight = 0.0f;
      voice->tmp23_rms_init_sum = 0.0f;
      voice->tmp3_svf_lp = 0.0f;
      voice->tmp4_svf_hp = 0.0f;
      voice->tmp5_svf_bp = 0.0f;
      voice->tmp7_rms_write_idx = 0;
      voice->tmp8_rms_sum = 0.0f;
      memset(&voice->arr0_rms_history, 0, sizeof(voice->arr0_rms_history));
      memset(&voice->arr1_rms_win, 0, sizeof(voice->arr1_rms_win));
      voice->tmp13_slw_last = 0.0f;
      voice->tmp16_svf_lp = 0.0f;
      voice->tmp17_svf_hp = 0.0f;
      voice->tmp18_svf_bp = 0.0f;
      voice->tmp19_rms_write_idx = 0;
      voice->tmp20_rms_sum = 0.0f;
      memset(&voice->arr2_rms_history, 0, sizeof(voice->arr2_rms_history));
      memset(&voice->arr3_rms_win, 0, sizeof(voice->arr3_rms_win));
      voice->tmp24_slw_last = 0.0f;
      voice->var_x = 0.0f;
      voice->var_v_threed_l = 0.0f;
      voice->var_v_threed_r = 0.0f;
      voice->var___ti_rms_comp_1 = 0.0f;
      voice->var_v_punch1 = 0.0f;
      voice->var_v_exp1 = 0.0f;
      voice->var_v_atk1 = 0.0f;
      voice->var_v_rls1 = 0.0f;
      voice->var_v_sc_hpf1 = 0.0f;
      voice->var_v_sc_gain1 = 0.0f;
      voice->var_v_wet_gain1 = 0.0f;
      voice->var___ti_rms_comp_1_out__v_in = 0.0f;
      voice->var___ti_rms_comp_1_out__v_rms = 0.0f;
      voice->var___ti_rms_comp_1_out__v_slw = 0.0f;
      voice->var___ti_rms_comp_2 = 0.0f;
      voice->var_v_punch2 = 0.0f;
      voice->var_v_exp2 = 0.0f;
      voice->var_v_atk2 = 0.0f;
      voice->var_v_rls2 = 0.0f;
      voice->var_v_sc_hpf2 = 0.0f;
      voice->var_v_sc_gain2 = 0.0f;
      voice->var_v_wet_gain2 = 0.0f;
      voice->var___ti_rms_comp_2_out__v_in = 0.0f;
      voice->var___ti_rms_comp_2_out__v_rms = 0.0f;
      voice->var___ti_rms_comp_2_out__v_slw = 0.0f;
   }
}

static void ST_PLUGIN_API loc_set_mod_value(st_plugin_voice_t *_voice,
                                            unsigned int       _modIdx,
                                            float              _value,
                                            unsigned           _frameOffset
                                            ) {
   ST_PLUGIN_VOICE_CAST(cycle_rms_comp_stereo_1_voice_t);
   (void)_frameOffset;
   voice->mods[_modIdx] = _value;
}

static void ST_PLUGIN_API loc_prepare_block(st_plugin_voice_t *_voice,
                                            unsigned int       _numFrames,
                                            float              _freqHz,
                                            float              _note,
                                            float              _vol,
                                            float              _pan
                                            ) {
   ST_PLUGIN_VOICE_CAST(cycle_rms_comp_stereo_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(cycle_rms_comp_stereo_1_shared_t);
   (void)_note;
   (void)_vol;
   (void)_pan;

#ifdef OVERSAMPLE_FACTOR
   float noteSpeed = _freqHz / (voice->sample_rate * OVERSAMPLE_FACTOR);
#else
   float noteSpeed = _freqHz / voice->sample_rate;
#endif // OVERSAMPLE_FACTOR

   float modwet          = shared->params[PARAM_WET         ]                       + voice->mods[MOD_WET          ];
   float modpunch        = shared->params[PARAM_PUNCH       ]                       + voice->mods[MOD_PUNCH        ];
   float modexp          = shared->params[PARAM_EXP         ]                       + voice->mods[MOD_EXP          ];
   float modatk          = shared->params[PARAM_ATK         ]                       + voice->mods[MOD_ATK          ];
   float modrls          = shared->params[PARAM_RLS         ]                       + voice->mods[MOD_RLS          ];
   float modthree_d      = shared->params[PARAM_THREE_D     ]                       + voice->mods[MOD_THREE_D      ];
   float modsc_hpf       = shared->params[PARAM_SC_HPF      ]                       + voice->mods[MOD_SC_HPF       ];
   float modsc_gain      = shared->params[PARAM_SC_GAIN     ]                       + voice->mods[MOD_SC_GAIN      ];
   float modwet_gain     = shared->params[PARAM_WET_GAIN    ]                       + voice->mods[MOD_WET_GAIN     ];

   if(_numFrames > 0u)
   {
      // lerp
#ifdef OVERSAMPLE_FACTOR
      float recBlockSize = (1.0f / (_numFrames * OVERSAMPLE_FACTOR));
#else
      float recBlockSize = (1.0f / _numFrames);
#endif // OVERSAMPLE_FACTOR
      voice->note_speed_inc = (noteSpeed - voice->note_speed_cur) * recBlockSize;
      voice->note_inc       = (_note - voice->note_cur) * recBlockSize;
      voice->mod_wet_inc          = (modwet             - voice->mod_wet_cur           ) * recBlockSize;
      voice->mod_punch_inc        = (modpunch           - voice->mod_punch_cur         ) * recBlockSize;
      voice->mod_exp_inc          = (modexp             - voice->mod_exp_cur           ) * recBlockSize;
      voice->mod_atk_inc          = (modatk             - voice->mod_atk_cur           ) * recBlockSize;
      voice->mod_rls_inc          = (modrls             - voice->mod_rls_cur           ) * recBlockSize;
      voice->mod_three_d_inc      = (modthree_d         - voice->mod_three_d_cur       ) * recBlockSize;
      voice->mod_sc_hpf_inc       = (modsc_hpf          - voice->mod_sc_hpf_cur        ) * recBlockSize;
      voice->mod_sc_gain_inc      = (modsc_gain         - voice->mod_sc_gain_cur       ) * recBlockSize;
      voice->mod_wet_gain_inc     = (modwet_gain        - voice->mod_wet_gain_cur      ) * recBlockSize;
      loc_prepare(&voice->base);
   }
   else
   {
      // initial params/modulation (first block, not rendered)
      voice->note_speed_cur = noteSpeed;
      voice->note_speed_inc = 0.0f;
      voice->note_cur       = _note;
      voice->note_inc       = 0.0f;
      voice->mod_wet_cur          = modwet;
      voice->mod_wet_inc          = 0.0f;
      voice->mod_punch_cur        = modpunch;
      voice->mod_punch_inc        = 0.0f;
      voice->mod_exp_cur          = modexp;
      voice->mod_exp_inc          = 0.0f;
      voice->mod_atk_cur          = modatk;
      voice->mod_atk_inc          = 0.0f;
      voice->mod_rls_cur          = modrls;
      voice->mod_rls_inc          = 0.0f;
      voice->mod_three_d_cur      = modthree_d;
      voice->mod_three_d_inc      = 0.0f;
      voice->mod_sc_hpf_cur       = modsc_hpf;
      voice->mod_sc_hpf_inc       = 0.0f;
      voice->mod_sc_gain_cur      = modsc_gain;
      voice->mod_sc_gain_inc      = 0.0f;
      voice->mod_wet_gain_cur     = modwet_gain;
      voice->mod_wet_gain_inc     = 0.0f;
      loc_prepare(&voice->base);
   }

   // printf("xxx note_cur=%f\n", voice->note_cur);
   // printf("xxx prepare_block: numFrames=%u moda=%f\n", _numFrames, moda);
   // printf("xxx voice->voicebus_idx_0=%u voice->base.voice_bus_read_offset=%u\n", voice->voicebus_idx_0, voice->base.voice_bus_read_offset);
}

static void ST_PLUGIN_API loc_process_replace(st_plugin_voice_t  *_voice,
                                              int                 _bMonoIn,
                                              const float        *_samplesIn,
                                              float              *_samplesOut,
                                              unsigned int        _numFrames
                                              ) {
   (void)_bMonoIn;
   (void)_samplesIn;

   ST_PLUGIN_VOICE_CAST(cycle_rms_comp_stereo_1_voice_t);
   ST_PLUGIN_VOICE_SHARED_CAST(cycle_rms_comp_stereo_1_shared_t);

   // Mono output (replicate left to right channel)
   unsigned int j = 0u;
#ifndef STEREO
   unsigned int jStep = _bMonoIn ? 1u : 2u;
#endif // STEREO
   unsigned int k = 0u;
   for(unsigned int i = 0u; i < _numFrames; i++)
   {
      const float inL = _samplesIn[j];
#ifdef STEREO
      float outL;
      float outR;
      const float inR = _samplesIn[j + 1u];
#endif // STEREO
      float out;
#ifdef OVERSAMPLE_FACTOR
#ifdef STEREO
      float outOSL = 0.0f;
      float outOSR = 0.0f;
#else
      float outOS = 0.0f;
#endif // STEREO
#endif // OVERSAMPLE_FACTOR

#ifdef OVERSAMPLE_FACTOR
      for(unsigned int osi = 0u; osi < OVERSAMPLE_FACTOR; osi++)
#endif // OVERSAMPLE_FACTOR
      {
#ifdef STEREO
         out = outL = inL;
         outR = inR;
#else
         out = inL;
#endif // STEREO
      float tmp_f; (void)tmp_f;
      float tmp2_f; (void)tmp2_f;
      
      // ========
      // ======== lane "out" modIdx=0 modString=$m_three_d
      // ========
      
      // -- mod="$m_three_d" dstVar=out
      out = voice->mod_three_d_cur;
      
      // -- mod="fma" dstVar=out
      out = (out * 2.0f) + -1.0f;
      
      // -- mod="sto v_threed_l" dstVar=out
      voice->var_v_threed_l = out;
      
      // -- mod="rdl" dstVar=out
      out = inL;
      
      // -- mod="set __ti_rms_comp_1" dstVar=out
      voice->tmp2/*delta*/ = out;
      
      // ---- mod="set __ti_rms_comp_1" input "value" seq 1/1
      
      // -- mod="set __ti_rms_comp_1_out__v_in" dstVar=voice->tmp2/*delta*/
      voice->var___ti_rms_comp_1_out__v_in = voice->tmp2/*delta*/;
      
      // -- mod="svf" dstVar=voice->tmp2/*delta*/
      
      // ---- mod="svf" input "freq" seq 1/1
      
      // -- mod="$v_sc_hpf1" dstVar=voice->tmp6/*addsr_freq*/
      voice->tmp6/*addsr_freq*/ = voice->var_v_sc_hpf1;
      voice->tmp6/*addsr_freq*/ *= voice->sr_factor;
      voice->tmp3_svf_lp = voice->tmp3_svf_lp + (voice->tmp5_svf_bp * voice->tmp6/*addsr_freq*/);
      voice->tmp4_svf_hp = voice->tmp2/*delta*/ - voice->tmp3_svf_lp - (voice->tmp5_svf_bp * 0.7f);
      voice->tmp5_svf_bp = voice->tmp5_svf_bp + (voice->tmp4_svf_hp * voice->tmp6/*addsr_freq*/);
      voice->tmp2/*delta*/ = voice->tmp4_svf_hp;
      
      // -- mod="$v_sc_gain1" dstVar=voice->tmp2/*delta*/
      voice->tmp6/*seq*/ = voice->tmp2/*delta*/;
      voice->tmp6/*seq*/ = voice->var_v_sc_gain1;
      voice->tmp2/*delta*/ *= voice->tmp6/*seq*/;
      
      // -- mod="rms" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ = voice->tmp2/*delta*/ * voice->tmp2/*delta*/;
      voice->arr0_rms_history[voice->tmp7_rms_write_idx] = voice->tmp2/*delta*/;
      voice->tmp12/*rms_idx_prev*/ = voice->tmp7_rms_write_idx - 15;
      voice->tmp8_rms_sum = 0.0f;
      for(voice->tmp9_rms_init_i = 0; voice->tmp9_rms_init_i < 16; voice->tmp9_rms_init_i++)
      {
         if(voice->tmp12/*rms_idx_prev*/ < 0)
            voice->tmp8_rms_sum += voice->arr0_rms_history[voice->tmp12/*rms_idx_prev*/ + 16] * voice->arr1_rms_win[voice->tmp9_rms_init_i];
         else
            voice->tmp8_rms_sum += voice->arr0_rms_history[voice->tmp12/*rms_idx_prev*/] * voice->arr1_rms_win[voice->tmp9_rms_init_i];
         voice->tmp12/*rms_idx_prev*/++;
      }
      voice->tmp2/*delta*/ = voice->tmp8_rms_sum;
      voice->tmp2/*delta*/ = sqrtf(voice->tmp2/*delta*/);
      if(++voice->tmp7_rms_write_idx >= 16)
         voice->tmp7_rms_write_idx = 0;
      
      // -- mod="set __ti_rms_comp_1_out__v_rms" dstVar=voice->tmp2/*delta*/
      voice->var___ti_rms_comp_1_out__v_rms = voice->tmp2/*delta*/;
      
      // -- mod="$v_atk1" dstVar=voice->tmp2/*delta*/
      voice->tmp6/*seq*/ = voice->tmp2/*delta*/;
      voice->tmp6/*seq*/ = voice->var_v_atk1;
      voice->tmp2/*delta*/ *= voice->tmp6/*seq*/;
      
      // -- mod="0.0009" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ += 0.0009f;
      
      // -- mod="set __ti_rms_comp_1_out__v_slw" dstVar=voice->tmp2/*delta*/
      voice->var___ti_rms_comp_1_out__v_slw = voice->tmp2/*delta*/;
      
      // -- mod="$__ti_rms_comp_1_out__v_rms" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ = voice->var___ti_rms_comp_1_out__v_rms;
      
      // -- mod="slw" dstVar=voice->tmp2/*delta*/
      
      // ---- mod="slw" input "up" seq 1/1
      
      // -- mod="$__ti_rms_comp_1_out__v_slw" dstVar=voice->tmp6/*addsr_up*/
      voice->tmp6/*addsr_up*/ = voice->var___ti_rms_comp_1_out__v_slw;
      voice->tmp6/*addsr_up*/ *= voice->sr_factor;
      
      // ---- mod="slw" input "down" seq 1/1
      
      // -- mod="$v_rls1" dstVar=voice->tmp14/*addsr_down*/
      voice->tmp14/*addsr_down*/ = voice->var_v_rls1;
      voice->tmp14/*addsr_down*/ *= voice->sr_factor;
      if(voice->tmp13_slw_last < voice->tmp2/*delta*/)
         voice->tmp2/*delta*/ = voice->tmp13_slw_last + (voice->tmp2/*delta*/ - voice->tmp13_slw_last) * voice->tmp6/*addsr_up*/;
      else
         voice->tmp2/*delta*/ = voice->tmp13_slw_last + (voice->tmp2/*delta*/ - voice->tmp13_slw_last) * voice->tmp14/*addsr_down*/;
      voice->tmp13_slw_last = voice->tmp2/*delta*/;
      
      // -- mod="$v_punch1" dstVar=voice->tmp2/*delta*/
      voice->tmp6/*seq*/ = voice->tmp2/*delta*/;
      voice->tmp6/*seq*/ = voice->var_v_punch1;
      voice->tmp2/*delta*/ *= voice->tmp6/*seq*/;
      
      // -- mod="clp" dstVar=voice->tmp2/*delta*/
      if(voice->tmp2/*delta*/ > 1.0f) voice->tmp2/*delta*/ = 1.0f;
      else if(voice->tmp2/*delta*/ < 0.0f) voice->tmp2/*delta*/ = 0.0f;
      
      // -- mod="1" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ += 1.0f;
      
      // -- mod="rcp" dstVar=voice->tmp2/*delta*/
      if(0.0f != voice->tmp2/*delta*/)
         voice->tmp2/*delta*/ = 1.0f / voice->tmp2/*delta*/;
      
      // -- mod="0.5" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ -= 0.5f;
      
      // -- mod="clp" dstVar=voice->tmp2/*delta*/
      if(voice->tmp2/*delta*/ > 4.0f) voice->tmp2/*delta*/ = 4.0f;
      else if(voice->tmp2/*delta*/ < 0.0f) voice->tmp2/*delta*/ = 0.0f;
      
      // -- mod="0.1" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ += 0.1f;
      
      // -- mod="pow" dstVar=voice->tmp2/*delta*/
      
      // ---- mod="pow" input "exp" seq 1/1
      
      // -- mod="$v_exp1" dstVar=voice->tmp6/*exp*/
      voice->tmp6/*exp*/ = voice->var_v_exp1;
      voice->tmp2/*delta*/ = mathPowerf(voice->tmp2/*delta*/, voice->tmp6/*exp*/);
      
      // -- mod="3.2" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ *= 3.2f;
      
      // -- mod="clp" dstVar=voice->tmp2/*delta*/
      if(voice->tmp2/*delta*/ > 4.0f) voice->tmp2/*delta*/ = 4.0f;
      else if(voice->tmp2/*delta*/ < 0.0f) voice->tmp2/*delta*/ = 0.0f;
      
      // -- mod="ipl" dstVar=voice->tmp2/*delta*/
      voice->tmp6/*a*/ = voice->tmp2/*delta*/;
      
      // ---- mod="ipl" input "a" seq 1/1
      
      // -- mod="$__ti_rms_comp_1_out__v_in" dstVar=voice->tmp6/*a*/
      voice->tmp6/*a*/ = voice->var___ti_rms_comp_1_out__v_in;
      voice->tmp14/*b*/ = voice->tmp2/*delta*/;
      
      // ---- mod="ipl" input "b" seq 1/1
      
      // -- mod="$__ti_rms_comp_1_out__v_in" dstVar=voice->tmp14/*b*/
      voice->tmp15/*seq*/ = voice->tmp14/*b*/;
      voice->tmp15/*seq*/ = voice->var___ti_rms_comp_1_out__v_in;
      voice->tmp14/*b*/ *= voice->tmp15/*seq*/;
      
      // -- mod="$v_wet_gain1" dstVar=voice->tmp14/*b*/
      voice->tmp15/*seq*/ = voice->tmp14/*b*/;
      voice->tmp15/*seq*/ = voice->var_v_wet_gain1;
      voice->tmp14/*b*/ *= voice->tmp15/*seq*/;
      voice->tmp15/*t*/ = voice->tmp2/*delta*/;
      
      // ---- mod="ipl" input "t" seq 1/1
      
      // -- mod="$m_wet" dstVar=voice->tmp15/*t*/
      voice->tmp15/*t*/ = voice->mod_wet_cur;
      voice->tmp2/*delta*/ = voice->tmp6/*a*/ + (voice->tmp14/*b*/ - voice->tmp6/*a*/) * voice->tmp15/*t*/;
      voice->var___ti_rms_comp_1 = voice->tmp2/*delta*/;
      
      // -- mod="$__ti_rms_comp_1" dstVar=out
      out = voice->var___ti_rms_comp_1;
      
      // -- mod="clp" dstVar=out
      if(out > 0.999f) out = 0.999f;
      else if(out < -0.999f) out = -0.999f;
      
      // -- mod="wrl" dstVar=out
      outL = out;
      
      // -- mod="$m_three_d" dstVar=out
      out = voice->mod_three_d_cur;
      
      // -- mod="fma" dstVar=out
      out = (out * -2.0f) + 1.0f;
      
      // -- mod="sto v_threed_r" dstVar=out
      voice->var_v_threed_r = out;
      
      // -- mod="rdr" dstVar=out
      out = inR;
      
      // -- mod="set __ti_rms_comp_2" dstVar=out
      voice->tmp2/*delta*/ = out;
      
      // ---- mod="set __ti_rms_comp_2" input "value" seq 1/1
      
      // -- mod="set __ti_rms_comp_2_out__v_in" dstVar=voice->tmp2/*delta*/
      voice->var___ti_rms_comp_2_out__v_in = voice->tmp2/*delta*/;
      
      // -- mod="svf" dstVar=voice->tmp2/*delta*/
      
      // ---- mod="svf" input "freq" seq 1/1
      
      // -- mod="$v_sc_hpf2" dstVar=voice->tmp6/*addsr_freq*/
      voice->tmp6/*addsr_freq*/ = voice->var_v_sc_hpf2;
      voice->tmp6/*addsr_freq*/ *= voice->sr_factor;
      voice->tmp16_svf_lp = voice->tmp16_svf_lp + (voice->tmp18_svf_bp * voice->tmp6/*addsr_freq*/);
      voice->tmp17_svf_hp = voice->tmp2/*delta*/ - voice->tmp16_svf_lp - (voice->tmp18_svf_bp * 0.7f);
      voice->tmp18_svf_bp = voice->tmp18_svf_bp + (voice->tmp17_svf_hp * voice->tmp6/*addsr_freq*/);
      voice->tmp2/*delta*/ = voice->tmp17_svf_hp;
      
      // -- mod="$v_sc_gain2" dstVar=voice->tmp2/*delta*/
      voice->tmp6/*seq*/ = voice->tmp2/*delta*/;
      voice->tmp6/*seq*/ = voice->var_v_sc_gain2;
      voice->tmp2/*delta*/ *= voice->tmp6/*seq*/;
      
      // -- mod="rms" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ = voice->tmp2/*delta*/ * voice->tmp2/*delta*/;
      voice->arr2_rms_history[voice->tmp19_rms_write_idx] = voice->tmp2/*delta*/;
      voice->tmp12/*rms_idx_prev*/ = voice->tmp19_rms_write_idx - 15;
      voice->tmp20_rms_sum = 0.0f;
      for(voice->tmp21_rms_init_i = 0; voice->tmp21_rms_init_i < 16; voice->tmp21_rms_init_i++)
      {
         if(voice->tmp12/*rms_idx_prev*/ < 0)
            voice->tmp20_rms_sum += voice->arr2_rms_history[voice->tmp12/*rms_idx_prev*/ + 16] * voice->arr3_rms_win[voice->tmp21_rms_init_i];
         else
            voice->tmp20_rms_sum += voice->arr2_rms_history[voice->tmp12/*rms_idx_prev*/] * voice->arr3_rms_win[voice->tmp21_rms_init_i];
         voice->tmp12/*rms_idx_prev*/++;
      }
      voice->tmp2/*delta*/ = voice->tmp20_rms_sum;
      voice->tmp2/*delta*/ = sqrtf(voice->tmp2/*delta*/);
      if(++voice->tmp19_rms_write_idx >= 16)
         voice->tmp19_rms_write_idx = 0;
      
      // -- mod="set __ti_rms_comp_2_out__v_rms" dstVar=voice->tmp2/*delta*/
      voice->var___ti_rms_comp_2_out__v_rms = voice->tmp2/*delta*/;
      
      // -- mod="$v_atk2" dstVar=voice->tmp2/*delta*/
      voice->tmp6/*seq*/ = voice->tmp2/*delta*/;
      voice->tmp6/*seq*/ = voice->var_v_atk2;
      voice->tmp2/*delta*/ *= voice->tmp6/*seq*/;
      
      // -- mod="0.0009" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ += 0.0009f;
      
      // -- mod="set __ti_rms_comp_2_out__v_slw" dstVar=voice->tmp2/*delta*/
      voice->var___ti_rms_comp_2_out__v_slw = voice->tmp2/*delta*/;
      
      // -- mod="$__ti_rms_comp_2_out__v_rms" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ = voice->var___ti_rms_comp_2_out__v_rms;
      
      // -- mod="slw" dstVar=voice->tmp2/*delta*/
      
      // ---- mod="slw" input "up" seq 1/1
      
      // -- mod="$__ti_rms_comp_2_out__v_slw" dstVar=voice->tmp6/*addsr_up*/
      voice->tmp6/*addsr_up*/ = voice->var___ti_rms_comp_2_out__v_slw;
      voice->tmp6/*addsr_up*/ *= voice->sr_factor;
      
      // ---- mod="slw" input "down" seq 1/1
      
      // -- mod="$v_rls2" dstVar=voice->tmp14/*addsr_down*/
      voice->tmp14/*addsr_down*/ = voice->var_v_rls2;
      voice->tmp14/*addsr_down*/ *= voice->sr_factor;
      if(voice->tmp24_slw_last < voice->tmp2/*delta*/)
         voice->tmp2/*delta*/ = voice->tmp24_slw_last + (voice->tmp2/*delta*/ - voice->tmp24_slw_last) * voice->tmp6/*addsr_up*/;
      else
         voice->tmp2/*delta*/ = voice->tmp24_slw_last + (voice->tmp2/*delta*/ - voice->tmp24_slw_last) * voice->tmp14/*addsr_down*/;
      voice->tmp24_slw_last = voice->tmp2/*delta*/;
      
      // -- mod="$v_punch2" dstVar=voice->tmp2/*delta*/
      voice->tmp6/*seq*/ = voice->tmp2/*delta*/;
      voice->tmp6/*seq*/ = voice->var_v_punch2;
      voice->tmp2/*delta*/ *= voice->tmp6/*seq*/;
      
      // -- mod="clp" dstVar=voice->tmp2/*delta*/
      if(voice->tmp2/*delta*/ > 1.0f) voice->tmp2/*delta*/ = 1.0f;
      else if(voice->tmp2/*delta*/ < 0.0f) voice->tmp2/*delta*/ = 0.0f;
      
      // -- mod="1" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ += 1.0f;
      
      // -- mod="rcp" dstVar=voice->tmp2/*delta*/
      if(0.0f != voice->tmp2/*delta*/)
         voice->tmp2/*delta*/ = 1.0f / voice->tmp2/*delta*/;
      
      // -- mod="0.5" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ -= 0.5f;
      
      // -- mod="clp" dstVar=voice->tmp2/*delta*/
      if(voice->tmp2/*delta*/ > 4.0f) voice->tmp2/*delta*/ = 4.0f;
      else if(voice->tmp2/*delta*/ < 0.0f) voice->tmp2/*delta*/ = 0.0f;
      
      // -- mod="0.1" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ += 0.1f;
      
      // -- mod="pow" dstVar=voice->tmp2/*delta*/
      
      // ---- mod="pow" input "exp" seq 1/1
      
      // -- mod="$v_exp2" dstVar=voice->tmp6/*exp*/
      voice->tmp6/*exp*/ = voice->var_v_exp2;
      voice->tmp2/*delta*/ = mathPowerf(voice->tmp2/*delta*/, voice->tmp6/*exp*/);
      
      // -- mod="3.2" dstVar=voice->tmp2/*delta*/
      voice->tmp2/*delta*/ *= 3.2f;
      
      // -- mod="clp" dstVar=voice->tmp2/*delta*/
      if(voice->tmp2/*delta*/ > 4.0f) voice->tmp2/*delta*/ = 4.0f;
      else if(voice->tmp2/*delta*/ < 0.0f) voice->tmp2/*delta*/ = 0.0f;
      
      // -- mod="ipl" dstVar=voice->tmp2/*delta*/
      voice->tmp6/*a*/ = voice->tmp2/*delta*/;
      
      // ---- mod="ipl" input "a" seq 1/1
      
      // -- mod="$__ti_rms_comp_2_out__v_in" dstVar=voice->tmp6/*a*/
      voice->tmp6/*a*/ = voice->var___ti_rms_comp_2_out__v_in;
      voice->tmp14/*b*/ = voice->tmp2/*delta*/;
      
      // ---- mod="ipl" input "b" seq 1/1
      
      // -- mod="$__ti_rms_comp_2_out__v_in" dstVar=voice->tmp14/*b*/
      voice->tmp15/*seq*/ = voice->tmp14/*b*/;
      voice->tmp15/*seq*/ = voice->var___ti_rms_comp_2_out__v_in;
      voice->tmp14/*b*/ *= voice->tmp15/*seq*/;
      
      // -- mod="$v_wet_gain2" dstVar=voice->tmp14/*b*/
      voice->tmp15/*seq*/ = voice->tmp14/*b*/;
      voice->tmp15/*seq*/ = voice->var_v_wet_gain2;
      voice->tmp14/*b*/ *= voice->tmp15/*seq*/;
      voice->tmp15/*t*/ = voice->tmp2/*delta*/;
      
      // ---- mod="ipl" input "t" seq 1/1
      
      // -- mod="$m_wet" dstVar=voice->tmp15/*t*/
      voice->tmp15/*t*/ = voice->mod_wet_cur;
      voice->tmp2/*delta*/ = voice->tmp6/*a*/ + (voice->tmp14/*b*/ - voice->tmp6/*a*/) * voice->tmp15/*t*/;
      voice->var___ti_rms_comp_2 = voice->tmp2/*delta*/;
      
      // -- mod="$__ti_rms_comp_2" dstVar=out
      out = voice->var___ti_rms_comp_2;
      
      // -- mod="clp" dstVar=out
      if(out > 0.999f) out = 0.999f;
      else if(out < -0.999f) out = -0.999f;
      
      // -- mod="wrr" dstVar=out
      outR = out;

      /* end calc */

#ifdef OVERSAMPLE_FACTOR
#ifdef STEREO
         outOSL += outL;
         outOSR += outR;
#else
         outOS += out;
#endif // STEREO
#endif // OVERSAMPLE_FACTOR
         voice->note_speed_cur += voice->note_speed_inc;
         voice->note_cur       += voice->note_inc;
         voice->mod_wet_cur        += voice->mod_wet_inc;
         voice->mod_punch_cur      += voice->mod_punch_inc;
         voice->mod_exp_cur        += voice->mod_exp_inc;
         voice->mod_atk_cur        += voice->mod_atk_inc;
         voice->mod_rls_cur        += voice->mod_rls_inc;
         voice->mod_three_d_cur    += voice->mod_three_d_inc;
         voice->mod_sc_hpf_cur     += voice->mod_sc_hpf_inc;
         voice->mod_sc_gain_cur    += voice->mod_sc_gain_inc;
         voice->mod_wet_gain_cur   += voice->mod_wet_gain_inc;
      }
#ifdef OVERSAMPLE_FACTOR
      // Apply lowpass filter before downsampling
      //   (note) normalized Fc = F/Fs = 0.442947 / sqrt(oversample_factor^2 - 1)
#ifdef STEREO
      outL = outOSL * (1.0f / OVERSAMPLE_FACTOR);
      outR = outOSR * (1.0f / OVERSAMPLE_FACTOR);
#else
      out = outOS * (1.0f / OVERSAMPLE_FACTOR);
#endif // STEREO
#endif // OVERSAMPLE_FACTOR
#ifdef STEREO
      outL = Dstplugin_fix_denorm_32(outL);
      outR = Dstplugin_fix_denorm_32(outR);
#else
      out = Dstplugin_fix_denorm_32(out);
#endif // STEREO
#ifdef STEREO
      _samplesOut[k]      = outL;
      _samplesOut[k + 1u] = outR;
#else
      _samplesOut[k]      = out;
      _samplesOut[k + 1u] = out;
#endif // STEREO

      // Next frame
      k += 2u;
#ifdef STEREO
      j += 2u;
#else
      j += jStep;
#endif // STEREO
   } /* loop numFrames */
}

static st_plugin_shared_t *ST_PLUGIN_API loc_shared_new(st_plugin_info_t *_info) {
   cycle_rms_comp_stereo_1_shared_t *ret = (cycle_rms_comp_stereo_1_shared_t *)malloc(sizeof(cycle_rms_comp_stereo_1_shared_t));
   if(NULL != ret)
   {
      memset((void*)ret, 0, sizeof(*ret));
      ret->base.info  = _info;
      memcpy((void*)ret->params, (void*)loc_param_resets, NUM_PARAMS * sizeof(float));
   }
   return &ret->base;
}

static void ST_PLUGIN_API loc_shared_delete(st_plugin_shared_t *_shared) {
   free((void*)_shared);
}

static st_plugin_voice_t *ST_PLUGIN_API loc_voice_new(st_plugin_info_t *_info, unsigned int _voiceIdx) {
   cycle_rms_comp_stereo_1_voice_t *voice = (cycle_rms_comp_stereo_1_voice_t *)malloc(sizeof(cycle_rms_comp_stereo_1_voice_t));
   if(NULL != voice)
   {
      memset((void*)voice, 0, sizeof(*voice));
      voice->base.info = _info;
      voice->tmp7_rms_write_idx = 0;
      voice->tmp9_rms_init_i = 0;
      voice->tmp19_rms_write_idx = 0;
      voice->tmp21_rms_init_i = 0;
   }
   return &voice->base;
}

static void ST_PLUGIN_API loc_voice_delete(st_plugin_voice_t *_voice) {
   ST_PLUGIN_VOICE_CAST(cycle_rms_comp_stereo_1_voice_t);

   free((void*)_voice);
   }

static void ST_PLUGIN_API loc_plugin_exit(st_plugin_info_t *_info) {
   free((void*)_info);
}

#ifdef USE_CYCLE_SINE_TBL
static void loc_calc_sine_tbl(void) {
#define QCOS_BITS 16
#define QCOS_ONE  (1 << QCOS_BITS)
#define QCOS_MASK (QCOS_ONE - 1)
   // (note) same as in TSR "C" implementation
   float *qcos = cycle_sine_tbl_f + 4096; // quarter cos tbl

   // calc quarter cos tbl
   int k = 0;
   for(int a = 0; a < (QCOS_ONE/4); a += (QCOS_ONE/16384)/*4*/)  // 4096 elements
   {
      int x = a - ((int)(QCOS_ONE * 0.25 + 0.5)) + ((a + ((int)(QCOS_ONE * 0.25 + 0.5)))&~QCOS_MASK);
      x = ((x * ((x<0?-x:x) - ((int)(QCOS_ONE * 0.5 + 0.5)))) >> QCOS_BITS) << 4;
      x += (((((int)(QCOS_ONE * 0.225 + 0.5)) * x) >> QCOS_BITS) * ((x<0?-x:x) - QCOS_ONE)) >> QCOS_BITS;
      qcos[k++] = x / float(QCOS_ONE);
   }

   // 0..90deg (rev qtbl)
   int j = 4096;
   k = 0;
   loop(4096)
      cycle_sine_tbl_f[k++] = qcos[--j];

   // 90..180deg = cos tbl
   k += 4096;

   // 180..360deg (y-flip first half of tbl)
   j = 0;
   loop(8192)
      cycle_sine_tbl_f[k++] = -cycle_sine_tbl_f[j++];

#ifdef USE_CYCLE_SINE_TBL_I
   loop(16384)
      cycle_sine_tbl_i[i] = (short)(cycle_sine_tbl_f[i] * 2048.0f/*FX_ONE*/);
#endif // USE_CYCLE_SINE_TBL_I
}
#endif // USE_CYCLE_SINE_TBL

#ifdef USE_CYCLE_HSE_TBL
#endif // USE_CYCLE_HSE_TBL

extern "C" {
st_plugin_info_t *cycle_rms_comp_stereo_1_init(void) {
   cycle_rms_comp_stereo_1_info_t *ret = (cycle_rms_comp_stereo_1_info_t *)malloc(sizeof(cycle_rms_comp_stereo_1_info_t));

   if(NULL != ret)
   {
      memset(ret, 0, sizeof(*ret));

      ret->base.api_version = ST_PLUGIN_API_VERSION;
      ret->base.id          = "cycle_rms_comp_stereo_1";  // unique id. don't change this in future builds.
      ret->base.author      = "bsp";
      ret->base.name        = "cycle_rms_comp_stereo_1";
      ret->base.short_name  = "cycle_rms_comp_stereo_1";
      ret->base.flags       = ST_PLUGIN_FLAG_FX;
      ret->base.category    = ST_PLUGIN_CAT_COMPRESSOR;
      ret->base.num_params  = NUM_PARAMS;
      ret->base.num_mods    = NUM_MODS;

      ret->base.shared_new                          = &loc_shared_new;
      ret->base.shared_delete                       = &loc_shared_delete;
      ret->base.voice_new                           = &loc_voice_new;
      ret->base.voice_delete                        = &loc_voice_delete;
#ifndef CYCLE_SKIP_UI
      ret->base.get_param_name                      = &loc_get_param_name;
      ret->base.get_param_group_name                = &loc_get_param_group_name;
      ret->base.get_param_group_idx                 = &loc_get_param_group_idx;
      ret->base.get_param_section_name              = &loc_get_param_section_name;
      ret->base.get_param_section_idx               = &loc_get_param_section_idx;
      ret->base.get_param_reset                     = &loc_get_param_reset;
      ret->base.query_dynamic_param_preset_values   = &loc_query_dynamic_param_preset_values;
      ret->base.query_dynamic_param_preset_name     = &loc_query_dynamic_param_preset_name;
      ret->base.get_array_param_size                = &loc_get_array_param_size;
      ret->base.get_array_param_num_variations      = &loc_get_array_param_num_variations;
      ret->base.get_array_param_variation_ptr       = &loc_get_array_param_variation_ptr;
      ret->base.set_array_param_edit_variation_idx  = &loc_set_array_param_edit_variation_idx;
      ret->base.get_array_param_element_name        = &loc_get_array_param_element_name;
      ret->base.get_array_param_element_value_range = &loc_get_array_param_element_value_range;
      ret->base.get_array_param_element_reset       = &loc_get_array_param_element_reset;
      ret->base.update_lut                          = &loc_update_lut;
#endif // CYCLE_SKIP_UI
      ret->base.get_param_value                     = &loc_get_param_value;
      ret->base.set_param_value                     = &loc_set_param_value;
#ifndef CYCLE_SKIP_UI
      ret->base.get_mod_name                        = &loc_get_mod_name;
#endif // CYCLE_SKIP_UI
      ret->base.set_sample_rate                     = &loc_set_sample_rate;
      ret->base.set_bpm                             = &loc_set_bpm;
      ret->base.note_on                             = &loc_note_on;
      ret->base.set_mod_value                       = &loc_set_mod_value;
      ret->base.prepare_block                       = &loc_prepare_block;
      ret->base.process_replace                     = &loc_process_replace;
      ret->base.plugin_exit                         = &loc_plugin_exit;

#ifdef USE_CYCLE_SINE_TBL
      loc_calc_sine_tbl();
#endif // USE_CYCLE_SINE_TBL
   }

   return &ret->base;
}

#ifndef STFX_SKIP_MAIN_INIT
ST_PLUGIN_APICALL st_plugin_info_t *ST_PLUGIN_API st_plugin_init(unsigned int _pluginIdx) {
   switch(_pluginIdx)
   {
      case 0u:
         return cycle_rms_comp_stereo_1_init();
   }
   return NULL;
}
#endif // STFX_SKIP_MAIN_INIT

} // extern "C"
