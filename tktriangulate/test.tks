
use tktriangulate;

Triangulate tri;
// tri.engine =TRIANGULATE_POLYPARTITION_TRIANGULATE_EC;
tri.engine = TRIANGULATE_VGTESSELATE_DEFAULT;


function GenerateTestData() {
   String buf;
   if(buf.loadLocal("polypartition-master/test/test_input.txt", true/*bRemoveCR*/))
   {
      // Read test data
      StringArray lines <= buf.splitChar('\n');
      String *line;
      int lineIdx = 1;
      int numPolys = lines.get(0).trim();
      while(lineIdx < lines.numElements)
      {
         int numPoints = lines.get(lineIdx++).trim();
         int bHole = lines.get(lineIdx++).trim();
         FloatArray vertices; vertices.empty();
         loop(numPoints)
         {
            StringArray sxy <= lines.get(lineIdx++).trim().splitChar(' ');
            vertices.add(sxy.get(0));
            vertices.add(sxy.get(1));
         }
         trace "xxx poly has "+(vertices.numElements/2)+" vertices (bHole="+bHole+")";
         tri.addPolygon(vertices, bHole);
      }

      // Triangulate
      FloatArray triVertices;
      tri.triangulate();
      tri.storeResult(triVertices);
      trace "xxx result: "+(triVertices.numElements/(3*2))+" tris, "+(triVertices.numElements/2)+" vertices";

      // Write polygons
      buf.empty();
      int outNumTris = triVertices.numElements/(3*2);
      buf.append(String(outNumTris));
      buf.append("\n");
      int outTriIdx = 0;
      int outK = 0;
      loop(outNumTris)
      {
         int outVertexIdx;
         buf.append("3\n0\n");  // num points + hole flag
         loop(3)
         {
            buf.append(String(triVertices.get(outK++)));
            buf.append(" ");
            buf.append(String(triVertices.get(outK++)));
            buf.append("\n");
         }
      }
      buf.saveLocal("polypartition-master/test/test_triangulate_OPT_tkpolypartition.txt");
   }

}

GenerateTestData();
