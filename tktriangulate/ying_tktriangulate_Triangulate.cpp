// ---- ying_tktriangulate_Triangulate.cpp: auto generated by YInG - the YAC interface generator (Tue, 11/Jun/2024 12:42:24)

#ifndef YAC_NO_HOST
void  YAC_CALL Triangulate__free    (void *                        );
void  YAC_CALL Triangulate__freeInput(void *                       );
void  YAC_CALL Triangulate__freeResult(void *                      );
void  YAC_CALL Triangulate__setEngine(void *, yacmemptr            );
sSI   YAC_CALL Triangulate__usePolyPartition(void *                );
sSI   YAC_CALL Triangulate__useVGTesselate(void *                  );
void  YAC_CALL Triangulate__addPolygonRegionEx(void *, yacmemptr   );
void  YAC_CALL Triangulate__addPolygonEx(void *, yacmemptr         );
void  YAC_CALL Triangulate__addPolygon(void *, yacmemptr           );
void  YAC_CALL Triangulate__addPolygonHole(void *, yacmemptr       );
void  YAC_CALL Triangulate__addPolygonRegion(void *, yacmemptr     );
void  YAC_CALL Triangulate__addPolygonRegionHole(void *, yacmemptr );
void  YAC_CALL Triangulate__triangulate(void *                     );
sSI   YAC_CALL Triangulate__storeResult(void *, yacmemptr          );
sSI   YAC_CALL Triangulate__storeResultIndexed(void *, yacmemptr   );
#endif // YAC_NO_HOST

// ------------------ YAC class "_Triangulate" reflection map (implementation) ------------------
sUI          YAC_VCALL _Triangulate::yacMemberGetNum                  (void) {return 0;}
const char **YAC_VCALL _Triangulate::yacMemberGetNames                (void) {return 0;}
const sUI   *YAC_VCALL _Triangulate::yacMemberGetTypes                (void) {return 0;}
const char **YAC_VCALL _Triangulate::yacMemberGetObjectTypes          (void) {return 0;}
const sU8  **YAC_VCALL _Triangulate::yacMemberGetOffsets              (void) {return (const sU8**)0;}
sUI          YAC_VCALL _Triangulate::yacMethodGetNum                  (void) {return 16;}
const char **YAC_VCALL _Triangulate::yacMethodGetNames                (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"operator", "free", "freeInput", "freeResult", "setEngine", "usePolyPartition", "useVGTesselate", "addPolygonRegionEx", "addPolygonEx", "addPolygon", "addPolygonHole", "addPolygonRegion", "addPolygonRegionHole", "triangulate", "storeResult", "storeResultIndexed"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Triangulate::yacMethodGetNumParameters        (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={2, 0, 0, 0, 1, 0, 0, 4, 2, 1, 1, 3, 3, 0, 1, 2}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI  **YAC_VCALL _Triangulate::yacMethodGetParameterTypes       (void) {
#ifndef YAC_NO_HOST
static const sUI rt0[]={1,3};static const sUI rt1[]={0,};static const sUI rt2[]={0,};static const sUI rt3[]={0,};static const sUI rt4[]={1,};static const sUI rt5[]={0,};static const sUI rt6[]={0,};static const sUI rt7[]={3, 1, 1, 1,};static const sUI rt8[]={3, 1,};static const sUI rt9[]={3,};static const sUI rt10[]={3,};static const sUI rt11[]={3, 1, 1,};static const sUI rt12[]={3, 1, 1,};static const sUI rt13[]={0,};static const sUI rt14[]={3,};static const sUI rt15[]={3, 3,};static const sUI *r[]={rt0, rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char***YAC_VCALL _Triangulate::yacMethodGetParameterObjectTypes (void) {
#ifndef YAC_NO_HOST
static const char *rs0[]={0,"",};static const char *rs1[]={(const char*)0,};static const char *rs2[]={(const char*)0,};static const char *rs3[]={(const char*)0,};static const char *rs4[]={(const char*)0,};static const char *rs5[]={(const char*)0,};static const char *rs6[]={(const char*)0,};static const char *rs7[]={(const char*)0, (const char*)0, (const char*)0, (const char*)0,};static const char *rs8[]={(const char*)0, (const char*)0,};static const char *rs9[]={(const char*)0,};static const char *rs10[]={(const char*)0,};static const char *rs11[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs12[]={(const char*)0, (const char*)0, (const char*)0,};static const char *rs13[]={(const char*)0,};static const char *rs14[]={(const char*)0,};static const char *rs15[]={(const char*)0, (const char*)0,};static const char**r[]={rs0, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10, rs11, rs12, rs13, rs14, rs15}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Triangulate::yacMethodGetReturnTypes          (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={4, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const char **YAC_VCALL _Triangulate::yacMethodGetReturnObjectTypes    (void) {
#ifndef YAC_NO_HOST
static const char *r[]={"", (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0, (const char*)0}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const void **YAC_VCALL _Triangulate::yacMethodGetAdr                  (void) {
#ifndef YAC_NO_HOST
static const void *r[]={(void*)Object__operator, (void*)Triangulate__free, (void*)Triangulate__freeInput, (void*)Triangulate__freeResult, (void*)Triangulate__setEngine, (void*)Triangulate__usePolyPartition, (void*)Triangulate__useVGTesselate, (void*)Triangulate__addPolygonRegionEx, (void*)Triangulate__addPolygonEx, (void*)Triangulate__addPolygon, (void*)Triangulate__addPolygonHole, (void*)Triangulate__addPolygonRegion, (void*)Triangulate__addPolygonRegionHole, (void*)Triangulate__triangulate, (void*)Triangulate__storeResult, (void*)Triangulate__storeResultIndexed}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
sUI          YAC_VCALL _Triangulate::yacConstantGetNum                (void) {return 6;}
const char **YAC_VCALL _Triangulate::yacConstantGetNames              (void) {
#ifndef YAC_NO_HOST
static const char*r[]={"TRIANGULATE_POLYPARTITION_TRIANGULATE_EC", "TRIANGULATE_POLYPARTITION_TRIANGULATE_OPT", "TRIANGULATE_POLYPARTITION_TRIANGULATE_MONO", "TRIANGULATE_POLYPARTITION_CONVEXPARTITION_HM", "TRIANGULATE_POLYPARTITION_CONVEXPARTITION_OPT", "TRIANGULATE_VGTESSELATE_DEFAULT"}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
const sUI   *YAC_VCALL _Triangulate::yacConstantGetTypes              (void) {
#ifndef YAC_NO_HOST
static const sUI r[]={1, 1, 1, 1, 1, 1}; return r;
#else
return 0;
#endif // YAC_NO_HOST
}
yacmemptr    YAC_VCALL _Triangulate::yacConstantGetValues             (void) {yacmemptr m;
#ifndef YAC_NO_HOST
static sUI r[6]; m.ui=r; m.si[0]=(sSI)0;m.si[1]=(sSI)1;m.si[2]=(sSI)2;m.si[3]=(sSI)3;m.si[4]=(sSI)4;m.si[5]=(sSI)5;; return m;
#else
m.any = 0; return m;
#endif // YAC_NO_HOST
}

YAC_C(_Triangulate, "Triangulate");

#ifndef YAC_NO_HOST
void  YAC_CALL Triangulate__free    (void *_o                                ) {((_Triangulate*)_o)->free();}
void  YAC_CALL Triangulate__freeInput(void *_o                               ) {((_Triangulate*)_o)->freeInput();}
void  YAC_CALL Triangulate__freeResult(void *_o                              ) {((_Triangulate*)_o)->freeResult();}
void  YAC_CALL Triangulate__setEngine(void *_o, yacmemptr _args              ) {((_Triangulate*)_o)->setEngine(_args.mem[0].si);}
sSI   YAC_CALL Triangulate__usePolyPartition(void *_o                        ) {return (sSI)((_Triangulate*)_o)->usePolyPartition();}
sSI   YAC_CALL Triangulate__useVGTesselate(void *_o                          ) {return (sSI)((_Triangulate*)_o)->useVGTesselate();}
void  YAC_CALL Triangulate__addPolygonRegionEx(void *_o, yacmemptr _args     ) {((_Triangulate*)_o)->addPolygonRegionEx(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si, _args.mem[3].si);}
void  YAC_CALL Triangulate__addPolygonEx(void *_o, yacmemptr _args           ) {((_Triangulate*)_o)->addPolygonEx(_args.mem[0].o, _args.mem[1].si);}
void  YAC_CALL Triangulate__addPolygon(void *_o, yacmemptr _args             ) {((_Triangulate*)_o)->addPolygon(_args.mem[0].o);}
void  YAC_CALL Triangulate__addPolygonHole(void *_o, yacmemptr _args         ) {((_Triangulate*)_o)->addPolygonHole(_args.mem[0].o);}
void  YAC_CALL Triangulate__addPolygonRegion(void *_o, yacmemptr _args       ) {((_Triangulate*)_o)->addPolygonRegion(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL Triangulate__addPolygonRegionHole(void *_o, yacmemptr _args   ) {((_Triangulate*)_o)->addPolygonRegionHole(_args.mem[0].o, _args.mem[1].si, _args.mem[2].si);}
void  YAC_CALL Triangulate__triangulate(void *_o                             ) {((_Triangulate*)_o)->triangulate();}
sSI   YAC_CALL Triangulate__storeResult(void *_o, yacmemptr _args            ) {return (sSI)((_Triangulate*)_o)->storeResult(_args.mem[0].o);}
sSI   YAC_CALL Triangulate__storeResultIndexed(void *_o, yacmemptr _args     ) {return (sSI)((_Triangulate*)_o)->storeResultIndexed(_args.mem[0].o, _args.mem[1].o);}
#endif // YAC_NO_HOST
